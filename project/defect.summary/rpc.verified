CR Number                     : 13625
Defect or Enhancement?        : enh
CR in Code, Doc, or Test?     : doc
Inter-dependent CRs           : 
Project Name                  : dce
H/W Ref Platform              : all
S/W Ref Platform              : all
Component Name                : rpc
Subcomponent Name             : app_gd
Short Description             : add single-threaded client
Reported Date                 : 9/4/96
Found in Baseline             : 1.2.2
Found Date                    : 9/4/96
Severity                      : B
Priority                      : 2
Status                        : verified
Duplicate Of                  : 
Fix By Baseline               : 1.2
Fixed In Baseline             : 1.2.2
Affected File(s)              : app_gd/rpc/rpc_and_dce.gpsml
Diff supplied by              : 
Diff release                  : 
Sensitivity                   : public

[9/4/96 public]

Adding single-threaded client; the default behavior for an
application client is to be single-threaded.

[9/5/96 public]

Status changed to verified. Fix verified by jss.



CR Number                     : 13530
Defect or Enhancement?        : enh
CR in Code, Doc, or Test?     : doc
Inter-dependent CRs           : 
Project Name                  : dce
H/W Ref Platform              : all
S/W Ref Platform              : all
Component Name                : rpc
Subcomponent Name             : app_ref
Short Description             : add new user-to-user auth functionality.
Reported Date                 : 6/19/96
Found in Baseline             : 1.2.2
Found Date                    : 6/19/96
Severity                      : E
Priority                      : 4
Status                        : verified
Duplicate Of                  : 
Fix By Baseline               : 1.2.2
Fixed In Baseline             : 1.2.2
Affected File(s)              : 
In app_ref: rpc_server_register-auth_ident.3rpc (new file), 
rpc_server_register_auth_info.3rpc, and sec_intro.3sec
In command_ref:  account.8dce
Diff supplied by              : 
Diff release                  : 
Sensitivity                   : public

[7/18/96 public]
Fixed and verified.  Verified by burati.

[6/19/96 public]

This CR is created to cover manpages changes and addtions for new user-to-user auth.



CR Number                     : 13492
Defect or Enhancement?        : def
CR in Code, Doc, or Test?     : doc
Inter-dependent CRs           : 
Project Name                  : dce
H/W Ref Platform              : all
S/W Ref Platform              : all
Component Name                : rpc
Subcomponent Name             : app_gd
Short Description             : idlcxx info missing from guide
Reported Date                 : 6/5/96
Found in Baseline             : 1.2.1
Found Date                    : 6/5/96
Severity                      : B
Priority                      : 2
Status                        : verified
Duplicate Of                  : 
Fix By Baseline               : 1.2.2
Fixed In Baseline             : 1.2.2
Affected File(s)              : dce_books/app_gd/rpc/idl.gpsml, dce_books/app_gd/rpc/acf.gpsml
Diff supplied by              : 
Diff release                  : 
Sensitivity                   : public

[6/5/96 public]

Several idl features arrived too late to be documented in the OSF DCE
1.2.1 docs. The release notes for these features are as follows:
...\" 
...\" The following feature is new in DCE 1.2.1
...\" 
.H 3 "Automatic Binding Enhancement"
.P
.iX "host profile"
.iX "RPC_DEFAULT_ENTRY"
When a client uses the automatic binding method, 
DCE must use the name service to obtain binding information.
However, the client host must have a starting entry 
from which to begin the namespace search.
If the \*LRPC_DEFAULT_ENTRY\*O environment variable 
is defined on the client host, DCE uses the entry in that variable
to obtain binding information. 
If \*LRPC_DEFAULT_ENTRY\*O is not defined, 
DCE looks for binding information from the host's 
name service profile.
...\" 
...\" The following information differs slightly from what's documented in
...\" the App Dev Guide Core volume.
...\" 
...\" 
.H 3 "Enumeration in IDL"
.P
An IDL enumeration provides names for integers.  It is specified as
follows:
.oS
\*Lenum {\*O\*Videntifier[\*O= \*Vinteger], ...\*O\*L}\*O
.oE
.P
Each identifier in an enumeration is assigned an integer, either
explicitly in the interface or automatically by the IDL compiler.  If
all the identifiers are unassigned, the IDL compiler begins assigning
0 (zero) to the first identifier, 1 to the next identifier, and so on.
If an unassigned identifier follows an assigned one, the compiler
restarts number assignment with the next consecutive integer.  An
enumeration can have up to 32,767 identifiers.
.P
Assignments can be made in any order, and multiple identifiers can
have the same value. For example:
.oS
typedef  enum {
 SHOVEL = 9, AX, MATTOCK = 3, PITCHFORK, SPADE = 9
 } yard_tools;
/* values assigned: SHOVEL:9, AX:10, MATTOCK:3, PITCHFORK:4, SPADE:9 */
.oE
...\" 
...\" The following information discusses a new feature in DCE 1.2.1
...\" 
.H 3 "The client_memory ACF Attribute"
.P
.iX "client_memory ACF attribute"
While marshaling parameters, the client stub uses built-in 
routines to manage memory. 
You can use the \*Lclient_memory\*O attribute to specify different 
memory allocation and free routines. 
The \*Lclient_memory\*O attribute has the following syntax 
in the ACF header:
.P
.iS
\*L[client_memory(\*O\*Vmalloc_routine, free_routine\*O\*L)] interface\*O \*Vidl
_interface_name\*O
.iE
.P
The routines you specify must have the same respective
procedure declarations as the system's 
\*Lmalloc(\|)\*O and \*Lfree(\|)\*O routines. 
.P
Applications need to manage memory consistently, 
so if your application needs to do other memory allocation, 
be sure to use the same routines you specified 
with the \*Lclient_memory\*O attribute.
.P
You can use the \*Lclient_memory\*O attribute in conjunction 
with RPC stub support API routines such as 
\*Lrpc_sm_set_client_alloc_free(\|)\*O and
\*Lrpc_sm_swap_client_alloc_free(\|)\*O.

[9/19/96 public]

Fixed and verified by Bob Viveney (viv@zko.dec.com)



CR Number                     : 13469
Defect or Enhancement?        : def
CR in Code, Doc, or Test?     : doc
Inter-dependent CRs           : 
Project Name                  : dce
H/W Ref Platform              : all
S/W Ref Platform              : all
Component Name                : rpc
Subcomponent Name             : app_gd
Short Description             : document limit on linked-list marshalling
Reported Date                 : 5/3/96
Found in Baseline             : 1.1
Found Date                    : 5/3/96
Severity                      : B
Priority                      : 2
Status                        : verified
Duplicate Of                  : 
Fix By Baseline               : 1.2.2
Fixed In Baseline             : 1.2.2
Affected File(s)              : app_gd/rpc/idl.gpdml
Diff supplied by              : 
Diff release                  : 
Sensitivity                   : public

[5/3/96 public]

Linked lists are marshalled and unmarshalled using recursion.  This can
cause the stack size to grow.  If done in the main thread (as is the case
with simple clients that don't spawn threads to do RPC's) this is okay --
the system will grow the stack automatically.  If done in a server, where
the thread-stack often cannot grow automatically, large lists can cause
the server to crash.

We should (more clearly?) document this limitation and explain work-arounds
such as using transmit_as and converting the list into an array or such.

[5/16/96 public]

Assigned to HP.

[5/17/96 public]

Rich pointed out that this really belongs to Digital.

[9/6/96 public]

Fixed in app_gd/rpc/idl.gpsml - added new text to end of section
titled "Full Pointers". Fix verified by Bob Viveney and Rich Salz.



CR Number                     : 13468
Defect or Enhancement?        : def
CR in Code, Doc, or Test?     : doc
Inter-dependent CRs           : 
Project Name                  : dce
H/W Ref Platform              : all
S/W Ref Platform              : all
Component Name                : rpc
Subcomponent Name             : app_ref
Short Description             : rpc_mgmt_set_com_timeout description confusing
Reported Date                 : 4/30/96
Found in Baseline             : 1.2.1
Found Date                    : 4/30/96
Severity                      : B
Priority                      : 2
Status                        : verified
Duplicate Of                  : 
Fix By Baseline               : 1.2.2
Fixed In Baseline             : 1.2.2
Affected File(s)              : app_ref/man3rpc/rpc_mgmt_set_com_timeout.3rpc
Diff supplied by              : 
Diff release                  : 
Sensitivity                   : public
Transarc Deltas               : 
Transarc Status               : open

[4/30/96 public]
The second paragraph of the rpc_mgmt_set_com_timeout manpage
description is confusing.  It says:
	After the initial relationship is established, subsequent
	communications for the binding handle can revert to not less
	than the default timeouts for the protocol service.  This
	means that after setting a short initial timeout, establishing
	a connection, calls in progress are not timed out any sooner
	than the default.
A paragraph was added at the end of the description to clarify that
the behavior is different depending on whether it is a
connection-oriented RPC or a datagram RPC, but the above paragraph is
still confusing and it's encountered first.  After reading the
paragraph at the end, this paragraph seems to apply only to datagram
RPCs, but it doesn't say that.  Perhaps this section would be improved
if the differences between the protocol sequences was discussed
directly in one place.  A developer here explains it this way:
The answer differs for TCP and UDP connections, of course.  And for
each, the answer is different depending on whether you're starting an
RPC or if the RPC was already in progress (or, in the CN case, if you
are recycling an existing connection).
 
TCP (ncacn_ip_tcp):
        Initial connection: we either try once using the OS default
		timeout\ , or we retry forever if the
		rpc_mgmt_com_timeout is set to
                rpc_c_binding_infinite_timeout.
        After connection is made: timeouts are controlled by the OS.
                Binding timeout is ignored.
UDP (ncadg_ip_udp):
        All timeouts are controlled by the rpc_mgmt_com_timeout value.
        Changing the value will cause future timeouts to change (ie:
        something which is already sleeping won't get woken up).  But
        new RPCs on the same handle should use the new timeout values.
 
I think the man page is warning that its only really sensible to
change the timeout on a handle at the beginning.  Changing it on the
fly won't always do what you want.
Added field Transarc Deltas with value `' 
Added field Transarc Status with value `open'

[5/16/96 public]

Assigned to HP.

[8/9/96 public]
Fixed and verified.  Verified by lmm.  The 
change did not describe the implementation details of the 
different protocols because the calls are designed to be 
protocol independent.



CR Number                     : 13449
Defect or Enhancement?        : def
CR in Code, Doc, or Test?     : doc
Inter-dependent CRs           : 
Project Name                  : dce
H/W Ref Platform              : all
S/W Ref Platform              : all
Component Name                : rpc
Subcomponent Name             : admin_gd
Short Description             : rpcprofile add - should say rpcprofile list
Reported Date                 : 4/25/96
Found in Baseline             : 1.2.1
Found Date                    : 4/25/96
Severity                      : B
Priority                      : 2
Status                        : verified
Duplicate Of                  : 
Fix By Baseline               : 1.2.2
Fixed In Baseline             : 1.2.2
Affected File(s)              : admin_gd/rpc/rpc/appl_admin.gpsml
Diff supplied by              : 
Diff release                  : 
Sensitivity                   : public
Transarc Deltas               : 
Transarc Status               : open

[4/25/96 public]
In section, "Viewing the Members of a Profile Entry," the following text:
"To list the members of a profile entry in CDS, us an rpcprofile add
operation..."
should be changed to:
"To list the members of a profile entry in CDS, us an rpcprofile list
operation..."
Added field Transarc Deltas with value `' 
Added field Transarc Status with value `open'

[5/16/96 public]

Assigned to Digital.

[8/22/96 public]

fixed by wardr@jfcl.enet.dec.com
verified by zee@tuxedo.enet.dec.com



CR Number                     : 11246
Defect or Enhancement?        : def
CR in Code, Doc, or Test?     : doc
Inter-dependent CRs           : 
Project Name                  : dce
H/W Ref Platform              : all
S/W Ref Platform              : all
Component Name                : rpc
Subcomponent Name             : port_gd
Short Description             : Document NO_TRY_CATCH_FINALLY in porting guide
Reported Date                 : 7/11/94
Found in Baseline             : 1.1
Found Date                    : 7/11/94
Severity                      : B
Priority                      : 3
Status                        : verified
Duplicate Of                  : 
Fix By Baseline               : 1.1
Fixed In Baseline             : 1.1doc
Affected File(s)              : see below
Sensitivity                   : public

[7/11/94 public]

IDL generated code dce/utils/svc/svcbin_cstub.c
contains the following TRY-ENDTRY block:

TRY
IDL_param_vec[1] = (rpc_void_p_t)&h;
IDL_param_vec[2] = (rpc_void_p_t)data;
IDL_param_vec[3] = (rpc_void_p_t)st;
IDL_msp->IDL_param_vec = IDL_param_vec;
IDL_msp->IDL_side = IDL_client_side_k;
IDL_msp->IDL_language = IDL_lang_c_k;
rpc_ss_init_node_table(&IDL_msp->IDL_node_table,&IDL_msp->IDL_mem_handle);
idl_es_before_interp_call( h,(rpc_if_handle_t)&IDL_ifspec,
  IDL_type_vec,0,IDL_encoding_k,&IDL_es_transfer_syntax,(IDL_msp_t)IDL_msp);
rpc_ss_ndr_marsh_interp(
    2,
    112,
    IDL_param_vec, (IDL_msp_t)IDL_msp);
idl_es_after_interp_call((IDL_msp_t)IDL_msp);
CATCH(rpc_x_ss_pipe_comm_error)
FINALLY
idl_es_clean_up((IDL_msp_t)IDL_msp);
rpc_ss_report_error_2(IDL_fault_code,IDL_user_fault_id,IDL_msp->IDL_status,
 (RPC_SS_THREADS_CANCEL_STATE_T *)&IDL_async_cancel_state, (IDL_msp->IDL_status!
=error_status_ok) ? st : NULL, NULL, NULL, (IDL_msp_t)IDL_msp);
RPC_SS_THREADS_RESTORE_ASYNC(IDL_async_cancel_state);
ENDTRY

According to the threads documentation the behaviour is undefined
if you use CATCH and FINALLY in the same TRY-ENDTRY block.

[7/12/94 public]
Rico, any thoughts on this?

[7/13/94 public]
It is documented in this manner for flexiblity in implementation
on differing systems.  The macro-based implementation works
fine with TRY/CATCH/FINALLY (we specifically asked the DCEthreads
people).  Without that optimization the stubs would require
2 TRY blocks instead of one.  We want to avoid the performance hit
of doing that if at all possible.

If IDL is ever ported to a platfrom that doesn't support
TRY/CATCH/FINALLY then the sysdep.h macro NO_TRY_CATCH_FINALLY must
be defined as 1 for that platform.

[7/13/94 public]
Thanks for the info Rico, I would say this needs to be
documented in the Porting Guide under the idl porting section.
Making this a doc bug.

[7/25/94 public]

Assigned this CR to Doug Weir (OSF porting guide writer).

[10/26/94 public]
This information is now in Chapter 5 (RPC) of the Porting Guide.



CR Number                     : 10505
Defect or Enhancement?        : enh
CR in Code, Doc, or Test?     : doc
Inter-dependent CRs           : 
Project Name                  : dce
H/W Ref Platform              : all
S/W Ref Platform              : all
Component Name                : rpc
Subcomponent Name             : app_gd, app_ref
Short Description             : IDL Binding callouts need to be documented
Reported Date                 : 5/2/94
Found in Baseline             : 1.1
Found Date                    : 5/2/94
Severity                      : B
Priority                      : 2
Status                        : verified
Duplicate Of                  : 
Fix By Baseline               : 1.1
Fixed In Baseline             : 1.1b15
Affected File(s)              : acf.gpsml, rpc_ss_bind_authn_client.3rpc
Sensitivity                   : public

[5/2/94 public]

DEC has provided OSF with the following new functionality for
the idl compiler.  It should be documented in the appropriate places.

Here is what Rico @ DEC gave me:


cut-here--------------------------------

0 Binding Handle Callout

This feature allows you to specify a routine that is automatically called
from an IDL-generated client stub routine, in order to modify the binding
handle.

A typical use of this feature is to augment the binding handle with
security context, for example so that authenticated RPC calls are used
between client and server.

This feature is particularly targeted at clients which use automatic
binding via the [auto_handle] ACF attribute.  For automatic binding, it
is the client stub rather than the client application code which obtains
a server binding handle.  The binding callout feature allows you to
modify binding handles obtained by the client stub.  Without this feature,
there is no way for you to modify the binding handles before the client
stub attempts to initiate a remote procedure call to the selected server.

0.1 ACF file

Select the binding handle callout feature by creating an ACF file for
the interface (if necessary) and placing the [binding_callout] attribute
on the interface, e.g.

    [auto_handle, binding_callout(my_bh_callout)] interface bindcall
    {
    }

The binding_callout attribute has the following general form:

    [binding_callout(<Identifier>)]

The binding_callout may only be specified once per interface and applies
to all operations in that interface.

0.2 Generated header file

The IDL-generated header file for the interface will contain a function
prototype for the binding callout routine.  For the example above,
bindcall.h contains a declaration similar to:

    void my_bh_callout(
        rpc_binding_handle_t *p_binding,
        rpc_if_handle_t interface_handle,
        error_status_t *p_st
    );

0.3 Generated client stub

Each client stub routine in the IDL-generated client stub module calls
the binding callout routine just prior to initiating the remote procedure
call to the server.  For the example above, each client stub routine
contains a call to my_bh_callout, passing the three arguments that are
described below.

0.4 Binding callout routine

The arguments to the binding callout routine are:

Input/Output:

rpc_binding_handle_t *p_binding
A pointer to a server binding handle for the remote procedure call.
Generally, the binding callout routine will augment this binding handle
with additional context, e.g. for security.

Input:

rpc_if_handle_t interface_handle
The interface handle.  This can be used to resolve a partial binding,
or for the binding callout routine to distinguish interfaces.

Output:

error_status_t *p_st
An error status code returned by the binding callout routine.

0.4.1 Error handling

A binding callout routine returns error_status_ok when it successfully
modifies the binding handle or decides that no action is necessary.
This causes the client stub to initiate the remote procedure call.

A binding callout routine can return an error status.  In this case, the
client stub will not initiate a remote procedure call.  If [auto_handle]
is being used, the client stub will attempt to locate another server of
the interface, and once again call the binding callout routine.  Otherwise,
it will execute its normal error handling logic.

A binding callout routine for a client using [auto_handle] can return
rpc_s_no_more_bindings to prevent the client stub from trying to locate
another server.  The client stub will then execute its normal error
handling logic.

A client stub by default handles an error condition by raising an exception.
If a binding callout routine returns a rpc_s_ status code, the client stub
by default will raise the matching rpc_x_ exception.  If a binding callout
routine returns any other error status, it will likely be raised as an
"unknown status" exception.

For an operation containing a [comm_status] parameter, the client stub
handles an error condition by returning the error status value in the
[comm_status] parameter.  A binding callout routine can return any error
status value to the client application code if the IDL operations are
specified with [comm_status] parameters.

A binding callout routine can raise a user-defined exception rather than
return a status code if it prefers to report application-specific error
conditions back to the client application code via exceptions.

0.5 Predefined binding callout routine

There is one predefined binding callout routine in the DCE library which
may be suitable for some applications.  This routine can be selected by
specifying a [binding_callout(rpc_ss_bind_authn_client)] ACF attribute.

rpc_ss_bind_authn_client matches the function prototype in 0.2.
It authenticates the client identity to the server, thereby allowing
for one-way authentication.  In other words, it means that the client does
not care which server principal receives the remote procedure call request,
but the server verifies that the client is who the client claims to be.

rpc_ss_bind_authn_client does the following:

  o calls rpc_ep_resolve_binding() to resolve the binding handle if it is
    not fully bound (e.g. for [auto_handle]).

  o calls rpc_mgmt_inq_server_princ_name() to obtain the server identitity
    (principal name)

  o calls rpc_binding_set_auth_info() with all default values except the
    server principal name obtained in the previous call.

  o if any of these calls returns an error status, that error status is
    placed in the *p_st argument and rpc_ss_bind_authn_client returns.


end-of-file-----------------------------

[5/13/94 public]

Assigned this CR to myself (I'm the OSF writer responsible
for IDL documentation).

[7/20/94 public]

Added a new section to the Attribute Configuration File chapter
that describes the binding_callout ACF interface attribute.
Also added binding_callout to ACF summary lists, tables and
the ACF bnf.

Still need to create a new man page for rpc_ss_bind_authn_client()
in the App Ref.

[7/20/94 public]

Created new man page for rpc_ss_bind_authn_client(). Marked
this CR as fixed, will pass copy to T. Jordahl for verification.

[10/27/94 public]
A doc person should mark this closed.



CR Number                     : 10160
Defect or Enhancement?        : def
CR in Code, Doc, or Test?     : doc
Inter-dependent CRs           : 
Project Name                  : dce
H/W Ref Platform              : all
S/W Ref Platform              : all
Component Name                : rpc
Subcomponent Name             : pipes
Short Description             : Pipe documentation need work
Reported Date                 : 3/17/94
Found in Baseline             : 1.1
Found Date                    : 3/17/94
Severity                      : B
Priority                      : 1
Status                        : verified
Duplicate Of                  : 
Fix By Baseline               : 1.1
Fixed In Baseline             : 1.1doc
Affected File(s)              : 
					 dce_books/app_gd/rpc/topics.gpsml
				   	 dce_books/app_gd/rpc/idl.gpsml
Sensitivity                   : public

[3/17/94 public]
The documentation for RPC pipes is inadequate.  In particular, what does it
mean for "pull/push/allocate "to "coordinate" their activities, and what is
the role of "state" in doing this?  A *complete* example is needed, not the
mere fragments that are currently present.  Furthermore, there is at least
one mistake in the docs: "state" is described as "char *" but in the actual
implementation it's rpc_ss_pipe_state_t (= idl_void_p_t = void *).
Finally, the existing "IDL Pipes Example" purports to show what the IDL
compiler generates from the input "typedef pipe base_t pipe_t;", but the
example code shows "element_t" instead of "base_t".  The example code also
shows comments, but the IDL compiler generates no such comments.

[3/17/94 public]
I forgot to mention that, apart from the datatype of state noted above, the
documented signature of "push" is wrong (it should be idl_ulong_int ecount,
not *ecount).  Also, note that even though the comments remarked on above
should go away, the information in them needs to be retained (e.g., whether
bsize's and bcount's refer to bytes or elements).  BTW, the version of the
docs I'm looking at is the Prentice-Hall App Dev Gd, Section 17.14.4.

[3/29/94 public]

Assigned this CR to Ron Johnson (DEC DCE 1.1 writer)

[4/18/94 public]

Reassigned this CR to John Shirley (OSF RPC writer).

[9/25/94 public]
This is really verified but I don't know the fixed in baseline value.
If you know it, you can go ahead and fix it.

Verified by me (some review by John Bowe).



CR Number                     : 9973
Defect or Enhancement?        : enh
CR in Code, Doc, or Test?     : doc
Inter-dependent CRs           : 5284
Project Name                  : dce
H/W Ref Platform              : all
S/W Ref Platform              : all
Component Name                : rpc
Subcomponent Name             : i18n, app_ref
Short Description             : add documentation
for code set registry
Reported Date                 : 2/17/94
Found in Baseline             : 1.1
Found Date                    : 2/17/94
Severity                      : B
Priority                      : 2
Status                        : verified
Duplicate Of                  : 
Fix By Baseline               : 1.1
Fixed In Baseline             : 1.1doc
Affected File(s)              : 
admin_gd/overview/overview/8_config.gpsml, app_gd/rpc/internationalized.gpsml,command_ref/man8dce/csrc.8dce,app_ref/man3dce/dce_cs_loc_to_rgy,app_ref/man3dce/dce_cs_rgy_to_loc,intro/intro/1_overview.gpsml
Sensitivity                   : public

[2/17/94 public]

Documentation related to the code set registry needs to
be added to the DCE documentation set. Specifically,

- a man page for the code set registry compiler (csrc)
  needs to be added to Section 8 of the Administration
  Reference (which will be the Command Reference at 1.1)

- man pages for the code set registry access routines
  (dce_loc_to_rgy(), dce_rgy_to_loc()) need to be
  added to the RPC section (3rpc) of the Application
  Development Reference (these routines were originally planned
  for the (3dce) section but are now considered to be
  part of RPC code and are defined in rpc.h)

- information for system administrators about creating
  a code set registry source file and running csrc
  needs to be added to a "Post-Installation and
  Configuration" section in Volume 1 of the DCE
  Administration Guide (the volume that will
  describe dce_config).

- information for DCE licensees about creating
  a code set registry source file and running
  csrc needs to be added to the Porting Guide
  (this task is covered in CR9783).

[10/24/94 public]

Fixed and verified by M. Romagna.



CR Number                     : 9783
Defect or Enhancement?        : enh
CR in Code, Doc, or Test?     : doc
Inter-dependent CRs           : 9701, 9702
Project Name                  : dce
H/W Ref Platform              : all
S/W Ref Platform              : all
Component Name                : rpc
Subcomponent Name             : i18n, port_gd
Short Description             : Porting Guide needs i18n
porting info
Reported Date                 : 1/19/94
Found in Baseline             : 1.1
Found Date                    : 1/19/94
Severity                      : C
Priority                      : 2
Status                        : verified
Duplicate Of                  : 
Fix By Baseline               : 1.1
Fixed In Baseline             : 1.1doc
Affected File(s)              : see below
Sensitivity                   : public

[1/19/94 public]

The Porting Guide will need some documentation on i18n-related stuff.
Specifically:

- DCE 1.1 i18n routines will require that DCE clients and servers
support code set converters for the ISO 10646 code set. This means
that operating system platforms that intend to support DCE i18n routines
will need to provide this converter.

- The DCE 1.1 tape will include this code set converter.

- Vendors who care about supporting i18n'd applications
(that is, apps that will use the new RPC/IDL functionality)
will need to add this code set converter to their
platform's code set conversion mechanism. If that
mechanism is the POSIX iconv code set conversion routines,
then they need to ensure that the ISO 10646 converter
works with their version of the iconv routines (each
platform's iconv is a little different, as I understand
it).

- Vendors who have a code set converter mechanism that
is NOT the POSIX iconv mechanism will need to port
the ISO 10646 converter to their mechanism.

I don't know what level of detail we'll be required
to give about either porting process. The responsible
engineer for this piece is Mariko. Currently, she
thinks that perhaps using HP's port of the converter
onto HP's implementation of iconv would be a good example
to put in the Guide (Mariko is working with Sue Klein of HP
on this port). As for amount of info/details about porting
to non-iconv platforms...currently unknown.

I'm assigning this CR for the time being to Doug Weir (it could be
a temporary assignment).


The iconv converters are required for RPC automatic code set conversion
mechanism.  So I assigned this CR to 'rpc' component.

[2/1/94 public]

Here (from Mariko Romagna) is more i18n porting information that 
needs to be included in the Porting Guide:

  The C library function call 'nl_langinfo()' returns a requested
attribute of the current locale.  For example, when 'nl_langinfo(CODESET)'
is called, it should return the current locale's code set name.
The RPC runtime code sets evaluation functions depend on this
functionality being present in the base OS.

  OSF/1 and AIX have this functionality, but HP-UX lacked this
support (so they had to add this functionality to their C library)
and SVR4 is lacking this support as well.

  Note that both HP-UX and SVR4 have the function call 'nl_langinfo()';
however, on these platforms, the function does not return the
current locale's code set when 'CODESET' is requested, even though
CODESET is defined in the standard include file.

  The only way to discover the presence or absence of this functionality
is to execute the following little program in different locales:

        #include <stdio.h>
        #include <locale.h>
        #include <langinfo.h>

        main(void)
        {
                setlocale(LC_ALL, "");
                printf("%s\n", nl_langinfo(CODESET));
        }

  So what happens when the base OS is lacking this functionality?  When
DCE 1.1 is ported to that platform, four code set compatibility evaluation
routines within the RPC runtime need to be modified.

  So far, two out of three commercial OSes (except OSF/1) have this
problem, so I think it's important to document this requirement to
Porting Guide.  Even though an OS has a nl_langinfo() call, it does not
automatically mean that it has all of the functionality needed for the
i18n code sets i14y features to work.

[10/26/94 public]
This material is all now in Chapter 2 of the Porting Guide.



CR Number                     : 7731
Defect or Enhancement?        : enh
CR in Code, Doc, or Test?     : doc
Inter-dependent CRs           : 
Project Name                  : dce
H/W Ref Platform              : all
S/W Ref Platform              : all
Component Name                : rpc
Subcomponent Name             : app_gd
Short Description             : client binding to multiple servers
Reported Date                 : 4/15/93
Found in Baseline             : 1.0.2
Found Date                    : 4/15/93
Severity                      : B
Priority                      : 2
Status                        : verified
Duplicate Of                  : 
Fix By Baseline               : 1.1
Fixed In Baseline             : 1.1doc
Affected File(s)              : 
				/dce_books/app_gd/style_gd/binding.gpsml
Sensitivity                   : public

[4/15/93 public]

Tony received a request for clarification on the following:

> 1. if a client (general purpose) it binding with many servers 
> (the servers are different interfaces, eg, math server, database
> server) and that clients executable is linked with >1 stub..
> can implicit binding be used...one global binding handle for each
> stub...in fact, would this be a valid scenario for automatic binding?
> i believe it to be true, please verify?

I couldn't find any information on this in the RPC or overview parts
of the App Dev Guide, we should develop something for that book.

[6/22/93 public]
Changed "Fix By Baseline" from 1.0.3 to 1.1.

[9/17/93 public]
This CR should be reassigned to someone at OSF.

[11/12/93 public]

Assigned to Steve Lewontin.

[3/29/94 public]

Reassigned this CR to John Shirley (OSF rpc writer)
from Steve Lewontin.

[10/27/94 public]
Verified by me.



CR Number                     : 7699
Defect or Enhancement?        : enh
CR in Code, Doc, or Test?     : doc
Inter-dependent CRs           : 
Project Name                  : dce
H/W Ref Platform              : pmax
S/W Ref Platform              : osf1
Component Name                : rpc
Subcomponent Name             : style_gd
Short Description             : using rpc_ss_allocate/free
Reported Date                 : 4/13/93
Found in Baseline             : 1.0.2
Found Date                    : 4/13/93
Severity                      : C
Priority                      : 2
Status                        : verified
Duplicate Of                  : 
Fix By Baseline               : 1.1
Fixed In Baseline             : 1.1doc
Affected File(s)              : dce_books/app_gd/rpc/topics.gpsml
Sensitivity                   : public

[4/13/93 public]
This note from the FAQ should probably live in the App Style Guide.

From: melman (Howard Melman)
To: rbarron
Cc: dce-team
Subject: RPC: Why use rpc_ss_allocate and rpc_ss_free?
Date: Fri, 21 Aug 92 09:24:53 -0400


> in the acf there is an attribute enable_allocate which
> "turns on " the ability to use the rpc_ss_allocate routines.
> if pointers are used this ability is turned on automatically..
> why whoul one use the stub support routines instead of just using
> malloc() etc?? to allocate/deallocate memory?? advantages? disadvantages?
> huh??

================================================================

Looking up rpc_ss_free in the reference guide you see...  

These routines are usually called by server code.  The
runtime calls rpc_ss_free at appropriate times.  On the
sever side the stub calls rpc_ss_free as one of the last
things it does.  

So say your manager routine has to allocate memory, if it
uses rpc_ss_allocate, the stub will free it for the manager.
Why not just have the manager use malloc() and free()?  Say
the manager routine was getting a linked list and adding it
to it.  It has to allocate memory and give it to the runtime
to pass back to the client.  So the runtime needs the
memory, the manager can't call free(), if the stub doesn't
free it, you have a leak.  So the manager uses
rpc_ss_allocate() and the stub frees it with rpc_ss_free()
after its done marshalling, and passing it over the wire.

Howard

================================================================

The basic difference between malloc/free and rpc_ss_allocate/free
is that all memory from multiple rpc_ss_allocate calls is
automatically deallocated as a last step of a server stub, after
the output values have been transmitted back to the client.

Depending on the application, a manager may wish use to use this
memory management policy.  This is akin to growable stack frames,
or a zoned allocation model.

A manager can obviously still malloc storage, and this storage
will persist across invocations.

Dave

[6/9/93 public]

Assigned to new App Style Guide owner.
Note: there is an issue as to whether enh requests should be resolved in
1.0.3 or 1.1.

[3/29/94 public]

Reassigned this CR temporarily to John Shirley (OSF rpc writer)
from Steve Lewontin (formerly style_gd writer) until ownship
for style_gd is established.

[6/22/93 public]
Changed "Fix By Baseline" from 1.0.3 to 1.1.

[10/27/94 public]
Fixed by Lisa Zahn, verified by me.



CR Number                     : 5248
Defect or Enhancement?        : enh
CR in Code, Doc, or Test?     : doc
Inter-dependent CRs           : 9601
Project Name                  : dce
H/W Ref Platform              : all
S/W Ref Platform              : all
Component Name                : rpc
Subcomponent Name             : app_gd, app_ref
Short Description             : info for using non-English
character set
Reported Date                 : 8/28/92
Found in Baseline             : 1.0.1
Found Date                    : 8/28/92
Severity                      : C
Priority                      : 3
Status                        : verified
Duplicate Of                  : 
Fix By Baseline               : 1.1
Fixed In Baseline             : 1.1doc
Affected File(s)              : 
app_gd/rpc/internationalized.gpsml, idl.gpsml, acf.gpsml,
app_ref/man3rpc/rpc_cs*.3rpc, wchar_t*.3rpc, cs_byte*.3rpc, rpc_rgy*.3rpc,
rpc_ns_mgmt_set_attributes.3rpc,
rpc_ns_mgmt_remove_attributes.3rpc,rpc_ns_mgmt_free_codesets.3rpc,rpc_ns_mgmt_read_codesets.3rpc,rpc_ns_import_ctx_add_eval.3rpc, intro/intro/1_overview.gpsml
Sensitivity                   : public

[8/28/92 public]

Provide programming information about using character sets other than
English.

[3/29/94 public]

Reassigned this CR from Julie Buckler to myself. This CR is being
addressed by developing guide and API documentation for the
IDL and RPC runtime character and code set i14y functionality.
The IDL i18n character support documentation is covered by CR 9601
(along with other IDL doc enhancements for DCE 1.1).

[9/21/94 public]

The Intro to DCE also needs to explain the level of internationalization
provided by each DCE component.

[10/24/94 public]

Fixed and verified by M. Romagna.



