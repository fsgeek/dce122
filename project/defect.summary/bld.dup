CR Number                     : 12941
Defect or Enhancement?        : def
CR in Code, Doc, or Test?     : code
Inter-dependent CRs           : 
Project Name                  : dce
H/W Ref Platform              : all
S/W Ref Platform              : all
Component Name                : bld
Subcomponent Name             : 
Short Description             : target-specific libs should be lastin sec_salvage_db/Makefile
Reported Date                 : 6/29/95
Found in Baseline             : 1.1
Found Date                    : 6/29/95
Severity                      : C
Priority                      : 2
Status                        : dup
Duplicate Of                  : 12979
Fix By Baseline               : 1.2
Fixed In Baseline             : 
Affected File(s)              : 
Sensitivity                   : public

[6/29/95 public]

 Apparently only the server/bin/Makefile has been fixed, but
 -llm still appears after target machine libs in 
 sec_salvage_db/Makefile


                          DCE Problem Report
                  =================================


Submitter Information 
----------------------

Submitter Name:           rusman
Organization:             Hitachi Computer Products (America), Inc. 
Email Address:            osd.dce@hi.com rusman@hi.com 
Phone:                    617-890-0444 
DCE License Number:       1616-MDCE-92
Licensee's Defect Number: OSDqa09446


Hardware/Software Configuration
--------------------------------

Offering and Version:   DCEOSF 
Component (Module):      
Client Hardware:        see below 
Client Software:        see below 
Server Hardware:        see below 
Server Software:        see below 
Compiler:               n/a

Problem Description
--------------------

Severity Level: Severe

Date of First Occurrence: 09/30/94

One Line Description:
   OSDqa09446 target-specific libs should be last

Full Description:

Related-file:::: Problem
 DESCRIPTION:
 
 In security/server/bin/Makefile, and 
    security/server/sec_salvage_db/Makefile
 
 ${${TARGET_MACHINE}_LIBS} should be at the end of the LIBs list.
 We believe this should always be the rule.  In our case, it is required
 because we need to use libc_r before libc, and various other libraries due 
 to our use of kernel threads.

[2/6/96 public]
Duplicate OT 12979. Updated 12979 so marked this dup of that.



CR Number                     : 10793
Defect or Enhancement?        : def
CR in Code, Doc, or Test?     : code
Inter-dependent CRs           : 
Project Name                  : dce
H/W Ref Platform              : hppa
S/W Ref Platform              : hpux
Component Name                : bld
Subcomponent Name             : dfs (./file)
Short Description             : Signal 10 during DCE1.1 on an hpux with the purified make
Reported Date                 : 5/26/94
Found in Baseline             : 1.1
Found Date                    : 5/26/94
Severity                      : B
Priority                      : 0
Status                        : dup
Duplicate Of                  : 10877
Fix By Baseline               : 1.1
Fixed In Baseline             : 
Affected File(s)              : 
Sensitivity                   : public

[5/26/94 public]

We encountered a Signal 10 in DCE1.1's build.  The Signal problem causes
more than one build failures on the HP platform.  This is a recurring
problem that had also randomly occurred in DCE1.1a.

[6/01/94 public]

I changed the component name to bld and changed the severity to B0
since although it breaks the build - the workaround is to build in
place without removing the objects and the Signal goes away



CR Number                     : 10181
Defect or Enhancement?        : enh
CR in Code, Doc, or Test?     : code
Inter-dependent CRs           : 
Project Name                  : dce
H/W Ref Platform              : all
S/W Ref Platform              : all
Component Name                : bld
Subcomponent Name             : common makefiles
Short Description             : need to add Veritas/VISTA support to common makefiles
Reported Date                 : 3/18/94
Found in Baseline             : 1.1
Found Date                    : 3/18/94
Severity                      : B
Priority                      : 2
Status                        : dup
Duplicate Of                  : 11163
Fix By Baseline               : 1.1
Fixed In Baseline             : 
Affected File(s)              : lbe/mk/osf.*.mk
Sensitivity                   : public

[3/18/94 public]
The DCE common makefiles do not currently provide support for using the
Veritas VISTA tools.  The common makefiles should be modified to permit
the use of a substitute compiler (covcc rather than gcc) with appropriate
comand line options.

[6/10/94 public]

As you can see in osf.std.mk (.include <hp.vista.mk>), HP has such
modifications already. osf.lib.mk, osf.obj.mk, osf.prog.mk, osf.std.mk and
hp.vista.mk files are changed. Just ask for it. :-) (If OSF takes it, it
will simplify our makefile merges.)

[06/10/94 public]
Could someone at HP check those into a branch so we could look at them?

[6/16/94 public]

I have checked them into the tatsu_s_vista branch. (It's been a long time
since I originally made this change. 2 years!) Just a couple of notes:

We only instrument the HP product version of DCE. We never did the vista
build for dce1.1. So you may need a little twist.

We only use the thread-safe version of cov3.o complied with CMA headers and

[6/16/94 public]

(My previous comment got truncated when I checked in.??? Here it continues...)

[6/16/94 public]

(It happened again. This time, I guess I know what caused it.)

We only use the thread-safe version of cov3.o complied with CMA headers
and +Z linker option, and link it into the libdce.sl shared library so that
even if the program is not instrumented we can get the coverage for libdce.
Obviously, some CMA files can't be instrumented.

We call covinit() from crt0.o. (Really one of functions called by _start()
in crt0.o, which lives in libdce, does "covinit((char *)0);
atexit(covdump);".)

I must forget something (I'm not one who does Vista build or runs the
instrumented cell). But, the instrumented compilation should work, though
linking and runtime errors may happen.

And don't forget those VISTAHOME, COV_SIG and HIT_FILE environment
variables.

(I can't recall what I wrote originally.)

[ sally 06/16/94 public]

The rats are willing to pick this up as planned after the majority of our
work is done for Beta - which should be next week.  If anyone can not wait
that long - then by all means - help yourself to doing the work.  
Thank you tatsu_s for sharing your implementation of Vista - we will
check it out and use where appropriate.  Thanks again.

[ sally 07/20/94 public]
This is just a status update to let you know that Ron Rizzo has been
working on this OT.  Thanks to help in testing from Martha
Lynch and debugging efforts from Andy Mckeen we are very close
to submitting a drb-request.

Ron has added the changes to the
common Makefiles to allow vista to be built when the
associated variables are set and the vista binaries
available.  This apparently allows you to collect
dynamic metrics.  We have also added the ablitiy to 
generate static metrics.  This
capability was added by Andy Mckeen to DME and was 
thought to be very beneficial by qa.  Ron Rizzo ported 
those changes to DCE and Andy was extremely helpful in
debugging them.

Ron has successfully built two components (threads and time)
on the at486 platform, and verified the output. We plan on
doing complete builds tonight on all three platforms
even though we only have binaries and licences for the 486 
platform, just to verify that changes to the common makefiles
have not introduced any other errors.


If the full builds are successful, Ron will be sending 
a drb-request and a mail message containing instructions on
how to enable these metrics and what to expect as output.

We do not plan on turning VISTA on in the regular
nightly builds as the output contains many warnings and the
time to build is greatly increased.  However once that 
capability exists within the common makefiles, developers and
qa engineers can turn it on for any component in their own
sandboxes.



CR Number                     : 10161
Defect or Enhancement?        : def
CR in Code, Doc, or Test?     : code
Inter-dependent CRs           : 
Project Name                  : dce
H/W Ref Platform              : all
S/W Ref Platform              : all
Component Name                : bld
Subcomponent Name             : test/rpc
Short Description             : move files to nosupport
Reported Date                 : 3/17/94
Found in Baseline             : 1.0.3
Found Date                    : 3/17/94
Severity                      : E
Priority                      : 3
Status                        : dup
Duplicate Of                  : 9481
Fix By Baseline               : 1.1
Fixed In Baseline             : 1.1
Affected File(s)              : in nosupport/test/rpc/idl_frontend and test/rpc/idl_frontend
Sensitivity                   : public

[3/17/94 public]

This is a hold over from the DCE1.0.3 endgame which fell through the
cracks due to lack of human resources on both the DCE dev side and the Rats.

The test/rpc/idl_frontend directory needs to be moved to nosupport.

[3/28/94 public]
 
dup of 9220.

[3/28/94 public]

oops the dup info was incorrect because 9920 is a doc defect which has
already been closed out. Re-opened this defect.

[3/29/94]
Moved from test/rpc/idl_frontend to nosupport/test/rpc/idl_frontend.
This is a low risk fix and is necessary.



CR Number                     : 9755
Defect or Enhancement?        : def
CR in Code, Doc, or Test?     : code
Inter-dependent CRs           : 
Project Name                  : dce
H/W Ref Platform              : hppa
S/W Ref Platform              : hpux
Component Name                : bld
Subcomponent Name             : libdce's build
Short Description             : ranlib after ar was executed
Reported Date                 : 1/17/94
Found in Baseline             : 1.0.3a
Found Date                    : 1/17/94
Severity                      : C
Priority                      : 2
Status                        : dup
Duplicate Of                  : 8329
Fix By Baseline               : 1.1
Fixed In Baseline             : 
Affected File(s)              : 
Sensitivity                   : public

[1/17/94 public]

The Makefile for libdce has its own ar.  This is incorrect.

First of all, the ar rules should have come from the common
Makefiles.  

In addition, the fact that the library has been ar and why 
does it needs to be ranlib beats the hell out of me.

For now, we can ignore this error.  In fact if folks agree,
we can consider this as a warning.  Let me know as I need
to change my script.

[1/17/94 public]
Not sure who's responsible for the libdce build these days -
assigning to unknown component and lowering priority so
the core folks can figure out what needs to be done with 
this.

[1/19/94 public]
Dupping this defect.



CR Number                     : 8602
Defect or Enhancement?        : def
CR in Code, Doc, or Test?     : code
Inter-dependent CRs           : 8613
Project Name                  : dce
H/W Ref Platform              : i486
S/W Ref Platform              : osf1
Component Name                : bld
Subcomponent Name             : file/flserver, file/bosserver, file/libafs
Short Description             : Makefile stumbles over install targets
Reported Date                 : 9/14/93
Found in Baseline             : 1.0.3
Found Date                    : 9/14/93
Severity                      : C
Priority                      : 1
Status                        : dup
Duplicate Of                  : 8613
Fix By Baseline               : 1.1
Fixed In Baseline             : 
Affected File(s)              : Makefile
Sensitivity                   : public

[9/14/93 public]

[ /file/flserver at 01:19 (AM) Tuesday ]

/share/include/dcedfs/flserver.h: installing as \
/u1/devobj/sb/nb_486/install/at386/opt/dce1.0/share/include/dcedfs/flserver.h
make: don't know how to make flserver (continuing)

[ /file/bosserver at 01:19 (AM) Tuesday ]

makepath bosserver/. && cd bosserver &&  exec make MAKEFILE_PASS=BASIC \
install_all gencat dfsbbs.cat bbos_err.msf 
release   -o bin -g bin -m 755 -tostage \
/u1/devobj/sb/nb_486/install/at386/opt/dce1.0 -fromfile dfsbbs.cat \
/nls/msg/en_US.ASCII/dfsbbs.cat
/nls/msg/en_US.ASCII/dfsbbs.cat: copying from dfsbbs.cat
/nls/msg/en_US.ASCII/dfsbbs.cat: owner bin, group bin, mode 0755
/nls/msg/en_US.ASCII/dfsbbs.cat: installing as
/u1/devobj/sb/nb_486/install/at386/opt/dce1.0/nls/msg/en_US.ASCII/dfsbbs.cat
make: don't know how to make bosserver (continuing)

[ /file/libafs at 01:19 (AM) Tuesday ]

makepath libafs/. && cd libafs &&  exec make MAKEFILE_PASS=BASIC install_all
make: don't know how to make libknck.a (continuing)

[10/1/93 public]

I really think this is related to 8613 (spurious signal 11 from the make
command), and I can't do anything with it until that problem is fixed.
Reassigning back to bld.

[10/8/93 public]

Changed to a dup of 8613
Down graded the priority.
to be fixed in DCE1.1 with the use of ODE2.3.



CR Number                     : 8218
Defect or Enhancement?        : def
CR in Code, Doc, or Test?     : code
Inter-dependent CRs           : 
Project Name                  : dce
H/W Ref Platform              : hppa
S/W Ref Platform              : hpux
Component Name                : bld
Subcomponent Name             : 
Short Description             : libdce.a get rebuilt on install
Reported Date                 : 6/30/93
Found in Baseline             : 1.0.3
Found Date                    : 6/30/93
Severity                      : B
Priority                      : 2
Status                        : dup
Duplicate Of                  : 7053
Fix By Baseline               : 1.0.3
Fixed In Baseline             : 
Affected File(s)              : 
Sensitivity                   : public

[6/30/93 public]
When you do an install_all of libdce, it rebuilds libdce.a on HP's.
Also, when you change one .o file, it ar's every .o file in to libdce.a,
which takes along time (in both cases) and is stupid.

To reproduce:

cd src/libdce; build install_all
cd src/time/libutc/user; touch utc_shared_map.c ; cd src/libdce; build



CR Number                     : 5188
Defect or Enhancement?        : def
CR in Code, Doc, or Test?     : code
Inter-dependent CRs           : 
Project Name                  : dce
H/W Ref Platform              : all
S/W Ref Platform              : all
Component Name                : bld
Subcomponent Name             : make
Short Description             : exported .h files generated from .idl are re-exported even though .idl unchanged
Reported Date                 : 8/24/92
Found in Baseline             : 1.0.2
Found Date                    : 8/24/92
Severity                      : D
Priority                      : 1
Status                        : dup
Duplicate Of                  : 2135
Fix By Baseline               : 1.1
Fixed In Baseline             : 
Affected File(s)              : 
Sensitivity                   : public
Transarc Deltas               : 
Transarc Herder               : jaffe@transarc.com
Transarc Status               : open

[8/24/92 public]

Because the .h and .c rules for IDL are split, the make process first
builds a .h file in pass one, and then re-creates the .h file in pass
two when client and server stubs are created. If the .h file is
exported it will be spuriously re-exported upon a subsequent build,
although a subsequent build should do nothing if the first one
succeeded.

Were we to ever implement .h file dependencies, this problem will
cause spurious-rebuilds of anything which depends upon it.

Added field Transarc Deltas with value `' 
Added field Transarc Herder with value `jaffe@transarc.com' 
Added field Transarc Status with value `open'

[1/28/93 public]
Deferring this until 1.0.3.  Actually, this will probably be dupped out
eventually because this whole IDL issue will be obsoleted with some of the
code cleanup work scheduled for 1.0.3/1.1.  (I.e., an IDL pass added to the
build procedures.)

[10/15/93 public]

Deferring this for the 1.1 code cleanup.

[1/21/94 public]

Re-assigning this to Mario Moreira who is also working on other idl pass
issues.

[1/24/94 public]
Fixed the misleading description and incorrect inter-related defects line,
dup-ed this to 2135.

I just couldn't resist commenting on this defect since I spent about 2
weeks on it (if not more... my memory is going) when I was a RAT, without 
solving it.  Here is the history:

   This was originally (as indicated by the "Dup of" line value I entered)
reported by IBM as defect 2135.  I think this was during the 1.0.1
timeframe.  At that time, I came up with a solution that addressed the
problem of the files being re-exported, but did not fully address the
secondary issue of .h files generated using .ACF files that are used by
more than one file in a directory to compile (this is explained further
below).  At the time, it was determined that this defect constituted an 
annoyance rather than something that actually caused build errors.  The 
potential for this situation to cause build errors does exist, it has just
never occured.  The behavior causing the defect is described by the
following note that I attached to defect 6709 to prove that 6709 was not a
dup of 5188, but which really ought to be here:

      During the EXPORT includes (FIRST/EXPINC) pass
        idl runs and generates a .h in the obj tree, which is then exported
        to the export tree.  So the dates for the .idl and the two .h files
        now looks like this:
          src              obj               export
         .idl older than   .h  same date as   .h

      During some subsequent pass (ie: EXP[SH]LIB or BASIC):
        idl runs to generate a *_cstub.c, *_sstub.c or some such.  In the
        course of doing this, idl generates a new .h file (generally
        because there is no way to tell idl not to generate a ".h" file,
        though this is not always the case) .  So NOW the 
        dates for the .idl and the two .h's looks like this:
          src              obj               export
         .idl older than   .h  NEWER THAN     .h

      The next time the EXPORT includes (EXPINC/FIRST) pass is run, make 
      performs the following sequence of checks:
         i.  I want to build ../export_tree/.h, it depends on .h. where is 
             .h?  It is here in the obj tree.  
         
        ii.  .h in the obj tree depends on the .idl file.  Where is the .idl
             file?  It is in the src tree.  Is it newer than the .h in the obj
             tree? No.  So the .h in the obj tree is up to date.  (Which is 
             why idl does not regenerate the .h on each EXPORT pass).

       iii.  Is the .h in the obj tree newer than the .h in the export tree?
             YES!  I better tar it/copy -p it out to the export tree.

     So the problem here is how to either make the export version of the
     .h depend on  the .idl file in the src tree, or to avoid changing the
     date on the .h file in the obj tree when the .*stub.c is generated.

     There is another problem hidden in defect 5188 as well.  When the 
     subsequent pass causes idl to regenerate the .h file, it may pick a 
     .acf file that could change the contents of the .h file that is 
     eventually, as described above, to the export tree.

To summarize: there are two problems here:

   1. The annoyance/inefficiency of having the ".h" files re-exported.
   2. The potential for incorrect .h files (ie: incorrect prototypes, etc.)
      to end up out in the export area.  This can happen if:
        i. the .h is exported during the EXPINC pass, and is used to create
           a [cs]stub.c file during a subsequent build pass.
       ii. when the second "idl" is done, a .ACF file is specified for the 
           .idl file  (through ifdefs in the Makefile, changes in the
           search path for idl imports, etc.).
  
Additionally, there is at least one constraint on the solution:

   1. Any .h generated from a .idl during the creation of a [cs]stub.c file
      should remain in the object tree for at least the duration of the
      current build pass in that directory, and possibly for the duration
      of the current build pass (though I would doubt that the latter is
      necessary ).  This is necessary to handle the following case:
         - a .acf is specified for a .idl
         - a number of files in the directory depend on the presence, in the
           generated .h file, of the attribute information from the .acf to
           compile correctly.
      My solution to 2135 did not not handle this case.  My solution was of
      the ilk of my solution to the DATAFILES pass; ie: if the .h I am
      going to generate in the course of generating some [cs]stub.c already
      exists in this directory, then mv (to preserve the mtime) it out of the
      way, generate the [cs]stub.c and the new .h, compile the [cs]stub.o,
      and the move the original .h back.  I was only able to make this work
      on a file by file basis (though I think it could be done for the
      directory as I think of it now).

This defect could conceivably addressed with a combination of the
following:
   1. Education  - make sure developers understand the problem and help
                   them to structure their makefiles and directory trees so
                   as to avoid the problem.
   2. IDL mods   - allow idl to either not generate a .h file, or make it
                   possible to specify the name of the generated .h. 
   3. Makefile mods - I can't think of any politically correct makefile
                      mods that will solve this problem (though of course
                      that does not mean such are non-existant).  I could
                      probably produce at least one politically incorrect 
                      solution if it was absolutely necessary.
   4. "make" mods - This whole area is pretty un-PC these days, but I
                    opened a defect on make while working on this defect
                    because one general solution was unavailable to me due
                    to a limitation in the behavior of the ":M" expansion 
                    modifier in "make".  It is not clear from the
                    description of the ":M" modifier that what I perceived
                    as a defect in fact was such, but if the finctionality
                    requested in the defect report was available, the
                    problem could be addressed in the Makefiles.  
                    You could also add the forbidden "only look in the 
                    source tree for this thing" semantic of the CMU make
                    to our make.

Or we could just not do anything until this is proven to be more than an 
annoyance issue.   Good Luck Mario.



