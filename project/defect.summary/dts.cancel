CR Number                     : 12340
Defect or Enhancement?        : def
CR in Code, Doc, or Test?     : code
Inter-dependent CRs           : 
Project Name                  : dce
H/W Ref Platform              : all
S/W Ref Platform              : all
Component Name                : dts
Subcomponent Name             : dtsd
Short Description             : dts stop makes dtsd spin
Reported Date                 : 9/26/94
Found in Baseline             : 1.1b19
Found Date                    : 9/26/94
Severity                      : B
Priority                      : 0
Status                        : cancel
Duplicate Of                  : 
Fix By Baseline               : 1.1
Fixed In Baseline             : 
Affected File(s)              : 
Sensitivity                   : public

[9/26/94 public]
dcecp> dts stop 

...never returns. dtsd is now spinning on my machine.

% ps axu
USER       PID %CPU %MEM   VSZ  RSS TTY      STAT STARTED         TIME COMMAND
root      7131 56.8 10.4 16.1M 3.75 ??       R    12:09:18     2:23.28 dtsd -s
[[rousseau 9/26/94 public]
A regular 'kill' of the dtsd process (SIGTERM) made the process go away 
nicely (it cleaned up and all), so it wasn't in a very tight loop.

[9/26/94 public]
I can't reproduce this on my bl19 486 or HP.

Starting and stopping dtsd works fine.
Note that it take a while for dtsd to exit (5-10 seconds) after
receiving the stop command.

root@tsunami % dtsd -s
root@tsunami % dcecp -c dts stop

root@tsunami % ps -ef | grep dts 
    root 19366     1  0 11:59:05 ?        0:00 /opt/dcelocal/bin/dtstimed
    root 19370     1  0 11:59:06 ?        0:00 /opt/dcelocal/bin/dts_ntp_provider -h server4 -p 600 -i 30
    root 19496 16045  3 12:42:11 ttyp0    0:00 grep dts
ro

[9/26/94 public]
Pilot error on my part. Cancel. Sorry for the fire drill.



CR Number                     : 12251
Defect or Enhancement?        : def
CR in Code, Doc, or Test?     : code
Inter-dependent CRs           : 
Project Name                  : dce
H/W Ref Platform              : i486
S/W Ref Platform              : osf1
Component Name                : dts
Subcomponent Name             : 
Short Description             : dtsd core dumps after ~6hrs
Reported Date                 : 9/19/94
Found in Baseline             : 1.1b18
Found Date                    : 9/19/94
Severity                      : A
Priority                      : 1
Status                        : cancel
Duplicate Of                  : 
Fix By Baseline               : 1.1
Fixed In Baseline             : 
Affected File(s)              : 
Sensitivity                   : public

[9/19/94 public]
CONFIG:
  osf/1   sec master, dtsd local server
  hpux    cds server, dtsd local server
  osf/1   client, dtsd local server

Dtsd core dumped after 6hrs of running security system tests.  Not
sure if this core info is helpful:
Core was generated by `dtsd'.
Program terminated with signal 10, Bus error.
#0  0xa4224936 in sdb ()
(gdb) break main
Breakpoint 1 at 0x4024ea
(gdb) run
Starting program: /opt/dcelocal/bin/dtsd 

Breakpoint 1, 0x4024ea in main ()
(gdb) kill
Kill the inferior process? (y or n) y
In Local core dump file,
#0  0xa4224936 in recv_pkt (Cannot access memory at address 0xa4224924.
(gdb) where
#0  0xa4224936 in recv_pkt (Cannot access memory at address 0xa4224924.
(gdb)

[9/28/94 public]
I have a 3 server, 1 clerk cell running bl-19, and I have not
seen any dtsd problems.  Has any system testing seen this again?
The backtrace above isn't helpful.
Possible security defect that got fixed?

[9/28/94 public]
Haven't seen it in a while so we'll cancel and can re-open if it 
pops back up.



CR Number                     : 11939
Defect or Enhancement?        : def
CR in Code, Doc, or Test?     : code
Inter-dependent CRs           : 
Project Name                  : dce
H/W Ref Platform              : rs6000
S/W Ref Platform              : aix
Component Name                : dts
Subcomponent Name             : 
Short Description             : dtsd core dumping on RIOS
Reported Date                 : 8/29/94
Found in Baseline             : 1.1b16
Found Date                    : 8/29/94
Severity                      : A
Priority                      : 1
Status                        : cancel
Duplicate Of                  : 
Fix By Baseline               : 
Fixed In Baseline             : 
Affected File(s)              : 
Sensitivity                   : public

[8/29/94 public]
Using bl-16, dtsd config'd as a local server on a RIOS core dumped:

root@cobbler> dbx /opt/dcelocal/bin/dtsd ./var/adm/time/core
dbx version 3.1 for AIX.
Type 'help' for help.
reading symbolic information ...
[memory image in ./var/adm/time/core]

segmentation violation in rpc_ns_binding_select at 0xd047e590
0xd047e590 (rpc_ns_binding_select+0x88) 80630004          l   r3,0x4(r3)
(dbx) where
rpc_ns_binding_select(0x2016b1f8, 0x2ff7e0d4, 0x2ff7e0cc) at 0xd047e590
rpc_ns_binding_import_next(0x2016b008, 0x2ff7e0d4, 0x2ff7e0cc) at 0xd047cf50
PopulateCacheFromRPCprofile(0x1, 0x200cbd10, 0x200cbd34) at 0x10025ac4
PopulateLocalCache(0x1002836c) at 0x100257f8
Synchronize(0x4, 0x2016af98) at 0x1002836c
ProcessEvent(0x2016af98) at 0x100005d4
main(0x2, 0x2ff7f994) at 0x100004bc

The cell had been up a little bit over 2 days at the time of the
core dump. Cell config is:

 1 RIOS X 3 HP
 m1 (R) = security server, dts server, flserver, fileserver (native and lfs)
 m2 (H) = cds server, dts server, flserver, fileserver (native and lfs)
 m3 (H) = dts server, flserver, fileserver (native and lfs)
 m4 (H) = client-only

ie. 3 local dts servers, 1 clerk - local dts server on m1 (and m3) core dumped
(different traces - HP dts core dump = CR 11912)

[9/12/94 public]
Haven't seen this - have config'd 3 RIOS's w/ bl-17 as dts local
servers successfully. George will exercise this along with config'ing
cds replicas repeatedly to give us confidence in downgrading/canceling
this CR and CR 11574.

[9/12/94 public]
I have a 3 machine cell and I have attached to the dtsd process
on each machine. We have been trying to get dtsd to core dump while
attached to it but so far that has not occured. We have been doing this
for over a week with BL16 and we are now running BL17. I am also
investigating how to get a core file that will contain the heap.
We have one machine here that dumps the heap with the core. This
would have been very useful for the core file reported for CR 11544,
which is similar to this CR.

[9/14/94 public]
George got dts to core dump this morning BUT ... the core dump looks
less useful than usual ... He is working on a script to loop stopping
and restarting dce core services and dbx attaching to the dtsd process.

[9/22/94 public]
Dropping to a 1 for the time being, hasn't been seen so may be canceled -

[9/22/94 public]
Could this problem be about the same as OT 12065?

[9/22/94 public]
It would be unlikeley since the backtrace above has no relation
to the shared memory segment.  Looking at rpc_ns_binding_select,
there are very few places to generate a seg-fault.  The only
pointer referenced is binding_vector, and from the arg list
it doesn't look to be trashed.  We might have to consider this
backtrace garbage and cancel this defect as unreproducable.
If during debugging SVC was turned on (for rpc for instance)
OT 12065 would occur andit might look like this was being duplicated.

[10/3/94 public]
Since I don't believe this is still being seen on the RIOS.
It could be related to 12065.
I am going to cancel this defect.  
Please re-open if someone with a RIOS has seen dtsd core dump with 
recent (bl-20 or later) builds.



CR Number                     : 11630
Defect or Enhancement?        : def
CR in Code, Doc, or Test?     : code
Inter-dependent CRs           : 
Project Name                  : dce
H/W Ref Platform              : all
S/W Ref Platform              : all
Component Name                : dts
Subcomponent Name             : dtsd
Short Description             : ERROR: time service in wrong state (dce / dts)
Reported Date                 : 8/9/94
Found in Baseline             : 1.1b14
Found Date                    : 8/9/94
Severity                      : C
Priority                      : 2
Status                        : cancel
Duplicate Of                  : 
Fix By Baseline               : 1.1
Fixed In Baseline             : 
Affected File(s)              : 
Sensitivity                   : public

[8/9/94 public]

I am entering this bug so this behavior gets recorded. I am not
sure if this is a serious error or an informative message. It 
happens often, so that if it is an error something is not working
a lot of the time.

Using dcecp or dtscp, several dts commands return:

dtscp example
------------
dtscp> sync
error executing command:
        time service in wrong state (dce / dts)

dcecp example
------------

dcecp> dts sync
Error: time service in wrong state

NOTE: it is not specific to the sync subcommand, other commands
      return the same error when it happens.

[8/19/94 public]
The dtsd will return a "wrong state" error if the time service
is not in the "on" state. This will be true, for example, if the 
time service is attempting to synchronize, or if the service has been
disabled. For example, a sync command issued while the daemon is 
synchronizing would generate this message. 

I'm cancelling this bug, since there are no code changes to be made
here.



CR Number                     : 11629
Defect or Enhancement?        : def
CR in Code, Doc, or Test?     : code
Inter-dependent CRs           : 
Project Name                  : dce
H/W Ref Platform              : rs6000
S/W Ref Platform              : aix
Component Name                : dts
Subcomponent Name             : dtsd
Short Description             : dtsd dumps core on RIOS 
after a few sync commands using dcecp or dtscp.
Reported Date                 : 8/9/94
Found in Baseline             : 1.1b14
Found Date                    : 8/9/94
Severity                      : A
Priority                      : 0
Status                        : cancel
Duplicate Of                  : 
Fix By Baseline               : 1.1
Fixed In Baseline             : 
Affected File(s)              : 
Sensitivity                   : public

[8/9/94 public]

Build: NB 08/08 (BL14.?)
Configurations:
OSF1: secd, dtsdm ntp provider
HPUX: cdsd, dtsd, 
RIOS: DCE client, dtsd 

dtsd on the RIOS dumps core after a few sync commands using dtscp or 
dcecp. I tried looking at the core but dbx prints 

"core does not contain a stack (core ignored)"

[08/09/94 public]

I want to add a couple of things:

1. dtsd just dies after having been runnig for a few minutes,
   eventhough no dtscp commands are executed.

2. There is another dtsd core dump CR that could be 
   related to this. That is CR 11590.

[8/10/94 public]

I'm including some comments from an email from Gail about another RIOS
crash that may shed some light on the problem. Also see 11590 for a 
backtrace on the HP. 

>But after awhile ... 

>1994-08-09-17:15:33.927-04:00I----- dtsd ERROR dts dtserror
>dtss_service_global_set.c 418 0x200abde8
>Couldn't get remote server entry name: no entry name (dce / rpc)
>The assert subroutine failed: (*((rpc_binding_rep_p_t *)
>binding_h))->refcnt > 0, file
>/project/dce/build/dce1.1-snap/src/rpc/runtime/combind.c, line 322

>Hmm - what d'ya think? Anyone else seen this? This happens to be
>on a rios so maybe it's not getting exercised as much there? No CR
>logged yet ... just hunting for ideas - thanks -

OK. This happens when we've ostensibly retrieved a binding handle from 
the namespace, and we want to know what the real entry was (since  we
might have been originally searching a group or profile). This says
that the binding handle wasn't retrieved from the namespace(!?), according
to my handy application development reference ... and, shortly thereafter,
we get an assertion failure when we do an rpc_binding_free. (I've included
the core dump from your other email)

(dbx) where
raise(0x0) at 0xd00c793c
abort(0x0) at 0xd00c784c
_assert(0x0, 0xdeadbeef, 0xdeadbeef) at 0xd011f3bc
rpc_binding_free(0x2ff7e61c, 0x2ff7e614) at 0xd035c6b4
PopulateCacheFromRPCprofile(0x1, 0x200c6a30, 0x200c6a54) at 0x100251a4
PopulateLocalCache(0x1002727c) at 0x100247f4
Synchronize(0x4, 0x2015b2f8) at 0x1002727c
ProcessEvent(0x2015b2f8) at 0x100005d0
main(0x2, 0x2ff7f9b8) at 0x100004b8

The symptom is certainly that of a corrupted binding handle returned 
from an rpc_ns_xxx call. Why it was corrupted is another story.

[8/11/94 public]

This is believed to be a RIOS specific problem. Re-assigning to IBM.

[8/12/94 public]

I installed the NB. I configured a dts clerk on the RIOS which
did a core dump about 20 minutes after configuration. At this 
point, we do not have a working dtsd, server or clerk, on RIOS.

Using dbx, the core says:

root@soldier> dbx /opt/dcelocal/bin/dtsd core
dbx version 3.1 for AIX.
Type 'help' for help.
reading symbolic information ...
[memory image in core]

segmentation violation in ProcessTimeResponseRPC at 0x1001a858
0x1001a858 (ProcessTimeResponseRPC+0x24) 80640004          l   r3,0x4(r4)
(dbx) where
ProcessTimeResponseRPC(0x20163f98) at 0x1001a858
ProcessTimeResponse(0x20163f98) at 0x1001a79c
Synchronize(0x0, 0x20163f98) at 0x10027ae0
ProcessEvent(0x20163f98) at 0x10000684
main(0x2, 0x2ff7f738) at 0x100004b8

Should I save the core?

[8/15/94 public]

There certainly seems to be something amuck in dts on the RIOS.  
I have not seen dts dump core (yet) but am having all sorts of problems
trying to configure it.  Stay tuned...

[8/16/94 public]
Hit this again (I'm using baseline 14) restarting dce on the RIOS
after having rebooted the machine. I waited quite awhile for 
/etc/dce_shutdown -f to work but finally gave up and rebooted
before it finished so perhaps there is corrupt data around? In any
event, DCE should be robust enough to handle a machine rebooting ...

I get the same core dump I did before:

root@cobbler> dbx /opt/dcelocal/bin/dtsd /opt/dcelocal/var/adm/time/core
dbx version 3.1 for AIX.
Type 'help' for help.
reading symbolic information ...
[memory image in /opt/dcelocal/var/adm/time/core]

abort process in raise at 0xd00c793c
0xd00c793c (raise+0x24) 80410014          l   r2,0x14(r1)
(dbx) where
raise(0x0) at 0xd00c793c
abort(0x0) at 0xd00c784c
_assert(0x0, 0xdeadbeef, 0xdeadbeef) at 0xd011f3bc
rpc_binding_free(0x2ff7e61c, 0x2ff7e614) at 0xd035c6b4
PopulateCacheFromRPCprofile(0x1, 0x200c6a30, 0x200c6a54) at 0x100251a4
PopulateLocalCache(0x1002727c) at 0x100247f4
Synchronize(0x4, 0x2015b2f8) at 0x1002727c
ProcessEvent(0x2015b2f8) at 0x100005d0
main(0x2, 0x2ff7f9b8) at 0x100004b

but the assert routine worked this time,the following messages
appeared MANY times:

%Internal DCE Threads problem (version CMA BL10+), terminating execution.
% Reason: assertion failure:  cma__Queue_next: Q corruption
	at line 1743 in /project/dce/build/dce1.1-snap/src/threads/cma_debugger.c, pid = 13750
% See 'cma_dump.log' for state information.

The cma_dump.log file was empty :-(

[8/17/94 public]

I was able to get dts configured as above here in Austin and it has been
running for over 24 hours, no problems.  Go figure.  I'm still on BL13.

How long did the RIOS run above before you decided to shut it down?  Is
there  some bad data in the files in /opt/dcelocal/var/adm/time?

[8/17/94 public]

Could you please rev up to BL14... it has been out since Aug 4th and it 
is now Aug 17th.

[gthome 8/18/94 public]  

Fine.  We'll move up.  Has any analysis been done to the changes that
occurred from BL13 to BL14 to see why a problem like this (and any others)
have occurred?

[8/19/94 public]

No, no extensive analysis has been done to the changes between bl13
and bl14. There were a lot of changes to all components in that time 
frame, any one of which could be causing problems in the dtsd. 

As indicated previously, I suspect a corrupted binding handle returned
from the namespace. Not clear what is corrupting it. And we don't see 
this same behavior on other platforms.

[8/24/94 public]
I configured a 2 machine cell with 2 6000s with both machines configured
as a DTS local server. When configuring the first machine, dtsd would
always report the following error and exit:

> dtsd ERROR dts dtserror 
> transport_rpc.c 1121 0x200a28d8
> Failed to add Time Service entry to LAN profile /.../knout.cell/lan-profile:
> no permission for name service operation (dce / rpc)

However, when I ran dce_shutdown and then brought the cell back up
using rc.dce, dtsd is running. The second machine had no problem
configuring the loacl dts server (I did this before the shutdown on
the first machine). I then tried to reproduce this problem by setting
up a shell script to continually run "dtscp sync". It has been running
for over an hour without any problems occuring.

[08/25/94 public]

I run the sanity tests last night using BL-16 and dtsd did not
core dump on the RIOS. Therefore, I am canceling this bug.



CR Number                     : 11612
Defect or Enhancement?        : def
CR in Code, Doc, or Test?     : code
Inter-dependent CRs           : 
Project Name                  : dce
H/W Ref Platform              : rs6000
S/W Ref Platform              : aix
Component Name                : dts
Subcomponent Name             : ntp provider
Short Description             : dts_ntp_provider fails to
start on a RIOS which is not running YP.
Reported Date                 : 8/9/94
Found in Baseline             : 1.1b14
Found Date                    : 8/9/94
Severity                      : C
Priority                      : 4
Status                        : cancel
Duplicate Of                  : 
Fix By Baseline               : 1.1
Fixed In Baseline             : 
Affected File(s)              : 
Sensitivity                   : public

[8/9/94 public]


The following error is displayed during the configuration of
the NTP provider on a RIOS machine. 


        Enter the hostname where the NTP server is running: pooch
 S:****** Starting dts_ntp_provider...
 dtsprovider: UDP/NTP: service unknown
 S:****** This node now has an NTP time provider running.

If the RIOS machine is running YP, then the problem goes away.

[8/9/94 public]
This is not a DCE bug and should be canceled.  

If the machine does not have the
ntp service in its /etc/service file, it is not DCE's fault
that it cannot run an ntp based service.

Yp has nothing to do with it, its just that on our network,
the YP /etc/service database contains the correct ntp entries.

[8/9/94 public]

To shed some more light on this subject. 

The problem on the RIOS is that there _is_ an entry in the
/etc/services file for the ntp service. However, this file is never
being consulted by the getservbyname() call (the call returns a null
pointer) However, when YP is enabled on that machine, the call
succeeds.  I infer from this that the software believes (somehow) that
the machine is configured to run NIS (YP), althought 1) the NIS domain
name has never been set, and ypbind isn't running. 

So: no, this isn't a DTS bug: it's more properly a host configuration
error. I had hoped to find out what files an NIS compatible
getxxxbyxxx() checks to see if it should use the NIS services, but 
couldn't find it yet. 

Moral: if your dtsprovider fails with the above mesage, check your NIS
maps or /etc/services file.



CR Number                     : 11590
Defect or Enhancement?        : def
CR in Code, Doc, or Test?     : code
Inter-dependent CRs           : 11629
Project Name                  : dce
H/W Ref Platform              : hppa
S/W Ref Platform              : hpux
Component Name                : dts
Subcomponent Name             : dtsd
Short Description             : dtsd core dump caused by bad free()
Reported Date                 : 8/8/94
Found in Baseline             : 1.1b14
Found Date                    : 8/8/94
Severity                      : A
Priority                      : 1
Status                        : cancel
Duplicate Of                  : 
Fix By Baseline               : 1.1
Fixed In Baseline             : 
Affected File(s)              : 
Sensitivity                   : public

[8/8/94 public]

dtsd dumped core on 3 of the six machines I was running tests on this
weekend.  Of the 3 machines, one was HP-UX, the other two were OSF/1.
The HP-UX yields a core that seems to point to a bad free().  

One of the OSF/1 core dumps was unusable, the other looked to be a dup,
but I'll include it here, just to be sure.

I know this probably isn't a dtsd problem, but I don't want to break
with tradition, so I'll open it under dtsd.

The HP core dump:

>t
0 free@libc + 0x00000008 (hp-ux export stub)
1 dce_svc__vfprintf@libdce + 0x00000364 (0x40010440, 0x1, 0x1, 0x7b03537c)
2 cma_lib_free@libdce + 0x00000148 (0x409f70c0, 0x3, 0x7b034efc, 0x2)
3 rpc__mem_free@libdce + 0x00000224 (0x409f70c0, 0x34, 0x7b0353c0, 0)
4 rpc_string_free@libdce + 0x0000004c (0x7b034f14, 0x7b034ef8, 0x1cb, 0x4000496c
)
5 PopulateCacheFromRPCprofile + 0x00000a08 (0x1, 0x4000f4c0, 0x4000f4e4, 0)
6 PopulateLocalCache + 0x00000028 (0x4000f4e4, 0x7b034808, 0x4000d4e8, 0x7b034d3
8)
7 Synchronize + 0x00001970 (0x4, 0x4095b070, 0x1000c, 0x210000)
8 ProcessEvent + 0x0000007c (0x4095b070, 0x400019f4, 0x19b, 0x40001a38)
9 main + 0x00000284 (0x2, 0x7b033ea0, 0, 0)
>

>lr $a
$arg0     = 0x409f70c0
$arg1     = 0x1
$arg2     = 0x40a0264c
$arg3     = 0x7b01278c
$arg3     = 0x7b01278c
>

>lr $r
$r0       = 0
$r1       = 0x24b5
$r2       = 0x800b27c3
$r3       = 0x7b0127b0
$r4       = 0x2
$r5       = 0x65722770
$r6       = 0
$r7       = 0x20707268
$r8       = 0xffffffd0
$r9       = 0
$r10      = 0
$r11      = 0
$r12      = 0x40003d38
$r13      = 0x1
$r14      = 0x2
$r15      = 0
$r16      = 0x402
$r17      = 0x40095cbc
$r18      = 0x400
$r19      = 0x7b007948
$r20      = 0x177dc000
$r21      = 0x800b27b8
$r22      = 0x7afebfd8
$r23      = 0x7b01278c
$r24      = 0x40a0264c
$r25      = 0x1
$r26      = 0x409f70c0
$r27      = 0x4000d320
$r28      = 0x177db009
$r29      = 0x409f70b8
$r30      = 0x7b035538
$r31      = 0x65722770
$ret0     = 0x177db009
$ret1     = 0x409f70b8

>p *($pc - 16)\20i
0x800b27b0  BV  0(2)
0x800b27b4  LDWM        -192(0,30),3
0x800b27b8  BL  _fp_status+0018,2
0x800b27bc  OR  0,0,0
0x800b27c0  LDW -24(0,30),2
0x800b27c4  LDSID       (0,2),1
0x800b27c8  MTSP        1,0
0x800b27cc  BE,N        0(0,2)
0x800b27d0  STW 2,-20(0,30)
0x800b27d4  STWM        3,192(0,30)
0x800b27d8  STW 4,-188(0,30)
0x800b27dc  STW 5,-184(0,30)
0x800b27e0  STW 6,-180(0,30)
0x800b27e4  STW 7,-176(0,30)
0x800b27e8  STW 8,-172(0,30)
0x800b27ec  STW 9,-168(0,30)
0x800b27f0  OR  26,0,4
0x800b27f4  STW 19,-32(0,30)
0x800b27f8  COMIBT,=    0,26,_fp_status+026c
0x800b27fc  OR  0,0,6

The OSF/1 core:

(gdb) where
#0  0xa434018a in sec_krb_decode_message_common
    (8194388, 2, 16292240, 16292252, 16292256, 16292336, 8194384, 8194248, 81942
84, 16292184)
#1  0xa436264a in sec_krb_cn_decode_message
    (8194388, 2, 16292252, 16292256, 16292336, 16292240, 16292184, 8194368, 8194
384, 16291908, 16291912)
#2  0xa4243bde in rpc__krb_cn_vfy_client_req
    (8329984, 4901688, 8364032, 1400, 0, 8194476)
#3  0xa420b25f in rpc__cn_assoc_process_auth_tlr
    (8329760, 5070880, 168, 5115936, 8194600, 8194592, 8330000, 0, 8329808)
#4  0xa4208cf1 in do_assoc_req_action_rtn (8329760, 5070848, 8329768)
#5  0xa420f255 in rpc__cn_sm_eval_event (100, 5070848, 8329760, 8329768)
#6  0xa4205927 in receive_dispatch (8329760)
#7  0xa4203484 in rpc__cn_network_receiver (8329760)
#8  0xa41ac3db in cma__thread_base ()
#9  0xa41b17cd in cma__create_thread ()
#10 0xa4202dd8 in rpc__cn_network_receiver ()
#11 0xa44bf998 in rpc_g_cn_assoc_lookaside_list ()
#12 0xa44bf998 in rpc_g_cn_assoc_lookaside_list ()
#13 0xb7c850 in sdb ()
#14 0x4b2f50 in sdb ()

[8/10/94 public]

Peter has told me that this occurred during a weekend series of tests,
where at least one machine ran out of swap space. For this reason, I'm
downgrading this to 1 priority 1 until we can reproduce this.

The HP core dump is suspiciously similar to a core dump obtained on
the RIOS (see CR 11629).

[8/16/94 public]

Peter can't reproduce this problem. With his agreement, I'm cancelling
this CR.



CR Number                     : 11544
Defect or Enhancement?        : def
CR in Code, Doc, or Test?     : code
Inter-dependent CRs           : 
Project Name                  : dce
H/W Ref Platform              : rs6000
S/W Ref Platform              : aix
Component Name                : dts
Subcomponent Name             : server
Short Description             : Exception: status 177db035 (dce / thd)
Reported Date                 : 8/3/94
Found in Baseline             : 1.1b13
Found Date                    : 8/3/94
Severity                      : B
Priority                      : 1
Status                        : cancel
Duplicate Of                  : 
Fix By Baseline               : 
Fixed In Baseline             : 
Affected File(s)              : 
Sensitivity                   : public

[8/3/94 public]

Restarting CHO cell (split sec - cds servers) with /etc/rc.dce(.1's and .2's
to handle synchronization), I've hit the following just once:

1994-08-03-10:25:36.778-04:00I----- dtsd ERROR dts dtserror dtss_service_global_set.c 459 0x200ab8f8
Couldn't get remote server's principal name: communications failure (dce / rpc)
1994-08-03-10:25:36.913-04:00I----- dtsd WARNING dts config logevent_v_ultrix.c 259 0x200ab8f8
Too few servers (1), need 3 servers
Exception: status 177db035 (dce / thd)

Using dbx on core file:
[memory image in /opt/dcelocal/var/adm/time/core]

segmentation violation in unnamed block $b1 at line 255 in file "utc_adjtime_user.c"

(dbx) where
unnamed block $b1, line 255 in "utc_adjtime_user.c"
user_utc_adjtime(mode = endadjust, argblk = (nil)), line 255 in "utc_adjtime_user.c"
utc_adjtime(modeflag = endadjust, argblk = (nil)), line 88 in "lclcalls.c"
AdjustClkEnd(0x2ff7eedc, 0xc34) at 0x1002e6c0
Synchronize(0x2, 0x20157668) at 0x100267c8
ProcessEvent(0x20157668) at 0x100006a4
main(0x2, 0x2ff7fd14) at 0x100004b8

[8/4/94 public]

Quick preliminary investigation sez ..

177db035 ==>

Tech = 1 = 01 = 0x1 = dce
Comp = 30683 = 073733 = 0x77db = thd
Mesg = 53 = 065 = 0x35 = Object referenced does not currently exist

Call appears to be a result of the utc_writelock() call from line 255
in utc_user_adjtime(). May be calling cma_lock_global()? Otherwise,
no other calls to the threads package appears in the module; it uses
semaphore operations instead.

[8/15/94 public]

Re-assigning this one to IBM to look at.

[8/23/94 public]
I have not been able to reproduce this problem. I tried several
different methods of stopping and starting dce but I was never able
to get dtsd to dump core. These tests were done using the 16 build.

[8/29/94 public]
Exception: status 177db035 (dce / thd)

Seen again today with 16.2 - first time seen again during my last
2 weeks of testing however so not easy to reproduce on demand. New
stack trace is:

root@cobbler> dbx /opt/dcelocal/bin/dtsd core
dbx version 3.1 for AIX.
Type 'help' for help.
reading symbolic information ... 
[memory image in core]

abort process in cma__abort_process at 0xd033c0d8
0xd033c0d8 (cma__abort_process+0x4c) 80410014          l   r2,0x14(r1)
(dbx) where
cma__abort_process(0x6) at 0xd033c0d8
exc_raise(0x2ff7de10) at 0xd033ac98
exc_raise_status(0x177db035) at 0xd033ad74
cma__error(0x177db035) at 0xd0312a3c
cma__validate_handle(0x20166e80, 0x3) at 0xd0322f70
ptdexc_mutex_lock(0x20166e80) at 0xd0392254
release_cached_ccall(0x20161088) at 0xd04ebf90
rpc__dg_binding_free(0x2ff7e0b8, 0x2ff7e0b0) at 0xd04ec204
rpc__binding_free(0x2ff7e0b8, 0x2ff7e0b0) at 0xd03624fc
rpc_binding_free(0x2ff7e0b8, 0x2ff7e0b0) at 0xd0362700
PopulateCacheFromRPCprofile(0x1, 0x200c2e40, 0x200c2e64) at 0x1002613c
PopulateLocalCache(0x100282d0) at 0x100257b4
Synchronize(0x4, 0x2015ca18) at 0x100282d0
ProcessEvent(0x2015ca18) at 0x100005d8
main(0x2, 0x2ff7f98c) at 0x100004bc

[8/29/94 public]

Groan. These symptoms look familiar. There was a previous core dump
with this same signature, but the error was discovered earlier in the 
freeing sequence. We originally suspected a trashed binding handle
begin returned from the rpc_ns_binding_xxx() call. 

Sure looks like memory corruption to me. And in different places, to
boot

[8/30/94 public]
IBM getting the core file in AFS cell as soon as I'm given permission
to the directory. Note that this bug seems 
only to occur on restart and that the cell is split server. After
this failure, restarting dtsd works fine. Note that other/different
problems with dts are being seen on the HP and the audit code is
suspected there (currently). You may want to try linking with and
without audit code once you've reproduced this CR - note that audit
code IS linked in by default with bl-16.2. (If you haven't been building
that way, that may explain the difference in symbol tables).

[8/30/94 public]
Although -laudit is specified when building dtsd, the audit code 
is *not* turned on in bl16.2. This requires that the symbol
DCE_AUD_POINTS be defined as a compile time constant; this isn't done 
right now as far as I know. Am I wrong about this?

[8/30/94 public]
Probably not - guess I misunderstood - adding zeliff and rousseau
to the interest list for confirmation.

[9/01/94 public]
I have the core file and although dbx doesn't seem to give me the
proper stack traceback, I have been examining the stack by using the
stack trace listed above. Nothing conclusive yet. I am still
investigating.

[9/1/94 public]
If the audit code points aren't compiled in, then nothing should be calling
the audit API.  I don't think the problem lies in audit.

[9/12/94 public]
Apparently the core file didn't contain the heap where thread info
would be - bummer. George is going to work in a cell here to try to
reproduce - probably restarting dts w/in dbx to catch what's going
on.

[9/20/94 public]
Is this still seen?  Any status?

[9/20/94 public]
I have been running BL18 since 9/18 and it hasn't dumped core yet.
I ran BL17 on two machines for 1 week without having dtsd dump core.

[9/20/94 public]
George and I only got 1 dts core dump during on-site week.
Unclear whether it was this CR or the other dts core dump one
since the core dump was not useful.

[10/3/94 public]
I believe this was a problem with the user-mode libutc not getting
initialized correctly.  There were certain situations where someone
(in this case libaudit?) calls utc_gettime() before dtsd does,
which sets up access to the shared memory segment to be read-only.
This *could* be related, but seeing as this hasn't been seen
recently (bl-19 or later), perhaps the fix for the previous
problem helped in this case.

Canceled.  Please re-open if exception seen again.



CR Number                     : 11223
Defect or Enhancement?        : def
CR in Code, Doc, or Test?     : code
Inter-dependent CRs           : 
Project Name                  : dce
H/W Ref Platform              : hppa
S/W Ref Platform              : hpux
Component Name                : dts
Subcomponent Name             : dtsd
Short Description             : dtsd fails to start, even after
a reboot, dtsd ERROR dts dtserror 0x7aff0340
Reported Date                 : 7/8/94
Found in Baseline             : 1.1
Found Date                    : 7/8/94
Severity                      : A
Priority                      : 0
Status                        : cancel
Duplicate Of                  : 
Fix By Baseline               : 1.1
Fixed In Baseline             : 
Affected File(s)              : none
Sensitivity                   : public

[7/8/94 public]

NB of July 5. 

-rwxr-xr-x   1 bin      bin       348808 Jul  5 23:34 /opt/dcelocal/bin/dtsd

I am not sure if this is a duplicate of OT 11119 or related.
I did not find the message printed here by dtsd in 11119.
dtsd takes a long time to print the message. The error happens 
everytime /etc/rc.dce starts -

root@bronze> /etc/rc.dce
        /opt/dcelocal/bin/dced
No currently established network identity for which context exists
DCED listening...
        /opt/dcelocal/bin/secd
        /opt/dcelocal/bin/sec_clientd
        /opt/dcelocal/bin/cdsadv
        /opt/dcelocal/bin/dtsd -s
1994-07-08-16:08:41.809-04:00I----- dtsd ERROR dts dtserror 0x7aff0340
Error in rpc_mgmt_is_server_listing() call: status 0x00000000 (? / aaa)

Fatal error at line 275 in file /project/dce/build/dce1.1-snap/src/time/service/transport_rpc.c
        /opt/dcelocal/bin/dtstimed
root@bronze> uptime
  4:10pm  up 16 mins,  9 users,  load average: 0.29, 0.30, 0.27

[07/11/94 public]

Some additional light on this problem. The error messages is generated
when the dtsd has called rpc_mgmt_is_server_listening() in a loop 
for K_MAX_LISTEN_COUNT (30) time, waiting for 5 seconds per loop. 
It exits the loop if rpc_mgmt_is_server_listening return TgRUE, or 
if the call returns an error, or if the loop count is exhausted. 

There is an outstanding bug in the code that always prints the DCE
error code regardless of the reason for failure, which is why we see 
an error status of 0.

dtsd creates a separate thread to perform initialization, and then 
issue the rpc_server_listen() call. The above tells me that the dtsd
failed to initialize properly.

[7/14/94 public]

Some further information. I configured a 2 machine cell (servers on
HP, client on 486 with bl-11), and started DCE. Both machines came up
fine. I then stopped the DCE processes on the client machine, and then
restarted. Everything worked fine. 

As stated earlier, I suspect a problem with cdsd in that cell. The
symptoms of this bug are certainly consistent with being unable to
successfully contact the namespace (although a failure would have
generated a set of different error messages). 

I will continue to check into this, but I do not believe that this is
a dts problem per se. Note that a fix for the uninformative error
message above has already been submitted.

[7/15/94]

After talking with Martha, we have agreed to cancel this CR. A more
informative error message is now generated, and the sams file will be
updated to indicate that the system administrator should investigate
whether the namespace is working properly.



CR Number                     : 11136
Defect or Enhancement?        : def
CR in Code, Doc, or Test?     : code
Inter-dependent CRs           : 
Project Name                  : dce
H/W Ref Platform              : i486
S/W Ref Platform              : osf1
Component Name                : dts
Subcomponent Name             : 
Short Description             : dtsd WARNING "Too few servers"
Reported Date                 : 6/29/94
Found in Baseline             : 1.1
Found Date                    : 6/29/94
Severity                      : B
Priority                      : 1
Status                        : cancel
Duplicate Of                  : 
Fix By Baseline               : 1.1
Fixed In Baseline             : 
Affected File(s)              : 
Sensitivity                   : public

[6/29/94 public]


I configured a one node cell from bl-10.3 on a 486 machine.
When I choose DTS Local Server from the DTS Configuration Menu
I got the following:


        selection:  1994-06-29-17:16:15.730-04:00I----- dtsd WARNING dts config 0xa44b4acc
Too fews servers (1), need 3 servers


This looks like this might be an error.

[6/29/94 public]

And the message continues to be issued at approximately 1 minute intervals


 fews servers (1), need 3 servers
1994-06-29-17:24:28.847-04:00I----- dtsd WARNING dts config 0xa44b4acc
Too fews servers (1), need 3 servers
1994-06-29-17:26:03.300-04:00I----- dtsd WARNING dts config 0xa44b4acc
Too fews servers (1), need 3 servers

[6/29/94 public]
Not to belabor the obvious but the above are WARNINGs.
You only have 1 server, DTS wants 3.

If you don't wish to see these warnings, you should edit the
/opt/dcelocal/var/svc/routing file and direct them to a file (or /dev/null).

Or better yet, run a Time Provider on this machine.

[6/29/94 public]
This is documented behavior on the part of the dtsd. 
See section 15.4.1.1 of the OSF DCE Administration Guide on how to 
change the number of servers required.

[6/29/94 public]
I did the following:

  $ dcecp
  dcecp> login cell_admin -password -dce-
  dcecp> dts mod -minservers 1
  dcecp>



CR Number                     : 10998
Defect or Enhancement?        : def
CR in Code, Doc, or Test?     : code
Inter-dependent CRs           : 
Project Name                  : dce
H/W Ref Platform              : rs6000
S/W Ref Platform              : aix
Component Name                : dts
Subcomponent Name             : dtscp and dcecp
Short Description             : On RIOS, the user must be
cell_admin to run dtscp (or dcecp dts) successfully, but not on HP or OSF1.
Reported Date                 : 6/17/94
Found in Baseline             : 1.1
Found Date                    : 6/17/94
Severity                      : C
Priority                      : 3
Status                        : cancel
Duplicate Of                  : 
Fix By Baseline               : 1.1
Fixed In Baseline             : 
Affected File(s)              : 
Sensitivity                   : public

[6/17/94 public]


On the RIOS only- dtscp requires that the user be cell_admin
before subcommands can be executed sucessfully. All the platforms
should behave the same.

Using dtscp:

root@soldier> dtscp
warning - DTS control program is not authenticated:
        No currently established network identity for which context exists
(dce / sec)
dtscp> sync
error executing command:
        must have write permission to the DTS entity (dce / dts)
dtscp> quit


Using dcecp:

root@soldier> dcecp
dcecp> dts sync
Error: must have write permission to the DTS entity
dcecp> quit

[6/17/94 public]

dtsd requires that one either be logged in as the machine principal,
or be a member of the dts-admin group in order to issue commands that 
modify the internal state of the daemon. The default ACL looks like
this:

unauthenticated:r--
user:hosts/falcon/self:rwc
group:subsys/dce/dts-admin:rwc
any_other:r--

Assuming that you weren't root, cell-admin, or were a member of the 
the dts-admin group, then the above behavior is exactly right. 
Exactly how did the RIOS differ from the HP/OSF1 in this regard?

[6/17/94 public]

I was root on the RIOS when I invoked dtscp. That is the confusing part.
It appears that on the RIOS, being root is not sufficient to use 
dtscp or dcecp dts successfully. On the HP and OSF1, being root is 
sufficient. I have a cell running with a RIOS, an OSF/1, and HP 
if you need check.

[6/17/94 ]

Thanks to Charlie for verifying that this is not a problem.
I always work as root on the QA machines so I did not question
I was not, for some unknown reason to me at this moment, dtscp
saw me as other user thatn root.



CR Number                     : 10291
Defect or Enhancement?        : def
CR in Code, Doc, or Test?     : doc
Inter-dependent CRs           : 
Project Name                  : dce
H/W Ref Platform              : all
S/W Ref Platform              : all
Component Name                : dts
Subcomponent Name             : command_ref
Short Description             : Misleading example in DTS
section of OSF DCE Admin Ref
Reported Date                 : 4/5/94
Found in Baseline             : 1.1
Found Date                    : 4/5/94
Severity                      : C
Priority                      : 2
Status                        : cancel
Duplicate Of                  : 
Fix By Baseline               : 1.1
Fixed In Baseline             : 
Affected File(s)              : 
Sensitivity                   : public

[4/5/94 public]

While doing work on the DTS error messages, I cam accross the following
misleading exaple in the OSF DCE Administration Reference.

On page 3-31 the example shown is:

dtscp> update time 1993-12-30-11:24:00.000-0500I0.000

This indicates an inaccuracy setting of 0.  However, on page 15-18 of the
OSF DCE Administration Guide--Core Components it states:

   The minimum reliable inaccuracy that you can achieve with the update 
   command is approximately 1 second.  Human error and processing delays 
   combine to make lower settings unreliable.

Therefore, the example is misleading.

[6/28/94 public]
Changed this to a doc bug. No code needs to change to fix this.

[6/30/94 public]

Assigned this CR to Peter Neilson (OSF DTS writer).

[8/29/94 public]
I am cancelling this CR because it covers dtscp material that has been
obsoleted by dcecp.



CR Number                     : 9990
Defect or Enhancement?        : def
CR in Code, Doc, or Test?     : code
Inter-dependent CRs           : 
Project Name                  : dce
H/W Ref Platform              : all
S/W Ref Platform              : all
Component Name                : dts
Subcomponent Name             : 
Short Description             : secd/cdsd/dtsd Core Dumps due to NTP change
Reported Date                 : 2/22/94
Found in Baseline             : 1.1
Found Date                    : 2/22/94
Severity                      : D
Priority                      : 3
Status                        : cancel
Duplicate Of                  : 
Fix By Baseline               : 1.1
Fixed In Baseline             : 
Affected File(s)              : 
Sensitivity                   : public

[2/22/94 public]

Paul Ellis writes:

  Using the serviceability logs on my machine I found that dts changed
my clock backwards ~18 minutes.  I guess it would be nice if dts didn't
just take the ntp provider time without a challenge, if there is a big
difference between the local clock and local time (from ntp time prov-
ider), maybe dts should consider throwing out the ntp time.  There might
be a way to configure dts to do this, I'm not sure.  Here is the inform-
ation from my serviceability logs:

ERROR:

1994-02-20-02:45:08.778-05:00I0.962 dtsd ERROR dts events 0xa442ef38 Local clock
 was not intersecting, local time = 1994-02-20-02:45:08.778-05:00I0.962, compute
d time = 1994-02-20-02:37:20.730-05:00I0.346. It has been reset.
1994-02-20-02:55:14.067-05:00I463.069 dtsd ERROR dts events 0xa442ef38 Local clo
ck was not intersecting, local time = 1994-02-20-02:55:14.067-05:00I463.069, com
puted time = 1994-02-20-02:37:20.035-05:00I0.346. It will be adjusted.

NOTICE:

1994-02-20-02:35:02.472-05:00I0.400 dtsd NOTICE dts sync 0xa442ef38 Synchronizat
ion completed, computed time = 1994-02-20-02:35:02.428-05:00I0.346, adjustment =
 -0-00:00:00.044I0.000
1994-02-20-02:45:08.818-05:00I468.404 dtsd NOTICE dts sync 0xa442ef38 Synchroniz
ation completed, computed time = 1994-02-20-02:37:20.730-05:00I0.346, adjustment
 = -0-00:07:48.048I0.000
1994-02-20-02:37:20.035-05:00I0.356 dtsd NOTICE dts sync 0xa442ef38 Synchronizat
ion completed, computed time = 1994-02-20-02:37:20.035-05:00I0.346, adjustment =
 -0-00:17:54.033I0.000
1994-02-20-02:37:20.035-05:00I0.356 dtsd NOTICE dts events 0xa442ef38 Clock was
set, old time = 1994-02-20-02:55:14.067-05:00I463.069, new time = 1994-02-20-02:
37:20.035-05:00I0.346

[02/22/94 public]

Tom Jordahl writes:

pellis@osf.org writes:
> 
> 
> Jeff,
>   Using the serviceability logs on my machine I found that dts changed
> my clock backwards ~18 minutes.  I guess it would be nice if dts didn't
> just take the ntp provider time without a challenge, if there is a big
> difference between the local clock and local time (from ntp time prov-
> ider), maybe dts should consider throwing out the ntp time.  There might
> be a way to configure dts to do this, I'm not sure.  Here is the inform-
> ation from my serviceability logs:

The concept behind a Time Provider is that is it is an acurrate source
of time.  Its NTP that is the problem here.

Also note that the other servers in the cell probably didn't
think the time provider node had the correct time and ignored
it.  (server time would not intersect computed time).

[02/22/94 public]

Paul Ellis writes:

>  
>  The concept behind a Time Provider is that is it is an acurrate source
>  of time.  Its NTP that is the problem here.
>  

You're right, the dts_ntp_provider was just passing the time along to
dtsd.  Couldn't dtsd throw out a bogus NTP time and let the local server
just sync with the other local servers in the cell?

>
>  Also note that the other servers in the cell probably didn't
>  think the time provider node had the correct time and ignored
>  it.  (server time would not intersect computed time).
>  

Actually, the whole cell stopped because once the clock was set backwards
on tahiti, which was running dts_ntp_provider, secd, cdsd and dtsd all dumped
core.  I guess what I have learned is that I should only configure the
dts_ntp_provider on a security and cds client only machine running as a
local server, that way the whole cell won't stop if the NTP server screws
the time up.

[07/19/94]

After discussion with Tom Jordahl, I've decided to cancel this bug.
The Time Provider is seen as providing an accurate source of time to
the dtsd running on that machine, and should be believed.



CR Number                     : 9749
Defect or Enhancement?        : def
CR in Code, Doc, or Test?     : code
Inter-dependent CRs           : 9661
Project Name                  : dce
H/W Ref Platform              : all
S/W Ref Platform              : all
Component Name                : dts
Subcomponent Name             : dtsd
Short Description             : dtsd should verify dts-entity
Reported Date                 : 1/17/94
Found in Baseline             : 1.1
Found Date                    : 1/17/94
Severity                      : B
Priority                      : 2
Status                        : cancel
Duplicate Of                  : 
Fix By Baseline               : 1.1
Fixed In Baseline             : 
Affected File(s)              : 
Sensitivity                   : public

[1/17/94 public]

The dtsd exports it binding information to the namespace in
		/.:/hosts/<machine>/dts-entity

On startup, (or actually, when it goes to export itself to this object)
it should read back all entries and remove the ones that don't belong.

Probably the simplest way to do this would be to delete all entries
from the object before exporting the correct one.

An example of why this should be done:
	dts server running on host a
	host a crashes, dts doesn't unexport to namespace
	host a changes IP address
	dtsd come up and doesn't remove bindings, clients can't find dtsd.

[8/23/94 public]
Having examined the code, dtsd does an rpc_ns_binding_unexport() on
the interface ID and object UUID for both it's control interface, and 
for the time service interface. Based on my reading of the
documentation, this should remove all binding handles and object uuids
registered under that name service entry. 

Cancelled.



CR Number                     : 9574
Defect or Enhancement?        : def
CR in Code, Doc, or Test?     : code
Inter-dependent CRs           : 
Project Name                  : dce
H/W Ref Platform              : i486
S/W Ref Platform              : osf1
Component Name                : dts
Subcomponent Name             : 
Short Description             : utc_asclocaltime creates a string that can't be given to utc_mkasctime
Reported Date                 : 12/3/93
Found in Baseline             : 1.0.3
Found Date                    : 12/3/93
Severity                      : C
Priority                      : 2
Status                        : cancel
Duplicate Of                  : 
Fix By Baseline               : 1.1
Fixed In Baseline             : 
Affected File(s)              : 
Sensitivity                   : public

[12/3/93 public]
Calling utc_asclocaltime() to get the local time will return an
absolute DTS style timestamp that can't be handed back to
utc_mkasctime(). 

Why? Because utc_asclocaltime() returns:
1993-12-03-23:03:55.588+00:00I-----

While utc_mkasctime() wants to see something on the order of:
1993-12-03-23:03:55.588+00:00I---.--
                                 ^

utc_mkasctime should be changed to accept the syntax returned by 
utc_asclocaltime().

[7/18/94 public]

The following program, when run against the DCE1.1b11 build, passes
with no error, and prints out identical strings.

#include <stdio.h>
#include <stdlib.h>
#include <dce/utc.h>

int main(int ac, char * av[])
{
    utc_t u ;
    char localtime[ UTC_MAX_STR_LEN ] ;
    char convtime[ UTC_MAX_STR_LEN ] ;

    if (utc_asclocaltime( localtime, UTC_MAX_STR_LEN, (utc_t *)0))
    {
	fprintf(stderr, "asclocaltime blows chunks!\n") ;
	exit(1);
    }
    printf("utc_asclocaltime returns %s\n", localtime) ;

    if (utc_mkasctime( &u, localtime)) {
	fprintf(stderr, "utc_mkasctime fails!\n");
	exit(1);
    }

    if( utc_asclocaltime( convtime, UTC_MAX_STR_LEN, &u))
    {
	fprintf(stderr, "asclocaltime chokes on converted input\n");
	exit(1);
    }
  

   printf("utc_mkasctime returns %s\n", convtime) ;
    exit(0);
}

Closed. Can't duplicate.



CR Number                     : 9351
Defect or Enhancement?        : def
CR in Code, Doc, or Test?     : code
Inter-dependent CRs           : 
Project Name                  : dce
H/W Ref Platform              : rs6000
S/W Ref Platform              : aix
Component Name                : dts
Subcomponent Name             : dts api
Short Description             : utc_mkbin*time accepts NULL pointers as input
Reported Date                 : 11/3/93
Found in Baseline             : 1.0.3
Found Date                    : 11/3/93
Severity                      : D
Priority                      : 3
Status                        : cancel
Duplicate Of                  : 
Fix By Baseline               : 1.0.3
Fixed In Baseline             : 
Affected File(s)              : common/utcapi.c
Sensitivity                   : public

[11/3/93 public]
utc_mkbin*time accepts NULL pointers as input for *utc, *timesp
and *inaccsp.
I have added
	if (utc == NULL || timesp == NULL || inaccsp == NULL)
		return (-1);
at the beginning of each of the two routines.

[11/04/93 public]
When I first joined OSF, IBM had opened a handful of OT reports on various
parts of the DTS API taking NULL parameters.  We decided, way back then,
that checking for NULL is *not* something DCE code should be doing.
Passing in a NULL pointer is a programming error.  Many experienced
programmers would rather see an immediate core dump then an obscure
run-time error.

This "defect" should be cancelled.

[11/04/93 public]
Sorry, but as Rich says, we don't check for NULL pointers 
(and its a religious argument).  Jim Wade submitted a bunch of these
types of bugs, and we consolodated them all in to a enhancement
request which would verify a utc_t value.  Not much help for this
particular instance, but....

Anyway, we understand if IBM wants this in their code, but we usually
don't do it in ours.

Canceled.



CR Number                     : 9256
Defect or Enhancement?        : def
CR in Code, Doc, or Test?     : code
Inter-dependent CRs           : 
Project Name                  : dce
H/W Ref Platform              : rs6000
S/W Ref Platform              : aix
Component Name                : dts
Subcomponent Name             : dtsd core dump
Short Description             : dtsd dumped core during dcetmsyn system test
Reported Date                 : 10/26/93
Found in Baseline             : 1.0.3
Found Date                    : 10/26/93
Severity                      : A
Priority                      : 0
Status                        : cancel
Duplicate Of                  : 
Fix By Baseline               : 1.0.3
Fixed In Baseline             : 
Affected File(s)              : 
Sensitivity                   : public

[10/26/93 public]

While running the dcetmsyn system test using the nightly build available on
10/25/93, dtsd dumped core after running for 16 hours.  The dtsd process had
been up for 18 hours.  I have the core saved in:

	soldier:/opt/dcelocal/var/adm/time/core.save

[10/26/93 public]

Also, soldier is configured as a DTS Local Server in a 13 machine cell
with two other local servers, one HP-UX and one OSF/1.

[10/26/93 public]
I can't debug this:
root@soldier> dbx /bin/dtsd core.save
dbx version 3.1 for AIX.
Type 'help' for help.
core.save does not contain a stack (core ignored)
reading symbolic information ...

I will try to remember the 'smit' magic which will produce useable
core files on a RIOS, and do said magic to soldier.

[10/28/93 public]

Cancelled, I fixed two problems (1 - infinite growing inaccuracy caused by
invalid ntp server, 2 - set ulimits to unlimited) and successfully executed
the dcetmsyn system test for 48 hours.  I'm not sure what caused the core
dump but it is not reproduciple.



CR Number                     : 8871
Defect or Enhancement?        : def
CR in Code, Doc, or Test?     : code
Inter-dependent CRs           : 
Project Name                  : dce
H/W Ref Platform              : rs6000
S/W Ref Platform              : aix
Component Name                : dts
Subcomponent Name             : dtscp
Short Description             : The range for the dtscp command "set local/global set timeout" is wrong.
Reported Date                 : 9/29/93
Found in Baseline             : 1.0.3
Found Date                    : 9/29/93
Severity                      : D
Priority                      : 3
Status                        : cancel
Duplicate Of                  : 
Fix By Baseline               : 1.1
Fixed In Baseline             : 
Affected File(s)              : 
Sensitivity                   : public

[9/29/93 public]
According to the man pages, the range of the dtscp command "set local
set timeout" is from 0-00:00:01.000 to 0-00:05:00.000, but the range
enforced by dtscp is 0-00:00:00.000 to 0-00:01:00.000.
The default should be 0-00:00:02.000, but is 0-00:00:05.000.

According to the man pages, the range of the dtscp command "set global
set timeout" is from 0-00:00:01.000 to 0-00:10:00.000, but the range
enforced by dtscp is 0-00:00:00.000 to 0-00:10:00.000.

[10/25/93 public]
In common/dtss_attr_ranges.h, I changed

/* default 'set local set timeout' = 2 sec. */
#define K_LAN_TIMEOUT_LO (2 * K_100NS_PER_SEC)

/* minimum 'set local set timeout' = 1 sec. */
#define K_MIN_LAN_TIMEOUT_LO (K_100NS_PER_SEC)

/* maximum 'set local set timeout' = 5 minutes */
#define K_MAX_LAN_TIMEOUT_LO (5 * K_100NS_PER_SEC * 60)

/* minimum 'set global set timeout' = 1 sec. */
#define K_MIN_WAN_TIMEOUT_LO (K_100NS_PER_SEC)

The ranges now seem to be correct.

[10/26/93 public]
The default local set timeout was raised to 5 seconds and should be
documented that was in recent (1.0.2-1.0.3) docs.

The range enforcement should be fixed.

[10/26/93 public]
The latest 1.0.3  code and docs match for local set timeout.  
Range is 0 sec - 1 min and the default is 5 sec.

For global set timeout, both code and docs match as well.
Range is 0 sec to 10 mins and default is 15 sec.

It looks like everything mentioned here is fine.  Perhaps this is a dup of
5500.  It certainly seems as if the foundin baseline field is wrong,
because the 1.0.3 code looks fine to me.  If I'm missing something then
please tell me, otherwise cancel this bug.

[7/15/94]

The DCE Administration Reference, Update 1.0.3, matches what Howard
has stated above, as do the values in
src/dts/common/dtss_attr_ranges.h.
Cancelling the bug.



CR Number                     : 8047
Defect or Enhancement?        : def
CR in Code, Doc, or Test?     : code
Inter-dependent CRs           : 
Project Name                  : dce
H/W Ref Platform              : rs6000
S/W Ref Platform              : aix
Component Name                : dts
Subcomponent Name             : 
Short Description             : Stail UUID prevents write
permission to dts-entity when initializing time service.
Reported Date                 : 5/24/93
Found in Baseline             : 1.0.2
Found Date                    : 5/24/93
Severity                      : B
Priority                      : 2
Status                        : cancel
Duplicate Of                  : 
Fix By Baseline               : 1.1
Fixed In Baseline             : 
Affected File(s)              : 
Sensitivity                   : public

[5/24/93 public]
Intermittently we receive the message "must have write
permission to the DTS entity (dce / dts)"  when
executing "dtscp create type clerk".  This is shown below
when using mkdce to configure dts.  On AIX mkdce executes
rc.dce and rc.dce executes rc.dts.  rc.dts executes
"dtscp create type clerk" but fails with the error unable
to write to dts entity.  The only way we have been able
to reproduce this problem is to unconfigure Initial cds server,
cds clerk and dts.  We keep security master server, security client,
and rpc endpoint mapper configured.  We then execute the
mkdce -n os2dce17.austin.ibm.com -s os2dce17.austin.ibm.com 
cds_srv sec_srv all_cl to reconfigure cds and dts.  After doing 
this 3 or 4 times this results in the error message. 
We have seen this problem less frequently
when doing a normal unconfiguration and reconfig.

mkdce provides the following output--

Enter password for DCE account cell_admin:

Configuring RPC Endpoint Mapper (rpc)...
RPC Endpoint Mapper (rpc) configured successfully

Configuring Security Client (sec_cl)...
Password must be changed!
Security Client (sec_cl) configured successfully

Configuring CDS Clerk (cds_cl)...
CDS Clerk (cds_cl) configured successfully

Configuring DTS Clerk (dts_cl)...
error executing command:
        must have write permission to the DTS entity (dce / dts)
Cannot create DTS clerk
Current state of DCE configuration:
cds_cl       COMPLETE   CDS Clerk
dts_cl       PARTIAL    DTS Clerk
rpc          COMPLETE   RPC Endpoint Mapper
sec_cl       COMPLETE   Security Client

After this failure dts-entity does not exist in acl_edit.
acl_edit -e /.:/hosts/os2dce17.austin.ibm.com/dts-entity

Regardless of the permissions that we place on
/.:/hosts/os2dce17.austin.ibm.com/self or
/.:/hosts/os2dce17.austin.ibm.com we cannot successfully
create the time service using dtscp create type clerk.

Why does the dts-entity not exist? It does not appear to be
an obvious acl problem.

Tracing through the code we found the following information:
mgt_acl_init() reads an acl in permanent storage (mgt_acl file)
or creates a default acl and writes it to
/opt/dcelocal/var/adm/time/mgt_acl.

When the "cdscp create type clerk" is issued the CreateCmd()
routine is called in mgtrpc.c. This routine calls
mgt_test_write_access() to test that we have write access to
the dts interface. "dts_s_mgt_no_write" is returned
if failure occurs.  mgt_test_write_access() calls
dpe_acl_client_is_authorized() passing the mgt_acl and
client_handle.  When a management rpc call is made, the
management server routines check the caller's access
against this acl by calling dpe_acl_client_is_authorized().

The dpe_acl_client_is_authorized() gets the client PAC and
passess the client PAC and management acl to
dpe_acl_mgr_is_authorized().  This routine uses the RPC
binding handle to obtain the client's authentication
info (PAC).  It then checks the acl provided to see
if the requested access is granted for the client.

dpe_acl_mgr_is_authorized() routine expects to have
write_access but only read_access is returned.

The dpe_acl_mgr_get_access() routine does the masking operation
to get a mask containing a 1 for each permission granted by
the first ACL Entry catagory of the ACL which the PAC matches,
and 0s elswhere.  In normal case an ACL entry type of user is
given, it enters the non-NULL PAC sequence, the in_default_realm
variable is set to true (real.uuid and default_realm.uuid are equal),
the first case is entered sec_acl_e_type_user and user_entry is
set to one.  Since the user_entry is set, the USER check code is
executed and an appropriate mask is returned.  Write permission
is granted.

In the failing case we find that sec_acl_e_type_any_other is
received and the user_entry is never set.  The realm.uuid and
the default_realm.uuid are not equal.  The any_other_entry is
set and the ANY_OTHER check is made.  This check returns a mask
corresponding to the perm in the "any_other_entry".  The perm
read permissions only.   We found that the mgt_acl corresponded
to a default_acl created by the mgt_acl_init() and
create_default_acl() routines.  This default acl contains
read permission for ANY_OTHER and the trace of the entry
gave 4 as the number of entries(acl_p->num_entries = 4).

I am going to place code in dpe_acl_mgr_get_access() routine
to help me find out what the uuid's are and why they are not
equal.  It appears that we may be picking up a stail dts-entity
uuid from someplace and the dts-entity is never recreated at
config time.  If you have additional information please let me
know.  I will also recreate the problem, remove the mgt_acl file,
restart dts, and see if the mgt-acl is picking up a wrong uuid
from the mgt_acl file.

How can I read the uuids stored in the mgt_acl file avoiding the 
information in cache?
You can call me at 512/838/0386 or email to smith@os2dce17.austin.ibm.com.

[05/25/93 public]
We have not seen this problem at OSF.  I have seen the error message
when trying to create a server when the dts-server entity has not
been created in the namespace (see src/config/dce_config from OSF).
ie. I configure a clerk, then try to 'create type server' by hand.

It seems you are close to figuring out this problem, please keep 
OSF (me - tom@osf.org) informed.


Tom,
The failure is due to dtsd reading a bad uuid from an old stail mgt_acl file.
The dtsd creates a default acl and writes it to a mgt_acl file.  This file
will be read if it exists or created when it does not.  When the dtsd
daemon is started but not configured a mgt_acl file is created but rmdce
will not remove this file since dts was not configured.  When dts is restarted
it reads this stail mgt_acl file to get a default_realm uuid to compare it
with the client realm uuid.   Since the default_realm uuid is an old uuid
the client and default realm uuids are different and it is assumed that
some other user is trying to access the dts-entity. 

The uuids are different so the dts logic does not use the sec_acl_e_type_user
instead it uses sec_acl_e_type_any_other.  The sec_acl_e_type_any_other
has a uuid of "00000000-0000-0000-0000-000000000000" and read permission only.
Since, any other user has read permission only we are unable to carry out the
write test to the dts-entity.   

Although, this is a user problem due to improper configuration, we should
have a cleaner way of handling this since it can provide a catch
22 situation for customers when configuring dts.

Can you contact DEC to see if it is appropriate to create the mgt_acl file
and read it each time dtsd is restarted?  This may have undesirable 
consequences if the acls are initially setup differently in the registery
database than in the mgt_acl file.   Another option is to have the config
files remove the mgt_acl file even if dts is not configured. 

To recreate this problem configure security, cds, rpc, and dts.  Unconfigure
dts using rmdce -l dts_cl.  Start /bin/dtsd, use dtscp create type clerk, 
and dtscp enable to enable the time service.  Do a rmdce -l all and a proper
mkdce to configure rpc, security, cds. and dts.  You will see the message
as dts is configured.  You can check for the stail mgt_acl file thoughout 
these steps.  If you remove the mgt_acl file and restart the daemon
you will not see the message "must have write permission to the DTS entity".


We are having a number of dts problems who can I contact directly when I
have questions relating to dts internals.  It is also important to note
that customers can get themselves into improper configuration situations
that we may not be currently be taking account of.

The output of the uuid info follows:

mgt_acl_init just read acl storage mgt_acl.
default realm uuid for the acl: 007a1980-1127-1c05-8cf3-10005a4f2223
Create_Cmd PROTSEQ: ncacn_ip_tcp, NET_ADDR: 129.35.65.109, ENDPNT: 1369, NET_OPT:
 , UUID:

dpe_acl_mgr_get_access:
client realm uuid: 0012b7f4-47ee-1c0a-a6aa-10005a4f2223, acl default_realm uuid:
007a1980-1127-1c05-8cf3-10005a4f2223, in_default_realm: 0

dpe_acl_mgr_get_access sec_acl_e_type_any_other:
client realm uuid: 0012b7f4-47ee-1c0a-a6aa-10005a4f2223, acl default_realm uuid:
007a1980-1127-1c05-8cf3-10005a4f2223

client principal uuid: 00000064-47ee-2c0a-a600-10005a4f2223, acl any_other_entry
uuid: 00000000-0000-0000-0000-000000000000

dtsd read the mgt_acl file and found the old default uuid that dtsd had
previously created.  When I enter the dpe_acl_mgr_get_access() 
I found that the accessor_info realm uuid was different from the 
default realm uuid read from the stail mgt_acl file. 
The in_default_realm fails and I enter the switch() statement with 
a case of sec_acl_e_type_any_other for one the the entries.  The routine
gets to the ANY_OTHER check and enters the masked_access macro.  The 
access_extent returned is read only because the default entry for
any other user in the mgt_acl file is read only.  

Why is the defaults read only for anyother user and unauthenticated users?
This sounds reasonable since we do not want just any user or an
unauthenticated user to write to the dts-enity.

We simply do not have the same client uuid as we originally had since we
are picking up the old default_realm uuid.  In this situation the mgt_acl
file is corrupt but since it passes the checksum logic dtsd does not
have a problem with it.  OSF should consider the possibility of this type 
corruption and deal with it.  This is a design issue.  I have mentioned
the short term fixes of removing this file regardless of dts 
configuration or possibly creating it before reading it each time dtsd 
starts up.

Let me know what OSF is going to do as soon as possible.

Thanks

[06/01/93 public]
Tracy,

Thanks again for investigating this problem.  I suspect that this
is mainly an IBM configuration issue (we do not have the rmdce and
mkdce tools you refer to).  In June of 1992, OT 4199 was fixed
which added a remove of the /var/adm/time/mgt_acl file to /etc/dce.rm.

Perhaps your dce.rm scripts are missing this?  
Re-reading your message I believe this is the case.  
The correct fix is to remove the mgt_acl file when reconfiging DTS.

As far as you internals questions are concerned, Jim Wade @ IBM
is a great internal (to you) resource on DTS.  I believe he knows
almost as much as the guys from DEC!  As far a DEC is concerned,
they are not going to continue to support DTS for OSF.  OSF
now owns this component.  Translate OSF to 'me' again.

I can get some 'unofficial' help from Joe Comuzzi and others at
DEC when I have a question on the design, but basically the
ball is in my court.

Anyway, I would be happy to take a look at the problems you are
having.  I assume you are working with DTS from the 1.0.2 release.
We at OSF have had few problems with it recently.  Please remember
that your configuration mechanism is probably *very* different
from our "simple" scripts (dce_config, etc.).  

Unless you feel strongly otherwise, I will cancel this bug as IBM
specific.

I tried sending this via mail, but I don't think this reached you.
Could you Email me (tom@osf.org) your address?  Thanks.

[06/01/93 public]
Tom,
thanks for the information.  We do remove mgt_acl files when we unconfigure
dce but like you mentioned it will also need to exist when we reconfigure
dce. This will prevent problems with improper configuration of dts. 

What should be done with a corrupt acl_mgr file.  Currently the checksum
error checking is not sufficient to determine if the mgt_acl file has
been corrupted or broken into.  If a wrong uuid can exist then I'm not
certain if I understand why we are checking for a corrupted mgt_acl file.
Why do we use this mgt_acl file in the first place? 

My address is os2dce17.austin.ibm.com. If you can't reach me at this
address try smith@yale.austin.ibm.com.  Bob Whitehurst is just down the
hall from the lab.

You can cancel this defect but OSF should look at the mgt_acl error checking
and possibly coding dtsd to create the mgt_acl file each time
dtsd is restarted.  So, we have two things to look at.  First, is the error
checking that is being done on the mgt_acl file reasonable.  Second,
should the mgt_acl file be created each time dtsd is restarted instead
of being read when it already exists.  Other vendors will run into
this problem later.  The proper place for this to be handled for proper
configuration of dtsd is in dtsd itself.  If you want I can open up
two defects on these issues.

Modifying the config scripts will fix our problems but every vendor will
have to deal with how dtsd handles this situation.  I feel that it is
more reasonable to expect dtsd to create the mgt_acl each time dtsd
is restarted.

[01/14/94 public]

DTS has an ACL.  This ACL, like all ACL's, must be stored in the local
filesystem.  DTS left "space" in its ACL file for a checksum, but that
checksum is not currently used.  We think that is okay, although someone
could open an OT enhancement request to put in a real checksum, it should
be low priority:  worry about local O/S disk corruption is not a big DCE
concern.

The more complicated issue is:  what should DTS put in its ACL?  By
default, it gives everyone read access and read/write access to the
timeserver admin and the machine principal.

From my reading of this bug report, the config scripts in use re-create
the timeserver admin, and therefore the dts acl is outdated, and perceived
to be bad.  Things are working they way they should be -- if you remove
principals, and create new principals with the same responsibilities, then
you must update the appropriate ACL's.

If my last paragraph is wrong, please re-open this defect (and use real
short words when you explain it to me:-).  Thanks.



CR Number                     : 6880
Defect or Enhancement?        : def
CR in Code, Doc, or Test?     : code
Inter-dependent CRs           : 
Project Name                  : dce
H/W Ref Platform              : rs6000
S/W Ref Platform              : aix
Component Name                : dts
Subcomponent Name             : 
Short Description             : mkgmtime cannot handle extremely large (+/-) input timetms
Reported Date                 : 1/18/93
Found in Baseline             : 1.0.2
Found Date                    : 1/18/93
Severity                      : C
Priority                      : 1
Status                        : cancel
Duplicate Of                  : 
Fix By Baseline               : 1.0.3
Fixed In Baseline             : 
Affected File(s)              : utcapi.c
Sensitivity                   : public

[1/18/93 public]

From Jim Wade at IBM:
name          3275
abstract      mkgmtime cannot handle extremely large (+/-) input timetms.

notes:
    <Note by rdl (Rick LeMon), 92/10/12 16:34:19, action: open>
mergetime (called by utc_mkgmtime) cannot handle extremely large (+/-) input
timetm's without returning -1.  Extremely large means within one year of
the extremes of time representable by a utc.

    <Note by rdl (Rick LeMon), 92/10/13 09:21:33, action: note>
Same happens when mergetime is called by utc_mklocaltime.

    <Note by mcmeen (John B. McMeen), 92/12/10 11:22:23, action: modify>
OT should be written, fix must come from OSF.

[06/28/93 public]
I could really use further information on this defect.
Like a specific test case.

utc_mkgmtime() handles time conversion with tm structs that
define years up to 28,910 years in the future.

This is enforced by this code in mergetime():
    year = tm->tm_year + 1900;
    if (year < -27644 || year > 30809)
        return(-1);

It is possible that inceasing these limits would break the conversion
algorithm in an unknown way. Besides, this is very close to the
approximate 30,000 year range claimed for a utc struct.

I am canceling this defect.
Please feel free to reopen if you have a specific tm struct value that
this code fails for (and provide it!).



CR Number                     : 5930
Defect or Enhancement?        : enh
CR in Code, Doc, or Test?     : code
Inter-dependent CRs           : 
Project Name                  : dce
H/W Ref Platform              : rs6000
S/W Ref Platform              : aix
Component Name                : dts
Subcomponent Name             : 
Short Description             : DTSCP prompt to be removed when inputting from a file
Reported Date                 : 11/4/92
Found in Baseline             : 1.0.1
Found Date                    : 11/4/92
Severity                      : E
Priority                      : 3
Status                        : cancel
Duplicate Of                  : 
Fix By Baseline               : 1.1
Fixed In Baseline             : 
Affected File(s)              : 
Sensitivity                   : public

[11/4/92 public]

Full Description:   When input to control program is redirected from
a file, the prompts output by the command processor may be staggered.
For example, suppose input.fil contains the following:
    set servers required 4
    enable
    show servers required

Then the control program is invoked (on AIX) as follows:
dtscp < input.fil

The following output is produced:

dtscp> dtscp> dtscp> Servers Required          = 4
dtscp> [svrs3] temp>

Note that '[svrs3] temp>' is the UNIX shell prompt.
The dtscp prompts thus appear staggered, i.e. with no carriage return
between them, corresponding to those commands that produce no output.
This can be confusing to the customer.

It would be preferable if for the redirection mode the prompts were not
printed at all, or at least, if they were printed on separate lines.

[06/07/93 public]
Dtscp uses a DEC parsing program which has this characteristic.
I believe cdscp will show this behavior too.
If the user doesn't want to see these prompts, they can use this
form of invocation:
    dtscp set servers required 4
    dtscp enable
    dtscp show servers required

Also, the new DCE Shell will provide dtscp functionality and will
support scripting.

Bug canceled.



CR Number                     : 5387
Defect or Enhancement?        : enh
CR in Code, Doc, or Test?     : doc
Inter-dependent CRs           : 
Project Name                  : dce
H/W Ref Platform              : all
S/W Ref Platform              : all
Component Name                : dts
Subcomponent Name             : app_ref
Short Description             : Missing functional description
of the thread-safe wrappers for the system and the library interfaces
Reported Date                 : 9/14/92
Found in Baseline             : 1.0.1
Found Date                    : 9/14/92
Severity                      : D
Priority                      : 3
Status                        : cancel
Duplicate Of                  : 
Fix By Baseline               : 1.1
Fixed In Baseline             : 
Affected File(s)              : 
Sensitivity                   : public

[9/14/92 public]

        Please provide the functional description of the following interfaces
        for additional features (from threads point of view) introduced by UTS.
        It should include description of the behavior when these wrapped
        interfaces are called from multiple threads simultaneously:

        tsafe_bind()
        tsafe_chmod()
        tsafe_listen()
        tsafe_unlink()
        tsafe_ioctl()
        tsafe_setsockopt()

        Note: The name of the interfaces from the wrapper names can be 
              extracted by picking the word after the last '_' in the above

              names.

        Please also provide the reference document name for the original 
        interface description.

        Why were these wrappers not provided by CMA instead of Time services?
        Are there similar other interfaces wrapped for thread-safeness but 
        defined by modules other than CMA?

29 Sept 92
Please reassign to threads. The time service does not provide
any of the requested routines in our API.

-- Liz Augustine, DTS writer

[1/5/93 public]

Reassigning to DTS.  These routines are in the DTS code.

[06/10/93 public]
Changed "Responsible Engineer" to "osf".  Writer TBD.

[07/06/93 public]
Assigned this CR to Bob Mathews.

[3/29/94 public]

Reassigned this CR to Peter Neilson (OSF DTS writer).

[04/21/94 public]
These wrappers are used internally in DTS because threads didn't/doesn't
wrap a few call that DTS needs to use.

There should be no need to document them.

bug canceled.



