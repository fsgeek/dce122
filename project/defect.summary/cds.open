CR Number                     : 13670
Defect or Enhancement?        : def
CR in Code, Doc, or Test?     : code
Inter-dependent CRs           : 
Project Name                  : dce
H/W Ref Platform              : all
S/W Ref Platform              : all
Component Name                : cds
Subcomponent Name             : src/directory/cds/library/
Short Description             : DCE is not configurable with
X.500 cell name
Reported Date                 : 11/14/96
Found in Baseline             : 1.2.1
Found Date                    : 11/14/96
Severity                      : B
Priority                      : 1
Status                        : open
Duplicate Of                  : 
Fix By Baseline               : 1.2
Fixed In Baseline             : 
Affected File(s)              : 
Diff supplied by              : 
Diff release                  : 
Sensitivity                   : public

[11/14/96 public]

A support customer reported the following problem:
==================================================
Component: DCE CDS, , , 
Client Hardware: -
Client Software: -
Server Hardware: SNi RM
Server Software: DCE(Reiant UNIX) V2.0 (= OSF DCE V1.2.1
Compiler: -
Severity: Critical
Date of First Occurrence: 96.10.15
One Line Description: DCE is not configurable with a X.500 cell name
Full Description: using cell name c=xx/o=yyy/ou=zzz does not work.
Result: dce_config aborts with:
...
        Enter the name of your cell (without /.../): c=de/o=test/ou=klein
/opt/dcelocal/bin/getcellname: cannot get cell name, 0x0000ff01l
S:****** Starting dced...
S:****** Initializing dced...
1996-10-30-13:11:25.940+01:00I----- dced FATAL dhd general main.c 649 0x04f95718
Initialization (global data) failed, status=0x0000ff01.
ERROR:   dced -i failed to start.  Continuing will return to the Main Menu.
The first equsl sign seems to be critical:

# cat dce_cf.db
cellname /.../c=de/o=test/ou=klein
hostname  hosts/PGTR0114
krb5_ccache_vno 1
gen_v1_pac true
krb5_kt_vno 1
# getcellname
getcellname: cannot get cell name, 0x0000ff01l

# cat dce_cf.db
cellname /.../cde/o=test/ou=klein        !!!! "cde" 
hostname  hosts/PGTR0114
krb5_ccache_vno 1
gen_v1_pac true
cellname /.../c=de/o=test/ou=klein
hostname  hosts/PGTR0114
krb5_ccache_vno 1
gen_v1_pac true
krb5_kt_vno 1
# getcellname
/.../cde/o=test/ou=klein
#
A return value <> DNS_SUCCESS is seen in routine dnsExpandStrFull()
[src/directory/library/dnsexpandstrfull.c] during dce_config.
Routine cds_cvtCDSFullToOpq() [src/directory/cds/library/\
dnscvtcdsfull.c] shows up code changes since V1.0.3 (our
latest port):

diff /home/klein/sandboxes/dce/dcetest/src/directory/cds/\
library/dnscvtcdsfull.c [ = 1.0.3] with:
/home3/dce/V1.2.1/dce/src/directory/cds/library/\
dnscvtcdsfull.c [ = 1.2.1 ]
368,370c313,314
< static int
< cds_cvtCDSFullToOpq (data_p)
<     data_t    *data_p;
---
> static int
> cds_cvtCDSFullToOpq (data_t *data_p)
389c333
<       status = DNS_INVALIDNAME;       /* unrecognized character */
---
>       status = CDS_INVALIDNAME;       /* unrecognized character */
395,400c339,344
<       INS16(data_p->full_p->fn_length,
<           data_p->d2s.fnLength + sizeof(NULLSIMPLENAME_t));
<       if (data_p->d2s.fnLength > DNS_OPQ_FNAME_MAX)
<         status = DNS_INVALIDNAME;
<     } else if (data_p->full_p && (status == DNS_SUCCESS))
<       status = DNS_NOROOM;
---
>       data_p->d2s.fnLength += sizeof(NULLSIMPLENAME_t);
>       INS16(data_p->full_p->fn_length, data_p->d2s.fnLength);
>       if (sizeof(data_p->full_p->fn_name) < data_p->d2s.fnLength)
>         status = CDS_INVALIDNAME;
>     } else if (data_p->full_p && (status == CDS_SUCCESS))
>       status = CDS_NOROOM;

Maybe some effect on our problem?

Proposed Solution: -



CR Number                     : 13653
Defect or Enhancement?        : def
CR in Code, Doc, or Test?     : code
Inter-dependent CRs           : 
Project Name                  : dce
H/W Ref Platform              : all
S/W Ref Platform              : all
Component Name                : cds
Subcomponent Name             : gda
Short Description             : gda can only use default session to read X.500
Reported Date                 : 10/8/96
Found in Baseline             : 1.2.2
Found Date                    : 10/8/96
Severity                      : D
Priority                      : 3
Status                        : open
Duplicate Of                  : 
Fix By Baseline               : 
Fixed In Baseline             : 
Affected File(s)              : 
Diff supplied by              : 
Diff release                  : 
Sensitivity                   : public

[10/8/96 public]

When a foreign cell has an X.500 name, gdad needs to contact X.500 
to read the foreign cell information. gdad uses XDS/XOM calls to
contact its local X.500 client/dua, but the call ds_bind() uses
DS_DEFAULT_SESSION, which means that it only binds to the default
session which has to be directory 1 with a default DSA configured.

When configuring an X.500 client, one can choose to use other 
directories, and not to configure any default DSA (to bind, you then
have to specify a directory id and dsa name), which is common.

The documentation should be updated to reflect this restriction. This
should be spelled out in section 22.3.2 (Defining a Cell in the Global 
Directory Service) for the Admin Guide, and Section 3.2 (Defining a Cell
in the Directory) for the GDS Admin Guide.

To remove the restriction, gdad may want to take a configuration file
which allows the administrator to specify which directory id and dsa
name should be used to contact the X.500.



CR Number                     : 13650
Defect or Enhancement?        : def
CR in Code, Doc, or Test?     : code
Inter-dependent CRs           : 
Project Name                  : dce
H/W Ref Platform              : rs6000,hppa
S/W Ref Platform              : aix, hpux
Component Name                : cds
Subcomponent Name             : library
Short Description             : only one binding gets exported to entry in namespace
Reported Date                 : 10/4/96
Found in Baseline             : 1.2.2
Found Date                    : 10/4/96
Severity                      : B
Priority                      : 1
Status                        : open
Duplicate Of                  : 
Fix By Baseline               : 1.2
Fixed In Baseline             : 
Affected File(s)              : library/cds_rpcserver.c
Diff supplied by              : 
Diff release                  : 
Sensitivity                   : public

[10/4/96 public]

The following mail is from Grant Alvis
====================================================================

A customer opened a problem report due to an inconsistency that they
observed in the way the following CDS namespace entries were created:

/.:/hosts/<hostname>/cds-server
/.:/hosts/<hostname>/cds-clerk

It seems that when you configure your DCE cell, only one binding (TCP/IP)
gets exported to the entry.  However, the endpoint map contains full
mappings for both the UDP/IP and TCP/IP bindings.

I looked into the src/directory/cds/library/cds_rpcserver.c file, at the
routine cds_export_replace().  It turns out that it has some funky logic
in it that it will *purposely* truncate a binding vector by setting the
count to 1.  It then exports only the first binding in the vector.  After
it has exported the binding, it then sets the binding vector length back
to its original length!!

There are no comments in the code as to why it might do this, and this
is not a protocol specific modification.  It has no knowledge of which
binding is in the first element of the binding vector.

As a matter of fact, I looked at an HP cell, and it does the same thing,
only all of its entries have only UDP bindings!

Any ideas as to why this is the way it is?  I changed the code so that
it would export all protocols, and everything works fine.  It sure would
be nice to know why this is coded the way it is, since it looks like
somebody made a conscious effort to make sure that only one binding
got exported.

Thanks,
Grant

Grant Alvis
IBM DCE Customer Support
(512) 838-4144

====================================================================

Back to me (Roger).  I was a little surprised that this was still the
case since I thought something like this would have been caught awhile
ago.  Anyway, this is the case with R1.2.2 on AIX, so I'm filing this
OT.  This isn't the case with our version on alpha, so here are the
diffs for directory/cds/library/cds_rpcserver.c.  Because of a temporary
lack of AIX machine resources at the moment, I haven't verified these
changes on AIX yet, but plan to when the machine is free.

798c799,800
< 				ex->object_uuid, rpc_c_binding_max_count_default, 
---
> 				ex->object_uuid, 
> 				rpc_c_binding_max_count_default, 
800,801c802,819
<    if (status != rpc_s_ok) {
<       goto MIN_CLEANUP;
---
>    if (status == rpc_s_ok) {
>        /*
> 	* Read all the bindings until we either find the bindings or we 
> 	* find there's none
> 	*/
>        do {
> 	   rpc_ns_binding_lookup_next (lookup_context, &current_binding_vector, &status );
>        } while ((status != rpc_s_ok && status != rpc_s_no_more_bindings && 
> 		 status != rpc_s_entry_not_found) &&
> 		dthread_delay(15.0) >= 0);
> 
>        /*
> 	* Destroy lookup context
> 	*/
>        rpc_ns_binding_lookup_done (&lookup_context, &temp_status);
>        if (temp_status != rpc_s_ok) {
> 	   goto CLEANUP;
>        }
803,811d820
<    
<    /*
<     * Keep looking until we either find the bindings or we find there's none
<     */
<    do {
<       rpc_ns_binding_lookup_next (lookup_context, &current_binding_vector, &status );
<    } while ((status != rpc_s_ok && status != rpc_s_no_more_bindings) &&
<       dthread_delay(15.0) >= 0);
<    
817,823c826,832
<       /*
<        * Binding lookup succeeded.  We should only have had one binding
<        * in the ns to lookup, but we'll manage if there's more.  If we find any that
<        * don't match the "new" binding vector, then we unexport them all and
<        * export the good stuff.
<        */
<       current_binding_count = current_binding_vector->count;
---
>        /*
> 	* Binding lookup succeeded.  We should only have had one binding
> 	* in the ns to lookup, but we'll manage if there's more.  If we find any that
> 	* don't match the "new" binding vector, then we unexport them all and
> 	* export the good stuff.
> 	*/
>        current_binding_count = current_binding_vector->count;
825c834
< 
---
>    
834a844,848
>       /*
>        * Clear endpoints and object uuids out of the current binding
>        * then convert it to a string binding for comparison to
>        * the new ones
>        */
837d850
< 	 rpc_string_free( &current_string_binding, &status );
840a854,857
>       rpc_binding_set_object( current_binding_vector->binding_h[i], NULL, &status);
>       if (status != rpc_s_ok) {
> 	 goto CLEANUP;
>       }
852a870
> 
858,859c876,877
< 	 
< 	 rpc_binding_to_string_binding (ex->new_binding_vector->binding_h[j],
---
> 
>          rpc_binding_to_string_binding (ex->new_binding_vector->binding_h[j],
866c884
< 	    
---
> 
874c892,893
<       }
---
> 
>       } /* End loop thru new bindings */
882,888c901,907
< 	 rpc_ns_binding_unexport (name_syntax, ex->entry_name, ex->if_spec, 
< 				     NULL, &status);
< 	 if (status != rpc_s_ok) {
< 	    goto CLEANUP;
< 	 }
<       } /* new bindings */
<    } /* current bindings */
---
> 	  rpc_ns_binding_unexport (name_syntax, ex->entry_name, ex->if_spec, 
> 				   NULL, &status);
> 	  if (status != rpc_s_ok) {
> 	      goto CLEANUP;
> 	  }
>       } 
>    } /* End loop thru new bindings */
897,908d915
<       rpc_binding_reset (ex->new_binding_vector->binding_h[0], &status);
<       if (status != rpc_s_ok) {
< 	 goto CLEANUP;
<       }
<       rpc_binding_to_string_binding (ex->new_binding_vector->binding_h[0],
< 				     &new_string_binding,
< 				     &status);
<       if (status != rpc_s_ok) {
< 	 rpc_string_free( &current_string_binding, &status );
< 	 goto CLEANUP;
<       }
< 	 
912,914d918
<       new_binding_count = ex->new_binding_vector->count;
<       ex->new_binding_vector->count = 1;
< 
919,920d922
<       ex->new_binding_vector->count = new_binding_count;
< 
934c936
<    DCE_SVC_DEBUG((cds__svc_handle, cds_svc_general, svc_c_debug2,
---
>    DCE_SVC_DEBUG((cds__svc_handle, cds_svc_general, svc_c_debug6,
941,948d942
<    /*
<     * Destroy lookup context
<     */
<    rpc_ns_binding_lookup_done (&lookup_context, &status);
<    if (status != rpc_s_ok) {
<       goto CLEANUP;
<    }
<



CR Number                     : 13621
Defect or Enhancement?        : def
CR in Code, Doc, or Test?     : code
Inter-dependent CRs           : 
Project Name                  : dce
H/W Ref Platform              : all
S/W Ref Platform              : all
Component Name                : cds
Subcomponent Name             : adver
Short Description             : client configure into long cellname fails to create default acl
Reported Date                 : 8/26/96
Found in Baseline             : 1.2.2b3
Found Date                    : 8/26/96
Severity                      : C
Priority                      : 2
Status                        : open
Duplicate Of                  : 
Fix By Baseline               : 1.2
Fixed In Baseline             : 
Affected File(s)              : directory/cds/adver/adver_dacl.c
					     directory/cds/gda/gda_dacl.c
					     directory/cds/server/cds_dacl.c
Diff supplied by              : provider
Diff release                  : 1.2.2
Sensitivity                   : public

[8/26/96 public]

This was found during internal testing.  The cellname was 126 characters
long, and during CDS client configuration, you would get:

    Configuring CDS client
        Creating the cds.conf file
        Starting CDS advertiser daemon (cdsadv)...
1996-02-26-15:08:12.563-05:00I429.746 cdsadv(3634) ERROR cds general adver_dacl
sec_id_parse_name returned status 387063930 to general :
1996-02-26-15:08:12.567-05:00I429.746 cdsadv(3634) WARNING cds general adver_da
Unable to create default acl: status = 387063930.
1996-02-26-15:08:12.570-05:00I429.746 cdsadv(3634) WARNING cds general adver_da
Unable to create default acl: status = 0.

Upon investigation, certain buffers within CDS were only taking into account
100 bytes for some unknown reason.  I've increased them to SIMPLENAMEMAX
(= 255), which is the maximum for a CDS simple name.  The changes affect
the following images:

cdsadv	adver_dacl.c
gdad	gda_dacl.c
cdsd	cds_dacl.c

While this fix should get into R1.2.2 core, here's what to look for.
In adver_dacl.c, increase the buffer size from:

char Clerk_Realm[100];     /* Our Cell       */
uuid_t Clerk_Realm_uuid;   /* Our CEll UUID */
char HostPrincipal[100];   /* host (machine) principal name */
uuid_t HostPrincipal_uuid; /* host (machine) principal uuid */
char AdminGroup[100];      /* cds-admin group name          */

To:

char Clerk_Realm[SIMPLENAMEMAX+1];     /* Our Cell       */
uuid_t Clerk_Realm_uuid;	       /* Our CEll UUID */
char HostPrincipal[SIMPLENAMEMAX+1];   /* host (machine) principal name */
uuid_t HostPrincipal_uuid;	       /* host (machine) principal uuid */
char AdminGroup[SIMPLENAMEMAX+1];      /* cds-admin group name          */

Similar statements exist in gda_dacl.c and cds_dacl.c.

[12/6/96 public]
Updated the Diff header fields.  Unfortunately, this edit didn't get
into R1.2.2 because of scheduling difficulties.



CR Number                     : 13503
Defect or Enhancement?        : def
CR in Code, Doc, or Test?     : code
Inter-dependent CRs           : 
Project Name                  : dce
H/W Ref Platform              : all
S/W Ref Platform              : all
Component Name                : cds
Subcomponent Name             : 
Short Description             : uninitialized pointer in db_btree_remove_entry
Reported Date                 : 6/13/96
Found in Baseline             : 1.1
Found Date                    : 6/13/96
Severity                      : C
Priority                      : 3
Status                        : open
Duplicate Of                  : 
Fix By Baseline               : 1.2
Fixed In Baseline             : 1.1maint
Affected File(s)              : directory/cds/server/db_btree.c
Diff supplied by              : osf
Diff release                  : 1.2.2
Sensitivity                   : public

[6/13/96 public]


cdsd was core dumping with a SEGV when serviceability was enabled.  The
reason was an uninitialized pointer that was being referenced inside
a serviceability message.  Here is the diff:

Change: directory/cds/server/db_btree.c from 12.6 to 12.9
*** directory/cds/server/db_btree.c
*** 4186,4191 ****
--- 4194,4200 ----
        ctx.ctx_hash_p = hash_p;
        ctx.ctx_key_p = ekey_p;
        ctx.ctx_stream_p = stream_p;
+       ctx.ctx_allupto_p = NULL;
  
        child.prm_key_p = NULL;
        child.prm_index_p = hash_p->dir_entry_p;

[10/8/96 public]

  Fix was submitted to 1.1 maintenance tree.

./directory/cds/server/db_btree.c
Comparing revision 1.1.13.1 with revision 1.1.13.2.
*** 1.1.13.1    1996/01/24 23:36:40
--- 1.1.13.2    1996/10/08 18:08:58
***************
*** 4139,4144 ****
--- 4143,4149 ----
        ctx.ctx_hash_p = hash_p;
        ctx.ctx_key_p = ekey_p;
        ctx.ctx_stream_p = stream_p;
+       ctx.ctx_allupto_p = NULL;               /* OT 13503 */
  
        child.prm_key_p = NULL;
        child.prm_index_p = hash_p->dir_entry_p;

[12/6/96 public]
I concur with the above.  This was unable to get integrated into R1.2.2
because of scheduling difficulties.  Here's the diff against R1.2.2b4 as
another reference point.  "<" is R1.2.2b4, ">" is fix:

9a10
>  * OT 13503 fix: in db_btree_remove_entry, initialize ctx.ctx_allupto_p = NULL.
4184a4186
>       ctx.ctx_allupto_p = NULL;



CR Number                     : 13427
Defect or Enhancement?        : def
CR in Code, Doc, or Test?     : code
Inter-dependent CRs           : 6693
Project Name                  : dce
H/W Ref Platform              : all
S/W Ref Platform              : all
Component Name                : cds
Subcomponent Name             : 
Short Description             : wrong ACL manger type for directory entries.
Reported Date                 : 4/5/96
Found in Baseline             : 1.1
Found Date                    : 4/5/96
Severity                      : B
Priority                      : 1
Status                        : open
Duplicate Of                  : 
Fix By Baseline               : 1.2
Fixed In Baseline             : 1.1maint
Affected File(s)              : directory/cds/server/cds_dacl.c
Diff supplied by              : provider
Diff release                  : 1.2.2
Sensitivity                   : public

[4/5/96 public]

The CDS ACL manager at 1.1 returns the wrong ACL manager type for directory
entries (in a CDS version 3.0 directory). Aside from the cosmetic problems
associated with this defect:

dcecp> rpcentry create /.:/tmp/e1
dcecp> acl perm /.:/tmp/e1 -e  
{r {Read entry attributes}}
{w {Update entry attributes}}
{d {Delete entry}}
{t {Test attribute values}}
{c {Change ACL}}
{i {Create new directory entries}}
{a {Administer directory replication}}

this causes more serious problems in an environment with mixed CDS servers
(e.g. 1.0.3 and 1.1) and replicated directories. For example (cross is a
1.0.3 CDS server, down a 1.1):

dcecp> dir show /.:/tmp
{RPC_ClassVersion {01 00}}
{CDS_CTS 1996-04-04-20:40:36.840172100/00-00-c0-35-71-47}
{CDS_UTS 1996-04-05-15:06:22.989320100/08-00-09-7a-b4-7e}
{CDS_ObjectUUID 38d02d38-8e5a-11cf-be12-0000c0357147}
{CDS_Replicas 
 {{CH_UUID 6cc8c20c-8e51-11cf-a826-0800097ab47e}
  {CH_Name /.../foo/cross_ch}
  {Replica_Type Master}  
  {Tower {ncacn_ip_tcp 130.105.1.163}}
  {Tower {ncadg_ip_udp 130.105.1.163}}}
 {{CH_UUID b8ec594a-8e57-11cf-be12-0000c0357147}
  {CH_Name /.../foo/down_ch}
  {Replica_Type ReadOnly}  
  {Tower {ncacn_ip_tcp 130.105.1.75}}
  {Tower {ncadg_ip_udp 130.105.1.75}}}}
{CDS_AllUpTo 1996-04-05-09:39:17.050776100/08-00-09-7a-b4-7e}
{CDS_Convergence medium}
{CDS_ParentPointer
 {{Parent_UUID 6d911e0a-8e51-11cf-a826-0800097ab47e}
  {Timeout
   {expiration 1996-04-05-16:52:18.226}
   {extension +1-00:00:00.000I0.000}}
  {myname /.../foo/tmp}}}
{CDS_DirectoryVersion 3.0}
{CDS_ReplicaState on}
{CDS_ReplicaType Master}
{CDS_LastSkulk 1996-04-05-09:39:17.050776100/08-00-09-7a-b4-7e}
{CDS_LastUpdate 1996-04-05-15:27:14.823425100/08-00-09-7a-b4-7e}
{CDS_RingPointer 6cc8c20c-8e51-11cf-a826-0800097ab47e}
{CDS_Epoch 35f29e7a-8e64-11cf-a826-0800097ab47e}
{CDS_ReplicaVersion 3.0}
dcecp> obj show /.:/tmp/e1
{RPC_ClassVersion {01 00}}
{CDS_CTS 1996-04-04-20:41:08.967475100/00-00-c0-35-71-47}
{CDS_UTS 1996-04-05-15:27:14.823425100/08-00-09-7a-b4-7e}
{CDS_Class RPC_Entry}
{CDS_ClassVersion 1.0}
dcecp> acl perm /.:/tmp/e1 -e
{r {Read entry attributes}}
{w {Update entry attributes}}
{d {Delete entry}}
{t {Test attribute values}}
{c {Change ACL}}
{i {Create new directory entries}}
{a {Administer directory replication}}
dcecp> acl show /.:/tmp/e1 -e
{unauthenticated r--t---}
{user cell_admin rwdtc--}
{group subsys/dce/cds-admin rwdtc--}
{group subsys/dce/cds-server rwdtc--}
{any_other r--t---}
dcecp> acl modify /.:/tmp/e1 -e -rem {unauthenticated}
Error: acl manager type invalid

This occurs because the ACL operation binds to the readonly replica (on the
1.1 server) to get the manager type which is erroneously returned as dir
uuid instead of cat uuid. The acl operation is then referred to the master
on the 1.0.3 server which detects the error. [It seems that this defect was
introduced with the fix to OT6693.]

Maybe we can fix this as follows (context diffs):

*** cds_dacl.c.original Fri Apr  5 11:50:59 1996
--- cds_dacl.c  Fri Apr  5 11:49:54 1996
***************
*** 2169,2188 ****
                          *manager_types = dir.uuid;
                      else if (rec_p->data_type == ET_clearinghouse)
                        *manager_types = cle.uuid;
!                     else {
!                         version_t  dir_version;
! 
!                         if (!stream_p->db_dir.data_p) {
!                             db_dir_read(stream_p);
!                         }
!                         db_dir_get_version(stream_p, &dir_version);
!                         if (EXT8(dir_version.vr_major) >= 4) {
!                             /* looking for cataloged entry */
!                             *manager_types = cat.uuid;
!                         }
!                         else
!                           *manager_types = dir.uuid;
!                     }
                      break;
  
                  case sec_acl_type_default_object:
--- 2169,2177 ----
                          *manager_types = dir.uuid;
                      else if (rec_p->data_type == ET_clearinghouse)
                        *manager_types = cle.uuid;
!                     else
!                       /* looking for cataloged entry */
!                       *manager_types = cat.uuid;
                      break;
  
                  case sec_acl_type_default_object:

[public 09/24/96]
Marc Levy added this to 1.1maint tree in May '96.

[12/6/96 public]

This fix wasn't able to get merged into R1.2.2 because of scheduling.
In addition, there are other fixes to cds_dacl.c that I wanted to include
but wasn't able to get in.  So, I'm posting the following diff of
the R1.2.2b4 version of cds_dacl.c with my proposed fixed version.  Just
so you know, there are really three separate fixes in this diff.  I thought
it would be easier to show and integrate the three fixes as a whole unit
against one reference so the line numbers will be consistent.  If not,
it can be expressed other ways.  The fixes for OTs 13427 and 13621 only
affect a few contiguous lines and are expressed above (for 13427) and
in OT 13621, so you could compare the diffs below against them to
get the fix for 12744.

OT      Affected sources
--      ----------------
13621   directory/cds/adver/adver_dacl.c
        directory/cds/gda/gda_dacl.c
        directory/cds/server/cds_dacl.c

13427   directory/cds/server/cds_dacl.c

12744   directory/cds/server/back_skulk.c
	(directory/cds/server/cds_dacl.c indirectly)

So, "<" is R1.2.2b4, while ">" is proposed fix:

10,13c10,11
<  * $Log:	c013427,v $
# Revision 1.3  96/12/06  18:23:14  root
# changed fields: Affected File(s)  Diff supplied by  Diff release   new/changed/deleted note(s) [zee 12/6/96 public]
# 
<  * Revision 1.1.18.1  1996/10/03  14:35:48  arvind
<  *    OSF DCE 1.2.2 Drop 4
<  *    [1996/10/03  13:19:38  arvind]
---
>  * Fix for OT 13427 - in rdacl_get_manager_types, returning wrong
>  * ACL manager type for else in case sec_acl_type_object.
14a13,17
>  * Fix for QAR 630 - increase default ACL buffers from 100 to
SIMPLENAMEMAX.
>  *
>  * Also, provide mechanism for reading an entry's ACL from its master
>  * clearinghouse.
>  * $Log:	c013427,v $
# Revision 1.3  96/12/06  18:23:14  root
# changed fields: Affected File(s)  Diff supplied by  Diff release   new/changed/deleted note(s) [zee 12/6/96 public]
# 
18c21
<  * 
---
>  *
352,356c355,359
< char Server_Realm[100];     /* Our Cell       */
< uuid_t Server_Realm_uuid;   /* Our CEll UUID */
< char HostPrincipal[100];   /* host (machine) principal name */
< uuid_t HostPrincipal_uuid; /* host (machine) principal uuid */
< char AdminGroup[100];      /* cds-admin group name          */
---
> char Server_Realm[SIMPLENAMEMAX+1];     /* Our Cell       */
> uuid_t Server_Realm_uuid;             /* Our CEll UUID */
> char HostPrincipal[SIMPLENAMEMAX+1];    /* host (machine) principal name
*/
> uuid_t HostPrincipal_uuid;            /* host (machine) principal uuid */
> char AdminGroup[SIMPLENAMEMAX+1];       /* cds-admin group name
*/
415a419,425
> static dns_status_t 
> dacl_lookup_common (FullName_t      *,
>                   byte_t          **,
>                   int             *,
>                   sec_acl_type_t,
>                   int);
> 
884a895,907
>  * dacl_lookup_from_master
>  *      Retrieve a dacl from another server
>  */
> dns_status_t 
> dacl_lookup_from_master (FullName_t      *name_p,
>                        byte_t          **flat_pp,
>                        int             *len_p,
>                        sec_acl_type_t  type) {
> 
>     return (dacl_lookup_common(name_p, flat_pp, len_p, type, 1));
> }
> 

> /*
892c915,929
<              sec_acl_type_t  type)
---
>              sec_acl_type_t  type) {
> 
>     return (dacl_lookup_common(name_p, flat_pp, len_p, type, 0));
> }
> 

> /*
>  * dacl_lookup_common
>  *      Retrieve a dacl from another server
>  */
> static dns_status_t 
> dacl_lookup_common (FullName_t      *name_p,
>                   byte_t          **flat_pp,
>                   int             *len_p,
>                   sec_acl_type_t  type,
>                   int             from_master)
937a975,979
>       /* If we want to go to the master, force a rebind now */
>       if (secstatus == error_status_ok && from_master) {
>         sec__acl_rebind_update(h, &dir.uuid, type, &secstatus);
>       }
> 
2184,2197c2226,2228
<                     else {
<                         version_t  dir_version;
< 
<                         if (!stream_p->db_dir.data_p) {
<                             db_dir_read(stream_p);
<                         }
<                         db_dir_get_version(stream_p, &dir_version);
<                         if (EXT8(dir_version.vr_major) >= 4) {
<                             /* looking for cataloged entry */
<                             *manager_types = cat.uuid;
<                         }
<                         else
<                           *manager_types = dir.uuid;
<                     }
---
>                     else
>                       /* looking for cataloged entry */
>                       *manager_types = cat.uuid;
2224c2255
<                   /* These types are only supported on directores */
---
>                   /* These types are only supported on directories */
2237c2268
<               } /* end have enough room in manger_types */
---
>               } /* end have enough room in manager_types */



CR Number                     : 13410
Defect or Enhancement?        : def
CR in Code, Doc, or Test?     : code
Inter-dependent CRs           : 11004
Project Name                  : dce
H/W Ref Platform              : all
S/W Ref Platform              : all
Component Name                : cds
Subcomponent Name             : cdsadv
Short Description             : cdsadv fails to fork/exec when threads heartbeat is ON
Reported Date                 : 3/27/96
Found in Baseline             : 1.2.1
Found Date                    : 3/27/96
Severity                      : B
Priority                      : 2
Status                        : open
Duplicate Of                  : 
Fix By Baseline               : 1.2.2
Fixed In Baseline             : 
Affected File(s)              : 
Sensitivity                   : public

[3/27/96 public]

cds-clerk dies immediately after its fork/exec'ed by the cdsadv 
because it receives SIGVTALRM. This is because the execve is 
undefined just before routine start_child, causing it to use the
non-wrapped (non-CMA) version of execve. This defect will occur when
you have a bug fix for thread's heartbeat problem - OT #11004.



CR Number                     : 13409
Defect or Enhancement?        : def
CR in Code, Doc, or Test?     : code
Inter-dependent CRs           : 12823
Project Name                  : dce
H/W Ref Platform              : all
S/W Ref Platform              : all
Component Name                : cds
Subcomponent Name             : cds-clerk
Short Description             : clerk tries to import the UNIX domain socket twice
Reported Date                 : 3/27/96
Found in Baseline             : 1.2.1
Found Date                    : 3/27/96
Severity                      : C
Priority                      : 3
Status                        : open
Duplicate Of                  : 
Fix By Baseline               : 1.2
Fixed In Baseline             : 
Affected File(s)              : directory/cds/child/clerk_listener.c
Sensitivity                   : public

[3/27/96 public]

clerk_listener() in cds-clerk tries to get around the threads problem 
described in OT# 12823     by doing dthread_import_fd() as shown below:

                {
        cfd = 5;

        DCE_SVC_DEBUG((
            cds__svc_handle,
            cds_svc_child,
            svc_c_debug2,
            "  clerk_listener no socket name, will import fd %d",
            cfd));

        dthread_import_fd(cfd);
    }

The correct fix is to remove the call dthread_import_fd(cfd) when your
threads have a fix for OT# 12823. This will avoid CMA assertion warnings
coming out of cds-clerk.

The fix has already been made in 1.2.2's CDS at HP.



CR Number                     : 13402
Defect or Enhancement?        : def
CR in Code, Doc, or Test?     : code
Inter-dependent CRs           : 
Project Name                  : dce
H/W Ref Platform              : all
S/W Ref Platform              : all
Component Name                : cds
Subcomponent Name             : rpc_ns_XXX
Short Description             : Self cred interferes with no-trust-path access
Reported Date                 : 3/22/96
Found in Baseline             : 1.1
Found Date                    : 3/22/96
Severity                      : B
Priority                      : 2
Status                        : open
Duplicate Of                  : 
Fix By Baseline               : 1.2
Fixed In Baseline             : 
Affected File(s)              : 
Sensitivity                   : public

[3/22/96 public]
I'm interested in exploring access to cells with whom no trust path
exists.  If I have no DCE credentials and issue the command
``rpccp show entry /.../transarc.com/fs'', I'll get the correct group
information for the transarc.com DCE/DFS cell, since the cell information
is correctly listed in DNS.
 
However, if I have no DCE credentials but am running as local root, I'll
operate with the local ..../self identity; however, when I issue the same
command, it will fail with the error message
   >>> rpc runtime error: Registry object not found (dce / sec)
It also generates log information to back it up:
 
1996-03-22-11:34:04.096-05:00I----- cdsclerk(656) ERROR cds general clerk_bind.c 529 0x00000011
Routine rpc_binding_set_auth_info(3rpc) failed : status = 387063930.
1996-03-22-11:34:05.727-05:00I----- cdsclerk(656) ERROR cds general clerk_bind.c 529 0x00000011
Routine rpc_binding_set_auth_info(3rpc) failed : status = 387063930.
1996-03-22-11:34:17.287-05:00I----- cdsclerk(656) ERROR cds general clerk_bind.c 529 0x00000011
Routine rpc_binding_set_auth_info(3rpc) failed : status = 387063930.
1996-03-22-11:34:17.537-05:00I----- cdsclerk(656) ERROR cds general clerk_bind.c 529 0x00000011
Routine rpc_binding_set_auth_info(3rpc) failed : status = 387063930.
 
As far as I can tell, CDS thinks that it should be running authenticated,
since it has the use of the .../self identity; it then calls
rpc_binding_set_auth_info(), but since we have no authenticated identity
in the remote cell, or any identity at all in that cell, the authentication
request is rejected.  CDS (this rpc_ns_ layer) then refuses to continue.
 
The problem is that CDS could do the correct job if it would ignore this
particular error condition.  But this error code may be too generic for
CDS to ignore wholesale.
 
The application I have in mind here is dfsbind, which cannot stop being
root (and therefore using the .../self identity).  I would guess that it
*likes* being root in its usual role, so that its accesses can be
authenticated whenever possible.  The difficulty is that dfsbind mediates
all inter-cell access for the DFS cache manager, so that if dfsbind cannot
get information from even a correctly-registered cell's CDS service,
the whole DFS client cannot contact that cell.  Since many user-space
applications, such as the ``rpccp'' instance mentioned above, can learn
correct information about those remote, no-trust-path DCE cells, it seems
particularly crippling for DFS not to be able to interoperate as well.

[3/22/96 public]
Changed Interest List CC 
 from `nydick@transarc.com' 
 to `nydick@transarc.com, 
 dce-ot-dfs'

[4/18/96 public]
Any comments from CDS maintainers on this one, and any policy decisions
that may be behind it?



CR Number                     : 13376
Defect or Enhancement?        : enh
CR in Code, Doc, or Test?     : code
Inter-dependent CRs           : 
Project Name                  : dce
H/W Ref Platform              : all
S/W Ref Platform              : all
Component Name                : cds
Subcomponent Name             : hcells
Short Description             : disconecting Hcells.
Reported Date                 : 2/28/96
Found in Baseline             : 1.1
Found Date                    : 2/28/96
Severity                      : B
Priority                      : 0
Status                        : open
Duplicate Of                  : 
Fix By Baseline               : 1.2
Fixed In Baseline             : 
Affected File(s)              : 
Sensitivity                   : public

[2/28/96 public]

Once H-cell connectivity is set up (cdsalias connect), there is no way
that this connectivity can be broken in DCE 1.1, with cell renaming 
(cellalisa set) disabled. Although connectivity can be partially broken by 
deleting the child pointer in the parent cell's /.:, child cells /.: Parent
Pointer are not updated. I suggest "cdsalias disconect" enhancement to do this.

[2/28/96 public]

From dcecp this amounts to(in child cell - /.../parent/child):

dcecp>directory modify /.: -remove {CDS_ParentCellPointers} -type
dcecp>directory remove  </.../parent>  -member child



CR Number                     : 13367
Defect or Enhancement?        : def
CR in Code, Doc, or Test?     : code
Inter-dependent CRs           : 
Project Name                  : dce
H/W Ref Platform              : all
S/W Ref Platform              : all
Component Name                : cds
Subcomponent Name             : cds/server
Short Description             : cdsd deadlock
Reported Date                 : 2/24/96
Found in Baseline             : 1.1
Found Date                    : 2/24/96
Severity                      : C
Priority                      : 2
Status                        : open
Duplicate Of                  : 
Fix By Baseline               : 1.2
Fixed In Baseline             : 
Affected File(s)              : 
Sensitivity                   : public

[2/24/96 public]

A support customer reported the following problem:
--------------------------------------------------

< edited version of DCE problem Report >

Date of First Occurrence: 06/24/95

Full Description:

Related-file:::: Problem
 DESCRIPTION:  This is present in 1.0 or 1.1.  There is a deadlock (and
 we hit it) in cdsd as follows.  If a skulk is in progress on a
 directory,  and a second one on the same directory is initiated, the
 second one will block and use the results of the first one.  While
 it's waiting, however, the second one still has the write count on the
 stream incremented.  The first one has reduced its access to read from
 write, in order to avoid blocking checkpont requests.  Admirable, but
 not always successful -- suppose a checkpoint is now initiated.  The
 checkpoint cannot yet proceed, because the writer count on the file is
 nonzero.  When the first skulk completes, and attempts to revert its
 access on the stream to Modify (from Read), it will be blocked in
 db_modify_stream_function, because there's a checkpoint attempt
 outstanding.  So it sleeps, and the other skulker never runs (and its
 write count remains outstanding) and the checkpoint never proceeds.
 The outstanding checkpoint also prevents any other modification ops
 from proceeding.
 
 
 REPRODUCIBLE:  Not easily, but we saw it once.
 
 DESCRIPTION OF WHERE TEST SUCCESSFULLY RAN:OB
 
 In db_modify_stream_function(), if changing to a modify operation
 when a checkpoint is pending, if other writes are outstanding, don't
 sleep, just proceed.
 
     *** /tmp/ci.14248..db_common.c.14288.1	Tue Jun 27 20:54:57 1995
     --- /tmp/db_common.c.14288.2	Tue Jun 27 20:54:57 1995
     ***************
     *** 626,635 ****
     --- 626,654 ----
                   while (file_p->file_state != file_open) {
                       if ((file_p->file_state == file_ckpt) &&
                           (new_function == OP_ReadAttribute)) {
                           break;
                       }
     + #ifdef hitm
     +                 /* avoid a bizarre deadlock -- if a checkpoint is
     +                  * desired, but someone else has a write on this file,
     +                  * it could be someone doing a skulk, which is what we
     +                  * are doing (only skulk calls this routine).  Such a
     +                  * skulker may have incremented the write count, and is
     +                  * then waiting for us to return and unset the skulk-
     +                  * in-progress flag.  If we wait here, we won't return,
     +                  * so the write count would stay positive, thus blocking
     +                  * the other skulker, who keeps the checkpoint from taking
     +                  * place.  Plus, the pending checkpoint keeps any
     +                  * other write ops from proceeding.
     +                  */
     + 
     +                 if ((file_p->file_state == file_ckpt) &&
     +                     (file_p->file_write_count > 0)) {
     +                     break;
     +                 }
     + #endif
                       if (file_p->file_state != file_ckpt) {
                           SERVER_END_LOCK(file_p->file_mutex);
                           DEBUG_EVENT(exit_db_modify_stream_function,
                               (" <db_modify_stream_function(%s, %d) return(%d)\n",
                               deb_ascii_db_stream(streamBuf, stream_p),
 
Related-file::Added 950627 by wright:: /build/hiosfm/RCS/dce1.1/src/directory/cds/server/./db_common.c,v 8.3
 /build/hiosfm/RCS/dce1.1/src/directory/cds/server/./db_common.c,v 8.3
 wright 1995/06/28 00:55:38 +22 -2
 Reason:  OSDqa11881 yet another bizarre cdsd deadlock (checkpoint during skulk)
 In db_modify_stream_function(), if changing to a modify operation
 when a checkpoint is pending, if other writes are outstanding, don't
 sleep, just proceed.
 
     *** /tmp/ci.14305..db_common.c.14350.1	Tue Jun 27 20:55:41 1995
     --- /tmp/db_common.c.14350.2	Tue Jun 27 20:55:41 1995
     ***************
     *** 731,740 ****
     --- 731,760 ----
                       if (file_p->file_state != file_ckpt) {
                           status = DNS_CLEARINGHOUSEDOWN;
       		    goto unlock_db_modify_stream_function;
                       }
       		
     + #ifdef hitm
     +                 /* avoid some bizarre deadlocks -- we're converting
     +                  * back to a write operation.  If there are any other
     +                  * write ops outstanding, just go ahead and do it.
     +                  * In general, the lock will be released shortly, so
     +                  * we might as well get out of the way; this can also
     +                  * prevent a nasty 3-way deadlock between an active
     +                  * skulker (in here), a blocked skulker (who has done
     +                  * an increment of file_write_count) and a checkpoint
     +                  * thread (which has set file_state to file_ckpt).  If
     +                  * we slept here, we'd never let the other skulker run,
     +                  * and so it won't decrement file_write_count, and the
     +                  * checkpoint will never run either, thus blocking all
     +                  * modify ops.
     +                  */
     + 
     +                 if ((file_p->file_write_count > 0)) {                    
     +                     break;
     +                 }
     + #endif
       		if ((thstatus = dthread_wait(&(file_p->file_state_changed),
       					     &(file_p->file_mutex))) < 0)
       		{
       		  dce_svc_printf(CDS_S_PTHREADCONDWAIT_A_MSG, (long)thstatus);
                       }
 
Related-file:::: Resolution 
 DESCRIPTION OF BUG FIX:  The simplest solution seemed to be to change
 db_modify_stream_function() to allow a caller to proceed if he's
 changing to a modify operation, but file_write_count > 0, even if a
 checkpoint is pending.
 
 Rationale:  the pending checkpoint is preventing new writers from
 entering, and this thread will be releasing its lock shortly anyway,
 so little delay is induced, and the deadlock is averted.  If
 file_write_count is zero, there are no potential deadlockers, and the
 checkpoint may have started, so have to sleep.



CR Number                     : 13318
Defect or Enhancement?        : def
CR in Code, Doc, or Test?     : code
Inter-dependent CRs           : 
Project Name                  : dce
H/W Ref Platform              : all
S/W Ref Platform              : all
Component Name                : cds
Subcomponent Name             : 
Short Description             : CDSCP syntax error arrow misplaced
Reported Date                 : 2/15/96
Found in Baseline             : 1.1
Found Date                    : 2/15/96
Severity                      : E
Priority                      : 3
Status                        : open
Duplicate Of                  : 
Fix By Baseline               : 1.2
Fixed In Baseline             : 
Affected File(s)              : 
Sensitivity                   : public

[2/15/96 public]

When a CDSCP create directory command is given with a total directory name 
length (including the cell name but not the /.:/ or /.../ prefix) of more than
373 characters, the command fails with a syntax error.  The error which
indicates the location of the arrow points to character 304.  If you shorten
the name to 373 characters, the command succeeds, indicating the error
occurred at the 374th character, not 304.



CR Number                     : 13307
Defect or Enhancement?        : def
CR in Code, Doc, or Test?     : code
Inter-dependent CRs           : 
Project Name                  : dce
H/W Ref Platform              : all
S/W Ref Platform              : all
Component Name                : cds
Subcomponent Name             : 
Short Description             : failure of dcecdsacl6 test
Reported Date                 : 2/7/96
Found in Baseline             : 1.2.1
Found Date                    : 2/7/96
Severity                      : C
Priority                      : 2
Status                        : open
Duplicate Of                  : 
Fix By Baseline               : 1.2
Fixed In Baseline             : 
Affected File(s)              : 
Sensitivity                   : public

[2/7/96 public]

This is a derivative of OT# 13209 with different characteristics.  It
appears that the clearinghouse reference in 13209 may be fixed, but
'rights' is still a problem.
(see attached):

520|0 0 15472 1 3|Initializing cell: /.../dce1.2-960202
520|0 0 15472 1 4|add group  st_tg in the /.../dce1.2-960202 registry
520|0 0 15472 1 5|add group  systest/st_admin in the /.../dce1.2-960202 registry
520|0 0 15472 1 6|add org  st_osf in the /.../dce1.2-960202 registry
520|0 0 15472 1 7|add principal  st_admin1 st_admin2 st_admin3 st_admin4 st_admi
n5 in the /.../dce1.2-960202 registry
520|0 0 15472 1 8|add account  st_admin1 st_admin2 st_admin3 st_admin4 st_admin5
 in the /.../dce1.2-960202 registry
520|0 0 15472 1 9|add principal  st_p1 st_p2 st_p3 st_p4 st_p5 st_p6 st_p7 st_p8
 st_p9 st_p10 in the /.../dce1.2-960202 registry
520|0 0 15472 1 10|add account  st_p1 st_p2 st_p3 st_p4 st_p5 st_p6 st_p7 st_p8
st_p9 st_p10 in the /.../dce1.2-960202 registry
520|0 0 15472 1 11|     Modifying acls on /.../dce1.2-960202
520|0 0 15472 1 12|     Modifying acls on /.../dce1.2-960202/blu2_ch
520|0 0 15472 1 13|This host: blu2 is a CDS server already
520|0 0 15472 1 14|     Modifying acls on /.../dce1.2-960202/hosts/blu2/cds-serv
er
520|0 0 15472 1 15|HOST: ibm_l3 is not a CDS server
520|0 0 15472 1 16|HOST: knuckle is not a CDS server
400|0 1 1 00:01:17|IC Start
200|0 1 00:01:17|TP Start
520|0 1 15472 1 17|Starting iteration 1
520|0 1 15472 1 18|Running STATE Series: st1
520|0 1 15472 1 19|Running STATE Series: st2
520|0 1 15472 1 20|Running STATE Series: st3
520|0 1 15472 1 21|Running STATE Series: st4
520|0 1 15472 1 22|Running STATE Series: st5
520|0 1 15472 1 23|Running STATE Series: st6
520|0 1 15472 1 24|Running STATE Series: st7
520|0 1 15472 1 25|Running STATE Series: st8
520|0 1 15472 1 26|Running STATE Series: st9
520|0 1 15472 1 27|Running STATE Series: st10
520|0 1 15472 1 28|Starting iteration 2
520|0 1 15472 1 29|Running STATE Series: st1
520|0 1 15472 1 30|Authenticated as st_admin1
520|0 1 15472 1 31|blu2_ch.st1: st_admin1 user command list and expected results
:
520|0 1 15472 1 32|cdscp create directory $CELL/$CDSSHOST clearinghouse $CELL/$C
HS pass
520|0 1 15472 1 33|acl_edit $CELL/$CDSSHOST -m user:st_admin2:rwdtcia pass
520|0 1 15472 1 34|acl_edit $CELL/$CDSSHOST -m user:st_admin3:rwdtcia pass
520|0 1 15472 1 35|acl_edit $CELL/$CDSSHOST -m user:st_admin4:rwdtcia pass
520|0 1 15472 1 36|acl_edit $CELL/$CDSSHOST -m user:st_admin5:rwdtcia pass
520|0 1 15472 1 37|cdscp create directory $CELL/$CDSSHOST/systest1 clearinghouse
 $CELL/$CHS pass
520|0 1 15472 1 38|cdscp set directory $CELL to skulk pass
520|0 1 15472 1 39|
520|0 1 15472 1 40|st_admin1 test execution follows...
520|0 1 15472 1 41|cdscp create directory /.../dce1.2-960202/blu2 clearinghouse
/.../dce1.2-960202/blu2_ch
520|0 1 15472 1 42|ERROR:Output from command:
520|0 1 15472 1 43|Error on entity: /.../dce1.2-960202/blu2
520|0 1 15472 1 44|Insufficient rights to perform requested operation
520|0 1 15472 1 45|Function: dnsCreateDir
520|0 1 15472 1 46|
520|0 1 15472 1 47|st_admin1 cmd return:fail expected:pass
520|0 1 15472 1 48|acl_edit /.../dce1.2-960202/blu2 -m user:st_admin2:rwdtcia
520|0 1 15472 1 49|ERROR:Output from command:
520|0 1 15472 1 50|ERROR: acl object not found (dce / sec)
520|0 1 15472 1 51|Unable to bind to object /.../dce1.2-960202/blu2
520|0 1 15472 1 52|st_admin1 cmd return:fail expected:pass
520|0 1 15472 1 53|acl_edit /.../dce1.2-960202/blu2 -m user:st_admin3:rwdtcia
520|0 1 15472 1 54|ERROR:Output from command:
520|0 1 15472 1 55|ERROR: acl object not found (dce / sec)
520|0 1 15472 1 56|Unable to bind to object /.../dce1.2-960202/blu2
520|0 1 15472 1 57|st_admin1 cmd return:fail expected:pass
520|0 1 15472 1 58|acl_edit /.../dce1.2-960202/blu2 -m user:st_admin4:rwdtcia
520|0 1 15472 1 59|ERROR:Output from command:
520|0 1 15472 1 60|ERROR: acl object not found (dce / sec)
520|0 1 15472 1 61|Unable to bind to object /.../dce1.2-960202/blu2
520|0 1 15472 1 62|st_admin1 cmd return:fail expected:pass
520|0 1 15472 1 63|acl_edit /.../dce1.2-960202/blu2 -m user:st_admin5:rwdtcia
520|0 1 15472 1 64|ERROR:Output from command:
520|0 1 15472 1 65|ERROR: acl object not found (dce / sec)
520|0 1 15472 1 66|Unable to bind to object /.../dce1.2-960202/blu2
520|0 1 15472 1 67|st_admin1 cmd return:fail expected:pass
520|0 1 15472 1 68|cdscp create directory /.../dce1.2-960202/blu2/systest1 clear
inghouse /.../dce1.2-960202/blu2_ch
520|0 1 15472 1 69|ERROR:Output from command:
520|0 1 15472 1 70|Error on entity: /.../dce1.2-960202/blu2/systest1
520|0 1 15472 1 71|Insufficient rights to perform requested operation
520|0 1 15472 1 72|Function: dnsCreateDir
520|0 1 15472 1 73|
520|0 1 15472 1 74|st_admin1 cmd return:fail expected:pass
520|0 1 15472 1 75|cdscp set directory /.../dce1.2-960202 to skulk
520|0 1 15472 1 76|ERROR:Output from command:
520|0 1 15472 1 77|Error on entity: /.../dce1.2-960202
520|0 1 15472 1 78|Insufficient rights to perform requested operation
520|0 1 15472 1 79|Function: dnsSkulkDir
520|0 1 15472 1 80|
520|0 1 15472 1 81|st_admin1 cmd return:fail expected:pass
520|0 1 15472 1 82|st_admin1 failed: 1) cdscp create directory $CELL/$CDSSHOST c
learinghouse $CELL/$CHS
520|0 1 15472 1 83|st_admin1 failed: 2) acl_edit $CELL/$CDSSHOST -m user:st_admi
n2:rwdtcia
520|0 1 15472 1 84|st_admin1 failed: 3) acl_edit $CELL/$CDSSHOST -m user:st_admi
n3:rwdtcia
520|0 1 15472 1 85|st_admin1 failed: 4) acl_edit $CELL/$CDSSHOST -m user:st_admi
n4:rwdtcia
520|0 1 15472 1 86|st_admin1 failed: 5) acl_edit $CELL/$CDSSHOST -m user:st_admi
n5:rwdtcia
520|0 1 15472 1 87|st_admin1 failed: 6) cdscp create directory $CELL/$CDSSHOST/s
ystest1 clearinghouse $CELL/$CHS
520|0 1 15472 1 88|st_admin1 failed: 7) cdscp set directory $CELL to skulk
520|0 1 15472 1 89|blu2_ch.st1 st_admin1 Total failures: 7 out of 7 operations
520|0 1 15472 1 90|



CR Number                     : 13268
Defect or Enhancement?        : def
CR in Code, Doc, or Test?     : code
Inter-dependent CRs           : 
Project Name                  : dce
H/W Ref Platform              : other
S/W Ref Platform              : osf1
Component Name                : cds
Subcomponent Name             : cdsclerk
Short Description             : cdsclerk dies in alloc_child
Reported Date                 : 12/28/95
Found in Baseline             : 1.1
Found Date                    : 12/28/95
Severity                      : C
Priority                      : 2
Status                        : open
Duplicate Of                  : 
Fix By Baseline               : 
Fixed In Baseline             : 
Affected File(s)              : directory/cds/child/clerk_client.c
Sensitivity                   : public

[12/28/95 public]

 Support Subscriber reported the following:

  "The cdsclerk occasionally dies during execution of the test named 
   rpccp_entry.sh The following excerpt from sdb is a stack trace 
   of the offending thread.
 
   *t
   0x24443cd4: kill+0x32(0x34d4, 0x6)
   0x24443d38: raise+0x40(0x6)
   0x24443da8: abort+0x92()
   0x24443e28: alloc_child+0x228(0x2468dc08, 0x0)
   0x24443ea0: clerk_request+0x3a(0x2468dc08)
   0x24443f28: _pthread_body+0x74(0x2403d908)
 
   The test can fail in different places or not at all.

   "Nasty little race condition here.
   Anyway, it happens because clerk_request() does its own call of
   alloc_child().  That's a BAD idea, because if the spawning
   clerk_client thread is cancelled before the new clerk_request() thread
   finishes alloc_child, the clerk_client thread won't have any record of
   its new progeny and won't wait for it to terminate; instead, it will
   simply deallocate *ll_p.  Then, the clerk_request() thread tries to
   use ll_p (not knowing it has been freed) and bad stuff happens.  It
   usually works because the memory isn't reallocated right away and the
   child discovers that it's time to die.   But sometimes the memory has
   been reallocated, and then things really go to pieces."
 
 And proposed the following solution:

   "The solution is to have the *parent* call alloc_child on behalf of its
   (future) offspring, and pass the th_p pointer to the child (which can
   derive ll_p from th_p)"

*** clerk_client.c	Thu Dec 28 13:30:19 1995
--- clerk_client.c.new	Thu Dec 28 13:30:34 1995
***************
*** 136,142 ****
  clerk_client (link_t *);
  
  static dthread_address_t
! clerk_request (link_t *);
  
  static void
  stop_requests (link_t *);
--- 136,142 ----
  clerk_client (link_t *);
  
  static dthread_address_t
! clerk_request (thread_t *);
  
  static void
  stop_requests (link_t *);
***************
*** 424,429 ****
--- 424,430 ----
    dthread_t reqthrd;
    struct sigaction newsig;
    int thstatus, sig_status;
+   thread_t       *th_p = 0;
  
  #if defined(DCE_CDS_DEBUG)
  
***************
*** 472,477 ****
--- 473,480 ----
    dthread_cleanup_push(link_free, ll_p);
  
    while ((ll_p->ll_reqData_p = read_request(ll_p)) != NULL) {
+     
+     if (!th_p) th_p = alloc_child(ll_p, NULL);
  
      if ((thstatus = dthread_lock(&(ll_p->ll_mutex))) < 0)
      {
***************
*** 482,489 ****
  
        if (!ll_p->ll_waiter_p)
  	if (0 <= dthread_create(&reqthrd, &clerk_request_attr,
! 		(dthread_start_routine)clerk_request, (dthread_address_t)ll_p))
  	  (void)dthread_detach(&reqthrd);
  
        {
  
--- 485,494 ----
  
        if (!ll_p->ll_waiter_p)
  	if (0 <= dthread_create(&reqthrd, &clerk_request_attr,
! 		(dthread_start_routine)clerk_request, (dthread_address_t)th_p)) {
  	  (void)dthread_detach(&reqthrd);
+ 	  th_p = 0;
+ 	}
  
        {
  
***************
*** 499,504 ****
--- 504,514 ----
  	dce_svc_printf(CDS_S_PTHREADMUTEXUNLOCK_A_MSG, (long)thstatus);
      }
  
+     if (th_p) {
+       free_child(th_p);
+       th_p = 0;
+     }
+ 
      /*
       * Wait for the bait to be taken
       */
***************
*** 553,567 ****
   *	none
   */
  static dthread_address_t 
! clerk_request (link_t *ll_p)
  { /* st */
      DEB_ASCII_BUF_time_local(exp)
!     thread_t	*th_p = alloc_child(ll_p, NULL);
      register optab_t *op_p;
      time_local_t relTime;
      struct sigaction newsig;
      int thstatus, sig_status;
  
      DCE_SVC_DEBUG((
          cds__svc_handle,
          cds_svc_child,
--- 563,579 ----
   *	none
   */
  static dthread_address_t 
! clerk_request (thread_t *th_p)
  { /* st */
      DEB_ASCII_BUF_time_local(exp)
!     link_t       *ll_p = 0
      register optab_t *op_p;
      time_local_t relTime;
      struct sigaction newsig;
      int thstatus, sig_status;
  
+     if (th_p) ll_p = th_p->link_p;
+ 
      DCE_SVC_DEBUG((
          cds__svc_handle,
          cds_svc_child,
***************
*** 568,574 ****
          svc_c_debug3,
          " >clerk_request(0x%p->%d)",
          ll_p,
!         ll_p->ll_fd));
  
      /*
       * Make sure sigpipe does not stop us.
--- 580,586 ----
          svc_c_debug3,
          " >clerk_request(0x%p->%d)",
          ll_p,
!         ll_p ? ll_p->ll_fd : 0));
  
      /*
       * Make sure sigpipe does not stop us.


I've attempted to reproduce this proble on an running dce1.1, and although I think
I can describe some scenarios which would result in the failure,
I have not been able to reproduce the problem via the rpccp test

I believe rpccp_entry.sh is old and no longer being used to test DCE, since the
test iself has several bugs in it's implementation. I cleaned up the test, and ran it
repeatedly overnight. Other than the fact that my DCE credentials eventually expired,
no problems were encountered.

As mentioned above, I can predict the reported behavior based on an analysis
of the implementation of the clerk_state thread in directory/cds/child/clerk_main.c.

the clerk_state thread starts the listener thread which starts a client thread
each time a connection is accepted by the IPC socket used to communicate between a
clerk and the control programs. Each client thread starts a request thread which
in the current implementation does an alloc_child. 

Once the clerk state thread has created the listener thread, it enters a loop where it
wakes up every minute to decide whether or not conditions are such that it should cancel
the listener thread and thus it's offspring (the pairs of client and request threads
corresponding to each accepted connection). There are four conditions which cause the
clerk state thread to cancel the listener thread.

1. The clerk_state is no longer clerk_On. Based on my analysis, I don't think this will
   ever occur.

2. The cds advertsiser has been shut down, and in doing so, it changed state information
   kept in the memory which it shares with the cds clerks. When eack clerk detects notices
   the change in the value of this state information, it cancels its listener thread.

3. dthread_timed_wait returned a unix error code other than EAGAIN.

4. The clerk has sent 0 requests to the cds server during the 20, 1 minute intervals
   for which the clerk state thread is willing to leave an idle clerk running.

It is possible that either condition 2 (maybe the advertiser gently crashed),
condition 3 (maybe a dts inspired syncronization or some other system phenomenon
is affecting the errno established by dthread_timed_wait), or condition 4, ocurred
precisely in the interval of time beteen when the request thread was created and
alloc_child was completed. I am speculating that any of these scenarios are plausible 
explanations for the (rarely observed) behavior you have encountered.



CR Number                     : 13207
Defect or Enhancement?        : def
CR in Code, Doc, or Test?     : code
Inter-dependent CRs           : 
Project Name                  : dce
H/W Ref Platform              : all
S/W Ref Platform              : all
Component Name                : cds
Subcomponent Name             : 
Short Description             : Rem non-exist attrib, no error
Reported Date                 : 11/17/95
Found in Baseline             : 1.1
Found Date                    : 11/17/95
Severity                      : C
Priority                      : 2
Status                        : open
Duplicate Of                  : 
Fix By Baseline               : 1.2
Fixed In Baseline             : 
Affected File(s)              : 
Sensitivity                   : public

[11/17/95 public]

When doing a modify -remove using DCECP or a remove using CDSCP, if the named
attribute does not exists, no error is returned.  A return code of 0 is 
returned.  These commands remove the value of the attribute, not the attribute
itself, and not reporting an error if the attribute does not exist leads the
user to believe there is such as attribute.  In certain cases the whole   
attribute  would be removed by these commands, and in those cases perhaps it
is not important to let the user know the attribute didn't exist in the first
place, but in cases where the intent is to remove a value and still have an
attribute, it is misleading if success is reported when the attribute does not
exist.

The documentation for both dcecp link modify -remove and dcecp object modify
-remove says, "If an attribute or value is not present, an error is returned."
we do not get an error in either case.  Correction, link modify mentions an
error if the value does not exist, but object modify only mentions if the
attribute does not exist.



CR Number                     : 13173
Defect or Enhancement?        : def
CR in Code, Doc, or Test?     : code
Inter-dependent CRs           : 
Project Name                  : dce
H/W Ref Platform              : all
S/W Ref Platform              : all
Component Name                : cds
Subcomponent Name             : 
Short Description             : Sequent compiler flags missing macro
Reported Date                 : 10/28/95
Found in Baseline             : 1.1unintegrated
Found Date                    : 10/28/95
Severity                      : C
Priority                      : 2
Status                        : open
Duplicate Of                  : 
Fix By Baseline               : 1.2
Fixed In Baseline             : 
Affected File(s)              : cds/server/server_badclock.c
Sensitivity                   : public

[10/28/95 public]

Info from Ticket#22129 tomj@gradient.com

This is another place where the sequent compiler flags a
possible bug in DCE src code.

	src/directory/cds/server/server_badclock.c:



        if (dns_p) {
            if (dns_p->vtype == VT_Timestamp) {
                value_p = (DBSetMember_t *)DATA_DBSet(set_p);
#ifndef GRADIENT_FIX
                if (EXT8(value_p->dm_value_present)) {
#else
                if (value_p->dm_value_present) {
#endif
                    DCE_SVC_DEBUG((
                        cds__svc_handle,
                        cds_svc_server,
                        svc_c_debug1,
                        "  ScanRecord: processing a timestamp value"));

                    /* call Timestamp action routine */
                    bad_ts = (ts_routine)(report_p, value_p->dm_data) || bad_ts;
                }

[11/01/95 public]

Removed extraneous info/header from previous note.



CR Number                     : 13161
Defect or Enhancement?        : def
CR in Code, Doc, or Test?     : code
Inter-dependent CRs           : 
Project Name                  : dce
H/W Ref Platform              : all
S/W Ref Platform              : all
Component Name                : cds
Subcomponent Name             : 
Short Description             : dacl_read, dacl_replica tests fail
Reported Date                 : 10/25/95
Found in Baseline             : 1.2
Found Date                    : 09/29/95
Severity                      : E
Priority                      : 4
Status                        : open
Duplicate Of                  : 
Fix By Baseline               : 1.2
Fixed In Baseline             : 
Affected File(s)              : 
Sensitivity                   : public

[10/25/95 public]

cds functional tests dacl_read and dacl_replica fail:

dacl_read log file (sections which show failures): 
#
# cdscp
#
cdscp show child /.:/dacl_reads/dir1

                        SHOW
                       CHILD   /.../knuckle_f920/dacl_reads/dir1
                          AT   1995-09-29-15:05:47
Error on entity: /.../knuckle_f920/dacl_reads/dir1
Insufficient rights to perform requested operation
Function: dnsEnumAttr

cdscp show obj /.:/dacl_reads/obj1

                        SHOW
                      OBJECT   /.../knuckle_f920/dacl_reads/obj1
                          AT   1995-09-29-15:05:49
Error on entity: /.../knuckle_f920/dacl_reads/obj1
Insufficient rights to perform requested operation
Function: dnsEnumAttr

cdscp show link /.:/dacl_reads/lnk1

                        SHOW
                    SOFTLINK   /.../knuckle_f920/dacl_reads/lnk1
                          AT   1995-09-29-15:05:50
Error on entity: /.../knuckle_f920/dacl_reads/lnk1
Insufficient rights to perform requested operation
Function: dnsEnumAttr

#
# cdscp
#
cdscp set dir /.:/dacl_reads to skulk
cdscp set dir /.:/dacl_reads/dir1 to skulk
cdscp show dir /.:/dacl_reads

                        SHOW
                   DIRECTORY   /.../knuckle_f920/dacl_reads
                          AT   1995-09-29-15:05:56
Error on entity: /.../knuckle_f920/dacl_reads
Insufficient rights to perform requested operation
Function: dnsEnumAttr

cdscp show child /.:/dacl_reads/dir1

                        SHOW
                       CHILD   /.../knuckle_f920/dacl_reads/dir1
                          AT   1995-09-29-15:05:57
Error on entity: /.../knuckle_f920/dacl_reads/dir1
Insufficient rights to perform requested operation
Function: dnsEnumAttr

cdscp show obj /.:/dacl_reads/obj1

                        SHOW
                      OBJECT   /.../knuckle_f920/dacl_reads/obj1
                          AT   1995-09-29-15:05:58
Error on entity: /.../knuckle_f920/dacl_reads/obj1
Insufficient rights to perform requested operation
Function: dnsEnumAttr


dacl_replica log file: 
Error on entity: /.../knuckle_f920/dacl_ch2_dir950929191114
Insufficient rights to perform requested operation
Function: dnsCreateDir

ERROR: acl object not found (dce / sec)
Unable to bind to object /.:/dacl_ch2_dir950929191114
Error on entity: /.../knuckle_f920/dacl_ch2_dir950929191114
Requested entry does not exist
Function: dnsDelDir
dnsDelDir: partial results = /.../knuckle_f920

HOSTNAME = HOSTNAME
#
# acl_edit
#
acl_edit /.:/ch1 -m user:notroot:wc
acl_edit /.:/ch2 -m user:notroot:c
ERROR: Not an RPC entry (dce / rpc)
Unable to bind to object /.:/ch2

Creates top level directory first

#
# cdscp
#
cdscp set dir /.: to skulk
cdscp create dir /.:/dacl_replicas950929191114 clear /.:/ch1
cdscp set dir /.: to skulk
cdscp set dir /.:/dacl_replicas950929191114 to skulk

Set access to everything but admin and expect all to fail

#
# acl_edit
#
acl_edit /.:/dacl_replicas950929191114 -s user:notroot:rwditc
#
# cdscp
#
cdscp create replica /.:/dacl_replicas950929191114 clea /.:/ch2
Error on entity: /.../knuckle_f920/dacl_replicas950929191114
Insufficient rights to perform requested operation
Function: dnsAddReplica

cdscp set dir /.:/dacl_replicas950929191114 to new epoch mast /.:/ch1
Error on entity: /.../knuckle_f920/dacl_replicas950929191114
Insufficient rights to perform requested operation
Function: dnsNewEpoch

cdscp set dir /.: to skulk
cdscp set dir /.:/dacl_replicas950929191114 to skulk

Set access to admin and expect failure - server doesn't have access

#
# acl_edit
#
acl_edit /.:/dacl_replicas950929191114 -s user:notroot:rac
#
# cdscp
#
cdscp create replica /.:/dacl_replicas950929191114 clea /.:/ch2
Error on entity: /.../knuckle_f920/dacl_replicas950929191114
Insufficient rights to perform requested operation
Function: dnsAddReplica


Set server access to rwa but still expect create to fail

#
# acl_edit
#
acl_edit /.:/dacl_replicas950929191114 -m user:hosts/HOSTNAME/cds-server:rwa
user:hosts//cds-server - SEC_ACL_EDIT - invalid or unknown entry key (dce / sad)
#
# cdscp
#
cdscp create replica /.:/dacl_replicas950929191114 clea /.:/ch2
Error on entity: /.../knuckle_f920/dacl_replicas950929191114
Insufficient rights to perform requested operation
Function: dnsAddReplica


Add write for user to clear - should work

#
# acl_edit
#
acl_edit /.:/ch2 -m user:notroot:wrc
ERROR: Not an RPC entry (dce / rpc)
Unable to bind to object /.:/ch2
acl_edit /.:/ch1 -m user:hosts/HOSTNAME/cds-server:
user:hosts//cds-server - SEC_ACL_EDIT - invalid or unknown entry key (dce / sad)
#
# cdscp
#
cdscp create replica /.:/dacl_replicas950929191114 clea /.:/ch2
Error on entity: /.../knuckle_f920/dacl_replicas950929191114
Insufficient rights to perform requested operation
Function: dnsAddReplica

cdscp set dir /.: to skulk
cdscp set dir /.:/dacl_replicas950929191114 to skulk
cdscp set dir /.:/dacl_replicas950929191114 to new epoch mast /.:/ch1 read /.:/ch2
Error on entity: /.../knuckle_f920/dacl_replicas950929191114
Specified clearinghouse does not contain a copy of the directory
Function: dnsNewEpoch


New epoch should fail changing masters

cdscp set dir /.:/dacl_replicas950929191114 to new epoch mast /.:/ch2 read /.:/ch1
Error on entity: /.../knuckle_f920/dacl_replicas950929191114
Specified clearinghouse does not contain a copy of the directory
Function: dnsNewEpoch


Set server access so new epoch changing masters succeeds


acl_edit /.:/ch1 -m user:hosts/HOSTNAME/cds-server:wc
user:hosts//cds-server - SEC_ACL_EDIT - invalid or unknown entry key (dce / sad)
#
# cdscp
#
cdscp set dir /.:/dacl_replicas950929191114 to new epoch mast /.:/ch2 read /.:/ch1
Error on entity: /.../knuckle_f920/dacl_replicas950929191114
Specified clearinghouse does not contain a copy of the directory
Function: dnsNewEpoch


Set access to everything but admin and expect remove to fail

#
# acl_edit
#
acl_edit /.:/dacl_replicas950929191114 -m user:notroot:rwdtic
acl_edit /.:/ch1 -m user:notroot:c
#
# cdscp
#
cdscp delete replica /.:/dacl_replicas950929191114 clear /.:/ch1
Error on entity: /.../knuckle_f920/dacl_replicas950929191114
Requested entry does not exist
Function: dnsRmReplica
dnsRmReplica: partial results = %x000000000000000000000000000000000000


Set access to admin, but still fails cause of clearinghouse access

#
# acl_edit
#
acl_edit /.:/dacl_replicas950929191114 -m user:notroot:rac
#
# cdscp
#
cdscp delete replica /.:/dacl_replicas950929191114 clear /.:/ch1
Error on entity: /.../knuckle_f920/dacl_replicas950929191114
Requested entry does not exist
Function: dnsRmReplica
dnsRmReplica: partial results = %x000000000000000000000000000000000000


Set clear access - should work

#
# acl_edit
#
acl_edit /.:/ch1 -m user:notroot:wc
#
# cdscp
#
acl_edit /.:/dacl_replicas950929191114 -m user:notroot:rwdtac
cdscp delete repclica /.:/dacl_replicas950929191114 clearinghouse /.:/ch1
Error on entity: /.../knuckle_f920/dacl_replicas950929191114
Requested entry does not exist
Function: dnsRmReplica
dnsRmReplica: partial results = %x000000000000000000000000000000000000

cdscp delete directory /.:/dacl_replicas950929191114



CR Number                     : 13135
Defect or Enhancement?        : def
CR in Code, Doc, or Test?     : code
Inter-dependent CRs           : 12901
Project Name                  : dce
H/W Ref Platform              : all
S/W Ref Platform              : all
Component Name                : cds
Subcomponent Name             : cdsd
Short Description             : Upgrading the CDS_DirectoryVersion attribute for a clearinghouse
Reported Date                 : 10/2/95
Found in Baseline             : 1.1
Found Date                    : 10/2/95
Severity                      : C
Priority                      : 2
Status                        : open
Duplicate Of                  : 
Fix By Baseline               : 1.2
Fixed In Baseline             : 
Affected File(s)              : 
Sensitivity                   : public

[10/2/95 public]

As things currently stand, when a new DCE 1.1 CDS server is configured
via dce_config, the initial clearinghouse (<machine>_ch) will be created
with a CDS_DirectoryVersion attribute that has a default value of 3.0.
Unfortunately, since there is no documented way to modify the values of
clearinghouse attributes, it will _always_ have this value.  Here's the
situation:

	(1) At present there is no way (at least using our dce_config)
	to configure a new DCE 1.1 CDS server with an initial 
	clearinghouse for which CDS_DirectoryVersion defaults to 4.0.
	A CR (#12901) has already been filed requesting this change.

	(2) It is possible to start up cdsd with a flag "-v 4.0" (see
	CR #12161).  This will cause any _new_ clearinghouses to have a 
	default value of 4.0 for CDS_DirectoryVersion, but has no
	effect on the _existing_ clearinghouses.

	(3) If dce_config were to make use of the aformentioned cdsd
	flag, it could possibly solve this problem for the _initial_
	clearinghouse, but not for any other pre-existing 
	clearinghouses with a CDS_DirectoryVersion of 3.0.

	(4) Given that cells which are in transition between DCE 1.0.x
	and DCE 1.1 might well contain 1.1 CDS servers with
	clearinghouses that were initialized with CDS_DirectoryVersion
	3.0, it seems desirable that there should be some reasonably
	convenient mechanism for upgrading these clearinghouses to a
	default level of 4.0.  Whether this is accomplished by adding
	a "clearinghouse modify" command to dcecp (which carries some
	risks) or by making the clearinghouse upgrade part of the code
	for propagating root directory upgrades via the background
	process is obviously a design question.

Why should this matter?  Because even if the root directory is upgraded
to CDS_DirectoryVersion 4.0, even if cdsd is started up with the "-v 4.0"
flag, since the initial (and typically default) clearinghouse remains at 
3.0, every new directory created which does not explicitly have its
master replica created in a 4.0-level clearinghouse will by default
start out with a CDS_DirectoryVersion of 3.0.  This value will persist
until either the new directory is deliberately upgraded or until the
background process does the job for it (assuming root is at 4.0).

This may not be an issue now, but when cell aliasing and hierarchical
cells become functional, the transient existence of 3.0-level 
directories could potentially pose some problems.



CR Number                     : 13129
Defect or Enhancement?        : def
CR in Code, Doc, or Test?     : code
Inter-dependent CRs           : 
Project Name                  : dce
H/W Ref Platform              : all
S/W Ref Platform              : all
Component Name                : cds
Subcomponent Name             : 
Short Description             : Cdsalias connect shouldn't req GDA
Reported Date                 : 9/21/95
Found in Baseline             : 1.1
Found Date                    : 7/11/95
Severity                      : C
Priority                      : 2
Status                        : open
Duplicate Of                  : 
Fix By Baseline               : 1.2
Fixed In Baseline             : 
Affected File(s)              : 
Sensitivity                   : public

[9/21/95 public]

The GDA should not be required for the dcecp cdsalias connect command to      
succeed.  As long as the parent cell can be located from the child cell by
using cdscp define cached server or dcecp csdcache create, the command
should succeed.  This is helpful for non-TCP/IP protocols where DNS is not
supported and a GDA cannot be used.



CR Number                     : 12963
Defect or Enhancement?        : def
CR in Code, Doc, or Test?     : code
Inter-dependent CRs           : 
Project Name                  : dce
H/W Ref Platform              : all
S/W Ref Platform              : all
Component Name                : cds
Subcomponent Name             : 
Short Description             : cdsalias create fails with 234 characters
Reported Date                 : 7/20/95
Found in Baseline             : 1.1
Found Date                    : 5/25/95
Severity                      : B
Priority                      : 2
Status                        : open
Duplicate Of                  : 
Fix By Baseline               : 1.2
Fixed In Baseline             : 
Affected File(s)              : 
Sensitivity                   : public

[7/20/95 public]

The 4/94 hierarchical cells spec from DEC says, "assure that the new alias
name is less than 255 characters long," which implies the maximum name
is 254 characters.  Cdsalias create fails with a name which is 234 or more
characters.  /.../ is being counted as 5 of the characters supplied.  The
cellname is cellkrisw1, so even with that added it would be less than 254
characters.  The error is, "The supplied cellname is required to be < 255
bytes in length."

(ibm - see defect 14030.)

[2/7/96 public]

Forwarding this from dcecp to cds.  In the dcecp code, the alias name
provided by the user (and its length) are stored in

      alias_name.fn_name
      alias_name.fn_length

As stated above, using an alias name of >= 234 characters causes dcecp
to fail unexpectedly, but the error comes from CDS.

In the code, with the 'alias_name' structure created properly, the call

      rpc_status = cp_AddCellname(..., &command_status);

has the return values rpc_status = 0 and command_status = 282109022.

The failed 'command_status' is passed up through dcecp and you get

      dcecp> cdsalias create /.../long-name-with-more-than-234-characters...
      Error: The supplied cellname is required to be < 255 bytes in length.
      dcecp>

dcecp is doing the right thing by passing along the error message.



CR Number                     : 12962
Defect or Enhancement?        : def
CR in Code, Doc, or Test?     : code
Inter-dependent CRs           : 
Project Name                  : dce
H/W Ref Platform              : all
S/W Ref Platform              : all
Component Name                : cds
Subcomponent Name             : 
Short Description             : cdsalias create, delete need errors for exists/does not exist
Reported Date                 : 7/20/95
Found in Baseline             : 1.1
Found Date                    : 5/25/95
Severity                      : B
Priority                      : 2
Status                        : open
Duplicate Of                  : 
Fix By Baseline               : 1.2
Fixed In Baseline             : 
Affected File(s)              : 
Sensitivity                   : public

[7/20/95 public]
it appeared to fail.  RFC 42.3 said there would be an error returned by 
cdsalias create if the name already existed and an error returned by cdsalias
delete if a name did not exist.  Neither error occurs; in fact cdsalias
create will create an alias if another entity exists with the same name, such
as /.:/hosts.  This behavior from these commands can be confusing and 
misleading to users.  The same name used for different things can create
problems; also if a user types a name incorrectly, delete appears to succeed
and does not bring to his attention that the alias did not exist.  

(ibm - see defects 14028 and14029.)

[2/7/96 public]

The following dcecp commands illustrate this problem well:

      dcecp> cdsalias catalog
      {CDS_CellAliases
       {Primary /.../mgm_test_config}
       {Alias /.../set_alias}}
      dcecp>
      dcecp>
      dcecp> cdsalias delete /.../gumby
      dcecp>
      dcecp> cdsalias catalog
      {CDS_CellAliases
       {Primary /.../mgm_test_config}
       {Alias /.../set_alias}}
      dcecp>

The point being a delete of non-existant alias '/.../gumby' did
not return an expected error message, rather a status of success.

The internal call

      rpc_status = cp_RemoveCellname(..., &command_status);

returns rpc_status = 0 and command_status = 282107905, which
is CDS_SUCCESS.  dcecp has no way of knowing to report an error
in this case.



CR Number                     : 12879
Defect or Enhancement?        : def
CR in Code, Doc, or Test?     : code
Inter-dependent CRs           : 12987
Project Name                  : dce
H/W Ref Platform              : all
S/W Ref Platform              : all
Component Name                : cds
Subcomponent Name             : cdsd
Short Description             : database index corruption after creates/deletes
Reported Date                 : 5/19/95
Found in Baseline             : 1.1
Found Date                    : 5/19/95
Severity                      : A
Priority                      : 0
Status                        : open
Duplicate Of                  : 
Fix By Baseline               : 1.1
Fixed In Baseline             : 1.1maint
Affected File(s)              : 
Sensitivity                   : public

[5/19/95 public]

Symptoms:
  A suite of tests which includes a procedure which creates and
  deletes objects whose names are generated from random numbers.
  During this procedure, these objects are listed.
  After about 40 hours, the list command hangs with the server
  in a hard loop in build_name_set().

  This problem is reproducible with a more direct test script,
  which is included below.  This script takes several hours to
  stumble across the problem, and it does not always encounter
  it in the same way.  Stopping and restarting cdsd after the
  test and trying "cdscp list obj /.:/*" sometimes makes the
  problem apparent.  Passing this test several times
  sequentially would be excellent evidence of a good fix.

Severity:
  This problem hangs our Continuous Hours of Operation tests on
  every run.  It is blocking our ability to adequately test our
  system for release.

Analysis:
  Stepping through the code, we discovered that db_entry_read_next()
  was facilitating the loop by cycling back over 6 names. This was
  due to an index entry, pointing to an empty data bucket, whose
  next pointer pointed to entries which were in earlier lexical order
  to the index key.
  e.g. key 29121 pointed to empty bucket, which pointed to a bucket
  containing 27590, 28019, etc.

  It is easy to verify that once all items are purged from a bucket,
  an orphan key like this results. Thereafter, the code does not
  use this bucket, but advances to a following non-empty bucket
  before making its insertion. At this point, data buckets are still
  in order, but the index is inconsistent. If we extend this,
  such that that bucket splits, it is possible for the index itself
  to start containing out-of-order keys when the new keys are inserted.

  When we further examined the index, we did find index corruptions
  like this.

Solution:
  There seem to be two approaches to solving this.

  1) Re-use the empty buckets. This would be complicated because
     of code which might not have the key for that empty bucket
     when insertion takes place.

  2) Delete buckets as they become empty. This is already attempted
     in db_btree_remove_entry(), but the algorithm has to be extended
     to remove not only orphaned index entries, but if an index bucket
     becomes empty by this action, the algorithm is propagated up the tree.

Test Script:
    #!/bin/ksh
    # @HP_COPYRIGHT@
    integer OUTER_LOOP=0
    while (( $OUTER_LOOP < 25 ))
    do
       touch /tmp/cdstestcmds
       integer INNER_LOOP=0
       while (( $INNER_LOOP < 1000 ))
       do
          ENTRY_NAME="/.:/new_server_$RANDOM"
          echo "create object $ENTRY_NAME" >> /tmp/cdstestcmds
          echo "delete object $ENTRY_NAME" >> /tmp/cdstestcmds
          INNER_LOOP=INNER_LOOP+1
       done
       echo "set dir /.: to skulk" >> /tmp/cdstestcmds
       cat /tmp/cdstestcmds | cdscp > /dev/null
       rm /tmp/cdstestcmds
       cdscp list obj "/.:/*" > /dev/null
       OUTER_LOOP=OUTER_LOOP+1
       echo "test cycle $OUTER_LOOP complete"
    done

[7/19/95 public]

Customer believes that this report is not complete because the problem 
is not just with empty buckets, it's with buckets that have their last 
entry deleted, thus rendering the key in the index obsolete.  (Well, 
that's true in 1.0.3, so it's probably true in 1.1 -- the code in 1.1 
that's supposed to do things like rebuild the index can never be invoked.)

[8/2/95 public]

See OT 12987 for a possible fix to this problem.

[01/24/96 public]

Fixed in 1.1maint; fix provided by Alan Peckham.



CR Number                     : 12878
Defect or Enhancement?        : def
CR in Code, Doc, or Test?     : code
Inter-dependent CRs           : 
Project Name                  : dce
H/W Ref Platform              : all
S/W Ref Platform              : all
Component Name                : cds
Subcomponent Name             : child
Short Description             : cdsclerk improper locking can leave dangling pointers
Reported Date                 : 5/18/95
Found in Baseline             : 1.1
Found Date                    : 5/18/95
Severity                      : C
Priority                      : 2
Status                        : open
Duplicate Of                  : 
Fix By Baseline               : 1.1
Fixed In Baseline             : 
Affected File(s)              : directory/cds/child/clerk_client.c, directory/cds/child/clerk_bind.c
Sensitivity                   : public

[5/18/95 public]

A support customer noted:

> When parse_arguments calls free_inuse_cached_handle, no
> locks are being held.  That means that a second caller can come in and
> make the identical call.  Suppose the cache entry is unreferenced, and
> one of the threads succeeds in freeing the cache data.  Freeing
> includes doing a dns_free, so the same memory could now be reused.
> Now the other thread attempts to do the free, with disastrous results.
> 
> Just starting up and shutting down CDS
> many times will hit it sooner or later, especially with kernel threads
> on a multiprocessor.

The suggested fix for clerk_client.c is:

>      *** /tmp/ci.10024..clerk_client.c.10058.1	Fri Jan 27 16:30:47 1995
>      --- /tmp/clerk_client.c.10058.2	Fri Jan 27 16:30:47 1995
>      ***************
>      *** 903,913 ****
>        *parse_arguments (thread_t *th_p)
>        {
>        #if defined(DCE_SEC)
>            byte_t *p;
>            int    done;
>      !     handle_cache_t *cache_p;
>        #endif
>        
>            register byte_t **argPtr = th_p->clerkArgs;
>            register byte_t **endArg = &th_p->clerkArgs[MAX_ARGS];
>            register byte_t *reqPtr = th_p->clerkReqBuf_p;
>      --- 903,913 ----
>        *parse_arguments (thread_t *th_p)
>        {
>        #if defined(DCE_SEC)
>            byte_t *p;
>            int    done;
>      !     handle_cache_t *cache_p, *next_p;
>        #endif
>        
>            register byte_t **argPtr = th_p->clerkArgs;
>            register byte_t **endArg = &th_p->clerkArgs[MAX_ARGS];
>            register byte_t *reqPtr = th_p->clerkReqBuf_p;
>      ***************
>      *** 940,950 ****
>      --- 940,952 ----
>        	/* If arg 0 is non-0, save opaque login context */
>        	if (argcnt++ == 0) {
>        	    if (length > sizeof(field16)) {
>        
>        #if defined(DCE_SEC)
>      +               int thstatus;
>        
>      + 
>        	      done = FALSE;
>        
>        	      /* 
>        	       * Save the opaque and internal login context in the link structure,
>        	       * Save the opaque login context in the 'user_t' field of thread_t,
>      ***************
>      *** 951,960 ****
>      --- 953,969 ----
>        	       * for convience.
>        	       * Precede the context with its length.
>        	       * This will we used for hashing the cache.
>        	       */
>        
>      +               if ((thstatus = dthread_lock(&(th_p->link_p->ll_mutex))) < 0)
>      +               {
>      +                   dce_svc_printf(CDS_S_PTHREADMUTEXLOCK_A_MSG, (long)thstatus);
>      +               }
>      + 
>      +               /* Beginning of the 'protected code' */
>      + 
>        	      /*
>        	       * if had one from before - see if it changed 
>        	       */
>        	      if (th_p->link_p->ll_opq_login_context) { 
>        		  if (EQ_bytes(th_p->link_p->ll_opq_login_context + 
>      ***************
>      *** 972,987 ****
>        
>        		    /* free it and get newer one*/
>        		    if (th_p->link_p->ll_opq_login_context)
>        			dns_free ((char *)th_p->link_p->ll_opq_login_context); 
>        		    /* release all cached binding handles */
>      ! 		    while ((cache_p = 
>      ! 			   (handle_cache_t *)th_p->link_p->ll_binding_hdr.next_p) !=
>      ! 			   (handle_cache_t *)&th_p->link_p->ll_binding_hdr) 
>      ! 			free_inuse_cached_handle (th_p, cache_p);
>        		  }
>        	      }
>        	      if (!done) {
>        		  p = th_p->link_p->ll_opq_login_context =
>        		    (byte_t *)dns_malloc((int)(length+sizeof(field16)));
>        
>        		  /*
>      --- 981,1001 ----
>        
>        		    /* free it and get newer one*/
>        		    if (th_p->link_p->ll_opq_login_context)
>        			dns_free ((char *)th_p->link_p->ll_opq_login_context); 
>        		    /* release all cached binding handles */
>      ! 		    for (cache_p = 
>      ! 			 (handle_cache_t *)th_p->link_p->ll_binding_hdr.next_p;
>      !                          cache_p !=
>      ! 			   (handle_cache_t *)&th_p->link_p->ll_binding_hdr;
>      !                          cache_p = next_p) {
>      !                             next_p = cache_p->hdr.next_p;
>      !                             free_inuse_cached_handle (th_p, cache_p);
>      !                       }
>        		  }
>        	      }
>      + 
>        	      if (!done) {
>        		  p = th_p->link_p->ll_opq_login_context =
>        		    (byte_t *)dns_malloc((int)(length+sizeof(field16)));
>        
>        		  /*
>      ***************
>      *** 989,998 ****
>      --- 1003,1018 ----
>        		   */
>        		  PUT16 (p, length);
>        		  COPY_bytes (reqPtr, p, length);
>        	      }
>        	      reqPtr += length;
>      + 
>      +               /* End of the 'protected code' */
>      +               if ((thstatus = dthread_unlock(&(th_p->link_p->ll_mutex))) < 0)
>      +               {
>      +                   dce_svc_printf(CDS_S_PTHREADMUTEXUNLOCK_A_MSG, (long)thstatus);
>      +               }
>        
>        #endif	/* defined(DCE_SEC) */
>        
>        	  }
>        	  length = GET16(reqPtr); /* arg 1 length */

The suggested fix for clerk_bind.c is:

>      *** /tmp/ci.10024..clerk_bind.c.10090.1	Fri Jan 27 16:30:54 1995
>      --- /tmp/clerk_bind.c.10090.2	Fri Jan 27 16:30:54 1995
>      ***************
>      *** 880,890 ****
>            return((handle_cache_t *)NULL);
>        }  
>        
>        
>        /*
>      !  * A cached handle is not longer useful.  Free it and its resources.
>         */
>        void 
>        free_cached_handle (thread_t              *th_p,
>                            rpc_binding_handle_t  handle)
>        {
>      --- 880,890 ----
>            return((handle_cache_t *)NULL);
>        }  
>        
>        
>        /*
>      !  * A cached handle is no longer useful.  Free it and its resources.
>         */
>        void 
>        free_cached_handle (thread_t              *th_p,
>                            rpc_binding_handle_t  handle)
>        {
>      ***************
>      *** 942,969 ****
>         */
>        void 
>        free_inuse_cached_handle (thread_t        *th_p,
>                                  handle_cache_t  *cache_p)
>        {
>      -     int thstatus;
>      - 
>        
>            DCE_SVC_DEBUG((
>                cds__svc_handle,
>                cds_svc_child,
>                svc_c_debug8,
>                " >free_inuse_cached_handle()"));
>        
>      !     if ((thstatus = dthread_lock(&(th_p->link_p->ll_mutex))) < 0)
>      !     {
>      !         dce_svc_printf(CDS_S_PTHREADMUTEXLOCK_A_MSG, (long)thstatus);
>      !     }
>      ! 
>      ! 
>      !      /* Beginning of the 'protected code' */
>      ! 
>      !     if(cache_p)
>            {
>        	/*
>        	 * If there are no other users of this handle, free it now     
>        	 */
>        	if (cache_p->usecount == 0)
>      --- 942,959 ----
>         */
>        void 
>        free_inuse_cached_handle (thread_t        *th_p,
>                                  handle_cache_t  *cache_p)
>        {
>        
>            DCE_SVC_DEBUG((
>                cds__svc_handle,
>                cds_svc_child,
>                svc_c_debug8,
>                " >free_inuse_cached_handle()"));
>        
>      !     if (cache_p)
>            {
>        	/*
>        	 * If there are no other users of this handle, free it now     
>        	 */
>        	if (cache_p->usecount == 0)
>      ***************
>      *** 977,993 ****
>        	     */
>        	    ++cache_p->killit;
>        	}
>            }
>        
>      - 
>      -     /* End of the 'protected code' */
>      -     if ((thstatus = dthread_unlock(&(th_p->link_p->ll_mutex))) < 0)
>      -     {
>      - 	dce_svc_printf(CDS_S_PTHREADMUTEXUNLOCK_A_MSG, (long)thstatus);
>      -     }
>      -       
>            DCE_SVC_DEBUG((
>                cds__svc_handle,
>                cds_svc_child,
>                svc_c_debug8,
>                " <free_inuse_cached_handle()"));
>      --- 967,976 ----

This should be followed by this subsequent patch to clerk_bind.c:

>      *** /tmp/ci.14731..clerk_bind.c.14765.1	Wed Feb  1 11:10:21 1995
>      --- /tmp/clerk_bind.c.14765.2	Wed Feb  1 11:10:21 1995
>      ***************
>      *** 22,31 ****
>      --- 22,36 ----
>         * All Rights Reserved
>        */
>        /*
>         * HISTORY
>         * $Log:	c012878,v $
# Revision 1.3  95/06/06  14:21:59  root
# changed fields:  new/changed/deleted note(s) [farrell 5/23/95 public] [farrell 6/6/95 public] [farrell 5/23/95 public]
# 
# Revision 1.2  95/05/23  11:11:57  root
# changed fields:  new/changed/deleted note(s) [farrell 5/23/95 public]
# 
# Revision 1.1  95/05/18  17:04:37  root
# new CR
# 
>      +  * Revision 7.3  1995/02/01  16:10:20  wright
>      +  * Reason:  OSDqa10524 cdsclerk improper locking can leave dangling pointers
>      +  * Removes locking to caller.  The rest of this change is included as
>      +  * part of the checkin to OSDqa10533.
>      +  *
>         * Revision 7.2  1993/08/31  22:14:28  wright
>         * Incorporate 1.0.3 bug fix (misbracketed if statement).
>         *
>         * Revision 1.1.9.2  1993/07/29  18:16:55  jd
>         * 	FIxed mis-bracketed if statement.
>      ***************
>      *** 582,604 ****
>            unsigned32     rpcStatus;
>        
>            DEBUG_EVENT(enter_free_inuse_cached_handle, 
>        		(" >free_inuse_cached_handle()\n"));
>        
>      -     CLERK_LOCK(th_p->link_p->ll_mutex)
>      - 
>            if (cache_p) {
>        	/* If there are no other users of this handle, free it now */
>        	if (cache_p->usecount == 0)
>        	  delete_cache_handle(th_p->link_p, cache_p); 
>        	else
>        	/* Otherwise, mark it to be deleted when no longer in use */
>        	  ++cache_p->killit;
>            }
>        
>      -     CLERK_END_LOCK(th_p->link_p->ll_mutex);
>      -       
>            DEBUG_EVENT(exit_free_inuse_cached_handle, 
>        		(" <free_inuse_cached_handle()\n"));
>        }
>        /*
>         * Decrement cached handle use count
>      --- 587,605 ----

[5/23/95 public]

Paul Smythe at HP brought this problem to my attention, but the fix
we arrived at together differs slightly from the above.  In order to 
also protect another thread from using the login context as it's 
being changed, we make a private copy of the login context for each 
thread using it.   

Here are our differences relative to the original r1.1 code.  HP is
still testing the fix.


> diff clerk_bind.c $bsrc/
456,464d455
< /*
<  *  *rpc_status_p =
<  *    do_sec_login(th_p->link_p->ll_opq_login_context+sizeof(field16),
<  *               EXT16(th_p->link_p->ll_opq_login_context),
<  *               &th_p->login_context);
<  */
<     *rpc_status_p =  do_sec_login(th_p->user+sizeof(field16),
<                                 EXT16(th_p->user),
<                                 &th_p->login_context);
465a457,460
>     *rpc_status_p =
>       do_sec_login(th_p->link_p->ll_opq_login_context+sizeof(field16),
>                  EXT16(th_p->link_p->ll_opq_login_context),
>                  &th_p->login_context);
>


> diff clerk_client.c $bsrc/
665d664
<
813d811
<       if (th_p->user) dns_free((char *)th_p->user);
908d905
<     int thstatus;
929,937d925
< #if defined(DCE_SEC)
<     /* Take mutex to protect the th_p->link_p->ll_opq_login_context */
<     if ((thstatus = dthread_lock(&(th_p->link_p->ll_mutex))) < 0)
<       {
<         dce_svc_printf(CDS_S_PTHREADMUTEXLOCK_A_MSG,
<                        (long)thstatus);
<       }
< #endif
<
949,951c937,938
<              * Save the opaque and internal login context in
<              * the link structure.  Save the opaque login
<              * context in the 'user_t' field of thread_t,
---
>              * Save the opaque and internal login context in the link structure,
>              * Save the opaque login context in the 'user_t' field of thread_t,
966d952
<
983d968
<
996d980
<
1021,1032d1004
< /*
<     th_p->user = th_p->link_p->ll_opq_login_context;
< */
<
<     if (th_p->link_p->ll_opq_login_context) {
<      register int length = EXT16(th_p->link_p->ll_opq_login_context);
<      if (th_p->user != NULL)
<        dns_free(th_p->user);
<      p = th_p->user = (byte *)dns_malloc((int)(length+sizeof(field16)));
<      PUT16(p, length);
<      COPY_bytes(th_p->link_p->ll_opq_login_context+sizeof(field16),p,length);
<     }
1034,1037c1006
<     if ((thstatus = dthread_unlock(&(th_p->link_p->ll_mutex))) <0) {
<       dce_svc_printf(CDS_S_PTHREADMUTEXUNLOCK_A_MSG,
<                      (long)thstatus);
<     }
---
>     th_p->user = th_p->link_p->ll_opq_login_context;

[6/6/95 public]
The fix I suggested above provides protection against both the case
where two threads try to update the login context at the same time,
and the case where one thread updates it while another reads it.

IMPORTANT: I did, however, miss one important edit without which
the clerk will deadlock.  The calls to lock and unlock the ll_mutex 
in the link structure within the free_inuse_cached_handle() procedure 
must be removed.  This procedure is found in clerk_bind.c.  Apologies for
the oversight.
 
HISTORY Thu May 18 17:04:35 1995 jcarroll	Created



CR Number                     : 12871
Defect or Enhancement?        : def
CR in Code, Doc, or Test?     : code
Inter-dependent CRs           : 
Project Name                  : dce
H/W Ref Platform              : all
S/W Ref Platform              : all
Component Name                : cds
Subcomponent Name             : cds
Short Description             : cds object ACLs display misleading
Reported Date                 : 5/17/95
Found in Baseline             : 1.1
Found Date                    : 5/17/95
Severity                      : D
Priority                      : 2
Status                        : open
Duplicate Of                  : 
Fix By Baseline               : 1.1
Fixed In Baseline             : 
Affected File(s)              : 
Sensitivity                   : public

[5/17/95 public]
Prior to 1.1, CDS directories sported rwdtcia rights ... and CDS
objects sported rwdtc rights.

With a 1.1 CDS clearinghouse, all CDS objects now seem to support
the full rwdtcia rights.

  An "acl_edit -e /.:/sec -l" on 1.0.3a shows stuff similar to:

     user:cell_admin:rwdtc

  while on 1.1 it shows:

     user:cell_admin:rwdtc--

The same results are visible through dcecp (acl show ...) depending
on whether it is pointed at a 1.0.3 CDS server or a 1.1 one.

While perhaps not a big deal in itself, we have scripts that are
parsing this dcecp output and will need to be changed for 1.1
unless this is "fixed".

[5/17/95 public]
This is a bug in the display of the ACLs only.  Functionality is 
the same as in 1.0.3.  Object entries support only "rwdtc" rights.



CR Number                     : 12859
Defect or Enhancement?        : def
CR in Code, Doc, or Test?     : code
Inter-dependent CRs           : 
Project Name                  : dce
H/W Ref Platform              : all
S/W Ref Platform              : all
Component Name                : cds
Subcomponent Name             : sams
Short Description             : CDS.SAMS file and may be others reporting status code in incorrect format
Reported Date                 : 5/8/95
Found in Baseline             : 1.1
Found Date                    : 5/8/95
Severity                      : C
Priority                      : 3
Status                        : open
Duplicate Of                  : 
Fix By Baseline               : 1.1
Fixed In Baseline             : 
Affected File(s)              : 
Sensitivity                   : public

[5/8/95 public]

Rich Salz reported:

The CDS.SAMS file uses %ld when it reports status codes.
This makes it hard to find them in the PDG.  STatus codes should
be reported as 0x%8.8lx and the value cast to a (long).

Other sams files probably have the same bugs.



CR Number                     : 12827
Defect or Enhancement?        : def
CR in Code, Doc, or Test?     : code
Inter-dependent CRs           : 2854
Project Name                  : dce
H/W Ref Platform              : other
S/W Ref Platform              : other
Component Name                : cds
Subcomponent Name             : cdsd
Short Description             : New namespace cannot be reached: status = DNS_SOCKET.
Reported Date                 : 3/27/95
Found in Baseline             : 1.1
Found Date                    : 3/27/95
Severity                      : C
Priority                      : 2
Status                        : open
Duplicate Of                  : 
Fix By Baseline               : 1.1
Fixed In Baseline             : 
Affected File(s)              : dns_service_ncl.c
Sensitivity                   : public

[3/27/95 public]

 Cdsd is dying sometimes during startup because it's timing out when 
 trying to read the root directory.
 
 S:****** Configuring initial CDS Server...
 S:****** Please wait for user authentication and authorization...
 
 
 S:****** Checking for active sec_client service...
 
 
         If clients and servers are to be divided into LAN profile
         groups to facilitate performance, enter "y" to the
         following question.
         (Most cells will not require this feature.)
  
         Are you using multiple LAN profiles within this cell? (n) 
 S:****** Starting cdsadv...
 S:****** Starting cdsd...
 1995-02-01-15:43:59.058-05:00I----- cdsd(4466) FATAL cds server
 dns_service_ncl.c 327 0x24033f88
 New namespace cannot be reached: status = DNS_SOCKET.

Proposed Solution:

Customet increased probe interval from 1 to 3 seconds, and no longer
encountered problem (cdsd tries 15 times waiting 3 seconds between
each try).

     *** /tmp/ci.13822..dns_service_ncl.c.13854.1       Fri Feb  3 16:39:49
1995
     --- /tmp/dns_service_ncl.c.13854.2 Fri Feb  3 16:39:50 1995
     ***************
     *** 769,779 ****
        * error is returned.
        * Inputs:  nameserver nsgbl_ch structure
        * Returns: dns_status_t
       */
       #define NUM_ATTEMPTS 15   /* number of attempts to read root    */
     ! #define PROBE_INTERVAL 1  /* interval, in secs., between reads  */
       
       static dns_status_t 
       probe_root_dir (nsgbl_ch_t *ch_p)
       {
           DEB_ASCII_BUF_nsgbl_ch(chBuf)
     --- 773,783 ----
        * error is returned.
        * Inputs:  nameserver nsgbl_ch structure
        * Returns: dns_status_t
       */
       #define NUM_ATTEMPTS 15   /* number of attempts to read root    */
     ! #define PROBE_INTERVAL 3  /* interval, in secs., between reads  */
       
       static dns_status_t 
       probe_root_dir (nsgbl_ch_t *ch_p)
       {
           DEB_ASCII_BUF_nsgbl_ch(chBuf)



CR Number                     : 12825
Defect or Enhancement?        : def
CR in Code, Doc, or Test?     : code
Inter-dependent CRs           : 
Project Name                  : dce
H/W Ref Platform              : all
S/W Ref Platform              : all
Component Name                : cds
Subcomponent Name             : cds_clerk
Short Description             : locking error in cancellation code
Reported Date                 : 3/27/95
Found in Baseline             : 1.1
Found Date                    : 3/27/95
Severity                      : B
Priority                      : 2
Status                        : open
Duplicate Of                  : 
Fix By Baseline               : 1.1
Fixed In Baseline             : 
Affected File(s)              : 
Sensitivity                   : public

[3/27/95 public]

                          DCE Problem Report
                  =================================


Submitter Information 
----------------------

Submitter Name:           wright
Organization:             Hitachi Computer Products (America), Inc. 
Email Address:            osd.dce@hi.com wright@hi.com 
Phone:                    617-890-0444 
DCE License Number:       1616-MDCE-92
Licensee's Defect Number: OSDqa10355


Hardware/Software Configuration
--------------------------------

Offering and Version:   DCE7.2 
Component (Module):     clerk_client.c 
Client Hardware:        see below 
Client Software:        see below 
Server Hardware:        see below 
Server Software:        see below 
Compiler:               n/a

Problem Description
--------------------

Severity Level: Critical

Date of First Occurrence: 01/11/95

One Line Description:
   OSDqa10355 locking error in cancellation code

Full Description:

Related-file:::: Problem
 DESCRIPTION:  In directory/cds/child/clerk_client.c, the link_free
 procedure does not hold a lock long enough.  Specifically, when it
 sets its state to ll_Off and broadcasts to ll_state_changed, it should
 still be holding the ll_mutex.
 
 
 REPRODUCIBLE:  Occasionally.
 
 
Related-file::Added 950111 by wright:: /build/hiosfm/RCS/dce1.1/src/directory/cds/child/./clerk_client.c,v 7.3
 /build/hiosfm/RCS/dce1.1/src/directory/cds/child/./clerk_client.c,v 7.3
 wright 1995/01/11 17:40:34 +9 -14
 Reason:  OSDqa10355 locking error in cancellation code
 Hold the ll_mutex while issuing the broadcast on state_changed.
 
     *** /tmp/ci.2882..clerk_client.c.2918.1	Wed Jan 11 12:40:37 1995
     --- /tmp/clerk_client.c.2918.2	Wed Jan 11 12:40:37 1995
     ***************
     *** 1351,1360 ****
     --- 1351,1367 ----
                           {
       		      dce_svc_printf(CDS_S_PTHREADCONDWAIT_A_MSG, (long)thstatus);
                           }
       		}
       		
     + 		ll_p->ll_state = ll_Off;
     + 
     + 	     	if ((thstatus = dthread_broadcast(&(ll_p->ll_state_changed))) < 0)
     +               	{
     + 		     dce_svc_printf(CDS_S_PTHREADCONDBROADCAST_A_MSG, 
     + 			             (long)thstatus);
     +                 }
       	    }
             
           
       	    
       
     ***************
     *** 1361,1382 ****
          /* End of the 'protected code' */
          if ((thstatus = dthread_unlock(&(ll_p->ll_mutex))) < 0)
          {
            dce_svc_printf(CDS_S_PTHREADMUTEXUNLOCK_A_MSG, (long)thstatus);
          }
     - 
     - 	ll_p->ll_state = ll_Off;
     - 	if (!dcond_equal(ll_p->ll_state_changed, dcond_null)) {
     -           {
     - 
     - 	     if ((thstatus = dthread_broadcast(&(ll_p->ll_state_changed))) < 0)
     -               {
     - 		dce_svc_printf(CDS_S_PTHREADCONDBROADCAST_A_MSG, 
     - 			       (long)thstatus);
     -               }
     -           }
     - 	}
       
       	if ((clerk_p = ll_p->ll_clerk_p) != NULL) {
       	    /*
       	     * Remove myself from the list
       	     */
     --- 1368,1377 ----
 
Related-file:::: Resolution 
 DESCRIPTION OF BUG FIX: Needed to hold lock around state setting and
 notify of condition.
  
  
 REGRESSION TEST SCENARIO: This one just showed up occasionally during
 system test.
  
  
 RCSDIFFS (either inserted manually or via Fci):



CR Number                     : 12815
Defect or Enhancement?        : def
CR in Code, Doc, or Test?     : doc
Inter-dependent CRs           : 4405
Project Name                  : dce
H/W Ref Platform              : i486
S/W Ref Platform              : other
Component Name                : cds
Subcomponent Name             : relnotes
Short Description             : cannot build CDS without security
Reported Date                 : 3/9/95
Found in Baseline             : 1.1
Found Date                    : 3/9/95
Severity                      : C
Priority                      : 2
Status                        : open
Duplicate Of                  : 
Fix By Baseline               : 1.2.2
Fixed In Baseline             : 
Affected File(s)              : 
Sensitivity                   : public

[3/9/95 public]

One Line Description:

CDS does not build without -DDCE_SEC

Full Description:

The Porting and testing guide claims you should build CDS without
DCE security by turning off DCE_SEC (defined in cds.mk).

This doesn't work in DCE 1.1 due to various headers and C files
which use security types, etc without checking DCE_SEC.

A similar problem was reported for SVR4 against DCE 1.0.1 and fixed
(see OT 4405).

Repeat By:

Build cds component with -UDCE_SEC

Proposed Solution:

[5/17/96 public]

This was originally assigned to the Porting Guide, but that
book isn't supported anymore, so I'm designating the Release
Notes as sub-component.



CR Number                     : 12804
Defect or Enhancement?        : def
CR in Code, Doc, or Test?     : code
Inter-dependent CRs           : 
Project Name                  : dce
H/W Ref Platform              : other
S/W Ref Platform              : other
Component Name                : cds
Subcomponent Name             : 
Short Description             : BindChildDssd() is racey.
Reported Date                 : 2/23/95
Found in Baseline             : 1.1
Found Date                    : 2/23/95
Severity                      : C
Priority                      : 3
Status                        : open
Duplicate Of                  : 
Fix By Baseline               : 1.1
Fixed In Baseline             : 
Affected File(s)              : cds/adver/adver_clerk.c
Sensitivity                   : public

[2/23/95 public]

 It is possible (in our kernel-threads environment on an 
 MP, at any rate), for multiple invocations of BindChildDssd()
 to run concurrently.  If they do so with the same uid/gid,
 as seen at startup time, more than one thread may decide that
 a child needs to be created.  They will use the same name for
 the socket in adver_open_socket(), and warning messages from
 that routine may appear. 
 
 We suggest adding a bit of serialization here.
     *** /tmp/ci.14019..adver_clerk.c.14055.1   Wed Feb  1 11:20:48 1995
     --- /tmp/adver_clerk.c.14055.2     Wed Feb  1 11:20:48 1995
     ***************
     *** 441,450 ****
     --- 441,466 ----
       
           DCE_SVC_DEBUG((cds__svc_handle, cds_svc_adver, svc_c_debug8,
                   " <client_cleanup(%p)", arg));
       }
       ^L
     + #ifdef hitm
     + static int BindCount;
     + static pthread_cond_t   BindCount_cond;
     + static boolean32        BindCount_inited;
     + static pthread_once_t   BindCount_once = pthread_once_init;
     + static void BindCount_init 
     + #ifndef __STDC__
     +    ( )
     + #else
     + ( void )
     + #endif
     + {
     + pthread_cond_init(&BindCount_cond, pthread_condattr_default);
     + BindCount_inited = true;
     + }
     + #endif
       /*
        * BindChild()
        *
        * Description:
        *     Looks to see if there is a child for this principal;
     ***************
     *** 484,494 ****
       
           /*
            * ok, look to see if we have a child for this prinicipal 
            */
           CDS_LOCK(listen_p->mutex)
     ! 
           for (child_p = listen_p->childList_p;  child_p; 
         child_p = child_p->next_p)
           {
       
        if ((bindMsg->hdr.infoLen == child_p->princLen) &&
     --- 500,515 ----
       
           /*
            * ok, look to see if we have a child for this prinicipal 
            */
           CDS_LOCK(listen_p->mutex)
     ! #ifdef hitm
     !     if (!BindCount_inited)
     !  pthread_once(&BindCount_once, BindCount_init);
     !     if (BindCount)
     !  pthread_cond_wait(&BindCount_cond, &listen_p->mutex);
     ! #endif
           for (child_p = listen_p->childList_p;  child_p; 
         child_p = child_p->next_p)
           {
       
        if ((bindMsg->hdr.infoLen == child_p->princLen) &&
     ***************
     *** 506,516 ****
        if (!child_p)
            do
                num = ++listen_p->lastnum;
            while (num == 0);
           }
     ! 
           CDS_END_LOCK(listen_p->mutex)
       
           /*
            * nope, better make one 
            */
     --- 527,539 ----
        if (!child_p)
            do
                num = ++listen_p->lastnum;
            while (num == 0);
           }
     ! #ifdef hitm
     !     if (!child_p) BindCount++;
     ! #endif
           CDS_END_LOCK(listen_p->mutex)
       
           /*
            * nope, better make one 
            */
     ***************
     *** 639,651 ****
         * there are cases where the name was passed back
         * to the library before it was created.
         */
        if ((cfd = adver_open_socket(&child_p->saddr, 5)) < 0) {
            status = DNS_UNIXERRORS + errno;
            goto leave_BindChildDssd;
        }
     - 
        (void)chown(child_p->saddr.sun_path, uid, gid);
        (void)chmod(child_p->saddr.sun_path, 0400|0200);
       
        /*      For SVR4, it is not necessary to do this since cma_fork()
and
         *      cma_exec*() do the right things.
     --- 662,679 ----
         * there are cases where the name was passed back
         * to the library before it was created.
         */
        if ((cfd = adver_open_socket(&child_p->saddr, 5)) < 0) {
            status = DNS_UNIXERRORS + errno;
     + #ifdef hitm
     +              CDS_LOCK(listen_p->mutex)
     +              BindCount--;
     +              pthread_cond_signal(&BindCount_cond);
     +      CDS_END_LOCK(listen_p->mutex)
     + #endif
            goto leave_BindChildDssd;
        }
        (void)chown(child_p->saddr.sun_path, uid, gid);
        (void)chmod(child_p->saddr.sun_path, 0400|0200);
       
        /*      For SVR4, it is not necessary to do this since cma_fork()
and
         *      cma_exec*() do the right things.
     ***************
     *** 751,761 ****
       
             CDS_LOCK(listen_p->mutex)
       
             child_p->next_p = listen_p->childList_p;
             listen_p->childList_p = child_p;
     ! 
             CDS_END_LOCK(listen_p->mutex)
       
        /*
         * Unblock SIGCHiLD - this needs to be after the last reference
         * of child_p.  This is because adver_clerk_signal() can deallocate
     --- 779,792 ----
       
             CDS_LOCK(listen_p->mutex)
       
             child_p->next_p = listen_p->childList_p;
             listen_p->childList_p = child_p;
     ! #ifdef hitm
     !       BindCount--;
     !       pthread_cond_signal(&BindCount_cond);
     ! #endif
             CDS_END_LOCK(listen_p->mutex)
       
        /*
         * Unblock SIGCHiLD - this needs to be after the last reference
         * of child_p.  This is because adver_clerk_signal() can deallocate



CR Number                     : 12795
Defect or Enhancement?        : def
CR in Code, Doc, or Test?     : doc
Inter-dependent CRs           : 
Project Name                  : dce
H/W Ref Platform              : all
S/W Ref Platform              : all
Component Name                : cds
Subcomponent Name             : command_ref
Short Description             : Punctuation omissions in the cdscp_show_link.8 man page
Reported Date                 : 2/10/95
Found in Baseline             : 1.1
Found Date                    : 2/10/95
Severity                      : D
Priority                      : 2
Status                        : open
Duplicate Of                  : 
Fix By Baseline               : 1.2.2
Fixed In Baseline             : 
Affected File(s)              : 
Sensitivity                   : public

[2/10/95 public]

                          DCE Problem Report
                  =================================


Submitter Information 
----------------------

Submitter Name:           nancy
Organization:             Hitachi Computer Products (America), Inc. 
Email Address:            osd.dce@hi.com nancy@hi.com 
Phone:                    617-890-0444 
DCE License Number:       1616-MDCE-92
Licensee's Defect Number: OSDqa10212


Hardware/Software Configuration
--------------------------------

Offering and Version:   DCER1.0 
Component (Module):      
Client Hardware:        see below 
Client Software:        see below 
Server Hardware:        see below 
Server Software:        see below 
Compiler:               n/a

Problem Description
--------------------

Severity Level: Minor

Date of First Occurrence: 12/20/94

One Line Description:
   OSDqa10212 Punctuation omissions in the cdscp_show_link.8 man page

Full Description:

Related-file:::: Problem
 DESCRIPTION:
 Some of the ARGUMENTS descriptions and the DESCRIPTION summaries are
 missing the terminating "." (period) from the cdscp_show_link.8 man page.
 
 REPRODUCIBLE: Yes
 
 TEST SOFTWARE DESCRIPTION: man page review
 % man cdscp_show_link.8
 
 cdscp show link(8cds)  Hitachi DCE/Base-M   cdscp show link(8cds)
 
 NAME
      cdscp show link - Displays attribute information about the
      specified soft link
 
 SYNOPSIS
      cdscp show link link-name [attribute-name] [with attribute-
      name = attribute-value]
 
 ARGUMENTS
      link-name The full name of a specific soft link.  The last
                simple name can contain wildcard characters.
 
 NOTE: No terminating "." (period) at end of each of the summaries for either
       "attribute-name" or "attribute-value":
 
      attribute-name
                The name of a particular attribute (see below)
 
      attribute-value
                The value of a particular attribute.
 
 DESCRIPTION
 [...]
 NOTE: No terminating "." (period) at end of each of the summaries below.
      CDS_CTS   Specifies the creation timestamp (CTS) of this
                soft link
 
      CDS_LinkTarget
                Specifies the full name of the directory, object
                entry, or other soft link to which the soft link
                points
 
      CDS_LinkTimeout
                Specifies a timeout value after which the soft
                link is either checked or deleted
 
      CDS_UTS   Specifies the timestamp of the most recent update
                to an attribute of the soft link
 
 DESCRIPTION OF HARDWARE WHERE BUG OCCURRED: Hitachi Mainframe VM - sybil
 
 DESCRIPTION OF WHERE TEST SUCCESSFULLY RAN: n/a
Related-file::Added 950203 by lconrad:: /build/hiosfm/RCS/dce/doc/admin.rf/man8cds/./cdscp_show_link.8cds,v 7.4
 /build/hiosfm/RCS/dce/doc/admin.rf/man8cds/./cdscp_show_link.8cds,v 7.4
 lconrad 1995/02/03 16:07:21 +3 -3
 Reason:  OSDqa10212 Punctuation omissions in the cdscp_show_link.8 man page
 Added one period (.) . The rest of the manpage is punctuated correctly.
 
     *** /tmp/ci.10161..cdscp_show_link.8cds.10192.1	Fri Feb  3 11:07:24 1995
     --- /tmp/cdscp_show_link.8cds.10192.2	Fri Feb  3 11:07:24 1995
     ***************
     *** 55,65 ****
       .VL
       .LI "\fIlink-name\fR"
       The full name of a specific soft link.  The last simple name can contain 
       wildcard characters.
       .LI "\fIattribute-name\fR"
     ! The name of a particular attribute (see below)
       .LI "\fIattribute-value\fR"
       The value of a particular attribute.
       .wH "<endargdeflist>"
       .LE
       .SH "DESCRIPTION"
     --- 55,65 ----
       .VL
       .LI "\fIlink-name\fR"
       The full name of a specific soft link.  The last simple name can contain 
       wildcard characters.
       .LI "\fIattribute-name\fR"
     ! The name of a particular attribute (see below).
       .LI "\fIattribute-value\fR"
       The value of a particular attribute.
       .wH "<endargdeflist>"
       .LE
       .SH "DESCRIPTION"

[5/17/96 public]

Assigned to Digital, though I suspect this CR should be cancelled, since
the old command interfaces aren't being supported in the documentation
anymore, as I understand.



CR Number                     : 12794
Defect or Enhancement?        : def
CR in Code, Doc, or Test?     : doc
Inter-dependent CRs           : 
Project Name                  : dce
H/W Ref Platform              : all
S/W Ref Platform              : all
Component Name                : cds
Subcomponent Name             : command_ref
Short Description             : Some of the cdscp_*.8 man pages have punctuation omissions.
Reported Date                 : 2/10/95
Found in Baseline             : 1.1
Found Date                    : 2/10/95
Severity                      : D
Priority                      : 2
Status                        : open
Duplicate Of                  : 
Fix By Baseline               : 1.2.2
Fixed In Baseline             : 
Affected File(s)              : 
Sensitivity                   : public

[2/10/95 public]

                          DCE Problem Report
                  =================================


Submitter Information 
----------------------

Submitter Name:           lconrad
Organization:             Hitachi Computer Products (America), Inc. 
Email Address:            osd.dce@hi.com lconrad@hi.com 
Phone:                    617-890-0444 
DCE License Number:       1616-MDCE-92
Licensee's Defect Number: OSDqa10211


Hardware/Software Configuration
--------------------------------

Offering and Version:   DCER1.0 
Component (Module):      
Client Hardware:        see below 
Client Software:        see below 
Server Hardware:        see below 
Server Software:        see below 
Compiler:               n/a

Problem Description
--------------------

Severity Level: Minor

Date of First Occurrence: 12/20/94

One Line Description:
   OSDqa10211 Some of the cdscp_*.8 man pages have punctuation omissions.

Full Description:

Related-file:::: Problem
 DESCRIPTION:
 Some of the cdscp_*.8 man pages have punctuation missing.
 
 REPRODUCIBLE: Yes
 
 TEST SOFTWARE DESCRIPTION: man page review
 The following man pages have the "." (period) missing at the end of an
 ARGUMENT definition:
     For example:
 	cdscp_create_directory: "directory-name" - This implies that the
 				blurb summarizing the "directory-name" ARGUMENT
 				is not terminated with a "."; i.e.,
 % man cdscp_create_directory.8
 
 cdscp create directory(8Hitachi DCE/Bcdscp create directory(8cds)
 
 NAME
      cdscp create directory - Creates a CDS directory
 
 SYNOPSIS
      cdscp create directory directory-name [clearinghouse
      clearinghouse-name]
 
 ARGUMENTS
      directory-name
                The full name of the directory
                                              ^
 NOTE: There is no "." here ------------------|
 
      clearinghouse-name
                The name of the clearinghouse in which you create
                the directory.
                             ^
 BUT: There is a "." here ---| and in most man pages with this format.
 	
 Here is the full list:
 	cdscp_create_directory: "directory-name"
 	cdscp_delete_directory: "directory-name" & "clearinghouse-name"
 	cdscp_show_child: "attribute-name"
 	cdscp_show_directory: "attribute-name"
 	cdscp_show_object: "attribute-name"
 	cdscp_show_replica: "directory-name" & "clearinghouse-name" &
 			    "attribute-name"
 
 DESCRIPTION OF HARDWARE WHERE BUG OCCURRED: Hitachi Mainframe VM - sybil
 
 DESCRIPTION OF WHERE TEST SUCCESSFULLY RAN: n/a
Related-file::Added 950203 by lconrad:: /build/hiosfm/RCS/dce/doc/admin.rf/man8cds/./cdscp_show_object.8cds,v 7.4
 /build/hiosfm/RCS/dce/doc/admin.rf/man8cds/./cdscp_show_object.8cds,v 7.4
 lconrad 1995/02/03 16:19:47 +3 -3
 Reason:  OSDqa10211 Some of the cdscp_*.8 man pages have punctuation omissions.
 Added one period (.). Rest of manpage punctuated correctly.
 
     *** /tmp/ci.10313..cdscp_show_object.8cds.10344.1	Fri Feb  3 11:19:50 1995
     --- /tmp/cdscp_show_object.8cds.10344.2	Fri Feb  3 11:19:50 1995
     ***************
     *** 55,65 ****
       .VL
       .LI "\fIobject-name\fR"
       The full name of a specific object entry.  The last simple name can contain 
       wildcard characters.
       .LI "\fIattribute-name\fR"
     ! The name of a particular attribute (see below)
       .LI "\fIattribute-value\fR"
       The value of a particular attribute.
       .wH "<endargdeflist>"
       .LE
       .SH "DESCRIPTION"
     --- 55,65 ----
       .VL
       .LI "\fIobject-name\fR"
       The full name of a specific object entry.  The last simple name can contain 
       wildcard characters.
       .LI "\fIattribute-name\fR"
     ! The name of a particular attribute (see below).
       .LI "\fIattribute-value\fR"
       The value of a particular attribute.
       .wH "<endargdeflist>"
       .LE
       .SH "DESCRIPTION"
 
Related-file::Added 950203 by lconrad:: /build/hiosfm/RCS/dce/doc/admin.rf/man8cds/./cdscp_show_directory.8cds,v 7.4
 /build/hiosfm/RCS/dce/doc/admin.rf/man8cds/./cdscp_show_directory.8cds,v 7.4
 lconrad 1995/02/03 16:24:57 +3 -3
 Reason:  OSDqa10211 Some of the cdscp_*.8 man pages have punctuation omissions.
 Added one period (.). Rest of manpage is punctuated correctly
 
     *** /tmp/ci.10444..cdscp_show_directory.8cds.10478.1	Fri Feb  3 11:25:00 1995
     --- /tmp/cdscp_show_directory.8cds.10478.2	Fri Feb  3 11:25:00 1995
     ***************
     *** 56,66 ****
       .VL
       .LI "\fIdirectory-name\fR"
       The full name of a specific directory.  The last simple name can contain 
       wildcard characters.
       .LI "\fIattribute-name\fR"
     ! The name of a particular attribute (see below)
       .LI "\fIattribute-value\fR"
       The value of a particular attribute.
       .LE
       .wH "<endargdeflist>"
       .SH "DESCRIPTION"
     --- 56,66 ----
       .VL
       .LI "\fIdirectory-name\fR"
       The full name of a specific directory.  The last simple name can contain 
       wildcard characters.
       .LI "\fIattribute-name\fR"
     ! The name of a particular attribute (see below).
       .LI "\fIattribute-value\fR"
       The value of a particular attribute.
       .LE
       .wH "<endargdeflist>"
       .SH "DESCRIPTION"
 
Related-file::Added 950203 by lconrad:: /build/hiosfm/RCS/dce/doc/admin.rf/man8cds/./cdscp_show_child.8cds,v 7.4
 /build/hiosfm/RCS/dce/doc/admin.rf/man8cds/./cdscp_show_child.8cds,v 7.4
 lconrad 1995/02/03 16:28:03 +3 -3
 Reason:  OSDqa10211 Some of the cdscp_*.8 man pages have punctuation omissions.
 Added one period (.). Rest of manpage is punctuated correctly.
 
     *** /tmp/ci.10543..cdscp_show_child.8cds.10574.1	Fri Feb  3 11:28:05 1995
     --- /tmp/cdscp_show_child.8cds.10574.2	Fri Feb  3 11:28:05 1995
     ***************
     *** 56,66 ****
       .VL
       .LI "\fIchild-name\fR"
       The full name of a specific child pointer.  The last simple name can contain 
       wildcard characters.
       .LI "\fIattribute-name\fR"
     ! The name of an attribute (see below)
       .LI "\fIattribute-value\fR"
       The value of a particular attribute.
       .wH "<endargdeflist>"
       .LE
       .SH "DESCRIPTION"
     --- 56,66 ----
       .VL
       .LI "\fIchild-name\fR"
       The full name of a specific child pointer.  The last simple name can contain 
       wildcard characters.
       .LI "\fIattribute-name\fR"
     ! The name of an attribute (see below).
       .LI "\fIattribute-value\fR"
       The value of a particular attribute.
       .wH "<endargdeflist>"
       .LE
       .SH "DESCRIPTION"
 
Related-file::Added 950203 by lconrad:: /build/hiosfm/RCS/dce/doc/admin.rf/man8cds/./cdscp_delete_directory.8cds,v 7.4
 /build/hiosfm/RCS/dce/doc/admin.rf/man8cds/./cdscp_delete_directory.8cds,v 7.4
 lconrad 1995/02/03 16:31:29 +3 -3
 Reason:  OSDqa10211 Some of the cdscp_*.8 man pages have punctuation omissions.
 Removed one period (.). The rest of the manpage is punctuated correctly.
 
     *** /tmp/ci.10655..cdscp_delete_directory.8cds.10686.1	Fri Feb  3 11:31:31 1995
     --- /tmp/cdscp_delete_directory.8cds.10686.2	Fri Feb  3 11:31:32 1995
     ***************
     *** 50,60 ****
       \fBcdscp delete directory\fR \fIdirectory-name\fR
       .wH "<endformat>"
       .SH "ARGUMENTS"
       .VL
       .LI "\fIdirectory-name\fR"
     ! The full name of the directory.
       .wH "<endargdeflist>"
       .LE
       .SH "DESCRIPTION"
       .PP
       The \fBdelete directory\fR command deletes a directory.  The directory cannot 
     --- 50,60 ----
       \fBcdscp delete directory\fR \fIdirectory-name\fR
       .wH "<endformat>"
       .SH "ARGUMENTS"
       .VL
       .LI "\fIdirectory-name\fR"
     ! The full name of the directory
       .wH "<endargdeflist>"
       .LE
       .SH "DESCRIPTION"
       .PP
       The \fBdelete directory\fR command deletes a directory.  The directory cannot 
 
Related-file::Added 950203 by lconrad:: /build/hiosfm/RCS/dce/doc/admin.rf/man8cds/./cdscp_create_directory.8cds,v 7.4
 /build/hiosfm/RCS/dce/doc/admin.rf/man8cds/./cdscp_create_directory.8cds,v 7.4
 lconrad 1995/02/03 16:35:59 +3 -7
 Reason:  OSDqa10211 Some of the cdscp_*.8 man pages have punctuation omissions.
 Removed one period (.) and change bars. The rest of the manpage is punctuated correctly.
 
     *** /tmp/ci.10754..cdscp_create_directory.8cds.10788.1	Fri Feb  3 11:36:01 1995
     --- /tmp/cdscp_create_directory.8cds.10788.2	Fri Feb  3 11:36:01 1995
     ***************
     *** 52,62 ****
       .SH "ARGUMENTS"
       .VL
       .LI "\fIdirectory-name\fR"
       The full name of the directory
       .LI "\fIclearinghouse-name\fR"
     ! The name of the clearinghouse in which you create the directory.
       .wH "<endargdeflist>"
       .LE
       .SH "DESCRIPTION"
       .PP
       The \fBcreate directory\fR command creates a directory with the
     --- 52,62 ----
       .SH "ARGUMENTS"
       .VL
       .LI "\fIdirectory-name\fR"
       The full name of the directory
       .LI "\fIclearinghouse-name\fR"
     ! The name of the clearinghouse in which you create the directory
       .wH "<endargdeflist>"
       .LE
       .SH "DESCRIPTION"
       .PP
       The \fBcreate directory\fR command creates a directory with the
     ***************
     *** 63,74 ****
       name that you specify. If you do not specify a clearinghouse, CDS creates the
       master replica of the directory in the same clearinghouse as 
       the new directory's parent directory.  
       .SS "Privilege Required"
       .PP
     - .zA "defect,6779,R1.0.2,Incorrect permissions"
     - .zA "defect,8127,R1.0.2a,Improved wording and format"
       You must have the following permissions in order to create a directory:
       .ML
       .LI
       \fBread\fR and \fBinsert\fR permission to the parent directory;
       .LI
     --- 63,72 ----
     ***************
     *** 76,87 ****
       of the new directory is to be stored.
       .LE
       .P
       In addition, the server principal must have \fBread\fR and \fBinsert\fR
       permission to the parent directory.
     - .zZ "defect,8127,R1.0.2a,Improved wording and format"
     - .zZ "defect,6779,R1.0.2,Incorrect permissions"
       .SH "NOTES"
       .PP
       To ensure that all replicas are consistent, perform an immediate skulk of 
       the parent directory after issuing this command.
       .wH "<endosf_note>"
     --- 74,83 ----
 
Related-file::Added 950203 by lconrad:: /build/hiosfm/RCS/dce/doc/admin.rf/man8cds/./cdscp_create_directory.8cds,v 7.5
 /build/hiosfm/RCS/dce/doc/admin.rf/man8cds/./cdscp_create_directory.8cds,v 7.5
 lconrad 1995/02/03 16:39:42 +3 -3
 Reason:  OSDqa10211 Some of the cdscp_*.8 man pages have punctuation omissions.
 Removed one semicolon (;)
 
     *** /tmp/ci.10868..cdscp_create_directory.8cds.10900.1	Fri Feb  3 11:39:45 1995
     --- /tmp/cdscp_create_directory.8cds.10900.2	Fri Feb  3 11:39:45 1995
     ***************
     *** 66,76 ****
       .SS "Privilege Required"
       .PP
       You must have the following permissions in order to create a directory:
       .ML
       .LI
     ! \fBread\fR and \fBinsert\fR permission to the parent directory;
       .LI
       \fBwrite\fR permission to the clearinghouse in which the master replica
       of the new directory is to be stored.
       .LE
       .P
     --- 66,76 ----
       .SS "Privilege Required"
       .PP
       You must have the following permissions in order to create a directory:
       .ML
       .LI
     ! \fBread\fR and \fBinsert\fR permission to the parent directory
       .LI
       \fBwrite\fR permission to the clearinghouse in which the master replica
       of the new directory is to be stored.
       .LE
       .P
 
Related-file::Added 950203 by lconrad:: Corrected in documentation
 Make minor changes as indicated in previous enclosures to the
 following manpages:
 
 	  cdscp_show_object.8cds 
 	  cdscp_show_child.8cds 
 	  cdscp_show_directory.8cds 
 	  cdscp_create_directory.8cds 
 	  cdscp_delete_directory.8cds 
 
 
 The punctuation in the cdscp_show_replica.8cds was correct.
 
 
     l.c.

[5/17/96 public]

Assigned to Digital, though I assume this CR should now be
cancelled, since I don't think we're supporting the old
command interface documentation anymore.



CR Number                     : 12793
Defect or Enhancement?        : def
CR in Code, Doc, or Test?     : doc
Inter-dependent CRs           : 
Project Name                  : dce
H/W Ref Platform              : all
S/W Ref Platform              : all
Component Name                : cds
Subcomponent Name             : command_ref
Short Description             : cdsadv man page uses both rpcd and cdsadv in same example
Reported Date                 : 2/9/95
Found in Baseline             : 1.1
Found Date                    : 2/9/95
Severity                      : C
Priority                      : 2
Status                        : open
Duplicate Of                  : 
Fix By Baseline               : 1.2.2
Fixed In Baseline             : 
Affected File(s)              : 
Sensitivity                   : public

[2/9/95 public]

                          DCE Problem Report
                  =================================


Submitter Information 
----------------------

Submitter Name:           lconrad
Organization:             Hitachi Computer Products (America), Inc. 
Email Address:            osd.dce@hi.com lconrad@hi.com 
Phone:                    617-890-0444 
DCE License Number:       1616-MDCE-92
Licensee's Defect Number: OSDqa10161


Hardware/Software Configuration
--------------------------------

Offering and Version:   DCER1.0 
Component (Module):      
Client Hardware:        see below 
Client Software:        see below 
Server Hardware:        see below 
Server Software:        see below 
Compiler:               n/a

Problem Description
--------------------

Severity Level: Severe

Date of First Occurrence: 12/13/94

One Line Description:
   OSDqa10161 cdsadv man page uses both rpcd and cdsadv in same example

Full Description:

Related-file::Modified 941213 by julie:: Problem
 DESCRIPTION:
 The cdsadv(8cds) man page has an example that at first refers to the rpcd in
 release 3 and then to cdsadv in release 4. Either the rpcd information is
 superfluous or, if it is necessary, perhaps the user should be informed of
 that need.
 
 REPRODUCIBLE: Yes
 
 TEST SOFTWARE DESCRIPTION: man page review
 % man cdsadv.8
 
 cdsadv(8cds)           Hitachi DCE/Base-M            cdsadv(8cds)
 
 NAME
      cdsadv - Starts the CDS advertisement and solicitation dae-
      mon
 
 SYNOPSIS
      cdsadv [-d] [-e\*] [-s] [-c] [-v]
 
 				.
 				.
 				.
 
 EXAMPLE
      To restart a clerk, follow these steps:
 
       1.  Log in to the clerk system as superuser (root).
 
       2.  Log in to DCE as the machine principal of the local
           host. Enter the principal name in the format
           hosts/hostname/self as shown in the following example
           command for a host named orion whose password is smith:
           # dce_login hosts/orion/self smith
 
       3.  Enter the following command to see if the rpcd process
           is already running:
           # ps
 
           If the rpcd process appears on the list of active
           processes, proceed to release 4.  If the rpcd process does
           not appear on the list of active processes, enter the
           following command to start the process:
           # rpcd
 
 NOTE: This is the cdsadv man page, is this release necessary? If so, perhaps
       a brief explanation to the user would tie it together for clarity.
 
       4.  Enter the following command to start the cdsadv pro-
           cess:
 
           # cdsadv
 
 
 
 DESCRIPTION OF HARDWARE WHERE BUG OCCURRED: Hitachi Mainframe VM - sybil
 
 DESCRIPTION OF WHERE TEST SUCCESSFULLY RAN: n/a
Related-file::Added 950203 by lconrad:: /build/hiosfm/RCS/dce/doc/admin.rf/man8cds/./cdsadv.8cds,v 7.6
 /build/hiosfm/RCS/dce/doc/admin.rf/man8cds/./cdsadv.8cds,v 7.6
 lconrad 1995/02/03 16:59:47 +5 -4
 Reason:  OSDqa10161 cdsadv man page uses both rpcd and cdsadv in same example
 Corrected instructions in example
 
     *** /tmp/ci.11041..cdsadv.8cds.11072.1	Fri Feb  3 11:59:50 1995
     --- /tmp/cdsadv.8cds.11072.2	Fri Feb  3 11:59:50 1995
     ***************
     *** 108,119 ****
       whose password is \fBsmith\fR:
       .iS
       \f(CW# \fBdce_login hosts/orion/self smith
       .iE
       .LI
     ! Enter the following command to see if the \fBrpcd\fR process is already
     ! running:
       .iS
       \f(CW# \fBps
       .iE
       .PP
       If the \fBrpcd\fR process appears on the list of active processes,
     --- 108,120 ----
       whose password is \fBsmith\fR:
       .iS
       \f(CW# \fBdce_login hosts/orion/self smith
       .iE
       .LI
     ! The \fBrpcd\fR process must be running before you can start the
     ! \fBcdsadv\fR. Enter the following command to verify that the
     ! \fBrpcd\fR process is running:
       .iS
       \f(CW# \fBps
       .iE
       .PP
       If the \fBrpcd\fR process appears on the list of active processes,
 
Related-file::Added 950203 by lconrad:: Corrected in documentation
 
 	Added the following text to the example:
 
 	The rpcd process must be running before you can start the
 	cdsadv. Enter the following command to verify that the rpcd
 	process is running:

[5/17/96 public]

I have no idea whether this CR is valid anymore. It escaped notice
up to now because of an unusual sub-component value. Anyway, I'm
assigning it to Digital.



CR Number                     : 12789
Defect or Enhancement?        : enh
CR in Code, Doc, or Test?     : doc
Inter-dependent CRs           : 
Project Name                  : dce
H/W Ref Platform              : all
S/W Ref Platform              : all
Component Name                : cds
Subcomponent Name             : command_ref
Short Description             : The cds_attributes file does
not contain the sample attribute names
Reported Date                 : 1/31/95
Found in Baseline             : 1.1
Found Date                    : 1/31/95
Severity                      : D
Priority                      : 3
Status                        : open
Duplicate Of                  : 
Fix By Baseline               : 1.2
Fixed In Baseline             : 
Affected File(s)              : 
Sensitivity                   : public

[1/31/95 public]

Customer reported that the following man pages for cdscp:

        cdscp_add_directory(8cds)
        cdscp_add_object(8cds)
        cdscp_remove_directory(8cds)
        cdscp_remove_object(8cds)
        cdscp_set_object(8cds)

in the example section, tell the user to create/set/remove an attribute
that has notbeen created in the cds_attributes file:

"The cdscp_add_directory(8cds) man page suggests that the user try to use
 the "myname" attribute name, but the cds_attributes file in
 /opt/dcelocal/etc does not contain that entry." etc.

To me, the man page is clear enough to tell the user to verify that the
specified attribute is in the cds_attributes file before doing the example.
But the cutomer insists that the man pages have to say that if the
attribute is not in the cds_attributes file, one then should add the line.
I don't see the need, but since the customer insists on it, I will file
this reuqest to let whoever fixing this to decide what to do.

[7/5/95 public]

Assigned this to Digital for DCE 1.2, though perhaps the
right thing is to cancel this bug, since the DCE command
program manpages are obsolescent.



CR Number                     : 12781
Defect or Enhancement?        : enh
CR in Code, Doc, or Test?     : doc
Inter-dependent CRs           : 
Project Name                  : dce
H/W Ref Platform              : all
S/W Ref Platform              : all
Component Name                : cds
Subcomponent Name             : command_ref
Short Description             : add description to cdsbrowser
that it takes standard X options
Reported Date                 : 1/26/95
Found in Baseline             : 1.1
Found Date                    : 1/26/95
Severity                      : E
Priority                      : 4
Status                        : open
Duplicate Of                  : 
Fix By Baseline               : 1.2
Fixed In Baseline             : 
Affected File(s)              : 
Sensitivity                   : public

[1/26/95 public]

cdsbrowser is an X/Motif application program. As such, it takes the
standard X options at its command level, like "-d DISPLAY", "-g GEOMETRY",
etc.

Please add a line to describe this.

[7/5/95 public]

Assigned to Digital for DCE 1.2.



CR Number                     : 12758
Defect or Enhancement?        : def
CR in Code, Doc, or Test?     : doc
Inter-dependent CRs           : 4401
Project Name                  : dce
H/W Ref Platform              : all
S/W Ref Platform              : all
Component Name                : cds
Subcomponent Name             : command_ref
Short Description             : Document '!' as a comment chanracter
Reported Date                 : 12/5/94
Found in Baseline             : 1.1
Found Date                    : 12/5/94
Severity                      : C
Priority                      : 2
Status                        : open
Duplicate Of                  : 
Fix By Baseline               : 1.2.2
Fixed In Baseline             : 
Affected File(s)              : 
Sensitivity                   : public

[12/5/94 public]

OT 4401 indicates that both '#' and '!' are cdscp comment characters. It was
turned into a DOC bug, but man page for 'cdscp' only indicates that '#' is a
comment character, nothing about '!'.

Maybe it was due to the saying from OT 4401 that "The '!' is also a comment, 
but should be deprecated." that the doc fix did not include it. What is more,
for 1.0.2 and 1.0.3, you could use '!' as part of a cds name.

DCE 1.1 seems to do the right thing by changing '!' as a comment now. With 1.1
cdscp, both '#' and '!' act as comment. One can use dcecp to create a cds name
with '#' and '!' in it.

So, I think we need a clearer doc in cdscp man page about what are the comment 
characters. Also I think we need to say, in Appendix A of Admin Guide, the 
special characters in cdscp commands.

[5/17/96 public]

Assigned to Digital, though my understanding is that the documentation
for the old command interfaces is not being supported anymore, so per-
haps this CR should be cancelled.



CR Number                     : 12744
Defect or Enhancement?        : def
CR in Code, Doc, or Test?     : code
Inter-dependent CRs           : 
Project Name                  : dce
H/W Ref Platform              : all
S/W Ref Platform              : all
Component Name                : cds
Subcomponent Name             : server
Short Description             : delegation entries
not converted to foreign in change_default()
Reported Date                 : 11/9/94
Found in Baseline             : 1.1
Found Date                    : 11/9/94
Severity                      : C
Priority                      : 2
Status                        : open
Duplicate Of                  : 
Fix By Baseline               : 1.1
Fixed In Baseline             : 
Affected File(s)              : directory/cds/server/back_skulk.c
Diff supplied by              : provider
Diff release                  : 1.2.2
Sensitivity                   : public

[11/9/94 public]

Not much else to say.  Delegation entries are overlooked in
change_default() in back_skulk.c when converting an ACL to a
new realm, they should be converted to foreign delegate but 
they're left alone.

[12/6/96 public]

Here are the diffs with

< : R1.2.2b4 version
> : fixs

Also, there is another fix included which is acl-related involving calling
cds_dacl.c:dacl_lookup_from_master().  See OT 13427 for diffs on cds_dacl.c.

back_skulk.c
------------
9a10,13
>  * Fix for OT 12744 - deal with delegation entries in change_default().
>  *
>  * Also, when we skulk a new directory, always go to the master copy of the
>  * parent directory to inherit the acls.
321,322c325
<     for (i=0; i<from_p->num_entries; ++i)
<         {
---
>     for (i=0; i<from_p->num_entries; ++i) {
324,352c327,352
<         switch (entry_p->entry_info.entry_type)
<             {
<             case sec_acl_e_type_user:
<                 entry_p->entry_info.entry_type = sec_acl_e_type_foreign_user;
<                 entry_p->entry_info.tagged_union.foreign_id.id =
<                     entry_p->entry_info.tagged_union.id;
<                 entry_p->entry_info.tagged_union.foreign_id.realm =
<                     from_p->default_realm;
<                 break;
<             case sec_acl_e_type_group:
<                 entry_p->entry_info.entry_type = sec_acl_e_type_foreign_group;
<                 entry_p->entry_info.tagged_union.foreign_id.id =
<                     entry_p->entry_info.tagged_union.id;
<                 entry_p->entry_info.tagged_union.foreign_id.realm =
<                     from_p->default_realm;
<                 break;
<             case sec_acl_e_type_other_obj:
<                 entry_p->entry_info.entry_type = sec_acl_e_type_foreign_other;
<                 entry_p->entry_info.tagged_union.foreign_id.id =
<                     from_p->default_realm;
<                 break;
<             case sec_acl_e_type_foreign_other:
<                 if (uuid_equal(&entry_p->entry_info.tagged_union.id.uuid,
<                         &to_p->default_realm.uuid, &status))
<                     entry_p->entry_info.entry_type = sec_acl_e_type_other_obj;
<                 break;
<             case sec_acl_e_type_foreign_user:
<                 if (uuid_equal(
< &entry_p->entry_info.tagged_union.foreign_id.realm.uuid,
---
>         switch (entry_p->entry_info.entry_type) {
> 
>         case sec_acl_e_type_user:
>           entry_p->entry_info.entry_type = sec_acl_e_type_foreign_user;
>           entry_p->entry_info.tagged_union.foreign_id.id =
>             entry_p->entry_info.tagged_union.id;
>           entry_p->entry_info.tagged_union.foreign_id.realm =
>             from_p->default_realm;
>           break;
> 
>         case sec_acl_e_type_group:
>           entry_p->entry_info.entry_type = sec_acl_e_type_foreign_group;
>           entry_p->entry_info.tagged_union.foreign_id.id =
>             entry_p->entry_info.tagged_union.id;
>           entry_p->entry_info.tagged_union.foreign_id.realm =
>             from_p->default_realm;
>           break;
> 
>         case sec_acl_e_type_other_obj:
>           entry_p->entry_info.entry_type = sec_acl_e_type_foreign_other;
>           entry_p->entry_info.tagged_union.foreign_id.id =
>             from_p->default_realm;
>           break;
> 
>         case sec_acl_e_type_foreign_user:
>           if (uuid_equal(&entry_p->entry_info.tagged_union.foreign_id.realm.uuid,
354,362c354,362
<                     {
<                     entry_p->entry_info.entry_type = sec_acl_e_type_user;
<                     entry_p->entry_info.tagged_union.id =
<                         entry_p->entry_info.tagged_union.foreign_id.id;
<                     }
<                 break;
<             case sec_acl_e_type_foreign_group:
<                 if (uuid_equal(
<                  &entry_p->entry_info.tagged_union.foreign_id.realm.uuid,
---
>             {
>                 entry_p->entry_info.entry_type = sec_acl_e_type_user;
>                 entry_p->entry_info.tagged_union.id =
>                   entry_p->entry_info.tagged_union.foreign_id.id;
>             }
>           break;
> 
>         case sec_acl_e_type_foreign_group:
>           if (uuid_equal(&entry_p->entry_info.tagged_union.foreign_id.realm.uuid,
364,379c364,444
<                     {
<                     entry_p->entry_info.entry_type = sec_acl_e_type_group;
<                     entry_p->entry_info.tagged_union.id =
<                         entry_p->entry_info.tagged_union.foreign_id.id;
<                     }
<                 break;
<             case sec_acl_e_type_user_obj:
<             case sec_acl_e_type_group_obj:
<             case sec_acl_e_type_extended:
<             case sec_acl_e_type_unauthenticated:
<             case sec_acl_e_type_any_other:
<             case sec_acl_e_type_mask_obj:
<             default:
<                 break;
<             } /* end switch */
<         } /* End looping through acl entries */
---
>             {
>                 entry_p->entry_info.entry_type = sec_acl_e_type_group;
>                 entry_p->entry_info.tagged_union.id =
>                   entry_p->entry_info.tagged_union.foreign_id.id;
>             }
>           break;
> 
>         case sec_acl_e_type_foreign_other:
>           if (uuid_equal(&entry_p->entry_info.tagged_union.id.uuid,
>                          &to_p->default_realm.uuid, &status))
>             entry_p->entry_info.entry_type = sec_acl_e_type_other_obj;
>           break;
> 
>         case sec_acl_e_type_user_deleg:
>           entry_p->entry_info.entry_type = sec_acl_e_type_for_user_deleg;
>           entry_p->entry_info.tagged_union.foreign_id.id =
>             entry_p->entry_info.tagged_union.id;
>           entry_p->entry_info.tagged_union.foreign_id.realm =
>             from_p->default_realm;
>           break;
> 
>         case sec_acl_e_type_group_deleg:
>           entry_p->entry_info.entry_type = sec_acl_e_type_for_group_deleg;
>           entry_p->entry_info.tagged_union.foreign_id.id =
>             entry_p->entry_info.tagged_union.id;
>           entry_p->entry_info.tagged_union.foreign_id.realm =
>             from_p->default_realm;
>           break;
> 
>         case sec_acl_e_type_other_obj_deleg:
>           entry_p->entry_info.entry_type = sec_acl_e_type_for_other_deleg;
>           entry_p->entry_info.tagged_union.foreign_id.id =
>             entry_p->entry_info.tagged_union.id;
>           entry_p->entry_info.tagged_union.foreign_id.realm =
>             from_p->default_realm;
>           break;
> 
>         case sec_acl_e_type_for_user_deleg:
>           if (uuid_equal(&entry_p->entry_info.tagged_union.foreign_id.realm.uuid,
>                            &to_p->default_realm.uuid, &status))
>             {
>                 entry_p->entry_info.entry_type = sec_acl_e_type_user_deleg;
>                 entry_p->entry_info.tagged_union.id =
>                   entry_p->entry_info.tagged_union.foreign_id.id;
>             }
>           break;
> 
>         case sec_acl_e_type_for_group_deleg:
>           if (uuid_equal(&entry_p->entry_info.tagged_union.foreign_id.realm.uuid,
>                            &to_p->default_realm.uuid, &status))
>             {
>                 entry_p->entry_info.entry_type = sec_acl_e_type_group_deleg;
>                 entry_p->entry_info.tagged_union.id =
>                   entry_p->entry_info.tagged_union.foreign_id.id;
>             }
>           break;
> 
>         case sec_acl_e_type_for_other_deleg:
>           if (uuid_equal(&entry_p->entry_info.tagged_union.foreign_id.realm.uuid,
>                            &to_p->default_realm.uuid, &status))
>             {
>                 entry_p->entry_info.entry_type = sec_acl_e_type_other_obj_deleg;
>                 entry_p->entry_info.tagged_union.id =
>                   entry_p->entry_info.tagged_union.foreign_id.id;
>             }
>           break;
>           
>         case sec_acl_e_type_user_obj:
>         case sec_acl_e_type_group_obj:
>         case sec_acl_e_type_extended:
>         case sec_acl_e_type_unauthenticated:
>         case sec_acl_e_type_any_other:
>         case sec_acl_e_type_mask_obj:
>         case sec_acl_e_type_user_obj_deleg:
>         case sec_acl_e_type_group_obj_deleg:
>         case sec_acl_e_type_any_other_deleg:
>         default:
>           break;
>           
>       } /* end switch */
>     } /* End looping through acl entries */
433,434c498,499
<         status = dacl_lookup(parent_p, &flatcontainer_p, &containerlen,
<                            sec_acl_type_default_container);
---
>         status = dacl_lookup_from_master(parent_p, &flatcontainer_p, &containerlen,
>                                        sec_acl_type_default_container);
534,535c599,600
<         status = dacl_lookup(parent_p, &flatobject_p, &objectlen,
<                            sec_acl_type_default_object);
---
>         status = dacl_lookup_from_master(parent_p, &flatobject_p, &objectlen,
>                                        sec_acl_type_default_object);



CR Number                     : 12743
Defect or Enhancement?        : def
CR in Code, Doc, or Test?     : code
Inter-dependent CRs           : 
Project Name                  : dce
H/W Ref Platform              : all
S/W Ref Platform              : all
Component Name                : cds
Subcomponent Name             : library
Short Description             : there's a potential for a client
application to hang during a call to cds.
Reported Date                 : 11/9/94
Found in Baseline             : 1.1
Found Date                    : 11/9/94
Severity                      : C
Priority                      : 2
Status                        : open
Duplicate Of                  : 
Fix By Baseline               : 1.1
Fixed In Baseline             : 
Affected File(s)              : 
Sensitivity                   : public

[11/9/94 public]
In cds_send() in dnssend.c, the following code should be 
enveloped by a DNS_LOCK/DNS_END_LOCK :

	/* finished sending request */
	cds_writer_p = NULL;
	pthread_cond_signal(&cds_no_writer);



CR Number                     : 12741
Defect or Enhancement?        : def
CR in Code, Doc, or Test?     : code
Inter-dependent CRs           : 
Project Name                  : dce
H/W Ref Platform              : pmax
S/W Ref Platform              : hpux
Component Name                : cds
Subcomponent Name             : 
Short Description             : name length assertion failure when starting.
Reported Date                 : 11/2/94
Found in Baseline             : 1.1b24
Found Date                    : 11/2/94
Severity                      : C
Priority                      : 2
Status                        : open
Duplicate Of                  : 
Fix By Baseline               : 
Fixed In Baseline             : 
Affected File(s)              : 
Sensitivity                   : public

[11/2/94 public]

When starting up a secd, cdsd, fldb server with rc.dce, I sometimes get:
1994-11-02-14:52:26.122-05:00I----- cdsclerk(1395) FATAL cds adver dceassert.c 63 0x401949b8
Assertion "nameLen <= a2" failed in "/project/dce/build/unintegrated-snap/src/directory/cds/library/deb_ascii.c"file> line <698

Also:
rm /opt/dcelocal/var/adm/directory/cds/cds_cache.*
has been added to rc.dce

Setting debug level to 7 for cds in the routing file seems to cure this
problem.



CR Number                     : 12712
Defect or Enhancement?        : def
CR in Code, Doc, or Test?     : code
Inter-dependent CRs           : 
Project Name                  : dce
H/W Ref Platform              : all
S/W Ref Platform              : all
Component Name                : cds
Subcomponent Name             : 
Short Description             : Cds takes performance hit on serviceavility
Reported Date                 : 10/24/94
Found in Baseline             : 1.1b10
Found Date                    : 10/24/94
Severity                      : C
Priority                      : 2
Status                        : open
Duplicate Of                  : 
Fix By Baseline               : 1.2
Fixed In Baseline             : 
Affected File(s)              : 
Diff supplied by              : 
Diff release                  : 
Sensitivity                   : public

[10/24/94 public]

Cds takes performance hit on serviceability.

See the enclosed three E-mails from hsiao and jd. Hsiao reported this 
performance bug in the first two and, in the last one, jd gave some 
clue as to how to fix it.

++++++++++++++++++++++++

::::::::::::::
inbox/1159
::::::::::::::
From hsiao@osf.org Thu Jul 14 15:44:42 1994
Received: from mailbox.osf.org (mailbox.osf.org [130.105.1.8]) by postman.osf.org (8.6.9/8.6.x) with ESMTP
	id PAA08792; Thu, 14 Jul 1994 15:43:45 -0400
Received: from postman.osf.org (postman [130.105.1.152]) by mailbox.osf.org (8.6.5/8.6.x) with ESMTP
	id PAA06906 for <dce-team@osf.org>; Thu, 14 Jul 1994 15:43:41 -0400
From: hsiao@osf.org
Received: from toaster.osf.org (toaster.osf.org [130.105.5.104]) by postman.osf.org (8.6.9/8.6.x) with SMTP
	id PAA08756; Thu, 14 Jul 1994 15:43:36 -0400
Message-Id: <199407141943.PAA08756@postman.osf.org>
X-Authentication-Warning: postman.osf.org: Host toaster.osf.org didn't use HELO protocol
To: jd@osf.org, rsalz@osf.org, hathaway@osf.org, blazin@osf.org
cc: dce-team@osf.org
Subject: Cdsd takes a performance hit on serviceability
Date: Thu, 14 Jul 94 15:42:15 EDT

Summary

1.0	The following cdscp test has jumped from ~20 seconds
	to ~35 seconds from dce 1.0.3 to dce 1.1. Cdsd and
	cdsclerk increased their CPU costs from 9 and 10 seconds
	to 18 and 16 seconds respectively.

2.0	Further investigations with user profiling of cdsd 
	indicated that the big increase in it's CPU cost 
	from dce1.0.3 to dce1.1 was mainly due to overhead in 
	serviceability.  

	For example, the two cds serviceability functions, 
	deb_ascii_ObjUID and deb_ascii_AttributeName with their 
	decendants take about 25% of the cdsd's CPU time.

3.0	We'll re-run the same test with no serviceability in cds.	

Test

	This cdsp test is to stress the server and the clerk:

		cdscp >
			set cdscp conf = high
			show dir /.: (10 times)
			q

Platform --- HP

DCE --- dce1.0.3 and dce1.1 bl-10

Cell --- Single node cell
	 

::::::::::::::
inbox/1192
::::::::::::::
From hsiao@osf.org Fri Jul 15 10:02:58 1994
Received: from toaster.osf.org (toaster.osf.org [130.105.5.104]) by postman.osf.org (8.6.9/8.6.x) with SMTP
	id KAA00224; Fri, 15 Jul 1994 10:02:57 -0400
Message-Id: <199407151402.KAA00224@postman.osf.org>
X-Authentication-Warning: postman.osf.org: Host toaster.osf.org didn't use HELO protocol
To: jd, hathaway, blazin
cc: hsiao
Subject: RE: Cdsd takes a performance hit on serviceability
Date: Fri, 15 Jul 94 10:01:41 EDT
From: hsiao@osf.org

>Summary
>
>1.0     The following cdscp test has jumped from ~20 seconds
>        to ~35 seconds from dce 1.0.3 to dce 1.1. Cdsd and
>        cdsclerk increased their CPU costs from 9 and 10 seconds
>        to 18 and 16 seconds respectively.
>
>2.0     Further investigations with user profiling of cdsd 
>        indicated that the big increase in it's CPU cost 
>        from dce1.0.3 to dce1.1 was mainly due to overhead in 
>        serviceability.  
>
>        For example, the two cds serviceability functions, 
>        deb_ascii_ObjUID and deb_ascii_AttributeName with their 
>        decendants take about 25% of the cdsd's CPU time.
>
>3.0     We'll re-run the same test with no serviceability in cds.
>
>

	I built src from scatch with DCE_DEBUG undefined in dce.h. With
	DCE_DEBUG undefined cds can be built with no serviceabilty. But,
	the build failed on cdsd and I'll file an OT against cds --- 
	fileBuf undefined in cds/server/ db_compression.c.

	The clerk was successfully built and I ran the cdscp test with
	two versions of cdsclerk --- DEBUG on and off --- and the
	DEBUG-off version used ~10 seconds of HP CPU verus ~16 seconds for
	the DEBUG-on version.


::::::::::::::
inbox/5479
::::::::::::::
From jd@osf.org Mon Oct 24 12:43:56 1994
Received: from vanilla.qadce.osf.org.osf.org (vanilla.osf.org [130.105.5.44]) by postman.osf.org (8.6.9/8.6.x) with SMTP
	id MAA25062; Mon, 24 Oct 1994 12:43:42 -0400
Received: by vanilla.qadce.osf.org.osf.org (1.37.109.4/4.7) id AA07271; Mon, 24 Oct 94 12:42:10 -0400
Date: Mon, 24 Oct 94 12:42:10 -0400
From: jd@osf.org
Message-Id: <9410241642.AA07271@vanilla.qadce.osf.org.osf.org>
To: jd@osf.org
Cc: dce-team, dce-tech, hsiao@osf.org, xander@austin.ibm.com
Subject: Re: Cdsd takes a performance hit on serviceability 
In-Reply-To: <9410241625.AA07170@vanilla.qadce.osf.org.osf.org>
References: <199410241553.LAA22225@postman.osf.org>
	<9410212203.AA24290@yucca.austin.ibm.com>
	<9410241625.AA07170@vanilla.qadce.osf.org.osf.org>



I thought there already was a macro that allowed you to check that the
debug level is at least at a certain level for a component or subcomponent
prior to invoking the call that takes the hit. There is and its called 
DCE_SVC_DEBUG_ATLEAST. Its in dce/utisl/svc/dce_svc.h. It probably wouldn't
take much to change all of the cds debug serviceability calls to make use of 
this macro. 

                        John



jd@osf.org writes:
 > 
 > 
 > Its not dynamic. Many of the debug servicability calls have calls in 
 > their argument lists that do internal data structure to ascii conversions.
 > Since the decision to print or not to print isn't made until after the
 > arguments are already called you get the overhead regardless of the debug
 > level turned on in the routing file. This only affects you if you have
 > build with CDS_DEBUG turned on which in turn deppends on DCE_DEBUG in dce.h.
 > One could of course surround the debug servicability calls themselves with
 > a macro which does a check on debug levels before looking at the call at 
 > all. The current code does not do this but vendors can certainly do it
 > if they are interested in shiping product with these servicability calls
 > compiled in.
 > 
 > 
 >                           John
 > 
 > 
 > hsiao@osf.org writes:
 >  > >Jean,
 >  > >
 >  > >Is there an OT opened against the performance of CDS with serviceability?  
 >  > >
 >  > >I do not know anything about this serviceability stuff, but I would hope 
 >  > >that it could be disabled dynamically, much like auditing on secure UNIX
 >  > >systems.  Maybe the workaround is as eaasy as that!
 >  > >
 >  > >Thanks,
 >  > >Xander
 >  > >
 >  > >-- 
 >  > > Alexander T. Fleming,    IBM Corporation,      PSP LAN Systems 
 >  > > 11400 Burnet Road,     Mailstop 9132,      Austin, Texas 78758
 >  > > Internet: xander@austin.ibm.com      Telephone: (512) 838-7914 
 >  > >
 >  > 
 >  > Alexander,
 >  > 
 >  > 	The overhead is always there without any CDS servieability
 >  > 	point turned on. The best thing we can do now is to compile with 
 >  > 	DCE_DEBUG off. I'll file an enhancement OT against it.
 >  > 
 >  > 	Thanks for reminding me.
 >  > 
 >  > Jean
 >  >



CR Number                     : 12697
Defect or Enhancement?        : def
CR in Code, Doc, or Test?     : code
Inter-dependent CRs           : 
Project Name                  : dce
H/W Ref Platform              : all
S/W Ref Platform              : all
Component Name                : cds
Subcomponent Name             : gdad
Short Description             : gdad doesn't unbind after X.500
name resolution
Reported Date                 : 10/21/94
Found in Baseline             : 1.1
Found Date                    : 10/21/94
Severity                      : C
Priority                      : 2
Status                        : open
Duplicate Of                  : 
Fix By Baseline               : 1.2
Fixed In Baseline             : 
Affected File(s)              : 
Diff supplied by              : 
Diff release                  : 
Sensitivity                   : public

[10/21/94 public]

David Truong @ HP reports:

---
I've just found a problem with GDA process (DCE 1.1).  Here is what I did:    
  1) I set up a single cell name hp.com on system A and also start GDA process.
  2) I set up a single cell name c=us/o=hp/ou=cupertino on system B.
  3) On system A I configured all CDS objects in GDS.               
  4) On system A I run command: "cdscp sho cell /.../c=us/o=hp/ou=cupertino"
     and cdscp sho dir /.../c=us/o=hp/ou=cupertino/subsys, all works fine.
  5) On system A I try to shutdown GDS by run command "gdssysadm -fd"
     and it tells me the GDS processes are still in used.
  6) I waited and waited then type command "gdsdirinfo", it shows:

#       PROCTYPE    PID    DIRID    IPCID    STATE
#
        Monitor     5530     -        5        -
        DUA-Cache   5534     -        1        -
        C-Stub      5536     -        2        -
        S-Stub      5538     1        11       -
        DSA         5540     1        31       -
        DSA         5543     1        31       -
        Dir-User    5352     -        31       R10

Process "Dir-User" never got released from "R10" state.

I think this is a bug in the GDA process.  When CDS request lookup to GDA, 
then GDA bind to XDS to look for CDS information stored in GDS and forget
to unbind when it's done.

When I manually kill 'gdad' process then it removes "Dir-User" from gdsdirinfo.
---

I have reproduced this at OSF.



CR Number                     : 12678
Defect or Enhancement?        : def
CR in Code, Doc, or Test?     : code
Inter-dependent CRs           : 
Project Name                  : dce
H/W Ref Platform              : all
S/W Ref Platform              : all
Component Name                : cds
Subcomponent Name             : 
Short Description             : sys_closembx() does not return a value.
Reported Date                 : 10/20/94
Found in Baseline             : 1.1b24
Found Date                    : 10/20/94
Severity                      : C
Priority                      : 3
Status                        : open
Duplicate Of                  : 
Fix By Baseline               : 1.1
Fixed In Baseline             : 
Affected File(s)              : cds/library/<platform>/cds_mbx.c
Diff supplied by              : 
Diff release                  : 
Sensitivity                   : public

[10/20/94 public]

sys_closembx() in cds/library/<platform>/cds_mbx.c does not return a value
yet there's a call in server/ta_adver.c that assigns the returned status to
a variable (that is not used). Either cast that call return to void (as it
is done for other calls to sys_closembx() in ta_adver.c) or have
sys_closembx() return a status or ...



CR Number                     : 12673
Defect or Enhancement?        : def
CR in Code, Doc, or Test?     : code
Inter-dependent CRs           : 
Project Name                  : dce
H/W Ref Platform              : all
S/W Ref Platform              : all
Component Name                : cds
Subcomponent Name             : control
Short Description             : type mismatch in visit_cds.c
Reported Date                 : 10/19/94
Found in Baseline             : 1.1
Found Date                    : 10/19/94
Severity                      : B
Priority                      : 2
Status                        : open
Duplicate Of                  : 
Fix By Baseline               : 1.1
Fixed In Baseline             : 
Affected File(s)              : visit_cds.c
Diff supplied by              : 
Diff release                  : 
Sensitivity                   : public

[10/19/94 public]

Here's the offending routine:

> /*
>  * Comparision routine for binary search off cds_attlist
>    */
> static int
> bs_cmp (
>     const void *arg1_p,
>     const void *arg2_p)
> {
>     const dns_opq_sname *lookingfor = arg1_p;
>     const attribute_descriptor_t *tableitem = arg2_p;
>     dns_opq_sname *p;
>     int code;
> 
>     /* Get name from table */
>     p = (dns_opq_sname *)tableitem->aname;
> 
>     /* compare names and return results */
>     code = dnsCmpSimple(lookingfor, p);
>     return(code);
> }

And a few necessary definitions.  From directory/cds/includes/dnsclerk_cds.h:

> #define dnsCmpSimple(a,b)               cdsCmpSimple(a,b)
> 
> #define dns_opq_sname_t cds_simple_name_t
> #define dns_opq_sname cds_simple_name_t

And from directory/cds/includes/cdsclerk.h:

> #define CDS_SNAME_MAX             257   /* Largest name */
> 
> typedef struct {
>         unsigned char   uc[CDS_SNAME_MAX];
> } cds_simple_name_t;
> 
> int 
> cdsCmpSimple (
>     cds_simple_name_t   *,
>     cds_simple_name_t   *);

dnsCmpSimple (a.k.a. cdsCmpSimple) expects to be passed two pointers to
variables of type dns_opq_sname (a.k.a. cds_simple_name_t).  Instead, as
the first argument it is being passed a pointer to a const variable of
type dns_opq_sname.  Most ANSI C compilers gripe about this (as they 
should), but compile it anyway; the compiler used by the customer
reporting this wouldn't compile it at all.  The simplest solution is to
cast the first argument ("lookingfor") as a non-const (dns_opq_sname *).

Here are the diffs:

*** visit_cds.c	Wed Oct 19 11:44:05 1994
--- visit_cds.c.fix	Wed Oct 19 17:22:23 1994
***************
*** 893,898 ****
      p = (dns_opq_sname *)tableitem->aname;
  
      /* compare names and return results */
!     code = dnsCmpSimple(lookingfor, p);
      return(code);
  }
--- 893,898 ----
      p = (dns_opq_sname *)tableitem->aname;
  
      /* compare names and return results */
!     code = dnsCmpSimple((dns_opq_sname *)lookingfor, p);
      return(code);
  }



CR Number                     : 12666
Defect or Enhancement?        : def
CR in Code, Doc, or Test?     : code
Inter-dependent CRs           : 
Project Name                  : dce
H/W Ref Platform              : i486
S/W Ref Platform              : osf1
Component Name                : cds
Subcomponent Name             : cell aliasing
Short Description             : cellalias does not work
Reported Date                 : 10/19/94
Found in Baseline             : 1.1
Found Date                    : 10/19/94
Severity                      : A
Priority                      : 1
Status                        : open
Duplicate Of                  : 
Fix By Baseline               : 1.2
Fixed In Baseline             : 
Affected File(s)              : 
Diff supplied by              : 
Diff release                  : 
Sensitivity                   : public

[10/19/94 public]

I foudn the problem with the latest build: BL 22.

I gave an A0 since I believe that this is supposed to work in 1.1. Adjust
accordingly if you wish. I hope someone can tell me that I did sth wrong.

I followed the example in the admin guide book about how to do
cell name aliasing and created an alias for the cell after I configured it
(it is on a 486, single machine cell):

/u0/opt/dcelocal  dcecp
dcecp> cellalias create /.../c=us/o=osf/ou=syseng/ou=down
dcecp> prin cat
/.../wang_11b22.cell.osf.org/nobody
/.../wang_11b22.cell.osf.org/root
/.../wang_11b22.cell.osf.org/daemon
/.../wang_11b22.cell.osf.org/sys
/.../wang_11b22.cell.osf.org/bin
/.../wang_11b22.cell.osf.org/uucp
/.../wang_11b22.cell.osf.org/who
/.../wang_11b22.cell.osf.org/mail
/.../wang_11b22.cell.osf.org/tcb
/.../wang_11b22.cell.osf.org/dce-ptgt
/.../wang_11b22.cell.osf.org/dce-rgy
/.../wang_11b22.cell.osf.org/cell_admin
/.../wang_11b22.cell.osf.org/krbtgt/wang_11b22.cell.osf.org
/.../wang_11b22.cell.osf.org/hosts/down/self
/.../wang_11b22.cell.osf.org/hosts/down/cds-server
/.../wang_11b22.cell.osf.org/pwd_strength
dcecp> cell show /.../wang_11b22.cell.osf.org
{secservers
 /.../wang_11b22.cell.osf.org/subsys/dce/sec/master}
{cdsservers 
 /.../wang_11b22.cell.osf.org/hosts/down}
{dtsservers 
 /.../wang_11b22.cell.osf.org/hosts/down}
{hosts
 /.../wang_11b22.cell.osf.org/hosts/down}
dcecp> cell show /.../c=us/o=osf/ou=syseng/ou=down
Error: Requested operation would result in lost connectivity to root directory
dcecp> exit

According to the admin guide, once "cellalias create " is done, among
other things, a new principal should be created. As can be seen
above, it is not there. Subsequent show cell comand still thinks that
I am trying to connect to a foreign cell.

The only thing that I can tell that did happen is that the alias was added
to the /opt/dcelcoal/dce_cf.db file and /opt/dcelcoal/etc/security/pe-site
file.

Oh, I was cell_admin and root.

Here is what the book says:

             Use a cellalias create operation to create a second
             name for your cell.  This operation creates a new cell
             principal in the registry service and performs a
             registry verify operation to ensure that all the
             replicas are up-to-date.  Next it creates a cell alias
             name in CDS by using the cdsalias object. Finally it
             performs a hostdata operation on each host in the cell,
             updating each dcelocal/dce_cf.db file and
             dcelocal/etc/security/pe_site file with the cell alias
             name. This last step can take a long time to complete
             in a cell with many hosts.

[10/19/94 public]
My guess is that you probably need the fix to CR 12585.  There was a bug
that there was a failure and state was cleaned up but not reported.  There
are also lots of other bugs already open against dcecp,cds, dced, whatever
that cell aliasing and hcells is currently broken and that we are trying to
fix as much as we can in the unintegrated tree.  It would be much more
helpful 36 hours before final bit freeze to ask before opening CR's.



CR Number                     : 12663
Defect or Enhancement?        : def
CR in Code, Doc, or Test?     : code
Inter-dependent CRs           : 
Project Name                  : dce
H/W Ref Platform              : all
S/W Ref Platform              : all
Component Name                : cds
Subcomponent Name             : cdsd
Short Description             : cdsd cores
Reported Date                 : 10/19/94
Found in Baseline             : 1.1b21
Found Date                    : 10/19/94
Severity                      : A
Priority                      : 0
Status                        : open
Duplicate Of                  : 
Fix By Baseline               : 1.2
Fixed In Baseline             : 
Affected File(s)              : 
Diff supplied by              : 
Diff release                  : 
Sensitivity                   : public

[10/19/94 public]
I'm running a 3 machine cell (HP sec and CDS master). All machines are
loaded with bl21.

Since yesterday afternoon, cdsd will not come up, it cores with the
following trace:

 0 cdsCountSimple@libdce + 0x00000010 (0x2e63656c, 0x402b2458, 0x1, 0)
 1 names_count + 0x0000001c (0x2e63656c, 0x404beb1c, 0, 0x7af70280)
 2 name_in_cell_test + 0x0000012c (0x4035b030, 0x402b2208, 0x402f7c8e, 0x1)
 3 walktree_assist + 0x00000050 (0x402b20a8, 0x342d3038, 0x2d626566, 0x31316364)
 4 lookup_dir + 0x000004b8 (0x402b20a8, 0x3, 0x3, 0x4001adb4)
 5 walktree + 0x00000668 (0x402b1328, 0x8, 0x4, 0x404beaa0)
 6 ta_read_att + 0x00000154 (0x402b1328, 0x404beaa0, 0x8, 0)
 7 cds_ReadAttribute + 0x000001ec (0x400f3350, 0x402ae878, 0x402ae808, 0x402af0ae)
 8 op21_ssr + 0x00000218 (0x400f3350, 0x400f1d88, 0x402ae51c, 0x401610f0)
 9 rpc__cn_call_executor@libdce + 0x000007c8 (0x400f1d88, 0, 0, 0)
10 cthread_call_executor@libdce + 0x000002d4 (0x400ba850, 0x7af3a2b0, 0x4004a350, 0x12)
11 cma__thread_base@libdce + 0x0000021c (0x4004a350, 0, 0, 0)
12 cma__thread_start1@libdce + 0x0000004c (0x4004a350, 0, 0, 0)
13 cma__thread_start0@libdce + 0x00000008 (0x4004a350, 0, 0, 0)
[last line repeats forever]

I turned on svc debugging to level 9 for server and library. The debug
file is in /afs/dce.osf.org/project/dce/osf/rousseau .

[10/20/94 public]
Happened again last night. Janet say a possible munged preferred name
in the debug log from yesterday's failure so its going to Roger and
I'm making it a 0.

[10/20/94 public]
It seems that the cdsalias tests are causing cdsd to die. When cdsd died 
last night I was albe to restart it, but it was gone again this morning. 
I wasn't running anything overnight.

I don't know if this is related (or even a problem), but...

When I do a:
dcecp> dir modify -add {CDS_UpgradeTo 4.0}
dcecp> dir synch /.:

When I do the dir synch, the window that I started cdsd in displays the
following:
1994-10-20-11:28:24.075-04:00I73.786 cdsd(6013) ERROR cds server server_hcell_support.c 722 0x4004ace0
get_preferred_member: No cell alias detected.

NOTE: this does not cause cdsd to die, but it may be a hint as to what's wrong.



CR Number                     : 12654
Defect or Enhancement?        : enh
CR in Code, Doc, or Test?     : code
Inter-dependent CRs           : 
Project Name                  : dce
H/W Ref Platform              : all
S/W Ref Platform              : all
Component Name                : cds
Subcomponent Name             : cdscp
Short Description             : Should remove cellname commands in cdscp
Reported Date                 : 10/18/94
Found in Baseline             : 1.1b21
Found Date                    : 10/18/94
Severity                      : B
Priority                      : 1
Status                        : open
Duplicate Of                  : 
Fix By Baseline               : 1.2
Fixed In Baseline             : 
Affected File(s)              : 
Diff supplied by              : 
Diff release                  : 
Sensitivity                   : public

[10/18/94 public]

It was decided that this should be OT'd with the enhancement here
rather than submitting this into the unintegrated tree.

Problem:
    When typing "help in cdscp, it currently lists the add and remove
    cellname commands.  These should be removed from the help text in
    src/directory/cds/includes/cds.sams.

    Also, we should functionally disable the invocation of the cdscp
    cellname commands by modifying the parse table,
    src/directory/cds/control/cds.cdt, to not accept them.

The changes to both files are listed below:

Diffs:

src/directory/cds/includes/cds.sams
-----------------------------------
8a9
new> # Remove cellname help commands in cdscp.
4840,4842d4840
old> add   cellname as alias\n
old> add   cellname as child\n
old> add   cellname as preferred\n
4873d4870
old> remove        cellname\n

src/directory/cds/control/cds.cdt
---------------------------------
10d9
new> ! Remove cellname commands.
189a189,213
old> ! /* ---------------------------------------- */
old> ! /* subparse for ADD/REMOVE CELLNAME command */
old> ! /* ---------------------------------------- */
old>
old> ! /* have seen ADD CELLNAME */
old>
old> ELEMENT addcell
old>     GOSUB nowildfullname CALL entity:0 NEXT
old>     GOSUB rootfullname   CALL entity:0 NEXT
old> ELEMENT *
old>     WORD as MIN 1 NEXT
old>     GOSUB addcellas SUCCESS
old> ELEMENT addcellas
old>     WORD preferred MIN 1 CALL set_func:ADDCELLPREFERCMD GOTO
shouldbeend
old>     WORD alias MIN 1 CALL set_func:ADDCELLALIASCMD GOTO shouldbeend
old>     WORD child MIN 1 CALL set_func:ADDCELLCHILDCMD GOTO shouldbeend
old>     WORD inherit MIN 1 CALL set_func:ADDCELLINHERITCMD GOTO
shouldbeend
old>
old> ! /* have seen REMOVE CELLNAME */
old>
old> ELEMENT remcell
old>     GOSUB nowildfullname CALL entity:0 NEXT
old> ELEMENT *
old>     FORCE CALL set_func:REMCELLCMD GOTO shouldbeend
old>
336a361
old>     WORD cellname      MIN 2 CALL cellent GOTO addcell
562a588
old>     WORD cellname      MIN 2 CALL cellent GOTO remcell



CR Number                     : 12622
Defect or Enhancement?        : def
CR in Code, Doc, or Test?     : code
Inter-dependent CRs           : 12583, 12901
Project Name                  : dce
H/W Ref Platform              : all
S/W Ref Platform              : all
Component Name                : cds
Subcomponent Name             : 
Short Description             : "cdsalias connect" fails in cell configured with a 2-level cellname
Reported Date                 : 10/13/94
Found in Baseline             : 1.1b21
Found Date                    : 10/13/94
Severity                      : A
Priority                      : 0
Status                        : open
Duplicate Of                  : 
Fix By Baseline               : 1.2
Fixed In Baseline             : 
Affected File(s)              : 
Diff supplied by              : 
Diff release                  : 
Sensitivity                   : public

[10/13/94 public]

(Found in baseline bl-21.1, erroneously initially labelled 20.4)

In trying to setup a hierarchical relationship between a parent
and child cell, I took the simplified approach of creating a cell 
which was configured with the desired name of the child (a cellname
containing 2 simple names) to begin with (eg /.../foo/bar). 

After setting up intercell access via gdad and DNS, and setting
proper permissions on the root directories in both cells, I executed

  dcecp> cdsalias connect

which returned the error

  "Error: There is no existing primary alias for the local cell."

Apparently either "cdsalias connect" has to handle this case or 
the CDS_CellAliases attribute has to be established during initial
cell configuration.

[10/14/94 public]
12583 contained information on 2 problems. A core dump and a cds alias
problem. 12583 will continue to reference the core dump problem. We opened
this one to refer to the alias problem. 12583 assigne to me, I believe its 
an alignment problem in deb_ascii_ObjUUID. This one goes to Roger.

[10/14/94 public]
Why are you using "cdsalias connect" as opposed to "cellalias connect" ?
With the recent design change to cdsalias (as used by cellalias), the
ordered steps are "cdsalias create xxx", "cdsalias set xxx", "cdsalias
connect".  The alias must exist before you can set it as the primary
alias, and the connect takes no argument and uses the existing primary
alias for the connect.

Now, if you wish to add the feature that on initial cell configuration
that the CDS_CellAliases attribute be preset with the cellname, then
it should be done by the initial cell configuration.  "cdsalias connect"
cannot because of the above change.  Let me point out the caveat that
the CDS_DirectoryVersion must be 4.0 for any cdsalias commands.  By
default, currently the directory version will be 3.0.  For initial cell
configuration, it's probably a good idea to start with 4.0.  Janet McCann
added a cdsd startup option (-v #.#) that will change the default directory
version setting.  For initial cell configuration, I suggest starting
up cdsd via "cdsd -a -v 4.0" so that the CDS_DirectoryVersion of the root
will already be set to 4.0.  The CDS server should startup this way
all of the time for new cells.  Then config should do the "cdsalias
create xxx" and "cdsalias set xxx" commands.  The "cdsalias connect"
will fail because intercell trust isn't setup yet.

[10/14/94 public]
Roger, let me try to answer some of your questions.  Note that several
currently open defects are related and that they all stem from trying two
approaches to setting up hcells, both of which I think are valid:

 1. configure two cells: /.../a and /.../c.
    then from cell /.../c
      cellalias create /.../a/b
      cellalias set /.../a/b
      registry connect /.../a
      cdsalias connect
    
 2. configure two cells: /.../a and /.../a/b
    then from cell /.../a/b
      registry connect /.../a
      cdsalias connect

Case 2 is when you are configuring a new cell with the expressed purpose of
it being a child of an existing parent.

Note that there is no "cellalias connect" command since all it would do is
"cdsalias connect".

The point that "the alias must exist before you can set it as the primary
alias" is well taken but I have a question.  You use the phrase "primary
alias", I usually use the phrase "primary cellname".  The difference seems
to be at issue.  Right after dce_config you have a cellname but no aliases.
I bet the "new" cdsalias connect command just looks for the CDS_CellAliases
attribute on the /.: directory and after dce_config it's not there.  To me
there are two solutions:

 * have the attribute created during initialization.  The point of needing
   version 4.0 directories is well taken.  Naive question:  could a cdsd
   started with -v 4.0 include the attribute in the /.: directory?
 * have cdsalias connect look first for the attribute and if not found then
   look at dce_cf_get_cellname().  If necessary then it could create the
   attribute.  

Your last suggestion of:

> Then config should do the "cdsalias create xxx" and "cdsalias set xxx"
> commands.  The "cdsalias connect" will fail because intercell trust isn't
> setup yet.

was as I understand the first work-around that was tried when we saw the
"cdsalias connect" failure in case two.  (Oh, it's looking for the
CDS_CellAlias attribute, well cellalias create creates it I'll call it).
So given my example in case 2 above, I believe that people tried to
configure a cell called /.../a/b and then ran:
  cdsalias create /.../a/b
The result was the error reported in CR 12594 that you apparently can't do a
cdsalias create with a hierarchical name.  This also affects our testing of
Case 1 since the initial "cellalias create" command fails on the cdsalias
create call.  (Also note that that CR has lots of info about a hostdata
command failing that resulted from a workon.  Kevin is verifying and will
be opening a separate dced CR for that info.

Now we had originally considered CR 12594 of lesser importance since
creating an alias for the existing cellname seemed a bit out of the normal.
But I think it comes down either this CR or that CR needs to be addressed.
Rethinking now though, since it affects Case 1 above, it's pretty serious
as well.

[10/17/94 public]
We're past the doc review deadline and aren't done yet. The unintegrated 
tree *deadline* is about 7 workdays away. I think its time to say option
2 above isn't supported this release. We need to concentrate on finding out
exactly what does work and documenting it. I believe we should document 
number 2 as a no-no and go on. Howard????

[10/19/94 public]
Agreed.  The work around for Case 2 is to use Case 1.  That is even if you
are creating a new cell, give it a simple name, then follow case 1.  Case 2
was a useful work-around for 1.1 development, but it's usefulness has
passed. 

Lisa needs to doc this.

I'll defer this for 1.2 to fix.

[6/2/95 public]

CR 12901 was created to separately track proposed modifications to
dce_config to allow initial cell setup with a default 4.0 directory
version.



CR Number                     : 12592
Defect or Enhancement?        : def
CR in Code, Doc, or Test?     : code
Inter-dependent CRs           : 
Project Name                  : dce
H/W Ref Platform              : all
S/W Ref Platform              : all
Component Name                : cds
Subcomponent Name             : cdsclerk
Short Description             : filtering broadcasts by cell name instead of uuid
Reported Date                 : 10/12/94
Found in Baseline             : 1.1b21
Found Date                    : 10/12/94
Severity                      : C
Priority                      : 2
Status                        : open
Duplicate Of                  : 
Fix By Baseline               : 1.2
Fixed In Baseline             : 
Affected File(s)              : 
Diff supplied by              : 
Diff release                  : 
Sensitivity                   : public

[10/12/94 public]

The smoketests accidentally uncovered a problem with cdsadv broadcasts
and filtering by cell name rather than by cell uuid. A broadcast of
clearinghouse names and locations will be cached if the cell name
matches, even if the cell uuid does not!

Multiple cells with the same name are not allowed BUT the problem
should be handled gracefully and NOT by having to deduct from the
cryptic cds error messages caused by the "corrupt" cache.

Please filter by cell uuid, and if this is the right place to catch
a duplicate cell name, please handle this case as well - Thanks.



CR Number                     : 12538
Defect or Enhancement?        : def
CR in Code, Doc, or Test?     : code
Inter-dependent CRs           : 
Project Name                  : dce
H/W Ref Platform              : all
S/W Ref Platform              : all
Component Name                : cds
Subcomponent Name             : 
Short Description             : cdsadv not going away properly
Reported Date                 : 10/6/94
Found in Baseline             : 1.1
Found Date                    : 10/6/94
Severity                      : B
Priority                      : 2
Status                        : open
Duplicate Of                  : 
Fix By Baseline               : 1.1
Fixed In Baseline             : 
Affected File(s)              : 
Diff supplied by              : 
Diff release                  : 
Sensitivity                   : public

[10/6/94 public]

We have noticed that dce_shutdown doesn;t alway dispatch the advertizer 
lately. We though it may be a dce_shutdown timing problem but this 
morning I wanted to shutdown a cell that had been running pretty much 
idl since late yesterday decided to look at this problem. I did

cdscp disable clerk 

and all of the clerks went away but cdsadv did not. It got a few ticks of 
cpu time over a couple of minutes elapsed time but remained up. After
about 20 minutes I reran cdscp disable clerk and gor

# cdscp disable clerk
Binding incomplete (no object ID and no endpoint) (dce / rpc)
Binding incomplete (no object ID and no endpoint) (dce / rpc)
Binding incomplete (no object ID and no endpoint) (dce / rpc)
Binding incomplete (no object ID and no endpoint) (dce / rpc)

The advertizer then pick up a few more ticks but is still standing. I then
sent it a sig15 and it went away.



CR Number                     : 12383
Defect or Enhancement?        : def
CR in Code, Doc, or Test?     : code
Inter-dependent CRs           : 
Project Name                  : dce
H/W Ref Platform              : all
S/W Ref Platform              : all
Component Name                : cds
Subcomponent Name             : cdsalias
Short Description             : creating multiple aliases with the same name reports no error.
Reported Date                 : 9/28/94
Found in Baseline             : 1.1
Found Date                    : 9/28/94
Severity                      : C
Priority                      : 2
Status                        : open
Duplicate Of                  : 
Fix By Baseline               : 1.1
Fixed In Baseline             : 
Affected File(s)              : 
Diff supplied by              : 
Diff release                  : 
Sensitivity                   : public

[9/28/94 public]

I can create/delete the same alias name with no error reported.

   dcecp> cdsalias create /.../foo 
   dcecp> cdsal cat
   {CDS_CellAliases 
    {Primary /.../drkstr}
    {Alias /.../foo}}
   dcecp> cdsalias create /.../foo 
   dcecp> cdsal cat                 
   {CDS_CellAliases 
    {Primary /.../drkstr}
    {Alias /.../foo}}
   dcecp> cdsalias create /.../FOO 
   dcecp> cdsal cat                 
   {CDS_CellAliases 
    {Primary /.../drkstr}
    {Alias /.../foo}}
   dcecp> cdsalias delete /.../foo 
   dcecp> cdsalias cat             
   {CDS_CellAliases {Primary /.../drkstr}}
   dcecp> cdsalias delete /.../foo
   dcecp> cdsalias cat             
   {CDS_CellAliases {Primary /.../drkstr}}



CR Number                     : 12355
Defect or Enhancement?        : def
CR in Code, Doc, or Test?     : code
Inter-dependent CRs           : 
Project Name                  : dce
H/W Ref Platform              : i486
S/W Ref Platform              : osf1
Component Name                : cds
Subcomponent Name             : cdscp
Short Description             : Bad error message.
Reported Date                 : 9/27/94
Found in Baseline             : 1.1
Found Date                    : 9/27/94
Severity                      : E
Priority                      : 2
Status                        : open
Duplicate Of                  : 
Fix By Baseline               : 1.1
Fixed In Baseline             : 
Affected File(s)              : 
Diff supplied by              : 
Diff release                  : 
Sensitivity                   : public

[9/27/94 public]

I cannot create a clearinghouse on a 486/osf1 machine. 
I am logged in as cell_admin I perform the command:

cdscp> create clearinghouse /.:/clrd_ch
Binding incomplete (no object ID and no endpoint) (dce / rpc)
Binding incomplete (no object ID and no endpoint) (dce / rpc)
Binding incomplete (no object ID and no endpoint) (dce / rpc)
Binding incomplete (no object ID and no endpoint) (dce / rpc)

(kevins@drkstr)(ksh:146) klist
DCE Identity Information:
        Warning: Identity information is not certified
        Global Principal: /.../drkstr/cell_admin
        Cell:      2410cef8-d924-11cd-aca1-0000c0f7de56 /.../drkstr
        Principal: 00000064-d924-21cd-ac00-0000c0f7de56 cell_admin
        Group:     0000000c-d924-21cd-ac01-0000c0f7de56 none
        Local Groups:
                0000000c-d924-21cd-ac01-0000c0f7de56 none
                000013ec-d924-21cd-bd01-0000c0f7de56 acct-admin
                000013ed-d924-21cd-bd01-0000c0f7de56 subsys/dce/sec-admin
                000013ee-d924-21cd-bd01-0000c0f7de56 subsys/dce/cds-admin
                000013ef-d924-21cd-bd01-0000c0f7de56 subsys/dce/dts-admin
                000013f2-d924-21cd-bd01-0000c0f7de56 subsys/dce/audit-admin

Identity Info Expires: 94/09/27:20:13:33
Account Expires:       never
Passwd Expires:        never

Kerberos Ticket Information:
Ticket cache: /opt/dcelocal/var/security/creds/dcecred_67f68e00
Default principal: cell_admin@drkstr
Server: krbtgt/drkstr@drkstr
        valid 94/09/27:10:13:33 to 94/09/27:20:13:33
Server: dce-rgy@drkstr
        valid 94/09/27:10:13:34 to 94/09/27:20:13:33
Server: dce-ptgt@drkstr
        valid 94/09/27:10:14:12 to 94/09/27:12:14:12
Client: dce-ptgt@drkstr Server: krbtgt/drkstr@drkstr
        valid 94/09/27:10:14:12 to 94/09/27:12:14:12
Client: dce-ptgt@drkstr Server: dce-rgy@drkstr
        valid 94/09/27:10:14:13 to 94/09/27:12:14:12

[melman 10/3/94 public] 
I have a vague memory of you needing to be root to do this, though the docs
don't say so.  Kevin can you reproduce as root?  You mention that this
happens on a 486.  Have you tried on an HP yet?

Made a P0 so that it is considered for hypercritical.  We had mentioned at
today's meeting and I didn't want it lost.

[10/3/94 public]
I've tried unsuccessfully to reproduce with BL19.  No need to be root.  I'll
try again with a more recent installation when I can.  Was the system
you ran cdscp from the root master or a secondary server?  What baseline 
was the above seen in?

[10/4/94 public]
Kevin will update later, but we know what the problem is.  cdsd wasn't
running and that was the error message returned.  This should changed to a
severity E "bad error message"-type defect.

[10/4/94 public]

This is a very bad error message. Something that gives a little more of a clue 
would be helpful. The component ownere couldn't even tell what the message 
meant.



CR Number                     : 12309
Defect or Enhancement?        : def
CR in Code, Doc, or Test?     : code
Inter-dependent CRs           : 
Project Name                  : dce
H/W Ref Platform              : rs6000
S/W Ref Platform              : aix
Component Name                : cds
Subcomponent Name             : cdsd
Short Description             : if cds master on RIOS, the cdsd replica on HP-UX hangs at re-start.
Reported Date                 : 9/22/94
Found in Baseline             : 1.1b18
Found Date                    : 9/22/94
Severity                      : A
Priority                      : 2
Status                        : open
Duplicate Of                  : 
Fix By Baseline               : 1.2
Fixed In Baseline             : 
Affected File(s)              : 
Diff supplied by              : 
Diff release                  : 
Sensitivity                   : public

[9/22/94 public]

BUILD: NB June 22, 1994

Configuration:

	HPUX: secd master, cdsd replica, dtsd
	RIOS: cdsd master, secd replica, dtsd
	OSF1: secd replica, dtsd, NTP provider

This cell configures successfully. However, at restart
the cdsd replica, on the HPUX, hangs. As a result, the
HPUX is unusable and the cell needs to be reconfigured.

(Note: I found this problem as I was trying to reproduce
some 250 plus coredumps, from cdsclerk, which filled up 
the filesystem while running system tests, on this configuration.)

[9/22/94 public]
Martha - you wouldn't by any chance have svc logs from this,
would you? Can you throw something like:
VERBOSE:FILE:/opt/dcelocal/var/svc/verbose
NOTICE:FILE:/opt/dcelocal/var/svc/notice
WARNING:FILE:/opt/dcelocal/var/svc/warning
ERROR:FILE:/opt/dcelocal/var/svc/error
FATAL:FILE:/opt/dcelocal/var/svc/fatal

into your routing file for next time? John Dugas suggested this
for me and its definitely helped in tracking things.

[9/22//94 public]

No, I do not have svc logs. John tried to set them up on the
RIOS and the dcecp log command has not returned yet :-(

I any case, I won't do more on this, I was asked to use 
the RIOS for 1.0.3 compatibility.

[9/23/94 public]

Lower the priority. Please verify if problem still exists without the 
1.0.3 RIOS.

[9/23/94 public]

I verified this again today having the cdsd master on an OSF1 
machine and the replica on an HPUX and it worked. So, I believe
that the problem has to do with having configured the cdsd master 
on a RIOS.

[9/23/94 public]
Just in case you were bored ... another one for ya.
Note that the PRIORITY is 2, for us, since we don't have the
resources to deal with this, but the SEVERITY is A.



CR Number                     : 12306
Defect or Enhancement?        : def
CR in Code, Doc, or Test?     : code
Inter-dependent CRs           : 
Project Name                  : dce
H/W Ref Platform              : all
S/W Ref Platform              : all
Component Name                : cds
Subcomponent Name             : cdsd
Short Description             : cdsd grows in size over 48 hour testing
Reported Date                 : 9/22/94
Found in Baseline             : 1.1b18
Found Date                    : 9/22/94
Severity                      : A
Priority                      : 2
Status                        : open
Duplicate Of                  : 
Fix By Baseline               : 1.2
Fixed In Baseline             : 
Affected File(s)              : 
Diff supplied by              : 
Diff release                  : 
Sensitivity                   : public

[9/22/94 public]

In running rpc.cds.3 test for 48 hours, the size of cdsd grew from 1765 blocks 
to 13831 blocks.  Some preliminary investigation suggests that the importing of binding handles may be contributing to the growth in size, but this should be 
confirmed.

[9/22/94 public]

I forgot to add that the reason for this being an A 0 is that the growth in
cdsd appears to be the main reason that we are running out of swap space on
HP trying to run the rpc.cds.3 tests

[9/22/94 public]
Just as a data point, in a newly rebooted, 4 machine cell (including 3 DFS servers, 1 client-only),
cdsd is 1586 blocks (per ps -efl output on an HP). About a day later (22 hours), it's 2387. Growth
ranges between 12 and 32 blocks per hour.

[9/23/94 public]

Suspected that the test is too aggressive on the number of imports it is doing.



CR Number                     : 12291
Defect or Enhancement?        : def
CR in Code, Doc, or Test?     : code
Inter-dependent CRs           : 
Project Name                  : dce
H/W Ref Platform              : all
S/W Ref Platform              : all
Component Name                : cds
Subcomponent Name             : cdsclerk
Short Description             : cdsclerk reports sec_login_import_context failures
Reported Date                 : 9/21/94
Found in Baseline             : 1.1b18
Found Date                    : 9/21/94
Severity                      : B
Priority                      : 2
Status                        : open
Duplicate Of                  : 
Fix By Baseline               : 1.2
Fixed In Baseline             : 
Affected File(s)              : 
Diff supplied by              : 
Diff release                  : 
Sensitivity                   : public

[9/21/94 public]

At random times the cdsclerk on a DCE client will start reporting 
sec_login_import_context failures for minutes at a time.  This has been
seen a couple of times in the last few days, but is not reliably reproducible.

The cell appears to be functional while these messages are scrolling by, a
dce.ps returns successfully.

The messages look like this:

Routine sec_login_import_context(3sec) failed : status = 387064044.
1994-09-19-14:20:34.866-04:00I0.364 cdsclerk(13163) ERROR cds general clerk_bind
.c 1339 0x00742b38
Routine sec_login_import_context(3sec) failed : status = 387064044.
1994-09-19-14:20:34.916-04:00I0.364 cdsclerk(13163) ERROR cds general clerk_bind
.c 1339 0x00742b38
Routine sec_login_import_context(3sec) failed : status = 387064044.
1994-09-19-14:20:34.956-04:00I0.364 cdsclerk(13163) ERROR cds general clerk_bind
.c 1339 0x00742b38
Routine sec_login_import_context(3sec) failed : status = 387064044.
1994-09-19-14:20:35.026-04:00I0.364 cdsclerk(13163) ERROR cds general clerk_bind
.c 1339 0x00742b38
Routine sec_login_import_context(3sec) failed : status = 387064044.
1994-09-19-14:20:35.066-04:00I0.364 cdsclerk(13163) ERROR cds general clerk_bind
.c 1339 0x00742b38
Routine sec_login_import_context(3sec) failed : status = 387064044.
1994-09-19-14:20:35.116-04:00I0.364 cdsclerk(13163) ERROR cds general clerk_bind
.c 1339 0x00742b38

The error number translates to:
 No currently established network identity for which context exists (dce / sec)

[9/23/94 public]

Not currently blocking anyone.



CR Number                     : 12261
Defect or Enhancement?        : def
CR in Code, Doc, or Test?     : code
Inter-dependent CRs           : 
Project Name                  : dce
H/W Ref Platform              : all
S/W Ref Platform              : all
Component Name                : cds
Subcomponent Name             : cache
Short Description             : CACHE_PARANOID does not compile
Reported Date                 : 9/20/94
Found in Baseline             : 1.1b17
Found Date                    : 9/20/94
Severity                      : A
Priority                      : 1
Status                        : open
Duplicate Of                  : 
Fix By Baseline               : 1.2
Fixed In Baseline             : 
Affected File(s)              : 
Diff supplied by              : 
Diff release                  : 
Sensitivity                   : public

[9/20/94 public]
CACHE_PARANOID doesn't compile.  John has fixes and will submit.

[9/23/94 public]

John will submit today or it goes into the unintegrated tree.

[9/23/94 public]

John agreed to put in unintegrated tree.

[10/13/94 public]
This should go in.  The debugging capablity is important for porting.
Doesn't effect code if CACHE_PARANOID switch not enabled.

[10/19/94 public]
John agreed this problem can be doc'ed.  Lowered priority.



CR Number                     : 12221
Defect or Enhancement?        : def
CR in Code, Doc, or Test?     : code
Inter-dependent CRs           : 
Project Name                  : dce
H/W Ref Platform              : all
S/W Ref Platform              : all
Component Name                : cds
Subcomponent Name             : 
Short Description             : cdsalias can be set incorrectly
Reported Date                 : 9/16/94
Found in Baseline             : 1.1
Found Date                    : 9/16/94
Severity                      : E
Priority                      : 4
Status                        : open
Duplicate Of                  : 
Fix By Baseline               : 1.1
Fixed In Baseline             : 
Affected File(s)              : 
Diff supplied by              : 
Diff release                  : 
Sensitivity                   : public

[9/16/94 public]

If a pathname of the form "/.:/foo" is passed into the cds api
cp_AddCellname() the name is accepted and added into the CDS_CellAliases 
attribute. However, if the name is expanded prior to attempting to add 
it this error is returned.

Error: The supplied cellname would result in a hierarchical cycle.

[9/22/94 public]

Returning an error for this case is the correct behavior.  Accepting
"/.:/foo" as a cdsalias is bad.  As you noticed, the cp_AddCellname and
cp_RemoveCellname routines expect the supplied name to be expanded prior to
calling them.  Since this is not a public interface, and the only two
places that call them expand the name before calling them (cdscp and dcecp
(Oh, thanks for fixing this in cdscp_cellalias.c)), I'm not sure this
warrants this priority.

[9/22/94 public]

I've re-prioritized to E4 and changed the status to deferred since I
don't think we'll be changing any code.  I could add some comment
specifying that the name must be expanded before passing it to
cp_AddCellname or cp_RemoveCellname.  Re-open if you wish.



CR Number                     : 12101
Defect or Enhancement?        : def
CR in Code, Doc, or Test?     : code
Inter-dependent CRs           : 
Project Name                  : dce
H/W Ref Platform              : all
S/W Ref Platform              : all
Component Name                : cds
Subcomponent Name             : 
Short Description             : Servicability isn't finding a status in the message catalog
Reported Date                 : 9/8/94
Found in Baseline             : 1.1
Found Date                    : 9/8/94
Severity                      : B
Priority                      : 2
Status                        : open
Duplicate Of                  : 
Fix By Baseline               : 1.2
Fixed In Baseline             : 
Affected File(s)              : 
Diff supplied by              : 
Diff release                  : 
Sensitivity                   : public

[9/8/94 public]
Servicability isn't finding a status in the message catalog when running
dcecp. The same status is found when running cdscp.

$ dcecp -c cellalias create /.../x_alias
Error: Unknown message number 0x10d0a45f
$ cdscp add cellname /.../x_alias as alias
For cellname commands, the CDS_DirectoryVersion attribute is required to be 3.1 or greater. (dce / cds)

0x10d0a45f is mapped to the string emitted by cdscp.

[9/8/94 public]
I think the problem is that the cds intable message table is being loaded
through the api call rather than through msgtable.c. Rich agrees and I
will try it. I'll up this to a P1 because we should try to get this in 
today. Rich agrees in that as well. Also assigning it to cds.



CR Number                     : 12062
Defect or Enhancement?        : enh
CR in Code, Doc, or Test?     : code
Inter-dependent CRs           : 
Project Name                  : dce
H/W Ref Platform              : all
S/W Ref Platform              : all
Component Name                : cds
Subcomponent Name             : 
Short Description             : deleting master replica with excluded readonly leaves "zombie" orphan replica.
Reported Date                 : 9/6/94
Found in Baseline             : 1.1b16
Found Date                    : 9/6/94
Severity                      : C
Priority                      : 3
Status                        : open
Duplicate Of                  : 
Fix By Baseline               : 1.2
Fixed In Baseline             : 
Affected File(s)              : 
Diff supplied by              : 
Diff release                  : 
Sensitivity                   : public

[9/6/94 public]

The following sequence of operations leave a "zombied" replica i.e.  one
that can not be deleted, re-attached and that prevents the creation of a
replica of the same name in the same clearinghouse:

cdscp create dir /.:/a_dir clear /.:/default_ch
cdscp create replica /.:/a_dir clear /.:/pierrot_ch
cdscp set directory /.:/a_dir to new epoch master /.:/default_ch exclude
/.:/pierrot_ch
cdscp del dir /.:/a_dir 
cdscp create dir /.:/a_dir 
cdscp create replica /.:/a_dir clear /.:/pierrot_ch

Granting that this is a "don't do" (i.e. it's a feature not a bug) it is
not far fetched to imagine that a CDS user could follow this sequence and
find herself "wedged". The least onerous "fix" is a slight modification to
the list of steps to take in order to delete a "bottom-level" directory
(section 11.3.1 DCE Administration Guide --Core Components 1.0.3) appending
a step 5a to warn the user that if a readonly replica exists then removing
the master will create a "zombied" orphan replica. It may be a good idea to
add a note to that effect in the man pages (it begs the question of how the
user is to find out that such replicas exist but more on this below).

For the longer term it would be nice to provide a real "fix" to this
problem. For example, there could be an attribute in the master containing
a list of all replicas (including the excluded ones) so that the user could
be warned of potential problems when she deletes a master. Maybe there
could be an adopt mechanism. At least there could be a tool to remove the
orphan from the clearinghouse. There are, of course, many other ways to fix
this problem.

[9/6/94 public]
Maybe I misunderstood our phone conversation. I thought the problem was that
a read replica had been excluded with the change epoch command because it was 
unavailable. After the exclusion the master was removed. Note this will not
remove the read replica since you have explicatly told cds to ignore it, it
is unavailable. The user then brought the clearinghouse containg the previously
unavailable read replica up. This is a bad thing to do. The read replica has
no master.

The exclusion subcommand of change epoch is intended to tell cds about the
loss of a clearinghouse. Masters of the lost clearinghouse may be moved to
other replicas and read replicas can be excluded. Bringing that clearing
house back to life later after the state of things it previously contained
have been significantly altered is a dangerous thing to do. If our 
documentation isn't clear on this it should be. 

I suspect that having the master keep state on all replicas that have heen 
lost and excluded sometime in the past, perhaps the distant past, may be 
problamatic. But I'll leave this as an enhancement request the next release.



CR Number                     : 11669
Defect or Enhancement?        : def
CR in Code, Doc, or Test?     : code
Inter-dependent CRs           : 
Project Name                  : dce
H/W Ref Platform              : all
S/W Ref Platform              : all
Component Name                : cds
Subcomponent Name             : 
Short Description             : return better than CDS_ROOTLOST
Reported Date                 : 8/12/94
Found in Baseline             : 1.1b14
Found Date                    : 8/12/94
Severity                      : E
Priority                      : 2
Status                        : open
Duplicate Of                  : 
Fix By Baseline               : 1.2
Fixed In Baseline             : 
Affected File(s)              : 
Diff supplied by              : 
Diff release                  : 
Sensitivity                   : public

[8/12/94 public]

> I didn't have intercell set up but tried: 
>
> dcecp> cdsalias cat /.../othercell
> Error: Requested operation would result in lost connectivity to root directory
>
>This is a weird error message to get if nothing else.

This error message is not specific to the cdsalias catalog command.  Any
CDS "show" seems to return this if you do not have read access.  Try
a "directory show /.../othercell" and you'll get the same message.  Offhand,
I don't know why the clerk or server returns CDS_ROOTLOST in this case, but
if this message is bothersome, then a separate OT should be opened.

--Roger Zee



CR Number                     : 11653
Defect or Enhancement?        : enh
CR in Code, Doc, or Test?     : code
Inter-dependent CRs           : 
Project Name                  : dce
H/W Ref Platform              : all
S/W Ref Platform              : all
Component Name                : cds
Subcomponent Name             : cache/clerk
Short Description             : clear cached server misleading
Reported Date                 : 8/11/94
Found in Baseline             : 1.1
Found Date                    : 8/11/94
Severity                      : E
Priority                      : 4
Status                        : open
Duplicate Of                  : 
Fix By Baseline               : 1.2
Fixed In Baseline             : 
Affected File(s)              : 
Diff supplied by              : 
Diff release                  : 
Sensitivity                   : public

[8/11/94 public]
The documentation says that "clear cached server" "removes
knowledge of a server". Now, the code only removes the cache
clearinghouse entry, but does not scrub the directory entries.
If the clerk gets a match on a directory it can still get
to that clearinghouse, can't it? And if it does get there,
doesn't the clearinghouse get deposited back in the clearinghouse
cache? I don't have time to verify, but someone should.

A customer could use this command, thinking that he/she has
stopped the clerk from using said clearinghouse, which would
be misleading.

This should probably be in the release notes.



CR Number                     : 11624
Defect or Enhancement?        : def
CR in Code, Doc, or Test?     : code
Inter-dependent CRs           : 
Project Name                  : dce
H/W Ref Platform              : all
S/W Ref Platform              : all
Component Name                : cds
Subcomponent Name             : gdad
Short Description             : Must restart gdad after name server data base edit.
Reported Date                 : 8/9/94
Found in Baseline             : 1.1b14
Found Date                    : 8/8/94
Severity                      : A
Priority                      : 2
Status                        : open
Duplicate Of                  : 
Fix By Baseline               : 1.2
Fixed In Baseline             : 
Affected File(s)              : 
Diff supplied by              : 
Diff release                  : 
Sensitivity                   : public

[8/9/94 public]

After installing bl14.1 on two cells and setting up the cell
entries in DNS, an unauthenticated "cdscp show dir /.../<other cell>"
failed with the error

Requested entry does not existFunction: dnsEnumAttr
dnsEnumAttr: partial results = %x000000000000000000000000000000000000

Then I manually stopped gdad and started it again, and the
same command worked correctly. This "fix" worked in both cells.

[8/10/94 public]
I changed the short description to be clear as to what this ot says.
Unauthenticated intercell does work. The only question is does one
have to restart gdad after editing the name service data base. 

My guess is that gdad caches information which implies that if you
change the nameserver data base you must restart gdad but I'm not certain.
I never paid attention to the order I was doing this in in the past
but Rick is correct in that you must now restart gdad after a name server
update. I'll verify whether or not this is the correct behavior but
for now I'm going to lower the priority.

[08/12/94 public]
It's been awhile since I looked at gdad (raw Internet domain queries aren't
fun reading) but note that all DNS info has a TTL (time to live) field,
and if gdad is caching DNS lookups it shouldn't keep them longer then
the returned TTL.



CR Number                     : 11561
Defect or Enhancement?        : def
CR in Code, Doc, or Test?     : doc
Inter-dependent CRs           : 
Project Name                  : dce
H/W Ref Platform              : all
S/W Ref Platform              : all
Component Name                : cds
Subcomponent Name             : admin_gd
Short Description             : better org of default ACL's
Reported Date                 : 8/4/94
Found in Baseline             : 1.0.3
Found Date                    : 8/4/94
Severity                      : D
Priority                      : 2
Status                        : open
Duplicate Of                  : 
Fix By Baseline               : 1.2
Fixed In Baseline             : 
Affected File(s)              : 
Sensitivity                   : public

[8/4/94 public]
This CR is asking for a slight re-org of a section of the docs and maybe a
couple more paragraphs.

Admin Guide - Core Components, CDS, Section 7.5 DCE Permissions Supported
by CDS.

the last paragraph and the following Note contains REALLY GOOD INFO.  It
should be more obvious to the user.  This info is about the ACL's that are
actually created on new objects.  The fact that it is not just the Initial
Object ACL of the parent container but also the creater is granted full
access based on the type of entry.

I'd like to see these paragraphs moved to section 7.3 How Permissions
Propagate to CDS Directories and Their Contents and I'd like to see it
organization in two subsections:

  7.3.1 The default ACL on new objects, softlinks, and clearinghouses
        Describe that the ACL is the IO of the container and the creater as
        found in the paragraphs from 7.5

  7.3.2 The default ACL on new directories
        Describe that the ACL and IC come from the IC of the parent and
        that the IO comes from the IO of the parent and the creater is
        granted rwidtca (also from 7.5)

Model this on what was Section 4.9.2 of the 1.0.3 Users Guide.  The
pictures are not necessary.  :-)

[08/09/94 public]
Assigned to myself.

[10/27/94 public]
Deferring this CR to 1.2.

[7/5/95 public]

Reassigned to Digital for DCE 1.2.



CR Number                     : 11483
Defect or Enhancement?        : def
CR in Code, Doc, or Test?     : code
Inter-dependent CRs           : 
Project Name                  : dce
H/W Ref Platform              : i486
S/W Ref Platform              : osf1
Component Name                : cds
Subcomponent Name             : cdsbrowser
Short Description             : cdsbrowser gives scroll bar error
Reported Date                 : 7/29/94
Found in Baseline             : 1.1
Found Date                    : 7/29/94
Severity                      : C
Priority                      : 2
Status                        : open
Duplicate Of                  : 
Fix By Baseline               : 1.2
Fixed In Baseline             : 
Affected File(s)              : 
Diff supplied by              : 
Diff release                  : 
Sensitivity                   : public

[7/29/94 public]

Customer reported this problem against 1.0.2 DCE with their SVR4 port,but
I have managed to reproduce this problemw ith 1.0.3 and current 1.1 code,
though I only saw the problem with 486 running osf/1.

If you start cdsbrowser and expand all and it has more than what the default 
window can hold. Click scroll bar arrow to move down to the end. Now click on
the UP arrow of the scroll bar, you will get the following error on the screen
where you start cdsbrowser:

Warning: 
    Name: SVSc
    Class: XmScrollBar
    The specified scrollbar value is greater than the maximum
    scrollbar value minus the scrollbar slider size.

You will see the the bar shrinks. Clicking on the UP arrow in the bar will not
get the content move.

But you can click the other UP arrow which is above the scroll bar (why there
are two arrows for each direction?). That will move the content up and solve 
the problem.



CR Number                     : 11464
Defect or Enhancement?        : def
CR in Code, Doc, or Test?     : doc
Inter-dependent CRs           : 
Project Name                  : dce
H/W Ref Platform              : all
S/W Ref Platform              : all
Component Name                : cds
Subcomponent Name             : admin_gd
Short Description             : Discrepancy re FULLNAMEMAX
Reported Date                 : 7/27/94
Found in Baseline             : 1.1
Found Date                    : 7/27/94
Severity                      : C
Priority                      : 2
Status                        : open
Duplicate Of                  : 
Fix By Baseline               : 1.2
Fixed In Baseline             : 
Affected File(s)              : 
Sensitivity                   : public

[7/27/94 public]

Customer reported a discrepancy between what the Admin Guide states
is the maximum size for a directory entry and what "cdscp create dir"
will actually accept.  I tested this against both 1.0.3 and 1.1 and
received syntax error messages when creating a directory with more
than 402 characters.  I dug around in the code a bit (see message
appended) and determined that this length restriction impacts quite
a few source files (and apparently only one page in the docs).

> Full Description:
>   In apendix A of the OSF DCE Administration Guide (A-5)
> states that the CDS full name maximum is 1023 characters including
> prefix, cell name, and forward slashes. However, full name operations
> of that magnitude cause a status code return of CDS_NOROOM.
> 
> Upon further investigation it was found that the following
> header files include full name max definitions:
> 
> dns_record.h		FULLNAMEMAX = 402
> cdsclerk.h		OPQ_FNAME_MAX = 402
> 
> It would be possible to change these values to 1023 to
> comply with the documentation, however since these header files are
> included on the server, this can create inter-operability problems.
> 
> To recreate this problem try the following test cases:
> 
> cdscp create dir /.../cell_name/name_thats_250_chars_long/Also_250_long
> 
> The above will return a status code of CDS_NOROOM or CDS_INVALIDNAME.
> 
> 
> 
> Upon further investigation, the following character counting pattern
> was found:
> 
> - -CDS full name maximum is 402 characters.
> - -20 characters are reserved for an internal full name structure
>  that is appened to every full name.
> - -global prefix is counted as part of the full name.
> - -cell name is counted as part of the full name.
> - -each forward slash character in the full name is
> counted AS 2 (TWO) characters.
> 
> For example, given the following full name, the count would be:
> 
> /.../c=clarinetcell/cccc009/hello_simple_name/second_name/third
> 
> - -20 chars reserved
> - -3 global prefix
> - -14 cell name
> - -40 simple name chars
> - -6 * 2 = 12 '/' forward slash chars
> Total: 89 characters for full name
> 
> Proposed solution:
> 
> Update Apendix A of the DCE Administration Guide to explain the
> method for calculating the maximum length of a full name. Also document
> that the maximum number is in fact 402, not 1023. clearly explain why
> forward slashes are counted as two bytes.
> 
> For 1.1 DCE you might consider updating the code to 1023 on
> both the client and server side, making them consistent.

===========================================================================

I followed the source from the parsing of "cdscp create dir" down to the 
code which is actually generating the complaints about names being too long; 
it occurs in the cds_cvtCDSFullToOpq function in the CDS library file
dnscvtcdsfull.c.  Unfortunately, this is by no means the only file which
references FULLNAMEMAX or [CDS|DNS]_OPQ_FNAME_MAX; other affected files in
the cds tree include:

	/adver/adver_clerk_event.c
	/adver/adver_transport.c
	/adver/adver_service_ncl.c
	/cdsbrowser/cds_browsersource.c
	/control/name_actions_cds.c
	/control/preferred_clh.c
	/includes/cdsclerk.h
	/includes/dnsclerk_cds.h
	/includes/dns_record.h
	/includes/uc_parse.h
	/library/cdsstrings.c
	/library/dns_record.c
	/library/dnsgather.c
	/library/dnsmaxsize.c
	/library/dnsvalidate.c

This doesn't include cases where functions in other files might have the 
values of FULLNAMEMAX or [CDS|DNS]_OPQ_FNAME_MAX (or pointers to structures 
whose dimensions are defined by them) passed to them.

Obviously, changing these values from 402 (which I have to assume is some
weird VMS vestige) to the officially documented value of 1023 could break
a lot of code, and I would imagine that the 1.1 team might be understandably
reluctant to perturb the code base with such a change.  After searching OT,
our SC notes and the WAIS indices for DCE mail and docs, I came up with no
previous mention of this discrepancy between code and docs, so this must be
the first time anyone has actually tried to enter a name that long.  Sooner 
or later, though, someone is going to try to create a directory structure 
that looks like:

	All_the_spreadsheets_I_created_last_year/All_the_spreadsheets_I_created_last_quarter/All_the_spreadsheets_I_created_last_month/All_the_spreadsheets_I_created_last_week/All_the_spreadsheets_I_created_on_Monday/The_spreadsheet_I_created_at_10_am_that_the_boss_wanted_at_9_am

and they'll get those NOROOM/INVALIDNAME messages.

[08/09/94 public]
Assigned to myself.

[10/27/94 public]
Deferring this CR until 1.2.

[7/5/95 public]

Reassigned to Digital for DCE 1.2.



CR Number                     : 11462
Defect or Enhancement?        : def
CR in Code, Doc, or Test?     : code
Inter-dependent CRs           : 
Project Name                  : dce
H/W Ref Platform              : all
S/W Ref Platform              : all
Component Name                : cds
Subcomponent Name             : 
Short Description             : cds cache login context check for the machine principal is not enough
Reported Date                 : 7/27/94
Found in Baseline             : 1.0.3
Found Date                    : 7/27/94
Severity                      : B
Priority                      : 2
Status                        : open
Duplicate Of                  : 
Fix By Baseline               : 1.2
Fixed In Baseline             : 
Affected File(s)              : 
Diff supplied by              : 
Diff release                  : 
Sensitivity                   : public

[7/27/94 public]

I am investigating a report from IBM about a problem with machine principal 
in 1.0.x code. When trying with the 1.1 code, it seems to me that the problem 
went away. I searched the OT and could not find anything. 

Nobody seems to know why the problem went away. HP mentioned that they are 
wawre of the problem, but did not think any OT was opened. They did not do
any explicit fix for this problem. They wonder too why 1.1 would behave
differently than 1.0.3.

Here is the problem:

DCE chooses to let the machine principal have a fixed cred cache file name
(dcecred_ffffff), while other principals, when logging, will get a different 
cache file for each login.

CDS clerk, when determining whether to use the cached data for a request, 
checks to see if the requester's login context has changed. This is done by 
comparing the cached opaque login context with the one in the request buffer 
(cds/child/clerk_client.c, parse_argument() function). If they are the same, 
cds assumes that the requester has the same privilege as before.

This opaque login context is actually the name of the cache file from
sec_login_import_context()'s output.

Privilege for a principal changes when he is added/removed from a group. The 
change of the group membership takes place when a new dce login is done, ie. 
a new cred cache file is used. So the clerk code will catch the change of the 
privilege by seeing the change of the cache file name. New authorization will 
take place.

But for the machine principal, since the cred cache file always takes the same 
name, just checking the cache file name is not enough.

This problem can be seen with the following simple test (with 1.0.2 or 1.0.3 
dce):

	Window 1					Window 2
1. login in as root				1. dce_login as cell_admin
						2. rgy_edit create group g1
						3. cdscp create dir /.:/t1
						4. acl_edit /.:/t1
							remove r from any_other
							add group:g1:rt
2. cdscp show dir /.:/t1
	you will get permission error
	since machine principal is not
	allowed to read this cds dir.
						5. rgy_edit
							add hosts/xxx/self to g1
3. kill sec_clientd
4. kdestroy
	make sure the old caceh is gone
5. restart sec_clientd
6. klist 
	make sure that g1 is in local
	group listing
7. cdscp show dir /.:/t1
	you will see the same permission
	error again, even though the
	machine principal should have the
	permission now. The reason is that
	cdsclerk simply returns the cached
	data.

Same test with 1.1 dce shows that 1.1 dce handles it correctly.

IBM reported problem with 1.0.2 code when they tried to reconfigure a dts 
clerk to be a dts server. The machine principal is added to 
subsys/dce/dts-servers group, sec_clientd restarted, but reading 
/.:/lan-profile returns the cached data: permission denied.
See also OT 7467. 1.0.3 dce_config bypasses this problme by stopping dtsd 
first, then restart it as a server.



CR Number                     : 11459
Defect or Enhancement?        : def
CR in Code, Doc, or Test?     : code
Inter-dependent CRs           : 
Project Name                  : dce
H/W Ref Platform              : all
S/W Ref Platform              : all
Component Name                : cds
Subcomponent Name             : 
Short Description             : confusing error message
Reported Date                 : 7/27/94
Found in Baseline             : 1.1
Found Date                    : 7/27/94
Severity                      : B
Priority                      : 2
Status                        : open
Duplicate Of                  : 
Fix By Baseline               : 1.2
Fixed In Baseline             : 
Affected File(s)              : 
Diff supplied by              : 
Diff release                  : 
Sensitivity                   : public

[7/27/94 public]

From: Jonathan Chinitz <jec@isoft.com>
I just tried to configure a new node into an an existing cell as a CDS
server. With the way I play around with nodes and cells (as in taking one
out of cell A, copnfiguring it as cell B, etc.) I left the cell with /.:
indicating that it had a replica on a host which was no longer in the
cell. Everything was fine until I decided to create a CH on the new node.
Guess what?  cdscp create clearinghouse fails with
	Unable to communicate with any CDS server
Bizzare - I can do cdscp commands to my heart's content - what gives?

To make a long story short - I had to exclude the bogus replica from /.:'s
replica set - only then did cdscp create clearinghouse (and I found out
cdscp set dir /.: to skulk as well) succeeded. This particular command
wants to see all replicas of /.: available before it continues. That is
ok, but the error message "Unable to communicate with any CDS server",
especially the word "any" is a bit misleading...



CR Number                     : 11300
Defect or Enhancement?        : def
CR in Code, Doc, or Test?     : code
Inter-dependent CRs           : 
Project Name                  : dce
H/W Ref Platform              : i486
S/W Ref Platform              : osf1
Component Name                : cds
Subcomponent Name             : cdscp
Short Description             : problem of quoted name with back slash at the end
Reported Date                 : 7/14/94
Found in Baseline             : 1.1
Found Date                    : 7/14/94
Severity                      : D
Priority                      : 4
Status                        : open
Duplicate Of                  : 
Fix By Baseline               : 1.2
Fixed In Baseline             : 
Affected File(s)              : 
Diff supplied by              : 
Diff release                  : 
Sensitivity                   : public

[7/14/94 public]

The document says that if the back slash is at the end, it will mean a
continuation, and you will get prompt for more input.

I am running B11 1.1's cdscp, after typing "\" folowed by <CR>, I never
got the prompt for anything. Looks like cdscp hanged.

With 1.0.3, it works fine. But if I quote the name with " (to include
spaces in name, for example), it gives error:

cdscp> create obj /.:/"a b c\
syntax error
create obj /.:/"a b c\
           ^

[7/14/94 public]
I down graded this.  No old control program bug should be either an 
A or B, the work around is used dcecp (only a very few exceptions to 
this when dcecp doesn't implement the functionality).  Since this is
not a common problem it is not a major problem, hence a D and not a C.

Old control program bugs particularly cdscp just aren't going to be fixed 
for 1.1.  Priority 4.



CR Number                     : 11293
Defect or Enhancement?        : def
CR in Code, Doc, or Test?     : doc
Inter-dependent CRs           : 11064
Project Name                  : dce
H/W Ref Platform              : all
S/W Ref Platform              : all
Component Name                : cds
Subcomponent Name             : admin_gd
Short Description             : Need better doc for cds meta-characters
Reported Date                 : 7/14/94
Found in Baseline             : 1.1
Found Date                    : 7/14/94
Severity                      : C
Priority                      : 2
Status                        : open
Duplicate Of                  : 
Fix By Baseline               : 1.2
Fixed In Baseline             : 
Affected File(s)              : 
Diff supplied by              : 
Diff release                  : 
Sensitivity                   : public

[7/14/94 public]


IBM feels strongly that we need better document in the CDS meta-character
area.

As OT 11064 indicates, "\" cannot be part of a name, even with another back
slash to escape it.  

It will be better to also have a paragraph which says, in plain words, what 
meta-characters, when escaped, can be part of a cds simple name; what meta
characters can not. One example is slash "/". The 1.0.3 doc does not
explicitly say that it cannot be part of a name, although one should be able
to conclude this by reading the doc (Appendix A of admin guide) since it
doesnot say that you can escape slash.

[7/25/94 public]

Assigned this CR to Ron Johnson (Digital DCE 1.1 writer).

[08/25/94 public]
Filled in the Fix By Baseline field for housekeeping purposes.

[10/5/94 public]

Digital has indicated that they believe that the information is already in
the documentation.  OSF does not have the resources now to analyze whether
this statement is correct.  Therefore I have defered the resolution to 1.2.

[7/5/95 public]

Reassigned for DCE 1.2.

[9/30/96 public]

Noise. Test ot.

[10/01/96 public]

Another test

[10/01/96 public]

Noise.



CR Number                     : 11067
Defect or Enhancement?        : def
CR in Code, Doc, or Test?     : code
Inter-dependent CRs           : 
Project Name                  : dce
H/W Ref Platform              : hppa
S/W Ref Platform              : hpux
Component Name                : cds
Subcomponent Name             : server
Short Description             : cdsd spins when secd server crashes
Reported Date                 : 6/24/94
Found in Baseline             : 1.1
Found Date                    : 6/24/94
Severity                      : A
Priority                      : 2
Status                        : open
Duplicate Of                  : 
Fix By Baseline               : 1.2
Fixed In Baseline             : 
Affected File(s)              : 
Diff supplied by              : 
Diff release                  : 
Sensitivity                   : public

[6/24/94 public]

Using 1.1 basline 10 (BETA) in a split server cell (secd on RIOS soldier,
cdsd on HP west), dfs tests glue and lock cause soldier to crash within
2 hours - at which point cdsd begins spinning.

Here's the output from top, 13 hours after soldier crashed:

TTY   PID USERNAME  PRI   NI  SIZE  RES  STATE   TIME   %WCPU  %CPU  COMMAND
?     5462 root    241   20  6616K 1988K  wait  242:26  99.52  99.35 cdsd

I've reproduced this twice - before the 2nd time, I set up serviceability
so the log:
 
	west:/u0/cds_svc.3.10000

may hold some clues ...

I've given this a high severity (A) and priority (1) because, even after
I restart secd, cdsd does not recover - I will lower the severity/priority
if people feel that it is acceptable that cdsd has to be shutdown and
restarted if secd bounces.

[8/24/94 public]
If we get through the all of the P1s we may visit this but this bug
refers to a condition that happens only when secd has died. It does
not take precedence over other the remaining P1s.

[9/19/94 public]
Finally, I can agree with the priority on this one ... at least, in
this weekend's case. The secd for the cell went down at:

root@cobbler> ls -l /opt/dcelocal/var/security/core
-rw-rw-rw-   1 root     bin      5189323 Sep 17 00:16 /opt/dcelocal/var/security/core

The cell was configured at:

root@cobbler> ls -l /opt/dcelocal/dce_cf.db
-rw-r--r--   1 root     bin           60 Sep 16 18:21 /opt/dcelocal/dce_cf.db

at:
Mon Sep 19 10:53:33 EDT 1994
ps -ef|grep cdsd
    root  2615     1  0  Sep 16  ?       198:17 cdsd -a

Restarting secd (with -debug at least) allowed unauthenticated 
cdscp show dir to succeed. (dce_login hangs so couldn't try auth'd)



CR Number                     : 10934
Defect or Enhancement?        : def
CR in Code, Doc, or Test?     : code
Inter-dependent CRs           : 
Project Name                  : dce
H/W Ref Platform              : all
S/W Ref Platform              : all
Component Name                : cds
Subcomponent Name             : 
Short Description             : Delete requests should check permission prior to attempting deletion.
Reported Date                 : 6/12/94
Found in Baseline             : 1.0.3
Found Date                    : 6/12/94
Severity                      : D
Priority                      : 3
Status                        : open
Duplicate Of                  : 
Fix By Baseline               : 1.2
Fixed In Baseline             : 
Affected File(s)              : 
Diff supplied by              : 
Diff release                  : 
Sensitivity                   : public

[6/12/94 public]
We have a concern that the order of checking a delete request may give an unauthorized
user, information they should not have.
If a Clearinghouse is not empty, and the permissions do not allow that Clearinghouse
to be deleted, the message that is displayed implies that the Clearinghouse
is checked before the permission is checked.

>acl_edit /.:/ch4_ch -m user:testuser:rdtc    (user does not have 'write' permission to ch4_ch)
>dce_login testuser -dce-
>cdscp delete clearinghouse /.:/ch4_ch
Failure in routine:cp_clrdel_clh; code = 282108924
Directory must be empty to be deleted (dce / cds)

Another scenario:

>acl_edit /.:/testacl/dir1 -m user:testuser:rwdtc  (user does not have 'admin' permission to dir1 in ch4_ch)>dce_login testuser -dce-
>cdscp delete clearinghouse /.:/ch4_ch
Failure in routine: cp_clrdel_clh; code = 282108924
Directory must be empty to be deleted (dce / cds)

It appears that the Clearinghouse is checked to be empty before the permission
is checked.
This could give the user more information than they should have.



CR Number                     : 10564
Defect or Enhancement?        : def
CR in Code, Doc, or Test?     : code
Inter-dependent CRs           : 
Project Name                  : dce
H/W Ref Platform              : all
S/W Ref Platform              : all
Component Name                : cds
Subcomponent Name             : cdscp
Short Description             : cdscp show dir /... hangs
Reported Date                 : 5/6/94
Found in Baseline             : 1.1
Found Date                    : 5/6/94
Severity                      : C
Priority                      : 3
Status                        : open
Duplicate Of                  : 
Fix By Baseline               : 1.2
Fixed In Baseline             : 
Affected File(s)              : 
Diff supplied by              : 
Diff release                  : 
Sensitivity                   : public

[5/6/94 public]

Well, it may be meaningless to do, but cdscp show dir /... shouldn't
hang forever.  (This was executed in a cell without GDS running).



CR Number                     : 10445
Defect or Enhancement?        : def
CR in Code, Doc, or Test?     : code
Inter-dependent CRs           : 
Project Name                  : dce
H/W Ref Platform              : all
S/W Ref Platform              : all
Component Name                : cds
Subcomponent Name             : 
Short Description             : cds uses DTS internals inappropriately
Reported Date                 : 4/22/94
Found in Baseline             : 1.1
Found Date                    : 4/22/94
Severity                      : C
Priority                      : 3
Status                        : open
Duplicate Of                  : 
Fix By Baseline               : 1.2
Fixed In Baseline             : 
Affected File(s)              : 
Diff supplied by              : 
Diff release                  : 
Sensitivity                   : public

[4/22/94 public]

formatts.c calls the internal DTS function utc_settdf(), which is not part
of the exported API. In addition, cds contains a large number of routines
that appear to contain virtually identical code to DTS routines for 
the manipulation of time values



CR Number                     : 10105
Defect or Enhancement?        : enh
CR in Code, Doc, or Test?     : code
Inter-dependent CRs           : 
Project Name                  : dce
H/W Ref Platform              : all
S/W Ref Platform              : all
Component Name                : cds
Subcomponent Name             : all components
Short Description             : Code cleanup and i18n drop
Reported Date                 : 3/9/94
Found in Baseline             : 1.1
Found Date                    : 3/9/94
Severity                      : D
Priority                      : 1
Status                        : open
Duplicate Of                  : 
Fix By Baseline               : 1.2
Fixed In Baseline             : 
Affected File(s)              : 
Diff supplied by              : 
Diff release                  : 
Sensitivity                   : public

[3/9/94 public]
This is the first pass code cleanup and internationalization.



CR Number                     : 10023
Defect or Enhancement?        : def
CR in Code, Doc, or Test?     : code
Inter-dependent CRs           : 
Project Name                  : dce
H/W Ref Platform              : rs6000
S/W Ref Platform              : aix
Component Name                : cds
Subcomponent Name             : 
Short Description             : Show Obj, non-existent value "succeeds"
Reported Date                 : 2/25/94
Found in Baseline             : 1.0.3
Found Date                    : 2/25/94
Severity                      : E
Priority                      : 3
Status                        : open
Duplicate Of                  : 
Fix By Baseline               : 1.2
Fixed In Baseline             : 
Affected File(s)              : 
Diff supplied by              : 
Diff release                  : 
Sensitivity                   : public

[2/25/94 public]
Add attribute TEST_small to the cds_attributes file.  Create directory /.:/dir1 and 
object /.:/dir1/obj1 using CDSCP, then do CDSCP show object /.:/dir1/obj1 with
TEST_small = 40.  The command prompt returns, return code is 0, but nothing is
returned since TEST_small does not have the value 40.  This should not be reported
as success since the show command did not really succeed.  The same problem occurs
with Show Child, Show Link, and Show Directory.



CR Number                     : 10013
Defect or Enhancement?        : def
CR in Code, Doc, or Test?     : doc
Inter-dependent CRs           : 
Project Name                  : dce
H/W Ref Platform              : all
S/W Ref Platform              : all
Component Name                : cds
Subcomponent Name             : command_ref
Short Description             : CDS_DirectoryVersion description unclear
Reported Date                 : 2/24/94
Found in Baseline             : 1.0.3
Found Date                    : 2/24/94
Severity                      : D
Priority                      : 3
Status                        : open
Duplicate Of                  : 
Fix By Baseline               : 1.2
Fixed In Baseline             : 
Affected File(s)              : show_clearinghouse.8cds, show_replica.8cds, and show_directory.8cds
Sensitivity                   : public

[2/24/94 public]
The description of the CDS_DirectoryVersion attribute in the show
clearinghouse man page (it appears in others as well, e.g. show replica) is
unclear: 

  Specifies the current version of the directory in the clearinghouse in
  which the directory was created.

I have no idea what this means.

[2/28/94 public]

Assigning this CR to Ron Johnson at Digital, as it's
my understanding from Hal Lichtin that he has taken
over responsibility from Diana Goldfarb for the CDS
documentation (as well as all of the documentation
that Digital is producing) for DCE 1.1.

[10/25/94 public]
Deferring this CR until 1.2.
The new descriptions of CDS_DirectoryVersion vary somewhat among
the three files listed in this CR.  The description should
probably be made standard.  Or at least, there should be a reason 
for not doing so.

[7/5/95 public]

Reassigned for DCE 1.2. This bug is not obsolete, since
Howard's original comment is still true of the clearinghouse.8dce
manpage. The directory.8dce manpage has the following definition:

  Specifies the current version of the directory (derived from the
  CDS_DirectoryVersion attribute of the clearinghouse in which the
  directory was created). Multiple directory versions are supported
  in a cell.



CR Number                     : 9971
Defect or Enhancement?        : def
CR in Code, Doc, or Test?     : code
Inter-dependent CRs           : 
Project Name                  : dce
H/W Ref Platform              : mx300
S/W Ref Platform              : sinix
Component Name                : cds
Subcomponent Name             : gda_clerk
Short Description             : gda_clerk gives error message on fully resolved cell name
Reported Date                 : 2/16/94
Found in Baseline             : 1.0.3
Found Date                    : 2/16/94
Severity                      : C
Priority                      : 2
Status                        : open
Duplicate Of                  : 
Fix By Baseline               : 1.2
Fixed In Baseline             : 
Affected File(s)              : 
Diff supplied by              : 
Diff release                  : 
Sensitivity                   : public

[2/16/94 public]

I have set up two cells and configured DNS to know about them.

According to the porting guide one can use gda_clerk to test whether
the setup is configured properly.  If I use gda_clerk to test the
configuration I get:

	./gda_clerk
	String Binding: 1daad4a1-2a1f-11cd-a707-0000c0e48656@ncacn_ip_tcp:140.231.30.181[2076]
	Name: /.../p.cells.sni-usa.com
	Flags: done
	ResolvedName:
	UnResolvedName: /.../p.cells.sni-usa.com
	Unresolved name uuid: 11ed2286-49bb-11ca-8f29-08002b0dc46c
	No replica set returned
	CDS error Status 12
	Conversion error: "status 0000000c (unknown facility)"

The debug output from gdad shows that it did really resolve this cellname:

	gdad: receiving bind response from 140.231.30.242[53]
	gdad: enter bindq_ext_to_int
	HID=0;RESPONSE;RA;No error;QDCOUNT=1;ANCOUNT=2;NSCOUNT=1;ARCOUNT=1
	p.cells.sni-usa.com;ANY;IN
	p.cells.sni-usa.com;HINFO;IN
	TTL=-96(4byte)
	RDLength=122;"1 e7a2c461-2a1b-11cd-8ad7-0000c0ea7a56   Master psycho_ch e4f41f20-2a1b-11cd-8ad7-0000c0ea7a56 p.cells.sni-usa.com","DCECDS"
	recv_bind(): post bindq_ext_to_int:dumping recv_answ:
	>Dumping list <0x826a030>:
	>>> rec=0x826ad8c;data=0x826a074
	>>> rec=0x8271a74;data=0x8270d5c
	>>> rec=0x82c4ef8;data=0x82c4188
	>>> rec=0x82c5c98;data=0x82c4f80
	>>> rec=0x82c8a28;data=0x82c7d10
	>>> rec=0x82c97c8;data=0x82c8ab0
	>End of list <0x826a030>
	gdad: recv_bind(); comparing question "/p.cells.sni-usa.com" with answer "/p.cells.sni-usa.com"
	recv_bind(): in matchloop: status = 5
	recv_bind(): after matchloop: found = 1
	recv_bind(): Before mutex lock
	recv_bind(): After mutex lock
	recv_bind(): Sucessfully completed
	bind_process(): About to look at answers
	bind_process(): About to look at head list
	bind_process(): in trucate test loop;tag_rr=1
	bind_process(): in trucate test loop;tag_rr=5
	bind_process(): in e_cds_cell_info_txt;tag_rr=3
	bind_process(): in e_cds_cell_info_txt/e_addr: n1="/p.cells.sni-usa.com";n2="/p.cells.sni-usa.com"
	bind_process(): in e_cds_cell_info_txt;tag_rr=2
	bind_process(): in e_cds_cell_info_txt;tag_rr=3
	bind_process(): in e_cds_cell_info_txt/e_addr: n1="/p.cells.sni-usa.com";n2="/psycho.cells.sni-usa.com"
	bind_process(): Truncation free
	bind_process(): in trucate test loop;tag_rr=3
	bind_process(): in trucate test loop;tag_rr=2
	bind_process(): in e_nameserver;tag_rr=3
	bind_process(): in trucate test loop;tag_rr=3
	bind_process(): seemingly, a match was found; elem:/p.cells.sni-usa.com"
	NS uuid: e7a2c461-2a1b-11cd-8ad7-0000c0ea7a56
	CH uuid: e4f41f20-2a1b-11cd-8ad7-0000c0ea7a56
	bind_process(): an answer was found

I think that the reason this failed was because of the following code in
gda_rpcint.c in built_progress:

	if ((status == DNS_SUCCESS) && (el->unresolved_out_q.fn_length <= 1))
	    switch (type) {
	    case ET_directory:
	    case ET_dirOrObj:
		break;
	    default:
		status = DNS_UNKNOWNENTRY;
	    }

Even though the name was resolved correctly, the status is set to 
DNS_UNKNOWNENTRY.  This is because the gda_clerk passes a 'type' of
ET_object.

It seems like 'ET_object' should be added as part of the case statement
which succeeds.



CR Number                     : 9923
Defect or Enhancement?        : def
CR in Code, Doc, or Test?     : code
Inter-dependent CRs           : 
Project Name                  : dce
H/W Ref Platform              : rs6000
S/W Ref Platform              : aix
Component Name                : cds
Subcomponent Name             : cdsbrowser
Short Description             : CDS Browser slider does not work as documented.
Reported Date                 : 2/9/94
Found in Baseline             : 1.0.3
Found Date                    : 2/9/94
Severity                      : E
Priority                      : 3
Status                        : open
Duplicate Of                  : 
Fix By Baseline               : 1.2
Fixed In Baseline             : 
Affected File(s)              : 
Diff supplied by              : 
Diff release                  : 
Sensitivity                   : public

[2/9/94 public]

In the CDS Browser, when the right slider is used and then released, the entry
which was displayed in the index window is not always at the top of the main
window display.
Sometimes it is a few lines down and sometimes it is not displayed at all.

To reproduce the problem:

Start the Browser and expand the whole namespace using the "Expand All"
option in the "File" menu.

Put the cursor on the slider bar and slide the bar up and down.
A small index window appears at the top of the browser and displays the current
entry.
When you release the mouse button, this entry should be at the top of the main
Browser window, below the line (above the line is the directory path).

Sometimes it is there, sometimes a few lines down and sometimes not on the
display at all.

The description of how this should work is in the OSF User's Guide and
Reference, Chapter 2., Browsing the Cell Namespace.



CR Number                     : 9769
Defect or Enhancement?        : def
CR in Code, Doc, or Test?     : code
Inter-dependent CRs           : 
Project Name                  : dce
H/W Ref Platform              : all
S/W Ref Platform              : all
Component Name                : cds
Subcomponent Name             : gda
Short Description             : gdad reads resolv.conf and
looks for "nameserver" line
Reported Date                 : 1/18/94
Found in Baseline             : 1.1
Found Date                    : 1/18/94
Severity                      : B
Priority                      : 2
Status                        : open
Duplicate Of                  : 
Fix By Baseline               : 1.2
Fixed In Baseline             : 
Affected File(s)              : 
Diff supplied by              : 
Diff release                  : 
Sensitivity                   : public

[1/18/94 public]
gdad does several questionable acts. First, on startup it looks at
/etc/resolv.conf for a "nameserver" line, and will only work if 
this line exists. A correctly configured machine does not need 
to have a "nameserver" line.

The second problem is that it only reads this file on startup, so any
changes made must be followed by a stop and restart of gdad.

gdad should be changed to make a nameservice call through the local
operating system's resolver routines, and let the local OS make the
decisions on who to talk to regarding DNS information.



CR Number                     : 9501
Defect or Enhancement?        : enh
CR in Code, Doc, or Test?     : code
Inter-dependent CRs           : 
Project Name                  : dce
H/W Ref Platform              : all
S/W Ref Platform              : all
Component Name                : cds
Subcomponent Name             : 
Short Description             : make failure behavior of rpc_server_init() more robust.
Reported Date                 : 11/17/93
Found in Baseline             : 1.0.2
Found Date                    : 11/17/93
Severity                      : D
Priority                      : 3
Status                        : open
Duplicate Of                  : 
Fix By Baseline               : 1.2
Fixed In Baseline             : 
Affected File(s)              : directory/cds/library/rpcserver.c
Diff supplied by              : 
Diff release                  : 
Sensitivity                   : public

[11/17/93 public]

The rpc_server_init() routine in cds/library/rpcserver.c calls
rpc_ep_resolve_binding() for each partially bound server handle. If any of
these calls fail, rpc_server_init() fails rather then simply try the next
handle. In the case of multiple network interfaces it seems reasonable to
expect the system to come up in a degraded mode as long as some path to
rpcd is known (e.g. only one of several network interfaces is down).



CR Number                     : 9499
Defect or Enhancement?        : enh
CR in Code, Doc, or Test?     : code
Inter-dependent CRs           : 7031
Project Name                  : dce
H/W Ref Platform              : all
S/W Ref Platform              : all
Component Name                : cds
Subcomponent Name             : 
Short Description             : intercell cdscp operation which succeeds while unathenticated may fail when authenticated
Reported Date                 : 11/17/93
Found in Baseline             : 1.0.3
Found Date                    : 11/17/93
Severity                      : D
Priority                      : 2
Status                        : open
Duplicate Of                  : 
Fix By Baseline               : 1.2
Fixed In Baseline             : 
Affected File(s)              : 
Diff supplied by              : 
Diff release                  : 
Sensitivity                   : public

[11/17/93 public]

Received: by inet-gw-2.pa.dec.com; id AA26334; Tue, 16 Nov 93 14:53:46
-0800
Received: by us1rmc.bb.dec.com; id AA25244; Tue, 16 Nov 93 17:31:02 -0500
From: mccann@tuxedo.enet.dec.com
Message-Id: <9311162231.AA25244@us1rmc.bb.dec.com>
Received: from tuxedo.enet; by us1rmc.enet; Tue, 16 Nov 93 17:52:57 EST
Date: Tue, 16 Nov 93 17:52:57 EST
To: dce-tech@osf.org
Cc: mccann@tuxedo.enet.dec.com
Apparently-To: dce-tech@osf.org
Subject: inter-cell access

As an unauthenticated user you can view the namespace of another cell
that has allowed unauthenticated read access to its entries as long
as the GDA can find the cell.

Now if you dce_login and try to view the same foreign cell as above
but the 2 cells have not cross-registered (using rgy_edit cell),
you get 'register object not found'.

There has been some here discussion about this behavior.  People don't
like it.  


Current ideas:
1. Because there is no trust relationship between the two cells,
   the user is unauthenticated to the foreign cell.

2. Applications (cdscp in particular) should make unauthenticated requests
   after seeing 'registry object not found' errors.  It could then let
   the user know.

3. The CDS child could do the same, but then the user isn't aware
   of what just happened.


What's wrong with this picture??

janet mccann



CR Number                     : 9347
Defect or Enhancement?        : def
CR in Code, Doc, or Test?     : code
Inter-dependent CRs           : 
Project Name                  : dce
H/W Ref Platform              : all
S/W Ref Platform              : all
Component Name                : cds
Subcomponent Name             : cds/control/paser_aid_2.c
Short Description             : parser_aid aborts on missing
input file
Reported Date                 : 11/3/93
Found in Baseline             : 1.0.3
Found Date                    : 11/3/93
Severity                      : B
Priority                      : 2
Status                        : open
Duplicate Of                  : 
Fix By Baseline               : 1.2
Fixed In Baseline             : 
Affected File(s)              : 
Diff supplied by              : 
Diff release                  : 
Sensitivity                   : public

[11/3/93 public]

 The code in the routine pass_1_file does not check whether its
 attempt to open an input file was successful.  If the attempt fails,
 the resulting bogus FILE pointer is passed to fgets, which bombs out
 on a SEGV.
 
The suggested fix is to check the return from fopen2().



CR Number                     : 9294
Defect or Enhancement?        : enh
CR in Code, Doc, or Test?     : test
Inter-dependent CRs           : 
Project Name                  : dce
H/W Ref Platform              : all
S/W Ref Platform              : all
Component Name                : cds
Subcomponent Name             : cds func tests
Short Description             : cdstest and func test driver should be picked up in 1.1
Reported Date                 : 10/29/93
Found in Baseline             : 1.0.3
Found Date                    : 10/29/93
Severity                      : C
Priority                      : 2
Status                        : open
Duplicate Of                  : 
Fix By Baseline               : 1.1
Fixed In Baseline             : 
Affected File(s)              : 
Sensitivity                   : public

[10/29/93 public]
In the cds functional tests, there are a functional test cdstest: 
cdstest.c cdstest.sh and cds functional tests driver: dcesx/tp.sh.
The cdstest excises the cds clerk API and should increase our 
test coverage largely. dcesx/tp.sh is actually a test triver script
for all cds functional tests (cdspi, cdscp, acl, nsi). Currently, this
two are not used and not documented, they should be picked up in 1.1
timeframe to increate the test coverage and make it easy to run and log
tests and check the test results.



CR Number                     : 9052
Defect or Enhancement?        : def
CR in Code, Doc, or Test?     : code
Inter-dependent CRs           : 
Project Name                  : dce
H/W Ref Platform              : hppa
S/W Ref Platform              : hpux
Component Name                : cds
Subcomponent Name             : gda init_client()
Short Description             : search for dns server fails to default to localhost
Reported Date                 : 10/6/93
Found in Baseline             : 1.0.3
Found Date                    : 10/6/93
Severity                      : C
Priority                      : 2
Status                        : open
Duplicate Of                  : 
Fix By Baseline               : 1.2
Fixed In Baseline             : 
Affected File(s)              : src/directory/cds/gda/gda_bind.c
Diff supplied by              : 
Diff release                  : 
Sensitivity                   : public

[10/6/93 public]

The init_client() routine in src/directory/cds/gda/gda_bind.c does
not find a dns server running on the localhost unless it is explicitly
mentioned in the gda configuration files.  Since this would normally
be the dns server of choice, it would be nice to automatically default
to localhost if no explicitly configured server is found.  The following
addition to init_client accomplishes this and has been tested on hppa/
hpux:

	(void) fclose(fp);

new>	if( nameser_list.head == (element_t *)NULL )
new>	{
new>		/* we haven't found anything yet, use localhost */
new>
new>		if((nameser = (rr_el_t *)malloc(sizeof(rr_el_t))) == NULL)
new>		{
new>			error_exit(INIT_CLIENT_FUNC, SEV_DEATH,
new>				MALLOC_ERR_ST, errno, "nameser malloc", -1);
new>		}
new>		ALLOC(rr_el_t, 8)
new>
new>		dotname_to_fullname(".", &nameser->dname_rr);
new>		nameser->class_rr = C_IN;
new>		nameser->auth_rr = 1;
new>		nameser->tag_rr = e_addr_nameserver;
new>
new>		nameser->rr.adns.mach_addr.sin_family = AF_INET;
new>		nameser->rr.adns.mach_addr.sin_addr.s_addr = (u_long)inet_addr("127.0.0.1");
new>		nameser->rr.adns.mach_addr.sin_port = ns_port;
new>		bcopy(&eight_zeros, nameser->rr.adns.mach_addr.sin_zero, 8);
new>
new>		nameser->rr.adns.auth = 1;
new>		nameser->rr.adns.used = 0;
new>		nameser->rr.adns.path = DATAGRAM;
new>
new>		if((status = l_insert_nl((char *)&nameser, &nameser_list,
new>			(element_t *)NULL)) != OK)
new>		{
new>			error_exit(INIT_SERVER_FUNC, SEV_DEATH,	L_INSERT_NL_ERR_ST,
new>				status,	"nameser l_insert_nl", -1);
new>		}
new>	}

	return (OK);



CR Number                     : 8886
Defect or Enhancement?        : enh
CR in Code, Doc, or Test?     : code
Inter-dependent CRs           : 8196
Project Name                  : dce
H/W Ref Platform              : all
S/W Ref Platform              : all
Component Name                : cds
Subcomponent Name             : cdsd
Short Description             : Need a way to force background task to run
Reported Date                 : 10/1/93
Found in Baseline             : 1.0.3
Found Date                    : 10/1/93
Severity                      : C
Priority                      : 2
Status                        : open
Duplicate Of                  : 
Fix By Baseline               : 1.2
Fixed In Baseline             : 
Affected File(s)              : 
Diff supplied by              : 
Diff release                  : 
Sensitivity                   : public

[10/1/93 public]

When the machine's IP address for a CDS server is changed, the background
task in cdsd eventually recognizes the confusion and fixes all of the old
references. 

This enhancement request is for a management interface to wake up the
background task to force this fixup.

[10/1/93 public]
This CR has some similarity  to OT#5915 which basically is that relocation of
a clearinghouse takes at least a hour to work because the change of ip address
gets propagated at least in (a) hours.



CR Number                     : 8683
Defect or Enhancement?        : enh
CR in Code, Doc, or Test?     : code
Inter-dependent CRs           : 
Project Name                  : dce
H/W Ref Platform              : rs6000
S/W Ref Platform              : aix
Component Name                : cds
Subcomponent Name             : 
Short Description             : The intercell does not work
between two cells when one GDS cellname is a subset of the other.
Reported Date                 : 9/24/93
Found in Baseline             : 1.0.2
Found Date                    : 9/24/93
Severity                      : B
Priority                      : 2
Status                        : open
Duplicate Of                  : 
Fix By Baseline               : 1.2
Fixed In Baseline             : 
Affected File(s)              : 
Diff supplied by              : 
Diff release                  : 
Sensitivity                   : public

[9/24/93 public]

Machine A had GDS client/server & DCE installed.  Machine B had GDS client
only and DCE installed. DCE cellname of Machine A was
/.../C=us/O=ibm/OU=austin and that of B was
/.../C=us/O=ibm/OU=austin/OU=dce.

The entries of these cell names were added to GDS with correct values for
the attributes CDS_Cell and CDS_Replica.

After all these setup were done,  we are not able to read information from
the remote cell, which is on machine B.  Neither through XDS/XOM interface
nor through CDSCP.  In XDS/XOM, we get the error DS_E_NO_SUCH_OBJECT and in
CDSCP we get the following error message:

	Error on entity: /.../C=us/O=ibm/OU=austin/OU=dce/xyz
	Requested entry does not exist (dce/ cds)
	Function: dnsEnumAttr
	dnsEnumAttr: partial results = /.../C=us/O=ibm/OU=austin

The similar setup works if the cell name of the remote CDS cell is changed
from /.../C=us/O=ibm/OU=austin/OU=dce to /.../C=us/O=ibm/OU=texas/OU=dce.

It appears that if the cell name is the subset of the other cell name the 
above stated problem is seen.

[9/26/93 public]
The above is not a valid configuration.  It probably needs to be resolved
in the documentation.  To use the terms above, it is not legal to name a
cell as a subset of another.  In other words, while traversing a fully
qualified name, if there is a way to cross into another namespace, it will
be taken.  So when /.../C=us/O=ibm/OU=austin was reached, the name
resolution entered the CDS space of this cell, then it tried to find a CDS
entry called "OU=dce" and it wasn't there.

There are some issues here that will probably be resolved with the
Hierarchical Cells work in DCE 1.1.  In particular that the directory
servies resolve names by looking at the whole name and resolving them by
removing RDN's from the end to see if they can find the server closest to
the actual objects.  Other services in DCE (certainly security and maybe
DFS) resolve names by starting at the begining and resolving each RDN,
traversing any junctions found.  This means that the directory services
will allow you to create configurations that the rest of DCE can't use (as
shown by this bug).

This defect should probably be cancelled or converted into a doc bug.

[11/03/93 public]

I got a query into this OT from an interested end user.

His company's naming policy suggests using similar naming structures with
gds names. He belives that the current behavior is a problem. Even if DCE
1.1 fixes the problem, he will not get it from vendors until mid of 95. So
his first wish is to see it addressed in 1.0.3.

I don't know how DCE 1.1 will address this problem, but it is surly a
problem to solve if we want DCE to be really scalable. Using a structured
name scheme to name cells is very important to manage big number of cells.

I think one reason why cds chose to search the name from left to right is
that cds allows the user to create a dir/obj name with "=" in it. For
example, it is possible to create a directory /.:/ou=dce. Parsing or
traversing from right to left, you don't know where the cell name ends and
you have to do a gds query for every possibility. For a long name with "=" 
in every section of the name, such a parsing would take a longer time.

Maybe the solution is to disallow cds name with "=". In that case, it would
be easy to figure out where the cell name should end, like the case for DNS
cell name.

In any case, I don't think we should cancel this OT. Can we raise the 
priority? I know the chance to get it into 1.0.3 is little, but ...

[11/3/93 public]
The equal sign in the name isn't the problem. Your asking for hierarchical
cells. The following wouldn't work either.

Cell 1
/.../us/ibm/austin



Cell 2
/.../us/ibm/austin/dce

Attempting to reference an object in cell 2, 
/.../us/ibm/austin/dce/foobar from cell 1 will fail. To do this you need 
hierarchical cells. This a big piece of work planned for 1.1. Its very
unlikely that 1.0.3 would be held for it. I'm going to make this an
enhancement request for 1.1 which will get closed when the hierarchical
code comes in.

[11/3/93 public]
Let's be clear here: there is no chance any of this will make it into
1.0.3.  Sorry, but we freeze shortly and this is a lot of work.

This bug describes a problem in the GDS space, hierarchical cells deals
ONLY with cds names.  H-cells as currently spec'ed will NOT change this
behavior either.

This issue of how names are traversed is an interesting one.  Federated
naming and related systems (acls, rnd, etc.) all do traversals from left to
right so that you can know if you are going through a junction.  If a name
can span many namespaces you don't know what server you need to contact to
look for the whole name, you do know who to contact for the top of the
name, and you can traverse each component going through junctions as
needed.  That's why our parsing works that way.  

The weird and somewhat immaterial issue is that often directory services
look at the whole name for performance reasons.  If you give GDS or CDS a
whole name to look up, the server receiving the request will in a sense
evaluate the name from right to left to save time.  E.g. you give CDS the
name: /.:/a/b/c/d/e the server will say do I have this whole name?  If the
answer is no it will say, do I know which server contains /.:/a/b/c/d?  If
so then the request goes to it, if not it removes the last component and
tries again.  It knows that if it gets to the root it can go to someone so
the algorithm will terminate.  GDS works the same way.

Unfortunately other DCE components using the name spaces work the other
way.  For example, DFS in the namei() rountine has to track each component
name from left to right.  So given: /.:/C=US/O=OSF/OU=DCE it first asks GDS
about the US then about the US/OSF part then about the US/OSF/DCE name,
etc.  It's this discrepancy that causes some problems.  For example, in the
H-cell work both SEC and CDS need to have a concept of H-cells.  CDS
evaluates names one way and SEC evaluates names the other way.  CDS will
let you build an H-cell that SEC can't use.  The answer (for now) is don't
do that.

Now the = point.  The DCE string syntax is defined to allow you to enter
names in either a DNS cell or a GDS cell.  The GDA does the following:

	If there is a /... at the front?  
	   If there is an unescaped equal sign in the first component of
             the name send it to GDS
	   Otherwise send to DNS.

Now the GDS part of the GDA uses the junction model, it pings the GDS for
each component of the name from left to right and as soon as it finds a CDS
cell it goes there.  That is the documented behavior.  This means you can't
set up cells as mentioned in this bug.  That needs to be made clearer.

I've added Dick and Walt to the CC list to correct me if I'm mistaken on
any of these points.  I happen to think that what IBM wants is a good
thing, but it is NOT the way junctions work.

[11/11/93 public]
I have to retract some of my statements above.  We have a better
understanding of the problem so here again is another attempt at a complete
explanation: 

First, I was incorrect in saying that the GDA does a lookup one RDN at a
time looking for the first object that points to a cell.  The code does NOT
do this.  The GDA does a syntax check on the name, finds the first RDN that
does not have an = in it and sends all the prior RDNs to GDS to be looked
up at once.  In other words, the longest matching GDS cellname is found.
It is intersting that 3 different sources understood this NOT to be the
case, but it is what the code does.

So, how is the symption reported by the bug happening?  There are some
details that have to be inferred from the report.  The major one is that
they are trying to contact the child cell from the parent.  The names are
going through CDS (I'd have to figure out exactly what code path is taken
between components) and it's CDS that is having the problem.  

CDS keeps comparing for a match by removing the last element of the name
from the right hand side of the name.  It does this until there are no
elements of the name left or there is a match.  So, if you look up a name
in the child cell, and CDS looks in the cache, if a name in the child cell
is not there (i.e., this is the first time you are looking in the child
cell and CDS doesn't know about it), then it will keep stripping off RDN's
from the right until it runs out.  But when it strips of the RDN naming the
child cell, the name left is that of the parent.  If the parent is found in
the cache (and if you are in the parent cell, then obviously your own cell
name will be found in the cache) then the request goes there.  Now, I'm not
exactly sure of where everything I've mentioned happens.  I'm not sure if
this is in CDS cache code or CDS GDA code or where.  Someone needs to find
out.  My understanding is that IBM (Garry L. Child, email: garry) has a fix
for this.

Now once they fixed this they ran into a security problem.  This happened
when trying to configure these two cells for intercell communication.
Using the rgy_edit cell command, you create new principals for other cells
in your registry as part of intercell setup.  If you have the parent cell
setup, i.e., the name "krbtgt/c=us/o=ibm/ou=austin" is in the rgy, you
can't add the name "krbtgt/c=us/o=ibm/ou=austin/ou=dce" because the first
one is a princ type and not a directory type.  The ability to do this (i.e,
have a directory be both a directory and a principal) is known as
supporting polymorphic objects, and HP is planning on doing this as part of
their Hierarchical Cells work for DCE 1.1.

I've heard the HP (Joe Pato and Anne Anderson) have commented on this
problem and that that even though security will support this configuration
when polymorphic objects are implemented, since DCE resolves names to find
the shortest possible cellnames, the configure won't work.  Now I do NOT
know if they are refering to the same issues that we previously thought and
were incorrect on, or if there is something else.

Steps that I believe need to be taken to resolve this:

 * Find out what CDS code does the parsing using a method that gets the
   shortest cellname.
 * Either fix it ourselves or better yet, get the IBM fix if it is
   sufficient. 
 * Find out if there are any other security problems with this
   configuration or do they only occur when setting up intercell.
 * Find out if any other components "parse names" and if so how.  For
   example, I *think* that DFS parses names to find the shortest possible 
   cellname, but I'm not sure.
 * OSF needs to state categorically whether H-cells are supported in some
   or all namespaces (e.g., they are not supported in DCE 1.0 CDS, but they
   will be supported in DCE 1.1 CDS.  They are supported in DNS.  Are they
   supported in X.500?  Do they need to be supported in any future
   namespaces?)  Also "supported" needs to be clearly defined.  To be
   supported by DCE, all DCE components must function.  If not then we need
   to be able tell customers what will happen if they try this (or simply
   say, don't do that).  This means we must state how names are to be
   parsed, and correct any code that does this incorrectly.

This should all make for a fun discussion on dce-tech or Tech Conference
Calls.  :-)

[11/15/93]

I am Jay N. working for Garry Child.  We at IBM made an attempt at
identifying the changes that are needed to support the naming convention
without getting to the details of H-cell implementation.  We started with
the assumption that only the parsing of the name need to be modified
appropriately to support this naming convention.

In cdsclerk the tree walk is performed by traversing the fully qualified
name from right to left.  This is done in clerk_WalkTree()

[clerk_tree_walk.c]. The rightmost simple name is stripped
(childStripRSimple()) then the requested object is looked up in the cache.
If it is not found in the cache, then the requested name is provided to
the server which would either resolve that name or provide the clerk with
a referral list of clearinghouses.

If a referral list is obtained then an attempt is made to choose an
object that best suits the requested name by contacting the servers of
each clearinghouse in the list. In doing so the GDA may also be contacted
because of the dummy clearinghouse(...gda_ch).

On the server side, the unresolved name is used to perform the tree walk.
This is done in the walktree_assist() [ta_lookup.c]. The rightmost simple
name is stripped and an attempt is made to build a clearinghouse list to
be returned to the clerk .  The above is repeated till the simple names
are exhausted or a list of clearinghouse is built.

These are the relevant routines that we identified, where the parsing
of the names are performed.

The following functions were modified to support the customer's naming
convention:

        Process         File                    Function
        -------         ----                    --------

        cdsclerk        clerk_miscel.c          childStripRSimple()

        cdsd            names_lib.c             names_stripright()
                        ta_lookup.c             walktree_assist()

The algorithm was modified to look for a "=" character in the RDNs
and to conclude that it is part of a cellname and to stop stripping any
further.  The idea is to retain the cellname and pass it on to GDA so
that GDS would resolve the name.

By introducing this simple fix we were able to do unauthenticated
intercell operations.  But the "cell" command of rgy_edit failed due to
the reasons that are well understood (explained above by melman).

The objective was to identify the processes and functions that are
affected and to understand the incompatibility and interoperability
issues.  So we used this simple [test]case where CDS objects do not
have names with the "=" character and the GDS names do not have an
escaped "=" character.

We strongly concur with melman that OSF needs to state categorically
whether this naming convention is supported in some/all namespaces.
Even though we have a partial fix, because of potential interoperability
problems that may arise due to the security changes that need to be made,
we recommend, considering the current scenario of 1.0.3 freeze, that the
H-cell be supported only in 1.1 release.

The customers need to be notified about the current limitations in the
cell naming and if possible suggest an easy migration path for them to
H-cell.

[11/15/93 public]

I will append my early mail to dce-ot-cds here regarding this OT. I believe
that the main problem is, with current naming scheme, the cell name and cds
name are mixed together. How to determien the cell name is the main issue
here. Once the cell name is found, the rest can be processed by cds as
whatever happens now. IBM's simple fix of using "=" to detemrine the cell
name is trying to address this problem, although it will not work if people
put "=" in their cds names, which is legal.

I was thinking of providing a way to uniquely identify a cell name, just
like /.:/ will do. For example (there can be many ways to clearly specify a
cell name), /.../cell_name:/cds_name.

With /.../cell_name:/cdsname or /.:/cds_name, one knows what the cell name
should be immediately. For cds name part, do what the current DCE does
(either parse it from left to right to find junctions, or right to left to
save time. Whatever).

For the cell_name part, assuming it is a/b/c/d where a:b:c:d can be either
DNS or GDS format, we can do the following:

- for current dce, simply try to find cell information with cell_name
through either DNS or GDS. If not found, return error.

- For 1.1 where hierarchical cell is supported, if a/b/c/d can be found
from external directory service, go for it. Otherwise check if DNS/GDS can 
resolve a/b/c and if so, whether cell a/b/c has a child cell pointer to d.
if so, you go to d from cell a/b/c. If not, check if DNS/GDS can provide
info for cell a/b and if so whether cell a/b can provide child for c/d or c
that from c to d. etc.

I just read the DEC's hcell spec. Clearly, the spec only addresses the
hierachy that a cell name can have. It assumes, unstated, that you know
what the cell name is.

To summarize, I believe that the problem lies in the fact that cell name is
hard to determine, hence forcing us to mix the different treatments for cds
names with cell name resolution. Then, of course, is the security problems.

[11/15/93 public]
Currently it is policy that the first CDS name beneath a GDS name not have
an = in it.  This is in the AES.  Thanks very much for the comments Jay N.,
the more we all know and share about this the better.

I have not thought through the implications of H-cells in naming cells in
the CDS space, but clearly this must be done.  At first thought I am
against adding info into our string syntax to identify cell names.

[11/15/93 public]

It is good to know that "=" is not allowed in the first cds name, which
makes IBM's fix a feasible one.

But when 1.1 H-cell is out, any level of hierarchy is possible. A cell name
can be a/b/c/d, where a/b/c/d can be anything. Clearly "=" identification
will be far from enough.

The current DEC spec of H-cell talks about cell names, what and how
hierarcy of cell name will work. THere is no statements about how a cell
name should be determined.

I understand the implication it has if we introduce a new naming scheme.
But with the current name parsing, to work well with H-cell, it may mean
much overhead. Let say we want to search /.../a/b/c/d/e/f from cell /.../A.
Cds does right to left search in the cache. Nothing found. Now it is
inter-cell time. Since H-cell is possible. there are 5 or 6
possibilities to check. No matter you search from left to right or right to
left, to be complete, you have to do backtracking (i.e., one shot searching
that is used now for determinign the cell name is no longer enough):

1. from left to right:
	if a is a cell name (from DNS or GDS) {
	    if (b/c/d/e/f is cds name) {
		done
	    }
	    else {
	      if (b is a child pointer) {
		if (c/d/e/f is cds name) {
		  done
		}
		else {
		  if (c is a child pointer}
	....
	}
	else if a/b/is a cell name (from DNS/GDS) {
	    if (c/d/e/f is cds name)
	....

2. from right to left:
	if a/b/c/d/e/f is cell name (from DNS/GDS) {
		done
	}
	else if (a/b/c/d/e is cell name) {
	  if (f is cds name) done
	  else if (f is child pointer) done
	  else error
	}
	else if (a/b/c/d is cell name) {
	  if (e/f is cds name) done
	  else if (e is child ptr) {
	    if (f is cds namae) done
	    if 
 	....

As can be seen, the search space grows exponentially with more "/"s. If
you type in a wrong name, be prepared to wait for a while before being
notified an error.

Clearly specifying the cell name will cut down the search space
significantly. 

I would like to see other posisble search/parsing algorithms that are
faster and complete (covers all possible situations).



CR Number                     : 8652
Defect or Enhancement?        : enh
CR in Code, Doc, or Test?     : code
Inter-dependent CRs           : 
Project Name                  : dce
H/W Ref Platform              : other
S/W Ref Platform              : other
Component Name                : cds
Subcomponent Name             : cds/control
Short Description             : Compiler warnings
Reported Date                 : 9/22/93
Found in Baseline             : 1.0.2
Found Date                    : 9/22/93
Severity                      : E
Priority                      : 4
Status                        : open
Duplicate Of                  : 
Fix By Baseline               : 1.2
Fixed In Baseline             : 
Affected File(s)              : 
Diff supplied by              : 
Diff release                  : 
Sensitivity                   : public

[9/22/93 public]

The licensee reported the following compiler warnings:

     confidence.c, default_ent.c, dnscp_crekind.c, dnscp_creobj.c,
     dnscp_cresl.c, dnscp_delkid.c, dnscp_delobj.c, dnscp_delsl.c,
     dnscp_replica.c, emit_one_line.c, emit_ref_hdr.c, exec_docmod.c,
     preferred_clh.c
     ---------------

"/dce/dce_8/src/directory/cds/control/confidence.c", line 81: warning: dubious
tag declaration: struct op_blk
"/dce/dce_8/src/directory/cds/control/confidence.c", line 93: warning: dubious
tag declaration: struct op_blk

     The header file op_list_defs.h should be included to prevent a dubious
     tag declaration warning.

     emit_cds_values.c
     -----------------
     At line 258:

     for (i=0; i<value_p->val_u.val_byte.length; i++, ++thechar) {
          SHOULD BE REPLACED WITH
     for (i=0; i<(int)value_p->val_u.val_byte.length; i++, ++thechar) {

The better fix is to declare i as an unsigned type.

     emit_member_lines.c, emit_pptimeout_lines.c, emit_towerset_lines.c,
     emit_replica_pointer_lines.c, emit_timeout_lines.c, emit_tower_lines.c,
     err_report.c
     ------------

"/dce/dce_8/src/directory/cds/control/emit_member_lines.c", line 53: warning:
dubious tag declaration: struct msgblk
"/dce/dce_8/src/directory/cds/control/emit_member_lines.c", line 54: warning:
dubious tag declaration: struct op_blk

     The header files op_list_defs.h and msgblk.h should be included to
     prevent a dubious tag declaration warning.


     process_commands.c
     ------------------

"/dce/dce_8/src/directory/cds/control/process_commands.c", line 73: warning:
dubious tag declaration: struct op_blk
"/dce/dce_8/src/directory/cds/control/process_commands.c", line 74: warning:
dubious tag declaration: struct msgblk
"/dce/dce_8/src/directory/cds/control/process_commands.c", line 75: warning:
dubious tag declaration: struct entblk
"/dce/dce_8/src/directory/cds/control/process_commands.c", line 76: warning:
dubious tag declaration: struct attrblk
"/dce/dce_8/src/directory/cds/control/process_commands.c", line 77: warning:
dubious tag declaration: struct logblk
		
     The header files op_list_defs.h, msgblk.h, and ncl_environment.h
     should be included to prevent a dubious tag declaration warning.

[09/22/93 public]
These complaints all seem to be about code like the following:
	foo(a1, a2)
	    struct foobar *a1;
	    struct foodle *a2;
	{
	    ...
	}
Where the structures are not defined in any of the #include'd header files.

This defect should be cancelled.  This is a valid, and very powerful, C
programming technique.  It's known as information hiding:  it is a clean
way of passing typed, yet opaque, pointers around.  The compiler warnings
are spurious; Stratus should fix their compiler.



CR Number                     : 8644
Defect or Enhancement?        : enh
CR in Code, Doc, or Test?     : code
Inter-dependent CRs           : 
Project Name                  : dce
H/W Ref Platform              : all
S/W Ref Platform              : all
Component Name                : cds
Subcomponent Name             : cds/child
Short Description             : Compiler warnings in cdsclerk code
Reported Date                 : 9/21/93
Found in Baseline             : 1.0.2
Found Date                    : 9/21/93
Severity                      : E
Priority                      : 4
Status                        : open
Duplicate Of                  : 
Fix By Baseline               : 1.2
Fixed In Baseline             : 
Affected File(s)              : 
Diff supplied by              : 
Diff release                  : 
Sensitivity                   : public

[9/21/93 public]

The licensee reported the following compiler warning. They are the warnings
for automatic conversion between signed and unsigned entities. Warnings
indicate that when converting a signed to unsigned, there is chance of
compilication that a negativenumber may become a big positive number.

     clerk_prm.c
     -----------
          At line 165:

          if ((adr = EXT32(adr_p)) && (0 < len) && (len <= EXT16(&adr_p[4]))) {
               SHOULD BE REPLACED WITH
          if ((adr = EXT32(adr_p)) && (0 < len) && (len <= (int)EXT16(&adr_p[4]))) {


This fix is not good. If EXT16 (unsigned) returns big enough, converting to 
int may cause problem. Better declare len as unsigned too.

     clerkreadattribute.c
     --------------------
          At line 433:

          for (i = 0; i < value.tagged_union.wholeEntry_p->numberOfAttributes; i++) {
               SHOULD BE REPLACED WITH
          for (i = 0; i < (int)value.tagged_union.wholeEntry_p->numberOfAttributes; i++) {

Again, better declare i as the same type of 
value.tagged_union.wholeEntry_p->numberOfAttributes.



CR Number                     : 8641
Defect or Enhancement?        : enh
CR in Code, Doc, or Test?     : code
Inter-dependent CRs           : 
Project Name                  : dce
H/W Ref Platform              : other
S/W Ref Platform              : other
Component Name                : cds
Subcomponent Name             : cds/adver
Short Description             : Compiler warnings in cds adver
Reported Date                 : 9/21/93
Found in Baseline             : 1.0.2
Found Date                    : 9/21/93
Severity                      : E
Priority                      : 4
Status                        : open
Duplicate Of                  : 
Fix By Baseline               : 1.2
Fixed In Baseline             : 
Affected File(s)              : 
Diff supplied by              : 
Diff release                  : 
Sensitivity                   : public

[9/21/93 public]

The licensee reported the following compiler warnings. The licensee feels
strongly that OSF should address these warnings:

"I can summarize my group's feelings in few brief points:

- - OSF should provide warning free DCE code so that if we see new warnings we
  can adequately address the problem. We can't ignore them. Sorry!!

- - Portable code will help DCE customers like Stratus as we have to manage
  multiple hardware platforms with different architectures and compilers.

- - Since DCE has multiple releases and we want to see DCE improving so that
  our overhead in porting DCE is reduced every time we port new update, its in
  Stratus' best interest that the problems we find get fixed in a finite time
  frame and that the newer release of DCE reflects that fix.

- - It is annoying to see 2000 warnings when we build DCE and the real problem
  warning will hide between these 2000 stagnant warnings. It takes REAL time
  to check/trace if the warning is a real problem or not. We can't waste time
  doing the same thing over and over again.
"

Note, I don't agree all of their fixes. I will point out below.

Almost all warnings happen among automatic conversion between a signed
entity and an unsigned entity. Since by converting a signed one into
unsigned, there is chance that a negative number may become a big positive
number. Thus the compiler gives a warning. At times when a constant integer
is involved, the compiler should be smart enough to know that converting a
positive constant will NOT introduce the possible problem. But the compiler
used by the licensee obviously does not possess such a feature.

The following is reported by the licensee:

     adver_clerk_event.c
     -------------------
          At line 3298:

          for (i = 0; i < oldcle_p->ch_length; i++)
               SHOULD BE REPLACED WITH
          for (i = 0; i < (int)oldcle_p->ch_length; i++)


          At line 4190:

          for (i = 0; i < rpc_p->rpc_nscle.ch_length; i++) {
               SHOULD BE REPLACED WITH
          for (i = 0; i < (int)rpc_p->rpc_nscle.ch_length; i++) {


          At lines 4308 and 4337:

          for (i = 0; i < ch_p->ch_length; i++) {
               SHOULD BE REPLACED WITH
          for (i = 0; i < (int)ch_p->ch_length; i++) {


     adver_dacl.c
     ------------
          At line 885:

          for (i = 0; i < p->num_groups; i++) {
               SHOULD BE REPLACED WITH
          for (i = 0; i < (int)p->num_groups; i++) {

          At line 895:

          for (i = 0; i < p->num_foreign_groups; i++) {
               SHOULD BE REPLACED WITH
          for (i = 0; i < (int)p->num_foreign_groups; i++) {


     adver_service_ncl.c
     -------------------
          At lines 1400 and 1418:

          if (strlen(name_string)>SIMPLENAMEMAX) {
               SHOULD BE REPLACED WITH
          if ((int)strlen(name_string)>SIMPLENAMEMAX) {


     adver_sysdep_unix.c
     -------------------

          At line 584:

          okay = (strlen(sockname) <= K_MAX_SOCKNAME);
               SHOULD BE REPLACED WITH
          okay = ((int)strlen(sockname) <= K_MAX_SOCKNAME);


I would say a better way is to cast K_MAX_SOCKNAME into size_t:

	  okay = (strlen(sockname) <= (size_t)K_MAX_SOCKNAME);

[09/21/93 public]
There was recently another OT that dealt with similar issues.  I don't
remember the number -- Mr. Monzillo probably can.  I agree with Stratus's
sentiment that clean builds are the goal.  However, I disagree with the
fixes they suggest; I prefer what Ron suggested in the other OT.  I think
OSF DCE should have a consistent style for how to handle these things --
one component should not be adding casts while the other is changing the
types of loop variables.
     adver_clerk_event.c
     -------------------
     At line 3298:
	 for (i = 0; i < oldcle_p->ch_length; i++)
Rather than adding (int), it is probably more proper to declare i to be
the appropriate unsigned type.  Suppose ch_length becomes more than could
fit in an int?

I do agree with Wei-Dong that strlen() should not be casted, but that the
other side of the relational should be.



CR Number                     : 8640
Defect or Enhancement?        : enh
CR in Code, Doc, or Test?     : code
Inter-dependent CRs           : 
Project Name                  : dce
H/W Ref Platform              : mx300
S/W Ref Platform              : sinix
Component Name                : cds
Subcomponent Name             : 
Short Description             : Macro redefinition on SVR4
Reported Date                 : 9/21/93
Found in Baseline             : 1.0.2
Found Date                    : 9/21/93
Severity                      : E
Priority                      : 4
Status                        : open
Duplicate Of                  : 
Fix By Baseline               : 1.2
Fixed In Baseline             : 
Affected File(s)              : 
Diff supplied by              : 
Diff release                  : 
Sensitivity                   : public

[9/21/93 public]

Licensee reported the following problem on SVR4 system:

     adver_sysdep_unix.c (cds/aver/adver_sysdep_unix.c)
     -------------------
          The header file nl_types.h should be included directly after
          dtssdef.h to eliminate a macro redefinition.  

"/usr/include/limits.h", line 126: warning: macro redefined: NL_SETMAX
"/usr/include/limits.h", line 127: warning: macro redefined: NL_TEXTMAX

	  Thus, the block of
          includes should look like:

          #include <que.h>
          #include <dtssdef.h>
          #include <nl_types.h>
          #include <dtssmacros.h>
          #include <sysdep.h>
          #include <dnsadverdef.h>
          #include <dns_strings.h>

Verifying with sni2 indicates that both limits.h and nl_types.h define the
two constants. In nl_types. There is a "#ifndef NL_SETMAX" in nl_types.h, that
is why it should be included later.

Other reference platforms (rios, osf/1, and hp-ux) all define NL_SETMAX
once in <limits.h>.



CR Number                     : 8591
Defect or Enhancement?        : enh
CR in Code, Doc, or Test?     : code
Inter-dependent CRs           : 
Project Name                  : dce
H/W Ref Platform              : all
S/W Ref Platform              : all
Component Name                : cds
Subcomponent Name             : 
Short Description             : Interoperability problem on clearinghouse relocation
Reported Date                 : 9/14/93
Found in Baseline             : 1.0.3
Found Date                    : 9/14/93
Severity                      : C
Priority                      : 1
Status                        : open
Duplicate Of                  : 
Fix By Baseline               : 1.2
Fixed In Baseline             : 
Affected File(s)              : 
Diff supplied by              : 
Diff release                  : 
Sensitivity                   : public

[9/14/93 public]
The clearinghouse relocation between at486 and HP-UX failed because
hp_ux failed to correctly read the relocated clearinghouse checkpoint 
file which was created on at486 and the read cored dump. This bug echoes 
a interoperability problem. The following is part of
trace,
 >db_checkpoint_load(0x40333cd8->00000000-0000-0000-0000-000000000000)
 >sys_open_checkpoint(/opt/dcelocal/var/directory/cds/foster_cell#first_ch)
 >sys_read(/opt/dcelocal/var/directory/cds/foster_cell#first_ch.checkpoint0000000002,1,1)
 >dthread_lock(0x4009b650)
 >dthread_unlock(0x4009b650)
 >db_convert_init(4.0 -> 4.0)
  db_convert_init() - no conversion needed
 >db_dir_build_memory_record(0x40333cd8->00000000-0000-0000-0000-000000000000)
 >sys_read(/opt/dcelocal/var/directory/cds/foster_cell#first_ch.checkpoint0000000002,2,8)
 >sys_read(/opt/dcelocal/var/directory/cds/foster_cell#first_ch.checkpoint0000000002,10,134217720)
E sys_read(/opt/dcelocal/var/directory/cds/foster_cell#first_ch.checkpoint0000000002) read(14,-4096) error: Invalid argument
dns_free() memory guard word trashed

[9/14/93 public]
After looked into this problem, found that it is caused by the incomparable of
BIG_ENDIAN and LITTLE_ENDIAN machines. The HP workstation is a Big_endian 
machine and 486 is Little_endian machine, so that problem is not HP specific
or 486 specfic problem. Accordingly I changed the bug short descitption and 
Ref platforms.

To fix this problem, The marshalling and unmarshally are requested.
one of prossible solutions is to implement a new interface between cds servers, 
it could be a clearinghouse relocation command in cdscp, the client of the new 
interface read the relocated clearinghouse files and sends each entry of the 
files to the relate-to-server, and the server of the new interface receive 
and reassemble into  clearinghouse files one its side. In this way, the 
marshalling and unmarshalling are done automatically by IDL. [Thanks desai for
the discussion] 

Comments?



CR Number                     : 8585
Defect or Enhancement?        : enh
CR in Code, Doc, or Test?     : code
Inter-dependent CRs           : 
Project Name                  : dce
H/W Ref Platform              : all
S/W Ref Platform              : all
Component Name                : cds
Subcomponent Name             : 
Short Description             : ANSI C compiler warnings for several files in server directory.
Reported Date                 : 9/11/93
Found in Baseline             : 1.0.2
Found Date                    : 9/11/93
Severity                      : D
Priority                      : 3
Status                        : open
Duplicate Of                  : 
Fix By Baseline               : 1.2
Fixed In Baseline             : 
Affected File(s)              : in directory/cds/server back_collect.c, back_gather_updates.c, back_ground.c, back_propagate.c back_replicas.c, back_skulk.c, back_spread.c, cds_dacl.c, db_btree.c, db_checkpoint.c, db_common.c, db_conversion.c, db_diags.c, dump_navigator.c, names_lib.c, rpc_dispatch.c, sdi_ui.c, sets_lib.c, ta_delete.c, ta_mgmt.c, ta_read.c
Diff supplied by              : 
Diff release                  : 
Sensitivity                   : public

[9/11/93 public]

The following comparisons between signed and unsigned types cause compiler
warnings (in directory/cds/server):

back_collect.c:

	in check_replicas() [line# ~128]

	for (pos = 0; pos < NUM_DBSet(replica_set_p); pos++)

	in collect_data() [line# ~291]

	for (cnt = 0; (cnt < NUM_DBSet(replica_set_p)) &&

back_gather_updates.c:

	in find_update() [line# ~296]

	while (up_p->att_index < NUM_DBSet(main_p))

	and [line# ~317]

	else if (NUM_DBSet(set_p) <= up_p->val_index)

	and [line# ~335]

	for (; up_p->val_index < NUM_DBSet(set_p); up_p->val_index++)

back_ground.c:

	in background() [line# ~1021]

	for (pos = 0; pos < NUM_DBSet(chset_p); pos++)

back_propagate.c:

	in back_propagate() [line# ~301]

	for (index = 0; index < NUM_DBSet(set_p); index++)

back_replicas.c:

	in fix_replica_ptr() [line# ~217, ~271]

	for (i = 0; i < NUM_DBSet(replica_set_p); i++)

back_skulk.c:

	in back_pseudodir_updates() [line# ~1594]

	for (pos = 0; pos < NUM_DBSet(chset_p); pos++)

back_spread.c:

	in spread_dead_replica() [line# ~174]

	for (cnt = 0; cnt < NUM_DBSet(replica_set_p); cnt++)

	in check_dead_replica() [line# ~382]

	for (cnt = 0; cnt < NUM_DBSet(set_p); cnt++)

cds_dacl.c:

	in dacl_resolve_ep() [line# ~1897]

	for (index=0; index<NUM_DBSet(set_p); ++index) {

db_btree.c:

	in build_delete_holder() [line# ~1538]

	for (pos = 0; pos < set_p->ds_ocnt; pos++)

db_conversion.c:

	in cvt_v2_ssb_att_set() [line# ~401]

	for (x = 0; x < offset_count; x++) {

	in cvt_v2_ssb_set_of_sets() [line# ~534]

	for (x = 0; x < offset_count; x++) {

db_diags.c:

	in db_diag_dump_file_info() [line# ~229, ~330, ~338, ~354, ~362]

	if (strlen(out) > 64) {

dump_navigator.c:

	in emit() [line# ~252]

	while (strlen(i_value) > output_max) {

	and [line# ~265]

	while (strlen(h_value) > output_max) {

names_lib.c:

	in name_s_compare [line# ~434]

	if (q_cnt > EXT8(name1_p->sn_length)) return(FALSE);

rpc_dispatch.c:

	in view_pac() [line# ~446]

	for (i = 0; i < p->num_groups; i++) {

	and [line# ~455]

	for (i = 0; i < p->num_foreign_groups; i++) {

	in cds_ReadAttribute() [line# ~1522]

	for (i = 0; i < value_p->tagged_union.wholeEntry_p->numberOfAttributes; i++) {

sdi_ui.c:

	in mgmt_command() [line# ~1678]

	if (strlen(namespace_name) > 50) {

	and [line# ~1683]

	if (strlen(ch_name) > 50) {

sets_lib.c:

	in val_set_check() [line# ~217]

	for (i=0; i< set_p->ds_hcnt; i++) {

	and [line# ~223]

	for (i=0; i< set_p->ds_ocnt; i++) {

	in att_set_check() [line# ~288]

	for (i=0; i< set_p->ds_hcnt; i++) {

	and [line# ~294]

	for (i=0; i< set_p->ds_ocnt; i++) {

	in set_insert() [line# ~1381]

	for (i = 0; i < EXT8(newname_p->an_length); ++i)

	in prn_DBSet() and prnDBSetA() [line# ~1506, ~1563]

	for (index = 0; index < NUM_DBSet_Delete(set_p); index++) {

ta_delete.c:

	in ta_delete_dir() [line# ~332]

	for (index = 0; index < NUM_DBSet(set_p); index++)

ta_mgmt.c:

	in mgmt_remove_dir() [line# ~649, ~668] and 
		mgmt_delete_ch() [line# ~796]

	for (pos = 0; pos < NUM_DBSet(chset_p); pos++)

ta_read.c:

	in read_chdirectory [line# ~274]

	for (; pos < NUM_DBSet(chset_p); ++pos)

Proposed Solution: in many of these instances the warning can be eliminated
by changing the declared type of the signed integer to unsigned. For
example, the index of a for loop ranging from 0 to a positive value should
be declared as unsigned. Even though in the couple of cases where an
unsigned is compared to a positive constant (taken to be int by the
compiler) a compiler should not complain (it could easily determine that
the comparison is always valid) some do (casting the constant to unsigned
[ugly as it is] makes the warning go away).

db_checkpoint.c:

	in db_checkpoint() [line# ~183]

	The argument to SERVER_WAIT_OR_BUGCHECK
	info_p->currop_sop_completed is of const dthread_cond_t pointer
	type conflicting with the type of the corresponding formal
	parameter of dthread_wait which	does not have a const qualifier.

db_common.c:

	in db_begin_operation() [line# ~2065] and 
		db_end_operation() [line# ~2127]

	file_p = db_find_file(chid_p);

	chid_p is of const ObjUID_t pointer type conflicting with the
	type of the corresponding formal parameter of db_find_file which
	does not have a const qualifier.


sdi_ui.c:

	in state_1() [line# ~1991]

	return (S1);

	can never be reached.

[09/28/93 public]
This will be done as part of meeting the code cleanup requirements during
1.1.



CR Number                     : 8557
Defect or Enhancement?        : enh
CR in Code, Doc, or Test?     : code
Inter-dependent CRs           : 
Project Name                  : dce
H/W Ref Platform              : other
S/W Ref Platform              : other
Component Name                : cds
Subcomponent Name             : 
Short Description             : compiler warnings in cds library
Reported Date                 : 9/3/93
Found in Baseline             : 1.0.1
Found Date                    : 9/3/93
Severity                      : E
Priority                      : 4
Status                        : open
Duplicate Of                  : 
Fix By Baseline               : 1.2
Fixed In Baseline             : 
Affected File(s)              : files directory/cds/library
Diff supplied by              : 
Diff release                  : 
Sensitivity                   : public

[9/3/93 public]

Full Description

the following compiler warnings were encountered in in cds library code
on FTX 2.2 (Fault Tolerant version of UNIX SVR4) OSF builds are not
presently producing such warnings, even though the reported type
incompatiblilities do exist in the code, and according to
ANSI-C a "high quality implementation might do well" to offer optional
diagnostics" in such cases

-----------------------

     cds_events.c
     ------------
     At line 286:

     if ( strlen(text_buffer)+1 > evp->strings_len )

     SOLUTION: change the type of evp->strings_len to size_t.

     At line 305:

     if ( strlen(log_buffer)+1 > evp->syslog_len )

     SOLUTION: change the type of evp->syslog_len to size_t.

     deb_event_mgr.c
     ---------------

     At line 1322:

     assert(strlen(name_p) < nameLen);

     SOLUTION: change the type of nameLen to size_t

     dnscmpsimple.c
     --------------
     At line 160:

     if (length > EXT8(tsn2.sn_length))

     SOLUTION: change logic and expression to

            if (EXT8(tsn1.sn_length) > EXT8(tsn2.sn_length))
	        length = EXT8(tsn2.sn_length);
            else length = EXT8(tsn1.sn_length);

     dpeaclaccess.c
     --------------
     At line 354:

     At line 362:

     for (j = 0; (j < accessor_info->num_groups); j++)

     for (j = 0; (j < accessor_info->num_foreign_groups); j++)

     SOLUTION: in both cases, change the type of j to an unsigned
               type compartible with num_groups or num_foreign_groups

     formatts.c
     ----------
     At line 245:

     if (strlen(timestr) > stringlen)

     SOLUTION: the value of stringlen is acquired by an involved
               process which employs functions which want stringlen
               to be an int. therefore declare a new variable of
               type size_t and assign the value of stringlen to
               it and use it in the comparison.

     rpc_cvt.c
     ---------
     At line 1746:

     for (i = 0; i < data->set_length; i++) {

     SOLUTION: change the type of i to an unsigned

     tower_lib.c
     -----------

     At line 644:

     if ( !(*binding_p = malloc(asize)))

[09/03/93 public]
{It looks like some comment is missing about the malloc, above.}

I think in almost all cases a better solution is to use a cast.  Obvious
exceptions are the three for loops.  For example, adding a local var for
this is clearly wrong:
     if (strlen(timestr) > stringlen)
rewrite it as
	if (strlen(timestr) > (size_t)stringlen)

[09/03/93 public]

I surrender that my local variable idea was poorly considered, although
I think the cast is a mistake. Assuming strlen to be an immovable object,
either stringlen should change, or leave the compiler warning as a clue
should the program develop some unexpected behavior. 

the malloc line didn't include a proposed solution, it should be
interpretted as this line causes a compiler warning.

I was going to suggest something like the following, but judging by 
your reaction to the strlen example, I shudder to think what you'll
say about this.

               void *p;
               p = malloc(asize);
               if (!(*binding_p = p)

[09/07/93 public]
The thing that is missing from the "malloc" line is the compiler complaint;
I don't know what fix to recommend without seeing the real "warning."
At any rate, one proper way to write the "if" line is like this:
	if ((binding_p = (type_of_binding *)malloc(asize)) == NULL)
where "type_of_binding *binding_p;" or something like it is the declaration.
Using ! to test pointers for validity is legal, but gross.

The fact that strlen() now returns size_t which on some platforms can
be an unsigned collides with the fact that ANSI changed the way signed
and unsigned comparisons are done.  A local variable is the wrong thing
to do; a cast has the exact same semantics as a local variable (K&R 2nd
ed p45) and arguably "fixes" the "problem."

Looking back, I'm surprised that I made any comments originally, without
seeing the real text of the error message.  We should require the real
text on any future reports.

[09/08/93 public]

I requested that the submitter include the warning text with such
problem reports.

The original service call also included the following problems
which I originally decided to omit from this OT. The submitter has
insisted, that they be included, so here they are.

     deb_event_mgr.c
     ---------------
     At lines 484 and 749:

     if (strlen(deb_global_event) > 0) {

     proposed solution: use either of the following

	if (strlen(deb_global_event)) {
	if (strlen(deb_global_event) > (size_t) 0) {

     triggers_lib.c
     --------------
     At lines 492 and 545:

     if (strlen(name) > 0) {

        proposed solution: use either of the following

        if (strlen(name)) {
        if (strlen(name) > (size_t) 0) {

[09/09/93 public]
The submittor's compiler is wrong to be complaining about
	if (strlen(xxx) > 0)

Nevertheless this is a much better test:
	if (xxx[0])



CR Number                     : 8547
Defect or Enhancement?        : enh
CR in Code, Doc, or Test?     : doc
Inter-dependent CRs           : 10405
Project Name                  : dce
H/W Ref Platform              : all
S/W Ref Platform              : all
Component Name                : cds
Subcomponent Name             : admin_gd
Short Description             : cdscp commands not documented
Reported Date                 : 9/1/93
Found in Baseline             : 1.0.2
Found Date                    : 9/1/93
Severity                      : C
Priority                      : 3
Status                        : open
Duplicate Of                  : 
Fix By Baseline               : 1.2
Fixed In Baseline             : 
Affected File(s)              : 
Sensitivity                   : public

[9/1/93 public]
The cdscp documentation in the admin guide needs to be improved in the
following ways:

1.  Most examples, except for some of the show commands do not have the
generated output in the documentation.  The output of each command should
be shown AND DESCRIBED in detail.  The man pages that describe the show
command for each type of object do a decent job of describing each
attribute.  I would expect the admin guide to discuss how they work
together to define when skulking happens, etc.; how to examine a directory
to see when the last skulk was, when the next one will be, if something is
wrong, etc.

2.  The cdsbrowser documentation is almost identical to the documentation
in the users guide.  It should be referenced in one of the places.

3.  There is no documentation in the admin_gd on how to modify attributes
in any CDS object (object, directory, link, clearinghouse).  The add
command is not mentioned except in a long list of commands.  I would
probably include a new chapter between 10 and 11 that describes modifying
attributes of these objects.

4.  Chapter 11 seems to be a dumping ground of lots of information in only
12 pages.  It's entitled "Restructuring a Namespace" and includes creating
soflinks, modifying replica sets, deleting directories, moving
clearinghoues, and deleting clearinghouses all at about the same level of
discussion.  These are tasks of very different magnatude.

I would like to see the documentation as follows:

chapters for each of directories, objects, softlinks, and clearinghouses.
These 4 chapters would describe all the actions on each of these types of
CDS entries (create, delete, show, and adding attributes).  

The chapter on directories would include the existing info from chapter 12
on deleting directories with children, etc.  It should also describe how to
set up a namespace with the directories that you want.  This might be
better done in a begining chapter, but here is okay.

The chapter on clearinghouses should include the info from chapter 11 as
well on how to move clearinghouses, etc. 

Another chapter on replication that describes how to set up replicas, how
to move, delete, backup, etc.  Also needed in this chapter is planning
information on how many replicas would be needed, etc.  I would include all
of chapter 5 (all 2.5 pages) in this chapter, and be sure to include
information on setting up skulks to happen at correct times (and enough
information to help an admin determine what the correct time is!).

To summarize, I would first have a chapter for each type of CDS entry that
describes individual commands and what they do.  Then I would have
chapters/sections that describe administrative tasks that need to be
performed, including planning, designing the namespace, designing
replication, moving replicas and clearinghouses, backups, etc.

[9/2/93 public]

I agree that much of the preceeding is desirable, but feel that it really
should be considered an enhancement.  I have therefore changed this to an
enhancement request and changed the severity/priority to C4.  If any pieces
of the above should be considered a defect (e.g., if there is any missing
information that is required), a more specific defect request should be
opened for that particular piece.

Digital is responsible for this documentation and has indicated to me that
they do not have the resources to do this work in 1.1.  I do not want to
cancel or close this bug, as the request is reasonable, but I do not think
that it can be addressed in 1.1.  I am therefore marking this as defer (and
priority D), but leaving it as Fixby 1.1.

[3/29/94 public]

Reassigned this CR to Ron Johnson (DEC DCE 1.1 writer).

[hal 9/19/94 public

Now defering this to 1.2.  Note some of the requests in this CR are no
longer applicable.  Here is my quick assesment: Item 1 may still be
applicable to the "dcecpized" documents.  The 1. current versions of the
docs should be analyzed to determine the needed work.  Item 2 is moot, as
the User Guide is gone.  Item 3 dups CR 10405.  Item 4 may still be valid;
same comments apply as with item 1.  The overall request should also be
reviewed.

[7/5/95 public]

Reassigned for DCE 1.2.



CR Number                     : 8537
Defect or Enhancement?        : enh
CR in Code, Doc, or Test?     : code
Inter-dependent CRs           : 
Project Name                  : dce
H/W Ref Platform              : all
S/W Ref Platform              : all
Component Name                : cds
Subcomponent Name             : 
Short Description             : non reachable return statement
Reported Date                 : 8/30/93
Found in Baseline             : 1.0.2
Found Date                    : 8/30/93
Severity                      : E
Priority                      : 4
Status                        : open
Duplicate Of                  : 
Fix By Baseline               : 1.2
Fixed In Baseline             : 
Affected File(s)              : 
Diff supplied by              : 
Diff release                  : 
Sensitivity                   : public

[8/30/93 public]

	cds/control/attrname_actions_cds.c at line 489 (end of function
savecdsattr()):

	return(ACT_ERROR);

     can never be reached.  Therefore, it produces a warning saying statement
     not reached.  It should probably be removed.



CR Number                     : 8536
Defect or Enhancement?        : enh
CR in Code, Doc, or Test?     : code
Inter-dependent CRs           : 
Project Name                  : dce
H/W Ref Platform              : other
S/W Ref Platform              : other
Component Name                : cds
Subcomponent Name             : 
Short Description             : Warnings indicating possible
error in converting signed to unsigned
Reported Date                 : 8/30/93
Found in Baseline             : 1.0.2
Found Date                    : 8/30/93
Severity                      : D
Priority                      : 3
Status                        : open
Duplicate Of                  : 
Fix By Baseline               : 1.2
Fixed In Baseline             : 
Affected File(s)              : 
Diff supplied by              : 
Diff release                  : 
Sensitivity                   : public

[8/30/93 public]

ANSI C compilers give warnings when it sees an operation which involves a
signed operand and an unsigned operand. By definition, the compiler will 
convert the signed into unsigned and then perform the operation. During the
conversion, there is possibility that a negative signed value may be
converted into a big positive unsigned number. hence the warning.

Generally we look at the code to see whether it is really a problem in each
case. If it turns out not to be a problem, we can later turn off the
warning from the compiler.

Here is a case where it is hard to determine whether the error could
happen:

In cds/includes/server.h (around line 278):

#define INDEX_DBSet(ptr,idx) ((NUM_DBSet(ptr) <= idx) ? SKIP_DBSet(ptr) : \

where idx is signed, NUM_DBSet(ptr) is unsigned. Whether it may have a
problem depends on the value of idx, but it is hard to judge here.

So we can either go through every occurrence of INDEX_DBSet to make sure
that idx is always positive, or we can make the following change:

#define INDEX_DBSet(ptr,idx) (((int)(NUM_DBSet(ptr)) <= idx) ? SKIP_DBSet(ptr) : \


Another place:

     clerk_client.c
     --------------
          At line 692 in function parse_arguments():

          if (((i -= MIN_optab) < 0) || (MAX_optab < i))

Since int i = EXT8(th_p->clerkReq.op), if for any reason th_p or
th_p->clerkReq is not intialized right, i may be a negative number. In that
case, when (i -= MIN_optab) is perform, i would be converted to unsigned
and an error would happen.

	We can fix it as follows:

        if (((i -= (int)MIN_optab) < 0) || ((int)MAX_optab < i))

[09/28/93 public]
ANSI C comliance is scheduled as part of code cleanup requirements during
1.1.



CR Number                     : 8522
Defect or Enhancement?        : enh
CR in Code, Doc, or Test?     : code
Inter-dependent CRs           : 
Project Name                  : dce
H/W Ref Platform              : all
S/W Ref Platform              : all
Component Name                : cds
Subcomponent Name             : gdad
Short Description             : gdad should use resolver functions
Reported Date                 : 8/27/93
Found in Baseline             : 1.0.2
Found Date                    : 8/27/93
Severity                      : C
Priority                      : 2
Status                        : open
Duplicate Of                  : 
Fix By Baseline               : 1.2
Fixed In Baseline             : 
Affected File(s)              : 
Diff supplied by              : 
Diff release                  : 
Sensitivity                   : public

[8/27/93 public]
gdad constructs BIND name resolution queries, then uses sendto() and
recvfrom() to interact with named.  It would be much better to provide
wrappers for BSD 4.x resolver routines res_mkquery(), ... and use these.
The result would be a smaller gdad with less likelihood of errors.



CR Number                     : 8502
Defect or Enhancement?        : def
CR in Code, Doc, or Test?     : code
Inter-dependent CRs           : 
Project Name                  : dce
H/W Ref Platform              : mx300
S/W Ref Platform              : sinix
Component Name                : cds
Subcomponent Name             : 
Short Description             : Sometimes cannot create directory
in second clearinghouse from client machine
Reported Date                 : 8/24/93
Found in Baseline             : 1.0.2
Found Date                    : 7/27/93
Severity                      : B
Priority                      : 3
Status                        : open
Duplicate Of                  : 
Fix By Baseline               : 1.2
Fixed In Baseline             : 
Affected File(s)              : 
Diff supplied by              : 
Diff release                  : 
Sensitivity                   : public

[8/24/93 public]

I have a two machine cell, with one machine running all of the servers and
one machine acting as a client.  On the client machine, I run the following
script as cell_admin:

	#!/bin/sh
	cdscp <<EOF
	create directory /.../houdini.cells.sni-usa.com/root1127ben2
	set directory /.../houdini.cells.sni-usa.com/root1127ben2 to skulk
	create directory /.../houdini.cells.sni-usa.com/root1127ben2/testdir
	set directory /.../houdini.cells.sni-usa.com/root1127ben2/testdir to skulk
	set directory /.../houdini.cells.sni-usa.com/root1127ben2/testdir to new epoch master /.../houdini.cells.sni-usa.com/houdini_ch
	create directory /.../houdini.cells.sni-usa.com/root1127ben2/testdir_clearinghouse1 clearinghouse /.../houdini.cells.sni-usa.com/houdini_ch
	create directory /.../houdini.cells.sni-usa.com/root1127ben2/testdir_clearinghouse2 clearinghouse /.../houdini.cells.sni-usa.com/second_ch
	EOF

Sometimes, on the last command, I get:

    Error on entity: /.../houdini.cells.sni-usa.com/root1127ben2/testdir_clearinghouse2
    Unable to communicate with any CDS server (dce / cds)
    Function: dnsCreateDir


This is not consistent, and sometimes the script works.  Whether or not
the script works is very timing dependent.  On slower machines, it almost
always works, on faster machines, it almost never works.   If I try
the same commands by hand it always works.  

Any cdscp commands that I try by hand on the second clearinghouse all work,
so I don't think that there is any problem inherent in the second clearinghouse.



CR Number                     : 8292
Defect or Enhancement?        : enh
CR in Code, Doc, or Test?     : doc
Inter-dependent CRs           : 
Project Name                  : dce
H/W Ref Platform              : all
S/W Ref Platform              : all
Component Name                : cds
Subcomponent Name             : admin_gd
Short Description             : Enhancing the description for
what to do to set up DNS for inter-cell communication purpose
Reported Date                 : 7/16/93
Found in Baseline             : 1.0.2
Found Date                    : 7/16/93
Severity                      : D
Priority                      : 3
Status                        : open
Duplicate Of                  : 
Fix By Baseline               : 1.2
Fixed In Baseline             : 
Affected File(s)              : 
Sensitivity                   : public

[7/16/93 public]

	Section 11.3.1 is better than section 11.3.2 (settin gup gds), but it
still lacks some important steps to get DNS to work for the inter-cell comm
purpose. The following write up is a detailed description for what to do.




Q: I have configured two or more cells, if I want to connect them
   using DNS, how do I start? What problems could I run into?

A: There are two ways for a GDA on one cell to find information about another
   cell; either through DNS, or through X.500. We give information on how
   to use DNS here. The information can be found in Section 11.3 of Admin
   Guide, Module 3.

   In order for a GDA to find information about another cell via DNS,
   the GDA must be able to contact a DNS server machine (running
   either BIND or named) which has been configured such that it knows some
   important facts (most notably, the IP address of the machine on which
   the cds clearinghouse is running and the UUID of the cds clearinghouse) 
   about the cells which wish to interoperate. The DNS server machine does
   not need to be a member of either DNS cell. However, each cell's GDA(s)
   must be able to locate the DNS server machine by looking up its IP address
   in a resolv.conf file.

   The system administrator obtains the UUID of the cds clearinghouse
   by using the cdscp command (see section 11.3 of the Admin Guide, Module 3,
   Section 11.3.1). For example, to obtain the UUUID for a cell named
   gaia_cell, you would do the following.

# cdscp show cell /.../gaia_cell as dns
                        SHOW
                        CELL   /.../gaia_cell
                          AT   1993-01-26-14:34:06
                         TXT = 1 7D1162A8-F6E8-11CB-B3A4-08002B2A232C   Master
/.../gaia_cell/gaia_ch 7B13C25C-F6E8-11CB-B3A4-08002B2A232C

**   Note that the above information will change, each time DCE is
installed,      **
**   requiring a corresponding update to the configuration file of the
DNS server. **

   You also need to find out the IP address of machine on which the cds
   clearinghouse is running. You can do so with the "nslookup" command. For example,
   you could obtain the IP address of host gaia, by doing the following.

# nslookup gaia
Server:  pooch.osf.org
Address:  130.105.1.156

Name:    gaia.osf.org
Address:  130.105.1.107

   After acquiring this information about a cell which wishes
   to interoperate with other cells, it must be entered in the DNS
   server configuration file at the DNS server machine, the
   details of which are implementation specific.

** Note that if your nameserver configuartion file contains an SOA      **
** (Start of Authority) record, then you should update the serial       **
** number in this SOA record, each time you change the file's contents. **

   In our case, we were able to accomplish this by creating two AFSDB records
   (per cell) in the file /var/domain/qadce.hosts on host venus, our
   DNS server. For example, the following records were added to describe
   cell gaia_cell whose cds clearinghouse was running on machine gaia. 

gaia                    IN      A       130.105.1.107
                        IN      MX      10 postman.osf.org.

gaia_cell               IN      MX      1 gaia.qadce.osf.org
                        IN      TXT     "1 7D1162A8-F6E8-11CB-B3A4-08002B2A232C
   Master /.../gaia_cell/gaia_ch 7B13C25C-F6E8-11CB-B3A4-08002B2A232C 
gaia.qadce.osf.org"

   Of these records, the first MX-A pair specifies the host IP address of gaia
   and its mail exchanger, the second MX-TXT pair specifies information about
   the cell; its  ns uuid, replica type, clearing house name, and
   clearing house uuid. 

** Note that this example, like the one in the Admin Guide, assumes that          **
** the DNS configuration file contains AFSDB records, which is a newly proposed   **
** record format for BIND. Unfortunately some named's do not support this record  **
** format.

   After you have modified its configuration file, you need to recylce
   named such that it will read it's modified configuration. On venus, we
   were able to recycle named by performing the following sequence of
   operations.

# /sbin/init.d/named stop

       wait a couple of seconds

# /sbin/init.d/named start

   After you have modified the configuration file you can use nslookup
   to verify that the correct information is available from named.

$ nslookup
Default Server:  venus.qadce.osf.org
Address:  130.105.5.19

> set querytype=any
> gaia
Server:  venus.qadce.osf.org
Address:  130.105.5.19

gaia.qadce.osf.org      inet address = 130.105.1.107
gaia.qadce.osf.org      preference = 10, mail exchanger = postman.osf.org
postman.osf.org inet address = 130.105.1.152
postman.osf.org inet address = 130.105.4.20
> gaia_cell
Server:  venus.qadce.osf.org
Address:  130.105.5.19

gaia_cell.qadce.osf.org preference = 1, mail exchanger = gaia.qadce.osf.org
gaia_cell.qadce.osf.org TEXT=1 5458A47D-2850-11CC-81F3-08002B2A232C   Master /..
./gaia_cell/gaia_ch 52707B80-2850-11CC-81F3-08002B2A232C gaia.qadce.osf.org
gaia.qadce.osf.org      inet address = 130.105.1.107
	 
   As mentioned previously, each machine on which a GDA is running, must be able
   to locate the DNS server machine by looking up its IP address in a resolv.conf
   file. For example, to make it possible for the GDA running on gaia to
   locate the DNS server on venus, we configured the resolv.conf file on gaia
   such that it contained the IP address of venus.

# cat /etc/resolv.conf
;
; BIND data file.
;
nameserver      130.105.5.19
domain          qadce.osf.org

   Finally, in order to allow the cells to authenticate principals from their
   interoperating cell, we used the rgy_edit cell command to "cross authenticate"
   each pair of interoperating cells.  For  example to "cross_authenticate" cells
   gaia_cell and pierrot_cell from cell gaia_cell, you would do the following.

$ dce_login cell_admin
Enter Password:
Password must be changed!
$ rgy_edit
Current site is: registry server at /.../gaia_cell/subsys/dce/sec/master
rgy_edit=> cell /.../pierrot_cell
Enter group name of the local account for the foreign cell: none
Enter group name of the foreign account for the local cell: none
Enter org name of the local account for the foreign cell: none
Enter org name of the foreign account for the local cell: none
Enter your password:
Enter account id to log into foreign cell with: cell_admin
Enter password for foreign account:
Enter expiration date [yy/mm/dd or 'none']: (none)
  Principals and Accounts have been created
rgy_edit=> q
bye.
$

** Note that the rgy_edit cell command need only be performed on one side **
** of each interoperating pair.                                           **
 
   If you have any trouble with the cell command, make sure the following are 
   true.

   1. you have correctly configured venus, down to the last '.'
   2. Your GDA (gdad) is running.
   3. The two cells have system times which are less than 5 minutes apart.
   4. Note that the section "4.5.1.3 Using gdad" describes command line options
      of gdad which can be used to diagnose problems in your intercell setup.
   5. Note that if you are running a local name server (not a resolver),
      gdad will need to locate a file which stores the names of the BIND root
      nameservers. By default, gdad assumes that this file is named
      "/opt/dcelocal/etc/named.ca". gdad can be instructed to use the
      "root.cache" file, present in recent versions of BIND, in the place of
      named.ca by using the -s option of gdad.

[07/22/93 public]
Assigned to Diana Goldfarb.

[3/24/94 public]

Reassigned to Ron Johnson from Diana Goldfarb.

[11/17/93 public]

I spoke with Diana Goldfarb (Digital DCE writer) about
this enhancement today. She says that Digital is interested
in making this enhancement to the documentation but will not
be able to do it in the 1.0.3 timeframe. They will consider
making the enhancement in the DCE 1.1 timeframe. Consequently,
I have changed this CR from "open" to "defer" and have marked
the fixby date as "1.1".

[10/5/94 public]
Digital has indicated that they will not be fixing this for 1.1.  Defer to
1.2.

[7/5/95 public]

Reassigned for DCE 1.2.



CR Number                     : 8291
Defect or Enhancement?        : enh
CR in Code, Doc, or Test?     : doc
Inter-dependent CRs           : 
Project Name                  : dce
H/W Ref Platform              : all
S/W Ref Platform              : all
Component Name                : cds
Subcomponent Name             : admin_gd
Short Description             : Enhancing the description for 
what to do to set up gds for inter-cell communication purpose
Reported Date                 : 7/16/93
Found in Baseline             : 1.0.2
Found Date                    : 7/16/93
Severity                      : C
Priority                      : 2
Status                        : open
Duplicate Of                  : 
Fix By Baseline               : 1.2.2
Fixed In Baseline             : 
Affected File(s)              : 
Diff supplied by              : 
Diff release                  : 
Sensitivity                   : public

[7/16/93 public]

	Section 11.3.2 is much too simple to be useful. The following is my
write-up of what to do (step by step) for settin gup GDS for inter-cell.


		  Inter-Cell Communication Through GDS


	There are two ways for a GDA on one cell to find the information about
another cell in the world. One is through DNS, the other is through GDS, or
X.500. OSF DCE's Administration Guide Section 11.3 gives a relatively 
detailed description on how to set up DNS for this purpose. The part for 
setting up GDS for this purpose is too simple to be useful.

	There is already a Q&A on how to use DNS with step to step instruction.
We describe here the steps necessary to set up GDS to serve the inter-cell 
communication purpose.

	CDS passes to gdad a foreign cell name. Depending on the format of the
name, i.e., whether it is a GDS/X.500 name or a DNS name, gdad does things 
accordingly. Contrary to some belief that one can set up either DNS or GDS for
inter-cell communication, whether DNS or GDS is used is determined by the gdad
at runtime from the name structure. This means if you want to contact a cell 
with GDS/X.500 name, you have to have GDS set up; if you also want to contact 
a cell with DNS name, you will also have to set up DNS.

	For a GDS name cell, gdad spawns a subprocess to run gda_child, which 
contact local GDS client to retrieve the required cell information. gda_child
returns the necessary information back to gdad, which in turn returns the
information to cds.

	A little bit words on GDS, an implementation of X.500 from OSF DCE 
offering: GDS has a client/server model. A GDS server can be run on any node 
in the network, and you can run as many servers as you want. A GDS server is 
where the directory information is actually stored. A server is at the same
time a GDS client. Similarly, a GDS client can reside on any machine in the
network. After initial set up, a client can contact any DSA, a GDS server.

1. Setting Up The GDS Server

	For the inter-cell communication purpose, you need at least one GDS 
server. It does not need to run on any of the machine in any cell. Let's say 
we run it on machine S1. Here are the steps you need to do to configure a GDS 
server (of course, it is assumed that GDS binaries have been installed on S1).
Remember, you have to be root:

1.1. start "gdssysadm"

	a. Select "c" for configuration, then configure as a Client-Server
	   system (for detailed description of how to do this, see Chapter 14
	   of DCE Administration Guide). The following shows a sample values:

 +----------------------------------------------------------------------------+
 |  (confpar)                  DIRECTORY SYSTEM                Configuration  |
 +----------------------------------------------------------------------------+
 |                                                                            |
 |     Which configuration mode ?: Creation of configuration data             |
 |                                                                            |
 |     For which directory ID should the operation be                         |
 |     performed ? [1-20]: 2                                                  |
 |                                                                            |
 |     Which configuration type ?: Client-Server system                       |
 |                                                                            |
 |     How many clients have access to the directory system at the            |
 |     same time ? [1-256]: 16_                                               |
 |                                                                            |
 |     How many server processes should be activated ? [1-256]: 1__           |
 |                                                                            |
 |     Do you want to distribute 'update' information ?: Yes                  |
 |                                                                            |
 |                                                                            |
 |                                                                            |
 |                                                                            |
 +----------------------------------------------------------------------------+


	b. Select "b" to activate the directory system you just configured.

	c. To check, select "f", then "i". You should see the processes 
	   running. The following is an example:

 +----------------------------------------------------------------------------+
 |  (Info)                     DIRECTORY SYSTEM            Status Information |
 +----------------------------------------------------------------------------+
 |                                                                            |
 |       The directory system is active (existing processes ->):              |
 |                                                                            |
 |                                                                            |
 |                      1 DUA cache process                                   |
 |                      1 C-stub process                                      |
 |                      1 S-stub process(es)                                  |
 |                      1 DSA process(es)                                     |
 |                      1 IPC monitoring process                              |
 |                                                                            |
 |                                                                            |
 |                                                                            |
 |                                                                            |
 |                                                                            |
 |                 Status of the 'trace' system: inactive                     |
 |                                                                            |
 |                                                                            |
 |                                                                            |
 +----------------------------------------------------------------------------+


1.2. start "gdsditadm":

	Enter the directory ID and "Logon to the DUA Cache":

 +----------------------------------------------------------------------------+
 |  (Mask 1)             DIRECTORY SYSTEM                           Logon     |
 +----------------------------------------------------------------------------+
 |                                                                            |
 |  USER IDENTIFICATION:                              Directory ID: 2_        |
 |                                                                            |
 |    Password:                                                               |
 |                                                                            |
 |    Country-Name:                __                                         |
 |    Organization-Name:           _________________________                  |
 |    Org.-Unit-Name:              _________________________                  |
 |    Common-Name:                 _________________________                  |
 |                                                                            |
 |                                                                            |
 |                                                                            |
 |                                                                            |
 |                                                                            |
 |                                                                            |
 |                                                                            |
 |                                                                            |
 |       Options: Logon to the DUA Cache                                      |
 +----------------------------------------------------------------------------+

	Forget about the "Schema from DSA can not be read!" message.

	Then choose "1" Mask 3 for object administration, then "5" from Mask 4
	to add client address:

 +----------------------------------------------------------------------------+
 |  (Mask 7a)            DIRECTORY SYSTEM           Add Client Address        |
 +----------------------------------------------------------------------------+
 |                                                                            |
 |  P-Selector:     ___________________________________                       |
 |                                                                            |
 |  S-Selector:     ___________________________________                       |
 |                                                                            |
 |  T-Selector:     Client_________________                                   |
 |                                                                            |
 |                                                                            |
 |  NSAP-address 1: TCP/IP!internet=127.0.0.1+port=12010____________________  |
 |                                                                            |
 |  NSAP-address 2: ________________________________________________________  |
 |                                                                            |
 |  NSAP-address 3: ________________________________________________________  |
 |                                                                            |
 |  NSAP-address 4: ________________________________________________________  |
 |                                                                            |
 |  NSAP-address 5: ________________________________________________________  |
 |                                                                            |
 +----------------------------------------------------------------------------+

	You can pick your own port number.

	Pick from Mask 4 the operation "1" for adding object, then "7" from
	Mask 5 "Add Object":

 +----------------------------------------------------------------------------+
 |  (Mask 6)             DIRECTORY SYSTEM     Add Object                      |
 +----------------------------------------------------------------------------+
 |                                                                            |
 |                                                                            |
 |     Object Name                                                            |
 |                                                                            |
 |       Country-Name              us                                         |
 |       Organization-Name         osf______________________                  |
 |       Org.-Unit-Name            S1_______________________                  |
 |       Common-Name               dsa______________________                  |
 |       Common-Name               dsa-1____________________                  |
 |                                                                            |
 |                                                                            |
 |                                                                            |
 |                                                                            |
 |                                                                            |
 |                                                                            |
 |                                                                            |
 |   Structural Object class: Directory-Service-Agent                         |
 |   Auxiliary object class: NO                                               |
 +----------------------------------------------------------------------------+

	If you are using 1.0.2 GDS:

	Now you are in Mask 6d. You can use arrow keys to move the highlight
	bar. Use <CR> to make the selection.

	Choose DSA-Type by moving to "DSA-Type" and type <CR>, Now hit <F2>
	to get into the attribute screen Mask 7.

	If you are using 1.0.1 GDS, you will get Mask 7 and you need to type
	in "DSA-Type" as an attribute name yourself in order to have this
	attribute.

 +----------------------------------------------------------------------------+
 |  (Mask 7)             DIRECTORY SYSTEM               Add Object            |
 +----------------------------------------------------------------------------+
 |                                                                            |
 |                                                                            |
 |     Attributes:                                                            |
 |                                                                            |
 |       Name :  DSA-Type                                                     |
 |       Value:  default/local'_______________________________                |
 |               _____________________________________________                |
 |                                                                            |
 |       Name :  _________________________                                    |
 |       Value:  _____________________________________________                |
 |               _____________________________________________                |
 |                                                                            |
 |       Name :  _________________________                                    |
 |       Value:  _____________________________________________                |
 |               _____________________________________________                |
 |                                                                            |
 |                                                                            |
 |                                                                            |
 +----------------------------------------------------------------------------+

	Then comes the Mask 7a for net address. You need to know your host's
	(machine S1) ip address. Replace as necessary.

 +----------------------------------------------------------------------------+
 |  (Mask 7a)            DIRECTORY SYSTEM            Add Object               |
 +----------------------------------------------------------------------------+
 |                                                                            |
 |  P-Selector:     ___________________________________                       |
 |                                                                            |
 |  S-Selector:     ___________________________________                       |
 |                                                                            |
 |  T-Selector:     Server_________________                                   |
 |                                                                            |
 |                                                                            |
 |  NSAP-address 1: TCP/IP!internet=130.105.1.135+port=12011________________  |
 |                                                                            |
 |  NSAP-address 2: ________________________________________________________  |
 |                                                                            |
 |  NSAP-address 3: ________________________________________________________  |
 |                                                                            |
 |  NSAP-address 4: ________________________________________________________  |
 |                                                                            |
 |  NSAP-address 5: ________________________________________________________  |
 |                                                                            |
 +----------------------------------------------------------------------------+

	Once this is done, you are back to Mask 4. Choose "0" to exit. Then
	choose "0" from Mask 3 to exit.

	Now you have done the initialization for the local DUA to create a
	DSA.

	Now from Mask 1, logon to the default DSA:

 +----------------------------------------------------------------------------+
 |  (Mask 1)             DIRECTORY SYSTEM                           Logon     |
 +----------------------------------------------------------------------------+
 |                                                                            |
 |  USER IDENTIFICATION:                              Directory ID: 2_        |
 |                                                                            |
 |    Password:                                                               |
 |                                                                            |
 |    Country-Name:                __                                         |
 |    Organization-Name:           _________________________                  |
 |    Org.-Unit-Name:              _________________________                  |
 |    Common-Name:                 _________________________                  |
 |                                                                            |
 |                                                                            |
 |                                                                            |
 |                                                                            |
 |                                                                            |
 |                                                                            |
 |                                                                            |
 |                                                                            |
 |       Options: Logon to the Default DSA                                    |
 +----------------------------------------------------------------------------+

	Then choose "1" from Mask 3 for object administration:

 +----------------------------------------------------------------------------+
 |  (Mask 3)             DIRECTORY SYSTEM           Administration            |
 +----------------------------------------------------------------------------+
 |                                                                            |
 |                                                                            |
 |     ADMINISTRATION FUNCTIONS:                                              |
 |                                                                            |
 |                                                                            |
 |       0 Exit                                                               |
 |                                                                            |
 |       1 Object Administration                                              |
 |                                                                            |
 |       2 Schema Administration                                              |
 |                                                                            |
 |       3 Shadow Administration                                              |
 |                                                                            |
 |       4 Subtree Administration                                             |
 |                                                                            |
 |     Current DSA /C=us/O=osf/OU=pierrot/CN=dsa/CN=dsa-1                     |
 |                                                                            |
 |                                                                            |
 +----------------------------------------------------------------------------+
    Which function ? 1

	The next few steps are to add the name of the cell you are trying to 
	add. Suppose the cell name is c=us/o=osf/ou=osfsun.

	Choose "1" from Mask 4 to add object. Choose "2" from Mask 5 for
	Country-Name:

 +----------------------------------------------------------------------------+
 |  (Mask 6)             DIRECTORY SYSTEM     Add Object                      |
 +----------------------------------------------------------------------------+
 |                                                                            |
 |                                                                            |
 |     Object Name                                                            |
 |                                                                            |
 |       Country-Name              us                                         |
 |                                                                            |
 |                                                                            |
 |                                                                            |
 |                                                                            |
 |                                                                            |
 |                                                                            |
 |                                                                            |
 |                                                                            |
 |                                                                            |
 |                                                                            |
 |                                                                            |
 |   Structural Object class: Country                                         |
 |   Auxiliary object class: NO                                               |
 +----------------------------------------------------------------------------+

	If you are using 1.0.2 GDS, you will get into Mask 6d to choose the
	attributes you want to add from a list of possible selections.

	If you are using 1.0.1 GDS, you will get into Mask 7 for attributes.

	Since we don't need any attributes here, just type <F2> if you are 
	using 1.0.2 GDS. Hit a couple of <CR>s if you are using 1.0.1 GDS.

	From Mask 4, choose "1" to add object. Choose "3" from Mask 5 to add
	Organization-Name:

 +----------------------------------------------------------------------------+
 |  (Mask 6)             DIRECTORY SYSTEM     Add Object                      |
 +----------------------------------------------------------------------------+
 |                                                                            |
 |                                                                            |
 |     Object Name                                                            |
 |                                                                            |
 |       Country-Name              us                                         |
 |       Organization-Name         osf______________________                  |
 |                                                                            |
 |                                                                            |
 |                                                                            |
 |                                                                            |
 |                                                                            |
 |                                                                            |
 |                                                                            |
 |                                                                            |
 |                                                                            |
 |                                                                            |
 |   Structural Object class: Organization                                    |
 |   Auxiliary object class: NO                                               |
 +----------------------------------------------------------------------------+

	Again, depending on whether you are using 1.0.2 GDS or 1.0.1 GDS, you
	are in either Mask 6d or Mask 7. No attributes are necessary here.
	Just get out as described before.

	From Mask 4, choose "1". From Mask 5, choose "4" for Org.-Unit-Name:

 +----------------------------------------------------------------------------+
 |  (Mask 6)             DIRECTORY SYSTEM     Add Object                      |
 +----------------------------------------------------------------------------+
 |                                                                            |
 |                                                                            |
 |     Object Name                                                            |
 |                                                                            |
 |       Country-Name              us                                         |
 |       Organization-Name         osf______________________                  |
 |       Org.-Unit-Name            osfsun___________________                  |
 |                                                                            |
 |                                                                            |
 |                                                                            |
 |                                                                            |
 |                                                                            |
 |                                                                            |
 |                                                                            |
 |                                                                            |
 |                                                                            |
 |   Structural Object class: Organizational-Unit                             |
 |   Auxiliary object class: NO                                               |
 +----------------------------------------------------------------------------+

	Again, you need to choose what attributes you want to add. Since this
	(c=us/o=osf/ou=osfsun) is the cell name we want to add, we need to add
	the cell information as attributes).

	For 1.0.2 GDS, choose from Mask 6d "CDS-Cell" and "CDS-Replica" by
	using arrow keys to move the highlight to the proper entries and hit
	<CR>. Then hit <F2>.

	For 1.0.1 GDS, enter "CDS-Cell" and "CDS-Replica" as two attribute
	names. Hit a couple of <CR>s until the next screen shows up.

	Before you go on, you need some information of the cell. You can get
	it by going to any machine in the c=us/o=osf/ou=osfsun cell and do the
	following:

$ cdscp show cell /.:/ as gds
                        SHOW
                        CELL   /.../c=us/o=osf/ou=osfsun
                          AT   1993-07-01-14:31:17
              Namespace Uuid = 007C6B54-58AD-1C2F-A096-000082690138
          Clearinghouse Uuid = 003A23C0-58A8-1C2F-A096-000082690138
          Clearinghouse Name = /.../c=us/o=osf/ou=osfsun/osfsun_ch
                Replica Type =   Master  
                       Tower = ncacn_ip_tcp:130.105.1.56[]
                       Tower = ncadg_ip_udp:130.105.1.56[]
$

	You leave this information handy in another window for cut and paste.

	Now you are in Mask 21. It asks you to enter namespace UUID, the root
	dir UUID, and root dir name. As you may notice, there is no root dir
	UUID from the above display. Actually, it is the same as namespace
	UUID. It is a historical reason that it is left here. Don't worry.

 +----------------------------------------------------------------------------+
 |  (Mask 21)          DIRECTORY SYSTEM                 Add Object            |
 +----------------------------------------------------------------------------+
 |                                                                            |
 |                                                                            |
 |     CDS-Cell                                                               |
 |                                                                            |
 |                                                                            |
 |       Namespace UUID: 007C6B54-58AD-1C2F-A096-000082690138                 |
 |                                                                            |
 |                                                                            |
 |       Root dir UUID:  007C6B54-58AD-1C2F-A096-000082690138                 |
 |                                                                            |
 |                                                                            |
 |       Root dir name:  /.../c=us/o=osf/ou=osfsun/__________                 |
 |                                                                            |
 |                                                                            |
 |                                                                            |
 |                                                                            |
 |                                                                            |
 |                                                                            |
 +----------------------------------------------------------------------------+

	Hitting <CR> gets you into Mask 22 for CDS replica information.
	This one is straight forward. Just copy the appropriate entries:

 +----------------------------------------------------------------------------+
 |  (Mask 22)          DIRECTORY SYSTEM                 Add Object            |
 +----------------------------------------------------------------------------+
 |                                                                            |
 |                                                                            |
 |     CDS-Replica                                                            |
 |                                                                            |
 |       Replica type :      MASTER                                           |
 |                                                                            |
 |       Clearinghouse UUID: 003A23C0-58A8-1C2F-A096-000082690138_________    |
 |                                                                            |
 |       Clearinghouse name: /.../c=us/o=osf/ou=osfsun/osfsun_ch__________    |
 |                                                                            |
 |       Tower 1:            ncacn_ip_tcp:130.105.1.56[]__________________    |
 |       Tower 2:            ncadg_ip_udp:130.105.1.56[]__________________    |
 |       Tower 3:            _____________________________________________    |
 |       Tower 4:            _____________________________________________    |
 |       Tower 5:            _____________________________________________    |
 |                                                                            |
 |                                                                            |
 |                                                                            |
 +----------------------------------------------------------------------------+

	From Mask 4, choose "0" to exit. Choose "3" from Mask 3 again. Then
	Ctrl-C to get out of gdsditadm.

	Believe it or not, you have just finished setting up the GDS server
	for inter-cell communication purpose. Congratulations.

	Need to take a break? By all means ...


2. Setting Up The GDS Client

	As mentioned before, the GDS server can be run on any machine. If you 
want to communicate from cell C1 to cell c=os/o=osf/ou=osfsun, you also need a
GDS client to talk to the server who has the information about cell
c=us/o=osf/ou=osfsun.

	The GDS client needs to run of the machine in the cell C1 where the CDS
server runs, since that is the machine where gdad will run.

	Note, if you run GDS server on the machine where CDS server runs, you
are all set, since a GDS server is also a client itself.

	Again, you need to configure the client and create the default DSA. 
Here is what you do:

2.1 Configuring client with "gdssysadm"

	a. Choose "c" for configuration of a directory system, then configure
	   as a Client system (for detailed description, see Chapter 14 of DCE
	   Administration Guide). The following shows a sample values:

 +----------------------------------------------------------------------------+
 |  (confpar)                  DIRECTORY SYSTEM                Configuration  |
 +----------------------------------------------------------------------------+
 |                                                                            |
 |     Which configuration mode ?: Creation of configuration data             |
 |                                                                            |
 |     For which direct[buckler 07/22/93 public]
Assigned to Diana Goldfarb.

[11/17/93 public]

I spoke with Diana Goldfarb (Digital DCE writer) about
this enhancement today. She says that Digital is interested
in making this enhancement to the documentation but will not
be able to do it in the 1.0.3 timeframe. They will consider
making the enhancement in the DCE 1.1 timeframe. Consequently,
I have changed this CR from "open" to "defer" and have marked
the fixby date as "1.1".

[3/29/94 public]

Reassigned this CR to Ron Johnson (DEC DCE 1.1 writer).

[10/4/94 public]

This should probably have been SNI's.  I'm reassigning, and will consult on
defering it.

[10/26/94 public]
defering to 1.2.  Really applies to CDS so....

[7/5/95 public]

Assigned to HP for DCE 1.2.



CR Number                     : 8032
Defect or Enhancement?        : def
CR in Code, Doc, or Test?     : doc
Inter-dependent CRs           : 
Project Name                  : dce
H/W Ref Platform              : all
S/W Ref Platform              : all
Component Name                : cds
Subcomponent Name             : command_ref
Short Description             : describe how multivalues attrs are shown
Reported Date                 : 5/21/93
Found in Baseline             : 1.0.1
Found Date                    : 5/21/93
Severity                      : D
Priority                      : 3
Status                        : open
Duplicate Of                  : 
Fix By Baseline               : 1.2
Fixed In Baseline             : 
Affected File(s)              : cdscp.8cds, 9_cds_view.gpsml
Diff supplied by              : 
Diff release                  : 
Sensitivity                   : public

[5/21/93 public]
The cdscp.8cds man page should describe how multivalued attributes are
displayed via the various show commands, it is not at all obvious from the
display(particularly when there is only one value): 

           CDS_CHDirectories = :
           UUID of Directory = 00495cc9-6827-1bb3-8d8b-08002b0f59bb
           Name of Directory = /.../absolut_cell
           CDS_CHDirectories = :
           UUID of Directory = 0001c958-68eb-1bb3-8d8b-08002b0f59bb
           Name of Directory = /.../absolut_cell/subsys

[07/06/93 public]
Assigned this CR to Diana Goldfarb.

[10/13/93 public]
[verified by Alan Peckham]

Added the following information to cdscp.8cds in the Admin_ref,
and to 9_cds_view.gpsml in the Admin_gd:

        When you display an attribute that has more than one value, the
        show command lists each value separately.

[10/13/93 public]
If all that changed was adding the one sentence described above then this
is not enough.  I want to see an example.  The fact that the attribute is
listed twice and that the Attribute Type will appear on two different
lines.  The fact that a colon is used to indicate that there are multiple
values.  In the example I gave:

           CDS_CHDirectories = :
           UUID of Directory = 00495cc9-6827-1bb3-8d8b-08002b0f59bb
           Name of Directory = /.../absolut_cell
           CDS_CHDirectories = :
           UUID of Directory = 0001c958-68eb-1bb3-8d8b-08002b0f59bb
           Name of Directory = /.../absolut_cell/subsys

I should be VERY clear to the reader that the CDS_CHDirectories attribute
contains two pieces of information, a UUID and a Name, and that there are
two values shown here.

[10/21/93 public]

No change was made to the Admin Guide "Viewing Content
and Structure of the Namespace" chapter (9_cds_view.gpsml).

The change made to the cdscp man page is as follows:

 All entities have show commands that you can use to
 display the names and values of specific attributes
 or all attributes. When you display an attribute that
 has more than one value, the show command lists each value
 for the attribute separately.

This change does not provide enough information about how
to interpret cdscp show command displays of multi-valued attributes
to consider it a "fix" to the CR. Per Hal Lichtin's instructions,
I am reopening this CR and assigning it to Diana Goldfarb.

[11/8/93 - changing to fix pending OSF verification of change]

Howard's point is well taken.  I have taken his example and added it, along 
with an explanation, to 9_cds_view.gpsml.  The new text is as follows:

  The following command displays the current values of the CDS_Directories
  attributes associated with the \*L/.:/Chicago2_CH\*O clearinghouse.  In this
  example, the display for the command shows two values for the attribute.
  The parts of the attribute values for the attribute are UUID of
  Directory and Name of Directory.  The command displays the values
  separately.  For each value, the command first lists the attribute name
  on a line ending with a colon, then the parts of the value. 

     cdscp> show clearinghouse /.:/Chicago2_CH CDS_UTS

           CDS_CHDirectories = :
           UUID of Directory = 00495cc9-6827-1bb3-8d8b-08002b0f59bb
           Name of Directory = /.../absolut_cell
           CDS_CHDirectories = :
           UUID of Directory = 0001c958-68eb-1bb3-8d8b-08002b0f59bb
           Name of Directory = /.../absolut_cell/subsys

[11/8/93 public]
I would make one change for clarity, where you have:

  The parts of the attribute values for the attribute are UUID of
  Directory and Name of Directory.  The command displays the values

I would change this to:

  The parts of the attribute values for the attribute CDS_CHDirectories are
  UUID of Directory and Name of Directory.  The command displays the values

Also the first line has CDS_Directories, not CDS_CHDirectories.  Also, I
believe that the command line is in error.  Where it says CDS_UTS it should
probably say CDS_CHDirectories.  Please TRY the command line to see if it
produces what we think it does.

I have some concerns that only an example is given and that the
generalization is not clear.  The goal is to describe how multivalued
attributes and attributes with multiple parts are displayed, not just give
an example of CDS_CHDirectories.  For example, what I don't get out of the
above text, is how do I know when the listings of attributes with parts
end.  I know they start with a line that has the attribute and a : and that
the values follow.  How do I know how many parts are in the attribute
value?  For example, how do I know from the output that there are two parts
in each value of a CDS_CHDirectories attribute?  What if there were only
one value? (That isn't a typo, CDS_CHDirectories happens to be both
multivalues and each value has more than one part.)

Finally, I would really like to see this info in the both the guide and the
reference pages.  When I'm playing with cdscp and trying to figure out its
output, I'm more likely to say "man cdscp" than to open the admin guide.

[11/10/93 - verified by janet mccann]

Thanks, Howard, for catching the typos. I've changed CDS_Directories
to CDS_CHDirectories and corrected the command line.  In addition, I
added to the example the beginning lines of the cdscp show clearinghouse
command display for completeness.

For clarity, I have changed the following sentence in 9_cds_view.gpsml
by removing the redundant words "for the attribute."

  OLD:  "...The parts of the attribute values for the attribute are
        UUID of Directory and Name of Directory."

  NEW:  "...The parts of the attribute value are UUID of Directory and Name
        of Directory."

I have also the changed the revised cdscp.8cds text to read as follows:

        "All entities have \*Lshow\*O commands that you can use to
        display the names and values of specific attributes or all
        attributes. When you display an attribute that has more than one
        value, the \*Lshow\*O command lists each value for the attribute
        separately. For each value, the command first lists the
        attribute name on a line ending with a colon, then the
        components of the value."
        
Howard comments that "the goal is to describe how multivalued attributes
and attributes with multiple parts are displayed, not just give an
example..."   He asks ..."how do I know when the listings of attributes
with parts end [sic]... How do I know how many parts are in the attribute
value?..how do I know from the output that there are two parts
in each value of a CDS_CHDirectories attribute?  What if there were only
one value?" To Howard's questions we might add: How do I know when the
attribute parts have subparts, and where they begin and end?

It turns out that the cdscp display of attributes is ambiguous. There is,
apparently, no way to describe how to read the output.  This is not a
problem documentation can solve.  For the time being, the best
documentation can do is address the simple issue with the simple
statement and recommend opening a CR against the software.

[11/10/93 public]
I was fearful of that but not positive.  Okay, then we should tell the
reader that sometimes it can be hard to figure out where things end.  There
are a few hints we can mention.  First of all CDS attributes all begin with
CDS_, that is all the attributes defined by CDS, not by users, RPC defines
some as well, and those begin with RPC_.  The parts of attributes that have
multiple parts (not values) have a "type" that does NOT begin with CDS_.
Here's the same example:

           CDS_CHDirectories = :
           UUID of Directory = 00495cc9-6827-1bb3-8d8b-08002b0f59bb
           Name of Directory = /.../absolut_cell
           CDS_CHDirectories = :
           UUID of Directory = 0001c958-68eb-1bb3-8d8b-08002b0f59bb
           Name of Directory = /.../absolut_cell/subsys

You can tell that the attribute is CDS_CHDirectories and that it has two
parts, neither of which begin with CDS_.  To find out what the defined
attributes are the user can look at the /opt/dcelocal/etc/cds_attributes
file.  Now, I'm pretty sure that the file is implementation specific, i.e.,
it is this way on the reference ports.  Also note that /opt/dcelocal is
usually written as dcelocal in italics (things like this often get screwed
up, so I'm just trying to be complete).

Also, the only "multi-part" attributes that will be displayed are those
that are in CDS defined attributes since the display of these things
happens in cdscp code.  Given that, we know which parts can be output and
which attributes have parts.  We can list this stuff.  Note that if a user
defines a new attribute with parts, unless they modify cdscp, it will only
be displayed as a "bunch of bytes".

You can tell how many values an attribute has, because the attribute type
will be repeated that many times.

Can we do something like this?

[11/11/93 public]
fixed->closed.

[11/19/93 public]

(This bug was inadvertently closed.)

The cdscp display of attributes is ambiguous. Either
the cdscp code could be changed to remove the ambiguity,
or the documentation could be enhanced to explain the
ambiguity. Diana Goldfarb is consulting with Janet McCann
about whether or not cdscp may be fixed. Meanwhile, I am
reopening this bug, but changing the "fixby" date from 1.0.3
to 1.1, since there is not enough time to fix it for the
1.0.3 shipment.

[1/18/94 public]

Changed this CR to an engineering CR, per Mary Jane Grinham's
instructions (M.J.G. is DCE 1.1 documentation project manager).

[7/5/95 public]

Reassigned for DCE 1.2.

[08/20/96 public]
I'm re-assigning this back to doc since cdscp is being obsoleted by
dcecp and no further enhancements for cdscp are planned (especially
in changes of display), although I do agree that the cdscp output
is poor.  Documentation can close this OT if they think so.



CR Number                     : 8028
Defect or Enhancement?        : enh
CR in Code, Doc, or Test?     : test
Inter-dependent CRs           : 
Project Name                  : dce
H/W Ref Platform              : all
S/W Ref Platform              : all
Component Name                : cds
Subcomponent Name             : 
Short Description             : what is test/directory/cds/dcesx/tp.sh?
Reported Date                 : 5/20/93
Found in Baseline             : 1.0.2
Found Date                    : 5/20/93
Severity                      : E
Priority                      : 2
Status                        : open
Duplicate Of                  : 
Fix By Baseline               : 1.1
Fixed In Baseline             : 
Affected File(s)              : test/directory/cds/dcesx/tp.sh
Sensitivity                   : public

[5/20/93 public]

test/directory/cds/dcesx/tp.sh appears to be incomplete (e.g. dcecheck is
missing). tp.sh should either be completed, documented, and used to test
cds, or it should be removed from the functional test branch of the source
tree.



CR Number                     : 7975
Defect or Enhancement?        : enh
CR in Code, Doc, or Test?     : code
Inter-dependent CRs           : 
Project Name                  : dce
H/W Ref Platform              : all
S/W Ref Platform              : all
Component Name                : cds
Subcomponent Name             : cds/control/cds.cdt
Short Description             : Removing non-supported add
sub-commands
Reported Date                 : 5/11/93
Found in Baseline             : 1.0.2
Found Date                    : 5/11/93
Severity                      : D
Priority                      : 3
Status                        : open
Duplicate Of                  : 
Fix By Baseline               : 1.2
Fixed In Baseline             : 
Affected File(s)              : 
Diff supplied by              : 
Diff release                  : 
Sensitivity                   : public

[5/11/93 public]

File cds.cdt includes several subcommands for "add" which are not
documented; These include
  clearinghouse
  link
  softlink
  child
  replica

If they are not supported, remove them from cds.cdt file. If they are,
please properly document them.

[5/17/93 public]

More:

One Line Description:

        cdscp do filename appears to be in the code but not in the
documentation

Full Description:

        The file cds.cdt and the rest of the cdscp implementation appears
to support a command of the form "do <filename>", but this command does not
appear in the reference man pages for cds. In addition, the command appears
to take unnecessarily long to terminate.

Repeat By:

        echo "show dir /.:/hosts" > /tmp/testcdscp
        cdscp do /tmp/testcdscp


Proposed Solution:

        either document the command or delete it from the code. This seems like
it might be pretty useful so it should probably be left in but there are
other ways to do this. If it not deleted the command should terminate quicker.



CR Number                     : 7951
Defect or Enhancement?        : def
CR in Code, Doc, or Test?     : code
Inter-dependent CRs           : 
Project Name                  : dce
H/W Ref Platform              : all
S/W Ref Platform              : all
Component Name                : cds
Subcomponent Name             : control
Short Description             : CDSCP Class Name with more
than 31 characters indicates error in the wrong place.
Reported Date                 : 5/6/93
Found in Baseline             : 1.0.2
Found Date                    : 5/6/93
Severity                      : E
Priority                      : 4
Status                        : open
Duplicate Of                  : 
Fix By Baseline               : 1.2
Fixed In Baseline             : 
Affected File(s)              : 
Diff supplied by              : 
Diff release                  : 
Sensitivity                   : public

[5/6/93 public]

Type the following:

cdscp create object /.:/dir1/dir3 CDS_class =
ClassNameWithLengthMoreThan31Chars CDS_ClassVersion = 1.0

A syntax error is returned as expected, but the marker indicates the space
after ClassNameWithLengthMoreThan31Chars is in error rather than marking
the start of the invalid name.  This implies that the name is OK, but
something after it is incorrect.

[9/13/93 public]
This will be fixed as part of the I18N work for cdscp for 1.1.



CR Number                     : 7949
Defect or Enhancement?        : def
CR in Code, Doc, or Test?     : code
Inter-dependent CRs           : 
Project Name                  : dce
H/W Ref Platform              : all
S/W Ref Platform              : all
Component Name                : cds
Subcomponent Name             : 
Short Description             : Invalid Characters allowed for
CDS objects
Reported Date                 : 5/6/93
Found in Baseline             : 1.0.2
Found Date                    : 5/6/93
Severity                      : D
Priority                      : 4
Status                        : open
Duplicate Of                  : 
Fix By Baseline               : 1.2
Fixed In Baseline             : 
Affected File(s)              : 
Diff supplied by              : 
Diff release                  : 
Sensitivity                   : public

[5/6/93 public]

Jim Souter did testing to check validity of characters in CDS names.  Used
cdscp to create various cds object names.  According to published claims,
only code points x20-x7e should be valid.  According to test results, the
following was observed:

 1) x01-20 not valid (expected)
 2) x21 (!): valid if entered surrounded by single quotes; if entered
    surrounded by double quotes or without quotes, accepted, but acts as 
    string terminator.  This behavior is unexpected and probably an error.
 3) x22 (") accepted but deleted from string (unexpected).
 4) x23 (#) acted just like x21.
 5) x27 (') not accepted under any conditions (error).
 6) x2f (/) acted just like x21.
 7) x3e (>) can be entered using double quotes; however, if entered with
    single quotes, it is stripped (unexpected).
 8) x62 (^) acted just like x3e.
 9) x7c (|) acted just like x21.
10) x7f cannot enter.
11) x80-x95 cannot enter (expected).
12) x96-xff can be entered (totally unexpected).

Of all the above, the most interesting observation is found in 11 & 12.
Expected all of character range x80-xff to act in the same manner, not part
one way and part the other.

Also checked CDS_Class values for character sensitivity.  Confirmed exactly
the same results shown above for CDS object names.  Character validity is
the same no matter whether the characters are entered on the server or the
client.

[9/13/93 public]
This will be fixed as part of the I18N work for 1.1.



CR Number                     : 7939
Defect or Enhancement?        : def
CR in Code, Doc, or Test?     : code
Inter-dependent CRs           : 
Project Name                  : dce
H/W Ref Platform              : rs6000
S/W Ref Platform              : aix
Component Name                : cds
Subcomponent Name             : 
Short Description             : unable to recreate a cds secondary
immediately after removing it
Reported Date                 : 5/5/93
Found in Baseline             : 1.0.2
Found Date                    : 5/5/93
Severity                      : C
Priority                      : 2
Status                        : open
Duplicate Of                  : 
Fix By Baseline               : 1.2
Fixed In Baseline             : 
Affected File(s)              : 
Diff supplied by              : 
Diff release                  : 
Sensitivity                   : public

[5/5/93 public]
After removing a cds secondary server and recreating it successfully, a skulk
cannot be performed.  The error returned is "Unable to communicate with any
CDS server".  The problem is stemming from the spread code.  This code attempts
to get replica information from the secondary cdsd via clerk_read_replica().
Upon getting over to the secondary cdsd, the secondary cdsd then performs a
who_are_you callback to the clerk (under the RPC covers).  This call is 
failing with a kerberos decrypt integrity error.  It seems that when the
secondary is removed, the primary cdsd (and clerk) have old security info
about the secondary.  This problem will go away after a 2 hour period (due to
security refreshing tickets).  I have talked with Peter Keegan about this.
He felt that the problem was in Security.  I am opening this OT since I have
more understanding of how the problem is happening as it relates to cds.  I
will let the experts decide where the problem is.  With a private build, I
implemented a demand refresh of the primary server identity (broadcasting to
a condition variable in the refresh_server_identity thread).  This caused the
wait to be only 10 minutes before a skulk would work.  Terminating the primary
cdsd and restarting corrects the problem all together.

[05/06/93 public]
I'll have security look at it but leave it in cds until then....

[6/7/93 public]
The problem seems to be that the security code in the secondary cds
server is not happy with the credentials of the client.  The client 
in this case is the cds master server, whose identity is passed to
a clerk running on the master.  Now, even if you kill this clerk,
I believe the failure still occurs, because the cds master server is
passing the same login context to the clerk.  Now, after a few
hours, a thread in the master cds server wakes up and refreshes the
server's identity and the next time it tries to contact the secondary
(via the clerk), it succeeds.

This seems like a generic problem applicable to any DCE application that
uses authenticated RPC.  The master cds server is refreshing it's identity
at an interval based on information it gets from the registry.  There is no
other mechanism for it learn that it needs to refresh it any sooner.  I
still don't understand why the secondary server is getting the 'kerberos
decrypt integrity' error.  

I think a security person should review this before we consider making
any changes to CDS.

[7/16/93 public]
I'm reassigning to security in the hopes that more advice (or even
a bug fix :-) will result.

[7/16/93 public]

Hoo boy.  We have the following scenario here, from the point of view of
security.

This is a hard problem to solve; in any event, fixing it may require the
intervention of CDS, so this is reassigned to them.  I'll open a fresh
security enhancement request to explore solutions to the problem.

 - CDS creates a principal in security, sets a key on it, with key version #1
 - cdsd uses the principal, and has a ticket to that principal in it's
(replication) login context.
 - the admin deletes the replica and the principal.
 - the admin then re-creates the principal with the same name, but a
	different key.
 - cdsd re-uses the old ticket, encrypted under the old principal's key.
 - carnage results until the ticket expires and is replaced, typically some
time in the next 2 hours.

I think the easiest fix is procedural:
option 1) don't do this:
	- if you have to blow away and reconfig a server, do it under a
different principal name.
	- or, keep the keytab entry and account the same, so that the old
tickets are still valid.
	2) work around it in CDS
	- refresh the server's identity whenever a replica that you've
talked to is *deleted*.

We might want to add a new API to security to flush references to a
particular principal from a login context so as to avoid getting confused
by this problem, but someone would have to call this.

We could make this problem easier to deal with by keeping around a
"skeleton" of the old principal when it's deleted, so that the new
principal uses a different key version number on the principal's key.

[7/27/93]
One of the things that I did while investigating this was to create a condition
variable in the refresh_identity thread and do a timed wait on it.  I was then
able to broadcast to this condition variable via cdsd_diag and start up the
refresh thread.  I still seemed to have problems but it took less time to
correct itself (~10 minutes instead of 2 hours).  Don't know if I missed
something in my implementation.



CR Number                     : 7714
Defect or Enhancement?        : enh
CR in Code, Doc, or Test?     : code
Inter-dependent CRs           : 
Project Name                  : dce
H/W Ref Platform              : all
S/W Ref Platform              : all
Component Name                : cds
Subcomponent Name             : adver, server
Short Description             : uuid_from_string isn't needed in init code
Reported Date                 : 4/13/93
Found in Baseline             : 1.0.2
Found Date                    : 4/13/93
Severity                      : D
Priority                      : 3
Status                        : open
Duplicate Of                  : 
Fix By Baseline               : 1.2
Fixed In Baseline             : 
Affected File(s)              : 
Diff supplied by              : 
Diff release                  : 
Sensitivity                   : public

[4/13/93 public]

Please note that this is an enhancement request (of the code-cleanup
variety).

There are a surprising number of places in the CDS code which call
uuid_from_string to initialize a "constant" uuid.

They should really just initialize it at compile time (use the format of
the output of uuidgen -s) and save some microseconds and code space in
their initialization code..

(I discovered this by running into a bug in the HP-UX sscanf & ungetc,
which wants to write to constant strings; if you compile with the option to
put character constants into read-only storage, cdsadv and cdsd, and
possibly others, crump at startup time).



CR Number                     : 7690
Defect or Enhancement?        : enh
CR in Code, Doc, or Test?     : code
Inter-dependent CRs           : 
Project Name                  : dce
H/W Ref Platform              : rs6000
S/W Ref Platform              : aix
Component Name                : cds
Subcomponent Name             : cdscp
Short Description             : cdscp displays RPC_ObjectUUIDs incorrectly
Reported Date                 : 4/12/93
Found in Baseline             : 1.0.2
Found Date                    : 4/12/93
Severity                      : C
Priority                      : 3
Status                        : open
Duplicate Of                  : 
Fix By Baseline               : 1.2
Fixed In Baseline             : 
Affected File(s)              : 
Diff supplied by              : 
Diff release                  : 
Sensitivity                   : public

[4/12/93 public]
RPC_ObjectUUIDs are not printed out in UUID string representation.  E.g.

% cdscp show obj /.:/hosts/bachmann.austin.ibm.com/cds-server

                        SHOW
                      OBJECT
/.../bachmann.cell.austin.ibm.com/hosts/bachmann.
austin.ibm.com/cds-server
                          AT   1993-03-15-02:47:53
            RPC_ClassVersion = 0100
             RPC_ObjectUUIDs = 40e5f2fab858ca11a04a08002b12a70d
                     CDS_CTS =
1993-03-04-21:34:07.582730100/10-00-5a-4f-34-28
                     CDS_UTS =
1993-03-04-21:35:13.354946100/10-00-5a-4f-34-28
                   CDS_Class = RPC_Entry
            CDS_ClassVersion = 1.0
                  CDS_Towers = :
                       Tower = ncadg_ip_udp:129.35.67.162[]

RPC_ObjectUUIDs should be = faf2e540-58b8-11ca-a04a-08002b12a70d

as in 

% rpccp show mapping -o faf2e540-58b8-11ca-a04a-08002b12a70d

mappings:

  <object>         faf2e540-58b8-11ca-a04a-08002b12a70d
  <interface id>   47b333318000.0d.00.01.dc.6c.00.00.00,0.0
  <string binding> ncadg_ip_udp:129.35.67.162[2276]
  <annotation>     cdsd [12536]

    <Note by jsirkin (Jeanne Sirkin), 93/04/12 08:35:56, action: note>

The format of the object uuid differs between what cdscp show  and rpccp
show
mapping. For example:

[root@dryden]  # cdscp show obj /.:/subsys/ibm/cet/dryden.Bank.Admin

                        SHOW
                      OBJECT
/.../banking.cet.austin.ibm.com/subsys/ibm/cet/dryden.Ban
k.Admin
                          AT   1993-04-09-04:55:53
            RPC_ClassVersion = 0100
             RPC_ObjectUUIDs = 90c78900358ac51b894210005a4f2d2a
                     CDS_CTS =
1993-03-26-19:42:13.830083100/10-00-5a-4f-2e-8f
                     CDS_UTS =
1993-04-09-14:37:42.776530100/10-00-5a-4f-2e-8f
                   CDS_Class = RPC_Entry
            CDS_ClassVersion = 1.0
                  CDS_Towers = :
                       Tower = ncadg_ip_udp:192.100.16.17[]
                  CDS_Towers = :
                       Tower = ncadg_ip_udp:192.100.15.17[]

but rpccp show mapping gives:

  <object>         0089c790-8a35-1bc5-8942-10005a4f2d2a
  <interface id>   b3159cf8-f59a-11c9-8020-02608c2ea88e,2.0
  <string binding> ncadg_ip_udp:192.100.16.17[3363]
  <annotation>     admin interface

  <object>         0089c790-8a35-1bc5-8942-10005a4f2d2a
  <interface id>   b3159cf8-f59a-11c9-8020-02608c2ea88e,2.0
  <string binding> ncadg_ip_udp:192.100.15.17[3363]
  <annotation>     admin interface

  <object>         0089c790-8a35-1bc5-8942-10005a4f2d2a
  <interface id>   88fdbace-f5a3-11c9-9999-02608c2ea88e,1.0
  <string binding> ncadg_ip_udp:192.100.16.17[3363]
  <annotation>     trans interface

  <object>         0089c790-8a35-1bc5-8942-10005a4f2d2a
  <interface id>   88fdbace-f5a3-11c9-9999-02608c2ea88e,1.0
  <string binding> ncadg_ip_udp:192.100.15.17[3363]
  <annotation>     trans interface

So to summarise:

cdscp show gives:            RPC_ObjectUUIDs =
90c78900358ac51b894210005a4f2d2a
rpccp show mapping gives: <object>
0089c790-8a35-1bc5-8942-10005a4f2d2a

the top part of this object UUID seems switched around:
90c78900 becomes 0089c790c790 
358a becomes 8a35
c51b becomes 1bc5

Exactly!  And as near as I can tell, the format used by rpccp is the
correct 
one.  Note that cdscp show cell /.: correctly formats the UUIDs.

% cdscp show cell /.:
Warning: you have no network credentials. All requests will be
unauthenticated.
                        SHOW
                        CELL   /.../perf.cell.austin.ibm.com
                          AT   1993-04-12-04:01:24
              Namespace Uuid = 000d584a-a4fb-1bb8-b1a2-10005ac9200f
          Clearinghouse Uuid = 0064afa0-a4f9-1bb8-b1a2-10005ac9200f
          Clearinghouse Name = /.../perf.cell.austin.ibm.com/dceperf_ch
                Replica Type =   Master
                       Tower = ncadg_ip_udp:129.35.68.52[]

The high 4 bits of the third field (time_hi_and_version) should always be
0001
(DCE version 1).

And, just for a bit more -- in the following, the RPC_Object UUIDs and
the CDS_ObjectUUID should be the same:

cdscp> show obj /.:/agony_ch RPC_ObjectUUIDs CDS_ObjectUUID

                        SHOW
                      OBJECT   /.../xinu.cell/agony_ch
                          AT   1993-04-12-09:37:36
             RPC_ObjectUUIDs = 162f740050c9bc1b89c010005aa88161
              CDS_ObjectUUID = 00742f16-c950-1bbc-89c0-10005aa88161

[4/13/92 public]
cdscp shows RPC_ObjectUUIDs as strings of hex digits because RPC stores them in
CDS attributes as uninterpreted byte strings. Has RPC chosen to store them with
an attribute syntax of uuid, cdscp would display them as rpccp does. You are
also seeing the effects of an endian mismatch; the uuid_to_string(3rpc)
function is byte swapping integer portions (sequence no. and version) of
the uuid.

If you think cdscp should special-case RPC_ObjectUUIDs attributes, please
reenter this as an enhancement request against cdscp, but I believe that
RPC should not have used an attribute syntax of byte. I'll defer to OSF to
arbitrate the decision of whose this CR should rightfully be directed --
for now I am changing the component name to RPC.

[4/16/93 public]
I'll hold off opening a cds feature until rpc decides how to deal with
this.  It's important that we comply with X/OPEN standards, whatever the
resolution is.  Note from Dave Bachman here:

OK, here's the X/OPEN argument for the OT defect.  Appendix A of the
Application
Environment Specification for RPC describe's the UUID.  Section A-3
describes
the format of a UUID string representation (in BNF with an example).  In
the
example above, the CDS_ObjectUUID conforms to this.  The RPC_ObjectUUID
does
not.  Also, in chapter 6 (describing RPC), section 6.2.3.3 describes the 
server_name object attributes in Table 6-3 (on page 6-18).  In the table, 
RPC_ObjectUUIDs is described as a set of uuid_t.  So cdscp is not
conforming to
appendix A-3 and NSI is not conforming to table 6-3.  If NSI changes, that
would
fix both problems.

Looking at the bits on the wire, I see that the byte-stream representations
are
different between the two values (RPC_ObjectUUIDs,CDS_ObjectUUID), if
that's 
relevant.

[4/20/93 public]
I asked about this on dce-tech:

As mentioned in OT 7690, cdscp displays RPC_ObjectUUIDs incorrectly. 
It turns out that the reason for this is that NSI is storing them on
the server in its own opaque format (just a byte stream as far as CDS
is concerned) and actually calls its own routines (nsuuid_to_uuid) to
convert from the little-endian format stored on the server into proper uuid_t type.

Not only does this cause cdscp to display RPC_ObjectUUIDs as a hex
dump, making them effectively useless and also violating the draft RPC
AES format for UUID string representation (section A-3).  This also
violates the RPC AES table defining what NSI stores on the server. 
Table 6-3 (on page 6-18) in section 6.2.3.3 describes the
server_name object attributes.  In the table, RPC_ObjectUUIDs is
described as a set of uuid_t.

I think we've got a problem here, if we want to be able to interoperate
with the X/OPEN spec (assuming the draft is blessed).

This seems a lot more serious than the uuid case issue.

I assume the folks who've been moving the AES along are on this list. 
Do you agree that this is a problem?

dave

Here is the response from Norbert Leser:

> Not only does this cause cdscp to display RPC_ObjectUUIDs as a hex
> dump, making them effectively useless and also violating the draft RPC
> AES format for UUID string representation (section A-3).  This also

That is correct, cdscp must display it in the specified UUID string 
representation.

> violates the RPC AES table defining what NSI stores on the server. 
> Table 6-3 (on page 6-18) in section 6.2.3.3 describes the
> server_name object attributes.  In the table, RPC_ObjectUUIDs is
> described as a set of uuid_t.

The table entry of the AES will be updated, stating that the UUID is stored
in little-endian - as it is also done for the other data types.
(BTW, the other data type for CDS_Towers will also be corrected from
protocol_tower to protocol_tower_t.)
The CDS/NSI implementation is right.

Norbert

[4/20/93 public]
While I am disappointed that NSI's behavior will be blessed, I can understand
the desire to avoid re-architecting NSI at this point in the game.

The end result, then, is that the AES will be modified to conform to NSI, and
cdscp needs to be modified to conform to the AES.

This needs an official response from OSF to confirm the above, at which point

[4/21/93 public]

This OT status is changed to a CDS enhancement.  The cdscp command should
display UUIDs in the format specified by the UUID Appendix of the RPC AES.
The UUID specification was included as an appendix to RPC for convenience.
It's scope is actually all of DCE.  While strictly speaking, the user
visible representation of a UUID is defined by the application which
displays it, it is neither convenient nor good design practice to choose
arbitrarily different representations in different applications.



CR Number                     : 7679
Defect or Enhancement?        : enh
CR in Code, Doc, or Test?     : code
Inter-dependent CRs           : 
Project Name                  : dce
H/W Ref Platform              : other
S/W Ref Platform              : other
Component Name                : cds
Subcomponent Name             : browser
Short Description             : browser doesn't build with X11R5 on HP-UX
Reported Date                 : 4/9/93
Found in Baseline             : 1.0.2
Found Date                    : 4/9/93
Severity                      : C
Priority                      : 2
Status                        : open
Duplicate Of                  : 
Fix By Baseline               : 1.2
Fixed In Baseline             : 
Affected File(s)              : 
	directory/cds/cds.mk
	directory/cds/cdsbrowser/Makefile
	directory/cds/cdsbrowser/cds.c
	directory/cds/cdsbrowser/cds_browser.c
	directory/cds/cdsbrowser/cds_display.c
	directory/cds/cdsbrowser/pane.c
Diff supplied by              : 
Diff release                  : 
Sensitivity                   : public

[4/9/93 public]

The following is as a result of HP-UX reference platform work, and is an
enhancement request.  

1) the cdsbrowser doesn't build with X11R5; some code in cds_display.c
treats a GC as if it weren't an opaque data type.

2) there appear to be some VMS-ism's (or X11R3/Motif1.0 fallout??) in the
#includes in source files; there should never be a need to do a
-I/usr/include/X11 on any UNIX platform using X.

3) HP-UX 9.0 moves to X11R5 and Motif 1.2; HP800_INCLUDES and
HP800_LIBFLAGS needs to be changed in cds.mk

[4/9/93 public]

Needed changes (these will go in as part of the HP-UX reference platform
drop if I don't hear any objections):

*** /project/dce/build/dce1.0.2/src/directory/cds/cds.mk        Wed Feb  3 17:33:51 1993
--- ./cds.mk    Fri Apr  9 12:31:08 1993
***************
*** 371,378 ****
  MIPS_LIBFLAGS ?= -L/usr/lib/DXM/lib/Mrm -L/usr/lib/DXM/lib/DXm \
                   -L/usr/lib/DXM/lib/Xm -L/usr/lib/DXM/lib/Xt
  APOLLO68K_LIBS  += -ldce
! HP800_INCFLAGS  ?= -I/usr/include/Motif1.1 -I/usr/include/X11R4/X11
-I/usr/include/X11R4
! HP800_LIBFLAGS  ?= -L/usr/lib/X11R4 -L/usr/lib/Motif1.1
  HP800_LIBS      ?= ${HP_LIB_DCE} -lMrm -lXm -lXt -lX11 ${HP_LIB_COM}
  SVR4_LIBS       ?= ${SVR4_LIB_DCE} -lMrm -lXm -lXt -lX11
  .if (${TARGET_MACHINE}=="SVR4") && (${TARGET_OS_PLATFORM}=="PYRMIPS")
--- 379,386 ----
  MIPS_LIBFLAGS ?= -L/usr/lib/DXM/lib/Mrm -L/usr/lib/DXM/lib/DXm \
                   -L/usr/lib/DXM/lib/Xm -L/usr/lib/DXM/lib/Xt
  APOLLO68K_LIBS  += -ldce
! HP800_INCFLAGS  ?= -I/usr/include/Motif1.2 -I/usr/include/X11R5
! HP800_LIBFLAGS  ?= -L/usr/lib/X11R5 -L/usr/lib/Motif1.2
  HP800_LIBS      ?= ${HP_LIB_DCE} -lMrm -lXm -lXt -lX11 ${HP_LIB_COM}
  SVR4_LIBS       ?= ${SVR4_LIB_DCE} -lMrm -lXm -lXt -lX11
  .if (${TARGET_MACHINE}=="SVR4") && (${TARGET_OS_PLATFORM}=="PYRMIPS")

*** /project/dce/build/dce1.0.2/src/directory/cds/cdsbrowser/Makefile   Wed Dec 30 07:47:28 1992
--- ./cdsbrowser/Makefile       Fri Apr  9 12:23:27 1993
***************
*** 68,74 ****
  # compiler flags
  CFLAGS                = ${${TARGET_MACHINE}_CFLAGS}
  
! INCFLAGS        = -I../includes -I/usr/include/X11
${${TARGET_MACHINE}_INCFLAGS}
  
  # List of objects to build cdsbrowser
  cdsbrowser_OFILES = \
--- 72,78 ----
  # compiler flags
  CFLAGS                = ${${TARGET_MACHINE}_CFLAGS}
  
! INCFLAGS        = -I../includes ${${TARGET_MACHINE}_INCFLAGS}
  
  # List of objects to build cdsbrowser
  cdsbrowser_OFILES = \

*** /project/dce/build/dce1.0.2/src/directory/cds/cdsbrowser/cds.c      Wed Dec 30 07:47:34 1992
--- ./cdsbrowser/cds.c  Fri Apr  9 12:23:39 1993
***************
*** 67,73 ****
  #else
  #include <Xm/XmP.h>
  #include <Mrm/MrmPublic.h>
! #include <StringDefs.h>
  #include <Xm/Text.h>
  #include <X11/cursorfont.h>
  #endif
--- 74,80 ----
  #else
  #include <Xm/XmP.h>
  #include <Mrm/MrmPublic.h>
! #include <X11/StringDefs.h>
  #include <Xm/Text.h>
  #include <X11/cursorfont.h>
  #endif


*** /project/dce/build/dce1.0.2/src/directory/cds/cdsbrowser/cds_browser.c Wed Feb  3 17:35:11 1993
--- ./cdsbrowser/cds_browser.c  Fri Apr  9 12:23:43 1993
***************
*** 81,87 ****
  #include <Xm/RowColumn.h>
  #include <Xm/CascadeB.h>
  #include <Xm/PushB.h>
! #include <Shell.h>
  #endif
  
  #include <cds_decwmp.h>
--- 87,93 ----
  #include <Xm/RowColumn.h>
  #include <Xm/CascadeB.h>
  #include <Xm/PushB.h>
! #include <X11/Shell.h>
  #endif
  
  #include <cds_decwmp.h>

*** /project/dce/build/dce1.0.2/src/directory/cds/cdsbrowser/cds_display.c Wed Dec 30 07:48:00 1992
--- ./cdsbrowser/cds_display.c  Fri Apr  9 12:23:54 1993
***************
*** 59,65 ****
  #else
  #include <Xm/XmP.h>
  #include <Mrm/MrmPublic.h>
! #include <StringDefs.h>
  #include <Xm/Text.h>
  #include <X11/cursorfont.h>
  #endif
--- 70,76 ----
  #else
  #include <Xm/XmP.h>
  #include <Mrm/MrmPublic.h>
! #include <X11/StringDefs.h>
  #include <Xm/Text.h>
  #include <X11/cursorfont.h>
  #endif
***************
*** 1598,1604 ****
                       **  Get and set the font if necessary
                       */
                           compfont = DisplayFont (w, entry, comp);
!                          if (gc->values.font != compfont->fid) XSetFont
(XtDisplay(w), gc, compfont->fid);
  
  
                       /*
--- 1609,1615 ----
                       **  Get and set the font if necessary
                       */
                           compfont = DisplayFont (w, entry, comp);
!                          XSetFont (XtDisplay(w), gc, compfont->fid);
  
  
                       /*
***************
*** 1804,1810 ****
                       **  Get and set the font if necessary
                       */
                           compfont = DisplayFont (w, entry, comp);
!                          if (gc->values.font != compfont->fid) XSetFont
(XtDisplay(w), gc, compfont->fid);
  
  
                       /*
--- 1815,1821 ----
                       **  Get and set the font if necessary
                       */
                           compfont = DisplayFont (w, entry, comp);
!                          XSetFont (XtDisplay(w), gc, compfont->fid);
  
  
                       /*
*** /project/dce/build/dce1.0.2/src/directory/cds/cdsbrowser/pane.c     Wed Dec 30 07:48:53 1992
--- ./cdsbrowser/pane.c Fri Apr  9 12:24:02 1993
***************
*** 55,61 ****
  #else
  #include <Xm/XmP.h>
  #include <Mrm/MrmPublic.h>
! #include <StringDefs.h>
  #include <Xm/Text.h>
  #include <X11/cursorfont.h>
  #endif
--- 62,68 ----
  #else
  #include <Xm/XmP.h>
  #include <Mrm/MrmPublic.h>
! #include <X11/StringDefs.h>
  #include <Xm/Text.h>
  #include <X11/cursorfont.h>
  #endif



CR Number                     : 7452
Defect or Enhancement?        : enh
CR in Code, Doc, or Test?     : code
Inter-dependent CRs           : 
Project Name                  : dce
H/W Ref Platform              : all
S/W Ref Platform              : all
Component Name                : cds
Subcomponent Name             : cdscp
Short Description             : cdscp command does not have
-confidence option
Reported Date                 : 3/9/93
Found in Baseline             : 1.0.2b17
Found Date                    : 3/9/93
Severity                      : D
Priority                      : 3
Status                        : open
Duplicate Of                  : 
Fix By Baseline               : 1.2
Fixed In Baseline             : 
Affected File(s)              : 
Diff supplied by              : 
Diff release                  : 
Sensitivity                   : public

[3/9/93 public]

"set cdscp confidence level" command only works inside CDS control program.
Once cdscp exits, the confidence level is reset back to medium. That means
that all cdscp command executed at command line will always work with
medium confidence.

It will be nice to let command line cdscp command to take "-confidence
level" as an option so that the command is executed with the specified
confidence. 

The requirement comes when people needs to use cdscp commands (lots) at
different places in a shell script. Though there is way to get around this
like: 

cdscp << EOF
set cdscp confidence high
{commands}
EOF

But if one needs to do so for every cdscp command, it would be kind of
clumsy.



CR Number                     : 7082
Defect or Enhancement?        : enh
CR in Code, Doc, or Test?     : code
Inter-dependent CRs           : 
Project Name                  : dce
H/W Ref Platform              : all
S/W Ref Platform              : all
Component Name                : cds
Subcomponent Name             : 
Short Description             : CDS code cleanup - towars I18N
code set independence
Reported Date                 : 2/1/93
Found in Baseline             : 1.0.1
Found Date                    : 2/1/93
Severity                      : C
Priority                      : 2
Status                        : open
Duplicate Of                  : 
Fix By Baseline               : 1.2
Fixed In Baseline             : 
Affected File(s)              : 
cds/control/prscmd.c,islatin1print.c,msg.c,prs.c,msgfnd.c cds/includes/msgpre.h cds/library/dnsenumobj.c,dnsenumgrp.cdnsemumslink.c,dnsenumchild.c,dnscreategrp.c
Diff supplied by              : 
Diff release                  : 
Sensitivity                   : public

[2/1/93 public]

This report details the CDS problems described in the document
"I18N Code Set Independence for MVS/PP Release 1.1.0" written
by Suman Kalia, Sue Kline and David Obermann dated November 13,
1992.  A solution is provided along with each problem.  These
solutions were used for DCE on MVS.

Most of the recommended changes are a case of substituting a
character testing or manipulation function (e.g to_upper(),
to_lower(), isdigit(), isxdigit(), isalpha(), isupper(), islower(),
isprint(), isalnum, ispunt, iscntrl(), isspace() ) for adhoc character
testing or manipulation which is known to be dependent on the ascii
encoding. 

Proposed Improvement:

*** /project/dce/build/dce1.0.2/src/directory/cds/control/islatin1print.c
Wed Dec 30 08:14:35 1992
--- islatin1print.c	Fri Jan 29 15:25:38 1993
***************
*** 43,47 ****
  islatin1print (c)
  	unsigned char	c;		/* true if char is latin1 printable
*/
      {
!     return(((c>31)&&(c<127))||(c>159) ? 1 : 0 );
      }
--- 43,47 ----
  islatin1print (c)
  	unsigned char	c;		/* true if char is latin1 printable
*/
      {
!     return( isprint(c) ? 1 : 0 );
      }
*** /project/dce/build/dce1.0.2/src/directory/cds/control/msg.c	Wed Dec 30
08:14:59 1992
--- msg.c	Fri Jan 29 15:33:21 1993
***************
*** 1009,1015 ****
  register char	cc;
  
  {
!     if (cc >= 'a' && cc <= 'z')  cc &= 0337;
      return (cc);
  }
  
--- 1009,1015 ----
  register char	cc;
  
  {
!     if (islower(cc)) cc = toupper(cc);
      return (cc);
  }
*** /project/dce/build/dce1.0.2/src/directory/cds/control/prs.c	Wed Dec 30
08:15:51 1992
--- prs.c	Fri Jan 29 16:57:40 1993
***************
*** 2656,2662 ****
  register char	cc;
  
  {
!     if (cc >= 'a' && cc <= 'z')  return (cc &= 0xDF);
      return (cc);
  }
  
--- 2656,2662 ----
  register char	cc;
  
  {
!     if (islower(cc) cc = toupper(cc);
      return (cc);
  }
  
***************
*** 2726,2753 ****
      {
      	if (base == 8)
      	{
!     	    if ((*cp < '0') || (*cp > '7'))
      		break;
      	}
  
      	if (base == 10)
      	{
!     	    if ((*cp < '0') || (*cp > '9'))
      		break;
      	}
  
      	if (base == 16)
      	{
!     	    if ((*cp < '0') || (trn_upper(*cp) > 'F'))
      		break;
  
!     	    if ((*cp > '9') && (trn_upper(*cp) < 'A'))
!     		break;
! 
!     	    if (*cp > '9')
!     	    {
!     		*cp = trn_upper(*cp) - 'A' + '9' + 1;  
!     	    }
      	}
  
      	result *= base;
--- 2726,2748 ----
      {
      	if (base == 8)
      	{
!     	    if (!(isdigit(*cp) || (*cp == '8') || (*cp == '9'))
      		break;
      	}
  
      	if (base == 10)
      	{
!     	    if (!(isdigit(*cp)))
      		break;
      	}
  
      	if (base == 16)
      	{
!     	    if (!(isxdigit(*cp)))
      		break;
  
!     	    if (isalpha(*cp)) 
!     		*cp = toupper(*cp) - 'A' + '9' + 1;
      	}
  
      	result *= base;
***************
*** 3248,3255 ****
      	 * Do a user prompt type string.  This is a single string, and
      	 * letters are ALWAYS used alphabetically and in the exact case.
      	 */
!     	case 6:	if ( (*pnt0 < '0') || (trn_upper(*pnt0) > 'Z') ||
!     		    ((*pnt0 > '9') && (trn_upper(*pnt0) < 'A')) )
      		{
      		    pnt2 = pnt0++;
      		}
--- 3243,3249 ----
      	 * Do a user prompt type string.  This is a single string, and
      	 * letters are ALWAYS used alphabetically and in the exact case.
      	 */
!     	case 6:	if ( !(isalnum(*pnt0)) )
      		{
      		    pnt2 = pnt0++;
      		}
***************
*** 3347,3354 ****
      /*
       * Check for end of user's string
       */
!     if ( ((trn_upper(*str0) >= 'A') && (trn_upper(*str0) <= 'Z')) ||
! 	 ((*str0 >= '0')            && (*str0 <= '9')) )
      {
      	return (-1);
      }
--- 3341,3347 ----
      /*
       * Check for end of user's string
       */
!     if ( isalnum(*str0))
      {
      	return (-1);
      }
*** /project/dce/build/dce1.0.2/src/directory/cds/control/prscmd.c	Wed
Dec 30 08:15:57 1992
--- prscmd.c	Mon Feb  1 12:27:05 1993
***************
*** 96,101 ****
--- 96,102 ----
  #include <dns_cdefs.h>
  #include <dns_debug.h>
  #include <string.h>
+ #include <ctype.h>
  
  #ifdef vms
  #include <rms>
***************
*** 110,116 ****
  static int pr_wrk(), pr_vmatch(), pr_ltmatch(), pr_cmatch(), pr_wmatch();
  static int pr_call(), pr_exword(), pr_exbyte(), pr_ele(), pr_cha(),
pr_wor();
  static int pr_str(), pr_oct(), pr_dec(), pr_hex(), pr_gos(), pr_for();
! static int pr_exvalue(), pr_upper();
  static long pr_exlong();
  static char *pr_nonblank();
  
--- 111,117 ----
  static int pr_wrk(), pr_vmatch(), pr_ltmatch(), pr_cmatch(), pr_wmatch();
  static int pr_call(), pr_exword(), pr_exbyte(), pr_ele(), pr_cha(),
pr_wor();
  static int pr_str(), pr_oct(), pr_dec(), pr_hex(), pr_gos(), pr_for();
! static int pr_exvalue();
  static long pr_exlong();
  static char *pr_nonblank();
  
***************
*** 1383,1389 ****
       */
      if (base == 8)
      {
!     	while ((*work_element >= '0') && (*work_element <= '7'))
      	{
      	    context->num <<= 3;
      	    context->num  |= *work_element++ & 0x07;
--- 1384,1390 ----
       */
      if (base == 8)
      {
!     	while (isoctal(*work_element))
      	{
      	    context->num <<= 3;
      	    context->num  |= *work_element++ & 0x07;
***************
*** 1392,1398 ****
  
      if (base == 10)
      {
!     	while ((*work_element >= '0') && (*work_element <= '9'))
      	{
      	    context->num *= 10;
      	    context->num += *work_element++ & 0x0F;
--- 1393,1399 ----
  
      if (base == 10)
      {
!     	while (isdigit(*work_element))
      	{
      	    context->num *= 10;
      	    context->num += *work_element++ & 0x0F;
***************
*** 1401,1418 ****
  
      if (base == 16)
      {
!     	while ( ((*work_element >= '0') && (*work_element <= '9')) ||
!     	        ((*work_element >= 'A') && (*work_element <= 'F')) ||
!     	        ((*work_element >= 'a') && (*work_element <= 'f')) )
      	{
      	    context->num <<= 4;
!     	    if (*work_element < 'A')
      	    {
      		context->num |= *work_element++ & 0x0F;
      	    }
      	    else
      	    {
!     		context->num |= (pr_upper(*work_element++) & 0x0F) + 9;
      	    }
      	}
      }
--- 1402,1417 ----
  
      if (base == 16)
      {
!     	while (isxdigit(*work_element))
      	{
      	    context->num <<= 4;
!     	    if (isdigit(*work_element))
      	    {
      		context->num |= *work_element++ & 0x0F;
      	    }
      	    else
      	    {
!     		context->num |= (toupper(*work_element++) & 0x0F) + 9;
      	    }
      	}
      }
***************
*** 1608,1614 ****
       * string character in uppercase.
       */
      got_match = NO;
!     upper_char = pr_upper(*user_char);
  
      /*
       * Step through match list.
--- 1607,1613 ----
       * string character in uppercase.
       */
      got_match = NO;
!     upper_char = toupper(*user_char);
  
      /*
       * Step through match list.
***************
*** 1618,1624 ****
  	/*
      	 * If not alphabetic match, and is an alphabetic, do a "logical"
match.
      	 */
!     	if ((alpha_match == 0) && (*list_char >= 'A') && (*list_char <=
'Z'))
      	{
  	    switch (*list_char)
  	    {
--- 1617,1623 ----
  	/*
      	 * If not alphabetic match, and is an alphabetic, do a "logical"
match.
      	 */
!     	if ((alpha_match == 0) && (isupper(*list_char)))
      	{
  	    switch (*list_char)
  	    {
***************
*** 1626,1638 ****
  		 * Any alphabetic.
  		 */
  		case 'A':
! 			if ((upper_char >= 'A') && (upper_char <= 'Z'))
got_match = YES;
  			break;
  		/*
  		 * Decimal digit.
  		 */
  		case 'D':
! 			if ((*user_char >= '0') && (*user_char <= '9'))
got_match = YES;
      			break;
  		/*
  		 * End-of-line (with spaces).
--- 1625,1637 ----
  		 * Any alphabetic.
  		 */
  		case 'A':
! 			if (isalpha(*user_char)) got_match = YES;
  			break;
  		/*
  		 * Decimal digit.
  		 */
  		case 'D':
! 			if (isdigit(*user_char)) got_match = YES;
      			break;
  		/*
  		 * End-of-line (with spaces).
***************
*** 1644,1690 ****
  		 * Hexadecimal digit.
  		 */
  		case 'H':
! 			if ((*user_char >= '0') && (*user_char <= '9'))
got_match = YES;
!     			if ((upper_char >= 'A') && (upper_char <= 'F'))
got_match = YES;
      			break;
  		/*
  		 * Lowercase alphabetic.
  		 */
  		case 'L':
! 			if ((*user_char >= 'a') && (*user_char <= 'z'))
got_match = YES;
      			break;
  		/*
  		 * Not white space.
  		 */
  		case 'N':
! 			if (upper_char > ' ') got_match = YES;
      			break;
  		/*
  		 * Octal digit.
  		 */
  		case 'O':
! 			if ((*user_char >= '0') && (*user_char <= '7'))
got_match = YES;
      			break;
  		/*
  		 * Punctuation.
  		 */
  		case 'P':
! 			if ((*user_char > ' ') && (*user_char < '0'))
got_match = YES;
!     			if ((*user_char > '9') && (*user_char < 'A'))
got_match = YES;
!     			if ((*user_char > 'Z') && (*user_char < 'a'))
got_match = YES;
!     			if ((*user_char > 'z') && (*user_char < DEL))
got_match = YES;
      			break;
  		/*
  		 * White space.
  		 */
  		case 'S':
! 			if ((*user_char <= ' ') && (*user_char > '\0'))
got_match = YES;
      			break;
  		/*
  		 * Uppercase alphabetic.
  		 */
  		case 'U':
! 			if ((*user_char >= 'A') && (*user_char <= 'Z'))
got_match = YES;
      			break;
  		/*
  		 * Any character but EOL.
--- 1643,1686 ----
  		 * Hexadecimal digit.
  		 */
  		case 'H':
! 			if (isxdigit(*user_char)) got_match = YES;
      			break;
  		/*
  		 * Lowercase alphabetic.
  		 */
  		case 'L':
! 			if (islower(*user_char)) got_match = YES;
      			break;
  		/*
  		 * Not white space.
  		 */
  		case 'N':
! 			if (isgraph(*user_char)) got_match = YES;
      			break;
  		/*
  		 * Octal digit.
  		 */
  		case 'O':
! 			if (isoctal(*user_char)) got_match = YES;
      			break;
  		/*
  		 * Punctuation.
  		 */
  		case 'P':
! 			if (ispunct(*user_char)) got_match = YES;
      			break;
  		/*
  		 * White space.
  		 */
  		case 'S':
!                         if (((iscntrl(*string)) && (*string != '\0')) ||
isspace(*string))
! 			    got_match = YES;
      			break;
  		/*
  		 * Uppercase alphabetic.
  		 */
  		case 'U':
! 			if (isupper(*user_char)) got_match = YES;
      			break;
  		/*
  		 * Any character but EOL.
***************
*** 1816,1822 ****
  	 */
  	 if (case_match == 0)
  	{
! 	    if (pr_upper(*user_char) != pr_exbyte(list_char))
  	    {
  		endword = 0;
  		break;
--- 1812,1818 ----
  	 */
  	 if (case_match == 0)
  	{
! 	    if (toupper(*user_char) != pr_exbyte(list_char))
  	    {
  		endword = 0;
  		break;
***************
*** 2074,2104 ****
  }
  
  /*
-  * pr_upper ***
-  *
-  * Convert a character to uppercase
-  *
-  * Inputs:
-  *	character = "char" to convert.
-  *
-  * Outputs:
-  *      "int" character value, in uppercase if was lowercase alphabetic.
-  */
- 
- static int pr_upper(character)
- 
- register char character;
- 
- {
-     register int result;
- 
-     if ((character >= 'a') && (character <= 'z')) result = character &
0337;
-     else                                          result = character &
0377;
- 
-     return (result);
- }
- 
- /*
   * pr_nonblank ***
   *
   * Find the next non-blank character.
--- 2070,2075 ----
***************
*** 2116,2122 ****
  register char *string;
  
  {
!     while ((*string <= ' ') && (*string > '\0')) string++;
      return (string);
  }
  
--- 2087,2098 ----
  register char *string;
  
  {
!     while (((iscntrl(*string)) && (*string != '\0')) || isspace(*string))
string++;
      return (string);
  }
  
+ static int isoctal(c)
+ unsigned char c;
+ {
+ return ( isdigit(c) && (c != '8') && (c != '9') ? 1 : 0 );
+ }

-----------------------------------
In the file, directory/cds/includes/msgpre.h
some record processing literals, are assigned character
codes, which map to commonly used EBCDIC characters. This caused a
problem in the port to EBCDIC, which was overcome by mapping these
characters to a range which would not cause problems for EBCDIC,
but which probably cause trouble for some other code set.

Solution used for MVS:

        #define REC_ELE         (char)0xB0      /* ELEMENT record */
        #define REC_CHA         (char)0xB1      /* CHARACTER test */
        #define REC_WOR         (char)0xB2      /* WORD test */
        #define REC_STR         (char)0xB3      /* STRING test */
        #define REC_OCT         (char)0xB4      /* OCTAL test */
        #define REC_DEC         (char)0xB5      /* DECIMAL test */
        #define REC_HEX         (char)0xB6      /* HEXADECIMAL test */
        #define REC_GOS         (char)0xB7      /* GOSUB test */
        #define REC_FOR         (char)0xB8      /* FORCE test */
        #define REC_EOF         (char)0xBF      /* End of file */

It was acknowledged that a much better solution would be to use regular
expressions and locales to define and detect these control codes.
-------------------
In the file directory/cds/control/msgfnd.c, it was noted that
there were statements which embeded the ASCII numberic character code
for the HORIZONTAL TAB character.

For MVS, this problem was fixed by adding encoding specific definitions
for the literal HOR_TAB_CHAR to the file msgpre.h, and then this literal
was used to replace the '\011' appearing in msgfnd.c.

        Add the following code to header file msgpre.h

        #if defined(SAA) && defined(EBCDIC)     /*          */
        #define   HOR_TAB_CHAR     '\005'       /* EBCDIC   */
        #else                                   /*          */
        #define   HOR_TAB_CHAR     '\011'       /* ASCII    */
        #endif                                  /*          */

The HOR_TAB_CHAR literal was than employed in the following changes 
to msgfnd.c

*** /project/dce/build/dce1.0.2/src/directory/cds/control/msgfnd.c	Wed
Dec 30 08:15:06 1992
--- msgfnd.c	Mon Feb  1 13:32:38 1993
***************
*** 89,94 ****
--- 89,95 ----
  #include <stdio.h>
  #include <msgpre.h>
  #include <msgblk.h>
+ #include <ctype.h>
  
  /*
   * Buffer containing NULL string.
***************
*** 158,164 ****
       */
      if (key_pnt != MS_NEXT)
      {
!         while ( (*key_pnt == ' ') || (*key_pnt == '\011') )
          {
      	    key_pnt++;
          }
--- 159,165 ----
       */
      if (key_pnt != MS_NEXT)
      {
!         while ( (*key_pnt == ' ') || (*key_pnt == HOR_TAB_CHAR ) )
          {
      	    key_pnt++;
          }
***************
*** 167,173 ****
          key_end = key_pnt;
          while (*pntx != '\0')
          {
!     	    if ( (*pntx != ' ') && (*pntx != '\011') )
      		key_end = ++pntx;
      	    else
      		++pntx;
--- 168,174 ----
          key_end = key_pnt;
          while (*pntx != '\0')
          {
!     	    if ( (*pntx != ' ') && (*pntx != HOR_TAB_CHAR) )
      		key_end = ++pntx;
      	    else
      		++pntx;
***************
*** 256,270 ****
  		/*
  		 * Make sure character is uppercase.
  		 */
! 		if ((*pntx >= 'a') && (*pntx <= 'z'))
! 		    chrx = *pntx++ & 0337;
  		else
! 		    chrx = *pntx++;
  
  		/*
  		 * Convert tabs to spaces
  		 */
! 		if (chrx == '\011')
  		    chrx = ' ';
  
  		/*
--- 257,273 ----
  		/*
  		 * Make sure character is uppercase.
  		 */
! 		if (islower(*pntx))
! 		    chrx = toupper(*pntx);
  		else
! 		    chrx = *pntx;
  
+                 pntx++;
+ 
  		/*
  		 * Convert tabs to spaces
  		 */
! 		if (chrx == HOR_TAB_CHAR)
  		    chrx = ' ';
  
  		/*
***************
*** 273,279 ****
  		if (chrx == ' ')
  		{
  		    while ( (pntx != key_end) &&
! 			((*pntx == ' ') || (*pntx == '\011')) )
  		    {
  			pntx++;
  		    }
--- 276,282 ----
  		if (chrx == ' ')
  		{
  		    while ( (pntx != key_end) &&
! 			((*pntx == ' ') || (*pntx == HOR_TAB_CHAR)) )
  		    {
  			pntx++;
  		    }
-------------------
        section 4.1 - IBM DCE 1.1 paper
        2.4.2 Category b) Problems
        -  CDSPI - Default values for optional parameters


        Default values for optional parameters to the CDSPI calls,
        which happen to be opaque data structures, are stored in
        static variables in the source files. These static variables
        are initialized with character strings which represent the
        memory map of the opaque structures. For example for dnsEnumObj,
        the default values for name and class filter are defined as :

        static byte_t allNamesY" = {"\11\1*"};
        static byte_t allClassesY" = {"\11\1*"};

        When this code is compiled on an EBCDIC platform, the third
        byte in the array allNames will contain the EBCDIC value of
        the character "*" which is x'5C' . This corresponds to the
        ASCII char "-".


        Since in DCE 1.0  all names are stored ONLY in ASCII
        8859-1 code page, when an MVS client sends an enumerate
        object request to a CDS server on AIX none of the names
        match the name filter and empty set of results is returned.
        This problem can be demonstrated by using the cdscp show
        command (without specifying any Name or class filter)
        on a non-ASCII system to enumerate objects in a
        clearinghouse stored on AIX server.

        This problem of "hard-coded" character data in source
        code occurs in the following source modules:

            src/directory/cds/library/dnsenumobj.c
            src/directory/cds/library/dnsenumgrp.c
            src/directory/cds/library/dnsenumslink.c
            src/directory/cds/library/dnsenumchild.c
            src/directory/cds/library/dnscreategrp.c


        Solution :

        Instead of hard coding the binary values for default parameters,
        the opaque data structures for optional parameters should be
        derived by calling standard CDS function calls to convert
        string form of names to the opaque format.

        Eg. allNames = cds_simpletoopq("*", .....)



CR Number                     : 6825
Defect or Enhancement?        : enh
CR in Code, Doc, or Test?     : code
Inter-dependent CRs           : 
Project Name                  : dce
H/W Ref Platform              : pmax
S/W Ref Platform              : osf1
Component Name                : cds
Subcomponent Name             : library
Short Description             : Cannot build a "debug" cds library without malloc instrumenting
Reported Date                 : 1/14/93
Found in Baseline             : 1.0.2
Found Date                    : 1/14/93
Severity                      : D
Priority                      : 4
Status                        : open
Duplicate Of                  : 
Fix By Baseline               : 1.2
Fixed In Baseline             : 
Affected File(s)              : 
Diff supplied by              : 
Diff release                  : 
Sensitivity                   : public

[1/14/93 public]

We would like to build a "debuggable" cds library (one built with
-DDEBUG) without having also having to have cds malloc instrumenting.

Detaching event debugging from malloc debugging would be very useful.



CR Number                     : 6503
Defect or Enhancement?        : enh
CR in Code, Doc, or Test?     : code
Inter-dependent CRs           : 
Project Name                  : dce
H/W Ref Platform              : rs6000
S/W Ref Platform              : aix
Component Name                : cds
Subcomponent Name             : cdscp
Short Description             : Provide syntax help for cdscp subcommands
Reported Date                 : 12/16/92
Found in Baseline             : 1.0.2b6
Found Date                    : 12/16/92
Severity                      : B
Priority                      : 2
Status                        : open
Duplicate Of                  : 
Fix By Baseline               : 1.2
Fixed In Baseline             : 
Affected File(s)              : 
Diff supplied by              : 
Diff release                  : 
Sensitivity                   : public

[12/16/92 public]
From an SE intern:
The help command of cdscp gives a result different from other DCE
administration tools.   With the other administration tools (rgy_edit, 
dtscp, acl_edit...), it is possible to ask help on a specific function 
(eg, help add) and this gives the proper syntax to use.  A similar 
facility should be implemented in cdscp.



CR Number                     : 6357
Defect or Enhancement?        : enh
CR in Code, Doc, or Test?     : code
Inter-dependent CRs           : 
Project Name                  : dce
H/W Ref Platform              : other
S/W Ref Platform              : other
Component Name                : cds
Subcomponent Name             : cds/server/back_collect.c
Short Description             : Redundant code referencing
Secondary replicas.
Reported Date                 : 12/7/92
Found in Baseline             : 1.0.1
Found Date                    : 12/7/92
Severity                      : D
Priority                      : 3
Status                        : open
Duplicate Of                  : 
Fix By Baseline               : 1.2
Fixed In Baseline             : 
Affected File(s)              : 
Diff supplied by              : 
Diff release                  : 
Sensitivity                   : public

[12/7/92 public]

NOTE: This is not a a bug but rather suggestion to improve performance.
      


Scenario:
    The code right now has logic build in to reference secondary
    replica. But since secondary replicas are NOT SUPPORTED in DCE,
    the code referring to secondary replica should be removed or
    "#ifdef out". For example, in the collecting of changes to a
    replica in a skulk, we can simplify the logic because there is
    no long need to do 'collecting' because all the changes are in
    the master. All that has to been done is to start the spreading
    from the master replica assuming that the epoch has not changed.
    Even if the epoch has changed ( a new master ) , the collection
    phase could be simplify to collect from the new and old master
    replica only since other read-only replicas do not contain any
    changes.
Effects:
   Lower system performance

Repeat By:

        Create replicas of directories in other clearinghouses and
        modify the contents (objects) in the replica. Then Skulk
        the directory to initate the collecting and spreading process.

Proposed Solution:
        Cleanup the code to remove logic and code concerning secondary
        replicas.

[12/7/92 public]
We have looked at this in the past and concluded that the "new epoch"
command requires much of this code to work. Admittedly there is code
that can be deleted.



CR Number                     : 6230
Defect or Enhancement?        : enh
CR in Code, Doc, or Test?     : code
Inter-dependent CRs           : 
Project Name                  : dce
H/W Ref Platform              : rs6000
S/W Ref Platform              : aix
Component Name                : cds
Subcomponent Name             : cdspis
Short Description             : No validation checks for CDSPI's input parameters.
Reported Date                 : 11/30/92
Found in Baseline             : 1.0.1
Found Date                    : 11/30/92
Severity                      : C
Priority                      : 3
Status                        : open
Duplicate Of                  : 
Fix By Baseline               : 1.2
Fixed In Baseline             : 
Affected File(s)              : 
Diff supplied by              : 
Diff release                  : 
Sensitivity                   : public

[11/30/92 public]

The following is from IBM. Note, I don't think there is much we can do
about Number 2 (validate UUID) and Number 4 (validate timeout). I tried to
contact the original reporter, but got no reply.

Full Description:

        In general, the CDSPIs do not perform validation checks
        on the input parameters before the actual manipulation of
        these data values.  This could return unexpected results
        to the invoking application.

        The following is a list of examples:


  1) cdsCreateObj() works if NULL is passed to CDS_Class/CDS_ClassVersion
     ====================================================================

  PTR#1219 - If pass a valid class name and a NULL class version
             value to cdsCreateObj(), an object is created.
             Documentation (CDSPI, Nov/91) for it requires that
             either both or non of these attributes be passed to
             cdsCreateObj().  The created object has class version
             value of 0.0


  2) cdsCreateObj() permits and creates object with invalid UUID
     ===========================================================

  PTR#1296-Create an object with an invalid UUID via cdsCreateObj()
           and the operation will be successful.  To ensure that all
           objects having a consistent UUID format, this behaviour
           should not be permitted.

           The invalid UUID was created by the C function memset()
               memset((void *)uuid, -1, sizeof(dns_id_t));



  3) CDSPIs - NULL passed as entry name returns unexpected result
     ============================================================

  PTR#1269-Attempt to pass a NULL entry (directory, object, soft link)
           full name as an argument to CDSPIs
               cdsCreateObj() / cdsCreateDir() / cdsCreateSLink() /
               cdsDelObj()    / cdsDelDir()    / cdsDelSLink()
           and the result was a return code of 282111999 = CDS_ERROR
           with a fsLocStat value of 0 = "successful completion" in
           the cdsFlagStat_t structure.

           Now these two messages are contradictory and a fsLocStat
           value of 282108905 = CDS_INVALIDARGUMENT or
                    282108906 = CDS_INVALIDNAME
           is more appropriate.


  4) cdsCreateSLink() permits invalid CDS_LinkTimeout value
     ======================================================

  PTR#1298-cdsCreateSLink() will create soft link even if invalid timeout
           value is passed to it.  The resulted soft link contains a
           timeout value of 0 for expiration and 0 for extention.

           The expected result is for the function to return a return
           code of CDS_ERROR with the Flags->fsLocStat variable having a
           value of CDS_INVALIDARGUMENT.

           The method of creating the invalid timeout value was:

                 memset(timeout->expire,-9, sizeof(utc_t));
                 memset(timeout->extend,-9, sizeof(utc_t));

           where timeout is a pointer to structure dns_timeout_t.

           timeout is later passed to function cdsCreateSLink().


  5) cdsAddAttrValue() returns unexpected result with invalid value
     ==============================================================

  PTR#1299-Passing in an invalid attribute value to cdsAddAttrValue()
           will result in unexpected error of CDS_RESOURCEERROR in
           the Flags->fsLocStat variable.  The error message associated
           with this is "Insufficient resources to process request".

           The invalid attribute value in the Value argument is the
           dns_attrvalue_t structure.  A value of -1 was assigned to
           Value->val_syntax (this translated to 255) and no value
           was assigned to the union variable in that structure.

           The expected result in the Flags->fsLocStat variable is
           CDS_INVALIDARGUMENT.


Proposed Solution:

      Provide error checking capability to the input parameters of all
      CDSPIs.

[12/1/92 public]
Since the CDS API is not public, ie not included in the AES, I do not
think validity checking is necessary. Furthermore, it would impede
performance by uselessly checking valid input data. If a vendor wishes
to offer this as a public API, my recommendation is that error checking
be provided with separate functions. As it is, validity checking is
expected to be performed by callers of the CDS API.



CR Number                     : 6210
Defect or Enhancement?        : enh
CR in Code, Doc, or Test?     : code
Inter-dependent CRs           : 
Project Name                  : dce
H/W Ref Platform              : rs6000
S/W Ref Platform              : aix
Component Name                : cds
Subcomponent Name             : cds/includes/cdsclerk.h
Short Description             : Attribute CDS_ClassVersion type mismatch with IDL definition
Reported Date                 : 11/24/92
Found in Baseline             : 1.0.1
Found Date                    : 11/24/92
Severity                      : C
Priority                      : 2
Status                        : open
Duplicate Of                  : 
Fix By Baseline               : 1.2
Fixed In Baseline             : 
Affected File(s)              : 
Diff supplied by              : 
Diff release                  : 
Sensitivity                   : public

[11/24/92 public]

One Line Description:

     Attribute CDS_ClassVersion type mismatch with IDL definition

Full Description:


     The structure used for the CDS attribute CDS_ClassVersion is
     cdsVersion_t, where the major minor versions are defined as
     unsigned char (in <cdsclerk.h>).  The IDL file (stub file
     cds_types.idl) defined this attribute as a structure, cds_Version_t
     where the major minor versions are of type unsigned small int.

     An environment is set up with a DCE client machine using the
     ASCII codepage and a DCE server machine using the EBCDIC codepage.
     If an object is created via the CDSPI cdsCreateObj() on the DCE
     client machine, the value for the attribute CDS_ClassVersion will
     not be stored correctly.  This is because the initial value was
     stored as unsigned char by the CDSPI in ASCII, then it is converted
     to unsigned small int by the IDL, on the server machine, this
     ASCII based unsigned small integer is converted to an EBCDIC based
     unsigned char which is not equivalent to the initial unsigned char
     values passed to the CDSPI.  No ASCII/EBCDIC translation was
     performed at the CDS stubs since the RPC call passed in the type
     unsigned small int.

Proposed Solution:

     The structure cdsVersion_t in <cdsclerk.h> should have the major &
     minor version variables defined as type unsigned small int instead
     of type unsigned char.

[12/17/92 public]
I changed this CR to an enhancement. No conversion takes place because
the version is never stored as an ASCII character, it is stored as
a binary value: a major version number of 1 is not stored as '1', but
by assigning an integer 1.  Check out cdstest.c to see an example of this.
And, as observed above, version is passed on the wire as a small int, so
IDL doesn't play games with it either.

I suppose one could argue that cdsVersion should have been defined as
a structure with two integer elements, but that is an enhancement request
to an API not in the AES.  Judicious use of casting seems to me to be a
valid work-around if you want to quiet your C compiler.



CR Number                     : 6201
Defect or Enhancement?        : enh
CR in Code, Doc, or Test?     : code
Inter-dependent CRs           : 2463
Project Name                  : dce
H/W Ref Platform              : rs6000
S/W Ref Platform              : aix
Component Name                : cds
Subcomponent Name             : 
Short Description             : SHOW CACHED SERVER cmd with wildcard char functions incorrectly
Reported Date                 : 11/24/92
Found in Baseline             : 1.0.1
Found Date                    : 11/24/92
Severity                      : B
Priority                      : 2
Status                        : open
Duplicate Of                  : 
Fix By Baseline               : 1.2
Fixed In Baseline             : 
Affected File(s)              : 
Diff supplied by              : 
Diff release                  : 
Sensitivity                   : public

[11/24/92 public]

One would say OT 2463 should have fixed this problem. But it does not. For
list command, it works fine now, but not show ca server. Here we go:

Full Description:

        CDSCP - SHOW CACHED SERVER command functions incorrectly
        when the wildcard character '*' is used (as first character)
        with other characters (following after) as the server name.

Repeated By:

        cdscp> sh ca server *
                                SHOW
                   CACHED NAMESERVER  TLBDS1ME
                                  AT   1992-10-05-21:53:21
                                Name = /.../oeucell/TLBDS1ME_ch
                               Tower = ncadg_ip_udp:9.21.21.99{}
ERROR=> cdscp> sh ca server *abcdefghij
ERROR=>                         SHOW
ERROR=>            CACHED NAMESERVER  TLBDS1ME
ERROR=>                           AT   1992-10-05-21:53:21
ERROR=>                         Name = /.../oeucell/TLBDS1ME_ch
ERROR=>                        Tower = ncadg_ip_udp:9.21.21.99{}
        cdscp> sh ca server t*
        cdscp> sh ca server T*
                                SHOW
                   CACHED NAMESERVER  TLBDS1ME
                                  AT   1992-10-05-21:53:21
                                Name = /.../oeucell/TLBDS1ME_ch
                               Tower = ncadg_ip_udp:9.21.21.99{}
        cdscp> sh ca server TLBDS1ME
                                SHOW
                   CACHED NAMESERVER  TLBDS1ME
                                  AT   1992-10-05-21:53:21
                                Name = /.../oeucell/TLBDS1ME_ch
                               Tower = ncadg_ip_udp:9.21.21.99{}

[12/7/92 public]
Granted, one might expect wildcards to work universally on all cdscp
commands. However, wildcard support is implemented in the CDS server.
Show cached server is handled locally and performs as intended.
This enhancement will not be implemented in 1.0.*.



CR Number                     : 5908
Defect or Enhancement?        : enh
CR in Code, Doc, or Test?     : code
Inter-dependent CRs           : 2384
Project Name                  : dce
H/W Ref Platform              : all
S/W Ref Platform              : all
Component Name                : cds
Subcomponent Name             : 
Short Description             : 
Non-atomic directory creation in cds
Reported Date                 : 11/3/92
Found in Baseline             : 1.0.1
Found Date                    : 11/3/92
Severity                      : C
Priority                      : 2
Status                        : open
Duplicate Of                  : 
Fix By Baseline               : 1.2
Fixed In Baseline             : 
Affected File(s)              : cds/server/db_directory.c
Diff supplied by              : 
Diff release                  : 
Sensitivity                   : public

[11/3/92 public]

        The folks at IBM toronto, write that they have been
        experiencing what they call a ghost directory problem
        (when they try to create a directory they are told
        the directory already exists and when they try to 
        delete the same directory they are told it does not
        exist).

        This problem normally occurs after the server
        execution thread abends abnormally (eg due to
        some CMA exception) and  during stress tests if
        transient run time errors (such as malloc failures)
        are encountered.

        They have concluded that this problem occurs because
        the cds server does not have a mechanism to handle
        abnormal terminations of the server thread which occur
        between the multiple operations required to create a
        directory object. The also believe they have located a
        couple of places in the code where return values are not 
        checked, and as a result run time errors can lead to
        to inconsistencies in the database structures maintained
        in memory.

        They also point out, that once such inconsistencies
        are created in the database, a checkpoint operation
        will make them permanent.

        They have included two examples scenarios, which they
        believe will cause this behavior. The first features the
        abnormal termination of the server thread in a critical
        section of code, The second is caused by a failed
        malloc call.

        Functions called during         Source file
        create directory
        -------------------------------------------------
        ta_create_dir                   server/ta_create.c
        ta_create_dir_record            server/ta_create.c
        db_dir_create                   server/db_directory.c
        db_dir_build                    server/db_directory.c
        db_pseudo_chdirectory           server/db_pseudo.c
        skulk_sched                     server/back_skulk.c
        set_insert                      server/sets_lib.c


         Function call hierarchy
         -------------------------------------------
               ta_create_dir
                  ta_create_dir_record
                     db_dir_create
                        db_dir_build
                           db_hash_insert
                        db_pseudo_chdirectory
                           set_insert
                  skulk_sched


        Abnormal termination :

        db_dir_build() function is called after checking
        the access rights of user, various validation
        checks, and building the directory record in
        memory with the state of directory set to RS_newDir.
        It allocates a directory bucket, initializes the b-tree
        and then calls db_hash_insert() to add the directory's
        UUID and its name to the hash tables.

        For the create directory operation, this is the
        first major update made to the database structures
        held in memory. They propose that an exception may
        occur at this point which terminates the server thread
        before it completes the creation of the dierctory.

        They reason, that since CDS does not have a mechanism
        to catch exceptions and undo the parially completed changes,
        the hash tables will continue to hold a hash entry for this
        directory. At the time of the failure, the RPC runtime will
        send some error message to inform the user that the requested
        operation was not successful. If the user then tries a
        second time to create the directory the user will recieve
        the error message 'Directory already exists'. At this point
        the user will also not be able to delete the directory.

        This inconsistent server database state may be remedied
        by restarting the server, since during server restart the
        database is reloaded and the hash tables are rebuilt.

        malloc failure  :

        After building the directory record in memory and
        adding the UUID of new directory to hash tables etc,
        db_dir_create() calls db_pseudo_chdirectory() to
        insert the new directory's UUID in the
        DNS_CHDIRECTORIES attribute of pseudo directory.
        This operation can fail due to lack of memory
        (see  set_insert() ) but the return code from
        db_pseudo_chdirectory() is not checked. One of
        the consequences of this unchecked failure is
        that the new directory may never get skulked
        by the periodic background skulk.

        If the skulk_sched() function, which is called
        just before ta_create_dir() exits, fails due to
        any reason then the state of directory will
        remain RS_newDir (not turned on). The background
        skulk also will not be able to change the directory
        state to RS_on because it has no knowledge of this
        directory.

        In this case any further attempts to  either
        create a new directory with the same name or
        delete this directory  will fail.

        Now if a checkpoint operation gets scheduled
        to save the database to disk then this problem
        will stay forever.

Repeat By:
        Very hard to recreate such intermittent problems.
        Code inspections and taking dump of the database
        is the most effective way to analyze and debug
        such problems.

        The other alternative is to insert some hooks
        in code to create the error scenarios described
        above.

Proposed Solution:

        Put TRY-CATCH-CATCHALL macros around ta_xxxx routines
        and around the critical sections of code (eg updates
        to pseudo directory , hash tables etc) so that it
        is possible to catch exceptions, undo the changes
        and free the allocated resources.

        Check the return codes and take an appropriate action.

[12/7/92 public]
We realize that there is some exposure in the areas cited, but we have not
seen problems occur in practice that weren't fixed by replaying the
server's transaction log, skulking, or background processing. If a problem
occurs during directory creation, it is a simple matter to delete an
orphaned child pointer, but even that is usually unnecessary.

Fixing the problem requires overall design changes and implementation work
that are beyond the scope of DCE 1.0.*.



CR Number                     : 5880
Defect or Enhancement?        : enh
CR in Code, Doc, or Test?     : code
Inter-dependent CRs           : 
Project Name                  : dce
H/W Ref Platform              : pmax
S/W Ref Platform              : osf1
Component Name                : cds
Subcomponent Name             : server
Short Description             : update should occur when
towers are added to clearinghouse
Reported Date                 : 10/30/92
Found in Baseline             : 1.0.2
Found Date                    : 10/30/92
Severity                      : C
Priority                      : 1
Status                        : open
Duplicate Of                  : 
Fix By Baseline               : 1.2
Fixed In Baseline             : 
Affected File(s)              : 
Diff supplied by              : 
Diff release                  : 
Sensitivity                   : public

[10/30/92 public]

When a clearinghouse is created or moved, the towers for the clearinghouse
should be updated (to disk) immediately, not just written to core.
If the server is brought down before the towers are written out, the
server ends up unexporting and reexporting the sames towers to the
clearinghouse object when it is restarted.  This is an inefficiency,
not a serious problem.

-Peter

[10/25/93 public]
I would have defered this with 5915 last week but this ot was locked.
If we gt a fix for this it will go into the unintegrated tree.

[7/21/94 public]
This is an enhancement request.  It works currently.  Yes there is 
a slight inefficiency if you move you clearinghouse and crash before
a checkpoint, but this isn't going to happen alot and if it does
the server recreates the update.

Changed to enhancement.



CR Number                     : 5840
Defect or Enhancement?        : enh
CR in Code, Doc, or Test?     : code
Inter-dependent CRs           : 3498,3497,3496
Project Name                  : dce
H/W Ref Platform              : rs6000
S/W Ref Platform              : aix
Component Name                : cds
Subcomponent Name             : cds/stubs/cds_clerkserver.idl
Short Description             : CDS - IDL -- NameFilter, ClassFilter  and ClassName defined as byte string (Category  : EBCDIC/ASCII Problems)
Reported Date                 : 10/28/92
Found in Baseline             : 1.0.1
Found Date                    : 10/28/92
Severity                      : D
Priority                      : 3
Status                        : open
Duplicate Of                  : 
Fix By Baseline               : 1.2
Fixed In Baseline             : 
Affected File(s)              : 
Diff supplied by              : 
Diff release                  : 
Sensitivity                   : public

[10/28/92 public]

        ClassName, ClassFilter and  NameFilter in the enumerate
        and create operations ( eg. cds_EnumerateObjects,
        cds_EnumerateSoftLinks, cds_CreateObject etc)  are
        defined to be of type cds_Name_t which maps to a
        length field  followed by a  byte string.

        cds_Name_t defined in src/directory/cds/stubs/cds_types.idl
        file is given below for reference.

        typedef struct {
                  unsigned short int   nm_length;
                  byte                 nm_name[257];
        }  cds_Name_t;

     Examples :

     Scenario  1  -   CDS database created by an ASCII  Client
                      on the ASCII machine.  - Read these entries
                      from EBCDIC machine.

      Example :  NameFilter  problem

         If  an MVS Client sends an  enumerate object/softlink/child
         (matching a particular NameFilter)   request to a CDS server
         running on AIX then empty results are returned. This is
         because the CDS database is stored in ASCII on AIX and
         NameFilter string sent by the MVS Client is in EBCDIC.

     Scenario  2  -   CDS database created by an EBCDIC  Client
                      on the ASCII machine.     - Read these entries
                      from ASCII machine

      Example  : ClassName and ClassFilter Problem

          If  an EBCDIC Client  creates a  couple of object entries on
          an ASCII machine belonging to class say 'ABC',  then the
          CDS_CLASS attribute stored in  the these object entries
          will have the class name string 'ABC'  encoded in EBCDIC.
          The ASCII Client will not be able to enumerate these objects
          if he specifies the ClassFilter  'ABC'  because this string
          will be in the ASCII and match will fail.

Repeat By:

        Issue the following cdscp commands in the scenarios
        described above

         Scenario 1 :

            show object  /.:/XYZ*

        Scenario 2 :

         create object  /.:/obj1  CDS_Class = ABC CDS_ClassVersion = 1.0
         create object  /.:/obj2  CDS_Class = ABC CDS_ClassVersion = 1.0

         show   object  /.:/*   with  CDS_Class = ABC
               will show empty results

Proposed Solution:

    a)   Change the NameFilter, ClassFilter and ClassName data
         types to char string  (such as  cds_OpenChar_t defined in
         cds_types.idl) so that RPC  can perform the necessary
         ASCII<->EBCDIC conversions.



CR Number                     : 5774
Defect or Enhancement?        : enh
CR in Code, Doc, or Test?     : code
Inter-dependent CRs           : 
Project Name                  : dce
H/W Ref Platform              : pmax
S/W Ref Platform              : osf1
Component Name                : cds
Subcomponent Name             : cdscp list dir
Short Description             : cdscp list dir /.:/non-existent-directory returns 0 status
Reported Date                 : 10/23/92
Found in Baseline             : 1.0.2
Found Date                    : 10/23/92
Severity                      : B
Priority                      : 2
Status                        : open
Duplicate Of                  : 
Fix By Baseline               : 1.2
Fixed In Baseline             : 
Affected File(s)              : 
Diff supplied by              : 
Diff release                  : 
Sensitivity                   : public

[10/23/92 public]

The command "cdscp list dir /.:/non-existent-directory" returns a zero status
instead of a one and gives not error message.  This makes checking the cdscp
list dir return status useless in several CDS tests.  The "cdscp show dir
/.:/non-existent-directory" command correctly returns a one status and an
error message.

root@puddy(53) cdscp list dir /.:/wxyz
                        LIST
                   DIRECTORY   /.../admin_cell/wxyz
                          AT   1992-10-12-18:22:04
root@puddy(54) echo $status
0

root@puddy(51) cdscp show dir /.:/wxyz

                        SHOW
                   DIRECTORY   /.../admin_cell/wxyz
                          AT   1992-10-12-18:21:48
Error on entity: /.../admin_cell/wxyz
Requested entry does not exist (dce / cds)
Function: dnsEnumAttr
dnsEnumAttr: partial results = /.../admin_cell

root@puddy(52) echo $status
1

[10/23/92 public]
While I sympathize with Paul, we have been through this before. We explicitly
(and arguably incorrectly) made a decision in 1.0 to have cdscp return a 0
status for all commands except when it is unable to issue a CDS API call or
return the result. CDS requests that make it to the local clerk and back
cause a 0 exit status. I marked this as an enhancement because all commands
in addition to the one mentioned above exhibit this behavior. If OSF feels
strongly about this, let's talk about how to get this done as a 1.1 enhancement.

My vote, if we were to do this, would be to return a 0 if the call returned
a successful status, a 1 if the CDS status were unsuccessful, and a 2 if
a software or environmental error occurred.



CR Number                     : 5563
Defect or Enhancement?        : enh
CR in Code, Doc, or Test?     : code
Inter-dependent CRs           : 
Project Name                  : dce
H/W Ref Platform              : pmax
S/W Ref Platform              : osf1
Component Name                : cds
Subcomponent Name             : 
Short Description             : Change cds create object to return a different error code when
the specified directory does not exist.
Reported Date                 : 10/6/92
Found in Baseline             : 1.0.2
Found Date                    : 10/6/92
Severity                      : C
Priority                      : 2
Status                        : open
Duplicate Of                  : 
Fix By Baseline               : 1.2
Fixed In Baseline             : 
Affected File(s)              : 
Diff supplied by              : 
Diff release                  : 
Sensitivity                   : public

[10/6/92 public]

The rpc_ns_xx routines will return entry_not_found when presented
with an entry of the form /.:/dir/entry when either <dir> or
<entry> does not exist in the name space.  We'd like to change
CDS to return different status codes for these 2 cases so that
the NSI can distinguish them for the application.



CR Number                     : 5546
Defect or Enhancement?        : enh
CR in Code, Doc, or Test?     : code
Inter-dependent CRs           : 
Project Name                  : dce
H/W Ref Platform              : rs6000
S/W Ref Platform              : aix
Component Name                : cds
Subcomponent Name             : cdscp
Short Description             : Error messages for local server
ops when cdsd not running.
Reported Date                 : 10/2/92
Found in Baseline             : 1.0.1
Found Date                    : 8/21/92
Severity                      : D
Priority                      : 3
Status                        : open
Duplicate Of                  : 
Fix By Baseline               : 1.2
Fixed In Baseline             : 
Affected File(s)              : 
Diff supplied by              : 
Diff release                  : 
Sensitivity                   : public

[10/2/92 public]

When create clearinghouse is attempted with the name of an already
existing clearinghouse, the error message displayed was
Failure in routine: cprrpc_get_binding_handle; code = 382312699
binding incomplete (no object ID and no endpoint) ( dce/rpc)
Failure in routine: cp_create_clh; code = 382312699
binding incomplete (no object ID and no endpoint) (dce/rpc)

Then tried cdscp delete clearinghouse with the same name and got this output.
Failure in routine: cprrpc_get_binding_handle; code = 382312699
binding incomplete (no object ID and no endpoint) ( dce/rpc)
Failure in routine: cp_clrdel_clh; code = 382312699
binding incomplete (no object ID and no endpoint) (dce/rpc)

The messages could have been more meaningful.

[12/7/92 public]
This is an enhancement. The command works when the server is running. Granted
the error message is sub-optimal.

[04/13/93 public]

In a similar vein, 'cdscp create clearinghouse /.:/second_ch' from a
client machine, prints out:

	cdscp create clearinghouse /.:/second_ch Failure in routine:
	cprpc_get_binding_handle; code = 382312699 
	binding incomplete (no object ID and no endpoint) (dce / rpc) 
	Failure in routine: cp_create_clh; code = 382312699    
	binding incomplete (no object ID and no endpoint) (dce / rpc)

I understand that this is not a valid command from a client machine, 
but again, the error message could be more meaningful.



CR Number                     : 5455
Defect or Enhancement?        : enh
CR in Code, Doc, or Test?     : code
Inter-dependent CRs           : 
Project Name                  : dce
H/W Ref Platform              : other
S/W Ref Platform              : other
Component Name                : cds
Subcomponent Name             : cds/library/dnscfg.c
Short Description             : Incompatibility- Macro with
pthread_cleanup_push causing compile errors.
Reported Date                 : 9/24/92
Found in Baseline             : 1.0.1
Found Date                    : 9/24/92
Severity                      : E
Priority                      : 3
Status                        : open
Duplicate Of                  : 
Fix By Baseline               : 1.2
Fixed In Baseline             : 
Affected File(s)              : 
Diff supplied by              : 
Diff release                  : 
Sensitivity                   : public

[9/24/92 public]

Full Description:

        The following definition for CFG_PUSH occurs if _POSIX_THREADS
        is defined:

        #define CFG_PUSH(r,a)     pthread_cleanup_push(r,a)

        When CFG_PUSH is used, the arguments do not match the
        function prototype for pthread_cleanup_push.  That is, they
        don't match the arguments as defined by the POSIX interface
        for pthread_cleanup_push. Compile errors occur when using
        the C/370 compiler to compile this file.

        A similar problem occurs in dnscvtobjid.c and dnsgetattrent.c
        with the macros OBJID_PUSH and ATTR_PUSH respectively.

Repeat By:

        Compile these three files with the C/370 compiler with a
        function prototype for pthread_cleanup_push, matching the
        POSIX interface, included.

Proposed Solution:

        Change the macros by casting the arguments of
        pthread_cleanup_push to the types specified in the POSIX
        interface.  For example,

        #define CFG_PUSH(r,a) \
              pthread_cleanup_push(((void (*)())ra),((void *)a))



CR Number                     : 5022
Defect or Enhancement?        : enh
CR in Code, Doc, or Test?     : code
Inter-dependent CRs           : 
Project Name                  : dce
H/W Ref Platform              : pmax
S/W Ref Platform              : osf1
Component Name                : cds
Subcomponent Name             : 
Short Description             : PMAX cds should use POSIX calls, not BSD calls
Reported Date                 : 8/12/92
Found in Baseline             : 1.0.1
Found Date                    : 8/12/92
Severity                      : B
Priority                      : 2
Status                        : open
Duplicate Of                  : 
Fix By Baseline               : 1.2
Fixed In Baseline             : 
Affected File(s)              : 
Diff supplied by              : 
Diff release                  : 
Sensitivity                   : public

[8/12/92 public]
when the POSIX alternative to bsd calls was added to cds
a while ago, the old interfaces were left conditional on _BSD.
OSF/1 supports all of the POSIX interfaces, so it should be
using them rather than the BSD interfaces.  I believe all that
is required is to change the compilation options. (and test it, of
course).

[8/25/92 public]
Since the BSD calls work as implemented, this is not a defect but rather
an enhancement request relating to code cleanup.



CR Number                     : 4945
Defect or Enhancement?        : enh
CR in Code, Doc, or Test?     : test
Inter-dependent CRs           : 
Project Name                  : dce
H/W Ref Platform              : pmax
S/W Ref Platform              : osf1
Component Name                : cds
Subcomponent Name             : 
Short Description             : dacl tests need to be augmented
Reported Date                 : 8/6/92
Found in Baseline             : 1.0.1
Found Date                    : 8/6/92
Severity                      : B
Priority                      : 2
Status                        : open
Duplicate Of                  : 
Fix By Baseline               : 1.1
Fixed In Baseline             : 
Affected File(s)              : 
Sensitivity                   : public

[8/6/92 public]
The dacl tests do not test all permutations (or even a significant subset)
of the possible permissions with respect to the relevant cdscp commands.
All of the tests (read, create, delete, modify and replicas) could be
improved significantly.

[8/10/92 public]

We believe that the dacl_tests are not yet completely reliable for
production use in CDS componenet testing.  Mark Sawyer recommends that the
entire dacl test suite be audited for accuracy and completeness.



CR Number                     : 4814
Defect or Enhancement?        : enh
CR in Code, Doc, or Test?     : code
Inter-dependent CRs           : 
Project Name                  : dce
H/W Ref Platform              : rs6000
S/W Ref Platform              : aix
Component Name                : cds
Subcomponent Name             : cdsd
Short Description             : Fix hack in server/back_combine.c
Reported Date                 : 7/23/92
Found in Baseline             : 1.0.1b25
Found Date                    : 7/23/92
Severity                      : D
Priority                      : 3
Status                        : open
Duplicate Of                  : 
Fix By Baseline               : 1.2
Fixed In Baseline             : 
Affected File(s)              : 
Diff supplied by              : 
Diff release                  : 
Sensitivity                   : public

[7/23/92 public]
From the file:
     * THIS IMPLEMENTATION IS A MINOR HACK!!!  Please note that
     * wait is done by looping, whereas calculating the exact time to
     * wait would be much better.  The threads package doesn't have such
     * a feature, and there's no time to write one right now.

[8/25/92 public]
The code works so change it from defect to enhancement. The fix is to
delete the comment.



CR Number                     : 4397
Defect or Enhancement?        : enh
CR in Code, Doc, or Test?     : test
Inter-dependent CRs           : 
Project Name                  : dce
H/W Ref Platform              : all
S/W Ref Platform              : all
Component Name                : cds
Subcomponent Name             : cp_killer.sh
Short Description             : Make cp_clerk.tests the last test.
Reported Date                 : 6/23/92
Found in Baseline             : 1.0.1
Found Date                    : 6/23/92
Severity                      : C
Priority                      : 3
Status                        : open
Duplicate Of                  : 
Fix By Baseline               : 1.1
Fixed In Baseline             : 
Affected File(s)              : 
Sensitivity                   : public

[6/23/92 public]

The last line in the test cp_clerk.tests is the disable clerk
call.  A comment before the call says that this should be
the last test executed by cp_killer since the clerk cannot
be restarted once killed.  However, cp_killer.sh does not
have cp_clerk.tests as the last test.  cp_killer.sh should
be changed to call cp_clerk.tests last.



CR Number                     : 4294
Defect or Enhancement?        : enh
CR in Code, Doc, or Test?     : code
Inter-dependent CRs           : 
Project Name                  : dce
H/W Ref Platform              : pmax
S/W Ref Platform              : osf1
Component Name                : cds
Subcomponent Name             : cdscp
Short Description             : cdscp show dir /.: has two formats
Reported Date                 : 6/16/92
Found in Baseline             : 1.0.1
Found Date                    : 6/16/92
Severity                      : C
Priority                      : 2
Status                        : open
Duplicate Of                  : 
Fix By Baseline               : 1.2
Fixed In Baseline             : 
Affected File(s)              : 
Diff supplied by              : 
Diff release                  : 
Sensitivity                   : public

[6/16/92 public]

If RPC_SUPPORTED_PROTSEQS is set to either CN of DG, we get a new output
format: 

cdscp show dir /.:

                        SHOW
                   DIRECTORY   /.../santa_cell.osf.org
                          AT   1992-06-16-20:41:24
            RPC_ClassVersion = 0100
                     CDS_CTS = 1992-06-16-14:48:10.641054100/08-00-2b-24-c9-6a
                     CDS_UTS = 1992-06-16-19:52:12.163720100/08-00-2b-24-c9-6a
              CDS_ObjectUUID = 0061D12D-FF2A-1A3D-98F7-08002B24C96A
                CDS_Replicas = :
          Clearinghouse UUID = 002B92BA-FF22-1A3D-98F7-08002B24C96A
           Tower  1 Floor 1  = 0d c9 f1 7d 25 d3 c6 ca 11 85 54 08 00 2b 1c 8f 1
f 01 00         00 00
           Tower  1 Floor 2  = 0d 04 5d 88 8a eb 1c c9 11 9f e8 08 00 2b 10 48 6
0 02 00         00 00
           Tower  1 Floor 3  = 0b       00 00           connection
           Tower  1 Floor 4  = 07       00 00           port: 0, ncacn_ip_tcp
           Tower  1 Floor 5  = 09       82 69 05 fa     host: 130.105.5.250
                       Tower = ncadg_ip_udp:130.105.5.250[]
                Replica type = master
          Clearinghouse Name = /.../santa_cell.osf.org/santa_ch
                 CDS_AllUpTo = 1992-06-16-20:11:28.889109100/08-00-2b-24-c9-6a
             CDS_Convergence = low
                CDS_InCHName = allowed
        CDS_DirectoryVersion = 3.0
            CDS_ReplicaState = on
             CDS_ReplicaType = master
               CDS_LastSkulk = 1992-06-16-20:11:28.889109100/08-00-2b-24-c9-6a
              CDS_LastUpdate = 1992-06-16-19:52:12.163720100/08-00-2b-24-c9-6a
             CDS_RingPointer = 002B92BA-FF22-1A3D-98F7-08002B24C96A
                   CDS_Epoch = 0061D12C-FF2A-1A3D-98F7-08002B24C96A
          CDS_ReplicaVersion = 3.0
             CDS_GDAPointers = :
                     Timeout = :
                  Expiration = 1992-06-17-15:48:37.056
                   Extension = +1-00:00:00.000
          Clearinghouse UUID = 001F1472-FF44-1A3D-9A69-08002B24C96A
           Tower  1 Floor 1  = 0d c9 f1 7d 25 d3 c6 ca 11 85 54 08 00 2b 1c 8f 1
f 01 00         00 00
           Tower  1 Floor 2  = 0d 04 5d 88 8a eb 1c c9 11 9f e8 08 00 2b 10 48 6
0 02 00         00 00
           Tower  1 Floor 3  = 0b       00 00           connection
           Tower  1 Floor 4  = 07       00 00           port: 0, ncacn_ip_tcp
           Tower  1 Floor 5  = 09       82 69 05 fa     host: 130.105.5.250
                       Tower = ncadg_ip_udp:130.105.5.250[]
                Replica type = gda
          Clearinghouse Name = /.../santa_cell.osf.org/santa_gda


If unset then we get the old format:

cdscp> show dir /.:
show dir /.:

                        SHOW
                   DIRECTORY   /.../santa_cell.osf.org
                          AT   1992-06-16-20:40:26
            RPC_ClassVersion = 0100
                     CDS_CTS = 1992-06-16-14:48:10.641054100/08-00-2b-24-c9-6a
                     CDS_UTS = 1992-06-16-19:52:12.163720100/08-00-2b-24-c9-6a
              CDS_ObjectUUID = 0061D12D-FF2A-1A3D-98F7-08002B24C96A
                CDS_Replicas = :
          Clearinghouse UUID = 002B92BA-FF22-1A3D-98F7-08002B24C96A
                       Tower = ncacn_ip_tcp:130.105.5.250[]
                       Tower = ncadg_ip_udp:130.105.5.250[]
                Replica type = master
          Clearinghouse Name = /.../santa_cell.osf.org/santa_ch
                 CDS_AllUpTo = 1992-06-16-20:11:28.889109100/08-00-2b-24-c9-6a
             CDS_Convergence = low
                CDS_InCHName = allowed
        CDS_DirectoryVersion = 3.0
            CDS_ReplicaState = on
             CDS_ReplicaType = master
               CDS_LastSkulk = 1992-06-16-20:11:28.889109100/08-00-2b-24-c9-6a
              CDS_LastUpdate = 1992-06-16-19:52:12.163720100/08-00-2b-24-c9-6a
             CDS_RingPointer = 002B92BA-FF22-1A3D-98F7-08002B24C96A
                   CDS_Epoch = 0061D12C-FF2A-1A3D-98F7-08002B24C96A
          CDS_ReplicaVersion = 3.0
             CDS_GDAPointers = :
                     Timeout = :
                  Expiration = 1992-06-17-15:48:37.056
                   Extension = +1-00:00:00.000
          Clearinghouse UUID = 001F1472-FF44-1A3D-9A69-08002B24C96A
                       Tower = ncacn_ip_tcp:130.105.5.250[]
                       Tower = ncadg_ip_udp:130.105.5.250[]
                Replica type = gda
          Clearinghouse Name = /.../santa_cell.osf.org/santa_gda

[7/8/92 public]
Changed component to cds.  The cds folks may wish decide to mark this as
an enhancement.

[7/6/92 public]

Yes, this is definitely an enhancement.



CR Number                     : 4252
Defect or Enhancement?        : enh
CR in Code, Doc, or Test?     : code
Inter-dependent CRs           : 
Project Name                  : dce
H/W Ref Platform              : rs6000
S/W Ref Platform              : aix
Component Name                : cds
Subcomponent Name             : control
Short Description             : In cdscp, setting invalid preferred clearinghouse "works"
Reported Date                 : 6/12/92
Found in Baseline             : 1.0.1b18
Found Date                    : 6/12/92
Severity                      : C
Priority                      : 1
Status                        : open
Duplicate Of                  : 
Fix By Baseline               : 1.2
Fixed In Baseline             : 
Affected File(s)              : 
Diff supplied by              : 
Diff release                  : 
Sensitivity                   : public

[6/12/92 public]
Set invalid 'cdscp preferred clearinghouse'; no error, able to 'show' it.
Attempted to 'show dir /.:'--got an error for each attribute.  Test is 
needed to verify that the 'set' clearinghouse is valid.  Console follows:

# cdscp
cdscp> set cdscp preferred clear /.:/foo_ch
cdscp> sh cdscp preferred clear
read attribute values from clearinghouse /.../achilleus.cell.austin.ibm.com/foo_ch
cdscp> sh dir /.:

                        SHOW
                   DIRECTORY   /.../achilleus.cell.austin.ibm.com
                          AT   1992-06-12-13:46:42
            RPC_ClassVersion = 
                     CDS_CTS = 
                     CDS_UTS = 
              CDS_ObjectUUID = 
                CDS_Replicas = 
                 CDS_AllUpTo = 
             CDS_Convergence = 
                CDS_InCHName = 
        CDS_DirectoryVersion = 
            CDS_ReplicaState = 
             CDS_ReplicaType = 
               CDS_LastSkulk = 
              CDS_LastUpdate = 
             CDS_RingPointer = 
                   CDS_Epoch = 
          CDS_ReplicaVersion = 
             CDS_GDAPointers = 
Error on entity: /.../achilleus.cell.austin.ibm.com
Specified clearinghouse does not exist (dce / cds)
Function: dnsReadAttrValue

Error on entity: /.../achilleus.cell.austin.ibm.com
Specified clearinghouse does not exist (dce / cds)
Function: dnsReadAttrValue

...

[12/7/92 public]
This behavior is confusing, but has an obvious workaround. Adding
additional error checking to cdscp in general is an enhancement.



CR Number                     : 4076
Defect or Enhancement?        : enh
CR in Code, Doc, or Test?     : test
Inter-dependent CRs           : 
Project Name                  : dce
H/W Ref Platform              : rs6000
S/W Ref Platform              : aix
Component Name                : cds
Subcomponent Name             : src/test/directory/cds/cp_test.sh
Short Description             : "cp_test.sh directory" errors
on some of the tests
Reported Date                 : 6/5/92
Found in Baseline             : 1.0
Found Date                    : 6/5/92
Severity                      : D
Priority                      : 1
Status                        : open
Duplicate Of                  : 
Fix By Baseline               : 1.1
Fixed In Baseline             : 
Affected File(s)              : 
Sensitivity                   : public

[6/5/92 public]

Full Description:

	"cp_test.sh directory" errors on some of the tests
	The clearinghouse2 and 3 do not exist, so the test
	errors out as does some others in this suite

Repeat By:

	execute "cp_test.sh directory" and view directory.log

Proposed Solution:

	build or create the clearinghouses as necessary for
	this test.

[6/23/92 public]
These clearinghouses were intended by the developer of the test to
be created manually. If they don't exist, use the options described
in the test script (-noch?) to eliminate the tests that reference them.



CR Number                     : 4021
Defect or Enhancement?        : enh
CR in Code, Doc, or Test?     : code
Inter-dependent CRs           : 
Project Name                  : dce
H/W Ref Platform              : all
S/W Ref Platform              : all
Component Name                : cds
Subcomponent Name             : gda
Short Description             : gdad should be able to make multiple DNS queries to resolve cell.
Reported Date                 : 6/3/92
Found in Baseline             : 1.0.1b18
Found Date                    : 6/3/92
Severity                      : B
Priority                      : 1
Status                        : open
Duplicate Of                  : 
Fix By Baseline               : 1.2
Fixed In Baseline             : 
Affected File(s)              : 
Diff supplied by              : 
Diff release                  : 
Sensitivity                   : public

[6/3/92 public]

Currently, the gda requires that the response from the DNS nameserver
contain both a TXT record for the cell root information, plus an additional
"A" record for the cell's root server.

To do this, you have to fake DNS into piggybacking the "A" record into the
response by adding an MX record for the cell pointing to its servers.

This is a kludge, especially since the cell servers may not be running a
mailer.

If the response from DNS does not contain additional records with the name
and address of all the cell's servers, the gda should make one or more
additional DNS queries with type=A to obtain the addresses of the servers.

Just call gethostbyname if you're lazy.

[6/2/92 public]
The original plan, conceived with Craig Everhart, is to use AFSDB records
to refer to the servers by name. These are like MX records in that the
hostname causes named to return the A record in the answer. Unfortunately
(as stated in the documentation) most named's do not support AFSDB
records, so MX records can be used in their stead, kludge though it
may be.

The gdad does not call gethostbyname because it is not thread safe. Rather
than single-threading its way through the resolver code (not thread safe
either), the gdad issues requests to DNS servers in parallel. I've
discussed this with Nat Mishkin and he has come close to convincing me
that this is not a good enough reason for not using the resolver (after
hacking it to be thread reentrant). The other reason for not using the
resolver is that it, I believe, cannot handle referrals and therefore
cannot talk to the DNS root servers who refuse to chain requests.

[10/12/92 public]

Changed to DEFER.  Mark F is doing significant redesign on the DNS cellname
representation.  That design will likely make this OT moot.



CR Number                     : 3537
Defect or Enhancement?        : enh
CR in Code, Doc, or Test?     : code
Inter-dependent CRs           : 
Project Name                  : dce
H/W Ref Platform              : other
S/W Ref Platform              : other
Component Name                : cds
Subcomponent Name             : cds/includes/threads_lib.h
Short Description             : Calls to dthread_equal cause type mismatch compile errors.
Reported Date                 : 5/14/92
Found in Baseline             : 1.0
Found Date                    : 5/14/92
Severity                      : C
Priority                      : 1
Status                        : open
Duplicate Of                  : 
Fix By Baseline               : 1.2
Fixed In Baseline             : 
Affected File(s)              : 
Diff supplied by              : 
Diff release                  : 
Sensitivity                   : public

[5/14/92 public]

Note that this is on MVS with the C/370 2.1 compiler.

        The following define of dthread_equal occurs in threads_lib.h
        if DTHREAD_WRAPPERS is not defined.

        #define dthread_equal           pthread_equal

        Some places in the CDS code call dthread_equal with parameters
        which are not of type pthread_t.  For example, the following
        call is made in cds/child/clerk_client.c

        if (!dthread_equal(ll_p->ll_mutex, dthread_null)) {

        ll_p->ll_mutex is of type pthread_mutex_t if DTHREAD_WRAPPERS
        is not defined.  Because dthread_equal is defined to be
        pthread_equal which expects both parameters to be of type
        pthread_t this line will result in a type mismatch compile
        error.

Repeat By:

        Compile the files which call dthread_equal with parameters that
        are not of type pthread_t, without defining DTHREAD_WRAPPERS,
        using the C/370 compiler on MVS.

Proposed Solution:

        The quick way to fix this problem is to change the definition of
        dthread_equal in threads_lib.h to:

        #define dthread_equal(handle1, handle2)  \
            pthread_equal((pthread_t)(handle1), (pthread_t)(handle2))

        However, the proper fix is to do the above change, plus replace
        all calls to dthread_equal that pass parameters which are of a
        type other than pthread_t, with some other function that
        compares pointers.

        dthread_equal (pthread_equal) should only be used for comparing
        thread pointers.

[05/14/92 public]
This is a defect in the component indicated by the pathname...

[5/15/92 public]
Verified as a code cleanup item still in 1.0.1.

[6/16/92 public]
Changed to enhancement to bug, lowered priority to 3.

[12/7/92 public]
This is not a problem on the reference platforms. Fixing it should be
a 1.1 CDS code cleanup work item.



CR Number                     : 3523
Defect or Enhancement?        : enh
CR in Code, Doc, or Test?     : code
Inter-dependent CRs           : 4525
Project Name                  : dce
H/W Ref Platform              : rs6000
S/W Ref Platform              : aix
Component Name                : cds
Subcomponent Name             : cdscp
Short Description             : Invalid attributes are shown for entries.
Reported Date                 : 5/14/92
Found in Baseline             : 1.0
Found Date                    : 5/14/92
Severity                      : C
Priority                      : 1
Status                        : open
Duplicate Of                  : 
Fix By Baseline               : 1.2
Fixed In Baseline             : 
Affected File(s)              : 
Diff supplied by              : 
Diff release                  : 
Sensitivity                   : public

[5/14/92 public]
        The CDSCP returns an empty set for attributes which are not
      housed in the entry being shown.  Consider the following CDSCP
      request:

           cdscp show directory /.: CDS_LinkTarget

      The CDS_LinkTarget attribute is a soft-link specific attribute,
      and not a directory attribute.  The user/administrator would
      expect a warning, or even an error saying that this attribute
      doesn't exist or the attribute is invalid for the type of
      CDS entry.  Instead we get the following result:

                            SHOW
                       DIRECTORY   /.../c=ca/o=cell3
                              AT   1992-05-05-20:51:57
                  CDS_LinkTarget = <empty set>

     To the user and the administrator, this type of result is extremely
     misleading.  The assumption, upon receiving this kind of result,
     would be that the attribute exists and is multi-valued, but
     doesn't have any values associated with it.

     Consequently, since the user/administrator can use the
     'cdscp add directory' to add attribute values to this 'virtual'
     attribute called CDS_LinkTarget:

          cdscp add  directory /.: CDS_LinkTarget = /.:

     A 'cdscp show directory' command reveals that the attribute
     CDS_LinkTarget was added to the CDS directory entry:

     NOTE:  The attribute to look for is the CDS_LinkTarget.
     --------------------------------------------------------------------
                       SHOW
                  DIRECTORY   /.../c=ca/o=cell3
                         AT   1992-05-05-21:11:34
           RPC_ClassVersion = 0100
                    CDS_CTS = 1992-02-28-00:13:35.996616100/10-00-5a-a8-ab-ef
                    CDS_UTS = 1992-05-05-22:59:34.341095100/10-00-5a-a8-ab-ef
             CDS_ObjectUUID = 009819E4-7EAF-19AD-9B82-10005AA8ABEF
               CDS_Replicas = :
       Clearinghouse's UUID = 0024A9DC-7EAA-19AD-9B82-10005AA8ABEF
                      Tower = ncadg_ip_udp:9.21.22.74
                      Tower = ncacn_ip_tcp:9.21.22.74
               Replica type = master
       Clearinghouse's Name = /.../c=ca/o=cell3/svrs3_ch
               CDS_Replicas = :
       Clearinghouse's UUID = 00273094-1322-1A07-AD56-10005AA8ABEF
                      Tower = ncadg_ip_udp:9.21.22.74
                      Tower = ncacn_ip_tcp:9.21.22.74
               Replica type = readonly
       Clearinghouse's Name = /.../c=ca/o=cell3/TEST_CH_1
                CDS_AllUpTo = 1992-05-05-22:59:38.305872100/10-00-5a-a8-ab-ef
            CDS_Convergence = medium
               CDS_InCHName = allowed
       CDS_DirectoryVersion = 3.0
             CDS_LinkTarget = /.../c=ca/o=cell3
           CDS_ReplicaState = on
            CDS_ReplicaType = 0
              CDS_LastSkulk = 0
             CDS_LastUpdate = 0
                  CDS_Epoch = 009817E6-7EAF-19AD-9B82-10005AA8ABEF
         CDS_ReplicaVersion = 3.0
     --------------------------------------------------------------------

Repeat By:

     Invoke the following CDSCP command:

          cdscp show directory /.: CDS_LinkTarget
          cdscp add  directory /.: CDS_LinkTarget = /.:
          cdscp show directory /.:


Proposed Solution:

     The CDS-Clerk or CDS-Server should check that the attributes
     associate with the entry being shown or modified.

[1/11/92 public]
Quoting from Mark Sawyer:

This is an 'on-purpose'.

"All the 'information-hooks' are in place to prevent modification of
known attributes that are not normally associated with a particular
kind of entity (eg. CDS_LinkTarget and directory).

"However, the logic in ta_modify_attribute() currently treats any
'known' attribute as 'unknown' (ie. user-defined) if the attribute is
not normally associated with the particular entity being modified as in
the above case of a directory entity and the CDS_LinkTarget attribute.

"Although there are restrictions placed on attribute modifications, the
restrictions are not necessarily based on what might be considered
'normal' for a particular entity and attribute combination."

To fix this problem, we propose to add a new error code to the CDS clerk-
server protocol signifying that the attribute is not valid for the indicated
object. We don't believe that overloading another error code is correct.
However, we believe that protocol or API modifications such as this should be
deferred to 1.1. Also we believe that the priority and severity of this
CR should be set to C3.

[01/12/93 public]
This isn't a proity 1. Dropped it to a 3.

[01/15/93 public]
Due to the fact that this would require a protocol change that involves
to great a risk at this point of the project the bug will be deffered.

Priority must remain at a 1 in accordance with ageing rules.

[08/27/93 public]
The fix isn;t terribly complicated but I don't believe the nature
of the bug justifies a protocol change in 1.0.3. It will be done in
1.1.

[6/29/93 public]
Realistically this is not going to happen in 1.1. In fact its 
questionable whether it will be addressed in 1.2 given that it
will require a protocol change. Making it an enhancement request
to be revisited in the 1.2 timeframe.

[6/29/94 public]
Well you could always change the server to allow the add to happen.
Though didn't we already rev the protocol for 1.1?  Why not add the
error code.   The code isn't hard by everyone's admission and if the
protocol is already changed, what is the risk?

Anyway, this is really a defect in the presentation that cdscp does.
Since dcecp doesn't have this problem (you can't ask the server what
value a particular attribute has on an entry, you can only say show me
all the entries on a server) you might want to cancel this.  Though
since we are shipping cdscp in 1.1, this might not be the best approach.

I utterly loathe the concept that because of bug aging this needs to be
a 1.  That is a mistake.  Bugs that are high priority, that we need to
fix should be 1's.  If we aren't going to fix it in the next 6 months,
it's not a priority 1.  This is also not an enhancement.  It is a defect
against cdscp.  Truth in CR's I always say.

[6/29/94 public]
I beg to differ.  cdscp gets back an empty attribute and displays it that way.
This is not a bug by cdscp it cannot tell the difference. 

The server returns an empty set.  It does this cause it cannot actually  be sure that the attribute doesn't exist at another replica, it can only tell you it doesn't have any values for the attribute.  Now I agree this is architectural mumbo jumbo, but that
is the way it is.  

We did not change the protocol for 1.1 so adding a new error code would be a
big deal.  

The explanation of what attributes may appear on what type of entry is also correct.
Linktarget has special meaning to a server when it is on a link entry.  When it is
on another entry, it just doesn't mean anything to the server.

So, this is an enhancement request and is a big deal at this point in time.



CR Number                     : 3514
Defect or Enhancement?        : enh
CR in Code, Doc, or Test?     : code
Inter-dependent CRs           : 
Project Name                  : dce
H/W Ref Platform              : pmax
S/W Ref Platform              : osf1
Component Name                : cds
Subcomponent Name             : cds/server/sets_lib.c
Short Description             : CDSD -- Abort called without
any error messages or cleanup.
Reported Date                 : 5/14/92
Found in Baseline             : 1.0
Found Date                    : 5/14/92
Severity                      : D
Priority                      : 2
Status                        : open
Duplicate Of                  : 
Fix By Baseline               : 1.2
Fixed In Baseline             : 
Affected File(s)              : 
Diff supplied by              : 
Diff release                  : 
Sensitivity                   : public

[5/14/92 public]

Full Description:

        The CDS server contains code that checks data to make sure
        it hasn't been corrupted.  If it finds some inconsistency then
        it calls abort and sometimes no message or warning is displayed
        or logged.  Also no cleanup is done before aborting.
        There is no way of determining what went wrong unless debug
        events were turned on and that will just indicate approximately
        where it failed.

        The following functions in sets_lib.c call abort without logging
        an error message when DEBUG is defined:

        val_set_check
        att_set_check
        db_data_check

        This also occurs in the following server files:

        db_btree.c
        names_lib.c

Proposed Solution:

        Log an error message and do some cleanup before calling abort.

[5/14/92 public]
This will be addressed as a code cleanup item. Agreed that this is not
a good thing to do.



CR Number                     : 3508
Defect or Enhancement?        : enh
CR in Code, Doc, or Test?     : code
Inter-dependent CRs           : 
Project Name                  : dce
H/W Ref Platform              : rs6000
S/W Ref Platform              : aix
Component Name                : cds
Subcomponent Name             : cds/server/mgmt_file.c
Short Description             : In cds/server/mgmt_file.c, inconsistent use of file access functions on the same file.
Reported Date                 : 5/14/92
Found in Baseline             : 1.0
Found Date                    : 5/14/92
Severity                      : C
Priority                      : 2
Status                        : open
Duplicate Of                  : 
Fix By Baseline               : 1.2
Fixed In Baseline             : 
Affected File(s)              : 
Diff supplied by              : 
Diff release                  : 
Sensitivity                   : public

[5/14/92 public]
Full Description:

        cds_files.txt is created and written to using UNIX file I/O
        funtions in sys_mgmt_file_add but read, in sys_mgmt_file_load,
        using ANSI C file I/O functions.  This causes portability
        problems for non-UNIX machines. This inconsistency also occurs
        with the cds_config file.  It is created and written to using
        ANSI C file I/O in dns_adv_dump_ns in unix_stubs.c and read
        using UNIX file I/O in get_init_clearinghouse in
        clerk_init_cle.c.

Repeat By:

        <A description of how to reproduce the problem (optional)>

Proposed Solution:

        For each file, access to it should be consistent, either UNIX
        file I/O or ANSI file I/O.

[5/14/92 public]
A code cleanup issue that also exists in 1.0.1.



CR Number                     : 3507
Defect or Enhancement?        : enh
CR in Code, Doc, or Test?     : code
Inter-dependent CRs           : 
Project Name                  : dce
H/W Ref Platform              : rs6000
S/W Ref Platform              : aix
Component Name                : cds
Subcomponent Name             : cds/adver/adver_service_rpc.c
Short Description             : In cds/adver/adver_service_rpc.c, type mismatch.  Mutex declared as extern dthread_t.
Reported Date                 : 5/14/92
Found in Baseline             : 1.0
Found Date                    : 5/14/92
Severity                      : C
Priority                      : 2
Status                        : open
Duplicate Of                  : 
Fix By Baseline               : 1.2
Fixed In Baseline             : 
Affected File(s)              : 
Diff supplied by              : 
Diff release                  : 
Sensitivity                   : public

[5/14/92 public]
Full Description:

        The mutex clerk_mgmt_acl_th_mutex is defined in adver_dacl.c
        with

        dthread_mutex_t clerk_mgmt_acl_th_mutex;

        but is declared in adver_service_rpc.c with

        extern dthread_t clerk_mgmt_acl_th_mutex;

        This results in a type mismatch compile error.

        This same problem occurs with the mutex server_mgmt_acl_th_mutex
        which is defined as dthread_mutex_t in cds_dacl.c and declared
        with extern dthread_t in dns_service_rpc.c.

Repeat By:

        Compile adver_service_rpc.c and dns_service_rpc.c using the
        C/370 compiler.

Proposed Solution:

        Change adver_service_rpc.c and dns_service_rpc.c to declare the
        mutexes as mutexes and not threads.

        extern dthread_mutex_t clerk_mgmt_acl_th_mutex;
        extern dthread_mutex_t server_mgmt_acl_th_mutex;

[5/14/92 public]
A code cleanup issue that exists in 1.0.1 also.



CR Number                     : 3498
Defect or Enhancement?        : enh
CR in Code, Doc, or Test?     : code
Inter-dependent CRs           : 
Project Name                  : dce
H/W Ref Platform              : rs6000
S/W Ref Platform              : aix
Component Name                : cds
Subcomponent Name             : 
Short Description             : CDSPI - Default values for optional parameters (Category  : EBCDIC/ASCII Problems)
Reported Date                 : 5/14/92
Found in Baseline             : 1.0
Found Date                    : 5/14/92
Severity                      : C
Priority                      : 2
Status                        : open
Duplicate Of                  : 
Fix By Baseline               : 1.2
Fixed In Baseline             : 
Affected File(s)              : 
Diff supplied by              : 
Diff release                  : 
Sensitivity                   : public

[5/14/92 public]
Component (Module):     src/directory/cds/library/dnsenumobj.c
                        src/directory/cds/library/dnsenumgrp.c
                        src/directory/cds/library/dnsenumslink.c
                        src/directory/cds/library/dnsenumchild.c
                        src/directory/cds/library/dnscreategrp.c

Full Description:

        Default values for optional parameters, which happen to be
        opaque data structures, are stored in the static variables
        in the source files. These static variables are initialized
        with char strings which represent the memory map of the opaque
        structures. Eg for dnsEnumObj the default values for name and
        class filter are defined as :

        static byte_t allNames[]   = {"\11\1\*"}
        static byte_t allClasses[] = {"\11\1\*"}

        When this code is compiled on EBCDIC platform, the third byte
        in allNames array will contain the EBCDIC value of char
        "*" which is x'5C' and its corresponding ASCII char is "\".

        Since in DCE 1.0  all names are stored in ONLY ASCII
        8859-1 code page so when an MVS client sends enumerate object
        request to CDS server on AIX none of the names match the name
        filter and empty set of results is returned.

Repeat By:

        Port the DCE code to any non ASCII Platform, invoke the cdscp
        show command (without specifying any Name or class filter) to
        enumerate objects in a clearinghouse stored on AIX server.

Proposed Solution:

        Initialize these static variables (for defaults parameters) to
        the binary values corresponding to the ASCII code points.
        eg .

        static byte_t allNames[]   = {"\11\1\52"}

        Note : ASCII code point for  "*"  is  52 in octal

        Preferably change these static variables to defined constants
        and put them in some header file.

        This is a short term solution for DCE 1.0 in order to port the
        code on EBCDIC Platforms.

        The long term solution for supporting multiple code pages,
        double byte character sets etc and other NLS issues is on
        the agenda of DCE NLS SIG.



CR Number                     : 3497
Defect or Enhancement?        : enh
CR in Code, Doc, or Test?     : code
Inter-dependent CRs           : 
Project Name                  : dce
H/W Ref Platform              : rs6000
S/W Ref Platform              : aix
Component Name                : cds
Subcomponent Name             : cds/library/cdsstrtosimple.c
Short Description             : In cds/library/cdsstrtosimple.c, passing string names for CDS Entries, Attribute names etc in local code page. (Category EBCDIC/ASCII Problems)
Reported Date                 : 5/14/92
Found in Baseline             : 1.0
Found Date                    : 5/14/92
Severity                      : C
Priority                      : 2
Status                        : open
Duplicate Of                  : 
Fix By Baseline               : 1.2
Fixed In Baseline             : 
Affected File(s)              : 
Diff supplied by              : 
Diff release                  : 
Sensitivity                   : public

[5/14/92 public]
Full Description:

        OSF has taken a position to support ONLY ASCII 8859-1 code page
        in DCE 1.0 and CDS names are to be stored in 8859-1
        on ALL systems (including the ones where the local system
        environment is not ASCII ).

        This causes lot of problems while porting DCE code to systems
        running on non ASCII platform. Eg. On MVS (EBCDIC platform)
        CDS client rejects the RPC run time request to create an entry
        in CDS Name space with "Invalid Entry Name". This is because
        the tables (in source file src/directory/cds/library/dnstables.c)
        which contain valid characters for CDS names (Entries, Attributes
        etc) contain the ASCII code points of the valid characters.

        We cannot expect the DCE applications (eg RPC, Security etc)
        running on EBCDIC platform and writing directly to CDSPI
        interface to convert the CDS names from local code page to
        8859-1 before calling CDS Client.

Repeat By:

        Port the DCE code to any non ASCII Platform and run any RPC
        application which exports the binding to CDS Server.

Proposed Solution:

        These tables should serve the dual purpose of checking for
        valid CDS names and performing the conversion from local code
        page to 8859-1 while converting string names to opaque names.
        User should be provided with a list of valid CDS characters for
        string names so that these tables can be tailored for the local
        system environment.

        This is a short term solution for DCE 1.0 in order to port the
        code on non ASCII Platforms.

        The long term solution for supporting multiple code pages, double
        byte character sets etc and other NLS issues is on the agenda
        of DCE NLS SIG.



CR Number                     : 3496
Defect or Enhancement?        : enh
CR in Code, Doc, or Test?     : code
Inter-dependent CRs           : 
Project Name                  : dce
H/W Ref Platform              : rs6000
S/W Ref Platform              : aix
Component Name                : cds
Subcomponent Name             : control/prs.c,control/prscmd.c
Short Description             : CDSCP parser sensitive to ASCII code points (Category : EBCDIC/ASCII Problems)
Reported Date                 : 5/14/92
Found in Baseline             : 1.0
Found Date                    : 5/14/92
Severity                      : C
Priority                      : 2
Status                        : open
Duplicate Of                  : 
Fix By Baseline               : 1.2
Fixed In Baseline             : 
Affected File(s)              : 
Diff supplied by              : 
Diff release                  : 
Sensitivity                   : public

[5/14/92 public]
Full Description:

The cdscp command parser makes the assumption that the commands input
from  terminal are encoded in ASCII. Eg. for checking whether a
character is in lower case or not and then converting  it to upper
case it uses the following logic :

if (cc >= 'a' && cc <= 'z') return (cc &= 0xDF);

In EBCDIC, the lower case letter are not continuous in hex values and
logically ORing 0xDF with the lower case letter does not yield the upper
case value.

The parser logic also uses non syntactic (control) characters which is
going to cause problem not only on EBCDIC platforms but also on ASCII
platforms if a different code page is used.

Repeat By:

Proposed Solution:

-  Make the parsing logic insensitive to code page (NLS enhancement)

- Temporary Relief

Isolate such logic into either one header file or a single
source file so that changes can be easily made.



CR Number                     : 3426
Defect or Enhancement?        : enh
CR in Code, Doc, or Test?     : code
Inter-dependent CRs           : 
Project Name                  : dce
H/W Ref Platform              : pmax
S/W Ref Platform              : osf1
Component Name                : cds
Subcomponent Name             : cdscp
Short Description             : cdscp outputs errors to stdout instead of stderr
Reported Date                 : 5/12/92
Found in Baseline             : 1.0.1b14
Found Date                    : 5/12/92
Severity                      : B
Priority                      : 2
Status                        : open
Duplicate Of                  : 
Fix By Baseline               : 1.2
Fixed In Baseline             : 
Affected File(s)              : 
Diff supplied by              : 
Diff release                  : 
Sensitivity                   : public

[5/12/92 public]
All messages output by cdscp, good or bad, go to stdout.  For the purposes
of testing, upon error, I was trying to process stderr to generate a report.
I found that none of the errors I was receiving were being sent to stderr.



CR Number                     : 3390
Defect or Enhancement?        : enh
CR in Code, Doc, or Test?     : code
Inter-dependent CRs           : 
Project Name                  : dce
H/W Ref Platform              : pmax
S/W Ref Platform              : osf1
Component Name                : cds
Subcomponent Name             : cdscp
Short Description             : cdscp show server fails for 2 machine cell
Reported Date                 : 5/11/92
Found in Baseline             : 1.0.1b14
Found Date                    : 5/11/92
Severity                      : B
Priority                      : 3
Status                        : open
Duplicate Of                  : 
Fix By Baseline               : 1.2
Fixed In Baseline             : 
Affected File(s)              : 
Diff supplied by              : 
Diff release                  : 
Sensitivity                   : public

[5/11/92 public]

I setup a two-machine cell where dce6 was the server for SEC and CDS, and dce7
is a client-only machine. If I do a "cdscp show server" on DCE6, that works. If I do a "cdscp show server" on DCE7, I get:

Failure in routine: cprpc_get_binding_handle; code = 382312703
RPC protocol not supported by this auth protocol (dce / rpc)
Failure in routine: cp_show_server; code = 382312703
RPC protocol not supported by this auth protocol (dce / rpc)

(messages are properly set).

	-Kenny

[5/12/92 public]

The show server command displays information about the server
running on your local system, so I believe a failure should
occur if you do not have a server running on your system.  
However, I am not sure if you should be seeing the error that
you are.

[5/12/92]

Since the show server command is designed to show information
on the server running on the local host, cprpc_get_binding_handle is
returning whatever the last rpc error was returned by
get_local_binding_handle .  In this case, its 382312703 .
If you run the show server command without issuing a dce_login,
you get different results.  The error you are seeing is a result
of connection oriented auth rpc not being enabled yet.  When it
is, you will see a different error message.  A consistent error
message is probably desired.  

However, for now I would recommend that the priority be lowered since
the error is a result of attempting something that is not supported.
The error message returned can be cleaned up at a later time.

[5/18/92 public]

Changed to enhancement.  This really was an operator error, but one
could argue for better error recovery.



CR Number                     : 3383
Defect or Enhancement?        : enh
CR in Code, Doc, or Test?     : code
Inter-dependent CRs           : 4459, 8133
Project Name                  : dce
H/W Ref Platform              : other
S/W Ref Platform              : other
Component Name                : cds
Subcomponent Name             : cdsd
Short Description             : Memory leak in cdsd.
Reported Date                 : 5/11/92
Found in Baseline             : 1.0.1
Found Date                    : 5/11/92
Severity                      : B
Priority                      : 1
Status                        : open
Duplicate Of                  : 
Fix By Baseline               : 1.2
Fixed In Baseline             : 
Affected File(s)              : 
Diff supplied by              : 
Diff release                  : 
Sensitivity                   : public

[5/11/92 public]

We have noticed a memory leak in the b12 bits of the cdsd .
If we run cp_killer.sh multiple times in a loop, we see the
cdsd increasing in size.  This is true even after a checkpoint
occurs.

Upon investigation, we found that it does not appear that
db_hash_free is being called to free up the memory associated
with a dead directory.  As a possible fix, we tried the
following:

In the routine db_checkpoint, we modified the code:

            /*
             * Check the directory state -- if it's dead, don't write
             * it out to the checkpoint file -- it is a dangling entry
             * anyway.
             */
            if (hash_p->dir_replica_state == RS_dead)
                {
                DEBUG_EVENT(db_checkpoint_info,
                        ("I db_checkpoint() - skipping over a dead replica\n"));
                continue;
                }

to be

            /*
             * Check the directory state -- if it's dead, don't write
             * it out to the checkpoint file -- it is a dangling entry
             * anyway.
             */
            if (hash_p->dir_replica_state == RS_dead)
                {
                DEBUG_EVENT(db_checkpoint_info,
                        ("I db_checkpoint() - skipping over a dead replica\n"));

                if (hash_p->dir_users == 0) {
                   DEBUG_EVENT(db_checkpoint_info,
                        ("Calling db_hash_free to free memory associated with dead directory.\n"));
                   db_hash_free(hash_p, file_p);
                }
                continue;
            }

This frees up memory for dead directories before discarding the
transaction log.

We also modified the routine db_hash_free and added the line
   SERVER_DELETE_CONDITION_OR_BUGCHECK(&hash_p->dir_state_changed);

immediately following the line
   SERVER_DELETE_CONDITION_OR_BUGCHECK(&hash_p->dir_update_accessable);

The deletion of the condition dir_state_changed appeared to have
been forgotten.


These changes appear to free up memory for dead directories when a
checkpoint is done.  We are not extremely confident in the
validity of these changes, however.  They should be examined
closely by DEC.

After these changes were made, a memory leak still existed in the
cds server.  The memory which does not appear to be getting freed
is allocated in the routine create_child in the file ta_create.c .
The line is:
            stream_p->db_entry.data_p =
              (data_record_t *)dns_malloc_temp(INITIAL_RECORD_SIZE);

We are not sure where this memory should be deallocated.

[5/20/92 public]
The malloc(INITIAL_RECORD_SIZE) is not freed because the parent_stream_p
in ta_create_dir() should be released with db_close_stream(), not piecemeal.
Submit coming shortly after test.

[5/26/92 public]
Closed.

[5/27/92 public]
The above close was in error, reopened as an B2.  (Bitten by an
editor macro...)

[6/25/92 public]

Above is a suggested fix to call db_hash_free to free up memory
for dead directories when a checkpoint is done.  Bumping the
priority back up to 1 so that the suggested change gets evaluated.
If this is not the correct change, a memory leak still exists which
causes  information about dead directories to be retained even
after a checkpoint.  Does it need to be?

[7/13/92 public]
The memory leak is in fact a "feature" of the architecture, exacerbated
by some non-optimal implementation practices. The original assumption is
that directories don't get deleted very often in normal operation. This
assumption and the issue of cleanup of stale information will be addressed
in a subsequent release of CDS, as decided by the technical managers.



CR Number                     : 3182
Defect or Enhancement?        : def
CR in Code, Doc, or Test?     : doc
Inter-dependent CRs           : 
Project Name                  : dce
H/W Ref Platform              : pmax
S/W Ref Platform              : osf1
Component Name                : cds
Subcomponent Name             : app_ref
Short Description             : CDS cdsclerk man page, [-e\*] option could be replaced (enhancement!).
Reported Date                 : 4/30/92
Found in Baseline             : 1.0
Found Date                    : 4/30/92
Severity                      : D
Priority                      : 3
Status                        : open
Duplicate Of                  : 
Fix By Baseline               : 1.2
Fixed In Baseline             : 
Affected File(s)              : 
Sensitivity                   : public

[4/30/92 public]

Full Description:

	CDS man page for cdsclerk, -e option with no arguments should be default.
	The syntax for cdsclerk (other cds commands, also) shows [-e\*] as
	an option. This is messy, both in code and documentation. Why not
	make -e with no arguments be equal to full list of error messages,
	then explain how to specify less than full list of error messages?

Proposed Solution:

	See above for clean fix to both code and documentation.

[05/02/92 public]

	The same bug was submitted againt cdsadv - [Martha DasSarma]
        It says:
	CDS cdsadv, -e option with no args could be default.
        The syntax for cdsadv (other cds commands, also) shows [-e\*] as
	an option. ... [same writing as above].

[5/7/92 public]
Assigned to DEC

[7/5/95 public]

Reassigned for DCE 1.2.



CR Number                     : 2494
Defect or Enhancement?        : enh
CR in Code, Doc, or Test?     : code
Inter-dependent CRs           : 
Project Name                  : dce
H/W Ref Platform              : pmax
S/W Ref Platform              : osf1
Component Name                : cds
Subcomponent Name             : 
Short Description             : cleanup of include paths
Reported Date                 : 4/1/92
Found in Baseline             : 1.0.1
Found Date                    : 4/1/92
Severity                      : C
Priority                      : 2
Status                        : open
Duplicate Of                  : 
Fix By Baseline               : 1.2
Fixed In Baseline             : 
Affected File(s)              : many
Diff supplied by              : 
Diff release                  : 
Sensitivity                   : public

[4/1/92 public]

Many routines in CDS include <cds_filexxx.h> instead of
<dce/cds_filexxx.h>.

This all works today because many of the CDS include files are
resolved in the object tree, even though they are correctly
exported.

Note: This problem raised its head when building
test/directory/cds/cdstest.c.  When building this program, there is the
assumption that obj/pmax/directory/cds/... exists.  It doesn't
necessarily.

A quick and dirty fix was put into the Makefile for cdstest.c.



CR Number                     : 2294
Defect or Enhancement?        : enh
CR in Code, Doc, or Test?     : code
Inter-dependent CRs           : 
Project Name                  : dce
H/W Ref Platform              : pmax
S/W Ref Platform              : osf1
Component Name                : cds
Subcomponent Name             : 
Short Description             : No time-to-live value from CDS
Reported Date                 : 3/13/92
Found in Baseline             : 1.0
Found Date                    : 3/13/92
Severity                      : D
Priority                      : 3
Status                        : open
Duplicate Of                  : 
Fix By Baseline               : 1.2
Fixed In Baseline             : 
Affected File(s)              : 
Diff supplied by              : 
Diff release                  : 
Sensitivity                   : public

[3/13/92 public]

The DFS cache manager caches information that it learns from CDS--directory
structure and junction attributes.  (Basically, it builds a micro-filesystem
that describes the tree structure immediately under the /.../ root.)
However, as CDS and cell configuration information changes over time, DFS
has no way of knowing when to re-check its cached information.

The Internet's domain name system does have a mechanism for expressing
time-to-live attributes of the information that resides there.
Administrators set time-to-live values both on specific pieces of
information and on the zone as a whole; these are used as time-to-live
values for explicit information records and the authoritative absence of
informmation records, respectively.  Before making a change to
configuration information in the Internet DNS, administrators can reduce the
time-to-live values for information that is about to change.

The DFS cache manager (and possibly other CDS clients as well) would
benefit if CDS were to offer time-to-live values for the information that
it returns.  With such information, the DFS cache manager would know when
to revalidate its cache.  At the moment, it (really the ``dfsbind''
program) must simply guess as to the proper TTL values to use.  Minimally,
it would be useful for CDS to propagate TTL values from the domain system
to the CDS client, both for successful and for failed lookups.

[3/23/92 public]

Referring to Sec. 3.6.1.2 in "Using the Portable Interface to the CDS Clerk",
the fsCacheTimeout flag may be used to specify a value in seconds to limit
the age of cached data returned to an application. This will only be
effective if you let the CDS clerk cache CDS data for you. Unfortunately
returning a TTL from a CDS or a DNS server will require a protocol change --
highly unlikely for DCE 1.0.*.

[4/13/92 public]
Changed to enhancement.

[weisman 4/28/92 public] 

For some reason, the change on 4/13 to enhancement didn't happen.  Try
again...



CR Number                     : 2204
Defect or Enhancement?        : enh
CR in Code, Doc, or Test?     : code
Inter-dependent CRs           : 
Project Name                  : dce
H/W Ref Platform              : pmax
S/W Ref Platform              : osf1
Component Name                : cds
Subcomponent Name             : bind
Short Description             : bind gda cannot expand abbrevs
Reported Date                 : 3/11/92
Found in Baseline             : 1.0
Found Date                    : 3/11/92
Severity                      : D
Priority                      : 3
Status                        : open
Duplicate Of                  : 
Fix By Baseline               : 1.2
Fixed In Baseline             : 
Affected File(s)              : 
Diff supplied by              : 
Diff release                  : 
Sensitivity                   : public
Transarc Deltas               : 
Transarc Herder               : 
Transarc Status               : 

[3/11/92 public]
 
Ideally, in a cell registered in the Domain Name System, a user could refer
to an object by giving a nickname or an abbreviation after the /.../ name
component.  That is, a user should not be constrained to type canonical
fully-qualified domain names after /.../, but might type some abbreviation
that the domain resolver normally recognizes, or might type a name that is
a nickname (CNAME) for a formal cell name.
 
If this functionality were present in CDS, the dfsbind program of dfs would
like to be able to use it.  In particular, it would be most useful for
dfsbind (a CDS client) to be able to distinguish canonicalized names from
abbreviations or CNAMEs.  (The representation of abbreviations or CNAMEs
in the file system would be as symbolic links to the canonicalized name.)
In order for this functionality to work, dfsbind would have to be able to
tell whether the name presented by a user were already canonicalized, or if
not, what the canonicalized form of the name was.

[6/4/93 public]
Could we call this a defect rather than an enhancement for 1.1?  Seems like
a practical necessity.
(as a separate issue, dfsbind will need to be able to read CDS aliases)
Changed Defect or Enhancement? from `enh' to `def' 
Added field Transarc Deltas with value `' 
Added field Transarc Herder with value `' 
Added field Transarc Status with value `'

[07/07/93 public]
I'll check on wether this can/should be done for 1.1. It's not going
to happen during 1.0.3 so to keep our defect bookkeeping straight it
should be carried as an enhancement request for 1.1.



CR Number                     : 2114
Defect or Enhancement?        : enh
CR in Code, Doc, or Test?     : code
Inter-dependent CRs           : 
Project Name                  : dce
H/W Ref Platform              : pmax
S/W Ref Platform              : osf1
Component Name                : cds
Subcomponent Name             : 
Short Description             : cds uninialized variable warnings
Reported Date                 : 2/19/92
Found in Baseline             : 1.0.1
Found Date                    : 2/19/92
Severity                      : C
Priority                      : 2
Status                        : open
Duplicate Of                  : 
Fix By Baseline               : 1.2
Fixed In Baseline             : 
Affected File(s)              : 
Diff supplied by              : 
Diff release                  : 
Sensitivity                   : public

[2/19/92 public]
The following warnings were generated with gcc -W -O and may indicate
problems with possible local variable use before being initialized.

/project/dce/build/dce1.0.1/src/directory/cds/adver/adver_clerk_event.c:1393: warning: `prevChild' may be used uninitialized in this function
/project/dce/build/dce1.0.1/src/directory/cds/adver/adver_sysdep_unix.c:1292: warning: `spt' may be used uninitialized in this function
/project/dce/build/dce1.0.1/src/directory/cds/adver/adver_sysdep_unix.c:185: warning: `sockptr' may be used uninitialized in this function
/project/dce/build/dce1.0.1/src/directory/cds/adver/adver_sysdep_unix.c:328: warning: `sockptr' may be used uninitialized in this function
/project/dce/build/dce1.0.1/src/directory/cds/cache/PMAX/casysinfo.c:154: warning: `fd' may be used uninitialized in this function
/project/dce/build/dce1.0.1/src/directory/cds/cache/caload.c:316: warning: `status' may be used uninitialized in this function
/project/dce/build/dce1.0.1/src/directory/cds/cache/caname.c:144: warning: `name_p' may be used uninitialized in this function
/project/dce/build/dce1.0.1/src/directory/cds/cache/caname.c:190: warning: `name_p' may be used uninitialized in this function
/project/dce/build/dce1.0.1/src/directory/cds/cdsbrowser/cds_display.c:218: warning: `status' may be used uninitialized in this function
/project/dce/build/dce1.0.1/src/directory/cds/cdsbrowser/cds_display.c:253: warning: `status' may be used uninitialized in this function
/project/dce/build/dce1.0.1/src/directory/cds/cdsbrowser/cds_display.c:305: warning: `count' may be used uninitialized in this function
/project/dce/build/dce1.0.1/src/directory/cds/cdsbrowser/cds_display_outline.c:120: warning: `i' may be used uninitialized in this function
/project/dce/build/dce1.0.1/src/directory/cds/cdsbrowser/cds_display_outline.c:2858: warning: `num_path' may be used uninitialized in this function
/project/dce/build/dce1.0.1/src/directory/cds/cdsbrowser/cds_display_outline.c:3151: warning: `clr_x' may be used uninitialized in this function
/project/dce/build/dce1.0.1/src/directory/cds/cdsbrowser/cds_display_outline.c:3151: warning: `dst_x' may be used uninitialized in this function
/project/dce/build/dce1.0.1/src/directory/cds/cdsbrowser/cds_display_outline.c:3151: warning: `src_x' may be used uninitialized in this function
/project/dce/build/dce1.0.1/src/directory/cds/cdsbrowser/cds_display_outline.c:3152: warning: `clr_wid' may be used uninitialized in this function
/project/dce/build/dce1.0.1/src/directory/cds/cdsbrowser/cds_display_outline.c:3318: warning: `clr_x' may be used uninitialized in this function
/project/dce/build/dce1.0.1/src/directory/cds/cdsbrowser/cds_display_outline.c:3318: warning: `dst_x' may be used uninitialized in this function
/project/dce/build/dce1.0.1/src/directory/cds/cdsbrowser/cds_display_outline.c:3318: warning: `src_x' may be used uninitialized in this function
/project/dce/build/dce1.0.1/src/directory/cds/cdsbrowser/cds_display_outline.c:3319: warning: `clr_wid' may be used uninitialized in this function
/project/dce/build/dce1.0.1/src/directory/cds/cdsbrowser/cds_display_outline.c:3753: warning: `entry' may be used uninitialized in this function
/project/dce/build/dce1.0.1/src/directory/cds/cdsbrowser/cds_display_outline.c:4146: warning: `maxim' may be used uninitialized in this function
/project/dce/build/dce1.0.1/src/directory/cds/cdsbrowser/cds_display_outline.c:4146: warning: `minim' may be used uninitialized in this function
/project/dce/build/dce1.0.1/src/directory/cds/cdsbrowser/cds_display_outline.c:4146: warning: `shown' may be used uninitialized in this function
/project/dce/build/dce1.0.1/src/directory/cds/cdsbrowser/cds_display_outline.c:4146: warning: `value' may be used uninitialized in this function
/project/dce/build/dce1.0.1/src/directory/cds/cdsbrowser/cds_structure.c:1584: warning: `current_number' may be used uninitialized in this function
/project/dce/build/dce1.0.1/src/directory/cds/cdsbrowser/pane.c:1732: warning: `subdata' may be used uninitialized in this function
/project/dce/build/dce1.0.1/src/directory/cds/cdsbrowser/pane.c:2085: warning: `lastsharedposition' may be used uninitialized in this function
/project/dce/build/dce1.0.1/src/directory/cds/cdsbrowser/pane.c:2749: warning: `cursubdata' may be used uninitialized in this function
/project/dce/build/dce1.0.1/src/directory/cds/cdsbrowser/pane.c:2750: warning: `cursubwidget' may be used uninitialized in this function
/project/dce/build/dce1.0.1/src/directory/cds/cdsbrowser/pane.c:529: warning: `which' may be used uninitialized in this function
/project/dce/build/dce1.0.1/src/directory/cds/child/clerk_find_ch.c:82: warning: `set_p' may be used uninitialized in this function
/project/dce/build/dce1.0.1/src/directory/cds/child/clerk_init_cle.c:227: warning: `end_p' may be used uninitialized in this function
/project/dce/build/dce1.0.1/src/directory/cds/child/clerk_tree_walk.c:120: warning: `status' may be used uninitialized in this function
/project/dce/build/dce1.0.1/src/directory/cds/child/clerkcreatedirectory.c:201: warning: `sm_p' may be used uninitialized in this function
/project/dce/build/dce1.0.1/src/directory/cds/child/clerkreadattribute.c:509: warning: `out_p' may be used uninitialized in this function
/project/dce/build/dce1.0.1/src/directory/cds/control/dnscp_credir.c:533: warning: `master_ch' may be used uninitialized in this function
/project/dce/build/dce1.0.1/src/directory/cds/control/emit_ref_hdr.c:171: warning: `hp' may be used uninitialized in this function
/project/dce/build/dce1.0.1/src/directory/cds/control/emit_tower_lines.c:50: warning: `status2' may be used uninitialized in this function
/project/dce/build/dce1.0.1/src/directory/cds/control/format_tower.c:154: warning: `id' may be used uninitialized in this function
/project/dce/build/dce1.0.1/src/directory/cds/control/format_utcabs_for_print.c:54: warning: `len' may be used uninitialized in this function
/project/dce/build/dce1.0.1/src/directory/cds/control/get_command.c:128: warning: `status' may be used uninitialized in this function
/project/dce/build/dce1.0.1/src/directory/cds/control/get_command.c:132: warning: `oldhandler' may be used uninitialized in this function
/project/dce/build/dce1.0.1/src/directory/cds/control/move_squeeze_name.c:47: warning: `endp' may be used uninitialized in this function
/project/dce/build/dce1.0.1/src/directory/cds/control/msgfnd.c:142: warning: `key_end' may be used uninitialized in this function
/project/dce/build/dce1.0.1/src/directory/cds/control/msgget.c:215: warning: `key_end' may be used uninitialized in this function
/project/dce/build/dce1.0.1/src/directory/cds/control/msgget.c:221: warning: `found' may be used uninitialized in this function
/project/dce/build/dce1.0.1/src/directory/cds/control/op_list.c:803: warning: `emit_line_status' may be used uninitialized in this function
/project/dce/build/dce1.0.1/src/directory/cds/control/startup_file.c:58: warning: `spec' may be used uninitialized in this function
/project/dce/build/dce1.0.1/src/directory/cds/control/visit_cds.c:355: warning: `attrcode' may be used uninitialized in this function
/project/dce/build/dce1.0.1/src/directory/cds/control/visit_cds.c:733: warning: `status' may be used uninitialized in this function
/project/dce/build/dce1.0.1/src/directory/cds/control/visit_cds.c:741: warning: `kindofenum' may be used uninitialized in this function
/project/dce/build/dce1.0.1/src/directory/cds/gda/gda_bind.c:1447: warning: `type' may be used uninitialized in this function
/project/dce/build/dce1.0.1/src/directory/cds/gda/gda_bind.c:2598: warning: `cp' may be used uninitialized in this function
/project/dce/build/dce1.0.1/src/directory/cds/gda/gda_bind.c:2605: warning: `n' may be used uninitialized in this function
/project/dce/build/dce1.0.1/src/directory/cds/gda/gda_bind.c:2606: warning: `status' may be used uninitialized in this function
/project/dce/build/dce1.0.1/src/directory/cds/gda/gda_bind.c:2608: warning: `anslen' may be used uninitialized in this function
/project/dce/build/dce1.0.1/src/directory/cds/gda/gda_bind.c:2831: warning: `answ' may be used uninitialized in this function
/project/dce/build/dce1.0.1/src/directory/cds/gda/gda_bind.c:2842: warning: `num_memslots' may be used uninitialized in this function
/project/dce/build/dce1.0.1/src/directory/cds/gda/gda_bind.c:2843: warning: `curr_memslot' may be used uninitialized in this function
/project/dce/build/dce1.0.1/src/directory/cds/gda/gda_bind.c:437: warning: `rr_head' may be used uninitialized in this function
/project/dce/build/dce1.0.1/src/directory/cds/gda/gda_bind.c:440: warning: `class' may be used uninitialized in this function
/project/dce/build/dce1.0.1/src/directory/cds/gda/gda_bind.c:442: warning: `dlen' may be used uninitialized in this function
/project/dce/build/dce1.0.1/src/directory/cds/gda/gda_bind.c:820: warning: `looper' may be used uninitialized in this function
/project/dce/build/dce1.0.1/src/directory/cds/gda/gda_clerk.c:247: warning: `status' may be used uninitialized in this function
/project/dce/build/dce1.0.1/src/directory/cds/gda/gda_list.c:1423: warning: `status' may be used uninitialized in this function
/project/dce/build/dce1.0.1/src/directory/cds/gda/gda_list.c:176: warning: `status' may be used uninitialized in this function
/project/dce/build/dce1.0.1/src/directory/cds/gda/gda_rpcint.c:1334: warning: `answ' may be used uninitialized in this function
/project/dce/build/dce1.0.1/src/directory/cds/gda/gda_rpcint.c:1371: warning: `answ' may be used uninitialized in this function
/project/dce/build/dce1.0.1/src/directory/cds/gda/gda_rpcint.c:1440: warning: `answ' may be used uninitialized in this function
/project/dce/build/dce1.0.1/src/directory/cds/gda/gda_rpcint.c:1513: warning: `answ' may be used uninitialized in this function
/project/dce/build/dce1.0.1/src/directory/cds/gda/gda_rpcint.c:1545: warning: `answ' may be used uninitialized in this function
/project/dce/build/dce1.0.1/src/directory/cds/gda/gda_update_parent.c:143: warning: `rp_p' may be used uninitialized in this function
/project/dce/build/dce1.0.1/src/directory/cds/library/cdsstrtosimple.c:117: warning: `attr' may be used uninitialized in this function
/project/dce/build/dce1.0.1/src/directory/cds/library/dnscvtobjid.c:835: warning: `p' may be used uninitialized in this function
/project/dce/build/dce1.0.1/src/directory/cds/library/dnsgather.c:83: warning: `end_p' may be used uninitialized in this function
/project/dce/build/dce1.0.1/src/directory/cds/library/dnshandleattrmbr.c:153: warning: `status' may be used uninitialized in this function
/project/dce/build/dce1.0.1/src/directory/cds/library/dnsmalloc.c:414: warning: `fragment_count' may be used uninitialized in this function
/project/dce/build/dce1.0.1/src/directory/cds/library/dnsmalloc.c:415: warning: `fragment_total' may be used uninitialized in this function
/project/dce/build/dce1.0.1/src/directory/cds/library/dnsmalloc.c:615: warning: `sc_list' may be used uninitialized in this function
/project/dce/build/dce1.0.1/src/directory/cds/library/dnsmalloc.c:618: warning: `sc_element_size' may be used uninitialized in this function
/project/dce/build/dce1.0.1/src/directory/cds/library/dnsmalloc.c:619: warning: `sc_allocation' may be used uninitialized in this function
/project/dce/build/dce1.0.1/src/directory/cds/library/dnsmalloc.c:721: warning: `element_size' may be used uninitialized in this function
/project/dce/build/dce1.0.1/src/directory/cds/library/dnsnewepoch.c:149: warning: `ucp_setd' may be used uninitialized in this function
/project/dce/build/dce1.0.1/src/directory/cds/library/dnsnewepoch.c:149: warning: `ucp_seto' may be used uninitialized in this function
/project/dce/build/dce1.0.1/src/directory/cds/library/dnsnewepoch.c:165: warning: `ucp_setd' may be used uninitialized in this function
/project/dce/build/dce1.0.1/src/directory/cds/library/dnsnewepoch.c:165: warning: `ucp_seto' may be used uninitialized in this function
/project/dce/build/dce1.0.1/src/directory/cds/library/dnsread.c:781: warning: `Flags_p' may be used uninitialized in this function
/project/dce/build/dce1.0.1/src/directory/cds/library/dnsread.c:782: warning: `addr_p' may be used uninitialized in this function
/project/dce/build/dce1.0.1/src/directory/cds/library/dnsread.c:783: warning: `resp_cnt' may be used uninitialized in this function
/project/dce/build/dce1.0.1/src/directory/cds/library/dnsresolvename.c:66: warning: `orname' may be used uninitialized in this function
/project/dce/build/dce1.0.1/src/directory/cds/library/dnsresolvename.c:68: warning: `orlen' may be used uninitialized in this function
/project/dce/build/dce1.0.1/src/directory/cds/library/dnsscatter.c:147: warning: `fsnm_p' may be used uninitialized in this function
/project/dce/build/dce1.0.1/src/directory/cds/library/tower_lib.c:280: warning: `found' may be used uninitialized in this function
/project/dce/build/dce1.0.1/src/directory/cds/library/triggers_lib.c:184: warning: `curr_trigger' may be used uninitialized in this function
/project/dce/build/dce1.0.1/src/directory/cds/library/triggers_lib.c:426: warning: `dtype' may be used uninitialized in this function
/project/dce/build/dce1.0.1/src/directory/cds/library/triggers_lib.c:428: warning: `fire_limit' may be used uninitialized in this function
/project/dce/build/dce1.0.1/src/directory/cds/library/triggers_lib.c:429: warning: `fire_delay' may be used uninitialized in this function
/project/dce/build/dce1.0.1/src/directory/cds/library/triggers_lib.c:430: warning: `fire_probability' may be used uninitialized in this function
/project/dce/build/dce1.0.1/src/directory/cds/server/back_collect.c:247: warning: `status' may be used uninitialized in this function
/project/dce/build/dce1.0.1/src/directory/cds/server/back_copy_updates.c:157: warning: `element_p' may be used uninitialized in this function
/project/dce/build/dce1.0.1/src/directory/cds/server/back_copy_updates.c:294: warning: `status' may be used uninitialized in this function
/project/dce/build/dce1.0.1/src/directory/cds/server/back_parentpointer.c:326: warning: `member_p' may be used uninitialized in this function
/project/dce/build/dce1.0.1/src/directory/cds/server/back_replicas.c:164: warning: `towerset_p' may be used uninitialized in this function
/project/dce/build/dce1.0.1/src/directory/cds/server/back_skulk.c:1079: warning: `status' may be used uninitialized in this function
/project/dce/build/dce1.0.1/src/directory/cds/server/back_skulk.c:494: warning: `ts_p' may be used uninitialized in this function
/project/dce/build/dce1.0.1/src/directory/cds/server/back_spread.c:130: warning: `replica_p' may be used uninitialized in this function
/project/dce/build/dce1.0.1/src/directory/cds/server/back_spread.c:133: warning: `replica_len' may be used uninitialized in this function
/project/dce/build/dce1.0.1/src/directory/cds/server/cds_dacl.c:1052: warning: `index' may be used uninitialized in this function
/project/dce/build/dce1.0.1/src/directory/cds/server/cds_dacl.c:929: warning: `index' may be used uninitialized in this function
/project/dce/build/dce1.0.1/src/directory/cds/server/db_btree.c:1187: warning: `split1_size' may be used uninitialized in this function
/project/dce/build/dce1.0.1/src/directory/cds/server/db_btree.c:1563: warning: `newbkt_p' may be used uninitialized in this function
/project/dce/build/dce1.0.1/src/directory/cds/server/db_common.c:1133: warning: `status' may be used uninitialized in this function
/project/dce/build/dce1.0.1/src/directory/cds/server/db_common.c:1388: warning: `status' may be used uninitialized in this function
/project/dce/build/dce1.0.1/src/directory/cds/server/db_common.c:1451: warning: `status' may be used uninitialized in this function
/project/dce/build/dce1.0.1/src/directory/cds/server/db_compression.c:543: warning: `status' may be used uninitialized in this function
/project/dce/build/dce1.0.1/src/directory/cds/server/db_tlog.c:375: warning: `status' may be used uninitialized in this function
/project/dce/build/dce1.0.1/src/directory/cds/server/dns_service_ncl.c:376: warning: `set_member_p' may be used uninitialized in this function
/project/dce/build/dce1.0.1/src/directory/cds/server/dump_files.c:123: warning: `sequence_number' may be used uninitialized in this function
/project/dce/build/dce1.0.1/src/directory/cds/server/names_lib.c:562: warning: `bits' may be used uninitialized in this function
/project/dce/build/dce1.0.1/src/directory/cds/server/sets_lib.c:903: warning: `value_p' may be used uninitialized in this function
/project/dce/build/dce1.0.1/src/directory/cds/server/ta_adver.c:434: warning: `alt_p' may be used uninitialized in this function
/project/dce/build/dce1.0.1/src/directory/cds/server/ta_create.c:1755: warning: `parent_p' may be used uninitialized in this function
/project/dce/build/dce1.0.1/src/directory/cds/server/ta_create.c:2004: warning: `update_p' may be used uninitialized in this function
/project/dce/build/dce1.0.1/src/directory/cds/server/ta_epoch.c:131: warning: `status' may be used uninitialized in this function
/project/dce/build/dce1.0.1/src/directory/cds/server/ta_lookup.c:281: warning: `allowed' may be used uninitialized in this function
/project/dce/build/dce1.0.1/src/directory/cds/server/unix_net.c:1377: warning: `set_p' may be used uninitialized in this function

[3/19/92 public]
Digital is working on this bug now.

[4/13/92 public]
Changed to enhancement.



CR Number                     : 2112
Defect or Enhancement?        : enh
CR in Code, Doc, or Test?     : code
Inter-dependent CRs           : 
Project Name                  : dce
H/W Ref Platform              : pmax
S/W Ref Platform              : osf1
Component Name                : cds
Subcomponent Name             : 
Short Description             : cds compilation warnings
Reported Date                 : 2/19/92
Found in Baseline             : 1.0.1
Found Date                    : 2/19/92
Severity                      : C
Priority                      : 2
Status                        : open
Duplicate Of                  : 
Fix By Baseline               : 1.2
Fixed In Baseline             : 
Affected File(s)              : 
Diff supplied by              : 
Diff release                  : 
Sensitivity                   : public

[2/19/92 public]
Warnings produced by gcc -W -O that may indicate problems with variables
and longjmps.  These may be benign but should be looked at.

/project/dce/build/dce1.0.1/src/directory/cds/child/clerk_client.c:364: warning: variable `_XXX_completed' may be clobbered by `longjmp'
/project/dce/build/dce1.0.1/src/directory/cds/child/clerk_client.c:384: warning: variable `_XXX_completed' may be clobbered by `longjmp'
/project/dce/build/dce1.0.1/src/directory/cds/child/clerk_listener.c:193: warning: variable `_XXX_completed' may be clobbered by `longjmp'
/project/dce/build/dce1.0.1/src/directory/cds/control/get_command.c:128: warning: variable `status' may be clobbered by `longjmp'
/project/dce/build/dce1.0.1/src/directory/cds/control/get_command.c:130: warning: variable `prompt' may be clobbered by `longjmp'
/project/dce/build/dce1.0.1/src/directory/cds/control/get_command.c:131: warning: variable `trying' may be clobbered by `longjmp'
/project/dce/build/dce1.0.1/src/directory/cds/library/dnsread.c:1104: warning: variable `_XXX_completed' may be clobbered by `longjmp'
/project/dce/build/dce1.0.1/src/directory/cds/library/dnsread.c:672: warning: variable `_XXX_completed' may be clobbered by `longjmp'
/project/dce/build/dce1.0.1/src/directory/cds/library/dnsread.c:677: warning: variable `_XXX_completed' may be clobbered by `longjmp'
/project/dce/build/dce1.0.1/src/directory/cds/library/dnsread.c:713: warning: variable `_XXX_completed' may be clobbered by `longjmp'
/project/dce/build/dce1.0.1/src/directory/cds/library/dnsread.c:781: warning: variable `Flags_p' may be clobbered by `longjmp'
/project/dce/build/dce1.0.1/src/directory/cds/library/dnsread.c:782: warning: variable `addr_p' may be clobbered by `longjmp'
/project/dce/build/dce1.0.1/src/directory/cds/library/dnsread.c:783: warning: variable `resp_cnt' may be clobbered by `longjmp'
/project/dce/build/dce1.0.1/src/directory/cds/library/dnsread.c:785: warning: variable `status' may be clobbered by `longjmp'
/project/dce/build/dce1.0.1/src/directory/cds/library/dnsread.c:805: warning: variable `_XXX_completed' may be clobbered by `longjmp'
/project/dce/build/dce1.0.1/src/directory/cds/library/dnssend.c:244: warning: variable `_XXX_completed' may be clobbered by `longjmp'
/project/dce/build/dce1.0.1/src/directory/cds/server/back_ground.c:1179: warning: variable `_XXX_completed' may be clobbered by `longjmp'
/project/dce/build/dce1.0.1/src/directory/cds/server/unix_stubs.c:1003: warning: variable `status' may be clobbered by `longjmp'
/project/dce/build/dce1.0.1/src/directory/cds/server/unix_stubs.c:1010: warning: variable `_XXX_completed' may be clobbered by `longjmp'
/project/dce/build/dce1.0.1/src/directory/cds/server/unix_stubs.c:1094: warning: variable `chName_p' may be clobbered by `longjmp'
/project/dce/build/dce1.0.1/src/directory/cds/server/unix_stubs.c:1097: warning: variable `status' may be clobbered by `longjmp'
/project/dce/build/dce1.0.1/src/directory/cds/server/unix_stubs.c:1105: warning: variable `_XXX_completed' may be clobbered by `longjmp'
/project/dce/build/dce1.0.1/src/directory/cds/server/unix_stubs.c:1143: warning: variable `chName_p' may be clobbered by `longjmp'
/project/dce/build/dce1.0.1/src/directory/cds/server/unix_stubs.c:1146: warning: variable `status' may be clobbered by `longjmp'
/project/dce/build/dce1.0.1/src/directory/cds/server/unix_stubs.c:1166: warning: variable `_XXX_completed' may be clobbered by `longjmp'
/project/dce/build/dce1.0.1/src/directory/cds/server/unix_stubs.c:1266: warning: variable `chName_p' may be clobbered by `longjmp'
/project/dce/build/dce1.0.1/src/directory/cds/server/unix_stubs.c:1269: warning: variable `status' may be clobbered by `longjmp'
/project/dce/build/dce1.0.1/src/directory/cds/server/unix_stubs.c:1276: warning: variable `_XXX_completed' may be clobbered by `longjmp'
/project/dce/build/dce1.0.1/src/directory/cds/server/unix_stubs.c:1319: warning: variable `status' may be clobbered by `longjmp'
/project/dce/build/dce1.0.1/src/directory/cds/server/unix_stubs.c:1330: warning: variable `_XXX_completed' may be clobbered by `longjmp'
/project/dce/build/dce1.0.1/src/directory/cds/server/unix_stubs.c:434: warning: variable `status' may be clobbered by `longjmp'
/project/dce/build/dce1.0.1/src/directory/cds/server/unix_stubs.c:439: warning: variable `_XXX_completed' may be clobbered by `longjmp'
/project/dce/build/dce1.0.1/src/directory/cds/server/unix_stubs.c:477: warning: variable `status' may be clobbered by `longjmp'
/project/dce/build/dce1.0.1/src/directory/cds/server/unix_stubs.c:484: warning: variable `_XXX_completed' may be clobbered by `longjmp'
/project/dce/build/dce1.0.1/src/directory/cds/server/unix_stubs.c:530: warning: variable `status' may be clobbered by `longjmp'
/project/dce/build/dce1.0.1/src/directory/cds/server/unix_stubs.c:538: warning: variable `_XXX_completed' may be clobbered by `longjmp'
/project/dce/build/dce1.0.1/src/directory/cds/server/unix_stubs.c:576: warning: variable `status' may be clobbered by `longjmp'
/project/dce/build/dce1.0.1/src/directory/cds/server/unix_stubs.c:581: warning: variable `_XXX_completed' may be clobbered by `longjmp'
/project/dce/build/dce1.0.1/src/directory/cds/server/unix_stubs.c:607: warning: variable `status' may be clobbered by `longjmp'
/project/dce/build/dce1.0.1/src/directory/cds/server/unix_stubs.c:612: warning: variable `_XXX_completed' may be clobbered by `longjmp'
/project/dce/build/dce1.0.1/src/directory/cds/server/unix_stubs.c:640: warning: variable `status' may be clobbered by `longjmp'
/project/dce/build/dce1.0.1/src/directory/cds/server/unix_stubs.c:645: warning: variable `_XXX_completed' may be clobbered by `longjmp'
/project/dce/build/dce1.0.1/src/directory/cds/server/unix_stubs.c:685: warning: variable `status' may be clobbered by `longjmp'
/project/dce/build/dce1.0.1/src/directory/cds/server/unix_stubs.c:692: warning: variable `_XXX_completed' may be clobbered by `longjmp'
/project/dce/build/dce1.0.1/src/directory/cds/server/unix_stubs.c:769: warning: variable `status' may be clobbered by `longjmp'
/project/dce/build/dce1.0.1/src/directory/cds/server/unix_stubs.c:776: warning: variable `_XXX_completed' may be clobbered by `longjmp'
/project/dce/build/dce1.0.1/src/directory/cds/server/unix_stubs.c:843: warning: variable `status' may be clobbered by `longjmp'
/project/dce/build/dce1.0.1/src/directory/cds/server/unix_stubs.c:850: warning: variable `_XXX_completed' may be clobbered by `longjmp'
/project/dce/build/dce1.0.1/src/directory/cds/server/unix_stubs.c:895: warning: variable `status' may be clobbered by `longjmp'
/project/dce/build/dce1.0.1/src/directory/cds/server/unix_stubs.c:908: warning: variable `_XXX_completed' may be clobbered by `longjmp'
/project/dce/build/dce1.0.1/src/directory/cds/server/unix_stubs.c:955: warning: variable `status' may be clobbered by `longjmp'
/project/dce/build/dce1.0.1/src/directory/cds/server/unix_stubs.c:963: warning: variable `_XXX_completed' may be clobbered by `longjmp'

[3/19/92 public]
Digital is working on this bug now.

[4/13/92 public]
changed to enhancement



CR Number                     : 2103
Defect or Enhancement?        : enh
CR in Code, Doc, or Test?     : code
Inter-dependent CRs           : 
Project Name                  : dce
H/W Ref Platform              : pmax
S/W Ref Platform              : osf1
Component Name                : cds
Subcomponent Name             : 
Short Description             : cds functions and bad returns
Reported Date                 : 2/19/92
Found in Baseline             : 1.0.1
Found Date                    : 2/19/92
Severity                      : C
Priority                      : 2
Status                        : open
Duplicate Of                  : 
Fix By Baseline               : 1.2
Fixed In Baseline             : 
Affected File(s)              : 
Diff supplied by              : 
Diff release                  : 
Sensitivity                   : public

[2/19/92 public]
gcc -w -O generated the following errors in cds code.  
They refer to functions that may return either with or
without a value which is not a good thing.  Below is the
error message as generated by gcc and the filename, line number,
and name of the offending function.

"warning: this function may return with or without a value"

src/directory/cds/cdsbrowser/cds_browsersource.c:283:SourceIsNodeParent 
src/directory/cds/control/op_list.c:697:close_one_file
src/directory/cds/gda/gda_bind.c:2589:split_fullname
src/directory/cds/gda/gda_main.c:1061:read_debug_commands
src/directory/cds/library/cdsstrtosimple.c:67:combine 
src/directory/cds/library/deb_event_mgr.c:1158:deb_Performance 
src/directory/cds/library/dns_record.c:287:pass_AttributeContents 
src/directory/cds/library/triggers_lib.c:150:value_size 
src/directory/cds/server/db_btree.c:494:split_points 
src/directory/cds/server/db_diags.c:595:db_diag_dump_dir_hash_table
src/directory/cds/server/dns_service_rpc.c:1605:srv_disable_server_thread 
src/directory/cds/server/dump_navigator.c:721:walk_offset 
src/directory/cds/server/server_main.c:1037:sec_init_thread

[3/19/92 public]
Digital is working on this bug now.

[4/13/92 public]
Changed to enhancement.



CR Number                     : 1816
Defect or Enhancement?        : enh
CR in Code, Doc, or Test?     : test
Inter-dependent CRs           : 
Project Name                  : dce
H/W Ref Platform              : other
S/W Ref Platform              : other
Component Name                : cds
Subcomponent Name             : 
Short Description             : dcecdnam: Add attribute lookups?
Reported Date                 : 01/09/92
Found in Baseline             : 1.0
Found Date                    : 
Severity                      : C
Priority                      : 2
Status                        : open
Duplicate Of                  : 
Fix By Baseline               : 1.1
Fixed In Baseline             : 
Affected File(s)              : 
Sensitivity                   : public

[01/29/92 public]

Orbit reference number 4481
product       dce_osf
phaseFound    development

History:
lastUpdate    92/01/09 13:37:13
assignDate    92/01/09 13:37:13





    addDate              action          userLogin (userName)
    -------------------- --------------- ----------------------------------
    92/01/09 13:37:15    create          kwalker (Ken Walker)

[01/09/92 public]
The System Test dcecdnam was originally designed to perform lookups based on
attribute values.  (Example: "find all objects where attribute GROUP == 8".)
There is some code in to support this, but most of it is skipped over during
compilation or execution.

If this is feasible (i.e.: can be done in both CDS and GDS by both XDS and
shell-level commands), this capability should be added.

[4/6/92 public]
Changed from defect to enhancement.



