CR Number                     : 13591
Defect or Enhancement?        : def
CR in Code, Doc, or Test?     : code
Inter-dependent CRs           : 
Project Name                  : dce
H/W Ref Platform              : all
S/W Ref Platform              : all
Component Name                : utils
Subcomponent Name             : aclmgr
Short Description             : cdsd dies on acl show command
Reported Date                 : 8/13/96
Found in Baseline             : 1.2.2
Found Date                    : 8/13/96
Severity                      : A
Priority                      : 1
Status                        : closed
Duplicate Of                  : 
Fix By Baseline               : 1.2
Fixed In Baseline             : 1.2.2
Affected File(s)              : src/dce/utils/acldb/acleval.c
Diff supplied by              : provider
Diff release                  : 1.2.2
Sensitivity                   : public

[8/13/96 public]

I have been able to crash cdsd reliably under latest OSF/DCE 1.2.2
bits with the following commands.

dcecp> login /.../jrr_williwaw/cell_admin -p -dce-
dcecp> acl show /.:/sec/principal/jrr

/.../jrr_williwaw is a valid remote cell.
/.:/sec/principal is a valid principal in the local cell.

Running just these two commands after restarting cdsd will crash it.
Some of the attemps have returned bogus stack traces. The most valid
looking one follows. Note that all traces have uuid_equal as the top
function.

>t
 0 uuid_equal@libdce + 0x00000008 (hp-ux export stub)
 1 uuid_equal@libdce + 0x00000204 (0x404c8ff8, 0x40442030, 0x4032e0d8,
0x98c6a18)
 2 dce_acl__permset_alg@libdce + 0x00000c18 (0x40110600, 0x40182d6c,
0x40111268, 0x40182d80)
 3 dce_acl_inq_permset_for_creds@ + 0x000001a0 (0x401106b8, 0x13245768,
0x40111268, 0x40182d80)
 4 dpe_acl_mgr_get_access@libdce + 0x00000250 (0x40111268, 0x4032d3cc,
0x4032e0e4, 0x4032e0d8)
 5 security_dacl + 0x000000d4 (0x4032d328, 0x401f3ce4, 0x1, 0x1)
 6 security_check + 0x00000328 (0x4032d328, 0x401f3ca0, 0xd, 0x2)
 7 ta_read_att + 0x000001bc (0x4032d328, 0x404bc030, 0x2, 0x1)
 8 cds_ReadAttribute + 0x000001ec (0x401109d8, 0x4032a878, 0x4032a808,
0x4032b0ae)
 9 op21_ssr + 0x00000218 (0x401109d8, 0x40111418, 0x4032a51c, 0x40111148)
10 rpc__cn_call_executor@libdce + 0x000008dc (0x40111418, 0, 0, 0)
11 cthread_call_executor@libdce + 0x000002fc (0x400da160, 0x7af4985c,
0x40049b30, 0x14)
12 cma__thread_base@libdce + 0x0000025c (0x40049b30, 0, 0, 0)
13 cma__thread_start1@libdce + 0x00000050 (0x40049b30, 0, 0, 0)
14 cma__thread_start0@libdce + 0x0000000c (0x40049b30, 0, 0, 0)

Both machines are running OSF/DCE 1.2.2 built on 8/8. Both machines are HP
700 series machines running HP-UX 9.05

[8/15/96 public]

The problem was in the acl library. A loop test was backwards causing an
infiniite loop reading off into space. Diff follows.

*** acleval.c@@/main/DCE_1.2.2/1        Thu Jul 25 12:18:45 1996
--- acleval.c   Tue Aug 13 21:55:43 1996
***************
*** 651,657 ****
                        if (!uuid_equal(&fgs->realm.uuid, &realm->uuid,
st))
                            continue;
                        gp = fgs->groups;
!                       for (fg_i=fgs->num_groups; --fg_i<=0; gp++) {
                            if (uuid_equal(&gp->uuid, gr_uuid, st)) {
                                one_group_found = TRUE;
                                tmp1 = MASKIT(ep, mask_perms);
--- 651,657 ----
                        if (!uuid_equal(&fgs->realm.uuid, &realm->uuid,
st))
                            continue;
                        gp = fgs->groups;
!                       for (fg_i=fgs->num_groups; --fg_i>=0; gp++) {
                            if (uuid_equal(&gp->uuid, gr_uuid, st)) {
                                one_group_found = TRUE;
                                tmp1 = MASKIT(ep, mask_perms);



CR Number                     : 13212
Defect or Enhancement?        : def
CR in Code, Doc, or Test?     : code
Inter-dependent CRs           : 
Project Name                  : dce
H/W Ref Platform              : all
S/W Ref Platform              : all
Component Name                : utils
Subcomponent Name             : dce_attr_XXX
Short Description             : DIFF: IDL/header not exported
Reported Date                 : 11/28/95
Found in Baseline             : 1.1
Found Date                    : 11/28/95
Severity                      : A
Priority                      : 2
Status                        : closed
Duplicate Of                  : 
Fix By Baseline               : 1.1maint,1.2
Fixed In Baseline             : 1.2.2
Affected File(s)              : src/dce/utils/attr/Makefile
Diff supplied by              : provider
Diff release                  : 1.2.2
Sensitivity                   : public

[11/28/95 public]

dce_attr_base.idl, dce_attr_sch.idl and the generated header files
dce_attr_base.h, dce_attr_sch.h should be installed in include/dce
and are not because of a Makefile bug.  As a result, DCE 1.1 programmers
cannot use the dce_attr_XXX API.

[7/18/96 public]
Submitted to 1.2.2 locally, will be part of next drop.

*** /vob/dce/src/dce/utils/attr/Makefile@@/main/4       Tue Apr  2 20:51:16 1996

--- /vob/dce/src/dce/utils/attr/Makefile@@/main/DCE_1.2.2/1     Wed Jul 17 17:01
:52 1996
***************
*** 7,12 ****
--- 7,19 ----
  #
  # HISTORY
  # $Log:	c013212,v $
# Revision 1.3  96/09/03  11:47:34  root
# changed fields: Status  
# 
# Revision 1.2  96/07/18  14:04:07  root
# changed fields: Short Description  Status  Fixed In Baseline  Diff supplied by  Diff release  Responsible Engr.  Resp. Engrs Company   new/changed/deleted note(s) [psn 7/18/96 public]
# 
+ # Revision /main/DCE_1.2.2/1  1996/07/17  21:01 UTC  psn
+ #     Add IMODE.
+ #     [1996/07/17  18:45 UTC  psn  /main/psn_bugfix/2]
+ #
+ #     Fix OT 13212.
+ #     [1996/07/17  17:57 UTC  psn  /main/psn_bugfix/1]
+ #
  # Revision 1.1.4.2  1996/03/09  23:10:45  marty
  #     Update OSF copyright year
  #     [1996/03/09  22:28:28  marty]
***************
*** 38,43 ****
--- 45,55 ----
  #CFLAGS                       = ${${TARGET_MACHINE}_CFLAGS}
  CFLAGS                        += ${STRICT_COMPILER_WARNINGS}
  INCFLAGS              = -I.
+
+ # Files to install and their locations
+ ILIST   = ${IDLFILES} ${IDLDATAFILES}
+ IDIR    = /share/include/dce/
+ IMODE   = 444

  .if exists(${TARGET_MACHINE}/machdep.mk)
  .include "${TARGET_MACHINE}/machdep.mk"



CR Number                     : 13047
Defect or Enhancement?        : def
CR in Code, Doc, or Test?     : doc
Inter-dependent CRs           : 
Project Name                  : dce
H/W Ref Platform              : all
S/W Ref Platform              : all
Component Name                : utils
Subcomponent Name             : app_ref
Short Description             : DCE_SVC_LOG doesn't work as advertised.
Reported Date                 : 8/21/95
Found in Baseline             : 1.1
Found Date                    : 8/21/95
Severity                      : A
Priority                      : 1
Status                        : closed
Duplicate Of                  : 
Fix By Baseline               : 1.2
Fixed In Baseline             : 1.2.1
Affected File(s)              : svcprintf.c
Sensitivity                   : public

[8/21/95 public]

DCE_SVC_LOG only works with BINFILE output form. A quick look at the code
reveals why (from dce_svc_bin_log in svcprintf.c the function bound to the
DCE_SVC_LOG macro):

	default:
	    dce_assert(handle, "Unknown debug route created" == NULL);
	    /* FALLTHROUGH */
	case route_stdout:
	case route_stderr:
	case route_textfile:
	case route_discard:
	case route_default:
	case route_goesto:
	    break;
	case route_binfile:
	    dce_svc__binprint(r->data.binfile.fd, &prolog, args);
	    break;
	}


This should probably be something like:

	switch (r->route) {
	default:
	    dce_assert(handle, "Unknown debug route created" == NULL);
	    /* FALLTHROUGH */
	case route_discard:
	case route_default:
	    break;
	case route_binfile:
	    dce_svc__binprint(r->data.binfile.fd, &prolog, args);
	    break;
	case route_stdout:
	    dce_svc__vfprintf(stdout, &prolog, TRUE, args);
	    break;
	case route_stderr:
	    dce_svc__vfprintf(stderr, &prolog, TRUE, args);
	    break;
	case route_textfile:
	    dce_svc__vfprintf(r->data.textfile.f, &prolog, FALSE, args);
	    break;
	case route_goesto:
	    rp = dce_svc__goesto(r->data.goesto.where, &goesto);
	    break;
	}
 
from dce_svc__debug also in svcprintf.c.

[08/21/95 public]
No, it works *exactly* as advertised; from the manpage:
>  DCE_SVC_LOG generates a record in the serviceability binary format,
>  not a conventional serviceability message as such. The complete

[08/21/95 public]

Yes, but this is the only place where that is mentioned:

DCE_SVC_INTRO:

	DCE_SVC_LOG() generates debugging output based on a message
		      defined in an application's sams file

Then, there is the following plain wrong statement in the Dev. Guide (p.
4.34):

	The following call ... would have written this message to
	standard error (because that is the routing specified in
	the sams file), ...

		DCE_SVC_LOG((HEL_S_DEBUG_MESSAGE_1_MSG));

I'm changing this to a doc bug. It's still A1 though. 

BTW why this restriction?

[08/21/95 public]
Okay, it's a doc bug.  DCE_SVC_LOG was added specifically for GDS, which
needed to dump large binary data, but wanted to compile-out the calls.

[1/15/96 public]

Filled in sub-component field. Assigned to myself, as I created the
original document(s).

[3/11/96 public]

Fixed, I believe. I emended the offending passage in the Application
Guide chapter to read as follows:

 The debug serviceability messaging routines are the following:

 DCE_SVC_LOG()

 ---------def,13047,R1.2.1,clarify DCE_SVC_LOG behavior"------------

 Outputs a message specified by the message ID. The main differences
 between using this routine and using dce_svc_printf() to write a message
 are (1) that DCE_SVC_LOG() generates records only in binary format,
 and (2) the macro can be compiled out of the executable by turning off
 debugging.
 ---------def,13047,R1.2.1,clarify DCE_SVC_LOG behavior-------------


However, the DCE_SVC_LOG.3dce manpage plainly states the correct
behavior (in some detail), and it always has. I don't know why this
was missed by the original complainant, but the text seems pretty
clear to me.

[3/29/96 public]

Closed.



CR Number                     : 13031
Defect or Enhancement?        : def
CR in Code, Doc, or Test?     : code
Inter-dependent CRs           : 13580
Project Name                  : dce
H/W Ref Platform              : all
S/W Ref Platform              : all
Component Name                : utils
Subcomponent Name             : acldb
Short Description             : dce_acl_obj_add_obj lacks support to add user_obj or group_obj acl entries.
Reported Date                 : 8/9/95
Found in Baseline             : 1.1
Found Date                    : 8/9/95
Severity                      : A
Priority                      : 1
Status                        : closed
Duplicate Of                  : 
Fix By Baseline               : 1.2
Fixed In Baseline             : 1.2.2
Affected File(s)              : src/dce/utils/acldb/aclconv.c
Diff supplied by              : provider
Diff release                  : 1.2.2
Sensitivity                   : public

[8/9/95 public]

The dce_acl_obj_add_obj_entry lacks support to add a user_obj or group_obj
entry to an acl. I think that it is enough to add the two case statements
corresponding to those entry types in the switch:

*** /project/dce/build/dce1.1/src/dce/utils/acldb/aclconv.c     Fri Jul 15
13:27:05 1994
--- aclconv.c   Wed Aug  9 15:03:03 1995
***************
*** 323,328 ****
--- 323,330 ----
      }
  
      switch (entry_type) {
+     case sec_acl_e_type_user_obj:
+     case sec_acl_e_type_group_obj:
      case sec_acl_e_type_unauthenticated:
      case sec_acl_e_type_any_other:
      case sec_acl_e_type_user_obj_deleg:

[7/25/96 public]
Submitted to 1.2.2. Will be part of next drop:

The original defect complained about missing user_obj & group_obj only. 
I have added mask_obj & other_obj also after getting OK from Rich S @ OSF

*** /vob/dce/src/dce/utils/acldb/aclconv.c@@/main/psn_bugfix/0  Mon Jul 22 14:17
:11 1996
--- /vob/dce/src/dce/utils/acldb/aclconv.c@@/main/psn_bugfix/1  Tue Jul 23 10:33
:39 1996
***************
*** 8,13 ****
--- 8,17 ----
  /*
   * HISTORY
   * $Log:	c013031,v $
# Revision 1.4  96/09/03  11:49:22  root
# changed fields: Status  
# 
# Revision 1.3  96/07/29  12:35:01  root
# changed fields: Inter-dependent CRs  
# 
# Revision 1.2  96/07/25  13:23:59  root
# changed fields: Status  Fixed In Baseline  Affected File(s)  Diff supplied by  Diff release  Responsible Engr.  Resp. Engrs Company   new/changed/deleted note(s) [psn 7/25/96 public]
# 
+  * Revision /main/psn_bugfix/1  1996/07/23  14:34 UTC  psn
+  *    Fix OTs 13031: dce_acl_obj_add_obj lacks support to add user_obj,
+  *    group_obj, mask_obj & other_obj.
+  *
   * Revision 1.1.4.2  1996/02/18  19:19:55  marty
   *    Update OSF copyright years
   *    [1996/02/18  18:05:21  marty]
***************
*** 331,336 ****
--- 335,344 ----
      }

      switch (entry_type) {
+     case sec_acl_e_type_mask_obj:
+     case sec_acl_e_type_user_obj:
+     case sec_acl_e_type_group_obj:
+     case sec_acl_e_type_other_obj:
      case sec_acl_e_type_unauthenticated:
      case sec_acl_e_type_any_other:
      case sec_acl_e_type_user_obj_deleg:



CR Number                     : 12986
Defect or Enhancement?        : enh
CR in Code, Doc, or Test?     : code
Inter-dependent CRs           : 
Project Name                  : dce
H/W Ref Platform              : all
S/W Ref Platform              : all
Component Name                : utils
Subcomponent Name             : 
Short Description             : DIFF: C++ enhancement for dce.h
Reported Date                 : 8/2/95
Found in Baseline             : 1.1
Found Date                    : 8/2/95
Severity                      : B
Priority                      : 1
Status                        : closed
Duplicate Of                  : 
Fix By Baseline               : 1.2
Fixed In Baseline             : 1.2.2
Affected File(s)              : dce.h
Diff supplied by              : provider
Diff release                  : 1.2.2
Sensitivity                   : public

[8/2/95 public]
The header file dce.h defines the token-concatenation macro DCE_CONCAT.
Depending on whether __STDC__ is defined, the macro uses either the
ANSI token-pasting operator ## or the old-style /**/ trick.
C++ compilers don't define __STDC__, and the /**/ trick doesn't
always work, since compilers are allowed to replace comments with whitespace.
Since C++ compilers do support the ## operator, the code that reads:

#if defined(__STDC__)
#  define _DCE_TOKENCONCAT_
#endif
 
should be replaced with:

#if defined(__STDC__) || defined(__cplusplus)
#  define _DCE_TOKENCONCAT_
#endif


As a work-around, you can define _DCE_TOKENCONCAT_ before #including
dce.h (or any file that #includes dce.h), which will force the use of
## instead of /**/.

[01/31/96 public]
This is a trivial change that someone in the core group (more or less
anyone at HP I guess) should do.  It'll make working with XIDL and C++
much easier.  Put in the utils component and raised to B1 from D2

[7/18/96 public]
Submitted to 1.2.2 locally. This will be part of next drop.

*** /vob/dce/src/dce/HP800/dce.h@@/main/8       Tue Apr  2 20:43:47 1996
--- /vob/dce/src/dce/HP800/dce.h@@/main/DCE_1.2.2/1     Wed Jul 17 17:10:56 1996

***************
*** 8,13 ****
--- 8,17 ----
  /*
   * HISTORY
   * $Log:	c012986,v $
# Revision 1.4  96/09/03  11:51:11  root
# changed fields: Status  
# 
# Revision 1.3  96/07/18  14:22:42  root
# changed fields: Short Description  Status  Fixed In Baseline  Diff supplied by  Diff release  Responsible Engr.  Resp. Engrs Company   new/changed/deleted note(s) [psn 7/18/96 public]
# 
+  * Revision /main/DCE_1.2.2/1  1996/07/17  21:10 UTC  psn
+  *    Fix OT 12986.
+  *    [1996/07/17  19:36 UTC  psn  /main/psn_bugfix/1]
+  *
   * Revision 1.1.6.2  1996/02/18  23:32:35  marty
   *    Update OSF copyright years
   *    [1996/02/18  22:20:14  marty]
***************
*** 134,140 ****
   * an ANSI and non-ANSI environment.  Support of non-ANSI environments
   * is not required, but where done, this macro must be used.
   */
! #if defined(__STDC__)
  #  define _DCE_TOKENCONCAT_
  #endif

--- 138,144 ----
   * an ANSI and non-ANSI environment.  Support of non-ANSI environments
   * is not required, but where done, this macro must be used.
   */
! #if defined(__STDC__) || defined(__cplusplus)
  #  define _DCE_TOKENCONCAT_
  #endif

*** /vob/dce/src/dce/RIOS/dce.h@@/main/8        Tue Apr  2 20:44:45 1996
--- /vob/dce/src/dce/RIOS/dce.h@@/main/DCE_1.2.2/1      Wed Jul 17 17:11:53 1996

***************
*** 8,13 ****
--- 8,17 ----
  /*
   * HISTORY
   * $Log:	c012986,v $
# Revision 1.4  96/09/03  11:51:11  root
# changed fields: Status  
# 
# Revision 1.3  96/07/18  14:22:42  root
# changed fields: Short Description  Status  Fixed In Baseline  Diff supplied by  Diff release  Responsible Engr.  Resp. Engrs Company   new/changed/deleted note(s) [psn 7/18/96 public]
# 
+  * Revision /main/DCE_1.2.2/1  1996/07/17  21:11 UTC  psn
+  *    Fix OT 12986.
+  *    [1996/07/17  19:36 UTC  psn  /main/psn_bugfix/1]
+  *
   * Revision 1.1.6.3  1996/02/18  23:32:37  marty
   *    Update OSF copyright years
   *    [1996/02/18  22:20:20  marty]
***************
*** 141,147 ****
   * an ANSI and non-ANSI environment.  Support of non-ANSI environments
   * is not required, but where done, this macro must be used.
   */
! #if defined(__STDC__)
  #  define _DCE_TOKENCONCAT_
  #endif

--- 145,151 ----
   * an ANSI and non-ANSI environment.  Support of non-ANSI environments
   * is not required, but where done, this macro must be used.
   */
! #if defined(__STDC__) || defined(__cplusplus)
  #  define _DCE_TOKENCONCAT_
  #endif



CR Number                     : 12929
Defect or Enhancement?        : def
CR in Code, Doc, or Test?     : code
Inter-dependent CRs           : 
Project Name                  : dce
H/W Ref Platform              : all
S/W Ref Platform              : all
Component Name                : utils
Subcomponent Name             : acldb
Short Description             : DIFF: The acldb library (aclconv.c) uses rpc_sm_client_free instead of rpc_sm_free
Reported Date                 : 6/22/95
Found in Baseline             : 1.1
Found Date                    : 6/22/95
Severity                      : C
Priority                      : 2
Status                        : closed
Duplicate Of                  : 
Fix By Baseline               : 1.2
Fixed In Baseline             : 1.2.2
Affected File(s)              : dce/utils/acldb/aclconv.c,aclimpl.c
Diff supplied by              : provider
Diff release                  : 1.2.2
Sensitivity                   : public

[6/22/95 public]

Customer reported:

Offering and Version:   DCE 1.1
Component (Module):     util

        The memory allocated by rpc_sm_allocate() in
src/dce/utils/acldb/aclconv.c is free'd by rpc_sm_cleint_free.  The
man page for rpc_sm_allocate says you should always use rpc_sm_free()
to free this memory.

I am uncertain if ae->entry_info.tagged_union.foreign_id.realm.name
should be free'd in the manner since I did not see where it gets allocated
(in the stub?), but the others should be changed for sure.

Repeat By:

        Run acldb functional tests on SVR4

Proposed Solution:

Call rpc_sm_free:


*** /animal/build/dce1.1/src/dce/utils/acldb//aclconv.c Mon Dec 12 17:44:04 1994
--- aclconv.c   Wed Apr 19 16:50:09 1995
***************
*** 7,12 ****
--- 7,13 ----
   */
  /*
   * HISTORY
+  * Use rpc_sm_free instead of rpc_sm_client_free.
   * $Log:	c012929,v $
# Revision 1.3  96/09/03  11:56:14  root
# changed fields: Status  
# 
# Revision 1.2  96/07/25  13:28:05  root
# changed fields: Short Description  Status  Fixed In Baseline  Affected File(s)  Diff supplied by  Diff release  Responsible Engr.  Resp. Engrs Company   new/changed/deleted note(s) [psn 7/25/96 public]
# 
# Revision 1.1  95/06/22  17:16:09  root
# new CR
# 
   * Revision 2.1  1994/12/12  22:41:57  devrcs
   * OSF DCE 1.1 Source
***************
*** 144,150 ****
        case sec_acl_e_type_for_other_deleg:
            /* in most cases, names are null (uuid's are used only) */
            if (ae->entry_info.tagged_union.id.name)
!               rpc_sm_client_free(ae->entry_info.tagged_union.id.name, st);
            break;

        case sec_acl_e_type_foreign_user:
--- 145,151 ----
        case sec_acl_e_type_for_other_deleg:
            /* in most cases, names are null (uuid's are used only) */
            if (ae->entry_info.tagged_union.id.name)
!               rpc_sm_free(ae->entry_info.tagged_union.id.name, st);
            break;

        case sec_acl_e_type_foreign_user:
***************
*** 154,163 ****
            /* in most cases, names are null (uuid's are used only) */

            if (ae->entry_info.tagged_union.foreign_id.id.name)
!               rpc_sm_client_free(ae->entry_info.tagged_union.foreign_id.id.nam
e,
                                   st);
            if (ae->entry_info.tagged_union.foreign_id.realm.name)
!               rpc_sm_client_free(ae->entry_info.tagged_union.foreign_id.realm.
name, st);
            break;

        default:
--- 155,164 ----
            /* in most cases, names are null (uuid's are used only) */

            if (ae->entry_info.tagged_union.foreign_id.id.name)
!               rpc_sm_free(ae->entry_info.tagged_union.foreign_id.id.name,
                                   st);
            if (ae->entry_info.tagged_union.foreign_id.realm.name)
!               rpc_sm_free(ae->entry_info.tagged_union.foreign_id.realm.name, s
t);
            break;

        default:
***************
*** 166,172 ****
      }

      if (acl->sec_acl_entries)
!       rpc_sm_client_free(acl->sec_acl_entries, st);
      memset(acl, 0, sizeof(sec_acl_t));
      return ;
  }
--- 167,173 ----
      }

      if (acl->sec_acl_entries)
!       rpc_sm_free(acl->sec_acl_entries, st);
      memset(acl, 0, sizeof(sec_acl_t));
      return ;
  }
***************
*** 206,212 ****
            *ep++ = *ep2++;
        }

!       rpc_sm_client_free(acl->sec_acl_entries, &st);
        if (st != error_status_ok)
            return NULL;
        acl->sec_acl_entries = e;
--- 207,213 ----
            *ep++ = *ep2++;
        }

!       rpc_sm_free(acl->sec_acl_entries, &st);
        if (st != error_status_ok)
            return NULL;
        acl->sec_acl_entries = e;

[7/25/96 public]
Fix submitted to 1.2.2, will be part of next drop. Also fixed the same
problem in aclimpl.c that was missed by original defect report.

*** /vob/dce/src/dce/utils/acldb/aclconv.c@@/main/psn_bugfix/2  Tue Jul 23 11:32
:29 1996
--- /vob/dce/src/dce/utils/acldb/aclconv.c@@/main/psn_bugfix/3  Tue Jul 23 11:58
:20 1996
***************
*** 8,13 ****
--- 8,17 ----
  /*
   * HISTORY
   * $Log:	c012929,v $
# Revision 1.3  96/09/03  11:56:14  root
# changed fields: Status  
# 
# Revision 1.2  96/07/25  13:28:05  root
# changed fields: Short Description  Status  Fixed In Baseline  Affected File(s)  Diff supplied by  Diff release  Responsible Engr.  Resp. Engrs Company   new/changed/deleted note(s) [psn 7/25/96 public]
# 
+  * Revision /main/psn_bugfix/3  1996/07/23  15:58 UTC  psn
+  *    Fix OTs 12929: The acldb library uses rpc_sm_client_free instead of
+  *    rpc_sm_free.
+  *
   * Revision /main/psn_bugfix/2  1996/07/23  15:39 UTC  psn
   *    Fix OTs 13547: dce_acl_copy_acl() handles foreign_id incorrectly
   *
***************
*** 156,162 ****
        case sec_acl_e_type_for_other_deleg:
            /* in most cases, names are null (uuid's are used only) */
            if (ae->entry_info.tagged_union.id.name)
!               rpc_sm_client_free(ae->entry_info.tagged_union.id.name, st);
            break;

        case sec_acl_e_type_foreign_user:
--- 160,166 ----
        case sec_acl_e_type_for_other_deleg:
            /* in most cases, names are null (uuid's are used only) */
            if (ae->entry_info.tagged_union.id.name)
!               rpc_sm_free(ae->entry_info.tagged_union.id.name, st);
            break;

        case sec_acl_e_type_foreign_user:
***************
*** 166,175 ****
            /* in most cases, names are null (uuid's are used only) */

            if (ae->entry_info.tagged_union.foreign_id.id.name)
!               rpc_sm_client_free(ae->entry_info.tagged_union.foreign_id.id.nam
e,
!                                  st);
            if (ae->entry_info.tagged_union.foreign_id.realm.name)
!               rpc_sm_client_free(ae->entry_info.tagged_union.foreign_id.realm.
name, st);
            break;

        default:
--- 170,178 ----
            /* in most cases, names are null (uuid's are used only) */

            if (ae->entry_info.tagged_union.foreign_id.id.name)
!               rpc_sm_free(ae->entry_info.tagged_union.foreign_id.id.name, st);
            if (ae->entry_info.tagged_union.foreign_id.realm.name)
!               rpc_sm_free(ae->entry_info.tagged_union.foreign_id.realm.name, s
t);
            break;

        default:
***************
*** 178,184 ****
      }

      if (acl->sec_acl_entries)
!       rpc_sm_client_free(acl->sec_acl_entries, st);
      memset(acl, 0, sizeof(sec_acl_t));
      return ;
  }
--- 181,187 ----
      }

      if (acl->sec_acl_entries)
!       rpc_sm_free(acl->sec_acl_entries, st);
      memset(acl, 0, sizeof(sec_acl_t));
      return ;
  }
***************
*** 218,224 ****
            *ep++ = *ep2++;
        }

!       rpc_sm_client_free(acl->sec_acl_entries, &st);
        if (st != error_status_ok)
            return NULL;
        acl->sec_acl_entries = e;
--- 221,227 ----
            *ep++ = *ep2++;
        }

!       rpc_sm_free(acl->sec_acl_entries, &st);
        if (st != error_status_ok)
            return NULL;
        acl->sec_acl_entries = e;
*** /vob/dce/src/dce/utils/acldb/aclimpl.c@@/main/7     Tue Apr  2 20:46:51 1996
--- /vob/dce/src/dce/utils/acldb/aclimpl.c@@/main/psn_bugfix/1  Tue Jul 23 11:58
:28 1996
***************
*** 8,13 ****
--- 8,17 ----
  /*
   * HISTORY
   * $Log:	c012929,v $
# Revision 1.3  96/09/03  11:56:14  root
# changed fields: Status  
# 
# Revision 1.2  96/07/25  13:28:05  root
# changed fields: Short Description  Status  Fixed In Baseline  Affected File(s)  Diff supplied by  Diff release  Responsible Engr.  Resp. Engrs Company   new/changed/deleted note(s) [psn 7/25/96 public]
# 
+  * Revision /main/psn_bugfix/1  1996/07/23  15:58 UTC  psn
+  *    Fix OTs 12929: The acldb library uses rpc_sm_client_free instead of
+  *    rpc_sm_free.
+  *
   * Revision 1.1.4.2  1996/02/18  19:20:00  marty
   *    Update OSF copyright years
   *    [1996/02/18  18:05:25  marty]
***************
*** 297,303 ****
      }
      dce_acl_copy_acl(&acl, sal->sec_acls[0], st);
      if (*st != error_status_ok) {
!       rpc_sm_client_free(sal, st);
        return;
      }
      sal->num_acls = 1;
--- 301,307 ----
      }
      dce_acl_copy_acl(&acl, sal->sec_acls[0], st);
      if (*st != error_status_ok) {
!       rpc_sm_free(sal, st);
        return;
      }
      sal->num_acls = 1;



CR Number                     : 12826
Defect or Enhancement?        : def
CR in Code, Doc, or Test?     : code
Inter-dependent CRs           : 13572
Project Name                  : dce
H/W Ref Platform              : other
S/W Ref Platform              : other
Component Name                : utils
Subcomponent Name             : sams
Short Description             : DIFF: Sams can't handle field width specifier properly
Reported Date                 : 3/27/95
Found in Baseline             : 1.1
Found Date                    : 3/27/95
Severity                      : C
Priority                      : 2
Status                        : closed
Duplicate Of                  : 
Fix By Baseline               : 1.1
Fixed In Baseline             : 1.2.2, 1.1maint
Affected File(s)              : src/tools/sams/sams.c, admin/tcl_dce/tclBasic.c
Diff supplied by              : provider
Diff release                  : 1.2.2
Sensitivity                   : public

[3/27/95 public]

                          DCE Problem Report
                  =================================


Submitter Information (Include email address at miminum)
---------------------

Submitter Name:         Tom Jordahl
Organization:           Gradient Technologies
Email Address:          tomj@gradient.com
Phone:                  (508) 485-5235 x173
DCE License Number:     


Hardware/Software Configuration
- --------------------------------

Offering and Version:   DCE 1.1
Component (Module):     sams
Client Hardware:        x86
Client Software:        Unixware 2.0
Server Hardware:        SAME
Server Software:        SAME
Compiler:               Unixware cc

Problem Description
- --------------------

Severity Level: Fatal

Date of First Occurrence: March 21, 1995

One Line Description:

        Sams doesn't handle field width specifiers.

Full Description:

	The following two lines in src/admin/tcl_dce/tcl.sams:
text            "\n    while executing\n\"%.*s%s\""
text            "\n    invoked from within\n\"%.*s%s\""

Get turned in to the following in dcetcl.msg:
11 \n    while executing\n\"%1$.*s%2$s\"
12 \n    invoked from within\n\"%1$.*s%2$s\"

Which in Tcl_Eval(tclBasic.c) get used and cause dcecp to crash.

The XPG positional notation needs to be used for the field width
specifier also (See XPG4 system interface and headers, pg 134):

11 \n    while executing\n\"%1$.*2$s%3$s\"
12 \n    invoked from within\n\"%1$.*2$s%3$s\"

The diff below also includes an SVR4 fix to correctly generate
.cat files which will be able to be used alone on SVR4.

Repeat By:

	On SVR4, run 'dcecp -c help show' and get a core dump.

Proposed Solution:

Fix src/tools/sams/sams.c:

*** /animal/build/dce1.1/src/tools/sams/sams.c	Tue Dec 13 11:26:03 1994
--- /animal/sandboxes/threads/src/tools/sams/sams.c	Tue Mar 21 12:02:30 1995
***************
*** 7,12 ****
--- 7,14 ----
   */
  /*
   * HISTORY
+  * Invoke gencat with -m switch for svr4.
+  * Handle field widths correctly with xpg $1 syntax.
   * $Log:	c012826,v $
# Revision 1.7  96/10/08  14:58:39  root
# changed fields: Fixed In Baseline   new/changed/deleted note(s) [mariko 10/8/96 public]
# 
# Revision 1.6  96/09/03  11:58:29  root
# changed fields: Status  
# 
# Revision 1.5  96/08/16  15:37:53  root
# changed fields: Affected File(s)   new/changed/deleted note(s) [psn 8/16/96 public]
# 
# Revision 1.4  96/07/19  14:20:52  root
# changed fields: Inter-dependent CRs  Short Description  Status  Fixed In Baseline  Affected File(s)  Diff supplied by  Diff release  Responsible Engr.  Resp. Engrs Company   new/changed/deleted note(s) [psn 7/19/96 public]
# 
# Revision 1.3  95/03/27  11:23:28  root
# changed fields:  new/changed/deleted note(s) [parul 03/27/95 public]
# 
# Revision 1.2  95/03/27  10:17:15  root
# changed fields:  new/changed/deleted note(s) [rsalz 03/27/95 public]
# 
# Revision 1.1  95/03/27  09:55:36  root
# new CR
# 
   * Revision 2.1  1994/12/13  16:23:39  devrcs
   * OSF DCE 1.1 Source
***************
*** 363,368 ****
--- 365,379 ----
  		else if (needxpg)
  		    fprintf(F, "%d$", ++d);
  		break;
+ 	    case '.':
+ 		putc('.', F);
+ 		if (p[1] == '*') {
+ 		    p++;
+ 		    putc('*', F);
+ 		    if (needxpg)
+ 		        fprintf(F, "%d$", ++d);
+ 		}
+ 		break;
  	    case '\n':
  		putc('\\', F);
  		putc('\n', F);
***************
*** 403,409 ****
--- 414,424 ----
  	perror("Cannot remove old message catalog");
  	exit(1);
      }
+ #ifdef SVR4
+     (void)sprintf(command, "gencat -m %s %s", catfile, msgfile);
+ #else
      (void)sprintf(command, "gencat %s %s", catfile, msgfile);
+ #endif
      i = system(command);
      if (i)
  	(void)fprintf(stderr, "Warning:  gencat exit status %d\n", i);

[03/27/95 public]
Tom's fix on the field-widths looks good, thanks.
Not sure about the gencat modification -- why didn't SNI need it for
their SVR4 port?  I think this should either be called out as a porting
issue or a new flag added to specify the gencat command like the following
untested diff:

*** sams.c.save	Mon Mar 27 10:10:22 1995
--- sams.c	Mon Mar 27 10:11:25 1995
***************
*** 166,171 ****
--- 166,172 ----
  static int	Multiples;		/* One file/message?		*/
  static int	SortMode = 'a';		/* Sorting mode			*/
  static char	*Directory;		/* Destination directory	*/
+ static char	*Gencat = "gencat";	/* Generating catalogs		*/
  static char	*Input;			/* Input file name		*/
  static char	*IDL;			/* Name of generated IDL file	*/
  static char	*Name;			/* Base output file name	*/
***************
*** 400,406 ****
  	perror("Cannot remove old message catalog");
  	exit(1);
      }
!     (void)sprintf(command, "gencat %s %s", catfile, msgfile);
      i = system(command);
      if (i)
  	(void)fprintf(stderr, "Warning:  gencat exit status %d\n", i);
--- 401,407 ----
  	perror("Cannot remove old message catalog");
  	exit(1);
      }
!     (void)sprintf(command, "%s %s %s", Gencat, catfile, msgfile);
      i = system(command);
      if (i)
  	(void)fprintf(stderr, "Warning:  gencat exit status %d\n", i);
***************
*** 1023,1029 ****
      output = NULL;
      Name = NULL;
      Table = NULL;
!     while ((i = getopt(ac, av, "d:fi:mn:o:s:t:x")) != EOF)
  	switch (i) {
  	default:
  	    Usage(NULL);
--- 1024,1030 ----
      output = NULL;
      Name = NULL;
      Table = NULL;
!     while ((i = getopt(ac, av, "d:fg:i:mn:o:s:t:x")) != EOF)
  	switch (i) {
  	default:
  	    Usage(NULL);
***************
*** 1033,1038 ****
--- 1034,1042 ----
  	    break;
  	case 'f':
  	    FilterText = 0;
+ 	    break;
+ 	case 'g':
+ 	    Gencat = gencat;
  	    break;
  	case 'i':
  	    IDL = optarg;
This also has a doc impact.

[03/27/95 public]
> Not sure about the gencat modification -- why didn't SNI need it for
> their SVR4 port?  I think this should either be called out as a porting
> issue or a new flag added to specify the gencat command like the following
> untested diff:

SNI provides a modified implementation of gencat in its custom tree that
Gradient has not bought. With that gencat, it works fine without changing
anything in sams usage of gencat. Yes, its a porting issue and we have to
probably provide such modification.

[7/19/96 public]
Submitted locally, will be part of next 1.2.2 drop:

*** /vob/dce/src/tools/sams/sams.c@@/main/DCE_1.2.2/1   Wed Jul 17 17:06:32 1996--- /vob/dce/src/tools/sams/sams.c@@/main/DCE_1.2.2/2   Fri Jul 19 13:34:24 1996***************
*** 8,13 ****
--- 8,17 ----
  /*
   * HISTORY
   * $Log:	c012826,v $
# Revision 1.7  96/10/08  14:58:39  root
# changed fields: Fixed In Baseline   new/changed/deleted note(s) [mariko 10/8/96 public]
# 
# Revision 1.6  96/09/03  11:58:29  root
# changed fields: Status  
# 
# Revision 1.5  96/08/16  15:37:53  root
# changed fields: Affected File(s)   new/changed/deleted note(s) [psn 8/16/96 public]
# 
# Revision 1.4  96/07/19  14:20:52  root
# changed fields: Inter-dependent CRs  Short Description  Status  Fixed In Baseline  Affected File(s)  Diff supplied by  Diff release  Responsible Engr.  Resp. Engrs Company   new/changed/deleted note(s) [psn 7/19/96 public]
# 
+  * Revision /main/DCE_1.2.2/2  1996/07/19  17:34 UTC  psn
+  *    Fix OT 12826.
+  *    [1996/07/19  14:43 UTC  psn  /main/psn_bugfix/2]
+  * 
   * Revision /main/DCE_1.2.2/1  1996/07/17  21:06 UTC  psn
   *    Fix OT 12806.
   *    [1996/07/17  19:23 UTC  psn  /main/psn_bugfix/1]
***************
*** 178,183 ****
--- 182,188 ----
  static int    Multiples;              /* One file/message?            */
  static int    SortMode = 'a';         /* Sorting mode                 */
  static char   *Directory;             /* Destination directory        */
+ static char   *Gencat = "gencat";     /* Generating catalogs          */
  static char   *Input;                 /* Input file name              */
  static char   *IDL;                   /* Name of generated IDL file   */
  static char   *Name;                  /* Base output file name        */
***************
*** 372,377 ****
--- 377,391 ----
                else if (needxpg)
                    fprintf(F, "%d$", ++d);
                break;
+           case '.':
+               putc('.', F);
+               if (p[1] == '*') {
+                   p++;
+                   putc('*', F);
+                   if (needxpg)
+                       fprintf(F, "%d$", ++d);
+               }
+               break;
            case '\n':
                putc('\\', F);
                putc('\n', F);
***************
*** 412,421 ****
        perror("Cannot remove old message catalog");
        exit(1);
      }
!     (void)sprintf(command, "gencat %s %s", catfile, msgfile);
      i = system(command);
      if (i)
!       (void)fprintf(stderr, "Warning:  gencat exit status %d\n", i);
  }
  
  
--- 426,435 ----
        perror("Cannot remove old message catalog");
        exit(1);
      }
!     (void)sprintf(command, "%s %s %s", Gencat, catfile, msgfile);
      i = system(command);
      if (i)
!       (void)fprintf(stderr, "Warning:  %s exit status %d\n", Gencat, i);
  }
  
  
***************
*** 1035,1041 ****
      output = NULL;
      Name = NULL;
      Table = NULL;
!     while ((i = getopt(ac, av, "d:fi:mn:o:s:t:x")) != EOF)
        switch (i) {
        default:
            Usage(NULL);
--- 1049,1055 ----
      output = NULL;
      Name = NULL;
      Table = NULL;
!     while ((i = getopt(ac, av, "d:fg:i:mn:o:s:t:x")) != EOF)
        switch (i) {
        default:
            Usage(NULL);
***************
*** 1045,1050 ****
--- 1059,1067 ----
            break;
        case 'f':
            FilterText = 0;
+           break;
+       case 'g':
+           Gencat = optarg;
            break;
        case 'i':
            IDL = optarg;

[8/16/96 public]
It turns out that the above field width specifier change in sams.c needs
corresponding fix in tclBasic.c file. This combination works well on HP-UX
but not on AIX due to its non-compliance to XPG spec. Here are the diff's
for tclBasic.c:

*** /vob/dce/src/admin/tcl_dce/tclBasic.c@@/main/DCE_1.2.2/1    Fri May 24 19:22:31 1996
--- /vob/dce/src/admin/tcl_dce/tclBasic.c@@/main/DCE_1.2.2/2    Wed Aug 14 16:40:55 1996
***************
*** 9,14 ****
--- 9,25 ----
  /*
   * HISTORY
   * $Log:	c012826,v $
# Revision 1.7  96/10/08  14:58:39  root
# changed fields: Fixed In Baseline   new/changed/deleted note(s) [mariko 10/8/96 public]
# 
# Revision 1.6  96/09/03  11:58:29  root
# changed fields: Status  
# 
# Revision 1.5  96/08/16  15:37:53  root
# changed fields: Affected File(s)   new/changed/deleted note(s) [psn 8/16/96 public]
# 
+  * Revision /main/DCE_1.2.2/2  1996/08/14  20:40 UTC  psn
+  *    Conditionalize XPG fix for field width specifier so that it is not applied to AIX to avoid problems caused
+  *    by AIX's lack of support for it.
+  *    [1996/08/13  16:44 UTC  psn  /main/DCE_1.2.2/psn_bugfix/3]
+  * 
+  *    Cleanup.
+  *    [1996/08/06  18:10 UTC  psn  /main/DCE_1.2.2/psn_bugfix/2]
+  * 
+  *    Fix field width specifier bug to use correctly generated format string by sams.
+  *    [1996/08/05  15:23 UTC  psn  /main/DCE_1.2.2/psn_bugfix/1]
+  * 
   * Revision /main/DCE_1.2.2/1  1996/05/24  23:22 UTC  sommerfeld
   *    Make sure i18n_msg_buf copied from i18n_msg_format is null terminated
   *    [1995/12/18  19:40 UTC  dat  /main/HPDCE02/jrr_1.2_mothra/2]
***************
*** 1228,1233 ****
--- 1239,1271 ----
            ellipsis = " ...";
        }
  
+ #ifndef AIX32
+         /*
+          * This fix is excluded for AIX due to missing support for
+          * XPG compliant field width specifier in format string.
+          */
+         /*
+          * Use properly generated format string and necessary argument list
+          * to print message. So for,
+          *                 "%.*s" ---sams------> "%1$.*2$s"
+          * So sprintf should be passed 'cmdStart, numChars' arguments for
+          *                 "%.*s"
+          * where,
+          *         numChars indicates the field width, and
+          *         cmdStart indicates the string to be printed
+          */
+       if (!(iPtr->flags & ERR_IN_PROGRESS)) {
+           i18n_msg_format = dce_msg_get(tcl_s_basic_while_executing);
+           sprintf(copyStorage, (char *)i18n_msg_format, cmdStart, numChars,
+                     ellipsis);
+           free(i18n_msg_format);
+       } else {
+           i18n_msg_format = dce_msg_get(tcl_s_basic_invoked_from_within);
+           sprintf(copyStorage, (char *)i18n_msg_format, cmdStart, numChars,
+                     ellipsis);
+           free(i18n_msg_format);
+       }
+ #else /* defined AIX32 */
        /* 
         * AIX cannot process sprintf using implicit next parameter ('*s')
         * and numbered parameter ('%1$') in the same call, so need to
***************
*** 1272,1277 ****
--- 1310,1316 ----
            ckfree(i18n_msg_buf);
            free(i18n_msg_format);
        }
+ #endif /* AIX32 */
        Tcl_AddErrorInfo(interp, copyStorage);
        iPtr->flags &= ~ERR_ALREADY_LOGGED;
      } else {
***************
*** 2148,2153 ****
--- 2187,2221 ----
        if (st == (size_t)-1)
                goto end;
  
+ #ifndef AIX32
+         /*
+          * This fix is excluded for AIX due to missing support for
+          * XPG compliant field width specifier in format string.
+          */
+         /*
+          * Use properly generated format string and necessary argument list
+          * to print message. So for,
+          *                 "%.*s" ---sams------> "%1$.*2$s"
+          * So sprintf should be passed 'cmdStart, numChars' arguments for
+          *                 "%.*s"
+          * where,
+          *         numChars indicates the field width, and
+          *         cmdStart indicates the string to be printed
+          */
+       if (!(iPtr->flags & ERR_IN_PROGRESS)) {
+           i18n_msg_format = dce_msg_get(tcl_s_basic_while_executing);
+           sprintf(copyStorage, (char *)i18n_msg_format, cmdStart, numChars,
+                     ellipsis);
+           free(i18n_msg_format);
+           ckfree(cmdStart);
+       } else {
+           i18n_msg_format = dce_msg_get(tcl_s_basic_invoked_from_within);
+           sprintf(copyStorage, (char *)i18n_msg_format, cmdStart, numChars,
+                     ellipsis);
+           free(i18n_msg_format);
+           ckfree(cmdStart);
+       }
+ #else /* defined AIX32 */
        /* 
         * AIX cannot process sprintf using implicit next parameter ('*s')
         * and numbered parameter ('%1$') in the same call, so need to
***************
*** 2199,2204 ****
--- 2267,2273 ----
            free(i18n_msg_format);
            ckfree(cmdStart);
        }
+ #endif /* AIX32 */
        Tcl_AddErrorInfo(interp, copyStorage);
        ckfree(copyStorage);
        iPtr->flags &= ~ERR_ALREADY_LOGGED;

[10/8/96 public]

  Fixed in 1.1 maintenance tree.

./tools/sams/sams.c
Comparing revision 1.1.7.1 with revision 1.1.7.2.
***************
*** 170,175 ****
--- 174,181 ----
  static int    Multiples;              /* One file/message?            */
  static int    SortMode = 'a';         /* Sorting mode                 */
  static char   *Directory;             /* Destination directory        */
+ static char   *Gencat = "gencat";     /* OT 12826:                    */
+                                       /*  Generating catalogs         */
  static char   *Input;                 /* Input file name              */
  static char   *IDL;                   /* Name of generated IDL file   */
  static char   *Name;                  /* Base output file name        */
***************
*** 364,369 ****
--- 370,386 ----
                else if (needxpg)
                    fprintf(F, "%d$", ++d);
                break;
+           /* OT 12826: Sams can't handle field specifier properly */
+           case '.':
+               putc('.', F);
+               if (p[1] == '*') {
+                   p++;
+                   putc('*', F);
+                   if (needxpg)
+                       fprintf(F, "%d$", ++d);
+               }
+               break;
+           /* OT 12826: end */
            case '\n':
                putc('\\', F);
                putc('\n', F);
***************
*** 404,413 ****
        perror("Cannot remove old message catalog");
        exit(1);
      }
!     (void)sprintf(command, "gencat %s %s", catfile, msgfile);
      i = system(command);
      if (i)
!       (void)fprintf(stderr, "Warning:  gencat exit status %d\n", i);
  }
  
  
--- 421,432 ----
        perror("Cannot remove old message catalog");
        exit(1);
      }
!     /* OT 12826 */
!     (void)sprintf(command, "%s %s %s", Gencat, catfile, msgfile);
      i = system(command);
      if (i)
!       /* OT 12826 */
!       (void)fprintf(stderr, "Warning:  %s exit status %d\n", Gencat, i);
  }
  
  
***************
*** 1027,1033 ****
      output = NULL;
      Name = NULL;
      Table = NULL;
!     while ((i = getopt(ac, av, "d:fi:mn:o:s:t:x")) != EOF)
        switch (i) {
        default:
            Usage(NULL);
--- 1046,1052 ----
      output = NULL;
      Name = NULL;
      Table = NULL;
!     while ((i = getopt(ac, av, "d:fg:i:mn:o:s:t:x")) != EOF)  /* OT 12826 */
        switch (i) {
        default:
            Usage(NULL);
***************
*** 1037,1042 ****
--- 1056,1064 ----
            break;
        case 'f':
            FilterText = 0;
+           break;
+       case 'g':                               /* OT 12826 */
+           Gencat = optarg;
            break;
        case 'i':
            IDL = optarg;



./admin/tcl_dce/tclBasic.c
Comparing revision 1.1.6.1 with revision 1.1.6.2.
***************
*** 1201,1214 ****
            ellipsis = " ...";
        }
  
        if (!(iPtr->flags & ERR_IN_PROGRESS)) {
            /* i18n
            sprintf(copyStorage, "\n    while executing\n\"%.*s%s\"",
                    numChars, cmdStart, ellipsis);
             */
            i18n_msg_format = dce_msg_get(tcl_s_basic_while_executing);
!           sprintf(copyStorage, 
!                   (char *)i18n_msg_format, numChars, cmdStart, ellipsis);
            free(i18n_msg_format);
        } else {
            /* i18n
--- 1205,1238 ----
            ellipsis = " ...";
        }
  
+       /* OT 12826: DIFF Sams can't handle field width specifier properly
+        *
+        * AIX cannot process sprintf using implicit next parameter ('*s')
+        * and numbered parameter ('%1$') in the same call, so need to
+        * do prior substitution.  Adding space for 3 digits (plus null)
+        * is enough because numChars can't exceed NUM_CHARS (200)
+        */
        if (!(iPtr->flags & ERR_IN_PROGRESS)) {
            /* i18n
            sprintf(copyStorage, "\n    while executing\n\"%.*s%s\"",
                    numChars, cmdStart, ellipsis);
             */
+           unsigned char *formatPtr, *bufPtr;
            i18n_msg_format = dce_msg_get(tcl_s_basic_while_executing);
!           i18n_msg_buf = (unsigned char *)
!                       ckalloc(strlen((char *)i18n_msg_format) + 4);
!           for (formatPtr = i18n_msg_format, bufPtr = i18n_msg_buf;
!               *formatPtr != '\0'; formatPtr++ ) {
!               if (*formatPtr == '*') {
!                   bufPtr += sprintf ((char *)bufPtr, "%d", numChars);
!               } else {
!                   *bufPtr++ = *formatPtr;
!               }
!           }
!           *bufPtr = '\0';
! 
!           sprintf(copyStorage, (char *)i18n_msg_buf, cmdStart, ellipsis);
!           ckfree(i18n_msg_buf);
            free(i18n_msg_format);
        } else {
            /* i18n
***************
*** 1215,1225 ****
            sprintf(copyStorage, "\n    invoked from within\n\"%.*s%s\"",
                    numChars, cmdStart, ellipsis);
            */
            i18n_msg_format = dce_msg_get(tcl_s_basic_invoked_from_within);
!           sprintf(copyStorage, 
!                       (char *)i18n_msg_format, numChars, cmdStart, ellipsis);
            free(i18n_msg_format);
!       }
        Tcl_AddErrorInfo(interp, copyStorage);
        iPtr->flags &= ~ERR_ALREADY_LOGGED;
      } else {
--- 1239,1263 ----
            sprintf(copyStorage, "\n    invoked from within\n\"%.*s%s\"",
                    numChars, cmdStart, ellipsis);
            */
+           unsigned char *formatPtr, *bufPtr;
            i18n_msg_format = dce_msg_get(tcl_s_basic_invoked_from_within);
!           i18n_msg_buf = (unsigned char *)
!                       ckalloc(strlen((char *)i18n_msg_format) + 4);
!           for (formatPtr = i18n_msg_format, bufPtr = i18n_msg_buf;
!               *formatPtr != '\0'; formatPtr++ ) {
!               if (*formatPtr == '*') {
!                   bufPtr += sprintf ((char *)bufPtr, "%d", numChars);
!               } else {
!                   *bufPtr++ = *formatPtr;
!               }
!           }
!           *bufPtr = '\0';
! 
!           sprintf(copyStorage,
!                       (char *)i18n_msg_buf, cmdStart, ellipsis);
!           ckfree(i18n_msg_buf);
            free(i18n_msg_format);
!       } /* end of OT 12826 */
        Tcl_AddErrorInfo(interp, copyStorage);
        iPtr->flags &= ~ERR_ALREADY_LOGGED;
      } else {
***************
*** 2096,2119 ****
        if (st == (size_t)-1)
                goto end;
  
        if (!(iPtr->flags & ERR_IN_PROGRESS)) 
        {
            i18n_msg_format = dce_msg_get(tcl_s_basic_while_executing);
            copyStorage = (char *)ckalloc(strlen((char *)i18n_msg_format) + len + 10);
            sprintf(copyStorage, 
!                   (char *)i18n_msg_format, numChars, cmdStart, ellipsis);
            free(i18n_msg_format);
            ckfree(cmdStart);
        } 
        else 
        {
            i18n_msg_format = dce_msg_get(tcl_s_basic_invoked_from_within);
            copyStorage = (char *)ckalloc(strlen((char *)i18n_msg_format) + len + 10);
!           sprintf(copyStorage, 
!                       (char *)i18n_msg_format, numChars, cmdStart, ellipsis);
            free(i18n_msg_format);
            ckfree(cmdStart);
!       }
        Tcl_AddErrorInfo(interp, copyStorage);
        ckfree(copyStorage);
        iPtr->flags &= ~ERR_ALREADY_LOGGED;
--- 2134,2191 ----
        if (st == (size_t)-1)
                goto end;
  
+       /* OT 12826
+        * 
+          * AIX cannot process sprintf using implicit next parameter ('*s')
+          * and numbered parameter ('%1$') in the same call, so need to
+          * do prior substitution.  Adding space for 3 digits (plus null)
+          * is enough because numChars can't exceed NUM_CHARS (200)
+          */
        if (!(iPtr->flags & ERR_IN_PROGRESS)) 
        {
+           unsigned char *formatPtr, *bufPtr;
            i18n_msg_format = dce_msg_get(tcl_s_basic_while_executing);
            copyStorage = (char *)ckalloc(strlen((char *)i18n_msg_format) + len + 10);
+           i18n_msg_buf = (unsigned char *)
+                       ckalloc(strlen((char *)i18n_msg_format) + 4);
+           for (formatPtr = i18n_msg_format, bufPtr = i18n_msg_buf;
+               *formatPtr != '\0'; formatPtr++ ) {
+               if (*formatPtr == '*') {
+                   bufPtr += sprintf ((char *)bufPtr, "%d", numChars);
+               } else {
+                   *bufPtr++ = *formatPtr;
+               }
+           }
+           *bufPtr = '\0';
+ 
            sprintf(copyStorage, 
!                   (char *)i18n_msg_buf, cmdStart, ellipsis);
!             ckfree(i18n_msg_buf);
            free(i18n_msg_format);
            ckfree(cmdStart);
        } 
        else 
        {
+           unsigned char *formatPtr, *bufPtr;
            i18n_msg_format = dce_msg_get(tcl_s_basic_invoked_from_within);
            copyStorage = (char *)ckalloc(strlen((char *)i18n_msg_format) + len + 10);
!           i18n_msg_buf = (unsigned char *)
!                       ckalloc(strlen((char *)i18n_msg_format) + 4);
!           for (formatPtr = i18n_msg_format, bufPtr = i18n_msg_buf;
!               *formatPtr != '\0'; formatPtr++ ) {
!               if (*formatPtr == '*') {
!                   bufPtr += sprintf ((char *)bufPtr, "%d", numChars);
!               } else {
!                   *bufPtr++ = *formatPtr;
!               }
!           }
!           *bufPtr = '\0';
! 
!           sprintf(copyStorage, (char *)i18n_msg_buf, cmdStart, ellipsis);
!           ckfree(i18n_msg_buf);
            free(i18n_msg_format);
            ckfree(cmdStart);
!       } /* end of OT 12826 */
        Tcl_AddErrorInfo(interp, copyStorage);
        ckfree(copyStorage);
        iPtr->flags &= ~ERR_ALREADY_LOGGED;



CR Number                     : 12806
Defect or Enhancement?        : def
CR in Code, Doc, or Test?     : code
Inter-dependent CRs           : 
Project Name                  : dce
H/W Ref Platform              : all
S/W Ref Platform              : all
Component Name                : utils
Subcomponent Name             : sams
Short Description             : DIFF: "component code ###" parsed wrong
Reported Date                 : 2/24/95
Found in Baseline             : 1.1
Found Date                    : 2/24/95
Severity                      : A
Priority                      : 1
Status                        : closed
Duplicate Of                  : 
Fix By Baseline               : 1.1
Fixed In Baseline             : 1.1maint,1.2.2
Affected File(s)              : tools/sams/sams.c
Diff supplied by              : provider
Diff release                  : 1.2.2
Sensitivity                   : public

[2/24/95 public]


In src/tools/sams/sams.c there is the following fragment at line 1105:
    if (CodeHeader) {
	/* We know it was wrtten using %x and shifted (see samsgram.y). */
	base = strtol(CodeHeader, (char **)NULL, 16) << ISV_COMP_SHIFT;

I think this is wrong.  Very wrong.  It should be
    if (CodeHeader) {
	/* We know it was wrtten using %d and not shifted (see samsgram.y). */
	base = strtol(CodeHeader, (char **)NULL, 10) << ISV_COMP_SHIFT;

Can this make it into the warranty patch?

[11/03/95 public]

Fix submitted to dce1.1-maint.

[7/18/96 public]
Submitted locally. Will be part of next drop:

*** /vob/dce/src/tools/sams/sams.c@@/main/19    Fri Apr 12 01:49:59 1996
--- /vob/dce/src/tools/sams/sams.c@@/main/DCE_1.2.2/1   Wed Jul 17 17:06:32 1996

***************
*** 8,13 ****
--- 8,17 ----
  /*
   * HISTORY
   * $Log:	c012806,v $
# Revision 1.4  96/09/03  12:00:57  root
# changed fields: Status  
# 
# Revision 1.3  96/07/18  14:29:39  root
# changed fields: Short Description  Status  Fixed In Baseline  Diff supplied by  Diff release  Responsible Engr.  Resp. Engrs Company   new/changed/deleted note(s) [psn 7/18/96 public]
# 
+  * Revision /main/DCE_1.2.2/1  1996/07/17  21:06 UTC  psn
+  *    Fix OT 12806.
+  *    [1996/07/17  19:23 UTC  psn  /main/psn_bugfix/1]
+  *
   * Revision 1.1.9.2  1996/02/17  23:36:06  marty
   *    Update OSF copyright year
   *    [1996/02/17  22:52:21  marty]
***************
*** 1111,1118 ****

      /* Calculate base number. */
      if (CodeHeader) {
!       /* We know it was wrtten using %x and shifted (see samsgram.y). */
!       base = strtol(CodeHeader, (char **)NULL, 16) << ISV_COMP_SHIFT;
        CodeMask = ISV_CODE_MASK;
      }
      else {
--- 1115,1122 ----

      /* Calculate base number. */
      if (CodeHeader) {
!       /* We know it was written using %d and not shifted (see samsgram.y). */
!       base = strtol(CodeHeader, (char **)NULL, 10) << ISV_COMP_SHIFT;
        CodeMask = ISV_CODE_MASK;
      }
      else {



CR Number                     : 12457
Defect or Enhancement?        : def
CR in Code, Doc, or Test?     : code
Inter-dependent CRs           : 
Project Name                  : dce
H/W Ref Platform              : all
S/W Ref Platform              : all
Component Name                : utils
Subcomponent Name             : svc
Short Description             : Specifying "severity" as "*" in routing spec does not work
Reported Date                 : 9/30/94
Found in Baseline             : 1.1b20
Found Date                    : 9/30/94
Severity                      : B
Priority                      : 0
Status                        : closed
Duplicate Of                  : 
Fix By Baseline               : 1.1
Fixed In Baseline             : 1.1b21
Affected File(s)              : dce/utils/svc/svcroute.c
Sensitivity                   : public

[9/30/94 public]

Breaks dcecp LOG FVT tests:
log_modify_049_P (IC 31): FAIL
log_modify_050_P (IC 32): FAIL
log_modify_051_P (IC 33): FAIL
log_modify_052_P (IC 34): FAIL
log_modify_053_P (IC 35): FAIL
log_modify_054_P (IC 36): FAIL

Tests are located in src/test/functional/admin/dcecp/ts/log/log_modify_P.tcl.

Here's a hand test:
dcecp> log sh /.:/hosts/ice/cds-clerk
{FATAL DISCARD}
{ERROR DISCARD}
{WARNING {{STDERR -} {FILE /opt/dcelocal/var/svc/warning.log}}}
{NOTICE DISCARD}
{NOTICE_VERBOSE DISCARD}
dcecp> log mod $_n -ch *:BINFILE:/tmp/svc     
dcecp>  log sh /.:/hosts/ice/cds-clerk
{FATAL DISCARD}
{ERROR DISCARD}
{WARNING {{STDERR -} {FILE /opt/dcelocal/var/svc/warning.log}}}
{NOTICE DISCARD}
{NOTICE_VERBOSE DISCARD}

Notice that the "log modify" comes back with a good status code but
when you look at the routing list, it hasn't been modified.

In our test logs of 9/29, these tests were passing.

[10/03/94 public]
Are you *sure* that changing the route to "*:xxx" worked?  I am
very surprised.  It's not supposed to, the "*" is only a shorthand
for initial routing, not valid for changing routing.  I think this
shoujld be cancelled.

[10/03/94 public]
Yes, it used to work. The FVT tests invoke the "log modify" command
and then do a comparision using the "log show" command if the
"*:BINFILE:/tmp/svc exists. If a "*" for severity is only valid for
an initial routing, then can the dce_svc_set_route() API return an
error? Or are you using this same API to set initial routings also?

[10/03/94 public]
As part of fixing 11541 (dce_svc_routings should return all routings)
you will no longser see routes like "*:xxx".  Instead you'll see the
individual, specific, routes.  Given that, cancel?

[10/03/94 public]
I agree about showing all the routings instead of the "*". But I don't
see a change happening.
Should dce_svc_set_route() API return an error or should all routings
be changed to BINFILE:/tmp/svc( which it does not)? 

dcecp> log sh /.:/hosts/ice/dts-entity
{FATAL {{STDERR -} {FILE /opt/dcelocal/var/svc/fatal.log}}}
{ERROR {{STDERR -} {FILE /opt/dcelocal/var/svc/error.log}}}
{WARNING {{STDERR -} {FILE /opt/dcelocal/var/svc/warning.log}}}
{NOTICE DISCARD}
{NOTICE_VERBOSE DISCARD}
dcecp> log mod $_n -ch *:BINFILE:/tmp/svc
dcecp> log sh /.:/hosts/ice/dts-entity
{FATAL {{STDERR -} {FILE /opt/dcelocal/var/svc/fatal.log}}}
{ERROR {{STDERR -} {FILE /opt/dcelocal/var/svc/error.log}}}
{WARNING {{STDERR -} {FILE /opt/dcelocal/var/svc/warning.log}}}
{NOTICE DISCARD}
{NOTICE_VERBOSE DISCARD}

[1/3/94 public]
This is worse than we thought. SVC changes the routes when you
specify "*", but when you ask what the routes are, it lies to you,
giving the different (wrong) info.  And it breaks dcecp log FVTs.
Setting P=0.

[1/3/94 public]
Here's the fix applied:  If you specify * for the route severity, it calls a
new special function, dce_svc__store_all(), that sets each individual production
route with the existing function, dce_svc__store().  It's not even a hack...

[10/3/94 public]

A note after the fact to denote that this fix was approved as 'hypercritical'.

[10/5/94 public]

Looks great!

dcecp> log sh /.:/hosts/absolut/dts-entity
{FATAL DISCARD}
{ERROR DISCARD}
{WARNING DISCARD}
{NOTICE DISCARD}
{NOTICE_VERBOSE STDERR}
dcecp> log mod /.:/hosts/absolut/dts-entity -ch *:STDOUT:
dcecp> log sh /.:/hosts/absolut/dts-entity
{FATAL STDOUT}
{ERROR STDOUT}
{WARNING STDOUT}
{NOTICE STDOUT}
{NOTICE_VERBOSE STDOUT}



CR Number                     : 12449
Defect or Enhancement?        : def
CR in Code, Doc, or Test?     : test
Inter-dependent CRs           : 
Project Name                  : dce
H/W Ref Platform              : all
S/W Ref Platform              : all
Component Name                : utils
Subcomponent Name             : attr
Short Description             : attr schema tests need better error checking
Reported Date                 : 9/30/94
Found in Baseline             : 1.1b19
Found Date                    : 9/30/94
Severity                      : B
Priority                      : 1
Status                        : closed
Duplicate Of                  : 
Fix By Baseline               : 1.1
Fixed In Baseline             : 1.1b21
Affected File(s)              : test/dce/utils/attr/ts/attr_sch/dce_attr_sch_fvt.c
Sensitivity                   : public

[9/30/94 public]
The tests in dce_attr_sch_fvt.c should do better error checking in general.
(eg, tests continue even if a setup call fails.) In particular, they all
depend on the first test passing; if that fails, none of the others can pass.

[1/3/94 public]
Made the changes above.  If first test fails (it does some setup, like
binding to the server), a flag is set.  All the other tests check this
flag, and act accordingly (ie, if setup failed, report unresolved).



CR Number                     : 12445
Defect or Enhancement?        : def
CR in Code, Doc, or Test?     : code
Inter-dependent CRs           : 
Project Name                  : dce
H/W Ref Platform              : all
S/W Ref Platform              : all
Component Name                : utils
Subcomponent Name             : svc
Short Description             : SVCSPRINTBUF to 4096
Reported Date                 : 9/30/94
Found in Baseline             : 1.1b20
Found Date                    : 9/30/94
Severity                      : A
Priority                      : 0
Status                        : closed
Duplicate Of                  : 
Fix By Baseline               : 1.1
Fixed In Baseline             : 1.1b21
Affected File(s)              : dce/utils/svc/dceprintf.c
Sensitivity                   : public

[9/30/94 public]
Please up the value of #define SVCSPRINTFBUF in svcimpl.h from 1024 to 4096
now that we've change all our 1 paragraph verbose help messages to get the
message from only one message code as per your advise.  :-) dcecp is core
dumping because of this.  (You might want a length check in dce_sprintf)

[9/3/94 public]
Increased to 4096.
Can not do a length check, just like sprintf can't.

[10/3/94 public]
Updated after the fact to show that this was approved as 'hypercritical'
off-line.

[10/04/94 public]
The final code that went in realloc'd the string to its true size.



CR Number                     : 12416
Defect or Enhancement?        : def
CR in Code, Doc, or Test?     : code
Inter-dependent CRs           : 
Project Name                  : dce
H/W Ref Platform              : all
S/W Ref Platform              : all
Component Name                : utils
Subcomponent Name             : svc
Short Description             : need default svc settings for systest
Reported Date                 : 9/29/94
Found in Baseline             : 1.1b20
Found Date                    : 9/29/94
Severity                      : B
Priority                      : 1
Status                        : closed
Duplicate Of                  : 
Fix By Baseline               : 
Fixed In Baseline             : 1.1b21
Affected File(s)              : dce/utils/svc/routing
Sensitivity                   : public

[9/29/94 public]

To ensure that all cells configured get some serviceability by default,
editing the routing file installed by dce_config to contain:

FATAL:STDERR:-;FILE:/opt/dcelocal/var/svc/fatal
ERROR:STDERR:-;FILE:/opt/dcelocal/var/svc/error
WARNING:STDERR:-;FILE:/opt/dcelocal/var/svc/warning

This is especially important for system test to analyze error output
in CHO cells. Please update this CR if this is NOT what you want
as the default contents of /opt/dcelocal/var/svc/routing.

[9/29/94 public]
Submitted as above except with ".log" extensions on the files.

[9/3/94 public]
Works happily with nightly bld.



CR Number                     : 12366
Defect or Enhancement?        : def
CR in Code, Doc, or Test?     : code
Inter-dependent CRs           : 
Project Name                  : dce
H/W Ref Platform              : all
S/W Ref Platform              : all
Component Name                : utils
Subcomponent Name             : 
Short Description             : several message catalogs needs to be loaded as defaults
Reported Date                 : 9/27/94
Found in Baseline             : 1.1b19
Found Date                    : 9/27/94
Severity                      : B
Priority                      : 1
Status                        : closed
Duplicate Of                  : 
Fix By Baseline               : 1.1
Fixed In Baseline             : 1.1b20
Affected File(s)              : dce/utils/svc/msgtable.c
Sensitivity                   : public

[9/27/94 public]

While using dcecp:
dcecp> dts mod -localtimeout 10 
Error: Unknown message number 0x115ca035

surf>stcode -h 0x115ca035
Tech = 1 = 01 = 0x1 = dce
Comp = 5578 = 012712 = 0x15ca = dts
Mesg = 53 = 065 = 0x35 = Must have write permission for the DTS entity

dcecp needs to load the default message table for DTS in order
for it to understand status codes back from dtsd.

You might want to run on OSF/1 without LANG set and see if
any other daemons (audit?) has this problem.

[9/27/94 public]
If you extrapolate this idea, we will need to load the messages for the 
entire core, right? I thought that's what message catalogs were for?

[09/27/94 public]
Not quite:  message catalogs exist so messages can be translated.  The
rules say all programs should have default messages compiled-in.
Things get a bit vague because "status code 0x%8.8lx" might be a reasonable
default message. :-)

BTW, not every server should have its message table compiled in.  If dcecp
uses some servers it can do dce_msg_define_msg_table() calls.  Deciding
what should be in and what should be out is not my cup of tea.

[9/27/94 public]
But of course, deciding what should be in is easy:  I should never
have to have message catalogs installed on my system to see english (default)
messages.  In this case, since dcecp is acting as a control program
for lots of components, it should load the component message catalog
on startup, just like the little ones (dcecp) do.

[9/27/94 public]
tom said he would look into this.  We want to put some more default message
tables into libdce.  E.g., dts and aud.  Tom to generate the list.  I
needed a component and I figured the utils folks would complain the least :-).

[9/28/94 public]

Just some specifics about all the message files in DCE:

Things that do not have daemons:
./admin/dcecp/dcp.sams
./admin/tcl_dce/tcl.sams
./rpc/csrc/csr.sams
./rpc/idl/uuidgen/uid.sams

Things that should not go in:
./directory/gds/sams/gds.sams
./security/h/sad.sams
./security/audit/libaudit/aud.sams
./threads/thd.sams

Things that are alreay in libdce:
./dce/utils/svc/svc.sams
./security/idl/sec.sams
./rpc/sys_idl/rpc.sams
./admin/dced/idl/dhd.sams
./directory/cds/includes/cds.sams
./dce/utils/misc/lib.sams

Things that should go in:
./dce/utils/dcecf/cfg.sams
./time/common/dts.sams
./security/gssapi/gss.sams

John Bowe is going to put the dce<comp>msg.o file in to libdce
(if it isn't already) and add the entries to the msgtable.c file.

[9/28/94 public]
Added the three above.  (Had to touch a handful of Makefiles so that
the dcexxxmsg.o files get into libdce.)



CR Number                     : 12336
Defect or Enhancement?        : def
CR in Code, Doc, or Test?     : code
Inter-dependent CRs           : 
Project Name                  : dce
H/W Ref Platform              : all
S/W Ref Platform              : all
Component Name                : utils
Subcomponent Name             : sams
Short Description             : sams generates bad "smallest" message number
Reported Date                 : 9/26/94
Found in Baseline             : 1.1b18
Found Date                    : 9/26/94
Severity                      : B
Priority                      : 1
Status                        : closed
Duplicate Of                  : 
Fix By Baseline               : 1.1
Fixed In Baseline             : 1.1b20
Affected File(s)              : tools/sams/sams.c
Sensitivity                   : public

[9/26/94 public]
sams generates bad "smallest" message number symbol, smallest_xxx_message_id
in the dcexxxmsg.h file.  If you're using collections or "set", it always
sets smallest to 1.  This will cause you get get the *wrong* message if you
do not have the catalog installed and the code is looking in the in-core
table.  A bad thing...

(If we had func tests for sams, this would have been found a while ago...)

[9/26/94 public]
Fixed.  (Some missing logic for remembering the smallest and largest.)



CR Number                     : 12327
Defect or Enhancement?        : def
CR in Code, Doc, or Test?     : code
Inter-dependent CRs           : 
Project Name                  : dce
H/W Ref Platform              : all
S/W Ref Platform              : all
Component Name                : utils
Subcomponent Name             : misc
Short Description             : lib.sams needs messages in libdce
Reported Date                 : 9/23/94
Found in Baseline             : 1.1
Found Date                    : 9/23/94
Severity                      : B
Priority                      : 1
Status                        : closed
Duplicate Of                  : 
Fix By Baseline               : 1.1
Fixed In Baseline             : 1.1b19
Affected File(s)              : dce/utils/svc/{msgtable.c,msgimpl.h}
Sensitivity                   : public

[9/23/94 public]

The dce/utils/misc/lib.sams file should build its message table
in libdce so the message catalog does not have to be found in order
for users to get english text.

An entry needs to be added to dce/utils/svc/msgtable.c.

[09/26/94 public]
Right you are.  Done.



CR Number                     : 12255
Defect or Enhancement?        : def
CR in Code, Doc, or Test?     : code
Inter-dependent CRs           : 
Project Name                  : dce
H/W Ref Platform              : all
S/W Ref Platform              : all
Component Name                : utils
Subcomponent Name             : acl
Short Description             : dce_acl_inq_permset_for_creds leaking cursors
Reported Date                 : 9/19/94
Found in Baseline             : 1.1b17
Found Date                    : 9/19/94
Severity                      : B
Priority                      : 1
Status                        : closed
Duplicate Of                  : 
Fix By Baseline               : 1.1
Fixed In Baseline             : 1.1b19
Affected File(s)              : /dce/utils/acldb/acleval.c
Sensitivity                   : public

[9/19/94 public]
(opened against 'utils' because I couldn't remember where the ACL library
component belonged, but you should reassign it if necessary).
In acleval.c dce_acl_inq_permset_for_creds() calls
sec_cred_initialize_cursor(), but never calls sec_cred_free_cursor()
when it's done with it.  This is a struct {unsigned32,unsigned32} memory
leak per access check.  It was in the original access check code in secd
that this was copied from, and has just been fixed there.

[9/20/94 public]
Now call sec_cred_free_cursor() at the appropriate places.

[9/21/94 public]
Mike, thanks for catching these things.



CR Number                     : 12232
Defect or Enhancement?        : def
CR in Code, Doc, or Test?     : doc
Inter-dependent CRs           : 12231,10676
Project Name                  : dce
H/W Ref Platform              : all
S/W Ref Platform              : all
Component Name                : utils
Subcomponent Name             : db
Short Description             : say that db_lock's are advisory
Reported Date                 : 9/16/94
Found in Baseline             : 1.1b16
Found Date                    : 9/16/94
Severity                      : B
Priority                      : 1
Status                        : closed
Duplicate Of                  : 
Fix By Baseline               : 1.1
Fixed In Baseline             : 1.1doc
Affected File(s)              : see text
Sensitivity                   : public

[9/16/94 public]
We've found that the locking done with dce_db_lock() [and unlock] should
only be advisory.  This affects the dce_db_lock/dce_db_unlock manpages
and perhaps related app gd doc.  I guess the users can think of these as
they do unix's flock(3). (perhaps mention this in the manpage)

It's "advisory" in that it does not prevent someone (another thread)
from writing to a locked backing store.  To use it, if you app wants
exclusive access, the places in the code writes/deletes would surround
their writes/deletes with lock/unlock.

[10/04/94 public]
Fixed ./dce_books/app_ref/man3dce/dce_db_lock.3dce to show locks as
advisory.  In ./dce_books/app_ref/man3dce/dce_db_iter_start.3dce, changed
the advice.  User must -always- lock during iteration to get the benefit.

Verified by bowe.

[10/27/94 public]
Closed bug.



CR Number                     : 12231
Defect or Enhancement?        : def
CR in Code, Doc, or Test?     : code
Inter-dependent CRs           : 
Project Name                  : dce
H/W Ref Platform              : all
S/W Ref Platform              : all
Component Name                : utils
Subcomponent Name             : db
Short Description             : dce_db_lock() should use a separate mutex
Reported Date                 : 9/16/94
Found in Baseline             : 1.1b16
Found Date                    : 9/16/94
Severity                      : B
Priority                      : 1
Status                        : closed
Duplicate Of                  : 
Fix By Baseline               : 1.1
Fixed In Baseline             : 1.1b19
Affected File(s)              : dce/utils/acldb/{dbimpl.h,dblock.c,dbopen.c}
Sensitivity                   : public

[bowe 9/16/94 public
The db_store (similar for the delete ones) routines do:
    pthread_mutex_lock()	/* without checking return */
    write the entry
    pthread_mutex_unlock()
dce_db_lock() does:
    pthread_mutex_lock()
That means the dce_db_unlock() will fail in this code:
    dce_db_lock()
    dce_db_store()
    dce_db_unlock()

Also, if db_store() shares the lock that dce_db_lock() uses, it
has no way of knowing if it's from the same thread. (ie, one thread
can lock the bs, and another do a store.)

Fix is to have a separate mutex for dce_db_lock()/dce_db_unlock()
"for the application".  This is an advisory lock.  The present
mutex is "internal", used for synchronizing i/o.

[9/16/94 public]
Did as mentioned above (separate mutext).  Ran thru functional tests.



CR Number                     : 12205
Defect or Enhancement?        : enh
CR in Code, Doc, or Test?     : doc
Inter-dependent CRs           : 
Project Name                  : dce
H/W Ref Platform              : all
S/W Ref Platform              : all
Component Name                : utils
Subcomponent Name             : app_ref
Short Description             : the dce_intro.3dce page
needs to be updated to describe new DCE APIs
Reported Date                 : 9/15/94
Found in Baseline             : 1.1doc
Found Date                    : 9/15/94
Severity                      : B
Priority                      : 1
Status                        : closed
Duplicate Of                  : 
Fix By Baseline               : 1.1
Fixed In Baseline             : 1.1doc
Affected File(s)              : app_ref/man3dce/dce_intro.3dce
Sensitivity                   : public

[9/15/94 public]

The dce_intro.3dce man page needs to be updated to introduce
all of the DCE APIs, not just the dce_cf APIs. Assigning this
CR to Bill Hileman.

[10/18/94 public]
Fixed and verified by me.  Added descriptions of each man3dce
API to the dce_intro.3dce reference page.  Also added pointer
to the appropriate intro page for each of these APIs
(dce_msg_intro.3dce, dce_config_intro,3dce, dce_db_intro.3dce,
dce_server_intro.3dce, dce_attr_intro.3dce, dce_svc_intro.3dce,
and dced_intro.3dce).

[10/27/94 public]
Closed bug.



CR Number                     : 12203
Defect or Enhancement?        : enh
CR in Code, Doc, or Test?     : doc
Inter-dependent CRs           : 
Project Name                  : dce
H/W Ref Platform              : all
S/W Ref Platform              : all
Component Name                : utils
Subcomponent Name             : app_ref
Short Description             : the dce_cf* routines need
their own intro page
Reported Date                 : 9/15/94
Found in Baseline             : 1.1doc
Found Date                    : 9/15/94
Severity                      : B
Priority                      : 1
Status                        : closed
Duplicate Of                  : 
Fix By Baseline               : 1.1
Fixed In Baseline             : 1.1doc
Affected File(s)              : app_ref/man3dce/dce_cf_intro.3dce
Sensitivity                   : public

[9/15/94 public]

The introductory information for the dce_cf* routines
needs to be moved from the dce_intro.3dce file to its
own man page. Assigning this CR to myself (I'm the
writer who owns the dce_cf* routines).

[9/15/94 public]

Created a new file dce_cf_intro.3dce, moved the dce_cf*
routine information from dce_intro.3dce to this file,
updated it to describe the new dce_cf* routines, and
also fixed the erroneous hostname and cellname case
information (see CR 11827). J. Bowe verified the
changes.

[09/29/94 public]
Closed bug.



CR Number                     : 12196
Defect or Enhancement?        : def
CR in Code, Doc, or Test?     : code
Inter-dependent CRs           : 
Project Name                  : dce
H/W Ref Platform              : all
S/W Ref Platform              : all
Component Name                : utils
Subcomponent Name             : acldb
Short Description             : memory leak in dce_acl_inq_client_creds
Reported Date                 : 9/14/94
Found in Baseline             : 1.1b17
Found Date                    : 9/14/94
Severity                      : D
Priority                      : 3
Status                        : closed
Duplicate Of                  : 
Fix By Baseline               : 1.1
Fixed In Baseline             : 1.1b18
Affected File(s)              : utils/acldb/acleval.c
Sensitivity                   : public

[9/14/94 public]
Was walking through the acl manager code tonight and found a small
memory leak. 

You should rpc_string_free() server_princ_name after a valid return
from rpc_binding_inq_auth_caller() in acleval.c:dce_acl_inq_client_creds().

[9/15/94 public]
Better yet, I put NULL for unused returns (including server_princ_name)
from rpc_binding_inq_auth_caller().



CR Number                     : 12157
Defect or Enhancement?        : def
CR in Code, Doc, or Test?     : code
Inter-dependent CRs           : 
Project Name                  : dce
H/W Ref Platform              : all
S/W Ref Platform              : all
Component Name                : utils
Subcomponent Name             : svc
Short Description             : dce_svc_bin_data_decode returns bin_data.format=0
Reported Date                 : 9/13/94
Found in Baseline             : 1.1
Found Date                    : 9/13/94
Severity                      : C
Priority                      : 2
Status                        : closed
Duplicate Of                  : 
Fix By Baseline               : 1.1
Fixed In Baseline             : 1.1b19
Affected File(s)              : dce/utils/svc/svclog.c
Sensitivity                   : public

[9/13/94 public]

With the change for 12154 both svcdumplog and gdsstep work if NLSPATH
is OK or not set. If I set NLSPATH=/xxx I get with svcdumplog again 

1994-09-13-08:04:42.110-04:00I----- gdsdsa DEBUG1 gds general d26dsa.c 1588 0xa4
4d69ac

1994-09-13-08:04:42.130-04:00I----- gdsdsa DEBUG1 gds ipc d23regproc.c 96 0xa44d
69ac

1994-09-13-08:04:42.130-04:00I----- gdsdsa DEBUG1 gds ipc d23regproc.c 184 0xa44
d69ac

; gdsstep dumps core because of the same reason as mentioned in 12154.

According to John's comments to OT 12037 it should never happen 
that bin_data.format is NULL. But it is - take i.e. gemini:/tmp/JOHN_BOWE
as logfile.
BTW: dce_msg_get_msg returns in this case "Unknown message number 0x1260a4aa".
Why is this overwritten in dce_svc_log_get by bin_data.format (means NULL)?

This is what is returned as bin_data:

$3 = {version = 1, t = {char_array = 0x0 "~\200OarNM\001T\036"}, 
  attributes = 1, message_index = 308324504, thread_code = 2756536748, 
  argtypes = 0x485468 "%d", fac_name = 0x4854a8 "general", format = 0x0, 
  progname = 0x4854e8 "gdsdsa", file = 0x485528 "d26dsa.c", line = 1588, 
  count = 1, args = 0x485568}

[9/19/94 public]
The code almost was basically right.  My comment was wrong.  My hope was
to have dumping a log work even if there was not message catalog (and no
in-core table) available.

So, for svcdumplog to work, the message catalogs for the messages of
interest must be available. (If not, it will print the only thing it can:
"Unknown message number 0xXXXXXXXX".)

With the log file Jochen mentions, svcdumplog worked with and without the
gds msg catalog available on both the 486 and hp (without, it printed
"Unknown message ...").



CR Number                     : 12154
Defect or Enhancement?        : def
CR in Code, Doc, or Test?     : code
Inter-dependent CRs           : 
Project Name                  : dce
H/W Ref Platform              : all
S/W Ref Platform              : all
Component Name                : utils
Subcomponent Name             : svc
Short Description             : dce_svc_log_get() loses message text
Reported Date                 : 9/13/94
Found in Baseline             : 1.1
Found Date                    : 9/13/94
Severity                      : B
Priority                      : 1
Status                        : closed
Duplicate Of                  : 
Fix By Baseline               : 1.1
Fixed In Baseline             : 1.1b18
Affected File(s)              : dce/utils/svc/svclog.c
Sensitivity                   : public

[9/13/94 public]

Using the build of last night and processing svcdumplog for
an arbitrary binary logfile (i.e. gdsdsa) you get:

1994-09-13-08:04:42.110-04:00I----- gdsdsa DEBUG1 gds general d26dsa.c 1588 0xa44d69ac

1994-09-13-08:04:42.130-04:00I----- gdsdsa DEBUG1 gds ipc d23regproc.c 96 0xa44d69ac

1994-09-13-08:04:42.130-04:00I----- gdsdsa DEBUG1 gds ipc d23regproc.c 184 0xa44d69ac

...

The reason is that dce_svc_log_get sets h->prolog.message_text to NULL.
This happens because of line 217 in svclog.c:

if (*status = msg_s_no_default) {

This should be, of course:

if (*status == msg_s_no_default) {

(What happens in gdsstep is that gdsstep dumps core: It just sets

format     = prolog->message_text;
while (*format != '\0')

But this is another story.)

John: I'm tired of debugging serviceability. I know that you are
very, very busy, but: Could you just check carefully if the binary
logging and svcdumplog really work?

If you need a logfile:

gemini:/tmp/JOHN_BOWE

gemini:/tmp/svcdumplog is a "-g" version of last night's build.

[9/13/94 public]
Did as he said.

[09/13/94 public]
Just a stupid question: Have you tested this?

[09/14/94 public]
Fix verified. Works. You can close this.



CR Number                     : 12123
Defect or Enhancement?        : def
CR in Code, Doc, or Test?     : code
Inter-dependent CRs           : 
Project Name                  : dce
H/W Ref Platform              : all
S/W Ref Platform              : all
Component Name                : utils
Subcomponent Name             : isdcepcs()
Short Description             : Out of bounds range checking not complete
Reported Date                 : 9/9/94
Found in Baseline             : 1.1b16
Found Date                    : 9/9/94
Severity                      : A
Priority                      : 1
Status                        : closed
Duplicate Of                  : 
Fix By Baseline               : 1.1
Fixed In Baseline             : 1.1b18
Affected File(s)              : dce/utils/misc/isdcepcs.c
Sensitivity                   : public

[9/9/94 public]

Up front out of bounds range checking for invalid PCS characters
needs to include a check for negative values.  Negative values
can be generated by some compilers which sign extend a char value
(containing a set high order bit, ie. a non-PCS char) when converting
to a (signed) int as is the case for the input parameter to isdcepcs().

Fix is change the following line of code from:
    if (c > (NCHARS-1)) return FALSE;
to:
    if (c > (NCHARS-1) || c < 0) return FALSE;

Per Rich Salz's request, I am assigning this OT to me and will 
submit the above described fix.

[9/16/94 public]
Made the change above.



CR Number                     : 12098
Defect or Enhancement?        : def
CR in Code, Doc, or Test?     : code
Inter-dependent CRs           : 
Project Name                  : dce
H/W Ref Platform              : hppa,rs6000
S/W Ref Platform              : hpux,aix
Component Name                : utils
Subcomponent Name             : svc
Short Description             : NL_CAT_LOCALE not defined in msginqcma.c
Reported Date                 : 9/8/94
Found in Baseline             : 1.1b16
Found Date                    : 9/8/94
Severity                      : A
Priority                      : 0
Status                        : closed
Duplicate Of                  : 
Fix By Baseline               : 1.1
Fixed In Baseline             : 1.1b17
Affected File(s)              : dce/utils/svc/msginqcma.c
Sensitivity                   : public

[9/8/94 public]
The symbol NL_CAT_LOCALE is not defined in msginqcma.c.  (OK
in OSF1, tho...)  Simple fix.

[9/8/94 public]
#define'd it, if not already defined.

[9/12/94 public]
Worked. Closing.



CR Number                     : 12096
Defect or Enhancement?        : def
CR in Code, Doc, or Test?     : test
Inter-dependent CRs           : 
Project Name                  : dce
H/W Ref Platform              : all
S/W Ref Platform              : all
Component Name                : utils
Subcomponent Name             : attr
Short Description             : The generic schema i/f fvt need to be changed to reflect the changes on dced server xattrschema
Reported Date                 : 9/7/94
Found in Baseline             : 1.1b16
Found Date                    : 9/7/94
Severity                      : C
Priority                      : 1
Status                        : closed
Duplicate Of                  : 
Fix By Baseline               : 1.1
Fixed In Baseline             : 1.1b17
Affected File(s)              : dce_attr_sch_fvt.h
Sensitivity                   : public

[9/7/94 public]
dced xattrschem create operation has been fixed to check the
input fields of a schema_entry to be created. The functional tests
need to be modified to match with the changes because fvt is 
written on the dced xattrschema implementation.

[9/9/94 public]
Submitted.



CR Number                     : 12079
Defect or Enhancement?        : enh
CR in Code, Doc, or Test?     : code
Inter-dependent CRs           : 
Project Name                  : dce
H/W Ref Platform              : all
S/W Ref Platform              : all
Component Name                : utils
Subcomponent Name             : svc
Short Description             : env var to not use cats
Reported Date                 : 9/7/94
Found in Baseline             : 1.1b16
Found Date                    : 9/7/94
Severity                      : D
Priority                      : 3
Status                        : closed
Duplicate Of                  : 
Fix By Baseline               : 1.1
Fixed In Baseline             : 1.1b17
Affected File(s)              : dce/utils/svc/{msgxpgcat.c,msgpthread.c,msgimpl.h}
Sensitivity                   : public

[9/7/94 public]
The dcecp team usually deletes the dcedcp.cat message catalog when we
install DCE.  This is so we don't end up getting old messages as we modify
the program/catalog.  Even with scripts that do this we often forget and
end up with old message catalogs.  These cause errors that often take a
while to track down.  They just aren't obvious, we lost 3 hours to one of
these situations this week.

How about an environment variable we could set that causes svc to only look
in the incore table?  It should be in an #ifdef DCE_DEBUG.  Something like
the variable SVC_NOXPGCAT to return failures on all "retrieve message from
catalog" calls.

[9/7/94 public]
The env variable is "SVC_NOXPGCAT". Set it to 1 (non-zero, actually) to
force access to the msg catlog to fail (and hence, use the in-core table).
More precicely/technically, if set, dce_msg_get_cat_msg() will always return
with msg_s_not_found.

[9/12/94 public]
Works. Closed.



CR Number                     : 12067
Defect or Enhancement?        : def
CR in Code, Doc, or Test?     : code
Inter-dependent CRs           : 
Project Name                  : dce
H/W Ref Platform              : all
S/W Ref Platform              : all
Component Name                : utils
Subcomponent Name             : svc
Short Description             : dce_msg__inq_comp not threadsafe
Reported Date                 : 9/7/94
Found in Baseline             : 1.1b15
Found Date                    : 9/7/94
Severity                      : B
Priority                      : 1
Status                        : closed
Duplicate Of                  : 
Fix By Baseline               : 1.1
Fixed In Baseline             : 1.1b18
Affected File(s)              : dce/utils/svc/{dce_msg.h
					msggetmsg.c msgxpgcat.c svcdumplog.c}
Sensitivity                   : public

[9/7/94 public]

dce_svc__inq_comp_name returns a pointer to an internal static buffer.
This isn't threadsafe.

[09/07/94 public]
I'll fix this as part of fixing 10474.

[9/7/94 public]
I guess you mean dce_msg__inq_comp()...

[09/13/94 public]
Yeah, I meant that.  Fixed by having all callers pass in the buffer
that dce_msg__inq_comp writes into.



CR Number                     : 12049
Defect or Enhancement?        : def
CR in Code, Doc, or Test?     : code
Inter-dependent CRs           : 
Project Name                  : dce
H/W Ref Platform              : all
S/W Ref Platform              : all
Component Name                : utils
Subcomponent Name             : svc
Short Description             : remove obsolete functions: dce_svc_log_get_arg(), dce_svc_log_rewind_arg()
Reported Date                 : 9/6/94
Found in Baseline             : 1.1b15
Found Date                    : 9/6/94
Severity                      : C
Priority                      : 1
Status                        : closed
Duplicate Of                  : 
Fix By Baseline               : 1.1
Fixed In Baseline             : 1.1b17
Affected File(s)              : dce/utils/svc/svclog.c
Sensitivity                   : public

[9/6/94 public]
Remove obsolete/unused functions: dce_svc_log_get_arg(),
dce_svc_log_rewind_arg() dce_svc_log_seek() and dce_svc_log_tell(). (With
the svc changes made in May, they are not needed.)

Grep shows that dce_svc_log_seek() and dce_svc_log_get_arg() only appear in
directory/gds/step/gstep.c (though the call to dce_svc_log_seek() is
commented out in the src).  dce_svc_log_rewind_arg() and dce_svc_log_tell()
are never used.

"gdsstep" calls dce_svc_log_get_arg().  It should use the same method to
process the args as svcdumplog, which is how the svc documentation advises
(or will advise) acessing the individual args.

(I sent mail about all the above about a month ago, so this should not be
a surprise.)

If svcdumplog does what you need, perhaps you GDS guys should abandon
"gdsstep"?  The same "public domain" restrictions on the svc library apply
to svcdumplog, so you should have no problem shipping it.

[09/06/94 public]
I have no idea why you call dce_svc_log_get_arg obsolete if gds is using it
but ... OK. If you think this function has to be removed then you
will have reasons.
As a first step I will rename this function and put it into gdsstep -
I hope you don't care.
I'll do it now - so you (John Bowe) should be able to remove
dce_svc_log_get_arg from SVC tomorrow. OK?

(We will continue to use gdsstep because: I.e. we dump binary data like
messages. gdsstep converts these messages into readable form.)

[09/06/94 public]
gdsstep changes submitted. So: Go ahead and remove whatever you want
to remove. (Don't remove svcimpl.h: we include it now ...)

[09/06/94 public]
Whoa!

Things went way too fast here.

I would rather see dce_svc-log_get_arg, or whatever GDS needs, stay.
Including svcimpl.h is bad, verybad.

[09/06/94 public]
What do we do now? I didn't want to remove dce_svc_log_get_arg!!
Who will decide? Bill Clinton? Li Peng?

[9/6/94 public]
We'll have to hold a town meeting to decide.

But remember this, Jochen:  we feel your pain....

[9/6/94 public]
Removed the mentioned functions.  (Also adjusted the apropriate
code in GDS (gds/step/*) to be more correct.)

And who is Li Peng?  (I'm big enough to admit that I don't know...)



CR Number                     : 12037
Defect or Enhancement?        : def
CR in Code, Doc, or Test?     : code
Inter-dependent CRs           : 
Project Name                  : dce
H/W Ref Platform              : all
S/W Ref Platform              : all
Component Name                : utils
Subcomponent Name             : svc
Short Description             : svcdumplog dumps core in dce_svc_log_get()
Reported Date                 : 9/2/94
Found in Baseline             : 1.1b16
Found Date                    : 9/2/94
Severity                      : A
Priority                      : 0
Status                        : closed
Duplicate Of                  : 
Fix By Baseline               : 1.1
Fixed In Baseline             : 1.1b17
Affected File(s)              : dce/utils/svc/svclog.c
Sensitivity                   : public

[9/2/94 public]

From NB0901 on a GDS binary log file:

Record-all is ON, overwriting "svcdumplog.trace"
>t
 0 strcpy@libc + 0x00000008 (hp-ux export stub)
 1 dce_strdup@libdce (p =   00000000)    [/project/dce/build/dce1.1-snap/src/dce/utils/misc/strdup.c: 44]
 2 dce_svc_log_get@libdce + 0x00000388 (0x400865e8, 0x7b033414, 0x7b03340c, 0)
 3 main + 0x000001e4 (0x1, 0x7b03329c, 0, 0)
>q
Really quit? y

[9/2/94 public]
Now check for null being passed to dce_strdup().

It's a totally different question why a null is getting there for the
format string (message text) to begin with.  You'd have to go out of your
way to do that, I think.

[9/6/94 public]
Works in last night's build. Closing.



CR Number                     : 12006
Defect or Enhancement?        : def
CR in Code, Doc, or Test?     : code
Inter-dependent CRs           : 
Project Name                  : dce
H/W Ref Platform              : all
S/W Ref Platform              : all
Component Name                : utils
Subcomponent Name             : svc
Short Description             : too brief
Reported Date                 : 9/1/94
Found in Baseline             : 1.1b17
Found Date                    : 9/1/94
Severity                      : A
Priority                      : 1
Status                        : closed
Duplicate Of                  : 
Fix By Baseline               : 1.1
Fixed In Baseline             : 1.1b17
Affected File(s)              : dce/utils/svc/svcprintf.c
Sensitivity                   : public

[9/1/94 public]

SVC messages are always coming out in "brief" mode right now.
    /* If not brief and not debug-globally brief, print the prolog. */
    if ((prolog->attributes & svc_c_action_brief) == 0
     || (dce_svc_g_brief != 0 && (prolog->attributes & svc__c_debugmask) != 0))
	; /* Do nothing */
    else
	/* print the prolog */

The "== 0" should be "!= 0"

[9/6/94 public]
Rich fixed this.



CR Number                     : 11977
Defect or Enhancement?        : def
CR in Code, Doc, or Test?     : code
Inter-dependent CRs           : 
Project Name                  : dce
H/W Ref Platform              : all
S/W Ref Platform              : all
Component Name                : utils
Subcomponent Name             : sams
Short Description             : Change output format for "sams -op"
Reported Date                 : 8/31/94
Found in Baseline             : 1.1doc
Found Date                    : 8/31/94
Severity                      : A
Priority                      : 1
Status                        : closed
Duplicate Of                  : 
Fix By Baseline               : 1.1
Fixed In Baseline             : 1.1b19
Affected File(s)              : tools/sams/sams.c
Sensitivity                   : public

[8/31/94 public]

The current output of the sams compiler for the Problem Determination Guide
puts information about each field on a separate line.  As a result, the PDG
is currently over 1000 pages long and growing.  This page count will cause
problems, and can be reduced by tightening up the format.  Also, there
appear to be a couple of errors in the current output of the compiler.  I
request the following.  I know much of this ain't exactly semantic, but....

1) Output the SAMS Severity, Component, and Subcomponent field values on a
single line, following the initial line for the message.  If possible, the
formatting should be done so that these three fields are always aligned in
the same place.  My troff is rusty enough that the following example may
not be entirely correct, but it should give an idea:

Set the tabs something like the following.  I have't tried this out so the
values probably need tweaking.  I use ^I in the example to indicate tabs.
It may also be necessary to shorten Subcomponent: to Subcomp: to make
things fit.  (We don't care what it looks like in ascii format, only in the
PostScript output.)

	.ta 1.2i 2i 3.2i 4i 5.2i
 
then each entry would look somewhat like:

	.LI\*L0x14601017\*O	\*Lacl_s_bad_manager_type\*O
	.nL
	.in somethingoranother to make it work right
	\*LSeverity:\*O^IVaries^I\*LComponent:\*O^Ilib^I\*LSubcomponent:\*O^IVaries
	.in another somethingoranother
	.VL \n(!cu
	.LI\*LText:\*O
	Bad manager type parameter to dce_acl_register_object_type()
	.LI\*LExplanation:\*O
	The manager type passed to \e*Ldce_acl_register_object_type()\e*O
	is invalid or missing.
	.LI\*LAction:\*O
	Call \e*Ldce_acl_register_object_type()\e*O with correct parameter.
	.LE
	.in -n(!bu
	.sp 2
	
2) Modify the sams compiler so that when there is no subcomponent field, it
outputs "Varies" rather than "Multiple subcomponents can issue this
message".

3) Modify the sams compiler so that when there is no severity field, it
outputs "Varies" Rather than "Severity is dependent upon the
subcomponent issuing the message".  (I decided that using varies for both
fields makes most sense, we can explain more in the Preface, if anyone
disagrees, please tell me.)

4) Change the troff formatting so that error number is aligned flush at the
page image left hand margin (i.e., with the start of the left footer) and
the remainder of the text is moved over an equivalent amount 

5) Change the tag indent used for the Text, Explanation, and Action entries
to close the text up with the tag, now that the long Subcomponent: tag is
gone.  As a first try I'd reset .nr !c to 12n, but 13n may be necessary.

6) If possible, reduce the separation between the end of an error entry and
the next error number.  It is currently about 1/2 in, and could easily be
only 3/8 in.

7) Fix the compiler so that it does not emit a spurious "e" following the \
in the .sams text, explanation, and action fields.  Currently the required
font changes (e.g., bolding) does not occur and you see '\*L' and '\*O' in
the printed book.

8) Fix the comment leader used in the output file to be '...\" ' not '.\" '

[hal 9/2/94 public] 
Per my discussion with Bob H., I am increasing the Severity/Priority to A1.

[9/16/94 public]
Did pretty much as outlined above. (met end result, not necessarily
following the methods exactly.)  Output looks good (and the writer
thinks so, too).



CR Number                     : 11931
Defect or Enhancement?        : def
CR in Code, Doc, or Test?     : code
Inter-dependent CRs           : 
Project Name                  : dce
H/W Ref Platform              : all
S/W Ref Platform              : all
Component Name                : utils
Subcomponent Name             : misc
Short Description             : add dce_gettimeofday
Reported Date                 : 8/28/94
Found in Baseline             : 1.1
Found Date                    : 8/28/94
Severity                      : C
Priority                      : 1
Status                        : closed
Duplicate Of                  : 
Fix By Baseline               : 1.1
Fixed In Baseline             : 1.1b17
Affected File(s)              : dce/utils/misc/gettime.c,dce_utils.h
Sensitivity                   : public

[8/28/94 public]

Just a code-cleanup issue:  Create dce_gettimeofday() which is a wrapper
around the standard gettimeofday call, or the SVR4 version which only takes
one parameter.  The wrapper, of course, only takes on parameter.

[08/28/94 public]
Code submitted.   Changed dced to use it.

[08/31/94 public]
Add PortGuide writer.



CR Number                     : 11929
Defect or Enhancement?        : def
CR in Code, Doc, or Test?     : code
Inter-dependent CRs           : 
Project Name                  : dce
H/W Ref Platform              : all
S/W Ref Platform              : all
Component Name                : utils
Subcomponent Name             : svc
Short Description             : implement DCE RFC 24.2
Reported Date                 : 8/27/94
Found in Baseline             : 1.1
Found Date                    : 8/27/94
Severity                      : A
Priority                      : 1
Status                        : closed
Duplicate Of                  : 
Fix By Baseline               : 1.1
Fixed In Baseline             : 1.1b21
Affected File(s)              : sams/*, dce/utils/svc/msg*
Sensitivity                   : public

[8/27/94 public]

Oops -- I forgot to open this OT so that this work was done by the
functional freeze.  We must implement RFC 24.2 so that ISV's can add
serviceability to their applications.

[9/8/94 public]

Added dce-syseng to CC list.

[09/30/94 public]
Submitted modified SAMS to generate ISV-style codes.
Still need to test & submit the dce/utils/svc/msg* half.

[09/30/94 public]
Submitted the MSG half.  Fixed.



CR Number                     : 11885
Defect or Enhancement?        : def
CR in Code, Doc, or Test?     : code
Inter-dependent CRs           : 12089
Project Name                  : dce
H/W Ref Platform              : all
S/W Ref Platform              : all
Component Name                : utils
Subcomponent Name             : svc
Short Description             : need non-threaded dce_error_inq_text
Reported Date                 : 8/25/94
Found in Baseline             : 1.1
Found Date                    : 8/25/94
Severity                      : A
Priority                      : 1
Status                        : closed
Duplicate Of                  : 
Fix By Baseline               : 1.1
Fixed In Baseline             : 1.1b17
Affected File(s)              : dce/utils/svc/msginqcma.c, etc.
Sensitivity                   : public

[8/25/94 public]
Threads needs to call dce_error_inq_text to process its messages. We need
a version that can be safely called from threads. It should not result
in threads operation either directly or through the invocation of wrappers.

[9/7/94 public]
Implemented dce_cma_error_inq_text().  Behaves like dce_error_inq_text()
except that it's hard-wired to deal with dce threads (tech=dce,comp=thd)
messages only.  Change depends on dcethdmsg.[ch] being in the right places.
(.h exported, .o being in libdce); thd.sams exists in ./threads.



CR Number                     : 11879
Defect or Enhancement?        : def
CR in Code, Doc, or Test?     : code
Inter-dependent CRs           : 
Project Name                  : dce
H/W Ref Platform              : all
S/W Ref Platform              : all
Component Name                : utils
Subcomponent Name             : dcecf
Short Description             : dce_cf_get_host_name() dumps core
Reported Date                 : 8/25/94
Found in Baseline             : 1.1b16
Found Date                    : 8/25/94
Severity                      : A
Priority                      : 0
Status                        : closed
Duplicate Of                  : 
Fix By Baseline               : 1.1
Fixed In Baseline             : 1.1b17
Affected File(s)              : dce/utils/dcecf/dce_cf.c
Sensitivity                   : public

[8/25/94 public]
Calling dce_cf_get_{cell,host}_name() dumps core.  But only if
the "cellaliases" line is missing from "dce_cf.db".

Workaround:  Add a line like this to /opt/dcelocal/dce_cf.db
(left-justified, of course):
	cellaliases xxx

[8/25/94 public]
Better error checking when reading file (It should be OK if cellaliases
are not there).

[08/27/94 public]
The cell configures now, so closing this.



CR Number                     : 11860
Defect or Enhancement?        : def
CR in Code, Doc, or Test?     : code
Inter-dependent CRs           : 
Project Name                  : dce
H/W Ref Platform              : i486
S/W Ref Platform              : osf1
Component Name                : utils
Subcomponent Name             : svc
Short Description             : svcdumplog doesn't work
Reported Date                 : 8/24/94
Found in Baseline             : 1.1
Found Date                    : 8/24/94
Severity                      : A
Priority                      : 0
Status                        : closed
Duplicate Of                  : 
Fix By Baseline               : 1.1
Fixed In Baseline             : 1.1b17
Affected File(s)              : dce/utils/svc/{svcbin.idl,svclog.c}
Sensitivity                   : public

[8/24/94 public]

If you run svcdumplog for an arbitrary binary logfile (i.e. from gdsdsa)
on AT386 you get about 120 correct lines - then svcdumplog hangs,
and the screen is full of "internal thread problem" stuff.
You can kill svcdumplog then only with "kill -9".

The output from svcdumplog on stdout ends with

**** Assertion failure. cma__Queue_insert: Q corruption
     at line 1884 in /project/dce/build/dce1.1-snap/src/threads/cma_dispatch.c p
id = 14670

(cma_dump.log is also written.)

FYI: gdsstep dumps core already in the first call of dce_svc_log_get.
I have debugged it: I can't see any problem in gdsstep.

So I think that OT 11841 is related to this OT: There is some
memory corruption in SVC, and after a while it dumps core  or
corrupts queues in threads.

[08/31/94 public]
Any news on that? 
It's really urgent: How can I debug problems i.e. in gds system tests 
without having a working serviceability?
(I would compare it with the situation that you have no editor 
on your machine. Sorry if this comparism is too hard.)

[8/31/94 public]
I now used "[string] char progname" in the structure instead of
[ref,string].  Also did better checking in several places.

I won't mark this as closed until SNI tries it. (probably at next
baseline)  Jochen, please let me know.



CR Number                     : 11843
Defect or Enhancement?        : def
CR in Code, Doc, or Test?     : code
Inter-dependent CRs           : 
Project Name                  : dce
H/W Ref Platform              : all
S/W Ref Platform              : all
Component Name                : utils
Subcomponent Name             : dcecf
Short Description             : implement dce_cf_get_cell_aliases() and dce_cf_same_cell_name()
Reported Date                 : 8/24/94
Found in Baseline             : 1.1b14
Found Date                    : 8/24/94
Severity                      : A
Priority                      : 1
Status                        : closed
Duplicate Of                  : 
Fix By Baseline               : 1.1
Fixed In Baseline             : 1.1b17
Affected File(s)              : dce/utils/dcecf/dce_cf.[ch]
Sensitivity                   : public

[8/24/94 public]
Implement dce_cf_get_cell_aliases(), dce_cf_free_cell_aliases(), and
dce_cf_same_cell_name().  [dcecp folks need these this week, hence A1.]

[8/24/94 public]
Done as above.

[8/31/94 public]
Some recent mail from Joe Pato says:

    This function should use the RPC_NS equivalent call (shouldn't be
    CDS calls all over the place...)

This means we should use rpc_ns_entry_expand_name().  I'll do that soon.

[8/31/94 public]
Did that.



CR Number                     : 11827
Defect or Enhancement?        : def
CR in Code, Doc, or Test?     : doc
Inter-dependent CRs           : 
Project Name                  : dce
H/W Ref Platform              : all
S/W Ref Platform              : all
Component Name                : utils
Subcomponent Name             : app_ref
Short Description             : dce_cf routines erroneously
say "use lowercase in hostnames"
Reported Date                 : 8/23/94
Found in Baseline             : 1.1doc
Found Date                    : 8/23/94
Severity                      : B
Priority                      : 1
Status                        : closed
Duplicate Of                  : 
Fix By Baseline               : 1.1
Fixed In Baseline             : 1.1doc
Affected File(s)              : dce_cf_intro.3dce,
dce_cf_binding_entry_from_host.3dce, dce_cf_get_cell_name.3dce,
dce_cf_prin_name_from_host.3dce, dce_cf_profile_entry_from_host.3dce
Sensitivity                   : public

[8/23/94 public]

The man pages for dce_cf routines that take host names as input
erroneously say that you should use lowercase when specifying them.
Host names are actually case-sensitive. The man pages need to
be corrected to say that host names are case sensitive.

Assigned this CR to myself, since I own the dce_cf pages.

[08/27/94 public]
It should also not say anything about the case of cellnames.

[9/15/94 public]

Fixed and verified (verified by me).

[09/22/94 public]
Closed bug.



CR Number                     : 11806
Defect or Enhancement?        : def
CR in Code, Doc, or Test?     : code
Inter-dependent CRs           : 
Project Name                  : dce
H/W Ref Platform              : all
S/W Ref Platform              : all
Component Name                : utils
Subcomponent Name             : dce_cf
Short Description             : don't downcase DCE hostname
Reported Date                 : 8/22/94
Found in Baseline             : 1.1
Found Date                    : 8/22/94
Severity                      : A
Priority                      : 2
Status                        : closed
Duplicate Of                  : 
Fix By Baseline               : 1.1
Fixed In Baseline             : 1.1b17
Affected File(s)              : dce/utils/dcecf/dce_cf.c
Sensitivity                   : public

[8/22/94 public]
According to various DCE architects, DCE hsotnames are case sensitive.
So these lines should be removed from dce_cf.c:

        for (p = (char *)dce_cf_g_cellname; *p; p++)
                if (isupper(*p))
                    *p = tolower(*p);

[8/24/94 public]
What he said.  Don't downcase it.

[9/2/94 public]
Works. Closing.



CR Number                     : 11790
Defect or Enhancement?        : enh
CR in Code, Doc, or Test?     : code
Inter-dependent CRs           : 
Project Name                  : dce
H/W Ref Platform              : all
S/W Ref Platform              : all
Component Name                : utils
Subcomponent Name             : editline
Short Description             : TAB should understand ~'s
Reported Date                 : 8/19/94
Found in Baseline             : 1.1b15
Found Date                    : 8/19/94
Severity                      : D
Priority                      : 4
Status                        : closed
Duplicate Of                  : 
Fix By Baseline               : 1.1
Fixed In Baseline             : 1.1b17
Affected File(s)              : dce/utils/misc/complete.c
Sensitivity                   : public

[8/19/94 public]
It would be nice if editlines filename completion function understood csh's
tilde notation.

[08/20/94 public]
and it would be "nice" if it emulated other editors (vi), scrolled long lines,
etc., etc.  Space/features trade-off.

[8/21/94 public]
Sorry I had meant to mark this as enh.
I mentioned this one because tcl commands understand ~ and it's somewhat
inconsistent to the user.  dcecp supports "source ~/.dcecprc" but you can't
do completion on "~/.dcec".

[08/28/94 public]
Okay, done.  Controlled via -DEXPAND_TILDE which is turned on by default.
Note that in order to do ESC-? there must be a slash; this is so editline
can know you mean a directory and that you've typed the full username.
That is "~" or "~rs" won't work -- it must be "~rsalz/" or "~/" before
completion will work.

[8/31/94 public]
Works. Closed.



CR Number                     : 11606
Defect or Enhancement?        : def
CR in Code, Doc, or Test?     : code
Inter-dependent CRs           : 
Project Name                  : dce
H/W Ref Platform              : all
S/W Ref Platform              : all
Component Name                : utils
Subcomponent Name             : svc
Short Description             : delimeter for multiple routes should not be space
Reported Date                 : 8/8/94
Found in Baseline             : 1.1b12
Found Date                    : 8/8/94
Severity                      : B
Priority                      : 2
Status                        : closed
Duplicate Of                  : 
Fix By Baseline               : 1.1
Fixed In Baseline             : 1.1b15
Affected File(s)              : dce/utils/svc/svcimpl.h
Sensitivity                   : public

[8/8/94 public]
The delimeter character for multiple svc routes (production messages,
not debug) should be something other than a space.  This makes dcecp
a whole lot easier to implement.

[8/9/94 public]
Changed the #define in svcimpl.h to be ';'.



CR Number                     : 11588
Defect or Enhancement?        : def
CR in Code, Doc, or Test?     : code
Inter-dependent CRs           : 
Project Name                  : dce
H/W Ref Platform              : all
S/W Ref Platform              : all
Component Name                : utils
Subcomponent Name             : svc
Short Description             : dce_error_inq_text uses
invalid data when passed status code of 0
Reported Date                 : 8/8/94
Found in Baseline             : 1.1b13
Found Date                    : 8/8/94
Severity                      : B
Priority                      : 2
Status                        : closed
Duplicate Of                  : 
Fix By Baseline               : 1.1
Fixed In Baseline             : 1.1b15
Affected File(s)              : dce/utils/svc/{msggetmsg.c,svc.sams}
Sensitivity                   : public

[8/8/94 public]

When the error status passed in to dce_error_inq_text is 0, the index
into the vector of technology strings is set to -1 (an invalid
value). The value dce_msg_g_tech_table[-1] is used as a string pointer
in an sprintf statement: this can overwrite memory if a NULL byte
isn't detected.

Proposed solution:

if (status_to_convert == 0) 
{
   status_to_convert = msg_s_ok ;
   tech = 0 ;
}
else {
  tech = ... 
  tech -= TECH_FIRST;
}

[08/10/94 public]
That's won't quite work since "msg_s_ok" is 0.
Probably something like
	if (status_to_convert == 0)
	    status_to_convert = msg_s_ok_text
where msg_s_ok_text is a "dummy" status code in lib.sams

[8/11/94 public]
Did as Rich suggested, plus minor cleanup.



CR Number                     : 11584
Defect or Enhancement?        : def
CR in Code, Doc, or Test?     : code
Inter-dependent CRs           : 
Project Name                  : dce
H/W Ref Platform              : all
S/W Ref Platform              : all
Component Name                : utils
Subcomponent Name             : sams
Short Description             : message catalog not deleted
Reported Date                 : 8/7/94
Found in Baseline             : 1.1
Found Date                    : 8/7/94
Severity                      : B
Priority                      : 1
Status                        : closed
Duplicate Of                  : 
Fix By Baseline               : 1.1
Fixed In Baseline             : 1.1b17
Affected File(s)              : tools/sams/sams.c
Sensitivity                   : public

[8/7/94 public]

sams generates message catalogs using gencat . But before invoking
gencat it does not delete an existing message catalog.  And if 
a message catalog already exists, gencat does not delete it but
'merges' it with the new messges. So if a message number has
changed, the message catalog will contain the old as well the
new message numbers.

sams should probably delete the message catalog ( just like it
does for all the other files ) before invoking gencat.

[08/07/94 public]
Since Bill Sommerfeld changed sams and the common Makefiles perhaps
he could be "persuaded" to fix this.

[8/25/94 public]
Now unlinks the .cat file before running gencat.



CR Number                     : 11542
Defect or Enhancement?        : def
CR in Code, Doc, or Test?     : code
Inter-dependent CRs           : 
Project Name                  : dce
H/W Ref Platform              : all
S/W Ref Platform              : all
Component Name                : utils
Subcomponent Name             : svc
Short Description             : dce_svc_routings() should return all routings
Reported Date                 : 8/3/94
Found in Baseline             : 1.1b13
Found Date                    : 8/3/94
Severity                      : B
Priority                      : 1
Status                        : closed
Duplicate Of                  : 
Fix By Baseline               : 1.1
Fixed In Baseline             : 1.1b21
Affected File(s)              : dce/utils/svc/svcremimpl.c
Sensitivity                   : public

[8/3/94 public]

There are several ways to modify routing specifications:

1) Using dcecp, log modify <server name>

2) Starting a server with the -w option. 
     Ex:
        /opt/dcelocal/bin/dtsd -w ERROR:DISCARD: &

3) Using environment variables.
   For production routings, set SVC_<severity>
     Ex:
        setenv SVC_ERROR ERROR:DISCARD:			 
   For debug routings, set SVC_<component>_DBG
     Ex:
        setenv SVC_DTS_DBG dts:general.1:DISCARD:			 

4) Adding 1 or more routing specifications to the routing file in 
   /opt/dcelocal/var/svc/routing
     Ex:
	ERROR:DISCARD:
	dts:general.1:DISCARD:
   Note that you can use the environment variable DCE_SVC_ROUTING_FILE
   to specify another routing file location.

Sorry for being so verbose, but I don't know if all this information
is documented. 

Now, when an application, like dcecp, uses dce_svc_inq_routings() to
obtain a list of serviceability routing settings for a server, only
routing specifications from #1 and #2 above are returned. 

If users didn't know about the SVC environment varibles and/or the routing
file, they could become very confused if routing specifications
existed via #3 and #4.

I recommend that dce_svc_inq_routings() should return all routings
that the server holds internally, #1 and #2, and any specified via
#3 and #4.

[08/03/94 public]
FYI, the intent was that inq_routings tells you "how things changed
from the defaults."  Users are expected to know about environment
variables and/or the routing file.

Also, note that if someone sets "SVC_WARNING" but the server never
generates a WARNING message, inq_routings will *never* be able to
tell you anything about the possible warning routing.

Similarly, since handles are registered at runtime, even just a simple
"list components" isn't so simple and won't give you everything.

I think this should be cancelled.

[8/3/94 public]
I'll accept what inq_routines was indended, but users should have a way to
find out all the current routings.  I don't think it's reasonable to expect
a user to know about env vars or routing files on other machines.  

As an admin you want to know what the routings are, you don't want to have
to look in three places to find this out.  It's like trying to figure out
how a switch makes it on a compile line in ODE (is it in Makefile,
Makeconf, Buildconf, <comp>.mk, common makefiles, etc.).  Not a model we'd
like to follow.  Is there anything we have time to do to avoid this?

[08/03/94 public]
You can *NEVER* get the list of all components.  Architecturally impossible.

Modifying the code to list routes of all messages isn't hard and could be
done in Sept.

[09/26/94 public]
We should modify the code so that all non-component messages (i.e.,
ERROR, FATAL, etc) are always returned.  Raising priority.  Makes it hard
to set up tests since you can't "clone" a config.

[9/29/94 public]
All production routes are now returned by dce_svc_routings().

Original CR mentioned dce_svc_inq_routings(). Should read dce_svc_routings().

[9/3/94 public]
Works happily in nightly bld.



CR Number                     : 11541
Defect or Enhancement?        : def
CR in Code, Doc, or Test?     : code
Inter-dependent CRs           : 
Project Name                  : dce
H/W Ref Platform              : all
S/W Ref Platform              : all
Component Name                : utils
Subcomponent Name             : sams
Short Description             : converter from IDL Msg format
to SML
Reported Date                 : 8/3/94
Found in Baseline             : 1.1b12
Found Date                    : 8/3/94
Severity                      : B
Priority                      : 1
Status                        : closed
Duplicate Of                  : 
Fix By Baseline               : 1.1
Fixed In Baseline             : 1.1b17
Affected File(s)              : idlmsg2sams.pl
Sensitivity                   : public

[8/3/94 public]

The DCE 1.1 Problem Determination Guide requires IDL error messages,
which (to my understanding) are not in standard SAMS format.  We neet a
converter to create either standard SAMS files from the IDL message files,
or generate SML input for the Problem Determination Guide directly.
I have classified this as priority B1 because the DCE 1.1 documentation
cannot be completed without this.

[8/5/94 public]
Seems to me that the better solution is to have the IDL messages converted
to .sams in the source tree, like every other component has (or at least
should have).  If that's the case, then it's an RPC/IDL issue, not utils.

And exactly which IDL messages are you talking about?  Just the one
file: rpc/idl/idl_compiler/nidlmsg.m?

[08/05/94 public]
IDL is not going to use SAMS for 1.1 so we need a "one-shot"
translator.

[8/8/94 public]
OK, some questions (dunno who would answer these):
Is this a local-only program, where we don't care if it doesn't work outside
OSF?  Can it be idl-specific? (from that .m file, you can't tell what the .sams
header-type stuff is.)  OK to write in perl?

[08/27/94 public]
John, you've written this, right?  Put the script into the sams directory.
I assume we need to document this somewhere.  Where, Hal?

[8/29/94 public]
The process for generating the problem determination guide from the .sams 
files plus the other bits and pieces is located in the README in the top
level of the prob_gd doc tree.  This README will need to be updated to
include the process for generating the IDL input to the prob_gd.  BTW, if
this script is ONLY used for the prob_gd, would you prefer to keep it in
the sams directory or to put it into the prob_gd directory?  (I've also
added the prob_gd writer to the interest list.)

[9/1/94 public]
I think the best place is with the other prog_gd stuff.  (Plus, if it
lives with sams, people will think it's supported.)  There are other
things for combining pieces for the book there also, right?

A copy of what I wrote is in: /users/bowe/idlmsg2sams.pl.  Would one
of the writers (Susan, I guess) try it?  (Usage is in the file.)

[9/12/94 public]
Susan took a copy of "idlmsg2sams.pl" (I don't know what she named it),
and it does what she wants.

It's up to the doc people to keep this program where they want it.

I'll close this after re-checking that Susan is happy with what is
generated.

[9/12/94 public]
Susan is happy, that part of the PDG is happy, and so am I.



CR Number                     : 11521
Defect or Enhancement?        : def
CR in Code, Doc, or Test?     : code
Inter-dependent CRs           : 
Project Name                  : dce
H/W Ref Platform              : rs6000
S/W Ref Platform              : aix
Component Name                : utils
Subcomponent Name             : svc
Short Description             : core dump in dce_svc__close_routes
Reported Date                 : 8/2/94
Found in Baseline             : 1.1
Found Date                    : 8/2/94
Severity                      : A
Priority                      : 0
Status                        : closed
Duplicate Of                  : 
Fix By Baseline               : 1.1
Fixed In Baseline             : 1.1b14
Affected File(s)              : dce/utils/svc/svcroute.c
Sensitivity                   : public

[8/2/94 public]

Programs sometimes core dump in "dce_svc__close_routes" when called by
"dce_svc_debug_routing" in the initialization phase.
(This did happen on RIOS with gdsipcchk.)

This is the very first call of "dce_svc__close_routes". The parameter "rb"
is a component of the handle, which has not been initialized. So the value
of rb->nroutes is accidentally. If the value is 0 nothing happens. But if
the value is > 0 uninitialized data are accessed which causes the core dump.

The memory for the handle is allocated by "dce_svc_register"; there also
some data are initialized. The component routes.nroutes should be initialized
with 0 there.

[8/2/94 public]
The handle is indeed initialized properly in dce_svc_register().  (I.e., the
routes (and h->routes.nroutes and h->routes.routes), are NULLed.)  This line
does it:
	*h = nilhandle;
where nilhandle is a static, and hence all NULL.  (I confirmed this with dbx
on the rios and gdb on 486.)

However, dce_svc_debug_routing() is doing something wrong that causes a core
dump in a test program.  It's clobbering a piece of the route (a string)
passed to it.  When that string is written to (with "*p = '\0';"), it dumps.
I call dce_svc_debug_routing("abcd:*.1:STDERR:-", &st).  OSF/1 does not care
if you do this.  AIX doesn't like you to touch its static strings...
dce_svc_routing() makes a copy of the route, then mucks with it.  I changed
dce_svc_debug_routing() to do the same.

Jochen, please let me know if this solves your problem.

[08/03/94 public]
Sounds good. Unfortunately we work only on baselevels - so we have to 
wait for bl-14 to verify your fix.
Please don't close this OT before.

[8/23/94 public]
SNI reports that it no longer dumps core.  Closing.



CR Number                     : 11512
Defect or Enhancement?        : enh
CR in Code, Doc, or Test?     : code
Inter-dependent CRs           : 
Project Name                  : dce
H/W Ref Platform              : all
S/W Ref Platform              : all
Component Name                : utils
Subcomponent Name             : svc
Short Description             : Should be a way to turn on brief debug messages
Reported Date                 : 8/1/94
Found in Baseline             : 1.1
Found Date                    : 8/1/94
Severity                      : B
Priority                      : 2
Status                        : closed
Duplicate Of                  : 
Fix By Baseline               : 1.1
Fixed In Baseline             : 1.1b17
Affected File(s)              : svcpthread.c, svcimpl.h, svcprintf.c
Sensitivity                   : public

[8/1/94 public]

It would be helpful to add an environment variable to turn off
the (often annoying) time/date/other-stuff in front of the
debug messages.

Something simple will be fine, even undocumented.
	SVC_DBG_BRIEF=1

I realize you can do this from the sams file, but this means
re-compiling code, which is non-optimal.

And since there is some way to turn this off already, should
be a real simple to add a 'getenv()' call!

[08/02/94 public]
This is an enhancement, not a defect, but could probably be done
this way without too much work.  Add "boolean32 svc_g_brief = FALSE;"
to svcpthread.c (put an initializer so you can patch executables with
adb or emacs).  Add something like
	if ((p = getenv("SVC_BRIEF")) != NULL) svc_g_brief = atoi(p);
to the setup_mutex routine in svcpthread.c  Then in svcprintf.c
change this line;
    if ((prolog->attributes & svc_c_action_brief) == 0) {
to
    if ((prolog->attributes & svc_c_action_brief) == 0 && !svc_g_brief) {

[08/27/94 public]
Submitted the above changes.

[9/6/94 public]
Change works.
Note: the env variable only affects debug messages, not production.



CR Number                     : 11502
Defect or Enhancement?        : def
CR in Code, Doc, or Test?     : code
Inter-dependent CRs           : 
Project Name                  : dce
H/W Ref Platform              : all
S/W Ref Platform              : all
Component Name                : utils
Subcomponent Name             : svc
Short Description             : can't compile with -DDCE_ASSERT
Reported Date                 : 8/1/94
Found in Baseline             : 1.1b13
Found Date                    : 8/1/94
Severity                      : A
Priority                      : 1
Status                        : closed
Duplicate Of                  : 
Fix By Baseline               : 1.1
Fixed In Baseline             : 1.1b14
Affected File(s)              : dce/utils/svc/svcprintf.c
Sensitivity                   : public

[8/1/94 public]
There are some typo's in dce_assert() calls inside the SVC code.

[08/01/94 public]
Changed "dce_assert(h," to "dce_assert(handle," etc.
Fixed.

[8/5/94 public]
Works. Closed.



CR Number                     : 11468
Defect or Enhancement?        : def
CR in Code, Doc, or Test?     : code
Inter-dependent CRs           : 
Project Name                  : dce
H/W Ref Platform              : all
S/W Ref Platform              : all
Component Name                : utils
Subcomponent Name             : svc
Short Description             : dce_svc__really_debug_set_levels() clobbers input string
Reported Date                 : 7/28/94
Found in Baseline             : 1.1
Found Date                    : 7/28/94
Severity                      : B
Priority                      : 1
Status                        : closed
Duplicate Of                  : 
Fix By Baseline               : 1.1
Fixed In Baseline             : 1.1b21
Affected File(s)              : dce/utils/svc/svcroute.c
Sensitivity                   : public

[7/28/94 public]

dce_svc_routings doesn't return the correct actual routing.

"dce_svc_bin_log" changes the routing specification strings, that are stored
in "dce_svc_g_memory". In fact it inserts some Null bytes. When these
strings are read with "dce_svc_routings", they have become invalid.

"dce_svc_bin_log" calls "dce_svc__debug_fillin", this calls "dce_svc__get",
which returns a pointer to the "flags" segment of the routing specification
string, that is stored in "dce_svc_g_memory". Then
"dce_svc__really_debug_set_levels" is called with the flags as parameter.
Within this function null bytes are inserted into the string
(line 476: *next++ = '\0'; and 481: *level++ = '\0';).

[8/2/94 public]
In dce_svc__really_debug_set_levels(), make a copy of the flag param and
free it when done.

I changed the short description to reflect what's really happening.

[08/03/94 public]
Sounds good. Unfortunately we work only on baselevels - so we have to 
wait for bl-14 to verify your fix.

[08/23/94 public]
Still doesn't work. What you have corrected is: You duplicate the string now
in dce_svc_debug_routing. You have to do the same in dce_svc__debug_fillin.
We are blocked by this OT because we want to submit the DSA changes
(OT 11802) but need a working dce_svc_routings.
Please fix this as far as possible - I'll integrate this (svcroute.c)
then in our copy of bl-15 and test it again.
Ernst is just trying a local fix in his sandbox - if it works we'll send
you the fix.

[8/23/94 public]
Jochen sent me a fix that worked - just duping a string at the right place.
Submitted.

[09/29/94 public]
Reopened. dce_svc__debug_fillin still clobbers string.
It's line 678 in svcroute.c: Before this line I have

flags = "*.0:BINFILE.2.2000:/tmp/jk%d"

- after this line  I have

flags = "*.0"

[09/30/94 public]
John: You have introduced our proposal

freeme = p = dce_strdup(p);

at the wrong place.

What we proposed was:

if ((p = dce_svc__get(handle->component_name)) == NULL) {

...

}

else {
  freeme = p = dce_strdup(p);
}

You added this line in the if-part. So the strdup is not called - so
p is still clobbered.

[9/3/94 public]
OK, I see where I missed it.  What you said should be done both in
dce_svc__fillin() and dce_svc__debug_fillin().  Also, in dce_svc__debug_fillin
there was an extra "freeme = p = dce_strdup(p);" in this construct:

	    if ((p = dce_svc__linefor(handle->component_name)) == NULL)
		/* No -- use defaults. */
		return TRUE;
	    freeme = p = dce_strdup();

(I don't remember if that's what I added last month.) dce_svc__linefor()
returns an allocated copy of the thing (hence, a mem leak).

Just to be sure, I'll send you a copy of the (hopefully) fixed file
right now.

[9/3/94 public]
Duping and freeing the routing string in the right places, finally.



CR Number                     : 11463
Defect or Enhancement?        : enh
CR in Code, Doc, or Test?     : code
Inter-dependent CRs           : 
Project Name                  : dce
H/W Ref Platform              : all
S/W Ref Platform              : all
Component Name                : utils
Subcomponent Name             : svc
Short Description             : dce_svc_printf() and dce_svc__debug() are not cancel-safe.
Reported Date                 : 7/27/94
Found in Baseline             : 1.1b12
Found Date                    : 7/27/94
Severity                      : E
Priority                      : 4
Status                        : closed
Duplicate Of                  : 
Fix By Baseline               : 1.1
Fixed In Baseline             : 1.1b14
Affected File(s)              : dce/utils/svc/{dceprintf,svcprintf,svcroute}.c
Sensitivity                   : public

[7/27/94 public]

The rpc runtime must be cancel-safe. All of the cancellation points in the
rpc runtime are carefully handled by TRY/CATCH for forwarding the cancel,
postponing it, etc. The serviceability routines introduced the random
cancellation points in the rpc runtime and if the cancel gets raied in one
of them, it will certainly break the rpc runtime. There are a few solutions
for this problem:

1) Disable the general cancelability before calling the serviceability
routines and restore it after returning.

This is how the dce 1.0.3 rpc__printf()::rpcdbg.c got fixed. However, it
may create an un-cancellable thread.

2) Do TRY/CATCH for all calls to the serviceability routines.

Too expensive! If the serviceability routines are not doing their own
cleanup for the cancellation, the next call into the serviceability routine
may not work as expected.

3) Make the serviceability routines cancel-safe.

Please... It should be easier than the rpc runtime's because there is no
remote forwarding, only postponing. (Right now, it's only rpc runtime who
cares it, but there can be more in future.)

4) Abandon the serviceability routines and go back to the good old
RPC_DEBUG :-)

Currently, using SVC_RPC_DBG routed to a slow IO device is no no,
especially with rpc_svc_general.9.

[07/27/94 public]
Okay, I'm convinced. :)
How do we do #3?

[7/27/94 public]

Thanks! Well, you may change your mind because probably #3 involves a lot
of code changes. :-) In general, put TRY/CATCH(pthread_cancel_e) (and
CATCH_ALL for catching the unexpected exceptions and aborting) around all
cancellation points and if the cancel gets caught, remember it, do cleanup
and just before returning from the outermost function call
pthread_cancel(pthread_self()). I see the cancellation points scattered
arroud in the serviceability code, e.g., *printf*(), *gets(), *putc(),
*read(), write(), etc. (some of them may be ignored).

Cheaper way is doing #1 inside of the serviceability code, around the
cancellation points, with a potential un-cancellable thread. :^) I can live
with that because it localizes CANCEL_OFF.

[07/27/94 public]
I was just about to say that locally suspending and restoring the cancel
state seems to be the best way to do things.  In other words I would put
	state = pthread_setcancel(CANCEL_OFF);
as the first line and
	if (state == CANCEL_ON)
	    pthread_setcancel(CANCEL_ON)
as the last executable line (i.e., just before all returns).  I think
the following functions are the only places that need it:
	dce_printf, dce_pgm_printf, dce_fprintf, dce_pgm_fprintf,
	dce_sprintf, dce_pgm_sprintf (in dceprintf.c)
	dce_svc_printf, dce_svc__debug, dce_svc_bin_log (in svcprintf.c)
	dce_svc__linefor (in svcroute.c)

[8/1/94 public]
Made changes as outlined above.



CR Number                     : 11455
Defect or Enhancement?        : def
CR in Code, Doc, or Test?     : code
Inter-dependent CRs           : 
Project Name                  : dce
H/W Ref Platform              : all
S/W Ref Platform              : all
Component Name                : utils
Subcomponent Name             : svc
Short Description             : compiler warnings
Reported Date                 : 7/26/94
Found in Baseline             : 1.1
Found Date                    : 7/26/94
Severity                      : B
Priority                      : 1
Status                        : closed
Duplicate Of                  : 
Fix By Baseline               : 
Fixed In Baseline             : 1.1b13
Affected File(s)              : dce/utils/svc/*
Sensitivity                   : public

[7/26/94 public]
The SVC could should compile cleanly with STRICT_COMPILER_FLAGS
enabled.

[7/28/94 public]
The compilers are happy with the code.



CR Number                     : 11402
Defect or Enhancement?        : def
CR in Code, Doc, or Test?     : test
Inter-dependent CRs           : 
Project Name                  : dce
H/W Ref Platform              : all
S/W Ref Platform              : all
Component Name                : utils
Subcomponent Name             : acl/db fvt
Short Description             : Makefile has extra -ldceutils
Reported Date                 : 7/23/94
Found in Baseline             : 1.1
Found Date                    : 7/23/94
Severity                      : C
Priority                      : 2
Status                        : closed
Duplicate Of                  : 
Fix By Baseline               : 1.1
Fixed In Baseline             : 1.1b16
Affected File(s)              : test/dce/utils/acldb/ts/acl/Makefile test/dce/utils/acldb/ts/db/Makefile dce/utils/misc/Makefile
Sensitivity                   : public

[7/23/94 public]

acl and db functional test Makefiles has linked with both libdce and
libdceutils, but the latter is in libdce. So it's unuseful to link
with both libraries and prevent us not building libdceutil.a.

[08/26/94 public]
You're right Ping.  Can you fix?  Tnx.

[9/2/94 public]
Submitted.



CR Number                     : 11397
Defect or Enhancement?        : def
CR in Code, Doc, or Test?     : code
Inter-dependent CRs           : 
Project Name                  : dce
H/W Ref Platform              : all
S/W Ref Platform              : all
Component Name                : utils
Subcomponent Name             : svc
Short Description             : uninit'd fields from dce_svc_register
Reported Date                 : 7/22/94
Found in Baseline             : 1.1b12
Found Date                    : 7/22/94
Severity                      : A
Priority                      : 1
Status                        : closed
Duplicate Of                  : 
Fix By Baseline               : 1.1
Fixed In Baseline             : 1.1b13
Affected File(s)              : dce/utils/svc/svcreg.c
Sensitivity                   : public

[7/22/94 public]
dce_svc_register doesn't set all the fields in the created SVC handle
to 0.  In partciular, routes.nroutes can be random garbage leading
to core dumps when it's taken as a count later on.

[07/22/94 public]
Fix was added by adding a local var
	static struct dce_svc_handle_s_t nilhandle;
and then putting this right after the malloc call:
	*h = nilhandle;

[7/26/94 public]
Works. Closed.



CR Number                     : 11378
Defect or Enhancement?        : def
CR in Code, Doc, or Test?     : code
Inter-dependent CRs           : 
Project Name                  : dce
H/W Ref Platform              : all
S/W Ref Platform              : all
Component Name                : utils
Subcomponent Name             : acldb
Short Description             : error in access control algorithm
Reported Date                 : 7/21/94
Found in Baseline             : 1.1
Found Date                    : 7/21/94
Severity                      : B
Priority                      : 1
Status                        : closed
Duplicate Of                  : 
Fix By Baseline               : 1.1
Fixed In Baseline             : 1.1b13
Affected File(s)              : dce/utils/acldb/acleval.c
Sensitivity                   : public

[7/21/94 public]

Response to below mail from rsalz and burati was that this is
probably a bug.
-----------------------------------------------------------
From rsarbo Mon Jul 18 11:23:31 1994
To: bowe, rsalz
Subject: DCE acl evaluation question
Cc: rsarbo
Status: R

I'm poking through dce_acl__permset_alg() and I have a question.
When collecting the acl entry pointers at the beginning of the 
function, you set check_groups if you come across any 

sec_acl_e_type_group
sec_acl_e_type_foreign_group
sec_acl_e_type_group_deleg
sec_acl_e_type_for_group_deleg

entries.  Then you check the user against these four entry types 
plus group_obj and group_obj_delegate if check_groups is set.  My
question is, why don't you also set check_groups if you come 
across sec_acl_e_type_group_obj, or sec_acl_e_type_group_obj_deleg 
entries?  From my reading of this code, if someone has an acl
with group_obj or group_obj_delegate and no other group acl entries 
set, this routine will not recognize the permissions granted in those 
two entries.

Ron

[7/26/94 public]
Set the flag where it should have been set.

Local variables group_obj_ep and group_obj_del_ep were set and never
used.  Removed them.

[7/26/94 public]
Nightly build happy.  Closed.



CR Number                     : 11341
Defect or Enhancement?        : enh
CR in Code, Doc, or Test?     : code
Inter-dependent CRs           : 
Project Name                  : dce
H/W Ref Platform              : all
S/W Ref Platform              : all
Component Name                : utils
Subcomponent Name             : misc
Short Description             : Add dce_strdup
Reported Date                 : 7/18/94
Found in Baseline             : 1.1
Found Date                    : 7/18/94
Severity                      : C
Priority                      : 1
Status                        : closed
Duplicate Of                  : 
Fix By Baseline               : 1.1
Fixed In Baseline             : 1.1b13
Affected File(s)              : utils/misc/strdup.c
Sensitivity                   : public

[7/18/94 public]

Lots of dce code has this construct:
	new = malloc(strlen(old) + 1);
	strcpy(new, old)
(I prefer strcpy(malloc(strlen(old)+1),old) myself :-)

We should replace these with call to strdup.  Since strdup isn't in the
standards we rely on, and since some strdup's are buggy (mentioned in an
OT somewhere) we should just do dce_strdup and everyone use that.

[7/20/94 public]
Rich S added this to dcelib, and a few progs have been using it
successfully.  Closed.



CR Number                     : 11308
Defect or Enhancement?        : def
CR in Code, Doc, or Test?     : code
Inter-dependent CRs           : 
Project Name                  : dce
H/W Ref Platform              : all
S/W Ref Platform              : all
Component Name                : utils
Subcomponent Name             : acl
Short Description             : Modify generic ACL
manager name and helpstring as described below.
Reported Date                 : 7/14/94
Found in Baseline             : 1.1b11
Found Date                    : 7/14/94
Severity                      : E
Priority                      : 2
Status                        : closed
Duplicate Of                  : 
Fix By Baseline               : 1.1
Fixed In Baseline             : 1.1b13
Affected File(s)              : utils/acldb/aclconv.c,aclif.h
Sensitivity                   : public

[7/14/94 public]

  Old names        New names/helpstrings
--------------    ---------------------------
general           {generic       Generic ACL server}

______________________________________

BACKGROUND:
 A polymorphic object, as in DCE 1.1, can be a principal name and a 
 principal directory and therefore have 2 ACL managers. 

 In "dcecp", the ACL manager name can be obtained by invoking the
 "acl show -managers" command.  The other "acl" commands can
 accept a -type option to specify the manager name.  Previously, 
 this ACL manager name was really only informational and not visible
 to the end user, but now it is.

 Below, I have compiled a list of the ACL manager names and their 
 "helpstrings" that will be displayed to the user.

CDS ACL Managers:
    GDA managment ACL manager:
        dcecp> acl show /.:/hosts/<hostname>/cds-gda -managers
        {GDA              Change ACL for gda management}

    CDS Server Management ACL manager:
        dcecp> acl show /.:/hosts/<hostname>/cds-server -managers
        {CDS Server       Change ACL for server management}

    CDS Directory entry ACL manager:
        dcecp> acl show /.:/cell-profile -managers -entry
        {Directory entry  Change ACL for CDS directory entry}

    CDS Directory ACL manager:
        dcecp> acl show /.:/hosts -managers
        {Directory        Change ACL for CDS directory}

    CDS Clearinghouse ACL manager:
        dcecp> acl show /.:/<hostname>_ch -managers
        {Clearinghouse    Change ACL for CDS clearinghouse}

    CDS Clerk management ACL manager:
        dcecp> acl show /.:/hosts/<hostname>/cds-clerk -managers
        {CDS Clerk        Change ACL for clerk management}


Security ACL Managers:
    Security Directory ACL manager:
	dcecp> acl show /.:/sec/principal -managers
	dcecp> acl show /.:/sec/group -managers
	dcecp> acl show /.:/sec/org -managers
        {Sec Directory    Manage directory object acls.}

    Security Principal ACL manager:
        dcecp> acl show /.:/sec/principal/<name> -managers
        {Sec Principal    Manage principal object acls.}

        A polymorphic object will look like this:
	dcecp> acl show /.:/sec/principal/<princ-dir-name> -managers
	{Sec Principal    Manage principal object acls.}
	{Sec Directory    Manage directory object acls.}

    Security Group ACL manager:
        dcecp> acl show /.:/sec/group/<name> -managers
        {Sec Group        Manage group object acls.}

        A polymorphic object will look like this:
	dcecp> acl show /.:/sec/group/<group-dir-name> -managers
	{Sec Group        Manage group object acls.}
	{Sec Directory    Manage directory object acls.}

    Security Organization ACL manager:
        dcecp> acl show /.:/sec/org/<name> -managers
        {Sec Org          Manage org object acls.}

        A polymorphic object will look like this:
	dcecp> acl show /.:/sec/org/<org-dir-name> -managers
	{Sec Org          Manage org object acls.}
	{Sec Directory    Manage directory object acls.}

    Security Replica List ACL manager:
        dcecp> acl show /.:/sec/replist -managers
        {Sec Replist      Manage the replist object acl.}

    Security Policy ACL manager:
        dcecp> acl show /.:/sec/policy -managers
        {Sec Policy       Manage the policy object acl.}

    Security Extended Attribute Schema ACL manager:
        dcecp> acl show /.:/sec/xattrschema/<name> -managers
        {Sec Attr_schema  Manage the attr_schema object acl.}


DTS ACL manager:
    dcecp> acl show /.:/hosts/<hostname>/dts-entity -managers
    {dtsd             DTSD DCE Time Service daemon}


Auditing ACL manager:
    dcecp> acl show /.:/hosts/<hostname>/aud-acl -managers
    {audit            Audit daemon ACL manager}


DCED ACL managers:

    Generic ACL managers for DCED:
	dcecp> acl sh /.:/hosts/<hostname>/self -m
	dcecp> acl sh /.:/hosts/<hostname>/config -m
        {dced-mgmt        DCED manager}

        dcecp> acl show /.:/hosts/<hostname>/config/srvrconf -managers
        dcecp> acl show /.:/hosts/<hostname>/config/srvrexec -managers
	dcecp> acl show /.:/hosts/<hostname>/config/hostdata -managers
        dcecp> acl show /.:/hosts/<hostname>/config/keytab -managers
        dcecp> acl sh /.:/hosts/<hostname>/config/attr_schema -managers
        dcecp> acl show /.:/hosts/<hostname>/config/secval -managers
        {dced-managers    DCED manager Pseudo-object}

    Server configuration ACL manager:
        dcecp> acl show /.:/hosts/<hostname>/config/srvrconf/<name> -managers
        {srvrconf         Server Configuration}

    Server execution ACL manager:
        dcecp> acl show /.:/hosts/<hostname>/config/srvrexec/<name> -managers
        {srvrexec         Server Execution}
    
    Hostdata configuration ACL managers:
        dcecp> acl show /.:/hosts/<hostname>/config/hostdata/<name> -managers
        {hostdata         Host Data}

    Keytab configuration ACL manager:
        dcecp> acl show /.:/hosts/<hostname>/config/keytab/<name> -managers
        {rkeytab          Key Management}

    Extended Attribute Schema configuration ACL manager:
        dcecp> acl sh /.:/hosts/<hostname>/config/xattrschema/<name> -managers
        {attr_schema      Attribute Schema}

    Secval configuration ACL manager:
        dcecp> acl show /.:/hosts/<hostname>/config/secval/<name> -managers
        {secval           Security Validation}


DFS ACL manager:
    dcecp> acl show /.:/fs/<name> -managers
    {DFS              DFS ACL manager}


Misc:
    dcecp> acl show <application-specific ACL object>  -managers
    {general          General ACL Manager}
    Note that there is nothing DCE ships that uses this ACL manager.
    This is part of the ACL manager library for application
    developers.

____________________________________________________________
NEW GUIDELINES FOR ACL MANAGER NAMES:

We would like to enforce guidelines for all DCE ACL
managers.  These are not architectural and dcecp will accept 
any valid ACL manager names, but we would like DCE-named ACL 
managers to be named consistently and in an easily
usable manner.  Since dcecp is what will make these names
visible to a user, we are using dcecp attribute naming
conventions:

ACL manager names for all of DCE must be:
1) lowercase
2) no underscores
3) no spaces
4) 16 bytes (sizeof "sec_acl_printstring_len").
5) Choose names similiar to object command names supported in
   dcecp wherever possible.
   For example, the ACL manager name "principal" refers to
   the object that contains registry information about principals;
   /.:/sec/principal.
   Note that dcecp will allow abbreviations. For example, a user
   can specify "org" for the ACL manager name "organization".
6) Names must be unique within a component's ACL manager but not
   within DCE. 
   For example, "xattrschema" can be used for a DCED Extended
   Attribute Configuration Schema ACL object and for a Security 
   Extended Registry Attribute Schema ACL object.
7) The helpstring for an ACL manager must specify the component
   that owns or manages the objects in questions, since this 
   information cannot always be derived from the ACL manager name.
____________________________________________________________
PROPOSAL:

Below are the current DCE ACL manager names/helpstrings and their 
proposed names/helpstrings following the above guidelines.

  Old names        New names/helpstrings
--------------    ---------------------------
GDA               {gda           Global Directory Agent server}
CDS Server        {cdsserver     Cell Directory Service server}
Directory entry   {entry         CDS namespace entry ACLs}
Directory         {directory     CDS directory ACLs}
Clearinghouse     {clearinghouse CDS clearinghouse ACLs}
CDS Clerk         {cdsclerk      Cell Directory Service clerk}
Sec Principal     {principal     Registry principal object ACLs}
Sec Directory     {secdirectory  Registry directory object ACLs}
Sec Group         {group         Registry group object ACLs}
Sec Org           {organization  Registry organization object ACLs}
Sec Replist       {replist       Registry replica list object ACL}
Sec Policy        {policy        Registry policy object ACL}
Sec Attr_schema   {xattrschema   Registry extended attribute schema object ACLs}
dtsd              {dts           Distributed Time Service server or clerk}
audit             {audit         Audit server}
dced-mgmt         {dced          DCED server}
dced-managers     {container     DCED container ACLs}
srvrconf          {srvrconf      DCED server configuration object ACLs}
srvrexec          {srvrexec      DCED server execution object ACLs}
hostdata          {hostdata      DCED host data object ACLs}
rkeytab           {keytab        DCED key management object ACLs}
attr_schema       {xattrschema   DCED extended attribute schema object ACLs} 
secval            {secval        DCED security validation service}
DFS               {dfs           Distributed File Service server}
general           {generic       Generic ACL server}

[7/15/94 public]
Some comments from mail messages:
We (Rich,Julie,Howard,me) agreed that there should be no general/generic
helpstring, but the printstring (containing the ACL bits) is fine.  We
want people to name their managers; providing a way for them to name it
"generic" goes against this.

[7/15/94 public]
Removed dce_acl_g_helpstring.

[7/19/94 public]
Nightly build is happy. Closed.



CR Number                     : 11287
Defect or Enhancement?        : enh
CR in Code, Doc, or Test?     : code
Inter-dependent CRs           : 
Project Name                  : dce
H/W Ref Platform              : all
S/W Ref Platform              : all
Component Name                : utils
Subcomponent Name             : attr
Short Description             : The generic attr_schema interface need to be implemented
Reported Date                 : 7/13/94
Found in Baseline             : 1.1
Found Date                    : 7/13/94
Severity                      : B
Priority                      : 1
Status                        : closed
Duplicate Of                  : 
Fix By Baseline               : 1.1
Fixed In Baseline             : 1.1b14
Affected File(s)              : dce/utils/attr/*, test/dce/utils/attr/*
Sensitivity                   : public

[7/13/94 public]
The generic attr schema interface (dce_attr_sch.idl) need to be 
implemented. It will reside in dce/utils/attr.

[8/11/94 public]
1) The interface code was submitted on 7/22/94
2) A documentation request was created on 7/23/94 [OT#11404]
3) The functional test is submitted and passed on both 486/OSF1
   and HP800/UX today

So I'm marking this one as fix.



CR Number                     : 11284
Defect or Enhancement?        : def
CR in Code, Doc, or Test?     : code
Inter-dependent CRs           : 
Project Name                  : dce
H/W Ref Platform              : all
S/W Ref Platform              : all
Component Name                : utils
Subcomponent Name             : acldb
Short Description             : dce_acl_g_printstring needs size in aclif.h
Reported Date                 : 7/13/94
Found in Baseline             : 1.1b11
Found Date                    : 7/13/94
Severity                      : C
Priority                      : 3
Status                        : closed
Duplicate Of                  : 
Fix By Baseline               : 1.1
Fixed In Baseline             : 1.1b12
Affected File(s)              : aclif.h
Sensitivity                   : public

[7/13/94 public]
The global variable dce_acl_g_printstring needs the length in aclif.h.
This is so you can do this and get the right number:
    (sizeof dce_acl_g_printstring / sizeof dce_acl_g_printstring[0])
If it's defined as
    extern sec_acl_printstring_t   dce_acl_g_printstring[];
in the .h file, the compiler doesn't know the size.

[7/13/94 public]
Added the size.
NOTE: this must agree with what's in aclconv.c.

[7/14/94 public]
Note again: the compiler would catch the above if it did not match.



CR Number                     : 11258
Defect or Enhancement?        : def
CR in Code, Doc, or Test?     : code
Inter-dependent CRs           : 
Project Name                  : dce
H/W Ref Platform              : all
S/W Ref Platform              : all
Component Name                : utils
Subcomponent Name             : sams
Short Description             : putting \" in SML files
Reported Date                 : 7/12/94
Found in Baseline             : 1.1b11
Found Date                    : 7/12/94
Severity                      : B
Priority                      : 1
Status                        : closed
Duplicate Of                  : 
Fix By Baseline               : 1.1
Fixed In Baseline             : 1.1b13
Affected File(s)              : tools/sams/sams.c
Sensitivity                   : public

[7/12/94 public]
sams has a bug in that it can output text fields like this
	Text:
	The \"break\" keyword was used wrong.
The \" construct should be output as a simple ".

[7/25/94 public]
Change \" to " and \ to \e when writing troff (SML) files.
Renamed output file from xxx.sgm to xxx.sml, since that's what really is.

[7/26/94 public]
Tried sams from the nightly build.  Works.  Closed.



CR Number                     : 11250
Defect or Enhancement?        : def
CR in Code, Doc, or Test?     : code
Inter-dependent CRs           : 
Project Name                  : dce
H/W Ref Platform              : hppa
S/W Ref Platform              : hpux
Component Name                : utils
Subcomponent Name             : dtscp/dcecp
Short Description             : dtscp subcommands return
"cannot contact dts daemon - rpc failure"
Reported Date                 : 7/11/94
Found in Baseline             : 1.1
Found Date                    : 7/11/94
Severity                      : A
Priority                      : 1
Status                        : closed
Duplicate Of                  : 
Fix By Baseline               : 1.1
Fixed In Baseline             : 1.1b15
Affected File(s)              : dce/utils/misc/editline.c
Sensitivity                   : public

[7/11/94 public]

Using BL-11

PROBLEM 1:
==========

More often than desirable, several dtscp subcommands return:

cannot contact dts daemon - rpc failure:
connection closed (dce / rpc)

Example:

dtscp> show local servers
cannot contact dts daemon - rpc failure:
connection closed (dce / rpc)

dtscp> show synchronizations completed
cannot contact dts daemon - rpc failure:
connection closed (dce / rpc)

The fact that these subcommands fail is causing the
system test dcetmsyn to fail.


PROBLEM 2
=========


On the HP, the output of dtscp show local servers does not
return anything. I have 3 DTS local servers on the cell, the 
other servers (on RIOS and OSF1) show the correct information.
The NTP provider is running on the RIOS.

root@west> dtscp 
dtscp> show local servers


Known Servers
============================================================

dtscp> 

The ouput of dcecp does not show any information on the cell
local servers either:

root@west> dcecp
dcecp> dts show
{checkinterval +0-01:30:00.000I-----}
{epoch 0}
{tolerance +0-00:10:00.000I-----}
{tdf -0-04:00:00.000I-----}
{maxinaccuracy +0-00:00:00.100I-----}
{minservers 3}
{queryattempts 3}
{localtimeout +0-00:00:05.000I-----}
{globaltimeout +0-00:00:15.000I-----}
{syncinterval +0-00:02:00.000I-----}
{type server}
{courierrole backup}
{actcourierrole noncourier}
{clockadjrate 40000000 nsec/sec}
{maxdriftrate 1000000 nsec/sec}
{clockresolution 10000000 nsec}
{version V1.0.1}
{timerep V1.0.0}
{provider yes}
{autotdfchange no}
{nexttdfchange 1994-10-30-01:00:00.000-05:00I0.000}
{serverprincipal hosts/west/self}
{serverentry hosts/west/dts-entity}
{servergroup subsys/dce/dts-servers}
{status enabled}
{uuid 000028540000.47.86.8c.00.ff.ff.ff.ff}

[7/12/94 public]
PROBLEM 1:
There are several reason why it can't contact the daemon:
	- dtsd is no longer there or functioning
	- cds is hosed and is preventing dtscp from working
	- rpc is failing under stress/load.

A little more info on the state of the machine at the time
of the error would be helpful.  Does cds respond? Does dtscp
never work, or only sometimes? etc.

PROBLEM 2:
This is not a problem, if you notice:
	{provider yes}
which means that this host *is* running a time provider so it will
not report any local servers, since it doesn't use them.

[7/12/94 public]

PROBLEM 1 - was experienced while running system tests. 
	    the failures were often and intermittent.
	    I am running the tests again to collect more
	    information; as suggested.

[8/1/94 public]
After discussion with Tom Jordahl (RPC component owner), I'm
reassigning this bug to RPC. It appears to be a CN RPC problem.

[8/1/94 public]
This is a mojor problem for CN rpc.  The server side shutdowns
are not getting read by the client (in fact the client isn't
doing *anything*).  So, when it goes to use the (it thinks)
open connection, it gets an error on the closed socket.
Something is preventing the reciever thread from running.

This may be the result of the Big PAC modifications, however
I used dtscp/dtsd extensively in testing and did not see this problem.

I am investigating.

[8/4/94 public]
Turns out the exitline package (which dtscp was changed to use)
did a non-cma read() call, which prevented all other threads
from running.  An include of pthread.h in editline.c fixed the
problem.

[8/4/94 public]
Didn't make the build 14 cutoff.

[8/9/94 public]
Works.  Closed.



CR Number                     : 11235
Defect or Enhancement?        : def
CR in Code, Doc, or Test?     : code
Inter-dependent CRs           : 
Project Name                  : dce
H/W Ref Platform              : hppa
S/W Ref Platform              : hpux
Component Name                : utils
Subcomponent Name             : editline
Short Description             : C-SPC stops dcecp
Reported Date                 : 7/11/94
Found in Baseline             : 1.1b11
Found Date                    : 7/11/94
Severity                      : B
Priority                      : 3
Status                        : closed
Duplicate Of                  : 
Fix By Baseline               : 1.1
Fixed In Baseline             : 1.1b12
Affected File(s)              : misc/{editline*,sysunix.c}
Sensitivity                   : public

[7/11/94 public]
Typing control space stops dcecp:

  dcecp> [1] + Stopped                  ./dcecp
  absolut admin/dcecp$ fg
  ./dcecp

[7/11/94 public]
Seems to only do this on the HP.  On the 496 (build from this weekend),
it just beeps.

Which reminds me: there should be a way to suspend dcecp (like it's
doing for you now) without control-Z.  (You can suspend it on HP, where
you can on osf/1.)  A builtin "suspend" command would do it.

[07/11/94 public]
Curious.  CTRL-SPACE in readline is mapped to "ring_bell."  What are your
stty settings before you call dcecp?  The "send yourself SIGTSTP"
(if SIGTSTP is #define'd) is whatever ioctl() says your susp char is.
N.B.  A builtin suspend command is probably a good thing, albeit a little
tricky with TTY modes...

[7/11/94 public]
Yes, on an HP.:

  dcecp> stty -a
  speed 9600 baud; line = 0; susp = ^Z; dsusp = ^@
  rows = 30; columns = 114
  intr = ^C; quit = ^\; erase = DEL; kill = ^U; swtch = ^@
  eof = ^D; eol = ^@; min = 4; time = 0; stop = ^S; start = ^Q
  parenb -parodd cs8 -cstopb hupcl cread -clocal -loblk -crts 
  -ignbrk -brkint -ignpar -parmrk -inpck -istrip -inlcr -igncr icrnl -iuclc 
  ixon -ixany ixoff -rtsxoff -ctsxon -ienqak 
  isig icanon iexten -xcase echo echoe echok -echonl -noflsh 
  opost -olcuc onlcr -ocrnl -onocr -onlret -ofill -ofdel -tostop 
  dcecp>

[07/11/94 public]

Mea culpa, it's a readline bug.  rl_susp should be set in sysunix.c
but it's not.  So it defaults to 0 which is what CTRL-SPC is.  Oops.

[07/13/94 public]
Set rl_susp when the system defined SIGTSTP.  Some minor related cleanup
(use SIGTSTP, not DO_SIGTSTP).

[07/20/94 public]
Works with nightly build.  Closed.



CR Number                     : 11156
Defect or Enhancement?        : def
CR in Code, Doc, or Test?     : code
Inter-dependent CRs           : 10886,10475
Project Name                  : dce
H/W Ref Platform              : i486
S/W Ref Platform              : osf1
Component Name                : utils
Subcomponent Name             : svc
Short Description             : core dump - SIGIOT - in SVC
Reported Date                 : 7/1/94
Found in Baseline             : 1.1
Found Date                    : 7/1/94
Severity                      : A
Priority                      : 0
Status                        : closed
Duplicate Of                  : 
Fix By Baseline               : 1.1
Fixed In Baseline             : 1.1b12
Affected File(s)              : svcreg.c,dce_svc.h,svcdumplog.c
Sensitivity                   : public

[7/1/94 public]

I'm running GDS tests. With tracing switched off all runs fine.
If I switch on tracing gdssstub core dumps after about two minutes -
means that two or three testcases did run.

More investigation (with SVC and stub code compiled with "-g") gave:

I've run gdssstub in gdb. Output was:

Exception: status 16c9a012 (dce / rpc)

Program received signal 6, IOT/Abort trap
0xa403fea4 in kill ()

Backtrace is:

#0  0xa403fea4 in kill ()
#1  0xa41c9ae6 in cma__abort_process (6)
#2  0xa418f2e9 in exc_raise (-1073748308)
#3  0xa418f4f5 in exc_pop_ctx (-1073748400)
#4  0x47673b in dce_svc_bin_data_encode (h=0x4f5450, data=0xbfffe98c, 
    st=0xbfffe9cc) at svcbin_cstub.c:425
#5  0x4740e8 in dce_svc__binprint (fd=12, prolog=0xbfffea18, 
    args=0xbfffeab0 "Td@")
    at /project/dce/build/dce1.1/src/dce/utils/svc/svcprintf.c:297
#6  0x474ad0 in dce_svc_bin_log_withfile (handle=0x4f5050, 
    file=0x405eb5 "/project/dce/build/dce1.1/src/directory/gds/stub/d25evmgt.c", line=243, argtypes=0x405ef1 "%d%d%d", table_index=0, debug_level=1, 
    message_index=308323760, 11, 8, 1)
    at /project/dce/build/dce1.1/src/dce/utils/svc/svcprintf.c:614
#7  0x4066a2 in d25_exec_actions (evntpb=0xbffff350)
    at /project/dce/build/dce1.1/src/directory/gds/stub/d25evmgt.c:241
#8  0x40613b in d25_evmgt (sinfptr=0x47d000)
    at /project/dce/build/dce1.1/src/directory/gds/stub/d25evmgt.c:135
#9  0x4009fd in main (argc=10, argv=0xbffff520)
    at /project/dce/build/dce1.1/src/directory/gds/stub/d25stub.c:402

What I found so far is:

line 425 in  svcbin_cstub.c is : ENDTRY

Exception: status 16c9a012 (dce / rpc)

means: 16c9a012 is a decimal 382312466;

rpcsts.h has a

#define rpc_s_no_memory (382312466)

In rpc.sams I found:

start           incatalog intable
  code          rpc_s_no_memory
  text          "no memory for RPC runtime"
  engineer      "Nathaniel Mishkin"
  explanation   "The RPC runtime is unable to allocate heap storage, or a fixed
buffer
                supplied to IDL Encoding Services was not large enough."
  action        "If the failure is induced by overuse of underlying system
                resources (for example, address space or swap space), reduce the
                application's direct use of these resources if possible. Or use
a larger
                buffer when calling IDL Encoding Services."
end

I'm not very familar with IDL generated sources. But it looks like
that dce_svc__binprint doesn't supply enough memory before calling
dce_svc_bin_data_encode.

[07/08/94 public]
OK, the reason seems to be that each process using binary tracing
has to call rpc_ss_enable_allocate before calling SVC functions.
I just try to verify if this works.
I think it's not very nice that a process which never uses RPC 
explicitely has to call rpc_ss_enable_allocate. All what gds
processes use is a well-defined SVC interface - gds shouldn't
care what SVC uses implicitely.
So - let's assume it'll work with rpc_ss_enable_allocate.
Is it possible to put this call in some SVC initialization function - i.e.
dce_svc_register?
If not: it has to be documented that processes using binary tracing
have to call rpc_ss_enable_allocate.

Note: if rpc_ss_enable_allocate is called at some place (gds or svc)
also 10475 is fixed: gds can use dce_svc_routings which uses
some RPC stuff.

[7/8/94 public]
After talking with Rich S, here's what I plan: I'll write a new function,
dce_svc_init(flags, &status), which will do the rpc_ss_enable_allocate()
and other init things, as appropriate.  For now, call with flags = 0,
before dce_svc_register().

dce_svc_register() is not the right place to do this, since you'd only
want to call rpc_ss_enable_allocate() once and an application may call
dce_svc_register() multiple times.  Also, rpc_ss_enable_allocate() should
be called only once for each thread.

[07/08/94 public]
It seems to work. GDS processes which have called rpc_ss_enable_allocate
once do not die any more. GDS processes using SVC without calling 
rpc_ss_enable_allocate still die with SIGIOT.
When will you submit your new function, John? Today?
If yes: I could change GDS also today, so we could have a working SVC
in GDS on Monday.

[7/8/94 public]
Change submitted.

[7/8/94 public]
Also, in dce_svc_log_free_entry(), call free() or rpc_sm_client_free(),
where appropritate (ie, depending on where the various things were
allocated.  It was always calling free().

[07/12/94 public]
Reopened. Still all is dumping core after a while.
What I think now is that there is somewhere (either in SVC or
in idl/lib/pickling.c) is a huge memory leak that leads after a while
to the problem that somewhere in the IDL code no memory could be
allocated any more. So the exception rpc_s_no_memory is raised what
causes the SIGIOT and, finally, the core dump.
Consistent to this assumption is that we don't get the core dump 
immediately - it always takes some time. Also it sometimes happened
that a process which was doing almost nothing (a DSA
of a non-configured directory id. - waiting for an event
and writing every minute two entries into the binary logfile) did
core dump 10 minutes aftr it was started - certainly there was no
memory available at all because GDS testing took all the memory.
In this state you can't even do "ls" - you get "can't fork" 
or "no swap space".
If I start i.e. "vmstat" in the moment where gdscstub starts to dump core
I get:

cannot fork: no swap space

I did compile already libsvc with the malloc tools

dce_mem_dbg.c, dce_mem_dbg.h.

So far I couldn't see a problem there. But these tools are not perfect -
they just report if there was a wrong free.
(I assume that the problem is in the IDL pickling stuff -
the SVC code looks OK now.)
What I will do now is to compile also idl/lib stuff with the
malloc include file and to add a dce_i_malloc_dbg_dump call at the
start and at the end of dce_svc__binprint. This should show
memory stats and outstanding allocated buffers.

I don't think that GDS itself eats memory - we did a lot of
testing for that in Munich, and if we turn off tracing we can run
i.e. all GDS API tests without a problem.

The behaviour is independent on if the rest of DCE (dced) is running or not.

[7/13/94 public]
There was a memory leak in dce_svc__binprint().  The buffer returned by the
encoding services was not being freed.  We now call rpc_sm_client_free().

The coredump was because an exception being thrown in the idl-generated
code that pickles the log entry when malloc failed.  The GDS code was
calling dce_svc__binprint() (eventually) many times, which was causing the
process to use up all the machine's memory.

[7/15/94 public]
Jochen reports that things now work fine.  Closing.



CR Number                     : 11122
Defect or Enhancement?        : def
CR in Code, Doc, or Test?     : code
Inter-dependent CRs           : 
Project Name                  : dce
H/W Ref Platform              : all
S/W Ref Platform              : all
Component Name                : utils
Subcomponent Name             : 
Short Description             : isdcepcs() not implemented
Reported Date                 : 6/28/94
Found in Baseline             : 1.1b10
Found Date                    : 6/28/94
Severity                      : B
Priority                      : 2
Status                        : closed
Duplicate Of                  : 
Fix By Baseline               : 1.1
Fixed In Baseline             : 1.1b11
Affected File(s)              : src/dce/utils/misc/isdcepcs.c
Sensitivity                   : public

[6/28/94 public]
isdcepcs() not implemented.

[6/28/94 public]
submitted and been through a nigtly.



CR Number                     : 11078
Defect or Enhancement?        : def
CR in Code, Doc, or Test?     : code
Inter-dependent CRs           : 
Project Name                  : dce
H/W Ref Platform              : all
S/W Ref Platform              : all
Component Name                : utils
Subcomponent Name             : svc
Short Description             : dce_svc_inq_sev_name() prints garbage for DEBUG messages
Reported Date                 : 6/24/94
Found in Baseline             : 1.1b9
Found Date                    : 6/24/94
Severity                      : C
Priority                      : 2
Status                        : closed
Duplicate Of                  : 
Fix By Baseline               : 1.1
Fixed In Baseline             : 1.1b11
Affected File(s)              : utils/svc/svcprintf.c
Sensitivity                   : public

[6/24/94 public]
dce_svc_inq_sev_name() returns a pointer to the severity of a message
(eg, "ERROR", "WARNING").  It returns garbage when the message is for
debugging.

(I think svcdumplog.c is the only thing that uses it right now.)

[6/27/94 public]
In dce_svc_inq_sev_name(), return a pointer to a static (const) string
"DEBUGn" (where n is 1-9).  (static so thread-safe)

[7/7/94 public]
Works.  Closed.



CR Number                     : 11059
Defect or Enhancement?        : def
CR in Code, Doc, or Test?     : code
Inter-dependent CRs           : 11161
Project Name                  : dce
H/W Ref Platform              : hppa
S/W Ref Platform              : hpux
Component Name                : utils
Subcomponent Name             : svc
Short Description             : no exception logging for gds processes
Reported Date                 : 6/23/94
Found in Baseline             : 1.1
Found Date                    : 6/23/94
Severity                      : A
Priority                      : 1
Status                        : closed
Duplicate Of                  : 
Fix By Baseline               : 1.1
Fixed In Baseline             : 1.1b12
Affected File(s)              : svcroute.c
Sensitivity                   : public

[6/23/94 public]

GDS processes use exception logging. But no logfile is written.

I.e. gdsdsa  on dir. id 2 is started with 

SVC_DSA_ROUTING="-P/opt/dcelocal/var/directory/gds/adm/dsa/dir2 \
        -vgds:general.2,asn1.2,apdu.1,ipc.2:BINFILE.2.2000:LOG%d \
        -wFATAL:TEXTFILE.1.100:EXC_F%d  -wERROR:TEXTFILE.1.100:EXC_E%d \
        -wNOTICE:TEXTFILE.1.100:EXC_N%d -wWARNING:TEXTFILE.1.100:EXC_W%d \
        -wNOTICE_VERBOSE:TEXTFILE.1.100:EXC_NV%d"

(see: gds/.profile.sh;
/opt/dcelocal/var/adm/directory/gds/.profile)

It calls d27_001_svc_init (in gds/util/d27svc.c)  - returned
status is svc_s_ok. Then it calls
dce_svc_printf(GDS_S_ENTRYDSA_MSG,d26_dir_id);
no logfile is written.

Debug logging seems to work but the binary logfile can not be tranformed
into readible form because of OT 11055.

[7/8/94 public]
CR 11161 is the same problem and has a better description and a fix outlined.

Fix was basically in dce_svc_routing():
    1. increment "p" to point to right place -- wasn't pointing to right
	part of route string.
    2. fix bad test of strcmp() - should be != instead ==.

[07/12/94 public]
Sorry, but I have to reopen it. The files are opened now - but
nothing is written into them.
I will debug SVC to find the problem and hope to update this OT soon.

[07/14/94 public]
Fixed by John Bowe. Submitted by John Bowe. Tested by me: works.

[07/15/94 public]
Closing.



CR Number                     : 11055
Defect or Enhancement?        : def
CR in Code, Doc, or Test?     : code
Inter-dependent CRs           : 11156
Project Name                  : dce
H/W Ref Platform              : i486
S/W Ref Platform              : osf1
Component Name                : utils
Subcomponent Name             : svc and gdsstep
Short Description             : gdsstep core dumps - null field in binary log entry
Reported Date                 : 6/23/94
Found in Baseline             : 1.1
Found Date                    : 6/23/94
Severity                      : A
Priority                      : 0
Status                        : closed
Duplicate Of                  : 
Fix By Baseline               : 1.1
Fixed In Baseline             : 1.1b12
Affected File(s)              : dce/utils/svc/svclog.c
Sensitivity                   : public

[6/23/94 public]
gdsstep core dumps when examining log files.  Unfortunately, the debuggers
available to me refuse to read the core files.  I will try to build gdsstep
with debugging turned on and try to provide a backtrace.

[06/23/94 public]
I did run a "-g"-gdsstep on your machine. It dumps core in line
513/514 of gds/step/gstep.c.
The reason seems to be the following:
dce_svc_log_get returns the prolog.
One part of the prolog is prolog->message_text.
This is set (line 181, svclog.c) to bin_data.format.
bin_data.format is a nil pointer, gds tries to dereference it.

In former versions of dce_svc_log_get (BL-9) prolog->message_text was the
message from the dcegds.cat file. Now it is taken from the binary logfile
and because of that empty.
Is this a bug in SVC or has the behaviour of dce_svc_log_get changed for
good reasons? Who will change - SVC or gdsstep? 
It's urgent because we can't read our binary logfiles - so we can't
debug problems.

[06/27/94 public]
Unfortunately I can't increase priority and severity - it's already A0.
But I want to express again: It's urgent. We can't read any binary
logfile. (We are using BL-10 now in Munich.)
Please give us a note when this will be fixed.

[6/27/94 public]
I spent most of Friday (6/24) working on this, and did not solve it.
(The person who wrote the original code was not here Friday, and is
not here today.)

Of course a test program that writes binary log files works fine
on HP and 486 platforms.

Yes, what was being read from the ibin log file showed that bin_data.format
was null (when reading from a log file provided by Rich Z).  I don't know
why or how yet.

I am curious, why you go through the trouble of using (for example):

    DCE_SVC_LOG ((DCE_SVC (gds_svc_handle, "%b%b"),
	GDS_S_CMX, svc_c_debug1, GDS_S_CMX_LOG, T_LFIRST2,
	trp, 0, NULL)) ;

instead of:

    dce_svc_printf(GDS_S_CMX_LOG_MSG, T_LFIRST2, trp, 0, NULL);

(sams makes all those convenience macros available to you in dcegdsmac.h)

[6/27/94 public]
When writing a debug message to a binary log in dce_svc_bin_log(), one of
the fields was written as NULL.  This did not happen when when doing a
regular, non-debug dce_svc_printf().

[6/28/94 public]
gdsstep no longer dumps core, but it loops.

[06/29/94 public]
I tried it on prague (HP) with dua and C-Stub logfiles - gdsstep doesn't loop.
It also doesn't dump core - fine.
But it still doesn't work correctly:

I.e. the first SVC call in DUA (gds/d21bind.c, line 148) is

DUA_TRACE_IAPL_ENTRY

which is a macro for (gds/h/d21svc.h, line 41):

DCE_SVC_LOG((GDS_S_DUA_IAPL_ENTRY_MSG,d27_thread_id(),function_name));

The corrosponding message from dcegds.cat is
(took from gds/sams/gds.sams, line 1018):

"[%d] ENTRY: %s"

What I see after calling gdsstep is: 

1d21_1_bind

I would like to see:

[1] ENTRY: d21_1_bind

I got exactly this with SVC from BL-9.
The change from BL-9 to now in SVC is:

In BL-9 dce_svc_log_get returned in prolog->message_text the message from
dcegds.cat: "[%d] ENTRY: %s"
Now it returnes the format element from the binary logfile: "%d%s"
This is the same as  prolog->argtypes because dce_svc_bin_log sets
prolog.format = (char *)argtypes (svcprintf.c, line 580).

I think the behaviour of BL-9 was correct. The advantage of binary
tracing is that you just put binary data into the binary logfile.
To make it readable you use gdsstep which adds text to the data.
(My example was not the best one: Normally we put some more text - not
only "ENTRY".)

There are two ways how to fix the problem:

1.) dce_svc_log_get returnes in message_text the message from
	dcegds.cat - as it was in BL-9.

2.) SVC supports another function which the following functionality:
	input: message_index
	output: message_text from dcegds.cat

I would favour the first possibility: There is no reason to return
the format element of the binary logfile twice (once in argtypes,
once in message_text).

Thanks for the first fix - we can read our logfiles now.
They are not nice - but better than no logfiles.

[6/29/94 public]
OK, in dce_svc_log_get() I set message_text (as in option 1).

** Note that this has the added feature that it uses the message catalog on
the machine you run dce_svc_log_get() on [ie, where you read the log], not
that of the machine where you write the message.

FYI, ( for your option 2 ), the function dce_svc_get_msg(message_index, &st)
does exactly that.

Please let me know if this works for you.

[6/30/94 public]
Using binaries from 6/29, gdsstep core dumps reading log files.  On 486.

[6/30/94 public]
This is fixed on HPUX.

[6/30/94 public]
Reassigned defect to GDS.  svcdumplog (built in obj/<tm>/dce/utils/svc, but
not installed) can read the log, so the problem isn't in svc, it's in the
gdsstep code.

[06/30/94 public]
Reassigned defect to SVC.
Some more information:
I produced a dua logfile and run gdsstep in gdb - gdsstep sources and SVC
were compiled with "-g".
I got the following core:

#0  0xa400350d in malloc ()
#1  0xd000000 in _pthread_exit_routine ()
#2  0xa426647e in rpc_ss_return_pointer_to_node
    (4755480, 3, 13, -1541936676, -1073744772, -1073744776)
#3  0xa4279257 in rpc_ss_ndr_unmar_pointee
    (29, 4271018, -1073744712, -1073743756, 4747480)
#4  0xa427c2d3 in rpc_ss_ndr_u_struct_pointees
    (15, 160, -1073743804, -1541797520, 4747480)
#5  0xa4276b02 in rpc_ss_ndr_unmar_interp (2, 136, -1073743960, 4747480)
#6  0x410bc9 in dce_svc_bin_data_decode (h=0x486150, data=0xbffff844, 
    st=0xbffff8d0) at svcbin_cstub.c:469
#7  0x41008a in dce_svc_log_get (h=0x4860d0, prolog=0xbffff8ac, 
    status=0xbffff8d0)
    at /project/dce/build/dce1.1/src/dce/utils/svc/svclog.c:156
#8  0x4005bb in gds_gst_process_logfile (handle=0x4860d0, thread_id=0, 
    max_level=9, subcomp=0x0, status=0xbffff8d0)
    at /project/dce/build/dce1.1/src/directory/gds/step/gstep.c:350
#9  0x4004bc in main (argc=1, argv=0xbffff920)
    at /project/dce/build/dce1.1/src/directory/gds/step/gstep.c:295

I think this corrosponds to problems we have seen in server processes
while using dce_svc_bin_data_encode. Something with this IDL stuff
is wrong.
To reproduce it:
gemini:/tmp/jk/gdsstep /tmp/jk/jlog22108.1

If I use svcdumplog the following happens:

On stdout I get something what is OK (/tmp/jk/dua.dump):  

1994-06-30-12:07:42.393-04:00I----- PID#22108 DEBUG1 gds general 0xa44b1bc4
[1] ENTRY: d21_3_read
1994-06-30-12:07:42.503-04:00I----- PID#22108 DEBUG3 gds general 0xa44b1bc4
[1] the following dist. name was given at IAPL : 43.12.2.1107.1.3.4.8DEFAULT-DSA
1994-06-30-12:07:42.503-04:00I----- PID#22108 DEBUG3 gds general 0xa44b1bc4
Service controls set: 64
1994-06-30-12:07:42.503-04:00I----- PID#22108 DEBUG3 gds general 0xa44b1bc4
time limit: -1

....

In the end there is: 

**** Assertion failure. cma__Queue_insert: Q corruption
     at line 1884 in /project/dce/build/dce1.1-snap/src/threads/cma_dispatch.c pid = 22414


On stderr I get (/tmp/jk/jk.err):

%Internal DCE Threads problem (version CMA BL10+), terminating execution.
% Reason: assertion failure:  cma__Queue_insert: Q corruption
        at line 1884 in /project/dce/build/dce1.1-snap/src/threads/cma_dispatch.c, pid = 22414
% See 'cma_dump.log' for state information.
%Internal DCE Threads problem (version CMA BL10+), terminating execution.
% Reason: assertion failure:  cma__Queue_next: Q corruption
        at line 1241 in /project/dce/build/dce1.1-snap/src/threads/cma_debugger.c, pid = 22414
% See 'cma_dump.log' for state information.

This comes infinitely until you kill svcdumplog with 9.

Exactly this we see for server processes on AT386 (gdscache, gdscstub)
when they use SVC (tracing switched on).
The cma_dump.log is exactly the same for dua (/tmp/jk/cma_dump.log) and C-Stub.

I think SVC does something wrong with IDL. 
Please: fix it!

(Notice: I don't get these thread problems in the runtime of the dua (gdscp) -
I get them when using gdsstep or svcdumplog!)

[7/9/94 public]
CR 11156 is similar, except that dumps core in the idl-generated decode
function.

Solution is to call the new function dce_svc_init() before reading or writing
binary log files.  Basic problem: rpc_sm_enable_allocate() has to be called
sometime before using the encoding services.  We see the same problem when
using the ACL library.

[7/15/94 public]
Solution works, and GDS is happy.



CR Number                     : 11049
Defect or Enhancement?        : def
CR in Code, Doc, or Test?     : code
Inter-dependent CRs           : 
Project Name                  : dce
H/W Ref Platform              : all
S/W Ref Platform              : all
Component Name                : utils
Subcomponent Name             : db
Short Description             : Many DB operations should not
be performed within db iterator loop.  Code should enforce.
Reported Date                 : 6/22/94
Found in Baseline             : 1.1
Found Date                    : 6/22/94
Severity                      : B
Priority                      : 1
Status                        : closed
Duplicate Of                  : 
Fix By Baseline               : 1.1
Fixed In Baseline             : 1.1b17
Affected File(s)              : dce/utils/acldb/db*
Sensitivity                   : public

[6/22/94 public]

While in a DB iterator loop, calls to things like db_delete(), db_store(),
db_iter_start() and db_count() should be disallowed with error.  OR we 
should figure out some way to make them work without disturbing the
current iterator.

Whichever solution is decided, DOCS should reflect change.

[08/27/94 public]
We should fix this for 1.1 so that trying to do something "bad"
while in an interator will get you an error.  It shuld be easy to
add a new status code to sams and then put
	if (h->iter_state != ITER_NOT) { *st = xxxx ; return; }
Rob, do you know which functions should get this?

[8/29/94]
Anything operation that perturbs the leaf level of the btree may throw off the
iterators position.  So, delete/store.  In addition, any operation that
might attempt to create a new iterator should check to see that one is
not currently in affect.  So, iter_start/count.

Note that the db44 btree code has some fancy logic to get around this
problem by deferring deletes while in iterators and other such tricks.
There are flags on the open calls to use this logic.  I don't know the
details and/or how well it works.  I would go with the disallow approach
as Rich describes above.

[9/5/94 public]
Changed those functions to check if iterating. If so, return an error.

Doc should reflect this. Status code db_s_iter_not_allowed can be
returned by dce_db_store*, dce_db_delete*, dce_db_iter_start, dce_db_count.

[9/6/94 public]
Nighty bld happy. Closed.



CR Number                     : 11028
Defect or Enhancement?        : def
CR in Code, Doc, or Test?     : code
Inter-dependent CRs           : 
Project Name                  : dce
H/W Ref Platform              : all
S/W Ref Platform              : all
Component Name                : utils
Subcomponent Name             : misc
Short Description             : dcelibmsg.h not installed
Reported Date                 : 6/21/94
Found in Baseline             : 1.1b9
Found Date                    : 6/21/94
Severity                      : C
Priority                      : 2
Status                        : closed
Duplicate Of                  : 
Fix By Baseline               : 1.1
Fixed In Baseline             : 1.1b11
Affected File(s)              : utils/misc/Makefile
Sensitivity                   : public

[6/21/94 public]
The file dcelibmsg.h is not installed (with IDIR) from dce/utils/misc.
Makefile should be adjusted.

[6/22/94 public]
Same goes for dce64.h

dcelibmsg.h and dce64.h are now installed (added to ILIST).  Also added
dce_utils.h (a new file, see CR 10004).

[6/27/94 public]
Fix works.  Closed.



CR Number                     : 11008
Defect or Enhancement?        : def
CR in Code, Doc, or Test?     : code
Inter-dependent CRs           : 
Project Name                  : dce
H/W Ref Platform              : all
S/W Ref Platform              : all
Component Name                : utils
Subcomponent Name             : acl
Short Description             : dce__rdacl_lookup() does not check status of called resolver
Reported Date                 : 6/20/94
Found in Baseline             : 1.1b9
Found Date                    : 6/20/94
Severity                      : B
Priority                      : 2
Status                        : closed
Duplicate Of                  : 
Fix By Baseline               : 1.1
Fixed In Baseline             : 1.1b13
Affected File(s)              : utils/acldb/aclimpl.c
Sensitivity                   : public

[6/20/94 public]
In dce__rdacl_lookup(), the status returned by the caller's resolver
routine is not checked.  It should be.

Also, not all places that call dce__rdacl_lookup() check the status either.

[7/27/94 public]
Now check return status of resolver in dce__rdacl_lookup.
Also, check in the other places.

[7/28/94 public]
Nightly build happy.  Closed.



CR Number                     : 10977
Defect or Enhancement?        : def
CR in Code, Doc, or Test?     : doc
Inter-dependent CRs           : 10886
Project Name                  : dce
H/W Ref Platform              : all
S/W Ref Platform              : all
Component Name                : utils
Subcomponent Name             : db
Short Description             : mem freeing issues needed for backing store fetch doc
Reported Date                 : 6/16/94
Found in Baseline             : 1.1b9
Found Date                    : 6/16/94
Severity                      : B
Priority                      : 2
Status                        : closed
Duplicate Of                  : 
Fix By Baseline               : 1.1
Fixed In Baseline             : 1.1doc
Affected File(s)              : See below
Sensitivity                   : public

[6/16/94 public]
Discussion about how to free storage when fetching items from a backing
store should be made more clear.  For example, after calling dce_db_fetch()
(or the _by_uuid or _by_name versions), some memory may need to be freed
if the call was made outside of an RPC (server side).  (Since it is
allocated with rpc_sm_allocate(), it is automatically freed in this case.) 
If done outside an RPC, the caller should call rpc_sm_client_free().

This should be discussed in the App Dev Guide in the backing store
discussions, and in manpages for dce_db_fetch() and it's friends.
The dce_db_free() manpage says it doesn't do anything (it can't, really,
due to idl immaturaturity), but a couple sentences on what and how to
free should be mentioned.

As CR 10886 states, you should call rpc_sm_enable_allocate() before
fetch and store operations.  (It says to call it befor store, but the same
is true of fetch.)

[6/29/94 public]

Assigned this CR to Peter Neilson, OSF db writer.

[9/8/94 public]
Fixed in files
  dce_books/app_gd/dce/backing_store.gpsml
  dce_books/app_ref/man3dce/dce_db_fetch*.3dce
Verified by bowe and neilson.

[09/22/94 public]
Closed bug.



CR Number                     : 10971
Defect or Enhancement?        : def
CR in Code, Doc, or Test?     : doc
Inter-dependent CRs           : 
Project Name                  : dce
H/W Ref Platform              : all
S/W Ref Platform              : all
Component Name                : utils
Subcomponent Name             : db
Short Description             : can not use conformant arrays in stored objects
Reported Date                 : 6/15/94
Found in Baseline             : 1.1b9
Found Date                    : 6/15/94
Severity                      : B
Priority                      : 2
Status                        : closed
Duplicate Of                  : 
Fix By Baseline               : 1.1
Fixed In Baseline             : 1.1doc
Affected File(s)              : app_gd/dce/backing_store.gpsml
Sensitivity                   : public

[6/15/94 public]
For backing store lib doc...

You can not use "conformant arrays" in objects stored to a backing store.
This is because the idl-generated code that encodes (pickles) the structure
can not know how big an array is.  When the object is fetched, the structure
will generally not have enough space provided, and will clobber whatever is
in memory after the structure.

Just to be clear, here is an example.  Suppose the struct in your idl
file is this:

    typedef struct {
	unsigned32          length;
	[size_is(length)]
	unsigned32          numbers[];
    } num_array_t
    typedef struct {
	char		*name;
	num_array_t	na;
    } my_type_t;

idl turns it into this in the .h file:

    typedef struct  {
	unsigned32 length;
	unsigned32 numbers[1];
    } num_array_t
    typedef struct {
	idl_char	*name;
	num_array_t	na;
    } my_type_t;

If you do

    my_type_t  my_struct;
    dce_db_fetch(dbh, key, &my_struct, &st)"

and the array is of length of more than 1, the decoding operation will
clobber what is after my_struct in memory.

Instead, use a pointer to the array, not the array itself.  Eg,

    typedef struct {
	char		*name;
	num_array_t	*na;
    } my_type_t;

[8/26/94 public]
Document corrected, verified by John Bowe.

[09/01/94 public]
Closed bug.



CR Number                     : 10957
Defect or Enhancement?        : def
CR in Code, Doc, or Test?     : code
Inter-dependent CRs           : 
Project Name                  : dce
H/W Ref Platform              : all
S/W Ref Platform              : all
Component Name                : utils
Subcomponent Name             : dce_db
Short Description             : alignment probs in dce_db_iter
Reported Date                 : 6/15/94
Found in Baseline             : 1.1b10
Found Date                    : 6/15/94
Severity                      : A
Priority                      : 0
Status                        : closed
Duplicate Of                  : 
Fix By Baseline               : 1.1beta
Fixed In Baseline             : 1.1b10
Affected File(s)              : dce/utils/acldb/{dbimpl.h,dbiterate.c}
Sensitivity                   : public

[6/15/94 public]

The database library has iterator functions that can return either a char*
or a uuid.  The uuid isn't guaranteed to be aligned.  It should be aligned.
The easiest way to fix this is to have a "spare" uuid in the dce_db_handle
and then memcpy what the lower-level routine returns into that uuid,
and set the pointer to point to that.  There are no alignment reqs for char*
keys.

[06/16/94 public]
Did what I described above.  Fix submitted.

[06/21/94 public]
Fix worked.  Closed.



CR Number                     : 10953
Defect or Enhancement?        : def
CR in Code, Doc, or Test?     : code
Inter-dependent CRs           : 
Project Name                  : dce
H/W Ref Platform              : i486
S/W Ref Platform              : osf1
Component Name                : utils
Subcomponent Name             : dce_config
Short Description             : After having configured DCE
using dced on an OSF1 machine, a subsequest configuration using rpcd fails.
Reported Date                 : 6/15/94
Found in Baseline             : 1.1
Found Date                    : 6/15/94
Severity                      : C
Priority                      : 2
Status                        : closed
Duplicate Of                  : 
Fix By Baseline               : 1.1
Fixed In Baseline             : 1.1b11
Affected File(s)              : config/dce_config
Sensitivity                   : public

[6/15/94 public]

This is the error printed by rpcd during the configuration on an
OSF1 machine which had been previously configured with dced. 


        Press <RETURN> to continue, CTRL-C to exit: 
(rpcd) Can't initialize ept database: (0x16c9a0d0) cannot create endpoint
databa
se (dce / rpc)
        What is the name of the Security Server for this cell?  west
S:****** Time on dce3 is within specified tolerance (120 sec) of time on
west.
WARNING: Ensure the /opt/dcelocal/etc/security/pe_site file matches that on
the 
server...
        Press <RETURN> to continue, CTRL-C to exit: 

        Enter Cell Administrator's principal name: (cell_admin) 


R. Salz suggested a work-around:

mkdir /opt/dcelocal/var/rpc

[06/28/94 public]
(For now) dce_config will do the mkdir for rpc.

[7/29/94 public]
Closing, since this was a temporary fix, which worked.

CR 11488 is about removing rpcd and sec_clientd stuff from dce_config.



CR Number                     : 10947
Defect or Enhancement?        : def
CR in Code, Doc, or Test?     : code
Inter-dependent CRs           : 11059
Project Name                  : dce
H/W Ref Platform              : all
S/W Ref Platform              : all
Component Name                : utils
Subcomponent Name             : svc
Short Description             : Changing svc routing does not take affect
Reported Date                 : 6/14/94
Found in Baseline             : 1.1
Found Date                    : 6/14/94
Severity                      : B
Priority                      : 1
Status                        : closed
Duplicate Of                  : 
Fix By Baseline               : 1.1
Fixed In Baseline             : 1.1b12
Affected File(s)              : utils/svc/svcroute.c
Sensitivity                   : public

[6/14/94 public]

Changing the routing information via dcecp doesn't seem to take
affect.

Try running dtsd server with no Time Provider, it will send WARNING
messages to stderr teling you it has only 1 out of 3 servers it
needs to sync.

Now give the command:
% dcecp
dcecp>log modify /.:/hosts/<hostname>/dts-entity -change WARNING:FILE:/tmp/warn
dcecp>

Now do 'dtscp sync'.  
The warning message still comes to the screen, not to the file specified.

The command dcecp -c log show /.:/hosts/<hostname>/dts-entity will verify
that the route was set correctly.

[7/15/94 public]
Setting a route didn't work when one was already set.  (This is a more
general case of CR 11059, which was not quite a dup.)  In dce_svc_routing(),
it was comparing dce_svc_g_code_table against the routing string incorrectly.

The above steps now work correctly (in bl-12).



CR Number                     : 10922
Defect or Enhancement?        : def
CR in Code, Doc, or Test?     : code
Inter-dependent CRs           : 
Project Name                  : dce
H/W Ref Platform              : all
S/W Ref Platform              : all
Component Name                : utils
Subcomponent Name             : 
Short Description             : New default route to verbose
Reported Date                 : 6/9/94
Found in Baseline             : 1.1
Found Date                    : 6/9/94
Severity                      : C
Priority                      : 2
Status                        : closed
Duplicate Of                  : 
Fix By Baseline               : 1.1beta
Fixed In Baseline             : 1.1
Affected File(s)              : ./dce/utils/svc/svcimpl.h ./dce/utils/svc/svcprintf.c ./dce/utils/svc/svcroute.c
Sensitivity                   : public

[6/9/94 public]

Much goodness was done by adding STDERR as the default route
in the case where an admin has not specified a routing.

Unfortunately, too much goodness, as CDS and DTS both have NOTICE
and NOTICE_VERBOSE messages spewing forth on to the screen during
configure and shutdown (and for CDS, operation as it spawns clerks).

The default of STDERR should only be for ERRORS and possibly WARNINGS.

Since this has icky user visible side affects, 
I think this should be fixed for Beta.

[06/10/94 public]
The work-around is trivial, put
	NOTICE:DISCARD:-
	NOTICE_VERBOSE:DISCARD:-
in your svc routing file.  Because of that I changed this to a C2.  I think
we should fix the code for beta tho.

[6/10/94 public]
Rich coded up a fix to only FATAL, ERROR, and WARNING go to stderr by default.
NOTICE and NOTICE_VERBOSE get discarded.
Tested and submitted files.
We still have problems with CDS and DTS printing WARNINGs and ERRORs
to the screen on startup/shutdown, but these will be addressed in
their respective components.



CR Number                     : 10914
Defect or Enhancement?        : def
CR in Code, Doc, or Test?     : code
Inter-dependent CRs           : 
Project Name                  : dce
H/W Ref Platform              : all
S/W Ref Platform              : all
Component Name                : utils
Subcomponent Name             : sams
Short Description             : sams writes null description to dceXXXsvc.c
Reported Date                 : 6/9/94
Found in Baseline             : 1.1b9
Found Date                    : 6/9/94
Severity                      : C
Priority                      : 1
Status                        : closed
Duplicate Of                  : 
Fix By Baseline               : 1.1
Fixed In Baseline             : 1.1b13
Affected File(s)              : tools/sams/sams.c
Sensitivity                   : public

[6/9/94 public]

This problem manifests itself when using the log command in dcecp,
the values returned by the dce_svc_inq_table, in the field sc_descr,
are null.

Example:
dcecp> log list /.:/hosts/bronze/cds-clerk 
{cds rpc}
dcecp> log list /.:/hosts/bronze/cds-clerk -comp rpc
{rpc_svc_general 0  ""}
{rpc_svc_mutex 0  ""}
{rpc_svc_xmit 0  ""}
{rpc_svc_recv 0  ""}
{rpc_svc_dg_state 0  ""}
{rpc_svc_cancel 0  ""}
{rpc_svc_orphan 0  ""}
{rpc_svc_cn_state 0  ""}
{rpc_svc_cn_pkt 0  ""}
{rpc_svc_pkt_quotas 0  ""}
{rpc_svc_auth 0  ""}
<.....>

dcecp> log list /.:/hosts/bronze/cds-clerk -comp cds
{adver      0  ""}
{clerk      0  ""}
{gda        0  ""}
{server     0  ""}
{cache      0  ""}
{library    0  ""}
{general    0  ""}
{dthread    0  ""}
{cdscp      0  ""}
dcecp>

[7/25/94 public]
It's not svc library code.  Sams is writing bad code to dcexxxsvc.c file:

    dce_svc_subcomp_t cds__svc_table[10] = {
	/* cds_svc_adver */
	{ (idl_char *)"adver",
	    (idl_char *)"(null)",
	    0x00000000 /* cds_i_svc_adver */, svc_c_debug_off },
	...

That "(null)" field should not be null.

Problem:
sams' "-oS" option was not considered when deciding when to call
ValidateSvcRecords(), which sets the sc_descr field. (just "-os" was ckecked)

[7/26/94 public]
Tried sams from the nightly build.  Works.  Closed.



CR Number                     : 10903
Defect or Enhancement?        : def
CR in Code, Doc, or Test?     : code
Inter-dependent CRs           : 
Project Name                  : dce
H/W Ref Platform              : all
S/W Ref Platform              : all
Component Name                : utils
Subcomponent Name             : svc
Short Description             : bad frees in SVC
Reported Date                 : 6/8/94
Found in Baseline             : 1.1b9
Found Date                    : 6/8/94
Severity                      : A
Priority                      : 1
Status                        : closed
Duplicate Of                  : 
Fix By Baseline               : 1.1beta
Fixed In Baseline             : 1.1b10
Affected File(s)              : dce/utils/svc/svcroute.c
Sensitivity                   : public

[6/8/94 public]

SVC code can end up doing free(0) which can crash on some platforms.
The low-level dce_svc__open_routes routine strdup's a value, then
moves the pointer past what it strdup'd, and then frees the pointer.
The fix is to save a copy of the pointer and free that.

[06/09/94 public]
Fixed submitted built closed.



CR Number                     : 10897
Defect or Enhancement?        : def
CR in Code, Doc, or Test?     : code
Inter-dependent CRs           : 
Project Name                  : dce
H/W Ref Platform              : all
S/W Ref Platform              : all
Component Name                : utils
Subcomponent Name             : acl
Short Description             : dtsd gets Exception: fault invalid tag and other good stuff
Reported Date                 : 6/8/94
Found in Baseline             : 1.1
Found Date                    : 6/8/94
Severity                      : A
Priority                      : 0
Status                        : closed
Duplicate Of                  : 
Fix By Baseline               : 1.1beta
Fixed In Baseline             : 1.1
Affected File(s)              : ./dce/utils/acldb/aclconv.c,./dce/utils/acldb/aclimpl.c,./dce/utils/acldb/dbstore.c,./time/service/mgtacl.c
Sensitivity                   : public

[6/8/94 public]

Using the nightly build available 06-08 I get the following error trying
to start dtsd on an HP machine:

Exception: fault invalid tag (dce / rpc)

dtsd starts ok on an OSF/1 machine, but dtscp commands give:

root@dce3> ps ax | grep dts
10081 ??       S        0:02.24 dtsd -s
11463 ??       S        0:00.24 dts_ntp_provider -h paperboy -p 600 -i 30
10664 pts/1    S  +     0:00.05 grep dts
root@dce3> dtscp show all
error executing command:
        acl operation expected user_obj (dce / sec)

[6/8/94 ]

It is true that one can start dtsd by hand but does not help
anything because dtsd is unusable. Issuing dtscp or dcecp clock
or dts commands result in failute. Ex.

dtscp> sync
error executing command:
        acl operation expected user_obj (dce / sec)
dtscp> show local servers
cannot contact dts daemon - rpc failure:
unknown reject (dce / rpc)
dtscp> show global servers
cannot contact dts daemon - rpc failure:
connection closed (dce / rpc)
dtscp> quit

This errors happen while dtsd is running:

root@bronze> ps -ef | grep dts
    root 13789 13674  0 13:07:12 ttyp3    0:00 grep dts
    root 13677     1  0 10:46:00 ?        0:21 /opt/dcelocal/bin/dtsd -s
    root 13608     1  0 10:18:05 ?        0:00 dtstimed
root@bronze>

[6/8/94]

Some clarification here: 

dtsd is dying in the ACL library, specifically, in the call to 
dce_db_store(). This is symptomatic of the problems stated in CR10476.
We are investigating.

[6/8/94]

Further clarification: 

Here is the back trace for dtsd.
> 
> #0  0x8002c1c8 in _kill ()
> #1  0x80128477 in cma__abort_process ()
> #2  0x80109bce in exc_raise ()
> #3  0x80109d12 in exc_pop_ctx ()
> #4  0x801382e6 in dce_rdacl_convert ()
> #5  0x80135808 in dce__db_store ()
> #6  0x801359df in dce_db_store_by_uuid ()
> #7  0x8054e61 in mgt_acl_init ()
> #8  0x8052156 in InitCPinterface ()
> #9  0x8062ce1 in InitEvent ()
> #10 0x804f790 in InitializeService (argc=3, argv=0x8047b54,
>     argptr=0x8047b1c)
>     at ../../../../src/time/service/dtss_service_main.c:722
> #11 0x804edbd in main (argc=3, argv=0x8047b54)
>     at ../../../../src/time/service/dtss_service_main.c:360
>

[6/8/94 public]
Charlie: can you tell if this thread calls rpc_sm_enable_allocate()
before it gets to the dce_db_store()?  (I added that call after the only
place I found it to open the acl database, but if a different thread (not
in a server RPC) calls the store func, it will fail.)

Kind of odd that this is happening, since I ran dtsd -s on my HP, and it
answered me successfully with dtscp...

[6/9/94]

I am reassigning this to security, based on the following
observations. 

There is a sequence of calls to 
	sec_id_parse_name() 
and
	sec_rgy_pgo_name_to_id() 

which results in a uuid being returned. When this uuid is then used as
an argument to the dce_acl_obj_add_user_entry() function, and this 
acl is written to the the ACL file, dtsd aborts with the above
exception.

When this uuid is not added to the ACL, dtsd proceeds normally. 

Hence, my suspicion is that the uuid value returned from the above registry
calls is incorrect (Note: the value of the uuid did not change between
the sec_rgy_xxx() call and the dce_acl_obj_add_user_entry() call

[6/13/94]

This is not (after all) a security bug. The problem appears to have
been an initialization error combined with memory allocation in the 
ACL library. 

In addition, I added a call to rpc_sm_enable_alloc() in the mgtacl.c 
file for the dtsd, and, at Rich Salz's suggestion, changed all calls 
to free() with rpc_sm_client_free(). 

I configured a cell with the bits from Sunday night's build (6/12/94)
on the HP and the AT486 machines: both dtsd's came up correctly, and 
the (correct) ACL was readable by both acl_edit and dtscp

Finally, for completeness, I've changed the component, responsible
engineer, etc. to reflect more correctly the location of the problem.

[6/13/94 public]

dtsd and the ACL library have built successfully for the last 3
nights, and the builds have successfully smoke-tested. I'm marking
this as closed.



CR Number                     : 10891
Defect or Enhancement?        : def
CR in Code, Doc, or Test?     : code
Inter-dependent CRs           : 10894
Project Name                  : dce
H/W Ref Platform              : all
S/W Ref Platform              : all
Component Name                : utils
Subcomponent Name             : svc
Short Description             : incorrect parse of
routing string
Reported Date                 : 6/8/94
Found in Baseline             : 1.1
Found Date                    : 6/8/94
Severity                      : B
Priority                      : 1
Status                        : closed
Duplicate Of                  : 
Fix By Baseline               : 1.1beta
Fixed In Baseline             : 1.1b10
Affected File(s)              : dce/utils/svc/svcroute.c
Sensitivity                   : public

[6/8/94 public]

No output is genererated when dce_svc_routing() is passed the
following string: 

	*:STDERR:

The src/utils/svc/routing file would lead one to believe that this
should result in all production error messages being routed to the
STDERR unit.

[06/08/94 public]
Fixed; see OT CR 10894 for details on the fix.

[06/13/94 public]
Fix works.  Closed.



CR Number                     : 10886
Defect or Enhancement?        : def
CR in Code, Doc, or Test?     : doc
Inter-dependent CRs           : 
Project Name                  : dce
H/W Ref Platform              : all
S/W Ref Platform              : all
Component Name                : utils
Subcomponent Name             : db
Short Description             : must call rpc_sm_enable_allocate() before dce_db_store() in non-servers
Reported Date                 : 6/7/94
Found in Baseline             : 1.1b9
Found Date                    : 6/7/94
Severity                      : B
Priority                      : 2
Status                        : closed
Duplicate Of                  : 
Fix By Baseline               : 1.1
Fixed In Baseline             : 1.1doc
Affected File(s)              : dce_books/app_ref/man3dce/dce_db_store*.3dce
Sensitivity                   : public

[6/7/94 public]
Programs that call dce_db_store() outside of a server operation (like
if a server does some backing store initialization, or in a standalone
program) must call rpc_sm_enable_allocate() first.  Actually, each thread that
calls dce_db_store() must do rpc_sm_allocate().  Remember that in the
server side of an RPC, this is already done.

These should be mentioned in the manpage for dce_db_store() and in
examples.

[8/30/94 public]
Fixed in man pages dce_db_store.3dce, dce_db_store_by_name.3dce,
dce_db_store_by_uuid.3dce, and verified by bowe.

[09/08/94 public]
Closed bug.



CR Number                     : 10885
Defect or Enhancement?        : def
CR in Code, Doc, or Test?     : code
Inter-dependent CRs           : 
Project Name                  : dce
H/W Ref Platform              : all
S/W Ref Platform              : all
Component Name                : utils
Subcomponent Name             : svc
Short Description             : messages disappear by default
Reported Date                 : 6/7/94
Found in Baseline             : 1.1b9
Found Date                    : 6/7/94
Severity                      : B
Priority                      : 1
Status                        : closed
Duplicate Of                  : 
Fix By Baseline               : 1.1beta
Fixed In Baseline             : 1.1b10
Affected File(s)              : dce/utils/svc/svcroute.c
Sensitivity                   : public

[6/7/94 public]
By default, non-debug SVC messages (ERROR, etc) are not output.
They should be.  John and I know the fix.

[06/08/94 public]
Fix made.

[06/13/94 public]
Fix works.  Closed.



CR Number                     : 10856
Defect or Enhancement?        : def
CR in Code, Doc, or Test?     : code
Inter-dependent CRs           : 
Project Name                  : dce
H/W Ref Platform              : all
S/W Ref Platform              : all
Component Name                : utils
Subcomponent Name             : svc ACL manager
Short Description             : Remove ACL manager routines
Reported Date                 : 6/3/94
Found in Baseline             : 1.1b9
Found Date                    : 6/3/94
Severity                      : D
Priority                      : 4
Status                        : closed
Duplicate Of                  : 
Fix By Baseline               : 1.1
Fixed In Baseline             : 1.1b12
Affected File(s)              : dce/utils/svc/*acl*, security/audit/audit/*acl*
Sensitivity                   : public

[6/3/94 public]

The SVC library has some code to support writing an ACL manager.
That could should be removed; we have a full ACL manager library now.
I believe auditd is the only user of those routines -- and maybe even
they don't.

[07/08/94 public]
auditd had its own copy of the C files, but not the .h file.  I copied
the .h file over.  I then edited svc/Makefile to remove reference to
the ACL manager and defuncted the files.  Fixed.

[7/12/94 public]
Stuff was removed cleanly.  Closed.



CR Number                     : 10797
Defect or Enhancement?        : def
CR in Code, Doc, or Test?     : code
Inter-dependent CRs           : 
Project Name                  : dce
H/W Ref Platform              : all
S/W Ref Platform              : all
Component Name                : utils
Subcomponent Name             : dce/utils/svc broke on all 3 platforms
Short Description             : The order of SUBDIRS in src/Makefile is incorrect
Reported Date                 : 5/27/94
Found in Baseline             : 1.1
Found Date                    : 5/27/94
Severity                      : A
Priority                      : 0
Status                        : closed
Duplicate Of                  : 
Fix By Baseline               : 1.1
Fixed In Baseline             : 1.1b10
Affected File(s)              : dce/utils/svc/Makefile
Sensitivity                   : public

[5/27/94 public]

src/dce/utils/svc/svcutil.idl references utctypes.idl which resides
in src/time/svc.  

There was NO VPATH in src/dce/utils/svc/Makefile.
(YAHOO for that).  

However, there is an order dependency.  It is the fact that the time
component MUST comes before the dce/utils component to put the referenced
file out there (in the export area).

So, the SUBDIRS in src/Makefile needs to be changed so that the time
component comes before dce/utils. 

The order dependency is NOT apparent in one's sandbox because one's 
sandbox is backed by a backing tree which usually has a 'populated'
export area.

John, since you were the last person who had submitted this file, I 
am holding you responsible.  Please fix ASAP.

p/s  I am building in place as we speak.  This will work since make has
traversed the time component, and the referenced file is out there.

thanks
annie

[6/1/94 public]
In dce/utils/svc/Makefile set IDLINCFLAGS and INCFLAGS for building svcbin.h
and svcbin_cstub.* to refer to the proper time .idl and .h files.  (These
files were not available during a build because time is visited after svc in
that pass; the time file have not been export yet.)

Passed several nightly builds.  Closed

Note that some of the paths mentioned in the original report do not exist
(and have never existed).  Please be more careful.



CR Number                     : 10779
Defect or Enhancement?        : def
CR in Code, Doc, or Test?     : code
Inter-dependent CRs           : 
Project Name                  : dce
H/W Ref Platform              : all
S/W Ref Platform              : all
Component Name                : utils
Subcomponent Name             : db
Short Description             : dce_db_close() cores dumps on
HP, not on 486.  Bad free is suspected.
Reported Date                 : 5/25/94
Found in Baseline             : 1.1
Found Date                    : 5/25/94
Severity                      : B
Priority                      : 2
Status                        : closed
Duplicate Of                  : 
Fix By Baseline               : 1.1
Fixed In Baseline             : 1.1b10
Affected File(s)              : dce/utils/acldb/dbopen.c
Sensitivity                   : public

[5/25/94 public]

See OT #10778 re; acl lib free problem.  I think in this case the
line of code in dce_db_close() that does a free (h) should be free(*h).

Does the DCE team have a memory leak/bad free detection library?  Its easy
to build a simple one.  I would recommend doing so and checking all daemons
& servers for leaks and bad frees.  On the 486/gcc platform, these problems
hide themselves pretty well.

[5/27/94 public]
Applied fix as mentioned above.

[6/3/94 public]
Fix works.  Closed.



CR Number                     : 10778
Defect or Enhancement?        : def
CR in Code, Doc, or Test?     : code
Inter-dependent CRs           : 
Project Name                  : dce
H/W Ref Platform              : all
S/W Ref Platform              : all
Component Name                : utils
Subcomponent Name             : acl
Short Description             : The dce_acl_obj_free_entries()
ocassionally cores on the HP.  Bad frees are suspected.
Reported Date                 : 5/25/94
Found in Baseline             : 1.1
Found Date                    : 5/25/94
Severity                      : B
Priority                      : 2
Status                        : closed
Duplicate Of                  : 
Fix By Baseline               : 1.1
Fixed In Baseline             : 1.1b10
Affected File(s)              : dce/utils/acldb/aclconv.c
Sensitivity                   : public

[5/25/94 public]

The dce_acl_obj_free_entries() core dumps about 30% of the time on the
HP, not seen on 486.  The dump is in free().  The HP compiler and/or
malloc/free package seem to be less forgiving about bad frees() than
gcc/486.

Note that the allocates in the ACL library are done using DCE
rpc_sm_allocate() yet the frees are done with free().  This is not
a good thing.

[6/7/94 public]
There was some inconsistency in use of rpc_sm_allocate/malloc/rpc_sm_free/free.
Straightened out.



CR Number                     : 10757
Defect or Enhancement?        : def
CR in Code, Doc, or Test?     : code
Inter-dependent CRs           : 
Project Name                  : dce
H/W Ref Platform              : hppa
S/W Ref Platform              : hpux
Component Name                : utils
Subcomponent Name             : db
Short Description             : dced dumps core in dce_db_store
Reported Date                 : 5/24/94
Found in Baseline             : 1.1
Found Date                    : 5/24/94
Severity                      : A
Priority                      : 1
Status                        : closed
Duplicate Of                  : 
Fix By Baseline               : 1.1beta
Fixed In Baseline             : 1.1b10
Affected File(s)              : utils/acldb/dbstore.c, time/service/mgtacl.c
Sensitivity                   : public

[5/24/94 public]

dced core dumps while running dced api tests.
There is no particular test where this happens. 

I could run all the API tests (58 - secval, keytab,hostdata, common)
on 486/osf1 with a 'tcc all' command. I could not do this HP/ux.
It is tough to run even smaller subsets, without crashing.

But when run the tests pass.

[5/25/94 public]

dcecp keytab and hostdata command tests are showing the same problem.
Although it seems to happen faster.  These tests do extensive keytab
and hostdata 'create' operations.  This may be the reason.

The top of the core stack seems to be in teh libc free() routine.  see 
OT #10778 & 10779 for other free related problems.

OT #10781 is a dupe of this one.

[6/7/94 public]
In dce_db_store(), I now use rpc_sm_free() instead of free().
I had to adjust places that call dce_db_store that are not in a server
operation - had to do rpc_sm_enable_allocate().  These include dced (in
main, and in the thread that deals with patching ACLs after bootstrap).
Also dtsd and two places in the utils test area.

Note that you need rpc_sm_enable_allocate() for each thread that will
call dce_db_store().

[6/21/94 public]
Fix works. Closed.  One difference - rpc_sm_client_free() is the free
function to use.



CR Number                     : 10678
Defect or Enhancement?        : def
CR in Code, Doc, or Test?     : code
Inter-dependent CRs           : 
Project Name                  : dce
H/W Ref Platform              : all
S/W Ref Platform              : all
Component Name                : utils
Subcomponent Name             : acl
Short Description             : aclif.h should have rdacl EPVs
Reported Date                 : 5/17/94
Found in Baseline             : 1.1
Found Date                    : 5/17/94
Severity                      : C
Priority                      : 2
Status                        : closed
Duplicate Of                  : 
Fix By Baseline               : 1.1
Fixed In Baseline             : 1.1b12
Affected File(s)              : dce/utils/acldb/aclif.h
Sensitivity                   : public

[5/17/94 public]
aclif.h should declare the rdacl EPVs, something like:
  extern rdaclif_v1_0_epv_t dce_acl_v1_0_epv;
  extern rdaclif_v0_0_epv_t dce_acl_v0_0_epv;
It will have to #include the rdaclif.h (for v0 and v1).
Now, every app server has to do this kind of thing.

[7/13/94 public]
Done as said above.



CR Number                     : 10659
Defect or Enhancement?        : def
CR in Code, Doc, or Test?     : code
Inter-dependent CRs           : 
Project Name                  : dce
H/W Ref Platform              : all
S/W Ref Platform              : all
Component Name                : utils
Subcomponent Name             : acl
Short Description             : dce_acl_inq_prin_and_group() dumps core if unauthenticated
Reported Date                 : 5/16/94
Found in Baseline             : 1.1b7
Found Date                    : 5/16/94
Severity                      : A
Priority                      : 1
Status                        : closed
Duplicate Of                  : 
Fix By Baseline               : 1.1beta
Fixed In Baseline             : 1.1b10
Affected File(s)              : dce/utils/acldb/aclconv.c
Sensitivity                   : public

[5/16/94 public]
dce_acl_inq_prin_and_group() will (may) dump core if the server is
talking to an unauthenticated user AND a null UUID pointer is passed
in as a param.

Fix is simple; only assign value if pointer isn not null.

[5/18/94 public]
Changed to check that prin and group pointers (pointers to UUIDs)
are non-null before assigning value.

[5/23/94 public]
Fix works. Closed.



CR Number                     : 10657
Defect or Enhancement?        : def
CR in Code, Doc, or Test?     : code
Inter-dependent CRs           : 
Project Name                  : dce
H/W Ref Platform              : all
S/W Ref Platform              : all
Component Name                : utils
Subcomponent Name             : acl
Short Description             : uninitialized pointers in unauthenticated check
Reported Date                 : 5/16/94
Found in Baseline             : 1.1b8
Found Date                    : 5/16/94
Severity                      : A
Priority                      : 1
Status                        : closed
Duplicate Of                  : 
Fix By Baseline               : 1.1beta
Fixed In Baseline             : 1.1b10
Affected File(s)              : dce/utils/acldb/acleval.c
Sensitivity                   : public

[5/16/94 public]
There are a few uninitialized pointers in dce_acl__inq_unauthen_perms(),
which produce misleading results when determininig the permissions for
the unauthenticated user.  ["gcc -Wall" didn't catch these...]

Fix is simple: initialized them to NULL.

[5/18/94 public]
Initialized the pointers, a stand-alone testcase works, and Charlie's
"dtsd" work is happy.  I'll close this when it all goes throught a
nightly build.

[5/25/94 public]
Fix works.  Closed.



CR Number                     : 10641
Defect or Enhancement?        : def
CR in Code, Doc, or Test?     : code
Inter-dependent CRs           : 
Project Name                  : dce
H/W Ref Platform              : all
S/W Ref Platform              : all
Component Name                : utils
Subcomponent Name             : editline
Short Description             : ^r doesn't work in readline()
Reported Date                 : 5/13/94
Found in Baseline             : 1.1b8
Found Date                    : 5/13/94
Severity                      : D
Priority                      : 2
Status                        : closed
Duplicate Of                  : 
Fix By Baseline               : 1.1
Fixed In Baseline             : 1.1b9
Affected File(s)              : dce/utils/misc/readline.c
Sensitivity                   : public

[5/13/94 public]
Reverse search in history invoked with ^r doesn't work in readline.

[06/03/94 public]
The DCE readline wasn't current with my freely-redistributable
version.  I upgraded it awhile ago.  Closing this.



CR Number                     : 10639
Defect or Enhancement?        : def
CR in Code, Doc, or Test?     : code
Inter-dependent CRs           : 
Project Name                  : dce
H/W Ref Platform              : all
S/W Ref Platform              : all
Component Name                : utils
Subcomponent Name             : svc
Short Description             : SVC_comp_DBG doesn't work
Reported Date                 : 5/13/94
Found in Baseline             : 1.1b8
Found Date                    : 5/13/94
Severity                      : A
Priority                      : 2
Status                        : closed
Duplicate Of                  : 
Fix By Baseline               : 1.1
Fixed In Baseline             : 1.1b12
Affected File(s)              : /dev/null
Sensitivity                   : public

[5/13/94 public]

Setting the value of SVC_DTS_DBG or SVC_CDS_DBG when starting up dtsd or 
cdsd doesn't set specified routing for debug messages.  Try by setting

SVC_DTS_DBG="*.2:FILE:/opt/dcelocal/var/adm/logs/dts.DEBUG.env"
export SVC_DTS_DBG

and restarting dtsd (likewise for cdsadv, cdsd).  If previous debug 
routing was specified in /opt/dcelocal/var/svc/routing it is now 
ignored and no debug routing is in effect, so the env var must be 
getting read in, but not setting the level correctly.

[7/12/94 public]
This bug is exhibited by systest svccfg005

[07/11/94 public]
This is the bug:
    if ((p = getenv(buff)) != NULL)
	p += strlen(handle->component_name) + 1;
That is, doing this:
	SVC_DTS_DBG="dts:*.2:FILE:/opt/dcelocal/var/adm/logs/dts.DEBUG.env"
works.

It's hard to say if this is a bug or not.  On the one hand,
	SVC_xxx_DBS="xxx:....."
seems kind of redundant, having the component name twice, but on the other
hand including the component name makes it parallel all other SVC specs.
I'll leave it to the component owner to determine which is right.

[7/11/94 public]
For consistency, all debugging routes will have the "xxx:...".  Yes,
it's slightly redundant for the env variable, but the component is
necessary in the other 2 ways one specifies routes - the routes file
and as an arg on the command line.

I'll ask the writer (Doug) to check that this is clear in the doc.

Side note:  right now the code does not check the value of the components in
	SVC_XXX_DBS="xxx:....."
As long as XXX and xxx are the same length, it's happy.  I'll fix this
before closing this CR.

[7/12/94 public]
I ensured the doc states this clearly.  (at least the writer says it is so)
Closing.



CR Number                     : 10637
Defect or Enhancement?        : def
CR in Code, Doc, or Test?     : code
Inter-dependent CRs           : 
Project Name                  : dce
H/W Ref Platform              : all
S/W Ref Platform              : all
Component Name                : utils
Subcomponent Name             : msg -- dce_error_inq_text
Short Description             : mangled output
Reported Date                 : 5/13/94
Found in Baseline             : 1.1b8
Found Date                    : 5/13/94
Severity                      : B
Priority                      : 2
Status                        : closed
Duplicate Of                  : 
Fix By Baseline               : 1.1beta
Fixed In Baseline             : 1.1b9
Affected File(s)              : dce/utils/svc/msggetmsg.c
Sensitivity                   : public

[5/13/94 public]

RPC listen terminated abnormally - status 0x16c9a024 (h!D$dce / rpc)
                                                      ^^^^

That output doesn't belong.  Fix is that the new dce_error_inq_text
function does "tech - TECH_FIRST" twice.

[05/17/94 public]
Removed redundant reduction.

[5/23/94 public]
Fix works.  Closed.



CR Number                     : 10632
Defect or Enhancement?        : def
CR in Code, Doc, or Test?     : code
Inter-dependent CRs           : 
Project Name                  : dce
H/W Ref Platform              : all
S/W Ref Platform              : all
Component Name                : utils
Subcomponent Name             : acl
Short Description             : dce_acl_obj_add_* should check for illegal entries
Reported Date                 : 5/13/94
Found in Baseline             : 1.1b5
Found Date                    : 5/13/94
Severity                      : B
Priority                      : 3
Status                        : closed
Duplicate Of                  : 
Fix By Baseline               : 1.2
Fixed In Baseline             : 1.2.2, 1.1maint
Affected File(s)              : dce/utils/acldb/aclconv.c
Diff supplied by              : provider
Diff release                  : 1.2.2
Sensitivity                   : public

[5/13/94 public]
The dce_acl_obj_add_XXX() functions should check for illegal entries
before adding the entries.  For example, an ACL an only have one
"any_other" entry, one "unauthenticated", etc.  Also, they should
check for adding duplicates (ie, when adding a "user", first see if
that "user" is listed.  Etc...)

[10/25/94 public]
Won't make it for 1.1.  It's an easy fix.  The best places to do it is
dce_acl_obj_add_id_entry() and dce_acl_obj_add_obj_entry(), since many of
the other dce_acl_obj_add_XXX() functions simply call those to do the work. 
It'll end up being something like a "switch (entry_type)", where each case
in question will loop through the existing entries, looking for the
disallowed (ie, dup) entry type.

[2/6/96 public]
Closed. Already part of 1.2.1

[2/8/96 public]
It is not part of the 1.2 code that we have at OSF.  aclconv.c is identical
between 1.1-maint and 1.2. I am reopening this. Can you check at your end
and let me know?

[2/25/96 public]
Fixed in 1.2.2, will be part of next drop:

ADDITIONAL COMMENTS: The original defect complained about missing check in 
dce_acl_obj_add_id_entry() and dce_acl_obj_add_obj_entry() only. I have 
added the check in dce_acl_obj_add_foreign_entry() also.

*** /vob/dce/src/dce/utils/acldb/aclconv.c@@/main/psn_bugfix/3  Tue Jul 23 11:58
:20 1996
--- /vob/dce/src/dce/utils/acldb/aclconv.c      Tue Jul 23 15:06:16 1996
***************
*** 76,81 ****
--- 76,82 ----

  #include <aclimpl.h>

+ #include <dce/uuid.h>
  #include <dce/pgo.h>
  #include <dce/secidmap.h>
  #include <dce/dce_cf.h>
***************
*** 250,256 ****
--- 251,335 ----
        *st = sec_acl_invalid_permission;
  }

+ static void
+ dce_acl__check_duplicate(
+     sec_acl_t                 *acl,
+     sec_acl_entry_type_t      entry_type,
+     uuid_t                    *id,
+     uuid_t                    *realm,
+     error_status_t            *st
+ )
+ {
+     sec_acl_entry_t             *e = 0 ;
+     unsigned32                  i;
+     error_status_t            ignore_st;
+     signed32                    res;

+     *st = error_status_ok;
+
+     for (i=0, e=acl->sec_acl_entries;
+          i<acl->num_entries && *st == error_status_ok;
+          i++,e++) {
+         if (e->entry_info.entry_type == entry_type) {
+             switch (entry_type) {
+             /* id_entry type */
+             case sec_acl_e_type_user:
+             case sec_acl_e_type_group:
+             case sec_acl_e_type_foreign_other:
+             case sec_acl_e_type_user_deleg:
+             case sec_acl_e_type_group_deleg:
+             case sec_acl_e_type_for_other_deleg:
+                 if (id) {
+                    if (uuid_equal(id,
+                                   &(e->entry_info.tagged_union.id.uuid),
+                                   &ignore_st))
+                       *st = sec_acl_duplicate_entry;
+                 } else {
+                    /* Caller of this routine should have passed a non-NULL
+                       id for this entry_type */
+                    *st = sec_acl_bad_parameter;
+                 }
+                 break;
+             /* obj type */
+             case sec_acl_e_type_mask_obj:
+             case sec_acl_e_type_user_obj:
+             case sec_acl_e_type_group_obj:
+             case sec_acl_e_type_other_obj:
+             case sec_acl_e_type_unauthenticated:
+             case sec_acl_e_type_any_other:
+             case sec_acl_e_type_user_obj_deleg:
+             case sec_acl_e_type_group_obj_deleg:
+             case sec_acl_e_type_other_obj_deleg:
+             case sec_acl_e_type_any_other_deleg:
+                 *st = sec_acl_duplicate_entry;
+                 break;
+             /* foreign_id type */
+             case sec_acl_e_type_foreign_user:
+             case sec_acl_e_type_foreign_group:
+             case sec_acl_e_type_for_user_deleg:
+             case sec_acl_e_type_for_group_deleg:
+                 if (realm && id) {
+                    if (uuid_equal(realm,
+                            &(e->entry_info.tagged_union.foreign_id.realm.uuid)
,
+                            &ignore_st)
+                         &&
+                        uuid_equal(id,
+                            &(e->entry_info.tagged_union.foreign_id.id.uuid),
+                            &ignore_st))
+                       *st = sec_acl_duplicate_entry;
+                 } else {
+                    /* Caller of this routine should have passed a non-NULL
+                       realm and id for this entry_type */
+                    *st = sec_acl_bad_parameter;
+                 }
+                 break;
+             default:
+                 break;
+             }
+         }
+     }
+ }
+
  /*  Add an ACL entry (user/grp, domestic/foreign) to the given ACL. */

  void
***************
*** 275,280 ****
--- 354,361 ----
      case sec_acl_e_type_for_other_deleg:
        dce_acl__check_perm_bits(acl, permset, st);
        STAT_CHECK_RET(*st);
+       dce_acl__check_duplicate(acl, entry_type, id, (uuid_t *)NULL, st);
+       STAT_CHECK_RET(*st);
        if ((e = incr__acl_ent_list(acl)) == NULL)
        {
            *st = rpc_s_no_memory ;
***************
*** 354,359 ****
--- 435,442 ----

        dce_acl__check_perm_bits(acl, permset, st);
        STAT_CHECK_RET(*st);
+       dce_acl__check_duplicate(acl, entry_type, (uuid_t *)NULL, (uuid_t *)NULL, s
t);
+       STAT_CHECK_RET(*st);
        e->perms                        = permset;
        e->entry_info.entry_type        = entry_type;
        break;
***************
*** 410,415 ****
--- 493,500 ----
      case sec_acl_e_type_for_user_deleg:
      case sec_acl_e_type_for_group_deleg:
        dce_acl__check_perm_bits(acl, permset, st);
+       STAT_CHECK_RET(*st);
+       dce_acl__check_duplicate(acl, entry_type, id, realm, st);
        STAT_CHECK_RET(*st);
        if((e = incr__acl_ent_list(acl)) == NULL)
        {

[10/8/96 public]

  Fixed in 1.1 maintenance tree.

./dce/utils/acldb/aclconv.c
Comparing revision 1.1.2.8 with revision 1.1.8.1.
*** 57,62 ****
--- 61,67 ----
  
  #include <aclimpl.h>
  
+ #include <dce/uuid.h>         /* OT 10632 */
  #include <dce/pgo.h>
  #include <dce/secidmap.h>
  #include <dce/dce_cf.h>
***************
*** 232,237 ****
--- 237,324 ----
        *st = sec_acl_invalid_permission;
  }
  
+ /* OT 10632 dce_acl_obj_add_* should check for illegal entries */
+ 
+ static void
+ dce_acl__check_duplicate(
+     sec_acl_t                 *acl,
+     sec_acl_entry_type_t      entry_type,
+     uuid_t                    *id,
+     uuid_t                    *realm,
+     error_status_t            *st
+ )
+ {
+     sec_acl_entry_t           *e = 0 ;
+     unsigned32                        i;
+     error_status_t            ignore_st;
+     signed32                  res;
+ 
+     *st = error_status_ok;
+ 
+     for (i=0, e=acl->sec_acl_entries;
+        i<acl->num_entries && *st == error_status_ok;
+        i++,e++) {
+       if (e->entry_info.entry_type == entry_type) {
+           switch (entry_type) {
+           /* id_entry type */
+           case sec_acl_e_type_user:
+           case sec_acl_e_type_group:
+           case sec_acl_e_type_foreign_other:
+           case sec_acl_e_type_user_deleg:
+           case sec_acl_e_type_group_deleg:
+           case sec_acl_e_type_for_other_deleg:
+               if (id) {
+                   if (uuid_equal(id,
+                               &(e->entry_info.tagged_union.id.uuid),
+                               &ignore_st))
+                       *st = sec_acl_duplicate_entry;
+               } else {
+                       /* Caller of this routine should have passed a non-NULL
+                          id for this entry_type */
+                       *st = sec_acl_bad_parameter;
+               }
+               break;
+           /* obj type */
+           case sec_acl_e_type_mask_obj:
+           case sec_acl_e_type_user_obj:
+           case sec_acl_e_type_group_obj:
+           case sec_acl_e_type_other_obj:
+           case sec_acl_e_type_unauthenticated:
+           case sec_acl_e_type_any_other:
+           case sec_acl_e_type_user_obj_deleg:
+           case sec_acl_e_type_group_obj_deleg:
+           case sec_acl_e_type_other_obj_deleg:
+           case sec_acl_e_type_any_other_deleg:
+               *st = sec_acl_duplicate_entry;
+               break;
+           /* foreign_id type */
+           case sec_acl_e_type_foreign_user:
+           case sec_acl_e_type_foreign_group:
+           case sec_acl_e_type_for_user_deleg:
+           case sec_acl_e_type_for_group_deleg:
+               if (realm && id) {
+                   if (uuid_equal(realm,
+                           &(e->entry_info.tagged_union.foreign_id.realm.uuid),
+                           &ignore_st)
+                       &&
+                       uuid_equal(id,
+                           &(e->entry_info.tagged_union.foreign_id.id.uuid),
+                           &ignore_st))
+                   *st = sec_acl_duplicate_entry;
+               } else {
+                   /* Caller of this routine should have passed a non-NULL
+                      realm and id for this entry_type */
+                   *st = sec_acl_bad_parameter;
+               }
+               break;
+           default:
+               break;
+           }
+       }
+     }
+ }
+ /* end of OT 10632 */
+ 
  
  /*  Add an ACL entry (user/grp, domestic/foreign) to the given ACL. */
  
***************
*** 257,262 ****
--- 344,352 ----
      case sec_acl_e_type_for_other_deleg:
        dce_acl__check_perm_bits(acl, permset, st);
        STAT_CHECK_RET(*st);
+       /* OT 10632 */
+       dce_acl__check_duplicate(acl, entry_type, id, (uuid_t *)NULL, st);
+       STAT_CHECK_RET(*st);
        if ((e = incr__acl_ent_list(acl)) == NULL)
        {
            *st = rpc_s_no_memory ;
***************
*** 332,337 ****
--- 422,430 ----
  
        dce_acl__check_perm_bits(acl, permset, st);
        STAT_CHECK_RET(*st);
+       /* OT 10632 */
+       dce_acl__check_duplicate(acl, entry_type, (uuid_t *)NULL, (uuid_t *)NULL, st);
+       STAT_CHECK_RET(*st);
        e->perms                        = permset;
        e->entry_info.entry_type        = entry_type;
        break;
***************
*** 388,393 ****
--- 481,489 ----
      case sec_acl_e_type_for_user_deleg:
      case sec_acl_e_type_for_group_deleg:
        dce_acl__check_perm_bits(acl, permset, st);
+       STAT_CHECK_RET(*st);
+       /* OT 10632 */
+       dce_acl__check_duplicate(acl, entry_type, id, realm, st);
        STAT_CHECK_RET(*st);
        if((e = incr__acl_ent_list(acl)) == NULL)
        {



CR Number                     : 10573
Defect or Enhancement?        : def
CR in Code, Doc, or Test?     : code
Inter-dependent CRs           : 
Project Name                  : dce
H/W Ref Platform              : all
S/W Ref Platform              : all
Component Name                : utils
Subcomponent Name             : sams
Short Description             : increase allowed message size
Reported Date                 : 5/6/94
Found in Baseline             : 1.1b8
Found Date                    : 5/6/94
Severity                      : B
Priority                      : 2
Status                        : closed
Duplicate Of                  : 
Fix By Baseline               : 1.1
Fixed In Baseline             : 1.1b9
Affected File(s)              : tools/sams/sams.c
Sensitivity                   : public

[5/6/94 public]
The length of sams message text is 1024; this should be raised to NL_TEXMAX
which is 8192.  Note that some versions of lex will not let you raise the
buffer size, but we can try.

[05/06/94 public]
Raised buffer size (when know that we can raise it) to NL_TEXTMAX,
or 8192 if that's not defined.



CR Number                     : 10572
Defect or Enhancement?        : def
CR in Code, Doc, or Test?     : code
Inter-dependent CRs           : 
Project Name                  : dce
H/W Ref Platform              : all
S/W Ref Platform              : all
Component Name                : utils
Subcomponent Name             : svc
Short Description             : DCE_SVC_DEBUG_* fails with static registration
Reported Date                 : 5/6/94
Found in Baseline             : 1.1
Found Date                    : 5/6/94
Severity                      : B
Priority                      : 2
Status                        : closed
Duplicate Of                  : 
Fix By Baseline               : 1.1beta
Fixed In Baseline             : 1.1b10
Affected File(s)              : dce/utils/svc/{dce_svc.h,svcroute.c}
Sensitivity                   : public

[5/6/94 public]

DCE_SVC_DEBUG_IS and DCE_SVC_DEBUG_ATLEAST fail with respect
to components that are statically registered.  They evaluate
to a simple expression that does not force a partially initialized
handle to be fully evaluated, and so they never evaluate to true
even when debugging has been turned on with dce_svc_debug_set_levels.

[05/19/94 public]

Fix (change the macros to look at the "setup" field and if it's false
to call an internal routine to set the routes) submitted.

[05/23/94 public]
Fix works.  Closed.



CR Number                     : 10569
Defect or Enhancement?        : def
CR in Code, Doc, or Test?     : code
Inter-dependent CRs           : 
Project Name                  : dce
H/W Ref Platform              : all
S/W Ref Platform              : all
Component Name                : utils
Subcomponent Name             : svc
Short Description             : dce_svc_debug_set_levels fails (ptr prob)
Reported Date                 : 5/6/94
Found in Baseline             : 1.1
Found Date                    : 5/6/94
Severity                      : B
Priority                      : 1
Status                        : closed
Duplicate Of                  : 
Fix By Baseline               : 1.1
Fixed In Baseline             : 1.1b9
Affected File(s)              : dce/utils/svc/svcroute.c
Sensitivity                   : public

[5/6/94 public]

dce_svc_debug_set_levels overwrites the first SVC_SEP_CHAR
in the "where" string with a null character, so that it can
pass in just the component name to dce_svc__component_to_handle.
It fails to increment the pointer before handing the tail end
of the string to dce_svc__really_debug_set_levels, however,
so dce_svc__really_debug_set_levels sees an empty string and
does nothing.

Fix is as follows:

$ diff svcroute.c.works svcroute.c.broken
555c555
<     *p++ = '\0';
---
>     *p = '\0';
558c558
<       *--p = SVC_SEP_CHAR;
---
>       *p++ = SVC_SEP_CHAR;

[ sekhar 5/9/94 public ]

Changed rby back to hopkins ( from ahop ). It was Will Hopkins
( mail id : hopkins@apollo.hp.com ) who reported this defect - not 
Anne Hopkins ( ahop@apollo.hp.com ) .

[5/12/94 public]
Fix by Rich works.  Closed.



CR Number                     : 10544
Defect or Enhancement?        : def
CR in Code, Doc, or Test?     : code
Inter-dependent CRs           : 
Project Name                  : dce
H/W Ref Platform              : all
S/W Ref Platform              : all
Component Name                : utils
Subcomponent Name             : sams
Short Description             : sams is starting with 0 instead of 1
Reported Date                 : 5/5/94
Found in Baseline             : 1.1
Found Date                    : 5/5/94
Severity                      : A
Priority                      : 1
Status                        : closed
Duplicate Of                  : 
Fix By Baseline               : 1.1
Fixed In Baseline             : 1.1b9
Affected File(s)              : tools/sams/sams.c
Sensitivity                   : public

[5/5/94 public]

From Tom:

It looks like sams is starting with 0 instead of 1 when it is
doing the format specifiers:

	%0$s instead of %1$s

[05/05/94 public]
Sigh; d++ becomes ++d and the XPG stuff is now 1-origin.



CR Number                     : 10542
Defect or Enhancement?        : def
CR in Code, Doc, or Test?     : code
Inter-dependent CRs           : 
Project Name                  : dce
H/W Ref Platform              : all
S/W Ref Platform              : all
Component Name                : utils
Subcomponent Name             : svc
Short Description             : dce_svc_log_get_arg doesn't return the right size
Reported Date                 : 5/5/94
Found in Baseline             : 1.1
Found Date                    : 5/5/94
Severity                      : C
Priority                      : 2
Status                        : closed
Duplicate Of                  : 
Fix By Baseline               : 1.1
Fixed In Baseline             : 1.1b9
Affected File(s)              : dce/utils/svc/svclogc
Sensitivity                   : public

[5/5/94 public]

The function "dce_svc_log_get_arg" does not return the actual size of the
data, that are read from the logfile in case of format element "%s", but
the size of memory, that is allocated. The fix might be as follows:

line 221 in svclog.c:

Change
        case 's':
            dce_svc__read_string_elt(h,
                (char **)&h->arg_data, &h->arg_data_size);
            *size = h->arg_data_size;
            break;

to

        case 's':
            dce_svc__read_string_elt(h,
                (char **)&h->arg_data, &h->arg_data_size);
            *size = strlen(h->arg_data) + 1;
            break;

[05/05/94 public]
Submitted the fix described above.

[05/11/94 public]
Fix in tree; built; marking this CR closed.



CR Number                     : 10495
Defect or Enhancement?        : def
CR in Code, Doc, or Test?     : code
Inter-dependent CRs           : 
Project Name                  : dce
H/W Ref Platform              : all
S/W Ref Platform              : all
Component Name                : utils
Subcomponent Name             : svc
Short Description             : dce_svc__rotate_route doesn't work correctly
Reported Date                 : 5/2/94
Found in Baseline             : 1.1b12
Found Date                    : 5/2/94
Severity                      : B
Priority                      : 1
Status                        : closed
Duplicate Of                  : 
Fix By Baseline               : 1.1
Fixed In Baseline             : 1.1b13
Affected File(s)              : utils/svc/svcroute.c
Sensitivity                   : public

[5/2/94 public]

I run an application registered at SVC with dce_svc_register.
I have set and exported

D2_LOG_LEVEL=5; D2_LOG_DIR=homekeutel/logs;
SVC_GDS_DBG="gds.*.$D2_LOG_LEVEL:BINFILE.5.1000:$D2_LOG_DIR/log%d"

Logging works fine in the begin of the application. When 1000 records are
logged dce_svc__rotate_route is called.
Input into this function is r->generations = 0 and r->maxgenerations = 5.
r->generations is incremented: r->generations = 1.

Then (line 284 in dce1.1: svcroute.c (version 1.1.5.6)) the filename of
the new file is created:

(void)sprintf(p, "%d", r->generations);

This is wrong: the name of the first logfile was already "*.1".

The fix is to change this line to:

(void)sprintf(p, "%d", r->generations + 1);

[05/02/94 public]

If you follow my proposal you have also to change line 268-269 from

if (++(r->generations) > r->maxgenerations)
        r->generations = 1;

to:

if (++(r->generations) > r->maxgenerations)
        r->generations = 0;

[05/02/94 public]
Sorry for filling your mail. My last given fix was not totally correct.
Here is the working one (just tested):

If you follow my proposal you have also to change line 268-269 from

if (++(r->generations) >= r->maxgenerations)
        r->generations = 1;

to:

if (++(r->generations) > r->maxgenerations)
        r->generations = 0;


Remark: I think there is another small problem: When log*1, ... log*5 are
written and log*1 is reopened it has still the size it has had after it was
closed the first time. When the first message is written into the "new" 
log*1 it has still this size - but should contain only this one
message.
A solution could be to call unlink(log*n) if log*n exists
before opening it again.

[06/23/94 public]
I just want to ask if this will be corrected or not. 
GDS processes are started with "BINFILE.2.2000";
(see /opt/dcelocal/var/adm/directory/gds/.profile)
but it still doesn't work: LOG2 overwrites LOG1.
(Of course there is a workaround: change to "BINFILE:1.100000" ...)

[7/8/94 public]
Did roughly what is outlined above.

The generation test that worked turned out to be (we start at 1, not 0):
	    if ((r->generations)++ >= r->maxgenerations)
		r->generations = 1;

Instead of doing unlink(), I call open() with O_TRUNC flag.

[7/15/94 public]
Solution works.  Closing.

[07/26/94 public]
Reopened. I have installed bl12 on OSF/1 and HP800. 
I have set

SVC_GDS_DBG="gds:*.7:BINFILE.4.4:/home/keutel/logs/osf2/log%d"

I did: gdb gdsditadm, set a breakpoint in dce_svc_bin_log_withfile and
dce_svc__rotate_route, run.

4 log entries have been written to log*.1, then dce_svc_bin_log_withfile called
dce_svc__rotate_route which called cma_open - this is OK.
But after dce_svc_bin_log_withfile was finished still only log*1 was there -
containing 1 log entry.
The rest of the rotating worked fine.
John: Did you submit your fix after bl12 was released??

I assume that your sentence

The generation test that worked turned out to be (we start at 1, not 0):

is wrong: in dce_svc__open_routes I find:

r->generations = r->count = 0;

[7/26/94 public]
You're right; I goofed.  I'm changing this line:
    r->generations = r->count = 0;
to
    r->count = 0;
    r->generations = 1;

I think my initial test was not careful enough.  I missed the case when the
routes would not wrap, where none of the files were overwritten yet.  (eg,
your route is "yow:*.1:BINFILE.5.10:LOG", and you write 40 entries.  All the
entries should be available...  If you write 1000 entries, you had the right
entries (the last 500), but they're in the wrong files (off-by-1).)

Sorry to have missed this the first time.

[7/29/94 public]
Closed.



CR Number                     : 10488
Defect or Enhancement?        : def
CR in Code, Doc, or Test?     : code
Inter-dependent CRs           : 
Project Name                  : dce
H/W Ref Platform              : all
S/W Ref Platform              : all
Component Name                : utils
Subcomponent Name             : svc
Short Description             : dce_svc__binprint ignores "%i"
Reported Date                 : 4/29/94
Found in Baseline             : 1.1
Found Date                    : 4/29/94
Severity                      : A
Priority                      : 0
Status                        : closed
Duplicate Of                  : 
Fix By Baseline               : 1.1
Fixed In Baseline             : 1.1b9
Affected File(s)              : dce/utils/svc/svcprintf.c
Sensitivity                   : public

[4/29/94 public]

If I give "%i %s" as a format for a DCE_SVC_LOG call 
(with arguments 1 (integer) and a (char *))  the following happens:

dce_svc__binprint ignores %i. Then it takes %s and uses the integer for that.
This gives obviously a core dump.

The man page for printf on OSF/1 defines %i to be the same as %d.

The solution is to add "case i" to the switch in dce_svc__binprint.

[04/29/94 public]
A0?  The workaround is use %d.  Anyway, fix just submitted.



CR Number                     : 10483
Defect or Enhancement?        : def
CR in Code, Doc, or Test?     : code
Inter-dependent CRs           : 10478
Project Name                  : dce
H/W Ref Platform              : all
S/W Ref Platform              : all
Component Name                : utils
Subcomponent Name             : svc
Short Description             : "dce_svc__binprint" calls "writev" without checking for errors.
Reported Date                 : 4/28/94
Found in Baseline             : 1.1
Found Date                    : 4/28/94
Severity                      : B
Priority                      : 1
Status                        : closed
Duplicate Of                  : 
Fix By Baseline               : 1.1beta
Fixed In Baseline             : 1.1b11
Affected File(s)              : dce/utils/svc/svcprintf.c,svclog.c
Sensitivity                   : public

[4/28/94 public]

"dce_svc__binprint" calls "writev" without checking for errors.
In case of errors the complete record, that is actually written
should be overwritten with a fixed record from serviceability,
to give a hint for the programmer, which message caused the
problem. Actually the record is left in an inconsistent state,
and the evaluation of the logfile breaks at that point.

[5/26/94 public]
Writing to and reading from binary log files is now done with IDL encoding
services.  Overall, this simplified some of the prolog data structures and
the code dealing with the file itself.

A big win with this is that you can now write the log with one architecture
machine and read it with a different one.

svcdumplog (based on dumplog) was changed to process the arguments
of the message text.

[6/3/94 public]
Fix works.  Closed.



CR Number                     : 10482
Defect or Enhancement?        : def
CR in Code, Doc, or Test?     : code
Inter-dependent CRs           : 
Project Name                  : dce
H/W Ref Platform              : all
S/W Ref Platform              : all
Component Name                : utils
Subcomponent Name             : svc
Short Description             : line printer with 80 characters per line
Reported Date                 : 4/28/94
Found in Baseline             : 1.1
Found Date                    : 4/28/94
Severity                      : C
Priority                      : 2
Status                        : closed
Duplicate Of                  : 
Fix By Baseline               : 1.1
Fixed In Baseline             : 1.1b10
Affected File(s)              : dce/utils/svc/svcprintf.c
Sensitivity                   : public

[4/28/94 public]

"dce_svc_printf" should format the prolog such that it can be
printed on a line printer with 80 characters per line.

[5/26/94 public]
A newline is now inserted between the prolog and message text when
writing to stdout and stderr.

[6/3/94 public]
The guys who reported this seem to think the above is OK, as do we at OSF.
Closed.



CR Number                     : 10480
Defect or Enhancement?        : def
CR in Code, Doc, or Test?     : code
Inter-dependent CRs           : 
Project Name                  : dce
H/W Ref Platform              : hppa
S/W Ref Platform              : hpux
Component Name                : utils
Subcomponent Name             : svc
Short Description             : NLSPATH and serviceability
Reported Date                 : 4/28/94
Found in Baseline             : 1.1
Found Date                    : 4/28/94
Severity                      : C
Priority                      : 1
Status                        : closed
Duplicate Of                  : 
Fix By Baseline               : 1.1
Fixed In Baseline             : 1.1b9
Affected File(s)              : dce/utils/svc/{Makefile,msgimpl.h}
Sensitivity                   : public

[4/28/94 public]

On HP800 the serviceability functions are not able to open the
message catalog unless NLSPATH is set appropriately. "catopen"
is called with a trailing ".cat" for the filename, which is
expected without suffix.

[05/12/94 public]
Fix submitted.  msgimpl.h has the define for CATALOG_SUFFIX.  The
svc Makefile on the HP sets this to the empty string.

[5/23/94 public]
Fix works.  Closed.



CR Number                     : 10479
Defect or Enhancement?        : def
CR in Code, Doc, or Test?     : code
Inter-dependent CRs           : 
Project Name                  : dce
H/W Ref Platform              : all
S/W Ref Platform              : all
Component Name                : utils
Subcomponent Name             : svc
Short Description             : dce_svc_printf does not issue FILE and LINE
Reported Date                 : 4/28/94
Found in Baseline             : 1.1
Found Date                    : 4/28/94
Severity                      : C
Priority                      : 2
Status                        : closed
Duplicate Of                  : 
Fix By Baseline               : 1.1
Fixed In Baseline             : 1.1b12
Affected File(s)              : svcprintf.c,svcdumplog.c
Sensitivity                   : public

[4/28/94 public]

Although present at the interface, "dce_svc_printf" does not
issue the FILE and LINE number of the source that called the function.

[7/8/94 public]
dce_svc_printf() and svcdumplog now print the filename and line number.

[7/12/94 public]
Works.  Closed.



CR Number                     : 10478
Defect or Enhancement?        : def
CR in Code, Doc, or Test?     : code
Inter-dependent CRs           : 10483
Project Name                  : dce
H/W Ref Platform              : all
S/W Ref Platform              : all
Component Name                : utils
Subcomponent Name             : svc
Short Description             : dce_svc__binprint can't handle more than 4 format elements
Reported Date                 : 4/28/94
Found in Baseline             : 1.1
Found Date                    : 4/28/94
Severity                      : B
Priority                      : 1
Status                        : closed
Duplicate Of                  : 
Fix By Baseline               : 1.1beta
Fixed In Baseline             : 1.1b10
Affected File(s)              : dcs/utils/svc/svcprintf.c,svclog.c
Sensitivity                   : public

[4/28/94 public]

The function dce_svc__binprint doesn't write a log
record, when the format string contains more than 4 format
elements.

[5/26/94 public]
Writing to and reading from binary log files is now done with IDL encoding
services.  Overall, this simplified some of the prolog data structures and
the code dealing with the file itself.

A big win with this is that you can now write the log with one architecture
machine and read it with a different one.

svcdumplog (based on dumplog) was changed to process the arguments
of the message text.

[6/3/94 public]
Fix works.  Closed.



CR Number                     : 10476
Defect or Enhancement?        : def
CR in Code, Doc, or Test?     : code
Inter-dependent CRs           : 
Project Name                  : dce
H/W Ref Platform              : all
S/W Ref Platform              : all
Component Name                : utils
Subcomponent Name             : svc
Short Description             : writing of messages into TEXTFILE and BINFILE
Reported Date                 : 4/28/94
Found in Baseline             : 1.1
Found Date                    : 4/28/94
Severity                      : C
Priority                      : 1
Status                        : closed
Duplicate Of                  : 
Fix By Baseline               : 1.1
Fixed In Baseline             : 1.1b10
Affected File(s)              : dce/utils/svc/svcroute.c
Sensitivity                   : public

[4/28/94 public]

Serviceability should enable the user of "dce_svc_printf", to route
the message into a TEXTFILE and additionally into a BINFILE by one
call. This is not implemented yet.

[6/6/94 public]
In dce_svc__open_routes() set up the routing strings in a loop, opening
each space-separated route (use to look for just one).  The rest of the
code was already there for multiple routes.

[06/08/94 public]
Removed some dead code from the file-reading and now closing this.



CR Number                     : 10475
Defect or Enhancement?        : def
CR in Code, Doc, or Test?     : code
Inter-dependent CRs           : 
Project Name                  : dce
H/W Ref Platform              : all
S/W Ref Platform              : all
Component Name                : utils
Subcomponent Name             : svc
Short Description             : need a function like dce_svc_routings without RPC
Reported Date                 : 4/28/94
Found in Baseline             : 1.1
Found Date                    : 4/28/94
Severity                      : B
Priority                      : 2
Status                        : closed
Duplicate Of                  : 
Fix By Baseline               : 1.1
Fixed In Baseline             : 1.1b12
Affected File(s)              : dce/utils/svc/svcreg.c
Sensitivity                   : public

[4/28/94 public]

Serviceability should provide another function, which does just
the same as "dce_svc_routings" (inquire the actual setting of the
routing information), but is independent from RPC ("dce_svc_routings"
calls "rpc_ss_allocate". This should be replaced by a malloc). This
is required for servers, that do not export the remote interface.

[07/14/94 public]
Fixed. We should be able to use dce_svc_routings now because
we call dce_svc_init which calls rpc_sm_enable_allocate.

[07/15/94 public]
Solution works.  Closed.



CR Number                     : 10474
Defect or Enhancement?        : def
CR in Code, Doc, or Test?     : code
Inter-dependent CRs           : 11469
Project Name                  : dce
H/W Ref Platform              : all
S/W Ref Platform              : all
Component Name                : utils
Subcomponent Name             : svc
Short Description             : use of the same TEXTFILE for different severity levels
Reported Date                 : 4/28/94
Found in Baseline             : 1.1
Found Date                    : 4/28/94
Severity                      : B
Priority                      : 0
Status                        : closed
Duplicate Of                  : 
Fix By Baseline               : 1.1
Fixed In Baseline             : 1.1b12
Affected File(s)              : dce/utils/svc/{svcimpl.h,svcprintf.c,svcroute.c}
Sensitivity                   : public

[4/28/94 public]

When messages of various severity levels are routed into the same
TEXTFILE, they overwrite each other, as for each severity level
another file pointer to the same file is used.

[4/29/94 public]
Changed to severity C because there is a work-around, but it is not a
desireable work-around.

[7/11/94 public]
Lowered priority, since there is an easy workaround wich Jochen can live
with, and there is not a quick fix.

[07/28/94 public]
bumped priority and severity - see OT 11111. It's not acceptable for
customers that they get 6 logfiles per gds process - or more, if 
the routing rotates.
GDS has by default two DSA processes per directory id - if they are busy
they fork new processes. This means that you can easily find 30 logfiles
in the same logdir - ask Rich Zeliff. We would like to have 2 logfiles
per process - that would mean 10 instead of 30. That's a difference, isn't it?

[09/06/94 public]
John and I talked about this, and here is what we plan to do.  Add a new
routing specifier, DUP, that sets one routing to be a "duplicate" of the
other routing.  For example
	ERROR:FILE:/tmp/log
	NOTICE:DUP:ERROR
means that NOTICE messages will go to the exact same place as ERROR
messages.  The code won't open new files but will share the existing
descriptors, or whatever state is kept.  If you then change ERROR, the
NOTICE messages will also go to the new place.  If you do this
	ERROR:DUP:NOTICE
the loop will be detected and the message will be discarded.

[09/07/94 public]
Just to make sure that I got it right: Will this
	ERROR:FILE:/tmp/log
	NOTICE:DUP:ERROR

also work if first a NOTICE and then an ERROR comes?
(I mean the fopen stuff.)
If yes: looks good.

[09/07/94 public]
Yes it will also work if NOTICE comes first.  Thanks.

[ sekhar 9/7/94 public ]

I don't like this solution because it makes the user interface 
because it is non-intutive . It is much easier for a user to simply
state to which file a message should be logged. ( I can also think
of at least one other undesirable side effect of this).

Why can't the code itself duplicate the file descriptors  when 
the messages are being routed to the same file ?  Is there a problem
doing this ?

[9/7/94 public]
As a user, I'd really hate to have to duplicate the "where" fields.
If I change where the messages go, I'd have to remember to change all
the lines.  This is annoying and error-prone. I think what Rich outlined
is as intuitive as unix's symbolic links.

[09/07/94 public]
Just to keep beating that horse, by using the "sameas" routing we
reduce the impact (fewer open descriptors).  It also means that the
following
	ERROR:BINFILE.1.12:/tmp/foo
	NOTICE:BINFILE.1.12:/tmp/foo
which will currently not do the right thing (when will logs be rolled?
Who knows -- counts are kept separately) can be rewritten as
	ERROR:BINFILE.1.12:/tmp/foo
	NOTICE:SAMEAS:ERROR
and the right thing happens.

[09/08/94 public]
Will the following also be supported?

*:FILE:/tmp/log

(instead of:

FATAL:FILE:/tmp/log
ERROR:DUP:FATAL
WARNING:DUP:FATAL
NOTICE:DUP:FATAL
NOTICE_VERBOSE:DUP:FATAL

)

And, may be also this?

FATAL:FILE:/tmp/log1
*:FILE:/tmp/log2

(instead of:

FATAL:FILE:/tmp/log1
ERROR:FILE:/tmp/log2
WARNING:DUP:ERROR
NOTICE:DUP:ERROR
NOTICE_VERBOSE:DUP:ERROR

)

[09/08/94 public]

And, just another remark: I agree with that what "sekhar" said:
Why can't the code itself duplicate the file descriptors  when
the messages are being routed to the same file ?

We proposed this a long time ago: SVC should hold a table with open files;
whenever SVC thinks that a new "fopen" is necessary it first
checks this table.

In general: I think SVC should support all of the following:

1.) FATAL:FILE:/tmp/log
    ERROR:DUP:FATAL
(this is like a symbolic link)

2.) FATAL:FILE:/tmp/log
    ERROR:FILE:/tmp/log
(this is like a hard link)

3.) *:FILE:/tmp/log

4.) FATAL:FILE:/tmp/log1
    *:FILE:/tmp/log2


Do I want too much?

[ sekhar 9/8/94 public ]

I would like to elobarate on my comments dated 9/7/94 .

The syntax being proposed  will create more work for the 
user when he/she would like to change the routing 
specification using the -w switch or dcecp 
( via the Remote SVC interface ) or via the environment variable.

Because, before changing the routing  specification for 
messages of a given severity level, the user would now have to 
check to see if messages for any other severity level are being 
logged. And if so then use "DUP" feature.  

In particular, changing the routing via the SVC remote interface 
using dcecp is now more cumbersome ( if not impossible ). This is 
because only changes from the default routing (not the current routing)
can be obtained.

Requiring the user to do all of the above is also error 
prone (I think).

[09/08/94 public]
It is way too late to do what Jochen wants.  Either the "am I asking for
too much" part, or the "keep a table of open files" part.  (BTW, what does
	ERROR:FILE:/tmp/foo
	NOTICE:BINFILE:/tmp/foo
do?)

Is WITH (nee DUP) error-prone?  Yes.  Does it address a need?  Yes.
All of Sekhar's points have some validity.  However, so does the initial
GDS requirement.

Which is more important?  I'm not sure at this point.  We will almost
definitely fix SVC so that you get ALL the non-debug routings (I forget
the OT number).

[ sekhar 9/8/94 public ]

My opinion: Given the scheduling constraints, "DUP" construct
seems fine to me - provided SVC is fixed so that one can get ALL
the non-debug routes currently in effect . And defer the work of 
"keeping table of open files" for a future release.

[4/28/94 public]

When messages of various severity levels are routed into the same
TEXTFILE, they overwrite each other, as for each severity level
another file pointer to the same file is used.

[4/29/94 public]
Changed to severity C because there is a work-around, but it is not a
desireable work-around.

[7/11/94 public]
Lowered priority, since there is an easy workaround wich Jochen can live
with, and there is not a quick fix.

[07/28/94 public]
bumped priority and severity - see OT 11111. It's not acceptable for
customers that they get 6 logfiles per gds process - or more, if 
the routing rotates.
GDS has by default two DSA processes per directory id - if they are busy
they fork new processes. This means that you can easily find 30 logfiles
in the same logdir - ask Rich Zeliff. We would like to have 2 logfiles
per process - that would mean 10 instead of 30. That's a difference, isn't it?

[09/06/94 public]
John and I talked about this, and here is what we plan to do.  Add a new
routing specifier, DUP, that sets one routing to be a "duplicate" of the
other routing.  For example
	ERROR:FILE:/tmp/log
	NOTICE:DUP:ERROR
means that NOTICE messages will go to the exact same place as ERROR
messages.  The code won't open new files but will share the existing
descriptors, or whatever state is kept.  If you then change ERROR, the
NOTICE messages will also go to the new place.  If you do this
	ERROR:DUP:NOTICE
the loop will be detected and the message will be discarded.

[09/07/94 public]
Just to make sure that I got it right: Will this
	ERROR:FILE:/tmp/log
	NOTICE:DUP:ERROR

also work if first a NOTICE and then an ERROR comes?
(I mean the fopen stuff.)
If yes: looks good.

[09/07/94 public]
Yes it will also work if NOTICE comes first.  Thanks.

[ sekhar 9/7/94 public ]

I don't like this solution because it makes the user interface 
because it is non-intutive . It is much easier for a user to simply
state to which file a message should be logged. ( I can also think
of at least one other undesirable side effect of this).

Why can't the code itself duplicate the file descriptors  when 
the messages are being routed to the same file ?  Is there a problem
doing this ?

[9/7/94 public]
As a user, I'd really hate to have to duplicate the "where" fields.
If I change where the messages go, I'd have to remember to change all
the lines.  This is annoying and error-prone. I think what Rich outlined
is as intuitive as unix's symbolic links.

[09/07/94 public]
Just to keep beating that horse, by using the "sameas" routing we
reduce the impact (fewer open descriptors).  It also means that the
following
	ERROR:BINFILE.1.12:/tmp/foo
	NOTICE:BINFILE.1.12:/tmp/foo
which will currently not do the right thing (when will logs be rolled?
Who knows -- counts are kept separately) can be rewritten as
	ERROR:BINFILE.1.12:/tmp/foo
	NOTICE:SAMEAS:ERROR
and the right thing happens.

[09/08/94 public]
Will the following also be supported?

*:FILE:/tmp/log

(instead of:

FATAL:FILE:/tmp/log
ERROR:DUP:FATAL
WARNING:DUP:FATAL
NOTICE:DUP:FATAL
NOTICE_VERBOSE:DUP:FATAL

)

And, may be also this?

FATAL:FILE:/tmp/log1
*:FILE:/tmp/log2

(instead of:

FATAL:FILE:/tmp/log1
ERROR:FILE:/tmp/log2
WARNING:DUP:ERROR
NOTICE:DUP:ERROR
NOTICE_VERBOSE:DUP:ERROR

)

[09/08/94 public]

And, just another remark: I agree with that what "sekhar" said:
Why can't the code itself duplicate the file descriptors  when
the messages are being routed to the same file ?

We proposed this a long time ago: SVC should hold a table with open files;
whenever SVC thinks that a new "fopen" is necessary it first
checks this table.

In general: I think SVC should support all of the following:

1.) FATAL:FILE:/tmp/log
    ERROR:DUP:FATAL
(this is like a symbolic link)

2.) FATAL:FILE:/tmp/log
    ERROR:FILE:/tmp/log
(this is like a hard link)

3.) *:FILE:/tmp/log

4.) FATAL:FILE:/tmp/log1
    *:FILE:/tmp/log2


Do I want too much?

[ sekhar 9/8/94 public ]

I would like to elobarate on my comments dated 9/7/94 .

The syntax being proposed  will create more work for the 
user when he/she would like to change the routing 
specification using the -w switch or dcecp 
( via the Remote SVC interface ) or via the environment variable.

Because, before changing the routing  specification for 
messages of a given severity level, the user would now have to 
check to see if messages for any other severity level are being 
logged. And if so then use "DUP" feature.  

In particular, changing the routing via the SVC remote interface 
using dcecp is now more cumbersome ( if not impossible ). This is 
because only changes from the default routing (not the current routing)
can be obtained.

Requiring the user to do all of the above is also error 
prone (I think).

[09/08/94 public]
It is way too late to do what Jochen wants.  Either the "am I asking for
too much" part, or the "keep a table of open files" part.  (BTW, what does
	ERROR:FILE:/tmp/foo
	NOTICE:BINFILE:/tmp/foo
do?)

Is WITH (nee DUP) error-prone?  Yes.  Does it address a need?  Yes.
All of Sekhar's points have some validity.  However, so does the initial
GDS requirement.

Which is more important?  I'm not sure at this point.  We will almost
definitely fix SVC so that you get ALL the non-debug routings (I forget
the OT number).

[ sekhar 9/8/94 public ]

My opinion: Given the scheduling constraints, "DUP" construct
seems fine to me - provided SVC is fixed so that one can get ALL
the non-debug routes currently in effect . And defer the work of 
"keeping table of open files" for a future release.

[09/14/94 public]

OK - this DUP is sufficient. 
Is it really that difficult to implement the "*:FILE:..." stuff?
I think that this construction was mentioned in the original
design document for SVC. Am I right?
But anyway: Of course we don't need this "*:FILE:..." stuff really -
we can use your DUP or SAMEAS or WITH or whatever you call it.

[10/03/94 public]
Fix submitted.  The new routing as "GOESTO".  I believe that the "*:FILE"
stuff that Jochen is asking for works, but is not tested since it wasn't
a requirement.  The basic functionality DOES work -- test is included
in the DRB submission. :-)
	SVC_WARNING='STDERR:;GOESTO:FATAL'
	SVC_FATAL=FILE:/tmp/foo
means warnings show up in two places, stderr and /tmp/foo.

[10/05/94 public]
I just want to say that it works for gds purposes.
We use (i.e. for gdsdsa):

gds:general.2,asn1.2,apdu.1,ipc.2:BINFILE.2.2000:LOG%d 

FATAL:TEXTFILE.1.100:EXC%d;GOESTO:gds
ERROR:GOESTO:FATAL
NOTICE:GOESTO:FATAL
WARNING:GOESTO:FATAL
NOTICE_VERBOSE:GOESTO:FATAL

So - even the GOESTO to the debug logfile (binary) works. Thanks.



CR Number                     : 10467
Defect or Enhancement?        : def
CR in Code, Doc, or Test?     : code
Inter-dependent CRs           : 
Project Name                  : dce
H/W Ref Platform              : all
S/W Ref Platform              : all
Component Name                : utils
Subcomponent Name             : svc
Short Description             : eof test too early in dce_svc_log_get
Reported Date                 : 4/27/94
Found in Baseline             : 1.1b7
Found Date                    : 4/27/94
Severity                      : B
Priority                      : 2
Status                        : closed
Duplicate Of                  : 
Fix By Baseline               : 1.1
Fixed In Baseline             : 1.1b8
Affected File(s)              : dce/utils/svc/svclog.c
Sensitivity                   : public

[4/27/94 public]
dce_svc_log_get calls feof() before it tries to read.  That's not good
since rewind typically doesn't clear the "eof" flag.  Fix is to not
do the feof() test until we try to do an fread.

[04/27/94 public]
Fixed submitted.  Since it was given to me by the engineer who found
the problem, marking this closed.



CR Number                     : 10461
Defect or Enhancement?        : enh
CR in Code, Doc, or Test?     : code
Inter-dependent CRs           : 
Project Name                  : dce
H/W Ref Platform              : all
S/W Ref Platform              : all
Component Name                : utils
Subcomponent Name             : svc
Short Description             : some private fields are in prolog
Reported Date                 : 4/26/94
Found in Baseline             : 1.1b7
Found Date                    : 4/26/94
Severity                      : B
Priority                      : 0
Status                        : closed
Duplicate Of                  : 
Fix By Baseline               : 1.1
Fixed In Baseline             : 1.1b8
Affected File(s)              : dce/utils/svc/{svclog.[ch],svcimpl.h}
Sensitivity                   : public

[4/26/94 public]
There are some SVC-private fields in the dce_svc_log_prolog_t
datatype.  They should be moved into the private log handle.

[5/12/94 public]
Rich made the fix; all is happy.  Closed.



CR Number                     : 10459
Defect or Enhancement?        : def
CR in Code, Doc, or Test?     : code
Inter-dependent CRs           : 
Project Name                  : dce
H/W Ref Platform              : all
S/W Ref Platform              : all
Component Name                : utils
Subcomponent Name             : svc
Short Description             : debug routing "sub-component" of the flags field should be validated.
Reported Date                 : 4/26/94
Found in Baseline             : 1.1
Found Date                    : 4/26/94
Severity                      : C
Priority                      : 2
Status                        : closed
Duplicate Of                  : 
Fix By Baseline               : 1.1
Fixed In Baseline             : 1.1b8
Affected File(s)              : dce/utils/svc/svcroute.c
Sensitivity                   : public

[4/26/94 public]

dcecp> log mod $_n -ch dts:bozo.1:DISCARD:
dcecp> log sh /.:/hosts/absolut/dts-entity -d
{dts {bozo 1} DISCARD}

[04/26/94 public]
Fixed with the other OT CR's.
Tested against wrong libdce.
Marked closed.



CR Number                     : 10456
Defect or Enhancement?        : def
CR in Code, Doc, or Test?     : code
Inter-dependent CRs           : 
Project Name                  : dce
H/W Ref Platform              : all
S/W Ref Platform              : all
Component Name                : utils
Subcomponent Name             : 
Short Description             : readline() not 8-bit clean
Reported Date                 : 4/26/94
Found in Baseline             : 1.1
Found Date                    : 4/26/94
Severity                      : C
Priority                      : 3
Status                        : closed
Duplicate Of                  : 
Fix By Baseline               : 1.1
Fixed In Baseline             : 1.1b9
Affected File(s)              : dce/utils/misc/editline.c
Sensitivity                   : public

[4/26/94 public]
The readline() function in utils is not 8-bit clean.  This was turned up in
testing of gdscp in Munich.

Fix involves the following:
-set rl_meta_chars to 0 by default
-add test for rl_meta_chars contigent upon use of ISMETA in 
	emacs()
	TTYspecial()

Changes are in zeliff_8bit branch.  I'll submit them when I#m back in the
states.

[5/4/94 public]
Fix submitted.  Here's the diff:

gemini utils/misc$ otdiff editline.c 
10a11,13
>  * Revision 1.1.3.2  94/04/26  3:26:43  zeliff
>  *    ot10456: make readline() 8bit clean
>  * 
124c127
< int           rl_meta_chars = 1;
---
> int           rl_meta_chars = 0;
858c861
<     if (ISMETA(c)) {
---
>     if (rl_meta_chars && ISMETA(c)) {
877c880
<     if (ISMETA(c))
---
>     if (rl_meta_chars && ISMETA(c))



CR Number                     : 10453
Defect or Enhancement?        : enh
CR in Code, Doc, or Test?     : code
Inter-dependent CRs           : 
Project Name                  : dce
H/W Ref Platform              : all
S/W Ref Platform              : all
Component Name                : utils
Subcomponent Name             : sams
Short Description             : enhancements for doc folks
Reported Date                 : 4/25/94
Found in Baseline             : 1.1b7
Found Date                    : 4/25/94
Severity                      : B
Priority                      : 2
Status                        : closed
Duplicate Of                  : 
Fix By Baseline               : 1.1
Fixed In Baseline             : 1.1b9
Affected File(s)              : tools/sams/sams.c
Sensitivity                   : public

[4/25/94 public]

The doc folks need two enhancements to sams.  First, the "-m" flag
is needed to split each SML entry into a separate file.  (Think of
-m as multiple SML output files.)   Second they need a "x" value to the
-o flag to generate basic cross-reference data.

[06/03/94 public]
Fixed awhile ago:
 * Revision 1.1.4.14  1994/05/10  18:40:26  rsalz
 * 	Fix filenames if -m used (OT CR 10453).
 * 	[1994/05/10  18:39:48  rsalz]
 *



CR Number                     : 10441
Defect or Enhancement?        : def
CR in Code, Doc, or Test?     : code
Inter-dependent CRs           : 
Project Name                  : dce
H/W Ref Platform              : all
S/W Ref Platform              : all
Component Name                : utils
Subcomponent Name             : sams
Short Description             : doesn't allow "%u"
Reported Date                 : 4/22/94
Found in Baseline             : 1.1b7
Found Date                    : 4/22/94
Severity                      : A
Priority                      : 2
Status                        : closed
Duplicate Of                  : 
Fix By Baseline               : 1.1
Fixed In Baseline             : 1.1b8
Affected File(s)              : tools/sams/sams.c
Sensitivity                   : public

[4/22/94 public]

Sams doesn't understand "%u" formats in text strings.

[4/22/94 public]
Submitted, hand-tested, closed.



CR Number                     : 10430
Defect or Enhancement?        : def
CR in Code, Doc, or Test?     : code
Inter-dependent CRs           : 
Project Name                  : dce
H/W Ref Platform              : all
S/W Ref Platform              : all
Component Name                : utils
Subcomponent Name             : svc
Short Description             : Need to export service.idl and service.acf files so that dcecp can pick them up.
Reported Date                 : 4/21/94
Found in Baseline             : 1.1
Found Date                    : 4/21/94
Severity                      : B
Priority                      : 2
Status                        : closed
Duplicate Of                  : 
Fix By Baseline               : 1.1
Fixed In Baseline             : 1.1b8
Affected File(s)              : dce/utils/svc/Makefile
Sensitivity                   : public

[4/21/94 public]

Add service.idl & service.acf files to INCLUDES list for 
src/dce/utils/svc/Makefile.

[04/21/94 public]
The service.idl file should be exported already since it is in
IDLFILES (and SAMIDL_INCLUDES).  The acf file is private, for the
serviceability library's own use, and if SVC decides to use exceptions
internally, you'll be hosed.  Write your own ACF.  You may use the one
in SVC as a starting point. :-)

I'll just add service.idl file to INCLUDES list for
src/dce/utils/svc/Makefile.  And create a service.acf file
in src/admin/dcecp.

[5/11/94 public]
Julie did as Rich said.  Everyone's happy.  Closed.



CR Number                     : 10397
Defect or Enhancement?        : enh
CR in Code, Doc, or Test?     : code
Inter-dependent CRs           : 
Project Name                  : dce
H/W Ref Platform              : all
S/W Ref Platform              : all
Component Name                : utils
Subcomponent Name             : svc
Short Description             : install a sample svc routing file
Reported Date                 : 4/19/94
Found in Baseline             : 1.1b7
Found Date                    : 4/19/94
Severity                      : B
Priority                      : 2
Status                        : closed
Duplicate Of                  : 
Fix By Baseline               : 1.1
Fixed In Baseline             : 1.1b8
Affected File(s)              : dce/utils/svc/Makefile, dce_config
Sensitivity                   : public

[4/19/94 public]

Tom Jordahl has suggested a sample serviceability routing file.
It will be put into the install tree from the svc source tree (part 1)
and dce_config will install it in /opt/dcelocal/var/svc/routing (part 2).
I will do part 1, Tom will do part 2.

[4/19/94 public]
Part 1 is done; Tom can close this when he updates dce_config.

[5/12/94 public]
Part 2 was done by Tom.  Closed



CR Number                     : 10382
Defect or Enhancement?        : def
CR in Code, Doc, or Test?     : code
Inter-dependent CRs           : 
Project Name                  : dce
H/W Ref Platform              : all
S/W Ref Platform              : all
Component Name                : utils
Subcomponent Name             : svc
Short Description             : dumplog installed in wrong directory
Reported Date                 : 4/18/94
Found in Baseline             : 1.1b7
Found Date                    : 4/18/94
Severity                      : C
Priority                      : 3
Status                        : closed
Duplicate Of                  : 
Fix By Baseline               : 1.1
Fixed In Baseline             : 1.1b8
Affected File(s)              : dce/utils/svc/Makefile
Sensitivity                   : public

[4/18/94 public]
"dumplog" is installed in the wrong place - .../share/include/dce/dumplog.
Should be the bin directory.

[04/19/94 public]
Fixed the makefile; closed.



CR Number                     : 10368
Defect or Enhancement?        : def
CR in Code, Doc, or Test?     : code
Inter-dependent CRs           : 
Project Name                  : dce
H/W Ref Platform              : all
S/W Ref Platform              : all
Component Name                : utils
Subcomponent Name             : svc
Short Description             : debug routing "level" of the "flags" field should be validated.
Reported Date                 : 4/15/94
Found in Baseline             : 1.1
Found Date                    : 4/15/94
Severity                      : C
Priority                      : 3
Status                        : closed
Duplicate Of                  : 
Fix By Baseline               : 1.1
Fixed In Baseline             : 1.1b8
Affected File(s)              : dce/utils/svc/svcroute.c
Sensitivity                   : public

[4/15/94 public]

dcecp> log mod /.:/hosts/ice/dts-entity -ch dts:msgs.10:TEXTFILE:/tmp/jas-dbg
dcecp> log sh /.:/hosts/ice/dts-entity  -debug
{dts msgs 10 TEXTFILE /tmp/jas-dbg}

Note that debug levels are from 0 to 9, inclusive.

[04/19/94 public]
Made the checks more strict.

[4/26/94 public]
This still occurs.
dcecp> log mod $_n -ch dts:msgs.10:TEXTFILE:/tmp/jas-dbg
dcecp> log sh $_n -d
{dts {msgs 10} TEXTFILE /tmp/jas-dbg}

[04/26/94 public]
Tested against the wrong version of libdce.
Marked closed again.



CR Number                     : 10367
Defect or Enhancement?        : def
CR in Code, Doc, or Test?     : code
Inter-dependent CRs           : 
Project Name                  : dce
H/W Ref Platform              : all
S/W Ref Platform              : all
Component Name                : utils
Subcomponent Name             : svc
Short Description             : svc routing "severity" and "how" fields should be validated.
Reported Date                 : 4/15/94
Found in Baseline             : 1.1
Found Date                    : 4/15/94
Severity                      : B
Priority                      : 2
Status                        : closed
Duplicate Of                  : 
Fix By Baseline               : 1.1
Fixed In Baseline             : 1.1b13
Affected File(s)              : dce/utils/svc/svcroute.c
Sensitivity                   : public

[4/15/94 public]

dcecp> log mod /.:/hosts/ice/dts-entity -ch bozo:bozo
I pass the following string to the SVC call:     bozo:bozo
In code:
dce_svc_set_route(dcp_log_info_p->server_handle,
                  (idl_byte *)change_routing_argv[i],
                  &status);
dcecp> log sh /.:/hosts/ice/dts-entity
{bozo bozo}
Note that the output from "log show" is in TCL syntax.

This is an SVC routing so bozo is both the "severity" and the "how" fields. 
The SVC API "dce_svc_set_route() should validate these fields before applying
the modification.

[04/19/94 public]
Added more error-checking, so first failure will stop the route-setting.
(It used to try all the route settings, and eventually a low-level routine
would succeed, masking the failure.)

[04/26/94 public]
This still occurs.
dcecp> log mod /.:/hosts/absolut/dts-entity -ch bozo:bozo
dcecp> log sh $_n
{bozo bozo}

[04/26/94 public]
Tested against the wrong version of libced.
Closed again.

[6/14/94 public]
Well, it sure doesn't work for my with the 6/14 nightly build.
Checked on the RIOS:
dcecp> log show /.:/hosts/orange/dts-entity
{WARbbb FILE /tmp/jas}
{ERROR bozo}
{bozo bozo}

Discovered by mis-typing WARNING.

[7/26/94 public]
These are now checked (in dce_svc__open_routes() and dce_svc_routing()).

[7/29/94 public]
Works. Closed.



CR Number                     : 10366
Defect or Enhancement?        : def
CR in Code, Doc, or Test?     : code
Inter-dependent CRs           : 
Project Name                  : dce
H/W Ref Platform              : hppa
S/W Ref Platform              : hpux
Component Name                : utils
Subcomponent Name             : svc
Short Description             : Listing sub-components using dce_svc_inq_table() with a bogus component name causes server to die.
Reported Date                 : 4/15/94
Found in Baseline             : 1.1
Found Date                    : 4/15/94
Severity                      : C
Priority                      : 2
Status                        : closed
Duplicate Of                  : 
Fix By Baseline               : 1.1
Fixed In Baseline             : 1.1b8
Affected File(s)              : dce/utils/svc/svcroute.c
Sensitivity                   : public

[4/15/94 public]

Listing sub-components of a bogus component.
   >dcesvc -l /.:/hosts/ice/dts-entity bozo
   or
   dcecp> log list /.:/hosts/ice/dts-entity -component bozo
   Error: connection closed

   *** This command takes a long time to execute and
       eventually I get the above error.  Also note that "dtsd"
       dies.  

Both of these programs call dce_svc_inq_table().  The SVC API should 
validate the component.

[04/19/94 public]
In the error path the count wasn't set to 0.  Closed.

[04/26/94 public]
Error message is returned: Unknown component. Great!



CR Number                     : 10363
Defect or Enhancement?        : def
CR in Code, Doc, or Test?     : code
Inter-dependent CRs           : 
Project Name                  : dce
H/W Ref Platform              : all
S/W Ref Platform              : all
Component Name                : utils
Subcomponent Name             : svc
Short Description             : dce_fprintf adds \n to output string
Reported Date                 : 4/15/94
Found in Baseline             : 1.1b6
Found Date                    : 4/15/94
Severity                      : B
Priority                      : 1
Status                        : closed
Duplicate Of                  : 
Fix By Baseline               : 1.1
Fixed In Baseline             : 1.1b13
Affected File(s)              : utils/svc/dceprintf.c
Sensitivity                   : public

[4/15/94 public]
dce_fprintf adds a \n to the output string. According to the man pages,
it should behave like the fprintf C function.
We think, that the hack:
	allocate string buffer
	use dce_sprintf with this buffer and output messages
	use dce_fprintf to print string buffer
	deallocate string buffer
is not acceptable.

[04/15/94 public]
Not sure if it's a "hack", but the "allocate" step is done for you
be dce_sprintf.

I believe that dce_fprintf as most commonly used is doing the right
thing.  The draft manpages you have are wrong.  I would like to cancel
this defect.  Perhaps we should poll dce-tech and see how uses it?

[ sekhar 6/27/94 public ]

This needs to be fixed soon. We are modifying security code assuming
that dce_printf() and dce_fprintf() will not be adding new lines.

The rationale for this ( extracted from my response which I posted on 
dce-tech is ) : 

------------

    I think that dce_fprintf() and dce_printf() should NOT be adding 
    new lines. But dce_pgm_printf() and dce_pgm_fprintf() should add new lines.
    The rationale for this is as follows:
    
    The most common use for dce_printf() and dce_fprintf() is to log
    user visible response, query and help messages in client code. 
    A query message need not always end in a newline. 
    For e.g. 
    
       rgy_edit> do p
       rgy_edit> add 
       rgy_edit> Add Principal=> Enter name:  < waits for user input >
    
    On the other hand, response and help messages almost always end 
    in a new line. So if a newline were not appended automatically, 
    a newline would explicitly have to be added for response and help 
    messages (in the sams file). So there is a tradeoff here.
    
    I (personally) would prefer adding newlines in sams file to 
    having dce_fprintf() adding a newline automatically ( and
    therefore being forced to use the dce_sprintf() , printf()
    for logging when a newline is not required) .
    
    dce_pgm_printf() and dce_pgm_fprintf() should add new lines
    by default. (These routines were added at my request). 
    This is because these functions are going to be used by security 
    clients (e.g. rgy_edit ) to log only error messages - which will
    always end in a newline .

    Sekhar

-----------

[7/26/94 public]
Did as outlined above:
    In dce_[f]printf, do not add \n to end of string.
    In dce_pgm_[f]printf, however, DO add a \n.

So the rule for printing strings from your sams file with dce_printf is:
the string in the .sams file is what you'd put in the format spec of a
normal printf() call.

[7/28/94 public]
Build happy.  Closed.



CR Number                     : 10355
Defect or Enhancement?        : def
CR in Code, Doc, or Test?     : code
Inter-dependent CRs           : 
Project Name                  : dce
H/W Ref Platform              : all
S/W Ref Platform              : all
Component Name                : utils
Subcomponent Name             : 
Short Description             : acldb .h and .idl files not installed
Reported Date                 : 4/14/94
Found in Baseline             : 1.1b3
Found Date                    : 4/14/94
Severity                      : B
Priority                      : 2
Status                        : closed
Duplicate Of                  : 
Fix By Baseline               : 1.1
Fixed In Baseline             : 1.1b8
Affected File(s)              : dce/Makefile,dce/utils/misc/Makefile
Sensitivity                   : public

[4/14/94 public]

The .h and .idl files from dce/utils/acldb do not make it to the install area.
Some Makefile tweaking is needed.

[4/19/94 public]
Adjusted Makefiles to visit utils from ./dce and list files to install.
Changed: dce/Makefile, dce/utils/acldb/Makefile, dce/utils/misc/Makefile

[5/11/94 public]
Fix worked. Closed.



CR Number                     : 10354
Defect or Enhancement?        : def
CR in Code, Doc, or Test?     : code
Inter-dependent CRs           : 
Project Name                  : dce
H/W Ref Platform              : all
S/W Ref Platform              : all
Component Name                : utils
Subcomponent Name             : svc
Short Description             : missing return value
Reported Date                 : 4/14/94
Found in Baseline             : 1.1b6
Found Date                    : 4/14/94
Severity                      : B
Priority                      : 0
Status                        : closed
Duplicate Of                  : 
Fix By Baseline               : 1.1
Fixed In Baseline             : 1.1b8
Affected File(s)              : dce/utils/svc/svcprintf.c
Sensitivity                   : public

[4/14/94 public]

the "lock file for writing" code ends with
	cancelmode = pthread_setcancel(CANCELOFF);
    }
It should return the value, as in
	return pthread_setcancel(CANCELOFF);
    }

This might be causing I/O buffering problems and lost messages.

[04/14/94 public]
Embarassing.  Trivial fix.  Moving to closed.



CR Number                     : 10337
Defect or Enhancement?        : def
CR in Code, Doc, or Test?     : code
Inter-dependent CRs           : 
Project Name                  : dce
H/W Ref Platform              : i486
S/W Ref Platform              : osf1
Component Name                : utils
Subcomponent Name             : sams compiler
Short Description             : sams generates wrong msg files
Reported Date                 : 4/13/94
Found in Baseline             : 1.1b6
Found Date                    : 4/13/94
Severity                      : B
Priority                      : 1
Status                        : closed
Duplicate Of                  : 
Fix By Baseline               : 1.1
Fixed In Baseline             : 1.1b8
Affected File(s)              : tools/{sams.c,samsgram.y}
Sensitivity                   : public

[4/13/94 public]

The sams compiler generates on AT386 wrong msg files in certain situations.

Example: (from new GDS serviceability - not yet submitted to OSF)

start           incatalog undocumented
code            GDS_S_IPCMSG
text            "%sT: %d %sID: %d INV: %d ASS: %d/%d OFLG: %d CID: %d UID: %d
		 MSZ: %d OID: %d CPID: %d/%d%b"
sub-component   GDS_S_GENERAL
attributes      svc_c_debug2
end

This generates the following *.msg file:

1290 %1$sT: %2$d %3$sID: %4$d INV: %5$d ASS: %6$d/%7$d OFLG: %8$d CID: %9$d UID: %$d\
MSZ: %^P$d OID: %^P$d CPID: %^T$d/%!$d%^D$b


With "od -c" you see the following:

                        1   2   9   0       %   1   $   s   T
:       %   2   $   d       %   3   $   s   I   D   :       %
4   $   d       I   N   V   :       %   5   $   d       A   S
S   :       %   6   $   d   /   %   7   $   d       O   F   L
G   :       %   8   $   d       C   I   D   :       %   9   $
d       U   I   D   :       %  \0   $   d   \  \n   M   S   Z
:       % 220   $   d       O   I   D   :       % 220   $   d
    C   P   I   D   :       % 224   $   d   /   %   !   $   d
% 004   $   b  \n

gencat (called by sams) gives the following error:

gencat: Reached end of string before expected.
	1290 %1$sT: %2$d %3$sID: %4$d INV: %5$d ASS: %6$d/%7$d OFLG: %8$d CID: %9$d UID: %
Warning:  gencat exit status 256

(Question : why is it a warning if the *.cat file can not be generated?)

You can see in the "od -c" output that the %d before the UID is generating
correctly a "%9$d". But the %d before the MSZ generates "%\0$d"
which includes "\0" - so you get "Reached end of string before expected".

It seems that the sams compiler has difficulties with more than 9 "%d"
constructions.

On HP it works.

[04/17/94 public]
sams now checks that a text does not have more than NL_ARGMAX parameters.
Unfortunately, on most platforms this means no more then 9.  I also stopped
using a putchar(digits[d++]) trick since NL_ARGMAX can be 10 or more.



CR Number                     : 10332
Defect or Enhancement?        : def
CR in Code, Doc, or Test?     : code
Inter-dependent CRs           : 
Project Name                  : dce
H/W Ref Platform              : all
S/W Ref Platform              : all
Component Name                : utils
Subcomponent Name             : svc
Short Description             : #define's in dce_svc.h overlap
Reported Date                 : 4/12/94
Found in Baseline             : 1.1b6
Found Date                    : 4/12/94
Severity                      : A
Priority                      : 2
Status                        : closed
Duplicate Of                  : 
Fix By Baseline               : 1.1
Fixed In Baseline             : 1.1b8
Affected File(s)              : src/dce/utils/dce_svc.h
Sensitivity                   : public

[4/12/94 public]

The values for severities and vendor-use fields overlap.
This means that a valid dce_svc_printf call can segfault
because the severities are masked and used as a subscript.
The solution is to make sure that the sets of numbers do not
overlap.

[04/17/94 public]
Fixed, built, closed:
   * Revision 1.1.4.2  1994/04/12  16:10:17  rsalz
   *      Make sure #define values do not overlap (OT CR 10332)
   *      [1994/04/12  15:59:33  rsalz]



CR Number                     : 10305
Defect or Enhancement?        : def
CR in Code, Doc, or Test?     : code
Inter-dependent CRs           : 
Project Name                  : dce
H/W Ref Platform              : hppa
S/W Ref Platform              : hpux
Component Name                : utils
Subcomponent Name             : 
Short Description             : sams -f doesn't work with some sams files
Reported Date                 : 4/6/94
Found in Baseline             : 1.1
Found Date                    : 4/6/94
Severity                      : A
Priority                      : 1
Status                        : closed
Duplicate Of                  : 
Fix By Baseline               : 1.1
Fixed In Baseline             : 1.1b7
Affected File(s)              : tools/sams/samsgram.y
Sensitivity                   : public

[4/6/94 public]
It was discovered that turning sams -f doesn't causes processing of
cds.sams to fail. Rich has looked at this and thinks he has an answer.

[04/06/94 public]
Explicitly strdup() a field works.  Strange.  Closed.



CR Number                     : 10287
Defect or Enhancement?        : def
CR in Code, Doc, or Test?     : code
Inter-dependent CRs           : 
Project Name                  : dce
H/W Ref Platform              : all
S/W Ref Platform              : all
Component Name                : utils
Subcomponent Name             : db
Short Description             : dce_db_open() with db_c_create
flag set, succeeds even of DB already exists.
Reported Date                 : 4/4/94
Found in Baseline             : 1.1b5
Found Date                    : 4/4/94
Severity                      : B
Priority                      : 1
Status                        : closed
Duplicate Of                  : 
Fix By Baseline               : 1.1
Fixed In Baseline             : 1.1b7
Affected File(s)              : dbopen.c,lib.sams
Sensitivity                   : public

[4/4/94 public]

I believe the dce_db_open() routine should set O_flags to O_CREAT | O_EXCL
to achieve the desired behaviour.  

TET test acldb/ts/db/dce_db_open.c[db_open_create_already_exists] to verify.

[4/9/94 public]
Did as Rob suggests above.  Created a new erorr message
db_s_open_already_exists (Peter - add this to the manpage), which is returned
if this error is detected.

[4/11/94 public]
Fix works. Closed.



CR Number                     : 10286
Defect or Enhancement?        : def
CR in Code, Doc, or Test?     : code
Inter-dependent CRs           : 
Project Name                  : dce
H/W Ref Platform              : all
S/W Ref Platform              : all
Component Name                : utils
Subcomponent Name             : db
Short Description             : dce_db_open() does not clean
up and deallocate handle on failed operation.
Reported Date                 : 4/4/94
Found in Baseline             : 1.1b5
Found Date                    : 4/4/94
Severity                      : C
Priority                      : 2
Status                        : closed
Duplicate Of                  : 
Fix By Baseline               : 1.1
Fixed In Baseline             : 1.1b7
Affected File(s)              : dbopen.c
Sensitivity                   : public

[4/4/94 public]

If dce_db_pen() fails for any reason,all resources should be cleaned
up so that processes which continue to run will not have memory leaks.
Either this or change dce_db_close() to be able to deal with
partially allocated handles.  This is a very minor problem.

[4/9/94 public]
Rearranged the code so that the handle is not allocated until after
the error checks are done.

[4/11/94 public]
Fix works. Closed.



CR Number                     : 10252
Defect or Enhancement?        : def
CR in Code, Doc, or Test?     : code
Inter-dependent CRs           : 
Project Name                  : dce
H/W Ref Platform              : all
S/W Ref Platform              : all
Component Name                : utils
Subcomponent Name             : dce_cf
Short Description             : edits to cfg.sams
Reported Date                 : 3/30/94
Found in Baseline             : 1.1b5
Found Date                    : 3/30/94
Severity                      : B
Priority                      : 1
Status                        : closed
Duplicate Of                  : 
Fix By Baseline               : 1.1
Fixed In Baseline             : 1.1b6
Affected File(s)              : dce/utils/dcecf/cfg.sams
Sensitivity                   : public

[3/30/94 public]

Incorporate Kathy Digan's edits to cfg.sams file.

[04/04/94 public]
Done, submitted, built --> closed.



CR Number                     : 10223
Defect or Enhancement?        : def
CR in Code, Doc, or Test?     : code
Inter-dependent CRs           : 
Project Name                  : dce
H/W Ref Platform              : all
S/W Ref Platform              : all
Component Name                : utils
Subcomponent Name             : acldb
Short Description             : need way to get number of items in backing store
Reported Date                 : 3/24/94
Found in Baseline             : 1.1b4
Found Date                    : 3/24/94
Severity                      : D
Priority                      : 2
Status                        : closed
Duplicate Of                  : 
Fix By Baseline               : 1.1
Fixed In Baseline             : 1.1b6
Affected File(s)              : dbiterate.c, dbif.h
Sensitivity                   : public

[3/24/94 public]
We need a way to quickly/easily get the number of items in a backing store.
Right now, programmers have to iterate through all items, counting them.
Something like this:
    dce_db_count(dce_db_handle_t h, unsigned32 *n, error_status_t *st)

This is typically needed when a server is to return the entire contents
of a backing store, or part of each data item.  The server has to know
how much to memory to allocate to return the list to the client.
(Yes, you could play realloc-type games, but that's messy.)

[3/28/94 public]
Added function dce_db_inq_count().

[3/29/94 public]
Change worked in nightly build.



CR Number                     : 10214
Defect or Enhancement?        : def
CR in Code, Doc, or Test?     : code
Inter-dependent CRs           : 
Project Name                  : dce
H/W Ref Platform              : all
S/W Ref Platform              : all
Component Name                : utils
Subcomponent Name             : acldb
Short Description             : dce_db_lock and unlock errors unsupported
Reported Date                 : 3/23/94
Found in Baseline             : 1.1
Found Date                    : 3/23/94
Severity                      : C
Priority                      : 2
Status                        : closed
Duplicate Of                  : 
Fix By Baseline               : 1.1
Fixed In Baseline             : 1.1b6
Affected File(s)              : dbopen.c,dblock.c,lib.sams
Sensitivity                   : public

[3/23/94 public]
In dblock.c, neither the lock routine nor the unlock routine catches any
error that may possibly occur, such as the attempt to lock something
already locked, or to unlock something that is not locked.  Are these
(and other) errors possible?  What happens?  What support is appropriate?

[3/30/94 public]
Changed dce_db_lock() and _unlock() to check return values of calls to
pthreads_mutex_{un}lock().  When creating the mutex, I use set the attribute
to "non-recursive", which means to return an error if you try to lock a
db that's locked already.  Added appropriate error messages to sams file.
Files changed:

    ./dce/utils/acldb/dblock.c		check lock/unlock result
    ./dce/utils/acldb/dbopen.c		set non-default attributes on mutex
    ./dce/utils/misc/lib.sams		new error messages

[4/11/94 public]
Fix works. Closed.



CR Number                     : 10201
Defect or Enhancement?        : def
CR in Code, Doc, or Test?     : code
Inter-dependent CRs           : 
Project Name                  : dce
H/W Ref Platform              : all
S/W Ref Platform              : all
Component Name                : utils
Subcomponent Name             : acldb
Short Description             : dce_db_iter_next doesn't check db type
Reported Date                 : 3/22/94
Found in Baseline             : 1.1
Found Date                    : 3/22/94
Severity                      : C
Priority                      : 2
Status                        : closed
Duplicate Of                  : 
Fix By Baseline               : 1.1
Fixed In Baseline             : 1.1b6
Affected File(s)              : dbiterate.c
Sensitivity                   : public

[3/22/94 public]
The iteration routines, dce_db_iter_next(), dce_db_iter_next_by_name(),
and dce_db_iter_next_by_uuid(), do not check whether they are about to
operate on a db of the wrong type, as do their counterparts
dce_db_fetch(), dce_db_fetch_by_name(), and dce_db_fetch_by_uuid().

[3/24/94 public]
dce_db_iter_next_by_name() and dce_db_iter_next_by_uuid() now
check that the index_type in the handle is the right value.
If not, the status is set to db_s_bad_index_type (just like
dce_db_fetch_by_xxx() and dce_db_store_by_xxx() routines).
Other errors that can be returned are those that dce_db_iter_next()
returns.

[3/28/94 public]
Fix worked.



CR Number                     : 10183
Defect or Enhancement?        : def
CR in Code, Doc, or Test?     : code
Inter-dependent CRs           : 
Project Name                  : dce
H/W Ref Platform              : i486
S/W Ref Platform              : osf1
Component Name                : utils
Subcomponent Name             : sams
Short Description             : line numbers on diagnostic messages don't match up with source file
Reported Date                 : 3/18/94
Found in Baseline             : 1.1
Found Date                    : 3/18/94
Severity                      : D
Priority                      : 2
Status                        : closed
Duplicate Of                  : 
Fix By Baseline               : 1.1
Fixed In Baseline             : 1.1b6
Affected File(s)              : src/tools/sams/samslex.l
Sensitivity                   : public

[3/18/94 public]

[03/29/94 public]
Short and to the point:  Fixed.

[03/30/94 public]
Passed nightly build; closing defect.



CR Number                     : 10162
Defect or Enhancement?        : def
CR in Code, Doc, or Test?     : code
Inter-dependent CRs           : 
Project Name                  : dce
H/W Ref Platform              : all
S/W Ref Platform              : all
Component Name                : utils
Subcomponent Name             : svc, sams
Short Description             : release: lstat dcesvc.cat: No such file or directory
Reported Date                 : 3/17/94
Found in Baseline             : 1.1
Found Date                    : 3/17/94
Severity                      : A
Priority                      : 0
Status                        : closed
Duplicate Of                  : 
Fix By Baseline               : 1.1
Fixed In Baseline             : 1.1b4
Affected File(s)              : dce/utils/svc/Makefile,tools/sams/sams.c
Sensitivity                   : public

[3/17/94 public]

In the core installation pass of the nightly build:

[ /dce/utils/svc ]

release   -o bin -g bin -m 444 -tostage \
  /u3/devobj/sb/nb_ux/install/hp800/opt/dce1.0 -fromfile dcesvc.cat \
  /nls/msg/en_US.ASCII/dcesvc.cat 
release: lstat dcesvc.cat: No such file or directory
/u3/devobj/sb/nb_ux/install/hp800/opt/dce1.0/nls/msg/en_US.ASCII/dcesvc.cat:
  aborting installation
*** Error code 1
`install_all' not remade because of errors.
*** Error code 1

[03/18/94 public]
The error was that saying "-oc" to sams doesn't generate the .cat file;
you have to do "-ocm" to generate the .msg file and the cat file.  Fixed
svc/Makefile to do this, and fixed sams to give error if you try to do
the wrong thing.

[03/30/94 public]
Passed nightly build last week; closing defect.



CR Number                     : 10138
Defect or Enhancement?        : def
CR in Code, Doc, or Test?     : code
Inter-dependent CRs           : 
Project Name                  : dce
H/W Ref Platform              : all
S/W Ref Platform              : all
Component Name                : utils
Subcomponent Name             : sams
Short Description             : msg.h should include IDL file if -i used
Reported Date                 : 3/15/94
Found in Baseline             : 1.1
Found Date                    : 3/15/94
Severity                      : B
Priority                      : 1
Status                        : closed
Duplicate Of                  : 
Fix By Baseline               : 1.1
Fixed In Baseline             : 1.1
Affected File(s)              : src/tools/sams/sams.c
Sensitivity                   : public

[3/15/94 public]
The "-i" flag to sams generates an IDL file with const declarations of all
status codes.  The xxxmsg.h file contains #define's for the same things.
If the -i flag is used, the msg.h file should assume that the user is
going to run IDL on the file sams created for them and therefore the msg.h
file should just #include dce/IDLNAME.h

[03/15/94 public]
Change submitted earlier today; marking fixed.

[03/30/94 public]
Passed nightly build awhile ago; closing defect.



CR Number                     : 10122
Defect or Enhancement?        : def
CR in Code, Doc, or Test?     : code
Inter-dependent CRs           : 
Project Name                  : dce
H/W Ref Platform              : all
S/W Ref Platform              : all
Component Name                : utils
Subcomponent Name             : sams
Short Description             : Sams changes broke build
Reported Date                 : 3/11/94
Found in Baseline             : 1.1
Found Date                    : 3/11/94
Severity                      : A
Priority                      : 0
Status                        : closed
Duplicate Of                  : 
Fix By Baseline               : 1.1
Fixed In Baseline             : 1.1b6
Affected File(s)              : directory/gds/sams/Makefile tools/sams/{sams.c,sams.h,samsagram.y}
Sensitivity                   : public

[3/11/94 public]
The sams changes to add collections and conditional text (OT CR 9697)
broke the build.  This is because of a bug (free'ing a struct instead
of a field within the struct).  Also the GDS catalogs use things like
	Error field <%d>
so that sams need to have a "-f" flag to suppress the text-filtering
option.  At least this problem was caught at run-time; the first was
found via a core file. :(

[3/11/94 public]
Fixed as described above.

[03/30/94 public]
Passed nightly build awhile ago; closing defect.



CR Number                     : 10108
Defect or Enhancement?        : def
CR in Code, Doc, or Test?     : code
Inter-dependent CRs           : 
Project Name                  : dce
H/W Ref Platform              : all
S/W Ref Platform              : all
Component Name                : utils
Subcomponent Name             : svc
Short Description             : dce_svc_bin_log has wrong va_start call
Reported Date                 : 3/9/94
Found in Baseline             : 1.1
Found Date                    : 3/9/94
Severity                      : A
Priority                      : 0
Status                        : closed
Duplicate Of                  : 
Fix By Baseline               : 1.1
Fixed In Baseline             : 1.1b5
Affected File(s)              : dce/utils/svc/svcprintf.c
Sensitivity                   : public

[3/9/94 public]
Ernst Kramer at SNI reports that dce_svc_bin_log in svcprintf.c
calls va_start(argtypes) when it should call it with message_index.
I changed the function and forgot to "move the va_start down".
The result is that routing to a binary file dumps core.

[03/09/94 public]
Fixed.

[03/30/94 public]
Passed nightly build awhile ago; closing defect.



CR Number                     : 10107
Defect or Enhancement?        : def
CR in Code, Doc, or Test?     : code
Inter-dependent CRs           : 
Project Name                  : dce
H/W Ref Platform              : all
S/W Ref Platform              : all
Component Name                : utils
Subcomponent Name             : svc
Short Description             : Duplicate copies of __FILE__
Reported Date                 : 3/9/94
Found in Baseline             : 1.1
Found Date                    : 3/9/94
Severity                      : B
Priority                      : 1
Status                        : closed
Duplicate Of                  : 
Fix By Baseline               : 1.1
Fixed In Baseline             : 1.1b5
Affected File(s)              : dce/utils/svc/{assert.h,dce_svc.h}
Sensitivity                   : public

[3/9/94 public]
Ernst Kraemer at SNI suggest that rather then using the builtin #define
__FILE__ that the serviceability routines use DCE_SVC__FILE__ which defaults
to __FILE__.  Applications that are concerned about space, then, can do this:
	#define DCE_SVC__FILE__ myfile
	#include <dce/dce.h>
	static char myfile[] = __FILE__;

[03/30/94 public]
Built in last baselevel; marking closed.



CR Number                     : 10092
Defect or Enhancement?        : def
CR in Code, Doc, or Test?     : code
Inter-dependent CRs           : 
Project Name                  : dce
H/W Ref Platform              : all
S/W Ref Platform              : all
Component Name                : utils
Subcomponent Name             : sams
Short Description             : remove [ local ] attribute in sams generated  idl files
Reported Date                 : 3/8/94
Found in Baseline             : 1.1
Found Date                    : 3/8/94
Severity                      : B
Priority                      : 1
Status                        : closed
Duplicate Of                  : 
Fix By Baseline               : 1.1
Fixed In Baseline             : 1.1b5
Affected File(s)              : tools/sams/sams.c
Sensitivity                   : public

[3/8/94 public]

The idl header file generated by sams (using -i option)
has the [ local ] attribute on the interface. Such files
cannot be included by say rgynbase.idl which does not have
the [ local ] attribute. 

This is because a nonlocal interface cannot import a

[ local ] interface. Trying to do so would result in the
following error:

   A nonlocal interface cannot import a local interface 

The fix is to change sams to generate the idl file without
the [ local ] attribute.

[3/8/94 public]

Fixed.

[03/30/94 public]
Built in last baselevel; marking closed.



CR Number                     : 10073
Defect or Enhancement?        : def
CR in Code, Doc, or Test?     : code
Inter-dependent CRs           : 
Project Name                  : dce
H/W Ref Platform              : all
S/W Ref Platform              : all
Component Name                : utils
Subcomponent Name             : acldb
Short Description             : Does iter_next need by_name and by_uuid?
Reported Date                 : 3/6/94
Found in Baseline             : 1.1
Found Date                    : 3/6/94
Severity                      : C
Priority                      : 2
Status                        : closed
Duplicate Of                  : 
Fix By Baseline               : 1.1
Fixed In Baseline             : 1.1b5
Affected File(s)              : dbiterate.c
Sensitivity                   : public

[3/6/94 public]

The code in dbiterate.c contains a routine dce_db_iter_next(), but does not
contain routines dce_db_iter_next_by_name() and dce_db_iter_next_by_uuid()
that RFC 45.0 implicitly calls for.  Here is the relevent section of the RFC:

  Once the iterator has been set up, the following routine can be called
  (for the sake of brevity, the "_by_name" and "_by_uuid" analogs are not
  shown):
  
  void dce_db_iter_next(
      dce_db_handle_t     handle,
      void                **key,
      error_status_t      *st
  );

Are dce_db_iter_next_by_name() and dce_db_iter_next_by_uuid() required, or
can they be ignored?

[03/07/94 public]
Yes the _by_name and _by_uuid routines should be written and documented.

[3/9/94 public]
Added the two routines.  They're just wrappers around dce_db_iter_next().

[3/16/94 public]
Fixed works; nightly build is happy.



CR Number                     : 10034
Defect or Enhancement?        : def
CR in Code, Doc, or Test?     : doc
Inter-dependent CRs           : 11827
Project Name                  : dce
H/W Ref Platform              : all
S/W Ref Platform              : all
Component Name                : utils
Subcomponent Name             : app_ref
Short Description             : clean up dce_cf man pages
Reported Date                 : 2/28/94
Found in Baseline             : 1.0.3
Found Date                    : 2/28/94
Severity                      : C
Priority                      : 2
Status                        : closed
Duplicate Of                  : 
Fix By Baseline               : 1.1
Fixed In Baseline             : 1.1doc
Affected File(s)              : app_ref/man3dce/dce_cf*.3dce
Sensitivity                   : public

[2/28/94 public]

While writing the dce_cf_get_csrgy_filename() man page, I
noticed that the dce_cf pages contained some information
that was inconsistent with other component man pages. I
consulted with Rich Salz - here are the changes that
need to be made:

- remove "Library" section from all dce_cf man pages

- remove "public" on synopsis line from all dce_cf man pages

- add "use lowercase" to input parameters for
    dce_cf_binding_entry_from host()
    dce_cf_prin_name_from_host()
    dce_cf_profile_entry_from_host()

- remove "Note" about case insensitivity from
    dce_cf_binding_entry_from_host()
    dce_cf_find_name_by_key()
    dce_cf_prin_name_from_host()
    dce_cf_profile_entry_from_host()

- remove implementation details from all dce_cf man pages

[9/6/94 public]

Fixed and verified (a while ago) by R. Salz. Note that
CR 11827 means that I had to "undo" the "add 'use lowercase'"
action item in this CR.

[10/25/94 public]
Closed bug.



CR Number                     : 10021
Defect or Enhancement?        : def
CR in Code, Doc, or Test?     : code
Inter-dependent CRs           : 
Project Name                  : dce
H/W Ref Platform              : all
S/W Ref Platform              : all
Component Name                : utils
Subcomponent Name             : acl
Short Description             : dce_rdacl_get_mgr_types_semantics() does not screen by mgr type
Reported Date                 : 2/25/94
Found in Baseline             : 1.1b3
Found Date                    : 2/25/94
Severity                      : A
Priority                      : 2
Status                        : closed
Duplicate Of                  : 
Fix By Baseline               : 1.1
Fixed In Baseline             : 1.1b4
Affected File(s)              : dce/utils/acldb/dceaclimpl.c
Sensitivity                   : public

[2/25/94 public]
In the ACL library dce_rdacl_get_mgr_types_semantics() does not filter by
manager type, only ACL UUID. dce_rdacl_get_manager_types() does the right
thing.  dce_rdacl_get_mgr_types_semantics() should be changed to mimic
dce_rdacl_get_manager_types().

Note: acl_edit calls rdacl_get_mgr_types_semantics(), so if your server
manages several manager types with one entry in the namespace, acl_edit
will often fail.

[2/25/94 public]
I adjusted dce_rdacl_get_mgr_types_semantics() so that it calls
dce_rdacl_get_manager_types(), then set the posix_semantics output param
(if it succeeds).  Works with the prototype dced and acl_edit.

[2/28/94 public]
Fix worked.



CR Number                     : 10004
Defect or Enhancement?        : enh
CR in Code, Doc, or Test?     : code
Inter-dependent CRs           : 3926
Project Name                  : dce
H/W Ref Platform              : hppa
S/W Ref Platform              : hpux
Component Name                : utils
Subcomponent Name             : misc
Short Description             : dce_get_802_address() must be defined
Reported Date                 : 2/23/94
Found in Baseline             : 1.1
Found Date                    : 2/23/94
Severity                      : B
Priority                      : 2
Status                        : closed
Duplicate Of                  : 
Fix By Baseline               : 1.1
Fixed In Baseline             : 1.1b11
Affected File(s)              : utils/misc/*/dce_802_addr.c
Sensitivity                   : public

[2/23/94 public]

RFC 34.2, section 2.5.3 states that a single DCE wide routine 
should be used to return the host' IEEE 802 address. This requires 
that 1) a global header file be chosen/developed to contain the prototype
for this function, 2) machine specific .c files be generated to contain 
the (machine specific) code for this function, and 3) code modules that
currently contain the duplicate code in the rpc and cds component be 
marked as "defunct".

[7/6/94 public]
I wrote/stole dce_get_802_addr() code from cds, putting it in machine-dep
dirs in utils/misc.  Tom tried them out with rpc, and they worked fine.
Closed.



CR Number                     : 10001
Defect or Enhancement?        : def
CR in Code, Doc, or Test?     : code
Inter-dependent CRs           : 
Project Name                  : dce
H/W Ref Platform              : all
S/W Ref Platform              : all
Component Name                : utils
Subcomponent Name             : acl
Short Description             : ACL mgt code should account for delegation acl entry types
Reported Date                 : 2/23/94
Found in Baseline             : 1.1b2
Found Date                    : 2/23/94
Severity                      : C
Priority                      : 3
Status                        : closed
Duplicate Of                  : 
Fix By Baseline               : 1.1
Fixed In Baseline             : 1.1b13
Affected File(s)              : dce/utils/acldb/aclimpl.c
Sensitivity                   : public

[2/23/94 public]
The ACL management code should account for the new delegation ACL
entry types.  (these were recently submitted by HP)

[4/26/94 public]

I consider all these part of this CR (since they are side-effects of
delegation/EPAC work):
    Make the evaluation algorithm grok delegation ACLE types
    Use new sec_cred structures instead of PACs
    Worry about differences between v0 and v1 PACs in rdacl_lookup and
	rdacl_replace operations
    Make it easier for others to use the evaluation functions

Split dceaclimpl.c into 3 files: aclimpl.c (rdacl code), aclconv.c
(convenience routines), acleval.c (ACL/credential evaluation code).

The evaluation funtions now take rpc_authz_cred_handle_t instead of
sec_id_pac_t (not supposed to use PACs anymore...).  Some were renamed
to reflect the fact that they don't take PACs.

The evaluation algorithm now pays attention to the delegation ACLE types. 
Details of the algorithm were gotten from: the old code (dceaclimpl.c), the
sec AES, Walt's slides for a security talk he's giving soon, and sample code
in ./security/client/admin/acl_edit/svr_example/dacl_manager.c.

Made initial changes to aclimpl.c (the rdacl_* interfaces) to handle
differences in v0 and v1 rdacl operations (for lookup and replace).
More work to be done in there soon.  There are 2 EPVs now for rdacl
managers: dce_acl_v0_0_epv and dce_acl_v1_0_epv.

Open issue: dce_rdacl_test_access_on_behalf() is now broken.  It
takes a PAC (sec_id_pac_t) as an arg, while we're trying to wean ourselves
of PACs.  The same functionality is supposed to be done with delegation.
I don't think anyone will use this, so it may not be a big deal.

[5/12/94 public]
Progress update: the evaluation for unauthenticated appears to not work
properly.  cbrooks is using dce_acl_is_client_authorized() for DTS, and
has it denies access for unauthen.  Access for other ACLE types seems OK.

[7/27/94 public]
We now handle ACL entries for delegation (1.0 vs 1.1 issues).  Code is
provided (from HP, a while ago) in libdce to do the real work.
[are: sec_acl_encode_v0_entries() and sec_acl_decode_v0_entries().]

[7/28/94 public]
Nightly build happy.  Closed.



CR Number                     : 10000
Defect or Enhancement?        : def
CR in Code, Doc, or Test?     : code
Inter-dependent CRs           : 
Project Name                  : dce
H/W Ref Platform              : all
S/W Ref Platform              : all
Component Name                : utils
Subcomponent Name             : db
Short Description             : dce_db_std_header_fetch() incomplete
Reported Date                 : 2/23/94
Found in Baseline             : 1.1b2
Found Date                    : 2/23/94
Severity                      : C
Priority                      : 1
Status                        : closed
Duplicate Of                  : 
Fix By Baseline               : 1.1
Fixed In Baseline             : 1.1b19
Affected File(s)              : dce/utils/acldb/dbheader.c,database.{acf,idl}
Sensitivity                   : public

[2/23/94 public]
The function dce_db_std_header_fetch() does not work yet.  This is waiting
for a way to decode part of a pickle with a common header part (dce_db_header)
that was encoded with with a different encoding function.

[3/9/94 public]
Related to this, I cleaned up many references to the header structure,
including making a simpler header union member for databases that
just want to keep track of the acl_uuid for a data item (instead of
the full "standard" header).

What's left is to do: fix the pickling code to not check type, and make
any necessary adjustments to dbheader.c.

[4/5/94 public]
CR 10288 (marked dup) mentions the test for this function:
    Verify with TET test acldb/ts/db/dce_db_misc.c[db_header_fetch]

[08/27/94 public]
John fixed this some time ago (I made a guess at the baselevel)
 * Revision 1.1.2.4  1994/05/10  21:45:02  bowe
 *      Fix implementation of dce_db_header_fetch(). (needed idl/es support)

[8/28/94 public]
At least one of these is true: my hand test did not catch the some error,
the header fetch doesn't work correctly, or the functional test incorrectly
reports an error. According to mail from Rob, two months ago:

    Just tried it again and I get the same failure, a status code
    which looks invalid (0x000181cd).
    The test is in ./test/dce/utils/acldb/ts/db/dce_db_misc,

Reopening and setting P=1.

[9/19/94 public]
The idl-generated function, dce_db_header_convert(), was returning a garbage
status code.  It was putting the first part of the data *after* the header
in the buffer being decoded into the returned status.  Looks like an ES
limitation.  Instead of having it return a "[comm_status] st", I tell it to
not return a status at all. Instead, do TRY/CATCH to catch errors.



CR Number                     : 9994
Defect or Enhancement?        : def
CR in Code, Doc, or Test?     : code
Inter-dependent CRs           : 
Project Name                  : dce
H/W Ref Platform              : all
S/W Ref Platform              : all
Component Name                : utils
Subcomponent Name             : db
Short Description             : dce_db_std_header_fetch() misnamed in prototype
Reported Date                 : 2/23/94
Found in Baseline             : 1.1b2
Found Date                    : 2/23/94
Severity                      : D
Priority                      : 2
Status                        : closed
Duplicate Of                  : 
Fix By Baseline               : 1.1
Fixed In Baseline             : 1.1b4
Affected File(s)              : dce/utils/acldb/dbif.h
Sensitivity                   : public

[2/23/94 public]
The prototype for dce_db_std_header_fetch() is misspelled in the .h file.
Mail from Peter N to me:

    The routine is named dce_db_header_fetch (std_ is missing) both in
    dbif.h and in the comments in dbheader.c, at least the submitted
    versions that I currently see.  You will probably want to fix these if
    you haven't yet.

[3/2/94 public]
Renamed it in the .h file.



CR Number                     : 9968
Defect or Enhancement?        : def
CR in Code, Doc, or Test?     : code
Inter-dependent CRs           : 
Project Name                  : dce
H/W Ref Platform              : all
S/W Ref Platform              : all
Component Name                : utils
Subcomponent Name             : acldb
Short Description             : dce_db_delete*() routines do not sync database
Reported Date                 : 2/16/94
Found in Baseline             : 1.1b2
Found Date                    : 2/16/94
Severity                      : B
Priority                      : 3
Status                        : closed
Duplicate Of                  : 
Fix By Baseline               : 1.1
Fixed In Baseline             : 1.1b4
Affected File(s)              : utils/acldb/dbdelete.c
Sensitivity                   : public

[2/16/94 public]
dce_db_delete() and friends do not sync the database after deleting
a record.  (The dce_db_store() functions do.)  They should.

[2/17/94 public]
Aove fix worked (build was clean).



CR Number                     : 9935
Defect or Enhancement?        : def
CR in Code, Doc, or Test?     : code
Inter-dependent CRs           : 
Project Name                  : dce
H/W Ref Platform              : all
S/W Ref Platform              : all
Component Name                : utils
Subcomponent Name             : IDL files
Short Description             : Need fault_status comm_status
Reported Date                 : 2/10/94
Found in Baseline             : 1.1
Found Date                    : 2/10/94
Severity                      : A
Priority                      : 1
Status                        : closed
Duplicate Of                  : 
Fix By Baseline               : 1.1
Fixed In Baseline             : 1.1b5
Affected File(s)              : dce/utils/svc/{Makefile,service.acf}
Sensitivity                   : public

[2/10/94 public]
All IDL files that are part of libdce should be compiled with ACF files
that have the [fault_status,comm_status] attributes.  Without this, a
failing RPC could cause client code to core dump when there is a perfectly
good error_status_t parameter available.  When adding the ACF files, it is
important to make sure that no API changes.  As most routines probably
already have an "error_status_t *st" parameter this will probably not be
an issue; routines that don't will have to be handled on a case-by-case,
probably by adding a new routine that DOES have the status param and
changing our existing code to call that routine.

[03/15/94 public]
Create service.acf and updated Makefile.  Fixed.

[03/30/94 public]
Built in last baselevel; marking closed.



CR Number                     : 9926
Defect or Enhancement?        : enh
CR in Code, Doc, or Test?     : code
Inter-dependent CRs           : 
Project Name                  : dce
H/W Ref Platform              : all
S/W Ref Platform              : all
Component Name                : utils
Subcomponent Name             : svc
Short Description             : New SVC functions dce_pgm_{printf, sprintf, fprintf}
Reported Date                 : 2/10/94
Found in Baseline             : 1.1
Found Date                    : 2/10/94
Severity                      : B
Priority                      : 2
Status                        : closed
Duplicate Of                  : 
Fix By Baseline               : 1.1
Fixed In Baseline             : 1.1b6
Affected File(s)              : dce/utils/svc/{dce_svc.h,dceprintf.c,svcimpl.h,svcprintf.c}
Sensitivity                   : public

[2/10/94 public]

Currently on most (if not all) of client generated errors the name of
the program is prefixed to the error text e.g.

    ?(rgy_edit)  - Operation not valid on the specified domain

Logging the 'program name' such as "rgy_edit" is useful since
this would identify the origin of the error. This is particularly
useful when the errors are generated within scripts (e.g. system test) .

The SVC formatting routines (i.e. dce_{printf, sprintf, fprintf} )
do not explicitly log the program name.  And these cannot be changed 
to log the program name by default since these are used by 
response, query and help messages (where the program name should not 
be printed). 

So I am requesting that there be three new routines equivalent 
to dce_printf() i.e.

     dce_pgm_printf()  ....  equivalent to dce_printf()
     dce_pgm_sprintf() ....  equivalent to dce_sprintf()
     dce_pgm_fprintf() ....  equivalent to dce_fprintf()

The only difference between dce_pgm_printf() and dce_printf() would be
that the dce_pgm_printf() logs the program name whereas dce_printf() does
not. 

The client sets the program name by calling dce_svc_set_progname() .
If the client does not call dce_svc_set_progname() then the default 
would be a.out .

So (using the above e.g.) the new error message would be logged as:

  rgy_edit: Operation not valid on the specified domain

[03/09/94 public]

I added the new functions.  The default name is not a.out, however, but
an empty string or "PID#nnn" if you've called a logging function first.
Technically let's say the default name is "undefined"

[4/11/94 public]
Fix works.  Closed.



CR Number                     : 9916
Defect or Enhancement?        : def
CR in Code, Doc, or Test?     : code
Inter-dependent CRs           : 
Project Name                  : dce
H/W Ref Platform              : all
S/W Ref Platform              : all
Component Name                : utils
Subcomponent Name             : svc
Short Description             : extra #include string.h
Reported Date                 : 2/9/94
Found in Baseline             : 1.1
Found Date                    : 2/9/94
Severity                      : C
Priority                      : 2
Status                        : closed
Duplicate Of                  : 
Fix By Baseline               : 1.1
Fixed In Baseline             : 1.1
Affected File(s)              : dce/utils/svc/svcroute.c
Sensitivity                   : public

[2/9/94 public]
svcroute.c has an #include <string.h> that isn't needed since svcimpl.h
already includes that file.  I forgot to remove the #include when I
fixed the header file.

[02/09/94 public]
done.

[03/09/94 public]
Marked closed.



CR Number                     : 9913
Defect or Enhancement?        : enh
CR in Code, Doc, or Test?     : code
Inter-dependent CRs           : 
Project Name                  : dce
H/W Ref Platform              : all
S/W Ref Platform              : all
Component Name                : utils
Subcomponent Name             : sams
Short Description             : Prefer empty string not 0
Reported Date                 : 2/9/94
Found in Baseline             : 1.1
Found Date                    : 2/9/94
Severity                      : B
Priority                      : 2
Status                        : closed
Duplicate Of                  : 
Fix By Baseline               : 1.1
Fixed In Baseline             : 1.1
Affected File(s)              : src/tools/sams/sams.c
Sensitivity                   : public

[2/9/94 public]
This was requested by From: Ernst Kraemer <Ernst.Kraemer@mch.sni.de>
If a svc message has no arguments, the convenience macro generated by
sams looks like this:
> >        DCE_SVC(gds_svc_handle, 0), GDS_S_GENERAL, \

The 0 should be "".

[02/09/94 public]
Changed a "return "0";" to a "return "\"\"";" (just love quoting C code...)

[03/09/94 public]
Marked closed.



CR Number                     : 9897
Defect or Enhancement?        : def
CR in Code, Doc, or Test?     : code
Inter-dependent CRs           : 
Project Name                  : dce
H/W Ref Platform              : all
S/W Ref Platform              : all
Component Name                : utils
Subcomponent Name             : svc
Short Description             : dce_msg*() routines not thread-safe
Reported Date                 : 2/7/94
Found in Baseline             : 1.1
Found Date                    : 2/7/94
Severity                      : B
Priority                      : 1
Status                        : closed
Duplicate Of                  : 
Fix By Baseline               : 1.1
Fixed In Baseline             : 1.1b5
Affected File(s)              : dce/utils/svc/{msggetdef.c,msggetmsg.c,msgtrans.c,msgxpgcat.c,svcprintf.c}
Sensitivity                   : public

[2/7/94 public]
I am still not sure how this is being triggered, but I am getting
faulty results from dce_error_inq_text().
When I examined the code I discovered that the locks to get around
non-reenterable catgets() are not at the right level. The string
pointer returned from catgets() is not protected. Routines in
msgxpgcat.c attempt to protect the catalog data, but this pointer
is passed up to the caller after the lock has been released (e.g.
dce_msg_get_msg() gets the pointer unprotected). The data is copied
from there at this unprotected level.

[03/17/94 public]
Alan shuffled some LOCK/UNLOCK calls around.  I'm submitting his
changes.

[03/30/94 public]
Built in last baselevel; marking closed.



CR Number                     : 9894
Defect or Enhancement?        : def
CR in Code, Doc, or Test?     : code
Inter-dependent CRs           : 
Project Name                  : dce
H/W Ref Platform              : all
S/W Ref Platform              : all
Component Name                : utils
Subcomponent Name             : sams
Short Description             : note line in .msg file is not terminated
Reported Date                 : 2/7/94
Found in Baseline             : 1.1
Found Date                    : 2/7/94
Severity                      : B
Priority                      : 1
Status                        : closed
Duplicate Of                  : 
Fix By Baseline               : 1.1
Fixed In Baseline             : 1.1
Affected File(s)              : tools/sams/sams.c
Sensitivity                   : public

[2/7/94 public]
I discovered that some of my messages were missing in the catalog,
and traced it to the fact that no trailing <cr> was inserted after
a generated note in the ".msg" file, resulting in a concatination
and loss of the following message text.

[03/14/94 public]
Fixed:
 * Revision 1.1.4.2  1994/02/08  20:25:37  rsalz
 *      Add trailing \n to message catalog notes (OT CR 9894).
 *      [1994/02/07  15:57:45  rsalz]



CR Number                     : 9889
Defect or Enhancement?        : def
CR in Code, Doc, or Test?     : code
Inter-dependent CRs           : 
Project Name                  : dce
H/W Ref Platform              : all
S/W Ref Platform              : all
Component Name                : utils
Subcomponent Name             : svc
Short Description             : Error msgs need cleanup
Reported Date                 : 2/4/94
Found in Baseline             : 1.1
Found Date                    : 2/4/94
Severity                      : C
Priority                      : 2
Status                        : closed
Duplicate Of                  : 
Fix By Baseline               : 1.1
Fixed In Baseline             : 1.1b5
Affected File(s)              : dce/utils/svc/svc.sams
Sensitivity                   : public

[2/4/94 public]

There are a number of problems with the svc.sams file messages.  In
general, there is a need for elaboration of the recovery action.  A
complete list of suggested changes has been given to the engineer.

[03/16/94 public]
Followed suggestions and submitted new version.

[03/30/94 public]
Built in last baselevel; marking closed.



CR Number                     : 9885
Defect or Enhancement?        : def
CR in Code, Doc, or Test?     : code
Inter-dependent CRs           : 
Project Name                  : dce
H/W Ref Platform              : i486
S/W Ref Platform              : osf1
Component Name                : utils
Subcomponent Name             : editline
Short Description             : hist_add() core dumps
Reported Date                 : 2/3/94
Found in Baseline             : 1.1
Found Date                    : 2/3/94
Severity                      : A
Priority                      : 2
Status                        : closed
Duplicate Of                  : 
Fix By Baseline               : 1.1
Fixed In Baseline             : 1.1b5
Affected File(s)              : dce/utils/misc/{editline.c,complete.c}
Sensitivity                   : public

[2/3/94 public]
From: Gundula Loose <Gundula.Loose@mch.sni.de>

we have a problem with readline-function on the OSF-platform (at386).
We get a coredump after using 3 times the add_history() and readline().
When we test with the dbmalloc-lib, it coredumps in the first readline().
We found out that the reason is the use of strdup() in hist_add().
This function doesn't call a malloc and so you cannot free the pointer
you got (What is done with DISPOSE(H.Lines[--H.Size]). 
On other platforms the free works, because the strdup calls
malloc to get the memory. May be it uses other systemfunctions on at386?

[2/3/94 public]
According to the OSF1 manpage, strdup() DOES use malloc() and DOES want
you to call free():

	The strdup() function returns a pointer to a new string that
	is an exact duplicate of the string pointed to by the s1
	parameter.  The malloc() function is used to allocate space
	for the new string.  The strdup() function is provided for
	compatibility with existing systems.

This test program seemed to do the right thing:
________________________________________

#include <dce/dce.h>
#include <dce/editline.h>
main()
{
    char *cp;
    while (cp = readline("->> ")) {
        add_history(cp);
        printf("You typed: %s.\n", cp);
    }
}
________________________________________
Compiled with:
    gcc -g -I/project/dce/build/nb_486/export/at386/usr/include -o e-test \
        e-test.c /project/dce/build/nb_486/export/at386/usr/lib/libdceutils.a
_________________________________________________

Can someone give some more hints about what may be wrong with their
platform?

[2/9/94 public]
From: Gundula Loose <Gundula.Loose@mch.sni.de>

I have a little test file which was linked with the libdbmalloc for testing
the memory management. In the trace file from the malloc-tester you can see
that there are no malloc-calls for the strdup, thats why it's saying
"freeing bad pointer" when you try to free the address got from
strdup.
C-file and log-file follows:

main()
{
  char *a, *b, *c;

  b = (char *) malloc(111);
  a = strdup("xxx");
  c = (char *) malloc(333);
  printf("a: %x\n",a);
  fflush(stdout);
  free(b); 
  free(c);
  free(a);
}

TRACE  ALLOC/FREE version 19.06.92
   trace file: /home/loose/logs/MALLOC
malloc    1 at:   410004 len: 111
malloc    2 at:   413004 len: 333
free      1 at:   410004 len: 111
free      2 at:   413004 len: 333
X_MEM ERROR=8 (free) freeing bad pointer, address: 00411008
on heap 00411008: 7878780000...

[03/08/94 public]
Okay, it seems that some versions of strdup() don't call malloc.
Since strdup() is a very common function, not a standard function, this
is apparently okay.  For ease-of-porting, I think editline should have a
local function, static char *rl_strdup() that by default calls strdup
but can be enabled (via some documented #ifdef in the p&t guide) to
do the malloc/strcpy itself.

[03/14/94 public]
Wrote rl_strdup which does malloc/strcpy and changed all strdup calls to
call rl_strdup.

[03/30/94 public]
Built in last baselevel; marking closed.



CR Number                     : 9879
Defect or Enhancement?        : def
CR in Code, Doc, or Test?     : code
Inter-dependent CRs           : 
Project Name                  : dce
H/W Ref Platform              : all
S/W Ref Platform              : all
Component Name                : utils
Subcomponent Name             : 
Short Description             : Error mgs need cleanup
Reported Date                 : 2/3/94
Found in Baseline             : 1.1
Found Date                    : 2/3/94
Severity                      : C
Priority                      : 2
Status                        : closed
Duplicate Of                  : 
Fix By Baseline               : 1.1
Fixed In Baseline             : 1.1b4
Affected File(s)              : dce/utils/lib.sams
Sensitivity                   : public

[2/3/94 public]

There are a number of problems with the lib.sams file messages.  In some
cases the errors require further elaboration. In other cases, sml coding
needs to be added in the explanation and action fields.  A complete list of
the suggested changes has been given to the engineer.

[2/28/94 public]
Made the changed Cathy referred to.  Passed lib.sams file by a few
other people, just to check.



CR Number                     : 9850
Defect or Enhancement?        : def
CR in Code, Doc, or Test?     : code
Inter-dependent CRs           : 
Project Name                  : dce
H/W Ref Platform              : all
S/W Ref Platform              : all
Component Name                : utils
Subcomponent Name             : 
Short Description             : dce.h not installed in include/dce
Reported Date                 : 1/28/94
Found in Baseline             : 1.1
Found Date                    : 1/28/94
Severity                      : B
Priority                      : 1
Status                        : closed
Duplicate Of                  : 
Fix By Baseline               : 1.1
Fixed In Baseline             : 1.1b3
Affected File(s)              : src/dce/Makefile
Sensitivity                   : public

[1/28/94 public]

The file dce.h is not being put into the install tree (it is being exported
correctly).

[2/2/94 public]
I adjusted ./dce/Makefile to install dce.h by defining the variables
ILIST, IDIR, and IMODE.



CR Number                     : 9823
Defect or Enhancement?        : def
CR in Code, Doc, or Test?     : code
Inter-dependent CRs           : 
Project Name                  : dce
H/W Ref Platform              : rs6000
S/W Ref Platform              : aix
Component Name                : utils
Subcomponent Name             : dce/utils/svc
Short Description             : Unresolved or undefined symbols detected
Reported Date                 : 1/26/94
Found in Baseline             : 1.1
Found Date                    : 1/26/94
Severity                      : B
Priority                      : 2
Status                        : closed
Duplicate Of                  : 
Fix By Baseline               : 1.1
Fixed In Baseline             : 1.1b5
Affected File(s)              : src/dce/utils/svc/Makefile
Sensitivity                   : public

[1/26/94 public]

ld/dce1.1-snap/export/rios/usr/lib  -o dumplog.X dumplog.o  -lsvc
0706-317 ERROR: Unresolved or undefined symbols detected:
         Symbols in error (followed by references) are
          dumped to the load map.
   The -bloadmap:<filename> option will create a load map.
           .cma_fprintf
           .cma_printf
           .pthread_mutex_lock
           .cma_lib_malloc
           .pthread_mutex_unlock
_binding
           .rpc_binding_from_string_binding
           .dce_error_inq_text
           .rpc_binding_set_object
           .rpc_ns_binding_import_begin
           .ptdexc_setasynccancel
           .rpc_ss_init_marsh_state
           .exc_push_ctx
           .rpc_call_start
           .rpc_ss_ndr_marsh_interp
           .rpc_call_transceive
           .rpc_ss_ndr_unmar_interp
           .exc_pop_ctx
           .rpc_ss_ndr_clean_up
           .rpc_ss_call_end_2
           .rpc_ss_init_client_once
           .rpc_ss_mem_free
           rpc_ss_client_is_set_up
           .rpc_ss_report_error_2
           .rpc_ss_init_node_table
           .rpc_ss_mts_client_estab_alloc
           rpc_x_ss_pipe_comm_error
*** Error code 8

[1/28/94 public]
I temporarily took this out of the build (commented it out of the
./dce/utils/svc/Makefile).  This program (dumplog) is not important
at the moment, but we will eventually want to resolve this.
(Hence, I downgraded from A0 -> B2).

[03/15/94 public]
Fixed makefile submitted; marking this fixed.

[03/30/94 public]
Built in last baselevel; marking closed.



CR Number                     : 9820
Defect or Enhancement?        : def
CR in Code, Doc, or Test?     : code
Inter-dependent CRs           : 9815
Project Name                  : dce
H/W Ref Platform              : hppa
S/W Ref Platform              : hpux
Component Name                : utils
Subcomponent Name             : src/dce/utils
Short Description             : Duplicate symbol "dcelocal_path"
Reported Date                 : 1/26/94
Found in Baseline             : 1.1
Found Date                    : 1/26/94
Severity                      : A
Priority                      : 0
Status                        : closed
Duplicate Of                  : 
Fix By Baseline               : 1.1
Fixed In Baseline             : 1.1b2
Affected File(s)              : dce/utils/svc/svcroute.o,
					     dce/utils/misc/localdir.o
Sensitivity                   : public

[1/26/94 public]

In the build of "libdce" the following errors occurred:

ld: Duplicate symbol "dcelocal_path", files ../dce/utils/svc/svcroute.o and \
  ../dce/utils/misc/localdir.o
ld: Found 1 duplicate symbol(s)
*** Error code 1

/bin/ld: Duplicate symbol "dcelocal_path", files \
  /u3/devobj/sb/nb_ux/export/hp800/usr/lib/libdce.a(svcroute.o) and \
  /u3/devobj/sb/nb_ux/export/hp800/usr/lib/libdce.a(localdir.o)
/bin/ld: Found 1 duplicate symbol(s)
*** Error code 1

[1/27/94 public]

Bug may still be occurring but above error messages disappeared and now we
see:

[ /libdce ]

ld -o shr.o *.o -bloadmap:shr.o.map -bM:sre -bE:libdce.syms \
  -bI:/lib/syscalls.exp \
  -bI:/project/dce/build/dce1.1-snap/src/libdce/RIOS/syms.imp \
  -L/u1/devobj/sb/nb_rios/export/rios/usr/lib \
  -L/project/dce/build/dce1.1-snap/export/rios/usr/lib -T512 -H512 -lbsd -lc \
  -lm -lcurses -lkrb5 -lslog_r -lgda_util -lafssys -ldacl2acl -ldfsjunct 2> \
  shr.o.error
dcelocal_path
*** Error code 8
`build_all' not remade because of errors.
*** Error code 1

Also, now "libdce.a" doesn't build.

[1/28/94 public]
Two separate problems:  the first was that "dcelocal_path" was defined in
two places (utils/svc/svcroute.c and utils/misc/localdir.c).  There
was also a #define for dcelocal_path in another file.  Changed so that
there is one definition localdir.c, and an extern declaration in dce.h
(which was there already).

Second problem was because none of utils/misc/* were being put into
libdce on the RIOS.  I added libdceutils.a (and the other missing/new
libraries under utils) ./libdce/RIOS/machdep.mk.
(NOTE:  when you add something to ./libdce/Makefile, you may have to
adjust platform-specific machdep.mk files, in particular RIOS and SVR4.)

[2/1/94 public]
Fix above worked. CR closed.



CR Number                     : 9815
Defect or Enhancement?        : def
CR in Code, Doc, or Test?     : code
Inter-dependent CRs           : 9814
Project Name                  : dce
H/W Ref Platform              : rs6000
S/W Ref Platform              : aix
Component Name                : utils
Subcomponent Name             : dce/utils/db44
Short Description             : BYTE_ORDER can't be redefined, etc.
Reported Date                 : 1/25/94
Found in Baseline             : 1.1
Found Date                    : 1/25/94
Severity                      : A
Priority                      : 0
Status                        : closed
Duplicate Of                  : 
Fix By Baseline               : 1.1
Fixed In Baseline             : 1.1b2
Affected File(s)              : compat.h,libdce/Makefile,libdce/RIOS/machdep.mk
Sensitivity                   : public

[1/25/94 public]

On the RIOS some new "dce/utils" errors were seen in "db44/" and
other modules.  These may be related to the bug and fix involving
OT #9751.  Some examples:

[ /dce/utils/db44 at 00:53 (AM) Tuesday ]

xlc -c        -DO_EXLOCK=F_WRLCK -DO_SHLOCK=F_RDLCK -D_ALL_SOURCE -DAIX32
  -I. -I/u1/devobj/sb/nb_rios/src/dce/utils/db44 \
  -I/u1/devobj/sb/nb_rios/src/dce/utils/db44 \
  -I/project/dce/build/dce1.1-snap/src/dce/utils/db44  -I. \
  -I/u1/devobj/sb/nb_rios/src/dce/utils/db44 -I \
  /u1/devobj/sb/nb_rios/src/dce/utils/db44 \
  -I/project/dce/build/dce1.1-snap/src/dce/utils/db44 \
  -I/u1/devobj/sb/nb_rios/export/rios/usr/include \
  -I/u1/devobj/sb/nb_rios/export/rios/usr/include \
  -I/project/dce/build/dce1.1-snap/export/rios/usr/include \
  /project/dce/build/dce1.1-snap/src/dce/utils/db44/bt_open.c \
"/project/dce/build/dce1.1-snap/src/dce/utils/db44/compat.h", line 148.0: \
  1506-2 13 (S) Macro name BYTE_ORDER cannot be redefined.
*** Error code 1

[ /dce/utils/svc at 00:59 (AM) Tuesday ]

xlc           -L/u1/devobj/sb/nb_rios/export/rios/usr/lib
-L/project/dce/bui
ld/dce1.1-snap\
/export/rios/usr/lib  -o dumplog.X dumplog.o  -lsvc
0706-317 ERROR: Unresolved or undefined symbols detected:
                 Symbols in error (followed by references) are
                 dumped to the load map.
                 The -bloadmap:<filename> option will create a load map.
....
.cma_fread
.cma_ftell
.cma_rewind
*** Error code 8

[ /dce/utils/acldb at 22:25 (PM) Monday ]

make: don't know how to make dcelibmsg.h (continuing)

[ /dce/utils/dcecf at 22:25 (PM) Monday ]

(cd .; tar cfh - libdceutils.a) |  (cd
/u1/devobj/sb/nb_rios/export/rios/usr/lib
; tar xf -)
`build_all' not remade because of errors.
*** Error code 1
`build_all' not remade because of errors.
*** Error code 1

[ /dce/utils/dcecf at 00:54 (AM) Tuesday ]

makepath dcecf/. && cd dcecf &&  exec make MAKEFILE_PASS=THIRD
export_all
Export all targets =
`export_all_EXPLIB' not remade because of errors.
*** Error code 1

[1/27/94 public]
Added new libraries (libdceutils.a, libacldb.a, libdb44.a) to libdce/Makefile.
Fixed ./libdce/RIOS/machdep.mk to include the new libraries.
Removed dependency on dcelibmsg.h from dce/utils/acldb/Makefile.

[2/1/94 public]
Also changed utils/db44/compat.h to trust dce.h to set BYTE_ORDER.

Fixes above worked. CR closed.



CR Number                     : 9814
Defect or Enhancement?        : def
CR in Code, Doc, or Test?     : code
Inter-dependent CRs           : 9751
Project Name                  : dce
H/W Ref Platform              : rs6000,hppa
S/W Ref Platform              : aix,hpux
Component Name                : utils
Subcomponent Name             : dce/utils
Short Description             : dir struct breaks library libdce
Reported Date                 : 1/25/94
Found in Baseline             : 1.1
Found Date                    : 1/25/94
Severity                      : A
Priority                      : 0
Status                        : closed
Duplicate Of                  : 
Fix By Baseline               : 1.1
Fixed In Baseline             : 1.1b2
Affected File(s)              : libdce/Makefile
Sensitivity                   : public

[1/25/94 public]

Submission of fixes involving a change to dce/utils and the libdce
Makefile broke the build of the libdce library.  The ordering of
directories under dce/utils causes the libdce Makefile to believe
it has already produced the library when it hasn't. 

Instead of putting sources directly under "dce/utils" they should
go in a subdirectory, eg, "dce/utils/lib" and $SLIST in libdce's
Makefile should be changed accordingly.

[1/27/94 public]
As part of my reorg of ./dce/utils Makefiles (CR 9751), I moved the files
from ./dce/utils into ./dce/utils/misc.  Also changed ./libdce/Makefile
accordingly.
Waiting for clean nightly build to close this.

[2/1/94 public]
Fix above worked. CR closed.



CR Number                     : 9812
Defect or Enhancement?        : def
CR in Code, Doc, or Test?     : code
Inter-dependent CRs           : 
Project Name                  : dce
H/W Ref Platform              : all
S/W Ref Platform              : all
Component Name                : utils
Subcomponent Name             : 
Short Description             : duplicate entries on INCLUDES
Reported Date                 : 1/25/94
Found in Baseline             : 1.1
Found Date                    : 1/25/94
Severity                      : B
Priority                      : 0
Status                        : closed
Duplicate Of                  : 
Fix By Baseline               : 1.1
Fixed In Baseline             : 1.1b2
Affected File(s)              : src/dce/utils/acldb/Makefile
Sensitivity                   : public

[1/25/94 public]
The INCLUDES line in utils/acldb/Makefile generates duplicate entries:

INCLUDES                = ${IDLFILES} ${IDLFILES:S/.idl/.h/g} \
                        database.h dbif.h dceacl.idl dceacl.h aclif.h

Which resolves to:

INCLUDES = database.idl dceacl.idl rdaclif.idl database.h dceacl.h
rdaclif.h  database.h dbif.h dceacl.idl dceacl.h aclif.h

This results in two problems:
1.  files database.h, dceacl.idl, and dceacl.h are exported twice.
2.  For folks who are building with EXPORT_USING_SYMLINKS (SNI/Munich) this
causes build failures.  (ln -s tries to create the same link twice, returns
an error code, 'build' catches it and dies.) 

The solution is to remove duplications on the INCLUDES line.

[1/27/94 public]
Changed Makefile as mentioned above.  Waiting for a clean nightly build
to close this.

[2/1/94 public]
Fix above worked. CR closed.



CR Number                     : 9811
Defect or Enhancement?        : def
CR in Code, Doc, or Test?     : code
Inter-dependent CRs           : 
Project Name                  : dce
H/W Ref Platform              : mx300
S/W Ref Platform              : sinix
Component Name                : utils
Subcomponent Name             : svc
Short Description             : warning of SINIC C-compiler
Reported Date                 : 1/25/94
Found in Baseline             : 1.1
Found Date                    : 1/25/94
Severity                      : B
Priority                      : 2
Status                        : closed
Duplicate Of                  : 
Fix By Baseline               : 1.1
Fixed In Baseline             : 1.1b11
Affected File(s)              : NULL
Sensitivity                   : public

[1/25/94 public]
I emailed a list of the SINIX compiler warnings to Rich Salz.
He told me, that he feels responsible for them.

[7/15/94 public]
The offending files have been removed as part of other work.
Closing.



CR Number                     : 9767
Defect or Enhancement?        : enh
CR in Code, Doc, or Test?     : doc
Inter-dependent CRs           : 9668
Project Name                  : dce
H/W Ref Platform              : all
S/W Ref Platform              : all
Component Name                : utils
Subcomponent Name             : app_ref
Short Description             : need to document new dce_cf*
routine for code set registry
Reported Date                 : 1/18/94
Found in Baseline             : 1.1
Found Date                    : 1/18/94
Severity                      : B
Priority                      : 2
Status                        : closed
Duplicate Of                  : 
Fix By Baseline               : 1.1
Fixed In Baseline             : 1.1doc
Affected File(s)              : 
app_ref/man3dce/dce_cf_get_csrgy.3dce, intro.3dce
Sensitivity                   : public

[1/18/94 public]

The routine dce_cf_get_csrgy_filename() needs to be documented
in the Application Development Reference for DCE 1.1. This fact
was initially reported in CR9668. I opened a new CR for this
man page because I am responsible for documenting the code
set registry, and have also been assigned to document this
routine (since it's related to the code set registry).

If there needs to be any guide information about this routine
in the dced documentation, I'll coordinate the work with John.

[2/17/94 public]

Submitted new dce_cf_get_csrgy_filename.3dce man page to
dce 1.1 doc source tree. Also added information about
this routine to the intro(3dce) page. Marking this
CR verified (by R. Salz) for now.

[09/19/94  public]
Closed bug.  Note that the intro information is now in
the file

app_ref/man3dce/dce_cf_intro.3dce



CR Number                     : 9762
Defect or Enhancement?        : def
CR in Code, Doc, or Test?     : code
Inter-dependent CRs           : 
Project Name                  : dce
H/W Ref Platform              : all
S/W Ref Platform              : all
Component Name                : utils
Subcomponent Name             : cln
Short Description             : dce.h needs re-arranging
Reported Date                 : 1/17/94
Found in Baseline             : 1.1
Found Date                    : 1/17/94
Severity                      : C
Priority                      : 2
Status                        : closed
Duplicate Of                  : 
Fix By Baseline               : 1.1
Fixed In Baseline             : 1.1
Affected File(s)              : dce/<machine>/dce.h
Sensitivity                   : public

[1/17/94 public]

The platform specific dce.h file needs to be re-arranged. Specifically, 
all macro definitions in dce.h should appear prior to the inclusion of 
any other header file, since these files may themselves require definitions
of these macros (e.g. _DCE_PROTOTYPE_). 

Specifically, the code that includes <dce/nbase.h> for typedef'ing DCE 
wide data types should be moved immediately prior to the inclusion of 
<dce/dce_svc.h>

[3/18/94 public]
This has been fixed for a while now, so it might as well be closed.

[3/30/94 public]
Charlie's last comment says it all.



CR Number                     : 9751
Defect or Enhancement?        : def
CR in Code, Doc, or Test?     : code
Inter-dependent CRs           : 9814
Project Name                  : dce
H/W Ref Platform              : all
S/W Ref Platform              : all
Component Name                : utils
Subcomponent Name             : src/dce/utils/dcecf
Short Description             : can't find dce/database.h
Reported Date                 : 1/17/94
Found in Baseline             : 1.1
Found Date                    : 1/17/94
Severity                      : A
Priority                      : 0
Status                        : closed
Duplicate Of                  : 
Fix By Baseline               : 1.1
Fixed In Baseline             : 1.1b2
Affected File(s)              : src/dce/utils/dceaclimpl.c
Sensitivity                   : public

[1/17/94 public]

On HPUX and AT486 the errors are:

[ /dce/utils/dcecf ]

c89 -c    -D_SHARED_LIBRARIES  +z   -D__hppa -Dhp9000s800 -Dhp9000s700 \
 -D__hp9000s800 -D__hp9000s700 -DHPUX -D__hpux -Dunix +DA1.0 -D_HPUX_SOURCE \
 -I. -I/u3/devobj/sb/nb_ux/src/dce/utils \
 -I/project/dce/build/dce1.1-snap/src/dce/utils  \
 -I/u3/devobj/sb/nb_ux/export/hp800/usr/include \
 -I/project/dce/build/dce1.1-snap/export/hp800/usr/include \
 /project/dce/build/dce1.1-snap/src/dce/utils/dceaclimpl.c
dbif.h: 23: Unable to find include file 'dce/database.h'.
param.h: 391: warning- Redefinition of macro MIN.
param.h: 392: warning- Redefinition of macro MAX.

On the RIOS the errors occur when the IDL compiler tries to compile the
same file:

[ /dce/utils/dcecf ]

xlc -c        -D_ALL_SOURCE -DAIX32   -I. \
 -I/u1/devobj/sb/nb_rios/src/dce/utils \
 -I/project/dce/build/dce1.1-snap/src/dce/utils \
 -I/u1/devobj/sb/nb_rios/export/rios/usr/include \
 -I/project/dce/build/dce1.1-snap/export/rios/usr/include \
 /project/dce/build/dce1.1-snap/src/dce/utils/dceaclimpl.c
Processing include file
/u1/devobj/sb/nb_rios/export/rios/usr/include/dce/dbif.h
    1501-106: (S) Include file dce/database.h not found. -046 (S) Syntax error.
"/project/dce/build/dce1.1-snap/src/dce/utils/dceaclimpl.c", line 1021.5: \
 1506-081 (S) Discarding previously defined typedef identifier: uuid_t

Etc.

[01/17/94 public]
John is revamping the directory structure and will be fixing this today.

[1/27/94 public]
I re-organized the Makefiles under ./dce/utils.
There are these subdirs under utils: svc, acldb, db44, dcecf, misc.
I had to move all the source files from ./dce/utils into "misc", since
ode does not let you have files and subdirs in a directory.
Waiting for clean nightly build to close this.

[2/1/94 public]
Fix above worked.  (mandatory closing note for OT)



CR Number                     : 9742
Defect or Enhancement?        : def
CR in Code, Doc, or Test?     : code
Inter-dependent CRs           : 
Project Name                  : dce
H/W Ref Platform              : all
S/W Ref Platform              : all
Component Name                : utils
Subcomponent Name             : acl library
Short Description             : dce_rdacl_get_manager_types returns error on first bad acl manager type match.
Reported Date                 : 1/14/94
Found in Baseline             : 1.1
Found Date                    : 1/14/94
Severity                      : B
Priority                      : 1
Status                        : closed
Duplicate Of                  : 
Fix By Baseline               : 1.1
Fixed In Baseline             : 1.1
Affected File(s)              : dceaclimpl.c
Sensitivity                   : public

[1/14/94 public]

dce_rdacl_get_manager_types() should do the following:

for all registered manager types{
	call the registered resolver
        if this returns ok then{
		if registered mgr_type_uuid == uuid extracted from acl then{
			return the manager_type_uuid
		} 
        }
}
return failure

What it currently seems to do is to return a failure if there is no match
of the uuid types.  This won't work because registerd manager types may
support the same resolve routine so you can successfully resolve to an
acl with a different manager type. It should continue on through the
list of registered types and only fail if it does not get a match by
the end.

I would also note that we should probably specify some error code that 
a resolver should return when it can't make a match.

[1/19/94 public]
I changed both dce_rdacl_get_manager_types() and
dce_rdacl_get_mgr_types_semantics() to do as Steve outlined above
(the latter also setting the [out] parameter posix_semantics).
Steve tested this with a sample application.



CR Number                     : 9740
Defect or Enhancement?        : def
CR in Code, Doc, or Test?     : code
Inter-dependent CRs           : 
Project Name                  : dce
H/W Ref Platform              : all
S/W Ref Platform              : all
Component Name                : utils
Subcomponent Name             : dce_priv_proc.h
Short Description             : export dce_priv_proc.h
Reported Date                 : 1/14/94
Found in Baseline             : 1.1
Found Date                    : 1/14/94
Severity                      : B
Priority                      : 2
Status                        : closed
Duplicate Of                  : 
Fix By Baseline               : 1.1
Fixed In Baseline             : 1.1
Affected File(s)              : dce/utils/Makefile
Sensitivity                   : public

[1/14/94 public]
dce_priv_proc.h needs to be exported to /usr/include/dce.

[1/17/94 public]
It was missing from the Makefile's INCLUDES list.  It's there now.



CR Number                     : 9738
Defect or Enhancement?        : def
CR in Code, Doc, or Test?     : code
Inter-dependent CRs           : 
Project Name                  : dce
H/W Ref Platform              : hppa
S/W Ref Platform              : hpux
Component Name                : utils
Subcomponent Name             : dce.h
Short Description             : Change to new ENDIAN handling
Reported Date                 : 1/13/94
Found in Baseline             : 1.1
Found Date                    : 1/13/94
Severity                      : A
Priority                      : 2
Status                        : closed
Duplicate Of                  : 
Fix By Baseline               : 1.1
Fixed In Baseline             : 1.1
Affected File(s)              : dce/{AT386,HP800,PMAX,SVR4}/dce.h
Sensitivity                   : public

[1/13/94 public]
I think this is supposed to be utils, and eventually it will cause code not
to compile, hence the sev A.

All the versions of dce.h should be updated with the new BYTE_ORDER
handling mechanisms (BSD based).  The RIOS one has been the rest need to
be.

[1/18/94 public]
The AT385, HP800, PMAX and SVR4 dce.h files have been changed to either 
include an appropriate machine dependent file that defines BIG_ENDIAN,
LITTLE_ENDIAN and BYTE_ORDER, or these defines were down in dce.h itself.
All platforms have completed a nightly build cycle with these changes.



CR Number                     : 9731
Defect or Enhancement?        : def
CR in Code, Doc, or Test?     : code
Inter-dependent CRs           : 
Project Name                  : dce
H/W Ref Platform              : all
S/W Ref Platform              : all
Component Name                : utils
Subcomponent Name             : src/dce/utils/dcecf
Short Description             : don't know how to make dceacl.h
Reported Date                 : 1/12/94
Found in Baseline             : 1.1
Found Date                    : 1/12/94
Severity                      : A
Priority                      : 0
Status                        : closed
Duplicate Of                  : 
Fix By Baseline               : 1.1
Fixed In Baseline             : 1.1
Affected File(s)              : dceacl.h
Sensitivity                   : public

[1/12/94 public]

"src/dce/utils/dcecf" complains twice it doesn't know how to make
"dceacl.h", eg: 

[ /dce/utils/dcecf at 10:34 (AM) Wednesday ]
makepath dcecf/. && cd dcecf &&  exec make MAKEFILE_PASS=THIRD
build_all
make: don't know how to make dceacl.h (continuing)
makepath dce/. && cd dce &&  exec make MAKEFILE_PASS=THIRD     build_all

[01/14/94 public]
Commeneted out rest of DB lib for now.

[2/8/94 public]
I reorganized the directoried under ./dce/utils.  All the db, acl, dcecf
and svc stuff gets installed properly now.



CR Number                     : 9705
Defect or Enhancement?        : def
CR in Code, Doc, or Test?     : code
Inter-dependent CRs           : 
Project Name                  : dce
H/W Ref Platform              : rs6000
S/W Ref Platform              : aix
Component Name                : utils
Subcomponent Name             : 
Short Description             : dce.h redefines BIG_ENDIAN
Reported Date                 : 1/10/94
Found in Baseline             : 1.1
Found Date                    : 1/10/94
Severity                      : A
Priority                      : 0
Status                        : closed
Duplicate Of                  : 
Fix By Baseline               : 1.1
Fixed In Baseline             : 1.1
Affected File(s)              : dce/{AT386,HP800,PMAX,SVR4}/dce.h
Sensitivity                   : public

[1/10/94 public]
On the RIOS, BIG_ENDIAN is defined in both dce.h and
/usr/include/sys/machine.h . The definition in dce.h
should be removed or checked for duplicate inclusion.

[1/10/94 public]
dce.h should just include sys/machine.h on the RIOS.
Does sys/machine.h do duplicate inclusion checking?

[1/10/94 public]
/usr/include/sys/machine.h checks to see if the whole file has been
included (_H_MACHINE). The definition of BIG_ENDIAN is not checked.

[1/10/94 public]
Be careful about the values of BIG_ENDIAN and LITTLE_ENDIAN (and PDP_ENDIAN,
as a matter of fact!).  AIX's /usr/include/sys/machine.h set values for
ALL of these.  dce.h sets ONE of them (boolean).  (The comments in dce.h
mention "#define BIG_ENDIAN 4321" and "#define LITTLE_ENDIAN 1234" even tho
what is actually set is bool.)

In RIOS and OSF1, BYTE_ORDER is #defined to one of the *_ENDIAN's.  If you
want to know the byte order of the machine, you look at BYTE_ORDER
(according to the vendor include files).

The Berkeley database code wants these things set to values.  I had to play
games with #define and #undef to get these to be 1234 and 4321.  It also
wants BYTE_ORDER set to the right thing.

In short, the places in DCE code that use BIG_ENDIAN and LITTLE_ENDIAN
should be checked, since bother may be set.

[1/27/94 public]
All the dce/PLATFORM/dce.h files were changed to either include a local OS
header file the defines BIG_ENDIAN, LITTLE_ENDIAN and BYTE_ORDER, or
defined them locally in the file. This has gone through several cycles of
builds without error.



CR Number                     : 9699
Defect or Enhancement?        : def
CR in Code, Doc, or Test?     : code
Inter-dependent CRs           : 9823
Project Name                  : dce
H/W Ref Platform              : all
S/W Ref Platform              : all
Component Name                : utils
Subcomponent Name             : svc
Short Description             : svc/dumplog does not build
Reported Date                 : 1/6/94
Found in Baseline             : 1.1
Found Date                    : 1/6/94
Severity                      : B
Priority                      : 1
Status                        : closed
Duplicate Of                  : 
Fix By Baseline               : 1.1
Fixed In Baseline             : 1.1b2
Affected File(s)              : svc/Makefile
Sensitivity                   : public

[1/6/94 public]
svc/dumplog does not build with the svc/Makefile on at386 and hp800.
The error is: make: don't know how to make dumplog. Stop
On rios, I can build with errors and if I change dumplog_LIBS = -ldce,
it builds successful.  This does not work on at386 & hp800 platform.

[1/6/94 public]

Changed component to utils and assigned to Rich Salz, svc owner.

[1/6/94 public]
Further clues: the rios will at least attempt to build dumplog due to 
NO_SHARED_LIBRARIES=1, while the at386 and hp800 does not set 
NO_SHARED_LIBRARIES.

[3/9/94 public]
The problem outlined originally is fixed - svc/Makefile builds dumplog on
at386 and hp800, though it's temporarily commented out for CR 9823).  9823
describes a problem with it not building on the rios, so this issue won't
be lost.



CR Number                     : 9697
Defect or Enhancement?        : enh
CR in Code, Doc, or Test?     : code
Inter-dependent CRs           : 
Project Name                  : dce
H/W Ref Platform              : all
S/W Ref Platform              : all
Component Name                : utils
Subcomponent Name             : sams
Short Description             : add collections and conditionals
Reported Date                 : 1/6/94
Found in Baseline             : 1.1
Found Date                    : 1/6/94
Severity                      : B
Priority                      : 1
Status                        : closed
Duplicate Of                  : 
Fix By Baseline               : 1.1
Fixed In Baseline             : 1.1b6
Affected File(s)              : src/tools/sams/*
Sensitivity                   : public

[1/6/94 public]

From some email I sent for internal review around OSF...

Here's a typical example where collections help.  dced is divided into
several areas.  We'd like all messages for a single area to be together.
We also need to leave space so that we can add more messages to the area
and not break compatability.  Using XPG/4 we can use sets.  DCE (and
therefore sams) doesn't support sets.  So, to do this right now people
have to do things like:
	dced_c_km_ok
	dced_c_km_failed
	dced_c_km_not_found
	dced_c_km_pad01
	...
	dced_c_km_pad19
	dced_c_sv_ok
	dced_c_sv_start
	dced_c_sv_pad01
	...

This is what we currently have to do.  When I add a new "km" message, I
have to insert it before pad01 and go down and delete pad19.  Sandra's
guideline of "only add messages to the end" does not strictly apply here,
since we are not limiting ourselves to messages, but are also talking
about error codes which have more structure then random text.  It is of
great help to a developer to be able to look at a number and say "oh, it's
in the 200's:  Kerberos problem."

By using a collection I can do
	start collection 1
	dced_c_km_ok
	dced_c_km_failed
	dced_c_km_not_found
	start collection 2
	dced_c_sv_ok
	dced_c_sv_start
and so on.  Collections must be in strictly increasing order, although
holes are allowed.  That is, collection 4 must be after collection 2, but
there need not be a collection 3.  The default size of a collection is
100; you can change this by putting "collection size ####" in the file
header.  If you overrun numbers (e.g., dced_c_km_not_found gets message
number 202) it's an error.

One of the goals was to have the exact same text used for both
documentation and code(messaging):  the SAMS input should go right to
typesetting untouched by human hands:  changes that show through in the
manual should be made to the sams input, not to one of the sams output
files.

To explain the problem a bit more, the application program needs to see
	Can't open input file %s for reading
	Processed %d lines
	Yes, a<%d
In a book you'd probably want to see something like
	Can't open input file \fBfilename\fP for reading
	Processed \fBcount\fP lines
	Yes, a<\fB%d\fP
I will extend the input syntax (for SAMS "text" fields) like this:
	Can't open input file <%s|filename> for reading
	Processed <%d|count> lines.
	Yes, a\<<%d|number>.

[03/10/94 public]
Submitted.

[4/11/94 public]
Fix works.  Closed.



CR Number                     : 9696
Defect or Enhancement?        : def
CR in Code, Doc, or Test?     : code
Inter-dependent CRs           : 
Project Name                  : dce
H/W Ref Platform              : all
S/W Ref Platform              : all
Component Name                : utils
Subcomponent Name             : dcecf
Short Description             : dce_cf_get_csrgy_filename needs to be written
Reported Date                 : 1/6/94
Found in Baseline             : 1.1
Found Date                    : 1/6/94
Severity                      : B
Priority                      : 1
Status                        : closed
Duplicate Of                  : 
Fix By Baseline               : 1.1
Fixed In Baseline             : 1.1
Affected File(s)              : src/dce/utils/dcecf/dce_cf.c
Sensitivity                   : public

[1/6/94 public]
The RPC I18N work needs to be able to find the codeset registry file,
so I'll add the following routine to the dce_cf_xxx API:
	void dce_cf_get_csrgy_filename(
	    char **filename,
	    error_status_t *st
	);

[01/10/94 public]
Written.  Submitted.  Closed.



CR Number                     : 9692
Defect or Enhancement?        : def
CR in Code, Doc, or Test?     : code
Inter-dependent CRs           : 
Project Name                  : dce
H/W Ref Platform              : all
S/W Ref Platform              : all
Component Name                : utils
Subcomponent Name             : dcecf
Short Description             : dcecfg.cat is useless
Reported Date                 : 1/6/94
Found in Baseline             : 1.1
Found Date                    : 1/6/94
Severity                      : C
Priority                      : 2
Status                        : closed
Duplicate Of                  : 
Fix By Baseline               : 1.1
Fixed In Baseline             : 1.1
Affected File(s)              : Makefile
Sensitivity                   : public

[1/6/94 public]
There is a message catalog, dcecfg.cat, that is created as part of
the dce_cf_xxx build.  That catalog is useless.  The status codes
that are returned by the routines are 0xFF01, etc.  dce_error_inq_text
cannot retrieve such error codes.  We should remove the catalog,
and change dce_config to not install it.

[01/10/94 public]
Submitted.  No dce_config changes required since it just does "cp *"
No way to test, so just closing this.



CR Number                     : 9690
Defect or Enhancement?        : def
CR in Code, Doc, or Test?     : code
Inter-dependent CRs           : 
Project Name                  : dce
H/W Ref Platform              : all
S/W Ref Platform              : all
Component Name                : utils
Subcomponent Name             : svc/svcremote.h
Short Description             : prototype is wrong
Reported Date                 : 1/6/94
Found in Baseline             : 1.1
Found Date                    : 1/6/94
Severity                      : A
Priority                      : 2
Status                        : closed
Duplicate Of                  : 
Fix By Baseline               : 1.1
Fixed In Baseline             : 1.1
Affected File(s)              : dce/utils/svc/svcremote.h
Sensitivity                   : public

[1/6/94 public]
The dce_svc_inq_routings function changed and the related prototype for
dce_svc_routings in svcremote.h needs to be updated to have the new
parameter.  This will cause build failures for people implementing SVC
code, but nobody is required to do that yet hence the A2 rating.

[01/10/94 public]
Fixed the prototype in the header file.  Closed.



CR Number                     : 9670
Defect or Enhancement?        : def
CR in Code, Doc, or Test?     : code
Inter-dependent CRs           : 9663
Project Name                  : dce
H/W Ref Platform              : all
S/W Ref Platform              : all
Component Name                : utils
Subcomponent Name             : src/config, src/dce/utils/dcecf
Short Description             : moved sources broke libdce
Reported Date                 : 12/31/93
Found in Baseline             : 1.1
Found Date                    : 12/31/93
Severity                      : A
Priority                      : 0
Status                        : closed
Duplicate Of                  : 
Fix By Baseline               : 1.1
Fixed In Baseline             : 1.1
Affected File(s)              : src/Makefile, etc.
Sensitivity                   : public

[12/31/93 public]

Rich Salz moved a handful of C files from "src/config" to
"src/dce/utils/dcecf" which broke "libdce".

[01/03/94 public]
(This is a build issue, not a configuring issue; changed comp field.)
I fixed the makefiles and built libdce.  I'm now doing a full DCE build
but at least this defect can be closed; the general problem is in 9663.
Marked fix; will close after nightly-build verification.

[01/04/94 public]

The above fix fixes half but not all of the breakage: libdce still fails
to build.

[01/10/94 public]
(Oops -- it's not a build issue, its a utils source broke the build issue).
Fix (finally) submitted, build works, closed.



CR Number                     : 9668
Defect or Enhancement?        : def
CR in Code, Doc, or Test?     : code
Inter-dependent CRs           : 
Project Name                  : dce
H/W Ref Platform              : all
S/W Ref Platform              : all
Component Name                : utils
Subcomponent Name             : dce_cf_xxx
Short Description             : New routine dce_cf_dced_entry_from_host
Reported Date                 : 12/29/93
Found in Baseline             : 1.1
Found Date                    : 12/29/93
Severity                      : B
Priority                      : 2
Status                        : closed
Duplicate Of                  : 
Fix By Baseline               : 1.1
Fixed In Baseline             : 1.1
Affected File(s)              : src/utils/dcecf/dce_cf.c
Sensitivity                   : public

[12/29/93 public]
There is a new routine that gets a name leading to the dced on a host.
This name can be used both to name objects (e.g., when acl_edit'ing them)
maintained by dced, as well as to bind to dced itself.  When used in the
latter case, this IS just like dce_cf_binding_entry_from_host.  The routine:

    /*
    **  Return the dced binding name for a DCE hostname.
    */
    void
    dce_cf_dced_entry_from_host(
	char                *hostname,
	char                **value,
	error_status_t      *status
    )
The "value" gets filled in with malloc'd data.

[01/10/94 public]
There's another new routine, too:
    /*
    **  Return an allocated copy of the local codeset registry file.
    */
    void
    dce_cf_get_csrgy_filename(
	char                **filename,
	error_status_t      *status
    );

[1/18/94 public]

Assigned this CR to John Shirley (dced writer).
Created new CR for dce_cf_get_csrgy_filename(), which
I'm responsible for documenting.

[1/19/94 public]

I erroneously changed this CR from "code" to "doc". It should
remain a code CR so that engineering can track it. I will open
a new CR and make it a doc CR associated with this code CR,
and assign the new CR to jshirley.

[01/20/94 public]
Since Lisa opened new doc defects (the right thing; I should have done that)
I can now close this.



CR Number                     : 9665
Defect or Enhancement?        : def
CR in Code, Doc, or Test?     : code
Inter-dependent CRs           : 
Project Name                  : dce
H/W Ref Platform              : all
S/W Ref Platform              : all
Component Name                : utils
Subcomponent Name             : dce_cf
Short Description             : Various bugs in dce_cf
Reported Date                 : 12/29/93
Found in Baseline             : 1.1
Found Date                    : 12/29/93
Severity                      : B
Priority                      : 2
Status                        : closed
Duplicate Of                  : 
Fix By Baseline               : 1.1
Fixed In Baseline             : 1.1
Affected File(s)              : src/dce/utils/dcecf
Sensitivity                   : public

[12/29/93 public]
The dce_cf_XXX routines have some bugs:
    They're dependent on the order of lines in the dce_cf.db file.
    The filename is hardwired, and doesn't use dcelocal_path.
    The code is overly complex -- a rewrite can save 50%
    It doesn't downcase its results as the manpage says
    We need to add a new routine to get name for a new dced binding anyway

[01/06/94 public]
The code has been rewritten and smoketests have passed.
Closed.



CR Number                     : 9663
Defect or Enhancement?        : def
CR in Code, Doc, or Test?     : code
Inter-dependent CRs           : 
Project Name                  : dce
H/W Ref Platform              : all
S/W Ref Platform              : all
Component Name                : utils
Subcomponent Name             : dce_cf_XXX
Short Description             : Move C code to new directory
Reported Date                 : 12/29/93
Found in Baseline             : 1.1
Found Date                    : 12/29/93
Severity                      : C
Priority                      : 2
Status                        : closed
Duplicate Of                  : 
Fix By Baseline               : 1.1
Fixed In Baseline             : 1.1
Affected File(s)              : dce/utils/dcecf
Sensitivity                   : public

[12/29/93 public]
The dce_cf_XXX routines currently in the src/config directory should be
moved to src/dce/utils/dcecf.  The utility routines in src/config/utils,
getcellname and getip, will not be moved.

[01/10/94 public]
Moved, built, and baselevel made.  Closed.



CR Number                     : 9658
Defect or Enhancement?        : def
CR in Code, Doc, or Test?     : code
Inter-dependent CRs           : 
Project Name                  : dce
H/W Ref Platform              : hppa
S/W Ref Platform              : hpux
Component Name                : utils
Subcomponent Name             : src/dce/utils/svc
Short Description             : don't know how to make ../config/dce_cf_db.o
Reported Date                 : 12/27/93
Found in Baseline             : 1.1
Found Date                    : 12/27/93
Severity                      : A
Priority                      : 0
Status                        : closed
Duplicate Of                  : 
Fix By Baseline               : 1.1
Fixed In Baseline             : 1.1
Affected File(s)              : Makefile
Sensitivity                   : public

[12/27/93 public]

In "src/dce/utils/svc" the Makefile complains that it [sic]:

	don't know how to make ../config/dce_cf_db.o (continuing)

"dce_cf_db.c" is in "src/config/".

[12/28/93 public]

This OSF RE build environment glitch disappeared in the 12/27/93
overnight build as mysteriously as it had appeared over the weekend.



CR Number                     : 8883
Defect or Enhancement?        : def
CR in Code, Doc, or Test?     : code
Inter-dependent CRs           : 
Project Name                  : dce
H/W Ref Platform              : all
S/W Ref Platform              : all
Component Name                : utils
Subcomponent Name             : svc
Short Description             : return values not checked for pthread_mutex* calls
Reported Date                 : 9/30/93
Found in Baseline             : 1.0.3
Found Date                    : 9/30/93
Severity                      : C
Priority                      : 3
Status                        : closed
Duplicate Of                  : 
Fix By Baseline               : 1.1
Fixed In Baseline             : 1.1b6
Affected File(s)              : dce/utils/svc/{svcimpl.h,svcpthread.c,msgimpl.h,msgpthread.c}
Sensitivity                   : public

[9/30/93 public]
In src/svc/*.c the return values of the pthread_mutex*() calls
are never checked.  They should be.

[03/28/94 public]
I think this one got lost...
Assigned to utils component and Rich Salz.

[03/30/94 public]
Yeah it got lost.  Since most of the functions do not have a return value,
I changed the code so that in the case of most pthread_xxx errors, we
loop and retry.  From reading the manpages of the functions that I call,
I think all the errors are in the "can't happen" category, but at least
know you'll see a busy-loop if someone else romps over my allocated memory.
Bypassing fixed, marking this right as closed.



CR Number                     : 8443
Defect or Enhancement?        : enh
CR in Code, Doc, or Test?     : doc
Inter-dependent CRs           : 11578
Project Name                  : dce
H/W Ref Platform              : all
S/W Ref Platform              : all
Component Name                : utils
Subcomponent Name             : app_ref
Short Description             : Move dce_error_inq_text.3rpc
Reported Date                 : 8/12/93
Found in Baseline             : 1.0.2
Found Date                    : 8/12/93
Severity                      : C
Priority                      : 2
Status                        : closed
Duplicate Of                  : 
Fix By Baseline               : 1.1
Fixed In Baseline             : 1.1doc
Affected File(s)              : app_ref/man3rpc/dce_error_inq_text.3rpc
Sensitivity                   : public

[8/12/93 public]
The dce_error_inq_text.3rpc reference page in the RPC section of
the Application Development Reference should be moved into the
DCE section of the same manual.  The source for this reference page
should thus be moved from the man3rpc subdirectory to the man3dce
subdirectory so it can be with the rest of the dce_* routines.
The Description file should also be updated to reflect this change.

[3/29/94 public]

Reassigned this CR to myself from Julie Buckler.

[4/11/94 public]

Made the fix in the intro.3rpc man page.

[8/15/94 public]

Reassigned this CR to Julie Buckler.

[8/15/94 public]

The nature of this CR has changed because of 11578,
which asks for changes to be made to the man page,
rather than a simple file move, which this CR requests.
I am reassigning this CR from Julie to Willie Williams,
who is responsible for making the changes to the man page
required by 11578.

[8/24/93 public ]

s/willi/willie in resp engr field.

[09/30/94 public]
Reassigned to myself.

[10/06/94 public]
Fixed and verified by me.  I defuncted the file
dce_error_inq_text.3rpc, since the new version, dce_error_inq_text.3dce
has already been written and is in place.  I checked the
Description file to make sure this change would not cause
any build problems.

[10/20/94 public]
Closed bug.



CR Number                     : 8440
Defect or Enhancement?        : enh
CR in Code, Doc, or Test?     : doc
Inter-dependent CRs           : 9926
Project Name                  : dce
H/W Ref Platform              : all
S/W Ref Platform              : all
Component Name                : utils
Subcomponent Name             : svc
Short Description             : Add new ref pages
Reported Date                 : 8/12/93
Found in Baseline             : 1.0.2
Found Date                    : 8/12/93
Severity                      : B
Priority                      : 1
Status                        : closed
Duplicate Of                  : 
Fix By Baseline               : 1.1
Fixed In Baseline             : 1.1doc
Affected File(s)              : app_ref/man3dce
Sensitivity                   : public

[8/12/93 public]
Need to create the following new i18n-related reference pages 
in the Application Development Reference:

	man3dce/dce_msg_get_msg.3dce (catch-all for msg.3dce routines)
	man3dce/dce_printf.3dce (catch-all for printf.3dce routines)

I have just added source (from Rich Salz) for these two reference pages
to the doc tree, but more work needs to be done:

	1) These two reference pages need to be split up and rewritten
	   such that each routine is documented on a separate ref page.

	2) Sections describing Input Parameters and Output Parameters
	   match the rest of our DCE reference doc.  Sections for
	   Return Values, Files, and Related Information should
	   also be added where appropriate.

	3) The existing intro.3dce reference page needs to be rewritten
	   to reflect the many i18n and serviceability routines
	   added to this section.  

	4) These new reference pages may need to be expanded,
	   clarified or modified as DCE 1.1 work proceeds.

[3/29/94 public]

Reassigned this CR to Doug Weir (DCE serviceability and messaging
writer).

[3/29/94 public]

Changed component from cfg to utils and subcomponent to svc.

[3/30/94 public]

Reassigned this CR to Willie Williams, who is now
responsible for the serviceability and messaging
man pages.

[09/30/94 public]
Reassigned to writer Bill Hileman.

[10/7/94 public]

Regarding: dce_msg_get_msg.3dce

The individual dce_msg routines are described in 
the following separate man pages:

	dce_msg_cat_close.3dce
	dce_msg_cat_get_msg.3dce
	dce_msg_cat_open.3dce
	dce_msg_define_msg_table.3dce
	dce_msg_get.3dce
	dce_msg_get_cat_msg.3dce
	dce_msg_get_default_msg.3dce
	dce_msg_get_msg.3dce
	dce_msg_translate_table.3dce

A separate dce_msg_intro man page will also be produced.

Regarding: dce_printf.3dce

Both John Bowe and Rich Salz want to document all of the printf 
routines in this one man page.   This man page covers the 
following routines:

	dce_printf
	dce_fprintf
	dce_sprintf
	dce_pgm_printf
	dce_pgm_fprintf
	dce_pgm_sprintf

A separate man page (dce_pgm_printf.3dce) duplicates this 
man page by means of a .so inclusion.

[10/20/94 public]
Closed bug.

The final list of reference pages created in response to this CR 
is as follows:


	dce_error_inq_text.3dce
	dce_msg_cat_close.3dce
	dce_msg_cat_get_msg.3dce
	dce_msg_cat_open.3dce
	dce_msg_define_msg_table.3dce
	dce_msg_get.3dce
	dce_msg_get_cat_msg.3dce
	dce_msg_get_default_msg.3dce
	dce_msg_get_msg.3dce
	dce_msg_translate_table.3dce
	dce_pgm_printf.3dce
	dce_printf.3dce

CR 12619 covers the way dce_pgm_printf.3dce and dce_printf.3dce
were documented (this is done now by two separate ref pages,
and there is no longer an .so call in dce_pgm_printf.3dce).

CR 12204 covers the creation of a dce_msg_intro.3dce ref page
that describes this API.



