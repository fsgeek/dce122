CR Number                     : 13681
Defect or Enhancement?        : def
CR in Code, Doc, or Test?     : code
Inter-dependent CRs           : 
Project Name                  : dce
H/W Ref Platform              : all
S/W Ref Platform              : all
Component Name                : dfs
Subcomponent Name             : file/security/dacl
Short Description             : global groups broken by bad realm info
Reported Date                 : 12/12/96
Found in Baseline             : 1.2.2
Found Date                    : 12/12/96
Severity                      : A
Priority                      : 0
Status                        : open
Duplicate Of                  : 
Fix By Baseline               : 1.2
Fixed In Baseline             : 
Affected File(s)              : file/security/dacl/dacl_access.c
Diff supplied by              : provider
Diff release                  : 1.2
Sensitivity                   : public
-offected File(s)             : 

[12/12/96 public]


During testing we found that a global group was not recognised by
DFS server because realm info was incorrect. We have corrected the
realm info and global groups now work OK in DFS. Here are the diffs:


39c39
< RCSID("$Header: /project/ot/dce/d01/d36/RCS/c013681,v 1.1 96/12/12 11:32:13 root Exp $")
---
> RCSID("$Header: /project/ot/dce/d01/d36/RCS/c013681,v 1.1 96/12/12 11:32:13 root Exp $")
178,179c178
< PRIVATE dacl_entry_t * dacl_FindMatchingListEntry(userIdP, groupIdP, 
<                                                 realmIdP, inDefaultRealm, 
---
> PRIVATE dacl_entry_t * dacl_FindMatchingListEntry(userIdP, groupIdP, realmIdP,
184d182
<      int                      inDefaultRealm;
258,259c256,258
<       if (inDefaultRealm && (userIdP != (epi_uuid_t *)NULL) &&
<           (Epi_PrinId_Cmp(userIdP, &(thisEntryP->entry_info.id)) == 0)) { 
---
>       if ((userIdP != (epi_uuid_t *)NULL) &&
>           (Epi_PrinId_Cmp(userIdP, &(thisEntryP->entry_info.id)) == 0) &&      
>           (realmIdP == (epi_uuid_t *)NULL)) {          
282,284c281,284
<       if (inDefaultRealm && (groupIdP != (epi_uuid_t *)NULL) &&        
<           (Epi_PrinId_Cmp(groupIdP, &(thisEntryP->entry_info.id)) == 0)) {
<           rtnVal = thisEntryP;
---
>       if ((groupIdP != (epi_uuid_t *)NULL) &&          
>           (Epi_PrinId_Cmp(groupIdP, &(thisEntryP->entry_info.id)) == 0) &&     
>           (realmIdP == (epi_uuid_t *)NULL)) {          
>         rtnVal = thisEntryP;
305c305,306
<       if ((realmIdP != (epi_uuid_t *)NULL) &&
---
>       
>       if ((realmIdP != (epi_uuid_t *)NULL) &&          
330a332
>           
434a437
>     epi_uuid_t zeroUuid;
435a439
> 
487,490d490
<     uuid_t foreignGrpRealm;   /* Realm of a foreign group */
<     int foreignGrpIsLocal = 0;        /* Is the foreign group's realm same as the
<                                * default realm of the ACL? */
< 
494a495
>     uuid_t RealmUUID;
519a521,522
>         /* just make the following comparison once */
>         bzero((char *)&zeroUuid, sizeof(epi_uuid_t));
521a525,534
>                           /* This clause should only be necessary
>                            * for operation of completely
>                            * stand-alone Episode. Otherwise, we
>                            * should have a real uuid for the local
>                            * realm to have been used by the
>                            * operation that makes pacs from struct
>                            * ucreds.  
>                            */
>                           (bcmp((char *)realmIdP, (char *)&zeroUuid, 
>                                 sizeof(epi_uuid_t)) == 0) ||
613c626
<                                                     realmIdP, realmIsDefault,
---
>                                                     (realmIsDefault) ? (epi_uuid_t *)NULL : realmIdP,
623c636
<                                                realmIdP, realmIsDefault,
---
>                                                ((realmIsDefault) ? (epi_uuid_t *)NULL : realmIdP),
661c674
<                                                    realmIdP, realmIsDefault,
---
>                                                    (realmIsDefault) ? (epi_uuid_t *)NULL : realmIdP,
675,676c688
<                                                        realmIdP, 
<                                                        realmIsDefault,---
>                                                        (realmIsDefault) ? (epi_uuid_t *)NULL : realmIdP, 
722c734
<                                                    realmIdP, realmIsDefault,
---
>                                                    (realmIsDefault) ? (epi_uuid_t *)NULL : realmIdP,
738,739c750
<                                                        realmIdP, 
<                                                        realmIsDefault,---
>                                                        (realmIsDefault) ? (epi_uuid_t *)NULL : realmIdP,
756,760c767
< 
<                     foreignGrpRealm = foreignGroupSetP[j].realm.uuid;
<                     foreignGrpIsLocal = (bcmp((char *)&foreignGrpRealm, 
<                                               (char *)&(aclP->default_realm),
<                                               sizeof(epi_uuid_t)) == 0);
---
>                     RealmUUID = foreignGroupSetP[j].realm.uuid;
767,774d773
< #if !defined(DACL_EPISODE)
<                         foreignGrpRealm = 
<                             *(uuid_t *)(&(foreignGroupIdListP[i].realm.uuid));
<                         foreignGrpIsLocal = 
<                             (bcmp((char *)&foreignGrpRealm, 
<                                   (char *)&(aclP->default_realm),
<                                   sizeof(epi_uuid_t)) == 0);
< #endif
776a776
> 
778a779
>                                                        &RealmUUID,
780a782
>                                                        &(foreignGroupIdListP[i].realm.uuid),
782,783d783
<                                                        &foreignGrpRealm,
<                                                        foreignGrpIsLocal,
798,799c798
<                                                            &foreignGrpRealm,
<                                                            foreignGrpIsLocal,
---
>                                                            &RealmUUID,824c823
<                                                    realmIdP, realmIsDefault,
---
>                                                    realmIdP,
831,832c830
<                                                        realmIdP, 
<                                                        realmIsDefault,---
>                                                        realmIdP,



CR Number                     : 13628
Defect or Enhancement?        : enh
CR in Code, Doc, or Test?     : code
Inter-dependent CRs           : 
Project Name                  : dce
H/W Ref Platform              : all
S/W Ref Platform              : all
Component Name                : dfs
Subcomponent Name             : 
Short Description             : Add trademark for DFS
Reported Date                 : 9/18/96
Found in Baseline             : 1.2.1
Found Date                    : 9/18/96
Severity                      : B
Priority                      : 2
Status                        : open
Duplicate Of                  : 
Fix By Baseline               : 1.2
Fixed In Baseline             : 
Affected File(s)              : /src/dcebooks/include/copyright.gpsml
Diff supplied by              : 
Diff release                  : 
Sensitivity                   : public

[9/19/96 public]
Change copyright page to include trademark for DFS.



CR Number                     : 13529
Defect or Enhancement?        : def
CR in Code, Doc, or Test?     : code
Inter-dependent CRs           : 
Project Name                  : dce
H/W Ref Platform              : all
S/W Ref Platform              : all
Component Name                : dfs
Subcomponent Name             : fts
Short Description             : fts/runtest obscures returned status.
Reported Date                 : 6/18/96
Found in Baseline             : 1.2
Found Date                    : 6/18/96
Severity                      : D
Priority                      : 3
Status                        : open
Duplicate Of                  : 
Fix By Baseline               : 1.2
Fixed In Baseline             : 
Affected File(s)              : 
Diff supplied by              : 
Diff release                  : 
Sensitivity                   : public

[6/18/96 public]
fts/runtests does the following:

       if [ "$FTS_VERBOSE" = "ON" ]
       then
          sh -x $TESTTOP/$test > $outfile 2>&1; rf=$?
       else
          sh $TESTTOP/$test  > $outfile 2>&1; rf=$?
       fi
       if [ $rf -ne 0 ]
       then
		(echo ""; echo "Iteration $t process $pr test $test FAILED
with exit status $rf") | tee -a $lf
       fi
	
       rf=$?; rc=`expr $rc + $rf`

In the last line, the value that rf should have is overwritten by the
"if...;then echo...;fi" statement. This value is usually 0. The fix is
to simply remove "rf=$?; " from the last line.



CR Number                     : 13487
Defect or Enhancement?        : def
CR in Code, Doc, or Test?     : code
Inter-dependent CRs           : 
Project Name                  : dce
H/W Ref Platform              : all
S/W Ref Platform              : all
Component Name                : dfs
Subcomponent Name             : 
Short Description             : DFS directory offsets are not interoperable (e.g. between Episode and other LFS's).
Reported Date                 : 5/30/96
Found in Baseline             : 1.2.1
Found Date                    : 5/30/96
Severity                      : A
Priority                      : 2
Status                        : open
Duplicate Of                  : 
Fix By Baseline               : 1.2
Fixed In Baseline             : 
Affected File(s)              : 
Diff supplied by              : 
Diff release                  : 
Sensitivity                   : public

[5/30/96 public]

The problem arises when trying to support transparent fileset
replication or movement between dissimilar local file systems.  The
local file systems could be either current Episode with later versions
of Episode (if the directory offset calculation changes for, e.g.
efficiency reasons), or current Episode with a different local file
system.  I have included a bunch of discussion below.  The gist of it is
that some client changes can ameliorate, but not solve, the problem.  To
really solve the problem will require more study, and possibly, protocol
changes.  A complete solution may not even be possible.

================================================================================
At 05:01 PM 5/14/96 -0400, Craig_Everhart@transarc.com wrote:

>Excerpts from mail: 10-May-96 Re: Urgent: Do we want this Vikram Biyani (1879*)
>
>> Also we need to get some resolution about filesystem dependent directory
>> offsets. When we have file systems other that Episode that we want to interop
>> with as replication sites, there needs to be a common form of DFS "directory
>> offsets". Today the offsets are those supplied by the filesystem that the
>> file is read from. If there is an Episode and a non-Episode file server in
>> the replication group for a particular fileset, the directory offsets will
>> not be the same.
>
>I think that the DFS CM can handle different offsets for fileset motion
>but probably not for replication (where successive AFS_Readdir() calls
>can be directed alternately to different file servers).  I admit that
>it's not a situation that we ever expected to arise, though there's at
>least one handle on directory offsets in the fileset-dump format.  (Each
>directory entry comes with a preferred offset value that the restorer
>can ideally use for the given entry.)  It's conceivable that one could
>also try to make the CM do successive AFS_Readdir() calls from the same
>file server.
>
>Have you had any thoughts about the issue?

2 thoughts -

1) Have th CM do suceesive AFS_Readdir() calls from the same file server and
have the CM flush cached directory entries if the server site changes.

2) Define a filesystem independant 'index' instead of a block offset for the
   protocol parts that now use the dir offset.

I think that we need to address this ASAP. Both HP and Digital are going to
be having non-Episode LFS's soon and this problem of interop will surface.

================================================================================
At 01:03 PM 5/15/96 -0400, Craig_Everhart@transarc.com wrote:

>Excerpts from mail: 15-May-96 Re: ``directory offset'' issue John
>Brezak@apollo.hp.co (1716*)
>
>> 1) Have th CM do suceesive AFS_Readdir() calls from the same file server and
>> have the CM flush cached directory entries if the server site changes.
>
>I can imagine doing something like this by maintaining a source server
>pointer along with the directory offset-to-chunk cache.

This would be a good "stop gap" measure for now. Should this issue be made into
an OT ?

>
>> 2) Define a filesystem independant 'index' instead of a block offset for the
>>    protocol parts that now use the dir offset.
>
>Would you like to elaborate on this?

(Daryl, can you comment ?)

>
>Separately, I explored the preserve-directory-offsets flag use in DFS
>and it looks like directory offsets should already be being preserved if
>the filesystem types are the same, or if the restore-procedure caller is
>asking for them to be preserved by an appropriate flag field to the
>vols_RestoreVolume call, which in the ftserver is ultimately derived
>from a flag passed to FTSERVER_Restore() or FTSERVER_Forward().  And the
>``filesystem type'' is different for Episode and other LFS
>implementations.  (I wish I knew the numeric value that the DEC guys
>might be planning on using.)

I don't think preserving the offsets will work. Basically offsets are tied
to the filesystem implementation. I can't see why a filesystem has to be
able to use specified dir offsets. Each filesystem should be using the offsets
that is most efficient for its implementation.

>
>While I think that the CM should (*should*) be handling itself OK for
>fileset moves, it currently has problems for fileset replication across
>different filesystem types.  Another class of solution is to insist on
>offset-preservation for replication, which could be done by having the
>repserver specify FTSERVER_RESTORE_FORCE_PRESERVE in the
>FTSERVER_Forward() call that it makes.  Do other LFS implementations
>honor the preserveOffsets parameter to the VOL_APPENDDIR operation?
>
We looked at this, but can't guarantee being able to preserve the offsets. I
don't think Episode could do this either. Again the filesystem's implementation
dictates how it wants to store directory entries. The offset is really private
to the filesystem. Out problem is how to associate a filesystem independent
directory "index" with a filesystem dependent offset.


>		Craig
>

================================================================================
Excerpts from mail: 15-May-96 Re: ``directory offset'' issue John
Brezak@apollo.hp.co (2475*)

> >I can imagine doing something like this by maintaining a source server
> >pointer along with the directory offset-to-chunk cache.

> This would be a good "stop gap" measure for now. Should this issue be made into
> an OT ?

Why is it a stop-gap?  I don't know how to implement it fully; that was
just a tiny part of an answer.  I wouldn't know how to test an
implementation that I had, either.

Also, if it's intended as a stop-gap, how will the CM ever find out that
it doesn't have to do it any more?

> >and it looks like directory offsets should already be being preserved if
> >the filesystem types are the same, or if the restore-procedure caller is
> >asking for them to be preserved by an appropriate flag field to the
> >vols_RestoreVolume call, which in the ftserver is ultimately derived
> >from a flag passed to FTSERVER_Restore() or FTSERVER_Forward().  And the
> >``filesystem type'' is different for Episode and other LFS
> >implementations.  (I wish I knew the numeric value that the DEC guys
> >might be planning on using.)

> I don't think preserving the offsets will work. Basically offsets are tied
> to the filesystem implementation. I can't see why a filesystem has to be
> able to use specified dir offsets. Each filesystem should be using the offsets
> that is most efficient for its implementation.

The idea behind the preserveOffset flag is that if the FS can't do the
restoration of the given directory entry at the given offset, the
restoration should fail.  Episode can't store names at arbitrary
offsets, but it will fail if it's being asked to store at a given point
and cannot.  Do the other LFS's you know about obey this flag in the
same way?

The point is that they should be doing so, in which case there's an
additional choice about how to fix the problem: to have all replicas for
a given fileset either be on the same filesystem type or on filesystems
that can use the incoming offset number.

I don't know what you mean when you claim that each filesystem
``should'' be using its own most-efficient offsets.  In particular, I'm
not sure that it helps to resolve the problem.

Do you know whether restores to other LFSs will fail if preserveOffsets
is requested and cannot be honored?

> Out problem is how to associate a filesystem independent
> directory "index" with a filesystem dependent offset.

Is this ``our'' and not ``out''?

I'm still wondering what the index has to do with.

There has to be a relationship between the offsets/cookies passed
through the system calls on the clients and in the directory data and
the embedded cookies as passed from server filesystem through exporter
through client through client system call.  We worked pretty hard to
come up with a filesystem-independent, yet consistent, representation of
all this and basically came up empty, which is why we're currently using
cookies pretty much straight from the server filesystem.

		Craig

================================================================================
At 03:12 PM 5/15/96 -0400, Craig_Everhart@transarc.com wrote:

>Excerpts from mail: 15-May-96 Re: ``directory offset'' issue John
>Brezak@apollo.hp.co (2475*)
>
>> >I can imagine doing something like this by maintaining a source server
>> >pointer along with the directory offset-to-chunk cache.
>
>> This would be a good "stop gap" measure for now. Should this issue be made into
>> an OT ?
>
>Why is it a stop-gap?  I don't know how to implement it fully; that was
>just a tiny part of an answer.  I wouldn't know how to test an
>implementation that I had, either.
>
>Also, if it's intended as a stop-gap, how will the CM ever find out that
>it doesn't have to do it any more?

I consider it "stop gap" in that it will fix most of the effects of the problem.
However it doesn't really fix the problem. Maybe this is all we can do.

>
>> >and it looks like directory offsets should already be being preserved if
>> >the filesystem types are the same, or if the restore-procedure caller is
>> >asking for them to be preserved by an appropriate flag field to the
>> >vols_RestoreVolume call, which in the ftserver is ultimately derived
>> >from a flag passed to FTSERVER_Restore() or FTSERVER_Forward().  And the
>> >``filesystem type'' is different for Episode and other LFS
>> >implementations.  (I wish I knew the numeric value that the DEC guys
>> >might be planning on using.)
>
>> I don't think preserving the offsets will work. Basically offsets are tied
>> to the filesystem implementation. I can't see why a filesystem has to be
>> able to use specified dir offsets. Each filesystem should be using the offsets
>> that is most efficient for its implementation.
>
>The idea behind the preserveOffset flag is that if the FS can't do the
>restoration of the given directory entry at the given offset, the
>restoration should fail.  Episode can't store names at arbitrary
>offsets, but it will fail if it's being asked to store at a given point
>and cannot.  Do the other LFS's you know about obey this flag in the
>same way?

We obey the flag in this way. However, this means that you can't have fileset
replica's between heterogenous aggregates.

>
>The point is that they should be doing so, in which case there's an
>additional choice about how to fix the problem: to have all replicas for
>a given fileset either be on the same filesystem type or on filesystems
>that can use the incoming offset number.

Are customers happy with that constraint ? Also how can the admin know what
will work and what won't without trying it first ?

>
>I don't know what you mean when you claim that each filesystem
>``should'' be using its own most-efficient offsets.  In particular, I'm
>not sure that it helps to resolve the problem.

It doesn't solve the problem, it is at the root of the problem.

>
>Do you know whether restores to other LFSs will fail if preserveOffsets
>is requested and cannot be honored?

I don't know. What is the behavior with fts in this regard ?

>
>> Out problem is how to associate a filesystem independent
>> directory "index" with a filesystem dependent offset.
>
>Is this ``our'' and not ``out''?
Right - "our".

>
>I'm still wondering what the index has to do with.

The idea is to use an index into a block instead of a offset. The index
would represent the 1st dir entry, 2nd dir entry, ... nth dir entry. The
filesystem needs to map these indicies into the native offsets.

>
>There has to be a relationship between the offsets/cookies passed
>through the system calls on the clients and in the directory data and
>the embedded cookies as passed from server filesystem through exporter
>through client through client system call.  We worked pretty hard to
>come up with a filesystem-independent, yet consistent, representation of
>all this and basically came up empty, which is why we're currently using
>cookies pretty much straight from the server filesystem.

I agree completely. We've been mulling over this for some time too. Maybe
the best we can do is change the CM as proposed and allow for the possibility
that you can't mix aggr types in fileset replication groups and moves may
fail.

BTW- Is the Episode dir offset specified ? One problem in using the Episode
offsets has been the lack of knowledge about how they are calculated. Having
this knowledge in the VFS+ spec might help with interop.

>
>		Craig
>

((No, I don't think that customers would be all that happy to deal with
what would probably appear weird new restrictions on replication.))

================================================================================
Excerpts from mail: 16-May-96 Re: ``directory offset'' issue John
Brezak@apollo.hp.co (4352*)

> >Do you know whether restores to other LFSs will fail if preserveOffsets
> >is requested and cannot be honored?

> I don't know. What is the behavior with fts in this regard ?

The behavior is that restorations will fail with EINVAL, since that's
the error code returned from the failing VOL_APPENDDIR op.  There's no
way at present to get fts to insist on directory offset matching with a
restoration.  One could override it by hand-editing a dump stream so
that the aggregate type that it says it was dumped from is the same as
the aggregate type to which it will be restored.  Dump restoration will
compare these two aggregate types and ask for preserve-offsets behavior
if they match.

> Maybe
> the best we can do is change the CM as proposed and allow for the possibility
> that you can't mix aggr types in fileset replication groups and moves may
> fail.

Actually, the CM is designed to handle directory representation changes
when fileset moves occur, but not to handle it for replica fail-over. 
That's why I was suggesting that replication could insist on matching
dir offsets, but not that fileset moves would insist on matching dir
offsets.

Directory offsets aren't discussed in the protocol for any really
excellent reason, except that if a dump&restore pair can't keep them the
same, then directory enumeration will screw up in replica fallover. 
There's nothing particularly sacred about the Episode offset numbers. 
With the original design, it's just a bug that we forgot to close the
loop and make the repserver insist on constant offset values between
replicas (with the R/W, in this suggestion).  Of course, you're now
sensibly arguing that implementing that design would seem like the
imposition of unnatural restrictions.

> BTW- Is the Episode dir offset specified ? One problem in using the Episode
> offsets has been the lack of knowledge about how they are calculated. Having
> this knowledge in the VFS+ spec might help with interop.

I believe that they're just the (byte) offset in the directory, as if
the directory enumeration had started or stopped there.  It's just the
cookie value.

		Craig

================================================================================
Craig Everhart writes:
    ....
> Actually, the CM is designed to handle directory representation changes
> when fileset moves occur, but not to handle it for replica fail-over. 
> That's why I was suggesting that replication could insist on matching
> dir offsets, but not that fileset moves would insist on matching dir
> offsets.
> 
> Directory offsets aren't discussed in the protocol for any really
> excellent reason, except that if a dump&restore pair can't keep them the
> same, then directory enumeration will screw up in replica fallover. 
> There's nothing particularly sacred about the Episode offset numbers. 
> With the original design, it's just a bug that we forgot to close the
> loop and make the repserver insist on constant offset values between
> replicas (with the R/W, in this suggestion).  Of course, you're now
> sensibly arguing that implementing that design would seem like the
> imposition of unnatural restrictions.
> 
> > BTW- Is the Episode dir offset specified ? One problem in using the Episode
> > offsets has been the lack of knowledge about how they are calculated. Having
> > this knowledge in the VFS+ spec might help with interop.
> 
> I believe that they're just the (byte) offset in the directory, as if
> the directory enumeration had started or stopped there.  It's just the
> cookie value.

I'm jumping in because I thought I understood the problem, but the
recent traffic leads me to believe my understanding isn't quite right.
Let's go back to real basics here...Some application program is calling
getdirentries() (possibly along with lseek()), or the
opendir()/readdir()/... series.  In either case, a "cookie" representing
the current position in the directory is being returned to the caller
(e.g. telldir()) or stored in the directory stream info.  There are
POSIX defined constraints on how this cookie can be used, e.g. you can
only feed seekdir() a cookie obtained from telldir(), or you can only
feed lseek() a cookie you got from a previous lseek() or from
getdirentries().  Furthermore, you can keep feeding in cookies obtained
from previous calls to iterate through all the entries in a directory.
I don't know if POSIX guarantees that you will see all the entries
exactly once, but I suspect it can't since someone could delete entries
after you started.

Now the problem, as I understand it, is that the cookie the cm returns
to the caller in an LFS directory is the actual byte offset that Episode
uses for that dir entry.  That is, when the cookie gets back to Episode,
it just uses it as a byte offset to find the entry.  It seems clear to
me that some other file systems might want the cookie to be a B-tree
index, or a hash table index, or some other kind of offset that makes
sense for the way they store directory entries.  Thus, there will always
be a problem if the cookie comes from one fs type and is presented to
another fs type.

I don't see why the solution is not to just use a "canonical" cookie in
dfs (in the protocol) and let each fs type interpret the cookie
appropriately.  Now, it may turn out that the Episode cookies are stable
enough to be used as the canonical cookie.  In that case, we need to
know exactly how they are generated and that the algorithim to generate
them won't change in the next release (i.e. they should be specified in
the VFS+ spec).  Otherwise, we should figure out some other canonical
cookie, e.g. an index based on file creation time, or alphabetical
order, or something.

As I said, it seems fairly simple to me, so I assume I don't understand
something important.

 -- Rick

================================================================================
At 01:58 PM 5/16/96 -0400, Craig_Everhart@transarc.com wrote:

>((No, I don't think that customers would be all that happy to deal with
>what would probably appear weird new restrictions on replication.))
>
>Excerpts from mail: 16-May-96 Re: ``directory offset'' issue John
>Brezak@apollo.hp.co (4352*)
>
>> >Do you know whether restores to other LFSs will fail if preserveOffsets
>> >is requested and cannot be honored?
>
>> I don't know. What is the behavior with fts in this regard ?
>
>The behavior is that restorations will fail with EINVAL, since that's
>the error code returned from the failing VOL_APPENDDIR op.  There's no
>way at present to get fts to insist on directory offset matching with a
>restoration.  One could override it by hand-editing a dump stream so
>that the aggregate type that it says it was dumped from is the same as
>the aggregate type to which it will be restored.  Dump restoration will
>compare these two aggregate types and ask for preserve-offsets behavior
>if they match.

Ok, so let see if I understand this -

- fts dump, restore and move do NOT require preserved offsets and should work
        between EFS aggrs of different type.
- replication seems to be the only case where preserved offsets matter.

This seems to be fine. The only problem is with replication then. I don't see
a need to extend the problem space to cover dump/restore related activities.

>
>> Maybe
>> the best we can do is change the CM as proposed and allow for the possibility
>> that you can't mix aggr types in fileset replication groups and moves may
>> fail.
>
>Actually, the CM is designed to handle directory representation changes
>when fileset moves occur, but not to handle it for replica fail-over. 
>That's why I was suggesting that replication could insist on matching
>dir offsets, but not that fileset moves would insist on matching dir
>offsets.

Agreed. However if we change the CM to have replica affinity for directory
reads and flush cached directory entries on rebind to a new server.

>
>Directory offsets aren't discussed in the protocol for any really
>excellent reason, except that if a dump&restore pair can't keep them the
>same, then directory enumeration will screw up in replica fallover. 
>There's nothing particularly sacred about the Episode offset numbers. 
>With the original design, it's just a bug that we forgot to close the
>loop and make the repserver insist on constant offset values between
>replicas (with the R/W, in this suggestion).  Of course, you're now
>sensibly arguing that implementing that design would seem like the
>imposition of unnatural restrictions.

If the repserver currently doesn't use the preserve offsets behavior, then
there will be a problem without the CM changes. I'm not so sure that changing
the repserver to use this is right given what we know now.

>
>> BTW- Is the Episode dir offset specified ? One problem in using the Episode
>> offsets has been the lack of knowledge about how they are calculated. Having
>> this knowledge in the VFS+ spec might help with interop.
>
>I believe that they're just the (byte) offset in the directory, as if
>the directory enumeration had started or stopped there.  It's just the
>cookie value.

Right. If we can come up with a way to mix different aggr types in replication
groups, then the a "standard neutral" offset becomes moot. If not, then a
filesystem should be using the Epsiode offsets to guarantee mixing of aggr
types. In this case the exact semantics should be doucmented. I'm looking for
block boundries, reuse of old entries, etc...

>
>		Craig
>

================================================================================
Excerpts from mail: 16-May-96 Re: ``directory offset'' issue John
Brezak@apollo.hp.co (3586*)

> - fts dump, restore and move do NOT require preserved offsets and should work
>         between EFS aggrs of different type.
> - replication seems to be the only case where preserved offsets matter.

> This seems to be fine. The only problem is with replication then. I don't see
> a need to extend the problem space to cover dump/restore related activities.

Right.  Of course, replication is constructed out of dump and restore,
and it's restoration that is the process that verifies the dir-offsets
saved from dump time.

> If the repserver currently doesn't use the preserve offsets behavior, then
> there will be a problem without the CM changes. I'm not so sure that changing
> the repserver to use this is right given what we know now.

This is probably right.  I think that we (all of us) could put out a
repserver patch to insist on offset matches along with any releases of a
new LFS, but that's probably the last moment.

Pushing on some CM affinity seems like a reasonable strategy.  I haven't
looked to see how messy that is to do in any bulletproof fashion.

		Craig

================================================================================
At 04:43 PM 5/16/96 -0400, Craig_Everhart@transarc.com wrote:

>Excerpts from mail: 16-May-96 Re: ``directory offset'' issue John
>Brezak@apollo.hp.co (3586*)
>
>> - fts dump, restore and move do NOT require preserved offsets and should work
>>         between EFS aggrs of different type.
>> - replication seems to be the only case where preserved offsets matter.
>
>> This seems to be fine. The only problem is with replication then. I don't see
>> a need to extend the problem space to cover dump/restore related activities.
>
>Right.  Of course, replication is constructed out of dump and restore,
>and it's restoration that is the process that verifies the dir-offsets
>saved from dump time.

My understanding at this point is the the repserver uses the restore operation
and (should be) specifying the preserve offsets flag to the appenddir
VOL_OP. The others (fts move and restore) should NOT. Right ?

>
>> If the repserver currently doesn't use the preserve offsets behavior, then
>> there will be a problem without the CM changes. I'm not so sure that changing
>> the repserver to use this is right given what we know now.
>
>This is probably right.  I think that we (all of us) could put out a
>repserver patch to insist on offset matches along with any releases of a
>new LFS, but that's probably the last moment.

But if the CM is changed, then the repserver shouldn't force preserve offsets
because they can be different from different replicas. Or am I not understanding
something here ?

I also understand that the current repserver isn't using the preserve offsets
flag to the VOL_APPENDDIR() operation. This was originally considered a defect,
but now it would enable the mixed aggr case - as long as the CM was changed.

>
>Pushing on some CM affinity seems like a reasonable strategy.  I haven't
>looked to see how messy that is to do in any bulletproof fashion.

Is there time to look at this for DCE 1.2.2 ?

>
>		Craig
>

================================================================================
Excerpts from mail: 16-May-96 Re: ``directory offset'' issue John
Brezak@apollo.hp.co (1944*)

> >Right.  Of course, replication is constructed out of dump and restore,
> >and it's restoration that is the process that verifies the dir-offsets
> >saved from dump time.

> My understanding at this point is the the repserver uses the restore operation
> and (should be) specifying the preserve offsets flag to the appenddir
> VOL_OP. The others (fts move and restore) should NOT. Right ?

> >
> >> If the repserver currently doesn't use the preserve offsets behavior, then
> >> there will be a problem without the CM changes. I'm not so sure that
> changing
> >> the repserver to use this is right given what we know now.
> >
> >This is probably right.  I think that we (all of us) could put out a
> >repserver patch to insist on offset matches along with any releases of a
> >new LFS, but that's probably the last moment.

> But if the CM is changed, then the repserver shouldn't force preserve offsets
> because they can be different from different replicas. Or am I not
> understanding
> something here ?

> I also understand that the current repserver isn't using the preserve offsets
> flag to the VOL_APPENDDIR() operation. This was originally considered a defect,
but now it would enable the mixed aggr case - as long as the CM was changed.

Yup--I completely agree with this.  The original idea--at least in
rational reconstruction or 20/20 hindsight--was that replication would
work only between same-architecture EFS's, and this would be enforced by
having replica propagation insist on matching directory offsets in
replicas.  But we can now recognize that this may impose a substantial
cost to administrators who might want to mix-and-match different EFS
internal architectures when they choose sets of servers on which they
want to replicate filesets.

I had another idea for solving the problem: have some way for the CM to
use an architecture tag (i.e. brand of directory offset) for the kind of
EFS that's being used.  (Using the existing 32-bit aggregate type seems
like a good possibility here; maybe this value could be returned as part
of the afsFetchStatus structure.)  The CM wouldn't have to flush its
directory data/offset cache (and whatever else) if replica fail-over
fell over into a server with the same architecture as what it had cached
already.  (And offsets are already being guaranteed as compatible based
on this aggregate type.)

Also, CMs choose between replicas pretty freely; they don't have to
stick to one replica until it fails.  Instead, for each RPC call, they
choose the replica that responds the fastest among the ones that look
nearest in network/server-preference space.  So if you had a big
directory you were enumerating, and made lots of AFS_Readdir calls to
get data from it, it's easy to imagine that you could make a few calls
to one server, make a few calls to another, and so on.  If you had to
flush your data and restart the enumeration every time the automatic
fail-over happened as at present, this could be gratuitously expensive. 
Instead, I think this ``affinity'' we've been talking about would have
to involve some new functionality at low levels of the CM at which this
choice of server is made.

> >Pushing on some CM affinity seems like a reasonable strategy.  I haven't
> >looked to see how messy that is to do in any bulletproof fashion.

> Is there time to look at this for DCE 1.2.2 ?

Good question, and not a question for me, but for management both at
Transarc and possibly at HP (you didn't say who would be doing the
looking, after all).  Also, Transarc would have a tough time doing any
testing of such a facility if it has access to only one EFS
implementation, for which dir offsets are preserved.

		Craig

================================================================================
At 10:30 AM 5/17/96 -0400, you wrote:

>Excerpts from mail: 16-May-96 Re: ``directory offset'' issue John
>Brezak@apollo.hp.co (1944*)
>
>> >Right.  Of course, replication is constructed out of dump and restore,
>> >and it's restoration that is the process that verifies the dir-offsets
>> >saved from dump time.
>
>> My understanding at this point is the the repserver uses the restore operation
>> and (should be) specifying the preserve offsets flag to the appenddir
>> VOL_OP. The others (fts move and restore) should NOT. Right ?
>
>> >
>> >> If the repserver currently doesn't use the preserve offsets behavior, then
>> >> there will be a problem without the CM changes. I'm not so sure that changing
>> >> the repserver to use this is right given what we know now.
>> >
>> >This is probably right.  I think that we (all of us) could put out a
>> >repserver patch to insist on offset matches along with any releases of a
>> >new LFS, but that's probably the last moment.
>
>> But if the CM is changed, then the repserver shouldn't force preserve offsets
>> because they can be different from different replicas. Or am I not
>> understanding
>> something here ?
>
>> I also understand that the current repserver isn't using the preserve offsets
>> flag to the VOL_APPENDDIR() operation. This was originally considered a defect,
>but now it would enable the mixed aggr case - as long as the CM was changed.
>
>Yup--I completely agree with this.  The original idea--at least in
>rational reconstruction or 20/20 hindsight--was that replication would
>work only between same-architecture EFS's, and this would be enforced by
>having replica propagation insist on matching directory offsets in
>replicas.  But we can now recognize that this may impose a substantial
>cost to administrators who might want to mix-and-match different EFS
>internal architectures when they choose sets of servers on which they
>want to replicate filesets.
>
>I had another idea for solving the problem: have some way for the CM to
>use an architecture tag (i.e. brand of directory offset) for the kind of
>EFS that's being used.  (Using the existing 32-bit aggregate type seems
>like a good possibility here; maybe this value could be returned as part
>of the afsFetchStatus structure.)  The CM wouldn't have to flush its
>directory data/offset cache (and whatever else) if replica fail-over
>fell over into a server with the same architecture as what it had cached
>already.  (And offsets are already being guaranteed as compatible based
>on this aggregate type.)
>
>Also, CMs choose between replicas pretty freely; they don't have to
>stick to one replica until it fails.  Instead, for each RPC call, they
>choose the replica that responds the fastest among the ones that look
>nearest in network/server-preference space.  So if you had a big
>directory you were enumerating, and made lots of AFS_Readdir calls to
>get data from it, it's easy to imagine that you could make a few calls
>to one server, make a few calls to another, and so on.  If you had to
>flush your data and restart the enumeration every time the automatic
>fail-over happened as at present, this could be gratuitously expensive. 
>Instead, I think this ``affinity'' we've be[domian 8/1/96]
Changed priority 1 to 2 as recommended by HP.



CR Number                     : 13445
Defect or Enhancement?        : def
CR in Code, Doc, or Test?     : code
Inter-dependent CRs           : 11664
Project Name                  : dce
H/W Ref Platform              : all
S/W Ref Platform              : all
Component Name                : dfs
Subcomponent Name             : 
Short Description             : recordLock ext fields undefined
Reported Date                 : 4/23/96
Found in Baseline             : 1.1
Found Date                    : 4/23/96
Severity                      : B
Priority                      : 2
Status                        : open
Duplicate Of                  : 
Fix By Baseline               : 1.2
Fixed In Baseline             : 
Affected File(s)              : 
Sensitivity                   : public

[4/23/96 public]
Two spare fields in afsRecordLock were converted for use as the high 32
bits of the l_start_pos and l_end_pos by OT 11664.  However, these new
fields were not used by 32 bit systems and also were never being
initialized to zero.  This caused 64bit systems to find garbage in
these fields which lead to problems when revoking lock tokens.



CR Number                     : 13417
Defect or Enhancement?        : def
CR in Code, Doc, or Test?     : code
Inter-dependent CRs           : 
Project Name                  : dce
H/W Ref Platform              : rs6000
S/W Ref Platform              : aix
Component Name                : dfs
Subcomponent Name             : dacl_sec_reg.c
Short Description             : erroneous access permission
Reported Date                 : 4/1/96
Found in Baseline             : 1.2.1
Found Date                    : 4/1/96
Severity                      : B
Priority                      : 2
Status                        : open
Duplicate Of                  : 
Fix By Baseline               : 1.2.2
Fixed In Baseline             : 
Affected File(s)              : 
Sensitivity                   : public
reported by                   : sasala (Ronald Sasala)

[4/1/96 public]
From: "Ron Sasala, (617) 621-7320, DCE,  Hi, there" <sasala@osf.org>

In the checking, with rtnVal == DACL_SUCCESS, there is an unassigned error, 
DACL_ERROR_UNRECOGNIZED_USER_OR_GROUP, that isn't assigned as a rtnVal,
resulting in what appears to be access erroneously when it should be denied.

The bug is at the following location:

  DCE 1.2.1 - line 836
  DCE 1.1   - line 1017

The 1.2.1 code follows:

if (rtnVal == DACL_SUCCESS) {
    if ((aclEntryP->entry_type == dacl_entry_type_user) ||
        (aclEntryP->entry_type == dacl_entry_type_user_delegate) ||
        (aclEntryP->entry_type == dacl_entry_type_foreign_user_delegate) || dacl_sec_rgy.c
        (aclEntryP->entry_type == dacl_entry_type_foreign_user)) {
       if (local) {
        if ((aclEntryP->entry_type == dacl_entry_type_user) ||
            (aclEntryP->entry_type == dacl_entry_type_user_delegate)) {
          bcopy((char *)(&(aclEntryP->entry_info.id)), (char *)&prinUid, sizeof(int));
          pwentP = getpwuid(prinUid);
          if (pwentP) {
            strncpy((char *)globalName, pwentP->pw_name, sizeof(sec_rgy_name_t));
          }
          else 
            icl_Trace1(dacl_iclSetp, DACL_ICL_RGY_TRACE_12 , ICL_TYPE_LONG, prinUid);
*****Here it is************* 
           DACL_ERROR_UNRECOGNIZED_USER_OR_GROUP;
          }

It should be:

          rtnVal = DACL_ERROR_UNRECOGNIZED_USER_OR_GROUP;



CR Number                     : 13374
Defect or Enhancement?        : enh
CR in Code, Doc, or Test?     : code
Inter-dependent CRs           : 13347
Project Name                  : dce
H/W Ref Platform              : rs6000
S/W Ref Platform              : aix
Component Name                : dfs
Subcomponent Name             : 
Short Description             : ENDGAME: Change way libdcedfs build is turned off
Reported Date                 : 2/26/96
Found in Baseline             : 1.2.1
Found Date                    : 2/26/96
Severity                      : C
Priority                      : 3
Status                        : open
Duplicate Of                  : 
Fix By Baseline               : 
Fixed In Baseline             : 
Affected File(s)              : src/Makefile
					src/file/libdcedfs/Makefile
Sensitivity                   : public

[2/26/96 public]
Change the way libdcedfs build is disabled.  OT 13347 disabled
building libdcedfs by making changes in src/Makefile, but a better 
way is to make changes in src/file/libdcedfs/Makefile. Remember to
undo the changes in src/Makefile.



CR Number                     : 13300
Defect or Enhancement?        : def
CR in Code, Doc, or Test?     : code
Inter-dependent CRs           : 
Project Name                  : dce
H/W Ref Platform              : all
S/W Ref Platform              : all
Component Name                : dfs
Subcomponent Name             : 
Short Description             : upgrade DFS service msgs
Reported Date                 : 2/6/96
Found in Baseline             : 1.2
Found Date                    : 2/6/96
Severity                      : D
Priority                      : 3
Status                        : open
Duplicate Of                  : 
Fix By Baseline               : 1.2
Fixed In Baseline             : 
Affected File(s)              : 
Sensitivity                   : public

[2/6/96 public]

By code inspection we notice that the DFS service messages are
not always uptodate. In this defect all the DFS service messages
are to be updated.



CR Number                     : 13299
Defect or Enhancement?        : def
CR in Code, Doc, or Test?     : test
Inter-dependent CRs           : 
Project Name                  : dce
H/W Ref Platform              : all
S/W Ref Platform              : all
Component Name                : dfs
Subcomponent Name             : 
Short Description             : new DFS delegation tests
Reported Date                 : 2/6/96
Found in Baseline             : 1.2
Found Date                    : 2/6/96
Severity                      : D
Priority                      : 3
Status                        : open
Duplicate Of                  : 
Fix By Baseline               : 1.2
Fixed In Baseline             : 
Affected File(s)              : 
Sensitivity                   : public

[2/6/96 public]

While recently testing DFS 1.2.1, I was unable to get the DFS
delegation tests to work. I hear that no one else has had any
luck with them either. However, the System Test group at
Transarc has constructed working delegation tests from scratch.
This defect is a rubric for adding these tests to the DFS test
suite.



CR Number                     : 13282
Defect or Enhancement?        : def
CR in Code, Doc, or Test?     : code
Inter-dependent CRs           : 
Project Name                  : dce
H/W Ref Platform              : rs6000
S/W Ref Platform              : aix
Component Name                : dfs
Subcomponent Name             : episode
Short Description             : not zero-filling unused file blocks
Reported Date                 : 1/17/96
Found in Baseline             : 1.2
Found Date                    : 1/17/96
Severity                      : C
Priority                      : 2
Status                        : open
Duplicate Of                  : 
Fix By Baseline               : 1.2
Fixed In Baseline             : 
Affected File(s)              : 
Sensitivity                   : public

[1/17/96 public]
This defect was opened brought to our attention by Carl Burnett @ IBM.
        <Note by brich (Rich, Bruce), 96/01/09 17:20:43, action: open>
    An OS/2 DFS client can read data off an
    AIX DFS server simply by creating a file
    of arbitrary length, closing the file and
    then re-opening and reading from it. This
    pattern should result in zeroes being
    returned from the server.
 
        Carl added:
    Customers who have applications which set a file's
    length up from a value smaller than 8K to a value
    smaller than 8K without ever writing data
    in the file.
        and
    This problem can be created by a simple test case which:
 
    creates a new file
    sets the length to say 1024 bytes
    then exits without ever writing any data.

Carl has provided Transarc with a fix.



CR Number                     : 13202
Defect or Enhancement?        : def
CR in Code, Doc, or Test?     : code
Inter-dependent CRs           : 
Project Name                  : dce
H/W Ref Platform              : all
S/W Ref Platform              : all
Component Name                : dfs
Subcomponent Name             : 
Short Description             : Thinkos in provider_version comments
Reported Date                 : 11/15/95
Found in Baseline             : 1.1
Found Date                    : 11/15/95
Severity                      : D
Priority                      : 3
Status                        : open
Duplicate Of                  : 
Fix By Baseline               : 1.2
Fixed In Baseline             : 
Affected File(s)              : 
Sensitivity                   : public

[11/15/95 public]
Some of the provider_version() comments in DFS IDL files are erroneous,
saying only provider() rather than provider_version().  This might confuse
anybody trying to use the DFS versioning specification.

[11/15/95 public]
Fixed with Transarc delta cfe-ot13202-provider_version-comments.



CR Number                     : 12764
Defect or Enhancement?        : def
CR in Code, Doc, or Test?     : code
Inter-dependent CRs           : 
Project Name                  : dce
H/W Ref Platform              : all
S/W Ref Platform              : all
Component Name                : dfs
Subcomponent Name             : 
Short Description             : Exceeding Maximum Aggregate ID in fts crfldbentry command is ungraceful
Reported Date                 : 12/7/94
Found in Baseline             : 1.0.3
Found Date                    : 7/5/94
Severity                      : E
Priority                      : 4
Status                        : open
Duplicate Of                  : 
Fix By Baseline               : 1.1
Fixed In Baseline             : 
Affected File(s)              : 
Diff supplied by              : 
Diff release                  : 
Sensitivity                   : public

[12/2/96 public]
lowering priority of old OTs that haven't appeared during R1.2.

[12/7/94 public]

This is a minor problem we ran across -- it will probably affect only
64-bit implementations, but the fix will not harm 32-bit implementations.

----------------

When the maximum DFS numeric aggregate id value is exceeded when issuing
the 'fts crfldbentry' command, the error is not handled properly.  Although
an error message is generated, it appears that the fldb entry is created
anyway, with an aggregate id that is different than the one specified:

# fts crfldbentry test1 tub 4294967000
        readWrite   ID 0,,19  valid
        readOnly    ID 0,,20  invalid
        backup      ID 0,,21  invalid
number of sites: 1
   server           flags     aggr   siteAge principal      owner
fts: Number ('18446744073709551320') is too large!  Cannot use it.
Illegal aggregate Id (18446744073709551320): must be numeric!
Error in GetAggr: illegal aggregate (dfs / fts)
tub.zk3.dec.com     RW       18446744073709551320 0:00:00 hosts/tub
<nil>
FLDB entry created for fileset test1 (0,,19) on aggregate -296 of tub

# fts lsfldb test1
        readWrite   ID 0,,19  valid
        readOnly    ID 0,,20  invalid
        backup      ID 0,,21  invalid
number of sites: 1
   server           flags     aggr   siteAge principal      owner
fts: Number ('18446744073709551320') is too large!  Cannot use it.
Aggregate name 18446744073709551320 is not exported from the server
tub.zk3.dec.com     RW       18446744073709551320 0:00:00 hosts/tub
<nil>


The aggregate id should be checked in fts and the whole command should
immediately fail if the limit of (2^31 - 1) is exceeded.  I'm entering
this as a low priority for now, though the fix is likely trivial.

        Steve Strange  7/5/94


Answer for QAR #24832:
------ --- ------- -------
There was a problem in getAggrName() routine where we were using
"%lu" format in sprintf to convert an unsigned32 AggrId to a
character string. The sprintf was sign extending AggrId to a
64-bit value, and was causing subsequent errors. This problem
only showed up if the user specified AggrId's between 0x80000000
and 0xffffffff, i.e., with the highest order bit on.

The incorrect behavior has been fixed by using "%u" format
descriptor in sprintf call. Now, 'fts crfldbentry' will give
an error for aggrid values greater than 0xffffffff and will
accept 0x80000000 <= AggrId <= 0xffffffff.



CR Number                     : 12763
Defect or Enhancement?        : def
CR in Code, Doc, or Test?     : code
Inter-dependent CRs           : 
Project Name                  : dce
H/W Ref Platform              : all
S/W Ref Platform              : all
Component Name                : dfs
Subcomponent Name             : 
Short Description             : fts aggrinfo output format bad, and incorrect info
Reported Date                 : 12/6/94
Found in Baseline             : 1.0.3
Found Date                    : 7/5/94
Severity                      : E
Priority                      : 4
Status                        : open
Duplicate Of                  : 
Fix By Baseline               : 1.1
Fixed In Baseline             : 
Affected File(s)              : 
Diff supplied by              : 
Diff release                  : 
Sensitivity                   : public

[12/2/96 public]
lowering priority of old OTs that haven't appeared during R1.2.

[12/6/94 public]
fts aggrinfo output format bad and incorrect info.
 
The formating of the fts aggrinfo command needs to be fixed.  When the name
of the aggr (filesystem mount point) is very long, it is getting truncated
and then appended with the block device name.  This  has been seen only for
the case of ufs thus far.
 
root@splash> fts aggrinfo -server splash
Non-LFS aggregate /dfs.root (/dev/rz1a): 15844 K free out of total 56915 (6324 
Non-LFS aggregate /usr/sandbox/disks/sb_disk1 (/dev/rz12c): 577437 K free out o
Non-LFS aggregate /usr/sandbox/disks/sb_disk2 (/dev/rz10c): 859843 K free out o
Non-LFS aggregate /usr/sandbox/disks/sb_disk8 (rz8#sandbox8): 737544 K free out
Non-LFS aggregate /usr/sandbox/disks/dfs.perf (rz8#dfs.perf): 737544 K free out
Non-LFS aggregate /project/dce/build/disks/dfs_dis/dev/rz11h (/dev/rz11h): 9554
Non-LFS aggregate /project/dce/build/disks/dfs_dis/dev/rz8d (/dev/rz8d): 49860 
Non-LFS aggregate /project/dce/build/disks/dfs_dis/dev/rz11g (/dev/rz11g): 1844
Non-LFS aggregate /home/cande (users#cande): 112008 K free out of total 402736 
Non-LFS aggregate /usr/users (/dev/rz3h): 9594 K free out of total 364928 (4054
Non-LFS aggregate /dfs.exported/rz2d (/dev/rz2d): 39134 K free out of total 868
Non-LFS aggregate /dfs.exported/rz2_fs1 (rz2#fs1): 115384 K free out of total 1
 
Notice the /project/dce/build/disks/dfs_dis entries.  They should be
dfs_disk0, dfs_disk1, and dfs_disk2 in that order replacing the dfs_dis/dev/*
portion of the name being shown.
 
Also look at rz11g, the  free space is way out of wack.  This is presumed to
be because there is actually no unreserved space left (file system > 100%
full) as can be seen from the following df...
 
df /project/dce/build/disks/*
Filesystem   512-blocks        Used       Avail Capacity  Mounted on
/dev/rz0a        126462       82946       30868    73%    /
/dev/rz11h      1438888     1103900      191098    85%    /project/dce/build/di
/dev/rz8d        743926      569812       99720    85%    /project/dce/build/di
/dev/rz11g       792926      720474           0   101%    /project/dce/build/di
 
-- Ed
 
Answer for QAR #24809:
------ --- ------- -------
Fixed code in userInt/fts/volc_main.c such that if
aggregate name is more than 31 characters, it is
truncated to 31 characters. This limit is imposed
by the size of the data structure. The incorrect
string was seen because the incomplete name was not
null-terminated.
 
Also fixed the code to print correct value for num
blocks availbale in case file system is full.
Code fix:
 
<  * Revision 1.2.2.12  1994/07/19  19:54:32  Seema_Peterson
<  *            Formatting error fixes for 'fts aggrinfo' command in
<  *            fts_DoAggregateInfo(). Reviewed by Steve Strange.
<  *    [1994/07/19  19:52:36  Seema_Peterson]
<  *
15c10
<  * 
---
>  *
507c502
<     int code = 0, i, j, numAggrs;
---
>     int code = 0, i, numAggrs;
523,536d517
<           /*
<            * Make sure the name is null terminated. If the underlying
<            * layers have a larger size for the name, we will have a
<            * partial non-null-terminated string here.
<            */
<           for (j=0; j < sizeof(aggrInfo.name); j++)
<               if (aggrInfo.name[j] == '\0')
<                   break;
<           if (j == sizeof(aggrInfo.name))
<               aggrInfo.name[j-1] = '\0';
< 
<           /* Check to see if the aggregate is full (or over-full) */
<           if ((int)(aggrInfo.curFree) <= 0)
<               aggrInfo.curFree = 0;
The body of the changes was placed immediately after the line that reads
 
	if (!code) {
 
in fts_DoAggregateInfo().
 
	Steve Strange, Digital Equipment Corp., 12/6/94

[12/7/94 public]
It's true that FTSERVER_AggregateInfo can return aggregate names and
device names that are not null-terminated.  It may be simpler to copy
these names into a one-character-bigger buffer and then zero the last
byte of that bigger buffer.  This will print the 32nd character, if there
is one.
 
I'm more concerned about the diagnosis and repair of the free-space value.
Perhaps DEC is using the percentage-based branch of the code in 
ag_ufsStat() in ufsops/ufs_agops.c; that branch seems to be wrong for
all platforms, yet was the default for any new port, so we pulled it
out.  In the version of the code that's in DCE 1.1, it looks like realFree
should be being computed as:
	availblks - (totalblks - nfree)
==	(totalblks - reserved) - (totalblks - nfree)
==	nfree - reserved
==	nfree - (nfree - available)
==	available
==	statb.f_bavail {straight from the VFS_STATFS call}
 
Assuming that f_bavail is the value to be printed (converting to 1K
units), I believe that the correct repair for this problem isn't to change
volc_main.c, but rather to repair ufs_agops.c.  The replacement of the code:
 
#if defined(AFS_VFS40) || defined(AFS_OSF_ENV) || defined(AFS_SUNOS5_ENV) || defined(AFS_HPUX_ENV)
    availblks = totalblks - reserved;
#else
    availblks = totalblks * (100 - reserved) / 100;
#endif
 
with
 
    availblks = totalblks - reserved;
 
was suggested in OT report 9703, which is currently a deferred enhancement.

[12/8/94 public]
Filled in Interest List CC with `cfe'



CR Number                     : 12761
Defect or Enhancement?        : def
CR in Code, Doc, or Test?     : code
Inter-dependent CRs           : 
Project Name                  : dce
H/W Ref Platform              : all
S/W Ref Platform              : all
Component Name                : dfs
Subcomponent Name             : 
Short Description             : DFS does not return ENOSPC
Reported Date                 : 12/6/94
Found in Baseline             : 1.0.2
Found Date                    : 3/30/94
Severity                      : B
Priority                      : 4
Status                        : open
Duplicate Of                  : 
Fix By Baseline               : 1.1
Fixed In Baseline             : 
Affected File(s)              : 
Diff supplied by              : 
Diff release                  : 
Sensitivity                   : public

[12/2/96  public]
lowering priority of old OTs that haven't appeared during R1.2.

[12/6/94 public]
 
DFS doesn't seem to return ENOSPC properly.  It allows writing to a
DFS-exported UFS file system past 100% capacity, all the way to 111% at
which point a file write will be incomplete, but no error will be
generated.  Some sort of space-reservation scheme probably needs to be
implemented in order to address this problem.
 
I have filed this OT as B (Critical) only because there really is no
workaround.  I wouldn't write this off as minor though, because it could
result in lost data without the application being aware of it.  Also, it's
important that when we do address this problem that it be done in a
consistent way across all vendor products.  
 
	Steve Strange, Digital Equipment Corp, 12/6/94

[12/6/94 public]
Transarc didn't fix this particular bug, either, but I have a comment and
a question.  The comment is that we did implement the CM feature where
storebacks that fail for ENOSPC reasons are retried for a while.  The
question is about the comment: 
      past 100% capacity, all the way to 111% at
   which point a file write will be incomplete, but no error will be
   generated.
I believed that the exporter call will fail, returning an ENOSPC error
or the like, and that this will be returned to the client either on a
write() call or on their close() call.  Is this not the case?

[12/7/94 public]
Or perhaps is the complaint that you'd want the write() to return an error
rather than the close()?



CR Number                     : 12745
Defect or Enhancement?        : def
CR in Code, Doc, or Test?     : code
Inter-dependent CRs           : 
Project Name                  : dce
H/W Ref Platform              : rs6000
S/W Ref Platform              : aix
Component Name                : dfs
Subcomponent Name             : 
Short Description             : BosConfig file is invalid
Reported Date                 : 11/10/94
Found in Baseline             : 1.1b24
Found Date                    : 11/10/94
Severity                      : C
Priority                      : 4
Status                        : open
Duplicate Of                  : 
Fix By Baseline               : 1.1
Fixed In Baseline             : 
Affected File(s)              : 
Diff supplied by              : 
Diff release                  : 
Sensitivity                   : public

[12/2/96 public]

lowering priority of old OTs that haven't appeared during R1.2.

[11/10/94 public]
 
I checked with the dfs people here at IBM and they indicated that the
BosConfig file is not in the correct format. After I configure dfs,
the BosConfig file contains the following:
 
restarttime 11 0 4 0 0checkbintime 3 0 5 0 0bnode simple upserver 1parm /opt/dc
elocal/bin/upserver  -path /opt/dcelocal/var/dfs/admin.bos /opt/dcelocal/var/df
s/admin.fl  /opt/dcelocal/var/dfs/admin.ft  /opt/dcelocal/var/dfs/admin.up
/opt/dcelocal/var/dfs/admin.bak
end
bnode simple flserver 1parm /opt/dcelocal/bin/flserver
end
bnode simple bakserver 1parm /opt/dcelocal/bin/bakserver
end
bnode simple ftserver 1parm /opt/dcelocal/bin/ftserver
end
bnode simple repserver 1parm /opt/dcelocal/bin/repserver
end
If I run dfs.clean and thne try to restart dfs with this configuration
file, bosserver fails to start. The Bos Log file contains the following:
 
Thu Nov 10 09:48:37 1994: /opt/dcelocal/bin/bosserver: beginning logging
Thu Nov 10 09:48:38 1994: Server directory access is okay
Thu Nov 10 09:48:43 1994: /opt/dcelocal/bin/bosserver: can't open bosserver con
figuration file
I then changed the file to read:
 
restarttime 11 0 4 0 0
checkbintime 3 0 5 0 0
bnode simple upserver 1
parm /opt/dcelocal/bin/upserver  -path /opt/dcelocal/var/dfs/admin.bos  /opt/dc
elocal/var/dfs/admin.fl  /opt/dcelocal/var/dfs/admin.ft  /opt/dcelocal/var/dfs/
admin.up                 
/opt/dce
end
bnode simple flserver 1
parm /opt/dcelocal/bin/flserver
end
bnode simple bakserver 1
parm /opt/dcelocal/bin/bakserver
end
bnode simple ftserver 1
parm /opt/dcelocal/bin/ftserver
end
bnode simple repserver 1
parm /opt/dcelocal/bin/repserver
end
When I restarted bosserver, I was able to bring dfs up.

[11/10/94 public]
The fault is in whatever software you used to configure DFS, not in DFS
itself.

[11/11/94 public]
I don't understand that statement, bosserver creates the BosConfig file.
If that is the case then isn't the bosserver the software in question?

[11/11/94 public]
Oh, oops, it depends on how your configuration works.  Sorry; it's
possible to configure DFS by having the configuration tool write the
initial BosConfig file.
 
Looks like a fatal error in the OSF's "partial serviceability of DFS"
work, which lost the newlines that were supposed to be appended to the
printout.  It will affect more than just configuration, though, since
any time the bosserver configuration is changed, the BosConfig file
will be rewritten to be garbage.
 
Of course, the functionality tests would have caught this error, had
they been run.  Yuk.

[11/16/94 public]

[12/05/94 public]

In fact, I think the s12y changes went a little overboard.  There is no
reason to put syntactic keywords in the message catalog.  In this case,
"bnode", "restarttime", "checkbintime", "parm", etc. are keywords in the
BosConfig file.  The parsing code is looking for these exact strings.
There is no point in putting them into the BosConfig file from the message
catalog.  Thus, this code should just go back to the way it was, with
explicit printf's and sprintf's in the code and forget the s12y calls.

[12/07/94 public]

Here are diffs for bossvr_main.c and bss.sams to correct this problem:

********************************
<<< file 1: /vob/dce.src.file/src/file/bosserver/bss.sams@@/main/kissel_work/0
>>> file 2: bss.sams
********************************
-----[after 9 inserted 10-13]-----
> # Revision /main/kissel_work/1  1994/12/06  21:45 UTC  kissel
> # 	Eliminate the messages for BosConfig file syntactic keywords:  restarttime,
> # 	checkbintime, and bnode.  These are written and parsed by bossvr_main.c.
> # 
-----[deleted 210-238 after 213]-----
< end
< 
< start
< code           bss_s_bnode_name_type
< attributes     "svc_c_sev_notice | svc_c_action_brief"
< sub-component  bss_s_general
< text           "bnode %s %s %d"
< explanation    "?"
< action         " "
< end
< 
< start
< code           bss_s_restarttime
< attributes     "svc_c_sev_notice | svc_c_action_brief"
< sub-component  bss_s_general
< text           "restarttime %d %d %d %d %d"
< explanation    "?"
< action         " "
< notes          "Don't translate %d items."
< end
< 
< start
< code           bss_s_checkbintime
< attributes     "svc_c_sev_notice | svc_c_action_brief"
< sub-component  bss_s_general
< text           "checkbintime %d %d %d %d %d"
< explanation    "?"
< action         " "
< notes          "Don't translate %d items, please. (Ron)."

********************************
<<< file 1: /vob/dce.src.file/src/file/bosserver/bossvr_main.c@@/main/HPDCE02/kissel_work/0
>>> file 2: bossvr_main.c
********************************
-----[after 10 inserted 11-17]-----
>  * Revision /main/HPDCE02/kissel_work/1  1994/12/06  21:45 UTC  kissel
>  * 	Eliminate the s12y messages for BosConfig file syntactic keywords:  restarttime,
>  * 	checkbintime, and bnode.  They are parsed as explicit strings by other code
>  * 	in here, so there is no way they can be translated.  Besides, the current stuff
>  * 	is wrong because it does not put a newline on the end of the lines so the BosConfig
>  * 	file is hosed.
>  * 
-----[1104-1110 changed to 1111]-----
<      
<     {
<     char *dcesptr;
<     dcesptr = dce_sprintf(bss_s_bnode_name_type, abnode->type->name, abnode->name, abnode->fileGoal);
<     strcpy(tbuffer , dcesptr);
<     free(dcesptr);
<     }
---
>     sprintf(tbuffer, "bnode %s %s %d\n", abnode->type->name, abnode->name, abnode->fileGoal);
-----[1149-1151 changed to 1150]-----
<   {
<   char *dcesptr;
<   dcesptr = dce_sprintf(bss_s_restarttime, bossvr_nextRestartKT.mask,
---
>   sprintf(databuf, "restarttime %d %d %d %d %d\n", bossvr_nextRestartKT.mask,
-----[deleted 1154-1156 after 1152]-----
<   strcpy(databuf , dcesptr);
<   free(dcesptr);
<   }
-----[1159-1161 changed to 1155]-----
<   {
<   char *dcesptr;
<   dcesptr = dce_sprintf(bss_s_checkbintime, bossvr_nextDayKT.mask,
---
>   sprintf(databuf, "checkbintime %d %d %d %d %d\n", bossvr_nextDayKT.mask,
-----[deleted 1164-1166 after 1157]-----
<   strcpy(databuf , dcesptr);
<   free(dcesptr);
<   }



CR Number                     : 12724
Defect or Enhancement?        : def
CR in Code, Doc, or Test?     : code
Inter-dependent CRs           : 
Project Name                  : dce
H/W Ref Platform              : all
S/W Ref Platform              : all
Component Name                : dfs
Subcomponent Name             : userInt/fts
Short Description             : Using osi_err[En|De]code()
Reported Date                 : 10/25/94
Found in Baseline             : 1.1
Found Date                    : 10/25/94
Severity                      : B
Priority                      : 4
Status                        : open
Duplicate Of                  : 
Fix By Baseline               : 1.2
Fixed In Baseline             : 
Affected File(s)              : volc*.c
Diff supplied by              : 
Diff release                  : 
Sensitivity                   : public

[12/2/96 public]
lowering priority of old OTs that haven't appeared during R1.2.

[10/25/94 public]
 
From a support customer working with OpenEdition MVS:
 
> Full Description:
> 
>         Code in the fts program checks return codes from RPCs for ENOENT,
>         ENODEV, and EXDEV.  These values are system-dependent and should
>         not be passed over the wire from server to client.  In our
>         particular case, the ftserver is running on OpenEdition MVS and
>         the client is an RS/6000 running AIX and the OSF reference
>         platform 1.0.3a fts command.  An 'fts move' command to move a
>         fileset between two aggregates on MVS fails because we return
>         EXDEV during the check for the presense of the fileset on the
>         destination aggregate, but the OpenEdition value for EXDEV is
>         not recognized by the AIX client which fails the move operation.
> 
>         We have *not* investigated whether this is a problem with other
>         client-server relationships such as bos <=> bosserver.
> 
> Proposed Solution:
> 
>         The osi_errEncode() and osi_errDecode() routines should be used
>         on both sides of this interface so that a common set of errno
>         values is passed between server and client.
 
I don't know whether this constitutes a defect or a disagreement over 
error conversion policy (I note a repeated allusion in the RCS comments 
to a design document dealing with the latter).  A cursory survey of the 
DFS code does indicate some inconsistency as to when raw error codes (as 
per "sys/errno.h") are returned, and when they are passed through the 
"osi_err[En|De]code" routines.  The following data may give some 
indication of the scope of the question.
 
"osi_errEncode" and/or "osi_errDecode" occur in the following files:
 
	cm/cm_cell.c
	cm/cm_conn.c
	cm/cm_daemons.c
	cm/cm_dcache.c
	cm/cm_dnamehash.c
	cm/cm_pioctl.c
	cm/cm_rrequest.c
	cm/cm_scache.c
	cm/cm_server.c
	cm/cm_subr.c
	cm/cm_tknimp.c
	cm/cm_tokens.c
	cm/cm_vnodeops.c
	cm/cm_volume.c
	fsprobe/fsprobe.c
	osi/OSF1/osi_dfs2osferr.c
	osi/OSF1/osi_osf2dfserr.c
	osi/RIOS/osi_aix2dfserr.c
	osi/RIOS/osi_dfs2aixerr.c
	px/px_intops.c
	rep/rep_main.c
	userInt/fts/volc_tokens.c
 
"return [ENOENT|ENODEV|EXDEV]" occurs in the following files:
	
	butc/list.c
	cm/cm_conn.c
	cm/cm_daemons.c
	cm/cm_dnamehash.c
	cm/cm_init.c
	cm/cm_pioctl.c
	cm/cm_rrequest.c
	cm/cm_server.c
	cm/cm_subr.c
	cm/cm_vdirent.c
	cm/cm_vfsops.c
	cm/cm_vnodeops.c
	cm/cm_volume.c
	dfsbind/bind_helper.c
	episode/async/asevent.c
	episode/async/us_io.c
	episode/dir/dir_main.c
	episode/vnops/efs_agops.c
	episode/vnops/efs_dir.c
	ftutil/ftu_util.c
	icl/icl_control.c
	tkset/tkset.c
	ufsops/HPUX/hpux_volops.c
	ufsops/RIOS/aix_volops.c
	ufsops/ufs_agops.c
	ufsops/ufs_volops.c
	userInt/fts/volc_tokens.c
	userInt/fts/volc_vldbsubr.c
	xaggr/ag_init.c
	xaggr/ag_registry.c
	xvnode/RIOS/xvfs_aixglue.c
	xvolume/vol_init.c
 
I'd like to be able to give this customer some kind of feedback on this,
even if it's just "talk to your vendor" or "you want 'em, you put 'em in".
 
				Thanks,
 
				Jim

[10/26/94 public]
Sounds like a problem with backwards compat concerns if
you fix it, but I'm a lame duck.  You need to talk to TA.  
I've included Craig E. on the interest list.

[10/26/94 public]
There isn't much of a backwards-compatibility problem, since you're
eliminating the issue for the inter-architecture case and only confusing
communication between same-architecture, old-vs-new clients and servers.
 
The right kind of check isn't so much to look for explicit returns
of error codes, but to sanitize the error codes across RPC interfaces.
This is best done in the manager procedures themselves, and decoded by
the RPC callers uniformly.
 
I admit that it never occured to any of us that the first few errno
values would ever be platform-dependent; we concentrated efforts on
the higher-numbered values like ETIMEDOUT or ESTALE.  I guess that's
not enough.
 
Certainly the vendor's port can do this independently of others.  Perhaps
it's a cleanup item that can be attached to DCE 1.2.



CR Number                     : 12671
Defect or Enhancement?        : def
CR in Code, Doc, or Test?     : test
Inter-dependent CRs           : 
Project Name                  : dce
H/W Ref Platform              : rs6000
S/W Ref Platform              : aix
Component Name                : dfs
Subcomponent Name             : 
Short Description             : dfs low test8 fails
Reported Date                 : 10/19/94
Found in Baseline             : 1.1b22
Found Date                    : 10/19/94
Severity                      : C
Priority                      : 2
Status                        : open
Duplicate Of                  : 
Fix By Baseline               : 1.1
Fixed In Baseline             : 
Affected File(s)              : 
Diff supplied by              : 
Diff release                  : 
Sensitivity                   : public

[10/19/94 public]

The following error occured in the low/test8:

Prog8 pid 16968 iter 1 starting open test.

- ERROR 66: exec-access test on 'f1.1001.666' failed (rf=0, errno=13)
- ERROR: prog8 process 1 returned 1
- ERROR 66: exec-access test on 'f1.1001.666' failed (rf=0, errno=13)
- ERROR: prog8 process 1 returned 1
test8 process 1 failed
test8 cleaning up

This may have been a problem with acls since I was running the test
in an episode file system.



CR Number                     : 12631
Defect or Enhancement?        : def
CR in Code, Doc, or Test?     : doc
Inter-dependent CRs           : 
Project Name                  : dce
H/W Ref Platform              : all
S/W Ref Platform              : all
Component Name                : dfs
Subcomponent Name             : dfs_admin_gdref
Short Description             : DFS Backup System IDs are inconsistent and incorrect
Reported Date                 : 10/14/94
Found in Baseline             : 1.0.3
Found Date                    : 10/14/94
Severity                      : D
Priority                      : 3
Status                        : open
Duplicate Of                  : 
Fix By Baseline               : 1.2
Fixed In Baseline             : 
Affected File(s)              : See Description
Diff supplied by              : 
Diff release                  : 
Sensitivity                   : public
Transarc Deltas               : 
Transarc Herder               : 
Transarc Status               : 

[10/14/94 public]
The following information, which will appear in the DFS portion of the DCE 1.1
Release Notes, needs to be corrected in the DFS documentation:
 
 In the \*EOSF DCE DFS Administration Guide and Reference\*O, descriptions of
 the various ID numbers used with the DFS Backup System are inconsistent and,
 in some cases, incorrect. Following are brief descriptions of the three types
 of ID numbers used with the Backup System:
 
 o A \*Edump ID number\*O is a unique number assigned to a dump set by the
   Backup System. The Backup System assigns a dump ID to each dump set created
   with the \*Lbak dump\*O command. It includes the dump ID in the tape label
   that it places on the tape with the dump; it then refers to the dump set by
   the dump ID for future Backup System operations. For example, when you
   perform a restore operation with the \*Lbak restoredisk\*O or \*Lbak
   restoreft\*O command, the Tape Coordinator requests tapes by tape name and
   dump ID. For this reason, it is prudent to mark the dump ID of a dump set
   on the tape that records that dump set.
 
 o A \*Ejob ID number\*O is a number assigned to an operation initiated with a
   \*Lbak\*O command. When you enter interactive mode, the \*Lbak\*O command
   polls the Tape Coordinators to determine all active and pending Backup
   System operations; it then assigns a job ID to each operation. In
   interactive mode, you can use the \*Lbak jobs\*O command to view the job IDs
   of active and pending operations. In interactive mode, you can also use the
   \*Lbak kill\*O command to terminate an active or pending operation once you
   know the job ID of the operation.
 
 o A \*Etask ID number\*O is a number assigned to an operation being performed
   by a Tape Coordinator (\*Lbutc\*O process). Each Tape Coordinator maintains
   its own sequence of task IDs, which is initialized when the Tape Coordinator
   is started. These numbers are of no consequence, but they can help you track
   the operations being performed by a specific Tape Coordinator.
 
 Keep these definitions in mind as you work with the DFS Backup System.
 
The following files will be affected by this defect:
 
./src/dce_books/dfs_admin_gdref/gd/backup.gpsml
./src/dce_books/dfs_admin_gdref/gd/backrest.gpsml
./src/dce_books/dfs_admin_gdref/ref/bak*
 
Added field Transarc Deltas with value `' 
Added field Transarc Herder with value `' 
Added field Transarc Status with value `'

[10/17/94 public]
The appropriate entries in the Glossary at the back of the "Introduction to
OSF DCE" will also need to be updated for this change.

[11/8/94 public]
Changed Interest List CC from `wfl@transarc.com' to `' 
Changed Responsible Engr. from `jeff@transarc.com' to `wfl@transarc.com'

[7/17/95 public]
Reopened for DCE 1.2.



CR Number                     : 12219
Defect or Enhancement?        : enh
CR in Code, Doc, or Test?     : code
Inter-dependent CRs           : 
Project Name                  : dce
H/W Ref Platform              : all
S/W Ref Platform              : all
Component Name                : dfs
Subcomponent Name             : 
Short Description             : Local disk cache under utilized caused
				 	     by V files shortage
Reported Date                 : 9/16/94
Found in Baseline             : 1.1b16
Found Date                    : 9/16/94
Severity                      : B
Priority                      : 2
Status                        : open
Duplicate Of                  : 
Fix By Baseline               : 1.1
Fixed In Baseline             : 
Affected File(s)              : 
Diff supplied by              : 
Diff release                  : 
Sensitivity                   : public

[9/16/94 public]
 
In the following test I found that only 43 MB used out of 
the 100 MB configured when reading 70 MB of source codes from
the server. Note that the total test lasted less that 25 minutes.
 
Looking into all the V files usage, I found the cause of this under
utilization problem --- All the 3,600 pre-allocated V files were
all used at the end of the test.
 
Suggestion : Make the DFS client allocate V files dynamically.
	     
Test : cat all the non-directory files from src/(rpc, security,
       file, directory)
 
Platform : HP 
 
DCE : default 16.3 lastgood build

[09/16/94 public]
 
The number of V files for 100 MB local disk cache is 
supposed to be 12500, but the following piece of code 
in afsd.c limits it to 3600. Can someone explain why?
 
        if (!dfsd_cacheFiles) {
            cacheFiles = cacheBlocks / 8;
            if (cacheFiles <  100) cacheFiles =  100;
            if (cacheFiles > 3600) cacheFiles = 3600;
        }

[09/23/94]

The DCE Admin Reference Guide has a limit of 32,000 for "dfsd -files". So,
we have two limits here --- 3,600 and 32,000. Which one is the right limit?



CR Number                     : 12130
Defect or Enhancement?        : def
CR in Code, Doc, or Test?     : code
Inter-dependent CRs           : 
Project Name                  : dce
H/W Ref Platform              : all
S/W Ref Platform              : all
Component Name                : dfs
Subcomponent Name             : 
Short Description             : dataCacheBytesReadFromCache always zero
Reported Date                 : 9/12/94
Found in Baseline             : 1.1b16
Found Date                    : 9/12/94
Severity                      : B
Priority                      : 4
Status                        : open
Duplicate Of                  : 
Fix By Baseline               : 1.1
Fixed In Baseline             : 
Affected File(s)              : 
Diff supplied by              : 
Diff release                  : 
Sensitivity                   : public

[12/2/96 public]
lowering priority of old OTs that haven't appeared during R1.2.

[9/12/94 public]
 
The dataCacheBytesReadFromCache of cm_stats is never updated, so I belied it
is put in the wrong place.



CR Number                     : 11547
Defect or Enhancement?        : enh
CR in Code, Doc, or Test?     : code
Inter-dependent CRs           : 11423
Project Name                  : dce
H/W Ref Platform              : all
S/W Ref Platform              : all
Component Name                : dfs
Subcomponent Name             : fts
Short Description             : -localauth causes immediate cred refresh
Reported Date                 : 8/3/94
Found in Baseline             : 1.1b13
Found Date                    : 8/3/94
Severity                      : C
Priority                      : 3
Status                        : open
Duplicate Of                  : 
Fix By Baseline               : 1.2
Fixed In Baseline             : 
Affected File(s)              : 
Diff supplied by              : 
Diff release                  : 
Sensitivity                   : public

[8/3/94 public]

The file/security/dfsauth routines loop such that newly created
creds are refreshed immediately - at least in the case of using
the -localauth switch on fts create (see 11423). I suspect these
routines are also used by the repserver and other user space dfs
daemons so that many of them are doing this unnecessary refresh.



CR Number                     : 11490
Defect or Enhancement?        : def
CR in Code, Doc, or Test?     : code
Inter-dependent CRs           : 
Project Name                  : dce
H/W Ref Platform              : all
S/W Ref Platform              : all
Component Name                : dfs
Subcomponent Name             : upclient
Short Description             : segment fault if filename w/o fullpn
Reported Date                 : 7/29/94
Found in Baseline             : 1.1
Found Date                    : 7/29/94
Severity                      : B
Priority                      : 4
Status                        : open
Duplicate Of                  : 
Fix By Baseline               : 1.1
Fixed In Baseline             : 
Affected File(s)              : upclient.c, util.c
Diff supplied by              : 
Diff release                  : 
Sensitivity                   : public

[12/2/96 public]
lowering priority of old OTs that haven't appeared during R1.2.

[7/29/94 public]
Upclient segment faults if a file without a full pathname is specified
for the writing of the log or log error entries that are accomplished
by util.c.

Example:
upclient -server alcatraz -path : (or 0) -file 0 (or myfile) (or
anything without a pathname).



CR Number                     : 11353
Defect or Enhancement?        : def
CR in Code, Doc, or Test?     : code
Inter-dependent CRs           : 
Project Name                  : dce
H/W Ref Platform              : all
S/W Ref Platform              : all
Component Name                : dfs
Subcomponent Name             : bld
Short Description             : DFS_ONLY has BUILD_DCE depended on security
Reported Date                 : 7/18/94
Found in Baseline             : 1.1
Found Date                    : 7/18/94
Severity                      : C
Priority                      : 4
Status                        : open
Duplicate Of                  : 
Fix By Baseline               : 1.2
Fixed In Baseline             : 
Affected File(s)              : src/Makefile
Diff supplied by              : 
Diff release                  : 
Sensitivity                   : public

[12/2/96  public]
lowering priority of old OTs that haven't appeared during R1.2.

[7/18/94 public]
While looking at src/Makefile, in line 173, DFS has BUILD_DCE
= rpc dce config. But under dce/utils, other than svc, dcecf, there 
are acldb, db44, misc and attr (I'm going to check in), the acldb and
attr (built in misc) have dependence on some IDL files exported by
security. If DFS_ONLY doesn't need security, it may need to set
BUILD_DCE = rpc dce/utils/svc dce/utils/dcecf config.



CR Number                     : 10907
Defect or Enhancement?        : def
CR in Code, Doc, or Test?     : code
Inter-dependent CRs           : 
Project Name                  : dce
H/W Ref Platform              : all
S/W Ref Platform              : all
Component Name                : dfs
Subcomponent Name             : config
Short Description             : dfs.unconfig should do a few more things ...
Reported Date                 : 6/8/94
Found in Baseline             : 1.1
Found Date                    : 6/8/94
Severity                      : B
Priority                      : 4
Status                        : open
Duplicate Of                  : 
Fix By Baseline               : 1.2
Fixed In Baseline             : 
Affected File(s)              : 
Diff supplied by              : 
Diff release                  : 
Sensitivity                   : public

[domian 12/2/96 public}
lowering priority of old OTs that haven't appeared during R1.2.

[6/8/94 public]

In trying to help the RATs salvage a smoketest attempt, came across
the following:

- dfs.unconfig removes member from the /.:/fs group but does NOT
restart the other flservers
- dfs.unconfig does this last when, if the machine you're unconfig'ing
is down, you might want to do this 1st so you can achieve quorum and
then successfully do other steps like delete, delfldbentry, delserverentry
(The smoketest cell is a degenerate case since there are only the 2 
flservers but it wouldn't hurt to have this order would it?)

It would also be nice if dfs.unconfig would do a:
fts delfldbentry -server <server_being_unconfig'd> -prefix ""
(if the user was willing to risk losing replication data :-)
so that if the server is down, filesets can still be removed from the
fldb ...
and



CR Number                     : 10905
Defect or Enhancement?        : enh
CR in Code, Doc, or Test?     : test
Inter-dependent CRs           : 10869
Project Name                  : dce
H/W Ref Platform              : all
S/W Ref Platform              : all
Component Name                : dfs
Subcomponent Name             : delegation
Short Description             : add delegation functional tests
Reported Date                 : 6/8/94
Found in Baseline             : 1.1
Found Date                    : 6/8/94
Severity                      : B
Priority                      : 1
Status                        : open
Duplicate Of                  : 
Fix By Baseline               : 1.1
Fixed In Baseline             : 
Affected File(s)              : 
Diff supplied by              : 
Diff release                  : 
Sensitivity                   : public

[6/8/94 public]

Need to add tests which exercise DFS access via a delegated identity.



CR Number                     : 10882
Defect or Enhancement?        : enh
CR in Code, Doc, or Test?     : code
Inter-dependent CRs           : 
Project Name                  : dce
H/W Ref Platform              : all
S/W Ref Platform              : all
Component Name                : dfs
Subcomponent Name             : tkm
Short Description             : tkm thread pool not needed on clients
                                             on DFS client only machines?
Reported Date                 : 6/7/94
Found in Baseline             : 1.0.3a
Found Date                    : 6/7/94
Severity                      : C
Priority                      : 2
Status                        : open
Duplicate Of                  : 
Fix By Baseline               : 1.1
Fixed In Baseline             : 
Affected File(s)              : 
Diff supplied by              : 
Diff release                  : 
Sensitivity                   : public

[6/7/94 public]
 
The tkm thread pool appears not to be needed on client only machines.
I don't have a full understanding of the work requests on the
tkm thread pool queues, but I think they only apply to DFS exporters.
A test client-only system with the tkm thread pool queue omitted has
passes connectathon...  Can anyone at Transarc confirm
that pure clients don't need tkm?

[6/7/94 public]
I think this is likely a duplicate of OT 10880.  You don't need tkm,
or its thread pool, on pure clients.  This is simply a matter of
packaging to make a minimal client-only configuration.
 
Such a configuration wouldn't need tkc, either.  There may be others.



CR Number                     : 10881
Defect or Enhancement?        : enh
CR in Code, Doc, or Test?     : code
Inter-dependent CRs           : 
Project Name                  : dce
H/W Ref Platform              : all
S/W Ref Platform              : all
Component Name                : dfs
Subcomponent Name             : tpq
Short Description             : too many scheduling threads
                                             in TPQ.
Reported Date                 : 6/7/94
Found in Baseline             : 1.0.3a
Found Date                    : 6/7/94
Severity                      : B
Priority                      : 2
Status                        : open
Duplicate Of                  : 
Fix By Baseline               : 1.1
Fixed In Baseline             : 
Affected File(s)              : 
Diff supplied by              : 
Diff release                  : 
Sensitivity                   : public
Transarc Deltas               : 
Transarc Herder               : 
Transarc Status               : 

[6/7/94 public]
 
The TPQ package using a scheduling thread per thread pool.  This is
wasteful.  It's a fairly simple modification to have one global
scheduler thread which will loop over all the thread pools.  Since
this thread does not normally block (except possibly when it
has to do an osi_ThreadCreate) there should be no performance
impact.  A test system built this way is currently undergoing
testing.  It's been up four days with simple testing.  More
exotic testing (moving filesets, replication) etc. is currently
underway.  An additional thread has been saved by having the
thread which blocks forever awaiting system shutdown be the
universal scheduler thread.  This thread now polls periodically
for shutdown.

[6/7/94 public]
I don't know if there's an overriding reason to have one scheduling
thread per thread-pool, but maybe Gen. Comer will remember.  It seems
reasonable to try to build a universal-scheduler thread this way.

[6/7/94 public]
No, there's no reason not to have a single scheduler thread.  It seems
quite reasonable to me (I assume things like initializing and shutting
down thread pools are handled cleanly).  How much of a change are we
talking about?
Added field Transarc Deltas with value `' 
Added field Transarc Herder with value `' 
Added field Transarc Status with value `'



CR Number                     : 10880
Defect or Enhancement?        : enh
CR in Code, Doc, or Test?     : code
Inter-dependent CRs           : 
Project Name                  : dce
H/W Ref Platform              : all
S/W Ref Platform              : all
Component Name                : dfs
Subcomponent Name             : kernel packaging
Short Description             : dfscore too big on clients
                                             kernel extension contains all
                                             token management code, both
                                             client and server side.  This
                                             unnecessarily wastes kernel
                                             memory on client only machines.
Reported Date                 : 6/7/94
Found in Baseline             : 1.0.3a
Found Date                    : 6/7/94
Severity                      : C
Priority                      : 2
Status                        : open
Duplicate Of                  : 
Fix By Baseline               : 1.1
Fixed In Baseline             : 
Affected File(s)              : 
Diff supplied by              : 
Diff release                  : 
Sensitivity                   : public

[6/7/94 public]
 
On HPUX, the dfscore kernel extension contains all token management 
code, both client and server side.  This unnecessarily wastes kernel
memory on client only machines.  dfscore.ext should be split into
two different libraries.  This is a low priority because the
pending rewrite of the token manager may make this work
unnecessary.

[6/7/94 public]
Sure, in a client-only kernel, there's no need for the token manager,
and dfscore could be separated into different parts if one wanted to
build a minimal client-only kernel that never exported any data.



CR Number                     : 10681
Defect or Enhancement?        : def
CR in Code, Doc, or Test?     : test
Inter-dependent CRs           : 
Project Name                  : dce
H/W Ref Platform              : all
S/W Ref Platform              : all
Component Name                : dfs
Subcomponent Name             : tkm
Short Description             : token_test not build/in wrong tree
Reported Date                 : 5/17/94
Found in Baseline             : 1.1
Found Date                    : 5/17/94
Severity                      : E
Priority                      : 3
Status                        : open
Duplicate Of                  : 
Fix By Baseline               : 1.2
Fixed In Baseline             : 
Affected File(s)              : 
Diff supplied by              : 
Diff release                  : 
Sensitivity                   : public

[5/17/94 public]

In reviewing dfs functional tests (including those still in the
src/file tree rather than the src/test/file tree), came across

	src/file/token_test

which is not being built. These tests should be built, tried out,
and moved to the test tree.



CR Number                     : 10471
Defect or Enhancement?        : enh
CR in Code, Doc, or Test?     : code
Inter-dependent CRs           : 
Project Name                  : dce
H/W Ref Platform              : all
S/W Ref Platform              : all
Component Name                : dfs
Subcomponent Name             : cache manager
Short Description             : cm needs to be more configurable
Reported Date                 : 4/27/94
Found in Baseline             : 1.1a
Found Date                    : 4/27/94
Severity                      : B
Priority                      : 2
Status                        : open
Duplicate Of                  : 
Fix By Baseline               : 1.1
Fixed In Baseline             : 
Affected File(s)              : 
Diff supplied by              : 
Diff release                  : 
Sensitivity                   : public
Transarc Deltas               : 
Transarc Herder               : 
Transarc Status               : 

[4/27/94 public]
The cache manager should be more configurable.  At this point I know of
one additional configuration paramter -- the size of ACL cache.  An
ACL cache entry "struct cm_aclent" is used to hold ACL information about
cached files.  This structure is a few dozen bytes and 600 of these
are osi_Alloc'ed, regardless of the size of the client.  The proposal
is to make this another field in the cm_cacheparams structure.  dfsd
should be modified to pass this parameter, and some appropriate
switch added to dfsd.

[4/27/94 public]
Filled in Interest List CC with `jeff@transarc.com' 
Added field Transarc Deltas with value `' 
Added field Transarc Herder with value `' 
Added field Transarc Status with value `'



CR Number                     : 10276
Defect or Enhancement?        : def
CR in Code, Doc, or Test?     : test
Inter-dependent CRs           : 
Project Name                  : dce
H/W Ref Platform              : hppa
S/W Ref Platform              : hpux
Component Name                : dfs
Subcomponent Name             : dfsbind
Short Description             : test DFS with H-Cells
Reported Date                 : 4/1/94
Found in Baseline             : 1.1b6
Found Date                    : 4/1/94
Severity                      : B
Priority                      : 1
Status                        : open
Duplicate Of                  : 
Fix By Baseline               : 1.1
Fixed In Baseline             : 
Affected File(s)              : 
Diff supplied by              : 
Diff release                  : 
Sensitivity                   : public

[4/1/94 public]


Ron desperately wants to work on this so it's his :-).


When attempting to DFS in a cell which has an aliased cellname,
via the alias name, dfsbind does not correctly distinguish between
the cds part of the name and the dfs part of the name.  The following
trace results from issuing a 'touch abc' from /.../newalias/fs, 
which returns an error.  The same command when issued relative to
the original cell name will execute correctly. 

time 345.718003, pid 9: sec_id_parse_name: entry name=/.../newalias
time 345.788230, pid 9: sec_id_parse_name: exit code:387063930
time 345.788499, pid 9: rpc_ns_entry_inq_resolution: entry
time 346.020050, pid 9: rpc_ns_entry_inq_resolution: exit code:0
time 346.048650, pid 9: ProcessRequest: exit code:21
time 346.048927, pid 9: helper write: entry
time 346.064272, pid 9: helper write: exit code:33
time 360.941413, pid 1: helper read: exit code:24
time 360.941811, pid 1: helper read: entry
time 360.942615, pid 10: ProcessRequest: entry
time 360.942891, pid 10: sec_id_parse_name: entry name=/.../newalias/fs
time 360.960041, pid 10: sec_id_parse_name: exit code:387063930
time 360.960302, pid 10: rpc_ns_entry_inq_resolution: entry
time 361.162999, pid 10: rpc_ns_entry_inq_resolution: exit code:0
time 361.163473, pid 10: ProcessRequest: exit code:21
time 361.163688, pid 10: helper write: entry
time 361.172487, pid 10: helper write: exit code:36
time 365.503754, pid 1: helper read: exit code:28
time 365.504150, pid 1: helper read: entry
time 365.505142, pid 11: ProcessRequest: entry
time 365.505417, pid 11: sec_id_parse_name: entry name=/.../newalias/fs/abc
time 365.521667, pid 11: sec_id_parse_name: exit code:387063930
time 365.521928, pid 11: rpc_ns_entry_inq_resolution: entry
time 365.605600, pid 11: rpc_ns_entry_inq_resolution: exit code:382312643
time 365.606093, pid 11: ProcessRequest: exit code:2
time 365.606306, pid 11: helper write: entry
time 365.615022, pid 11: helper write: exit code:40

[4/12/94 public]
This looks like an expected failure. The code to update the 
security service with the new cell alias is not implemented.  
When dfsbind goes to the rgy using sec_id_parse_name() to parse 
the cell alias, the rgy returns "object not found" indicating that 
it is not (yet) aware of the new cell alias.

I'm lowering the priority until the security portion of this work
is implemented, at which time we'll check again to make sure this
works.  I'm also including Rob Stanzel on the list to make sure
I'm not mistaken about this being an expected failure.

[9/15/94 public]
This is really a place holder to test DFS with H-Cells.

[2/23/96 public]
Transarc requests that CR type be changed to "test" (not code).



CR Number                     : 10261
Defect or Enhancement?        : enh
CR in Code, Doc, or Test?     : code
Inter-dependent CRs           : 
Project Name                  : dce
H/W Ref Platform              : hppa
S/W Ref Platform              : hpux
Component Name                : dfs
Subcomponent Name             : dfs plumber
Short Description             : enhancement for dfs plumber
Reported Date                 : 3/31/94
Found in Baseline             : 1.1
Found Date                    : 3/31/94
Severity                      : D
Priority                      : 2
Status                        : open
Duplicate Of                  : 
Fix By Baseline               : 1.1
Fixed In Baseline             : 
Affected File(s)              : 
Diff supplied by              : 
Diff release                  : 
Sensitivity                   : public

[3/31/94 public]

The dfs core component's dfs plumber system call should be enhanced to 
return summary information and osi allocation record information.  The
PC values are also needed and so osi_caller (function that gives
you the address of the caller of the caller) should be written.  A
user interface program that maps the PC values to the nearest preceding
function symbol using the kernel symbol table is also needed.

The goal is to have a tool which can be used to analyze memory usage
patterns and ultimately (at least for clients) reduce memory consumption.



CR Number                     : 10258
Defect or Enhancement?        : def
CR in Code, Doc, or Test?     : code
Inter-dependent CRs           : 
Project Name                  : dce
H/W Ref Platform              : rs6000
S/W Ref Platform              : aix
Component Name                : dfs
Subcomponent Name             : 
Short Description             : Need TRY/CATCH blocks for non-fault/comm_status exceptions
Reported Date                 : 3/31/94
Found in Baseline             : 1.0.3
Found Date                    : 3/31/94
Severity                      : B
Priority                      : 4
Status                        : open
Duplicate Of                  : 
Fix By Baseline               : 1.1
Fixed In Baseline             : 
Affected File(s)              : 
Diff supplied by              : 
Diff release                  : 
Sensitivity                   : public

[12/2/96 public]
lowering priority of old OTs that haven't appeared during R1.2.
Transarc Deltas                      [text]: 
Transarc Herder                      [text]: 
Transarc Status                      [text]: open

[3/31/94 public]
Opening this defect as a result of discussions related to
OT9931.

There appear to be some RPC exceptions which cannot be
converted to either comm_status or fault_status.  To handle
these we need TRY/CATCH blocks, maybe in the main routine
of the effected commands is enough once all the fault_status
comm_status changes are in.  OT9931 only addresses the idl
files which are missing fault_status or comm_status, I think
this is a broader issue which hits more of the DFS commands/
servers.

The test scenario used in the case of the bos command was
to send a -cmd parameter to the bos create command that 
was longer than 256 characters.  Even with fault/comm_status
in, the command core dumped:

Exception: status 16c9a07d (dce / rpc) (= rpc_s_fault_invalid_bound)
Abort(coredump)

Added field Transarc Deltas with value `' 
Added field Transarc Herder with value `' 
Added field Transarc Status with value `open'



CR Number                     : 10065
Defect or Enhancement?        : def
CR in Code, Doc, or Test?     : test
Inter-dependent CRs           : 
Project Name                  : dce
H/W Ref Platform              : hppa
S/W Ref Platform              : hpux
Component Name                : dfs
Subcomponent Name             : fts test4
Short Description             : exp stat incorrect for E65
Reported Date                 : 3/4/94
Found in Baseline             : 1.0.3a
Found Date                    : 3/4/94
Severity                      : D
Priority                      : 2
Status                        : open
Duplicate Of                  : 
Fix By Baseline               : 1.1
Fixed In Baseline             : 
Affected File(s)              : test/file/fts/test4
Diff supplied by              : 
Diff release                  : 
Sensitivity                   : public

[3/4/94 public]
this is the same problem as test8 in OT9989

test4 when run in a 'ufs' cell fails op E65

fts delfldbentry -prefix $base_name.2 $av_arg
dfs_ftsCheckResult $? $DFS_PASS_EQ_ZERO $DFS_WORKS_ON_BOTH $p E65 rc

the fileset was not created since fts create doesn't work
in a 'ufs' only cell...



CR Number                     : 9817
Defect or Enhancement?        : enh
CR in Code, Doc, or Test?     : code
Inter-dependent CRs           : 9770
Project Name                  : dce
H/W Ref Platform              : all
S/W Ref Platform              : all
Component Name                : dfs
Subcomponent Name             : 
Short Description             : serverModTime is obsolete
Reported Date                 : 1/25/94
Found in Baseline             : 1.0.3a
Found Date                    : 1/25/94
Severity                      : D
Priority                      : 3
Status                        : open
Duplicate Of                  : 
Fix By Baseline               : 1.1
Fixed In Baseline             : 
Affected File(s)              : 
Diff supplied by              : 
Diff release                  : 
Sensitivity                   : public

[1/25/94 public]
During the course of investigating OT9770, an informal survey
of most (all?) of the DFS heavyweights was conducted and revealed 
that the serverModTime field in xvfs_attr is probably obsolete
(a holdover from AFS) and redundant with the ctime field in
the same structure.  Unfortunately, the lateness in the 1.0.3a
release cycle prevented this from gettin cleaned up when OT9770
was fixed.  This OT is to retain this bit of information and
finish the job in 1.1.



CR Number                     : 9790
Defect or Enhancement?        : def
CR in Code, Doc, or Test?     : test
Inter-dependent CRs           : 
Project Name                  : dce
H/W Ref Platform              : hppa
S/W Ref Platform              : hpux
Component Name                : dfs
Subcomponent Name             : test
Short Description             : itlFile_Flock uses Solaris in
error message
Reported Date                 : 1/20/94
Found in Baseline             : 1.0.3a
Found Date                    : 1/20/94
Severity                      : E
Priority                      : 3
Status                        : open
Duplicate Of                  : 
Fix By Baseline               : 1.1
Fixed In Baseline             : 
Affected File(s)              : test/file/itl/file/itl_file.c
Diff supplied by              : 
Diff release                  : 
Sensitivity                   : public
Transarc Herder               : 
Transarc Status               : 
Transarc Deltas               : 

[1/20/94 public]
the following code source does not apply 
to both SUNOS5 and __hpux
/*
 *  itlFile_Flock() --
 *    Issue the flock() system call.
 */
SHARED boolean_t itlFile_Flock()
{
#if defined(SUNOS5) || defined(__hpux)
    itl_Error("flock not defined on Solaris\n");
#else /* defined(SUNOS5) || defined(__hpux) */
either a variable should be set to the correct
plaform name or re-word the message...

[1/24/94 public]
Changed Responsible Engr. from `Elliot_Jaffe@transarc.com' to `rsarbo@osf' 
Changed Resp. Engr's Company from `tarc' to `osf' 
Added field Transarc Herder with value `' 
Added field Transarc Status with value `'
Changed Responsible Engr. from `rsarbo@osf' to `rsarbo' 
Added field Transarc Deltas with value `'



CR Number                     : 9786
Defect or Enhancement?        : def
CR in Code, Doc, or Test?     : test
Inter-dependent CRs           : 
Project Name                  : dce
H/W Ref Platform              : all
S/W Ref Platform              : all
Component Name                : dfs
Subcomponent Name             : 
Short Description             : unusual ACL behavior when an unan unauthenticated user
Reported Date                 : 1/20/94
Found in Baseline             : 1.0.3a
Found Date                    : 1/20/94
Severity                      : D
Priority                      : 3
Status                        : open
Duplicate Of                  : 
Fix By Baseline               : 1.2
Fixed In Baseline             : 
Affected File(s)              : 
Diff supplied by              : 
Diff release                  : 
Sensitivity                   : public
Transarc Deltas               : 
Transarc Herder               : 
Transarc Status               : 

[1/20/94 public]

I am not sure whether this is the correct behavior.

An unauthenticated user who has RWXID permissions (through any_other
ACL), I tried to create a file...

>% echo `date` > unauth.file
dfs: set auth binding failed (code 387064042); running unauthenticated.
dfs: set auth binding failed (code 387064042); running unauthenticated.

>% ls -l unauth.file
-rw-rw-r--   1 nobody   65534          0 Jan 20 08:43 unauth.file

An empty file was created.

The error code from above is ...

root@smirk> ./stcode_hp 387064042
387064042 (decimal), 171220ea (hex): Context handle not valid (dce / sec)

>% touch test
touch: cannot change times on test
>% ls -l test
-rw-------   1 nobody   65534          0 Jan 20 10:31 test

[1/27/98 public]
Defering to 1.1 when we can further investigate ACLs for an unauthenticated
user.

[1/27/94 public]
Actually, this might not be an ACL issue.  OT 8650 addresses a problem
which results in the auth_helper confusing creds.  Doesn't the message that
you got back from dfsbind with the 387064042 code indicate that you had
credentials which are no longer valid (instead of having no network
identity established at all).  I'm pretty sure I've seen the 'context
handle not valid' error in the situation described by OT 8650 as well
as the 382312714 code.  It might be working determining if you are
running with the fix for 8650.
Added field Transarc Deltas with value `' 
Added field Transarc Herder with value `' 
Added field Transarc Status with value `'



CR Number                     : 9708
Defect or Enhancement?        : enh
CR in Code, Doc, or Test?     : code
Inter-dependent CRs           : 
Project Name                  : dce
H/W Ref Platform              : all
S/W Ref Platform              : all
Component Name                : dfs
Subcomponent Name             : systest
Short Description             : add rgy verify to dfs.read_write_all
Reported Date                 : 1/10/94
Found in Baseline             : 1.0.3a
Found Date                    : 1/10/94
Severity                      : C
Priority                      : 2
Status                        : open
Duplicate Of                  : 
Fix By Baseline               : 1.2
Fixed In Baseline             : 
Affected File(s)              : 
Diff supplied by              : 
Diff release                  : 
Sensitivity                   : public

[1/10/94 public]
Currently, the dfs.read_write_all test relies on the tester
having read the README and having updated the registry such
that the max cert lifetime >= default cert lifetime >= -t argument to test.

However, it would be better if the test verified early in its processing
that max cert lifetime >= -t argument to test and if so, established the
default cert lifetime for the test principals >= -t argument. This way,
the default for all principals would not have to be maxed.

The test would have to be able to set the default cert lifetimes for
new as well as existing test principals (ie. if SETUP_RGY_ACCOUNTS=FALSE).



CR Number                     : 9703
Defect or Enhancement?        : enh
CR in Code, Doc, or Test?     : code
Inter-dependent CRs           : 
Project Name                  : dce
H/W Ref Platform              : rs6000
S/W Ref Platform              : aix
Component Name                : dfs
Subcomponent Name             : ufsops
Short Description             : bogus calculation in ag_ufsStat()
Reported Date                 : 1/7/94
Found in Baseline             : 1.0.3a
Found Date                    : 1/7/94
Severity                      : D
Priority                      : 3
Status                        : open
Duplicate Of                  : 
Fix By Baseline               : 1.1
Fixed In Baseline             : 
Affected File(s)              : 
Diff supplied by              : 
Diff release                  : 
Sensitivity                   : public

[1/7/94 public]
Excerpt from request to submit:

> Fix:  The problem is that the default calculation for availblks 
> in ag_ufsStat() looks bogus.  Whenever a new DFS port is 
> completed, it gets this bogus calculation, unless a platform
> or feature ifdef is included.  As it turns out, the RIOS also ends 
> up using this apparently bogus calculation, but I believe it is 
> benign because the RIOS apparently doesn't reserve blocks.  If 
> reserved blocks is zero, the bogus calculation works.  I'm submitting 
> this fix, and I'll open a low priority enhancement against the 
> RIOS to have someone at IBM figure out if all the platform ifdefs 
> can be removed and have the RIOS use the same (I believe correct) 
> calculation as all the other platforms.
>



CR Number                     : 9694
Defect or Enhancement?        : def
CR in Code, Doc, or Test?     : test
Inter-dependent CRs           : 
Project Name                  : dce
H/W Ref Platform              : all
S/W Ref Platform              : all
Component Name                : dfs
Subcomponent Name             : 
Short Description             : intermittent spurious move failure in fts test21
Reported Date                 : 1/6/94
Found in Baseline             : 1.0.3a
Found Date                    : 1/6/94
Severity                      : C
Priority                      : 2
Status                        : open
Duplicate Of                  : 
Fix By Baseline               : 1.1
Fixed In Baseline             : 
Affected File(s)              : 
Diff supplied by              : 
Diff release                  : 
Sensitivity                   : public
Transarc Deltas               : 
Transarc Herder               : jaffe@transarc.com
Transarc Status               : open

[1/6/94 public]
On repeated runs of fts test21, we are sometimes seeing that the last fts move
fails, i.e. the one for which the message "move unexpectedly FAILED but we
are not counting this as an error..." is printed.  This is quite mysterious,
especially when the aggregates are very different from each other in size.
We have not yet found a reliable way to reproduce it.
Added field Transarc Deltas with value `' 
Added field Transarc Herder with value `jaffe@transarc.com' 
Added field Transarc Status with value `open'



CR Number                     : 9685
Defect or Enhancement?        : def
CR in Code, Doc, or Test?     : test
Inter-dependent CRs           : 
Project Name                  : dce
H/W Ref Platform              : hppa
S/W Ref Platform              : hpux
Component Name                : dfs
Subcomponent Name             : lfs
Short Description             : intermittent failure in RCX tests on HP/UX
Reported Date                 : 1/5/94
Found in Baseline             : 1.0.3a
Found Date                    : 1/5/94
Severity                      : C
Priority                      : 2
Status                        : open
Duplicate Of                  : 
Fix By Baseline               : 1.1
Fixed In Baseline             : 
Affected File(s)              : 
Diff supplied by              : 
Diff release                  : 
Sensitivity                   : public
Transarc Deltas               : 
Transarc Herder               : jaffe@transarc.com
Transarc Status               : open

[1/5/94 public]
When forking processes to do the "robustness test", the runrcx parent process
may die.  This can happen after all the subprocesses have been forked, or
only some of them.  With the parent dead, there is nobody around to kill the
subprocesses, and the test just goes on forever.
I'm not sure that the parent process is really dying, or just mistaking itself
for a subprocess.  If my memory serves, the df listing showed N-1 subprocesses
whose PPID was the Nth subprocess.
Unfortunately this is not reliably reproducible.
Added field Transarc Deltas with value `' 
Added field Transarc Herder with value `jaffe@transarc.com' 
Added field Transarc Status with value `open'

[1/5/94 public]
Defer to 1.1.



CR Number                     : 9630
Defect or Enhancement?        : enh
CR in Code, Doc, or Test?     : test
Inter-dependent CRs           : 
Project Name                  : dce
H/W Ref Platform              : all
S/W Ref Platform              : all
Component Name                : dfs
Subcomponent Name             : admin
Short Description             : admin_checklist improvements
Reported Date                 : 12/17/93
Found in Baseline             : 1.0.3a
Found Date                    : 12/17/93
Severity                      : D
Priority                      : 3
Status                        : open
Duplicate Of                  : 
Fix By Baseline               : 1.2
Fixed In Baseline             : 
Affected File(s)              : test/systest/admin/file/tests/admin_checklist
Diff supplied by              : 
Diff release                  : 
Sensitivity                   : public

[12/17/93 public]

- Extra credit if you actually try/include repeating an aggrid on a
different and then the same machine to see if uniqueness is enforced
at all!

- Before example dfstab line:

The "ufs" field is correct for all native filesystems, including jfs
and hfs.

syncserv example could be improved (newaggr w/o deleting filesets
to create mismatch(

growaggr example could be improved - rios can support this.

[01/13/94 public]
Also ...
For synfldb, use fts delfldbentry to create mismatch.

[01/14/94 public]
Hmm -
Suggestion for syncserv may not be correct - newaggr'ing a detached
aggregate without having deleted its fileset first, then doing
a syncserv, only caused the mismatches to be reported - not corrected -
check docs for expected behavior.

[01/16/94 public]
For the cm setsetuid instructions, it would be useful to do "ls -l" commands
in the directory to show the change in permission bit view w/r/to
cm setsetuid states. Also, the vmstat example isn't valid for HP
platform - vmstat execution isn't sensitive to the "s" bit - remsh
execution is - but I haven't gotten the test to work with this yet either,
blocked until 9552 in?

[01/17/94 public]
The acl portion should include the umask of the current
user (and the info that the permission bits and acls of files
and directories are the result of filtering the initial object
and container acls through the umask). This omission bumps this
CR to a B2 defect rather than the lower sev/pri enh it was.

[01/17/94 public]
New info - old mount points are NOT meant to work with new fileset
names (ie. fts rename invalidates old mount points). Update fts
rename section accordingly.

[01/18/94 public]
Partial fix submitted to 103a:
# Revision 1.1.8.2  94/01/18  18:43:35  gmd
#       Partial fix for 9630:
#               - mention "ufs" valid for all native filesystems
#               in dfstab
#               - delfldbentry to set up for syncfldb
#               - ls -l's in cm setsetuid
#               - umask mentioned and shown in acl section
#               - old mount points no good after fts rename

SO ... that leaves:
	- aggrid uniqueness testing
	- improving growaggr example
	- improving syncserv example (if possible)

Note that automating this checklist is a higher priority than making
these additions. Returning this to an enhancement request since
errors corrected with submission.

[01/26/94 public]
Instructions for disabling flservers and file servers should use
bos shutdown -wait and bos delete.



CR Number                     : 9605
Defect or Enhancement?        : def
CR in Code, Doc, or Test?     : test
Inter-dependent CRs           : 
Project Name                  : dce
H/W Ref Platform              : rs6000
S/W Ref Platform              : aix
Component Name                : dfs
Subcomponent Name             : fts test20
Short Description             : fts test20 has two E35 assertions
Reported Date                 : 12/10/93
Found in Baseline             : 1.0.3
Found Date                    : 12/10/93
Severity                      : E
Priority                      : 4
Status                        : open
Duplicate Of                  : 
Fix By Baseline               : 1.1
Fixed In Baseline             : 
Affected File(s)              : 
Diff supplied by              : 
Diff release                  : 
Sensitivity                   : public
Transarc Deltas               : 
Transarc Herder               : 
Transarc Status               : open

[12/10/93 public]
fts test20 has two E35 assertions and an E35.1. They should be changed
to E35, E35.1, and E35.2.
Added field Transarc Deltas with value `' 
Added field Transarc Herder with value `' 
Added field Transarc Status with value `open'

[12/13/93 public]
Changed CR in Code, Doc, or Test? from `code' to `test'

[12/13/93 public]
Assigning to myself as a placeholder.  Changing state to defer.



CR Number                     : 9414
Defect or Enhancement?        : enh
CR in Code, Doc, or Test?     : code
Inter-dependent CRs           : 
Project Name                  : dce
H/W Ref Platform              : hppa
S/W Ref Platform              : hpux
Component Name                : dfs
Subcomponent Name             : 
Short Description             : dce_krpc unable to resolve dfs_icl_printf at kload
Reported Date                 : 11/9/93
Found in Baseline             : 1.0.3
Found Date                    : 11/9/93
Severity                      : D
Priority                      : 4
Status                        : open
Duplicate Of                  : 
Fix By Baseline               : 1.1
Fixed In Baseline             : 
Affected File(s)              : 
Diff supplied by              : 
Diff release                  : 
Sensitivity                   : public
Transarc Deltas               : 
Transarc Herder               : 
Transarc Status               : 

[11/9/93 public]
To make krpc icl trace work for the HP port I have done the following
porting work.
	* In src/file/kutils create HPUX and copy src/file/kutils/OSF1/Makefile
	  to it so that the krpc_dbg command can be built in 
	  obj/hp800/file/kutils.
  	* In src/rpc/kruntime/HP800, modify the following line in sysconf.h
	  
		old: #define rpc__printf printf
		new: #define rpc__printf dfs_icl_printf
	*  Rebuild the whole kruntime to get new dce_krpc.ext
	* Add the following line in rc.dfs after all kloads:
		krpc_dbg on -log cmfx -level <rpc debug level>
	  This will make krpc active in dfstrace. 
The BUG of this porting is that dfs_icl_printf cannot be resolved at the kload
time of dce_krpc.ext as this symbol is defined in dce_core.ext.
	   
Note that I have found another potential bug regarding the setting of 
"rpc debug level". When set to 0-3.5 the system crashed with 
rpc "FATAL ERROR" at rpctimer.c/538. This bug will be filed later. 
Try something else  without 1.

[11/11/93 public]
The problem described in this defect is not a standard, supported
feature of DFS (it was only implemented for the OSF/1 port).  So,
Transarc has no plans to do anything about it should it be reassigned
to us as per Bob Hathaway's 11/10/93 mail.  If this is critical for
your testing, Jean, please find someone there or at HP to do this for
you in a private build.  If not, please cancel it.
Added field Transarc Deltas with value `' 
Added field Transarc Herder with value `' 
Added field Transarc Status with value `'

[11/12/93 public]

I am not looking for major porting here for 1.0.3a.

Daryl told me that HP may have a dynamic way to resolve dfs_icl_printf.

[12/10/93 public]
Change to enhancement.  Defer to 1.1.  Change responsible engineer 
to Jean for tracking purposes.



CR Number                     : 9303
Defect or Enhancement?        : def
CR in Code, Doc, or Test?     : code
Inter-dependent CRs           : 
Project Name                  : dce
H/W Ref Platform              : all
S/W Ref Platform              : all
Component Name                : dfs
Subcomponent Name             : 
Short Description             : dfs_config is missing log messages.
Reported Date                 : 11/1/93
Found in Baseline             : 1.0.3
Found Date                    : 11/1/93
Severity                      : C
Priority                      : 3
Status                        : open
Duplicate Of                  : 
Fix By Baseline               : 1.1
Fixed In Baseline             : 
Affected File(s)              : 
Diff supplied by              : 
Diff release                  : 
Sensitivity                   : public

[11/1/93 public]

Someone put a whole bunch of code in the config_dfsfldb function without
log messages.  Due to the wonders of ODE, I can't quite figure out who did
it, but it might have been Tom Jordahl.  We happen to be having some
trouble with this area of the code and it is annoying not to have the log
messages to see exactly what is going on.

[11/01/93 public]
Wan't me, and besides, whatever logging there is or is not in dfs_config
came from HP.  (Check with Jack Danahy)

[12/29/93 public]
Re-assign to Andy Mckeen.



CR Number                     : 9266
Defect or Enhancement?        : enh
CR in Code, Doc, or Test?     : test
Inter-dependent CRs           : 
Project Name                  : dce
H/W Ref Platform              : rs6000,hppa
S/W Ref Platform              : aix,hpux
Component Name                : dfs
Subcomponent Name             : test
Short Description             : acl tests don't clean up on failure
Reported Date                 : 10/26/93
Found in Baseline             : 1.0.3
Found Date                    : 10/26/93
Severity                      : C
Priority                      : 3
Status                        : open
Duplicate Of                  : 
Fix By Baseline               : 1.2
Fixed In Baseline             : 
Affected File(s)              : test/file/acl/scripts/common/init.sh
Diff supplied by              : 
Diff release                  : 
Sensitivity                   : public

[10/26/93 public]
when running acl tests in chocell you cannot cleanly stop the
tests and restart without performing an acl_edit on the various
levels of the scratch dir, if a single interation of the acl
tests fail they will likely never pass again as the scratch
dirs are left without sufficient permissions for the init.sh
script to remove the dirs...

this is easy to produce, start the acl tests, once the full
scratch tree has been created and the various sub tests are
running, kill em off and try to rm -rf the scratch dir...

[12/23/93 public]
Deferring to 1.1.

[7/6/94 public]
Deferring to 1.2 ... changing to an enhancements since, like low
tests, sometimes you'll want the stuff left around, sometimes not.



CR Number                     : 9265
Defect or Enhancement?        : enh
CR in Code, Doc, or Test?     : test
Inter-dependent CRs           : 
Project Name                  : dce
H/W Ref Platform              : rs6000,hppa
S/W Ref Platform              : hpux,aix
Component Name                : dfs
Subcomponent Name             : test
Short Description             : low tests always dump core on failure
Reported Date                 : 10/26/93
Found in Baseline             : 1.0.3
Found Date                    : 10/26/93
Severity                      : D
Priority                      : 3
Status                        : open
Duplicate Of                  : 
Fix By Baseline               : 1.2
Fixed In Baseline             : 
Affected File(s)              : test/file/low/prog*.c files
Diff supplied by              : 
Diff release                  : 
Sensitivity                   : public
Transarc Deltas               : 
Transarc Herder               : 
Transarc Status               : 

[10/26/93 public]
the low tests prog3a,b,c and prog9, prog13, prog14 all dump
low.prog*.kernel.dump.pid files causing the disk to become  
full when chocell testing 
these tests should have a switch passed which enables/disables
the creation of these files verses a 'rebuild' of the low progs

[10/27/93 public]
this is a good idea for an enhancement
Changed Defect or Enhancement? from `def' to `enh' 
Added field Transarc Deltas with value `' 
Added field Transarc Herder with value `' 
Added field Transarc Status with value `'

[3/30/94 public]
We're looking at this in 1.1

[7/6/94 public]
Sorry - probably not making the cut - deferred to 1.2



CR Number                     : 9134
Defect or Enhancement?        : def
CR in Code, Doc, or Test?     : code
Inter-dependent CRs           : 8687
Project Name                  : dce
H/W Ref Platform              : hppa
S/W Ref Platform              : hpux
Component Name                : dfs
Subcomponent Name             : 
Short Description             : problems with /.:
Reported Date                 : 10/15/93
Found in Baseline             : 1.0.2
Found Date                    : 10/15/93
Severity                      : C
Priority                      : 2
Status                        : open
Duplicate Of                  : 
Fix By Baseline               : 1.2
Fixed In Baseline             : 
Affected File(s)              : 
Diff supplied by              : 
Diff release                  : 
Sensitivity                   : public
Transarc Deltas               : 
Transarc Status               : 

[10/15/93 public]
This is a place holder from CR 8687 discussing any new problems found from
the choice of /.: and /: as shorthand names for interactive use.  This CR
is being used as a place holder for all the information that has gone
around in some mail messages.  All discussions should take place here from
now on.
make has a problem (the dce make) when the current working directory has a
: in it.  The following is from Jim Wade:
  This problem appeared when make was using the
  pwd function to resolve the path of a source file from
  the backing tree.  It conflicted with the VPATH internal
  variable and when parsing the directory it hit the : and
  thought it was a seperator for another part of the VPATH
  and got very confused.
  
  This also will cause a problem on OS/2 systems since the
  ":" character is used as a drive seperator.  
  
  I was told at the time to use a symbolic link and not to 
  use "cd /:/project/dce/build" when building so that make
  would not mis-interpret the ":".  The ":" was not in the
  VPATH but was mis-interpreted when parsing the current
  path to resolve the link to a file.
  At no time did I use : in a path or put it in a Makefile.  The only thing
  I did was to "cd /:/project/dce/build/test" and try to build the system
  with ODE.  
Also the ksh problem seems to occur on a variety of systems (although
exactly which seems to be an issue).  It has been seen on AIX, HP/UX and
Solaris.  Again from Jim Wade:
  The ksh problem does occur on an AIX system.  The problem
  only seems to occur if you try to make a shell script 
  be executable with chmod and with the "#!/bin/ksh" variable
  as the first line.
  In the case of the ksh issue I tried to execute a ksh shell 
  script with "/.:/fs/foo.sh" or "/:/foo.sh" and the shell script was an
  executable script.
  The problem is not only with ksh on the HP platform but also on the AIX
  platform, otherwise I would not have raised the issue.  The problem comes
  when a shell script is exec'ed from the ksh the ksh uses the $PWD internal
  variable to pass to the exec system call so that exec() can find the
  path.  This may be particular to ksh but I would think that other user
  programs may do the same thing.  The reason that ksh does this is to 
  save time traversing the tree back to the root of the filesystem to
  find the real path to the program.
This is from Craig Everhart:
  FYI, ksh exhibits this property on Solaris as well.  On RS/6000, it
  works normally, but if I set an environment variable PWD to contain the
  working directory and if $PWD contains a colon, ksh fails (but sh and
  csh succeed).  Looks like a ksh bug to me, that it (and it alone)
  mis-interprets $PWD if $PWD contains a colon.
  
  I bet ksh would fail on OSF/1 or any other platform with a colon in
  $PWD, with or without DFS.  In fact, I just verified this on an Ultrix
  box.

[8/24/94 public]
I don't believe this is a Config problem, it is more importantly
a DFS issue.
If I recall, the OSF/1 team did warn the DCE team (correctly) about
using ':' in DFS pathnames.  The quote "..a really *BAD* idea." floats
in to my mind.
So moving this over to the dfs component and assigning it to Ron Arbo,
who I believe will be around for 1.2.

[8/31/94 public]
We ran into this during internal use at Transarc.  After some experimentation,
we found the ksh problem on our AIX boxes (AIX 3.2.?), but not on our
Solaris 2.3 boxes.  Perhaps Sun fixed their ksh between Solaris 2.2 and
Solaris 2.3?  I don't have HP/UX boxes running DFS available for this
experiment, but I tried it out on another file system.  I believe that the ksh
on our HP/UX (HP/UX 9.0) has a problem with :, but if the name containing
the : is a symbolic link, ksh does the right thing, and so it is possible
to run ksh scripts from DFS.  This summary of experimental results should be
taken with a grain of salt, since any new release or patch of an OS can bring
with it a new ksh.
.
Our particular situation was that we were trying to run one of OSF's system-test
scripts, src/test/systest/file/dfs.glue, under tcsh.  dfs.glue is a ksh script.
tcsh sets the PWD variable, and ksh gets confused by the setting.  Since this
problem makes AIX DFS "allergic" to ksh scripts, it seems imprudent to have
ksh scripts in the test suite, but I have to admit that nobody had considered
this a problem until now.
Added field Transarc Deltas with value `' 
Added field Transarc Status with value `'

[9/2/94 public]
The work-around, as described above by Jim Wade, is to "use a symbolic link".
: and .: are, in fact, symbolic links, so the more accurate thing to say is
"use an alternate symbolic link".
.
Evidently, both cell administrators and individual workstation root users can
use this work-around.  I have observed this being done, as has Jim Wade.
.
The difference in this case between a work-around and a "fix" is that a "fix"
would involve adding support for alternate symbolic links in the configuration
scripts.  That is, additional symbolic links would be created at configuration
time.  The advantage of this would be the same as the advantage of creating
: and .:, namely, that it would be done automatically on every configured
workstation, rather than being left to human intervention.  All workstations
that used the same configuration script could be assured of having the same
symbolic links.
.
Since different vendors have gone their separate ways with configuration
scripts, it can no longer be guaranteed that a "fix" for this bug by OSF will
be propagated to all the relevant platforms.  However, it is clearly desirable
that cell administrators should be able to ensure that all workstations in a
cell use the same symbolic links, regardless of platform.  Thus, different
vendors may need to standardize to some degree, on the support provided for
alternate symbolic links.  This note is a reminder that Transarc is interested
in the outcome of OSF's deliberations on this problem.
Changed Interest List CC from `walt, dmackey, jwade@austin.ibm.com, 
 Craig_Everhart@transarc.com' to `walt, dmackey, jwade@austin.ibm.com, 
 Craig_Everhart@transarc.com, bwl@transarc.com'



CR Number                     : 8872
Defect or Enhancement?        : enh
CR in Code, Doc, or Test?     : code
Inter-dependent CRs           : 
Project Name                  : dce
H/W Ref Platform              : all
S/W Ref Platform              : all
Component Name                : dfs
Subcomponent Name             : tkc
Short Description             : tkc not 64-bit ready
Reported Date                 : 9/29/93
Found in Baseline             : 1.0.2a
Found Date                    : 9/29/93
Severity                      : D
Priority                      : 3
Status                        : open
Duplicate Of                  : 
Fix By Baseline               : 1.1
Fixed In Baseline             : 
Affected File(s)              : 
Diff supplied by              : 
Diff release                  : 
Sensitivity                   : public

[9/29/93 public]

In tkc, "struct tkc_sets" defines byteRangep as a pointer to an
afsHyper.  The lower 32 bits of the hyper is used to store the
beginning of the range, and the upper 32 bits is used for the end of
the range.  This is clearly not sufficient to support 64-bit file
ranges.  What we have done in the Alpha AXP port is to redefine
byteRabgep to be a structure containing two hypers, one each for the
begin and end range boundaries.  References to byteRangep in the tkc
code were changed to reflect this.

[10/8/93 public]
Assigning to myself so it doesn't fall through the cracks.  Changing
to enhancement and changing fixby to 1.1.  Steve, this is going 
to require further escalation through management if your goal
was to get this addressed in 1.0.3.  Please contact me out of
band if that is the case.  Thx.



CR Number                     : 8663
Defect or Enhancement?        : enh
CR in Code, Doc, or Test?     : test
Inter-dependent CRs           : 
Project Name                  : dce
H/W Ref Platform              : all
S/W Ref Platform              : all
Component Name                : dfs
Subcomponent Name             : systest
Short Description             : restructure directory
Reported Date                 : 9/22/93
Found in Baseline             : 1.0.3
Found Date                    : 9/22/93
Severity                      : E
Priority                      : 3
Status                        : open
Duplicate Of                  : 
Fix By Baseline               : 1.2
Fixed In Baseline             : 
Affected File(s)              : 
Diff supplied by              : 
Diff release                  : 
Sensitivity                   : public

[9/22/93 public]

Enhancement request to restructure the dfs system tests into multiple
directories. This will make file-test relations more obvious and ease
TET'izing.

Proposed subdirectories are:

glue	stress	checklists	rwall	lock	common

where

glue would contain:
dfs.glue
dirread.c
dirwrite.sh

stress would contain:
dfs.maxdir
dfs.maxfile
dfs.block_frag

checklists would contain checklists

rwall would contain:
dfs.read_write_all.main
do.ksh
profile
README.RWALL

lock would contain:
dfs.lock

common would contain:
filewnr.c
check_RC.ksh

Ideas/comments welcome.

[12/1/93 public]
Status changed to defer to indicate fixby field = 1.1 intentional.

[7/6/93 public]
Deferring for now - MAY be able to get to this one in 1.1 but
not a priority ...



CR Number                     : 7984
Defect or Enhancement?        : enh
CR in Code, Doc, or Test?     : code
Inter-dependent CRs           : 
Project Name                  : dce
H/W Ref Platform              : all
S/W Ref Platform              : all
Component Name                : dfs
Subcomponent Name             : kutils/*/syscall.c
Short Description             : out of range vs. unimplemented treated differently
Reported Date                 : 5/12/93
Found in Baseline             : 1.0.2
Found Date                    : 5/12/93
Severity                      : C
Priority                      : 2
Status                        : open
Duplicate Of                  : 
Fix By Baseline               : 1.1
Fixed In Baseline             : 
Affected File(s)              : 
Diff supplied by              : 
Diff release                  : 
Sensitivity                   : public
Transarc Status               : 
Transarc Deltas               : 
Transarc Herder               : 

[5/12/93 public]
Out of range AFS calls return -1/EINVAL
In range, but unimplemented AFS calls return -1/ENOSYS
This means that when the system call table is extended, any user space
wrappers will have to deal with both EINVAL and ENOSYS as meaning "not
implemented".
This was noticed by Doug Robinson @ HP; it's in machine-specific code, but
it's the same in all implementations he looked at....
Also, Doug thinks that unimplemented calls should also do a psignal(...,
SIGSYS) to make it absolutely clear to user space that the system call is
unimplemented, as if it were in the real system call table, if that's the
intent..

[5/12/93 public]
Assign it to Pervaze so it doesn't fall through the cracks.

[9/28/93 public]
After talking to Elliot, make it as an enhnacement for the future. 
So marked. 
Changed Defect or Enhancement? from `def' to `enh' 
Changed Responsible Engr. from `pakhtar@transarc.com' to `tu@transarc.com' 
Added field Transarc Deltas with value `' 
Added field Transarc Herder with value `' 
Added field Transarc Status with value `'

[3/30/94 public]
We're looking at this in 1.1



CR Number                     : 7960
Defect or Enhancement?        : enh
CR in Code, Doc, or Test?     : test
Inter-dependent CRs           : 8005
Project Name                  : dce
H/W Ref Platform              : all
S/W Ref Platform              : all
Component Name                : dfs
Subcomponent Name             : dacl
Short Description             : Need a regression test to ensure existence of mask_obj when necessary
Reported Date                 : 5/7/93
Found in Baseline             : 1.0.2a
Found Date                    : 5/7/93
Severity                      : C
Priority                      : 2
Status                        : open
Duplicate Of                  : 
Fix By Baseline               : 1.1
Fixed In Baseline             : 
Affected File(s)              : 
Diff supplied by              : 
Diff release                  : 
Sensitivity                   : public
Transarc Status               : open
Transarc Deltas               : 
Transarc Herder               : jaffe@transarc.com

[5/7/93 public]
The mask_obj entry is not set in the ACL for the file created by the
unauthenticated user even though the ACL has a foreign_other entry.
POSIX specifies that a mask_obj entry always has to be present in an
ACL with more that just user_obj, group_obj and other_obj entries.
Added field Transarc Deltas with value `' 
Added field Transarc Herder with value `jaffe@transarc.com' 
Added field Transarc Status with value `open'

[5/10/93 public]
I'd like to add that the salvager should report such errors but
apparently does not.  The salvager used the same function to validate
ACLs as the setacl call does it so this means that
dacl_epi_ValidiateBuffer should do these additional checks.

[5/17/93 public]
Since the model is now to use other_obj in an initial ACL only as a template
as described under OT 8005, a foreign_other is no longer added into
the ACL for a file/dir created by a foreign user unless the initial ACL
explicitly specifies so. And in that case the initial ACL will always have
a mask_obj entry too, which will be inherited correctly. Hence
we no longer need to modify dacl_ChangeRealm to create a mask_obj
as it will no longer be called upon to convert a other_obj to foreign_other.
But dacl_epi_ValidateBuffer still needs modification to ensure that mask_obj
is present when there is any entry other than the {user,group,other}_obj.
Under OT 8005, dacl_epi_ValidateBuffer has been fixed to do this. I will
add a regression test into the test_vnodeops test suite to test this.
Filled in Inter-dependent CRs with `8005'

[5/17/93 public]
Convert this into a test enhancement request for the regression test.
Changed Defect or Enhancement? from `def' to `enh' 
Changed CR in Code, Doc, or Test? from `code' to `test' 
Changed Short Description from `The ACL for a file created by an 
 unauthenticated user does not have mask_obj.' to `Need a regression test to 
 ensure existence of mask_obj when necessary' 
Changed Severity from `B' to `C' 
Changed Priority from `1' to `2'



CR Number                     : 7734
Defect or Enhancement?        : enh
CR in Code, Doc, or Test?     : code
Inter-dependent CRs           : 
Project Name                  : dce
H/W Ref Platform              : pmax
S/W Ref Platform              : osf1
Component Name                : dfs
Subcomponent Name             : 
Short Description             : delmount/crmount permissions
Reported Date                 : 4/15/93
Found in Baseline             : 1.0.2b23
Found Date                    : 4/15/93
Severity                      : B
Priority                      : 2
Status                        : open
Duplicate Of                  : 
Fix By Baseline               : 1.1
Fixed In Baseline             : 
Affected File(s)              : 
Diff supplied by              : 
Diff release                  : 
Sensitivity                   : public
Transarc Status               : open
Transarc Deltas               : 
Transarc Herder               : jaffe@transarc.com

[4/15/93 public]
As unix user root, DCE principal hosts/<machine>/self, I'm able to 
fts delmount a mount point I'm not authorized to create - I shouldn't
be able to delete it in the first place then, right?
 
root@dce12> fts delmount -dir /:/epi_1
root@dce12> ls /:
dce12_u3
root@dce12> fts crmount -dir /:/epi_1 -fileset epi.1
fts crmount: error making mount point for /:/epi_1: Permission denied
root@dce12> klist
DCE Identity Information:
        Global Principal: /.../p102_cell.qadce.osf.org/hosts/dce12/self

[4/16/93 public]
Mike's going to have to speak to the permission issue here.
Changed Responsible Engr. from `pakhtar' to `kazar' 
Added field Transarc Deltas with value `' 
Added field Transarc Herder with value `jaffe@transarc.com' 
Added field Transarc Status with value `open'

[4/26/93 public]
Mike explained why crmount deserves "c" permission - a cell's file namespace
can get pretty crazy otherwise. He said he could be convinced that delmount
ALSO deserves "c" permission - which is what I'd like to see. Please consider
this OT a request to make the delmount/crmount permissions equal by requiring
"c" privilege to delmount, just as it is currently required to crmount.

[4/26/93 public]
When Mike explained his reasoning on this difference to me back in February,
I thought his explanation made good sense.  Basically, you don't want someone
creating a mount point in a directory that you control.  Conversely, you may
want to delete a mount point for which you don't have the control permission
(for example, were an unwanted mount point to somehow be created in a directory
that I control, I may want to get rid of it).
I'm usually very big on consistency, but this difference doesn't bother me.
I would rather it be canceled than made an enhancement.  Either way, as its
outcome affects me, I am including myself on its cc list.
Filled in Interest List CC with `jeff@transarc.com'

[4/27/93 public]
Sorry, my last explanation is misleading at best.  Essentially, it's more
important that a user not be able to create a mount point without c permission
than that the user not be able to delete a mount point without c permission.
I don't want someone creating a mount point in a directory in which they should
be able only to insert actual data. The consistency question is probably a
reasonable one, but I still believe that it is not very important; perhaps
leaving this an enhancement is a reasonable request.  Sorry for my inadvertent
confusion.

[4/23/93 public]
Changed to an enhancement request. This has always been a "2" so I've left
the priority alone.



CR Number                     : 7594
Defect or Enhancement?        : enh
CR in Code, Doc, or Test?     : code
Inter-dependent CRs           : 8614
Project Name                  : dce
H/W Ref Platform              : all
S/W Ref Platform              : all
Component Name                : dfs
Subcomponent Name             : fts
Short Description             : Need a general aggregate-import tool
Reported Date                 : 3/25/93
Found in Baseline             : 1.0.2
Found Date                    : 3/25/93
Severity                      : C
Priority                      : 3
Status                        : open
Duplicate Of                  : 
Fix By Baseline               : 1.1
Fixed In Baseline             : 
Affected File(s)              : 
Diff supplied by              : 
Diff release                  : 
Sensitivity                   : public
Transarc Status               : 
Transarc Deltas               : 
Transarc Herder               : 

[3/25/93 public]
This CR is the result of a discussion of the limitations of syncfldb
(see CR 7526). This enhancement request is for a tool that would allow
dfs system administrators to add lfs aggregates to a dfs cell and
maintain the existing filesets on the aggregate. This would be a useful
tool when creating new cells or when moving a lfs aggregate from one
cell to another.
Currently, the only way to add a lfs aggregate and its filesets to a
dfs cell is to:
	- tar together the contents of the filesets on a disk
	- clean it completely with ``newaggr''
	- re-create the filesets with ``fts create'
	- restore the non-ACL contents of the filesets via tar
Some known problems that will be faced by this tools are:
	- cell UUIDs are store in ACLs, therefore tool would have to
	translate arbitrary ACLs OR strip them OR replace them somehow
	- potential fileset id conflicts with existing filesets in the cell
	- potential fileset name conflicts with existing filesets in the cell

[8/27/93 public]
defer -> open - Can this one be addressed in the 1.1 timeframe? Can the
work be done in such a way that a single fileset can be moved from one
cell to another?

[3/29/94 public]
Dup'ing 8618 to this one.  There's extended discussion in OT 8618, so you
might want to refer to it when fixing this.
Filled in Inter-dependent CRs with `8614' 
Changed Priority from `2' to `3' 
Changed Responsible Engr. from `jaffe' to `pakhtar'



CR Number                     : 7495
Defect or Enhancement?        : enh
CR in Code, Doc, or Test?     : code
Inter-dependent CRs           : 
Project Name                  : dce
H/W Ref Platform              : all
S/W Ref Platform              : all
Component Name                : dfs
Subcomponent Name             : tkc
Short Description             : tkc hoards vnodes
Reported Date                 : 3/15/93
Found in Baseline             : 1.0.2
Found Date                    : 3/15/93
Severity                      : B
Priority                      : 2
Status                        : open
Duplicate Of                  : 
Fix By Baseline               : 1.1
Fixed In Baseline             : 
Affected File(s)              : xvfs_vnode.h
Diff supplied by              : 
Diff release                  : 
Sensitivity                   : public
Transarc Status               : 
Transarc Deltas               : 
Transarc Herder               : 

[3/15/93 public]

The token cache retains references to vnodes forever, releasing
vnodes only when token cache entries must be recycled.  There
should be some backpressure mechanism applied by a background
process, so that vnodes referenced by the token cache but not
referenced recently will eventually be returned to the vnode free list.

Currently the number of vcache entries is configured at 96, which
is small relative to the total number of vnodes, but it still makes
sense to return those 96 vnodes to general use if access thru the glue 
is not part of the current usage pattern on the file server.

[3/15/94 public]
Assigned to Mike to determine relevance to small resource effort.



CR Number                     : 7409
Defect or Enhancement?        : enh
CR in Code, Doc, or Test?     : code
Inter-dependent CRs           : 
Project Name                  : dce
H/W Ref Platform              : rs6000
S/W Ref Platform              : aix
Component Name                : dfs
Subcomponent Name             : lfs
Short Description             : VMM coalescing code is holding priority too high
Reported Date                 : 3/3/93
Found in Baseline             : 1.0.2
Found Date                    : 3/3/93
Severity                      : C
Priority                      : 2
Status                        : open
Duplicate Of                  : 
Fix By Baseline               : 1.1
Fixed In Baseline             : 
Affected File(s)              : 
Diff supplied by              : 
Diff release                  : 
Sensitivity                   : public
Transarc Status               : open
Transarc Deltas               : 
Transarc Herder               : 

[3/3/93 public]
While looking at 7372, I found that this code uses i_disable(INTMAX) rather
than the more conservative i_disable(INTPAGER) which should be used.
Added field Transarc Deltas with value `' 
Added field Transarc Status with value `open'

[3/23/93 public]
This doesn't cause a bug, but is rather something of poor form.  Marking as an
enhancement request.
Changed Defect or Enhancement? from `def' to `enh' 
Changed Interest List CC from `bwl' to `ota' 
Changed Responsible Engr. from `mason@transarc.com' to `bwl@transarc.com'



CR Number                     : 7394
Defect or Enhancement?        : enh
CR in Code, Doc, or Test?     : code
Inter-dependent CRs           : 
Project Name                  : dce
H/W Ref Platform              : all
S/W Ref Platform              : all
Component Name                : dfs
Subcomponent Name             : cm
Short Description             : no support for device spec files
Reported Date                 : 3/2/93
Found in Baseline             : 1.0.2
Found Date                    : 3/2/93
Severity                      : B
Priority                      : 2
Status                        : open
Duplicate Of                  : 
Fix By Baseline               : 1.1
Fixed In Baseline             : 
Affected File(s)              : 
Diff supplied by              : 
Diff release                  : 
Sensitivity                   : public
Transarc Status               : open
Transarc Deltas               : 
Transarc Herder               : 

[3/2/93 public]
The CM needs to support transparent access to device special files
which are looked up by the CM.  i.e. /.../mycell/fs/dev/null is
not just another file.  There is some vestigial support in osi_MakeDev()
and cm_MakeDev(), but only for AFS_VFS40.  The CM lookup vnode operation
also needs to call the kernel specvp() routine somewhere.

[3/3/93 public]
This issue has come up (multiple times) of late.  It really is an
enhancement request.  While on this subject, you should note the
recent bug opened noting that you cannot dump/restore device files,
either.
I'll assign to kazar; the CC list is long because we do, at some
point, have to address this issue.
Changed Defect or Enhancement? from `def' to `enh' 
Filled in Interest List CC with `mason,cfe,tu,ota,pakhtar' 
Changed Responsible Engr. from `mason' to `kazar' 
Added field Transarc Deltas with value `' 
Added field Transarc Status with value `open'



CR Number                     : 7363
Defect or Enhancement?        : enh
CR in Code, Doc, or Test?     : code
Inter-dependent CRs           : 
Project Name                  : dce
H/W Ref Platform              : all
S/W Ref Platform              : all
Component Name                : dfs
Subcomponent Name             : 
Short Description             : System-dependent VOP_SETATTR() setup done in "portable" code
Reported Date                 : 2/25/93
Found in Baseline             : 1.0.2
Found Date                    : 2/25/93
Severity                      : C
Priority                      : 3
Status                        : open
Duplicate Of                  : 
Fix By Baseline               : 1.1
Fixed In Baseline             : 
Affected File(s)              : 
Diff supplied by              : 
Diff release                  : 
Sensitivity                   : public
Transarc Status               : 
Transarc Deltas               : 
Transarc Herder               : 

[2/25/93 public]
This difficulty was encountered in testing the OSF/1 volops code.  Both
the fts restore code and (less importantly) volclient try to guess what
fields in a vattr struct cannot be set by the local VOP_SETATTR
operation, and disable these fields before making a VOLOP_SETATTR
call.  This doesn't work well when they guess wrong (as was the case
under OSF/1).
Craig Everhart suggests that the disabling of vattr fields be left to
system-specific VOLOP_SETATTR code, which can be customized to fit each
platform.  The OSF/1 VOLOP_SETATTR implementation has already been
changed to disable exactly the fields that VOP_SETATTR can't alter.
The same change should be made to the RIOS VOLOP_SETATTR, and the
non-portable disabling of vattr fields should be removed from fts
restore and volclient.

[3/15/93 public]
Filled in Interest List CC with `cfe@transarc.com, pakhtar@transarc.com' 
Changed Responsible Engr. from `pakhtar@transarc.com' to `jdp@transarc.com' 
Added field Transarc Deltas with value `' 
Added field Transarc Herder with value `' 
Added field Transarc Status with value `'



CR Number                     : 7193
Defect or Enhancement?        : enh
CR in Code, Doc, or Test?     : doc
Inter-dependent CRs           : 
Project Name                  : dce
H/W Ref Platform              : all
S/W Ref Platform              : all
Component Name                : dfs
Subcomponent Name             : admin_gd
Short Description             : need DFS admin picture
Reported Date                 : 2/10/93
Found in Baseline             : 1.0.1
Found Date                    : 2/10/93
Severity                      : D
Priority                      : 3
Status                        : open
Duplicate Of                  : 
Fix By Baseline               : 1.2
Fixed In Baseline             : 
Affected File(s)              : 
Sensitivity                   : public
Transarc Deltas               : 
Transarc Herder               : 
Transarc Status               : 

[2/10/93 public]
Review comment from Howard, need a picture of DFS from the
administrator's point of view in Admin Gd - Intro, section
2.5.1 "The DCE Distributed File Service".

[6/1/93 public]
Reassigned to writer Jeff Kaminski since Jennifer is no longer at OSF.

[6/1/93 public]
The above should say 1.0.1 Admin Guide Module 1 Chapter 2 section 2.1.5
"DCE Distributed File Service" page 2-10.
I found the text description of all the different DFS servers and
components (LFS on some machines, the client side is called the "cache
manager") sufficiently long enough and complex enough for a new reader,
that a picture is probably in order to make it easier for them.  There are
already pictures in this chapter for CDS and DTS relationships, one for DFS
seems justified.

[6/18/93 public]
In reviewing the open defects and work to be performed for releases 1.0.3 and
beyond, I can with confidence state that there is really no way I will ever
get to this enhancement.  It's a good idea, but this really isn't even my
portion of the Admin Guide, and I know I won't be able to get to it.
I am reassigning it to Julie at OSF to reassign to someone else up there as she
sees fit.  I am also lowering the priority a tad (B 2 seems a bit high for an
enhancement request for an illustration).  Sorry for bouncing this request; in
light of the technical work to be done in the books for which Transarc has
direct responsibility, sending this enhancement back is the most honest
approach I can take.  Please let me know of any concerns you have with this
change.  Thanks.

[6/22/93 public]
Changed "Fix By Baseline" from 1.0.3 to 1.1.

[3/29/94 public]
Termporarily reassigning this CR back to Jeff Kaminski at Transarc
in case he can address it as part of his DCE 1.1 work.

[8/24/94 public]
Defering to 1.2.  This is a wishlist item for 1.2.
Changed H/W Ref Platform from `pmax' to `all' 
Changed S/W Ref Platform from `osf1' to `all' 
Changed Reported by from `steiner' to `steiner@osf.org' 
Filled in Interest List CC with `jeff@transarc.com' 
Changed Severity from `B' to `C' 
Changed Priority from `2' to `3' 
Changed Responsible Engr. from `jeff_kaminski@transarc.com' to 
 `buckler@osf.org' 
Changed Resp. Engr's Company from `tarc' to `osf' 
Added field Transarc Deltas with value `' 
Added field Transarc Herder with value `' 
Added field Transarc Status with value `'

[08/25/94 public]
To comply with Hal's previous comment, changed status to
"defer" and Fix By field to "1.2"

[11/8/94 public]
Changed Responsible Engr. from `jeff@transarc.com' to `wfl@transarc.com'

[7/17/95 public]
Reopened for DCE 1.2.



CR Number                     : 7125
Defect or Enhancement?        : enh
CR in Code, Doc, or Test?     : test
Inter-dependent CRs           : 
Project Name                  : dce
H/W Ref Platform              : all
S/W Ref Platform              : all
Component Name                : dfs
Subcomponent Name             : lfs
Short Description             : salt should look at salvager verify status
Reported Date                 : 2/3/93
Found in Baseline             : 1.0.2
Found Date                    : 2/3/93
Severity                      : C
Priority                      : 2
Status                        : open
Duplicate Of                  : 
Fix By Baseline               : 1.1
Fixed In Baseline             : 
Affected File(s)              : 
Diff supplied by              : 
Diff release                  : 
Sensitivity                   : public
Transarc Status               : open
Transarc Deltas               : 
Transarc Herder               : jaffe@transarc.com

[2/3/93 public]
When the salt salvager tests check the salvager's repairs, they
currently do not pay attention to the exit status returned by the
salvager.  This was in part a deliberate decision: salt reaches
its own conclusions without relying on the salvager's judgments.
However, salt only examines the small subset of file system
structures that it considers relevant to the case at hand and
therefore may miss other file system corruption, which the salvager
verify step may catch.  It seems sensible to report that a salt
test has failed whenever salvager verification fails, even if
salt's own checking does not detect any corruption.
Added field Transarc Deltas with value `' 
Added field Transarc Herder with value `jaffe@transarc.com' 
Added field Transarc Status with value `open'



CR Number                     : 7112
Defect or Enhancement?        : enh
CR in Code, Doc, or Test?     : code
Inter-dependent CRs           : 
Project Name                  : dce
H/W Ref Platform              : pmax
S/W Ref Platform              : osf1
Component Name                : dfs
Subcomponent Name             : lfs
Short Description             : spurious comparison with zero
Reported Date                 : 2/3/93
Found in Baseline             : 1.0.2
Found Date                    : 2/3/93
Severity                      : C
Priority                      : 2
Status                        : open
Duplicate Of                  : 
Fix By Baseline               : 1.1
Fixed In Baseline             : 
Affected File(s)              : 
Diff supplied by              : 
Diff release                  : 
Sensitivity                   : public
Transarc Status               : open
Transarc Deltas               : 
Transarc Herder               : jaffe@transarc.com

[2/3/93 public]
In epiv_VerifyVolume, epia_GetInfo is called and the result is compared with
zero, but the result of the comparison is thrown away.
Added field Transarc Deltas with value `' 
Added field Transarc Herder with value `jaffe@transarc.com' 
Added field Transarc Status with value `open'

[6/20/94 public]



CR Number                     : 7042
Defect or Enhancement?        : enh
CR in Code, Doc, or Test?     : code
Inter-dependent CRs           : 6874
Project Name                  : dce
H/W Ref Platform              : all
S/W Ref Platform              : all
Component Name                : dfs
Subcomponent Name             : EPISODE
Short Description             : deleting large sparse volume is VERY slow
Reported Date                 : 1/28/93
Found in Baseline             : 1.0.2
Found Date                    : 1/28/93
Severity                      : C
Priority                      : 2
Status                        : open
Duplicate Of                  : 
Fix By Baseline               : 1.1
Fixed In Baseline             : 
Affected File(s)              : 
Diff supplied by              : 
Diff release                  : 
Sensitivity                   : public
Transarc Status               : open
Transarc Deltas               : 
Transarc Herder               : jaffe@transarc.com

[1/28/93 public]
In ota-ot6874-test-very-large-indexes I added the capability to test
very large volumes.  What I didn't notice at the time was that this
added about a minute to the execution time of basic.test (from 0:30 to
1:30).  All this time now appears to be in delete volume even thought
the volume only contains 5 files at file numbers 9, 99, 999, 9999, and
99999 (plus the volume root.  I suspect I have some unexpected N^2 loops
in there.
Added field Transarc Deltas with value `' 
Added field Transarc Herder with value `jaffe@transarc.com' 
Added field Transarc Status with value `open'

[3/2/93 public]
The problem is that epit_Deflate calls truncate on each page in the VT
and requires a new transaction about every 2 truncates.  This means that
for the above VT we call truncate about 100K times and in about 50K
transactions, even though the VT container only contains about 6
allocated blocks.
The fix is to test MAPUNKNOWN pages to find the ones that are
unallocated, and truncate them in very large groups.

[9/14/93 public]
The problem is well known, but it cannot be considered as defect. 
After talking to Ted, I marked this as enhancement. 
Changed Defect or Enhancement? from `def' to `enh'

[1/24/94 public]
Changed Subcomponent Name from `lfs' to `EPISODE'



CR Number                     : 6990
Defect or Enhancement?        : enh
CR in Code, Doc, or Test?     : code
Inter-dependent CRs           : 
Project Name                  : dce
H/W Ref Platform              : all
S/W Ref Platform              : all
Component Name                : dfs
Subcomponent Name             : fts
Short Description             : fts delfldb has incorrect usage message
Reported Date                 : 1/25/93
Found in Baseline             : 1.0.2b12
Found Date                    : 1/25/93
Severity                      : D
Priority                      : 3
Status                        : open
Duplicate Of                  : 
Fix By Baseline               : 1.1
Fixed In Baseline             : 
Affected File(s)              : 
Diff supplied by              : 
Diff release                  : 
Sensitivity                   : public
Transarc Status               : 
Transarc Deltas               : 
Transarc Herder               : jaffe@transarc.com

[1/25/93 public]
The fts delfdb  comman seems to display the incorrect
usage messge:
# fts delfldb -aggregate /u1 -server nike
fts: Missing required parameter '-fileset'
# fts delfldb -aggregate /u1 -server nike -fileset nike.u1
fts delfldbentry: neither -server nor -aggregate may be used with -fileset.
# 
According to the docs, the missing required parameter should be
'-prefix' and not '-fileset'.

[1/26/93 public]
The usage message is determined by the command package, and I'd guess that
the missing parameter message is also generated by the command package.
If that is true, then there may not be any way to fix the problem without 
enhancing the command parser and how it represents the syntax.
Vijay and Dave can provide a reliable diagnosis when they get to this defect.
Filled in Interest List CC with `davecarr@transarc.com, pakhtar@transarc.com' 
Changed Responsible Engr. from `pakhtar@transarc.com' to `vijay@transarc.com' 
Added field Transarc Deltas with value `' 
Added field Transarc Herder with value `' 
Added field Transarc Status with value `'

[3/16/93 public]
The problem here is that the command parser is printing this message.
There is no way to specify to the parser that certain groups of
options belong together, so the command parser doesn't know that if
-server is specified, only -prefix is allowed.  Here are the possible
things to do:
	1) fix the command parser.  This can't be done without adding
	a lot of complexity to the command parser.
	2) reverse the order of -fileset and -prefix.  While this
	would make the command parser print out the right message in
	the -server/-aggregate case, it would require that "-fileset"
	is used in the ``normal'' case.   This could let you
	accidentally delete more entries than you really want.
	3) make the options both optional and handle the processing by
	hand.  This means that the syntax printer would now print:
Usage: fts delfldbentry  [{-fileset {<name> | <ID>} | -prefix <string>}]
instead of:
Usage: fts delfldbentry  {-fileset {<name> | <ID>} | -prefix <string>}
	Not right but not that bad.
I don't think the problem is bad enough to do 1), and I think 2) is
too dangerous.  So, I'd say either cancel the defect or do 3).

[8/31/93 public]
Mark it as enhancement. This also affects the document. 
Changed Defect or Enhancement? from `def' to `enh' 
Changed H/W Ref Platform from `pmax' to `all' 
Changed S/W Ref Platform from `osf1' to `all' 
Changed Interest List CC from `davecarr@transarc.com, pakhtar@transarc.com' to 
 `davecarr@transarc.com, comer@transarc.com, tu@transarc.com, 
 pakhtar@transarc.com' 
Filled in Transarc Herder with `jaffe@transarc.com'

[9/1/93 public]
Tu is correct, this does affect the documentation; thanks, Tu!
 
Anyway, I think Mike's assessment is correct.  We can leave the command as is,
in which case the command parser generates a spurious error message in the
case where the user inadvertently types the command incorrectly; or we can
provide a syntax line that strongly implies that two options, one of which
is required, are both optional, which really leads the user to type the
command incorrectly in the first place.  I agree that neither case is
optimal, but I would vote for the former approach (leaving the command as
is), especially given our current development constraints.



CR Number                     : 6963
Defect or Enhancement?        : enh
CR in Code, Doc, or Test?     : code
Inter-dependent CRs           : 
Project Name                  : dce
H/W Ref Platform              : all
S/W Ref Platform              : all
Component Name                : dfs
Subcomponent Name             : bak
Short Description             : obtaining status from butc should handle non-thread safe operations in butc
Reported Date                 : 1/22/93
Found in Baseline             : 1.0.2
Found Date                    : 1/22/93
Severity                      : B
Priority                      : 3
Status                        : open
Duplicate Of                  : 
Fix By Baseline               : 1.1
Fixed In Baseline             : 
Affected File(s)              : 
Diff supplied by              : 
Diff release                  : 
Sensitivity                   : public
Transarc Status               : open
Transarc Deltas               : 
Transarc Herder               : jaffe@transarc.com

[1/22/93 public]
Running bak status on a tape coordinator that is rewinding a tape (for eg.)
causes it to fail. The reason is similar to the readlabel problem OT 6739
that was fixed a while ago. The tape specific operations are done using
ioctls that block all threads in butc. This causes the status rpc to fail
because the rpc runtime keep alives couldn't get through. The fix should
be similar to the one done for readlabel. A general mechanism was put in
place as part of the readlabel fix to handle RPCs to butc that return data.
Readlabel rpc is one of them. Status is the other one.
There is another related problem. The statusWatcher thread in bak periodically
makes a status rpc to update its list of jobs that are alive. This rpc meets
the same fate as the status command mentioned above. The result of this is,
when doing the jobs command, the job for which the status RPC failed shows 
up with [butc contact lost]. This situation should be handled similar to the
status and readlabel command situations.
Both the above defects will be tracked by this OT. This is not priority 1
for now, but may be raised if this becomes a problem.
Added field Transarc Deltas with value `' 
Added field Transarc Herder with value `mason@transarc.com' 
Added field Transarc Status with value `open'

[7/20/93 public]
After discussing the the nature of the problem with Vijay and Elliot, 
I mark this as an enhancement. It really needs a good policy to resolve 
the inconveninece mentioned above. 
Changed Defect or Enhancement? from `def' to `enh' 
Changed Interest List CC from `davecarr@transarc.com' to 
 `davecarr@transarc.com, khale@transarc.com, tu' 
Changed Transarc Herder from `mason@transarc.com' to `jaffe@transarc.com'



CR Number                     : 6842
Defect or Enhancement?        : enh
CR in Code, Doc, or Test?     : test
Inter-dependent CRs           : 
Project Name                  : dce
H/W Ref Platform              : all
S/W Ref Platform              : all
Component Name                : dfs
Subcomponent Name             : low
Short Description             : low/test7 script needlessly enumerates files to be deleted
Reported Date                 : 1/14/93
Found in Baseline             : 1.0.2b11
Found Date                    : 1/14/93
Severity                      : C
Priority                      : 2
Status                        : open
Duplicate Of                  : 
Fix By Baseline               : 1.2
Fixed In Baseline             : 
Affected File(s)              : test/file/low/test7
Diff supplied by              : 
Diff release                  : 
Sensitivity                   : public
Transarc Status               : 
Transarc Deltas               : 
Transarc Herder               : 

[1/14/93 public]
In removing its target directory before running prog7, the low/test7
script makes life needlessly complicated by saying "rm -rf tdir.7/*",
apparently in order to preserve tdir.7 itself.  It would be better
to use "rm -rf tdir.7" followed by a new "mkdir tdir.7", since, given
the number of files (symlinks) created by the test, enumerating the
files can stress the limit placed on command line length by exec().

[9/29/93 public]
Don,
I changed this to an enhancement since the test program, low/test7, 
does not fail in itself. 
Tu
Changed Defect or Enhancement? from `def' to `enh' 
Changed H/W Ref Platform from `pmax' to `all' 
Changed S/W Ref Platform from `osf1' to `all' 
Filled in Subcomponent Name with `low' 
Filled in Responsible Engr. with `tu@transarc/.com' 
Filled in Resp. Engr's Company with `tarc' 
Added field Transarc Deltas with value `' 
Added field Transarc Herder with value `' 
Added field Transarc Status with value `'

[3/30/94 public]
We're looking at this in 1.1

[9/21/94 public]
Well ... we didn't get to this either ... unless Ron or Andy
are sufficiently bored or annoyed by this ...



CR Number                     : 6775
Defect or Enhancement?        : enh
CR in Code, Doc, or Test?     : code
Inter-dependent CRs           : 
Project Name                  : dce
H/W Ref Platform              : all
S/W Ref Platform              : all
Component Name                : dfs
Subcomponent Name             : lfs
Short Description             : Convert episode tracing to ICL model
Reported Date                 : 1/8/93
Found in Baseline             : 1.0.2b6
Found Date                    : 1/8/93
Severity                      : C
Priority                      : 2
Status                        : open
Duplicate Of                  : 
Fix By Baseline               : 1.1
Fixed In Baseline             : 
Affected File(s)              : 
Diff supplied by              : 
Diff release                  : 
Sensitivity                   : public
Transarc Status               : open
Transarc Deltas               : 
Transarc Herder               : jaffe@transarc.com

[1/8/93 public]
ICL should be used as the tracing package for the episode kernel,
both standalone and under DFS.
Added field Transarc Deltas with value `' 
Added field Transarc Herder with value `jaffe@transarc.com' 
Added field Transarc Status with value `open'

[1/8/93 public]
Not to rain on anybody's parade, but in the interest of having meaningful
defect counts, this looks like an enhancement.
Changed Defect or Enhancement? from `def' to `enh'

[6/7/93 public]
This work was started by Rajesh, then deferred.  That delta, probabably
useful only for reference was rajesh-ot6775-add-icl-tracing-to-episode.
I have started another delta to do a small part of this under
ota-db3652-add-icl-tracing-to-logbuf.



CR Number                     : 6753
Defect or Enhancement?        : enh
CR in Code, Doc, or Test?     : code
Inter-dependent CRs           : 
Project Name                  : dce
H/W Ref Platform              : all
S/W Ref Platform              : all
Component Name                : dfs
Subcomponent Name             : cm
Short Description             : Cache size must be user padded
Reported Date                 : 1/6/93
Found in Baseline             : 1.0.2
Found Date                    : 1/6/93
Severity                      : D
Priority                      : 4
Status                        : open
Duplicate Of                  : 
Fix By Baseline               : 1.1
Fixed In Baseline             : 
Affected File(s)              : 
Diff supplied by              : 
Diff release                  : 
Sensitivity                   : public
Transarc Status               : open
Transarc Deltas               : 
Transarc Herder               : mason@transarc.com

[1/6/93 public]

Problem report:
In DFS and AFS, the
cachemanager is "told" how much space it has for caching via the
cacheinfo file (at least thats what its called in afs).  The
Cachemanager expects to have "cacheinfo" amount of space for its
Vfiles - the chunks of file data that it fetches from fileservers. In
AFS the CM maintains two other files, CacheItems and VolumeItems, that
maintain state information about the cached data.  These files take up
space in the cache, but are not calculated into the "cacheinfo space
guarantee".  

This means that when the sys admin sets up the client, he must mount a
partition as /usr/vice/cache that is 8 - 10% larger than what he
"promises" the CM in the cacheinfo file.  It has long been the belief
of everyone in Product Support and Training that the 8 - 10% should be
included in the cacheinfo calculation.  That is, the partition that I
mount as /usr/vice/cache should be exactly the size I specify in
cacheinfo.  

extract of Mike K's initial response:
The biggest problem has to do with computing the # of blocks used by indir 
blocks, too, but we can come up with upper bounds for all of those costs, too.

Added field Transarc Deltas with value `' 
Added field Transarc Herder with value `mason@transarc.com' 
Added field Transarc Status with value `open'



CR Number                     : 6750
Defect or Enhancement?        : enh
CR in Code, Doc, or Test?     : code
Inter-dependent CRs           : 
Project Name                  : dce
H/W Ref Platform              : all
S/W Ref Platform              : all
Component Name                : dfs
Subcomponent Name             : libdcedfs
Short Description             : user-space programs should use libdcedfs.
Reported Date                 : 1/6/93
Found in Baseline             : 1.0.2
Found Date                    : 1/6/93
Severity                      : E
Priority                      : 4
Status                        : open
Duplicate Of                  : 
Fix By Baseline               : 1.1
Fixed In Baseline             : 
Affected File(s)              : src/file/libdcedfs
Diff supplied by              : 
Diff release                  : 
Sensitivity                   : public
Transarc Status               : open
Transarc Deltas               : 
Transarc Herder               : jaffe@transarc.com

[1/6/93 public]
There is a shared library called libdcedfs that exists in src/file.  The 
idea is to have all DFS user programs link against this shared library, and
hence save oodles of disk space (and make upgrading easier).  This ot
entry is here to make this stuff work.
Added field Transarc Deltas with value `' 
Added field Transarc Herder with value `jaffe@transarc.com' 
Added field Transarc Status with value `open'

[3/21/94 public]
Assigned to Mike to determine relevance to small resource effort.



CR Number                     : 6747
Defect or Enhancement?        : enh
CR in Code, Doc, or Test?     : code
Inter-dependent CRs           : 
Project Name                  : dce
H/W Ref Platform              : all
S/W Ref Platform              : all
Component Name                : dfs
Subcomponent Name             : tools
Short Description             : initcmd opcode in command package is redundant
Reported Date                 : 1/6/93
Found in Baseline             : 1.0.2
Found Date                    : 1/6/93
Severity                      : D
Priority                      : 3
Status                        : open
Duplicate Of                  : 
Fix By Baseline               : 1.1
Fixed In Baseline             : 
Affected File(s)              : 
Diff supplied by              : 
Diff release                  : 
Sensitivity                   : public
Transarc Status               : open
Transarc Deltas               : 
Transarc Herder               : jaffe@transarc.com

[1/6/93 public]
   Apparently the command package has two ways of dealing with commands that
can have no opcode (sub-command): have a syntax description for no opcode
(only one permitted per command) or have a syntax description for the
special opcode initcmd (which may be present on the command line or not (if
not, code in tools/cmd/cmd.c:cmd_Dispatch handles this special case)).
There seems to be no reason to have both methods available.  The logic in
the command package is complicated unnecessarily by the existence of both.
initcmd is only used in the bosserver and scout (and two test programs in
gtx).
   I suggest eliminating the initcmd opcode and changing bosserver and scout
accordingly.  The initcmd opcode is not documented anywhere and its
elimination from the bosserver and scout would be totally transparent to
users.
Added field Transarc Deltas with value `' 
Added field Transarc Herder with value `jaffe@transarc.com' 
Added field Transarc Status with value `open'

[4/7/93 public]
Code clean-up enhancement.
Changed Defect or Enhancement? from `def' to `enh'



CR Number                     : 6731
Defect or Enhancement?        : enh
CR in Code, Doc, or Test?     : code
Inter-dependent CRs           : 
Project Name                  : dce
H/W Ref Platform              : all
S/W Ref Platform              : all
Component Name                : dfs
Subcomponent Name             : xcred
Short Description             : Function comments in header file are wrong.
Reported Date                 : 1/5/93
Found in Baseline             : 1.0.1
Found Date                    : 1/5/93
Severity                      : E
Priority                      : 4
Status                        : open
Duplicate Of                  : 
Fix By Baseline               : 1.1
Fixed In Baseline             : 
Affected File(s)              : 
Diff supplied by              : 
Diff release                  : 
Sensitivity                   : public
Transarc Status               : open
Transarc Deltas               : 
Transarc Herder               : mason@transarc.com

[1/5/93 public]
The comments about return codes for many of the functions in the 
xcred.h file are incorrect.  Also, some of the function logic
explainations are in error.
Added field Transarc Deltas with value `' 
Added field Transarc Herder with value `mason@transarc.com' 
Added field Transarc Status with value `open'

[1/5/93 public]
Changed to an enhancement.
Changed Defect or Enhancement? from `def' to `enh'

[9/15/94 public]
Changed Responsible Engr. from `fred@transarc.com' to `andi@transarc.com'



CR Number                     : 6725
Defect or Enhancement?        : enh
CR in Code, Doc, or Test?     : code
Inter-dependent CRs           : 
Project Name                  : dce
H/W Ref Platform              : all
S/W Ref Platform              : all
Component Name                : dfs
Subcomponent Name             : bak
Short Description             : support patterns for servers and aggregates in fileset family entries
Reported Date                 : 1/4/93
Found in Baseline             : 1.0.2
Found Date                    : 1/4/93
Severity                      : B
Priority                      : 3
Status                        : open
Duplicate Of                  : 
Fix By Baseline               : 1.1
Fixed In Baseline             : 
Affected File(s)              : 
Diff supplied by              : 
Diff release                  : 
Sensitivity                   : public
Transarc Status               : open
Transarc Deltas               : 
Transarc Herder               : mason@transarc.com

[1/4/93 public]

The routine that parses a fileset family entry and determines the list of 
filesets to be included in a dump is bc_EvalVolumeSet in bak/volstub.c. This
function builds a pattern for server, aggregate and fileset, calls 
VL_ListEntry to cycle through each entry in the FLDB determining whether
this fileset along with its server address and aggregate would match the
pattern previously constructed. There are two enhancements that could be
made here.

1. Use VL_ListByAttributes to restrict the filesets listed to correspond to
the server and aggregate specified in the fileset family entry. If the
server and aggregate specified are wildcards (.*), the this RPC can be used
to get a bunch of fileset entries. This would reduce the number of RPCs
made to get all fileset entries, and would speed up dumps by a large factor
(particularly if the FLDB has a lot of entries).

2. Accept patterns not only for filesets in the fileset family entry, but also
for servers and aggregates. Server patterns could be DCE hostnames, Internet
domain host names or IP addresses. For DCE hostnames, CDS lookups have to
be made to get all hostnames that match the server pattern, and get the 
addresses of each of these hosts. For Internet style host names, the server
address from VL_ListByAttributes should be converted to the Internet domain
host name and this string should be compared with the server pattern. For
IP addresses, the server address from VL_ListByAttributes should be converted
to a IP address and this string should be compared with the pattern.

The patterns for aggregates would be aggregate names. The aggregate ID obtained
from VL_ListByAttributes should be converted to a aggregate name and this 
string should be compared with the aggregate pattern.

Accepting patterns for servers, aggregates and filesets would make things
uniform and provide more flexibility. 
Added field Transarc Deltas with value `' 
Added field Transarc Herder with value `mason@transarc.com' 
Added field Transarc Status with value `open'



CR Number                     : 6712
Defect or Enhancement?        : enh
CR in Code, Doc, or Test?     : code
Inter-dependent CRs           : 
Project Name                  : dce
H/W Ref Platform              : all
S/W Ref Platform              : all
Component Name                : dfs
Subcomponent Name             : EPISODE
Short Description             : Shorten hash chains by removing unused vnodes
Reported Date                 : 12/31/92
Found in Baseline             : 1.0.2
Found Date                    : 12/31/92
Severity                      : C
Priority                      : 2
Status                        : open
Duplicate Of                  : 
Fix By Baseline               : 1.1
Fixed In Baseline             : 
Affected File(s)              : 
Diff supplied by              : 
Diff release                  : 
Sensitivity                   : public
Transarc Status               : fixed
Transarc Deltas               : ota-db5313-vnsync, et al
Transarc Herder               : jaffe@transarc.com

[12/31/92 public]
When a vnode loses its identity (through file deletion or unmounting), it
should be removed from the vnode hash table, so that searches for other vnodes
with the same hash value won't have to look at it.
Added field Transarc Deltas with value `' 
Added field Transarc Herder with value `jaffe@transarc.com' 
Added field Transarc Status with value `open'

[7/18/94 public]
This was fixed as part of the comprehensive vnode synchronization
changes made under Transarc defect 5313 and related deltas.
Changed Subcomponent Name from `lfs' to `EPISODE' 
Changed Transarc Status from `open' to `fixed' 
Filled in Transarc Deltas with `ota-db5313-vnsync, et al'



CR Number                     : 6697
Defect or Enhancement?        : enh
CR in Code, Doc, or Test?     : code
Inter-dependent CRs           : 
Project Name                  : dce
H/W Ref Platform              : rs6000
S/W Ref Platform              : aix
Component Name                : dfs
Subcomponent Name             : quota
Short Description             : files bigger than remaining quota
get corrupted when copied into lfs
Reported Date                 : 12/30/92
Found in Baseline             : 1.0.2
Found Date                    : 12/30/92
Severity                      : E
Priority                      : 4
Status                        : open
Duplicate Of                  : 
Fix By Baseline               : 1.1
Fixed In Baseline             : 
Affected File(s)              : 
Diff supplied by              : 
Diff release                  : 
Sensitivity                   : public
Transarc Status               : open
Transarc Deltas               : 
Transarc Herder               : jaffe@transarc.com

[12/30/92 public]

I was trying to fill up an lfs fileset (mounted on a RIOS under a JFS
root.dce) that had 5000 blocks on it. I was able to copy 3 instances
of /unix onto it, and one partial:

root@cobbler> ls -las
total 5000
   4 drwxrwxrwx   2 root     system       416 Dec 30 14:54 .
   4 drwxrwxrwx  16 root     sys          512 Dec 30 15:29 ..
1432 -r-xr-xr-x   1 100      12       1458180 Dec 30 14:24 1
1432 -r-xr-xr-x   1 100      12       1458180 Dec 30 14:25 2
1432 -r-xr-xr-x   1 100      12       1458180 Dec 30 14:25 3
 696 -r-xr-xr-x   1 100      12        720896 Dec 30 14:54 4
root@cobbler>

I did some checking, and the first three copies all compare with /unix.

The last one, does not, but it's not just because of the truncation:

root@cobbler> cmp /unix 4
/unix 4 differ: byte 184321, line 251
root@cobbler>

Doing a cmp -l 4 /unix has a lot of lines like these:

184321   0 203
184322   0 377
184324   0   4
184325   0 110
184328   0  24
184329   0 221

where the file itself has zeros in it somewhere in the middle. Observation
of the cmp output seems to indicate a 12k (12288) byte block of zeros starting
at locations 184321 - 199608 decimal. This is consistent behavior.

[12/31/92 public]
Assigned to bwl.  Raised priority; this is a data corruption issue,
potentially.

Filled in Interest List CC with `ota,blake' 
Changed Priority from `2' to `1' 
Filled in Responsible Engr. with `bwl@transarc.com' 
Filled in Resp. Engr's Company with `tarc' 
Added field Transarc Deltas with value `' 
Added field Transarc Herder with value `jaffe@transarc.com' 
Added field Transarc Status with value `open'

[12/31/92 public]
Episode is not at fault.  Sequential writes from the application are being
processed by the server in random (non-sequential) order, and consequently
there are holes in the file if the process is interrupted by quota failure.

This could be fixed by some sort of quota reservation on the part of the CM.
Of course, aggregate space reservation would have to be done too, and even
then a server crash could leave you with holes in the file.

Alternatively, the CM could promise that one write won't be sent down to the
server until the previous one has finished.  Or, the CM could send them down
all at once, but put serial numbers on them, so that the server would not
start one, until the previous ones have completed.  In any case, there never
was any point in having multiple server threads doing I/O to the same file,
because they usually end up contending for one disk head anyway, and moreover,
because they don't get processed in order, you can't take advantage of any of
the usual optimizations for sequential or bulk I/O in the physical file system. So my vote is for re-serializing the I/O, one way or another. 
Changed Responsible Engr. from `bwl@transarc.com' to `kazar@transarc.com'

[1/8/93 public]

I don't consider this a bug, but rather a request for an enhancement.
Here's the rationale.

DFS, AFS 3, and, for that matter, NFS, have never made the guarantee
that if a close system call fails because of the disk being full, that
only a true prefix of the write stream has been written to the file.

Consider the case where a user writes some data to block 0 of a file,
writes more data to block 1 of a file (creating that block), and then
writes even more data to block 0 of a file.  Then the file is closed.
Ranlib is probably a good example here.  AFS 3, DFS and NFS all would
fail to return any error before the file is closed, and the close
would fail with EDQUOT or ENOSPC.  However, the data written by writes
1 and 3 would have been placed in the fiel, while the data written by
write #2 wouldn't have been written to the file.

That being said, it is probably reasonable for DFS to try to handle
the case of sequentially writing to a file a little better, at least
in most cases.  So, I've reclassified this problem as a low priority
enhancement, since it would be nice for DFS to, when handling
sequential writes, to drop the *last* writes, not the first, to the
file.

However, this isn't really changing any of the *guarantees* we make;
we're still not going to make any hard claims about what writes will
have occurred if an ENOSPC error is returned from close.  We're just
going to try to reduce the frequency of a common failure mode.
Changed Defect or Enhancement? from `def' to `enh' 
Changed Severity from `B' to `E' 
Changed Priority from `1' to `4'



CR Number                     : 6632
Defect or Enhancement?        : enh
CR in Code, Doc, or Test?     : test
Inter-dependent CRs           : 
Project Name                  : dce
H/W Ref Platform              : all
S/W Ref Platform              : all
Component Name                : dfs
Subcomponent Name             : acl tests
Short Description             : acl sizetest depends on number of principals/groups
Reported Date                 : 12/25/92
Found in Baseline             : 1.0.1b24
Found Date                    : 12/25/92
Severity                      : C
Priority                      : 2
Status                        : open
Duplicate Of                  : 
Fix By Baseline               : 1.1
Fixed In Baseline             : 
Affected File(s)              : 
Diff supplied by              : 
Diff release                  : 
Sensitivity                   : public
Transarc Status               : open
Transarc Deltas               : 
Transarc Herder               : jaffe@transarc.com

[12/25/92 public]

The sizetest test should be independent of the number of entries in
the security registry and create additional principals and groups to 
exercise big acls.
Added field Transarc Deltas with value `' 
Added field Transarc Herder with value `jaffe@transarc.com' 
Added field Transarc Status with value `open'



CR Number                     : 6626
Defect or Enhancement?        : enh
CR in Code, Doc, or Test?     : code
Inter-dependent CRs           : 6399
Project Name                  : dce
H/W Ref Platform              : all
S/W Ref Platform              : all
Component Name                : dfs
Subcomponent Name             : EPISODE
Short Description             : no way to set allocated quota
Reported Date                 : 12/23/92
Found in Baseline             : 1.0.2
Found Date                    : 12/23/92
Severity                      : C
Priority                      : 2
Status                        : open
Duplicate Of                  : 
Fix By Baseline               : 1.1
Fixed In Baseline             : 
Affected File(s)              : 
Diff supplied by              : 
Diff release                  : 
Sensitivity                   : public
Transarc Status               : open
Transarc Deltas               : 
Transarc Herder               : jaffe@transarc.com

[12/23/92 public]
The changes to fts, et al, only affect visible quota.  However, in
somecases we will need a way to set the allocated quota, if for no other
reason than to provide an upgrade path.  Perhaps only efts could be
modified.
ftsets will need to use this to test allocated quota checking anyway.
Added field Transarc Deltas with value `' 
Added field Transarc Herder with value `jaffe@transarc.com' 
Added field Transarc Status with value `open'

[9/14/93 public]
A very tough one. We need a new fts switch to set the 'allocated quota'.
But, it would be confusing also because we already have a visible quota size.
Marked this as an enhancement after talking to Ted.

[9/14/93 public]
Changed the defect field.
Changed Defect or Enhancement? from `def' to `enh'

[9/14/93 public]
Changed Interest List CC from `cfe, jdp' to `cfe, jdp, jeff@transarc.com'

[1/24/94 public]
Changed Subcomponent Name from `lfs' to `EPISODE'



CR Number                     : 6618
Defect or Enhancement?        : enh
CR in Code, Doc, or Test?     : code
Inter-dependent CRs           : 
Project Name                  : dce
H/W Ref Platform              : all
S/W Ref Platform              : all
Component Name                : dfs
Subcomponent Name             : bak
Short Description             : uuid mismatch on restoredb
Reported Date                 : 12/23/92
Found in Baseline             : 1.0.2
Found Date                    : 12/23/92
Severity                      : B
Priority                      : 3
Status                        : open
Duplicate Of                  : 
Fix By Baseline               : 1.1
Fixed In Baseline             : 
Affected File(s)              : 
Diff supplied by              : 
Diff release                  : 
Sensitivity                   : public
Transarc Status               : open
Transarc Deltas               : 
Transarc Herder               : mason@transarc.com

[12/23/92 public]

The backup database stores UUIDs for butc hosts along with the port offsets.
These UUIDs are generated new each time a host is added to the backup
database. When a BUTC program starts up it reads the UUID corresponding
to its hostname and port offset and uses it to register itself in the rpcd.
When restoring a database, the host information is also restored. If the
UUID of the restored host is different from the one that is in the database,
bak commands to that host would fail to reach the butc running in that host
at the corresponding port offset. The butc in that particular host has to 
be restarted so that it reads in the new UUID and re-registers it in rpcd.
This OT is to implement an alternative mechanism by which BUTC automatically
recognizes such UUID mismatches and re-registers itself. Until then, the
document on butc should mention this so that administrators are aware of this.

Added field Transarc Deltas with value `' 
Added field Transarc Herder with value `mason@transarc.com' 
Added field Transarc Status with value `open'



CR Number                     : 6500
Defect or Enhancement?        : enh
CR in Code, Doc, or Test?     : code
Inter-dependent CRs           : 
Project Name                  : dce
H/W Ref Platform              : all
S/W Ref Platform              : all
Component Name                : dfs
Subcomponent Name             : EPISODE
Short Description             : VM extension of sparse file handles old EOF wrong
Reported Date                 : 12/16/92
Found in Baseline             : 1.0.2
Found Date                    : 12/16/92
Severity                      : C
Priority                      : 2
Status                        : open
Duplicate Of                  : 
Fix By Baseline               : 1.1
Fixed In Baseline             : 
Affected File(s)              : 
Diff supplied by              : 
Diff release                  : 
Sensitivity                   : public
Transarc Deltas               : 
Transarc Herder               : jaffe@transarc.com
Transarc Status               : open

[12/16/92 public]
It seems that if a file is truncated down to the middle of some block
then the VM system sparsely extends the file no one actually gets around
to zeroing the final bytes in what used to be the last block of the
file.  This is also a problem for COW files (where what used to be the
last block may also have to be allocated).  Similarly the quota
reservation code cannot cope with reserving two sections of the file
which can be disjoint in a single call.
The solution may be to require truncate to do more of the work in this
case.  Namely, clearing the end of the last block of the file.
Added field Transarc Deltas with value `' 
Added field Transarc Herder with value `jaffe@transarc.com' 
Added field Transarc Status with value `open'

[9/30/93 public]
The VM system has a bug currently causing the zerofill test to fail but
this will be fixed shortly and is being tracked by DB4349.
The quota reservation problem is real but hard to fix.  We will not be
able to fix this anytime soon.  However, the exposure to this problem is
quite slight since it requires partial truncates and sparse writes and a
nearly full disk all at the same time.
Further work on this problem will be tracked under DB4410.
Changed Defect or Enhancement? from `def' to `enh' 
Changed Interest List CC from `bwl' to `bwl,blake' 
Filled in Reported by Company's Ref. Number with `4410'

[7/18/94 public]
This was fixed as part of the VM reorganization done for Transarc defect
5134 and related deltas.  The zerofill test passes with these fixes.
Changed Subcomponent Name from `lfs' to `EPISODE'



CR Number                     : 6402
Defect or Enhancement?        : enh
CR in Code, Doc, or Test?     : code
Inter-dependent CRs           : 6340
Project Name                  : dce
H/W Ref Platform              : all
S/W Ref Platform              : all
Component Name                : dfs
Subcomponent Name             : security/dacl
Short Description             : Need to remove references to EPI_USE_FULL_ID
Reported Date                 : 12/10/92
Found in Baseline             : 1.0.2
Found Date                    : 12/10/92
Severity                      : E
Priority                      : 4
Status                        : open
Duplicate Of                  : 
Fix By Baseline               : 1.1
Fixed In Baseline             : 
Affected File(s)              : 
Diff supplied by              : 
Diff release                  : 
Sensitivity                   : public
Transarc Status               : open
Transarc Deltas               : 
Transarc Herder               : mcinerny@transarc.com

[12/10/92 public]

Now that Episode uses only full-IDs (never 32-bit IDs), this
compile-time constant is obsolete and should be removed.  It is used
only in file/security/dacl/epi_id.{c,h} and Makefile (I think).

We noticed this problem when tracking down OT 6340 (which has been
cancelled).

It might also be suggested that all the code paths referring to the
old 32-bit IDs be excised for the sake of clarity.

Added field Transarc Deltas with value `' 
Added field Transarc Herder with value `mcinerny@transarc.com' 
Added field Transarc Status with value `open'



CR Number                     : 6342
Defect or Enhancement?        : enh
CR in Code, Doc, or Test?     : code
Inter-dependent CRs           : 
Project Name                  : dce
H/W Ref Platform              : all
S/W Ref Platform              : all
Component Name                : dfs
Subcomponent Name             : bak
Short Description             : Record filesystem type in backup database
Reported Date                 : 12/4/92
Found in Baseline             : 1.0.2
Found Date                    : 12/4/92
Severity                      : D
Priority                      : 4
Status                        : open
Duplicate Of                  : 
Fix By Baseline               : 1.1
Fixed In Baseline             : 
Affected File(s)              : 
Diff supplied by              : 
Diff release                  : 
Sensitivity                   : public
Transarc Status               : open
Transarc Deltas               : 
Transarc Herder               : mason@transarc.com

[12/4/92 public]
An enhancement that might be useful, is recording the type of a dump
in the dump database, i.e. whether the fileset dumped is LFS, AIX JFS or OSF/1
UFS. After recent changes, the dumps themselves should be portable
to any type of filesystem, however, treatment of certain items, such as
ACLs, will depend on the source and destination filesystem type.

A type field would be useful for at least a couple of things:
- knowing if ACLs were part of the dump
- diagnosing/debugging problems of portability

Added field Transarc Deltas with value `' 
Added field Transarc Herder with value `mason@transarc.com' 
Added field Transarc Status with value `open'



CR Number                     : 6330
Defect or Enhancement?        : enh
CR in Code, Doc, or Test?     : code
Inter-dependent CRs           : 
Project Name                  : dce
H/W Ref Platform              : all
S/W Ref Platform              : all
Component Name                : dfs
Subcomponent Name             : cm
Short Description             : ACL is inaccessbile via CM path
Reported Date                 : 12/4/92
Found in Baseline             : 1.0.2
Found Date                    : 12/4/92
Severity                      : B
Priority                      : 2
Status                        : open
Duplicate Of                  : 
Fix By Baseline               : 1.1
Fixed In Baseline             : 
Affected File(s)              : 
Diff supplied by              : 
Diff release                  : 
Sensitivity                   : public
Transarc Status               : open
Transarc Deltas               : 
Transarc Herder               : jaffe@transarc.com
Transarc Delta                : 

[12/4/92 public]
As cell_admin I tried to modify an ACL with the wrong cell information
via DFS; it failed.  I locally mounted it and it succeeded, which
seems to imply the CM (or PX) is refusing to make the change, even
though the change is a valid/legal one.
The way to set this up is to create an ACL in an existing DFS cell;
shut the cell down and reconfigure it (using dce_config) so that the
new cell has a new uuid.  Now, try to run acl_edit on the protected
directory.  Use the "cell" command to set the cell to the current
name. Then use the "commit" command to save the acl - acl_edit will
fail while trying to save back the acl.
Locally mount the fileset containing this directory.  Repeat the steps
and note that the set succeeds.  You should now be able to see the
right cell name in both the local and DFS cases.
Added field Transarc Deltas with value `' 
Added field Transarc Herder with value `jaffe@transarc.com' 
Added field Transarc Status with value `open'

[12/30/92 public]
This is almost certainly an ACL package bug, or an Episode bug.  Since
Episode's access control logic does completely different things for
local and remote calls (only one has a PAC, for example), it isn't
surprising that the behavior is different for the two paths.
Nevertheless, the CM only asks whether we have "C" rights, and if so,
sends a setacl call directly to the fx.  So, I'm re-assigning this to
the Episode folks to take a look at.
They should verify that they report that cell_admin has "C" rights to
the object (according to the extended getacl), and that they allow the
setacl call to get through.
Furthermore, I'm reclassifying this as an enhancement, since the
problem only occurs apparently when a cell is pretty badly
misconfigured (in the wrong cell!).
Changed Defect or Enhancement? from `def' to `enh' 
Changed Responsible Engr. from `kazar@transarc.com' to `mason@transarc.com'

[11/15/93 public]
Changed Reported by from `mason@transarc.com' to `ota@transarc.com' 
Added field Transarc Delta with value `'

[11/15/93 public]
Changed Reported by from `ota@transarc.com' to `mason@transarc.com' 
Changed Responsible Engr. from `mason@transarc.com' to `ota@transarc.com'



CR Number                     : 6321
Defect or Enhancement?        : enh
CR in Code, Doc, or Test?     : code
Inter-dependent CRs           : 
Project Name                  : dce
H/W Ref Platform              : all
S/W Ref Platform              : all
Component Name                : dfs
Subcomponent Name             : EPISODE
Short Description             : vol_efsRead, vol_efsWrite should use VM
Reported Date                 : 12/3/92
Found in Baseline             : 1.0.2
Found Date                    : 12/3/92
Severity                      : C
Priority                      : 2
Status                        : open
Duplicate Of                  : 
Fix By Baseline               : 1.1
Fixed In Baseline             : 
Affected File(s)              : 
Diff supplied by              : 
Diff release                  : 
Sensitivity                   : public
Transarc Deltas               : 
Transarc Herder               : jaffe@transarc.com
Transarc Status               : open

[12/3/92 public]
At the moment, the Episode volops for reading and writing files work, but they
read and write the unbuffered disk (on platforms that use VM).  I expect that
they should be using VM on platforms that have VM available, and that the
current implementation that doesn't use a buffered disk may be a serious
performance problem.
Added field Transarc Deltas with value `' 
Added field Transarc Herder with value `jaffe@transarc.com' 
Added field Transarc Status with value `open'

[11/11/93 public]

[11/11/93 public]
Opened this as db4668 in Transarc's database.
Changed Subcomponent Name from `lfs' to `EPISODE' 
Filled in Reported by Company's Ref. Number with `4668'

[11/11/93 public]
In general, the data in VM will be only a small part of all the data dumped.
It's hard to see how there would be a significant performance impact.
If you are seeing performance problems, look carefully for other causes.
The programming complexity is significant.  It's important that, during the
dump, VM should not be flooded with dumped data (i.e. the dump should not
blow the "cache").  Thus, the volume op should look for the data in VM, and
if it finds it there, use it, otherwise get it from the disk.
Thus, this should be approached with caution.  I'm skeptical that it will do
more good than harm to pursue this.
I referred to dumping.  Restoring is even more problematic.  Right now we
are invalidating all VM for the given fileset at the start of the restore.
Any implementation of restore that doesn't do this, must afterwards determine,
very carefully, just what VM should be invalidated and what shouldn't.  And
again, as with dumping, it is important that the restore itself should not
allocate new VM ("blow the cache").



CR Number                     : 6319
Defect or Enhancement?        : enh
CR in Code, Doc, or Test?     : code
Inter-dependent CRs           : 7141
Project Name                  : dce
H/W Ref Platform              : all
S/W Ref Platform              : all
Component Name                : dfs
Subcomponent Name             : lfs
Short Description             : Need volop body to describe holes in files
Reported Date                 : 12/3/92
Found in Baseline             : 1.0.2
Found Date                    : 12/3/92
Severity                      : C
Priority                      : 2
Status                        : open
Duplicate Of                  : 
Fix By Baseline               : 1.1
Fixed In Baseline             : 
Affected File(s)              : 
Diff supplied by              : 
Diff release                  : 
Sensitivity                   : public
Transarc Status               : open
Transarc Deltas               : 
Transarc Herder               : jaffe@transarc.com

[12/3/92 public]
There needs to be a volop that the ftserver can use to determine something
about the storage map for a file, so that a fileset dump of a sparse file
doesn't have to transmit scads of zeros (and so that restoring the
sparse file will have a chance to also be sparse).
Added field Transarc Deltas with value `' 
Added field Transarc Herder with value `jaffe@transarc.com' 
Added field Transarc Status with value `open'

[12/3/92 public]
Changed Interest List CC from `cfe, ota' to `cfe, ota, jdp'

[2/12/93 public]
Is it possible that this ot bug can be dupped to another one?  It
seems like I saw another ot bug in which the new volop is getting
added.

[2/12/93 public]
OT 7141 says that there should be an interface for detecting allocation
holes in files, and the fix for that OT in fact provides such an interface.
But coding still needs to be done, both for Episode and for the various
UFS implementations, to actually return allocation-hole information.
Furthermore, coding still needs to be done in the ftserver/ftutil pair
to exploit such information.  Such ftserver/ftutil coding would not require
the implementation of the volop in the file system being dumped, but would
simply dump the whole range of the file; thus, these next two implementation
steps can be taken independently, given that the interface is in place.

Thus, I'm marking 7141 as related to this, but leaving this OT as an open
enhancement, requesting that Episode and/or the native file system (JFS, ...)
 return allocation information.  Work to extend ftserver/ftutil can be added
under this or another OT, depending on timing.
Filled in Inter-dependent CRs with `7141'

[2/12/93 public]
(forgot to change subcomponent to something new)
Changed Subcomponent Name from `xvolume' to `lfs' 
Changed Short Description from `Need volop to describe holes in files' to `Need 
 volop body to describe holes in files'



CR Number                     : 6310
Defect or Enhancement?        : enh
CR in Code, Doc, or Test?     : test
Inter-dependent CRs           : 
Project Name                  : dce
H/W Ref Platform              : all
S/W Ref Platform              : all
Component Name                : dfs
Subcomponent Name             : 
Short Description             : Missing README files in install tree
Reported Date                 : 12/3/92
Found in Baseline             : 1.0.2
Found Date                    : 12/3/92
Severity                      : E
Priority                      : 4
Status                        : open
Duplicate Of                  : 
Fix By Baseline               : 1.1
Fixed In Baseline             : 
Affected File(s)              : 
Diff supplied by              : 
Diff release                  : 
Sensitivity                   : public
Transarc Status               : open
Transarc Deltas               : 
Transarc Herder               : andi@transarc.com

[12/3/92 public]
Only the acl, bos, and zlc tests install their README files.
Either they all should (which I think they should), or none should.
Added field Transarc Deltas with value `' 
Added field Transarc Herder with value `mcinerny@transarc.com' 
Added field Transarc Status with value `open'

[12/3/92 public]
Changed Responsible Engr. from `pakhtar' to `shl@transarc.com'

[8/15/95 public]
Reassigned to people who currently work in the File Systems group...
Changed Short Description from `Missing README files in intall tree' to 
 `Missing README files in install tree' 
Changed Interest List CC from `fred@transarc.com, jaffe@transarc.com' to 
 `biyani@transarc.com' 
Changed Responsible Engr. from `shl@transarc.com' to `andi@transarc.com' 
Changed Transarc Herder from `mcinerny@transarc.com' to `andi@transarc.com'



CR Number                     : 6276
Defect or Enhancement?        : enh
CR in Code, Doc, or Test?     : test
Inter-dependent CRs           : 
Project Name                  : dce
H/W Ref Platform              : all
S/W Ref Platform              : all
Component Name                : dfs
Subcomponent Name             : ACL tests
Short Description             : All ACL tests cannot be run together.
Reported Date                 : 12/1/92
Found in Baseline             : 1.0.1b24
Found Date                    : 12/1/92
Severity                      : D
Priority                      : 2
Status                        : open
Duplicate Of                  : 
Fix By Baseline               : 1.1
Fixed In Baseline             : 
Affected File(s)              : 
Diff supplied by              : 
Diff release                  : 
Sensitivity                   : public
Transarc Status               : open
Transarc Deltas               : 
Transarc Herder               : jaffe@transarc.com

[12/1/92 public]
All ACL tests cannot be run via one invocation of the ACL test driver 
due to setup needs. As discussed with Beth, it would be desirable
to seperate the tests into 3 different phases 
  - initialisation/setup phase
  - execution phase ( single or multiple tests)
  - cleanup phase
This would enable multiple tests to be run via one invocation of the
execution phase driver.
Added field Transarc Deltas with value `' 
Added field Transarc Herder with value `mason@transarc.com' 
Added field Transarc Status with value `open'

[8/16/93 public]
This task is part of sweeping old defects for OSF. 
                                                                              
The complaint addressd above is legitimate but it cannot be considered
as a defect. It is really a matter of how to automate the test suite to
be more user-friendly to run. 
                                                                              
In addition. IBM's also has done some of the work on acl_edit by adding a new
set of options to the user interface and a DBG trace utility to facilitate the
debuging process. This work (Rajesh has the copy) can be merged into our code
base as part of (the first phase) the  enhacement work described above. 
                                                                              
Mark it enh. 
Changed Defect or Enhancement? from `def' to `enh' 
Changed Interest List CC from `mason@transarc.com, bab@transarc.com' to 
 `tu@transarc.com, comer@transarc.com' 
Changed Transarc Herder from `mason@transarc.com' to `jaffe@transarc.com'



CR Number                     : 6243
Defect or Enhancement?        : def
CR in Code, Doc, or Test?     : test
Inter-dependent CRs           : 
Project Name                  : dce
H/W Ref Platform              : all
S/W Ref Platform              : all
Component Name                : dfs
Subcomponent Name             : lfs
Short Description             : stand-alone Episode must initialize localCellID
Reported Date                 : 11/30/92
Found in Baseline             : 1.0.2
Found Date                    : 11/30/92
Severity                      : C
Priority                      : 2
Status                        : open
Duplicate Of                  : 
Fix By Baseline               : 1.1
Fixed In Baseline             : 
Affected File(s)              : 
Diff supplied by              : 
Diff release                  : 
Sensitivity                   : public
Transarc Deltas               : 
Transarc Herder               : jaffe@transarc.com
Transarc Status               : open

[11/30/92 public]
DFS seems to be relying on the protocol exporter to initialize
dacl_localCellID.  The value to initialize it to is taken from some syscall,
presumably the one that starts the protocol exporter.

Suppose I run standalone Episode.  Normally I need to have some DCE components
running, so that acl_edit can do its thing.  But I am not supposed to need
to have DFS running.

But without DFS running, nobody is initializing dacl_localCellID.  Because
of this, all dummy ACL's returned by dacl_InitEpiAcl have a realm ID of all
0's.  sec_acl_ParseAcl chokes on this (returns DACL_ERROR_SEC_RGY_PGO_ERRORS).

I don't know what the ``right'' fix is.  Should the Episode initialization
syscall try to initialize dacl_localCellID the way that the PX initialization
syscall does?  Or, should sec_acl_ParseAcl do a special-case check for
all-zero realm ID's?  Or what?
Added field Transarc Deltas with value `' 
Added field Transarc Herder with value `jaffe@transarc.com' 
Added field Transarc Status with value `open'

[2/8/93 public]
Since this is SA Episode, it is only applicable to test.

Changed CR in Code, Doc, or Test? from `code' to `test'

[12/23/93 public]
Setting status to defer. This CR may be cancelled since SA episode is
not a deliverable of OSF DFS.



CR Number                     : 6221
Defect or Enhancement?        : enh
CR in Code, Doc, or Test?     : code
Inter-dependent CRs           : 
Project Name                  : dce
H/W Ref Platform              : all
S/W Ref Platform              : all
Component Name                : dfs
Subcomponent Name             : flserver
Short Description             : multi-fldb server cell can't recover from failure
Reported Date                 : 11/29/92
Found in Baseline             : 1.0.2.b6
Found Date                    : 11/29/92
Severity                      : C
Priority                      : 3
Status                        : open
Duplicate Of                  : 
Fix By Baseline               : 1.1
Fixed In Baseline             : 
Affected File(s)              : 
Diff supplied by              : 
Diff release                  : 
Sensitivity                   : public
Transarc Status               : open
Transarc Deltas               : 
Transarc Herder               : 

[11/29/92 public]

We had a cell with five machines 1 core server, 3 dfs fldb servers
(with dfs/client servers) and 1 dfs/client server (no fldb).
One of the fldb machines paniced during cho testing; also one
of the other fldb machines had its flserver disappear during the night.
I rebooted the crashed machine and restarted the flserver on the other
flserver machine.  I waited well over 5 minutes to attempt to cd
into the dfs filesystem machine and got the following errors:

From Fire (fldb):
root@fire  # cm checkfilesets
All backup filesets checked.
root@fire  # cd /.:/fs
dfs: dce errors (code 676372523) from the fileset location server 130.105.5.78
in cell hoodoo_cell
/.:/fs: No such device
--------

from alcatraz (fldb):

# cm checkfilesets
All backup filesets checked.
# cd /.:/fs
dfs: dce errors (code 676372523) from the fileset location server 130.105.5.3 in ce
ll hoodoo_cell
/.:/fs: No such device
-----------

from shotz (has root.dfs +fldb):
This machine got the same output as singsing (below). About 40 minutes later
dfsbind died and I restarted dfsbind again and was able to get into the
root.dfs filesystem, however the other clients were not able to access dfs;
although shotz could acess all filesystems from the other 3 machines.
--------

from singsing (the only non-fldb machine)

# # # cm check
All backup filesets checked.
# cd /.:/fs
dfs: dce errors (382312679) from dfsbind helper.
/.:/fs: I/O error

----
I can't find anything in the manuals that says I should be doing anything
beyond what is done in /etc/rc.dfs - so I'm logging this as a bug.

[11/30/92 public]
The error 676372523 is VL_INITNEEDSWRITE, which you get when the FLDB hasn't
ever been initialized and you try to read it (which dfsbind will do).
I have to conclude that something fishy is up with the 3 flserver machines,
that somehow their flserver configuration is bogus.  This might happen if,
for instance, any flserver process had been left running since any flserver
configuration had been done.  (That is, all flserver processes should be
restarted after any flserver has been added to or removed from the
configuration.)

I say this because I imagine that VL_INITNEEDSWRITE is being returned
from an flserver that's managing an FLDB that has never been initialized,
which could happen if the process of configuring flservers had not
restarted all flservers before trying to initialize an FLDB (typically
with ``fts crserverentry'').  My guess is that the initial flserver
managed an orphaned FLDB and that the FLDB associated with successive
flservers was initialized correctly.  FLDB clients happened to initialize
and use the FLDB associated with successive servers, but when those servers
died, the clients fell over to using the other flservers managing the
detached, uninitialized, FLDB--producing VL_INITNEEDSWRITE.

Error code 382312679 is rpc_s_auth_tkt_expired, which would occur if
dfsbind were being run improperly, i.e. with any DCE identity other than
that associated with root (/.:/hosts/NAME/self).

As for the VL_INITNEEDSWRITE error, it's not a bug in /etc/rc.dfs, but
more likely a bug in dce_config that doesn't prompt for the restarting of
all existing flservers after a new flserver is configured.  This was a level
of support that dce_config never really aspired to.  I believe, though, that
Tony Mason had some changes in this general area that were rejected by the
OSF, so there's not an obvious resolution.

As for the rpc_s_auth_tkt_expired problem, Mike Comer recently exported a
delta to ensure that dfsbind is run with the ...../self identity so that
its tickets won't expire.  Perhaps he can fill in the OT number.
Filled in Interest List CC with `mason, cfe, comer' 
Added field Transarc Deltas with value `' 
Added field Transarc Herder with value `' 
Added field Transarc Status with value `'

[11/30/92 public]

Why can't these flservers be made to recognize each other when a
new one comes up. Having to restart all the flservers in a cell when
you add a new one does not do much for DFS scalability. (Imagine being
a system administrator at a large site and having to do this when you
configure or when an fldb machine goes down for a lengthy period of
time.) I think that this should be made more manageable and easier to use
and documented as well.

[11/30/92 public]
Does this mean that, in the case at hand, the flservers were not restarted
when additional ones were added?

In any case, the underlying Ubik protocol is a majority-based distributed
database.  All sites have to know how many total representatives they are;
they all have to have complete knowledge of the target configuration, or else
they will give out incorrect information.

Since a fully-configured cell will generally have exactly three flservers, it
isn't as hard to set up as one might imagine.

My reading is that this should be turned into a defect on dce_config: when
it configures an flserver instance and thus adds a member to the /.:/fs
group, it should direct ``bos restart <member> flserver'' commands to each
of the already-existing members of the /.:/fs group after all CDS
configuration has been done.

I believe that this flserver restriction is documented; Jeff can corroborate.
Even if dce_config doesn't automatically restart all flservers after changing
the flserver configuration, it would be simple to add a warning to dce_config
so that the person running dce_config would know to restart them at the
appropriate moment.

Changed Interest List CC from `mason, cfe, comer' to `mason, cfe, comer, 
 rsarbo'

[12/3/92 public]
This defect was discussed in the most recent DFS call. The brief summary
of the conversations was:

- all flservers need to be restarted when the number of flservers in
	the cell is changed. This is a manual operation, i.e. dce_config
	doesn't do this, nor do the running flservers notice the 
	configuration change. The problems described above were the
	result of not doing the restarts.

- there are ways in which the re-configuration could be made more
	automatic and less manual/error-prone.

- the documentation may not adequately clarify the restartability requirements.

It is desirable that adminstration and re-configuration be improved. There
are several ways that can be done, i.e. modifying dce_config may be 
sufficient, but it isn't necessarily the best or only solution. So, I'm
turning this into an enhancement, and will let the right solution be 
determined in due course.

A doc. defect will also be filed to ensure that the documentation is 
checked, and if necessary, altered, to clarify the restartability requirement.

Changed Defect or Enhancement? from `def' to `enh' 
Changed Interest List CC from `mason, cfe, comer, rsarbo' to `pakhtar, cfe, 
 comer, rsarbo' 
Changed Severity from `B' to `C' 
Filled in Priority with `3' 
Changed Responsible Engr. from `pakhtar' to `vijay@transarc.com' 
Filled in Transarc Status with `open'

[1/11/93 public]
Changed Interest List CC from `pakhtar, cfe, comer, rsarbo' to `pakhtar, cfe, 
 comer, rsarbo, dstokes@transarc.com'

[3/30/94 public]
We're looking at this in 1.1



CR Number                     : 6089
Defect or Enhancement?        : enh
CR in Code, Doc, or Test?     : code
Inter-dependent CRs           : 
Project Name                  : dce
H/W Ref Platform              : all
S/W Ref Platform              : all
Component Name                : dfs
Subcomponent Name             : fts
Short Description             : Should have an easy way to see low-level status of all replicas
Reported Date                 : 11/16/92
Found in Baseline             : 1.0.2
Found Date                    : 11/16/92
Severity                      : D
Priority                      : 3
Status                        : open
Duplicate Of                  : 
Fix By Baseline               : 1.1
Fixed In Baseline             : 
Affected File(s)              : 
Diff supplied by              : 
Diff release                  : 
Sensitivity                   : public
Transarc Status               : open
Transarc Deltas               : 
Transarc Herder               : jaffe@transarc.com

[11/16/92 public]
There's currently no way to see the fileset status according to the ftserver
for each replica for a fileset.  ``fts lsreplicas'' shows only the
repserver's status for each replica.  You can type enough commands to do
what you want, but you have a lot of other junk to wade through first.
Added field Transarc Deltas with value `' 
Added field Transarc Herder with value `jaffe@transarc.com' 
Added field Transarc Status with value `open'



CR Number                     : 6049
Defect or Enhancement?        : enh
CR in Code, Doc, or Test?     : code
Inter-dependent CRs           : 6787,6822
Project Name                  : dce
H/W Ref Platform              : all
S/W Ref Platform              : all
Component Name                : dfs
Subcomponent Name             : fts
Short Description             : deal with dubious incremental restores
Reported Date                 : 11/12/92
Found in Baseline             : 1.0.1
Found Date                    : 11/12/92
Severity                      : D
Priority                      : 3
Status                        : open
Duplicate Of                  : 
Fix By Baseline               : 1.1
Fixed In Baseline             : 
Affected File(s)              : 
Diff supplied by              : 
Diff release                  : 
Sensitivity                   : public
Transarc Status               : open
Transarc Deltas               : 
Transarc Herder               : jaffe@transarc.com

[11/12/92 public]
This bug seems to have gotten lost in the orbit to OT conversion
way back when...
O>     <Note by hirsch (Phil Hirsch), 91/12/19 13:41:04, action: create>
O> 
O> There is a design limitation on fts dump and restore which requires that
O> a user never attempt to do an incremental restore of a fileset if the
O> start date of the incremental is greater than the end date of the last full
O> or incremental restore that has been applied to the fileset. However,
O> the fts restore command doesn't warn the user if he/she attempts to do
O> this. This is bad because the results can be catastrophic - data loss in
O> the fileset or a machine panic.
O> 
O> We believe that the fts restore command should have an additional switch
O> like -I_know_what_I_am_doing_trust_me, to tell the system that the user
O> is violating this rule on purpose and is prepared to live with the
O> consequences. If this option is not specified, then fts restore would
O> refuse to perform an incremental restore that violated the rule. We don't
O> want to absolutely prohibit violating the rule, since people typically use
O> fts restore when recovering lost data and in such a situation the user
O> may be willing to risk a crash in the course of attempting to restore the
O> lost data.
O> 
Added field Transarc Deltas with value `' 
Added field Transarc Herder with value `mason@transarc.com' 
Added field Transarc Status with value `open'

[11/16/92 public]
Reassigned to jdp.
Filled in Interest List CC with `mason,ota,cfe' 
Changed Responsible Engr. from `mason@transarc.com' to `jdp@transarc.com'

[2/23/93 public]
Inadvertantly opened as enh instead of def.  This one may well
be an enh, but I'd like yall to decide that.  Sorry about all
these, I must have had my template wrong for a while.
Changed Defect or Enhancement? from `enh' to `def'

[2/24/93 public]
This is the same defect as was opened later as 6787.  Dup'ing it to this
one, reassigning, and pulling in the OT commentary:
  [ota@transarc.com 1/11/93 public]
  There is currently no code that prevents fts from restoring full and
  incremental dumps incorrectly.  In particular, fts/test21 was doing a
  restore of a dump consisting of a full and two incrementals but skipping
  the first increemental.  This results in an inconsistent file system but
  the INCONSISTENT bit is off.  Attempting to modify such a file system
  will certainly result in a panic.
  There has been some discussion that restoring part of a dump (or not all
  of a dump) would be a valuable thing to do.  I suggest that if we want
  to support this that we allow an inconsistent file system to be
  mountable (exportable) as a read-only file system.  We will need to test
  it to make sure that Episode (perhaps UFS is problematic) doesn't panic
  when reading an inconsistent file system even if it does produce odd
  error codes.  This should be straightforward "merely" a testing problem.
  We must make sure, however, that when the ftutil module is asked to
  restore a dump out of order or with missing pieces it detects this and
  does not clear the inconsistent bit when the fileset is close.  Further
  it must remember this and not clear the inconsistent bit following some
  subsequent fileset operation that completes successfully (say the
  restore of another incremental dump).  I suggest the creation of another
  on-disk fileset status bit that means "MISSING_SOME_VVs".  This bit
  would inhibit clearing the INCONSISTENT bit and would stay set until the
  fileset was restored from a full dump (or deleted or recloned into or
  that sort of thing).
  Contrary to what Vijay, Jeff and I determined last week, Craig claims
  that the VV-dumpted-from is stored in the dump header, so we can easily
  verify that there is an overlap between the incoming restore and the
  on-disk fileset.
  [cfe@transarc.com 1/13/93 public]
  I'd like to address this work in two phases, and I'd like to make this defect
  be associated with the later phase.  Thus, I've created OT 6822 to cover the
  first phase and have down-graded the priority of this one.
  In particular, OT 6822 covers detecting the bad application of incremental
  dumps, and returning failure.  This OT will be used to make it possible to
  use these incremental dumps more gracefully, possibly with the
  MISSING_SOME_VVS option or its analogue.
Filled in Inter-dependent CRs with `6787,6822' 
Changed H/W Ref Platform from `rs6000' to `all' 
Changed S/W Ref Platform from `aix' to `all' 
Changed Short Description from `add switch to fts restore for dubious 
 incremental restores' to `deal with dubious incremental restores' 
Changed Interest List CC from `mason,ota,cfe' to 
 `mason,ota,vijay,jdp,pakhtar@transarc.com' 
Changed Severity from `C' to `D' 
Changed Responsible Engr. from `jdp@transarc.com' to `cfe@transarc.com' 
Changed Transarc Herder from `mason@transarc.com' to `jaffe@transarc.com'

[7/22/93 public]
The first problem that asked fts to prevent an user from restoring full 
and/or incremental dumps incorrectly has been already fixed by Craig in 
OT6822. The second one mentioned in Phil's original report was a request
for an additional feature in the fts command. 
                                                                           
After talking to Ted about the nature of the feature, I mark this as an
enhancement for future releases after 103. 
Changed Defect or Enhancement? from `def' to `enh'



CR Number                     : 6036
Defect or Enhancement?        : enh
CR in Code, Doc, or Test?     : code
Inter-dependent CRs           : 
Project Name                  : dce
H/W Ref Platform              : all
S/W Ref Platform              : all
Component Name                : dfs
Subcomponent Name             : ftserver
Short Description             : FtLog logs a fileset as created even though it didn't get created
Reported Date                 : 11/11/92
Found in Baseline             : 1.0.2
Found Date                    : 11/11/92
Severity                      : E
Priority                      : 4
Status                        : open
Duplicate Of                  : 
Fix By Baseline               : 1.1
Fixed In Baseline             : 
Affected File(s)              : 
Diff supplied by              : 
Diff release                  : 
Sensitivity                   : public
Transarc Status               : open
Transarc Deltas               : 
Transarc Herder               : mason@transarc.com

[11/11/92 public]

A minor thing. Ftserver logs a fileset creation event even though the create
failed because the fileset name was malformed. Fileset IDs are allocated for 
this. It seems to me that the validity of the fileset name, server name
and aggregate name should be checked before allocating IDs and writing an
entry in the FtLog.

Added field Transarc Deltas with value `' 
Added field Transarc Herder with value `mason@transarc.com' 
Added field Transarc Status with value `open'

[12/21/92 public]
(a) This is an enhancement.
(b) It's also somewhat non-trivial, since it is the flserver that checks for
mal-formed fileset names, and ``fts create'' creates the fileset with the
ftserver before creating a new fldb entry with the flserver.
Changed Defect or Enhancement? from `def' to `enh'



CR Number                     : 5957
Defect or Enhancement?        : enh
CR in Code, Doc, or Test?     : test
Inter-dependent CRs           : 
Project Name                  : dce
H/W Ref Platform              : all
S/W Ref Platform              : all
Component Name                : dfs
Subcomponent Name             : lfs
Short Description             : Enhancement to rcx tests for directory length consistency
Reported Date                 : 11/5/92
Found in Baseline             : 1.0.1b24
Found Date                    : 11/5/92
Severity                      : D
Priority                      : 3
Status                        : open
Duplicate Of                  : 
Fix By Baseline               : 1.1
Fixed In Baseline             : 
Affected File(s)              : 
Diff supplied by              : 
Diff release                  : 
Sensitivity                   : public
Transarc Status               : open
Transarc Deltas               : 
Transarc Herder               : mason@transarc.com

[11/5/92 public]
Modify rcx to use the size field returned by lstat in determining
the consistency of the directory but do not use the size field in
calculating the system state checksum. 
Added field Transarc Deltas with value `' 
Added field Transarc Herder with value `mason@transarc.com' 
Added field Transarc Status with value `open'

[3/9/93 public]
Changed Responsible Engr. from `jdp@transarc.com' to `rajesh@transarc.com'



CR Number                     : 5955
Defect or Enhancement?        : enh
CR in Code, Doc, or Test?     : code
Inter-dependent CRs           : 6092
Project Name                  : dce
H/W Ref Platform              : all
S/W Ref Platform              : all
Component Name                : dfs
Subcomponent Name             : acl manager
Short Description             : Wrong error on exit from acl_edit
Reported Date                 : 11/5/92
Found in Baseline             : 1.0.1
Found Date                    : 11/5/92
Severity                      : D
Priority                      : 4
Status                        : open
Duplicate Of                  : 
Fix By Baseline               : 1.1
Fixed In Baseline             : 
Affected File(s)              : 
Diff supplied by              : 
Diff release                  : 
Sensitivity                   : public
Transarc Status               : open
Transarc Deltas               : 
Transarc Herder               : jaffe@transarc.com

[11/5/92 public]
Acl_edit is not issuing the correct error on exit:
# dce_login usera -dce-
# acl_edit lfs2_fs2 
sec_acl_edit> l
# SEC_ACL for lfs2_fs2:
# Default cell = /.../big
mask_obj:rwx-id
user_obj:rwxcid
group_obj:rwx---
other_obj:rwx---
sec_acl_edit> e
ERROR: acl object not found (dce / sec)
'e' for exit in acl_edit means rewrite the acl on the object that was
just listed (abort is exit without writing). The invoker must have 'c'
permission to update the ACL. Since in this case usera does not have
c permission, the rewrite is not allowed, but the error that is returned
should be object_not_found when the invoker has no permission and
not_authorized when the invoker has some permission but not the required
permission.  Since the invoker is in other_obj, the error should be
not_authorized.
Added field Transarc Deltas with value `' 
Added field Transarc Herder with value `mason@transarc.com' 
Added field Transarc Status with value `open'

[11/16/92 public]
 Actually, the owner should always have 'c' rights (6092).  As far as
I've been able to determine, the ONLY thing acl_edit says as an error
is "acl object not found".
Bruce, please verify that we are returning the correct error code
(EACCES vs. EPERM I believe).  If so, we should turn this into an
acl_edit bug.
Filled in Inter-dependent CRs with `6092' 
Changed Responsible Engr. from `mason@transarc.com' to `bwl@transarc.com'

[11/16/92 public]
In this case usera is NOT the owner, so, only has other_obj permissions.
I have also tried this on a namespace entry (CDS acl_mgr), and got the
behavior I describe above as appropriate (object_not_found when no perms,
not_authorized when user has some perms).

[12/9/92 public]
Part of the problem lies with security/client/acl/dfs_dce_acl.c.  This file
has the code that makes getacl and setacl syscalls and interprets the results.
On any error return from the syscalls, its functions always return
sec_acl_object_not_found.  They don't even bother to look at errno.  This
could be improved.  For instance, if errno is EPERM, they could return
sec_acl_not_authorized.
A more general problem is to communicate errors that can't be cleanly mapped
into Unix errno values.  For instance, when a setacl syscall is done that
tries to set the ``initial-container'' ACL of something that isn't a directory,
the getacl syscall is currently returning EINVAL.  Fine, but there are other
situations in which we return EINVAL; for instance, if the ACL fails
validation (dacl_epi_Validate returns error code).  These errors correspond
to different sec_acl codes, but they use the same Unix errno code.  This
illustrates a deficiency of the syscall interface.  To work around it,
perhaps the getacl and setacl syscalls could have an out-parameter into which
the ``real'' (sec_acl) error code can be written.

[1/4/92 public]
Added myself to the CC list, since another defect I opened (6683) turned out
to be a dup of this one.  Note:  As part of OT6548, I am adding a conversion
routine (from errno to DCE sec_acl errors), but that only solves part of the
problem since DFS is overloading errors like EINVAL (described above).

[1/5/93 public]
Just adding myself to the interest list.

[2/23/93 public]
Changed from enhancement to defect.  Not sure how it got marked
as an enh, maybe I opened it wrong to start with.  I didn't see
anything about that noted someone changing it.
Changed Defect or Enhancement? from `enh' to `def'

[8/16/93 public]
This is part of the task of sweeping old defects for OSF:
I took a close look at the ot5955 and also talked to Bruce about his original
concerns mentioned in the ot report.
                                                                               
The defect originally addressed two different problems. The first one was
that an user without an appropriate ACL while 'exit'ing the acl_edit could
get a non-meaningful error message.
                                                                               
For example, an user who has no write permission to file FOO when exiting
'acl_edit' may get
        ERROR: acl object not found (dce / sec)
instead of
        ERROR: operation on acl not authorized (dce / sec)
which is more appropriate after doing the following operation:
                                                                               
        # acl_edit FOO
        sec_acl_edit> l
        # SEC_ACL for FOO:
        # Default cell = /.../big
        mask_obj:rwx-id
        user_obj:rwxcid
        group_obj:rwx---
        other_obj:rwx---
        sec_acl_edit> e
        ERROR: acl object not found (dce / sec)
                                                                              
So far, this particular problem has been fixed by Mike Burati in his OT6548.
The second problem is that the DFS (the episode in this case) might not be able
to return an appropriate error message to the caller, acl_edit, after
experiencing some difficulty with reading/setting acl.
Here is Bruce's concern written in the ot report:
>
>....
>
>A more general problem is to communicate errors that can't be cleanly mapped
>into Unix errno values.  For instance, when a setacl syscall is done that
>tries to set the 'initial-container' ACL of something that isn't a directory,
>the getacl syscall is currently returning EINVAL.  Fine, but there are other
>situations in which we return EINVAL; for instance, if the ACL fails
>validation (dacl_epi_Validate returns error code).  These errors correspond
>to different sec_acl codes, but they use the same Unix errno code.  This
>illustrates a deficiency of the syscall interface.  To work around it,
>perhaps the getacl and setacl syscalls could have an out-parameter into which
>the ``real'' (sec_acl) error code can be written.
>
                                                                               
While Bruce's concern is legitimate, it actually takes more than just
modifying the setacl/getacl interface to return the exact error or an
appropriate error code to the caller.
                                                                               
The real problem is how DFS could properly map an internal error to an error
code that is recognized by both CM and acl_edit. The obvious choice is to use
the error codes exported by sec_acl defined in secsts.h.
                                                                              
However, coverting an internal DFS error code to an appropriate sec_acl code
could be a very cumbersome and time consuming process. Let's  take
function 'dacl_epi_Validate' (mentioned above)  as an example. Currently,
the Episode's efsx_setacl(), upon detecting an error from a call to
dacl_epi_Validate(), changes the returned error to EINVAL and then returns it
to caller. However, there could be hundreds of reasons that dacl_epi_Validate
fails. The internal errors coming from functions dacl_ParseAclDiskOption() and
dacl_ParseSyscallAcl(), etc., could be ranged from
DACL_ERROR_DUPLICATE_ENTRY_FOUND, DACL_ERROR_TOO_MANY_BYTES, to
DACL_ERROR_PARAMETER_ERROR, etc.
                                                                              
Mapping these error codes to a spectrum of sec_acl errors could be hard.
All internal error codes used in src/file/security/dac package and some of
Episode files have to be reviewed carefully. The changes would be pervasive.
In addition, even the converted error may still be meaningless to the acl_edit
or even to end users.
                                                                              
Given the minor functionality (to return a meaningful error code) we try to
achieve, I believe the amount of work needed to do it is really not justified.
I think that Bruce also shares my view in this regard.
                                                                               
Furthermore, this error conversion may also pose two potential issues need
to be resolved: 1) the setacl/getacl with a new syscall interface will not be
compatible with that of earlier (before 103) DFS/DCE releases.
Both DFS and acl_edit have to do some additional work to get around it.
2) Episode's vnop returning an sec_acl error not an Unix standard error may
cause some portable issues with a stand-alone Episode system (to be verified).
                                                                               
My recommendation on fixing the second problem of OT5955 is not to do it at
all. 
                                                                               
However, for now, mark it an enhancement for the record. 
tu
Changed Defect or Enhancement? from `def' to `enh' 
Changed H/W Ref Platform from `rs6000' to `all' 
Changed S/W Ref Platform from `aix' to `all' 
Changed Interest List CC from `burati' to `burati, tu@transarc.com' 
Changed Transarc Herder from `mason@transarc.com' to `jaffe@transarc.com'



CR Number                     : 5948
Defect or Enhancement?        : enh
CR in Code, Doc, or Test?     : code
Inter-dependent CRs           : 
Project Name                  : dce
H/W Ref Platform              : all
S/W Ref Platform              : all
Component Name                : dfs
Subcomponent Name             : fts
Short Description             : fts setquota allows arbitrary quota to be set
Reported Date                 : 11/5/92
Found in Baseline             : 1.0.2
Found Date                    : 11/5/92
Severity                      : D
Priority                      : 3
Status                        : open
Duplicate Of                  : 
Fix By Baseline               : 1.1
Fixed In Baseline             : 
Affected File(s)              : 
Diff supplied by              : 
Diff release                  : 
Sensitivity                   : public
Transarc Status               : open
Transarc Deltas               : 
Transarc Herder               : mason@transarc.com

[11/5/92 public]

fts setquota allows quota to be set to an arbitrary small value that 
prints usage well above 100% and this does not make sense. Does the following 
quota manipulation make sense?

# fts lsq -file rename_test
Fileset Name          Quota    Used  % Used   Aggregate
rename_test            5000      25     0%     1% = 263/16376 (LFS)
# fts setq -file rename_test -siz 10
# fts lsq -file rename_test
Fileset Name          Quota    Used  % Used   Aggregate
rename_test              10      25   250%<<   1% = 263/16376 (LFS)  <<WARNING
# fts setq -file rename_test -size 0
# fts lsq -file rename_test
Fileset Name          Quota    Used  % Used   Aggregate
rename_test               0      25     0%<<   1% = 263/16376 (LFS)  <<WARNING

Added field Transarc Deltas with value `' 
Added field Transarc Herder with value `mason@transarc.com' 
Added field Transarc Status with value `open'

[11/6/92 public]
Yes, it's perfectly reasonable for ``fts setquota'' to set quotas larger
than the current usage.  (Suppose you were freezing out a user's fileset,
but wanted to let them be able to recover by deleting files.)

At best, one could view this as an enhancement requesting that when you set
the quota to zero the ``% Used'' column doesn't print as 0%.
Changed Defect or Enhancement? from `def' to `enh'



CR Number                     : 5914
Defect or Enhancement?        : enh
CR in Code, Doc, or Test?     : test
Inter-dependent CRs           : 
Project Name                  : dce
H/W Ref Platform              : all
S/W Ref Platform              : all
Component Name                : dfs
Subcomponent Name             : EPISODE
Short Description             : us_io does not really do writes asynchronously
Reported Date                 : 11/3/92
Found in Baseline             : 1.0.2
Found Date                    : 11/3/92
Severity                      : C
Priority                      : 2
Status                        : open
Duplicate Of                  : 
Fix By Baseline               : 1.1
Fixed In Baseline             : 
Affected File(s)              : 
Diff supplied by              : 
Diff release                  : 
Sensitivity                   : public
Transarc Deltas               : 
Transarc Herder               : jaffe@transarc.com
Transarc Status               : open

[11/3/92 public]
The us_io routines that simulate asynchronous I/O completion actually do
the writes when strategy is called.  This means that from the point of
view of the disk the I/O isn't really asynchronous at all.  For testing
recovery this is inadaquate.
Added field Transarc Deltas with value `' 
Added field Transarc Herder with value `jaffe@transarc.com' 
Added field Transarc Status with value `open'

[11/11/93 public]
Opened this in Transarc's DB as 4666.
Changed CR in Code, Doc, or Test? from `code' to `test' 
Changed Subcomponent Name from `lfs' to `EPISODE' 
Filled in Reported by Company's Ref. Number with `4666'



CR Number                     : 5807
Defect or Enhancement?        : enh
CR in Code, Doc, or Test?     : code
Inter-dependent CRs           : 
Project Name                  : dce
H/W Ref Platform              : all
S/W Ref Platform              : all
Component Name                : dfs
Subcomponent Name             : ubik
Short Description             : ubikclient.c should use osi_Alloc, not malloc
Reported Date                 : 10/26/92
Found in Baseline             : 1.0.2
Found Date                    : 10/26/92
Severity                      : D
Priority                      : 3
Status                        : open
Duplicate Of                  : 
Fix By Baseline               : 1.1
Fixed In Baseline             : 
Affected File(s)              : 
Diff supplied by              : 
Diff release                  : 
Sensitivity                   : public
Transarc Status               : open
Transarc Deltas               : 
Transarc Herder               : jaffe@transarc.com

[10/26/92 public]
 While looking at the ubikclient.c file for OT 5800, I noticed it
calls malloc/free instead of osi_Alloc/osi_Free.  This will make it
harder to debug in the future; when someone makes a cleanup pass
through this code they should use the osi* versions.
Added field Transarc Deltas with value `' 
Added field Transarc Herder with value `jaffe@transarc.com' 
Added field Transarc Status with value `open'

[10/26/92 public]
Filled in Interest List CC with `comer@transarc.com' 
Changed Responsible Engr. from `comer@transarc.com' to `vijay@transarc.com'

[10/26/92 public]

[7/21/93 public]
Of course this is not the only place that uses malloc/free rather than
osi_Alloc/osi_Free. In fact, there are a bunch of them. We should do that in
one sweep. 
                                                                        
Mark this an enhancement. 
Here is the list that uses malloc/free not osi_Alloc/osi_Free:
afsd/afsd.c
bak/main.c
bakserver/db_text.c
bakserver/procs.c
bakutil/budb_test.c
bakutil/fms.c
bosserver/bossvr_main.c
butm/file_tm.c
dfsbind/bind_helper.c
dfsbind/main_helper.c
flserver/flserver.c
fsprobe/fsprobe.c
fsprobe/fsprobe_test.c
gtx/curseswindows.c
gtx/frame.c
gtx/keymap.c
gtx/lightobject.c
gtx/objects.c
gtx/textcb.c
gtx/textobject.c
icl/icl_dump.c
icl/icl_dumpCommand.c
ncscompat/compat_cds.c
ncscompat/compat_junct.c
ncscompat/compat_osi.c
ncscompat/compat_rpcVers.c
ncsubik/beacon.c
ncsubik/disk.c
ncsubik/lock.c
ncsubik/ubik.c
ncsubik/ubikclient.c
osi/osi_misc.c
osi/osi_pag.c
px/pxclient.c
scout/scout.c
security/dfssec_errorStrings.c
update/client.c
update/manager.c
update/server.c
util/ktime.c
util/malloc.c
xaggr/dfstab.c
xaggr/export.c
Changed Defect or Enhancement? from `def' to `enh' 
Changed Interest List CC from `comer@transarc.com' to `comer@transarc.com, 
 tu@transarc.com'

[7/21/93 public]
I can't believe it is worth the trouble to change all occurrences of malloc/free to
osi_Alloc/osi_Free.  Whoever ends up doing this please use some discretion.

[3/30/94 public]
We're looking at this for 1.1



CR Number                     : 5780
Defect or Enhancement?        : enh
CR in Code, Doc, or Test?     : doc
Inter-dependent CRs           : 
Project Name                  : dce
H/W Ref Platform              : all
S/W Ref Platform              : all
Component Name                : dfs
Subcomponent Name             : admin_gd
Short Description             : More documentation for server principals in DFS admin lists
Reported Date                 : 10/23/92
Found in Baseline             : 1.0.1
Found Date                    : 10/23/92
Severity                      : D
Priority                      : 3
Status                        : open
Duplicate Of                  : 
Fix By Baseline               : 1.2
Fixed In Baseline             : 
Affected File(s)              : 
Diff supplied by              : 
Diff release                  : 
Sensitivity                   : public
Transarc Status               : open
Transarc Deltas               : 
Transarc Herder               : 

[10/23/92 public]
The dfs-server principals for all DFS machines are by default members of a
cell-wide dfs-admin group (which may have some involvement with the cell_admin
identity).  Because of this, the local root user on a machine can use the
-localauth options provided with a number of commands to masquerade as the
local machine, assuming the privileges granted to the machine by virtue of
its inclusion in the dfs-admin group.  Possible effects of the default
configuration and machines' inclusion on DFS admin lists need to be
documented; the documentation is, however, an enhancement at this point.
Added field Transarc Deltas with value `' 
Added field Transarc Herder with value `mason@transarc.com' 
Added field Transarc Status with value `open'

[10/27/92 public]
Changed Severity from `E' to `D'

[10/27/92 public]
Changed Priority from `4' to `3'

[6/22/93 public]
Changed "Fix By Baseline" from 1.0.3 to 1.1.

[8/18/93 public]
Changed Priority from `3' to `4'

[5/19/94 public]
The following information related to this defect was taken from defect 8118:
 
 Many commands in the \*Lbos\*O and \*Lfts\*O command suites include a
 \*L-localauth\*O option. The option allows you to direct the \*Lbos\*O or
 \*Lfts\*O program to use the DFS server principal of the machine on which the
 command is issued as the identity of the issuer of the command. Because the
 command executes with the identity of the machine, the DFS server principal of
 the machine from which the command issued must be included in the necessary
 administrative lists; otherwise, the command fails. For example, including the
 \*L-localauth\*O option with a \*Lbos\*O command issued from machine \*Lfs1\*O
 to machine \*Lfs2\*O succeeds only if the DFS server principal of machine
 \*Lfs1\*O is included in the \*Ladmin.bos\*O list on machine \*Lfs2\*O.
 
 To simplify this requirement, create a group that contains all DFS server
 principals and include that group in the \*Ladmin.fl\*O, \*Ladmin.bos\*O, and
 \*Ladmin.ft\*O lists on all trusted DFS server machines in your cell. If your
 cell includes administrative domains, the latter two lists may require special
 domain-specific groups.
 
The information is included here so that I can avoid duplication of the same
defect information and so that I can close defect 8818.

[5/25/94 public]
The following notes also pertain to this defect.  I am including the text here
so that all of this information can be considered together when the time comes
to address the defect:
 
  The documentation needs to be updated to include that DFS server processes
  run as the dfs-server principal of the machine on which they are configured.
  Especially note that the documentation of the bos commands for admin lists
  needs to be corrected to mention that the dfs-server principals of machines
  that run DFS processes need to be included in lists for those processes to
  be able to work on the machine. For example, lists such as admin.up must
  include the dfs-server principals of machines that run upclient to access
  files from the machine.
 
  On a similar note, the dfs-admin group automatically contains the dfs-server
  principals of the machines that run DFS server processes.  Thsi group can be
  included in DFS admin lists to allow all members of the group to have the
  admin privileges associated with the list.  We may want to discuss or at
  least mention how and when the dfs-server principals are added to the
  dfs-admin group.
 
Changed Severity from `D' to `C' 
Changed Priority from `4' to `3' 
Changed Transarc Herder from `mason@transarc.com' to `'

[11/8/94 public]
Changed Responsible Engr. from `jeff@transarc.com' to `wfl@transarc.com'

[7/17/95 public]
Reopened for DCE 1.2.



CR Number                     : 5769
Defect or Enhancement?        : enh
CR in Code, Doc, or Test?     : test
Inter-dependent CRs           : 3804, 5508
Project Name                  : dce
H/W Ref Platform              : all
S/W Ref Platform              : all
Component Name                : dfs
Subcomponent Name             : lfs
Short Description             : Need tests for "new block security" functionality
Reported Date                 : 10/22/92
Found in Baseline             : 1.0.1b24
Found Date                    : 10/22/92
Severity                      : C
Priority                      : 2
Status                        : open
Duplicate Of                  : 
Fix By Baseline               : 1.1
Fixed In Baseline             : 
Affected File(s)              : 
Diff supplied by              : 
Diff release                  : 
Sensitivity                   : public
Transarc Status               : open
Transarc Deltas               : 
Transarc Herder               : mason@transarc.com

[10/22/92 public]
We need tests for the New Block Security functionality that has been
added into the LFS code.

Added field Transarc Deltas with value `' 
Added field Transarc Herder with value `mason@transarc.com' 
Added field Transarc Status with value `open'

[10/22/92 public]
Deltas mason-ot5508-wrong-comparison-in-WaitForTranFree and
ota-new-block-security-2467, should enable new block security.

Filled in Inter-dependent CRs with `3804, 5508'

[10/22/92 public]
Changed Interest List CC from `ota@transarc.com' to `ota,mason'

[mcinerny@transarc.com 10/23/92 public] 
This is not a bug in the system code base, but a bug with the test
code base.

Changed CR in Code, Doc, or Test? from `code' to `test'



CR Number                     : 5764
Defect or Enhancement?        : enh
CR in Code, Doc, or Test?     : code
Inter-dependent CRs           : 
Project Name                  : dce
H/W Ref Platform              : all
S/W Ref Platform              : all
Component Name                : dfs
Subcomponent Name             : dfs
Short Description             : remove unnecessary assert ..
Reported Date                 : 10/22/92
Found in Baseline             : 1.0.2
Found Date                    : 10/22/92
Severity                      : C
Priority                      : 2
Status                        : open
Duplicate Of                  : 
Fix By Baseline               : 1.1
Fixed In Baseline             : 
Affected File(s)              : 
Diff supplied by              : 
Diff release                  : 
Sensitivity                   : public
Transarc Status               : open
Transarc Deltas               : 
Transarc Herder               : mason@transarc.com

[10/22/92 public]
Currently, there are quite a few osi_assert lines  left in the kernel code.
Most of them are for debugging purpose and should be removed when 
the product gets stable. 

This OT is used as a reminder. 
Added field Transarc Deltas with value `' 
Added field Transarc Herder with value `mason@transarc.com' 
Added field Transarc Status with value `open'

[10/22/92 public]
Since this is just a reminder, it should be an enhancment instead of a defect.
Changed Defect or Enhancement? from `def' to `enh'



CR Number                     : 5742
Defect or Enhancement?        : enh
CR in Code, Doc, or Test?     : code
Inter-dependent CRs           : 
Project Name                  : dce
H/W Ref Platform              : all
S/W Ref Platform              : all
Component Name                : dfs
Subcomponent Name             : EPISODE
Short Description             : Use a single debugging/tracing method in LFS
Reported Date                 : 10/21/92
Found in Baseline             : 1.0.2
Found Date                    : 10/21/92
Severity                      : C
Priority                      : 2
Status                        : open
Duplicate Of                  : 
Fix By Baseline               : 1.1
Fixed In Baseline             : 
Affected File(s)              : 
Diff supplied by              : 
Diff release                  : 
Sensitivity                   : public
Transarc Status               : open
Transarc Deltas               : 
Transarc Herder               : jaffe@transarc.com

[10/21/92 public]
The episode code base uses at least two different tracing/debugging methods,
neither of which is used in the DFS kernel code.  This enhancment is a result
of ot defect 3797 which was a bug caused by this mash of methods.
The current standard method is to use icl.  I believe that this work will 
wait until the 1.1 servicability changes.
Added field Transarc Deltas with value `' 
Added field Transarc Herder with value `jaffe@transarc.com' 
Added field Transarc Status with value `open'

[10/21/92 public]
If it will wait, we should mark it as such.
Changed Fix By Baseline from `1.0.2' to `1.1'

[11/16/92 public]
Reassigned to Ted.
Filled in Interest List CC with `bwl,mason' 
Changed Responsible Engr. from `mason@transarc.com' to `ota@transarc.com'

[1/24/94 public]
Changed Subcomponent Name from `lfs' to `EPISODE'



CR Number                     : 5714
Defect or Enhancement?        : enh
CR in Code, Doc, or Test?     : code
Inter-dependent CRs           : 
Project Name                  : dce
H/W Ref Platform              : all
S/W Ref Platform              : all
Component Name                : dfs
Subcomponent Name             : lfs
Short Description             : salvager should flip RO bit on fsets w/backing anodes
Reported Date                 : 10/20/92
Found in Baseline             : 1.0.1
Found Date                    : 10/20/92
Severity                      : C
Priority                      : 2
Status                        : open
Duplicate Of                  : 
Fix By Baseline               : 1.1
Fixed In Baseline             : 
Affected File(s)              : 
Diff supplied by              : 
Diff release                  : 
Sensitivity                   : public
Transarc Deltas               : 
Transarc Herder               : jaffe@transarc.com
Transarc Status               : open

[10/20/92 public]
The salvager currently complains when it encounters a read/write fileset that
contains backing anodes, but does nothing to repair the fileset.  It should
at least mark the fileset read-only.
Added field Transarc Deltas with value `' 
Added field Transarc Herder with value `jaffe@transarc.com' 
Added field Transarc Status with value `open'

[10/27/92 public]
Reassign to Blake.  Add Ted to cc list.
Changed Interest List CC from `jdp@transarc.com, comer@transarc.com' to 
 `jdp,comer,ota' 
Changed Responsible Engr. from `ota@transarc.com' to `blake@transarc.com'

[10/19/93 public]
This is just one of many possible improvements to the way the salvager
deals with damage it encounters.
Changed Defect or Enhancement? from `def' to `enh' 
Filled in Reported by Company's Ref. Number with `4514'



CR Number                     : 5692
Defect or Enhancement?        : enh
CR in Code, Doc, or Test?     : code
Inter-dependent CRs           : 
Project Name                  : dce
H/W Ref Platform              : rs6000
S/W Ref Platform              : aix
Component Name                : dfs
Subcomponent Name             : fts restore
Short Description             : fts restore should check target fs for enough space
Reported Date                 : 10/19/92
Found in Baseline             : 1.0.2
Found Date                    : 10/19/92
Severity                      : D
Priority                      : 3
Status                        : open
Duplicate Of                  : 
Fix By Baseline               : 1.1
Fixed In Baseline             : 
Affected File(s)              : 
Diff supplied by              : 
Diff release                  : 
Sensitivity                   : public
Transarc Status               : open
Transarc Deltas               : 
Transarc Herder               : mcinerny@transarc.com

[10/19/92 public]
It seems fts restore should check the target fileset for enough space to load
the dump file into before it starts restoring the dump file.  It may not seem
like it matters on 48M filesets but on a 1G fs its a big waste of time.

If you're trying to restore a 500M dump file into a 400M fileset fts restore
should inform you that the dump file is larger than the destination fileset
and quit.

    <Note by dstokes (Dawn C. Stokes), 92/08/28 10:03:43, action: note>

The same could be said of fts dump.  Should it check for enough space
before trying to create the dump file??
Added field Transarc Deltas with value `' 
Added field Transarc Herder with value `mason@transarc.com' 
Added field Transarc Status with value `open'

[10/19/92 public]
Assign to Jeff since he is working on dump/restore?

Filled in Interest List CC with `cfe@transarc.com, pakhtar@transarc.com' 
Filled in Responsible Engr. with `jdp' 
Changed Transarc Herder from `mason@transarc.com' to `mcinerny@transarc.com'

[10/19/92 public]
This is definitely an enhancement, not a defect.

In any case, the relationship between the size of a dump and the free space
on a fileset is truly questionable.  This is particularly true when doing
restorations of incremental dumps, where the dump could free more space than
it allocates, or for doing incremental dumps in any form.  There is plenty
of overhead in the dump file format.

Also, the low-level dump/restore stuff does not necessarily read from, or
write to, a file.  Neither the fts dump/restore commands, nor the
FTSERVER_Dump/FTSERVER_Restore RPC interfaces, necessarily have a file that
they can stat() or statfs().

Jeff isn't working on dump/restore.  I believe that this is in the admin
group's arena.
Changed Defect or Enhancement? from `def' to `enh' 
Changed Found in Baseline from `1.0.1' to `1.0.2' 
Changed Fix By Baseline from `1.0.1' to `1.0.2' 
Changed Responsible Engr. from `jdp' to `comer@transarc.com'

[11/2/92 public]
Changed Interest List CC from `cfe@transarc.com, pakhtar@transarc.com' to 
 `cfe@transarc.com, pakhtar@transarc.com, comer@transarc.com' 
Changed Responsible Engr. from `comer@transarc.com' to `vijay@transarc.com'

[11/11/92 public]

Checking the aggregate for lack of space for restoring a fileset does not hold
for incremental restores, as Craig points out. For restoring full dumps,
the overhead in the dump file makes this check non-deterministic. With changes
to the dump file format, it would become impossible to determine if a restore 
from a dump file would fit in the aggregate or not. Some ad-hoc mechanism can 
be used, but would not be a good idea. Also, restores can overwrite existing 
filesets, in which case, the restore may free up space in the aggregate. The
determination of whether the restore would fit in an aggregate should therefore
be left to the administrator.

Changed Severity from `C' to `D' 
Changed Priority from `2' to `3'



CR Number                     : 5683
Defect or Enhancement?        : enh
CR in Code, Doc, or Test?     : test
Inter-dependent CRs           : 
Project Name                  : dce
H/W Ref Platform              : all
S/W Ref Platform              : all
Component Name                : dfs
Subcomponent Name             : lfs
Short Description             : Need tests for newaggr
Reported Date                 : 10/16/92
Found in Baseline             : 1.0.1b24
Found Date                    : 10/16/92
Severity                      : C
Priority                      : 2
Status                        : open
Duplicate Of                  : 
Fix By Baseline               : 1.1
Fixed In Baseline             : 
Affected File(s)              : 
Diff supplied by              : 
Diff release                  : 
Sensitivity                   : public
Transarc Status               : open
Transarc Deltas               : 
Transarc Herder               : mason@transarc.com

[10/16/92 public]

Need tests for newaggr.

Added field Transarc Deltas with value `' 
Added field Transarc Herder with value `mason@transarc.com' 
Added field Transarc Status with value `open'



CR Number                     : 5673
Defect or Enhancement?        : enh
CR in Code, Doc, or Test?     : code
Inter-dependent CRs           : 
Project Name                  : dce
H/W Ref Platform              : all
S/W Ref Platform              : all
Component Name                : dfs
Subcomponent Name             : dfsexport
Short Description             : Has un-intuitive command syntax.
Reported Date                 : 10/16/92
Found in Baseline             : 1.0.1
Found Date                    : 10/16/92
Severity                      : C
Priority                      : 2
Status                        : open
Duplicate Of                  : 
Fix By Baseline               : 1.1
Fixed In Baseline             : 
Affected File(s)              : 
Diff supplied by              : 
Diff release                  : 
Sensitivity                   : public
Transarc Status               : open
Transarc Deltas               : 
Transarc Herder               : mason@transarc.com

[10/16/92 public]

The command syntax for dfsexport allows for a -type specification, indicating
that only aggregates of that type will be exported.  However, this option
must be issued with the -all option to be effective.  Why do you need the 
-all option.  It should be implied from the -type switch.

I used dfsexport with just the -type switch without the -all and it did 
not complain, it just did not export any of the aggregates of that type.

Added field Transarc Deltas with value `' 
Added field Transarc Herder with value `mason@transarc.com' 
Added field Transarc Status with value `open'

[10/16/92 public]
I'm reassigning this to Pervaze, as it's a request for an interface change.
This feature has been around for a long time, and is adequately covered in
the documentation.
Changed Defect or Enhancement? from `def' to `enh' 
Changed Interest List CC from `jeff@transarc.com' to `jeff@transarc.com, 
 cfe@transarc.com' 
Changed Responsible Engr. from `cfe@transarc.com' to `pakhtar@transarc.com'



CR Number                     : 5672
Defect or Enhancement?        : enh
CR in Code, Doc, or Test?     : test
Inter-dependent CRs           : 5368
Project Name                  : dce
H/W Ref Platform              : all
S/W Ref Platform              : all
Component Name                : dfs
Subcomponent Name             : test
Short Description             : CreateLocalUser needs to create requisite dirs
Reported Date                 : 10/15/92
Found in Baseline             : 1.0.2
Found Date                    : 10/15/92
Severity                      : E
Priority                      : 4
Status                        : open
Duplicate Of                  : 
Fix By Baseline               : 1.1
Fixed In Baseline             : 
Affected File(s)              : 
Diff supplied by              : 
Diff release                  : 
Sensitivity                   : public
Transarc Status               : open
Transarc Deltas               : 
Transarc Herder               : mcinerny@transarc.com

[10/15/92 public]
The test/file/util/CreateLocalAccount script needs the following
directories to exist in order to succeed:

RIOS:  /u/$new_user
PMAX:  /usr/users
	(yes, /usr/users -- it does not need to make a dir for each new user)

Perhaps it should be more assertive about having these dirs?  Especially 
on a pmax, where the lack of /usr/users causes the subordinate call to adduser
to loop forever.

Added field Transarc Deltas with value `' 
Added field Transarc Herder with value `mcinerny@transarc.com' 
Added field Transarc Status with value `open'



CR Number                     : 5615
Defect or Enhancement?        : enh
CR in Code, Doc, or Test?     : code
Inter-dependent CRs           : 
Project Name                  : dce
H/W Ref Platform              : all
S/W Ref Platform              : all
Component Name                : dfs
Subcomponent Name             : lfs
Short Description             : asdb - needs a better way of handling aggregate device names.
Reported Date                 : 10/12/92
Found in Baseline             : 1.0.1b24
Found Date                    : 10/12/92
Severity                      : E
Priority                      : 4
Status                        : open
Duplicate Of                  : 
Fix By Baseline               : 1.1
Fixed In Baseline             : 
Affected File(s)              : 
Diff supplied by              : 
Diff release                  : 
Sensitivity                   : public
Transarc Status               : open
Transarc Deltas               : 
Transarc Herder               : mason@transarc.com

[10/12/92 public]

Asdb assumes that if the aggregate name starts with a "r" it is
specifying the raw device file name - e.g. if there is a device
/dev/rcxa and rcxa is fed to asdb, asdb thinks that rcxa is the raw
device file name instead of rrcxa. A minor problem but confusing
nonetheless.
Added field Transarc Deltas with value `' 
Added field Transarc Herder with value `mason@transarc.com' 
Added field Transarc Status with value `open'



CR Number                     : 5595
Defect or Enhancement?        : enh
CR in Code, Doc, or Test?     : test
Inter-dependent CRs           : 
Project Name                  : dce
H/W Ref Platform              : all
S/W Ref Platform              : all
Component Name                : dfs
Subcomponent Name             : fs, low
Short Description             : The debug flag should not be hard coded in C files.
Reported Date                 : 10/8/92
Found in Baseline             : 1.0.2
Found Date                    : 10/8/92
Severity                      : C
Priority                      : 2
Status                        : open
Duplicate Of                  : 
Fix By Baseline               : 1.2
Fixed In Baseline             : 
Affected File(s)              : 
Diff supplied by              : 
Diff release                  : 
Sensitivity                   : public
Transarc Status               : open
Transarc Deltas               : 
Transarc Herder               : jaffe@transarc.com

[10/8/92 public]
The debug flags in C programs, such as prog1.c, ..., prog14.c in fs and low
have been hard coded, which is not the way we want. Each time you want to
change the flags you have explicitly fire a defect to set the flags.
Those flags should be passed to thos C programs by the scripts. In fact,
we just want use a single debug set at script level to control the debug
flags both for scripts and C programs.
Added field Transarc Deltas with value `' 
Added field Transarc Herder with value `jaffe@transarc.com' 
Added field Transarc Status with value `open'

[7/20/93 public]
The problem is not considered a bug. However, we should enhance it in the
future, so marked. 
Changed Defect or Enhancement? from `def' to `enh' 
Changed Interest List CC from `pakhtar@transarc.com, fred@transarc.com' to 
 `pakhtar@transarc.com, fred@transarc.com, tu'

[3/30/94 public]
We're looking at this for 1.1

[7/6/94 public]
Doesn't look like we'll have time ...



CR Number                     : 5594
Defect or Enhancement?        : enh
CR in Code, Doc, or Test?     : code
Inter-dependent CRs           : 
Project Name                  : dce
H/W Ref Platform              : rs6000
S/W Ref Platform              : aix
Component Name                : dfs
Subcomponent Name             : bos
Short Description             : Admin lists should be moved to a subdir
Reported Date                 : 10/8/92
Found in Baseline             : 1.0.1
Found Date                    : 10/8/92
Severity                      : D
Priority                      : 4
Status                        : open
Duplicate Of                  : 
Fix By Baseline               : 1.1
Fixed In Baseline             : 
Affected File(s)              : 
Diff supplied by              : 
Diff release                  : 
Sensitivity                   : public
Transarc Status               : open
Transarc Deltas               : 
Transarc Herder               : mason@transarc.com

[10/8/92 public]
The admin lists should be moved to a seperate subdirectory to make
upclient/upserver administration easier (so you can give a subdir
instead of a list of files).  My suggestion would be to move the
admin lists to /var/dfs/adm, and the logs to a new directory,
/var/dfs/logs.  This is an enhancement, so I am opening it as such.
I have talked to Pervaze about it, and he agrees that it is a 
reasonable idea, but is pretty low on the priority list, so it may
not get done until 1.1.  I added this as the 'Fix By Baseline'
field.
Added field Transarc Deltas with value `' 
Added field Transarc Herder with value `mason@transarc.com' 
Added field Transarc Status with value `open'

[10/9/92 public]
Filled in Interest List CC with `bab@transarc.com'

[11/8/93 public]

[11/17/93 public]

[11/30/93 public]
Are you interested in being able to relocate the admin lists to a separate
directory in your own product or do you want them moved for "the standard
product" (with docs updated, etc)?  If the first, do you want to have the
dynamically relocatable (after reboot) or just be compiled to a different
location.



CR Number                     : 5576
Defect or Enhancement?        : enh
CR in Code, Doc, or Test?     : code
Inter-dependent CRs           : 
Project Name                  : dce
H/W Ref Platform              : all
S/W Ref Platform              : all
Component Name                : dfs
Subcomponent Name             : lfs
Short Description             : need to be able to specify "hyper" fileset ids to epimount.
Reported Date                 : 10/7/92
Found in Baseline             : 1.0.1b24
Found Date                    : 10/7/92
Severity                      : E
Priority                      : 4
Status                        : open
Duplicate Of                  : 
Fix By Baseline               : 1.1
Fixed In Baseline             : 
Affected File(s)              : 
Diff supplied by              : 
Diff release                  : 
Sensitivity                   : public
Transarc Status               : open
Transarc Deltas               : 
Transarc Herder               : mason@transarc.com

[10/7/92 public]

Currently, epimount cannot accept a "hyper" fileset id. Since fileset
ids are hypers, need a way to parse these hyper fileset ids in epimount.
Suspect that this problem is wider in scope than epimount.
Added field Transarc Deltas with value `' 
Added field Transarc Herder with value `mason@transarc.com' 
Added field Transarc Status with value `open'



CR Number                     : 5567
Defect or Enhancement?        : enh
CR in Code, Doc, or Test?     : test
Inter-dependent CRs           : 
Project Name                  : dce
H/W Ref Platform              : all
S/W Ref Platform              : all
Component Name                : dfs
Subcomponent Name             : 
Short Description             : dfsexport
Reported Date                 : 10/6/92
Found in Baseline             : 1.0.2
Found Date                    : 10/6/92
Severity                      : D
Priority                      : 3
Status                        : open
Duplicate Of                  : 
Fix By Baseline               : 1.1
Fixed In Baseline             : 
Affected File(s)              : 
Diff supplied by              : 
Diff release                  : 
Sensitivity                   : public
Transarc Status               : open
Transarc Deltas               : 
Transarc Herder               : jaffe@transarc.com

[10/6/92 public]
Sure would be nice if we used a uniform paradigm for device naming in dfs.
For example, newaggr will accept the name "epi0" and convert it to /dev/epi0
while dfsexport will only accept /dev/epi0.
Added field Transarc Deltas with value `' 
Added field Transarc Herder with value `jaffe@transarc.com' 
Added field Transarc Status with value `open'

[3/30/94 public]
We're looking at this for 1.1

[3/31/94 public]
We'd need to know what the deficiencies are.  I believe that at least some
of the cases have been handled since the bug was filed.  But we may have
a fix or two.



CR Number                     : 5530
Defect or Enhancement?        : enh
CR in Code, Doc, or Test?     : test
Inter-dependent CRs           : 
Project Name                  : dce
H/W Ref Platform              : all
S/W Ref Platform              : all
Component Name                : dfs
Subcomponent Name             : lfs
Short Description             : efts attach on a non-Episode aggregate does not generate meaningful error
Reported Date                 : 10/2/92
Found in Baseline             : 1.0.1b24
Found Date                    : 10/2/92
Severity                      : E
Priority                      : 4
Status                        : open
Duplicate Of                  : 
Fix By Baseline               : 1.1
Fixed In Baseline             : 
Affected File(s)              : 
Diff supplied by              : 
Diff release                  : 
Sensitivity                   : public
Transarc Status               : open
Transarc Deltas               : 
Transarc Herder               : mason@transarc.com

[10/2/92 public]

This is on build dfs-102-1.51. efts attach on a BSD filesystem /dev/rcxb 
generates:

 [tmp] efts attach /dev/rcxb
efts: Aggregate may need to be recovered (dfs / ftu)

 [tmp] salvage /dev/rcxb
Salvaging /dev/rcxb
Will run recovery on /dev/rcxb
 SectorSize 512; TotalBlocks 16384; BlockSize 4096;
 FragmentSize 512; FileSysCreateTime 718039474;
 FileSysClean 1; FileSysEmpty 0; FileSysMountedAs ``/tmp/r''
/dev/rrcxb: Not an Episode file system.
/dev/rrcxb: cannot verify an aggregate with these parameters.
Problem with /dev/rrcxb as Episode aggregate: crash (exit=0x10).

efts should probably complain its not a Episode aggregate as salvage does.

Added field Transarc Deltas with value `' 
Added field Transarc Herder with value `mason@transarc.com' 
Added field Transarc Status with value `open'

[10/26/92 public]
Actually this is a cosmetic enhancement request
Changed Defect or Enhancement? from `def' to `enh'



CR Number                     : 5513
Defect or Enhancement?        : enh
CR in Code, Doc, or Test?     : code
Inter-dependent CRs           : 
Project Name                  : dce
H/W Ref Platform              : all
S/W Ref Platform              : all
Component Name                : dfs
Subcomponent Name             : EPISODE
Short Description             : end record does not contain service name
e name
Reported Date                 : 10/1/92
Found in Baseline             : 1.0.2
Found Date                    : 10/1/92
Severity                      : C
Priority                      : 4
Status                        : open
Duplicate Of                  : 
Fix By Baseline               : 1.1
Fixed In Baseline             : 
Affected File(s)              : 
Diff supplied by              : 
Diff release                  : 
Sensitivity                   : public
Transarc Status               : open
Transarc Deltas               : 
Transarc Herder               : jaffe@transarc.com

[10/1/92 public]
The END record type does not specify either new or old data.  Thus
attempting to put the service name in the end record amounts to a no-op.
However, the ScriptRecord procedure doesn't check any of this and so
prints the lsn as a binary string!  Thus readlog prints garbage and this
useful information is unavailable.
Fixing readlog is a first step.
Adding a new END record type that specifies old (or new) data would be
an added improvement.
Also we noticed that the opHash isn't being put anywhere in the log
records.  This is a very cheap debugging aid that seems to have gotten
lost somewhere along the way.
Further note that the code in EndTran which calls elbl_Write specifies a
length of strlen(opString) but doesn't say "+1" to account for the
terminating null.
Added field Transarc Deltas with value `' 
Added field Transarc Herder with value `jaffe@transarc.com' 
Added field Transarc Status with value `open'

[10/13/92 public]
While we're adding a second end record type with room for the service
name we should also do the same for BEND records.  Currently there is no
provision for including the service name of merged transactions unless
it happens to be the head.  This could be a real inconvenience.
The decision on which type of END (and BEND) record to use should be
made selectable so that we can save space in the log for production
systems.  The opHash, however, should always be available!

[10/19/92 public]
Ted's in mucking with this code anyway; maybe he's fixed it.
Changed Interest List CC from `ota' to `ota,mason' 
Changed Responsible Engr. from `mason@transarc.com' to `ota@transarc.com'

[10/22/92 public]
I've finished mucking, but didn't get to this work.

[9/14/93 public]
Ted believes this should be an enhancement since no harm could be done.
So marked.

[9/14/93 public]
Forgot to change the defect field.
Changed Defect or Enhancement? from `def' to `enh'

[1/24/94 public]
Changed Subcomponent Name from `lfs' to `EPISODE'



CR Number                     : 5502
Defect or Enhancement?        : enh
CR in Code, Doc, or Test?     : code
Inter-dependent CRs           : 
Project Name                  : dce
H/W Ref Platform              : all
S/W Ref Platform              : all
Component Name                : dfs
Subcomponent Name             : EPISODE
Short Description             : salvage report block/frag size on bitmap errors
Reported Date                 : 9/30/92
Found in Baseline             : 1.0.1b24
Found Date                    : 9/30/92
Severity                      : C
Priority                      : 2
Status                        : open
Duplicate Of                  : 
Fix By Baseline               : 1.1
Fixed In Baseline             : 
Affected File(s)              : 
Diff supplied by              : 
Diff release                  : 
Sensitivity                   : public
Transarc Status               : open
Transarc Deltas               : 
Transarc Herder               : mason@transarc.com

[9/30/92 public]
The bitmap error messages from the salvager are ambiguious without
knowing the block size to fragment size ratio.  This should be printed
at least once if any bitmap errors are encountered.
Added field Transarc Deltas with value `' 
Added field Transarc Herder with value `mason@transarc.com' 
Added field Transarc Status with value `open'

[1/24/94 public]
Changed Subcomponent Name from `lfs' to `EPISODE'



CR Number                     : 5426
Defect or Enhancement?        : enh
CR in Code, Doc, or Test?     : code
Inter-dependent CRs           : 
Project Name                  : dce
H/W Ref Platform              : all
S/W Ref Platform              : all
Component Name                : dfs
Subcomponent Name             : EPISODE
Short Description             : sync may not get all the data out in VM systems
Reported Date                 : 9/18/92
Found in Baseline             : 1.0.2
Found Date                    : 9/18/92
Severity                      : C
Priority                      : 2
Status                        : open
Duplicate Of                  : 
Fix By Baseline               : 1.1
Fixed In Baseline             : 
Affected File(s)              : 
Diff supplied by              : 
Diff release                  : 
Sensitivity                   : public
Transarc Status               : fixed
Transarc Deltas               : blake-db5134-episode-VM-reorg, dimitris-db5134-episode-VM-reorg, et al
Transarc Herder               : jaffe@transarc.com

[9/18/92 public]
sync is implemented by flushing VM, then flushing the buffer system.
However, you may have to flush the buffer system some more when all the
activity created by the VM flush has been completed, because the scheduling
of any page of VM could cause allocation, and the allocation will dirty
one or more buffers.  For instance:  on AIX, vm_writep causes the VMM to
want to write 100 pages.  So one hundred VMM struct buf's get queued on the
strategy daemon's list.  Meanwhile elbb_SyncForce flushes the buffer system.
Some time later page number 100 gets processed by the strategy daemon, which
discovers that a new block must be allocated, which modifies two buffers:  the
buffer representing the indirect block that points to the new block, and the
buffer representing the relevant part of the bitmap.  Both of these buffers
should be scheduled, even though elbb_SyncForce has long since returned.
A consequence of the bug is that if you type ``sync'' and then wait till the
disk quiets down, you cannot be sure that you don't have any more dirty
buffers.
We can't fix this by monitoring the strategy daemon's queue, because
not all the pages flushed by vm_writep will immediately be put on the queue.
If more than 300 pages are flushed, only the first 300 will immediately be
put on the queue; the rest must wait, since the VMM only has 300 struct buf's
for use by Episode.  This is unfortunate, because it means that there is
no obvious way to determine when all the allocation has been done for all
the user data that has been flushed on behalf of a sync.  We can wait for
the quota and/or space reservation to go to zero, but on an active system
this could cause us to wait forever.
A possible fix is, instead of waiting for reservation to go to zero, don't
block, but handle that event when it happens.  That is, if reservation goes
to zero and it has not gone to zero since the last sync, call elbb_SyncForce.
If it doesn't ever go to zero between two calls to sync, the system is active
(the disk never quiets down), so who cares.  And efs_sync itself will call
elbb_SyncForce, ensuring that the data eventually goes out.
Added field Transarc Deltas with value `' 
Added field Transarc Herder with value `jaffe@transarc.com' 
Added field Transarc Status with value `open'

[9/30/92 public]
While it would be nice to give stronger semantic guarantees in
sync(2), this isn't a defect - it is an enhancement.
Changed Defect or Enhancement? from `def' to `enh'

[7/18/94 public]
The problem this bug addresses doesn't exist under the new VM
reorganization done to fix Transarc defect 5134 and related deltas.
Changed Subcomponent Name from `lfs' to `EPISODE' 
Changed Transarc Status from `open' to `fixed' 
Filled in Transarc Deltas with `blake-db5134-episode-VM-reorg, 
 dimitris-db5134-episode-VM-reorg, et al'



CR Number                     : 5417
Defect or Enhancement?        : enh
CR in Code, Doc, or Test?     : code
Inter-dependent CRs           : 5421,6066
Project Name                  : dce
H/W Ref Platform              : all
S/W Ref Platform              : all
Component Name                : dfs
Subcomponent Name             : lfs
Short Description             : sync during panic can hang
Reported Date                 : 9/17/92
Found in Baseline             : 1.0.2
Found Date                    : 9/17/92
Severity                      : C
Priority                      : 2
Status                        : open
Duplicate Of                  : 
Fix By Baseline               : 1.1
Fixed In Baseline             : 
Affected File(s)              : 
Diff supplied by              : 
Diff release                  : 
Sensitivity                   : public
Transarc Status               : open
Transarc Deltas               : 
Transarc Herder               : jaffe@transarc.com

[9/17/92 public]
On many platform, panic tries to sync all file systems.  Episode's sync code
can get hung up if the panic occurred while some process was holding one of
our many locks.  The solution may require that code executed on behalf of
sync should never wait for a lock.  But we have not thought out the solution
completely yet.

Added field Transarc Deltas with value `' 
Added field Transarc Herder with value `jaffe@transarc.com' 
Added field Transarc Status with value `open'

[9/17/92 public]
This panic sync() call is a problem only because the scheduler won't
run the different threads while processing a panic().  Thus, there's some
state in the system that shuts down multi-threaded processing, and doubtless
lots of parts of the disk processing have to know about it so that I/O isn't
performed by some daemon that will never get scheduled.

One simple solution to the Episode sync()-in-panic() hangup is to have
the wait-for-a-lock procedure check the same are-we-doing-a-panic flag that
these other parts of the kernel are checking.  (An OSI routine like
osi_DoingPanic() suggests itself, with the obvious implementation of
FALSE for unknown platforms.)  Then, just before waiting for some other
process to release a lock, there could be a check for whether the system
is single-threaded inside panic(), and the lock_Obtain call could return
as if it had really been obtained.

Just an idea that would certainly bear scrutiny before trying it out, but
I didn't want to lose it.

[9/17/92 public]
If there were an are-we-doing-a-panic flag on every plaform, it could help us,
but not in the way that Craig suggests.

If sync hits a held lock, it shouldn't just ignore the lock.  The held lock
is a harbinger of inconsistent data structures and should be respected.  But
the flag can tell us whether to wait for a lock, or to give up and not try
to use the locked data.  (It is generally OK, within limits of reason, for
sync to give up on things; for instance, it will generally ignore locked
inodes in inode-based systems.)

[9/18/92 public]
Add a horde of people who should be following this discussion to the cc list.

Just to add my own two cents here.  I think we can use a scheme
similar to what Craig suggests.  Both Episode and the CM need to
analyze their respective {efs,cm}_sync() paths so the locking there
can handle lock-grabbing failures without deadlocking when
osi_DoingPanic() returns true.  Zero-th order deadlock avoidance is to
check this condition in *_sync() and just return if panicing - punting
the whole locking issue altogether.  The CM may have no choice but to
do this.  Episode needs to try harder.

I've opened a separate defect for the cm_sync() case under OT 5421.
Filled in Inter-dependent CRs with `5421' 
Filled in Interest List CC with `ota,mason,kazar,cfe'

[9/29/92 public]
This is an enhancement request.

Changed Defect or Enhancement? from `def' to `enh'

[12/3/92 public]

OT 6066 is the placeholder for the zeroth-order work in Episode which
Tony mentions above (just punt).  We'll leave this OT (5417) open as a
placeholder for the ``real'' implementation.

Oh, and the panic check call is (going to be) called osi_IsKernelPanic().

Changed Inter-dependent CRs from `5421' to `5421,6066' 
Changed Interest List CC from `ota,mason,kazar,cfe' to 
 `ota,mason,kazar,cfe,mcinerny'

[2/12/93 public]
I thought I rembered seeing some changes go in a while back to address
this problem.  Is it possible that this ot bug can be dupped to another
and cancelled, or is this still a problem?
Changed Interest List CC from `ota,mason,kazar,cfe,mcinerny' to 
 `ota,mason,kazar,cfe,mcinerny,demail1!carl'

[2/12/93 public]
Adding Jeff Prem (and removing Mike McInerny) from the CC list since he
might have supplanted this work entirely.
Changed Interest List CC from `ota,mason,kazar,cfe,mcinerny,demail1!carl' to 
 `ota,mason,kazar,cfe,demail1!carl,jdp'

[2/12/93 public]
Right.  This work is already done.

Changed Status from `open' to `cancel'

[2/12/93 public]
Sorry, I didn't mean to cancel this one.  I guess I should have read it
better.

Changed Status from `cancel' to `open'



CR Number                     : 5409
Defect or Enhancement?        : enh
CR in Code, Doc, or Test?     : test
Inter-dependent CRs           : 
Project Name                  : dce
H/W Ref Platform              : all
S/W Ref Platform              : all
Component Name                : dfs
Subcomponent Name             : lfs
Short Description             : test code in vnops should be moved to test tree
Reported Date                 : 9/16/92
Found in Baseline             : 1.0.2
Found Date                    : 9/16/92
Severity                      : D
Priority                      : 3
Status                        : open
Duplicate Of                  : 
Fix By Baseline               : 1.1
Fixed In Baseline             : 
Affected File(s)              : 
Diff supplied by              : 
Diff release                  : 
Sensitivity                   : public
Transarc Status               : open
Transarc Deltas               : 
Transarc Herder               : jaffe@transarc.com

[9/16/92 public]
The test code in the develoment tree under file/episode/vnops should be moved
to the test tree.

Added field Transarc Deltas with value `' 
Added field Transarc Herder with value `jaffe@transarc.com' 
Added field Transarc Status with value `open'

[01/27/93 public]
Since nothing seems to have been done to resolve this defect,
we'd like to change it to an enhancement and (hence) defer it
out of 1.0.2.  Text will be added to the 1.0.2 release notes
pointing out the presence of these tests in the src/file tree.



CR Number                     : 5408
Defect or Enhancement?        : enh
CR in Code, Doc, or Test?     : test
Inter-dependent CRs           : 
Project Name                  : dce
H/W Ref Platform              : all
S/W Ref Platform              : all
Component Name                : dfs
Subcomponent Name             : lfs
Short Description             : test code for dir should be moved to test tree
Reported Date                 : 9/16/92
Found in Baseline             : 1.0.2
Found Date                    : 9/16/92
Severity                      : D
Priority                      : 3
Status                        : open
Duplicate Of                  : 
Fix By Baseline               : 1.1
Fixed In Baseline             : 
Affected File(s)              : 
Diff supplied by              : 
Diff release                  : 
Sensitivity                   : public
Transarc Status               : open
Transarc Deltas               : 
Transarc Herder               : jaffe@transarc.com

[9/16/92 public]
The test code in the file/episode/dir tree should be moved into the
test tree.
Added field Transarc Deltas with value `' 
Added field Transarc Herder with value `jaffe@transarc.com' 
Added field Transarc Status with value `open'

[01/27/93 public]
Since nothing seems to have been done to resolve this defect,
we'd like to change it to an enhancement and (hence) defer it
out of 1.0.2.  Text will be added to the 1.0.2 release notes
pointing out the presence of these tests in the src/file tree.



CR Number                     : 5407
Defect or Enhancement?        : enh
CR in Code, Doc, or Test?     : test
Inter-dependent CRs           : 
Project Name                  : dce
H/W Ref Platform              : all
S/W Ref Platform              : all
Component Name                : dfs
Subcomponent Name             : lfs
Short Description             : tests need to be moved
Reported Date                 : 9/16/92
Found in Baseline             : 1.0.2
Found Date                    : 9/16/92
Severity                      : D
Priority                      : 3
Status                        : open
Duplicate Of                  : 
Fix By Baseline               : 1.1
Fixed In Baseline             : 
Affected File(s)              : 
Diff supplied by              : 
Diff release                  : 
Sensitivity                   : public
Transarc Status               : open
Transarc Deltas               : 
Transarc Herder               : jaffe@transarc.com

[9/16/92 public]
Test code in file/episode/anode needs to be moved to the test code tree.
Added field Transarc Deltas with value `' 
Added field Transarc Herder with value `jaffe@transarc.com' 
Added field Transarc Status with value `open'

[01/27/93 public]
Since nothing seems to have been done to resolve this defect,
we'd like to change it to an enhancement and (hence) defer it
out of 1.0.2.  Text will be added to the 1.0.2 release notes
pointing out the presence of these tests in the src/file tree.

[8/8/95 public]
test

[8/8/95 public]
another test

[8/8/95 public]
Still another test.

[8/8/95 public]
You guessed it: more testing.



CR Number                     : 5406
Defect or Enhancement?        : enh
CR in Code, Doc, or Test?     : test
Inter-dependent CRs           : 
Project Name                  : dce
H/W Ref Platform              : all
S/W Ref Platform              : all
Component Name                : dfs
Subcomponent Name             : lfs
Short Description             : tests should be moved to test tree
Reported Date                 : 9/16/92
Found in Baseline             : 1.0.2
Found Date                    : 9/16/92
Severity                      : D
Priority                      : 3
Status                        : open
Duplicate Of                  : 
Fix By Baseline               : 1.1
Fixed In Baseline             : 
Affected File(s)              : 
Diff supplied by              : 
Diff release                  : 
Sensitivity                   : public
Transarc Status               : open
Transarc Deltas               : 
Transarc Herder               : jaffe@transarc.com

[9/16/92 public]
Test code should be moved from the file/episode/logbuf directory to the test
tree.
Added field Transarc Deltas with value `' 
Added field Transarc Herder with value `jaffe@transarc.com' 
Added field Transarc Status with value `open'

[9/28/92 public]
Reassigned to Mike M. who is handling this.

Changed Responsible Engr. from `mason@transarc.com' to `mcinerny@transarc.com'

[12/7/92 public]
Changed Defect or Enhancement? from `def' to `enh'

[12/23/92 public]
Changed Responsible Engr. from `mcinerny@transarc.com' to `jaffe@transarc.com'



CR Number                     : 5405
Defect or Enhancement?        : enh
CR in Code, Doc, or Test?     : test
Inter-dependent CRs           : 
Project Name                  : dce
H/W Ref Platform              : all
S/W Ref Platform              : all
Component Name                : dfs
Subcomponent Name             : lfs
Short Description             : tests should be moved to test tree
Reported Date                 : 9/16/92
Found in Baseline             : 1.0.2
Found Date                    : 9/16/92
Severity                      : D
Priority                      : 3
Status                        : open
Duplicate Of                  : 
Fix By Baseline               : 1.1
Fixed In Baseline             : 
Affected File(s)              : 
Diff supplied by              : 
Diff release                  : 
Sensitivity                   : public
Transarc Status               : open
Transarc Deltas               : 
Transarc Herder               : jaffe@transarc.com

[9/16/92 public]
Tests in the directory file/episode/async should be moved into the
test source tree.
Added field Transarc Deltas with value `' 
Added field Transarc Herder with value `jaffe@transarc.com' 
Added field Transarc Status with value `open'

[01/27/93 public]
Since nothing seems to have been done to resolve this defect,
we'd like to change it to an enhancement and (hence) defer it
out of 1.0.2.  Text will be added to the 1.0.2 release notes
pointing out the presence of these tests in the src/file tree.



CR Number                     : 5404
Defect or Enhancement?        : enh
CR in Code, Doc, or Test?     : test
Inter-dependent CRs           : 
Project Name                  : dce
H/W Ref Platform              : all
S/W Ref Platform              : all
Component Name                : dfs
Subcomponent Name             : lfs
Short Description             : tests need to be moved into test tree
Reported Date                 : 9/16/92
Found in Baseline             : 1.0.2
Found Date                    : 9/16/92
Severity                      : D
Priority                      : 3
Status                        : open
Duplicate Of                  : 
Fix By Baseline               : 1.1
Fixed In Baseline             : 
Affected File(s)              : 
Diff supplied by              : 
Diff release                  : 
Sensitivity                   : public
Transarc Status               : open
Transarc Deltas               : 
Transarc Herder               : jaffe@transarc.com

[9/16/92 public]
The tests in the file/episode/tools directory need to be moved into
the test tree.
Added field Transarc Deltas with value `' 
Added field Transarc Herder with value `jaffe@transarc.com' 
Added field Transarc Status with value `open'

[9/28/92 public]
Assigned to Mike M.

Changed Responsible Engr. from `mason@transarc.com' to `mcinerny@transarc.com'

[12/7/92 public]
Changed Defect or Enhancement? from `def' to `enh'

[12/23/92 public]
Changed Responsible Engr. from `mcinerny@transarc.com' to `jaffe@transarc.com'



CR Number                     : 5401
Defect or Enhancement?        : enh
CR in Code, Doc, or Test?     : code
Inter-dependent CRs           : 
Project Name                  : dce
H/W Ref Platform              : all
S/W Ref Platform              : all
Component Name                : dfs
Subcomponent Name             : rep
Short Description             : release rep does extra work
Reported Date                 : 9/16/92
Found in Baseline             : 1.0.2
Found Date                    : 9/16/92
Severity                      : E
Priority                      : 3
Status                        : open
Duplicate Of                  : 
Fix By Baseline               : 1.1
Fixed In Baseline             : 
Affected File(s)              : 
Diff supplied by              : 
Diff release                  : 
Sensitivity                   : public
Transarc Status               : open
Transarc Deltas               : 
Transarc Herder               : jaffe@transarc.com

[9/16/92 public]
Release-style replication seems to do a little too much work.
(a) The repserver maintains RPC contact with the file exporter on the
    primary site, even though it doesn't actually get tokens.
(b) The tell-all-other-sites code that propagates data and FLDB update
    notices includes the distinguished-rep-site location in its list
    of sites to inform about changes.

These are little niceties, and the problems are benign (just a bit more
overhead, no loss of functionality), so this is an enhancement.
Added field Transarc Deltas with value `' 
Added field Transarc Herder with value `jaffe@transarc.com' 
Added field Transarc Status with value `open'

[10/15/92 public]
Filled in Interest List CC with `demail1!pehkonen' 
Added field #Transarc Deltas with value `' 
Added field #Transarc Herder with value `' 
Added field #Transarc Status with value `'



CR Number                     : 5377
Defect or Enhancement?        : enh
CR in Code, Doc, or Test?     : code
Inter-dependent CRs           : 
Project Name                  : dce
H/W Ref Platform              : rs6000
S/W Ref Platform              : aix
Component Name                : dfs
Subcomponent Name             : lfs
Short Description             : Salvage exit values can be misleading
Reported Date                 : 9/11/92
Found in Baseline             : 1.0.1b24
Found Date                    : 9/11/92
Severity                      : C
Priority                      : 2
Status                        : open
Duplicate Of                  : 
Fix By Baseline               : 1.1
Fixed In Baseline             : 
Affected File(s)              : 
Diff supplied by              : 
Diff release                  : 
Sensitivity                   : public
Transarc Deltas               : 
Transarc Herder               : mason@transarc.com
Transarc Status               : open

[9/11/92 public]
If a non-root user issues salvage (by itelf or with the -nosalvage,
-norecover, -recover option) on an aggregate for which the user has
read access but not write access, the salvage command fails with an
exit value of 0xd (13).
13 is the EACCES errno returned by the open call on the raw device.
The code assigns this to variable ac. Later the return code from
VerifyEpisode is also assigned to variable ac and the value of ac is
used in the exit call at the end of salvage(). 
The man page for salvage advises that exit values >= 0x8 indicate
that the aggregate is irreparable damaged and a newaggr should be used.
NOTE: A possible solution is to shift the bits used for the EXIT_xxxxx
codes to the left by one. i.e. assign EXIT_PROBLEMS=0x2, EXIT_REPAIRS=0x4....
instead of the current assignments of EXIT_PROBLEM=0x1, EXIT_REPAIRS=0x2... .
The exit value of 1 could then be to map miscellaneous problems like the 
open call failing in this case.
Added field Transarc Deltas with value `' 
Added field Transarc Herder with value `mason@transarc.com' 
Added field Transarc Status with value `open'

[10/27/92 public]
Reassigned to Blake
Changed Interest List CC from `mason@transarc.com' to `mason,ota' 
Changed Responsible Engr. from `ota@transarc.com' to `blake@transarc.com'

[9/30/93 public]
This problem would be a minor confusion at worst.  Marked as enhancement.
We will track this under DB4412.
Filled in Reported by Company's Ref. Number with `4412'

[9/30/93 public]
Changed Defect or Enhancement? from `def' to `enh'



CR Number                     : 5356
Defect or Enhancement?        : enh
CR in Code, Doc, or Test?     : code
Inter-dependent CRs           : 
Project Name                  : dce
H/W Ref Platform              : all
S/W Ref Platform              : all
Component Name                : dfs
Subcomponent Name             : fts
Short Description             : fts tests use unsupported commands
Reported Date                 : 9/9/92
Found in Baseline             : 1.0.2
Found Date                    : 9/9/92
Severity                      : C
Priority                      : 2
Status                        : open
Duplicate Of                  : 
Fix By Baseline               : 1.1
Fixed In Baseline             : 
Affected File(s)              : 
Diff supplied by              : 
Diff release                  : 
Sensitivity                   : public
Transarc Deltas               : 
Transarc Herder               : jaffe@transarc.com
Transarc Status               : open

[9/9/92 public]

Vijay has reported a couple of problems with stand-alone episode
commands used within the fts test suite.  Since these commands are
unsupported, they really shouldn't be used in the fts test suite.
"newvol" should probably be replaced by "fts" or "efts" commands (efts
is part of the test code base).

Also, strictly speaking, local Episode mounting is also not a DCE
supported feature.  It is unwise to depend upon it working properly.
Added field Transarc Deltas with value `' 
Added field Transarc Herder with value `jaffe@transarc.com' 
Added field Transarc Status with value `open'

[10/15/92 public]
Changed Interest List CC from `bwl@transarc.com,comer@transarc.com' to 
 `bwl@transarc.com,comer@transarc.com,demail1!felps'

[10/19/92 public]
The standalone episode tests in the fts test suite are now named sepitest1 and
sepitest2. They should be removed from the fts test suite and should be placed
as part of any existing standalone episode test suite. I'm assigning this to
Rajesh because he is responsible for standalone episode tests, as far as I 
know.

Changed Interest List CC from 
 `bwl@transarc.com,comer@transarc.com,demail1!felps' to 
 `bwl@transarc.com,comer@transarc.com,demail1!felps, vijay@transarc.com' 
Changed Responsible Engr. from `vijay@transarc.com' to `rajesh@transarc.com'

[10/19/92 public]

Changing to an enhancement request.

Changed Defect or Enhancement? from `def' to `enh'



CR Number                     : 5349
Defect or Enhancement?        : enh
CR in Code, Doc, or Test?     : test
Inter-dependent CRs           : 
Project Name                  : dce
H/W Ref Platform              : all
S/W Ref Platform              : all
Component Name                : dfs
Subcomponent Name             : EPISODE
Short Description             : test_anode needs to test intermediate FS states
Reported Date                 : 9/8/92
Found in Baseline             : 1.0.2
Found Date                    : 9/8/92
Severity                      : C
Priority                      : 2
Status                        : open
Duplicate Of                  : 
Fix By Baseline               : 1.1
Fixed In Baseline             : 
Affected File(s)              : 
Diff supplied by              : 
Diff release                  : 
Sensitivity                   : public
Transarc Deltas               : 
Transarc Herder               : jaffe@transarc.com
Transarc Status               : open

[9/8/92 public]
In order to detect various types of errors reliably, test_anode needs
a mechanism for running recovery on the file system after some number
of updates corresponding to a partially completed file system operation
have been applied to it.   Ted has suggested an option that causes
recovery to run following every disk update.
Added field Transarc Deltas with value `' 
Added field Transarc Herder with value `jaffe@transarc.com' 
Added field Transarc Status with value `open'

[11/11/93 public]
Opened this as 4667 in Transarc's database.
Changed Subcomponent Name from `lfs' to `EPISODE' 
Filled in Reported by Company's Ref. Number with `4667'



CR Number                     : 5328
Defect or Enhancement?        : enh
CR in Code, Doc, or Test?     : code
Inter-dependent CRs           : 5322, 5327
Project Name                  : dce
H/W Ref Platform              : all
S/W Ref Platform              : all
Component Name                : dfs
Subcomponent Name             : EPISODE
Short Description             : make salvage provide more descriptive error messages
Reported Date                 : 9/3/92
Found in Baseline             : 1.0.2
Found Date                    : 9/3/92
Severity                      : C
Priority                      : 2
Status                        : open
Duplicate Of                  : 
Fix By Baseline               : 1.1
Fixed In Baseline             : 
Affected File(s)              : 
Diff supplied by              : 
Diff release                  : 
Sensitivity                   : public
Transarc Deltas               : 
Transarc Herder               : jaffe@transarc.com
Transarc Status               : open

[9/3/92 public]
The message about invalid fid is should print the fid and other info
about why it might be bad.  The ENOENT path should produce a different
message.
The message about damage root directory is even worse.  Generate lower
level messages to augment this error.
Added field Transarc Deltas with value `' 
Added field Transarc Herder with value `jaffe@transarc.com' 
Added field Transarc Status with value `open'

[9/29/92 public]
This is an enhancement request.
Changed Defect or Enhancement? from `def' to `enh'

[1/24/94 public]
Changed Subcomponent Name from `lfs' to `EPISODE'



CR Number                     : 5314
Defect or Enhancement?        : enh
CR in Code, Doc, or Test?     : test
Inter-dependent CRs           : 
Project Name                  : dce
H/W Ref Platform              : all
S/W Ref Platform              : all
Component Name                : dfs
Subcomponent Name             : fs tests
Short Description             : Convert fs tests for the TET environment
Reported Date                 : 9/2/92
Found in Baseline             : 1.0.1b24
Found Date                    : 9/2/92
Severity                      : C
Priority                      : 2
Status                        : open
Duplicate Of                  : 
Fix By Baseline               : 1.1
Fixed In Baseline             : 
Affected File(s)              : 
Diff supplied by              : 
Diff release                  : 
Sensitivity                   : public
Transarc Deltas               : 
Transarc Herder               : mason@transarc.com
Transarc Status               : open

[9/2/92 public]

The tests need to be converted for the TET environment. This OT is for the
fs tests.

Added field Transarc Deltas with value `' 
Added field Transarc Herder with value `mason@transarc.com' 
Added field Transarc Status with value `open'



CR Number                     : 5301
Defect or Enhancement?        : enh
CR in Code, Doc, or Test?     : code
Inter-dependent CRs           : 
Project Name                  : dce
H/W Ref Platform              : all
S/W Ref Platform              : all
Component Name                : dfs
Subcomponent Name             : px
Short Description             : PX should consult FLDB before timing out move (TSR)
Reported Date                 : 9/2/92
Found in Baseline             : 1.0.2
Found Date                    : 9/2/92
Severity                      : C
Priority                      : 2
Status                        : open
Duplicate Of                  : 
Fix By Baseline               : 1.1
Fixed In Baseline             : 
Affected File(s)              : 
Diff supplied by              : 
Diff release                  : 
Sensitivity                   : public
Transarc Deltas               : 
Transarc Herder               : mason@transarc.com
Transarc Status               : open

[9/2/92 public]
As part of the token state recovery changes, a fileset move operation 
maintains a timeout value in the future for both the source and
target of a fileset move.  When the PX looks up a volume that is
either the source or target of a fileset move, it checks the timeout
values to see if the move is still in progress or if some disconnect
has occurred.  Currently, if the timeout has expired, the PX will
reset the move-in-progress (VOL_MOVE_{SOURCE,TARGET}) flag and 
continue.  What it should do is to consult the FLDB as to the
state of the fileset and clean things up as appropriate.
Added field Transarc Deltas with value `' 
Added field Transarc Herder with value `mason@transarc.com' 
Added field Transarc Status with value `open'

[11/7/92 public]
I view this as an enhancement, since right now, re-issuing the fts command
will clean up the appropriate state.  While it would be nice for the
file server to do this cleanup automatically, that's not the current
model.
Changed Defect or Enhancement? from `def' to `enh'

[3/30/94 public]
We're looking at this for 1.1

[3/30/94 public]
There's been a lot of work on fileset move since Mike Comer's report.
In particular, the VOL_MOVE_TARGET and VOL_MOVE_SOURCE flags aren't simply
cleared when the volMoveTimeout expires; there's a whole sequence of states
through which the fileset state parades.
 
There are stub hooks, though, to the PX to get it to take specific cleanup
actions on some of the expirations of these timeouts.  The PX doesn't
do anything with them, but it could do so.



CR Number                     : 5255
Defect or Enhancement?        : enh
CR in Code, Doc, or Test?     : code
Inter-dependent CRs           : 5367
Project Name                  : dce
H/W Ref Platform              : all
S/W Ref Platform              : all
Component Name                : dfs
Subcomponent Name             : lfs
Short Description             : Need improved recovery testing
Reported Date                 : 8/31/92
Found in Baseline             : 1.0.2
Found Date                    : 8/31/92
Severity                      : C
Priority                      : 2
Status                        : open
Duplicate Of                  : 
Fix By Baseline               : 1.1
Fixed In Baseline             : 
Affected File(s)              : 
Diff supplied by              : 
Diff release                  : 
Sensitivity                   : public
Transarc Deltas               : 
Transarc Herder               : jaffe@transarc.com
Transarc Status               : open

[8/31/92 public]
Work must be done to improve the testing and regressability of the
Episode recovery code.
Added field Transarc Deltas with value `' 
Added field Transarc Herder with value `jaffe@transarc.com' 
Added field Transarc Status with value `open'

[9/9/92 public]
OT 5367 has been created for the authorization check test.
Filled in Inter-dependent CRs with `5367'



CR Number                     : 5223
Defect or Enhancement?        : enh
CR in Code, Doc, or Test?     : code
Inter-dependent CRs           : 
Project Name                  : dce
H/W Ref Platform              : all
S/W Ref Platform              : all
Component Name                : dfs
Subcomponent Name             : EPISODE
Short Description             : Need log mgmt. utility (epilog)
Reported Date                 : 8/26/92
Found in Baseline             : 1.0.2
Found Date                    : 8/26/92
Severity                      : C
Priority                      : 2
Status                        : open
Duplicate Of                  : 
Fix By Baseline               : 1.1
Fixed In Baseline             : 
Affected File(s)              : 
Diff supplied by              : 
Diff release                  : 
Sensitivity                   : public
Transarc Deltas               : 
Transarc Herder               : jaffe@transarc.com
Transarc Status               : open
Transarc Delta                : 

[8/26/92 public]
At present, there is no tool for manipulating the log; the only way to make
the log bigger is to save the aggregate, run newaggr, and then restore the
aggregate.  Although a work-around, it seems cumbersome.
I'd like to see an 'epilog' program (what else?) that would allow the user
to:
1) examine the size of the existing log and print out the throttling
characteristics (e.g. # of simultaneous transactions), possibly with some
extra switch.
2) examine the log and determine if it is clean;
3) examine the log and dump its contents in the ASCII format defined in
recover.c (a la findlog/readlog).
4) change the size of the log on a quiescent system.
5) [Very optional] recover the log.  I realize that the salvager already does
this, so maybe it is a bad idea to have repetition in the functionality.
One "advantage" here is that it would allow us to eliminate two other
programs (findlog and readlog) that are ill supported but useful and replace
it with a single program that is supported and more generally useful.
This is an enhancement request.
I've added Jeff K. to the list, as any new command will have impact on
documentaiton.
Added field Transarc Deltas with value `' 
Added field Transarc Herder with value `jaffe@transarc.com' 
Added field Transarc Status with value `open'

[11/16/92 public]
Should this be deferred out of 1.0.2?
Changed Interest List CC from `jeff@transarc.com,ota@transarc.com' to 
 `jeff,ota'

[11/15/93 public]
Changed Responsible Engr. from `mason@transarc.com' to `ota@transarc.com' 
Added field Transarc Delta with value `'

[1/24/94 public]
Changed Subcomponent Name from `lfs' to `EPISODE'



CR Number                     : 5131
Defect or Enhancement?        : enh
CR in Code, Doc, or Test?     : code
Inter-dependent CRs           : 5992, 5993
Project Name                  : dce
H/W Ref Platform              : all
S/W Ref Platform              : all
Component Name                : dfs
Subcomponent Name             : 
Short Description             : files installed from dfs are incorrect
Reported Date                 : 8/19/92
Found in Baseline             : 1.0.1
Found Date                    : 8/19/92
Severity                      : B
Priority                      : 2
Status                        : open
Duplicate Of                  : 
Fix By Baseline               : 1.1
Fixed In Baseline             : 
Affected File(s)              : 
Diff supplied by              : 
Diff release                  : 
Sensitivity                   : public
Transarc Deltas               : 
Transarc Herder               : jaffe@transarc.com
Transarc Status               : open

[8/19/92 public]
when I did a build install_all, I noticed that a lot of stuff
that looked unnecessary got installed from dfs.  In some cases
the files are questionable (should  xxx interfaces be visible to dce
applications programmers ?) In some cases they are just incorrect.
For example, dacl.h is installed, but it has includes of the
form <afs/param.h> which refer to other files which are not installed.
In any case, I believe that someone should examine all of the files
which are installed from DFS and determine whether they really should
be installed.  I've enclosed an install log as a starting point for
this examination.

 [ /file/tools/cmd ]
makepath cmd/. && cd cmd &&  exec make MAKEFILE_PASS=BASIC    install_all
release   -o bin -g bin -m 755 -tostage /build/dce386/install -fromfile dfscmd.cat /nls/msg/en_US.ASCII/dfscmd.cat 
/nls/msg/en_US.ASCII/dfscmd.cat: copying from dfscmd.cat
/nls/msg/en_US.ASCII/dfscmd.cat: owner bin, group bin, mode 0755
/nls/msg/en_US.ASCII/dfscmd.cat: installing as /build/dce386/install/nls/msg/en_US.ASCII/dfscmd.cat
 [ /file/config ]
makepath config/. && cd config &&  exec make MAKEFILE_PASS=BASIC    install_all
release   -o bin -g bin -m 755 -tostage /build/dce386/install -fromfile /net/balder/build/dce1.0.1/src/file/config/common_def.h /share/include/dce/common_def.h 
/share/include/dce/common_def.h: copying from /net/balder/build/dce1.0.1/src/file/config/common_def.h
/share/include/dce/common_def.h: owner bin, group bin, mode 0755
/share/include/dce/common_def.h: installing as /build/dce386/install/share/include/dce/common_def.h
release   -o bin -g bin -m 755 -tostage /build/dce386/install -fromfile common_data.h /share/include/dce/common_data.h 
/share/include/dce/common_data.h: copying from common_data.h
/share/include/dce/common_data.h: owner bin, group bin, mode 0755
/share/include/dce/common_data.h: installing as /build/dce386/install/share/include/dce/common_data.h
 [ /file/util ]
makepath util/. && cd util &&  exec make MAKEFILE_PASS=BASIC    install_all
release   -o bin -g bin -m 755 -tostage /build/dce386/install -fromfile /net/balder/build/dce1.0.1/src/file/util/ktime.h /share/include/dce/ktime.h 
/share/include/dce/ktime.h: copying from /net/balder/build/dce1.0.1/src/file/util/ktime.h
/share/include/dce/ktime.h: owner bin, group bin, mode 0755
/share/include/dce/ktime.h: installing as /build/dce386/install/share/include/dce/ktime.h
 [ /file/kutils ]
makepath kutils/. && cd kutils &&  exec make MAKEFILE_PASS=BASIC    install_all
release   -o bin -g bin -m 755 -tostage /build/dce386/install -fromfile /net/balder/build/dce1.0.1/src/file/kutils/ioctl.h /share/include/dce/ioctl.h 
/share/include/dce/ioctl.h: copying from /net/balder/build/dce1.0.1/src/file/kutils/ioctl.h
/share/include/dce/ioctl.h: owner bin, group bin, mode 0755
/share/include/dce/ioctl.h: installing as /build/dce386/install/share/include/dce/ioctl.h
release   -o bin -g bin -m 755 -tostage /build/dce386/install -fromfile /net/balder/build/dce1.0.1/src/file/kutils/syscall.h /share/include/dce/syscall.h 
/share/include/dce/syscall.h: copying from /net/balder/build/dce1.0.1/src/file/kutils/syscall.h
/share/include/dce/syscall.h: owner bin, group bin, mode 0755
/share/include/dce/syscall.h: installing as /build/dce386/install/share/include/dce/syscall.h
 [ /file/sysacl ]
makepath sysacl/. && cd sysacl &&  exec make MAKEFILE_PASS=BASIC    install_all
release   -o bin -g bin -m 755 -tostage /build/dce386/install -fromfile /net/balder/build/dce1.0.1/src/file/sysacl/aclint.h /share/include/dce/aclint.h 
/share/include/dce/aclint.h: copying from /net/balder/build/dce1.0.1/src/file/sysacl/aclint.h
/share/include/dce/aclint.h: owner bin, group bin, mode 0755
/share/include/dce/aclint.h: installing as /build/dce386/install/share/include/dce/aclint.h
 [ /file/security/dacl ]
makepath dacl/. && cd dacl &&  exec make MAKEFILE_PASS=BASIC    install_all
release   -o bin -g bin -m 755 -tostage /build/dce386/install -fromfile testacl.o /share/include/dce/testacl.o 
/share/include/dce/testacl.o: copying from testacl.o
/share/include/dce/testacl.o: owner bin, group bin, mode 0755
/share/include/dce/testacl.o: installing as /build/dce386/install/share/include/dce/testacl.o
release   -o bin -g bin -m 755 -tostage /build/dce386/install -fromfile /net/balder/build/dce1.0.1/src/file/security/dacl/dacl_mgruuids.h /share/include/dce/dacl_mgruuids.h 
/share/include/dce/dacl_mgruuids.h: copying from /net/balder/build/dce1.0.1/src/file/security/dacl/dacl_mgruuids.h
/share/include/dce/dacl_mgruuids.h: owner bin, group bin, mode 0755
/share/include/dce/dacl_mgruuids.h: installing as /build/dce386/install/share/include/dce/dacl_mgruuids.h
release   -o bin -g bin -m 755 -tostage /build/dce386/install -fromfile dacl.h /share/include/dce/dacl.h 
/share/include/dce/dacl.h: copying from dacl.h
/share/include/dce/dacl.h: owner bin, group bin, mode 0755
/share/include/dce/dacl.h: installing as /build/dce386/install/share/include/dce/dacl.h
release   -o bin -g bin -m 755 -tostage /build/dce386/install -fromfile dfsdcl.cat /nls/msg/en_US.ASCII/dfsdcl.cat 
/nls/msg/en_US.ASCII/dfsdcl.cat: copying from dfsdcl.cat
/nls/msg/en_US.ASCII/dfsdcl.cat: owner bin, group bin, mode 0755
/nls/msg/en_US.ASCII/dfsdcl.cat: installing as /build/dce386/install/nls/msg/en_US.ASCII/dfsdcl.cat
 [ /file/security/dfsauth ]
makepath dfsauth/. && cd dfsauth &&  exec make MAKEFILE_PASS=BASIC    install_all
release   -o bin -g bin -m 755 -tostage /build/dce386/install -fromfile dfsauth.h /share/include/dce/dfsauth.h 
/share/include/dce/dfsauth.h: copying from dfsauth.h
/share/include/dce/dfsauth.h: owner bin, group bin, mode 0755
/share/include/dce/dfsauth.h: installing as /build/dce386/install/share/include/dce/dfsauth.h
release   -o bin -g bin -m 755 -tostage /build/dce386/install -fromfile dfsdau.cat /nls/msg/en_US.ASCII/dfsdau.cat 
/nls/msg/en_US.ASCII/dfsdau.cat: copying from dfsdau.cat
/nls/msg/en_US.ASCII/dfsdau.cat: owner bin, group bin, mode 0755
/nls/msg/en_US.ASCII/dfsdau.cat: installing as /build/dce386/install/nls/msg/en_US.ASCII/dfsdau.cat
 [ /file/fsint ]
makepath fsint/. && cd fsint &&  exec make MAKEFILE_PASS=BASIC    install_all
release   -o bin -g bin -m 755 -tostage /build/dce386/install -fromfile afs4int.h /share/include/dce/afs4int.h 
/share/include/dce/afs4int.h: copying from afs4int.h
/share/include/dce/afs4int.h: owner bin, group bin, mode 0755
/share/include/dce/afs4int.h: installing as /build/dce386/install/share/include/dce/afs4int.h
release   -o bin -g bin -m 755 -tostage /build/dce386/install -fromfile tkn4int.h /share/include/dce/tkn4int.h 
/share/include/dce/tkn4int.h: copying from tkn4int.h
/share/include/dce/tkn4int.h: owner bin, group bin, mode 0755
/share/include/dce/tkn4int.h: installing as /build/dce386/install/share/include/dce/tkn4int.h
release   -o bin -g bin -m 755 -tostage /build/dce386/install -fromfile rep_data.h /share/include/dce/rep_data.h 
/share/include/dce/rep_data.h: copying from rep_data.h
/share/include/dce/rep_data.h: owner bin, group bin, mode 0755
/share/include/dce/rep_data.h: installing as /build/dce386/install/share/include/dce/rep_data.h
release   -o bin -g bin -m 755 -tostage /build/dce386/install -fromfile rep_proc.h /share/include/dce/rep_proc.h 
/share/include/dce/rep_proc.h: copying from rep_proc.h
/share/include/dce/rep_proc.h: owner bin, group bin, mode 0755
/share/include/dce/rep_proc.h: installing as /build/dce386/install/share/include/dce/rep_proc.h
release   -o bin -g bin -m 755 -tostage /build/dce386/install -fromfile rep_errs.h /share/include/dce/rep_errs.h 
/share/include/dce/rep_errs.h: copying from rep_errs.h
/share/include/dce/rep_errs.h: owner bin, group bin, mode 0755
/share/include/dce/rep_errs.h: installing as /build/dce386/install/share/include/dce/rep_errs.h
release   -o bin -g bin -m 755 -tostage /build/dce386/install -fromfile dfsrep.cat /nls/msg/en_US.ASCII/dfsrep.cat 
/nls/msg/en_US.ASCII/dfsrep.cat: copying from dfsrep.cat
/nls/msg/en_US.ASCII/dfsrep.cat: owner bin, group bin, mode 0755
/nls/msg/en_US.ASCII/dfsrep.cat: installing as /build/dce386/install/nls/msg/en_US.ASCII/dfsrep.cat
 [ /file/xaggr ]
makepath xaggr/. && cd xaggr &&  exec make MAKEFILE_PASS=BASIC    install_all
release   -o bin -g bin -m 755 -tostage /build/dce386/install -fromfile dfsexport /bin/dfsexport 
/bin/dfsexport: copying from dfsexport
/bin/dfsexport: owner bin, group bin, mode 0755
/bin/dfsexport: installing as /build/dce386/install/bin/dfsexport
release   -o bin -g bin -m 755 -tostage /build/dce386/install -fromfile /net/balder/build/dce1.0.1/src/file/xaggr/aggr.h /share/include/dce/aggr.h

[2/8/93 public]
Here are the names referred to by .h files in share/include/dcedfs that
are not currently installed:
afs4int_s2c.h
afsvl_data.h
afsvl_proc.h
afsvl_s2c.h
bubasics.h
debug.h
epi_id.h
lock.h
osi.h
osi_buf.h
osi_cred.h
osi_dfserrors.h
osi_net.h
osi_param.h
osi_uio.h
param.h
queue.h
stds.h
tkm_hostData.h
xvfs_vnode.h

Installing these, plus our .idl files, should handle this bug.



CR Number                     : 5003
Defect or Enhancement?        : enh
CR in Code, Doc, or Test?     : code
Inter-dependent CRs           : 
Project Name                  : dce
H/W Ref Platform              : all
S/W Ref Platform              : all
Component Name                : dfs
Subcomponent Name             : EPISODE
Short Description             : FileConstruct via restore spuriously sets VV
Reported Date                 : 8/11/92
Found in Baseline             : 1.0.2
Found Date                    : 8/11/92
Severity                      : C
Priority                      : 3
Status                        : open
Duplicate Of                  : 
Fix By Baseline               : 1.1
Fixed In Baseline             : 
Affected File(s)              : 
Diff supplied by              : 
Diff release                  : 
Sensitivity                   : public
Transarc Deltas               : 
Transarc Herder               : jaffe@transarc.com
Transarc Status               : open

[8/11/92 public]
The fileset restore path calls vnva_FileConstruct which eventually calls
epiv_CreateAnode which then bumps the fileset VV.  This is only foolish
since the fileset operation will soon reset both the file's VV and the
fileset's VV to the value it wants them to have.  But it is wasted
effort.
We'll need an extra bit passed in to supress this behavior, or we should
change the contract of epif_Create to never set the VV and the vnops
layer can call epif_Mark or not depending on whether it is being called
from the volops or not.
Added field Transarc Deltas with value `' 
Added field Transarc Herder with value `jaffe@transarc.com' 
Added field Transarc Status with value `open'

[8/26/92 public]
Bruce claims this should be an enhancement request.
Changed Defect or Enhancement? from `def' to `enh'

[1/24/94 public]
Changed Subcomponent Name from `lfs' to `EPISODE'



CR Number                     : 4916
Defect or Enhancement?        : enh
CR in Code, Doc, or Test?     : test
Inter-dependent CRs           : 3850, 6229
Project Name                  : dce
H/W Ref Platform              : all
S/W Ref Platform              : all
Component Name                : dfs
Subcomponent Name             : low tests
Short Description             : Clean up the structure of low tests.
Reported Date                 : 8/4/92
Found in Baseline             : 1.0.1
Found Date                    : 8/4/92
Severity                      : D
Priority                      : 3
Status                        : open
Duplicate Of                  : 
Fix By Baseline               : 1.2
Fixed In Baseline             : 
Affected File(s)              : some
Diff supplied by              : 
Diff release                  : 
Sensitivity                   : public
Transarc Deltas               : rajesh-clean-low-tests
Transarc Herder               : mason@transarc.com
Transarc Status               : open

[8/4/92 public]
Introduce structure, modularity into the low tests. Remove make and
clean options. 

Fix in sandbox.
Added field Transarc Deltas with value `rajesh-clean-low-tests' 
Added field Transarc Herder with value `mason@transarc.com' 
Added field Transarc Status with value `export'

[11/16/92 public]
This defect was submitted no latter than 1.50.  We never marked it as such
because the CML delta had no OT number in it.
Changed Status from `open' to `fix' 
Filled in Fixed In Baseline with `1.0.2' 
Filled in Affected File with `some' 
Changed Transarc Status from `export' to `submit'

[11/28/92 public]

There are still make and clean options for low/testErrMap - open.

[11/30/92 public]
Rajesh, care to try again.  Please open a new delta to fix this.
Changed Transarc Status from `submit' to `open'

[11/30/92 public]
OT 6229 is opened for the purpose.
Changed Inter-dependent CRs from `3850' to `3850, 6229' 
Changed Severity from `E' to `D' 
Changed Priority from `4' to `3'

[3/21/94 public]
Assigned to Gail to verify.

[5/13/94 public]
Yup - Diane's right, testErrMap and rtestErrMapQuota still have
"make" and "clean" options - I'll try to fit some low cleanup
into the schedule ...

[7/6/94 public]
Not making it - deferring.



CR Number                     : 4847
Defect or Enhancement?        : enh
CR in Code, Doc, or Test?     : test
Inter-dependent CRs           : 
Project Name                  : dce
H/W Ref Platform              : all
S/W Ref Platform              : all
Component Name                : dfs
Subcomponent Name             : 
Short Description             : Tests missing for some
documented interfaces.
Reported Date                 : 7/27/92
Found in Baseline             : 1.0.1b19
Found Date                    : 7/27/92
Severity                      : E
Priority                      : 4
Status                        : open
Duplicate Of                  : 
Fix By Baseline               : 1.1
Fixed In Baseline             : 
Affected File(s)              : 
Diff supplied by              : 
Diff release                  : 
Sensitivity                   : public
Transarc Deltas               : 
Transarc Herder               : 
Transarc Status               : 

[7/27/92 public]

There are no explicit tests for the following  interfaces:

  ioctl
  pioctl
  BOSSVR_*
  FTSERVER_*
  VC_*
  VL_*

These interfaces are documented.

[7/29/92 public]
Assigned to pervaze for further assignment.
Filled in Responsible Engr. with `pakhtar@transarc.com' 
Filled in Resp. Engr's Company with `tarc' 
Added field Transarc Deltas with value `' 
Added field Transarc Herder with value `' 
Added field Transarc Status with value `'

[8/20/92 public]
We are currently in the process of planning further test construction.
Part of this work will be to produce API tests, for the interfaces
listed above. Once the scope of the tests (and schedule) is committed,
this OT will be closed, and individual enhancement requests will be 
created for each work item.



CR Number                     : 4802
Defect or Enhancement?        : enh
CR in Code, Doc, or Test?     : code
Inter-dependent CRs           : 
Project Name                  : dce
H/W Ref Platform              : all
S/W Ref Platform              : all
Component Name                : dfs
Subcomponent Name             : EPISODE
Short Description             : salvager damaged file list handling inconsistent
Reported Date                 : 7/21/92
Found in Baseline             : 1.0.1b20
Found Date                    : 7/21/92
Severity                      : E
Priority                      : 4
Status                        : open
Duplicate Of                  : 
Fix By Baseline               : 1.1
Fixed In Baseline             : 
Affected File(s)              : 
Diff supplied by              : 
Diff release                  : 
Sensitivity                   : public
Transarc Deltas               : 
Transarc Herder               : mason@transarc.com
Transarc Status               : open

[7/21/92 public]
As per discussion with Ted, it will be useful to better organise the
"lists" information output by the salvager at the end. Currently
filenames can be displayed in multiple lists e.g.
- "Ought to restore" and "May restore" for a truncated file with
  modified ACLs.
- "May restore" and "badACLs"/"badPlists". The badACLs/badPlists lists
  give more information about why some filenames are in the "May
  Restore" list.
- I think it is possible for filenames to appear on both the "Ought to
  restore" and the "dupAnode" lists. Again the dupAnode list in this
  case provides more information about why the filename is in the former
  list.
The information provided in the badACLs, dupAnode, badPlists,
zeroLinkCnt and the badLinkCnts lists may not be wanted by default by an
administrator. Hence it might be useful add another switch to the
salvage command that would enable display of these lists. This
information could also always go into the SalvageLog file.
In case of filenames appearing in both "Ought to restore" and "May
restore", the former list can take precedence over the latter and the
filename deleted from the latter list.
Added field Transarc Deltas with value `' 
Added field Transarc Herder with value `mason@transarc.com' 
Added field Transarc Status with value `open'

[7/22/92 public]
Changed Subcomponent Name from `episode salvager' to `lfs' 
Changed Short Description from `Output from salvager' to `salvager damaged file 
 list handling inconsistent'

[1/24/94 public]
Changed Subcomponent Name from `lfs' to `EPISODE'



CR Number                     : 4801
Defect or Enhancement?        : enh
CR in Code, Doc, or Test?     : code
Inter-dependent CRs           : 
Project Name                  : dce
H/W Ref Platform              : all
S/W Ref Platform              : all
Component Name                : dfs
Subcomponent Name             : EPISODE
Short Description             : salvager adds unreferenced anodes to ZLC list
Reported Date                 : 7/21/92
Found in Baseline             : 1.0.1b20
Found Date                    : 7/21/92
Severity                      : C
Priority                      : 3
Status                        : open
Duplicate Of                  : 
Fix By Baseline               : 1.1
Fixed In Baseline             : 
Affected File(s)              : 
Diff supplied by              : 
Diff release                  : 
Sensitivity                   : public
Transarc Deltas               : 
Transarc Herder               : mason@transarc.com
Transarc Status               : open

[7/21/92 public]
Files for which the link counts in the anode were changed to zero by
the salvager are attached to the zero link count list. It should be
possible to view the contents of these files and decide whether to
delete or keep them. Creation of a "lost+found" directory may be
difficult given that episode aggregates are not mounted but filesets
are. A approach that could be used is to add another utility that
traverses and prints the zero link count file contents and as per
instructions of the adminstrator delete the file or move/copy it to
another place in the filesystem.
Added field Transarc Deltas with value `' 
Added field Transarc Herder with value `mason@transarc.com' 
Added field Transarc Status with value `open'

[7/22/92 public]
Since unreferenced files are determined on a per fileset basis to
unmountability of aggregates is irrelevant.  The lost+found approach
would be implemented in each fileset.  Creating such a directory during
salvage is extra trouble but might be a significant help to a system
administrator trying to put a file system back together.
That the salvager adds unreferenced files to the ZLC list is correct in
the strictest sense but does confuse the use of that mechanism.  Files
on the ZLC list are put their explicitly by an unlink system call.
Files the salvager puts there are those which were orphaned by some
error and is the equivalent of deleting these files during salvage.  It
may be valuable to keep these two types distinct.
Changed Subcomponent Name from `episode salvager' to `lfs' 
Changed Short Description from `unreferenced anodes' to `salvager adds 
 unreferenced anodes to ZLC list'

[11/11/93 public]
Upgraded sev,prio to be more plausible.
Changed Severity from `E' to `C' 
Changed Priority from `4' to `3'

[11/11/93 public]
Opened as db4674 in Transarc's database.
Changed Subcomponent Name from `lfs' to `EPISODE' 
Filled in Reported by Company's Ref. Number with `4674'



CR Number                     : 4702
Defect or Enhancement?        : enh
CR in Code, Doc, or Test?     : test
Inter-dependent CRs           : 
Project Name                  : dce
H/W Ref Platform              : all
S/W Ref Platform              : all
Component Name                : dfs
Subcomponent Name             : EPISODE
Short Description             : ravage should salvage even if recovery fails
Reported Date                 : 7/13/92
Found in Baseline             : 1.0.2
Found Date                    : 7/13/92
Severity                      : C
Priority                      : 2
Status                        : open
Duplicate Of                  : 
Fix By Baseline               : 1.1
Fixed In Baseline             : 
Affected File(s)              : 
Diff supplied by              : 
Diff release                  : 
Sensitivity                   : public
Transarc Deltas               : 
Transarc Herder               : jdp@transarc.com
Transarc Status               : open

[7/13/92 public]
A recent accidental change to the salvage command defaults caused this
ravager to start running recovery.  This was useful in that it resulted
in several salvager core dumps (see OT 4431).  However, if the log is
bad (perhaps because we trashed a log page), the salvager exits without
doing anything.  The ravager should detect this and run salvager without
requesting recovery.
Added field Transarc Deltas with value `' 
Added field Transarc Herder with value `jdp@transarc.com' 
Added field Transarc Status with value `open'

[10/19/93 public]
This is really an enhancement request for a salvager test program.
Changed Defect or Enhancement? from `def' to `enh'

[10/19/93 public]
Changed Subcomponent Name from `lfs' to `EPISODE' 
Filled in Reported by Company's Ref. Number with `4515'



CR Number                     : 4627
Defect or Enhancement?        : enh
CR in Code, Doc, or Test?     : code
Inter-dependent CRs           : 
Project Name                  : dce
H/W Ref Platform              : all
S/W Ref Platform              : all
Component Name                : dfs
Subcomponent Name             : lfs
Short Description             : Episode should have local machdep.mk files
Reported Date                 : 7/7/92
Found in Baseline             : 1.0.1
Found Date                    : 7/7/92
Severity                      : C
Priority                      : 2
Status                        : open
Duplicate Of                  : 
Fix By Baseline               : 1.1
Fixed In Baseline             : 
Affected File(s)              : 
Diff supplied by              : 
Diff release                  : 
Sensitivity                   : public
Transarc Status               : open
Transarc Deltas               : 
Transarc Herder               : jdp@transarc.com

[7/7/92 public]
The episode source directory should have <machine type>/machdep.mk files that
are included by each Episode makefile.  This would allow machine-specific
build configuration for the Episode sub-system. For example, AIX VM integration
could be turned on or off by a line in the AIX/RIOS machdep.mk file.
Added field Transarc Deltas with value `' 
Added field Transarc Herder with value `jdp@transarc.com' 
Added field Transarc Status with value `open'

[7/7/92 public]
This is an enhancement request. Marked as such.
Changed Defect or Enhancement? from `def' to `enh'

[7/20/92 public]
Changed "Fix by" to 1.0.2



CR Number                     : 4601
Defect or Enhancement?        : enh
CR in Code, Doc, or Test?     : code
Inter-dependent CRs           : 
Project Name                  : dce
H/W Ref Platform              : all
S/W Ref Platform              : all
Component Name                : dfs
Subcomponent Name             : lfs
Short Description             : Cannot attach or mount episode aggregates.
Reported Date                 : 7/6/92
Found in Baseline             : 1.0.1b23
Found Date                    : 7/6/92
Severity                      : C
Priority                      : 3
Status                        : open
Duplicate Of                  : 
Fix By Baseline               : 1.1
Fixed In Baseline             : 
Affected File(s)              : 
Diff supplied by              : 
Diff release                  : 
Sensitivity                   : public
Transarc Status               : open
Transarc Deltas               : 
Transarc Herder               : jaffe@transarc.com

[7/6/92 public]

Using the new AIX 3.2 supporting drop (From Wednesday) I tried
creating and using an episode file system.  Creation worked fine; when
I tried to attach the aggregate I got error # 109 (ENOSYS) which does
not make much sense.

I tried using older AIX 3.1 binaries (from build 22) on the 3.2 system
and it worked.

Added field Transarc Deltas with value `' 
Added field Transarc Herder with value `jdp@transarc.com' 
Added field Transarc Status with value `open'

[7/6/92 public]
Added people to the CC list.

Changed Interest List CC from `jwade%liz.austin.ibm.com@transarc.com' to 
 `jwade%liz.austin.ibm.com@transarc.com,ota@transarc.com,jdp@transarc.com'

[7/6/92 public]
I found out what is going on here.  It was not finding dfsloadobj and
because of this was returning ENOSYS.  I'd like to see some extra code
set up here so that it examines an environment variable first and uses
that version if it exists, using "/opt/dcelocal/ext/dfsloadobj".  This is
an enhancement, though, so I've marked it as such and lowered its priority.

Changed Defect or Enhancement? from `def' to `enh' 
Changed Severity from `A' to `C' 
Filled in Priority with `3'

[7/20/92 public]
Changed "Fix by" to 1.0.2

[7/29/92 public]
Reassign to Elliot.
Changed Interest List CC from 
 `jwade%liz.austin.ibm.com@transarc.com,ota@transarc.com,jdp@transarc.com' to 
 `' 
Changed Responsible Engr. from `mason@transarc.com' to `jaffe@transarc.com' 
Changed Transarc Herder from `jdp@transarc.com' to `jaffe@transarc.com'



CR Number                     : 4594
Defect or Enhancement?        : enh
CR in Code, Doc, or Test?     : code
Inter-dependent CRs           : 
Project Name                  : dce
H/W Ref Platform              : all
S/W Ref Platform              : all
Component Name                : dfs
Subcomponent Name             : EPISODE
Short Description             : make log pass numbers be 32 bits.
Reported Date                 : 7/3/92
Found in Baseline             : 1.0.1b20
Found Date                    : 7/3/92
Severity                      : C
Priority                      : 4
Status                        : open
Duplicate Of                  : 
Fix By Baseline               : 1.1
Fixed In Baseline             : 
Affected File(s)              : 
Diff supplied by              : 
Diff release                  : 
Sensitivity                   : public
Transarc Status               : open
Transarc Deltas               : 
Transarc Herder               : mason@transarc.com

[7/3/92 public]
The log pass # is currently only a 16 bit number.  It really should be
a 32 bit number.  Fortunately, there is an adjacent field which is
really not needed; we will eliminate this field, too.
The real reasoning behind this is pretty esoteric - we are concerned
about logs which constantly get restarted but never manage to write
every block in the log.  Eventually, we will have greater than
(max-pass/2) spread and our recovery algorithm will break.  Adding an
extra 16 bits makes this a non-issue.
Added field Transarc Deltas with value `' 
Added field Transarc Herder with value `mason@transarc.com' 
Added field Transarc Status with value `open'

[8/31/92 public]
This would entail a log-format change.  Frankly, the problem is not so
severe it should warrant a log-format change.  Cancelled.
Changed Status from `open' to `cancel'

[9/1/92 public]
Ted believes this is still a useful improvement; re-opened and changed
to be an enhancement.
Changed Defect or Enhancement? from `def' to `enh' 
Changed Status from `cancel' to `open'

[11/16/92 public]
Should this be deferred out of 1.0.2?  Or cancelled?

[11/17/92 public]
We should NOT cancel this defect.  As a low priority disk format change
it should be deferred until the next time we have to change the log
format.
Changed Severity from `B' to `C' 
Changed Priority from `1' to `4'

[11/17/92 public]
Reassigned to Ted.
Changed Interest List CC from `ota@transarc.com' to `' 
Changed Responsible Engr. from `mason@transarc.com' to `ota@transarc.com'

[1/24/94 public]
Changed Subcomponent Name from `lfs' to `EPISODE'



CR Number                     : 4574
Defect or Enhancement?        : enh
CR in Code, Doc, or Test?     : code
Inter-dependent CRs           : 
Project Name                  : dce
H/W Ref Platform              : all
S/W Ref Platform              : all
Component Name                : dfs
Subcomponent Name             : px
Short Description             : present /etc/mount points as dfs mountpoints
Reported Date                 : 7/1/92
Found in Baseline             : 1.0.1
Found Date                    : 7/1/92
Severity                      : B
Priority                      : 2
Status                        : open
Duplicate Of                  : 
Fix By Baseline               : 1.1
Fixed In Baseline             : 
Affected File(s)              : 
Diff supplied by              : 
Diff release                  : 
Sensitivity                   : public
Transarc Status               : open
Transarc Deltas               : 
Transarc Herder               : mason@transarc.com

[7/1/92 public]
Currently if an /etc/mount point is reached in a fileset being exported
by a DFS fileserver, a ENOENT is returned for the object because it
resides in a different "fileset".  Even if this fileset is exported
by the fileserver it cannot be accessed by its "name" in the exported
filesystem since a DFS mountpoint cannot be constructed for the fileset
because the name already exists in the parent fileset.  Let me illustrate
by example.

  Suppose / is exported from a server machine and /usr is a filesystem
  mounted under /.

  A DFS client will see /usr, but will be unable to traverse the directory.
  A mountpoint (fts crmount) cannot be created for /.../cellname/fs/usr
  since this name already exists.  The only way to get to /usr from
  /.../cellname/fs would be to create a mountpoint with a different name.
  For example: fts crmount /.../cellname/fs/susr serveruserfs

  This is an undesirable effect.  The result is that a client cannot
  represent the file tree of the server it is exporting.

  I have talked to Mike Kazar at Transarc, and he has talked to other
  Transarc people and we all agree this should be fixed.  We have
  agreed on a solution.  The solution will require modifying the
  AFS_Lookup interface, and adding a new RPC interface for the client
  to query a mountpoint.

  This bug is to have those changes made.  The protocol changes should
  be made asap with enough code at the client and server to minimally
  support the change in an upward compatable fashion.  The rest of
  the code can be added afterwords.

  With these changes a client will be able to cross the unix mount points at
  the fileserver as long as the fileset mounted on the mount point is
  exported (dfsexport).
Added field Transarc Deltas with value `' 
Added field Transarc Herder with value `mason@transarc.com' 
Added field Transarc Status with value `open'

[7/10/92 public]
Reducing priority and fix by release fields.  The protocol change has been
made by Transarc under ot bug 4597.
Changed Priority from `1' to `2' 
Changed Fix By Baseline from `1.0.1' to `1.0.2'

[7/29/92 public]
From Carl's note it appears Mike K. is the right one to own this defect.
Reassigned.

Filled in Subcomponent Name with `px' 
Changed Short Description from `px: present /etc/mount points as dfs 
 mountpoints' to `present /etc/mount points as dfs mountpoints' 
Changed Interest List CC from `kazar@transarc.com' to `mason@transarc.com' 
Changed Responsible Engr. from `mason@transarc.com' to `kazar@transarc.com'

[9/8/92 public]
Changed Defect or Enhancement? from `def' to `enh'

[3/30/94 public]
We're looking at this for 1.1



CR Number                     : 4568
Defect or Enhancement?        : enh
CR in Code, Doc, or Test?     : code
Inter-dependent CRs           : 
Project Name                  : dce
H/W Ref Platform              : all
S/W Ref Platform              : all
Component Name                : dfs
Subcomponent Name             : cm
Short Description             : pioctl for VIOC_AFS_STAT_MT_PT fails with ETIMEDOUT
Reported Date                 : 7/1/92
Found in Baseline             : 1.0.2
Found Date                    : 7/1/92
Severity                      : C
Priority                      : 3
Status                        : open
Duplicate Of                  : 
Fix By Baseline               : 1.1
Fixed In Baseline             : 
Affected File(s)              : 
Diff supplied by              : 
Diff release                  : 
Sensitivity                   : public
Transarc Status               : open
Transarc Deltas               : 
Transarc Herder               : jaffe@transarc.com

[7/1/92 public]

This is in a one rios machine cell configured using local build
dfs-102-1.40 backed by osf build 18. The following pioctl call fails
with errno of ETIMEDOUT:

  pioctl ( "/.../dewitt.com", VIOC_AFS_STAT_MT_PT, &parg, 0 );

where parg is declared as 

  struct afs_ioctl parg

and its contents are:  

  parg.in="fs"
  parg.out=out_buf
  parg.in_size=3
  parg.out_size=MAXPATHLEN

and out_buf is declared as

  char out_buf[MAXPATHLEN]

and MAXPATHLEN is 1024.

The outbuf does not have anything in it after the pioctl and the parg.out_size
value remains at MAXPATHLEN.

However immediately after this 

  cd /.../dewitt.com/fs
  ls

works fine.

Rerunning the binary with the pioctl call fails with the same error.

Added field Transarc Deltas with value `' 
Added field Transarc Herder with value `mason@transarc.com' 
Added field Transarc Status with value `open'

[7/1/92 public]

fts lsmount /.../dewitt.com/fs also fails with "Connection timed out".

The output from the fts command is:

 [(rootl)config_files] fts lsmount /.../dewitt.com/fs
fts lsmount: error for file '/.../dewitt.com/fs': Connection timed out
 [(rootl)config_files] cd /.../dewitt.com/fs
 [(rootl)fs] pwd
/.../dewitt.com/fs
 [(rootl)fs] ls
adm/         guest/       lpd/         news/        sys/         usg/
afsws@       include/     lpp/         preserve/    testit       usr/
bin/         lib/         mail@        pub/         tmp/         vice/
dict/        local@       man/         rajesh/      u/
etc/         lost+found/  msgs/        spool/       ucb/
 [(rootl)fs] fts lsmount /.../dewitt.com/fs
fts lsmount: error for file '/.../dewitt.com/fs': Connection timed out

[7/1/92 public]
The root.dfs is a UFS fileset in the above case.

[7/2/92 public]
Rajesh clearly notes he found this defect in our 1.0.2 builds; I am
marking the defect as such and lowering its priority (since it is
applicable to 1.0.2, not 1.0.1)

If this IS applicable to 1.0.1, it should be updated as such.
Filled in Interest List CC with `kazar@transarc.com' 
Changed Found in Baseline from `1.0.1b18' to `1.0.2' 
Changed Priority from `1' to `2' 
Changed Fix By Baseline from `1.0.1' to `1.0.2' 
Changed Transarc Herder from `mason@transarc.com' to `jaffe@transarc.com'

[7/2/92 public]
The object being read isn't really a mount point; it's a junction from the
DCE directory space (CDS) into DFS-land.  The junction simply acts a little
like a mount point, but it's a simulated mount point, not a real one.  The
VIOC_AFS_STAT_MT_PT call was never intended to work in this case.

I'm changing this to be an enhancement request: requesting that the
initial DFS junction point be readable via this pioctl(), even though as
far as the cache manager is concerned, the directory is in a shadowy,
virtual space.
Changed Defect or Enhancement? from `def' to `enh' 
Changed H/W Ref Platform from `rs6000' to `all' 
Changed S/W Ref Platform from `aix' to `all' 
Changed Severity from `B' to `C' 
Changed Priority from `2' to `3'



CR Number                     : 4558
Defect or Enhancement?        : enh
CR in Code, Doc, or Test?     : code
Inter-dependent CRs           : 4548
Project Name                  : dce
H/W Ref Platform              : all
S/W Ref Platform              : all
Component Name                : dfs
Subcomponent Name             : EPISODE
Short Description             : Avoid writing dirty buffers which require log force
Reported Date                 : 7/1/92
Found in Baseline             : 1.0.2
Found Date                    : 7/1/92
Severity                      : B
Priority                      : 4
Status                        : open
Duplicate Of                  : 
Fix By Baseline               : 1.1
Fixed In Baseline             : 
Affected File(s)              : 
Diff supplied by              : 
Diff release                  : 
Sensitivity                   : public
Transarc Deltas               : 
Transarc Herder               : jdp@transarc.com
Transarc Status               : open
Transarc Delta                : 

[7/1/92 public]
The transaction size reservation scheme depends on efficient use of log
space.  The current code starts a new log page whenever the log needs to
be forced.  Thus conceivably every log record could occupy a whole page
if the log was forced frequently enough.  The transaction reservation
scheme assumes 100% utilization of log pages.
The suggested fix for this is to write the current log page when a force
is requested but to not start a new page.  Thus subsequent updates would
be appended to the current page which would then be rewritten when it
fills or in response to the next force (a second force without an
intervening record would be a no-op).  This will bring the utilization
to near 100%.  The remaining limit is that unsplitable records may force
a new page if the current page does not have enough room.
Added field Transarc Deltas with value `' 
Added field Transarc Herder with value `jdp@transarc.com' 
Added field Transarc Status with value `open'

[7/15/92 public]
We discussed this today.  The technique we will use here is one in
which we write the current (partial) log page.  To avoid being forced
to wait on the I/O, we copy the page at that point into a new buffer,
marking that it is a duplicate of a partial page.  The I/O to this
page cannot be scheduled until the previous partial page I/O has
finished.  Thus, rather than writing the page immediately, we must be
able to defer the write of that page until the I/O completeion event.
Subsequent log pages must also be added to a list of "to be scheduled"
pages in the same fashion.  Once that I/O has completed, the pages on
the "to be scheduled" list are written if possible (one possibility is
that the list might contain another partial page, in which case we
cannot write that page out, so we iterate over this process.)
This should be done for the sync and for the fsync code paths.

[7/23/92 public]
Changed to an enhancement to keep Julie happy.
Tony and I discussed this some more today.  It is now clear that
rewriting log pages is unacceptable.  To see why, consider what happens
if there is a power failure while rewriting a log page (which would
always be the head).  The page cksum code (which actually doesn't exist
yet, see OT 3435) will reject the last page.  This will violate any
guarantees that might have been made when forcing the partial page in
the first place (otherwise why do the force in the first place?).
Given that this approach is bogus how can we keep the efficiency of log
utilization high?
There are two reasons why we force the log.  In fsync, at the user's
request, and in the buffer code, when writing dirty meta-data buffers
(to maintain the write-ahead invariant).  In the latter case we can just
avoid writing dirty buffers when it would require a log force in the
alloc buffer code if there is any other buffer to use (the log full
handling code clearly must continue forcing the log as necessary).
Fixing the fsync case can also be achieved easily.  In fsync we already
wait for the last transaction that modified the file to complete (it is
certainly ended but we also must wait for any other EC members to end as
well).  The fix is that once this has happened we wait for either the
transaction system to quiesce then force the log or for the current log
page (which includes the desired transaction's end record) to be
written.  This has very desirable properties.  If the system is inactive
then the transaction system will quiesce quickly and the log can be
forced with no effect on log utilization (since there will be no active
transactions to be affected).  If the system is busy then the current
log page will fill up and be written out quickly and no extra work will
be required.
This gives us group commit advantages as a side-effect!
Changed Defect or Enhancement? from `def' to `enh'

[8/5/92 public]
Changed Short Description from `Do not start new page when forcing log' to `Fix 
 fsync and AllocBuffer to avoid partial log pages'

[11/16/92 public]
I think this work was done (mostly) during the quiesce work.  Cancel.
Changed Status from `open' to `cancel'

[11/17/92 public]
We can't cancel this until someone actually checks to see if "this work
was done (mostly) during the quiesce work".
Changed Status from `cancel' to `open'

[2/4/93 public]
The fsync work is done.
The fix to AllocBuffer to avoid writing dirty buffers which require log
forces.  This is a significant issue because it can cause log full
panics (therefore Severity B).  However, it is very unlikely to be a
common problem (therefore Priority 4).
Changed Short Description from `Fix fsync and AllocBuffer to avoid partial log 
 pages' to `Avoid writing dirty buffers which require log force' 
Changed Severity from `C' to `B'

[11/15/93 public]
Changed Responsible Engr. from `mason@transarc.com' to `ota@transarc.com' 
Added field Transarc Delta with value `'

[11/29/93 public]
Moved to the Transarc database as db4745.
Changed Subcomponent Name from `lfs' to `EPISODE' 
Filled in Reported by Company's Ref. Number with `4745'



CR Number                     : 4557
Defect or Enhancement?        : enh
CR in Code, Doc, or Test?     : code
Inter-dependent CRs           : 6131
Project Name                  : dce
H/W Ref Platform              : all
S/W Ref Platform              : all
Component Name                : dfs
Subcomponent Name             : EPISODE
Short Description             : sync should truncate log on an idle system
Reported Date                 : 7/1/92
Found in Baseline             : 1.0.2
Found Date                    : 7/1/92
Severity                      : C
Priority                      : 2
Status                        : open
Duplicate Of                  : 
Fix By Baseline               : 1.1
Fixed In Baseline             : 
Affected File(s)              : 
Diff supplied by              : 
Diff release                  : 
Sensitivity                   : public
Transarc Status               : open
Transarc Deltas               : 
Transarc Herder               : jdp@transarc.com

[7/1/92 public]
It would be nice if repeated sync's on an idle system would result in
either a trivial or clean log.  It is anomalous that a long idle system
can still have a log containing 10000 records.  Currently sync only
writes out dirty user data.
The suggested implementation is to write dirty metadata buffers if there
are not active transactions.  If there are no dirty buffers and no
active transactions write a restart block.
Added field Transarc Deltas with value `' 
Added field Transarc Herder with value `jdp@transarc.com' 
Added field Transarc Status with value `open'

[11/16/92 public]
 Sync does not behave in the manner described.  We've been over this
one and I believe the existing coverage is adequate.
Changed Status from `open' to `cancel'

[11/17/92 public]
It is still desirable to have sync (how ever it behaves) truncate the
log when the system is idle.
If the OT system can't be used to track desirable enhancements then
another mechanism will need to be devised to track work items.  In the
meantime please stop randomly canceling OTs.
Changed Status from `cancel' to `open'

[11/17/92 public]
 It DOES truncate the log.  What it doesn't do is write a clean
restart block.  I looked at the work involved.  It was substantial and
it had no clear benefits other than to prevent a few seconds of
running time at recovery.
This has nothing to do with the OT system - it has to do with the
relative desirability of this proposed change.
Reassigned to Ted.
Changed Interest List CC from `ota@transarc.com, bwl@transarc.com, 
 comer@transarc.com' to `ota,bwl,comer' 
Changed Responsible Engr. from `mason@transarc.com' to `ota@transarc.com'

[11/17/92 public]
We need a way to write an almost empty log block which can act as a
checkpoint.  Each log block contains an oldest data and tran pointer.
The oldest of these, with the current block bracket the active portion
of the log.  An idle log can still have a large active region because of
dirty meta-data buffers written after the last log block was written.
Once the log is idle a checkpoint record can be written in response to
sync (or whatever) by inserting a zero length debug record and calling
NewLogPage.  This probably wants to set some status flag (cleared by and
WriteLog) which prevents repeatedly writing checkpoint blocks.
Filled in Inter-dependent CRs with `6131'

[1/24/94 public]
Changed Subcomponent Name from `lfs' to `EPISODE'



CR Number                     : 4394
Defect or Enhancement?        : enh
CR in Code, Doc, or Test?     : test
Inter-dependent CRs           : 
Project Name                  : dce
H/W Ref Platform              : all
S/W Ref Platform              : all
Component Name                : dfs
Subcomponent Name             : tests
Short Description             : DFS tests assume . is on PATH.
Reported Date                 : 6/23/92
Found in Baseline             : 1.0.1b18
Found Date                    : 6/23/92
Severity                      : E
Priority                      : 3
Status                        : open
Duplicate Of                  : 
Fix By Baseline               : 1.1
Fixed In Baseline             : 
Affected File(s)              : 
Diff supplied by              : 
Diff release                  : 
Sensitivity                   : public
Transarc Status               : open
Transarc Deltas               : 
Transarc Herder               : mason@transarc.com

[6/23/92 public]
Many of the current DFS tests assume that . is on the PATH environment
variable.  This can be temporarily fixed by putting . on the PATH
variable, but the scripts themselves should be changed to use explicit
paths.
Added field Transarc Deltas with value `' 
Added field Transarc Herder with value `mason@transarc.com' 
Added field Transarc Status with value `open'

[6/29/92 public]
Changeed from a defect in code to a defect in the tests.
Changed CR in Code, Doc, or Test? from `code' to `test'

[11/17/92 public]
Type changed to enhancement. This isn't a required change for 1.0.2
Changed Defect or Enhancement? from `def' to `enh'

[9/15/94 public]
Changed Responsible Engr. from `fred@transarc.com' to `andi@transarc.com'



CR Number                     : 4152
Defect or Enhancement?        : enh
CR in Code, Doc, or Test?     : code
Inter-dependent CRs           : 
Project Name                  : dce
H/W Ref Platform              : all
S/W Ref Platform              : all
Component Name                : dfs
Subcomponent Name             : glue
Short Description             : Need make mount point syscall
Reported Date                 : 6/9/92
Found in Baseline             : 1.0.1
Found Date                    : 6/9/92
Severity                      : C
Priority                      : 3
Status                        : open
Duplicate Of                  : 
Fix By Baseline               : 1.1
Fixed In Baseline             : 
Affected File(s)              : 
Diff supplied by              : 
Diff release                  : 
Sensitivity                   : public
Transarc Deltas               : 
Transarc Herder               : mason@transarc.com
Transarc Status               : open

[6/9/92 public]
DFS mount points can only be made/examined via the DFS cache manager.
fts mkmount uses the symlink call to make the mount point, and the
cache manager special cases symlinks beginning with #, $, or % and
turns them into mount points (flagged by having no executable bits
set on the mount point itself).

The implications of this are that (1) symbolic links cannot be created
via dfs that start with #, $, or %, and (2) clients of an LFS cannot
directly create a mount point without accessing the file system through
DFS.

The AFS syscall that implements stat'ing and removal of DFS mount points
should be extended to handle mount point creation, and it should be
implemented using the extended vnode ops, rather than being specific to
the cache manager.

Added field Transarc Deltas with value `' 
Added field Transarc Herder with value `mason@transarc.com' 
Added field Transarc Status with value `open'

[6/16/92 public]
Filled in Responsible Engr. with `pakhtar@transarc.com' 
Filled in Resp. Engr's Company with `tarc'

[6/18/92 public]
Changed Interest List CC from `cfe@transarc.com kazar@transarc.com 
 bob@transarc.com' to `cfe@transarc.com pakhtar@transarc.com bob@transarc.com' 
Changed Responsible Engr. from `pakhtar@transarc.com' to `kazar@transarc.com'

[9/2/92 public]
Didn't remember that this was a conversion issue.
Changed Interest List CC from `cfe@transarc.com pakhtar@transarc.com 
 bob@transarc.com' to `cfe@transarc.com, pakhtar@transarc.com, 
 bob@transarc.com'

[9/3/92 public]
The DFS syscall that implements reading and deleting of DFS mount points
is just pioctl(), and that indeed uses DFS (being specific to the CM).

One substantial piece of motivation for this request is to allow mount points
to be created by entities other than the DFS CM.  This is unusual, since
those mount points are not interpreted by entities other than the DFS CM.
Even if one wanted to use other mechanisms for writing into filesets (such
as writing into locally-mounted UFS or LFS filesets), one could use DFS to
create the mount points themselves.

I recommend that this defect be cancelled, since it is an enhancement that
we are unlikely to get to.

[9/11/92 public]
change priority
Changed Priority from `2' to `3'

[10/14/92 public]
Changed Interest List CC from `cfe@transarc.com, pakhtar@transarc.com, 
 bob@transarc.com' to `cfe@transarc.com, pakhtar@transarc.com, 
 bob@transarc.com,demail1!carl'



CR Number                     : 4140
Defect or Enhancement?        : enh
CR in Code, Doc, or Test?     : doc
Inter-dependent CRs           : 
Project Name                  : dce
H/W Ref Platform              : all
S/W Ref Platform              : all
Component Name                : dfs
Subcomponent Name             : dfs_admin_gdref
Short Description             : Include output on all manpages
Reported Date                 : 6/8/92
Found in Baseline             : 1.0.1
Found Date                    : 6/8/92
Severity                      : D
Priority                      : 4
Status                        : open
Duplicate Of                  : 
Fix By Baseline               : 1.2
Fixed In Baseline             : 
Affected File(s)              : 
Sensitivity                   : public
Transarc Deltas               : 
Transarc Herder               : 
Transarc Status               : open

[6/8/92 public]
Many manpages do not currently include an OUTPUT section.  All manpages should
include an OUTPUT section.  Most of this information was not and still is not
available and stable.  We will look into fixing this one after 1.0.1. 
The following manpages do not have OUTPUT sections:
bak
	adddump		addentry
	addftfamily	addhost
	apropos		restoredb
	rmdump		rmftentry
	rmftfamily	rmhost
	savedb		setexp
bos
	addadmin	addkey
	create		delete
	exec		gckeys
	genkey		getlog
	install		prune
	restart		rmadmin
	rmkey		setauth
	setrestart	shutdown
	start		startup
	stop		uninstall
	lsadmin(1dfs)
butc
cm
	checkfilesets	flush
	flushfileset	lsstores
	resetstores	setdevok
	setsetuid	dfsbind
fts
	addsite		clone
	clonesys	create
	crfldbentry	crmount
	crserverentry	delete
	delfldbentry	delmount
	dump		edserverentry
	lock		lsreplicas*
	lsserverentry*	move
	release		rename
	restore		rmsite
	setquota	setrepinfo*
	statrepserver*	syncfldb
	syncserv	unlock
	unlockfldb	update
	zap
newaggr
upclient
upserver
Thanks to IBM for determining this list.
Added field Transarc Deltas with value `' 
Added field Transarc Herder with value `mason@transarc.com' 
Added field Transarc Status with value `open'

[6/9/92 public]
Defer to 1.0.2

[6/23/92 public]

[10/27/92 public]
Changed Severity from `D' to `C'

[10/27/92 public]
Changed Defect or Enhancement? from `def' to `enh'

[10/27/92 public]
Changed Severity from `C' to `D' 
Changed Priority from `3' to `4'

[6/22/93 public]
Changed "Fix By Baseline" from 1.0.3 to 1.1.

[8/24/94 public]
Defering again, to 1.2.  This requires significant effort and can be
addressed on a partial basis during other work (as has been done
to some extent for 1.1)

[11/8/94 public]
Changed Responsible Engr. from `jeff@transarc.com' to `wfl@transarc.com' 
Changed Transarc Herder from `mason@transarc.com' to `'

[7/17/95 public]
Reopened for DCE 1.2.



CR Number                     : 4139
Defect or Enhancement?        : enh
CR in Code, Doc, or Test?     : doc
Inter-dependent CRs           : 
Project Name                  : dce
H/W Ref Platform              : all
S/W Ref Platform              : all
Component Name                : dfs
Subcomponent Name             : dfs_admin_gdref
Short Description             : Include examples on all manpages
Reported Date                 : 6/8/92
Found in Baseline             : 1.0.1
Found Date                    : 6/8/92
Severity                      : D
Priority                      : 4
Status                        : open
Duplicate Of                  : 
Fix By Baseline               : 1.2
Fixed In Baseline             : 
Affected File(s)              : 
Sensitivity                   : public
Transarc Deltas               : 
Transarc Herder               : mason@transarc.com
Transarc Status               : open

[6/8/92 public]
Many manpages do not currently include an EXAMPLES section.  All manpages
should include an examples section.  Some of this information was not and
still is not available.  We will try to nail this one sometime after 1.0.1.
The following manpages are currently without examples:
bak
	dumpinfo
	labeltape
	restoredb
bakserver
bos
	install
	lsadmin(1dfs)
	prune
	stop
	uninstall
bosserver 
butc 
cm
	checkfilesets
	lsstores
	resetstores
dfsd
dfsexport
flserver
fts
	lsmount
	lsreplicas
	lsserverentry
	statftserver
	statrepserver
	syncfldb
newaggr
repserver
Thanks to IBM for listing and reporting the deficient manpages.
Added field Transarc Deltas with value `' 
Added field Transarc Herder with value `mason@transarc.com' 
Added field Transarc Status with value `open'

[6/9/92 public]
Defer to 1.0.2

[10/27/92 public]
Changed Defect or Enhancement? from `def' to `enh' 
Changed Severity from `D' to `C'

[10/27/92 public]
Changed Severity from `C' to `D' 
Changed Priority from `3' to `4'

[6/18/93 public]

[8/24/94 public]
Defering again, to 1.2.  This requires significant effort and can be
addressed on a partial basis during other work (as has been done 
to some extent for 1.1)

[11/8/94 public]
Changed Responsible Engr. from `jeff@transarc.com' to `wfl@transarc.com'

[7/17/95 public]
Reopened for DCE 1.2.



CR Number                     : 3822
Defect or Enhancement?        : enh
CR in Code, Doc, or Test?     : code
Inter-dependent CRs           : 
Project Name                  : dce
H/W Ref Platform              : all
S/W Ref Platform              : all
Component Name                : dfs
Subcomponent Name             : lfs
Short Description             : An I/O error that causes a panic in logbuf/buffer.c
Reported Date                 : 5/26/92
Found in Baseline             : 1.0.1
Found Date                    : 5/26/92
Severity                      : A
Priority                      : 2
Status                        : open
Duplicate Of                  : 
Fix By Baseline               : 1.1
Fixed In Baseline             : 
Affected File(s)              : 
Diff supplied by              : 
Diff release                  : 
Sensitivity                   : public
Transarc Deltas               : mason-ot3822-handle-io-errors-better
Transarc Herder               : jaffe@transarc.com
Transarc Status               : open
Transarc Delta                : 

[5/26/92 public]
This is  tr # 2627.
ate: Thu, 12 Mar 1992 15:57:54 -0500 (EST)
From: Bruce_Leverett@transarc.com
To: DFS_Bugs_Mailing-List@transarc.com
Subject: new bug
Cc:
This is an Episode bug.  It should have high severity.
In several places in episode/logbuf/buffer.c, we assert that the return value
from WaitForWrite (or the out-parameter set by asevent_WaitEvent) is zero.
This has the effect that an I/O error causes a panic.  This can happen
regardless of whether the buffer was data or meta-data, whether it was being
read or written, and who was using the buffer.  We must recover more
gracefully from I/O errors.
Added field Transarc Deltas with value `' 
Added field Transarc Herder with value `mason@transarc.com' 
Added field Transarc Status with value `open'

[7/20/92 public]
Changed "Fix by" to 1.0.2

[8/24/92 public]
Changed Defect or Enhancement? from `enh' to `def'

[10/1/92 public]
I've started to build some tools to do this.  I'm suggesting a zero-th
order round where we make sure that non-meta data errors do not cause
the system to panic.  When that is done, close this OT and open
another one which describes better error handling in the meta-data
case.
Changed Responsible Engr. from `bwl@transarc.com' to `mason@transarc.com' 
Filled in Transarc Deltas with `mason-ot3822-handle-io-errors-better' 
Changed Transarc Herder from `mason@transarc.com' to `jaffe@transarc.com'

[10/19/92 public]
Ted's comment on this one (and I agree) is that we need to do some initial
work on this, but this defect is very large and very general.  After some
preliminary work, I'll generate some more specific defects and close this
one.

[10/27/92 public]
Upgrade priority due to age.
Changed Priority from `2' to `1'

[11/16/92 public]
While it is a very desirable enhancement, an enhancement it is.
Changed Defect or Enhancement? from `def' to `enh' 
Filled in Interest List CC with `ota'

[11/15/93 public]
Changed Responsible Engr. from `mason@transarc.com' to `ota@transarc.com' 
Added field Transarc Delta with value `'



CR Number                     : 3821
Defect or Enhancement?        : enh
CR in Code, Doc, or Test?     : code
Inter-dependent CRs           : 
Project Name                  : dce
H/W Ref Platform              : all
S/W Ref Platform              : all
Component Name                : dfs
Subcomponent Name             : EPISODE
Short Description             : Use icl to report error code mapping in efs_agops.c
Reported Date                 : 5/26/92
Found in Baseline             : 1.0.1
Found Date                    : 5/26/92
Severity                      : C
Priority                      : 3
Status                        : open
Duplicate Of                  : 
Fix By Baseline               : 1.1
Fixed In Baseline             : 
Affected File(s)              : 
Diff supplied by              : 
Diff release                  : 
Sensitivity                   : public
Transarc Deltas               : 
Transarc Herder               : jaffe@transarc.com
Transarc Status               : open

[5/26/92 public]
This is tr #2621.
Date: Mon,  9 Mar 1992 08:41:12 -0500 (EST)
From: Ted_Anderson@transarc.com
To: DFS_Bugs_Mailing-List@transarc.com
Subject: Need error code tracing in efs_agops.c
CC: Bruce_Leverett@transarc.com
The file episode/vnops/efs_agops.c has only a single call to
EFS_TRACE_VNOPS yet there are many cases where error codes are being
mapped.  Especially note that failures from epig_InitAggregate are being
mapped silently.  The file needs to be checked for all error code
mapping and a trace entry added to each.
 [Please assign this to Bruce.]
Ted
Added field Transarc Deltas with value `' 
Added field Transarc Herder with value `mason@transarc.com' 
Added field Transarc Status with value `open'

[7/20/92 public]
Changed "Fix by" to 1.0.2

[8/25/92 public]
Assigned to Elliot.
Changed Responsible Engr. from `bwl@transarc.com' to `jaffe@transarc.com' 
Added field ffected File with value `'

[9/1/92 public]
Notice how strange Tony's change lines are, particularly the Transarc Status, which is currently ``open\nffected File(s) :''

[9/18/92 public]

[9/21/92 public]
Changed Defect or Enhancement? from `def' to `enh'

[10/8/92 public]

[10/8/92 public]
I cannot tell which calls might return episode errcodes. Bruce has expressed
a willingness to fix this enhancment, thus it is his.
Changed Responsible Engr. from `jaffe@transarc.com' to `bwl@transarc.com' 
Changed Transarc Herder from `mason@transarc.com' to `jaffe@transarc.com'

[11/11/93 public]
Changed Subcomponent Name from `lfs' to `EPISODE' 
Changed Short Description from `efs_agops.c needs more error checking.' to `Use 
 icl to report error code mapping in efs_agops.c' 
Filled in Reported by Company's Ref. Number with `2621'



CR Number                     : 3820
Defect or Enhancement?        : enh
CR in Code, Doc, or Test?     : code
Inter-dependent CRs           : 5316
Project Name                  : dce
H/W Ref Platform              : all
S/W Ref Platform              : aix
Component Name                : dfs
Subcomponent Name             : EPISODE
Short Description             : Waitall code is inherently broken
Reported Date                 : 5/26/92
Found in Baseline             : 1.0.1
Found Date                    : 5/26/92
Severity                      : B
Priority                      : 2
Status                        : open
Duplicate Of                  : 
Fix By Baseline               : 1.1
Fixed In Baseline             : 
Affected File(s)              : 
Diff supplied by              : 
Diff release                  : 
Sensitivity                   : public
Transarc Deltas               : 
Transarc Herder               : jaffe@transarc.com
Transarc Status               : open

[5/26/92 public]
The event set code is inherently broken because an event can be part of
only one set.  This causes higher layers to effectively not use event
sets (see the code in HandleLogFull and elbb_FsyncForce in
logbuf/buffer.c for examples).
Added field Transarc Deltas with value `' 
Added field Transarc Herder with value `mason@transarc.com' 
Added field Transarc Status with value `open'

[5/27/92 public]
Filled in Reported by Company's Ref. Number with `2572'

[7/20/92 public]
Changed "Fix by" to 1.0.2

[8/25/92 public]
Assigned to Elliot.
Filled in Interest List CC with `bwl@transarc.com' 
Changed Responsible Engr. from `bwl@transarc.com' to `jaffe@transarc.com' 
Changed Transarc Herder from `mason@transarc.com' to `jaffe@transarc.com'

[8/25/92 public]
I did not mean to assign this to Elliot.  Reassigned.  As per Bruce's note,
I'm marking this as an enhancement request.
Changed Defect or Enhancement? from `def' to `enh' 
Changed Responsible Engr. from `jaffe@transarc.com' to `bwl@transarc.com'

[9/2/92 public]
Another partial fix suggested in OT 5316.
Filled in Inter-dependent CRs with `5316'

[11/11/93 public]
Changed Subcomponent Name from `lfs' to `EPISODE' 
Changed Short Description from `Waitall code is inherently broken.' to `Waitall 
 code is inherently broken'



CR Number                     : 3813
Defect or Enhancement?        : enh
CR in Code, Doc, or Test?     : code
Inter-dependent CRs           : 4553
Project Name                  : dce
H/W Ref Platform              : all
S/W Ref Platform              : all
Component Name                : dfs
Subcomponent Name             : lfs
Short Description             : Manage transaction sizes better.
Reported Date                 : 5/26/92
Found in Baseline             : 1.0.1
Found Date                    : 5/26/92
Severity                      : D
Priority                      : 3
Status                        : open
Duplicate Of                  : 
Fix By Baseline               : 1.1
Fixed In Baseline             : 
Affected File(s)              : 
Diff supplied by              : 
Diff release                  : 
Sensitivity                   : public
Transarc Deltas               : 
Transarc Herder               : jaffe@transarc.com
Transarc Status               : open

[5/26/92 public]
This is tr defect #2338.

We need to do a better job of managing transaction sizes.

1. Measure transaction sizes: for each transaction name (which are
   one-to-one with calls to epia_StartTran) track average and max size.

2. Select an small upper-bound for the default transaction size that
   will handle most common transactions yet be small enough to allow
   good concurrency.  Some thing like 1-2Kb would be nice.

3. Large transactions should started explicitly with an upper-bound.

Some areas clearly need investigation:

From the anode/bug-report.text file:

xxxxxx 0054 ota

Currently the code in volume_table.c in FindLastIndex attempts to reduce
the size of the volume table by up to five pages at a time.  This is
probably still too many.  Since we have to call Deflate anyway, we
might as well take a conservative approach here. -ota 910419

xxxxxx 177 ota

The epif_Create code will copy auxiliary containers if they are from
other volumes.  This is all done under the same transaction that is used
for the Create.  Since both the acl and the plist could be 8K this
effectively doubles the size of the largest transaction.

( Discovered -ota 911121 )

There are others. -ota 920117
Added field Transarc Deltas with value `' 
Added field Transarc Herder with value `mason@transarc.com' 
Added field Transarc Status with value `open'

[7/10/92 public]
Changed Subcomponent Name from `episode' to `lfs' 
Filled in Reported by Company's Ref. Number with `2338'

[7/20/92 public]
Changed "Fix by" to 1.0.2

[7/31/92 public]
Restoring a fileset writes data to directories in more or less random blobs.
Each call to vol_efsWrite is done in its own transaction but there is no limit
on the size of these transfers.  There should be a stated limit of 8K for
meta-data objects like directories.
Filled in Inter-dependent CRs with `4553'

[8/31/92 public]
This is part of log-full avoidance.

Filled in Interest List CC with `mason@transarc.com' 
Changed Responsible Engr. from `mason@transarc.com' to `rajesh@transarc.com' 
Changed Transarc Herder from `mason@transarc.com' to `jaffe@transarc.com'

[10/27/92 public]
 Upgraded priority due to age.  If Rajesh does not have time to fix
this, perhaps Bruce or Jeff can.

Changed Interest List CC from `mason@transarc.com' to `mason,bwl,jdp' 
Changed Priority from `3' to `1'

[1/15/93 public]
The most important part of this work has been completed and submitted
under other OT numbers.  What remains is a lower priority enhancement,
so I am changing the defect accordingly.
Changed Defect or Enhancement? from `def' to `enh' 
Changed Priority from `1' to `3'



CR Number                     : 3812
Defect or Enhancement?        : enh
CR in Code, Doc, or Test?     : code
Inter-dependent CRs           : 
Project Name                  : dce
H/W Ref Platform              : all
S/W Ref Platform              : all
Component Name                : dfs
Subcomponent Name             : lfs
Short Description             : Consistency checks in fixed_anode.c should be assertions.
Reported Date                 : 5/26/92
Found in Baseline             : 1.0.1
Found Date                    : 5/26/92
Severity                      : D
Priority                      : 3
Status                        : open
Duplicate Of                  : 
Fix By Baseline               : 1.1
Fixed In Baseline             : 
Affected File(s)              : 
Diff supplied by              : 
Diff release                  : 
Sensitivity                   : public
Transarc Deltas               : 
Transarc Herder               : mason@transarc.com
Transarc Status               : open

[5/26/92 public]
This is tr defect #2636.
Date: Fri, 20 Mar 1992 17:07:32 -0500 (EST)
From: Bruce_Leverett@transarc.com
To: DFS_Bugs_Mailing-List@transarc.com

The following consistency checks in episode/anode/fixed_anode.c should be
assertions.  Line numbers are from version 2.8 of the file, so beware:

1934   2439   3414
1937   2444   3443
1997   2470   3447
2087   3176   3589
2088   3178   3646
2089   3295   3647
2144   3307   3819
2174   3350   4123
2270   3362   4803

Added field Transarc Deltas with value `' 
Added field Transarc Herder with value `mason@transarc.com' 
Added field Transarc Status with value `open'

[7/9/92 public]
Changed Subcomponent Name from `episode' to `lfs' 
Filled in Reported by Company's Ref. Number with `2636'

[7/20/92 public]
Changed "Fix by" to 1.0.2



CR Number                     : 3809
Defect or Enhancement?        : enh
CR in Code, Doc, or Test?     : code
Inter-dependent CRs           : 3802
Project Name                  : dce
H/W Ref Platform              : all
S/W Ref Platform              : all
Component Name                : dfs
Subcomponent Name             : lfs
Short Description             : Add TLOCK to volume_table module
Reported Date                 : 5/26/92
Found in Baseline             : 1.0.1
Found Date                    : 5/26/92
Severity                      : D
Priority                      : 3
Status                        : open
Duplicate Of                  : 
Fix By Baseline               : 1.1
Fixed In Baseline             : 
Affected File(s)              : 
Diff supplied by              : 
Diff release                  : 
Sensitivity                   : public
Transarc Deltas               : 
Transarc Herder               : mason@transarc.com
Transarc Status               : open

[jess@transarc.com 5/26/92 public] This is transarc defect #2568.  The
volume_table module, contrary to the current commentary present there,
should have a tlock to mediate anode allocate/deallocate and page
creation/truncation.  This is the primary case of tlock granularity
overlay and it is not being handled properly.  Currently the volume
tlock is responsible for this function but that tlock should be
restricted to the fileset header and a separate tlock should be added to
the volume_table module to handle this critical case.

This fix will also fix bug tr2385/ot3802 (epit_Deflate doesn't use
any tlock)

Added field Transarc Deltas with value `' 
Added field Transarc Herder with value `mason@transarc.com' 
Added field Transarc Status with value `open'

[7/10/92 public]
Filled in Inter-dependent CRs with `3803' 
Changed Subcomponent Name from `episode' to `lfs' 
Filled in Reported by Company's Ref. Number with `2568'

[7/20/92 public]
Changed "Fix by" to 1.0.2

[9/25/92 public]
Changed Inter-dependent CRs from `3803' to `3802' 
Filled in Interest List CC with `ota@transarc.com' 
Changed Responsible Engr. from `ota@transarc.com' to `blake@transarc.com'



CR Number                     : 3807
Defect or Enhancement?        : enh
CR in Code, Doc, or Test?     : code
Inter-dependent CRs           : 
Project Name                  : dce
H/W Ref Platform              : all
S/W Ref Platform              : all
Component Name                : dfs
Subcomponent Name             : lfs
Short Description             : Split AUX container code into separate module.
Reported Date                 : 5/26/92
Found in Baseline             : 1.0.1
Found Date                    : 5/26/92
Severity                      : D
Priority                      : 3
Status                        : open
Duplicate Of                  : 
Fix By Baseline               : 1.1
Fixed In Baseline             : 
Affected File(s)              : 
Diff supplied by              : 
Diff release                  : 
Sensitivity                   : public
Transarc Deltas               : 
Transarc Herder               : mason@transarc.com
Transarc Status               : open

[5/26/92 public]
This is the transarc defect #2567.

The code for managing auxiliary containers in located in the file module
but has very little dependence on the rest of that code and could
profitably be separated into another module.

Added field Transarc Deltas with value `' 
Added field Transarc Herder with value `mason@transarc.com' 
Added field Transarc Status with value `open'

[7/10/92 public]
Changed Subcomponent Name from `episode' to `lfs' 
Filled in Reported by Company's Ref. Number with `2567'

[7/20/92 public]
Changed "Fix by" to 1.0.2



CR Number                     : 3753
Defect or Enhancement?        : enh
CR in Code, Doc, or Test?     : code
Inter-dependent CRs           : 3666
Project Name                  : dce
H/W Ref Platform              : all
S/W Ref Platform              : all
Component Name                : dfs
Subcomponent Name             : EPISODE
Short Description             : Superblock handling is inadequate
Reported Date                 : 5/22/92
Found in Baseline             : 1.0.1
Found Date                    : 5/22/92
Severity                      : D
Priority                      : 4
Status                        : open
Duplicate Of                  : 
Fix By Baseline               : 1.1
Fixed In Baseline             : 
Affected File(s)              : 
Diff supplied by              : 
Diff release                  : 
Sensitivity                   : public
Transarc Deltas               : 
Transarc Herder               : jdp@transarc.com
Transarc Status               : open

[5/22/92 public]
Ideally we should improve the usefulness of superblocks.  Currently they
are only set when the aggregate is created.  This means that the
alternate superblocks do not contain any information about any of the
filesets that were created after the aggregate was initialized (namely,
all of them).  This makes the alternates pretty useless.  The plan of
record is to copy the primary superblock over the least recently updated
alternate superblock at aggregate shutdown time.
However, I question the alternate superblocks mechanism as a useful
source of redundancy.  I'm sure there are a few cases where having an
alternate superblock available will save someone a lot of work.  But I
doubt that this is a very important or interesting class of errors.  If
recovery is working, as it will be in a mature product, the primary need
for the salvager will be disk failures.  What fraction of these will
damage only the superblock yet leave other important parts of the disk
untouched?  Perhaps operator error (cat'ing a small file over the disk
device when running as root) is a more likely failure mode.
Anyway, tradition aside, I think time and effort will be better spent in
other areas.
Added field Transarc Deltas with value `' 
Added field Transarc Herder with value `jdp@transarc.com' 
Added field Transarc Status with value `open'

[5/28/92 public]
Changed Fix By Baseline from `1.1' to `1.0.2'

[7/8/92 public]
Changed Defect or Enhancement? from `def' to `enh'

[1/24/94 public]
Changed Subcomponent Name from `lfs' to `EPISODE'



CR Number                     : 3707
Defect or Enhancement?        : enh
CR in Code, Doc, or Test?     : doc
Inter-dependent CRs           : 
Project Name                  : dce
H/W Ref Platform              : all
S/W Ref Platform              : all
Component Name                : dfs
Subcomponent Name             : dfs_admin_gdref
Short Description             : Man pages for cm functions do not have error codes.
Reported Date                 : 5/20/92
Found in Baseline             : 1.0
Found Date                    : 5/20/92
Severity                      : D
Priority                      : 4
Status                        : open
Duplicate Of                  : 
Fix By Baseline               : 1.2
Fixed In Baseline             : 
Affected File(s)              : 
Sensitivity                   : public
Transarc Deltas               : 
Transarc Herder               : mason@transarc.com
Transarc Status               : open

[5/20/92 public]
Full Description:
        Aren't there any error messages for the cm functions? What
        if the function fails? How does the user know what went wrong?
Repeat By:
Proposed Solution:
        Verify whether there should be error messages and if so, list
        appropriate ones for each cm function.

[5/28/92 public]
Changed H/W Ref Platform from `rs6000' to `all' 
Changed S/W Ref Platform from `aix' to `all' 
Filled in Responsible Engr. with `jeff@transarc.com' 
Filled in Resp. Engr's Company with `tarc' 
Added field Transarc Deltas with value `' 
Added field Transarc Herder with value `mason@transarc.com' 
Added field Transarc Status with value `open'

[5/28/92 public]
This defect cannot be addressed for 1.0.1 and probably not for 1.0.2. 
I would like it to be deferred indefinitely or until such time as the
many other defects associated with the DFS doc are addressed.  Thanks.

[6/11/92 public]
Defer to 1.0.2.

[10/26/92 public]
Changed Severity from `C' to `D' 
Changed Priority from `2' to `3'

[10/27/92 public]
Changed Severity from `D' to `C'

[10/27/92 public]
Changed Severity from `C' to `D'

[6/18/93 public]
Changed Fix By Baseline from `1.0.3' to `1.1'

[8/18/93 public]
Changed Priority from `3' to `4'

[8/24/94 public]
Defering again, to 1.2.  This requires significant effort and should be
considered a wishlist item.

[11/8/94 public]
Filled in Interest List CC with `jeff@transarc.com' 
Changed Responsible Engr. from `jeff@transarc.com' to `wfl@transarc.com'

[7/17/95 public]
Reopened for DCE 1.2.



CR Number                     : 3706
Defect or Enhancement?        : enh
CR in Code, Doc, or Test?     : doc
Inter-dependent CRs           : 
Project Name                  : dce
H/W Ref Platform              : all
S/W Ref Platform              : all
Component Name                : dfs
Subcomponent Name             : dfs_admin_gdref
Short Description             : Man pages for fts functions do not have error codes.
Reported Date                 : 5/20/92
Found in Baseline             : 1.0
Found Date                    : 5/20/92
Severity                      : D
Priority                      : 4
Status                        : open
Duplicate Of                  : 
Fix By Baseline               : 1.2
Fixed In Baseline             : 
Affected File(s)              : 
Sensitivity                   : public
Transarc Deltas               : 
Transarc Herder               : mason@transarc.com
Transarc Status               : open

[5/20/92 public]
Full Description:
        Aren't there any error messages for the fts functions? What
        if the function fails? How does the user know what went wrong?
Repeat By:
Proposed Solution:
        Verify whether there should be error messages and if so, list
        appropriate ones for each fts function.

[5/28/92 public]
Changed H/W Ref Platform from `rs6000' to `all' 
Changed S/W Ref Platform from `aix' to `all' 
Filled in Responsible Engr. with `jeff@transarc.com' 
Filled in Resp. Engr's Company with `tarc' 
Added field Transarc Deltas with value `' 
Added field Transarc Herder with value `mason@transarc.com' 
Added field Transarc Status with value `open'

[6/11/92 public]
defer to 1.0.2

[5/28/92 public]
This defect cannot be addressed for 1.0.1 and probably not for 1.0.2. 
I would like it to be deferred indefinitely or until such time as the
many other defects associated with the DFS doc are addressed.  Thanks.

[10/26/92 public]
Changed Short Description from `Man pages for DFS fts functions do not have 
 error codes.' to `Man pages for DFS fts functions do not have error codes' 
Changed Severity from `C' to `D' 
Changed Priority from `2' to `3'

[10/26/92 public]
Changed Short Description from `Man pages for DFS fts functions do not have 
 error codes' to `Man pages for fts functions do not have error codes.'

[10/27/92 public]
Changed Severity from `D' to `C'

[10/27/92 public]
Changed Severity from `C' to `D'

[6/18/93 public]
Changed Fix By Baseline from `1.0.3' to `1.1'

[8/18/93 public]
Changed Priority from `3' to `4'

[8/24/94 public]
Defering again, to 1.2.  This requires significant effort and should be
considered wishlist items.

[11/8/94 public]
Filled in Interest List CC with `jeff@transarc.com' 
Changed Responsible Engr. from `jeff@transarc.com' to `wfl@transarc.com'

[7/17/95 public]
Reopened for DCE 1.2.



CR Number                     : 3689
Defect or Enhancement?        : enh
CR in Code, Doc, or Test?     : doc
Inter-dependent CRs           : 
Project Name                  : dce
H/W Ref Platform              : all
S/W Ref Platform              : all
Component Name                : dfs
Subcomponent Name             : dfs_admin_gdref
Short Description             : Man pages for bos functions do not have error codes.
Reported Date                 : 5/20/92
Found in Baseline             : 1.0
Found Date                    : 5/20/92
Severity                      : D
Priority                      : 4
Status                        : open
Duplicate Of                  : 
Fix By Baseline               : 1.2
Fixed In Baseline             : 
Affected File(s)              : 
Sensitivity                   : public
Transarc Deltas               : 
Transarc Herder               : mason@transarc.com
Transarc Status               : open

[5/20/92 public]
Full Description:
        All bos man pages, starting with bos addadmin(8dfs) should have
        error messages listed? What happens if a function fail? Need error
        messages to know what happened.
Repeat By:
Proposed Solution:
        List appropriate error messages for each bos (8dfs) function.

[5/28/92 public]
Changed H/W Ref Platform from `other' to `all' 
Changed S/W Ref Platform from `other' to `all' 
Filled in Responsible Engr. with `jeff@transarc.com' 
Filled in Resp. Engr's Company with `tarc' 
Added field Transarc Deltas with value `' 
Added field Transarc Herder with value `mason@transarc.com' 
Added field Transarc Status with value `open'

[5/28/92 public]
This defect cannot be addressed for 1.0.1 and probably not for 1.0.2. 
I would like it to be deferred indefinitely or until such time as the
many other defects associated with the DFS doc are addressed.  Thanks.

[6/11/92 public]
defer to 1.0.2

[10/26/92 public]
Changed Short Description from `bos addadmin(8dfs) man page, no ERROR messages 
 listed' to `Man pages for bos functions do not have error codes.' 
Changed Priority from `2' to `3'

[10/27/92 public]
Changed Severity from `D' to `C'

[10/27/92 public]
Changed Severity from `C' to `D'

[6/18/93 public]
Changed Fix By Baseline from `1.0.3' to `1.1'

[8/18/93 public]
Changed Priority from `3' to `4'

[8/24/94 public]
Defering 10 1.2.  These are major undertakings and should be considered 1.2
wishlist items

[11/8/94 public]
Filled in Interest List CC with `jeff@transarc.com' 
Changed Responsible Engr. from `jeff@transarc.com' to `wfl@transarc.com'

[7/17/95 public]
Reopened for DCE 1.2.



CR Number                     : 3604
Defect or Enhancement?        : enh
CR in Code, Doc, or Test?     : code
Inter-dependent CRs           : 
Project Name                  : dce
H/W Ref Platform              : all
S/W Ref Platform              : all
Component Name                : dfs
Subcomponent Name             : lfs
Short Description             : Avoid confusing references to VR_ procedures in anode layer
Reported Date                 : 5/15/92
Found in Baseline             : 1.0.1
Found Date                    : 5/15/92
Severity                      : D
Priority                      : 3
Status                        : open
Duplicate Of                  : 
Fix By Baseline               : 1.1
Fixed In Baseline             : 
Affected File(s)              : 
Diff supplied by              : 
Diff release                  : 
Sensitivity                   : public
Transarc Deltas               : 
Transarc Herder               : mason@transarc.com
Transarc Status               : open

[5/15/92 public]

The code in the anode layer: test_anode.c and aggregate.c makes confusing 
references to vr_ procedure that live in epia_volreg.c.  These are only used 
by the test code, however, they are actually linked into the kernel but 
never called.  The test code will need some mechanism to replace this but 
whatever it is should be more clearly test scaffolding.
Added field Transarc Deltas with value `' 
Added field Transarc Herder with value `mason@transarc.com' 
Added field Transarc Status with value `open'

[7/20/92 public]
Changed "Fix by" to 1.0.2



CR Number                     : 3452
Defect or Enhancement?        : enh
CR in Code, Doc, or Test?     : code
Inter-dependent CRs           : 
Project Name                  : dce
H/W Ref Platform              : all
S/W Ref Platform              : all
Component Name                : dfs
Subcomponent Name             : lfs
Short Description             : efs_rdwr with the IO_SYNC bit does too much work
Reported Date                 : 5/13/92
Found in Baseline             : 1.0.1b15
Found Date                    : 5/13/92
Severity                      : C
Priority                      : 3
Status                        : open
Duplicate Of                  : 
Fix By Baseline               : 1.1
Fixed In Baseline             : 
Affected File(s)              : file/episode/vnops/efs_vnodeops.c
Diff supplied by              : 
Diff release                  : 
Sensitivity                   : public
Transarc Deltas               : 
Transarc Herder               : jdp@transarc.com
Transarc Status               : open

[5/13/92 public]
The efs_rdwr routine implements IO_SYNC by calling fsync; this potentially
does extra work and could cause certain types of applications (e.g. ISAM
files being accessed by different programs) to perform very poorly.

It would be better if only those pages modified in the rdwr were forced to
disk, rather than all pages for the file. (As a point of reference, BSD
IO_SYNC acts this way...)

Added field Transarc Deltas with value `' 
Added field Transarc Herder with value `jdp@transarc.com' 
Added field Transarc Status with value `open'

[5/28/92 public]
Changed Fix By Baseline from `1.1' to `1.0.2'

[8/17/92 public]
Another interesting side-effect here is that when you set the IO_SYNC
bit on a READ request, if the file is dirty, I/O is really done.



CR Number                     : 3281
Defect or Enhancement?        : enh
CR in Code, Doc, or Test?     : code
Inter-dependent CRs           : 
Project Name                  : dce
H/W Ref Platform              : all
S/W Ref Platform              : all
Component Name                : dfs
Subcomponent Name             : 
Short Description             : Needs server status utility.
Reported Date                 : 5/6/92
Found in Baseline             : 1.0.1
Found Date                    : 5/6/92
Severity                      : E
Priority                      : 4
Status                        : open
Duplicate Of                  : 
Fix By Baseline               : 1.1
Fixed In Baseline             : 
Affected File(s)              : 
Diff supplied by              : 
Diff release                  : 
Sensitivity                   : public
Transarc Status               : open
Transarc Deltas               : 
Transarc Herder               : jaffe@transarc.com

[5/6/92 public]

Currently the cache manager will only report the status of machines with 
which it has contacted, or needs to contact.  There is no way to determine
the status of all file servers in a given cell.  Perhaps a combination of 
the -cell and -all options could accomplish this.  If not, a new option 
could be added, such as -force.

Added field Transarc Deltas with value `' 
Added field Transarc Herder with value `mason@transarc.com' 
Added field Transarc Status with value `open'

[7/20/92 public]
Changed "Fix by" to 1.0.2

[7/29/92 public]
Assigned to Mike for analysis and possible further assignment.

Changed Responsible Engr. from `mason@transarc.com' to `kazar@transarc.com' 
Changed Transarc Herder from `mason@transarc.com' to `jaffe@transarc.com'

[7/29/92 public]
The cache manager never knows all the file servers in a cell.  It would not be
reasonable for ``cm statservers'' to scan (the FLDB) for all file servers in a
cell and establish communication with them.  It might be possible to write a
separate command (not the ``cm'' subcommand) that would scan for all such
servers in a cell and initiate contact with them from user space, but that
is no longer doing what this command does, which is to query the CM about all
the file servers with which it has been in contact.

Perhaps this should really be turned into a doc defect, if the doc doesn't
say clearly that the ``cm statservers'' command queries the CM about its
communication with servers with which it is already in contact.  Fred?
Changed Subcomponent Name from `cm statservers' to `cm cmd' 
Filled in Interest List CC with `cfe@transarc.com'

[7/29/92 public]

The current documentation is clearer about what the command actually does, 
i.e. contacting servers it has been in contact with.  However, I still think
DFS should provide a utility to determine the status of all DFS servers in 
a cell.  I will change the short description.

Changed Subcomponent Name from `cm cmd' to `' 
Changed Short Description from `Does not report on all file servers.' to `Needs 
 server status utility.'



CR Number                     : 3155
Defect or Enhancement?        : enh
CR in Code, Doc, or Test?     : code
Inter-dependent CRs           : 
Project Name                  : dce
H/W Ref Platform              : all
S/W Ref Platform              : all
Component Name                : dfs
Subcomponent Name             : lfs
Short Description             : efts createft sets quota in frags not 1Ks
Reported Date                 : 4/30/92
Found in Baseline             : 1.0.1
Found Date                    : 4/30/92
Severity                      : D
Priority                      : 2
Status                        : open
Duplicate Of                  : 
Fix By Baseline               : 1.1
Fixed In Baseline             : 
Affected File(s)              : 
Diff supplied by              : 
Diff release                  : 
Sensitivity                   : public
Transarc Status               : open
Transarc Deltas               : 
Transarc Herder               : jaffe@transarc.com

[4/30/92 public]
The efts createft claims that fileset quota is in 1K units but actually
seems to be in fragments.

This probably afflicts the fts command too.  Either that or it is
correcting for this in someway that efts should duplicate.
Added field Transarc Deltas with value `' 
Added field Transarc Herder with value `mason@transarc.com' 
Added field Transarc Status with value `open'

[7/16/92 public]
Changed Defect or Enhancement? from `def' to `enh'

[7/20/92 public]
Changed "Fix by" to 1.0.2

[8/31/92 public]
Changed Interest List CC from `wang@sni-usa.com,cfe@transarc.com' to 
 `cfe@transarc.com' 
Changed Responsible Engr. from `ota@transarc.com' to `jdp@transarc.com' 
Changed Transarc Herder from `mason@transarc.com' to `jaffe@transarc.com'



CR Number                     : 3095
Defect or Enhancement?        : enh
CR in Code, Doc, or Test?     : code
Inter-dependent CRs           : 
Project Name                  : dce
H/W Ref Platform              : all
S/W Ref Platform              : all
Component Name                : dfs
Subcomponent Name             : cm
Short Description             : DFS remote SYS V locking cannot supp. dead lock det.
Reported Date                 : 4/28/92
Found in Baseline             : 1.0.1
Found Date                    : 4/28/92
Severity                      : E
Priority                      : 4
Status                        : open
Duplicate Of                  : 
Fix By Baseline               : 1.1
Fixed In Baseline             : 
Affected File(s)              : 
Diff supplied by              : 
Diff release                  : 
Sensitivity                   : public
Transarc Status               : open
Transarc Deltas               : 
Transarc Herder               : mason@transarc.com

[4/28/92 public]
Currently DFS cannot perform deadlock detection for system V lock request
made by DFS clients.  The Primary reason for this is that the token
manager does not detect deadlock conditions for lock tokens.  Perhaps
the token manager should be enhanced to support this detection so
the system V deadlock detection can be done for DFS remote locking.
Added field Transarc Deltas with value `' 
Added field Transarc Herder with value `mason@transarc.com' 
Added field Transarc Status with value `open'

[7/20/92 public]
Changed "Fix by" to 1.0.2

[7/29/92 public]
This is Kazar's area.  Up to him for more analysis and possible reassignment.

Filled in Subcomponent Name with `cm' 
Changed Responsible Engr. from `mason@transarc.com' to `kazar@transarc.com'

[9/3/92 public]
deadlock detection is beyond our abilities with the current architecture, as the
token manager at the server doesn't have enough information to know which
Unix client processes have which locks held.

This isn't a serious problem, as POSIX doesn't require that all deadlocks be
detected in client applications.  And it is hard to imagine how to fix it before DCE 2.0.
Changed Defect or Enhancement? from `def' to `enh' 
Changed Severity from `B' to `E' 
Changed Priority from `2' to `4'



CR Number                     : 3053
Defect or Enhancement?        : enh
CR in Code, Doc, or Test?     : code
Inter-dependent CRs           : 
Project Name                  : dce
H/W Ref Platform              : all
S/W Ref Platform              : all
Component Name                : dfs
Subcomponent Name             : lfs
Short Description             : Tabularization in Getacl/Setacl
Reported Date                 : 4/24/92
Found in Baseline             : 1.0.1
Found Date                    : 4/24/92
Severity                      : C
Priority                      : 2
Status                        : open
Duplicate Of                  : 
Fix By Baseline               : 1.1
Fixed In Baseline             : 
Affected File(s)              : 
Diff supplied by              : 
Diff release                  : 
Sensitivity                   : public
Transarc Status               : open
Transarc Deltas               : 
Transarc Herder               : mason@transarc.com

[4/24/92 public]
efsx_getacl and efsx_setacl would be smaller (and cleaner) if a table, rather
than a switch statement, were used to convert the VNX_ACL_ codes to the
EPIF_AUX_IS_ bits.
Added field Transarc Deltas with value `' 
Added field Transarc Herder with value `mason@transarc.com' 
Added field Transarc Status with value `open'

[7/10/92 public]
Changed Subcomponent Name from `LFS' to `lfs'

[7/20/92 public]
Changed "Fix by" to 1.0.2



CR Number                     : 3046
Defect or Enhancement?        : enh
CR in Code, Doc, or Test?     : code
Inter-dependent CRs           : 
Project Name                  : dce
H/W Ref Platform              : all
S/W Ref Platform              : all
Component Name                : dfs
Subcomponent Name             : lfs
Short Description             : Do not fuss with ctime of deleted files
Reported Date                 : 4/24/92
Found in Baseline             : 1.0.1
Found Date                    : 4/24/92
Severity                      : C
Priority                      : 2
Status                        : open
Duplicate Of                  : 
Fix By Baseline               : 1.1
Fixed In Baseline             : 
Affected File(s)              : 
Diff supplied by              : 
Diff release                  : 
Sensitivity                   : public
Transarc Status               : open
Transarc Deltas               : 
Transarc Herder               : mason@transarc.com

[4/24/92 public]
When unlinking a file or directory, Episode updates its ctime (because its
link count is changing).  To improve performance, this update can be omitted
if the link count is going to zero.
Added field Transarc Deltas with value `' 
Added field Transarc Herder with value `mason@transarc.com' 
Added field Transarc Status with value `open'

[7/10/92 public]
Changed Subcomponent Name from `LFS' to `lfs'

[7/20/92 public]
Changed "Fix by" to 1.0.2



CR Number                     : 3043
Defect or Enhancement?        : enh
CR in Code, Doc, or Test?     : code
Inter-dependent CRs           : 
Project Name                  : dce
H/W Ref Platform              : all
S/W Ref Platform              : all
Component Name                : dfs
Subcomponent Name             : lfs
Short Description             : Holding vntable_lock during vnode recycle
Reported Date                 : 4/24/92
Found in Baseline             : 1.0.1
Found Date                    : 4/24/92
Severity                      : C
Priority                      : 2
Status                        : open
Duplicate Of                  : 
Fix By Baseline               : 1.1
Fixed In Baseline             : 
Affected File(s)              : 
Diff supplied by              : 
Diff release                  : 
Sensitivity                   : public
Transarc Status               : open
Transarc Deltas               : 
Transarc Herder               : mason@transarc.com

[4/24/92 public]
To improve performance by allowing more concurrency, the vnode recycling code
should not hold vntable_lock while calling vnm_Rouse.
Added field Transarc Deltas with value `' 
Added field Transarc Herder with value `mason@transarc.com' 
Added field Transarc Status with value `open'

[7/10/92 public]
Changed Subcomponent Name from `LFS' to `lfs'

[7/20/92 public]
Changed "Fix by" to 1.0.2



CR Number                     : 2920
Defect or Enhancement?        : enh
CR in Code, Doc, or Test?     : code
Inter-dependent CRs           : 
Project Name                  : dce
H/W Ref Platform              : all
S/W Ref Platform              : all
Component Name                : dfs
Subcomponent Name             : lfs
Short Description             : Special case common epia_Writes
Reported Date                 : 4/20/92
Found in Baseline             : 1.0.1
Found Date                    : 4/20/92
Severity                      : E
Priority                      : 2
Status                        : open
Duplicate Of                  : 
Fix By Baseline               : 1.1
Fixed In Baseline             : 
Affected File(s)              : 
Diff supplied by              : 
Diff release                  : 
Sensitivity                   : public
Transarc Deltas               : 
Transarc Herder               : mason@transarc.com
Transarc Status               : open

[4/20/92 public]
"special case common epia_Writes" - Special-case handling for writes that don't
promote, zero, or COW.  Perform all promotion/allocation/zeroing/COW before the
first iteration. (910822)

 [cost 15 benefit 15] (911211)
Added field Transarc Deltas with value `' 
Added field Transarc Herder with value `mason@transarc.com' 
Added field Transarc Status with value `open'

[7/20/92 public]
Changed "Fixed by" to 1.0.2



CR Number                     : 2918
Defect or Enhancement?        : enh
CR in Code, Doc, or Test?     : code
Inter-dependent CRs           : 
Project Name                  : dce
H/W Ref Platform              : all
S/W Ref Platform              : all
Component Name                : dfs
Subcomponent Name             : lfs
Short Description             : Remove tlock in file handle
Reported Date                 : 4/20/92
Found in Baseline             : 1.0.1
Found Date                    : 4/20/92
Severity                      : E
Priority                      : 2
Status                        : open
Duplicate Of                  : 
Fix By Baseline               : 1.1
Fixed In Baseline             : 
Affected File(s)              : 
Diff supplied by              : 
Diff release                  : 
Sensitivity                   : public
Transarc Deltas               : 
Transarc Herder               : mason@transarc.com
Transarc Status               : open

[4/20/92 public]
"remove tlock in file handle" - The tlock in the file handle dubious.
Can it be punted?  The lock itself is still needed for fid
discrimination. (see also "Describe Transaction and Tlock usage")
(910822)

See ~ota/doc/episode/tlock.rules. (920420)
Added field Transarc Deltas with value `' 
Added field Transarc Herder with value `mason@transarc.com' 
Added field Transarc Status with value `open'

[7/20/92 public]
Changed "Fix by" to 1.0.2



CR Number                     : 2917
Defect or Enhancement?        : enh
CR in Code, Doc, or Test?     : code
Inter-dependent CRs           : 
Project Name                  : dce
H/W Ref Platform              : all
S/W Ref Platform              : all
Component Name                : dfs
Subcomponent Name             : lfs
Short Description             : Speed up IsAnodeAllEmpty
Reported Date                 : 4/20/92
Found in Baseline             : 1.0.1
Found Date                    : 4/20/92
Severity                      : E
Priority                      : 2
Status                        : open
Duplicate Of                  : 
Fix By Baseline               : 1.1
Fixed In Baseline             : 
Affected File(s)              : 
Diff supplied by              : 
Diff release                  : 
Sensitivity                   : public
Transarc Deltas               : 
Transarc Herder               : mason@transarc.com
Transarc Status               : open

[4/20/92 public]
"speed up IsAnodeAllEmpty" - Perhaps convert it to a macro as well. (910822)
Added field Transarc Deltas with value `' 
Added field Transarc Herder with value `mason@transarc.com' 
Added field Transarc Status with value `open'

[7/20/92 public]
Changed "Fix by" to 1.0.2



CR Number                     : 2916
Defect or Enhancement?        : enh
CR in Code, Doc, or Test?     : code
Inter-dependent CRs           : 
Project Name                  : dce
H/W Ref Platform              : all
S/W Ref Platform              : all
Component Name                : dfs
Subcomponent Name             : lfs
Short Description             : Pre-create buffer in allocate frags
Reported Date                 : 4/20/92
Found in Baseline             : 1.0.1
Found Date                    : 4/20/92
Severity                      : E
Priority                      : 2
Status                        : open
Duplicate Of                  : 
Fix By Baseline               : 1.1
Fixed In Baseline             : 
Affected File(s)              : 
Diff supplied by              : 
Diff release                  : 
Sensitivity                   : public
Transarc Deltas               : 
Transarc Herder               : mason@transarc.com
Transarc Status               : open

[4/20/92 public]
"precreate buffer in allocate frags" - The epib_AllocateFrags routine could
create a buffer if requested to and new frags are first in previously empty
block.

 [cost 2 benefit 2] (911211)
Added field Transarc Deltas with value `' 
Added field Transarc Herder with value `mason@transarc.com' 
Added field Transarc Status with value `open'

[7/20/92 public]
Changed "Fixed by" to 1.0.2



CR Number                     : 2915
Defect or Enhancement?        : enh
CR in Code, Doc, or Test?     : code
Inter-dependent CRs           : 
Project Name                  : dce
H/W Ref Platform              : all
S/W Ref Platform              : all
Component Name                : dfs
Subcomponent Name             : lfs
Short Description             : Macro-ize epia_Start/EndTran
Reported Date                 : 4/20/92
Found in Baseline             : 1.0.1
Found Date                    : 4/20/92
Severity                      : E
Priority                      : 2
Status                        : open
Duplicate Of                  : 
Fix By Baseline               : 1.1
Fixed In Baseline             : 
Affected File(s)              : 
Diff supplied by              : 
Diff release                  : 
Sensitivity                   : public
Transarc Deltas               : 
Transarc Herder               : mason@transarc.com
Transarc Status               : open

[4/20/92 public]
"Macro-ize epia_Start/EndTran" - to be a call to epib_Start/EndTran.
Added field Transarc Deltas with value `' 
Added field Transarc Herder with value `mason@transarc.com' 
Added field Transarc Status with value `open'

[7/20/92 public]
Changed "Fix by" to 1.0.2



CR Number                     : 2914
Defect or Enhancement?        : enh
CR in Code, Doc, or Test?     : code
Inter-dependent CRs           : 
Project Name                  : dce
H/W Ref Platform              : all
S/W Ref Platform              : all
Component Name                : dfs
Subcomponent Name             : lfs
Short Description             : Global directory hashing
Reported Date                 : 4/20/92
Found in Baseline             : 1.0.1
Found Date                    : 4/20/92
Severity                      : E
Priority                      : 2
Status                        : open
Duplicate Of                  : 
Fix By Baseline               : 1.1
Fixed In Baseline             : 
Affected File(s)              : 
Diff supplied by              : 
Diff release                  : 
Sensitivity                   : public
Transarc Deltas               : 
Transarc Herder               : mason@transarc.com
Transarc Status               : open

[4/20/92 public]
"global dir hashing" - (910830)

Bob tracked down a paper from Usenix, Winter 91 called "A New Hashing Package
for UNIX" by Seltzer and Yigit, which give much background on this family of
algorithms. (921218)

For detailed description seen ~/doc/episode/bob-dir-global-hash.tex.
Added field Transarc Deltas with value `' 
Added field Transarc Herder with value `mason@transarc.com' 
Added field Transarc Status with value `open'

[4/20/92 public]

Filled in Interest List CC with `bob@transarc.com'

[7/20/92 public]
Changed "Fix by" to 1.0.2



CR Number                     : 2912
Defect or Enhancement?        : enh
CR in Code, Doc, or Test?     : code
Inter-dependent CRs           : 
Project Name                  : dce
H/W Ref Platform              : all
S/W Ref Platform              : all
Component Name                : dfs
Subcomponent Name             : lfs
Short Description             : Vertically integrate create
Reported Date                 : 4/20/92
Found in Baseline             : 1.0.1
Found Date                    : 4/20/92
Severity                      : E
Priority                      : 2
Status                        : open
Duplicate Of                  : 
Fix By Baseline               : 1.1
Fixed In Baseline             : 
Affected File(s)              : 
Diff supplied by              : 
Diff release                  : 
Sensitivity                   : public
Transarc Deltas               : 
Transarc Herder               : mason@transarc.com
Transarc Status               : open

[4/20/92 public]
"vertically integrate create" - Vertically integrate create code path.
The epiv_CreateAnode, epit_Allocate, and epia_Create are (almost) always
called on a single path that ends up doing a lot of extra work to allow
for use in non-existent general-purpose situations.  In particular, the
initial file status can be passed all the way down and the buffer
containing the anode can be obtained once and used through out.
epit_Allocate doesn't need to set the first word of the anode,
epia_Create will do that. (910821)

 [cost 6 benefit 4] (911211)
Added field Transarc Deltas with value `' 
Added field Transarc Herder with value `mason@transarc.com' 
Added field Transarc Status with value `open'

[7/20/92 public]
Changed "Fix by" to 1.0.2.



CR Number                     : 2911
Defect or Enhancement?        : enh
CR in Code, Doc, or Test?     : code
Inter-dependent CRs           : 
Project Name                  : dce
H/W Ref Platform              : all
S/W Ref Platform              : all
Component Name                : dfs
Subcomponent Name             : lfs
Short Description             : Macro-ize epiv_GetIdent
Reported Date                 : 4/20/92
Found in Baseline             : 1.0.1
Found Date                    : 4/20/92
Severity                      : E
Priority                      : 2
Status                        : open
Duplicate Of                  : 
Fix By Baseline               : 1.1
Fixed In Baseline             : 
Affected File(s)              : 
Diff supplied by              : 
Diff release                  : 
Sensitivity                   : public
Transarc Deltas               : 
Transarc Herder               : mason@transarc.com
Transarc Status               : open

[4/20/92 public]
"macro-ize epiv_GetIdent" - At least, allow getting the volume id only.

 [cost 1 benefit 1] (911211)  
Added field Transarc Deltas with value `' 
Added field Transarc Herder with value `mason@transarc.com' 
Added field Transarc Status with value `open'

[7/20/92 public]
Changed "Fix by" to 1.0.2



CR Number                     : 2910
Defect or Enhancement?        : enh
CR in Code, Doc, or Test?     : code
Inter-dependent CRs           : 
Project Name                  : dce
H/W Ref Platform              : all
S/W Ref Platform              : all
Component Name                : dfs
Subcomponent Name             : lfs
Short Description             : read/modify/release fastpath
Reported Date                 : 4/20/92
Found in Baseline             : 1.0.1
Found Date                    : 4/20/92
Severity                      : E
Priority                      : 2
Status                        : open
Duplicate Of                  : 
Fix By Baseline               : 1.1
Fixed In Baseline             : 
Affected File(s)              : 
Diff supplied by              : 
Diff release                  : 
Sensitivity                   : public
Transarc Deltas               : 
Transarc Herder               : mason@transarc.com
Transarc Status               : open

[4/20/92 public]
"read/modify/release fastpath" - There are many cases where a buffer is
obtained, modified, and released in quick succession.  These may be able
to make use of a special routine all three operations in a single call
(e.g. quota update).  It is likely that there will be significant
economies from this combination. (910822)

Started. (911212)
Added field Transarc Deltas with value `' 
Added field Transarc Herder with value `mason@transarc.com' 
Added field Transarc Status with value `open'

[7/20/92 public]
Changed "Fix by" to 1.0.2



CR Number                     : 2908
Defect or Enhancement?        : enh
CR in Code, Doc, or Test?     : code
Inter-dependent CRs           : 
Project Name                  : dce
H/W Ref Platform              : all
S/W Ref Platform              : all
Component Name                : dfs
Subcomponent Name             : lfs
Short Description             : Shorten common ReadGeneral path
Reported Date                 : 4/20/92
Found in Baseline             : 1.0.1
Found Date                    : 4/20/92
Severity                      : E
Priority                      : 2
Status                        : open
Duplicate Of                  : 
Fix By Baseline               : 1.1
Fixed In Baseline             : 
Affected File(s)              : 
Diff supplied by              : 
Diff release                  : 
Sensitivity                   : public
Transarc Deltas               : 
Transarc Herder               : mason@transarc.com
Transarc Status               : open

[4/20/92 public]
"shorten common ReadGeneral path" - Arrange the code in ReadGeneral so that the
common path of finding a buffer in memory is as fast as possible.
Added field Transarc Deltas with value `' 
Added field Transarc Herder with value `mason@transarc.com' 
Added field Transarc Status with value `open'

[4/20/92 public]

Changed Defect or Enhancement? from `def' to `enh' 
Changed Short Description from `Shorten common readgeneral path' to `Shorten 
 common ReadGeneral path'

[7/20/92 public]
Changed "Fix by" to 1.0.2



CR Number                     : 2902
Defect or Enhancement?        : enh
CR in Code, Doc, or Test?     : doc
Inter-dependent CRs           : 2890
Project Name                  : dce
H/W Ref Platform              : all
S/W Ref Platform              : all
Component Name                : dfs
Subcomponent Name             : admin_gd, dfs_admin_gdref
Short Description             : Update changing of status flag for replicas
Reported Date                 : 4/20/92
Found in Baseline             : 1.0.1
Found Date                    : 4/20/92
Severity                      : D
Priority                      : 3
Status                        : open
Duplicate Of                  : 
Fix By Baseline               : 1.2
Fixed In Baseline             : 
Affected File(s)              : 
Sensitivity                   : public
Transarc Status               : open
Transarc Deltas               : 
Transarc Herder               : mason@transarc.com

[4/20/92 public]
OT defect 2890 describes changing the way the status flag is set for a
read-only fileset.  When the defect is addressed to change the status
flag only when a replica actually exists at a site, not when a replication
site is initially created, the description of the setting of the flag will
need to be modified in the files 6_ftavail_dfs.gpsml and fts_addsite.8dfs.
Added field Transarc Deltas with value `' 
Added field Transarc Herder with value `mason@transarc.com' 
Added field Transarc Status with value `open'

[5/29/92 public]
Defer to 1.0.2. On 5/19/92, Jeff Kaminski stated: 
2902 opened on 4/20/92
   - Cannot be addressed until 1.0.2.  Craig cannot change the code
     until that version; I opened this defect in anticipation of that
     change (opening the defect keeps this change on record).

[10/27/92 public]
Changed Severity from `E' to `D'

[10/27/92 public]
Changed Priority from `4' to `3'

[10/27/92 public]
Changed Defect or Enhancement? from `enh' to `def'

[10/29/92 public]
I changed this from a defect to an enhancement because the related code
defect (2890) is being considered as an enhancement.  Because of the obvious
dependency between this defect and defect 2890, I cannot make this change
until the code is changed.  It would be just great if, when defect 2890 is
fixed, the "fixer" of that defect could change this one from an enhancement
back to a defect....
Changed Defect or Enhancement? from `def' to `enh' 
Filled in Interest List CC with `cfe@transarc.com'

[8/25/94 public ]
Defering again.  The following from Transarc:
   Defer this one to some future date.  It cannot be completed until the
   code is changed, and the code work is not currently scheduled.

[11/8/94 public]
Changed Responsible Engr. from `jeff@transarc.com' to `wfl@transarc.com'

[7/17/95 public]
Reopened for DCE 1.2.



CR Number                     : 2890
Defect or Enhancement?        : enh
CR in Code, Doc, or Test?     : code
Inter-dependent CRs           : 2902, 7735
Project Name                  : dce
H/W Ref Platform              : all
S/W Ref Platform              : all
Component Name                : dfs
Subcomponent Name             : rep
Short Description             : Changing valid/invalid status flag for replicas
Reported Date                 : 4/20/92
Found in Baseline             : 1.0.1
Found Date                    : 4/20/92
Severity                      : E
Priority                      : 4
Status                        : open
Duplicate Of                  : 
Fix By Baseline               : 1.1
Fixed In Baseline             : 
Affected File(s)              : 
Diff supplied by              : 
Diff release                  : 
Sensitivity                   : public
Transarc Status               : open
Transarc Deltas               : 
Transarc Herder               : jaffe@transarc.com

[4/20/92 public]
The entry in the FLDB for a fileset records a status of valid or invalid for
each type of fileset (rw, ro, and bk).  Currently, the status flag for the
read-only version is changed from invalid to valid once a replication site
is defined for the fileset with the fts addsite command.  The status flag
should remain invalid until a replica actually exists at a replication site.
Added field Transarc Deltas with value `' 
Added field Transarc Herder with value `mason@transarc.com' 
Added field Transarc Status with value `open'

[4/20/92 public]
Filled in Inter-dependent CRs with `2902' 
Filled in Interest List CC with `jeff@transarc.com' 
Changed Fix By Baseline from `1.0.1' to `'

[7/15/92 public]
Ah, it's already an enhancement report.

[7/29/93 public]
Just make a note that this OT also covers the following task:
Deleting a RW fileset should NOT delete its read-only replicas. In addition,
also make sure that the corresponding entry in FLDB will refect the fact
that readOnly filesets are still valid. 
Changed Inter-dependent CRs from `2902' to `2902, 7735' 
Filled in Subcomponent Name with `rep' 
Changed Interest List CC from `jeff@transarc.com' to `jeff@transarc.com, 
 cfe@transarc.com' 
Changed Responsible Engr. from `cfe@transarc.com' to `khale@transarc.com' 
Changed Transarc Herder from `mason@transarc.com' to `jaffe@transarc.com'



CR Number                     : 2871
Defect or Enhancement?        : enh
CR in Code, Doc, or Test?     : code
Inter-dependent CRs           : 
Project Name                  : dce
H/W Ref Platform              : pmax
S/W Ref Platform              : osf1
Component Name                : dfs
Subcomponent Name             : 
Short Description             : RIOS directories should be AIX directories
Reported Date                 : 4/18/92
Found in Baseline             : 1.0.1b11
Found Date                    : 4/18/92
Severity                      : D
Priority                      : 4
Status                        : open
Duplicate Of                  : 
Fix By Baseline               : 1.1
Fixed In Baseline             : 
Affected File(s)              : 
Diff supplied by              : 
Diff release                  : 
Sensitivity                   : public
Transarc Deltas               : 
Transarc Herder               : mason@transarc.com
Transarc Status               : open

[4/18/92 public]
to be more consistent with the way that the OSF/1 source/building
environment most of the files which currently live under RIOS directories
should be moved to AIX directories. A clean separation should be made
between which pieces are machine dependent and which pieces are OS dependent.
I suspect that almost all of the current RIOS things are really OS dependent,
with very few hardware dependencies.  In the current OSF/1 setup, the
only machine dependent files are config/PMAX/param.h and PMAX/machdep.mk.
The reason to do this shuffling is to make the source tree more uniform;
now the various subdirectories must descend both to machine dependent and
operating system dependent subdirectories.  This is a step towards making
the OSF/1 and AIX environments more similar.

[4/21/92 public]
This should only be done in the dfs src if it is being done
for all the dce components.  
This should be done consistently for all the DCE src for the
rs/6000 reference platform or not at all. h

It does not seem like a high priority item for DCE 1.0.1.

[5/22/92 public]
add default fields
Added field Transarc Deltas with value `' 
Added field Transarc Herder with value `mason@transarc.com' 
Added field Transarc Status with value `open'

[7/20/92 public]
Changed "Fix by" to 1.0.2

[10/14/92 public]
I do not know how I became the owner of this.  I think OSF
should own it at least for now.  I also agree with Liz's
comment above that this should not be done unless it is
done across all of the DCE components.
Filled in Interest List CC with `demail1!carl' 
Changed Responsible Engr. from `burnett' to `treff' 
Changed Resp. Engr's Company from `ibm' to `osf'

[11/16/92 public]
This defect falls into the older-than-6-months before 1.0.2 ship category.
Can we turn it into a 1.1 task, or maybe just make it an enhancment.  IT 
seems unlikely that we will attack this before the 1.0.2 freeze.
Changed Interest List CC from `demail1!carl' to `demail1!carl, 
 jaffe@transarc.com'

[01/20/93 public]
Updated per OSF DFS bug conclave of 1/19/93.  I almost cancelled
this, but decided that it had enough merit to warrant keeping it.
However, if we accept that this change must be made across all
of DCE, and not just in DFS, then I have to admit I don't see it
happening any time soon, since I've never seen the topic discussed
outside DFS.  Still, if something like Howard Melman's visionary
plan for restructuring the source tree is ever implemented, this
could "easily" enough be tacked on.



CR Number                     : 2369
Defect or Enhancement?        : enh
CR in Code, Doc, or Test?     : code
Inter-dependent CRs           : 
Project Name                  : dce
H/W Ref Platform              : all
S/W Ref Platform              : all
Component Name                : dfs
Subcomponent Name             : lfs
Short Description             : Invalid param checks in fixed_anode.c
Reported Date                 : 3/23/92
Found in Baseline             : 1.0.1
Found Date                    : 3/23/92
Severity                      : D
Priority                      : 4
Status                        : open
Duplicate Of                  : 
Fix By Baseline               : 1.1
Fixed In Baseline             : 
Affected File(s)              : anode/fixed_anode.c
Diff supplied by              : 
Diff release                  : 
Sensitivity                   : public
Transarc Deltas               : 
Transarc Status               : open
Transarc Herder               : jdp@transarc.com

[3/23/92 public]

There are a large number of invalid parameter checks in various functions
in fixed_anode.c which should be assertions; these were found while doing
branch coverage analysis.

[4/6/92 public]
Updated transarc status field.

[4/22/92 public]
Here is the text from the Transarc DB.

Date: Fri, 20 Mar 1992 16:49:02 -0500 (EST)
From: Bruce_Leverett@transarc.com
To: DFS_Bugs_Mailing-List@transarc.com
Subject: new bug

The following invalid parameter checks in functions in episode/fixed_anode.c
should be assertions.  The line numbers refer to version 2.8, so beware.

611    1331   1517   1828   2083   3155   3490   3639
647    1356   1543   1830   2136   3289   3524   3642
652    1357   1556   1832   2380   3291   3525
675    1358   1605   1836   2383   3347   3529
699    1414   1625   1838   2405   3348   3532
1073   1416   1650   1841   3145   3412   3546
1075   1475   1820   1849   3146   3437   3582
1283   1514   1822   1850   3147   3487   3585
1330   1516   1826   1930   3149   3488   3623
Added field Transarc Herder with value `'

[7/9/92 public]
Changed Defect or Enhancement? from `def' to `enh' 
Changed H/W Ref Platform from `pmax' to `all' 
Changed S/W Ref Platform from `osf1' to `all' 
Filled in Affected File with `anode/fixed_anode.c' 
Filled in Reported by Company's Ref. Number with `2635' 
Filled in Transarc Herder with `jdp@transarc.com'

[7/20/92 public]
Changed "Fix by" to 1.0.2



CR Number                     : 1132
Defect or Enhancement?        : enh
CR in Code, Doc, or Test?     : code
Inter-dependent CRs           : 4821
Project Name                  : dce
H/W Ref Platform              : all
S/W Ref Platform              : all
Component Name                : dfs
Subcomponent Name             : repserver
Short Description             : repserver -mainprocs is limited to 1 process
Reported Date                 : 12/19/91
Found in Baseline             : .60d
Found Date                    : 
Severity                      : D
Priority                      : 3
Status                        : open
Duplicate Of                  : 
Fix By Baseline               : 1.1
Fixed In Baseline             : 
Affected File(s)              : 
Diff supplied by              : 
Diff release                  : 
Sensitivity                   : public
Transarc Status               : open
Transarc Deltas               : 
Transarc Herder               : jaffe@transarc.com

[01/29/92 public]

Orbit reference number 4308
reference     
product
phaseFound    development

History:
lastUpdate    91/12/19 13:41:21
endDate                                
assignDate    91/12/19 13:41:21   

    addDate              action          userLogin (userName)
    -------------------- --------------- ----------------------------------
    91/12/19 13:41:22    create          hirsch (Phil Hirsch)

[12/19/91 public]

The repserver currently defaults to 1 -mainprocs process, and cannot be run
with more than 1 such process.

[03/18/92 public]
per agreement, deferred to DCE 1.1.

[8/13/92 public]
Deferring to 1.1 is a little extravagant.  Hope to fix it by 1.0.2.
I had created OT 4821 to describe the same situation, which I've now marked
as a dup of this one.
Filled in Inter-dependent CRs with `4821' 
Changed H/W Ref Platform from `rs6000' to `all' 
Changed S/W Ref Platform from `aix' to `all' 
Filled in Subcomponent Name with `repserver' 
Changed Severity from `C' to `D' 
Changed Priority from `2' to `3' 
Changed Status from `defer' to `open' 
Changed Fix By Baseline from `1.1' to `1.0.2' 
Added field Transarc Deltas with value `' 
Added field Transarc Herder with value `jaffe@transarc.com' 
Added field Transarc Status with value `open'

[10/19/92 public]
Think of this as an enhancement.  Except for performance, repserver
works fine as it is even with this single-thread limitation.
Changed Defect or Enhancement? from `def' to `enh'



CR Number                     : 1115
Defect or Enhancement?        : enh
CR in Code, Doc, or Test?     : code
Inter-dependent CRs           : 
Project Name                  : dce
H/W Ref Platform              : rs6000
S/W Ref Platform              : aix
Component Name                : dfs
Subcomponent Name             : fileset
Short Description             : DFS has its own notion of 'read-only' filesets
Reported Date                 : 12/17/91
Found in Baseline             : .60d
Found Date                    : 
Severity                      : D
Priority                      : 2
Status                        : open
Duplicate Of                  : 
Fix By Baseline               : 1.1
Fixed In Baseline             : 
Affected File(s)              : 
Diff supplied by              : 
Diff release                  : 
Sensitivity                   : public
Transarc Status               : open
Transarc Deltas               : 
Transarc Herder               : jaffe@transarc.com

[01/29/92 public]

Orbit reference number 4237
reference     
product
phaseFound    development

History:
lastUpdate    91/12/17 15:01:54
endDate                                
assignDate    91/12/17 15:01:54   

    addDate              action          userLogin (userName)
    -------------------- --------------- ----------------------------------
    91/12/17 15:01:55    create          hirsch (Phil Hirsch)

[12/17/91 public]

DFS has its own notion of read-only filesets that has not been
integrated with vendors' notions of read-only mount points or read-only
disk devices (aggregates).

[03/19/92 public]
per agreement, there are no plans to fix this in the 1.0.1 timeframe.
Marking deferred.

[9/28/92 public]
Filled out transarc fields.  This sounds as if it is an enhancement.
I've marked it as such.  Craig, can you look at this and decide if it
is real, or if it should be left to the vendor's integration.
Changed Defect or Enhancement? from `def' to `enh' 
Filled in Subcomponent Name with `fileset' 
Added field Transarc Deltas with value `' 
Added field Transarc Herder with value `jaffe@transarc.com' 
Added field Transarc Status with value `open'



CR Number                     : 1009
Defect or Enhancement?        : enh
CR in Code, Doc, or Test?     : code
Inter-dependent CRs           : 
Project Name                  : dce
H/W Ref Platform              : other
S/W Ref Platform              : other
Component Name                : dfs
Subcomponent Name             : EPISODE
Short Description             : LFS allows rmdir in dir with stick bit set and not owner
Reported Date                 : 04/18/91
Found in Baseline             : 1.0
Found Date                    : 
Severity                      : B
Priority                      : 2
Status                        : open
Duplicate Of                  : 
Fix By Baseline               : 1.1
Fixed In Baseline             : 
Affected File(s)              : 
Diff supplied by              : 
Diff release                  : 
Sensitivity                   : public
Transarc Status               : fixed
Transarc Deltas               : bwl-db4990-observe-sticky-bit -r1.2
Transarc Herder               : jdp@transarc.com

[01/29/92 public]
Orbit reference number 1533
reference     
product       dce_osf
phaseFound    development
History:
lastUpdate    91/11/05 16:03:44
endDate                                
assignDate    91/04/18 08:52:18   
    addDate              action          userLogin (userName)
    -------------------- --------------- ----------------------------------
    91/04/18 08:52:19    create          burnett (C. Burnett)
    91/04/18 14:56:04    note            pehkonen (J. Pehkonen)
    91/11/05 16:03:44    modify          drb (Defect Review Board)

[04/18/91 public]
Episode fails the sitb rmdir case which test removing a dir in a dir
with the stick bit set and the parent dir is not owned by the 
removing process.  An EPERM is expected, Episode returns an errno of 0.

[04/18/91 public]
 This problem also occurs when run the test is run against DFS exporting a JFS

[03/19/92 public]
per agreement, assigned to transarc for fix by 1.0.1

[4/9/92 public]
Updated transarc status, resp. engr.

[6/12/92 public]
I tested this today on shared by doing the following:
1) create a directory owned by mason
2) set the 't' bit (as root)
3) create a subdirectory owned by ota
4) remove the directory by bwl
I was careful to make sure the remover did not have root real or
effective uid, so I believe this defect is still present.
Since this was promised for 1.0.1, I've upgraded priority and assigned it
to bwl.
Filled in Subcomponent Name with `lfs' 
Changed Short Description from `EFS allows rmdir in dir with stick bit set and 
 not owner' to `LFS allows rmdir in dir with stick bit set and not owner' 
Filled in Interest List CC with `ota,jdp,mason' 
Changed Severity from `D' to `A' 
Changed Priority from `2' to `1' 
Changed Responsible Engr. from `mason@transarc.com' to `bwl@transarc.com' 
Filled in Transarc Herder with `jdp@transarc.com'

[6/26/92 public]

[7/6/92 public]
Changed Status from `open' to `cancel'

[7/6/92 public]
My comment didn't seem to make it... Per Julie's request in which I'd
been told Bruce concurred, this defect has been cancelled.

[7/6/92 public]

[7/6/92 public]
After speaking with Bruce, it appears that he had not yet decided to
cancel this one.  However, since this is really an enhancement
request, I'm marking it as such, lowering its priority, and letting
Bruce decide what to do with it.  I certainly hope this makes everyone
happy.
Changed Defect or Enhancement? from `def' to `enh' 
Changed Severity from `A' to `B' 
Changed Priority from `1' to `2' 
Changed Status from `cancel' to `open'

[7/20/92 public]
Changed "Fix by" to 1.0.2

[3/30/94 public]
We're looking at this for 1.1

[7/18/94 public]
Changed Subcomponent Name from `lfs' to `EPISODE' 
Changed Transarc Status from `open' to `fixed' 
Filled in Transarc Deltas with `bwl-db4990-observe-sticky-bit -r1.2'



