...\" @OSF_COPYRIGHT@
...\" 
...\" 
...\" HISTORY
...\" $Log: 15_systest2.gpsml,v $
...\" Revision 1.1.2.7  1994/10/30  22:47:30  weir
...\" 	Last updates
...\" 	[1994/10/30  22:46:24  weir]
...\"
...\" Revision 1.1.2.6  1994/10/30  16:25:31  weir
...\" 	Updates
...\" 	[1994/10/30  16:24:09  weir]
...\" 
...\" Revision 1.1.2.5  1994/10/29  23:25:52  weir
...\" 	More Updates
...\" 	[1994/10/29  23:24:34  weir]
...\" 
...\" Revision 1.1.2.4  1994/10/28  20:50:08  weir
...\" 	DCE 1.1 updates
...\" 	[1994/10/28  20:48:46  weir]
...\" 
...\" Revision 1.1.2.3  1994/10/26  20:40:44  weir
...\" 	DCE 1.1 Updates
...\" 	[1994/10/26  20:39:19  weir]
...\" 
...\" Revision 1.1.2.2  1994/10/14  18:38:49  weir
...\" 	Minor edit changes
...\" 	[1994/10/14  18:37:42  weir]
...\" 
...\" Revision 1.1.2.1  1994/10/12  20:31:34  weir
...\" 	Reorganized system test material
...\" 	[1994/10/12  20:30:44  weir]
...\" 
...\" $EndLog$
...\" 
...\" 
...\" 
...\" 
...\" 
...\" 
...\" 
...\" 
...\" ----------------------------------------------------------------------
.H 1 "DCE System Tests not under TET"
...\" ----------------------------------------------------------------------
...\" 
.P
The following sections describe the set of DCE system tests
that are not run under TET.
...\" 
...\" 
...\" ----------------------------------------------------------------------
.H 2 "Security Administrative Tests"
...\" ----------------------------------------------------------------------
...\" 
.P
The following sections describe checklists for system testing DCE Security
Service administrative functions.
.P
A checklist is a series of instructions and manually-entered commands, together
with a description of the expected results of executing the commands. Checklists
are used to document test functions for which no automated test exists.
.P
The DCE Administration tests are installed with \*Ldcetest_config\*O. See
``Installing the DCE System Tests'', in Chapter 13, for instructions
on running \*Ldcetest_config\*O.
...\" 
...\" 
...\" 
...\" ----------------------------------------------------------------------
.H 3 "Backup and Restore Registry Checklist"
...\" ----------------------------------------------------------------------
...\" 
.P
The purpose of \*Lbackup_restore_rgy_checklist\*O is to verify that the backup
and restore of the master registry function properly.
...\" 
...\" 
...\" ----------------------------------------------------------------------
.H 4 "Prerequisites for Performing ``backup_restore_rgy_checklist''"
...\" ----------------------------------------------------------------------
...\" 
.P
The checklist must be performed as root, and the machine the checklist is
being executed on must have root access via \*L.rhosts\*O to all machines
in the cell.
...\" 
...\" 
...\" 
.nS "Note"
You should not execute this checklist in any DCE cell which you cannot
afford to corrupt as a result of performing the steps.
.nE
...\" 
...\" 
...\" 
...\" ----------------------------------------------------------------------
.H 4 "``backup_restore_rgy_checklist'' Logic Flow"
...\" ----------------------------------------------------------------------
...\" 
.P
When performed, the steps in \*Lbackup_restore_rgy_checklist\*O accomplish
the following series of operations:
...\" 
...\" 
.AL
.LI
Logins are attempted.
.LI
Registry is set to maintenance mode.
.LI
Master registry is backed up locally.
...\" 
.LI
A test entry is attempted in the registry, which should fail.
...\" 
.LI
Registry is set to service mode.
.LI
Logins are attempted.
.LI
Test entries are made to the registry.
.LI
Logins of test entries are attempted.
.LI
Registry is set to maintenance mode.
.LI
Test master registry is backed up locally.
.LI
Master registry is restored from local backup.
.LI
Registry is set to service mode.
.LI
Logins of test entries are attempted; these should fail.
.LE
...\" 
...\" 
...\" 
...\" ----------------------------------------------------------------------
.H 4 "``backup_restore_rgy_checklist'' Default Values"
...\" ----------------------------------------------------------------------
...\" 
.P
All values are supplied by the test user, based on his or her DCE configuration.
...\" 
...\" 
...\" 
...\" 
...\" ----------------------------------------------------------------------
.H 4 "Performing ``backup_restore_rgy_checklist''"
...\" ----------------------------------------------------------------------
...\" 
.P
Perform the \*Lbackup_restore_rgy_checklist\*O steps as follows:
...\" 
.DS
    \*Lcd \*Vsystest-root\*L/admin/sec/tests\*O
.DE
...\" 
.P
Execute the steps in
.DS
    \*Lbackup_restore_rgy_checklist\*O
.DE
...\" 
.P
as specified.
...\" 
...\" 
...\" ----------------------------------------------------------------------
.H 3 "Registry Replica Checklist"
...\" ----------------------------------------------------------------------
...\" 
.P
The purpose of \*Lreplica_checklist\*O is to verify that the replication of
a registry functions properly.
...\" 
...\" 
...\" ----------------------------------------------------------------------
.H 4 "Prerequisites for Performing ``replica_checklist''"
...\" ----------------------------------------------------------------------
...\" 
.P
The checklist must be performed as root, and the machine the checklist is
being executed on must have root access via \*L.rhosts\*O to all machines
in the cell.
...\" 
...\" 
...\" 
.nS "Note"
You should not execute this checklist in any DCE cell which you cannot
afford to corrupt as a result of performing the test steps.
.nE
...\" 
...\" 
...\" 
...\" ----------------------------------------------------------------------
.H 4 "``replica_checklist'' Logic Flow"
...\" ----------------------------------------------------------------------
...\" 
.P
When performed, the steps in \*Lreplica_checklist\*O accomplish the following
series of operations:
...\" 
...\" 
.AL
...\" 
.LI
The initial security and CDS servers and at least two DCE clients are installed
and configured.
...\" 
.LI
The state of the master registry is changed to maintenance mode, and the master
registry is backed up.
...\" 
.LI
Disabling of write access to the master registry is verified.
...\" 
.LI
The state of the master registry is changed to service mode.
...\" 
.LI
Enabling of read access to the master registry is verified.
...\" 
.LI
A slave registry is configured.
...\" 
.LI
Listings of master and slave registries are obtained and compared to verify that
propagation occurred.
...\" 
.LI
Read access to the registry from a non-registry machine is verified.
...\" 
.LI
Five users are added, and their presence in the slave registry is verified.
...\" 
.LI
The master registry is disabled using the \*Lsec_admin stop\*O command.
...\" 
.LI
Login is attempted from a non-registry machine.
...\" 
.LI
An attempt is made to add a principal on a non-registry machine.
...\" 
.LI
The master registry is enabled by starting \*Lsecd\*O.
...\" 
.LI
Two accounts are deleted.
...\" 
.LI
The two deleted accounts are verified to no longer be present in the slave
registry.
...\" 
.LI
The master registry is disabled using the \*Lsec_admin stop\*O command.
...\" 
.LI
Read access to the registry from a non-registry machine is verified.
...\" 
.LI
The original master registry which was backed up before beginning the test
is restored.
...\" 
.LI
The master registry is enabled by starting \*Lsecd\*O with the \*L-restore_master\*O
option.
...\" 
.LE
...\" 
...\" 
...\" ----------------------------------------------------------------------
.H 4 "Default Values for ``replica_checklist''"
...\" ----------------------------------------------------------------------
...\" 
.P
All values are supplied by the test user, based on his or her DCE configuration.
...\" 
...\" 
...\" 
...\" 
...\" ----------------------------------------------------------------------
.H 4 "Performing ``replica_checklist''"
...\" ----------------------------------------------------------------------
...\" 
.P
Perform the \*Lreplica_checklist\*O steps as follows:
...\" 
.DS
    \*Lcd \*Vsystest-root\*L/admin/sec/tests\*O
.DE
...\" 
.P
Execute the steps in
.DS
    \*Lreplica_checklist\*O
.DE
...\" 
.P
as specified.
...\" 
...\" ----------------------------------------------------------------------
.H 2 "CDS Administrative Tests and Checklists"
...\" ----------------------------------------------------------------------
...\"
.P
The following sections describe automated tests and checklists for system
testing DCE CDS administrative functions.
.P
A checklist is a series of instructions and manually-entered commands, together
with a description of the expected results of executing the commands. Checklists
are used to document test functions for which no automated test exists.
.P
The DCE Administration tests are installed with \*Ldcetest_config\*O. See
``Installing the DCE System Tests'', in Chapter 13, for instructions
on running \*Ldcetest_config\*O.
...\" 
...\" 
...\" 
...\" ----------------------------------------------------------------------
.H 3 "Backup and Restore Clearinghouse Automated Test"
...\" ----------------------------------------------------------------------
...\" 
.P
The purpose of the \*Lbackup_restore_ch.ksh\*O test is to show that
clearinghouses can be backed up and restored locally, i.e. that a clearinghouse
can be successfully replaced with a backup version of the clearinghouse.
...\" 
...\" 
...\" ----------------------------------------------------------------------
.H 4 "Prerequisites for Running ``backup_restore_ch.ksh''"
...\" ----------------------------------------------------------------------
...\" 
.P
The following things must be true in order to successfully run the
\*Lbackup_restore_ch.ksh\*O system test:
...\" 
...\" 
.BL
.LI
The test must be run as root, and the machine the test is being executed
on must have root access via \*L.rhosts\*O to all machines in the DCE cell.
.LI
The test must be executed on a CDS server machine.
.LI
There can be no CDS clients running DCE during the test
except for a Security server in a split server configuration.
.LE
...\" 
...\" 
.nS "Note"
You should not execute this test on any CDS server which you cannot afford
to corrupt as a result of running the test. In some instances the CDS
clearinghouse can be corrupted if the test fails.
.nE
...\" 
...\" 
...\" 
...\" 
...\" ----------------------------------------------------------------------
.H 4 "``backup_restore_ch.ksh'' Logic Flow"
...\" ----------------------------------------------------------------------
...\" 
.P
When invoked, \*Lbackup_restore_ch.ksh\*O performs the following series of
operations:
...\" 
...\" 
.AL
.LI
The master clearinghouse is backed up locally.
.LI
The master clearinghouse is checked to make sure the test directory and
object entries do not already exist.
.LI
A test directory and object are created in the master clearinghouse; the
master clearinghouse has now become a test clearinghouse.
.LI
The test clearinghouse is checked to make sure the test directory and object
entries exist.
.LI
The test clearinghouse is backed up locally.
.LI
The master clearinghouse is restored.
.LI
The master clearinghouse is checked to make sure the test directory and
object entries do not exist.
.LI
The test clearinghouse is restored.
.LI
The test clearinghouse is checked to make sure the test directory and object
entries do exist.
.LI
The master clearinghouse is restored.
.LE
...\" 
...\" 
...\" ----------------------------------------------------------------------
.H 4 "Default Values for ``backup_restore_ch.ksh''"
...\" ----------------------------------------------------------------------
...\" 
.P
\*Lbackup_restore_ch.ksh\*O runs with the following default values:
...\" 
...\" 
.BL
.LI
DCE Administration login
.P
\*Lcell_admin\*O
.LI
DCE Administration password
.P
\*L-dce-\*O
.LI
Test Name
.P
\*Lbkrsch\*O
.LI
CDS Test Directory
.P
\*Lbkrsch_\*Vhostname\*O
.LI
Clearinghouse Name
.P
\*Vcellname\*L#\*Vhostname\*O
.LE
...\" 
.P
Note that all the defaults can be changed by editing the test scripts and
changing the variable values.
...\" 
...\" 
...\" 
...\" 
...\" ----------------------------------------------------------------------
.H 4 "Objects Created by ``backup_restore_ch.ksh''"
...\" ----------------------------------------------------------------------
...\" 
.P
Directories Created (in the current directory):
...\" 
.BL
.LI
\*L./tmp\*O
.LI
\*L./backup\*O
.LI
\*L./log\*O
.LE
...\" 
.P
Temporary Files Created (in the current directory):
...\" 
.BL
.LI
\*L./tmp/bkrsch_\*Vhostname\*L_\*Vpid\*L_STDOUT\*O
.LI
\*L./tmp/bkrsch_\*Vhostname\*L_\*Vpid\*L_STDERR\*O
.LE
...\" 
.P
Log Files Created (in the current directory):
...\" 
.BL
.LI
\*L./log/bkrsch_\*Vhostname\*L_\*Vpid\*L_ERRORS\*O
.LI
\*L./log/bkrsch_\*Vhostname\*L_\*Vpid\*L_SHORT\*O
.LI
\*L./log/bkrsch_\*Vhostname\*L_\*Vpid\*L_FULL\*O
.LE
...\" 
...\" 
...\" 
...\" ----------------------------------------------------------------------
.H 4 "Running ``backup_restore_ch.ksh''"
...\" ----------------------------------------------------------------------
...\" 
.P
\*Lbackup_restore_ch.ksh\*O is invoked as follows:
...\" 
.iS
    cd /dcetest/dcelocal/test/systest/admin/cds

    tests/backup_restore_ch.ksh
.iE
...\" 
...\" 
...\" ----------------------------------------------------------------------
.H 3 "Backup Clearinghouse Automated Test"
...\" ----------------------------------------------------------------------
...\" 
.P
The purpose of the \*Lbackup_ch.ksh\*O test is to show that clearinghouses
can be backed up locally.
...\" 
...\" 
...\" 
...\" ----------------------------------------------------------------------
.H 4 "Prerequisites for Running ``backup_ch.ksh''"
...\" ----------------------------------------------------------------------
...\" 
.P
The following things must be true in order to successfully run the
\*Lbackup_ch.ksh\*O system test:
...\" 
...\" 
.BL
.LI
The test must be run as root, and the machine the test is being executed
on must have root access via \*L.rhosts\*O to all machines in the DCE cell.
.LI
The test must be executed on a CDS server machine.
.LI
There can be no CDS clients running DCE during the test
except for a Security server in a split server configuration.
.LI
You must source the system test profile file:
.DS
    \*L/dcetest/dcelocal/test/systest/profile.dcest\*O
.DE
...\" 
.LE
...\" 
...\" 
.nS "Note"
You should not execute this test on any CDS server which you cannot afford
to corrupt as a result of running the test. In some instances the CDS
clearinghouse can be corrupted if the test fails.
.nE
...\" 
...\" 
...\" ----------------------------------------------------------------------
.H 4 "``backup_ch.ksh'' Logic Flow"
...\" ----------------------------------------------------------------------
...\" 
.P
When invoked, \*Lbackup_ch.ksh\*O performs the following series of operations:
...\" 
...\" 
.AL
.LI
DCE is stopped.
.LI
The master clearinghouse is backed up locally.
.LI
DCE is restarted.
.LE
...\" 
...\" 
...\" ----------------------------------------------------------------------
.H 4 "Default Values for ``backup_ch.ksh''"
...\" ----------------------------------------------------------------------
...\" 
.P
\*Lbackup_ch.ksh\*O runs with the following default values:
...\" 
...\" 
.BL
.LI
DCE Administration login
.P
\*Lcell_admin\*O
...\" 
.LI
DCE Administration password
.P
\*L-dce-\*O
...\" 
.LI
Test Name
.P
\*Lbkch\*O
...\" 
.LI
Clearinghouse Name
.P
\*Vcellname\*L#\*Lhostname\*O
.LE
...\" 
...\" 
.P
Note that all the defaults can be changed by editing the test scripts and
changing the variable values.
...\" 
...\" 
...\" 
...\" ----------------------------------------------------------------------
.H 4 "Objects Created by ``backup_ch.ksh''"
...\" ----------------------------------------------------------------------
...\" 
.P
Directories Created (in the current directory):
...\" 
.BL
.LI
\*L./tmp\*O
.LI
\*L./backup\*O
.LI
\*L./log\*O
.LE
...\" 
...\" 
.P
Temporary Files Created (in the current directory):
...\" 
.BL
.LI
\*L./tmp/bkch_\*Vhostname\*L_\*Vpid\*L_STDOUT\*O
.LI
\*L./tmp/bkch_\*Vhostname\*L_\*Vpid\*L_STDERR\*O
.LE
...\" 
...\" 
.P
Log Files Created (in the current directory):
...\" 
.BL
.LI
\*L./log/bkch_\*Vhostname\*L_\*Vpid\*L_ERRORS\*O
.LI
\*L./log/bkch_\*Vhostname\*L_\*Vpid\*L_SHORT\*O
.LI
\*L./log/bkch_\*Vhostname\*L_\*Vpid\*L_FULL\*O
.LE
...\" 
...\" 
...\" 
...\" ----------------------------------------------------------------------
.H 4 "Running ``backup_ch.ksh''"
...\" ----------------------------------------------------------------------
...\" 
.P
\*Lbackup__ch.ksh\*O is invoked as follows:
...\" 
.iS
    cd /dcetest/dcelocal/test/systest/admin/cds

    tests/backup_ch.ksh
.iE
...\" 
.P
or:
...\" 
.iS
    tests/backup_ch.ksh \*Vdirectory_to_save_CDS_clearinghouse_in\*O
.iE
...\" 
...\" 
...\" ----------------------------------------------------------------------
.H 3 "Restore Clearinghouse Automated Test"
...\" ----------------------------------------------------------------------
...\" 
.P
The purpose of the \*Lrestore_ch.ksh\*O test is to show that clearinghouses
can be restored from a local backup.
...\" 
...\" 
...\" ----------------------------------------------------------------------
.H 4 "Prerequisites for Running ``restore_ch.ksh''"
...\" ----------------------------------------------------------------------
...\" 
.P
The following things must be true in order to successfully run the
\*Lrestore_ch.ksh\*O system test:
...\" 
...\" 
.BL
.LI
The test must be run as root, and the machine the test is being executed
on must have root access via \*L.rhosts\*O to all machines in the DCE cell.
.LI
The test must be executed on a CDS server machine.
.LI
There can be no CDS clients running DCE during the test
except for a Security server in a split server configuration.
.LE
...\" 
...\" 
.nS "Note"
You should not execute this test on any CDS server which you cannot afford
to corrupt as a result of running the test. In some instances the CDS
clearinghouse can be corrupted if the test fails.
.nE
...\" 
...\" 
...\" ----------------------------------------------------------------------
.H 4 "``restore_ch.ksh'' Logic Flow"
...\" ----------------------------------------------------------------------
...\" 
.P
When invoked, \*Lrestore_ch.ksh\*O performs the following series of operations:
...\" 
...\" 
.AL
.LI
DCE is stopped.
.LI
The master clearinghouse is backed up locally.
.LI
The backed up clearinghouse is restored.
.LI
DCE is started.
.LE
...\" 
...\" 
...\" ----------------------------------------------------------------------
.H 4 "Default Values for ``restore_ch.ksh''"
...\" ----------------------------------------------------------------------
...\" 
.P
\*Lrestore_ch.ksh\*O runs with the following default values:
...\" 
...\" 
.BL
.LI
DCE Administration login
.P
\*Lcell_admin\*O
...\" 
.LI
DCE Administration password
.P
\*L-dce-\*O
...\" 
.LI
Test Name
.P
\*Lrsch\*O
...\" 
.LI
Clearinghouse Name
.P
\*Vcellname\*L#\*Vhostname\*O
.LE
...\" 
...\" 
.P
Note that all the defaults can be changed by editing the test scripts and
changing the variable values.
...\" 
...\" 
...\" 
...\" ----------------------------------------------------------------------
.H 4 "Objects Created by ``restore_ch.ksh''"
...\" ----------------------------------------------------------------------
...\" 
.P
Directories Created (in the current directory):
...\" 
.BL
.LI
\*L./tmp\*O
.LI
\*L./backup\*O
.LI
\*L./log\*O
.LE
...\" 
...\" 
.P
Temporary Files Created (in the current directory):
...\" 
.BL
.LI
\*L./tmp/rsch_\*Vhostname\*L_\*Vpid\*L_STDOUT\*O
.LI
\*L./tmp/rsch_\*Vhostname\*L_\*Vpid\*L_STDERR\*O
.LE
...\" 
...\" 
.P
Log Files Created (in the current directory):
...\" 
.BL
.LI
\*L./log/rsch_\*Vhostname\*L_\*Vpid\*L_ERRORS\*O
.LI
\*L./log/rsch_\*Vhostname\*L_\*Vpid\*L_SHORT\*O
.LI
\*L./log/rsch_\*Vhostname\*L_\*Vpid\*L_FULL\*O
.LE
...\" 
...\" 
...\" 
...\" ----------------------------------------------------------------------
.H 4 "Running ``restore_ch.ksh''"
...\" ----------------------------------------------------------------------
...\" 
.P
\*Lrestore_ch.ksh\*O is invoked as follows:
...\" 
.iS
    cd /dcetest/dcelocal/test/systest/admin/cds

    tests/restore_ch.ksh \*Vdirectory_to_restore_CDS_clearinghouse_from\*O
.iE
...\" 
.nS "note"
The \*Vdirectory_to_restore_CDS_clearinghouse_from\*O should contain the
files of a previously successfully backed up clearinghouse.
.nE
...\" 
.P
This script does not verify the presence of the files it is to restore, and
it does not recover the file to its original clearinghouse if there is a
failure during the test.
...\" 
...\" 
...\" 
...\" 
...\" ----------------------------------------------------------------------
.H 3 "Clearinghouse and Replica Checklist 1"
...\" ----------------------------------------------------------------------
...\" 
.P
The purpose of the \*Lrep_ch_1_checklist\*O test is to do manipulations of CDS
replicas and clearinghouses.
...\" 
...\" 
...\" 
...\" ----------------------------------------------------------------------
.H 4 "Prerequisites for Performing ``rep_ch_1_checklist''"
...\" ----------------------------------------------------------------------
...\" 
.P
The following things must be true in order to successfully perform the
\*Lrep_ch_1_checklist\*O system test checklist steps:
...\" 
...\" 
.BL
.LI
The checklist must be performed as root, and the machine the checklist is being executed
on must have root access via \*L.rhosts\*O to all machines in the DCE cell.
.LI
The checklist must be executed on the initial CDS server machine.
.LI
An additional CDS server is required on which to perform the checklist steps.
There can be no CDS clients running DCE while the steps are being performed,
except for a Security server in a split server configuration.
.LI
The test must have access to the \*Lexpect\*O command.
.LE
...\" 
...\" 
.nS "Note"
You should not execute this checklist on any CDS server which you cannot afford
to corrupt as a result of running the test steps. In some instances the CDS
clearinghouse can be corrupted if the test fails.
.nE
...\" 
...\" 
...\" ----------------------------------------------------------------------
.H 4 "``rep_ch_1_checklist'' Logic Flow"
...\" ----------------------------------------------------------------------
...\" 
.P
When performed, the steps in \*Lrep_ch_1_checklist\*O result in the following
series of operations:
...\" 
...\" 
.AL
.LI
The master clearinghouse is verified
.LI
DCE is stopped on the remote and master machines
.LI
Clearinghouses on the remote and master machines are backed up
.LI
DCE is started on the master and remote machines
.LI
A test directory is created in the master clearinghouse
.LI
The test directory is validated
.LI
A test clearinghouse is created on the remote machine
.LI
A replica of the test directory is created and verified in the
test clearinghouse
.LI
The test clearinghouse is verified on the remote machine
.LI
The test clearinghouse is verified on the master machine
.LI
The master clearinghouse is disabled, and the switch to the
test clearinghouse is verified on the master machine
.LI
The master clearinghouse is restarted and verified
.LI
The test clearinghouse is disabled on the remote machine
.LI
An attempt to skulk the test clearinghouse is made on the
master machine
.LI
The switch from the test to the master clearinghouse is verified
on the remote machine
.LI
The test clearinghouse is restarted and verified on the remote
machine
.LI
A new directory and object are added and verified on the master
machine
.LI
The new directory and object are verified on the remote machine
.LI
Convergence is tested on the master and remote machines
.LI
The master replica is changed to the one located on the remote
machine
.LI
The test directory replica is deleted on the local machine
.LI
DCE is stopped on the remote and master machines
.LI
The test clearinghouses are deleted
.LI
DCE is restarted on the master and remote machines
.LE
...\" 
...\" 
...\" 
...\" 
...\" 
...\" ----------------------------------------------------------------------
.H 4 "Default Values for ``rep_ch_1_checklist''"
...\" ----------------------------------------------------------------------
...\" 
.P
\*Lrep_ch_1_checklist\*O runs with the following default values:
...\" 
...\" 
.BL
.LI
DCE Administration login
.P
\*Lcell_admin\*O
...\" 
.LI
DCE Administration password
.P
\*L-dce-\*O
...\" 
.LI
Root (superuser) password on additional server
.P
\*Lsystest1\*O
...\" 
.LI
Test Name
.P
\*Lreps\*O
...\" 
.LI
Clearinghouse Name
.P
\*Vcellname\*L#\*Vhostname\*O
.LE
...\" 
...\" 
...\" 
...\" ----------------------------------------------------------------------
.H 4 "Objects Created by ``rep_ch_1_checklist''"
...\" ----------------------------------------------------------------------
...\" 
.P
Directories Created (in the current directory):
...\" 
.BL
.LI
\*L./tmp\*O
.LI
\*L./backup\*O
.LI
\*L./log\*O
.LE
...\" 
...\" 
.P
Temporary Files Created (in the current directory):
...\" 
.BL
.LI
\*L./tmp/reps_\*Vhostname\*L_\*Vpid\*L_STDOUT\*O
.LI
\*L./tmp/reps_\*Vhostname\*L_\*Vpid\*L_STDERR\*O
.LE
...\" 
...\" 
.P
Log Files Created (in the current directory):
...\" 
.BL
.LI
\*L./log/reps_\*Vhostname\*L_\*Vpid\*L_ERRORS\*O
.LI
\*L./log/reps_\*Vhostname\*L_\*Vpid\*L_SHORT\*O
.LI
\*L./log/reps_\*Vhostname\*L_\*Vpid\*L_FULL\*O
.LE
...\" 
...\" 
...\" 
...\" 
...\" ----------------------------------------------------------------------
.H 4 "Performing ``rep_ch_1_checklist''"
...\" ----------------------------------------------------------------------
...\" 
.P
Perform the \*Lrep_ch_1_checklist\*O steps as follows:
...\" 
.DS
    \*Lcd \*Vsystest-root\*L/admin/cds/tests\*O
.DE
...\" 
.P
Execute the steps in
.DS
    \*Lrep_ch_1_checklist\*O
.DE
...\" 
.P
as specified.
...\" 
...\" 
...\" ----------------------------------------------------------------------
.H 3 "Clearinghouse and Replica Checklist 2"
...\" ----------------------------------------------------------------------
...\" 
.P
The purpose of the \*Lrep_ch_2_checklist\*O is to perform manipulations of
CDS replicas and clearinghouses.
...\" 
...\" 
...\" ----------------------------------------------------------------------
.H 4 "Prerequisites for Performing ``rep_ch_2_checklist''"
...\" ----------------------------------------------------------------------
...\" 
.P
The following things must be true in order to successfully perform the
\*Lrep_ch_2_checklist\*O system test checklist steps:
...\" 
...\" 
.BL
.LI
The checklist must be performed as root, and the machine the checklist is
being executed on must have root access via \*L.rhosts\*O to all machines
in the DCE cell.
.LI
The checklist must be executed on the initial CDS server machine.
.LI
An additional CDS server is required on which to perform the checklist steps.
There can be no CDS clients running DCE while the steps are being performed,
except for a Security server in a split server configuration.
.LE
...\" 
...\" 
...\" 
.nS "Note"
You should not execute this checklist on any CDS server which you cannot afford
to corrupt as a result of performing the test steps. In some instances the CDS
clearinghouse can be corrupted if the test fails.
.nE
...\" 
...\" 
...\" 
...\" ----------------------------------------------------------------------
.H 4 "``rep_ch_2_checklist'' Logic Flow"
...\" ----------------------------------------------------------------------
...\" 
.P
When performed, the steps in \*Lrep_ch_2_checklist\*O result in the following
series of operations:
...\" 
...\" 
.AL
.LI
A test directory and object are created and verified in the master
clearinghouse
.LI
A readonly replica of the test directory is created in a clearinghouse
located on a second machine
.LI
The test directory is excluded from the master clearinghouse
.LI
The test directory is verified as accessible in the clearinghouse
on the second machine
.LI
The test directory on the master machine is made readonly
.LI
The clearinghouse on the second machine is disabled
.LI
The clearinghouse on the second machine is relocated to a third
machine, enabled, and verified
.LE
...\" 
...\" 
...\" 
...\" 
...\" 
...\" 
...\" ----------------------------------------------------------------------
.H 4 "Performing ``rep_ch_2_checklist''"
...\" ----------------------------------------------------------------------
...\" 
.P
Perform the \*Lrep_ch_2_checklist\*O steps as follows:
...\" 
.DS
    \*Lcd \*Vsystest-root\*L/admin/cds/tests\*O
.DE
...\" 
.P
Execute the steps in
.DS
    \*Lrep_ch_2_checklist\*O
.DE
...\" 
.P
as specified.
...\" 
...\" 
...\" ----------------------------------------------------------------------
.H 3 "Intercell GDA Checklist"
...\" ----------------------------------------------------------------------
...\" 
.P
The purpose of the \*Lintercell_gda_checklist\*O is to validate the response
of servers and clients when the GDA exits unexpectedly.
...\" 
...\" 
...\" ----------------------------------------------------------------------
.H 4 "Prerequisites for Performing ``intercell_gda_checklist''"
...\" ----------------------------------------------------------------------
...\" 
.P
The following things must be true in order to successfully perform the
\*Lintercell_gda_checklist\*O system test checklist steps:
...\" 
...\" 
.BL
.LI
The checklist steps must be performed as root, and the machine the checklist is
being executed on must have root access via \*L.rhosts\*O to all machines in the
DCE cell.
.LI
The checklist must be executed on the initial CDS server machine.
.LI
The \*Lgdad\*O must be configured in both cells.
.LI
The names given to the cells during configuration should be expressed in their
full DNS form (e.g., \*Lmycell.osf.org\*O, not \*Lmycell\*O).
.LI
An additional CDS server is required on which to perform the checklist steps.
There can be no CDS clients running DCE while the steps are being performed,
except for a Security server in a split server configuration.
.LE
...\" 
...\" 
.nS "Note"
You should not execute this checklist on any CDS server which you cannot afford
to corrupt as a result of performing the test steps. In some instances the CDS
clearinghouse can be corrupted if the test fails.
.nE
...\" 
...\" 
...\" 
...\" ----------------------------------------------------------------------
.H 4 "``intercell_gda_checklist'' Logic Flow"
...\" ----------------------------------------------------------------------
...\" 
.P
When performed, the steps in \*Lintercell_gda_checklist\*O result in the
following series of operations:
...\" 
...\" 	
.AL
.LI
Information to enable configuration for intercell testing is generated
.LI
The DNS database is updated with intercell information
.LI
The intercell configuration is setup and verified using \*Lrgy_edit\*O
.LI
CDS intercell access is performed
.LI
The Global Directory Agent (GDA) (\*Lgdad\*O) is stopped
.LI
CDS intercell access is again performed
.LI
The Global Directory Agent (GDA) (\*Lgdad\*O) is restarted
.LI
CDS intercell access is performed once again
.LE
...\" 
...\" 
...\" 
...\" 
...\" 
...\" ----------------------------------------------------------------------
.H 4 "Performing ``intercell_gda_checklist''"
...\" ----------------------------------------------------------------------
...\" 
.P
Perform the \*Lintercell_gda_checklist\*O steps as follows:
...\" 
.DS
    \*Lcd \*Vsystest-root\*L/admin/cds/tests\*O
.DE
...\" 
.P
Execute the steps in
.DS
    \*Lintercell_gda_checklist\*O
.DE
...\" 
.P
as specified.
...\" 
...\" 
.zA "def,10739,1.1beta,new info"
...\" 
...\" 
...\" ----------------------------------------------------------------------
.H 3 "dcecp System Tests"
...\" ----------------------------------------------------------------------
...\" 
.P
The \*Ldcecp\*O system tests are implemented as a set of four \*Ldcecp\*O scripts:
...\" 
...\" 
.VL 1i
.LI "\*LDCPSAN001\*O"
Implements the procedure to backup and restore the CDS namespace, using a local
directory.
...\" 		   
.LI "\*LDCPSAN002\*O"
Implements the procedure to backup the CDS name space to a local directory.
...\" 
.LI "\*LDCPSAN003\*O"
Implements the procedure to restore the CDS files that were backed up by
\*LDCPSAN002\*O. It expects to find all the namespace files that were backed
up by \*LDCPSAN002\*O.
...\" 
.LI "\*LDCPSAN004\*O"
Implements the procedure to unconfigure a DCE client.
...\" 
.LE
...\" 
.P
The first three scripts are installed at:
...\" 
.DS
    \*Vdce-root-dir\*L/install/\*Vplatform\*L/dcetest/dce1.1/test/systest/admin/cds/tests\*O
.DE
...\" 
...\" 
.P
For information on how to run these tests, see the
...\" 
.DS
    \*Vdce-root-dir\*L/install/\*Vplatform\*L/dcetest/dce1.1/test/systest/admin/cds/tests/README\*O
.DE
...\" 
.P
file.
.P
The fourth script, \*LDCPSAN004\*O, is installed in:
...\" 
.DS
    \*Vdce-root-dir\*L/install/\*Vplatform\*L/dcetest/dce1.1/test/systest/admin/config\*O
.DE
...\" 
.P
For information on how to run this test, see the
...\" 
.DS
    \*Vdce-root-dir\*L/install/\*Vplatform\*L/dcetest/dce1.1/test/systest/admin/config/README\*O
.DE
...\" 
.P
file.
...\" 
.zZ "def,10739,1.1beta,new info"
...\" 
...\" 
...\" ----------------------------------------------------------------------
.H 3 "DFS Administrative Checklist"
...\" ----------------------------------------------------------------------
...\" 
.P
The purpose of the \*Ladmin_checklist\*O is to exercise many of the
administrative functions associated with DFS. Note that this checklist does
\*Vnot\*O include testing of the backup system.
...\" 
...\" 
...\" ----------------------------------------------------------------------
.H 4 "Prerequisites for Performing ``admin_checklist''"
...\" ----------------------------------------------------------------------
...\" 
.P
In order to successfully perform the \*Ladmin_checklist\*O system test checklist
steps, you must have a multi-\*Lflserver\*O DFS cell configured with both native
and LFS aggregates ready for configuring.
...\" 
...\" 
...\" 
...\" ----------------------------------------------------------------------
.H 4 "``admin_checklist'' Logic Flow"
...\" ----------------------------------------------------------------------
...\" 
.P
When performed, the steps in \*Ladmin_checklist\*O result in the following
series of operations:
...\" 
...\" 	
.AL
.LI
Configure native filesystem into DFS
.LI
Create LFS aggregates/filesets
.LI
Create ACLs
.LI
Disable/Enable:
...\" 
.BL
.LI
aggregates
.LI
filesets
.LI
servers
.LI
\*Lsetuid\*O capability
.LE
...\" 
.LI
Update/Modify:
...\" 
.BL
.LI
aggregates
.LI
filesets
.LI
server keys
.LI
cache
.LI
ACLs
.LE
...\" 
.LI
Start/Stop servers
.LI
Cleanup cache
.LI
Monitoring
.LI
Dump/Restore
.LE
...\" 
...\" 
...\" 
...\" 
...\" 
...\" ----------------------------------------------------------------------
.H 4 "Performing ``admin_checklist''"
...\" ----------------------------------------------------------------------
...\" 
.P
Perform the \*Ladmin_checklist\*O steps as follows:
...\" 
...\" 
.DS
    \*Lcd \*Vsystest-root\*L/admin/file/tests\*O
.DE
...\" 
.P
Execute the steps in
.DS
    \*Ladmin_checklist\*O
.DE
...\" 
.P
as specified.
...\" 
...\" 
...\" 
...\" 
...\" ----------------------------------------------------------------------
.H 2 "Global Directory System Tests"
...\" ----------------------------------------------------------------------
...\" 
.P
Testcase \*Ldcegdshd\*O tests the shadowing functions of the GDS component
of DCE. Testcase \*Lgds_xds_str_001\*O tests the operation of the threadsafe XDS,
threadsafe XOM, and threaded DUA subsystems of the DCE Global Directory Service
(GDS).
...\" 
...\" 
...\" 
...\" 
...\" ----------------------------------------------------------------------
.H 3 "dcegdshd"
...\" ----------------------------------------------------------------------
...\" 
.P
\*Ldcegdshd\*O tests the shadowing functions of GDS. Specifically, it
tests the ability of GDS to maintain replicas (called ``shadows'' in GDS)
of an object with a single, simple attribute, in some number of DSAs
in a GDS administrative domain, with updates being done with what GDS
considers to be ``high'' frequency (every 5, 10, 15, or 30 minutes).
\*Ldcegdshd\*O does not test the ability of GDS to shadow either subtrees
or objects with more complex attributes, nor does it test at any other
update frequencies than those mentioned above.
...\" 
.P
The syntax for \*Ldcegdshd\*O is:
...\" 
.iS
    dcegdshd -d \*Vmaster_dsa\*L -s \*Vshadow_dsa [\*L -u \*Vupdate_time\*V]
.iE
...\" 
.P
or
.iS
    dcegdshd \*V[\*L-h \*O| \*L-H\*V]
.iE
...\" 
where:
...\" 
.VL 1.5i
...\" 
.LI "\*L-c\*O"
Specifies that the workstation logfiles be cleaned up (the default is that
this option is specified).
.LI "\*L-e\*O"
Specifies that the testcases listed on the command line be excluded.
.LI "\*L-h\*O"
Specifies that a detailed usage message be displayed.
.LI "\*L-H\*O"
Specifies that input parameters be validated only.
.LI "\*L-l\ \*Vloops\*O"
Specifies that test be executed for \*Vloops\*O number of iterations.
.LI "\*L-t\ \*Vhours\*O"
Specifies that test be executed for \*Vhours\*O number of hours.
...\" 
...\" 
.LI "\*L-d\ \*Vmaster_dsa\*O"
Specifies the DSA that will house the master copy of the object. This DSA must
already exist.
.LI "\*L-s\ \*Vshadow_dsa\*O"
Specifies DSA to shadow the object in. This DSA must already exist (user can
specify multiple \*L-s\*O options).
.LI "\*L-u\ \*Vupdate_time\*O"
Specifies (in minutes) the amount of time to allow to elapse before propagating
updates to first shadows. Default is 10 minutes.
...\" 
.LE
...\" 
...\" 
.nS "note"
The granularity in update time is one of: 5, 10, 15, or 30 (minutes).
.nE
...\" 
.P
This test can be used for stress testing by specifying many \*L-s\*O options.
...\" 
...\" 
...\" ----------------------------------------------------------------------
.H 4 "Running the dcegdshd Driver"
...\" ----------------------------------------------------------------------
...\" 
.P
To run the \*Ldcegdshd\*O system test, follow these steps:
...\" 
.AL
...\" 
...\" 
...\" 1:
.LI
Make sure that the following are available on each system involved in the test:
.BL
.LI
\*Vsystest-root\*L/tools\*O
.P
This is the directory containing the test tools.
...\" 
.LI
\*Vsystest-root\*L/profile.dcest\*O
...\" 
.LE
...\" 
...\" 
.P
On the machine that will contain the master DSA, the following must be available
in addition to what is mentioned above:
.BL
...\" 
...\" 1:
.LI
\*Vsystest-root\*L/directory/gds/dcegdshd\*O
.P
Directory the contains the test scripts and files.
...\" 
.LE
...\" 
.P
Note that if you install the system tests using \*Ldcetest_config\*O, all of the
items mentioned above should be automatically installed in their correct locations.
...\" 
...\" 2:
.LI
Modify the file:
.DS
    \*Vsystest-root\*L/directory/gds/dcegdshd/sTest.gds\*O
.DE
.P
to reflect the environment for the test. Change the strings \*Vmachine [1-n]\*O
in the assignments of values to the variables \*Lmach_1\*O through \*Lmach_\*Vn\*O
to be the names of the machines at your site that are to participate
in the system test. Note that the machine assigned to variable \*Lmach_1\*O is
considered the master for the GDS administrative domain that is created by
running the \*LworldSetup.gds\*O script. (This master DSA is the DSA most
stressed during the test run.) After these assignments have been changed, you
may wish also to change the names used in setting up the test directory service,
though this is not necessary. These names are stored in the \*LGDS_DSADNPREFIX\*O
variable (in \*LsTest.gds\*O) in the following format:
.DS
    \*LGDS_DSADNPREFIX="\*Vcountry_name\ org_name\ org_unit_name\ \*Ldsa"
.DE
.P
Change this assignment, if you wish, to reflect the country name,
organization name, and organizational unit name you prefer.
...\" 
.P
Make sure that an entry appears in the list assigned to the \*LGDS_HOSTCONFIG\*O
variable for each \*Lmach_1\*O through \*Lmach_\*Vn\*O variable to which you have
assigned a system name. See the example version of \*LsTest.gds\*O, given below,
to see how this is done.
...\" 
...\" 3:
.LI
Copy the
.DS
    \*Vsystest-root\*L/directory/gds/dcegdshd/sTest.gds\*O
.DE
.P
file to all machines that will be involved in the test.
...\" 
...\" 
...\" 4:
.LI
Source the
.DS
    \*Vsystest-root\*L/profile.dcest\*O
.DE
...\" 
.P
environment file.
...\" 
...\" 5:
.LI
On the machine assigned to the variable \*Lmach_1\*O in the \*LsTest.gds\*O file, enter
the following command:
.iS
  ksh\ \*Vsystest-root\*L/tools/worldSetup.gds\ \*Vsystest-root\*L/directory/gds/dcegdshd/sTest.gds
.iE
.P
\(emWhen executed, this script will first remove any existing GDS configuration
information on each system test machine for directory ID 2, and then configure GDS on each
machine, setting up a GDS administrative domain, with the master or initial DSA on the
machine specified by the variable \*Lmach_1\*O in the \*LsTest.gds\*O file. The script will
report on its progress, telling you what files are logging the progress of setting up each
machine involved in the test (this is in case you want to monitor the progress directly).
When all machines indicate setup is complete, the script will display a ``SETUP OK'' message
and exit. All the test machines are now ready for testing. Note that all information
on remote DSAs and objects is created in the DIT and cache of directory ID 2.
...\" 
...\" 6:
.LI
Make sure that the following files exist on the machine specified by the variable
\*Lmach_1\*O in the \*LsTest.gds\*O file:
.BL
.LI
\*Vsystest-root\*L/directory/gds/dcegdshd/dcegdsh1\*O
.LI
\*Vsystest-root\*L/directory/gds/dcegdshd/Alter_object.sv\*O
.LI
\*Vsystest-root\*L/directory/gds/dcegdshd/Create_object.sv\*O
.LI
\*Vsystest-root\*L/directory/gds/dcegdshd/Create_shadow.sv\*O
.LI
\*Vsystest-root\*L/directory/gds/dcegdshd/Delete_object.sv\*O
.LI
\*Vsystest-root\*L/directory/gds/dcegdshd/Remove_object.sv\*O
.LE
...\" 
...\" 
...\" 7:
.LI
Make sure that the following program exists on the machine specified by the variable
\*Lmach_1\*O in the \*LsTest.gds\*O file:
.DS
    \*Vsystest-root\*L/directory/gds/dcegdshd/view_obj\*O
.DE
...\" 
...\" 
...\" 8:
.LI
On the machine containing the initial DSA, enter the following command:
.iS
    \*Vsystest-root\*L/directory/gds/dcegdshd/dcegdshd\ \*Voptions\*O
.iE
.P
\(em where \*Voptions\*O are as specified for \*Ldcegdshd\*O at the beginning
of this section. The script will report the environment in which it is
running, where it is logging, and so on. It will then start running the
\*Ldcegdsh1\*O script, reporting on success or failure at the end of each
run, storing the log files in the \*Lpass\*O and \*Lfail\*O directories, and
updating the \*Lpass-fail-log\*O file.
...\" 
...\" 
...\" 
.LE
...\" 
.P
Note that when \*Ldcegdshd\*O is run, the object:
.DS
    \*L/C=us/O=osf/OU=dce/CN=Mark\*O
.DE
.P
must not be present in the Directory Information Tree.
.P
Note also that the format for specifying a DSA to the program is:
.DS
    \*L/\*Vcountry_name\*L/\*Vorg_name\*L/\*Vorg_unit_name\*L/dsa/\*Vdsa_name\*O
.DE
...\" 
.P
For the following 4-machine configuration:
...\" 
.VL 1i
.LI "\*Lmach_1\*O"
\*Ldceqa1\*O (initial DSA)
.LI "\*Lmach_2\*O"
\*Ldceqa2\*O
.LI "\*Lmach_3\*O"
\*Ldceqa3\*O
.LI "\*Lmach_4\*O"
\*Ldceqa4\*O
.LE
...\" 
.P
\*Ldcegdshd\*O would be invoked as follows:
...\" 
.iS
    dcegdshd -t 48 -d /us/osf/dce/dsa/dceqa1 -s /us/osf/dce/dsa/dceqa2 \\
                   -s /us/osf/dce/dsa/dceqa3 -s /us/osf/dce/dsa/dceqa4
.iE
...\" 
...\" 
...\" 
...\" ----------------------------------------------------------------------
.H 4 "Example Configuration File"
...\" ----------------------------------------------------------------------
...\" 
.P
Following are the contents of a configuration file for \*Ldcegdshd\*O:
...\" 
.oS
\s-2
    mach_1=dceqa1
    mach_2=dceqa2
    mach_3=dceqa3
    mach_4=dceqa4

    HOURS=12.0
    TIME_SERVERS=
    TIME_CLERKS=
    NTP_SERVER=
    NTP_CLIENTS=
    CDS_SERVERS="mach_1"
    AUTH_SERVER="mach_1"
    CELLNAME=NO_CELL
    GATEWAYS=

    GDS_REQVARS="GDS_DSADNPREFIX GDS_DUAPORTBASE GDS_DSAPORTBASE GDS_NCLIENTS GDS_HOSTCONFIG"
    GDS_DSADNPREFIX="us osf dce dsa"
    GDS_INITIALDSA="2,mach_1"
    GDS_DIR_ID=2
    GDS_DUAPORTBASE="2200"
    GDS_DSAPORTBASE="2100"
    GDS_NCLIENTS=16

    GDS_HOSTCONFIG="mach_1:name=same:dir=1,Cli-Srv,mach_1:dir=2,Cli-Srv,mach_1"
    GDS_HOSTCONFIG="$GDS_HOSTCONFIG mach_2:name=same:dir=1,Cli-Srv,mach_2:dir=2,Cli-Srv,mach_1"
    GDS_HOSTCONFIG="$GDS_HOSTCONFIG mach_3:name=same:dir=1,Cli-Srv,mach_3:dir=2,Cli-Srv,mach_1"
    GDS_HOSTCONFIG="$GDS_HOSTCONFIG mach_4:name=same:dir=1,Cli-Srv,mach_4:dir=2,Cli-Srv,mach_1"

    export mach_1 mach_2 mach_3 mach_4
    export ALL_MACHINES
    export HOURS TIME_SERVERS TIME_CLERKS NTP_SERVER NTP_CLIENTS CDS_SERVERS
    export AUTH_SERVER CELLNAME GATEWAYS GDS_DSADNPREFIX  GDS_INITIALDSA
    export GDS_DIR_ID GDS_DUAPORT GDS_DSAPORTBASE GDS_DSAPORT1 GDS_DSAPORT2
    export GDS_HOSTCONFIG GDS_DUAPORTBASE
\s+2
.oE
...\" 
...\" 
...\" 
...\" 
...\" ----------------------------------------------------------------------
.H 4 "dcegdshd and DSA Processes"
...\" ----------------------------------------------------------------------
...\" 
.P
An active GDS on any given machine consists of from three to five processes which
cooperate as a unit. From time to time, one or more of these processes may die (due
to system problems, network difficulties, or whatever), rendering GDS on the machine
on which this happens inoperative. Usually in such situations, deactivating and then
reactivating all the GDS processes will restore GDS to full functionality.
\*Ldcegdshd\*O, in order to avoid curtailed or useless test runs caused by instances
of service failure, parses the log from each run of the \*Ldcegdsh1\*O script and
attempts to reactivate GDS in this way on any machine that could not be reached
during the \*Ldcegdsh1\*O run. 
.P
\*Ldcegdshd\*O reports these restart attempts in the file \*Lrestart_info\*O. This
file is copied, along with the \*LJOURNAL\*O and \*Lspoolfile\*O files from the
\*Ldcegdshd\*O run, to the \*Lfail\*O directory named for the current iteration
of the test. Thus the contents of this file can help you to determine the reasons
for a test failure, and also provide a measure of the stability of GDS on the
machines being tested.
...\" 
...\" 
...\" 
...\" ----------------------------------------------------------------------
.H 4 "Success Criterion for dcegdshd"
...\" ----------------------------------------------------------------------
...\" 
.P
The success criterion for \*Ldcegdsh1\*O is: no failed updates to any of the
DSAs containing shadows. If you consider this too rigorous, you can modify
the \*Ldcegdsh1\*O script to use other criteria. To find the section of code
where success or failure is currently decided, edit \*Ldcegdsh1\*O and search
for the second occurrence of the string \*LTEST_FAILED\*O.
...\" 
...\" 
...\" 
...\" 
...\" ----------------------------------------------------------------------
.H 3 "gds_xds_str_001"
...\" ----------------------------------------------------------------------
...\" 
.P
The \*Lgds_xds_str_001\*O test provides a means to verify the operation of the 
threadsafe XDS, threadsafe XOM, and threaded DUA subsystems
of the DCE Global Directory Service (GDS). The \*Lgds_xds_str_001\*O
test uses the \*Lxt_test\*O test driver (from the XDS functional tests; see
Chapter 7 for a description of the XDS functional tests) to execute a specially
constructed set of testcases that exercise the threadsafe features of XDS. The
\*Lgds_xds_str_001\*O test files are located in the directory
...\" 
.DS
    \*Vsystest-root\*L/directory/gds/gds_xds_str_001\*O
.DE
...\" 
.P
in the source tree, and in the installed test tree.
.P
The \*Lgds_xds_str_001\*O test supports three levels of stress:
.BL
.LI
\*LHIGH\*O
.LI
\*LMEDIUM\*O
.LI
\*LLOW\*O
.LE
.P
The meaning of each of these levels is user-specified. The duration of the
test run can be specified as a number of hours or as a number of passes.
...\" 
...\" 
...\" 
...\" ----------------------------------------------------------------------
.H 4 "Prerequisites for Running the Test"
...\" ----------------------------------------------------------------------
...\" 
.P
The \*Lgds_xds_str_001\*O test requires the following to be run successfully:
...\" 
.BL
.LI
\*Lrsh\*O (or the equivalent) and \*Lrcp\*O access to all of the test machines
.LI
installation of GDS on all test machines
.LI
installation of the system test tools on all test machines
.LI
installation of the GDS system tests on all machines
.LI
installation of the GDS functional tests on all test machines
.LI
installation of the system test profile file (\*Lprofile.dcest\*O) on all
test machines
.LI
modifications to the \*Lgds_xds_str_001\*O configuration file to make it
correspond to the local test environment.
.LE
...\" 
...\" 
...\" 
...\" ----------------------------------------------------------------------
.H 4 "Test Input"
...\" ----------------------------------------------------------------------
...\" 
.P
The test derives all of its runtime parameters from a datafile, and is scalable
to any number of machines and client processes. A sample datafile can be
found at:
...\" 
.DS
  \*Vsystest-root\*L/directory/gds/gds_xds_str_001/gds_xds_str_001.data\*O
.DE
...\" 
...\" 
...\" 
...\" 
...\" 
...\" ----------------------------------------------------------------------
.H 4 "Test Output"
...\" ----------------------------------------------------------------------
...\" 
.P
The \*Lgds_xds_str_001\*O system test produces the following output:
...\" 
...\" 
.VL 1.5i
.LI "\*Lrunlog.\*Vpid\*L.\*Vdate\*O"
This file contains output describing all of the parameters for the test run,
including the command line used to invoke the test, output about progress in
verifying the input to and environment for the \*Lgds_xds_str_001\*O test run,
output about progress in setting up the GDS configuration and testcase files
for the test, output showing when each test iteration started, and a one line
summary of the result from each iteration. This log also contains the final
statistics for the test run. 
...\" 
.LI "\*Vpid.iteration\*L.passlog\*O"
This file contains detailed information about the progress of a test iteration.
It contains output on progress in setting up the GDS test tree for the test
iteration, progress in starting the test clients, whether clients exited, the
results of the client runs, and progress in cleaning up the GDS test tree.
...\" 
.LI "\*L*.suxtlog\*O"
This is the \*Lxt_test\*O standard output from the creation of the test tree.
...\" 
.LI "\*L*.sud2log\*O"
This is the \*Lxt_test\*O D2 logging output from the creation of the test tree.
...\"  
.LI "\*L*.xtlog\*O"
These contain the \*Lxt_test\*O standard output from the test clients.
...\"  
.LI "\*L*.d2log\*O"
These contain the \*Lxt_test\*O D2 logging output from the test clients.
...\" 
.LE
...\" 
...\" 
...\" 
.sp 1
.P
The \*L*xtlog\*O and \*L*d2log\*O files have names in the following format:
...\"
.DS
    \*Vhost\*L.\*Viteration\*L.\*Vclient_num\*L.\*Vdriver_PID\*L.\*Vcli_OS\*L.\*Vlog_type\*Llog\*O
.DE
...\" 
.P
where:
...\" 
.VL 2i
.LI "\*Vhost\*O"
is the name of the client machine
.LI "\*Viteration\*O"
is the test iteration for which the client is being started
.LI "\*Vclient_num\*O"
is the number assigned to this client
.LI "\*Vdriver_PID\*O"
is the PID of the \*Lgds_xds_str_001\*O driver invoking this client
.LI "\*Vcli_O/S\*O"
is the operating system on the client machine as reported by \*Luname(1)\*O
.LI "\*Vlog_type\*O"
is one of \*Lsux\*Ot, \*Lsud2\*O, \*Lxt\*O, or \*Ld2\*O
.LE
...\" 
.sp 1
.P
For example, the client creating the test tree on an HP/UX machine for test
iteration 3 might send its \*Lxt_test\*O standard output to the file:
.DS
    \*Lhp1.2.3.4434.HP-UX.suxtlog\*O
.DE
...\" 
.P 
The \*Vrunlog\*O is created in the directory specified by the variable \*LLOG_DIR\*O
in the configuration file. The \*Vper-iteration\*O logs (i.e., all logs except for
the runlog) are also written in this directory during the iteration. After each
iteration, the log files from that iteration are either deleted or moved. The logs
are deleted if the variable \*LCLEANUP\*O is set to 1 in the configuration file
\*Vand\*O the iteration was successful. If \*LCLEANUP\*O is set to 0 \*Vor\*O if
the iteration was not successful, the logs are moved to a directory named
\*Viteration\*O under one of the following directories, which are created under
the directory specified by the variable \*LLOG_BASE\*O in the configuration file:
...\" 
...\" 
.VL 1.5i
.LI "\*Lconfig_only\*O"
contains logs from configuration only runs
.LI "\*Lerror\*O"
contains logs from iterations where errors occurred
.LI "\*Lfailed\*O"
contains logs from iterations that ran normally, but had client failures
.LI "\*Lkilled\*O"
contains the log from the cleanup of the client machines and GDS if a signal
was received
.LI "\*Lpassed\*O"
contains logs from successful iterations
.LE
...\" 
...\" 
...\" 
...\" 
...\" ----------------------------------------------------------------------
.H 4 "Execution Flow of Test"
...\" ----------------------------------------------------------------------
...\" 
.P
The \*Lgds_xds_str_001\*O test execution flow is as follows:

.AL
.LI
Read the command line
.P
This step gives the script the name of the data file which describes the test
run. The command line can also optionally specify that GDS is to be configured.
Note that normally GDS is configured only once (on the first invocation of the
test), and that this configuration is then used by subsequent invocations of the
test.
...\" 
.LI
Check variable settings
.P
The variable \*LVARLIST\*O in the \*Lgds_xds_str_001\*O configuration file
specifies a list of variables that must be defined in order for the test to
run. Each variable in this list is checked to see if it has a value. The value
of each variable that is set is recorded in the runlog file. If the variable
\*LVARLIST\*O, or any of the variables in the list are undefined, a message
indicating this is printed to the runlog and to the standard output, and the
script exits.
...\" 
.LI
Set variables and create directories
.P
The variables used to run the test are derived from the values of the variables
set in the configuration file, and the log and temporary directories are created
if they do not yet exist.
...\" 
.LI
Print the ``Hi'' message
.P
A message is printed to the runlog and the standard output that shows the time
the test started, all of the operation parameters, where logs will be written,
what they will be named, and where the programs the test uses are expected to be.
...\" 
.LI
Setup the trap handler
.P
The \*Ltrap(\|)\*O function is called to setup a handler for \*LSIGHUP\*O,
\*LSIGINT\*O, and \*LSIGQUIT\*O.
...\" 
.LI
Build the client information file
.P
A file is built that describes the logical clients to be run for each iteration.
First, access to each client machine is verified. Second, the presence of the
\*Lxt_test\*O program in the expected directory is verified. Third, a line for
each logical client assigned to each machine is generated in the client
information file. This file contains a line for each client of the following
form:
.oS           
    \*Vclient_numb\*C:\*Vmachine_name\*C:\*Vclient_OS
.oE
...\" 
.LI
Set up GDS (if specified)
.P
If the \*L-G\*O command line switch is specified, or the variable \*LCONFIG_GDS\*O
is set to 1 in the configuration file, GDS will be configured for the test run on
all the client machines. The first machine in the list of machines assigned to the
variable \*LCLI_MACHINES\*O will be configured as the DSA that will be the server
for the test run, unless the variable \*Lmach_1\*O is assigned a machine name in
the configuration file.
...\" 
.nS "note"
The \*Lxt_test\*O program has hardcoded dependencies on the names of the DSAs
involved and the directory id that is used. This means that the values of the
variables \*LGDS_DSADNPREFIX\*O, \*LGDS_INITIALDSA\*O, and \*LGDS_HOSTCONFIG\*O
in the configuration file must \*Vnot\*O be changed.
.nE
...\" 
.LI
Setup testcases
.P
The testcases to be executed are setup on all of the test machines. Testcase setup
involves creating testcase files that cause the proper number of threads for the
specified stress level to be created by the \*Lxt_test\*O program, and then
propagating these files to the client machines. See the section below on
configuration variables for more information on specifying the testcases to run.
...\" 
.LI
Check for a GDS Configuration only run
.P
If GDS configuration was specified, and the number of passes was specified as 0,
then the test is being run to configure GDS, but not to run any testcases. If this
is the case, just report, cleanup, and exit
...\" 
.LI
Loop, executing testcases until finished
.P
For each iteration the following steps are executed:
...\" 
...\" 
.AL
.LI
Check to see if test loop should exit.
.LI
Pick the ``next'' testcase to be run from the list of testcases to be executed.
.LI
Pick the ``next'' client to create and cleanup the GDS test tree from the list
of clients.
.LI
Create the new passlog name.
.LI
Print the ``BEGINNING iteration'' message to the runlog and passlog.
.LI
Run the selected client to create the GDS test tree, and report
on success or failure in the passlog.
.LI
Start all the clients, reporting the start of each in the passlog.
.LI
Verify client startups.
.LI
Verify client exits.
.LI
Verify client exit status.
.LI
Cleanup the GDS test tree.
.LI
Cleanup the log files from the iteration.
.LI
Report the success or failure of the iteration.
.LI
Update the passed, failed, and error counters.
.LE
...\" 
...\" 
.LI
Remove the testcase files for this run and report statistics from the run
...\" 
...\" 
.LE
...\" 
...\" 
...\" 
...\" 
...\" ----------------------------------------------------------------------           
.H 4 "Test Options"
...\" ----------------------------------------------------------------------
...\" 
.P
The syntax of the \*Lgds_xds_str_001\*O system test command line is:
...\" 
.DS
    \*Lgds_xds_str_001 -h \*O| \*L-f \*Vconfig [\*L-G\*V]
.DE
...\" 
...\" 
.P
where:
...\" 
.sp 1
...\" 
.VL 1.5i 
.LI "\*L-h\*O"
print a usage message. This works for the regular or enhanced command-line
modes.
...\" 
.LI "\*L-f\ \*Vconfig\*O"
specifies the path to the \*Lgds_xds_str_001\*O configuration file.
...\"      
.LI "\*L-G\*O"
specifies that GDS is to be configured on all the test machines.
...\" 
.LE
...\" 
.P
The \*L-h\*O option cannot be specified with any other option. If
\*L-h\*O is not specified, the \*L-f \*Vconfig\*O option is required.
...\" 
...\" 
.P
There is also an enhanced command line interface to \*Lgds_xds_str_001\*O.
This interface allows some of the parameters for the test to be specified on
the command line; however, specifying parameters in this way is not recommended
as usual practice. The enhanced command-line interface is enabled by creating a
link (named \*Lgds_xds_str_001_cl\*O) to the \*Lgds_xds_str_001\*O script, and
then invoking the test using this link. For further information on the enhanced
interface, create the link and run the test with the \*L-h\*O (usage message)
option.
...\" 
...\" 
...\" 
...\" ----------------------------------------------------------------------
.H 4 "Data and Configuration Variables"
...\" ----------------------------------------------------------------------
...\" 
.P  
This section describes in a general way the configuration variables that
control the execution of the \*Lgds_xds_str_001\*O system test. For more
details refer to the configuration file at:
.DS
  \*Vsystest-root\*L/directory/gds/gds_xds_str_001/gds_xds_str_001.data\*O
.DE
...\" 
...\" 
...\" 
.BL
.LI
Required variables
.P
As stated above, the \*LVARLIST\*O variable describes all of the variables
that must be defined in order for the test to run. This list should be
updated if required variables are added to the configuration file, and
\*Vmust\*O be updated if required variables are deleted from the file.
...\" 
.LI
Test machines and GDS configuration
.P
The test machines should be specified by shell variables \*Lmach_1\*O to
\*Lmach_\*Vn\*O (where \*Vn\*O is the number of machines participating in
the test). The shell variable \*LCLI_MACHINES\*O also should be coded with
the names of all the test machines; these can be hard-coded in the variable,
or specified via the values of the single machine variables (\*L$mach_1\*O,
and so on). The variables containing the string ``\*LGDS_\*O'' in their names
define the GDS configuration. In general, the only changes you will probably want
to make to the GDS configuration will be to specify the names of the test machines;
specify a different machine as the DSA server for the test by assigning the name
of that mchine to the variable \*Lmach_1\*O; or specify a different number of
client processes; by changing the value of the \*Vstress_level\*L_GDS_NCLIENTS\*O
variables near the end of the file.
...\" 
.LI
Testcase available and testcases to execute
.P
Which testcases are to be executed is specified by the variable \*LTESTCASES\*O
in the configuration file. The testcases that are available to be executed is
specified by the variable \*LTESTCASE_LIST\*O. The value of the \*LTESTCASES\*O
variable is a list of one or more of the testcase names specified by the variable
\*LTESTCASE_LIST\*O in the configuration file, or the string ``variant''. If
``variant'' is specified, the test driver cycles through all of the testcases
specified by the \*LTESTCASE_LIST\*O variable, executing a different testcase
in each iteration. If ``variant'' is not specified, the driver will cycle through
the testcases specified by the \*LTESTCASES\*O variable.
...\" 
.LI
Directories
.P
The following variables specify the paths to the directories needed by
the test:
...\" 
.VL 1.5i
...\" 
.LI "\*LTESTCASEDIR\*O"
directory where the testcase files should be located, and where the per-run
testcase files will be created
...\" 
.LI "\*LBINDIR\*O"
directory where the \*Lxt_test\*O binary should be located
...\" 
.LI "\*LTMP_DIR\*O"
directory where temporary files will be created
...\" 
.LI "\*LLOG_ROOT\*O"
directory under which the \*Lgds_xds_str_001\*O test results directory will be
created
...\" 
.LI "\*LLOG_BASE\*O"
directory under which all of the \*Lgds_xds_str_001\*O results directories
(\*Lpass\*O, \*Lfailed\*O, \*Lerror\*O, etc.) will be created
...\" 
.LI "\*LLOG_DIR\*O"
directory in which the runlog will be created and in which the per-iteration
files will be written during the course of the iteration
...\" 
.LI "\*LSTTOOLS_DIR\*O"
directory where the system test tools are located
...\" 
.LI "\*LD2_LOGDIR\*O"
directory (on both the local and the remote machines) in which the \*LD2\*O log
output of the \*Lxt_test\*O program will be written
...\" 
.LE
...\" 
...\" 
.LI
Wait Values
.P
The following variables specify the amount of time to allow for certain operations
to complete, or to wait at some point in the test:
...\" 
.VL 1.5i
.LI "\*LGDSSETUP_WAIT\*O"
The amount of time, in minutes, to allow for the configuration of GDS to complete.
This value can be adjusted to correspond to the number of machines you are
configuring. For example, a combination of two HP/9000-700's, one RISC System/6000
and one DECpc 450ST will take about 15 - 20 minutes to configure.
...\" 
.LI "\*LREADY_WAIT\*O"
Amount of time, in minutes, to wait for the client building or removing the GDS test
tree to complete, and to wait for the clients to report ready.
...\" 
.LI "\*LEXIT_WAIT\*O"
Amount of time, in minutes, to wait for the clients to report that they are exiting.
...\" 
.LI "\*LITERATION_SLEEP\*O"
Amount of time, in seconds, to wait between test iterations.
...\" 
.LE
...\" 
.P
The \*L*_WAIT\*O variables specify the upper bounds on how long some phase of the
test should take. If the phase is not complete by the end of the specified wait
period, something is most likely hung. The \*LITERATION_SLEEP\*O value can be used
to exert more stress on the server, since if it is set high enough (i.e., at
approximately 3 minutes or higher), the DSAs from each iteration will exit due to
lack of activity. This will in turn force the S-stub on the server to spawn a new
group of DSAs for each iteration, instead of allowing it to continue to reuse the
DSAs from the previous iteration(s). Note however that running the test in this
fashion has been noted to decrease the load on the DSAs.
...\" 
.LI
Duration and Log Handling
.P
The \*LHOURS\*O variable sets the time of the test run in hours, and the
\*LCLEANUP\*O variable specifies whether to save or remove logs from successful
iterations. If the test is to run for some number of passes, the number of
passes is specified via the \*LPASSES\*O variable (which supersedes \*LHOURS\*O
if both are specified).
...\" 
.LI
Stress Level Semantics
.P
The \*LLOW_*\*O, \*LMEDIUM_*\*O, and \*LHIGH_*\*O variables specify the meaning of
the stress levels \*LLOW\*O, \*LMEDIUM\*O, and \*LHIGH\*O respectively. For each
stress level, the number of client processes and number of threads per client
process can be specified. The \*L*\*Vstress_level\*L_GDS_NCLIENTS\*O variables
allow specification of the number of client processes specified when GDS in configured.
This number \*Vmust\*O be greater than the number of threads per client, multiplied
by the number of clients per system.
...\" 
.LE
...\" 
...\" 
...\"   
...\" 
...\" ----------------------------------------------------------------------
.H 4 "Example GDS Configuration"
...\" ----------------------------------------------------------------------
...\" 
.P
An example GDS configuration for the test is shown in the following table.
...\" 
...\" 
...\" [1.1Beta: I'm not sure if the following is still true with the vast changes
...\"  in the GDS functional tests...]
...\" 
...\" Note
...\" that while dsa-m2 is not actually used by any of the \*Lgds_xds_str_001\*O testcases,
...\" configuring it will allow the GDS functional tests (in addition to \*Lgds_xds_str_001\*O)
...\" to be run in the resulting GDS Administrative domain.
...\" 
.nP
...\" 
.TB "Example Cell Configuration for gds_xds_str_001"
.TS H
center tab(@) box;
lb | lb | lb | lb | lb | lb
l | l | l | l | l | l.
Machine@DSA-name@Dir-id@GDS type@default DSA@initial DSA
_
.TH
_
mach_1@dsa-m1@1@Client/Server@dsa-m1@dsa-m1
@@2@Client@dsa-m2@none
_
mach_2@dsa-m2@1@Client/Server@dsa-m1@dsa-m1
@@2@Client/Server@dsa-m2@none
_
mach_3@hostname@1@Client/Server@dsa-m1@dsa-m1
@@2@Client@dsa-m2@none
_
\&.\ .\ .
_
mach_n@hostname@1@Client/Server@dsa-m1@dsa-m1
@@2@Client@dsa-m2@none
...\" 
.TE
...\" 
...\" 
...\" 
.P
Note: ``hostname'' in the above table means that the DSA name is the name of the
machine.
...\" 
...\" 
...\" 
...\" 
...\" ----------------------------------------------------------------------
.H 4 "Running gds_xds_str_001"
...\" ----------------------------------------------------------------------
...\" 
.P
After all test prerequisites have been satisfied, the test can be executed with
the command:
...\" 
.iS   
    gds_xds_str_001 -f \*Vconfiguration_file\*L -G
.iE
...\" 
...\" 
.P
\(emwhich means to configure GDS before starting the test itself.
...\" 
...\" 
.P
When running \*Lgds_xds_str_001\*O, you should keep the following information
in mind:
...\" 
.BL
.LI
If tracing is turned on (via \*Lgdssysadm\*O) for the DSA server, DSA log files
will accumulate in the
...\" 
.DS
    \*Vdcelocal\*L/var/directory/gds/adm/dsa/dir1\*O
.DE
...\" 
.P
directory over the course of the test run. For long runs, if tracing is turned
on, the logs can consume large amounts of disk space. For example, over a 48 hour
run, the logs have been observed to consume approximately 70 megabytes of disk
space. If you are planning a long run with tracing turned on, make sure there is
plenty of space available for the log files. The directory can be a symbolic link
to a partition with more disk space.
...\" 
.LI
If large numbers of clients and threads are to be used, you may experience
problems with limits on process table size and processes per id on the server
side. This may happen because the S-Stub must spawn a new DSA process for each
client request it receives when all DSAs are busy.
...\" 
.LE
...\" 
...\" 
...\" 
...\" ----------------------------------------------------------------------
.H 4 "Analyzing Test Results"
...\" ----------------------------------------------------------------------
...\" 
.P
The results of running \*Lgds_xds_str_001\*O can be determined during the test run
by examining the runlog file for messages indicating that iterations failed
or that errors were encountered. Another method is to look for a directory
named \*Lerror\*O or \*Lfailed\*O in the \*LLOG_BASE\*O directory. The presence
of either of these directories indicates that some iterations either failed or
encountered errors. When the test run is complete, the number of iterations that
passed, failed, or encountered errors is printed in the runlog. To determine
which iterations failed or encountered errors, examine the \*Lerror\*O and
\*Lfailed\*O directories in the \*LLOG_BASE\*O directory.
...\" 
...\" 
...\" 
...\" 
...\" ----------------------------------------------------------------------
.H 4 "Sample Configuration File"
...\" ----------------------------------------------------------------------
...\" 
.P
A sample \*Lgds_xds_str_001\*O configuration file is located in the source
tree at:
...\" 
.DS
  \*Vsystest-root\*L/directory/gds/gds_xds_str_001/gds_xds_str_001.data\*O
.DE
...\" 
...\" 
...\" 
...\" 
...\" 
...\" DDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDD
...\" ----------------------------------------------------------------------
.H 2 "DFS System Tests"
...\" ----------------------------------------------------------------------
...\" 
.P
The following sections describe the automated tests and checklists used for
system testing the DCE Distributed File Service, and how to set them up and
run them.
...\" 
.P
A checklist is a series of instructions and manually-entered commands, together
with a description of the expected results of executing the commands. Checklists
are used to document test functions for which no automated test exists.
...\" 
...\" 
...\" 
...\" 
...\" ----------------------------------------------------------------------
.H 3 "DFS System Test Cell Requirements"
...\" ----------------------------------------------------------------------
...\" 
.P
The following list shows the minimum cell requirements for running each of the
DFS system tests. The configurations and optional data file settings used are
recorded in the
...\" 
.DS
    \*Vdce-root-dir\*L/project/test.plans\*O
.DE
...\" 
subdirectory for each DCE release. Data files and log files for automated tests
can be found in the
...\" 
.DS
    \*Vdce-root-dir\*L/project/test.results\*O
.DE
...\" 
.P
directory.
...\" 
...\" 
...\" 
...\" 
...\" 
.VL 2i
...\" 
.LI "\*Ldfs.maxfile\*O\ and"
.LI "\*Ldfs.maxdir\*O"
Require a single DFS (server and client) machine. These tests should be run both
for \*Ldfsexport\*Oed native filesystems and for LFS filesystems.
...\" 
.LI "\*Ldfs.glue\*O"
Requires 2 or more DFS machines (1 combined server and client; the others may be
simply clients). The test must be run on the server machine, and the server machine
must have \*Ldfsexport\*Oed a native filesystem.
...\" 
.LI "\*Ldfs.lock\*O"
Requires 2 or more DFS machines (1 combined server and client; the others may be
simply clients). The test can be run on any DFS machine and can use either native
or LFS filesystems.
...\" 
.LI "\*Ldfs.read_write_all.main\*O"
Requires 2 or more DFS machines (1 combined server and client; the others may be
simply clients). The test can be run on any DFS machine, but there must be at least
one LFS aggregate \*Ldfsexport\*Oed.
...\" 
.LI "\*Ldfs.block_frag\*O"
Requires a single DFS (combined server and client) machine with an \*Vexpendable\*O
LFS aggregate. This aggregate will be \*Lnewaggr\*O'd a number of times during the
test, so it must not contain needed filesets.
...\" 
.LI "\*Ldfs.repfldb_checklist\*O"
Requires 3 DFS (\*Lfldb\*O server) machines and 1 core server machine. The test
involves rebooting the machine serving as the \*Lfldb sync\*O site, so this machine
\*Vmust not\*O be providing the DCE core services (unless sufficient core replication
is in place).
...\" 
.LI "\*Ldfs.repfs_checklist\*O"
Requires 2 DFS (server and client) machines and 3 LFS aggregates.
...\" 
.LI "\*Ldfs.sec.cross_bind_checklist\*O"
Requires 2 DFS (server and client) machines in separate cells.
...\" 
.LI "\*Ldfs.wan_checklist\*O"
Requires 2 DFS (server and client) machines in separate cells across a WAN connection,
\*Vand\*O an additional DFS (client) machine across a WAN connection to a server in the
same cell.
...\" 
...\" 
.LE
...\" 
...\" 
...\" 
...\" ----------------------------------------------------------------------
.H 3 "Installing the DFS System Tests and Checklists"
...\" ----------------------------------------------------------------------
...\" 
...\" 
.P
The DFS system tests are installed with \*Ldcetest_config\*O. See ``Installing
the DCE System Tests'', in Chapter 13, for instructions on running
\*Ldcetest_config\*O.
...\" 
...\" 
...\" ----------------------------------------------------------------------
.H 3 "dfs.glue"
...\" ----------------------------------------------------------------------
...\" 
.P
The \*Ldfs.glue\*O test tests the DFS glue code by accessing directories and
files via their UFS and DFS paths.
...\" 
...\" 
...\" 
...\" 
...\" ----------------------------------------------------------------------
.H 4 "Syntax"
...\" ----------------------------------------------------------------------
...\" 
.P
The \*Ldfs.glue\*O system test is invoked as follows:
...\" 
.iS
    dfs.glue \*O[\*L-f \*O] \*Vdatafile \*O[\*L-t\*O] \*Vhours_of_operation
.iE
...\" 
.P
Where:
...\" 
...\" 
.VL .5i
...\" 
.LI
\*Vdatafile\*O
.P
Specifies the name of a datafile. A sample can be found at:
.DS
    \*Vsystest-root\*L/file/glue.data\*O
.DE
...\" 
.P
You should create one datafile per \*Ldfsexport\*Oed UFS partition.
...\" See ``dfs.glue Data File Variables'' below.
.LI
\*Vhours_of_operation\*O
.P
An integer value that specifies the number of hours of continuous operation
desired.
...\" 
...\" 
.LE
...\" 
...\" 
...\" 
...\" ----------------------------------------------------------------------
.H 4 "Prerequisites for Running the ``dfs.glue'' System Test"
...\" ----------------------------------------------------------------------
...\"
.P
In order for you to successfully run the \*Ldfs.glue\*O test, the following
things must be true:
...\" 
...\" 
.BL
.LI
The local machine is both the file server for the UFS/DFS path variables
in the data file \*Vand\*O a DFS client.
.LI
You are currently logged in as UNIX user and DCE principal with ``root'' read
and write access to the UFS/DFS paths and \*Lrsh\*O (remote shell) permission
to all machines specified by the \*LMACHINES\*O datafile variable.
.LI
There is sufficient space to run the test (see below).
.LI
Any data written via the DFS path is visible to all \*LMACHINES\*O after
\*LMAXTIME_DFSUPDATE\*O seconds.
.LI
Unauthenticated users have read and execute permission to the DFS path.
...\" 
.LE
...\" 
...\" 
...\" 
...\" ----------------------------------------------------------------------
.H 4 "Space Required for Running the ``dfs.glue'' Test"
...\" ----------------------------------------------------------------------
...\"
...\" 
.P
The significant space requirements for running \*Ldfs.glue\*O are as follows.
...\" 
...\" 
.BL
...\" 
.LI
Each test file created by \*Lfilewnr\*O (the program called by \*Ldfs.glue\*O
to write and read files) will be:
.DS
    8193 bytes * \*LNUMFILEWRITES\*O
.DE
...\" 
.P
large (where \*LNUMFILEWRITES\*O is a variable whose value is specified in
the \*Ldfs.glue\*O datafiles).
Note that the value 8193 can be overridden by specifying a different value via
the \*L-b\*O parameter to \*Lfilewnr\*O.
...\" 
.LI
Each test directory created by \*Ldirwrite.sh\*O (the script called by
\*Ldfs.glue\*O to write test directory entries) will contain a copy of the
host kernel. Note that you can override this by specifying an alternate
``large'' file to \*Ldirwrite.sh\*O via the \*L-l\*O parameter, or by
specifying a different value for the \*LLARGE_FILE\*O datafile variable.
...\" 
.LI
The maximum number of test files and test directories that will exist at any
given time during the test can be determined by multiplying the value of
the datafile variable \*LMACHINES\*O by the value of the datafile variable
\*LNUMPROCPERMACH\*O.
...\" 
.LE
...\" 
...\" 
...\" 
...\" ----------------------------------------------------------------------
.H 4 "Components of ``dfs.glue''"
...\" ----------------------------------------------------------------------
...\"
.P
The \*Ldfs.glue\*O test alternates between reading and writing files and
directories locally and remotely via their UFS and DFS paths; the test
components for writing and reading (i.e., verifying what was written) are:
...\" 
.BL
.LI
\*Vsystest-root\*L/file/filewnr\*O
.LI
\*Vsystest-root\*L/file/dirwrite.sh\*O
.LI
\*Vsystest-root\*L/file/dirread\*O
.LI
\*Vdce-root-dir\*L/dce/src/test/file/cache_mgr/spoke\*O
.LI
\*Vdce-root-dir\*L/dce/src/test/file/cache_mgr/hub\*O
.LE
...\" 
...\" 
...\" 
...\" 
...\" ----------------------------------------------------------------------
.H 3 "dfs.lock"
...\" ----------------------------------------------------------------------
...\" 
.P
The \*Ldfs.lock\*O test script uses the \*Lfilewnr\*O program to test if whole
file shared read locks and exclusive write locks can be obtained and honored
correctly in DFS using \*Lfcntl(\|)\*O calls. That is, if \*LNCLIENTS\*O
processes per machine all concurrently request an exclusive write lock to the
same DFS file, does only one succeed? And if \*LNCLIENTS\*O processes per
machine all concurrently request a shared read lock to the same DFS file, do
all succeed?
.P
Concurrency is achieved by starting all the processes sequentially but having
them all wait for the existence of a file in DFS before attempting to access
the test file.
...\" 
...\" 
...\" ----------------------------------------------------------------------
.H 4 "Syntax"
...\" ----------------------------------------------------------------------
...\"
.P
\*Ldfs.lock\*O is invoked as follows:
...\" 
.iS
    dfs.lock \*O[\*L-f\*O] \*Vdatafile \*O[\*L-t\*O] \*Vhours_of_operation\*O
.iE
...\" 
.P
Where:
...\" 
...\" 
.VL .5i
...\" 
.LI
\*Vdatafile\*O
.P
Specifies the name of a datafile. This script can be executed from \*Vany\*O DFS
client machine. A sample datafile can be found at:
.DS
    \*Vsystest-root\*L/file/lock.data\*O
.DE
...\" 
.LI
\*Vhours_of_operation\*O
.P
Specifies number of hours test is to run.
...\" 
...\" 
...\" 
.LE
...\" 
...\" ----------------------------------------------------------------------
.H 4 "Prerequisites for Running the ``dfs.lock'' System Test"
...\" ----------------------------------------------------------------------
...\"
.P
In order for you to successfully run the \*Ldfs.lock\*O test, the following
things must be true:
...\" 
...\" 
.BL
.LI
You are currently logged in as a UNIX user and DCE principal with read
and write access to the DFS path and \*Lrsh\*O (remote shell) permission to all
machines specified by the \*LCLI_MACHINES\*O datafile variable.
...\" 
.LI
The DCE principal specified by the \*LPRINC\*O datafile variable (see below)
is valid and has read and write access to the DFS path.
...\" 
.LI
There is sufficient space to run the test (see below).
...\" 
.LE
...\" 
...\" 
...\" ----------------------------------------------------------------------
.H 4 "Space Required for Running the ``dfs.lock'' Test"
...\" ----------------------------------------------------------------------
...\"
.P
The only significant space requirement for running \*Ldfs.lock\*O is that
the host machine must contain:
.DS
    8193 * \*LNUMFILEWRITES\*O bytes
.DE
...\" 
.P
(where \*LNUMFILEWRITES\*O is a variable whose value is specified in the
\*Ldfs.lock\*O datafile).
...\" 
...\" 
...\" 
...\" ----------------------------------------------------------------------
.H 4 "Components of ``dfs.lock''"
...\" ----------------------------------------------------------------------
...\"
.P
The \*Ldfs.lock\*O test uses:
...\" 
.DS
    \*Vsystest-root\*L/file/filewnr\*O
.DE
...\" 
.P
to perform writes, reads and lock operations.
...\" 
...\" 
...\" 
...\" ----------------------------------------------------------------------
.H 3 "dfs.maxdir"
...\" ----------------------------------------------------------------------
...\" 
.P
This test creates, reads and deletes a large directory with various entries
(symbolic links, hard links, fifo file, etc). The bulk of the entries are
simple ASCII files. Directory size and location are specified in a data file.
The test verifies that the various entries can be created and read successfully.
.P
The test uses the \*Ldirwrite.sh\*O and \*Ldirread\*O test components. An
example data file can be found at:
...\" 
.DS
    \*Vsystest-root\*L/file/maxdir.data\*O
.DE
...\" 
...\" 
.P
The test is invoked as follows:
...\" 
.iS
    ./dfs.maxdir \*O[\*L-f\*O] \*Vconfig_file\*L > \*Vlog_file\*L 2>&1 &
.iE
...\" 
...\" 
.P
If the test runs successfully to completion, the last line of the \*Lmaxdir.log\*O
file will contain the string ``PASSED''.
...\" 
...\" 
...\" 
...\" 
...\" 
...\" ----------------------------------------------------------------------
.H 3 "dfs.maxfile"
...\" ----------------------------------------------------------------------
...\" 
.P
This test creates, reads and deletes a large file. The test invokes the
\*Lfilewnr\*O program with switches based on the contents of a data file.
Note that files created by \*Lfilewnr\*O consist of ``blocks'' of bytes that
are empty except for the specified pattern, and that these blocks are read
randomly. An example data file can be found at:
...\" 
.DS
    \*Vsystest-root\*L/file/maxfile.data\*O
.DE
...\" 
.P
The test can be invoked as follows:
...\" 
.iS
    ./dfs.maxfile \*O[\*L-f\*O] \*Vconfig_file\*L > \*Vlog_file\*L 2>&1 &
.iE
...\" 
...\" 
.P
If the test runs successfully to completion, the last line of the \*Vlog_file\*O
will contain the string ``PASSED''.
...\" 
...\" 
...\" 
...\" 
...\" ----------------------------------------------------------------------
.H 3 "dfs.block_frag"
...\" ----------------------------------------------------------------------
...\" 
.P
This test exercises all the block-fragment combinations by performing the
following operations on an LFS aggregate:
...\" 
.BL
.LI
\*Lnewaggr\*O
.LI
\*Ldfsexport\*O
.LI
\*Lfts create\*O
...\" creating filesets on
.LI
\*Ldfsexport -detach\*O
...\" detach
.LI
\*Lsalvage\*O
.LE
...\" 
.P
Block-fragment combinations used are based on ranges specified in a data file.
The data file also specifies log sizes and fileset sizes. Future versions of
the test may include fileset and replication operations. An example data
file can be found at:
...\" 
.DS
    \*Vsystest-root\*L/file/block_frag.data\*O
.DE
...\" 
.P
The test can be invoked as follows:
...\" 
.iS
    ./dfs.block_frag \*O[\*L-f\*O] \*Vconfig_file\*O
.iE
...\" 
...\" 
.P
If the test runs successfully to completion, the last line of the test output
will contain the string ``PASSED''.
...\" 
...\" 
...\" 
...\" 
...\" 
...\" ----------------------------------------------------------------------
.H 3 "dfs.read_write_all.main"
...\" ----------------------------------------------------------------------
...\" 
.P
This test emulates concurrent but independent end user activity in LFS filesets
in DFS. The test establishes DCE principals and ``home'' filesets for each principal,
containing a work script. The test then logs in as each DCE principal on client
machines and runs the work script for the specified number of hours. The data file
specifies aggregates, aggregate sizes, server machines, client machines, principal
names, uids and passwords. An example data file can be found at:
...\" 
.DS
    \*Vsystest-root\*L/file/dfs.read.write.data\*O
.DE
...\" 
.P
An example work script can be found at:
...\" 
.DS
    \*Vsystest-root\*L/file/do.ksh\*O
.DE
...\" 
.P
The test can be invoked as follows:
...\" 
.iS
    ./dfs.read_write_all.main \*O[\*L-f\*O] \*Vconfig_file\*O [\*L-t\*O] \*Vhours_of_operation \*L> 2>&1 &
.iE
...\" 
.P
If the test runs successfully to completion, the last line of the test output
will contain the string ``PASSED''.
...\" 
...\" 
...\" 
...\" 
...\" 
...\" ----------------------------------------------------------------------
.H 3 "filewnr.c"
...\" ----------------------------------------------------------------------
...\" 
.P
The \*Lfilewnr.c\*O program is the basic file write-and-read module for
the DFS system tests.
.P
\*Lfilewnr\*O simply opens the specified file, and then writes and/or reads
a specified pattern, at a specified offset in the file, in ``blocks'' of bytes
for all blocks in the file. When allowed to run with all defaults, \*Lfilewnr\*O
will create an 8 kilobyte+ file containing ``holes''. i.e., unwritten bytes.
.P
The program operates on a single file. It is called by the \*Ldfs.glue\*O and
\*Ldfs.lock\*O scripts to verify the ability to write, read and lock a file.
Its unique characteristics are that it does not write every byte of the file
and that it performs random rather than sequential reads.
...\" 
...\" 
...\" 
...\" 
...\" 
...\" ----------------------------------------------------------------------
.H 4 "Syntax"
...\" ----------------------------------------------------------------------
...\" 
.P
\*Lfilewnr\*O accepts the following parameters and options:
...\" 
...\" ----------------------------------------------------------------------
...\" Parameter Table
...\" ----------------------------------------------------------------------
...\" 
.br
.ne 15
.TB "filewnr.c Parameters and Values"
.TS H
center tab(@) box;
lb | lb | lb
l | l | l.
Parameter@Values@Description
_
.TH
_
-b size@integer@Size (in bytes) of blocks to read and/or write
_
-d@none@Delete file when finished
_
-f filename@valid pathname@Name of file to read and/or write
_
-l locktype@EW@Exclusive write lock
@SR@Shared read lock
_
-h@none@Print help message
_
-c@integer@ID number assigned to client by driver
_
-C@character string@Continuation message string
_
-T@character string@Termination message for wait file
_
-n bnum@integer@Number of blocks to read and/or write
_
-o offset@integer@Byte offset at which to read and/or write
_
-p pattern@character string@Data to read and/or write
_
-r@none@Read only flag
_
-s range@integer@Number of seconds to sleep while waiting
_
-v@none@Verbose output flag
@@If specified, following data is logged:
@@   Parameters used
@@   Test successes and failures
@@Output is to stdout; test failure messages to stderr
_
-w filename@valid pathname@Do not start until specified file exists
...\" 
...\" 
.TE
...\" 
...\" 
...\" 
...\" 
...\" ----------------------------------------------------------------------
.H 4 "Logic Flow of ``filewnr.c''"
...\" ----------------------------------------------------------------------
...\" 
.P
When invoked, \*Lfilewnr\*O performs the following series of actions:
...\" 
.nP
...\" 
.VL .5i
.LI "\ "
if (\*L-w\*O flag was specified)
.VL .5i
.LI "\ "
loop until \*Vfile_to_wait_for\*O exists
.LE
.LI "\ "
if (\*L-r\*O flag was \*Vnot\*O specified)
.VL .5i
.LI "\ "
open file (with \*Vlocktype\*O specified with \*L-l\*O flag if specified)
.VL .5i
.LI "\ "
exit with failure if unable to obtain lock (i.e., don't block)
.LI "\ "
if (continuation message was specified)
.VL .5 i
.LI "\ "
inspect the wait file for specified string:
.VL .5i
.LI "\ "
if (termination message is found)
.VL .5i
.LI "\ "
exit
.LE
.LE
.LE
.LE
.LI "\ "
for each block:
.VL .5i
.LI "\ "
write (\*Vpattern\*O specified with \*L-p\*O flag) at (\*Voffset\*O specified by \*L-o\*O flag)
.LE
.LI "\ "
close file
.LE
.LI "\ "
open file (with \*Vlocktype\*O specified with \*L-l\*O flag if specified)
.VL .5i
.LI "\ "
exit with failure if unable to obtain lock (i.e., don't block)
.LI "\ "
if (continuation message was specified)
.VL .5 i
.LI "\ "
inspect the wait file for specified string:
.VL .5i
.LI "\ "
if (termination message is found)
.VL .5i
.LI "\ "
exit
.LE
.LE
.LE
.LE
.LI "\ "    
for each block (randomly chosen):
.VL .5i
.LI "\ "
read \*Vpattern\*O length number of bytes at \*Voffset\*O
.LI "\ "
compare what was read to \*Vpattern\*O
.LE
.LI "\ "
close file
...\" 
.LE
...\" 
...\" 
...\" 
...\" 
...\" ----------------------------------------------------------------------
.H 4 "``filewnr'' Program Output"
...\" ----------------------------------------------------------------------
...\" 
.P
The output of \*Lfilewnr\*O is one of the following exit values:
...\" 
...\" 
.VL .5i
.LI "\*VValue\*O"
\*VMeaning\*O
.sp 1
...\" 
.LI "\*L0\*O"
\*LSUCCESS\*O
...\" 
.LI "\*L1\*O"
\*LFAILURE\*O
...\" 
.LI "\*L2\*O"
\*LUSAGE\*O
...\" 
.LI "\*L3\*O"
\*LBAD_OPTIONS\*O
...\" 
.LI "\*L4\*O"
\*LBAD_WAIT\*O
...\" 
.LI "\*L5\*O"
\*LBAD_LOCK\*O
...\" 
.LE
...\" 
...\" 
.P
If the \*L-v\*O (verbose) flag is specified, \*Lfilewnr\*O's invocation
parameters and operation success/failure messages will be logged to
standard output. If the program is compiled with the
\*LPERROR_is_perror\*O flag, error output will be sent to \*Lstderr\*O;
otherwise it will be sent to \*Lstdout\*O (the default, and necessary
for the operation of \*Ldfs.lock\*O).
...\" 
...\" 
...\" 
...\" ----------------------------------------------------------------------
.H 3 "dirread.c"
...\" ----------------------------------------------------------------------
...\" 
.P
The \*Ldirread.c\*O program is the read module for DFS directory integrity
system testing.
.P
\*Ldirread\*O is passed an input file of directory entries (one entry per line)
and the name of a test directory in which to find the entries. The program then
verifies, using the \*Lreaddir(\|)\*O call, that all the entries do in fact
exist in the test directory, and that no other entries exist in the test
directory.
.P
The program can be used in conjunction with the script \*Ldirwrite.sh\*O
to verify directory contents. It will accept as input the output file of
\*Ldirwrite.sh\*O and verify that the supposedly just-written entries do
exist.
...\" 
...\" 
...\" 
...\" ----------------------------------------------------------------------
.H 4 "Syntax"
...\" ----------------------------------------------------------------------
...\" 
.P
\*Ldirread\*O accepts the following parameters and options:
...\" 
...\" 
...\" ----------------------------------------------------------------------
...\" Parameter Table
...\" ----------------------------------------------------------------------
...\" 
...\" 
...\" 
.TB "dirread.c Parameters and Values"
.TS H
center tab(@) box;
lb | lb | lb
l | l | l.
Parameter@Values@Description
_
.TH
_
-i inputfile@Valid file pathname@File from which to read
_
-p parentdir@Valid directory pathname@Directory in which to
@@find testdir
_
-n nr_entries@integer@Number of directory entries
@@to read
_
-t testdir@Valid directory pathname@Directory which contains
@@file entries to read
_
-d@none@If specified, entries and testdir
@@are deleted when program
@@completes execution
_
-v@none@Verbose output flag
...\" 
...\" 
.TE
...\" 
...\" 
...\" 
...\" 
...\" ----------------------------------------------------------------------
.H 4 "Logic Flow of ``dirread.c''"
...\" ----------------------------------------------------------------------
...\" 
.P
When invoked, \*Ldirread\*O performs the following series of operations:
...\" 
...\" 
...\" 
.VL .5i
.LI "\ "
read (\*Vinputfile\*O specified with \*L-i\*O flag) into an array
.LI "\ "
\*Lreaddir\*O the test directory, marking array entries as found:
.VL .5i
.LI "\ "
if there is a directory entry that is not in the array
.VL .5i
.LI "\ "
report an error
.LE
.LI "\ "
if there is an array entry that is not in the directory
.VL .5i
.LI "\ "
report an error
.LE
.LI "\ "
if an entry is found in the directory more than once
.VL .5i
.LI "\ "
report an error
.LE
.LE
.LI "\ "
if deleting test directory:
.VL .5i
.LI "\ "
\*Lreaddir\*O the test directory, marking array entries as deleted
.LI "\ "
\*Lstat\*O entry
.LI "\ "
\*Lrmdir\*O directory entry
.LI "\ "
\*Lunlink\*O non-directory entry
.LE
.LE
...\" 
...\" 
...\" 
...\" 
...\" ----------------------------------------------------------------------
.H 4 "``dirread'' Program Output"
...\" ----------------------------------------------------------------------
...\" 
...\" 
.P
The normal output of \*Ldirread\*O is one of the following exit values:
...\" 
...\" 
.VL .5i
...\" 
.LI "\*VValue\*O"
\*VMeaning\*O
.sp 1
...\" 
.LI "\*L0\*O"
\*LSUCCESS\*O
...\" 
.LI "\*L1\*O"
\*LFAILURE\*O
...\" 
.LI "\*L2\*O"
\*LUSAGE\*O
...\" 
.LI "\*L3\*O"
\*Lchdir\*O to \*Vparentdir\*O failed
...\" 
.LI "\*L4\*O"
\*Lchdir\*O to \*Vtestdir\*O failed
...\" 
.LI "\*L5\*O"
\*Vinputfile\*O error
...\" 
.LI "\*L6\*O"
file close error
...\" 
.LI "\*L7\*O"
\*Lmalloc\*O error
...\" 
.LI "\*L8\*O"
directory open error
...\" 
.LI "\*L9\*O"
close \*Vtestdir\*O error
...\" 
.LI "\*L10\*O"
\*Lrmdir\*O \*Vtestdir\*O error
...\" 
.LI "\*L11\*O"
\*Lstat\*O error
...\" 
.LE
...\" 
...\" 
...\" 
.P
If the \*L-v\*O (verbose) flag is specified, \*Ldirread\*O's invocation
parameters and operation success/failure messages will be logged to
standard output (failure messages are logged to standard error).
...\" 
...\" 
...\" 
...\" 
...\" ----------------------------------------------------------------------
.H 3 "dirwrite.sh"
...\" ----------------------------------------------------------------------
...\" 
.P
The \*Ldirwrite.sh\*O script is the write module for the DFS directory
integrity system test.
.P
\*Ldirwrite.sh\*O simply creates a test directory at a specified or
default path and fills it with the specified (or default) number of
entries. The minimum number of entries is six (6). These are:
...\" 
.BL
.LI
a ``large'' file (by default, the kernel)
.LI
an empty file
.LI
a directory
.LI
a hard link
.LI
a symbolic link
.LI
a special file (mkfifo)
.LE
...\" 
.P
Any subsequent files created (up to \*LNUMDIRENTRIES\*O) are all small ASCII
files.
...\" 
.P
In addition to filling the test directory, \*Ldirwrite.sh\*O also performs
the following operations on the directory:
...\" 
.BL
.LI
\*Lcp\*O
.LI
\*Lmv\*O
.LI
\*Lchown\*O
.LI
\*Lchgrp\*O
.LI
\*Lchmod\*O
.LE
...\" 
...\" 
.P
The return status of each operation is checked and \*Ldirwrite.sh\*O exits
immediately after any detected failure.
...\" 
...\" 
...\" ----------------------------------------------------------------------
.H 4 "Syntax"
...\" ----------------------------------------------------------------------
...\" 
.P
\*Ldirwrite.sh\*O accepts the following parameters and options:
...\" 
...\" 
...\" ----------------------------------------------------------------------
...\" Parameter Table
...\" ----------------------------------------------------------------------
...\" 
.br
.ne 15
.TB "dirwrite.sh Parameters and Values"
.TS H
center tab(@) box;
lb | lb | lb
l | l | l.
Parameter@Values@Description
_
.TH
_
-r@none@Remove test directory when finished
_
-h@none@Help flag: Display a usage message
_
-p@valid pathname@Specifies name of parent directory in which
@@to create test directory
@@Default is current directory.
_
-t@valid pathname@Specifies name of test directory to create
@@Default name is: <hostname_PID>_dir
_
-n@integer@Specifies number of entries to create
@@in test directory
@@Default is 5000
_
-l@valid pathname@Specifies pathname of a ``large file''
@@to place in test directory
_
-o@valid pathname@Specifies name of file in which to
@@output a listing of contents of test
@@directory
@@Default is <test_directory>/CONTENTS
...\" 
...\" 
.TE
...\" 
...\" 
...\" 
...\" 
...\" ----------------------------------------------------------------------
.H 4 "Logic Flow of ``dirwrite.sh''"
...\" ----------------------------------------------------------------------
...\" 
.P
When invoked, \*Ldirwrite.sh\*O performs the following series of operations:
...\" 
...\" 
.AL
.LI
create a directory
.LI
\*Lchmod\*O the directory
.LI
\*Lchgrp\*O the directory
.LI
\*Lchown\*O the directory
.LI
create links to the directory
.LI
copy the directory
.LI
move the directory
.LI
fill the directory
(includes using \*Lcp\*O, \*Lln\*O, \*Ltouch\*O, \*Lmkdir\*O, \*Lmkfifo\*O,
\*Lrm\*O, \*Lrmdir\*O)
.LI
(if specified) remove the directory (\*Lrm\ -rf\*O)
.LE
...\" 
...\" 
...\" 
...\" ----------------------------------------------------------------------
.H 4 "``dirwrite.sh'' Usage Example"
...\" ----------------------------------------------------------------------
...\" 
...\" 
.P
Following is an example of calling \*Ldirwrite.sh\*O directly:
...\" 
.iS
    dirwrite.sh  -p /:/ctd -t test_dir -n 500 -l /vmunix -o /:/ctd/test_dir_ls
.iE
...\" 
.P
This command line specifies the following:
...\" 
.BL
...\" 
.LI
The test directory's parent directory has the following pathname:
.DS
    \*L/:/ctd\*O
.DE
...\" 
...\" 
.P
Note that the parent directory must exist \*Vbefore\*O you run \*Ldirwrite.sh\*O,
and you must have write permission for this directory.
...\" 
...\" 
.LI
Create the test directory with the following pathname:
.DS
    \*L/:/ctd/test_dir\*O
.DE
...\" 
...\" 
...\" 
.LI
Create 500 entries in the test directory.
...\" 
...\" 
.LI
Use \*L/vmunix\*O as the ``large'' file.
...\" 
...\" 
.LI
Output a listing of the test directory's contents to:
.DS
    \*L/:/ctd/test_dir_ls\*O
.DE
...\" 
...\" 
...\" 
.LE
...\" 
...\" 
...\" 
...\" ----------------------------------------------------------------------
.H 4 "``dirwrite.sh'' Output"
...\" ----------------------------------------------------------------------
...\" 
.P
If the test directory was not specified to be removed, the specified (by \*L-o\*O)
output file will contain a listing of the test directory's contents.
.P
If a command fails, \*Ldirwrite.sh\*O exits with a message to standard output
announcing the failure.
...\" 
...\" ----------------------------------------------------------------------
...\" 
...\" 
...\" 
...\" ----------------------------------------------------------------------
.H 3 "dfs.fmul"
...\" ----------------------------------------------------------------------
...\" 
.P
The \*Ldfs.fmul\*O test currently tests partial file locking, blocking while
locked, and unlocking by using RPC from the client to the servers.
...\" 
.P
The test consists of three modules:
...\" 
.BL
.LI
\*Ldfs.fmul\*O
(Top level script not yet implemented)
.P
Tests fileset move under load.
...\" 
.LI
\*Lfmul.client\*O
.P
Client module for \*Ldfs.fmul\*O.
...\" 
.LI
\*Lfmul.server\*O
.P
Server module for \*Ldfs.fmul\*O.
...\" 
.LE
...\" 
...\" 
...\" 
...\" .P
...\" Not yet implemented:
...\" The dfs.fmul test tests moving DFS filesets under a load created by
...\" using locking and unlocking. The fileset moves will also use RPC
...\" from the client to the servers.
...\" 
...\" 
...\" 
...\" ----------------------------------------------------------------------
.H 4 "Syntax"
...\" ----------------------------------------------------------------------
...\" 
.P
The \*Ldfs.fmul\*O system test is invoked as follows:
...\" 
.P
For each server:
...\" 
.iS
    fmul.server \*O[\*L-d\*O]
.iE
...\" 
.P
For the client:
...\" 
.iS
    fmul.client -f \*Vdatafile\*L -s \*Vnumber_of_servers\*L -n \*Vlockfile\*L -p \*Vlockfile_path\*L \*O[\*L-d\*O]
.iE
...\" 
.P
Where:
...\" 
.VL 2i
.LI
\*L-d\*O
Specifies additional output useful for debugging.
...\" 
.LI
\*L-f\ \*Vdatafile\*O
Specifies the name of a datafile.
...\" 
.LI
\*Ls\ \*Vnumber_of_servers\*O
Specifies the total number of servers required.
...\" 
.LI
\*L-n\ \*Vlockfile\*O
Specifies the name of the file created and locked by test.
...\" 
.LI
\*L-p\ \*Vlockfile_path\*O
Specifies the path to the lockfile.
...\" 
.LE
...\" 
...\" 
...\" 
...\" 
...\" ----------------------------------------------------------------------
.H 4 "Prerequisites for Running the dfs.fmul"
...\" ----------------------------------------------------------------------
...\" 
.P
In order for you to successfully run the \*Ldfs.fmul\*O test, the following
things must be true:
...\" 
.BL
.LI
All machines used for the client and servers must be able to read and
write the lockfile specified in the arguments to \*Lfmul.client\*O.
.LI
You are currently logged in as UNIX user root and DCE principal \*Lcell_admin\*O.
.LI
The appropriate number of servers must be started before the client.
More than one server may run on an individual machine.
.LE
...\" 
...\" 
...\" 
...\" 
...\" 
...\" ----------------------------------------------------------------------
.H 3 "DFS System Testing Checklists"
...\" ----------------------------------------------------------------------
...\" 
...\" 
...\" 
.P
The present section describes checklists used for system testing DCE
administrative and distributed file system functions.
.P
A checklist is a series of instructions and the expected results of following
those instructions. Checklists are used to document how to test functions for
which no automated test currently exists.
...\" 
...\" 
...\" 
...\" ----------------------------------------------------------------------
.H 4 "dfs.repfs_checklist"
...\" ----------------------------------------------------------------------
...\" 
.P
Steps to follow for setting up and testing replicated filesets.
At the minimum, 2 machines are required, both DFS servers, one as
both client and server.
...\" 
.P
The testing includes:
...\" 
.BL
.LI
multiple read/write access to a LFS fileset that is replicated
.LI
verifying both release and scheduled replication
.LI
disabling and re-enabling the primary (r/w) fileset
.LI
disabling and re-enabling a secondary (read-only) fileset
.LE
...\" 
...\" 
...\" 
...\" ----------------------------------------------------------------------
.H 4 "dfs.repfldb_checklist"
...\" ----------------------------------------------------------------------
...\" 
.P
Steps to follow for setting up and testing replicated fileset location
database servers. At the minimum, 3 machines are required, each configured
as a fileset location database server.
...\" 
.P
The testing includes:
...\" 
.BL
.LI
multiple read/write access to both native and LFS filesets
.LI
fileset manipulation (cloning, renaming, moving)
.LI
disabling and re-enabling one or more fileset location database servers.
.LE
...\" 
...\" 
...\" 
...\" ----------------------------------------------------------------------
.H 4 "dfs.wan_checklist"
...\" ----------------------------------------------------------------------
...\" 
.P
Steps to follow for setting up and testing wide-area network access to DFS.
A minimum of 2 machines, one at each end of a wide-area network, is required
for the test.
...\" 
.P
The testing includes:
...\" 
.BL
.LI
intra-cell access
.LI
cross-cell access
.LE
...\" 
...\" 
...\" 
...\" ----------------------------------------------------------------------
.H 4 "dfs.sec.cross_bind_checklist"
...\" ----------------------------------------------------------------------
...\" 
.P
Steps to follow for setting up and testing cross-cell DFS access with ACLs.
A minimum of 2 machines, each configured in a different cell, is required
for the test.
.P
The testing includes:
...\" 
.BL
.LI
cross-cell write access (denied/granted)
.LI
cross-cell read access (denied/granted)
.LE
...\" 
...\" 
...\" 
...\" ----------------------------------------------------------------------
.H 2 "Security Delegation Tests"
...\" ----------------------------------------------------------------------
...\" 
.P
There are two security delegation system tests that are not run under TET.
They are described in the following two subsections.
...\" 
...\" 
...\" 
...\" ----------------------------------------------------------------------
.H 3 "dlgstr001"
...\" ----------------------------------------------------------------------
...\" 
.P
\*Ldlgstr001\*O is a multi-delegate test of delegation. See the
...\" 
.DS
    \*Vdce-root-dir\*L/dce/src/test/systest/security/dlgstr001/README\*O
.DE
...\" 
.P
file for details on how to run it.
...\" 
...\" 
...\" ----------------------------------------------------------------------
.H 3 "dlgcf002"
...\" ----------------------------------------------------------------------
...\" 
.P
\*Ldlgcf002\*O is an ACL and compatibility delegation system test. See the
...\" 
.DS
    \*Vdce-root-dir\*L/dce/src/test/systest/security/dlgcfg002/README\*O
.DE
...\" 
.P
file for details on how to run it.
...\" 
...\" 
...\" 
...\" 
...\" ----------------------------------------------------------------------
.H 2 "RPC-CDS System Test"
...\" ----------------------------------------------------------------------
...\" 
.P
The \*Lrpc.cds.3\*O system test is designed, as its name suggests, to stress the
RPC and CDS components of the DCE software.
.P
The test first determines the maximum number of concurrent calls that the
server can handle, using no authentication. The maximum number of concurrent
calls has been reached when clients start receiving the status
\*Lrpc_s_server_too_busy\*O (if the client is using a connection-oriented protocol)
or \*Lrpc_s_comm_failure\*O (if the client is using a connectionless protocol)
in response to calls to the server.
.P
After the maximum for concurrent calls has been determined, the test loops,
importing a server binding from a different CDS object on each loop, and using
that binding to request data from the server (the data consists of a conformant
structure containing an array of strings, modelled as a personal calendar). During
this looping, the CDS cache data maintained on behalf of the clients is frequently
invalidated in order to force the CDS clerk to obtain new information from the cell
clearinghouse.
...\" 
...\" 
.P
The \*Lrpc.cds.3\*O system test exerts stress on the RPC component by
making many remote procedure calls passing a complex data type at some
specified level of authentication. The test exerts stress on the CDS component
by executing many namespace lookups and binding import operations, forcing the
use of group attributes to resolve binding searches, and forcing many
namespace searches to resolve names by frequently invalidating the contents
of the CDS cache.
...\" 
...\" 
...\" 
...\" ----------------------------------------------------------------------
.H 3 "Features of the RPC-CDS System Test"
...\" ----------------------------------------------------------------------
...\" 
.P
Some special features of the \*Lrpc.cds.3\*O system test are:
...\" 
...\" 
...\" 
.BL
...\" 
.LI
Instant status reports on receipt of \*LSIGQUIT\*O
.LI
Toggling of debug output on receipt of \*LSIGHUP\*O
.LI
Graceful shutdown on receipt of \*LSIGINT\*O
...\" 
.LE
...\" 
...\" 
...\" ----------------------------------------------------------------------
.H 3 "Logic Flow of RPC-CDS System Test Setup"
...\" ----------------------------------------------------------------------
...\" 
.P
In outline, the operation of \*Lrpc.cds.3_setup.sh\*O is as follows:
...\" 
...\" 
.AL
.LI
Checks to make sure that the user has a valid identity as \*Lcell_admin\*O.
.LI
Checks to make sure that all of the variables used by the setup script are
assigned values in the configuration file.
.LI
Creates the client and server principals.
.LI
Creates the client and server accounts and keytab files. If the path to the
keytab file does not exist, the script attempts to create it. Note that you
will be prompted for the \*Lcell_admin\*O password twice during this part
of the setup.
.LI
Creates the CDS directory into which the server interface entry will be
exported.
.LI
Attempts to create a client keytab file on any systems named in the
configuration file (or via the \*L-r\*O command line option) as client machines
in the test.
.LI
Attempts to create a server keytab file on any systems named in the configuration
file (or via the \*L-R\*O command line option) as server machines in the test.
.LE
...\" 
...\" 
...\" ----------------------------------------------------------------------
...\" .H 6 "Logic Flow of the RPC-CDS System Test"
...\" ----------------------------------------------------------------------
...\" 
.P
The \*Lrpc.cds.3\*O server binary (\*Lrpc.cds.3_srv\*O) exports to the CDS
namespace a number of objects that refer, via the object UUID in each entry,
to one of the calendars that the server has data for.
.P
In order to make use of the server easier, the object names are of the form:
.DS
    \*Lrpccds3_cal\*VN\*O
.DE
...\" 
.P
\(emthat is, the string \*Lrpccds3_cal\*O with a numeric suffix.
...\" 
...\" 
...\" 
...\" 
...\" ----------------------------------------------------------------------
.H 3 "Server Side Logic Flow"
...\" ----------------------------------------------------------------------
...\" 
.P
The \*Lrpc.cds.3_srv\*O binary implements the server side of the \*Lrpc.cds.3\*O
system test. The flow of logic in the server is as follows:
...\" 
.VL .5i
...\" 
.LI "1."
Parse the command line.
...\"    
...\" 
.LI "2."
Read the configuration file specified by the \*L-f\*O command line parameter.
...\" 
...\" 
.LI "3."
Register authorization information.
...\" 
.LE
...\" 
.P
The following step is executed only if the \*Lrpc.cds.3_smain.o\*O object was
compiled with the \*LDRPCCDS3_DO_LOGIN\*O switch:
...\" 
.VL .5i
...\" 
...\" 
.LI "4."
Establish the server identity.
.LE
...\" 
.P
If the \*Lrpc.cds.3_smain.o\*O object was not compiled with the \*LDRPCCDS3_DO_LOGIN\*O
switch then the following step is executed:
...\" 
.VL .5i
...\" 
...\" 
.LI "4."
Get the login context for the current identity.
...\" 
.LE
...\" 
.P
The main line of the test logic flow resumes with step 5:
...\" 
...\" 
.VL .5i
...\" 
...\" 
.LI "5."
Initialize the mutex and condition variables for the \*Lpthread_cond_timedwait(\|)\*O
call that controls the duration of the RPCs.
...\" 
.LE
...\" 
...\" 
...\" 
.P
If the \*Lrpc.cds.3_smain.o\*O object was compiled with the \*LDRPCCDS3_AUTO_REFRESH\*O
switch, then the following four steps are executed:
...\" 
...\" 
.VL .5i
...\" 
...\" 
.LI "\*V6.\*O"
Initialize the mutex and condition variables for the
\*Lpthread_cond_timedwait(\|)\*O call that is used to time identity refreshes.
...\" 
...\" 
.LI "\*V7.\*O"
Get the expiration time of the server's current identity, and from it calculate
the ticket lifetime.
...\" 
...\" 
.LI "\*V8.\*O"
Save the encrypted key from the key returned by \*Lsec_key_mgmt_get_key(\|)\*O
in order to use it when refreshing the server identity.
...\" 
...\" 
.LI "\*V9.\*O"
Spawn the thread that will maintain the server identity.
...\" 
...\" 
.LE
...\" 
...\" 
...\" 
.P
The main line of the test logic flow resumes with Step 10:
...\" 
...\" 
...\" 
.VL .5i
...\" 10
.LI "10."
Spawn the thread that will catch and handle signals for the process.
...\" 
...\" 
.LI "11."
Read the calendar data files specified on the command line or in the
configuration file, and load the calendar data into an internal array.
Note that the number of calendar data files does not have to be the
same as the number of calendars. If the number of data files is
smaller then the number of calendar objects to be exported to the
namespace, then in some cases more than one namespace entry will refer
to a single calendar. This convention allows the user to specify
that many objects are to be created without having to specify many
calendar data files.
...\" 
...\" 
.LI "12."
Loop through the range of numbers specified by the sequence start and
number of calendars (specified respectively with \*LRPCCDS3_SRV_CALSEQ\*O
and \*LRPCCDS3_SRV_NCALS\*O
...\" 
...\" 
in the configuration file) to be managed by this server.
...\" 
...\" 
.LE
...\" 
...\" 
...\" 
...\" 
.P
For each number in the range of numbers mentioned in the previous step
above, the test now does the following:
...\" 
.VL .5i
...\" 
...\" 
.LI "1."
Construct the CDS name of the calendar object that will be associated
with that number. This name is of the form:
.DS
    \*VCDS_PATH\*L/rpccds3_cal\*Vnumber\*O
.DE
...\" 
...\" 
.LI "2."
Get a UUID for the calendar object. If the calendar object already
exists in the CDS namespace, then the UUID from the existing entry
is used; if the entry does not exist, or if it exists but has no UUID
in it, then one of two things can happen:
...\" 
...\" 
.BL
.LI   
If the calendar that is to be associated with the CDS entry
already has a UUID associated with it, then that UUID is used.
.LI
If the calendar that is to be associated with the CDS entry
has not yet had a UUID associated with it, then a new UUID is
generated.
.LE
...\" 
.P
If the CDS entry exists and has a UUID in it and the calendar
has a UUID associated with it, then if the UUIDs match, that UUID
is used; if the UUIDs don't match, then the old UUID is removed
from the object, and the UUID from the calendar is used.
...\" 
...\" 
.LI "3."
If the UUID is not from the namespace entry, then the UUID is
exported to the namespace entry (this has the side effect of
creating the namespace entry if does not already exist).
...\" 
...\" 
.LI "4."
If the server object UUID vector does not yet contain the UUID,
then the UUID is added to the server object UUID vector.
...\" 
...\" 
.LI "5."
The CDS name of the CDS server entry is added to the group attribute
of the CDS object.
...\" 
...\" 
.LI "6."
The server obtains binding handles and exports them to the
namespace entry specified in the configuration file.
...\" 
...\" 
.LI "7."
The server listens for client requests for calendar data.
...\" 
...\" 
.LI "8."
When a client call request is received, the server extracts the
object UUID from the client binding and searches the internal
array of calendars for a calendar associated with that UUID. If
such a calendar is found, then the calendar data is returned to
the client.
...\" 
.LE
...\" 
...\" 
...\" 
.P
Note that during the server's run, information on total calls handled,
calls that passed and failed, number of id refreshes, and the last time
the id was refreshed can be obtained by sending \*LSIGQUIT\*O to the server
process. This report is also generated if the server is killed with
\*LSIGINT\*O.
...\"         
...\" 
...\" 
...\" ----------------------------------------------------------------------
.H 3 "Client Side Logic Flow"
...\" ----------------------------------------------------------------------
...\" 
.P
Following is a detailed list of the steps the client performs:
...\" 
.VL .5i
...\" 
.LI "1."
Gets values for operational parameters by reading the configuration file, the
name of which by default is \*Lrpc.cds.3.conf\*O; or it can be passed in the
command line via the \*L-f\*O option.
...\" 
.LI "2."
Assumes the client principal identity specified in the configuration file.
...\" 
.LI "3."
Sets various strings for reporting, such as hostname and operating system.
...\" 
.LI "4."
Looks in the CDS namespace for an existing entry for the \*Lrpc.cds.3\*O
interface (defined in the configuration file). If a CDS namespace entry is
found, then all the binding handles that \*Lrpc_binding_import_next(\|)\*O
will return are sequentially imported, and an
\*Lrpc_mgmt_is_server_listening(\|)\*O call is made to verify that the binding
is usable. This step ensures that the later steps will find some usable bindings
at the server, and that the server is alive.
...\" 
.LI "5."
If a protocol is specified, converts the binding handle to a string binding and
parses it to find the protocol type.
...\" 
.LI "6."
Looks for the synchronization file and sleeps after finding it, in order to
synchronize startup of its RPCs.
...\" 
.LI "7."
Makes the RPC. If the \*L-b\*O flag was specified, the client checks the return
status from the call and exits with the appropriate value, as described above.
If the client is running in stress mode, the status is checked, counts of successes,
failures, total calls and call times are updated, and the next RPC is made.
...\" 
.LE
...\" 
...\" 
...\" 
...\" ----------------------------------------------------------------------
.H 3 "Parameters and Options for the RPC-CDS System Test"
...\" ----------------------------------------------------------------------
...\" 
.P
The \*Lrpc.cds.3_setup.sh\*O script accepts the following command line
switches.
...\" 
...\" 
...\" 
...\" 
...\" ----------------------------------------------------------------------
...\" Table of Command Line Switches
...\" ----------------------------------------------------------------------
...\" 
.br
.ne 30
.TB "Command Line Switches for rpc.cds.3_setup.sh"
.TS H
center tab(@) box;
lb | lb | lb
l | l | l.
Parameter@Function@Default value
_
.TH
_
-B path@Sets the path to the rpc.cds.3@The value of RPCCDS3_BIN_DIRPATH in
@binaries on the remote machine@the configuration file.
@or machines.
_
-f path@Sets the path to the rpc.cds.3@The path to the rpc.cds.3 binaries
@configuration file on the@on the remote machine(s).
_
-r mach@Adds a machine to be@The value of RPCCDS3_CLI_MACHINES in
@configured for running the@the configuration file.
@test's client side.
_
-R mach@Adds a machine to be@The value of RPCCDS3_SRV_MACHINES in
@configured for running the@the configuration file.
@test's server side.
_
-l@Specifies local setup@None.
@only.
...\" 
...\" 
.TE
...\" 
...\" 
...\" 
.P
The \*Lrpc.cds.3_srv\*O executable accepts the following command line
switches.
...\" 
...\" 
.TB "Parameters for rpc.cds.3_srv"
.TS H
center tab(@) box;
lb | lb | lb | lb
lb | lb | lb | lb
l | lb | lb | l.
@@Specification in@
Parameter@Option@Configuration File@Values
_
.TH
_
Directory for calendar data@-D@not specified@Default is "."
files
_
Calendar data file list@-c@RPCCDS3_SRV_CAL_DATA@List of file names separated 
@@@with spaces.
_
Configuration file@-f@not specified@path
pathname
_
Protection level for RPCs@-1@RPCCDS3_PROT_LEVEL@conn, call, pkt, integ, priv
@@@Default is priv
_
Number of calendars to be@-n@RPCCDS3_SRV_NCALS@any number
exported to the namespace@@@Default is 200
by server
_
Initial sequence number of@-I@RPCCDS3_SRV_CALSEQ@any number
cds calendars@@@Default is 1
...\" 
...\" 
.TE
...\" 
...\" 
.nP
...\" 
.TB "Flags for rpc.cds.3_srv"
.TS H
center tab(@) box;
lb | lb
l | lb.
Parameter@Option
_
.TH
_
Debug on@-d
_
Let epv default@-e
_
Replace any existing uuids@-r
use only one of -r or -n
...\" ??????????????????
.TE
...\" 
...\" 
.nP
...\" 
.P
The \*Lrpc.cds.3_cli\*O executable accepts the following command line
switches.
...\" 
.TB "Parameters for rpc.cds.3_cli"
.TS H
center tab(@) box;
lb | lb | lb | lb
lb | lb | lb | lb
l | lb | lb | l.
@@Specification in
Parameter@Option@Configuration File@Values
_
.TH
_

Directory for calendar data@-D@not specified@Default is "."
files
_
Calendar data file list@-c@RPCCDS3_SRV_CAL_DATA@list of file names separated
with spaces
_
Protocol to use@-P@RPCCDS3_PROT_LEVEL@datagram or connection
_
Sync file name@-S@not specified@file name
_
Configuration file@-f@not specified@path
pathname
_
Last client flag@-L
_
Protection level for RPCs@-1@RPCCDS3_PROT_LEVEL@conn, call, pkt, integ, priv
Default is priv
_
Number of passes@-p@not specified@any number
(cannot be used with@@@
time interval or boundary mode
_
Hours to execute (plus@-h@RPCCDS3_CLI_DEF_RUN_INTVL@any number
minutes if -m specified)@@@Default is 48
_
Minutes to execute (plus@-m@not specified@any number
hours if -h specified)
_
Report interval (in@-i@RPCCDS3_CLI_DEF_REP_INTVL@any number
passes if -p specified,@@@Default is 60
in calendar imports if -r@@@minutes or passes
specified, in minutes if@@@
-m or -h specified)
_
Number of calendars to be@-n@RPCCDS3_SRV_NCALS@any number
exported to the namespace@@@Default is 200
by server
_
Age in minutes for cds cache@-a@RPCCDS3_CLI_CDS_CACHE_AGE@any number
data@@@Default is 5
_
Initial sequence number of@-I@RPCCDS3_SRV_CALSEQ@any number 
cds calendars@@@Default is 1
_
Starting sequence number@-s@RPCCDS3_SRV_CALSEQ@any number
for calendars exported by@@@Default is 1
the server
...\" 
...\" 
.TE
...\" 
...\" 
...\" 
.nP
...\" 
.TB "Flags for rpc.cds.3_cli"
.TS H
center tab(@) box;
lb | lb
l | lb.
Parameter@Option
_
.TH
_
Boundary mode@-b
(not allowed to do boundary@
mode with -h -i -p or -m@
options)
_
Debug on@-d
_
Test all bindings@-t
_
...\" 
...\" 
.TE
...\" 
...\" 
...\" 
...\" ----------------------------------------------------------------------
.H 3 "Compile-Time Switches for Optional Functionality"
...\" ----------------------------------------------------------------------
...\" 
.P
There are several areas of optional functionality available in the
\*Lrpc.cds.3\*O system test that can be used to expand the scope of the test
or to provide additional runtime information. These areas of optional
functionality are compiled into the program via the definition of tags which
can be specified in either of two ways:
...\" 
...\" 
.BL
.LI
On the \*Lbuild\*O command line; for example:
.iS
    \*C%\ \*Lbuild -DRPCCDS3_ALL_OPTS
.iE
...\" 
.LI
In the environment variable \*LCENV\*O; for example (in a C shell):
.iS
    \*C%\ \*Lsetenv CENV RPCCDS3_ALL_DEBUGS
    \*C%\ \*Lbuild
.iE
...\" 
.LE
.P
The default \*Lbuild\*O flag value is \*LRPCCDS3_ALL_OPTS\*O.
.P
The table below
lists the supported compiler flags, the functionality that they control, and
the operation of the test depending on whether the flag is or is not specified.
...\" 
...\" 
...\" 
...\" 
...\" 
...\" ----------------------------------------------------------------------
...\" Table of Compile-Time Switches"
...\" ----------------------------------------------------------------------
...\" 
.br
.ne 30
.TB "Compile-Time Switches for rpc.cds.3"
.TS H
center tab(@) box;
lb | lb | lb
lb | l | l.
Flag@Functionality@Test Operation
_
.TH
_
RPCCDS3_KEEP_SYMBOLS@Keeps debugging symbols@If defined, code is compiled with debugging
@in compiled objects@symbols; else debugging symbols usually
@@stripped from objects.
_
RPCCDS3_ID_REFR_DEBUG@Print ID refresh@If defined, code is compiled to
@messages@cause messages about identity maintenance
@@activity to be printed.
_
RPCCDS3_ADD_DUMP_ROUTINES@Dump data@If defined, server code is compiled
@structures@to dump contents of data structures.
_
RPCCDS3_SRV_REPORTING@Turns on server@If defined, server reports on call requests
@status reporting@received, calls passed and failed, id refreshes,
@@and time of last id refresh at an interval speci-
@@fied by RPCCDS3_CLI_DEF_REP_INTVL in
@@configuration file. If not defined, server
@@reports only upon receipt of SIGQUIT.
_
RPCCDS3_AUTO_REFRESH@Turns on auto-@If defined, server spawns a thread that will
@matic identity@maintain the authentication ticket by waking
@refreshing@up prior to the ticket's expiration time,
@@and refresh the ticket. If not defined,
@@server will lose its network credentials
@@when its tickets expire as dictated by
@@cell security policy.
_
RPCCDS3_DO_LOGIN@Causes server to@If defined, server will make security calls
@assume its own@to establish network credentials. If not
@identity@defined, server will run with invoker's
@@credentials.
_
RPCCDS3_ALL_OPTS@turns on all optional@Has the same effect as specifying
@code@RPCCDS3_SRV_REPORTING,
@@RPCCDS3_AUTO_REFRESH, and
@@RPCCDS3_DO_LOGIN.
_
RPCCDS3_ALL_DEBUGS@turns on all debugging@Has the same effect as specifying
@options@RPCCDS3_ID_REFR_DEBUG,
@@RPCCDS3_KEEP_SYMBOLS,
@@and RPCCDS3_ADD_DUMP_ROUTINES.
...\" 
.TE
...\" 
...\" 
...\"                                             
...\" 
.P
Specifying server reporting can provide useful information about the server
side of the test. The login and auto refresh flags allow the scope of the
test to be expanded to include the Security component, especially if the policy
for the test run is set to expire tickets frequently, and a high protection
level is used on RPC calls. The login and auto refresh options are also useful
if the test is intended to run for extended durations.
...\" 
...\" 
...\" 
...\" 
...\" ----------------------------------------------------------------------
.H 3 "Customizing the Configuration File"
...\" ----------------------------------------------------------------------            
...\" 
.P
Setting up to run the setup script for the \*Lrpc.cds.3\*O system test
consists of one step, namely customizing the
.DS
    \*L/dcetest/dcelocal/test/tet/system/rpc/ts/rpc.cds.3/rpc.cds.3.conf\*O
.DE
...\" 
.P
configuration file. The present section describes this step.
.P
The scripts and programs that make up the \*Lrpc.cds.3\*O system test get
most of the information they need from a single configuration file whose
default name is \*Lrpc.cds.3.conf\*O. If the file is named something other
than the default, the name can be specified to the test via the \*L-f\*O
command line option (see below) or via the environment variable
\*LRPCCDS3_CONF\*O.
.P
The information normally contained in this file can be split up roughly into
two categories: default runtime parameters, and environment information.
.P
Examples of default runtime information in the file are: the time duration
a test should run; the names of machines on which clients will be run; etc.
.P
Examples of environment information stored in this file are: the name of
the CDS namespace entry to which the server exports its bindings; the name
of the client and server principals; etc.
.P
Before running the test, it is important to inspect the configuration file
to see if any changes should be made for the site at which the test is
to be performed. This is particularly important in regard to the environment
configuration information. For example, you may wish to use a different client
or server principal, a different CDS entry name, etc. All of these things,
if they are to be changed, must be changed in the configuration file before
running the test.
.P
Note that all machines that the test is to be run on must have identical
\*Lrpc.cds.3.conf\*O files.
...\" 
...\" 
...\" 
...\" 
...\" 
...\" ----------------------------------------------------------------------
.H 3 "Format of the Configuration File"
...\" ----------------------------------------------------------------------            
...\" 
.P
The contents of the test configuration file consist of text lines conforming
to normal Bourne shell syntax.
.P
Note, however, the following restriction. The configuration file, as implied
above, is read by shell scripts, and by the \*Lrpc.cds.3_cli\*O and
\*Lrpc.cds.3_srv\*O binary programs. In order to simplify the routine used by
these programs to read the file, lines that set values for the \*Lrpc.cds.3_cli\*O
and \*Lrpc.cds.3_srv\*O programs \*Vmust\*O be in one of the two following\
formats:
...\" 
.oS
    <string>=<string1>  # NOTE: in this case, string1 cannot
                        #       contain any spaces.
.oE
...\" 
...\" 
...\" 
.P
or:
...\" 
.oS
    <string>="<string1>"  # NOTE: in this case string1 may
                          #       contain spaces.
.oE
...\" 
...\" 
.P
Any lines that are not in this format will either be ignored by the routine
(\*Lrd_conf(\|)\*O, in the file \*Lrdconf.c\*O) that the client and server
use to read the configuration file, or will generate an error. Comments are
begun by a ``#'' character anywhere on a line, as shown above, and continue
to the end of the line.
...\" 
...\" 
...\" ----------------------------------------------------------------------
.H 3 "Contents of the Configuration File"
...\" ----------------------------------------------------------------------            
...\" 
.P
The assignments in the configuration file as it is shipped represent the
minimum set required to run the tests scripts and programs. You may add
to the configuration file, but you should not remove any of the original
assignments.
.P
The information in the configuration file determines the way that your Security
and CDS namespaces are set up. This being the case, you may want to modify the
configuration information to tailor the namespace to your preferences. If you do
not want to use the default values in the configuration file for the client or
server principal name, CDS directory, CDS name, or for any of the other
configuration file variables, you will have to modify the configuration file in
accordance with your preferences before running the setup script.
...\" 
...\" 
...\" 
.in -.5i
.TB "Contents of Configuration File"
.TS H
center tab(@) box;
lb | lb | lb
lb | lb | lb
lb | l | l.
Variable@@Default Value
in Config File@Description@as Shipped
_
.TH
_
RPCCDS3_PROT_LEVEL@Default protection level@none
_
RPCCDS3_CLI_PRINC_NAME@Client principal name@rpc.cds.3_cli
_
RPCCDS3_CLI_INIT_PW@Client initial password@"rpc&cdsC"
_
RPCCDS3_CLI_KEYTAB_DIRPATH@Directory for client keytab@/tmp
@@file
_
RPCCDS3_CLI_KEYTAB_FN@Client keytab file name@rpc.cds.3_cli.keytab
_
RPCCDS3_CLI_MACHINES@Client machine names@"machine1 machine2"
_
RPCCDS3_CLI_DEF_RUN_INTVL@Client interval to run@48 (hours)
_
RPCCDS3_CLI_DEF_REP_INTVL@Client report interval@60 (minutes)
_
RPCCDS3_CLI_SYNC_DELAY@Client start delay time after@60 (seconds)
@finding sync file
_
RPCCDS3_CLI_START_DELAY@Startup delay@180 (seconds)
_
RPCCDS3_CLI_CDS_CACHE_AGE@Maximum time that data can@5 (minutes)
@cached
_
RPCCDS3_SRV_PRINC_NAME@Server principal name@rpc.cds.3_srv
_
RPCCDS3_SRV_GROUP_NAME@Server Group@subsys/dce/cds-test-group
_
RPCCDS3_SRV_INIT_PW@Server initial password@"rpc&cdsS"
_
RPCCDS3_SRV_KEYTAB_DIRPATH@Directory for server keytab@/tmp
@file
_
RPCCDS3_SRV_KEYTAB_FN@Server keytab file name@rpc.cds.3_srv.keytab
_
RPCCDS3_SRV_MACHINES@Server machine names@"machine1"
_
RPCCDS3_SRV_CDS_NAME@Server interface name@/.:/test/systest/srv_ifs\\
@@   /rpccds3_if
_
RPCCDS3_SRV_OBJ_DIR@Directory for server objects@/.:/test/systest\\
@@   /srv_objs/rpccds3
_
RPCCDS3_SRV_CAL_DATA@Calendar data file names@``rpc.cds.3_cal1.data\\
@@rpc.cds.3_cal2.data\\
@@rpc.cds.3_cal3.data''
_
RPCCDS3_SRV_CALSEQ@Starting calendar sequence@1
@number
_
RPCCDS3_SRV_NCALS@Number of calendar objects@200
_
RPCCDS3_SRV_CDS_DIR_ACL@Directory ACL@rwditca
_
RPCCDS3_SRV_CALL_DELAY@Server call duration@2 (seconds)
_
RPCCDS3_SRV_CDS_IO_ACL@Initial object ACL@rwdtc--
_
RPCCDS3_SRV_MAX_CALLS@Maximum concurrent calls for@5
@server
_
RPCCDS3_SRV_MAX_EXEC@Maximum concurrent execs for@1
@server
_
RPCCDS3_BIN_DIRPATH@Directory for binaries@/dcetest/dcelocal/test\\
@@   /tet/system/rpc\\
@@      /ts/rpc.cds.3
_
RPCCDS3_TMP_DIRPATH@Directory for tmp files@/dcetest/dcelocal/tmp
_
RPCCDS3_LOG_DIRPATH@Directory for log files@/dcetest/dcelocal/status
...\" 
...\" 
.TE
.in +.5i
...\" 
...\" 
...\" 
...\" 
...\" ----------------------------------------------------------------------
.H 3 "Setting Up to Run the RPC-CDS System Test"
...\" ----------------------------------------------------------------------
...\" 
.P
Before you can run the \*Lrpc.cds.3\*O system test, certain objects in the
CDS namespace and certain accounts in the Security registry must exist. The
following table describes these necessary items, as well as the variables in
the configuration file relevant to the creation of these objects, and the
default values of these variables (i.e. the values in the file as shipped).
Note that the required objects are created from the specified values
automatically by the \*Lrpc.cds.3_setup.sh\*O script described below.
.P
The configuration file describes the parameters and environment for running
the \*Lrpc.cds.3\*O system test. Customization of this file for your site
characteristics and testing requirements is the only prerequisite for
running the \*Lrpc.cds.3_setup.sh\*O script, which will setup your DCE cell
to run the \*Lrpc.cds.3\*O system test.
...\" 
...\" 
...\" 
...\" 
...\" ----------------------------------------------------------------------
...\" Table of Required Objects
...\" ----------------------------------------------------------------------
...\" 
.br
.ne 30
.TB "Objects Required by the rpc.cds.3 System Test"
.TS H
center tab(@) box;
lb | lb | lb
lb | lb | lb
l | lb | l.
DCE Object@Variable in@Default value
Needed@config file@as shipped
_
.TH
_
Server principal and@RPCCDS3_SRV_PRINC_NAME@rpc.cds.3_srv
account
_
Client principal and@RPCCDS3_CLI_PRINC_NAME@rpc.cds.3_cli
account
_
Group for the@RPCCDS3_SRV_GROUP_NAME@subsys/systest/cds_test
server test
_
Server key file@RPCCDS3_SRV_KEYTAB_FN@rpc.cds.3_srv.keytab
_
Server key file@RPCCDS3_SRV_KEYTAB_DIRPATH@/tmp
directory
_
Client key file@RPCCDS3_CLI_KEYTAB_FN@rpc.cds.3_cli.keytab
_
Client key file@RPCCDS3_CLI_KEYTAB_DIRPATH@/tmp
directory
_
CDS directory for@RPCCDS3_SRV_CDS_NAME@/.:/test/systest/srv_ifs/rpccds3_if
server interface@@
object
_
CDS directory for@RPCCDS3_SRV_OBJ_DIR@/.:/test/systest/srv_objs/rpccds3
calendar objects@@
exported by server
...\" 
...\" 
.TE
...\" 
...\" 
...\" ----------------------------------------------------------------------
.H 3 "Running the rpc.cds.3_setup.sh Setup Script"
...\" ----------------------------------------------------------------------
...\" 
.P
Make sure that the machine on which \*Lrpc.cds.3_setup.sh\*O will be run
can \*Lrsh\*O to the client machines for the test.
.P
Note that both the setup script and the test assume that you have a DCE
cell up and running.
...\" 
.P
If you wish to use a configuration file with a name other than
\*Lrpc.cds.3.conf\*O, then you can specify the desired name by assigning it
to the environment variable \*LRPCCDS3_CONF\*O before running the setup
script, or the name can be specified on the command line with the \*L-f\*O
option.
.P
In order to run the \*Lrpc.cds.3_setup.sh\*O script, you must \*Ldce_login\*O
as the \*Lcell_admin\*O principal. This is necessary because you will be creating 
DCE accounts during the setup, and this requires special privileges. During
execution of the setup script you will be prompted twice for the \*Lcell_admin\*O
password. If you want to skip these prompts, you must modify the 
\*Lrpc.cds.3_sec_util.sh\*O script; see the comments to the shell function
\*Lrpccds3_sec_add_account\*O there for details on the modifications required.
After you are \*Ldce_login\*Oed, make sure that the path to the directory
containing the \*Lrpc.cds.3\*O scripts and the configuration file is in your
execution path.
.P
Now you can simply type:
.iS
    rpc.cds.3_setup.sh -B \*Vpath
.iE
.P
(where \*Vpath\*O is the path to the \*Lrpc.cds.3\*O binaries and scripts
on the client machines). The setup script assumes that the configuration
file is in the same directory as are the \*Lrpc.cds.3\*O binaries on each
client test machine. If this is not the case, then the path to the configuration
file (which \*Vmust\*O be the same on all test machines) must be specified
with the \*L-f\*O option.
.P
Enter the \*Lcell_admin\*O password when prompted, and, if no errors are
reported, your cell will be set up to run the \*Lrpc.cds.3\*O system test.
Note that the setup can be repeated as many times as necessary without adverse
effect.
...\" 
...\" 
...\" 
...\" ----------------------------------------------------------------------
.H 3 "Starting the Servers"
...\" ----------------------------------------------------------------------
...\" 
.P
Once the setup script has been successfully executed, the servers must be started.
This is done as follows.
.P
On the machines specified in the configuration file or through the \*L-R\*O switch
on the command line, you must run \*Lrpc.cds.srv\*O using the appropriate server
options described in the ``Test Options'' section. The output from \*Lrpc.cds.3_srv\*O
should be redirected into a file for future reference.
.P
For example:
...\" 
.iS
    rpc.cds.3_srv -I 1 -n 20 > /dcetest/dcelocal/tmp/rpc.cds.3_srv.log
.iE
...\" 
.P
The above command specifies 20 calendars, starting with the sequence number 1.
The rest of the parameters have been specified in the example configuration file.
...\" 
...\" 
...\" ----------------------------------------------------------------------
.H 3 "Starting the Clients"
...\" ----------------------------------------------------------------------
...\" 
.P
Starting the clients is done similarly to the servers.
.P
On the machines specified as clients, you must run \*Lrpc.cds.3_cli\*O using the
client options described in the ``Test Options'' section. You can start multiple
clients on the samemachine. Again, you should redirect the output to a file for
future reference.
.P
For example:
...\" 
.iS
    rpc.cds.3_cli -I 1 -n 20 -P datagram > /dcetest/dcelocal/tmp/cli_log\*Vpid\*L.1
.iE
...\" 
.P
The above command specifies 20 calendars, starting with sequence number 1. The
\*Lncadg_ip_udp\*O protocol is also specified on this command line.
...\" 
...\" 
...\" 
...\" 
...\" 
...\" 
...\" ----------------------------------------------------------------------
.H 3 "Analyzing the Results"
...\" ----------------------------------------------------------------------
...\" 
.P
If you are not running the test in boundary mode, then after all the clients have
exited, you can generate a report of the results of the test by executing the
following commands in a Bourne or Korn shell:
...\" 
.iS
    \*C$ \*Lcd \*Vlogdir
.iE
...\" 
...\" 
.iS
    \*C$ \*Lfor i in `ls cli_log\*Vpid\*L.*'
    \*C> \*Ldo
    \*C> \*Lgrep -v READY $i | awk -f \*Vbindir\*L/rpc.cds.3_gen_summ.awk >> run\*Vpid\*L.summ
    \*C> \*Ldone
.iE
...\" 
...\" 
.iS
    \*C$ \*Lawk -f \*Vbindir\*L/rpc.cds.3_gen_rep.awk run\*Vpid\*L.summ > run\*Vpid\*L.results
.iE
...\" 
...\" 
.P
where \*Vpid\*O is the process id of the driver script.
.P
Note that this sequence of commands can be run at any time during the test run to
obtain a report on the current status of the clients as of the last time that
reports were generated. If up-to-the-minute status is desired, then executing:
...\" 
.iS
    kill -3 \*V<pids>
.iE
...\" 
.P
(where \*V<pids>\*O is the process ids of all the clients running on
a particular machine) should be run on each machine in the test to cause the
clients on that machine to generate a current status line in the log file.
Then the \*Lfor\*O loop and \*Lawk\*O command combination described above can
be used to generate a current status report. 
...\" 
...\" 
...\" 
...\" 
...\" 
...\" 
...\" 
...\" 
...\" 
...\" ----------------------------------------------------------------------
.H 3 "Implementation Notes"
...\" ----------------------------------------------------------------------
...\" 
.P
As shipped, the \*Lrpc.cds.3\*O test exerts stress on the CDS clerk and
(indirectly) on the CDS clearinghouse. Other stresses can be induced by
running the test in a manner different from the way it runs as shipped.
For example:
...\" 
...\" 
.BL
.LI
If you want to stress the system and the CDS clearinghouse by running
multiple CDS clerk processes, you can invoke different test clients with
different UIDs on the same machine. The CDS advertiser process will start
a new CDS clerk for each different UID for which a CDS operation is
requested.
.LI
If you want to stress the CDS clerk caching and ACL mechanisms, you can
run a number of test clients with different UIDs accessing the same object
or objects.
.LE
...\" 
.P
If you wish to have more than one server exporting objects to the namespace for
this test, it is a good idea to use a different configuration file for each server,
each specifying a different server CDS name. This makes administration of the
namespace easier because the RPC API does not (for a number of reasons) provide
a way to remove some bindings from a CDS entry; all or none must be removed.
This means that if two servers export bindings to the same namespace entry, and
one of the servers later terminates, you cannot remove that server's bindings
from the entry while preserving the other server's bindings. On the other hand,
leaving the entry as it is means that clients can still import (and attempt to
use) the invalid bindings. The only thing that can be done in such a situation
is remove, and then re-export, all of the bindings.
...\" 
...\" 
...\" 
...\" .zA "edit,8143,1.0.2a,added material from 1.0.2 Release Notes"
...\" 
...\" ----------------------------------------------------------------------
.H 3 "Runtime Error Handling"
...\" ----------------------------------------------------------------------
...\" 
.P
The spurious test failure scenario described earlier for \*Lrpc.sec.2\*O can
also occur with \*Lrpc.cds.3\*O, for the same reason: the \*Lrpc.cds.3\*O
clients do not currently perform any error handling of the communication status
value returned from a remote call. This scenario can probably be avoided if you
add code to handle the three following errors:
...\" 
...\" 
.BL
...\" 
.LI
\*Lrpc_s_server_too_busy\*O
.P
(Returned only by TCP clients.) The server does not have a thread available to
service the client request, nor does it have space in any call request buffer to
queue the request. When a test client receives this error, it will go into a tight
loop as described in the previous section, making RPCs and continuing to receive
this same status, until sufficient resources are freed at the server to permit the
call to be serviced or queued. While testing did not prove this looping to have a
significant impact on the overall success rate of the TCP clients, it is wasteful
of CPU cycles. One way to avoid the tight looping would be to have the TCP clients
wait for a few seconds if they receive this status before doing anything. Another
approach would be to allocate more server threads to begin with, and thus avoid the
situation altogether.
...\" 
.LI
\*Lrpc_s_connection_closed\*O
.P
A protocol error has occurred in the connection to the server. This means (with a
connection-oriented protocol) that the binding to the server has become permanently
useless, and the thread in the server runtime that listens for connection-oriented
protocol requests is probably unavailable, so that no connection-oriented protocol
calls will succeed. The only remedy for this condition is for the server to re-export
its binding handles.
...\" 
.LI
\*Lrpc_s_auth_tkt_expired\*O
.P
The client's network credentials (i.e., ticket) have expired. The client thread
receiving this error can recover from the situation by notifying the ticket maintainance
thread that it should now refresh the ticket.
...\" 
.LE
...\" 
...\" 
...\" .zZ "edit,8143,1.0.2a,added material from 1.0.2 Release Notes"
...\" ----------------------------------------------------------------------
