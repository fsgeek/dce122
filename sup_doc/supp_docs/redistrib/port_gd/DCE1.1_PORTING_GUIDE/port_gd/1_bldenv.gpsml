...\"
...\"  @OSF_COPYRIGHT@
...\"  COPYRIGHT NOTICE
...\"  Copyright (c) 1990, 1991, 1992, 1993, 1994 Open Software Foundation, Inc.
...\"  ALL RIGHTS RESERVED (DCE).  See the file named COPYRIGHT.DCE in the
...\"  src directory for the full copyright text.
...\"
...\"
...\" HISTORY
...\" $Log: 1_bldenv.gpsml,v $
...\" Revision 1.1.9.19  1994/10/30  22:47:32  weir
...\" 	Last updates
...\" 	[1994/10/30  22:46:27  weir]
...\"
...\" Revision 1.1.9.18  1994/10/30  16:25:33  weir
...\" 	Updates
...\" 	[1994/10/30  16:24:12  weir]
...\" 
...\" Revision 1.1.9.17  1994/10/29  23:25:54  weir
...\" 	More Updates
...\" 	[1994/10/29  23:24:37  weir]
...\" 
...\" Revision 1.1.9.16  1994/10/28  20:50:11  weir
...\" 	DCE 1.1 updates
...\" 	[1994/10/28  20:48:50  weir]
...\" 
...\" Revision 1.1.9.15  1994/10/26  20:40:47  weir
...\" 	DCE 1.1 Updates
...\" 	[1994/10/26  20:39:22  weir]
...\" 
...\" Revision 1.1.9.14  1994/10/14  18:38:52  weir
...\" 	Minor edit changes
...\" 	[1994/10/14  18:37:45  weir]
...\" 
...\" Revision 1.1.9.13  1994/06/20  20:28:44  weir
...\" 	Beta Update
...\" 	[1994/06/20  20:27:24  weir]
...\" 
...\" Revision 1.1.9.12  1994/06/19  20:53:55  weir
...\" 	Beta Update
...\" 	[1994/06/19  20:52:48  weir]
...\" 
...\" Revision 1.1.9.11  1994/06/17  13:50:22  weir
...\" 	Beta Update
...\" 	[1994/06/17  13:48:53  weir]
...\" 
...\" Revision 1.1.9.10  1994/06/12  17:32:00  weir
...\" 	No change-- for copyright insertion
...\" 	[1994/06/12  17:30:35  weir]
...\" 
...\" Revision 1.1.9.9  1994/06/08  18:47:20  weir
...\" 	Beta Update
...\" 	[1994/06/08  18:46:16  weir]
...\" 
...\" Revision 1.1.9.8  1994/06/02  21:13:01  weir
...\" 	Beta Updates
...\" 	[1994/06/02  21:11:22  weir]
...\" 
...\" Revision 1.1.9.7  1994/05/03  19:00:20  weir
...\" 	Reorganization
...\" 	[1994/05/03  18:59:06  weir]
...\" 
...\" Revision 1.1.9.6  1994/04/07  19:57:34  rom
...\" 	{enh, 10306, R1.1}
...\" 	Add missing change bar.
...\" 	[1994/04/07  19:14:40  rom]
...\" 
...\" 	{enh, 10306, R1.1}
...\" 	Remove diskless documentation from the DCE doc set.
...\" 	[1994/04/07  18:36:43  rom]
...\" 
...\" Revision 1.1.9.5  1993/11/15  15:17:27  weir
...\" 	Editorial fix to filenames
...\" 	[1993/11/15  15:16:30  weir]
...\" 
...\" Revision 1.1.9.4  1993/11/08  22:11:44  weir
...\" 	1.0.3 Updates
...\" 	[1993/11/08  22:10:10  weir]
...\" 
...\" Revision 1.1.9.3  1993/11/03  18:50:55  weir
...\" 	{def,9323,R1.0.3}
...\" 	First set of DCE 1.0.3 updates
...\" 	[1993/11/03  18:48:56  weir]
...\" 
...\" Revision 1.1.9.2  1993/09/21  15:03:13  weir
...\" 	Nothing changed
...\" 	[1993/09/21  15:01:31  weir]
...\" 
...\" Revision 1.1.4.29  1993/03/24  20:21:54  weir
...\" 	Updates
...\" 	[1993/03/19  16:56:16  weir]
...\" 
...\" Revision 1.1.4.28  1993/03/17  19:49:25  weir
...\" 	Updates
...\" 	[1993/03/17  19:45:37  weir]
...\" 
...\" Revision 1.1.4.27  1993/03/15  22:58:20  weir
...\" 	One change
...\" 	[1993/03/15  22:57:32  weir]
...\" 
...\" Revision 1.1.4.26  1993/03/15  22:23:51  weir
...\" 	New fixes
...\" 	[1993/03/15  22:20:10  weir]
...\" 
...\" Revision 1.1.4.25  1993/03/12  20:46:35  weir
...\" 	More fixes
...\" 	[1993/03/12  20:42:56  weir]
...\" 
...\" Revision 1.1.4.24  1993/03/12  18:37:54  weir
...\" 	New additions etc.
...\" 	[1993/03/12  18:29:32  weir]
...\" 
...\" Revision 1.1.4.23  1993/03/11  00:00:15  weir
...\" 	More additions
...\" 	[1993/03/10  23:56:25  weir]
...\" 
...\" Revision 1.1.4.22  1993/03/09  22:32:24  weir
...\" 	More additions
...\" 	[1993/03/09  22:28:17  weir]
...\" 
...\" Revision 1.1.4.21  1993/03/05  22:10:27  weir
...\" 	New additions
...\" 	[1993/03/05  22:06:25  weir]
...\" 
...\" Revision 1.1.4.20  1993/02/26  21:43:01  weir
...\" 	More changes
...\" 	[1993/02/26  21:41:48  weir]
...\" 
...\" Revision 1.1.4.19  1993/02/26  16:07:53  weir
...\" 	New additions
...\" 	[1993/02/26  15:43:25  weir]
...\" 
...\" Revision 1.1.4.18  1993/02/19  21:38:41  weir
...\" 	Fixed typo
...\" 	[1993/02/19  21:37:44  weir]
...\" 
...\" Revision 1.1.4.17  1993/02/19  21:23:21  weir
...\" 	Minor changes
...\" 	[1993/02/19  21:17:29  weir]
...\" 
...\" Revision 1.1.4.16  1993/02/18  21:59:28  weir
...\" 	Review changes
...\" 	[1993/02/18  21:56:22  weir]
...\" 
...\" Revision 1.1.4.15  1993/02/17  14:25:08  weir
...\" 	Safety checkin
...\" 	[1993/02/17  14:23:25  weir]
...\" 
...\" Revision 1.1.4.14  1993/02/12  16:11:53  weir
...\" 	Ref platform fix
...\" 	[1993/02/12  16:11:00  weir]
...\" 
...\" Revision 1.1.4.13  1993/02/11  01:08:40  weir
...\" 	Fixes and additions
...\" 	[1993/02/11  01:05:19  weir]
...\" 
...\" Revision 1.1.4.12  1993/02/02  21:46:35  weir
...\" 	Added performance section
...\" 	[1993/02/02  21:45:31  weir]
...\" 
...\" Revision 1.1.4.11  1993/02/02  19:09:07  weir
...\" 	Small format changes
...\" 	[1993/02/02  19:07:18  weir]
...\" 
...\" Revision 1.1.4.10  1993/02/01  22:55:12  weir
...\" 	Additional small changes
...\" 	[1993/02/01  22:54:14  weir]
...\" 
...\" Revision 1.1.4.9  1993/02/01  21:57:02  weir
...\" 	Message catalog material
...\" 	[1993/02/01  21:55:45  weir]
...\" 
...\" Revision 1.1.4.8  1993/01/30  00:01:52  weir
...\" 	Drop for first review
...\" 	[1993/01/29  23:47:45  weir]
...\" 
...\" Revision 1.1.4.7  1993/01/28  21:43:19  cjd
...\" 	Embedded copyright notice
...\" 	[1993/01/28  21:34:11  cjd]
...\" 
...\" Revision 1.1.4.6  1993/01/27  21:33:47  weir
...\" 	First draft changes
...\" 	[1993/01/27  21:26:41  weir]
...\" 
...\" Revision 1.1.4.5  1993/01/25  14:27:34  weir
...\" 	Small changes
...\" 	[1993/01/25  14:26:26  weir]
...\" 
...\" Revision 1.1.4.4  1993/01/22  16:26:07  zahn
...\" 	[zahn] bci w/out nolog to fix bsubmit problem
...\" 	[1993/01/22  16:17:00  zahn]
...\" 
...\" 	[zahn] added SVR4 information
...\" 	[1993/01/20  19:24:32  zahn]
...\" 
...\" Revision 1.1.4.3  1993/01/04  15:04:51  weir
...\" 	Nothing changed
...\" 	[1993/01/04  15:03:51  weir]
...\" 
...\" Revision 1.1.4.2  1992/09/14  17:52:57  weir
...\" 	Removed change bar macros; moved into 1.0.2doc tree
...\" 	[1992/09/14  17:48:21  weir]
...\" 
...\" Revision 1.1.2.9  1992/07/31  19:58:02  steiner
...\" 	Fixed XOM acronym.
...\" 	[1992/07/31  19:02:19  steiner]
...\" 
...\" Revision 1.1.2.8  1992/07/14  17:43:00  steiner
...\" 	Comments from Jim Wade et al.
...\" 	[1992/07/14  17:42:13  steiner]
...\" 
...\" Revision 1.1.2.7  1992/06/30  20:24:40  steiner
...\" 	Added debugging hints, fixed change bars.
...\" 	[1992/06/30  20:24:14  steiner]
...\" 
...\" Revision 1.1.2.6  1992/06/19  19:08:51  steiner
...\" 	Replaced description of distribution tape contents
...\" 	with a pointer to the Release Notes.
...\" 	[1992/06/19  19:08:24  steiner]
...\" 
...\" Revision 1.1.2.5  1992/06/15  16:34:02  steiner
...\" 	Minor fixes from Howard.
...\" 	[1992/06/12  18:32:02  steiner]
...\" 
...\" Revision 1.1.2.4  1992/06/10  20:10:32  steiner
...\" 	Comments from Howard Melman, some edits, also
...\" 	created a "pic" file for the srctree figure and
...\" 	an xpic file that goes with it.
...\" 	[1992/06/10  20:10:04  steiner]
...\" 
...\" Revision 1.1.2.3  1992/06/03  02:00:07  oaf
...\" 	Fixed	chapter number.
...\" 	Fixed	figure 1-1 (misplaced line).
...\" 	Fixed 	libdce listing (accidentally commented out).
...\" 	Fixed	misspelling (envrironment, p. 1-5).
...\" 
...\" 	Commented out notes on AT&T licensing (unnecessary) for ODE.
...\" 	Unified references to other chapters:
...\" 		WAS	... "Chapter X. YYYYY" ...
...\" 		IS	... chapter X, "YYYYY" ...
...\" 	[1992/06/02  18:19:06  oaf]
...\" 
...\" Revision 1.1.2.2  1992/05/10  22:24:23  oaf
...\" 	CR2859		Repaired typos, misspellings, language errors.
...\" 	[1992/05/10  22:11:10  oaf]
...\" 
...\" Revision 1.1  1992/01/29  15:39:51  damon
...\" 	Initial revision
...\" 
...\" $EndLog$
...\"
...\" Copyright (c) 1991, Open Software Foundation, Inc. ALL RIGHTS RESERVED
...\" Copyright (c) 1991, International Business Machines Corporation. ALL RIGHTS RESERVED
...\"
...\" 
...\" 
...\" 
...\" ----------------------------------------------------------------------
.H 1 "Introduction to Porting DCE"
...\" ----------------------------------------------------------------------
...\" 
.P
Welcome to the Distributed Computing Environment (DCE). The \*VOSF DCE
Porting and Testing Guide\*O contains information and procedures to assist
developers porting DCE to a new platform. It also provides information on
the OSF Development Environment (ODE) tools that are used for developing
and building the DCE components on the reference platforms.
...\" 
...\" 
...\" ----------------------------------------------------------------------
.H 2 "DCE Sources"
...\" ----------------------------------------------------------------------
...\" 
.P
DCE consists of the files provided on the release tape. The \*VOSF DCE Release
Notes\*O describe problems, system dependencies, and other items of immediate
interest in regard to the current version of DCE. You should read the \*VRelease
Notes\*O before you read any other DCE documentation.
...\" 
...\" 
...\" 
...\" ----------------------------------------------------------------------
.H 3 "DCE Reference Ports"
...\" ----------------------------------------------------------------------
...\" 
.P
...\" 
...\" 
.iX "reference ports"
.iX "ports, reference"
...\" .zA "enh,5724,R1.0.2,add SVR4 port info"
...\" .zA "def,9323,R1.0.3,add new ref platforms"
There are currently four DCE reference ports:
.ML
.LI
One for the HP/UX 9.0.1 operating system running on the HP 9000 Series 700.
.LI
One for the AIX 3.2.4 operating system running on the IBM RISC System/6000.
.LI
One for the OSF/1 1.2 operating system running on the DECpc 450ST (an Intel
486-based machine).
.LI
One for the SINIX 5.41 operating system running on the MX300i (an Intel
486-based machine).
.P
SINIX 5.41 is based on the System V, Release 4.0, Version 3.0 operating
system which was developed by UNIX System Laboratories, Inc (USL). The SINIX
reference
.zA "enh, 10306, R1.1, remove diskless documentation"
port does not include a port of the DFS component, nor does it include ports
of the DCE system tests.
.zZ "enh, 10306, R1.1, remove diskless documentation"
...\" 
...\" or the NCS 1.5.1 compatibility software.
...\" 
.LE
...\" .zZ "def,9323,R1.0.3,add new ref platforms"
...\" .zZ "enh,5724,R1.0.2,add SVR4 port info"
...\" 
...\" 
...\" 
...\" ----------------------------------------------------------------------
.H 3 "The Release Tape" 
...\" ----------------------------------------------------------------------
...\" 
.iX "release tape tar archives"
The DCE release tape typically contains several \*Ltar\*O images, including
images containing documentation source and output, code source files, tools,
and defect fixes that were made too late to be included into the source trees.
For more detailed information about the archives on the distribution tape,
see the \*VDCE Release Notes\*O.
...\" 
...\" 
...\" ----------------------------------------------------------------------
.H 3 "The DCE src Tree"
...\" ----------------------------------------------------------------------
...\" 
.P
.iX "src source tree"
Figure 1-1 depicts the code source directory tree found in the \*Lsrc\*O archive
of the DCE release tape.
...\" 
...\" 
.zA "enh, 10306, R1.1, remove diskless documentation"
...\" 
...\" ------------------------------------
...\" ----------------------------------------------------------------------
...\" Figure: Showing code tree
...\" ----------------------------------------------------------------------
...\" ------------------------------------
...\" 
.in -2.5i
.DS
.PS
scale = 80
line   from 300, 420 \
	to 300, 196 
line   from 180, 140 \
	to 180, 44 
"\fR\s10Makefile\s10\fR"  at 132, 4
"\fR\s10cds\s10\fR"  at 164, 4
"\fR\s10gds\s10\fR"  at 196, 4
"\fR\s10xds\s10\fR"  at 228, 4
line   from 132, 44 \
	to 228, 44 
line   from 132, 44 \
	to 132, 12 
line   from 164, 44 \
	to 164, 12 
line   from 196, 44 \
	to 196, 12 
line   from 228, 44 \
	to 228, 12 
line   from 36, 196 \
	to 572, 196 
line   from 572, 196 \
	to 572, 156 
line   from 532, 196 \
	to 532, 156 
line   from 500, 196 \
	to 500, 156 
line   from 476, 196 \
	to 476, 156 
line   from 444, 196 \
	to 444, 156 
line   from 396, 196 \
	to 396, 156 
line   from 348, 196 \
	to 348, 156 
line   from 316, 196 \
	to 316, 156 
"\fR\s10config\s10\fR"  at 532, 148
"\fR\s10tet\s10\fR"  at 500, 148
"\fR\s10lib\s10\fR"  at 476, 148
"\fR\s10include\s10\fR"  at 444, 148
"\fR\s10functional\s10\fR"  at 396, 148
"\fR\s10systest\s10\fR"  at 348, 148
"\fR\s10dce\s10\fR"  at 316, 148
line   from 260, 196 \
	to 260, 156 
line   from 220, 196 \
	to 220, 156 
line   from 180, 196 \
	to 180, 156 
line   from 140, 196 \
	to 140, 156 
line   from 108, 196 \
	to 108, 156 
"\fR\s10file\s10\fR"  at 292, 148
"\fR\s10security\s10\fR"  at 260, 148
"\fR\s10time\s10\fR"  at 220, 148
"\fR\s10directory\s10\fR"  at 180, 148
"\fR\s10rpc\s10\fR"  at 140, 148
"\fR\s10threads\s10\fR"  at 108, 148
line   from 68, 196 \
	to 68, 156 
line   from 36, 196 \
	to 36, 156 
"\fR\s10admin\s10\fR"  at 68, 148
"\fR\s10tools\s10\fR"  at 36, 148
line   from 292, 196 \
	to 292, 156 
"\fR\s10sample\s10\fR"  at 572, 148
line   from 28, 476 \
	to 28, 340 
line   from 28, 340 \
	to 44, 340 
line   from 28, 356 \
	to 44, 356 
line   from 28, 372 \
	to 44, 372 
line   from 28, 388 \
	to 44, 388 
"\fR\s10COPYRIGHT.DCE\s10\fR"  at 100, 340
"\fR\s10README\s10\fR"  at 76, 356
"\fR\s10Makefile\s10\fR"  at 76, 372
"\fR\s10Makeconf\s10\fR"  at 76, 388
line   from 300, 476 \
	to 300, 436 
"\fR\s10test\s10\fR"  at 300, 428
"\fR\s10nosupport\s10\fR"  at 372, 404
"\fR\s10dce\s10\fR"  at 276, 668
line   from 276, 532 \
	to 276, 476 
line   from 396, 596 \
	to 396, 556 
line   from 356, 596 \
	to 356, 556 
line   from 316, 596 \
	to 316, 556 
line   from 276, 596 \
	to 276, 556 
"\fR\s10tools\s10\fR"  at 396, 540
"\fR\s10rc_files\s10\fR"  at 356, 540
"\fR\s10obj\s10\fR"  at 316, 540
"\fR\s10src\s10\fR"  at 276, 540
"\fR\s10logs\s10\fR"  at 236, 540
"\fR\s10install\s10\fR"  at 196, 540
"\fR\s10export\s10\fR"  at 156, 540
line   from 156, 596 \
	to 156, 556 
line   from 196, 596 \
	to 196, 556 
line   from 236, 596 \
	to 236, 556 
line   from 276, 660 \
	to 276, 596 
line   from 12, 476 \
	to 564, 476 
line   from 364, 476 \
	to 364, 412 
line   from 12, 476 \
	to 12, 436 
"\fR\s10tools\s10\fR"  at 12, 428
"\fR\s10libdcedfs\s10\fR"  at 564, 428
"\fR\s10admin\s10\fR"  at 44, 428
line   from 44, 476 \
	to 44, 436 
"\fR\s10import\s10\fR"  at 84, 428
line   from 84, 476 \
	to 84, 436 
"\fR\s10threads\s10\fR"  at 124, 428
line   from 124, 476 \
	to 124, 436 
"\fR\s10rpc\s10\fR"  at 156, 428
line   from 156, 476 \
	to 156, 436 
"\fR\s10directory\s10\fR"  at 196, 428
line   from 196, 476 \
	to 196, 436 
"\fR\s10time\s10\fR"  at 236, 428
line   from 236, 476 \
	to 236, 436 
line   from 564, 476 \
	to 564, 436 
"\fR\s10libdce\s10\fR"  at 524, 428
line   from 524, 476 \
	to 524, 436 
"\fR\s10lbe\s10\fR"  at 492, 428
line   from 492, 476 \
	to 492, 436 
"\fR\s10config\s10\fR"  at 412, 428
line   from 412, 476 \
	to 412, 436 
"\fR\s10file\s10\fR"  at 380, 428
line   from 380, 476 \
	to 380, 436 
"\fR\s10security\s10\fR"  at 340, 428
line   from 340, 476 \
	to 340, 436 
"\fR\s10dce\s10\fR"  at 268, 428
line   from 268, 476 \
	to 268, 436 
line   from 436, 596 \
	to 436, 556 
line   from 156, 596 \
	to 436, 596 
"\fR\s10.sandboxrc\s10\fR"  at 436, 540
line   from 452, 476 \
	to 452, 436 
"\fR\s10SVR4\s10\fR"  at 452, 428
"\fR\s10Makefile\s10\fR"  at 76, 260
line   from 76, 300 \
	to 268, 300 
line   from 76, 300 \
	to 76, 268 
"\fR\s10xoms\s10\fR"  at 268, 260
"\fR\s10xmh\s10\fR"  at 236, 260
"\fR\s10xom\s10\fR"  at 204, 260
"\fR\s10xds\s10\fR"  at 172, 260
"\fR\s10gds\s10\fR"  at 140, 260
"\fR\s10cds\s10\fR"  at 108, 260
line   from 108, 300 \
	to 108, 268 
line   from 140, 300 \
	to 140, 268 
line   from 172, 300 \
	to 172, 268 
line   from 204, 300 \
	to 204, 268 
line   from 236, 300 \
	to 236, 268 
line   from 268, 300 \
	to 268, 268 
line   from 196, 420 \
	to 196, 300 
line   from 52, 196 \
	to 52, 76 
"\fR\s10Makefile\s10\fR"  at 100, 108
"\fR\s10TestSummary\s10\fR"  at 116, 92
"\fR\s10test.mk\s10\fR"  at 100, 76
line   from 52, 108 \
	to 68, 108 
line   from 52, 92 \
	to 68, 92 
line   from 52, 76 \
	to 68, 76 
.PE
.DE
.sp
.in +2.5i
.FG "DCE src Tree Structure"
...\" ----------------------------------------------------------------------
...\" 
...\" 
...\" 
.zZ "enh, 10306, R1.1, remove diskless documentation"
...\" 
...\" 
.P
All items in Figure 1-1 represent directories, not individual files.
...\" 
...\" 
.BL
.LI
The \*Lthreads\*O directory contains code for the user-level multithread
support for the DCE components.
.LI
The \*Ldce\*O directory contains code for the DCE Serviceability API, and
the DCE ACL Facility and Backing Store library.
.LI
The \*Ladmin\*O directory contains code for \*Ldcecp\*O (the DCE Command
Program) and \*Ldced\*O (the DCE daemon).
.LI
The \*Lrpc\*O directory contains code for the DCE Interface Definition Language
(IDL) compiler, user-mode Remote Procedure Call (RPC) libraries,  kernel-mode RPC
libraries, the RPC control program (\*Lrpccp\*O), and the \*Luuidgen\*O command.
.LI
The \*Ldirectory\*O tree contains the code for Cell Directory Service (CDS) and
Global Directory Service (GDS). It also contains DCE X/Open Directory Service (XDS)
library and DCE X/Open OSI-Abstract-Data Manipulation (XOM) library source code.
.LI
The \*Ltime\*O directory contains Distributed Time Service (DTS)
code for maintaining synchronized time on machines that use DCE.
.LI
The \*Lsecurity\*O directory contains code for the DCE Security Service and for the
DCE Audit Service.
.LI
The \*Lfile\*O directory contains code for DCE Distributed File Service
(DFS).
.zA "enh, 10306, R1.1, remove diskless documentation"
.zZ "enh, 10306, R1.1, remove diskless documentation"
.LI
The \*Ltest\*O directory contains system test cases and test suites for each
component.
...\" 
...\" 
...\" 
.LI
The \*Llbe\*O directory contains the sources for building the \*Lmake\*O used
to build DCE and the common \*LMakefile\*Os that set up and control the
environment for building the entire DCE.
...\" 
...\" 
...\" 
.LI
The \*Lconfig\*O directory contains code and scripts for DCE
configuration.
...\" 
...\"	.LI
...\"	The \*Lsetup\*O directory contains scripts for building DCE in
...\"	the Licensee Build Environment (LBE).
...\" 
.LI
The \*Llibdce\*O directory contains a \*LMakefile\*O that builds the
\*Llibdce.a\*O library, a master library made up of other DCE libraries.
DCE executables and application programmers use the contents of the
\*Llibdce.a\*O directory to access DCE services.
...\" 
...\" 
...\" 
.LI
The \*Ltools\*O directory contains the source files for \*Lsams\*O, the
DCE message catalog-generating utility.
...\" 
...\" 
.LI
The \*LSVR4\*O directory contains files used to build DCE for the SINIX 5.41
operating system.
...\" 
...\" 
.LI
The \*Lnosupport\*O directory contains code used to build various unsupported
tools for DCE 1.1, such as \*Lrpcd\*O (superseded in DCE 1.1 by \*Ldced\*O),
some Pthreads extensions, and so on. A \*LREADME\*O file in this directory
further explains the directory's contents.
...\" 
...\" 
.LI
The \*Lexamples\*O directory contains source code for various example DCE
applications.
...\" 
...\" 
.LI
The \*Llibdcedfs\*O directory contains code used to build \*Llibdce\*O for
DFS.
...\" 
...\" 
...\" 
.LE
...\" 
...\" 
...\" 
...\" ----------------------------------------------------------------------
.H 2 "Building and Using DCE Development Tools"
...\" ----------------------------------------------------------------------
...\" 
.iX "ODE"
.iX "-: ODE" "OSF Development Environment"
...\" 
.P
The OSF Development Environment (ODE) is packaged with DCE in a separate
archive on the DCE distribution tape. ODE is the development environment
used to code, build, and test OSF offerings. It currently runs only on UNIX
systems. The first step in porting DCE is to port ODE to the new environment.
...\" 
.P
ODE incorporates revision control software from the Free Software Foundation,
and build tools, including \*Lmake\*O, which permit simultaneous, shared
development by multiple workers.
...\" 
.P
The ODE tools are not a supported part of DCE. They are included only as a
convenience to developers. For information on porting the tools that make up
ODE, see the \*VOSF Development Environment System Administrator's Guide\*O.
A copy of this manual can be found in the ODE archive on the DCE tape.
...\" 
...\" 
...\" 
...\" ----------------------------------------------------------------------
.H 2 "Building DCE on a UNIX System"
...\" ----------------------------------------------------------------------
...\" 
.iX "porting" "requirements for UNIX systems" 
.iX "building" "requirements of UNIX systems"
...\" 
.P
To port DCE to a UNIX platform, the following things must be true of the
platform:
.BL
.LI
The \*Lmake\*O utility (supplied on the release tape) must be installed and
ported. Note that this is a special version of \*Lmake\*O. Do \*Vnot\*O
attempt to use your own version.
.LI
Sockets, shared memory, and message queues must be supported.
.LI
Virtual timers or another timer service must be supported.
.LI
The \*Lgencat\*O command, which generates formatted message catalogs from
input message source files, must be installed.
.LI
POSIX and XPG4 libraries must be present.
.LE
...\" 
...\" 
...\" ----------------------------------------------------------------------
.H 3 "Building and Testing DCE Over NFS Mounts"
...\" ----------------------------------------------------------------------
...\" 
...\" 
.P
In order for DCE to be successfully built and tested using NFS-mounted file systems,
every machine involved in the build or test must be running both the \*Llockd\*O
and \*Lstatd\*O daemons. Note that this restriction in effect means that you will
not be able to build DCE over NFS mounts on the OSF/1 platform, since OSF/1 does
not have \*Llockd\*O or \*Lstatd\*O.
.P
There are two separate problems with using NFS-mounted file systems with DCE: one
involves building DCE, the other involves testing the Threads component.
.P
For the DCE build, the problem occurs because file locking is performed (when GDS
is built) by \*Lgdsmkiss\*O, using \*Llockd\*O. It is not sufficient to have
\*Llockd\*O running on the local machine, since if the file being locked is located
on an NFS-mounted file system, the local \*Llockd\*O will attempt to contact the
remote \*Llockd\*O and \*Lstatd\*O during the lock operation. If the remote machine
is not running either daemon, the local process will hang in kernel mode. Thus only
one machine should be involved in building GDS on an OSF/1 platform.
.P
A similar problem will occur with one of the DCE Threads functional tests.
Refer to the ``Testing Dependencies'' section in Chapter 4 of this guide
for further information.
...\" 
...\" 
...\" 
...\" .zA "enh,5724,R1.0.2,add SVR4 port info"
...\" ----------------------------------------------------------------------
.H 2 "Building DCE on an SVR4 System"
...\" ----------------------------------------------------------------------
.iX "porting" "requirements for SVR4 systems" 
.iX "building" "requirements of SVR4 systems"
.P
In addition to needing the facilities outlined in the previous section,
OSF DCE 1.1 licensees who are planning to port DCE to
System V, Release 4 (SVR4) based systems must consider the following issues:
.ML
.LI
The use of the BSD compatibility package provided with SVR4 systems
.LI
...\" "certain" used to be "USL"
The addition of certain proprietary code to DCE as part of the
porting process (this code is not available from OSF)
.LI
The use of DCE threads wrapper routines for BSD socket I/O
.LE
.P
These issues have implications for building DCE
on SVR4 platforms that must be taken into account before
beginning to build DCE.
...\" 
...\" 
...\" ----------------------------------------------------------------------
.H 3 "BSD Compatibility Package Issues"
...\" ----------------------------------------------------------------------
...\" 
.P
OSF DCE 1.1 has extensive dependencies on Berkeley Software Distribution (BSD)
headers, library routines, and system calls. SVR4 provides a BSD compatibility
package intended for use in migrating BSD-based applications to SVR4. The package
consists of a set of header files, commands, system calls, and \*Llibucb\*O
library routines; it is intended to complement some existing BSD features in
the base system to emulate the full BSD environment.
.P
During the port of DCE to the SVR4 reference platform (SINIX 5.41), its providers
determined that DCE could not be built and run successfully with the SVR4 BSD
compatibility package. The BSD calls used in DCE that were found to cause problems
during the port to SVR4 fall into two categories:
.ML
.LI
BSD calls that exist in the BSD compatibility library but do not work the way they
do on BSD systems
.LI
BSD calls that do not exist at all in the BSD compatibility library
.LE
.P
For the calls in these two categories, conditional defines have been added to the
DCE source code that replace all instances of the BSD call with a POSIX call
equivalent. Tables 1-1 and 1-2 list each BSD call and its POSIX replacement.
.P
...\" 
.nP
...\" 
...\" ----------------------------------------------------------------------
.ne 20
.TB "POSIX Conversions for Calls with Non-BSD Behavior"
.TS
center, box, tab(@);
l| l
l| l.
\*LBSD Call@POSIX Call Used\*O
_

\*L_doprnt@vfprintf
wait@\*Omacros in \*Lwait.h\*O
@to interpret return results
@of \*Lwait\*O calls
readdir@dirent\*O structures
sigblock@sigprocmask
signal@sigaction
sigsetmask@sigprocmask
sigstack@sigaltstack
sigvec@sigaction\*O
_
.TE
...\" ----------------------------------------------------------------------
.P
.TB "POSIX Conversions for BSD Calls Not in SVR4"
.TS
center, box, tab(@);
l| l
l| l.
\*LBSD Call@POSIX Call Used\*O
_
\*Lftime@gettimeofday\*O (* not a POSIX call)
\*Lgetdtablesize@sysconf
getpagesize@sysconf
getrusage@times
getwd@getcwd
killpg@kill
setlinebuf@setvbuf
setreuid@setuid
timezone@tzname\*O[ ]
\*Lwait3@waitpid\*O
.TE
...\" 
...\" 
.P
The build-time conditional compilation variable \*LSNI_SVR4_POSIX\*O (see
the
.DS
    \*Vdce-root-dir\*L/dce/src/lbe/mk/svr4.mk\*O
.DE
.P
makefile) enables the POSIX calls for the SVR4 reference port.
.P
If you are porting DCE to an SVR4-based operating system platform, you must
use these BSD-to-POSIX conversions when you build DCE. You can either use the
\*Lsvr4.mk\*O file by setting RULES_MK to \*Lsvr4.mk\*O in your environment,
or you can create your own file and include \*Lsvr4.mk\*O in it.
.P
Note that not all BSD-isms have been removed from DCE on SVR4; only those
calls that were found to cause problems with the SVR4 reference port have
been converted to use POSIX calls.
.P
The providers of the SVR4 reference port also identified a set of calls in
the BSD compatibility library that work as expected with DCE on SVR4 and are
safe to use. Table 1-3 lists these calls. Some of the calls in the table have
associated POSIX calls that are recommended for use instead of the BSD call.
However, the DCE source code does not currently contain these conversions.
...\" 
...\" 
.P
...\" ----------------------------------------------------------------------
.TB "BSD Calls That Are Safe to Use"
.TS
center, box, tab(@);
l| l
l| l.
\*LBSD Call@Recommended
@POSIX Call\*O
_
\*Lbcmp@memcmp
bcopy@memmove
bzero@memset
index@strchr
rindex@strrchr
dbm_close
dbm_fetch
dbm_open
gethostid
getpriority
getusershell
mkstemp
random
re_comp
re_exec
setpriority
srandom
strcasecmp
strncasecmp
utimes@utime\*O
.TE
...\" 
...\" 
.P
If you are porting DCE to an SVR4-based system, you need to extract these calls
from the BSD compatibility library on your system, put them in a separate library,
which you should name \*Llibucb\*O, then export this library by placing it in the
\*Lexport\*O tree under \*Lusr/lib\*O. You must create and export this subset of
BSD compatibility library calls before you can begin to build the DCE, because the
DCE depends on these calls being available. You also need to copy the header file
\*Lndbm.h\*O from
...\" 
.DS
    \*L/usr/ucb/include\*O
.DE
...\" 
.P
and place it in the \*Lexport\*O tree under:
...\" 
.DS
    \*Vdce-root-dir\*L/dce/export/\*VTARGET_MACHINE\*L/usr/include/dce\*O
.DE
...\" 
.P
DCE also needs this BSD header file in order to run correctly. 
...\" 
...\" 
...\" ----------------------------------------------------------------------
.H 3 "Proprietary Code Issues"
...\" ----------------------------------------------------------------------
...\" 
.P
The port of DCE to the SVR4 reference platform required that certain DCE files
be modified to include code that may require an SVR4 license to use or code that
is ``SVR4 proprietary''. All of these files contain proprietary code.
The DCE source product does not contain these SVR4-proprietary modifications.
For further information about this code, contact OSF Customer Support. See
``Sending Feedback to OSF on DCE 1.1'' in Chapter 6 of the \*VOSF DCE Release
Notes\*O.
...\" 
...\" 
.P
The DCE files that were modified to include SVR4-proprietary code are:
...\" 
...\" 
.BL
.LI
\*Vdce-root-dir\*L/dce/src/directory/cds/cache/SVR4/casysinfo.c\*O
.P
See Chapter 6, ``DCE Cell Directory Service'' for an explanation of the porting
changes required for this file when porting DCE.
...\" 
...\" 
.LI
\*Vdce-root-dir\*L/dce/src/security/krb5/lib/os/localaddr.c\*O
...\" 
...\" 
.LI
\*Vdce-root-dir\*L/dce/src/threads/cma_dispatch.c\*O
.P
See Chapter 4, ``DCE Threads'' for an explanation of the changes required for
this file when porting DCE.
...\" 
...\" 
.LI
\*Vdce-root-dir\*L/dce/src/threads/cma_thdio_3.c\*O
...\" 
...\" 
.LI
\*Vdce-root-dir\*L/dce/src/threads/cma_thread_io.c\*O
.P
See Chapter 4, ``DCE Threads'' for an explanation of the changes required for this
file when porting DCE.
...\" 
...\" 
.LI
\*Vdce-root-dir\*L/dce/src/time/kernel/\*Vmachine\*L/kern_utctime.c\*O
.P
See Chapter 8, ``DCE Distributed Time Service'' for an explanation of the
changes required for this file when porting DCE.
.LE
...\" 
...\" 
.P
If you are porting DCE to an SVR4 system, you must obtain this proprietary
code or reconstruct the modified DCE files yourself in order to
port DCE successfully. Note also that you cannot build the SVR4 reference
port without this code.
...\" 
...\" 
...\" 
...\" ----------------------------------------------------------------------
.H 3 "BSD Socket I/O Call Issues"
...\" ----------------------------------------------------------------------
...\" 
...\" 
...\" 
.P
DCE Threads provides a set of UNIX I/O system calls that are ``wrapped'' to
provide thread-synchronous I/O. Because these I/O system calls are inherently
reentrant (by virtue of running in kernel space) they are not wrapped to
provide reentrancy. The set of wrapped I/O system calls includes the BSD
socket calls.
.P
On SVR4, the BSD socket calls are not system calls, but are instead part of
a user-space library (\*Llibsocket\*O). Because they are user-space functions,
these socket calls must be wrapped for reentrancy.
.P
Because the DCE threads wrapper routines for the socket I/O calls do not provide
reentrancy, the SVR4 reference port used another mechanism to provide both
thread-synchronous I/O and reentrancy to the socket library calls, and does
not use the DCE threads wrapper routines for socket system calls. These
``reentrant libraries'' are not part of the DCE source code offering from
OSF. Note also that you cannot build the SVR4 reference port without this code.
.P
For definitions of reentrancy and thread-synchronous I/O, see the \*VOSF DCE
Application Development Guide\*O.
...\" 
...\" 
...\" 
.zA "def,9826,1.1beta,dce.h info"
...\" ----------------------------------------------------------------------
.H 2 "DCE 1.1 and ANSI C"
...\" ----------------------------------------------------------------------
...\" OT 9826: describe using dce.h for ports
.P
The DCE 1.1 source code is written to comply with an ANSI C compiler. If
you encounter difficulties in building DCE 1.1 with your C compiler, you
can use the
...\" 
.DS
    \*Vdce-root-dir\*L/dce/src/dce/\*Vtarget_machine\*L/dce.h\*O
.DE
...\" 
...\" src/dce/${TARGET_MACHINE}/dce.h
...\" 
.P
header file to add a \*L#define\*O that will take effect in virtually every
DCE source file.
.P
For example, if your compiler doesn't understand the \*Lvolatile\*O keyword,
you can add the following statement to \*Ldce.h\*O to effectually remove
it from the source:
...\" 
.DS
    \*C#define volatile\*O
.DE
...\" 
.P
Of course, \*Ldce.h\*O is not the only file that can be used to do this
sort of thing. For example, if a problem occurs only in RPC code, it may
be better to attack it via an RPC header, rather than adding a definition
to \*Ldce.h\*O that will be exposed to the entire DCE source. For this
reason, caution should be exercised in adding definitions to \*Ldce.h\*O.
.P
Other examples of DCE definitions that may give trouble to non-ANSI compilers
are \*Lconst\*O and \*Lglobalref\*O; the latter, which is used in the RPC
code, is useful for VMS ports in particular.
.P
Finally, note that there are some component-specific macros that are related
to definitions of the kind cited above. For example, RPC uses:
...\" 
.DS
    \*CVOLATILE_NOT_SUPPORTED\*O
    \*CCONST_NOT_SUPPORTED\*O
.DE
...\" 
.P
In RPC these macros can be used to handle the absence of \*Lvolatile\*O or
\*Lconst\*O support in a compiler. These macros do not affect all components.
...\" 
...\" 
...\" 
.zZ "def,9826,1.1beta,dce.h info"
...\" 
...\" 
.zA "def,10739,1.1beta,new info"
...\" ----------------------------------------------------------------------
.H 3 "Checking on Compliance with DCE 1.1 Code Cleanup Guidelines"
...\" ----------------------------------------------------------------------
...\" 
.P
The common makefile
...\" 
.DS
    \*Vdce-root-dir\*L/dce/src/lbe/mk/osf.std.mk\*O
.DE
...\" 
.P
sets up a variable:
...\" 
.DS
    \*L${STRICT_COMPILER_WARNINGS}\*O
.DE
...\" 
.P
This variable, which is set on a per-architecture basis, contains the switches
that will turn on strict compiler warnings in regard to non-compliance with
the code cleanup guidelines established for the DCE 1.1 source code.
Thus most DCE components can easily do a ``code cleanliness check'' compile
by putting lines like the following in their Makefiles:
...\" 
.DS
    \*LCFLAGS += ${STRICT_COMPILER_WARNINGS}\*O
.DE
...\" 
...\" 
...\" OT 10613:
.P
Note that when you compile DCE on a DECpc 486ST running OSF/1 version 1.2 with
strict compiler warnings enabled, you may see numerous warnings like the
following:
...\" 
.oS
    /usr/include/i386/endian.h:99: warning: no previous prototype for `ntohs'
    /usr/include/i386/endian.h:108: warning: no previous prototype for `ntohl'
.oE
...\" 
.P
These warnings can be ignored: they are caused by an OSF/1 header file bug.
The warnings will appear whenever DCE code includes a system header file that
``thinks'' it needs the \*Lendian.h\*O header. For example, including
\*Lsys/param.h\*O or \*Lsys/types.h\*O can provoke this warning.
...\" 
...\" 
.zZ "def,10739,1.1beta,new info"
...\" 
...\" 
...\" ----------------------------------------------------------------------
.H 2 "Building DCE on Non-UNIX Systems"
...\" ----------------------------------------------------------------------
...\" 
.iX "porting" "operating systems"
...\" 
.P
OSF does not provide support for non-UNIX development environments. Therefore,
porting DCE to a non-UNIX environment can involve significantly more work than
porting to a UNIX-like environment.
.P
As you begin a port of DCE to a non-UNIX platform, we suggest that you do
the following:
...\" 
.BL
.LI
Port ODE
.LI
Port DCE (beginning with the DCE tools, e.g. the IDL compiler)
...\" 
...\" 
.LE
...\" 
.P
It is advisable to obtain a reference platform running DCE during the porting
effort, so that you can compare and test your code's functionality against it.
...\" 
...\" 
...\" ----------------------------------------------------------------------
.H 2 "Planning a Port"
...\" ----------------------------------------------------------------------
...\" 
.iX "porting: order" "planning"
...\" 
.P
DCE is an integrated offering: many of its components depend on other
components. Consequently, in order to build a certain component, all or parts
of certain other components must already be available. Some things must be
built sequentially, and some can be built in parallel. The rest of this guide
points out these constraints, so you can plan your port most efficiently. DCE
is large and complicated enough that, whenever possible, you should build and
test one component before building other components that depend on it.
.P
In general, the headers must be built before the libraries, and all libraries
must be built before the executables.
...\" 
...\" 
...\" ----------------------------------------------------------------------
.H 3 "DCE Libraries"
...\" ----------------------------------------------------------------------
...\" 
.P
The DCE software includes many libraries. A subset of the DCE libraries are
collected into a general-purpose DCE library called \*Llibdce.a\*O. Other
libraries are specific to a particular component and are used only by that
component, and are not included in \*Llibdce.a\*O.
...\" 
...\" 
...\" 
...\" 
...\" ----------------------------------------------------------------------
.H 3 "The Porting Process"
...\" ----------------------------------------------------------------------
...\" 
.P
Before you start to build DCE, you should port the ODE (OSF Development
Environment) tools to your platform as described in the previous section,
``Building and Using DCE Development Tools.'' ODE consists of the various
tools and utilities required to build DCE itself.
...\" 
...\" 
...\" 
...\" ----------------------------------------------------------------------
.H 4 "Build Order and Port Order"
...\" ----------------------------------------------------------------------
...\" 
.P
The present section consists mostly of a discussion of the order in which you
should port the DCE components (Threads, RPC, CDS, and so on) to your platform;
this ``porting order'' is distinct from the order in which DCE itself is, once
ported, built. \*VPorting\*O DCE to a new platform will probably involve
porting and building the components separately, testing them, and then going
on to combine the tested components until all have been ported. \*VBuilding\*O
DCE means building all of the components of a fully-ported DCE.
.P
DCE consists of integrated components which depend on each other in various
ways. This interdependency exists both at runtime and at compile time.
Inter-component dependencies are resolved by exporting the depended-on things
into the \*Vdce-root-dir\*L/dce/export\*O tree and isolating them there. However,
there are intra-component dependencies as well, and these are often not so
obvious to the eye.
.P
For example, during the build an \*L.idl\*O file within some component will be
processed once, producing objects (client and server stubs) for two different
parts of a distributed program\(emsay, a clerk and a daemon. The clerk and daemon
themselves are built separately; each has its own makefile. Suppose the clerk
happens to be built first: \*Vboth\*O of the program's stubs will be generated at
that time by the IDL compiler. Later, when the daemon is built, its makefile will
have to know where to find the previously generated server stub. This is the
type of dependency that porters must be careful about changing, and it can be
discovered only by reading through the makefiles.
.P
The makefiles supplied with the DCE reference port sources take care of
all inter- and intra-component dependencies when building DCE. However, the
makefiles are written to build a \*Vcomplete\*O DCE. In porting DCE to a new
platform, you will probably have to port and build the components separately,
and this means that you will have to either modify the supplied makefiles or
create new ones to handle the piecemeal builds. For example:
...\" 
.BL
...\" 
.LI
The makefiles build all the DCE tests after building all the DCE code. In
porting DCE, you will probably want to port and build \*Llibcma\*O (DCE Threads)
and its tests separately, in order to test it, and then move on to the other
libraries.
...\" 
.LI
In porting CDS, you will probably want to build and test it first without Security,
and after you have gotten that working go on to port Security and then build and
test the two together. However, the supplied makefiles build Security before
CDS, so the CDS makefiles will have to have the Security dependencies removed
before you can build CDS separately.
...\" 
.LE
...\" 
.P
The component-specific chapters in this guide give general information on
what parts of DCE (aside from the component at hand) have to be built in
order to build and test that component. In cases where dependencies exist,
these are indicated. However, you will have to inspect the makefiles to find
out all the details involved in building a component.
.P
Chapter 12 of this guide contains information on ``Makefiles in DCE'' and
``Building the DCE Library'', and what parts of the ODE (OSF Development
Environment) documentation you should read.
...\" 
...\" 
...\" 
...\" 
...\" ----------------------------------------------------------------------
.H 4 "The Build Process"
...\" ----------------------------------------------------------------------
...\" 
.P
There are four basic steps in the DCE build process:
...\" 
.AL
.LI
Build the ODE tools and the DCE tools. (Some examples of the DCE tools are
\*Lidl\*O, \*Lmavros\*O, and \*Lcom_err\*O.)
...\" 
.iX "tools" "DCE tools" "idl"
.iX "tools" "DCE tools" "mavros"
.iX "tools" "DCE tools" "com_err"
.iX "tools" "ODE tools"
...\"
...\"
...\"
.LI
Build and export the headers.
.LI
Build and export the libraries.
.LI
Build the executables.
.LE
...\" 
.P
Each of the build steps is implemented in the makefiles as a complete
pass through the entire DCE tree, so that tools, headers and libraries that
other components depend on (remember that DCE has many interdependencies) can
be found. Everything that is needed between components is found in the
.DS
    \*Vdce-root-dir\*L/dce/export\*O
.DE
.P
trees. Any tool that is needed (\*Lidl\*O, \*Lmavros\*O, etc.) is placed in the
appropriate platform-specific directory under
.DS
    \*Vdce-root-dir\*L/dce/tools\*O
.DE
...\" 
...\"
.iX "tools" "dce-root-dir/tools"
...\" 
.iX "build" "passes" "export"
...\" 
.P
The makefiles contain other minor passes, but all the major activities
needed for porting DCE occur during these four steps.
.P
Exporting consists of putting headers and libraries in a place where other
components can find them. Note that some of the headers are generated by DCE
tools such as \*Lidl\*O, \*Lmavros\*O, and \*Lcompile_et\*O.
...\" 
.iX "tools" "DCE tools" "mavros"
.iX "tools" "DCE tools" "idl"
.iX "tools" "DCE tools" "compile_et"
...\" 
Therefore, you must build these tools in their entirety before building even
the headers of components that depend on them.
...\" 
.nS "note"
The makefiles specify the proper build order for DCE components. Be careful
about reordering items in the makefiles, because they incorporate some subtle
order dependencies.
.nE
...\" 
.P
For more information on the DCE build, see Chapter 12 of this guide, and the
\*VOSF DCE Release Notes\*O.
...\" 
...\" ----------------------------------------------------------------------
.H 3 "Build Order Dependencies"
...\" ----------------------------------------------------------------------
...\" 
.P
The following subsections specify large-scale build order constraints, at the
level of interactions among major DCE components. More detailed information,
concerning dependencies between components and parts of components, appears
in the component-specific chapters (4 through 11) of this guide.
...\" 
...\" 
...\" 
...\" 
...\" ----------------------------------------------------------------------
.H 4 "Inter-Component Dependencies"
...\" ----------------------------------------------------------------------
...\" 
.P
As mentioned above, there are dependencies between many of the DCE components;
these are explained both in the \*VIntroduction to DCE\*O and in the
component-specific chapters of this guide.
.P
As a component, the Global Directory Service (GDS) is independent of the rest
of DCE: it can be built separately from everything else. However, the MAVROS
(ASN.1) compiler, its associated libraries, and the  \*Lasn1.h\*O header file,
which are parts of GDS, must be built before the DCE Security Service, which
depends on these things (because Kerberos uses ASN.1 encoding for its tickets).
.P
The Distributed File Service (DFS) depends on most of the other DCE components.
It should therefore be built after everything else. However, the DCE Local File
System (DCE LFS) portion can be built in parallel with the rest of DCE.
...\" 
...\" 
...\" 
...\" ----------------------------------------------------------------------
.H 3 "A Suggested Order for Porting the DCE Components"
...\" ----------------------------------------------------------------------
...\" 
.P
The following list represents a suggested ordering of the separate tasks
involved in porting DCE to a new platform; this order was used in porting
DCE from AIX to OSF/1. The basic strategy in this effort was to build
one component at a time, test it, and then move on to the next one.
.P
Other orderings are possible; one could try compiling everything first
and testing whether it works. If your target platform is ``close'' to
one of the already-existing reference platforms, you may be able to
follow a quite different order. For example, if your target platform
is an SVR4 system that is very close to SINIX, you should read through
the rest of this guide to see what \*L#define\*O and build variables
have to be altered, and then try a complete build.
...\" 
...\" 
.VL .5i
...\" 
...\" 
...\" **********************************************************************
.LI "1."
...\" 
...\" 
Port and build the tools.
.P
Some tools, such as \*Lmake\*O, are part of ODE. Other tools are part of DCE
itself, such as \*Lidl\*O, \*Lmavros\*O, \*Lsams\*O, and \*Lcompile_et\*O. All
of these tools are used in the ``export headers'' pass of the DCE build; but if,
for example, you are not porting Security at the moment, it could be argued that
you do not need \*Lcompile_et\*O. Or, as another example, MAVROS is not required
until Security or GDS is being ported. Still, it is a good idea to port all the
tools at the beginning, since they have no dependencies and it will mean fewer
changes to the makefiles during the port. In any case, all of the ODE tools
(e.g., \*Lmake\*O) \*Vmust\*O be built. Following is a list of the tools built
in the ``setup'' (tools) pass of the build:
...\" 
.BL
.LI
The DCE \*Lmake\*O
.LI
The IDL compiler
.LI
\*Lidl.cat\*O
.P
The message catalog for IDL
.LI
\*Lcompile_et\*O
.P
Compiles the Kerberos error tables used by Kerberos and DFS
.LI
\*Lmsg\*O
.P
Used to build the parser in \*Lcdscp\*O
.LI
\*Lprs\*O
.P
Used to build the parser in \*Lcdscp\*O and \*Ldtscp\*O
.LI
\*Lmavcod\*O
.P
The ASN.1 ``preprocessor''
...\" (not a good term for this)
.LI
\*Lmavros\*O
.P
The ASN.1 compiler
...\" 
.LI
\*Lsams\*O
.P
The DCE message catalog-generating utility. Builds message tables for
most DCE components, which are by default built into \*Llibdce\*O (thus
allowing APIs to return meaningful status message text although a system's
message catalogs may not have been properly installed).
.LE
...\" 
...\" 
...\" **********************************************************************
.LI "2."
...\" 
...\" 
Test the tools.
.P
IDL command tests can be found in the
.DS
    \*Vdce-root-dir\*L/dce/src/test/rpc/idl_frontend\*O
.DE
.P
directory. You can test MAVROS with tests found in the
.DS
    \*Vdce-root-dir\*L/dce/src/test/directory/gds/mavrostest\*O
.DE
.P
directory. No tests are provided for \*Lcompile_et\*O.
...\" 
...\" 
...\" **********************************************************************
.LI "3."
...\" 
...\" 
Port and build and export the headers for all the components.
.P
.zA "enh, 10306, R1.1, remove diskless documentation"
Note that DFS header files can be built
.zZ "enh, 10306, R1.1, remove diskless documentation"
later, since no other components depend on them (assuming, for the case of
DFS, that the build flag \*LNO_DFS\*O is set in the
.DS
    \*Vdce-root-dir\*L/dce/src/Makeconf\*O
.DE
...\" 
.P
.zA "enh, 10306, R1.1, remove diskless documentation"
file).  However, DFS depends on the other components, so all
headers from those components must be present before building headers for
DFS. In particular, DFS headers depend on \*Llibdce\*O.
.zZ "enh, 10306, R1.1, remove diskless documentation"
...\" 
.P
The \*Lasn1.h\*O header file must be exported to the
.DS
    \*Vdce-root-dir\*L/dce/export/\*Vmachine\*L/usr/include/dce\*O
.DE
.P
directory. This is the only GDS header file that the core components depend
on (and only Security depends on it), so to avoid running the entire export
headers pass in GDS, you can simply copy the file to the \*Lexport\*O tree.
.P
Nevertheless, it is recommended that you export all headers for all
components; this is not difficult, and it will allow you to avoid
having to perform makefile modifications.
...\" 
...\" 
...\" **********************************************************************
.LI "4."
...\" 
...\" I've put this ahead of src/config, since that does use
...\" wrappers. While conceivably it could be built first (but
...\" not tested), porting Threads first makes sense and will
...\" educate the porters about what they will see with
...\" wrappers.
...\" 
Port and test DCE Threads.
.P
Since almost every other DCE component uses DCE Threads (exceptions are GDS,
LFS, and Kernel RPC), DCE Threads must work properly before you proceed past
this point: you should have successfully run all the tests in
.DS
    \*Vdce-root-dir\*L/dce/src/test/threads\*O
.DE
.P
before proceeding any further. See Chapter 4 for information on porting and
testing DCE Threads. Note that \*Llibcma\*O is part of the DCE library, so you
may need to refer to parts of Chapter 12 for information about the build
process for \*Llibdce\*O.
...\" 
...\" 
...\" **********************************************************************
.LI "5."
Port, build and test the RPC libraries \*Llibnck.a\*O and \*Llibidl.a\*O.
.P
Use the
.DS
    \*Vdce-root-dir\*L/dce/src/test/rpc/runtime/perf\*O
.DE
.P
and
.DS
    \*Vdce-root-dir\*L/dce/src/test/rpc/runtime/v2test_lib\*O
.DE
.P
tests to verify that RPC works correctly. See Chapter 5 for more information.
.P
The \*Llibidl.a\*O library is required by any executable that links in an
IDL stub. \*Llibidl.a\*O is included in \*Llibdce.a\*O.
.P
\*Llibnck.a\*O is documented in
.DS
    \*Vdce-root-dir\*L/dce/src/rpc/runtime/Makefile\*O
.DE
.P
which describes how to build pieces of it separately. Also Chapter 12 of
this guide contains information on various aspects of the \*Llibdce\*O
build.
.P
DCE RPC employs two protocols: Datagram (connectionless, often abbreviated
DG), and Connection Oriented (CO). Both or either of these can be built.
The protocols are very different, and you may want to port one at a time,
or build all of (or much of) DCE with only the Datagram protocol, and then
add Connection Oriented later.
...\" 
...\" mention RPC_SUPPORTED_PROTSEQS?
...\" 
...\" 
...\" 
...\" 
.P
RPC depends on Security for authenticated RPC.
.P
Note that RPC depends on CDS \*Vonly\*O if the RPC application uses the Name
Service Interface (NSI). If string bindings are used instead of NSI, you do
not need the CDS library \*Llibcds.a\*O in RPC test applications.
...\" 
...\" 
.LI "6."
Port, build and export everything in:
.DS
    \*Vdce-root-dir\*L/dce/src/config\*O
.DE
.P
Only \*Llibdce_conf.a\*O (which is part of \*Llibdce\*O) is built in this
directory. It depends only on Threads.
.P
The \*Lconfig\*O directory contains \*Ldce_config\*O and some other
miscellaneous shell scripts used for configuration. It also contains
code for simple routines that extract and return a machine's cellname
from a flat file. The routines are documented in the ``DCE Routines''
section of the \*VOSF DCE Application Development Reference\*O.
...\" 
...\" 
...\" 
...\" **********************************************************************
.LI "7."
Port and build the kernel RPC (KRPC) libraries.
.P
.zA "enh, 10306, R1.1, remove diskless documentation"
KRPC is needed only for DFS.  It provides
RPC functionality for kernel-space processes.
.zZ "enh, 10306, R1.1, remove diskless documentation"
.P
Since kernel data structures and system call interfaces can differ
significantly from the user-space environment, porting KRPC is not
necessarily a straightforward extension. Therefore, you may need to
allocate a significant amount of time for this step, as well as for
building and testing KRPC itself.
.P
If you are porting KRPC to a non-UNIX system, with kernel file
structures that differ significantly from the UNIX models, you will
have to do more work, since you will have to build an interface
between your system and the KRPC data structures. In addition, you
can expect to expend some effort tuning the interface so it runs at
an acceptable speed.
...\" 
.nS "note"
The placement of this step is optional. You can postpone building KRPC
.zA "enh, 10306, R1.1, remove diskless documentation"
until you are ready to port DFS.
.zZ "enh, 10306, R1.1, remove diskless documentation"
.nE
...\" 
...\" 
...\" 
...\" **********************************************************************
.LI "8."
Port and build the CDS libraries \*Llibcds.a\*O and \*Llibcdscache.a\*O.
.P
Note that only \*Llibcds.a\*O is included in \*Llibdce.a\*O; \*Llibcdscache.a\*O
is not included in \*Llibdce\*O, but built as part of the export libraries pass
of the build (as are other libraries not in \*Llibdce.a\*O), and linked into
CDS executables.
...\" 
...\" 
.P
If you turn off the \*L-DDCE_SEC\*O flag (defined in the
.DS
    \*Vdce-root-dir\*L/dce/src/directory/cds/cds.mk\*O
.DE
...\" 
.P
makefile) when building, then these libraries will not use the Security component.
.P
Note that the CDS libraries step occurs earlier in the ``porting order'' presented
here than it does in the normal DCE ``build order'' as determined by the makefiles.
.P
Note also that there is no way to test the CDS libraries without having a
CDS server (\*Lcdsd\*O) running (see Step 14 below).
.P
See Chapter 6 of this guide for more information on these libraries,
and Chapter 9 for information on security.
...\" 
...\" 
...\" **********************************************************************
.LI "9."
Port and build the Distributed Time Service library, \*Llibutc.a\*O. To test
the API, use the tests in:
.DS
    \*Vdce-root-dir\*L/dce/src/test/time/common\*O
.DE
.P
You have the choice of building either the kernel\- or the user-space
version of DTS, depending on whether or not your kernel has the
\*Lutc_gettime(\|)\*O system call. Both versions of DTS provide the
same service, and both can be tested with the tests mentioned above.
The \*LDTS_LIBUTC_MODE\*O variable
in
.DS
    \*Vdce-root-dir\*L/dce/src/time/time.mk\*O
.DE
.P
actually determines which version of DTS is built: see Chapters 8 and
12 for more information.
.P
Note that the Time library (\*Llibutc-kernel.a\*O if kernel-mode,
\*Llibutc-user.a\*O if user-mode) does not call the Time server at all;
instead, it gets the time from the system clock. Thus you do not have to
have \*Ldtsd\*O running in order to perform DTS testing or in order to test
any other DCE component.
.P
Note that the DCE Security Service does assume the existence of loosely
synchronized clocks; timestamp comparisons done by Security allow for a
five-minute ``slop'' period and no more than this. So Security will deny
access to systems with clocks which deviate from ``correct'' time (the
Security server's time) by more than about five minutes. However, this
clock synchronization can be done by hand.
...\" 
...\" 
...\" **********************************************************************
...\" **********************************************************************
...\" 
...\" At this point they have a real choice, they can either
...\" continue to build all the libraries in libdce.a (as the
...\" current document describes) or they can jump ahead to
...\" building executables and bringing DCE up. In our original
...\" port we did the latter.
...\" 
...\" 
...\" **********************************************************************
...\" **********************************************************************
...\" **********************************************************************
.LI "10."
...\" 
...\" 
...\" 
Port and build the Security Service and Kerberos libraries.
.P
The \*Llibsec.a\*O security library is part of \*Llibdce.a\*O and
makes calls to \*Llibkrb5.a\*O. You can test \*Llibsec.a\*O with the
tests found in:
.DS
    \*Vdce-root-dir\*L/dce/src/test/security/api\*O
.DE
.P
See Chapter 9 for more information.
.P
Note that the DCE Audit Service is a new part of DCE security for DCE 1.1.
Its source is located at:
...\" 
.DS
    \*Vdce-root-dir\*L/dce/src/security/audit\*O
.DE
...\" 
.P
Further information on porting the DCE Audit Service can be found in
Chapter 10.
...\" 
...\" 
...\" 
...\" **********************************************************************
.LI "11."
...\" 
Port and build the GDS, XDS, and XOM libraries that are either required by
other components or are necessary to build \*Llibdce.a\*O. These are:
...\" 
.BL
.LI
\*Llibasn1.a\*O
.LI
\*Llibdua_sec.a\*O
.LI
\*Llibd21sw.a\*O
.LI
\*Llibd27.a\*O
.LI
\*Llibd23.a\*O
.LI
\*Llibos.addr.a\*O
.LI
\*Llibdua.a\*O
.LI
\*Llibshth.a\*O
.LI
\*LlibXDS.a\*O
.LI
\*LlibXOM.a\*O
.LI
\*Llibxoms.a\*O
.LE
...\" 
.P
(See Chapter 7 of this guide, particularly Table 7-1, for specific information.)
...\" 
...\" 
...\" 
...\" 
...\" 
...\" **********************************************************************
.LI "12."
Port and build the DCE library, \*Llibdce.a\*O. This is a single library made
up of other DCE libraries. It is meant to be used by application programmers
writing applications. Many DCE components use it as well, so it must be built
before any executables are built.
...\" 
.nS "note"
Building the DCE library will probably require some porting effort. The
makefiles used to build DCE are very complex. See Chapter 12 for details.
.nE
...\" 
...\" 
...\" **********************************************************************
.LI "13."
Port and build the DCE Host Daemon, \*Ldced\*O, which replaces for DCE 1.1 the RPC
daemon (\*Lrpcd\*O) and \*Lsec_clientd\*O.
...\" 
.P
No special configuration is required in order to bring up a DCE cell using
\*Ldced\*O. If, however, you wish to run \*Lsec_clientd\*O and \*Lrpcd\*O
instead of using the full \*Ldced\*O functionality, comments in \*Ldce_config\*O
(the DCE configuration script), which is located at:
...\" 
.DS
    \*Vdce-root-dir\*L/dce/src/config/dce_config\*O
.DE
...\" 
.P
and installed at:
...\" 
.DS
    \*L/opt/dcelocal/etc/dce_config\*O
.DE
...\" 
.P
explain how to do this. In DCE 1.1, the sources for \*Lrpcd\*O and \*Lsec_clientd\*O
are located at:
...\" 
.DS
    \*Vdce-root-dir\*L/dce/src/nosupport/rpc/rpcd\*O
.DE
...\" 
.P
...\" 
.DS
    \*Vdce-root-dir\*L/dce/src/nosupport/security/server/sec_clientd\*O
.DE
...\" 
.P
respectively.
...\" 
...\" 
...\" 
...\" **********************************************************************
.LI "14."
Port and build the CDS executables \*Lcdsadv\*O, \*Lcdsclerk\*O, and \*Lcdsd\*O.
It is not critical to follow the order in the makefile, but you have to
build all three executables before running any tests. Test these executables
with \*Lcdstest\*O, found in the
.DS
    \*Vdce-root-dir\*L/dce/src/test/directory/cds\*O
.DE
.P
tree, then build \*Lcdscp\*O and test it with \*Lcp_killer.sh\*O.
.P
You can build the Global Directory Agent, \*Lgdad\*O, as well, but only
intercell access depends on it, so GDA testing should be done later.
If you wish to test the X.500 part of the GDA, you do need GDS, but if
you have an implementation of the Domain Name System (DNS), you can
test the DNS part of GDA without GDS. See Chapter 6 for more information.
...\" 
...\" 
...\" **********************************************************************
.LI "15."
Test the NSI (Name Service Interface) with the tests found in:
.DS
    \*Vdce-root-dir\*L/dce/src/test/rpc/rtandidl\*O
.DE
.P
See Chapter 5 for more information.
...\" 
...\" 
...\" **********************************************************************
.LI "16."
If you are planning on enabling the audit points in either DCE Security or
in DTS, you will first need to port the Audit Service. If you wish to defer
this activity, you may elect not to compile in the audit points. To do this,
remove \*LDCE_AUD_POINTS\*O from the definition of \*LCFLAGS\*O in the
following Makefiles:
...\" 
.DS
    \*Vdce-root-dir\*L/dce/src/security/server/rs/Makefile\*O
    \*Vdce-root-dir\*L/dce/src/security/server/lm/Makefile\*O
    \*Vdce-root-dir\*L/dce/src/security/server/bin/Makefile\*O
    \*Vdce-root-dir\*L/dce/src/security/server/sec_salvage_db/Makefile\*O
    \*Vdce-root-dir\*L/dce/src/time/service/Makefile\*O
.DE
...\" 
.P
See Chapter 10 for information on porting the audit service.
...\" 
...\" 
...\" 
...\" **********************************************************************
.LI "17."
Port and build all the Security executables, including the Kerberos executables.
To test these executables, create a security registry with \*Lsec_create_db\*O.
This command builds a registry database and populates it with a set of
default accounts. These default accounts and passwords are defined in:
.DS
    \*Vdce-root-dir\*L/dce/src/security/server/rs/rs_reserved.c\*O
.DE
.P
Start \*Lsecd\*O and try logging in with \*Ldce_login\*O. You should be
able to use \*Ldce_login\*O to login to any of the default accounts.
See Chapter 9 for more information.
...\" 
...\" 
...\" **********************************************************************
.LI "18."
Port and build CDS with the \*L-DDCE_SEC\*O flag to build CDS with Security
turned on. Test this configuration with \*Lcdstest\*O and \*Lcp_killer.sh\*O.
See Chapter 6 for more information.
...\" 
...\" 
...\" **********************************************************************
.LI "19."
Port and build the DTS executables \*Ldtsd\*O, \*Ldtscp\*O, and, if desired,
one or more of the time providers. The service can be tested with the
.DS
    \*Vdce-root-dir\*L/dce/src/test/time/service/dtss_graph.c\*O
.DE
.P
tool, and the control program can be tested with the
.DS
    \*Vdce-root-dir\*L/dce/src/test/time/control/test_dtsscp_ultrix.sh\*O
.DE
.P
program. See Chapter 8 for more information.
...\" 
...\" 
...\" **********************************************************************
.LI "20."
Port, build and test XDS, XOM, GDS, and the GDS Global Directory Agent (GDA).
...\" 
.VL .5i
...\" 
...\" *****
.LI "a."
Since XDS (the \*Llibxds.a\*O library) and XOM (the \*Llibxom.a\*O library) are
independent of GDS, they can be built now. There are no system dependencies for
building these libraries. However, the associated tests require an initialized
GDS environment. They cannot be executed until the GDS build has been completed.
...\" 
...\" *****
.LI "b."
Port and build all remaining GDS libraries and the executables. The MAVROS
libraries, \*Llibasn1.a\*O, and \*Llibshth.a\*O should already have been
built as part of \*Llibdce.a\*O. At this stage, GDS can be installed and
configured manually through the administration programs, initializing the
DUA cache and connecting to the DSA. This configuration provides some
preliminary verification of the ported code. It is the prerequisite for
running the XDS and XOM tests. Assuming the MAVROS tests have already
been executed in previous steps, you can run the administration and ROS
(Remote Operation Service) tests now.
...\" 
...\" *****
.LI "c."
Port, build and test the GDS GDA.
...\" 
...\" 
.LE
...\" 
.P
See Chapter 7 for more information.
...\" 
...\" 
...\" 
...\" **********************************************************************
.LI "21."
Port, build and test kernel RPC (KRPC). Note that you only need to do so in order
.zA "enh, 10306, R1.1, remove diskless documentation"
to bring up DFS. See Chapter 5 for more information.
.zZ "enh, 10306, R1.1, remove diskless documentation"
.P
See the previous reference to building the KRPC headers for notes on
the time and effort involved in building KRPC.
...\" 
...\" 
...\" 
...\" 
...\" **********************************************************************
.LI "22."
Port and build DFS. DFS is significantly more complicated to build than other
DCE components because it requires kernel modifications.
.P
Before attempting to build DFS, make sure that include files from the other
DCE components have been exported and that the libraries for the other DCE
components have been built.
...\" 
...\" 
.VL .5i
...\" 
...\" *****
.LI "a."
Export the DFS include files.
...\" 
...\" *****
.LI "b."
Build the DFS libraries. These include both the libraries for user-space
servers and in-kernel libraries.
...\" 
...\" *****
.LI "c."
Build (or relink) the kernel with DFS and KRPC. If your target platform
supports kernel extensions (as the AIX reference platform does), build those
extensions.
...\" 
...\" *****
.LI "d."
Build the DFS user-space executables. Only a few of these executables are
actually necessary to bring up DFS. These are \*Lflserver\*O, \*Lftserver\*O,
\*Lfxd\*O, \*Ldfsexport\*O, \*Ldfsbind\*O, and \*Ldfsd\*O.
.P
You can build other executables later. For example, the update and replication
servers and the backup software are not needed immediately.
...\" 
...\" *****
.LI "e."
Bring up the kernel or load the kernel extensions, and bring up DFS using the
start-up scripts provided.
...\" 
...\" *****
.LI "f."
Build the DFS tests in the
.DS
    \*Vdce-root-dir\*L/dce/src/test/file/low\*O
.DE
.P
and
.DS
    \*Vdce-root-dir\*L/dce/src/test/file/fs\*O
.DE
.P
directories.
...\" 
...\" *****
.LI "g."
Run the
.DS
    \*Vdce-root-dir\*L/dce/src/test/file/low\*O
.DE
.P
and
.DS
    \*Vdce-root-dir\*L/dce/src/test/file/fs\*O
.DE
.P
tests.
...\" 
...\" *****
.LI "h."
Run the DFS server tests.
...\" 
.LE
...\" 
.P
For more information on porting DFS, see Chapter 11.
.LE
...\" 
...\" 
...\" 
...\" 
...\" ----------------------------------------------------------------------
.H 2 "Installing and Configuring DCE"
...\" ----------------------------------------------------------------------
...\" 
.P
When you have successfully built all of the DCE components as outlined in the
previous section, you can run the \*Lbuild install_all\*O pass. The next step
is then to run the \*Ldce_config\*O program, as described in the \*VOSF DCE
Administration Guide\(emIntroduction\*O, to configure and startup your DCE cell.
...\" See in particular the following chapters:
...\" 
...\" .BL
...\" .LI
...\" Chapter 6. Overview of the DCE Configuration Script
...\" .LI
...\" Chapter 7. Phase One: Initial Cell Configuration
...\" .LI
...\" Chapter 8. Phase Two: Configuring a DCE Client and Other DCE Services
...\" .LE
...\" 
.P
Note also that the section ``The DCE Configuration Program'' in Chapter 3 of this
guide contains additional useful information about \*Ldce_config\*O.
.P
The \*Ldce_config\*O program installs DCE software in different configurations
on machines participating in a DCE system. In addition to being used in installing
a completely ported DCE software system, it can also be used during the process of
porting and testing components. It should be introduced to the porting and testing
process about the time that the Security component is being ported.
.P
Note that the word ``install'' has two different meanings, depending on whether the
context is building DCE or using the \*Ldce_config\*O program. During a build of DCE,
the install pass places files into the install tree of the sandbox. Installing using
the \*Ldce_config\*O program, on the other hand, means installing DCE software on a
machine in the system.
...\" 
...\" 
...\" 
...\" ----------------------------------------------------------------------
.H 3 "Message Catalogs"
...\" ----------------------------------------------------------------------
...\" 
.P
XPG4 message catalogs are used by the DCE components to store most of the
text information they display during operation. This includes error messages,
help text, formatted screens, and so on. Although the methods which the
components use to generate their catalogs during the build are not uniform,
\*Vall\*O of the components use catalogs in some way. The following list
gives a summary of what message catalogs are used for in DCE and how they
are built:
...\" 
...\" 
...\" 
.VL 1i
...\" 
.LI "Threads:"
...\" 
Runtime error messages.
.P
The catalog is generated by \*Lgencat\*O during the build from source in:
.DS
    \*Vdce-root-dir\*L/dce/src/threads/dcethd.msg\*O
.DE
...\" 
...\" 
.LI "RPC:"
...\" 
IDL compiler messages, \*Luuidgen\*O utility messages, and RPC runtime
messages.
.P
The \*Luuidgen\*O message catalog is generated by the DCE \*Lsams\*O
utility during the
build from source in:
.DS
    \*Vdce-root-dir\*L/dce/src/rpc/idl/uuidgen/uid.sams\*O
.DE
.P
The IDL compiler catalog is generated by \*Lgencat\*O during the build
from source in:
.DS
    \*Vdce-root-dir\*L/dce/src/rpc/idl/idl_compiler/nidlmsg.m\*O
.DE
.P
The RPC runtime error message catalog is generated by \*Lsams\*O during the
build from the file:
.DS
    \*Vdce-root-dir\*L/dce/src/rpc/sys_idl/rpc.sams\*O
.DE
...\" 
...\" 
...\" An .idl file is generated by another awk script (dce_error_idl.awk) from the
...\" same rpc.msg source. This all happens in src/rpc/sys_idl.
...\" 
...\" 
.LI "CDS:"
...\" 
Clerk (including advertiser) messages, Clerk status codes, and CDS ACL
manager permission strings and error messages.
.P
The CDS message catalog is generated by \*Lawk\*O and \*Lsams\*O from source in:
.DS
    \*Vdce-root-dir\*L/dce/src/directory/cds/includes\*O
.DE
...\" 
...\" 
...\" 
.LI "GDS:"
...\" 
Formatted screens (called ``masks'') and messages for the GDS administrative
command programs.
.P
The GDS message catalogs are generated by \*Lgencat\*O during the build from
source in:
.DS
    \*Vdce-root-dir\*L/dce/src/directory/gds/msg\*O
.DE
...\" 
.P
Message catalogs for server state and error messages are generated by \*Lsams\*O
from:
.DS
    \*Vdce-root-dir\*L/dce/src/directory/gds/sams/gds.sams\*O
.DE
...\" 
...\" 
...\" 
.LI "DTS:"
...\" 
DTS status codes, and DTS ACL manager permission strings and error messages.
.P
The DTS message catalog is generated by \*Lsams\*O from source in:
.DS
    \*Vdce-root-dir\*L/dce/src/time/common/dts.sams\*O
.DE
...\" 
...\" 
...\" 
.LI "Security:"
...\" 
Kerberos error messages, Security admin error messages.
.P
The Security message catalogs are generated by \*Lgencat\*O from \*Lcompile_et\*O
output. \*Lcompile_et\*O inputs \*L.et\*O files, producing as output \*L.h\*O and
\*L.msf\*O files, from the following error table files:
...\" 
.DS
    \*Vdce-root-dir\*L/dce/src/security/h/sad_err.et\*O
    \*Vdce-root-dir\*L/dce/src/security/krb5/comerr/test1.et\*O
    \*Vdce-root-dir\*L/dce/src/security/krb5/comerr/test2.et\*O
    \*Vdce-root-dir\*L/dce/src/security/krb5/kdc/kdc5_err.et\*O
    \*Vdce-root-dir\*L/dce/src/security/krb5/lib/error_tables/krb5_err.et\*O
    \*Vdce-root-dir\*L/dce/src/security/krb5/lib/error_tables/kdb5_err.et\*O
.DE
...\" 
.P
Message text files are also generated from the following source:
...\" 
.BL
.LI
\*Vdce-root-dir\*L/dce/src/security/idl/sec_error_msf.awk\*O
.P
This is an \*Lawk\*O script to produce an X/Open message source file (MSF)
from a symbolic message source file (SMSF). An SMSF is like an MSF except
that symbolic message identifiers are used instead of numbers.
.P
...\" 
...\" 
.LI
\*Vdce-root-dir\*L/dce/src/security/idl/smsf_to_sams.awk\*O
.P
This is an \*Lawk\*O script to convert an SMSF (Symbolic Message Source File)
that defines status codes into a \*Lsams\*O file.
.P
Because this script is currently used to convert only
...\" 
.DS
    \*Vdce-root-dir\*L/dce/src/security/idl/sec.msg\*O
.DE
...\" 
.P
(the SMSF file for Security), the script contains hard-coded information for
producing the \*Lsams\*O file for the \*Lsec\*O (i.e., Security) component.
.P
Note that the resulting sams file is \*Vnot\*O the final DCE 1.1 version of
the \*Lsams\*O file; some of the entries in the \*Lsams\*O file are either
not filled in or filled with dummy values. These values will be supplied in
the final version of the \*Lsams\*O file.
...\" 
...\" 
.LI
\*Vdce-root-dir\*L/dce/src/security/idl/dce_error_idl.awk\*O
.P
This is an \*Lawk\*O script to produce an \*L.idl\*O from from a symbolic
message source file (SMSF). The script emits \*Lconst\*O statements that
associate each symbol with its ``error status code'', which is the logical
``or'' of the message number and the appropriate DCE prefix. (The prefix
can be used to locate the message catalog.)
...\" 
...\" 
.LI
\*Vdce-root-dir\*L/dce/src/security/gssapi/gss_msgs.sms\*O
.LI
\*Vdce-root-dir\*L/dce/src/security/audit/libaudit/aud.sams\*O
.P
These two files are used by \*Lsams\*O to generate message catalogs for
use by the GSSAPI (Generic Security Service API) and the DCE Audit Service.
...\" 
.LE
...\" 
...\" 
.LI "DFS:"
...\" 
Status and error messages.
.P
The DFS message catalogs are generated in the same way as are the Security catalogs,
namely by \*Lgencat\*O from \*Lcompile_et\*O output resulting from processing the
following error table files:
.DS
    \*Vdce-root-dir\*L/dce/src/file/bak/bucoord_errs.et\*O
    \*Vdce-root-dir\*L/dce/src/file/bakserver/budb_errs.et\*O
    \*Vdce-root-dir\*L/dce/src/file/bosserver/bbos_err.et\*O
    \*Vdce-root-dir\*L/dce/src/file/bubasics/butc_errs.et\*O
    \*Vdce-root-dir\*L/dce/src/file/bubasics/butm_errs.et\*O
    \*Vdce-root-dir\*L/dce/src/file/cm/cm_trace.et\*O
    \*Vdce-root-dir\*L/dce/src/file/dfsbind/bind_trace.et\*O
    \*Vdce-root-dir\*L/dce/src/file/episode/anode/epi_errs.et\*O
    \*Vdce-root-dir\*L/dce/src/file/episode/async/asev_errs.et\*O
    \*Vdce-root-dir\*L/dce/src/file/episode/logbuf/logbuf_errors.et\*O
    \*Vdce-root-dir\*L/dce/src/file/episode/salvage/sal_errs.et\*O
    \*Vdce-root-dir\*L/dce/src/file/flserver/fl_errors.et\*O
    \*Vdce-root-dir\*L/dce/src/file/fshost/fshs_errs.et\*O
    \*Vdce-root-dir\*L/dce/src/file/fsint/rep_errs.et\*O
    \*Vdce-root-dir\*L/dce/src/file/ftserver/ftserver.et\*O
    \*Vdce-root-dir\*L/dce/src/file/ftutil/ftutil_errors.et\*O
    \*Vdce-root-dir\*L/dce/src/file/host/hs_errs.et\*O
    \*Vdce-root-dir\*L/dce/src/file/ncscompat/compat_errs.et\*O
    \*Vdce-root-dir\*L/dce/src/file/ncsubik/uerrors.et\*O
    \*Vdce-root-dir\*L/dce/src/file/px/px_trace.et\*O
    \*Vdce-root-dir\*L/dce/src/file/security/dacl/dacl_errs.et\*O
    \*Vdce-root-dir\*L/dce/src/file/security/dfsauth/daut_errs.et\*O
    \*Vdce-root-dir\*L/dce/src/file/sysacl/dacl_errs.et\*O
    \*Vdce-root-dir\*L/dce/src/file/tkm/tkm_errs.et\*O
    \*Vdce-root-dir\*L/dce/src/file/tools/cmd/cmd_errors.et\*O
    \*Vdce-root-dir\*L/dce/src/file/update/uperrors.et\*O
    \*Vdce-root-dir\*L/dce/src/file/xcred/xcred_errs.et\*O
    \*Vdce-root-dir\*L/dce/src/file/xvolume/vol_errs.et\*O
.DE
.LE
...\" 
...\" ----------------------------------------------------------------------
.H 4 "Message Catalog Installation and Use"
...\" ----------------------------------------------------------------------
...\" 
.P
The message catalogs are installed by \*Ldce_config\*O when the DCE cell is
configured; installation consists in copying the \*L.cat\*O files to a
directory whose pathname is determined by the values of the environment
variables \*LLANG\*O and \*LNLSPATH\*O. (In OSF/1 and AIX, the \*L.cat\*O
filename extension is supplied by the \*Lcatopen(\|)\*O command when it
opens a catalog, so the extension does not have to be part of the string
to which \*LNLSPATH\*O is set; but this may not be true on other platforms.)
...\" 
.P
Note however that all DCE components that have APIs that return text messages
retrieved from message catalogs have their default messages built into \*Llibdce\*O;
this ensures that DCE applications will never receive from a DCE component a
raw status code when a message can be returned instead, no matter what the state
of the application's \*LLANG\*O and \*LNLSPATH\*O environment variables may be.
.P
The most obvious use for message catalogs is to store people-readable
text messages of all kinds; however, this is a larger category than might
at first be supposed. For example, the ACL managers for both CDS and DTS
store not only their error messages but also printable versions of their
permission strings in message catalogs. Thus the result of having an
incorrectly setup environment could be a bewildering series of messages
(during \*Ldce_config\*O) such as the following:
...\" 
.oS
            Creating /.:/lan-profile
    ERROR: SEC_ACL_EDIT status 1708308f
    ERROR: SEC_ACL_EDIT status 1708308f
.oE
...\" 
...\" 
.P
In this situation, \*Lacl_edit\*O has been called to set ACLs on a newly-created
directory object during configuration. The problem is that the CDS ACL manager's
permissions strings ("r", "w", ...), which are stored in message catalogs, could
not be found by the manager; as a result, \*Lacl_edit\*O failed. However, the error
message, since it too is stored in the message catalog, could not be found either,
and only a raw status code is printed instead.
...\" 
...\" Here's a question... suppose you have an incorrectly-setup
...\"  LANG and NLSPATH when you run dce_config, and the catalogs
...\"  are put into the wrong place. How come the DCE routines don't
...\"  also use those "wrong" values, and successfully retrieve the
...\"  messages after all?
...\" 
...\" ANSWER:
...\" As a security precaution, if called from user root NLSPATH
...\" is ignored and a fixed path is used. This is to avoid the
...\" problem of setuid root programs being used to read files are
...\" supposed to be protected. Most DCE programs run as root.
...\" See Tom Jordahl's offical word on OSF/1.1
...\" 
.P
See also the section ``Use of the \*Lcompile_et\*O Program'' in Chapter 9 of this
guide.
...\" 
...\" 
...\" 
...\" ----------------------------------------------------------------------
.H 4 "How to Test Message Catalog Installation"
...\" ----------------------------------------------------------------------
...\" 
.P
Although \*Llibdce\*O is built by default with all DCE components' message
tables, so that status and error message retrieval does not depend on the host
system's message catalog environment, you may wish to check whether the
environment (i.e., the environment variables \*LNLSPATH\*O and \*LLANG\*O)
is in fact correctly set up. You can do this on the OSF/1 and AIX reference
platforms by running the \*Ldspcat\*O command. For example, to display
the DCE Security message catalog, type:
...\" 
...\" 
.iS
    dspcat dcesec.cat
.iE
...\" 
.P
If you get something like the following message:
...\" 
.oS
    Unable to open specified catalog (dcesec.cat)
.oE
...\" 
.P
This indicates that your message catalog environment is not set up correctly; you
should check that your values for \*LNLSPATH\*O and \*LLANG\*O are correct. If,
on the other hand, your message catalogs are properly installed, you will get output
like the following:
...\" 
.oS
    1 : 1 authorization protocol unsupported by authentication protocol.
    1 : 2 unsupported session key type
    1 : 3 incorrect response to challenge
    1 : 4 no identity set yet
    1 : 5 no privilege attributes available
    ...
.oE
...\" 
.P
Note that \*Ldspcat\*O is not a standard command, but other platforms may implement
a similar command.
...\" 
...\" .zZ "Moved from Chapter 10"
...\" 
...\" 
...\" Unfortunately "dspcat" is not a standard command; however, both AIX and
...\" OSF/1 provide this command.
...\" 
...\" I don't think there is a "standard way" of checking whether one's message
...\" catalog environment has been correctly set up, since if someone is using
...\" a message catalog other than the default one, it is very easy to verify. Any
...\" command output will show a native language message... but since English is
...\" used for default messages, I guess it will be hard to figure it out this
...\" way.
...\" 
...\" 
...\" 
...\" Following is the entire list of message catalogs from the relevant
...\" section of dce_config...
...\" 
...\" 
...\" dcecds.cat       dcecfg.cat      dcedts.cat    dceevt.cat      dcekdb.cat
...\" dcekdc.cat       dcekrb.cat      dcerpc.cat    dcesec.cat      idl.cat
...\" dcethreads.cat   gdsditadm.cat   gdsproc.cat   gdssysadm.cat
...\" dcesad.cat       uuidgen.cat
...\" 
...\" 
...\" Those below this line are the DFS message catalogs:
...\" dfslgb.cat       dfsepi.cat      dfssal.cat      dfsasy.cat      dfshst.cat
...\" dfstkm.cat       dfsxcr.cat      dfscmp.cat      dfsubk.cat      dfsvls.cat
...\" dfsbbs.cat       dfscmd.cat      dfsdau.cat      dfsdcl.cat      dfsbdb.cat
...\" dfsfts.cat       dfsupd.cat      dfsbak.cat      dfsbtm.cat      dfsbtc.cat
...\" dfsfsh.cat       dfsxvl.cat
...\" 
...\" 
...\" 
...\" 
...\" .zA "Moved from 1.0.1 Release Notes Chap 1"
...\" 
...\" 
...\" ----------------------------------------------------------------------
.H 2 "Performance Regression Testing"
...\" ----------------------------------------------------------------------
...\" 
.P
Subsets of the following DCE functional test sets have also proved useful at
OSF for doing performance regression testing:
...\" 
.BL
...\" 
.LI
Threads functional tests from:
.DS
    \*Vdce-root-dir\*L/dce/src/test/threads\*O
.DE
...\" 
.LI
RPC \*Lperf\*O tests from:
.DS
    \*Vdce-root-dir\*L/dce/src/test/rpc/runtime/perf\*O
.DE
...\" 
.LI
CDS \*Lcp_killer\*O tests from:
.DS
    \*Vdce-root-dir\*L/dce/src/test/directory/cds\*O
.DE
...\" 
.LE
.P
Note that the tests you choose may require some modifications in order to be
used for this purpose.
.P
For DFS performance regression testing, the NFS connectathon simple suite has
been used at OSF.
...\" 
...\" 
...\" 
...\" .zZ "Moved from 1.0.1 Release Notes Chap 1"
...\" 
...\" 
...\" 
...\" 
...\" ----------------------------------------------------------------------
.H 2 "Debugging Hints"
...\" ----------------------------------------------------------------------
...\" 
.P
This section contains hints for debugging that are not specific to one of
the components described in the following chapters.
.P
See also the ``Debugging Hints'' sections in the component-specific chapters
of this guide.
...\" 
...\" 
...\" 
...\" ----------------------------------------------------------------------
.H 3 "Debugging on the AIX Platform"
...\" ----------------------------------------------------------------------
...\" 
.P
.BL
.LI
If you are bringing up \*Ldbx\*O and get the following message:
...\" 
.oS
    reading symbolic information ...Killed
.oE
...\" 
.P
then you should increase system paging space with \*Lsmit\*O.
.LI
After that, if you get the following message:
...\" 
.oS
    reading symbolic information ...Segmentation fault
.oE
...\" 
.P
then you must bring up \*Ldbx\*O with the \*L-f\*O option.
This tells \*Ldbx\*O to defer reading some symbols until it needs them.
...\" 
.oS
    dbx -f /usr/bin/sec_create_db
.oE
...\" 
.LI
In \*Ldbx\*O, enter:
...\" 
.oS
    ignore vtalrm
.oE
...\" 
.P
This tells \*Ldbx\*O to not trap the virtual timer alarms generated by DCE Threads.
.LE
...\" 
...\" 
...\" 
...\" ----------------------------------------------------------------------
.H 3 "Debugging on the OSF/1 Platform"
...\" ----------------------------------------------------------------------
...\" 
.P
Because of the size of the DCE source, you may need large amounts of virtual
address space to compile and link the DCE components (this statement can of
course be true for any platform). The space requirements may be especially
great if you are building with debugging symbols. The amount of virtual address
space you need is naturally related to the specific language tools you are
using.
...\" 
...\" 
...\" 
...\" 
...\" 
...\" 
...\" 
...\" .zA "enh,5724,R1.0.2,add SVR4 info"
...\" ----------------------------------------------------------------------
.H 3 "Debugging on an SVR4 Platform"
...\" ----------------------------------------------------------------------
...\" 
.P
Use the SVR4 tool \*Ltruss\*O when debugging your DCE port on an SVR4-based
system. The \*Ltruss\*O tool shows a program's interaction with the operating
system. It lists all the system calls made and their return values, and shows
all signals received. The command format is:
...\" 
...\" 
.SP
.DS I N
\*Ltruss\*O \*Vprogram-name\*O [ \*Vprogram-arguments\*O]
.DE
.SP
for example:
.SP
.oS
truss ls -l
.oE
.P
...\" 
...\" 
...\" .zZ "enh,5724,R1.0.2,add SVR4 info"
...\" 
...\" 
...\" 
...\" 
...\" ----------------------------------------------------------------------
.H 2 "A Note on Pathnames"
...\" ----------------------------------------------------------------------
...\" 
.P
Most of the files discussed in this guide are source files, and are accordingly
referred to by pathnames of the following general form:
.DS
    \*Vdce-root-dir\*L/dce/src/\*Vrest_of_pathname\*O
.DE
...\" 
.P
The ``\*Vdce-root-dir\*O'' prefix is a convenient symbol that stands for the path
.DS
    \*Vyour-root-dir\*O
.DE
...\" 
.P
where \*Vyour-root-dir\*O is the directory path location at which you have chosen
to create the \*Ldce\*O directory.
.P
However, in cases where built or installed files (which usually lie outside the
DCE source directory, \*Lsrc\*O) are discussed, pathnames of other forms are used.
These other forms are briefly described below. Note that the directory structure
of all parts of the DCE tree is a creature of ODE (the OSF Development Environment),
and you can find overviews of both the structure as a whole and of ODE itself in
Chapter 12 of this guide.
...\" 
...\" 
...\" ----------------------------------------------------------------------
.H 3 "Pathnames in the install Tree"
...\" ----------------------------------------------------------------------
...\" 
.P
The name
.DS
    \*Vdce-root-dir\*L/dce/install/\*Vmachine\*L/opt/dce1.1\*O
.DE
...\" 
.P
is a path in the DCE install tree, which is constructed in \*Vdce-root-dir\*O
as part of the DCE build. Part of the DCE installation process, done by
\*Ldce_config\*O, involves creating a link (called \*L/opt/dce1.1\*O) on the
host machine to the \*Lopt/dce1.1\*O part of this tree. It is thus possible
to refer to a built (and installed) file in the install tree in either of two
ways: by its position in the DCE ODE install tree
.DS
    \*Vdce-root-dir\*L/dce/install/\*Vmachine\*L/opt/dce1.1/etc/cds_attributes\*O
.DE
...\" 
.P
or by its position on an installed system:
.DS
    \*L/opt/dce1.1/etc/cds_attributes\*O
.DE
...\" 
.P
(The first is the more rigorous form, since it is an exact description of what
is actually built.) Pathnames of both forms occur in this guide.
...\" 
...\" 
...\" ----------------------------------------------------------------------
.H 3 "dcelocal Pathnames"
...\" ----------------------------------------------------------------------
...\" 
.P
The
.DS
    \*Vdcelocal\*O
.DE
...\" 
.P
prefix to a pathname is an abbreviation that normally stands for the
.DS
    \*L/opt/dcelocal\*O
.DE
.P
directory set up by default by \*Ldce_config\*O during cell configuration. Note
that a \*Vdcelocal\*O path has nothing to do with ODE or the DCE build; it is part
of an installed and configured DCE cell. The difference between the contents of
.DS
    \*L/opt/dce1.1\*O
.DE
...\" 
.P
and of \*Vdcelocal\*O, which stands for
.DS
    \*L/opt/dcelocal\*O
.DE
...\" 
.P
is that the latter consists of the necessary subset of DCE executables and other
files that must be locally present on every machine in a DCE cell; \*L/opt/dce1.1\*O
on the other hand contains the entire built and installable DCE, and is often a
remote filesystem that need only be mounted on most machines.
.P
For further information about the directory structure of an installed DCE, see
Chapter 5 (``Location of Installed DCE Files'') of the \*VOSF DCE Administration
Guide\(emIntroduction\*O.
...\" 
...\" 
...\" ----------------------------------------------------------------------
.H 3 "Pathnames of Installed Tests"
...\" ----------------------------------------------------------------------
...\" 
.P
The \*Ldcetest_config\*O installation script installs the DCE tests at a
pathname specified by the user, and then creates a softlink called
.DS
    \*L/dcetest/dcelocal\*O
.DE
...\" 
.P
to that location. The built tests can also be found at
.DS
    \*Vdce-root-dir\*L/dce/install/\*Vmachine\*L/dcetest/dce1.1/test\*O
.DE
...\" 
.P
after a DCE build, or, in the case of the DCE Threads tests (which are left
in the \*Lobj\*O tree) at:
.DS
    \*Vdce-root-dir\*L/dce/obj/\*Vmachinetype\*L/test/threads\*O
.DE
...\" 
.P
Thus it is possible to refer to tests in either of two ways, depending on
whether its built or its installed location is used. Pathnames of both forms
appear in this guide.
.P
For further information about \*Ldcetest_config\*O, refer to Chapter 13 of
this guide.
...\" 
...\" 
...\" 
...\" ----------------------------------------------------------------------
.H 2 "DCE Reference Page (Manpage) Installation"
...\" ----------------------------------------------------------------------
...\" 
.P
Many of the DCE administration and user reference pages have names that
consist of more than a single separate word. The reference pages for the
subcommands of \*Lrpccp(8rpc)\*O, for example, fall into this category: in
the printed version of the \*VOSF DCE Administration Reference\*O, a separate
reference page for \*Lrpccp(8rpc)\*O will be found, followed by separate pages
for \*Ladd element(8rpc)\*O, \*Ladd entry(8rpc)\*O, \*Ladd member(8rpc)\*O,
\*Lexport(8rpc)\*O, and so on. These last four pages contain documentation
for the:
...\" 
.BL
.LI
\*Lrpccp add element\*O
.LI
\*Lrpccp add entry\*O
.LI
\*Lrpccp add member\*O
.LI
\*Lrpccp export\*O
.LE
...\" 
.P
subcommands, respectively.
.P
The source files that contain the text from which the printed and the
on-line versions of the reference pages are formatted have names that are
identical to those of the full subcommands which they document. The only
difference between the two is that underline characters are substituted
in the filenames for spaces in the subcommands (and the filename ends with
a section number+component trigraph extension). For example, the following
files:
...\" 
.BL
.LI
\*Lrpccp_add_element.8rpc\*O
.LI
\*Lrpccp_add_entry.8rpc\*O
.LI
\*Lrpccp_add_member.8rpc\*O
.LI
\*Lrpccp_export.8rpc\*O
.LE
...\" 
.P
contain the reference page source text for the four \*Lrpccp\*O subcommands
listed above.
.P
This means that in order to access the on-line version of a DCE reference page
via the \*Lman\*O command, you must substitute underline characters in the
\*Lman\*O command line for the spaces you would have typed in the actual
subcommand. For example:
...\" 
.iS
    man rpccp_add_element.8rpc
.iE
...\" 
.P
Note that you can rename the versions of the files installed for \*Lman\*O
(\*Vnot\*O of course the versions used for formatting the book) with spaces
rather than underlines separating multiple words, if you wish. Users will
then have to type \*Lman\*O commands of the form:
...\" 
.iS
    man "rpccp add element.8rpc"
.iE
...\" 
.P
for reference pages with multiple-word names.
.P
Note also that the \*Lman\*O command on some systems may have trouble with
the multiple-character extensions on the DCE reference page source filenames.
...\" 
...\" 
...\" 
...\" 
...\" 
...\" 
...\" 
...\" 
...\" ----------------------------------------------------------------------
