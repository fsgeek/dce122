...\" @OSF_COPYRIGHT@
...\" COPYRIGHT NOTICE
...\" Copyright (c) 1990, 1991, 1992, 1993, 1994 Open Software Foundation, Inc.
...\" ALL RIGHTS RESERVED (DCE).  See the file named COPYRIGHT.DCE for
...\" the full copyright text.
...\" 
...\" HISTORY
...\" $Log: 2_subsys.gpsml,v $
...\" Revision 1.1.2.14  1994/10/30  22:47:35  weir
...\" 	Last updates
...\" 	[1994/10/30  22:46:30  weir]
...\"
...\" Revision 1.1.2.13  1994/10/30  16:25:36  weir
...\" 	Updates
...\" 	[1994/10/30  16:24:15  weir]
...\" 
...\" Revision 1.1.2.12  1994/10/29  23:25:57  weir
...\" 	More Updates
...\" 	[1994/10/29  23:24:40  weir]
...\" 
...\" Revision 1.1.2.11  1994/10/28  20:50:14  weir
...\" 	DCE 1.1 updates
...\" 	[1994/10/28  20:48:53  weir]
...\" 
...\" Revision 1.1.2.10  1994/10/26  20:40:49  weir
...\" 	DCE 1.1 Updates
...\" 	[1994/10/26  20:39:26  weir]
...\" 
...\" Revision 1.1.2.9  1994/10/14  18:38:54  weir
...\" 	Minor edit changes
...\" 	[1994/10/14  18:37:49  weir]
...\" 
...\" Revision 1.1.2.8  1994/06/20  20:28:47  weir
...\" 	Beta Update
...\" 	[1994/06/20  20:27:27  weir]
...\" 
...\" Revision 1.1.2.7  1994/06/19  20:53:58  weir
...\" 	Beta Update
...\" 	[1994/06/19  20:52:51  weir]
...\" 
...\" Revision 1.1.2.6  1994/06/17  13:50:24  weir
...\" 	Beta Update
...\" 	[1994/06/17  13:48:56  weir]
...\" 
...\" Revision 1.1.2.5  1994/06/13  19:25:16  devobj
...\" 	cr10872 - fix copyright
...\" 	[1994/06/13  19:24:16  devobj]
...\" 
...\" Revision 1.1.2.4  1994/06/12  17:32:03  weir
...\" 	No change-- for copyright insertion
...\" 	[1994/06/12  17:30:38  weir]
...\" 
...\" Revision 1.1.2.3  1994/06/08  18:47:22  weir
...\" 	Beta Update
...\" 	[1994/06/08  18:46:19  weir]
...\" 
...\" 	Beta Update
...\" 	[1994/06/02  21:22:01  weir]
...\" 
...\" Revision 1.1.2.2  1994/05/03  20:13:59  weir
...\" 	Reorganization (part 2)
...\" 	[1994/05/03  20:13:28  weir]
...\" 
...\" Revision 1.1.2.1  1994/05/03  19:00:22  weir
...\" 	Reorganization
...\" 	[1994/05/03  18:59:09  weir]
...\" 
...\" $EndLog$
...\" 
...\" 
...\" 
...\" 
...\" 
...\" ----------------------------------------------------------------------
.H 1 "DCE Subsystems"
...\" ----------------------------------------------------------------------
...\" 
...\" 
...\" 
...\" 
...\" 
...\" 
...\" 
...\" 
...\" 
...\" 
.P
This chapter contains information regarding porting DCE 1.1 subsystems and
APIs. It consists of the following main sections:
...\" 
.BL
.LI
Miscellaneous
.P
Contains information about various platform-sensitive aspects of DCE subsystem
code not peculiar to any single component.
...\" 
.LI
Internationalization
.P
Contains information about porting the DCE internationalization mechanisms.
.LI
Serviceability
.P
Contains information about porting the DCE Serviceability routines.
.LI
DCE configuration routines
.P
Contains information about porting the DCE configuration routines.
.LE
...\" 
...\" 
...\" 
...\" ----------------------------------------------------------------------
.H 2 "Miscellaneous"
...\" ----------------------------------------------------------------------
...\" 
.P
The following sections contain information about various platform-sensitive
aspects of DCE subsystem code.
...\" 
...\" 
...\" 
...\" 
...\" ----------------------------------------------------------------------
.H 3 "Porting DCE to Systems where strdup(\|) Does Not Use malloc(\|)"
...\" ----------------------------------------------------------------------
...\" 
.P
If you are porting DCE to a system where \*Lstrdup(\|)\*O does not use
\*Lmalloc(\|)\*O, you will need to change the \*Ldce_strdup(\|)\*O function
in:
...\" 
.DS
    \*Vdce-root-dir\*L/dce/src/dce/utils/misc/complete.c\*O
.DE
...\" 
...\" 
...\" 
...\" ----------------------------------------------------------------------
.H 3 "Use of strdup() by DCE 1.1 Subsystems"
...\" ----------------------------------------------------------------------
...\" OT 10031: sams, csrc use strup(), which is not available on all systems
.P
The DCE 1.1 \*Lsams\*O utility and the code set registry compiler \*Lcsrc\*O
both use the \*Lstrdup(\|)\*O routine. Some C libraries do not have \*Lstrdup(\|)\*O
(for example, earlier versions of Ultrix do not), although all of the DCE 1.1
reference platforms do. Thus an important DCE 1.1 porting step will be to ensure
that \*Lstrdup(\|)\*O is available on the target operating system.
.P
The \*Lsams\*O compiler code \*L#ifdef\*Os this function; see the contents of
...\" 
.DS
    \*Vdce-root-dir\*L/dce/src/tools/sams/sams.c\*O
.DE
...\" 
.P
\(emand you must toggle the machine-dependent switch \*LNEED_STRDUP\*O to get
the function built into \*Lsams\*O if necessary.
.P
For the \*Lcsrc\*O utility, you must copy the \*L#ifdef\*O'd \*Lstrdup(\|)\*O
code from:
...\" 
.DS
    \*Vdce-root-dir\*L/dce/src/tools/sams/sams.c\*O
.DE
...\" 
.P
Note that \*Lsams\*O cannot be coded to use \*Ldce_strdup(\|)\*O (see the
preceding section), because \*Ldce_strdup(\|)\*O is part of the DCE library,
which \*Lsams\*O is invoked during the building of.
...\" 
...\" 
...\" 
...\" 
...\" ----------------------------------------------------------------------
.H 2 "Internationalization"
...\" ----------------------------------------------------------------------
...\" 
.P
An ``internationalized'' RPC application uses a wide variety of languages other
than U.S. English. DCE 1.1 contains RPC runtime support for character and code
set interoperability for use by internationalized RPC applications. If you are
porting DCE and plan for your DCE product to support internationalized RPC
applications, you must create a character and code set registry from a ``template''
character and code set registry source file that OSF supplies on the DCE source tape.
The file is installed at:
...\" 
.DS
    \*L/usr/lib/nls/csr/code_set_registry.txt\*O
.DE
...\" 
.P
The code set registry template source file contains unique identifiers that OSF
has assigned to the character sets and code sets that have been registered with
OSF. You must edit this source file and supply the names that your platform uses
to refer to these character sets and code sets, then run the \*Lcsrc\*O utility
to generate the binary-format code set registry, which is required for porting
and testing the RPC runtime extensions for character and code set interoperability.
See the chapter entitled ``Configuring DCE'' in the \*VOSF DCE Administration Guide
\(em Introduction\*O, and the \*Lcsrc(8dce)\*O reference page in the \*VOSF DCE
Command Reference\*O for details on the template code set registry file and how to
run \*Lcsrc\*O. See the chapter entitled ``Writing Internationalized RPC Applications''
in the \*VOSF DCE Application Development Guide \(em Core Components\*O volume for
more information on character sets, code sets, and RPC runtime support for
internationalized RPC applications.
...\" 
...\" 
...\" ----------------------------------------------------------------------
.H 3 "Porting Considerations"
...\" ----------------------------------------------------------------------
...\" 
.P
The following sections describe important porting considerations involving
the DCE 1.1 Internationalization mechanisms.
...\" 
...\" 
...\" 
...\" 
...\" ----------------------------------------------------------------------
.H 4 "Location of Source Code"
...\" ----------------------------------------------------------------------
...\" 
.P
The DCE 1.1 codeset compiler code is located at:
...\" 
.DS
    \*Vdce-root-dir\*L/dce/src/rpc/csrc\*O
.DE
...\" 
...\" .P
...\" and consists of the following files:
...\" 
...\" .BL
...\" .LI
...\" \*Vdce-root-dir\*L/dce/src/rpc/csrc/csr.sams\*O
...\" .LI
...\" \*Vdce-root-dir\*L/dce/src/rpc/csrc/csrc.c\*O
...\" .LI
...\" \*Vdce-root-dir\*L/dce/src/rpc/csrc/csrc.h\*O
...\" .LI
...\" \*Vdce-root-dir\*L/dce/src/rpc/csrc/csrcgram.y\*O
...\" .LI
...\" \*Vdce-root-dir\*L/dce/src/rpc/csrc/csrclex.l\*O
...\" .LE
...\" 
...\" 
...\" 
.P
Runtime support is provided by routines compiled from the following code:
...\" 
.BL
...\" 
.LI
\*Vdce-root-dir\*L/dce/src/rpc/idl/lib/ndrui5.c\*O
.P
Code for NDR unmarshalling routines for International characters.
...\" 
...\" 
.LI
\*Vdce-root-dir\*L/dce/src/rpc/runtime/com.h\*O
.P
Private interface to the Common Communications Service for use by RPC
Protocol Services and Network Address Family Extension Services.
...\" 
...\" 
.LI
\*Vdce-root-dir\*L/dce/src/rpc/runtime/combind.c\*O
.P
Definition of the Binding Services for the Common Communication
Services component. These routines are called by applications to
manipulate Binding Rep data structures required by the runtime.
...\" 
...\" 
.LI
\*Vdce-root-dir\*L/dce/src/rpc/runtime/cs_s.h\*O
.P
Data types and definitions for Codeset Interoperability extension
(or Internationalization) to RPC runtime.
...\" 
...\" 
.LI
\*Vdce-root-dir\*L/dce/src/rpc/runtime/cs_s_eval.c\*O
.P
Remote Procedure Call (RPC) evaluation setup function.
...\" 
...\" 
.LI
\*Vdce-root-dir\*L/dce/src/rpc/runtime/cs_s_reg.c\*O
.P
Remote Procedure Call (RPC) OSF Code Set Registry Access routines
.P
Codeset interoperability requires a common way to recognize the
supported code sets for client and server. The OSF codeset registry
provides that functionality. The OSF codeset registry is a binary file
which is produced by \*Lcsrc\*O (the codeset registry compiler).
...\" 
...\" 
.LI
\*Vdce-root-dir\*L/dce/src/rpc/runtime/cs_s_stub.c\*O
.P
Codeset stub code.
...\" 
...\" 
.LI
\*Vdce-root-dir\*L/dce/src/rpc/runtime/ns_s_attr.c\*O
.P
...\" 
...\" 
.LI
\*Vdce-root-dir\*L/dce/src/rpc/runtime/nslookup.c\*O
.P
RPC Name Service routines to create and manage contexts for binding
lookups.
...\" 
...\" 
.LI
\*Vdce-root-dir\*L/dce/src/rpc/runtime/nsp.c\*O
.P
Definitions of all global variables needed by the RPC Name Service Component.
...\" 
...\" 
.LI
\*Vdce-root-dir\*L/dce/src/rpc/runtime/nsp.h\*O
.P
Private name service runtime \*Ltypedef\*Os, constant definitions, etc.
...\" 
...\" 
.LI
\*Vdce-root-dir\*L/dce/src/rpc/runtime/nsutil.c\*O
.P
Name Service Utilities module, containing utilities common to the NS
component routines.
...\" 
...\" 
.LI
\*Vdce-root-dir\*L/dce/src/rpc/runtime/rpcmem.h\*O
.P
Various macros and data for runtime memory allocation.
...\" 
...\" 
.LI
\*Vdce-root-dir\*L/dce/src/rpc/runtime/\*Vplatform\*L/cs_s_conv.c\*O
.P
I18N Character Set Conversion Call.
...\" 
...\" 
.LI
\*Vdce-root-dir\*L/dce/src/rpc/runtime/\*Vplatform\*L/\*Vplatform_name\*L_conv.h\*O
.P
Codeset \(em \*Liconv\*O name mapping table.
...\" 
...\" 
.LI
\*Vdce-root-dir\*L/dce/src/rpc/sys_idl/codesets.acf\*O
.P
Code set Encodings Attribute Configuration File (ACF)
.P
This configuration file defines two routines as IDL encoding services
facilities to support NSI codeset operations.
...\" 
...\" 
.LI
\*Vdce-root-dir\*L/dce/src/rpc/sys_idl/codesets.idl\*O
.P
This file defines codeset data structures, as well as routines to encode
the data before it is stored in NSI and to decode the data after it is
retrieved from NSI.
.P
Both the server and client will support a certain set of codesets. In order
for communications between client and server to proceed without major data
loss, the client needs to know which code sets a server supports. NSI is used
to store the server's supported code sets. Since codesets are represented by
integer values, they are encoded into endian-safe formats by the IDL encoding
services before they are stored in NSI.
...\" 
...\" 
.LI
\*Vdce-root-dir\*L/dce/src/rpc/sys_idl/codesets_stub.h\*O
.P
This file defines stub support routines that support marshalling and
unmarshalling of internationalized data. Code set conversion is done
automatically when codeset interoperability functionality is enabled.
...\" 
...\" 
.LI
\*Vdce-root-dir\*L/dce/src/rpc/sys_idl/rpc.idl\*O
.P
This module contains the public interface to the Common Communications
Service of the RPC facility.
...\" 
...\" 
.LI
\*Vdce-root-dir\*L/dce/src/rpc/sys_idl/rpcbase.idl\*O
.P
Defines the base RPC types.
...\" 
...\" 
.LE
...\" 
...\" 
...\" 
...\" 
...\" 
...\" ----------------------------------------------------------------------
.H 4 "ISO 10646 Codeset Conversion"
...\" ----------------------------------------------------------------------
...\" 
.P
The DCE 1.1 Internationalization routines require that DCE clients and servers
support codeset converters for the ISO 10646 code set. This means that operating
system platforms that intend to support these DCE routines will need to provide
these converters.
.P
DCE applications that intend to use the new RPC/IDL codeset functionality
will need to add this code set converter to their platform's code set conversion
mechanism. If that mechanism is the POSIX \*Liconv\*O code set conversion routines,
they will need to ensure that the ISO 10646 converter works with their version of
the \*Liconv\*O routines.
...\" 
...\" (each platform's iconv is a little different, as I understand it).
...\" 
A vendor whose platform has a code set converter mechanism that is \*Vnot\*O the
POSIX \*Liconv\*O mechanism will need to port the ISO 10646 converter to their
platform.
...\" 
...\" 
...\" The iconv converters are required for RPC automatic code set conversion
...\" mechanism.  So I assigned this CR to 'rpc' component.
...\" 
...\" 
...\" 
...\" 
...\" ----------------------------------------------------------------------
.H 4 "Use of nl_langinfo() by DCE 1.1"
...\" ----------------------------------------------------------------------
...\" 
.P
The C library function call \*Lnl_langinfo(\|)\*O returns a requested
attribute of the current locale. For example, when
...\" 
.iS
    nl_langinfo(CODESET);
.iE
...\" 
.P
is called, the current locale's code set name will be returned. The DCE RPC
runtime code sets evaluation functions depend on this functionality being
present in the base operating system.
.P
Both OSF/1 and AIX have this functionality, and it was added to the HP-UX C
library because of the DCE RPC requirement; but SINIX 5.41 lacks it.
.P
Note that both HP-UX and SINIX have the function call \*Lnl_langinfo(\|)\*O.
However, the function does not return the current locale's code set when
\*LCODESET\*O is requested on either of these platforms, even though
\*LCODESET\*O is defined in the standard header file. Thus, even though a
given operating system may have the \*Lnl_langinfo(\|)\*O call, this does not
necessarily mean that it has all of the functionality needed.
...\" 
.P
The only way to discover the presence or absence of this functionality on
a given platform is to execute the following little program in different
locales:
...\" 
.oS
    #include <stdio.h>
    #include <locale.h>
    #include <langinfo.h>

    main(void)
    {
        setlocale(LC_ALL, "");
        printf("%s\en", nl_langinfo(CODESET));
    }
.oE
...\" 
.P
If the operating system to which you are porting DCE 1.1 lacks this functionality,
four code set compatibility evaluation routines within the RPC runtime need to be
modified.
...\" 
...\" 
...\" ----------------------------------------------------------------------
...\" .H 4 "Platform Definitions and Variables"
...\" ----------------------------------------------------------------------
...\" 
...\" .P
...\" 
...\" 
...\" 
...\" 
...\" ----------------------------------------------------------------------
...\" .H 3 "Building and Linking"
...\" ----------------------------------------------------------------------
...\" 
...\" .P
...\" 
...\" 
...\" 
...\" 
...\" ----------------------------------------------------------------------
.H 3 "Testing and Verification"
...\" ----------------------------------------------------------------------
...\" 
.P
See Chapter 14 for information on the DCE Internationalization system tests.
...\" 
...\" 
...\" 
...\" 
...\" 
...\" ----------------------------------------------------------------------
.H 2 "Serviceability"
...\" ----------------------------------------------------------------------
...\" 
.P
The Serviceability API is a library of routines used by the DCE components
(with the exception of DCE Threads) to display or write server information
of various kinds. It uses message catalogs (generated by the DCE \*Lsams\*O
utility), but it is more than simply a message catalog-manipulation library.
Serviceability is also made available for application use; this is documented
in the \*VOSF DCE Application Development Guide \(em Core Components\*O volume.
.P
The DCE Serviceability source code is located at:
...\" 
.DS
    \*Vdce-root-dir\*L/dce/src/dce/utils/svc\*O
.DE
...\" 
.P
The DCE \*Lsams\*O utility source code is located at:
...\" 
.DS
    \*Vdce-root-dir\*L/dce/src/tools/sams\*O
.DE
...\" 
...\" 
...\" 
...\" ----------------------------------------------------------------------
.H 3 "DCE Serviceability Use of __FILE__ Macro"
...\" ----------------------------------------------------------------------
...\" 
.P
Whenever a serviceability message is generated, information identifying the
source file and line at which the invoked routine was called is included in
the message information. This information does not appear in text-form
non-error messages, but it is written into the binary form serviceability
logs (when binary logs are specified); and the information also appears
in the text form of messages announcing error situations. For example:
...\" 
.oS
\s-1
  1994-07-20-11:11:09.906-04:00I----- srvr FATAL smp main.c 2851 0xa44b0c18
  server_renew_identity(): login context has not been certified (dce / sec)
\s+1
.oE
...\" 
.P
The serviceability routines receive the source file information from
\*LDCE_SVC__FILE__\*O, which by default is defined to be the C macro
\*L__FILE__\*O; this is expanded to the filename by the C preprocessor.
However, if you desire to avoid these macro expansions in your application
code, you can re-define the symbol to be some kind of variable. For example:
...\" 
.oS
    #define DCE_SVC__FILE__ myfile
    #include <dce/dce.h>
    static char myfile[] = __FILE__;
.oE
...\" 
...\" 
.P
DCE vendors will set or unset \*LDCE_SVC_WANT__FILE__\*O in
...\" 
.DS
    \*Vdce-root-dir\*L/dce/export/\*VPLATFORM\*L/usr/include/dce/dce_svc.h\*O
.DE
...\" 
.P
to indicate whether or not filename and linenumbers are to appear in
serviceability messages, or if empty data is to be generated. This variable
is defined (set) by default.
...\" 
...\" 
...\" 
...\" ----------------------------------------------------------------------
.H 3 "Porting Considerations"
...\" ----------------------------------------------------------------------
...\" 
.P
The following sections contain important information regarding porting the
serviceability code.
...\" 
...\" 
...\" 
...\" 
...\" ----------------------------------------------------------------------
.H 4 "Platform Definitions and Variables"
...\" ----------------------------------------------------------------------
...\" OT 9915:
.P
The following conditional compilation variables must be set as part of a DCE
Serviceability port:
...\" 
...\" 
.VL .5i
.LI
\*LCATALOG_SUFFIX\*O
.P
The value of this variable specifies whether the \*Lcatopen(\|)\*O routine
should look for the \*L.cat\*O suffix at the end of message catalog filenames,
or not.
.P
Defined in:
...\" 
.DS
    \*Vdce-root-dir\*L/dce/src/dce/utils/svc/msgimpl.h\*O
.DE
...\" 
...\" 
.LI
\*LLOCK\*O
.LI
\*LUNLOCK\*O
.P
These are macros that perform mutex-locking in the DCE message handling
(\*Ldce_msg_\*O) routines. They can be rewritten if you are using something
other than the Pthreads interface.
.P
Defined in:
...\" 
.DS
    \*Vdce-root-dir\*L/dce/src/dce/utils/svc/msgimpl.h\*O
.DE
...\" 
...\" 
.LI
\*LSVC_ROUTEFILE_FORMAT\*O
.P
The value of this variable indicates the location of the serviceability
routing file.
.P
Defined in:
...\" 
.DS
    \*Vdce-root-dir\*L/dce/src/dce/utils/svc/svcimpl.h\*O
.DE
...\" 
...\" 
.LI
\*LLOCK\*O
.LI
\*LUNLOCK\*O
.P
These are macros that perform mutex-locking in the DCE serviceability
(\*Ldce_svc_\*O) routines. They can be rewritten if you are using something
other than the Pthreads interface.
.P
Defined in:
...\" 
.DS
    \*Vdce-root-dir\*L/dce/src/dce/utils/svc/svcimpl.h\*O
.DE
...\" 
...\" 
.LE
...\" 
...\" 
...\" 
...\" ----------------------------------------------------------------------
...\" .H 4 "sams"
...\" ----------------------------------------------------------------------
...\" 
...\" 
...\" 
...\" 
...\" 
...\" ----------------------------------------------------------------------
...\" .H 3 "Building and Linking"
...\" ----------------------------------------------------------------------
...\" 
...\" .P
...\" 
...\" 
...\" 
...\" 
...\" ----------------------------------------------------------------------
.H 3 "Testing and Verification"
...\" ----------------------------------------------------------------------
...\" 
.P
A version of the DCE example application \*Ltimop\*O which uses the serviceability
API can be found at
...\" 
.DS
    \*Vdce-root-dir\*L/dce/src/examples/svc/timop_svc\*O
.DE
...\" 
.P
The \*Ltimop_svc\*O application was developed mainly during the writing of the OSF
DCE Application Development Guide chapter on Serviceability. Although it was not
designed to be used for test purposes, it does make use of most of the serviceability
routines, and it is included in the DCE 1.1 release as (it is hoped) a useful
functional hand test for the interface. Instructions for building and running the
program, as well as sample run results, can be found in:
...\" 
.DS
    \*Vdce-root-dir\*L/dce/src/examples/svc/timop_svc/README\*O
.DE
...\" 
.P
An additional very simple Serviceability hand test can be found at:
...\" 
.DS
    \*Vdce-root-dir\*L/dce/src/examples/svc/hello_svc\*O
.DE
...\" 
.P
This program, when compiled and executed, does nothing more than print a ``Hello
world'' message to standard output, using the serviceability API. Unlike \*Ltimop_svc\*O,
\*Lhello_svc\*O does not require you to have a DCE cell up and running in order to
successfully execute it. (It does however require you to have the DCE Application
Environment installed). For further information, see:
...\" 
.DS
    \*Vdce-root-dir\*L/dce/src/examples/svc/hello_svc/README\*O
.DE
...\" 
...\" 
...\" ----------------------------------------------------------------------
.H 2 "DCE Configuration Routines"
...\" ----------------------------------------------------------------------
...\" 
.P
The status codes returned by the DCE configuration routines:
...\" 
.DS
    \*Ldce_cf_binding_entry_from_host(\|)\*O
    \*Ldce_cf_dced_entry_from_host(\|)\*O
    \*Ldce_cf_find_name_by_key(\|)\*O
    \*Ldce_cf_free_cell_aliases(\|)\*O
    \*Ldce_cf_get_cell_aliases(\|)\*O
    \*Ldce_cf_get_cell_name(\|)\*O
    \*Ldce_cf_get_csrgy_filename(\|)\*O
    \*Ldce_cf_get_host_name(\|)\*O
    \*Ldce_cf_intro(\|)\*O
    \*Ldce_cf_prin_name_from_host(\|)\*O
    \*Ldce_cf_profile_entry_from_host(\|)\*O
    \*Ldce_cf_same_cell_name(\|)\*O
.DE
...\" 
...\" 
.P
\*Vdo not\*O follow the DCE status encoding rules. This is in order to retain
compatibility with these routines' DCE 1.0 behavior. However, the status codes
returned by these routines, when passed to \*Ldce_error_inq_text(\|)\*O, will
yield the correct text message (\*Ldce_error_inq_text(\|)\*O will try the
non-existent \*Ldcecfg\*O message catalog first by calling the \*Ldce_msg_get_msg(\|)\*O
and \*Ldce_msg_get_cat_msg(\|)\*O API routines; when these fail it will
call \*Ldce_msg_get_default_msg(\|)\*O to retrieve the message from the in-memory
message table, which was built into \*Llibdce\*O). Note however that what
\*Ldce_error_inq_text(\|)\*O returns will be a message string in the following form:
...\" 
.DS
    \*Vmessage_text ... \*O(\*Vtechnology \*O/ \*Vcomponent\*O)
.DE
...\" 
.P
where the values for both \*Vtechnology\*O and \*Vcomponent\*O will be incorrect,
because of the DCE message routines' inability to interpret the (incompatible)
original status code.
.P
See the \*LDCE_SVC_INTRO(3dce)\*O reference page for a discussion of the usage
of the status code bits.
...\" 
...\" 
...\" 
...\" ----------------------------------------------------------------------
...\" 
...\" 
...\" 
...\" 
...\" Chapter 2. (New chapter) DCE Subsystems
...\"  2.1 Introduction
...\"  2.2 Internationalization
...\"  2.3 Serviceability
...\" .zZ "OSF, R1.1, new material"
...\" 
...\" 
...\" 
...\" 
...\" 
...\" ----------------------------------------------------------------------
