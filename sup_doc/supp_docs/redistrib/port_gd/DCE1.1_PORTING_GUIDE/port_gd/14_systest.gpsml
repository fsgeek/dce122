...\" @OSF_COPYRIGHT@
...\" 
...\" 
...\" HISTORY
...\" $Log: 14_systest.gpsml,v $
...\" Revision 1.1.2.7  1994/10/30  22:47:28  weir
...\" 	Last updates
...\" 	[1994/10/30  22:46:21  weir]
...\"
...\" Revision 1.1.2.6  1994/10/30  16:25:29  weir
...\" 	Updates
...\" 	[1994/10/30  16:24:05  weir]
...\" 
...\" Revision 1.1.2.5  1994/10/29  23:25:49  weir
...\" 	More Updates
...\" 	[1994/10/29  23:24:30  weir]
...\" 
...\" Revision 1.1.2.4  1994/10/28  20:50:04  weir
...\" 	DCE 1.1 updates
...\" 	[1994/10/28  20:48:42  weir]
...\" 
...\" Revision 1.1.2.3  1994/10/26  20:40:42  weir
...\" 	DCE 1.1 Updates
...\" 	[1994/10/26  20:39:15  weir]
...\" 
...\" Revision 1.1.2.2  1994/10/14  18:38:47  weir
...\" 	Minor edit changes
...\" 	[1994/10/14  18:37:39  weir]
...\" 
...\" Revision 1.1.2.1  1994/10/12  20:31:27  weir
...\" 	Reorganized system test material
...\" 	[1994/10/12  20:30:40  weir]
...\" 
...\" $EndLog$
...\" 
...\" 
...\" 
...\" 
...\" 
...\" 
...\" ----------------------------------------------------------------------
...\" Old history of the Systest chapter, which consisted of the present
...\"  chapters 13, 14, and 15...
...\" 
...\" 
...\" Revision 1.1.2.9  1994/06/20  21:39:37  weir
...\" 	Beta Update
...\" 	[1994/06/20  21:38:39  weir]
...\"
...\" Revision 1.1.2.8  1994/06/20  20:28:40  weir
...\" 	Beta Update
...\" 	[1994/06/20  20:27:18  weir]
...\" 
...\" Revision 1.1.2.7  1994/06/19  20:53:51  weir
...\" 	Beta Update
...\" 	[1994/06/19  20:52:42  weir]
...\" 
...\" Revision 1.1.2.6  1994/06/17  13:50:18  weir
...\" 	Beta Update
...\" 	[1994/06/17  13:48:47  weir]
...\" 
...\" Revision 1.1.2.5  1994/06/13  19:25:31  devobj
...\" 	cr10872 - fix copyright
...\" 	[1994/06/13  19:24:37  devobj]
...\" 
...\" Revision 1.1.2.4  1994/06/12  17:31:56  weir
...\" 	No change-- for copyright insertion
...\" 	[1994/06/12  17:30:29  weir]
...\" 
...\" Revision 1.1.2.3  1994/06/08  18:47:17  weir
...\" 	Beta Update
...\" 	[1994/06/08  18:46:12  weir]
...\" 
...\" Revision 1.1.2.2  1994/06/02  21:13:15  weir
...\" 	Beta Updates
...\" 	[1994/06/02  21:11:40  weir]
...\" 
...\" Revision 1.1.2.1  1994/05/03  19:00:15  weir
...\" 	Reorganization
...\" 	[1994/05/03  18:59:02  weir]
...\" 
...\" 
...\" 
...\" 
...\" 
...\" 
...\" (old) HISTORY
...\" Revision 1.1.2.1  1994/05/03  19:00:15  weir
...\" 	Reorganization
...\" 	[1994/05/03  18:59:02  weir]
...\"
...\" Revision 1.1.1.2  1994/05/03  18:59:02  weir
...\" 	Reorganization
...\"
...\" Revision 1.1.5.12  1993/11/23  21:58:27  weir
...\" 	Last updates
...\" 	[1993/11/23  21:57:53  weir]
...\"
...\" Revision 1.1.5.11  1993/11/22  22:14:59  weir
...\" 	Review comments
...\" 	[1993/11/22  22:14:31  weir]
...\" 
...\" Revision 1.1.5.10  1993/11/18  21:33:58  weir
...\" 	Review comments
...\" 	[1993/11/18  21:33:10  weir]
...\" 
...\" Revision 1.1.5.9  1993/11/18  15:12:03  weir
...\" 	1.0.3 updates
...\" 	[1993/11/18  15:11:29  weir]
...\" 
...\" Revision 1.1.5.8  1993/11/17  22:40:58  weir
...\" 	More updates
...\" 	[1993/11/17  22:40:23  weir]
...\" 
...\" Revision 1.1.5.7  1993/11/16  20:58:46  weir
...\" 	New set of Updates
...\" 	[1993/11/16  20:58:02  weir]
...\" 
...\" Revision 1.1.5.6  1993/11/15  15:15:17  weir
...\" 	DCE 1.0.3 updates
...\" 	[1993/11/15  15:14:37  weir]
...\" 
...\" Revision 1.1.5.5  1993/11/08  22:11:28  weir
...\" 	1.0.3 Updates
...\" 	[1993/11/08  22:09:49  weir]
...\" 
...\" Revision 1.1.5.4  1993/11/03  18:50:50  weir
...\" 	{def,9323,R1.0.3}
...\" 	First set of DCE 1.0.3 updates
...\" 	[1993/11/03  18:48:50  weir]
...\" 
...\" Revision 1.1.5.3  1993/09/21  14:47:30  weir
...\" 	(defect,8409,R1.0.3)
...\" 	Added setup information for dcethrpc.
...\" 	[1993/09/21  14:31:01  weir]
...\" 
...\" Revision 1.1.5.2  1993/06/25  21:07:38  weir
...\" 	{edit,8142,8143}
...\" 	rpc.sec.2 and rpc.cds.3 material moved from Porting Guide for 1.0.2a
...\" 	[1993/06/25  21:05:57  weir]
...\" 
...\" Revision 1.1.2.34  1993/04/08  20:09:08  weir
...\" 	Update
...\" 	[1993/04/08  20:08:22  weir]
...\" 
...\" Revision 1.1.2.33  1993/04/08  19:47:32  weir
...\" 	Updates
...\" 	[1993/04/08  19:46:30  weir]
...\" 
...\" Revision 1.1.2.32  1993/04/07  21:00:44  weir
...\" 	Updates
...\" 	[1993/04/07  20:59:56  weir]
...\" 
...\" Revision 1.1.2.31  1993/04/06  20:36:29  weir
...\" 	Updates
...\" 	[1993/04/06  20:35:35  weir]
...\" 
...\" Revision 1.1.2.30  1993/04/05  21:10:40  weir
...\" 	Updates
...\" 	[1993/04/05  21:09:54  weir]
...\" 
...\" Revision 1.1.2.29  1993/04/01  19:08:06  weir
...\" 	Update
...\" 	[1993/04/01  19:07:11  weir]
...\" 
...\" Revision 1.1.2.28  1993/03/31  21:43:37  weir
...\" 	Updates
...\" 	[1993/03/31  21:42:53  weir]
...\" 
...\" Revision 1.1.2.27  1993/03/30  21:19:11  weir
...\" 	Updates
...\" 	[1993/03/30  21:18:18  weir]
...\" 
...\" Revision 1.1.2.26  1993/03/24  21:18:29  weir
...\" 	Added pipetest.out example
...\" 	[1993/03/24  21:17:36  weir]
...\" 
...\" Revision 1.1.2.25  1993/03/24  20:21:20  weir
...\" 	Formatting adjustments
...\" 	[1993/03/24  20:17:41  weir]
...\" 
...\" Revision 1.1.2.24  1993/03/17  19:48:30  weir
...\" 	Updates
...\" 	[1993/03/17  19:45:17  weir]
...\" 
...\" Revision 1.1.2.23  1993/03/16  22:41:17  weir
...\" 	Updates
...\" 	[1993/03/16  22:40:23  weir]
...\" 
...\" Revision 1.1.2.22  1993/03/15  22:23:21  weir
...\" 	New fixes
...\" 	[1993/03/15  22:19:54  weir]
...\" 
...\" Revision 1.1.2.21  1993/03/12  20:46:08  weir
...\" 	More fixes
...\" 	[1993/03/12  20:42:42  weir]
...\" 
...\" Revision 1.1.2.20  1993/03/12  18:36:09  weir
...\" 	New additions etc.
...\" 	[1993/03/12  18:29:08  weir]
...\" 
...\" Revision 1.1.2.19  1993/03/10  23:59:45  weir
...\" 	More additions
...\" 	[1993/03/10  23:56:09  weir]
...\" 
...\" Revision 1.1.2.18  1993/03/03  21:46:09  weir
...\" 	More changes
...\" 	[1993/03/03  21:35:27  weir]
...\" 
...\" Revision 1.1.2.17  1993/02/26  16:06:42  weir
...\" 	New additions
...\" 	[1993/02/26  15:43:07  weir]
...\" 
...\" Revision 1.1.2.16  1993/02/22  21:57:07  weir
...\" 	Minor edits
...\" 	[1993/02/22  21:56:00  weir]
...\" 
...\" Revision 1.1.2.15  1993/02/19  21:22:28  weir
...\" 	Minor changes
...\" 	[1993/02/19  21:17:03  weir]
...\" 
...\" Revision 1.1.2.14  1993/02/18  21:59:08  weir
...\" 	Review changes
...\" 	[1993/02/18  21:56:07  weir]
...\" 
...\" Revision 1.1.2.13  1993/02/17  14:24:49  weir
...\" 	Safety checkin
...\" 	[1993/02/17  14:23:10  weir]
...\" 
...\" Revision 1.1.2.12  1993/02/16  13:07:25  weir
...\" 	Formatting changes
...\" 	[1993/02/16  13:06:27  weir]
...\" 
...\" Revision 1.1.2.11  1993/02/12  22:49:55  weir
...\" 	Last fixes
...\" 	[1993/02/12  22:48:54  weir]
...\" 
...\" Revision 1.1.2.10  1993/02/12  22:33:02  weir
...\" 	Reorganized
...\" 	[1993/02/12  22:31:47  weir]
...\" 
...\" Revision 1.1.2.9  1993/02/12  21:51:15  weir
...\" 	Last additions for review
...\" 	[1993/02/12  21:50:07  weir]
...\" 
...\" Revision 1.1.2.8  1993/02/12  16:09:35  weir
...\" 	Merge of new material
...\" 	[1993/02/12  16:08:24  weir]
...\" 
...\" Revision 1.1.2.7  1993/02/11  01:08:32  weir
...\" 	Fixes and additions
...\" 	[1993/02/11  01:05:10  weir]
...\" 
...\" Revision 1.1.2.6  1993/01/30  00:01:43  weir
...\" 	Drop for first review
...\" 	[1993/01/29  23:47:34  weir]
...\" 
...\" Revision 1.1.2.5  1993/01/28  21:43:07  cjd
...\" 	Embedded copyright notice
...\" 	[1993/01/28  21:33:58  cjd]
...\" 
...\" Revision 1.1.2.4  1993/01/27  21:33:34  weir
...\" 	First draft changes
...\" 	[1993/01/27  21:26:26  weir]
...\" 
...\" Revision 1.1.2.3  1993/01/07  20:17:28  weir
...\" 	Fixed CR5658
...\" 	[1993/01/07  20:15:34  weir]
...\" 
...\" Revision 1.1.2.2  1992/12/09  21:50:04  weir
...\" 	New filename
...\" 	[1992/12/09  21:48:33  weir]
...\" 
...\" 
...\" 
...\" 
...\" ----------------------------------------------------------------------
...\" 
...\" 
...\" 
...\" following is history of old version (when it was called 10_systest.gpsml):
...\" 
...\" revision 1.1.4.3  1992/12/04  19:07:41  weir
...\" 	1.0.1 Release Notes material incorporated
...\" 	[1992/12/04  19:06:15  weir]
...\"
...\" revision 1.1.4.2  1992/09/14  17:52:45  weir
...\" 	Removed change bar macros; moved into 1.0.2doc tree
...\" 	[1992/09/14  17:48:11  weir]
...\" 
...\" revision 1.1.2.7  1992/08/03  21:37:19  steiner
...\" 	Formatting fix.
...\" 	[1992/08/03  21:36:58  steiner]
...\" 
...\" revision 1.1.2.6  1992/07/29  19:25:16  steiner
...\" 	Comments from Gail.
...\" 	[1992/07/29  19:24:53  steiner]
...\" 
...\" revision 1.1.2.5  1992/07/20  17:04:09  steiner
...\" 	Edited.
...\" 	[1992/07/20  17:03:14  steiner]
...\" 
...\" revision 1.1.2.4  1992/07/06  18:15:48  steiner
...\" 	Comments from Gail Driscoll.
...\" 	[1992/07/06  18:14:31  steiner]
...\" 
...\" revision 1.1.2.3  1992/07/01  17:01:38  oaf
...\" 	CR 4329:  Changed order of tests System Test Driver program.
...\" 			dcetmsyn now 2nd.
...\" 			dcetmudt now 3rd.
...\" 	[1992/07/01  17:00:53  oaf]
...\" 
...\" revision 1.1.2.2  1992/06/10  02:32:14  oaf
...\" 	Corrected spelling, grammar, formatting, spacing.
...\" 	Realigned text so it fits on an 80-char screen.
...\" 	[1992/06/10  02:31:24  oaf]
...\" 
...\" revision 1.1  1992/01/29  15:39:57  damon
...\" 	Initial revision
...\" 
...\" 
...\" 
...\" 
...\" ----------------------------------------------------------------------
.H 1 "DCE System Tests under TET"
...\" ----------------------------------------------------------------------
...\" 
...\" 
...\" 
...\" 
...\" 
...\" TET-ized tests...
...\" 
...\" ----------------------------------------------------------------------
...\" .H 2 "Individual DCE System Tests and their Test-Specific Options"
...\" ----------------------------------------------------------------------
...\" 
.P
The following subsections list the test-specific options and descriptions of
the DCE system tests that have been converted to run under TET and the \*Lrun\*O
control scripts.
.P
All of these tests are run using the command format and common options described
above, and produce TET journal file and \*Lstdout\*O output also as described
above.
.P
It should be noted that some tests are intended to generate errors. Some of the
resulting error messages appear in the standard output and may appear to be test
errors, although they are not. The test journal files are always the final authority
as to whether a test passed or failed.
.P
The following subsections also contain information about the tests' associated
``data'' scripts.  These data scripts contain variables and default values for:
internal loop counts; thread counts; protocols; organization, group, and principal
names; passwords; directory and file names; test data; file sizes; wait times; and
other, more esoteric runtime parameters.
.P
Some data script variables have test-specific command line options associated with
them; it is recommended that you use the command line options to change the value
of such variables at run time. If you wish to change variables that are not accessible
from the command line, you should consult the test and data scripts for information.
...\" 
...\" 
.nS "note"
All DCE system test verification was done with the default values for all data file
variables which are not alterable by command line option. It is left entirely to the
user to resolve problems arising from alteration of variables not accessible from the
command line.
.nE
...\" 
...\" 
...\" 
...\" 
...\" 
...\" ----------------------------------------------------------------------
.H 2 "Threads"
...\" ----------------------------------------------------------------------
.P
The following sections describe the DCE Threads system tests run under TET.
...\" 
...\" 
...\" ----------------------------------------------------------------------
.H 3 "dceth002"
...\" ----------------------------------------------------------------------
...\" 
.P
\*Ldceth002\*O is designed to exercise the threads-creation capability. It calls
\*Ldceth002_c\*O, creating a number of threads in each of a number of processes.
The threads then loop and perform some simple computations.
...\" 
...\" 
.VL 1.5i
.LI "Test\ Script:"
\*L$TET_ROOT/system/threads/ts/dceth002/dceth002\*O
...\" 
.LI "Data\ Script:"
\*L$TET_ROOT/system/threads/ts/dceth002/dceth002.data\*O
...\" 
.LE
...\" 
.P
\*Ldceth002\*O is invoked as follows:
...\" 
.iS
    run.thr \*V{\*L-l \*Vloops | \*L-t \*Vhours } [other_options] \*Ldceth002
.iE
...\" 
.P
where:
...\" 
.VL 1.5i
.LI "\*L-l\ \*Vloops\*O"
Specifies the number of loops or passes to run.
...\" 
.LI "\*L-t\ \*Vhours\*O"
Specifies the time in hours to run. A decimal point is accepted; e.g. ``.5'' is
interpreted as 30 minutes.
...\" 
.LI "\*Ldceth002\*O"
Specifies the name of the test.
...\" 
.LE
...\" 
.P
Test-specific options are described in the following section.
...\" 
...\" 
...\" 
...\" ----------------------------------------------------------------------
.H 4 "Test-specific Command Line Options for dceth002"
...\" ----------------------------------------------------------------------
...\" 
.P
Following are descriptions of command line options specific to \*Ldceth002\*O.
...\" 
...\" 
.BL
.LI
\*L-n \*Vnumber\*O
.P
Specifies number of threads to use. Default is 40.
...\" 
.LI
\*L-r \*Vnumber\*O
.P
Specifies number of processes to run. Default is 4.
...\" 
.LE
...\" 
.P
This test also uses the following standard \*Lrun\*O options:
...\" 
.BL
.LI
\*L-e \*Vnumber\*O
.LI
\*L-E \*Vnumber\*O
.LI
\*L-c\*O
.LI
\*L-h\*O
.LE
...\" 
.P
For explanations of these options, see ``Command Line Options Common to Some or All
of the ``Run'' Scripts'', in Chapter 13.
...\" 
.P
This test can be used for stress testing by specifying a large number of threads
and a large number of processes.
...\" 
...\" 
...\" ----------------------------------------------------------------------
.H 3 "dcethmut"
...\" ----------------------------------------------------------------------
...\" 
.P
\*Ldcethmut\*O is designed to exercise the threads-creation capability and the
use of mutual exclusion primitives. It runs a number of copies of \*Ldcethmut_c\*O
in separate processes, each creating a number of threads which lock and unlock the
same mutex repeatedly.
...\" 
...\" 
.VL 1.5i
.LI "Test\ Script:"
\*L$TET_ROOT/system/threads/ts/dcethmut/dcethmut\*O
...\" 
.LI "Data\ Script:"
\*L$TET_ROOT/system/threads/ts/dcethmut/dcethmut.data\*O
...\" 
.LE
...\" 
.P
\*Ldcethmut\*O is invoked as follows:
...\" 
.iS
    run.thr \*V{\*L-l \*Vloops | \*L-t \*Vhours } [other_options] \*Ldcethmut
.iE
...\" 
.P
where:
...\" 
.VL 1.5i
.LI "\*L-l\ \*Vloops\*O"
Specifies the number of loops or passes to run.
...\" 
.LI "\*L-t\ \*Vhours\*O"
Specifies the time in hours to run. A decimal point is accepted; e.g. ``.5'' is
interpreted as 30 minutes.
...\" 
.LI "\*Ldcethmut\*O"
Specifies the name of the test.
...\" 
.LE
.P
Test-specific options are described in the following section.
...\" 
...\" 
...\" 
...\" ----------------------------------------------------------------------
.H 4 "Test-specific Command Line Options for dcethmut"
...\" ----------------------------------------------------------------------
...\" 
.P
Following are descriptions of command line options specific to \*Ldcethmut\*O.
...\" 
...\" 
.BL
.LI
\*L-n \*Vnumber\*O
.P
Specifies number of threads to use. Default is 40.
...\" 
.LI
\*L-r \*Vnumber\*O
.P
Specifies number of processes to run. Default is 4.
...\" 
.LE
...\" 
...\" 
.P
This test also uses the following standard \*Lrun\*O options:
...\" 
.BL
.LI
\*L-e \*Vnumber\*O
.LI
\*L-E \*Vnumber\*O
.LI
\*L-c\*O
.LI
\*L-h\*O
.LE
...\" 
.P
For explanations of these options, see ``Command Line Options Common to Some
or All of the ``Run'' Scripts'', in Chapter 13.
...\" 
...\" 
...\" 
...\" ----------------------------------------------------------------------
.H 3 "dcethrpc"
...\" ----------------------------------------------------------------------
...\" 
.P
\*Ldcethrpc\*O tests RPC servers' and clients' ability to spawn multiple threads.
It primarily tests the DCE Threads and RPC components but can also use the
Security component.
...\" 
...\" 
.VL 1.5i
.LI "Test\ Script:"
\*L$TET_ROOT/system/threads/ts/dcethrpc/dcethrpc\*O
...\" 
.LI "Data\ Script:"
\*L$TET_ROOT/system/threads/ts/dcethrpc/dcethrpc.data\*O
...\" 
.LE
...\" 
.P
\*Ldcethrpc\*O is invoked as follows:
...\" 
.iS
    run.thr \*V{\*L-l \*Vloops | \*L-t \*Vhours } [other_options] \*Ldcethrpc
.iE
...\" 
where:
...\" 
.VL 1.5i
.LI "\*L-l\ \*Vloops\*O"
Specifies the number of loops or passes to run.
...\" 
.LI "\*L-t\ \*Vhours\*O"
Specifies the time in hours to run. A decimal point is accepted; e.g. ``.5'' is
interpreted as 30 minutes.
...\" 
.LI "\*Ldcethrpc\*O"
Specifies the name of the test.
...\" 
.LE
.P
Test-specific options are described in the following section.
...\" 
...\" 
...\" 
...\" ----------------------------------------------------------------------
.H 4 "Test-specific Command Line Options for dcethrpc"
...\" ----------------------------------------------------------------------
...\" 
.P
Following are descriptions of command line options specific to \*Ldcethrpc\*O.
...\" 
...\" 
.BL
.LI
\*L-m \*Vname(s)\*O or \*L-M\*O
.P
(Either \*L-m\*O or \*L-M\*O is \*Vrequired\*O for this test.) \*L-m\*O specifies
the machine(s) to use. Either multiple ``\*L-m \*Vname\*O'' groups or a single
``\*L-m \*Vname1 \ .\ .\ . nameN\*O'' are allowed. \*L-M\*O specifes that the list
of machine(s) to use should be read from the \*Vtestname\*L.data\*O file. Note
that \*L-M\*O and \*L-m\*O are mutually exclusive.
...\" 
.LI
\*L-P \*Vstring\*O
.P
Specifies the protocol sequence to use: \*Lncadg_ip_udp\*O (connectionless, the
default) or \*Lncacn_ip_tcp\*O (connection-oriented). This option is useful for
testing all the protocols DCE supports.
...\" 
.LI
\*L-X \*Vnumber\*O
.P
Specifies the RPC endpoint port number (default: 1062).
...\" 
.LI
\*L-n \*Vnumber\*O
.P
Specifies the number of threads the client and server create. The default is 100.
...\" 
.LI
\*L-s \*Vnumber\*O
.P
Specifies the size of the portion of array that is read by the server. The default
is 100.
...\" 
.LI
\*L-C \*Vnumber\*O
.P
Specifies the maximum number of calls server can handle concurrently. The default
is 5.
...\" 
.LE
...\" 
.P
This test can be used for stress testing by specifying a large number of threads
to create (note that the number of threads that can be created is dependent on the
memory capacity of the machine), setting a large chunk size, or by specifying many
machines with the \*L-m\*O option.
...\" 
...\" 
.P
This test also uses the following standard \*Lrun\*O options:
...\" 
.BL
.LI
\*L-e \*Vnumber\*O
.LI
\*L-E \*Vnumber\*O
.LI
\*L-c\*O
.LI
\*L-h\*O
.LE
...\" 
.P
For explanations of these options, see ``Command Line Options Common to Some or
All of the ``Run'' Scripts'', in Chapter 13..
...\" 
...\" 
...\" 
...\" ----------------------------------------------------------------------
.H 4 "Test-specific Command Line Options for dcethrpc_auth"
...\" ----------------------------------------------------------------------
...\" 
.P
\*Ldcethrpc_auth\*O is simply a variant of the normal, unauthenticated running of
\*Ldcethrpc\*O, so it supports all the \*Ldcethrpc\*O and \*Lrun\*O options, as
well as the following additional options:
...\" 
...\" 
.BL
.LI
\*L-A \*Vnumber\*O
.P
Specifies the authentication level (default: 0).
...\" 
.LI
\*L-V \*Vnumber\*O
.P
Specifies the authentication service (default: 1).
...\" 
.LI
\*L-Z \*Vnumber\*O
.P
Specifies the authorization service (default:  2).
...\" 
.LI
\*L-p \*Vprincipal_name\*O
.P
Specifies the account to authenticate with. This account must already exist in the
security registry, and its password must be identical to its name. Moreover, the
name must be registered locally on each machine you want to target with the \*L-m\*O
option. Use the following \*Lrgy_edit\*O command on each target machine to register
the name locally and to verify that the name was registered locally with the
\*Lktlist\*O command:
...\" 
.iS
    ktadd -p \*Vprincipal_name \*L-pw \*Vprincipal_name
.iE
...\" 
.LE
...\" 
...\" 
.nS "note"
In DCE 1.1 the account added for \*Ldcethrpc_auth\*O must have a password
identical to its name. It is a severe security breach to leave this account
extant after running the test. Make sure that that this account is deleted
when you have completed running this test.
.nE
...\" 
...\" 
...\" 
...\" 
...\" 
...\" ----------------------------------------------------------------------
.H 2 "RPC"
...\" ----------------------------------------------------------------------
...\"
.P
The following sections describe the DCE RPC system tests that are run under
TET.
...\" 
...\" 
...\" 
...\" ----------------------------------------------------------------------
.H 3 "dcerpbnk"
...\" ----------------------------------------------------------------------
...\" 
.P
The \*Ldcerpbnk\*O DCE System Test is a small scale simulation of a banking
operation. It tests most aspects of DCE and resembles an actual application.
.P
\*Ldcerpbnk\*O tests the RPC component (in particular the Object Registry table
and Interface Registry table), as well as the Threads, CDS and Security components.
...\" 
...\" 
.VL 1.5i
.LI "Test\ Script:"
\*L$TET_ROOT/system/rpc/ts/dcerpbnk/dcerpbnk\*O
...\" 
.LI "Data\ Script:"
\*L$TET_ROOT/system/rpc/ts/dcerpbnk/dcerpbnk.data\*O
...\" 
.LE
...\" 
...\" 
.P
\*Ldcerpbnk\*O is invoked as follows:
...\" 
.iS
    run.rpc \*V{\*L-l \*Vloops | \*L-t \*Vhours } [other_options] \*Ldcerpbnk
.iE
...\" 
...\" 
.P
where:
...\" 
...\" 
.VL 1.5i
.LI "\*L-l\ \*Vloops\*O"
Specifies the number of loops or passes to run.
...\" 
.LI "\*L-t\ \*Vhours\*O"
Specifies the time in hours to run. A decimal point is accepted; e.g. ``\*L.5\*O'' is
interpreted as 30 minutes.
...\" 
.LI "\*Ldcerpbnk\*O"
Specifies the name of the test.
...\" 
.LE
...\" 
...\" 
The test-specific \*Vother_options\*O are described in the following section.
...\" 
...\" 
...\" 
...\" ----------------------------------------------------------------------
.H 3 "Test-specific Command Line Options for dcerpbnk"
...\" ----------------------------------------------------------------------
...\" 
.P
Following are descriptions of command line options specific to \*Ldcerpbnk\*O.
...\" 
...\" 
.BL
.LI
\*L-m \*Vname(s)\*O or \*L-M\*O
.P
(Either \*L-m\*O or \*L-M\*O is \*Vrequired\*O for this test.) \*L-m\*O specifies
the machine(s) to use. Either multiple ``\*L-m \*Vname\*O'' groups or a single
``\*L-m \*Vname1 \ .\ .\ . nameN\*O'' are allowed. \*L-M\*O specifes that the list
of machine(s) to use should be read from the \*Vtestname\*L.data\*O file. Note
that \*L-M\*O and \*L-m\*O are mutually exclusive.
.P
Note that the test can be used for stress testing by specifying many \*L-m\*O
options.
...\" 
...\" 
.LI
\*L-P \*Vstring\*O
.P
Specifies the protocol sequence to use: either \*Lncadg_ip_udp\*O (connectionless,
the default) or \*Lncacn_ip_tcp\*O (connection-oriented). This option is useful for
testing all the protocols DCE supports.
...\" 
...\" 
.LI
\*L-r \*Vseconds\*O
.P
Specifies the maximum transaction run time allowed (the default is 20 seconds).
...\" 
.LE
...\" 
.P
This test also uses the following standard \*Lrun\*O options:
...\" 
.BL
.LI
\*L-e \*Vnumber\*O
.LI
\*L-E \*Vnumber\*O
.LI
\*L-c\*O
.LI
\*L-h\*O
.LE
...\" 
.P
For explanations of these options, see ``Command Line Options Common to Some
or All of the ``Run'' Scripts'', in Chapter 13.
...\" 
...\" 
...\" 
...\" 
.zA "def,10739,1.1beta,new info"
...\" 
...\" 
...\" ----------------------------------------------------------------------
.H 4 "Test-specific Command Line Options for dcerpbnk_auth"
...\" ----------------------------------------------------------------------
...\" 
.P
\*Ldcerpbnk_auth\*O is simply an authenticated variant of the unauthenticated
\*Ldcerpbnk\*O, so it supports all the \*Ldcerpbnk\*O and \*Lrun\*O options.
...\" 
.P
The following additional setup is required before running the test:
...\" 
...\" 
.AL
.LI
\*Ldce_login\*O as the Cell Administrator (\*Lcell_admin\*O).
...\" 
.LI
Invoke \*Lrgy_edit\*O and add the test principal as follows:
...\" 
.oS
    $ \*Lrgy_edit\*C
    => \*Ldomain principal\*C
    => \*Ladd bankd\*C
    => \*Ldomain account\*C
    => \*Ladd bankd -g none -o none -pw \*Vpassword\*L -mp -dce\*C
    => \*Lktadd -p bankd -pw \*Vpassword\*C
    => \*Lquit\*C
.oE
...\" 
.LE
...\" 
.P
An example of running the test using connectionless protocol:
...\" 
.iS
    run.rpc -t 15 -m "west dce3 soldier" -P ncadg_ip_udp dcerpbnk_auth
.iE
...\" 
...\" 
.zZ "def,10739,1.1beta,new info"
...\" 
...\" 
...\" ----------------------------------------------------------------------
.H 3 "RPC Runtime Stress Test"
...\" ----------------------------------------------------------------------
...\" 
.P
This test first determines the platform's maximum number of concurrent multiple
client calls allowed to a server, and then repeatedly transmits an array of
structures of ten members back and forth between its clients and server.
...\" 
...\" 
.VL 1.5i
.LI "Test\ Script:"
\*L$TET_ROOT/system/rpc/ts/rpc.runtime.1/dcerpcrun\*O
...\" 
.LI "Data\ Script:"
\*L$TET_ROOT/system/rpc/ts/rpc.runtime.1/dcerpcrun.data\*O
...\" 
.LE
...\" 
...\" 
.P
\*Ldcerpcrun\*O is invoked as follows:
...\" 
.iS
    run.rpc \*V{\*L-l \*Vloops | \*L-t \*Vhours } [other_options] \*Ldcerpcrun
.iE
...\" 
.P
where:
...\" 
...\" 
.VL 1.5i
.LI "\*L-l\ \*Vloops\*O"
Specifies the number of loops or passes to run.
...\" 
.LI "\*L-t\ \*Vhours\*O"
Specifies the time in hours to run. A decimal point is accepted; e.g. ``.5'' is
interpreted as 30 minutes.
...\" 
.LI "\*Ldcerpcrun\*O"
Specifies the name of the test.
...\" 
.LE
...\" 
...\" 
.P
The \*Vother_options\*O available are:
...\" 
...\" 
.VL 2i
...\" 
.LI "\*L-m\ \*Vname(s)\*O"
Specifies the machine(s) to use. Either multiple ``\*L-m \*Vname\*O'' groups
or a single ``\*L-m \*Vname1 \ .\ .\ . nameN\*O'' are allowed.
...\" 
.LI "\*L-M\*O"
Specifes that the list of machine(s) to use should be read from the
\*Vtestname\*L.data\*O file.
...\" 
...\" 
.LI "\*L-T\ \*Vhours\*O"
.LI "\*L-L\ \*Vnumber\*O"
Specifies the number of hours or number of times to execute the server-side
internal loop of the test. The \*Vhours\*O parameter may include a decimal
point; e.g. ``\*L-T .5\*O'' is interpreted to mean 30 minutes. \*L-L\*O and
\*L-T\*O are mutually exclusive.
...\" 
...\" 
.LI "\*L-C\ \*Vnumber\*O"
Specifies the number of client internal loops. Increasing this parameter from
its default value, 5, is the best way to increase the load this test puts on RPC.
...\" 
...\" 
.LE
...\" 
...\" 
...\" 
.P
For example, to run the test in the example cell described earlier in this
chapter, you would enter:
...\" 
.iS
    run.rpc -t 48 -T .1 -m "machine1 machine2 machine3" dcerpcrun
.iE
...\" 
...\" 
...\" 
...\" 
.nP
...\" ----------------------------------------------------------------------
.TB "Client Daemon Specific Configuration File Variables"
.TS h
center tab(@) box;
lb | lb | lb
lb | lb | lb
lb | l | l.
Variable in@@Default Value
Config File@Description@as Shipped
_
.TH
_
CLIENTS@Client machine names@""
_
CLIENTLOOPS@Number of client loops@5
_
CLIENTCLEANUP@Client cleanup flag@1
_
CONCURRENT@Number of concurrent@1
@calls
_
CLIENT@Client binary name@dcerpcrun_client
@in working directory
_
KILL_WAIT@File with command to@clientwait.kill
@kill clientwait
...\" 
...\" 
.TE
...\" 
...\" 
...\" 
...\" 
...\" ----------------------------------------------------------------------
.H 4 "Description of dcerpcrun"
...\" ----------------------------------------------------------------------
...\" 
.P
The \*Ldcerpcrun\*O system test is a low level test of the DCE RPC runtime. It
is designed to perform load-testing on RPC at the same time as other DCE system
tests are exercising DCE upper layer functions (for example, in Security or
CDS). \*Ldcerpcrun\*O is derived from RPC functional tests, and thus does not
itself exercise this upper layer functionality. The test contains the following
enhancements over the functional test version:
...\" 
.BL
.LI
The test executes multi-threaded client calls to one server interface.
...\" 
.LI
A structure of 10 numbers is built into an array of 1000 elements and piped to
and sent back from the server. Error checking is performed on both sides of the
bi-directional pipe.
.LE
...\" 
...\" 
.P
List of future enhancements:
.BL
.LI
Add \*Ldce_error_text\*O mapping instead of case conditional in utilities
.LI
Add authenticated RPC switch
.LI
Add NSI interface for client and server names
.LE
...\" 
...\" 
...\" 
...\" 
...\" 
...\" ----------------------------------------------------------------------
.H 3 "RPC-Security System Test"
...\" ----------------------------------------------------------------------
...\" 
.P
The \*Lrpc.sec.2\*O system test is designed to stress the RPC and Security
components of DCE.
...\" 
...\" 
.P
The Security component is stressed via frequent identity updates and
validations, and the RPC component is stressed via continuous RPC requests
by multiple clients using full authentication and a complex data type (a
conformant structure). The client side test code defaults to making calls
as fast as possible so as to put as much load as possible on the server.
.P
This test can also be used for performance testing of authenticated RPC,
though this is not its default behavior. Note that an attempt has been made
in the coding of this test to observe good programming practice from the DCE
point of view.
.P
In outline, the test operates as follows:
...\" 
...\" 
.AL
.LI
The test first determines the implementation's maximum number of concurrent
calls for multiple clients to a server, using the highest level of authentication
offered by the runtime library (\*Lrpc_c_protect_level_pkt_privacy\*O), and
transmitting structures with conformant array members. The concurrent call
maximum will be sensed by the receipt of the RPC status \*Lrpc_s_server_too_busy\*O
(if the client is using a connection-oriented protocol) or \*Lrpc_s_comm_failure\*O
(if the client is using a connectionless protocol).
...\" 
.LI
Following the determination of the call maximum, the test is run in a loop
after a reset of the registry server ticket lifespan to five minutes for
the test client and server principals in order to validate ticket renewal
operations near the maximum call rate.
...\" 
.LE
...\" 
...\" ZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZ
...\" ----------------------------------------------------------------------
.H 4 "Logic Flow of the RPC-Security System Test"
...\" ----------------------------------------------------------------------
...\" 
.P
\*Ldcerpsec\*O, the script invoked by TET, calls \*Lrpc.sec.2_setup.sh\*O
and \*Lrpc.sec.2_runtest.sh\*O.
...\" 
...\" 
.P
In outline, the operation of \*Lrpc.sec.2_setup.sh\*O is as follows:
...\" 
...\" 
.AL
.LI
Checks to make sure that the user has a valid identity as \*Lcell_admin\*O.
.LI
Checks to make sure that all of the variables used by the setup script are
assigned values in the configuration file.
.LI
Creates the client and server principals.
.LI
Creates the client and server accounts and keytab files. If the path to the
keytab file does not exist, the script attempts to create it. Note that you
will be prompted for the \*Lcell_admin\*O password twice during this part
of the setup.
.LI
Creates the CDS directory into which the server interface entry will be
exported.
.LI
Attempts to create a client keytab file on any systems named in the
configuration file as client machines in the test.
.LI
Attempts to create a server keytab file on any systems named in the configuration
file as server machines in the test.
.LE
...\" 
...\" 
...\" 
...\" ----------------------------------------------------------------------
...\" Table of Required Objects
...\" ----------------------------------------------------------------------
...\" 
.br
.ne 30
.TB "Objects Created by the rpc.sec.2 System Test"
.TS H
center tab(@) box;
lb | lb | lb
lb | lb | lb
l | lb | l.
DCE Object@Variable in@Default value
Needed@config file@as shipped
_
.TH
_
Server principal and@RPCSEC2_SRV_PRINC_NAME@rpc.sec.2_srv
account
_
Client principal and@RPCSEC2_CLI_PRINC_NAME@rpc.sec.2_cli
account
_
Group for the@RPCSEC2_SRV_GROUP_NAME@subsys/systest/cds_test
server test
_
Server key file@RPCSEC2_SRV_KEYTAB_FN@rpc.sec.2_srv.keytab
_
Server key file@RPCSEC2_CLI_KEYTAB_DIRPATH@/tmp
directory
_
Client key file@RPCSEC2_CLI_KEYTAB_FN@rpc.sec.2_cli.keytab
_
Client key file@RPCSEC2_CLI_KEYTAB_DIRPATH@/tmp
directory
_
CDS directory for@RPCSEC2_SRV_CDS_NAME@/.:/test/systest/srv_ifs
server interface@@
object
_
Configuration file@RPCSEC2_CONF@rpc.sec.2.conf
with test defaults@@
and parameters
...\" 
.TE
...\" 
...\" 
...\" 
...\" ----------------------------------------------------------------------
.sp 2
.in -0.25i
\s+1\*L
Logic Flow of ``rpc.sec.2_runtest.sh''
\*O\s-1
.in +0.25i
.sp 1
...\" ----------------------------------------------------------------------
...\"
...\" 
.VL .5i
...\" 
.LI "1."
Reads the default configuration file \*Lrpc.sec.2.conf\*O, or specified by the
\*LRPCSEC2_CONF\*O environment variable (if it was not specified with the \*L-f\*O
option).
...\" 
.LI "2."
Parses the command line options.
...\" 
.LI "3."
Determines the number of UDP and TCP clients to be run.
...\" 
.LI "4."
Reports to the user on the parameters that will be used for the run, describing
the number of UDP and TCP clients, total clients, machines involved, the status
of various flags, the duration of the run, where log files will be kept, and so
on. In this way the parameters are recorded for later reference.
...\" 
.LI "5."
Builds a list of the clients to run.
...\" 
.LI "6."
Verifies the presence on each client machine of: a client binary, the configuration
file, and a keytab file; and then starts the client(s) specified for that machine.
...\" 
.LI "7."
Waits a specified duration of time for the clients to start.
...\" 
.LI "8."
Verifies that all clients are started and ready to make remote calls. If all
clients are not ready, and the \*L-I\*O[gnore] option has not been specified,
then a message detailing the failures is output, all clients are killed, and
the script exits.
...\" 
.LI "9."
...\" 
Creates the synchronization file (i.e., the file for whose creation each client has
been waiting as its cue to begin operations) on all the client machines to signal
the clients to begin making RPCs to the server.
...\" 
...\" 
...\" 
.LI "10."
(\*VBoundary mode only\*O) Waits a specified amount of time for the clients to make
their single RPCs.
...\" 
.LI "11."
(\*VBoundary mode only\*O) Parses the logs from the clients' runs and outputs a report
that describes in detail: the number of clients run; how many of each type (UDP or TCP)
failed or passed, etc; and a declaration of whether the test as a whole passed or failed.
...\" 
.LE
...\" 
...\" 
...\" 
...\" ----------------------------------------------------------------------
.H 4 "Logic Flow of the RPC-Security System Test"
...\" ----------------------------------------------------------------------
...\" 
.P
As is possible with any program, this test evolved over its development. A
description of the post-implementation state of the test follows:
...\" 
...\"
...\" ----------------------------------------------------------------------
.sp 2
.in -0.25i
\s+1\*LServer side\*O\s-1
.in +0.25i
.sp 1
...\" ----------------------------------------------------------------------
...\"
.P
The server side of the \*Lrpc.sec.2\*O system test (\*Lrpc.sec.2_srv\*O)
performs the following operations:
...\" 
.AL
.LI
Reads the configuration file and parses the command line options.
.LI
Assumes its own identity.
.LI
Looks for an entry in the CDS namespace for the interface it is to export.
.LI
Obtains binding handles from the endpoint mapper.
.LI
Exports its bindings and a UUID to the CDS namespace entry for the interface
(unless a UUID is already present in the entry, in which case the existing
UUID is used).
.LI
Starts a timer thread to automatically refresh the server's identity at the
ticket lifetime's halfway point.
.LI
Starts a thread to catch and handle signals.
.LI
(If compiled with \*L-DRPCSEC2_SRV_REPORTING\*O) Starts a report thread to
periodically generate reports of calls accepted, calls parsed, and calls
failed.
.LI
Services requests for the \*Lrpcsec2_cnf_str\*O RPC. In doing so it
performs authorization based on client name, authorization service,
authentication service, and protection level specified by binding handles in
incoming RPCs. The incoming calls must specify the correct client and server
name, DES authentication, DCE default authorization, and protection level.
.LE
...\" 
...\" 
...\"
...\" ----------------------------------------------------------------------
.sp 2
.in -0.25i
\s+1\*LClient side\*O\s-1
.in +0.25i
.sp 1
...\" ----------------------------------------------------------------------
...\"
.P
The client side of the \*Lrpc.sec.2\*O system test (\*Lrpc.sec.2_cli\*O)
performs the following operations:
...\" 
.AL
.LI
Reads the configuration file and parses the command line options.
.LI
Assumes its own identity.
.LI
Spawns a thread to maintain its identity.
.LI
Spawns a thread to catch and handle signals.
.LI
If the run was specified to be for a duration of time, spawns a thread to
generate reports at specified intervals.
.LI
Builds the structure to be passed to the server.
.LI
Looks in the namespace for a binding to the \*Lrpc.sec.2\*O server. If a
protocol is specified, only a binding with the specified protocol will be
imported.
.LI
Tests the imported binding to make sure the server is active.
.LI
Displays a message indicating that it is ready to make calls.
.LI
(\*VBoundary mode only\*O) If a synchronization file is specified, loops
until the sycnchronization file has been created (by the test driver
script).
.LI
(\*VBoundary mode only\*O) Makes one call to the server, reports the result,
and exits.
.LI
Loops, making \*Lrpcsec2_cnf_str(\|)\*O calls to the server, checking results,
and tracking successes and failures.
...\" 
...\" 
.LE
...\" 
...\" 
...\" 
...\" ----------------------------------------------------------------------
.H 4 "Test Options"
...\" ----------------------------------------------------------------------
...\" 
.P
All parameters for this test are specified in the test configuration file. Refer
to the ``Configuration File'' section below for information about the variables
and their format.
...\" 
...\" 
...\" 
...\" ----------------------------------------------------------------------
.H 4 "Compile-Time Switches for Optional Functionality"
...\" ----------------------------------------------------------------------
...\" 
.P
There are several areas of optional functionality available in the
\*Lrpc.sec.2\*O system test that can be used to expand the scope of the test
or to provide additional runtime information. These areas of optional
functionality are compiled into the program via the definition of tags which
can be specified in either of two ways:
...\" 
...\" 
.BL
.LI
On the \*Lbuild\*O command line; for example:
.iS
    build -DRPCSEC2_ALL_OPTS
.iE
...\" 
.LI
In the environment variable \*LCENV\*O; for example (in a C shell):
.iS
    \*C%\ \*Lsetenv CENV RPCSEC2_ALL_DEBUGS
    \*C%\ \*Lbuild
.iE
...\" 
.LE
.P
The default \*Lbuild\*O flag value is \*LRPCSEC2_ALL_OPTS\*O.
.P
The table below lists the supported compiler flags, the functionality that they
control, and the operation of the test depending on whether the flag is or is not
specified.
...\" 
...\" 
...\" 
...\" 
...\" 
...\" ----------------------------------------------------------------------
...\" Table of Compile-Time Switches"
...\" ----------------------------------------------------------------------
...\" 
.br
.ne 30
.TB "Compile-Time Switches for rpc.sec.2"
.TS H
center tab(@) box;
lb | lb | lb
lb | l | l.
Flag@Functionality@Test Operation
_
.TH
_
RPCSEC2_KEEP_SYMBOLS@Keeps debugging symbols@If defined, code is compiled with debugging
@in compiled objects@symbols; else debugging symbols usually
@@stripped from objects.
_
RPCSEC2_SRV_REPORTING@Turns on server@If defined, server reports on call requests
@status reporting@received, calls passed and failed, id refreshes,
@@and time of last id refresh at an interval speci-
@@fied by RPCSEC2_CLI_DEF_REP_INTVL in
@@configuration file. If not defined, server
@@reports only upon receipt of SIGQUIT.
_
RPCSEC2_ADD_DUMPERS@Compiles extra routines@If defined, several routines are compiled
@into the server to aid@into the server for dumping the contents
@debugging@of various DCE data structures in people-
@@readable form. These routines are not
@@called from the code, but can be called
@@from the debugger.
_
RPCSEC2_ALL_DEBUGS@turns on all debugging@Has the same effect as specifying both
@options@RPCSEC2_KEEP_SIGNALS and
@@RPCSEC2_ADD_DUMPERS.
_
RPCSEC2_ALL_OPTS@turns on all optional@Has the same effect as specifying
@code@RPCSEC2_SRV_REPORTING.
_
RPCSEC2_DRVR_HNDLS_SIGCHLD@turns on code to stag- @If defined, client will wait to exit
@ger client exits@after processing is complete, in an attempt
@@to give the driver time to process client
@@logs.
_
RPCSEC2_ALL_EXTS@turns on all extension@Has the same effect as specifying
@code@RPCSEC2_DRVR_HNDLS_SIGCHLD
...\" 
.TE
...\" 
...\" 
...\" 
.P
Specifying server reporting can provide useful information about the server
side of the test.
...\" 
...\" 
...\" 
...\" 
...\" ----------------------------------------------------------------------
.H 4 "Configuration File"
...\" ----------------------------------------------------------------------            
...\" 
.P
Setting up to run the \*Lrpc.sec.2\*O system test consists of one step, namely
customizing the configuration file:
...\" 
.DS
    \*L/dcetest/dcelocal/test/tet/system/rpc/ts/rpc.sec.2/rpc.sec.2.conf\*O
.DE
...\" 
.P
The present section describes this step.
.P
The scripts and programs that make up the \*Lrpc.sec.2\*O system test get
most of the information they need from a single configuration file whose
default name is \*Lrpc.sec.2.conf\*O. The information normally contained
in this file can be split up roughly into two categories: default runtime
parameters, and environment information.
.P
Examples of default runtime information in the file are: the time duration
a test should run; the names of machines on which clients will be run; etc.
.P
Examples of environment information stored in this file are: the name of
the CDS namespace entry to which the server exports its bindings; the name
of the client and server principals; etc.
.P
Before running the test, it is important to inspect the configuration file
to see if any changes should be made for the site at which the test is
to be performed. This is particularly important in regard to the environment
configuration information. For example, you may wish to use a different client
or server principal, a different CDS entry name, etc. All of these things,
if they are to be changed, must be changed in the configuration file before
running the test.
.P
Note that all machines that the test is to be run on must have identical
\*Lrpc.sec.2.conf\*O files.
...\" 
...\" 
...\" 
...\" 
...\" 
...\" ----------------------------------------------------------------------
.H 4 "Format of the Configuration File"
...\" ----------------------------------------------------------------------            
...\" 
.P
The contents of the test configuration file consist of text lines conforming
to normal Bourne shell syntax.
.P
Note, however, the following restriction. The configuration file, as implied
above, is read by shell scripts, and by the \*Lrpc.sec.2_cli\*O and
\*Lrpc.sec.2_srv\*O binary programs. In order to simplify the routine used by
these programs to read the file, lines that set values for the \*Lrpc.sec.2_cli\*O
and \*Lrpc.sec.2_srv\*O programs \*Vmust\*O be in one of the two following
formats:
...\" 
.oS
    <string>=<string1>  # NOTE: in this case, string1 cannot
                        #       contain any spaces.
.oE
...\" 
...\" 
...\" 
.P
or:
...\" 
.oS
    <string>="<string1>"  # NOTE: in this case string1 may
                          #       contain spaces.
.oE
...\" 
...\" 
.P
Any lines that are not in this format will either be ignored by the routine
(\*Lrpcsec2_rd_conf(\|)\*O, in the file \*Lrpc.sec.2_rdconf.c\*O) that the
client and server use to read the configuration file, or will generate an error.
Comments are begun by a ``#'' character anywhere on a line, as shown above, and
continue to the end of the line. 
...\" 
...\" 
...\" ----------------------------------------------------------------------
.H 4 "Contents of the Configuration File"
...\" ----------------------------------------------------------------------            
...\" 
.P
The assignments in the configuration file as it is shipped represent the
minimum set required to run the tests scripts and programs. You may add
to the configuration file, but you should not remove any of the original
assignments.
.P
The information in the configuration file determines the way that your Security
and CDS namespaces are set up. This being the case, you may want to modify the
configuration information to tailor the namespace to your preferences. If you do
not want to use the default values in the configuration file for the client or
server principal name, CDS directory, CDS name, or for any of the other
configuration file variables, you will have to modify the configuration file in
accordance with your preferences before running the setup script.
...\" 
...\" 
...\" 
.TB "Configuration File Contents"
.TS H
center tab(@) box;
lb | lb | lb
lb | lb | lb
lb | l | l.
Variable@@Default Value 
in Config File@Description@as Shipped
_
.TH
_
RPCSEC2_PROT_LEVEL@Default protection level@priv
_
RPCSEC2_CLI_PRINC_NAME@Client principal name@rpc.sec.2_cli
_
RPCSEC2_CLI_INIT_PW@Client initial password@"rpc&secC"
_
RPCSEC2_CLI_KEYTAB_DIRPATH@Directory for client keytab@/tmp
@file
_
RPCSEC2_CLI_KEYTAB_FN@Client keytab file name@rpc.sec.2_cli.keytab
_
RPCSEC2_CLI_MACHINES@Remote client machines@"rptest"
_
RPCSEC2_CLI_DEF_RUN_INTVL@Client interval to run@0 (hours)
_
RPCSEC2_CLI_DEF_REP_INTVL@Client report interval@1 (minutes)
_
RPCSEC2_CLI_SYNC_DELAY@Client delay for synchronization@60 (seconds)
_
RPCSEC2_CLI_START_DELAY@Clients startup delay@180 (seconds)
_
RPCSEC2_CLI_ARRAY_ELEMS@Number of array elements@15
_
RPCSEC2_SRV_PRINC_NAME@Server principal name@rpc.sec.2_srv
_
RPCSEC2_SRV_GROUP_NAME@Server group@subsys/dce/cds-test-group
_
RPCSEC2_SRV_INIT_PW@Server initial password@rpc&secS"
_
RPCSEC2_SRV_KEYTAB_DIRPATH@Directory for server keytab@/opt/dcelocal/var/security/keytabs
@file
_
RPCSEC2_SRV_KEYTAB_FN@Server keytab file name@rpc.sec.2_srv.keytab
_
RPCSEC2_SRV_CDS_NAME@Server interface name@/.:/test/systest/srv_ifs/rpcsec2_if
_
RPCSEC2_SRV_CDS_DIR_ACL@Directory ACL for server@rwditca
@interface
_
RPCSEC2_SRV_CDS_IO_ACL@Object ACL for server interface@rwdtc--
_
RPCSEC2_SRV_MAX_CALLS@Max concurrent call for server@5
_
RPCSEC2_SRV_MAX_EXEC@Max concurrent execs for server@1
_
RPCSEC2_SRV_MACHINES@Server machine@"rptest"
_
RPCSEC2_BIN_DIRPATH@Directory with rpc.sec.2 binaries@$TET_ROOT/system/rpc/ts/rpc.sec.2
_
RPCSEC2_TEMP_DIRPATH@Directory for temporary files@/dcetest/dcelocal/tmp
_
RPCSEC2_LOG_DIRPATH@Directory for log files@/dcetest/dcelocal/status
_
RPCSEC2_UDP_PCT@Percentage of udp clients@50
_
RPCSEC2_CLI_TO_RUN@Number of clients@9
_
PRIN_PASSWD@Principal password@"-dce-"
...\" 
...\" 
.TE
...\" 
...\" 
...\" 
...\" 
...\" ----------------------------------------------------------------------
.H 4 "Running rpc.sec.2"
...\" ----------------------------------------------------------------------
...\" 
.P
To run \*Lrpc.sec.2\*O in the example cell described earlier in this chapter, you
would do the following:
...\" 
...\" 
.AL
.LI
Edit the configuration file:
.DS
    \*L/dcetest/dcelocal/test/tet/system/rpc/ts/rpc.runtime.1/dcerpcrun.data\*O
.DE
...\" 
.P
and make the appropriate changes to the configuration variables.
...\" 
...\" 
.LI
Define and export the \*LTET_ROOT\*O environment variable:
.iS
    export TET_ROOT=/dcetest/dcelocal/test/tet
.iE
...\" 
...\" 
.LI
Source the TET version of the system test profile:
.iS
    \&. $TET_ROOT/system/profile.dcest.tet
.iE
...\" 
...\" 
.LI
\*Ldce_login\*O as \*Lcell_admin\*O:
.iS
    dce_login cell_admin \*Vcell_admin_password\*O
.iE
...\" 
...\" 
.LI
Invoke the test via TET:
.iS
    $TET_ROOT/bin/tcc -e -j \*Vjournal_filename\*L system/rpc dcerpsec
.iE
...\" 
...\" 
.LE
...\" 
...\" 
...\" 
...\" ----------------------------------------------------------------------
.H 4 "Generating Test Reports"
...\" ----------------------------------------------------------------------
...\" 
.P
If you are not running the test in boundary mode, then after all the clients have
exited, you can generate a report of the results of the test by executing the
following commands in a Bourne or Korn shell:
...\" 
.iS
...\" 1:
    \*C$ \*Lcd \*V<logdir>
.iE
...\" 
...\" 
.iS
...\" 2:
    \*C$ \*Lfor i in `ls cli_log\*Vpid\*L.*`
    \*C> \*Ldo
    \*C> \*Lgrep -v READY $i | awk -f \*Vbindir\*L/rpc.sec.2_gen_summ.awk >> run\*Vpid\*L.summ
    \*C> \*Ldone
.iE
...\" 
...\" 
.iS
...\" 3:
    \*C$ \*Lawk -f \*V<bindir>\*L/rpc.sec.2_gen_rep.awk run\*V<pid>\*L.summ > run\*V<pid>\*L.results
.iE
...\" 
...\" 
...\" 
...\" 
...\" ----------------------------------------------------------------------
.H 4 "Implementation Notes"
...\" ----------------------------------------------------------------------
...\" 
.P
The size of the array passed to the server by the client determines how long
the \*Lrpcsec2_cnf_str(\|)\*O call will take. The server divides the array
size by three, then waits in the \*Lrpcsec2_cnf_str(\|)\*O call for the
resulting number of seconds before processing the array and returning. The
number of array elements should be six or more if a goal of the test is to
force the server runtime to buffer and unbuffer call requests.
.P
The observed maximum number of concurrent calls for an \*Lrpc.sec.2\*O server
running with a single execution thread (specified in the configuration file by
setting \*LRPCSEC2_SRV_MAX_EXEC\*O to 1) is nine. If testing is desired with
more than nine threads, the number of execution threads in the server must be
increased.
...\" .zA "edit,8142,1.0.2a,added material from 1.0.2 Release Notes"
.P
Note that if the test is run with the observed maximum of test clients
and a server with one execution thread (the default), then the
connection-oriented protocol clients will report large numbers of
\*Lserver_too_busy\*O errors. This is caused by the clients' finding the
server call request buffer full because a slot that would normally have been
available to accept a client request has been taken by a housekeeping call
regularly made by the RPC daemon to determine whether the server is still
active. The client then goes into a tight loop, continuing to call and
continuing to receive the error until a slot does open up. To avoid this
scenario, either run the server with more execution threads, or add a delay
to the client call loop when \*Lrpc_s_server_too_busy\*O is detected (if
your \*Lsleep(\|)\*O is not wrapped and hence not threadsafe, use
\*Lpthread_cond_timed_wait(\|)\*O or \*Lpthread_delay_np(\|)\*O instead).
Datagram clients will receive a few \*Lcomm_failure\*O errors for this same
reason, but these will be far fewer than the \*Lserver_too_busy\*O errors
received by connection-oriented clients, due to the different retry semantics
of the datagram runtime in case of call failure.
...\" .zZ "edit,8142,1.0.2a,added material from 1.0.2 Release Notes"
.P
It has been observed that if the test client, for some reason, loses its
credentials, it will begin to consume swap space at the rate of about 1
megabyte per hour. However, the case of a client losing its credentials
is quite rare (in the instance in which this phenomenon was observed, the
clients had lost their credentials because the ticket lifetime was changed
\*Vafter\*O the test had been started).
.P
Note that if the clients are running in debug mode at the very end of the
test, the report generation scripts will not work correctly on the raw
output.
.P
If you wish to run the \*Lrpc.sec.2\*O test with a large number of clients,
you will will to start the clients in groups. If you attempt to start too
many clients concurrently, all making calls to the same server, some number
of the clients will receive the error status \*Lrpc_s_connect_rejected\*O,
and the \*Lrpc.sec.2_runtest.sh\*O script will abort the test run. This is
caused by too many client call requests arriving at the server machine's
socket at the same time, filling up the listen backlog buffer associated
with the socket faster than the RPC runtime can dequeue the requests and
buffer them in the call request buffer; calls arriving when the listen
backlog buffer is full are rejected. The number of clients that can be
started at one time will vary from platform to platform; the larger the listen
backlog size and the faster the machine, the greater the number of clients that
can be started at once. For DCE 1.0.2, the maximum number of clients that could
be successfully started at the same time on the AIX platform was between 10 and
20.
...\" 
...\" 
...\" .zA "edit,8142,1.0.2a,added material from 1.0.2 Release Notes"
...\" 
...\" ----------------------------------------------------------------------
.H 4 "Ticket Expiration"
...\" ----------------------------------------------------------------------
...\" 
.P
It is possible in some circumstances for a test client's network credentials
(i.e., ticket) to expire, in spite of the fact that a thread is spawned to
maintain the ticket. If a client's ticket does expire, the test as shipped
will almost certainly fail soon afterwards.
.P
The client ticket's expiration is generally caused by starvation of the
ticket-maintainance thread, and is more likely to occur in clients that access
the \*Lrpc.sec.2\*O server using the connection-oriented protocol \(emespecially
if the ticket lifetime is short (i.e., in the neighborhood of five minutes or less).
.P
The chain of events that leads to the starvation generally begins when any
unrecoverable error occurs in the test server runtime. From then on, all
remote calls will return errors to the callers. (The test clients do not perform
error handling for remote calls; instead, they are designed to simply log errors
and continue test activity.) Further, with the connection-oriented protocol, any
error in the server runtime causes an immediate return from the remote call to the
client. Thus when all this happens, the client thread making the remote call goes
into a tight loop, re-attempting immediately over and over again to successfully
complete the remote call. If the client's ticket expiration time is short, the
time taken up by the call thread's looping can deprive the ticket maintainance
thread of sufficient CPU cycles to refresh the client's ticket before it expires.
Then, once the ticket has expired, the remote call thread begins generating
messages that describe the last time the ticket was refreshed, along with other
(normally pertinent) information. This has the result of making the call thread
take up even more time, and as a result the ticket maintainance thread is never
allowed to refresh the ticket.
.P
This failure scenario generally does not occur for test clients using the
connectionless protocol; its semantics prevent the sequence of events
that leads to the tight looping described above.
...\" 
...\" 
...\" 
...\" 
...\" 
...\" ----------------------------------------------------------------------
.H 4 "Runtime Errors that Should be Handled"
...\" ----------------------------------------------------------------------
...\" 
.P
As noted above, the \*Lrpc.sec.2\*O clients do not currently perform any error
handling of the communication status value returned from a remote call. The lack
of such error handling is responsible for the spurious test failure scenario
described above, and this scenario can probably be avoided if you add code to
handle the three following errors:
...\" 
...\" 
...\" 
.BL
...\" 
.LI
\*Lrpc_s_server_too_busy\*O
.P
(Returned only by TCP clients.) The server does not have a thread available to
service the client request, nor does it have space in any call request buffer to
queue the request. When a test client receives this error, it will go into a tight
loop as described in the previous section, making RPCs and continuing to receive
this same status, until sufficient resources are freed at the server to permit the
call to be serviced or queued. While testing did not prove this looping to have a
significant impact on the overall success rate of the TCP clients, it is wasteful
of CPU cycles. One way to avoid the tight looping would be to have the TCP clients
wait for a few seconds if they receive this status before doing anything. Another
approach would be to allocate more server threads to begin with, and thus avoid the
situation altogether.
...\" 
.LI
\*Lrpc_s_connection_closed\*O
.P
A protocol error has occurred in the connection to the server. This means (with a
connection-oriented protocol) that the binding to the server has become permanently
useless, and the thread in the server runtime that listens for connection-oriented
protocol requests is probably unavailable, so that no connection-oriented protocol
calls will succeed. The only remedy for this condition is for the server to re-export
its binding handles.
...\" 
...\" (See OT defect 7569 for more information.)
...\" 
.LI
\*Lrpc_s_auth_tkt_expired\*O
.P
The client's network credentials (i.e., ticket) have expired. The client thread
receiving this error can recover from the situation by notifying the ticket maintainance
thread that it should now refresh the ticket.
...\" (See OT defect 7569 for more information.)
...\" 
.LE
...\" 
...\" .zZ "edit,8142,1.0.2a,added material from 1.0.2 Release Notes"
...\" 
...\" 
.zA "def,10739,1.1beta,new info"
...\" 
...\" ----------------------------------------------------------------------
.H 3 "dcerpper"
...\" ----------------------------------------------------------------------
...\" 
.P
The \*Ldcerpper\*O DCE System Test is based on the RPC \*Lperf\*O functional tests.
It utilizes the \*Lperf\*O functional test server and client programs to perform the
following tests:
...\" 
...\" 
.BL
.LI
Null call
.LI
Null call, idempotent
.LI
Variable length input arg
.LI
Variable length input arg, idempotent
.LI
Variable length output arg
.LI
Variable length output arg, idempotent
.LI
Broadcast
.LI
Maybe
.LI
Broadcast/maybe
.LI
Floating point
.LI
Unregistered interface
.LI
Forwarding
.LI
Exception
.LI
Slow call
.LI
Slow call, idempotent
.LE
...\" 
...\" 
.P
The \*Lperf_server\*O is run on the machine on which \*Ldcerpper\*O is
being executed, and \*Lperf_client\*O is started on the specified client
machines. The client machines are started simultaneously in order to put
stress on the server machine.
...\" 
...\" 
.VL 1.5i
.LI "Test\ Scripts:"
\*L$TET_ROOT/system/rpc/ts/dcerpper/dcerpper\*O
.P
\*L$TET_ROOT/system/rpc/ts/dcerpper/per.functions\*O
...\" 
.LI "Test\ Programs:"
\*L$TET_ROOT/system/rpc/ts/dcerpper/perf_server\*O
.P
\*L$TET_ROOT/system/rpc/ts/dcerpper/perf_client\*O
...\" 
.LI "Data Script:"
\*L$TET_ROOT/system/rpc/ts/dcerpper/dcerpper.data\*O
...\" 
.LE
...\" 
...\" 
...\" 
.P
\*Ldcerpper\*O is invoked as follows:
...\" 
.iS
    run.rpc \*V{\*L-l \*Vloops | \*L-t \*Vhours } [other_options] \*Ldcerpper
.iE
...\" 
.P
where:
...\" 
.VL 1.5i
.LI "\*L-l\ \*Vloops\*O"
Specifies the number of loops or passes to run.
...\" 
.LI "\*L-t\ \*Vhours\*O"
Specifies the time in hours to run. A decimal point is acepted; e.g. ``.5'' is
interpreted as 30 minutes.
...\" 
.LI "\*Ldcerpper\*O"
Specifies the name of the test.
...\" 
.LE
...\" 
.P
The test-specific \*Vother_options\*O are described in the following section.
...\" 
...\" 
...\" 
...\" ----------------------------------------------------------------------
.H 3 "Test-specific Command Line Options for dcerpper"
...\" ----------------------------------------------------------------------
...\" 
.P
Following are descriptions of the command line options specific to \*Ldcerpper\*O:
...\" 
...\" 
...\" 
.BL
.LI
\*L-m \*Vname(s)\*O or \*L-M\*O
.P
(Either \*L-m\*O or \*L-M\*O is \*Vrequired\*O for this test.) \*L-m\*O specifies
the machine(s) to use. Either multiple ``\*L-m \*Vname\*O'' groups or a single
``\*L-m \*Vname1 \ .\ .\ . nameN\*O'' are allowed. \*L-M\*O specifes that the list
of machine(s) to use should be read from the \*Vtestname\*L.data\*O file. Note
that \*L-m\*O and \*L-M\*O are mutually exclusive.
...\" 
.P
Note that the test can be used for stress testing by specifying many \*L-m\*O
options.
...\" 
...\" 
.LI
\*L-P \*Vstring\*O
.P
Specifies the protocol sequence to use: either \*Lncadg_ip_udp\*O (connectionless,
the default) or \*Lncacn_ip_tcp\*O (connection-oriented). This option is useful
for testing all the protocols DCE supports.
...\" 
.LE
...\" 
...\" 
.P
This test also uses the following standard \*Lrun\*O options:
...\" 
.BL
.LI
\*L-e \*Vnumber\*O
.LI
\*L-E \*Vnumber\*O
.LI
\*L-c\*O
.LI
\*L-h\*O
.LE
...\" 
.P
For explanations of these options, see ``Command Line Options Common to Some
or All of the ``Run'' Scripts'', in Chapter 13.
...\" 
...\" 
.zZ "def,10739,1.1beta,new info"
...\" 
...\" 
...\" 
...\" ----------------------------------------------------------------------
.H 2 "DCE Host Daemon (dced)"
...\" ----------------------------------------------------------------------
...\" 
.P
The \*Ldced\*O system tests exercise the functionality provided by the DCE
Host Daemon (\*Ldced\*O):
...\" 
.BL
.LI
Endpoint resolution
.LI
Remote Key Table Management
.LI
Remote Host Data Management
.LI
Remote Server Configuration and Execution
.LI
ACL operations on all the above functions
.LE
...\" 
...\" 
.P
The test suite consists of three reliability tests which use a \*Lrun\*O
control script as a test driver in the same way as the other DCE system
tests executed under TET. The tests must be installed on each machine on
which they will be run, using \*Ldcetest_config\*O. Setup requirements
are the same as for the other \*Lrun\*O script-based DCE system tests.
.P
All sub-components and other executables for the tests are installed at:
...\" 
.DS
    \*L$TET_ROOT/system/dced/ts/rel/\*O
.DE
...\" 
...\" 
.VL 1.5i
.LI "Test\ Scripts:"
\*L$TET_ROOT/system/dced/ts/rel/dcdrel001/dcdrel001\*O
\*L$TET_ROOT/system/dced/ts/rel/dcdrel002/dcdrel002\*O
\*L$TET_ROOT/system/dced/ts/rel/dcdrel003/dcdrel003\*O
...\" 
...\" .LI "Data\ Script:"
...\" \*L$TET_ROOT/system/dced/ts/
...\" 
.LE
...\" 
.P
The tests are invoked as follows:
...\" 
.iS
    run.dced \*V{\*L-l \*Vloops | \*L-t \*Vhours } [other_options] \*Vtestname\*O
.iE
...\" 
.P
where:
...\" 
.VL 1.5i
.LI "\*L-l\ \*Vloops\*O"
Specifies the number of loops or passes to run.
...\" 
.LI "\*L-t\ \*Vhours\*O"
Specifies the time in hours to run. A decimal point is accepted; e.g. ``.5'' is
interpreted as 30 minutes.
...\" 
.LI "\*Ltestname\*O"
Specifies the name of the test; see below.
...\" 
.LE
...\" 
...\" 
.P
The following tests can be run by specifying their name as \*Vtestname\*O
in the command line:
...\" 
...\" 
...\" 
.VL 1i
.LI "\*Ldcdrel001\*O"
Exercises some of the endpoint operations provided by \*Ldced\*O. Two test
servers and a test client are started on each machine included in the test.
The test servers register themselves via CDS and are then contacted by the
test clients on all machines involved in the test. For each series of
client-server interactions, the client requests the server to register its
interface and endpoints with a newly-generated list of object UUIDs, and
then contacts the server using each of the newly-registered object UUIDs and
requests that the endpoint be unregistered. 
.P
As many machines as desired can be included in the test run, via the command
line options \*L-m\*O or \*L-M\*O, and the number of  endpoints registered
can be modified by recompiling the tests with a different value for the
constant \*LUUID_VEC_COUNT\*O, which is defined in
...\" 
.DS
    \*Vdce-root-dir\*L/src/test/systest/dced/ts/rel/dcdrel001/dcdrel001_client.c\*O
.DE
...\" 
.P
The test starts two servers, both of which register endpoints using the
\*Lrpc_ep_register(\|)\*O routine. This test could be readily enhanced by
modifying one of the two servers' manager routines to use the \*Ldced\*O
API functions for registering and unregistering endpoints instead.
...\" 
...\" 
.LI "\*Ldcdrel002\*O"
Exercises some of the server configuration and execution operations provided
by \*Ldced\*O. Four variations of a test server are configured, using the
\*Ldcecp\*O \*Lserver create\*O command. Then several sequences of starting,
stopping, and restarting the servers are executed.
.P
At present the test creates the test servers on each of the machines identified
on the \*Lrun.dced\*O command line, and then executes \*Ldcecp\*O operations on
those servers from the machine that the servers are executing on. The test could
enhanced by having it execute the \*Ldcecp\*O commands on each machine involved
in the test to control servers on the other machines.
...\" 
...\" 
.LI "\*Ldcdrel003\*O"
Exercises some of the keytab, hostdata, and ACL \*Ldced\*O service operations.
A \*Ldcecp\*O script is executed on each of the macines specified on the command
line, to test some of the hostdata operations. Following this, separate \*Ldcecp\*O
script is executed on each of the machines to test some of the keytab operations.
Finally, another \*Ldcecp\*O script is executed on each of the machines to test
some of the ACL operations.
.nS "Note"
When \*Ldcdrel003_acl.tcl\*O is running, no other \*Ldced\*O-related testing should
be taking place. This test subcomponent changes ACLs to disallow \*Ldced\*O operations,
and will thus cause any other active \*Ldced\*O tests to fail.
...\" 
...\" 
.LI "\*Lall\*O"
Causes all of the tests to be run in turn, with the specified command line options.
...\" 
...\" 
.LE
...\" 
...\" 
.P
This test also uses the following standard \*Lrun\*O options:
...\" 
.BL
.LI
\*L-e \*Vnumber\*O
.LI
\*L-E \*Vnumber\*O
.LI
\*L-m\ \*Vname(s)\*O
.LI
\*L-M\*O
.LE
...\" 
.P
For explanations of these options, see ``Command Line Options Common to Some or All
of the ``Run'' Scripts'', in Chapter 13.
...\" 
...\" 
...\" 
...\" 
...\" 
...\" ----------------------------------------------------------------------
.H 2 "Security"
...\" ----------------------------------------------------------------------
...\" 
.P
All of the security systest directory scripts are run as ``root'' UID, with the
systest environment file \*Lprofile.dcest.tet\*O sourced. All tests are run from
the test ``driver'' level and use the \*Lrgy_edit -update\*O control program interface
for all registry operations. The drivers all use the
...\" 
.DS
    \*L/dcetest/dcelocal/test/tet/system/security/ts/sec.functions\*O
.DE
...\" 
.P
file for determining the security-related operations (\*Lrgy_edit\*O functions)
to be tested, as listed below under each test driver name.
...\" 
.P
Note that all of these details are automatically taken care of when you run
the tests through \*Ldcetest_config\*O, as is recommended; if you run the tests
manually, you must source \*Lprofile.dcest.tet\*O yourself.
...\" 
...\" 
...\" 
...\" 
...\" ----------------------------------------------------------------------
.H 3 "dceseacl"
...\" ----------------------------------------------------------------------
...\" 
.P
\*Ldceseacl\*O tests security registry ACLs and authorization operation, and
can serve as a registry load or stress test. It does this by creating a number
of accounts, principals, groups, and organizations; modifying permissions; and
verifying appropriate ACL management operation.
...\" 
...\" 
.VL 1.5i
.LI "Test\ Script:"
\*L$TET_ROOT/system/security/ts/dceseacl/dceseacl\*O
...\" 
.LI "Data\ Script:"
\*L$TET_ROOT/system/security/ts/dceseacl/dceseacl.data\*O
...\" 
.LE
...\" 
.P
\*Ldceseacl\*O is invoked as follows:
...\" 
.iS
    run.sec \*V{\*L-l \*Vloops | \*L-t \*Vhours } [other_options] \*Ldceseacl
.iE
...\" 
.P
where:
...\" 
.VL 1.5i
.LI "\*L-l\ \*Vloops\*O"
Specifies the number of loops or passes to run.
...\" 
.LI "\*L-t\ \*Vhours\*O"
Specifies the time in hours to run. A decimal point is accepted; e.g. ``.5'' is
interpreted as 30 minutes.
...\" 
.LI "\*Ldceseacl\*O"
Specifies the name of the test.
...\" 
.LE
...\" 
.P
This test also uses the following standard \*Lrun\*O options:
...\" 
.BL
.LI
\*L-e \*Vnumber\*O
.LI
\*L-E \*Vnumber\*O
.LI
\*L-c\*O
.LI
\*L-h\*O
.LE
...\" 
.P
For explanations of these options, see ``Command Line Options Common to Some
or All of the ``Run'' Scripts'', in Chapter 13.
.P
There are no test-specific command line options for \*Ldceseacl\*O.
...\" 
...\" 
...\" 
...\" ----------------------------------------------------------------------
.H 3 "eraobj001"
...\" ----------------------------------------------------------------------
...\" 
.P
\*Leraobj001\*O is a variant of the \*Ldcesseacl\*O test. It is implemented
as a wrapper around the latter test. When invoked, it sets the value of the
\*LUSE_ERA\*O environment variable to ``yes'' and then invokes \*Ldceseacl\*O.
\*Ldceseacl\*O is then run with the extended attribute functionality (i.e., ACLs
on the registry schema object, and extended registry attribute instances attached
to principals, groups, and organizations).
...\" 
...\" 
.VL 1.5i
.LI "Test\ Script:"
\*L$TET_ROOT/system/security/ts/eraobj001/eraobj001\*O
...\" 
.LI "Data\ Script:"
\*L$TET_ROOT/system/security/ts/era.data\*O
...\" 
.LE
...\" 
.P
\*Leraobj001\*O is invoked with the same options as \*Ldceseacl\*O.
...\" 
...\" 
...\" 
...\" ----------------------------------------------------------------------
.H 3 "dceseact"
...\" ----------------------------------------------------------------------
...\" 
.P
\*Ldceseact\*O adds, deletes, and changes information about principals, groups,
organizations, and accounts to test the security registry.
...\" 
.nS "note"
This test must be run by a user who has write access to the registry database.
.nE
...\" 
...\" 
...\" 
.VL 1.5i
.LI "Test\ Script:"
\*L$TET_ROOT/system/security/ts/dceseact/dceseact\*O
...\" 
.LI "Data\ Script:"
\*L$TET_ROOT/system/security/ts/dceseact/dceseact.data\*O
...\" 
.LE
...\" 
.P
\*Ldceseact\*O is invoked as follows:
...\" 
.iS
    run.sec \*V{\*L-l \*Vloops | \*L-t \*Vhours } [other_options] \*Ldceseact
.iE
...\" 
.P
where:
...\" 
...\" 
.VL 1.5i
.LI "\*L-l\ \*Vloops\*O"
Specifies the number of loops or passes to run.
...\" 
.LI "\*L-t\ \*Vhours\*O"
Specifies the time to run in hours. A decimal point is accepted; e.g. ``.5'' is
interpreted as 30 minutes.
...\" 
.LI "\*Ldceseact\*O"
Specifies the name of the test.
...\" 
.LE
...\" 
...\" 
.P
Test-specific options are described in the following section.
...\" 
...\" 
...\" 
...\" ----------------------------------------------------------------------
.H 4 "Test-specific Command Line Options for dceseact"
...\" ----------------------------------------------------------------------
...\" 
.P
Following are descriptions of command line options specific to \*Ldceseact\*O.
...\" 
...\" 
.BL
.LI
\*L-m \*Vname(s)\*O or \*L-M\*O
.P
(Either \*L-m\*O or \*L-M\*O is \*Vrequired\*O for this test.) \*L-m\*O specifies
the machine(s) to use. Either multiple ``\*L-m \*Vname\*O'' groups or a single
``\*L-m \*Vname1 \ .\ .\ . nameN\*O'' are allowed. \*L-M\*O specifes that the list
of machine(s) to use should be read from the \*Vtestname\*L.data\*O file. Note
that \*L-m\*O and \*L-M\*O are mutually exclusive.
...\" 
...\" 
.LE
...\" 
.P
This test also uses the following standard \*Lrun\*O options:
...\" 
.BL
.LI
\*L-e \*Vnumber\*O
.LI
\*L-E \*Vnumber\*O
.LI
\*L-c\*O
.LI
\*L-h\*O
.LE
...\" 
.P
For explanations of these options, see ``Command Line Options Common to Some
or All of the ``Run'' Scripts'', in Chapter 13.
...\" 
...\" 
...\" 
...\" 
...\" ----------------------------------------------------------------------
.H 3 "dcesepol"
...\" ----------------------------------------------------------------------
...\" 
.P
\*Ldcesepol\*O tests security policy options through the use of the registry
editor (\*Lrgy_edit\*O) and repeated login attempts.
...\" 
...\" 
...\" 
.nS "note"
In order to test account expiration, this test must be running at midnight
(i.e., during the interval 11:59 P.M. and 12:01 A.M.). The test must be run
by a user who has write access to the registry database.
.nE
...\" 
.P
\*Ldcesepol\*O creates three organizations to test password expiration date,
password life span, and account life span, respectively. Principals and accounts
are created for the organizations in order to perform policy verification via
authenticated login. The local registry password override login function is
tested by disabling the first account's first machine login.
...\" 
...\" 
.VL 1.5i
.LI "Test\ Script:"
\*L$TET_ROOT/system/security/ts/dcesepol/dcesepol\*O
...\" 
.LI "Data\ Script:"
\*L$TET_ROOT/system/security/ts/dcesepol/dcesepol.data\*O
...\" 
.LE
...\" 
.P
\*Ldcesepol\*O is invoked as follows:
...\" 
.iS
    run.sec \*V{\*L-l \*Vloops | \*L-t \*Vhours } [other_options] \*Ldcesepol
.iE
...\" 
.P
where:
...\" 
...\" 
.VL 1.5i
.LI "\*L-l\ \*Vloops\*O"
Specifies the number of loops or passes to run.
...\" 
.LI "\*L-t\ \*Vhours\*O"
Specifies the time to run in hours. A decimal point is accepted; e.g. ``.5'' is
interpreted as 30 minutes.
...\" 
.LI "\*Ldcesepol\*O"
Specifies the name of the test.
...\" 
.LE
...\" 
.P
Test-specific options are described in the following section.
...\" 
...\" 
...\" 
...\" ----------------------------------------------------------------------
.H 4 "Test-specific Command Line Options for dcesepol"
...\" ----------------------------------------------------------------------
...\" 
.P
Following are descriptions of command line options specific to \*Ldcesepol\*O:
...\" 
...\" 
.BL
.LI
\*L-m \*Vname(s)\*O or \*L-M\*O
.P
(Either \*L-m\*O or \*L-M\*O is \*Vrequired\*O for this test.) \*L-m\*O specifies
the machine(s) to use. Either multiple ``\*L-m \*Vname\*O'' groups or a single
``\*L-m \*Vname1 \ .\ .\ . nameN\*O'' are allowed. \*L-M\*O specifes that the list
of machine(s) to use should be read from the \*Vtestname\*L.data\*O file. Note
that \*L-m\*O and \*L-M\*O are mutually exclusive.
...\" 
.LE
...\" 
.P
This test also uses the following standard \*Lrun\*O options:
...\" 
.BL
.LI
\*L-e \*Vnumber\*O
.LI
\*L-E \*Vnumber\*O
.LI
\*L-c\*O
.LI
\*L-h\*O
.LE
...\" 
.P
For explanations of these options, see ``Command Line Options Common to Some or
All of the ``Run'' Scripts'', in Chapter 13.
...\" 
...\" 
...\" 
...\" 
...\" 
...\" 
...\" 
...\" 
...\" ----------------------------------------------------------------------
.H 3 "dcesestr"
...\" ----------------------------------------------------------------------
...\" 
.P
\*Ldcesestr\*O exerts stress on the registry server (\*Lsecd\*O) by attempting
to access information from the server through multiple clients. It adds principals,
groups, and organizations to the registry and then invokes multiple clients
(\*Lresestr\*O) which in turn perform valid and invalid logins.
...\" 
.nS "note"
This test must be run by a user who has write access to the registry database.
.nE
...\" 
...\" 
.VL 1.5i
.LI "Test\ Script:"
\*L$TET_ROOT/system/security/ts/dcesestr/dcesestr\*O
...\" 
.LI "Data\ Script:"
\*L$TET_ROOT/system/security/ts/dcesestr/dcesestr.data\*O
...\" 
.LE
...\" 
.P
\*Ldcesestr\*O is invoked as follows:
...\" 
.iS
    run.sec \*V{\*L-l \*Vloops | \*L-t \*Vhours } [other_options] \*Ldcesestr
.iE
...\" 
.P
where:
...\" 
...\" 
.VL 1.5i
.LI "\*L-l\ \*Vloops\*O"
Specifies the number of loops or passes to run.
...\" 
.LI "\*L-t\ \*Vhours\*O"
Specifies the time to run in hours. A decimal point is accepted; e.g. ``.5'' is
interpreted as 30 minutes.
...\" 
.LI "\*Ldcesestr\*O"
Specifies the name of the test.
...\" 
.LE
...\" 
.P
Test-specific options are descibed in the following section.
...\" 
...\" 
...\" 
...\" ----------------------------------------------------------------------
.H 4 "Test-specific Command Line Options for dcesestr"
...\" ----------------------------------------------------------------------
...\" 
.P
Following are descriptions of command line options specific to \*Ldcesestr\*O.
...\" 
...\" 
.BL
.LI
\*L-m \*Vname(s)\*O or \*L-M\*O
.P
(Either \*L-m\*O or \*L-M\*O is \*Vrequired\*O for this test.) \*L-m\*O specifies
the machine(s) to use. Either multiple ``\*L-m \*Vname\*O'' groups or a single
``\*L-m \*Vname1 \ .\ .\ . nameN\*O'' are allowed. \*L-M\*O specifes that the list
of machine(s) to use should be read from the \*Vtestname\*L.data\*O file. Note
that \*L-M\*O and \*L-m\*O are mutually exclusive.
.P
The \*Ldcesestr -m\*O option can be used for stress testing by typing a long list of
machines to act as clients. Each of these clients will attempt logins at the same time.
...\" 
...\" 
.LE
...\" 
.P
This test also uses the following standard \*Lrun\*O options:
...\" 
.BL
.LI
\*L-e \*Vnumber\*O
.LI
\*L-E \*Vnumber\*O
.LI
\*L-c\*O
.LI
\*L-h\*O
.LE
...\" 
.P
For explanations of these options, see ``Command Line Options Common to Some
or All of the ``Run'' Scripts'', in Chapter 13.
...\" 
.P
For additional stress testing, you can specify a large number of users for
\*LSEC_NUM_USERS\*O in the test data script. This will cause a large number
of accounts to be added to the registry, each of which will be used by the
clients. This can be used to force overflows of any caches that may be used
in \*Lsecd\*O or \*Lsec_clientd\*O.
...\" 
...\" 
...\" 
...\" 
...\" 
...\" ----------------------------------------------------------------------
.H 3 "erarel001"
...\" ----------------------------------------------------------------------
...\" 
.P
\*Lerarel001\*O is a variant of the \*Ldcesestr\*O test. It is implemented as
a wrapper around the latter test. When invoked, it sets the value of the
\*LUSE_ERA\*O environment variable to ``yes'' and then then invokes \*Ldcesestr\*O.
\*Ldcesestr\*O is then run with extended registry attributes functionality,
manipulating extended attributes on principals, groups, and organizations during
logins.
...\" 
...\" 
.VL 1.5i
.LI "Test\ Script:"
\*L$TET_ROOT/system/security/ts/erarel001/erarel001\*O
...\" 
.LI "Data\ Script:"
\*L$TET_ROOT/system/security/ts/era.data\*O
...\" 
.LE
...\" 
.P
\*Lerarel001\*O is invoked with the same options as \*Ldcesestr\*O.
...\" 
...\" 
...\" 
...\" ----------------------------------------------------------------------
.H 3 "dlgcfg001"
...\" ----------------------------------------------------------------------
...\" 
.P
\*Ldlgcfg001\*O is a basic delegation configuration test. See the
...\" 
.DS
    \*Vdce-root-dir\*L/dce/src/test/systest/security/README_dlgcfg001\*O
.DE
...\" 
.P
file for details on how to run it.
...\" 
...\" 
...\" 
...\" ----------------------------------------------------------------------
.H 3 "Security Registry System Test dcesergy"
...\" ----------------------------------------------------------------------
...\" i.e., sec.rgy.7
.P
The purpose of this test is to stress the security registry servers by
performing a number of DCE logins and logouts while administrators are
at the same time performing registry updates and queries. Five Security
registry administrators on each host in the local cell create new organizations,
groups and accounts, setting registry policy on the new accounts and creating
password override local registry login policy, while verifying these policies
and performing logins on each machine. Ten principals on each host machine
concurrently perform logins while the registry administration is in progress.
The test also provides override file support for local registry account
information.
.P
The test was derived from the RPC API functional tests, and it conforms to the
basic RPC client-server model. Execution of the test operations is provided by
the server; the client learns the result of an operation via RPC status or
exception. Success is also indicated by a text message which is displayed for
most otherwise silent operations.
...\" 	
...\" 
...\" 
.VL 1.5i
.LI "Test\ Script:"
\*L$TET_ROOT/system/security/ts/sec.rgy.7/dcesergy\*O
...\" 
.LI "Data\ Script:"
\*L$TET_ROOT/system/security/ts/sec.rgy.7/dcesergy.data\*O
...\" 
.LE
...\" 
...\" 
.P
\*Lrun.sec\*O is the script used to run all the Security system tests.
To run \*Lsec.rgy.7\*O, \*Lrun.sec\*O is invoked as follows:
...\" 
.iS
    run.sec \*V{\*L-l \*Vloops | \*L-t \*Vhours} {\*L-L \*Vloops | \*L-T \*Vhours} [\*L-R \*Vthreads]\\
            {\*L-m "\*Vmachine1\*V\ [.\ .\ .] \*L"\*V] [\*L-j \*Vaccounts] [\*L-u "\*Vnames\*L"\*V] \\
            [\*L-p "\*Vpasswds\*L"]\*L dcesergy
.iE
...\" 
.P
where:
...\" 
.VL 1.5i
.LI "\*L-l\ \*Vloops\*O"
Specifies the number of loops or passes to run.
...\" 
.LI "\*L-t\ \*Vhours\*O"
Specifies the time to run in hours. A decimal point is accepted; e.g. ``.5'' is
interpreted as 30 minutes.
...\" 
.LI "\*L-L\ \*Vloops\*O"
Specifies number of internal \*Vloops\*O to run. Default is 1.
...\" 
.LI "\*L-T\ \*Vhours\*O"
Specifies number of \*Vhours\*O to run internal loop per principal. Decimal
numbers are allowed, e.g. ``\*L-T .5\*O'' is interpreted to mean 30 minutes.
Note that \*L-L\*O and \*L-T\*O are mutually exclusive.
...\" 
.LI "\*L-R\ \*Vthreads\*O"
Specifies number of \*Vthreads\*O for \*Ldcesergy\*O client to run. The
default is 10.
...\" 
.LI "\*L-m\ ""\*Vmachine\ [.\ .\ .]""\*O"
Specifies machines on which to run the test.
...\" 
.LI "\*L-j\ \*Vaccounts\*O"
Specifies number of \*Vaccounts\*O for \*Ldcesergy\*O to add and delete. The
default is 3.
...\" 
.LI "\*L-u\ ""\*Vnames\*L""\*O"
Specifies server principal names, where \*L"\*Vnames\*L"\*O is a series of
names such as \*L"\*Vname1 .\ .\ .\ nameN\*L"\*O. The default is
\*Lcell_admin\*O.
...\" 
.LI "\*L-p\ ""\*Vpasswds\*L""\*O"
Specifies the passwords for the proncipals specified by \*L-u\*O, in the same
form. The default is \*L-dce-\*O. Note that the order of the list of passwords
must match the order of the corresponding list of principal names specified by
the \*L-u\*O option.
...\" 
.LI "\*Ldcesergy\*O"
Specifies the name of the test to run. For TET, \*Lsec.rgy.7\*O has the
name \*Ldcesergy\*O.
.LE
...\" 
.P
For example, the following command:
...\" 
.iS
    run.sec -l 5 -e 25 -L 10 -R 10 -m "\*Vmachine1 machine2 machine3" \*L-j 3 dcesergy
.iE
...\" 
.P
will run \*Ldcesergy\*O for 5 external iterations (i.e. of the entire test, from
invocation of TET to cleanup), with 10 internal iterations within each TET invocation;
10 threads used by the clients to do simultaneous logins; 3 accounts will be
added and deleted in each iteration, and a maximum number of 25 consecutive errors
will be allowed before the test is terminated. The test will be run on \*Vmachine1\*O,
\*Vmachine2\*O, and \*Vmachine3\*O.
...\" 
.P
This test also uses the following standard \*Lrun\*O options:
...\" 
.BL
.LI
\*L-e \*Vnumber\*O
.LI
\*L-E \*Vnumber\*O
.LI
\*L-c\*O
.LI
\*L-h\*O
.LE
...\" 
.P
For explanations of these options, see ``Command Line Options Common to Some or
All of the ``Run'' Scripts'', in Chapter 13.
...\" 
...\" 
...\" 
.P
You can increase the stress on the security server by running multiple
copies of \*Ldcesergy\*O on different machines in the cell, but you must do
so manually at each machine, because the DCE 1.1 version of \*Ldcesergy\*O
does \*Vnot\*O use the \*L-m \*Vmachine\*O option.
...\" 
...\" 
...\" 
...\" 
...\" 
...\" 
...\" ----------------------------------------------------------------------
.H 4 "Logic Flow of the Security Registry System Test"
...\" ----------------------------------------------------------------------
...\" 
...\" 
...\" 
.P
The server and client execution sequence can be displayed by building the
test with the \*LST_DEBUG\*O symbol defined. The sequence is:
...\" 
...\" 
.VL 1i
.LI "\*LServer:\*O"
Initialize Pthread synchronization data
...\" 
.P
Export the server binding to the RPC runtime, endpoint mapper
and the CDS data base
.P
Start the credential refresh thread
.P
Start the RPC listen thread
...\" 
...\" 
.LI "\*LClient:\*O"
Login as client principal
.P
Import the server binding handle from CDS
.P
Call the test operation (which was specified on the command line; for example,
\*L-u \*Vprincipal\*O will add the principal to the registry database)
.P
Wait for RPC status/exceptions or server return message
...\" 
.LE
...\" 
.P
The server creates and uses a local key file \*L/usr/tmp/v5srvtab\*O to be
used by the RPC runtime in decrypting incoming tickets from authenticated
clients (for authenticated RPC, the \*L-a\*O option).
...\" 
...\" 
...\" 
...\" 
...\" 
...\" ----------------------------------------------------------------------
.H 4 "Test Setup Script"
...\" ----------------------------------------------------------------------
...\" 
.P
\*Ldcesergy\*O adds test servers to the registry before the test server
processes are started on the respective test machines. This is done via
a test setup script.
.P
After setup is completed, the script will execute internal loops for the
specified number of loops or hours. It will execute the \*Llogin\*O-\*Llogout\*O
test for a specified number of call threads, followed by the add principal account
operation for the specified number principals beginning with ``basename0'', finally
ending the loop with the deletion of the previously created principals.
.P
Note that this script does not perform other operations (password override
functionality or get password entry); it is intended to be used only as an
extended duration test driver for continuous operation testing.
.P
The script also invokes the client program, which logs in, binds to the
CDS-named server, and executes the login/logout operation on the server 10 times
concurrently (i.e., with 10 client call threads).
...\" 
...\" 
...\" 
...\" ----------------------------------------------------------------------
.H 4 "Running the Security Registry System Test Components by Hand"
...\" ----------------------------------------------------------------------
...\" 
.P
The \*Ldcesergy\*O system test can be manually invoked as follows:
...\" 
...\" 
...\" 
.AL
.LI
Add the test servers to the registry by running the setup script:
...\" 
.iS
    secrgy_setup -n \*Vserver_name\*L -p \*Vpassword\*O
.iE
...\" 
...\" 
.LI
Run the server:
...\" 
.iS
    secrgy_server  -n \*Vserver_name\*L -p \*Vserver_pwd\*L \\
        \*V[\*L-c \*Vcell_name] [\*L-a\*V] [\*L-d\*V] [\*L-i \*Vprot_seq]
.iE
...\" 
.LI
Run the client program:
...\" 
.iS
    secrgy_client -n \*Vclient_name\*L -p \*Vclient_pwd\*L -s \*Vserver_name\*L \\
        \*V[\*L-w\*V] [\*L-o  -r \*Vinteger] [\*L-x\*V] [\*L-c \*Vcell_name]\*V \\
        [\*L-u \*Vprincipal] [\*L-k \*Vprincipal] [\*L-a\*V] [\*L-f \*Vfilename]\*V \\
        [\*L-t \*Vinteger] [\*L-l \*Vinteger] [\*L-d\*V] [\*L-i \*Vprot_seq] \\
        [\*L-P\*V] [\*L-j \*Vaggregate_nr]
.iE
...\" 
.LE
...\" 
.P
Where:
...\" 
.VL 1i
.LI "\*L-n\ \*Vclient_name\*O"
The \*Vclient_name\*O (client principal name) specifies the principal identity
under which the client process is to execute.
...\" 
...\" 
.LI "\*L-p\ \*Vclient_pwd\*O"
Specifies the client principal password.
...\" 
...\" 
.LI "\*L-s\ \*Vserver_name\*O"
(\*VClient program only\*O) Specifies the server principal name (in the NSI namespace)
which the client will import and bind to.
...\" 
...\" 
.LI "\*L-w\*O"
Specifies the get password entry operation for the client principal.
...\" 
...\" 
.LI "\*L-o\*O"
Specifies that the \*Lsec_login_validate_and_certify(\|)\*O call be used by
the client during login operations. This is a privileged operation,
so the server must be running under the root UID in order to be able to execute
this option.
...\" 
...\" 
.LI "\*L-r\ \*Vinteger\*O"
Specifies the number of concurrent client calls for login operations.
...\" 
...\" 
.LI "\*L-x\*O"
Client flag to specify server clean-up and exit operations.
...\" 
...\" 
.LI "\*L-c\ \*Vcell_name\*O"
Specifies the cell within which client/server NSI import/export and registry
operations should occur.
...\" 
...\" 
.LI "\*L-u\ \*Vprincipal\*O"
Specifies that the principal name and account be added to the registry. The
password for all added principals is the same as the server's.
...\" 
...\" 
.LI "\*L-k\ \*Vprincipal\*O"
Specifies that the principal name and account be deleted from the registry.
...\" 
...\" 
.LI "\*L-a\*O"
Specifies authenticated RPC.
...\" 
...\" 
.LI "\*L-f\ \*Vfilename\*O"
Specifies the file to transfer from the client host machine to the server host
machine as the \*Lpassword_override\*O file. Note that this requires that the
server be running under root UID in order to have write permission to the
\*Vdcelocal\*L/etc\*O directory.
...\" 
...\" 
.LI "\*L-t\ \*Vinteger\*O"
Specifies how long (in minutes) each single client call should continue
execution, repeatedly looping through the login and logout operations.
...\" 
...\" 
.LI "\*L-l\ \*Vinteger\*O"
Specifies how long (in seconds) to wait in each client call between login
and logout operations. Use default or specify zero for maximum test loading.
...\" 
...\" 
.LI "\*L-d\*O"
Specifies debug mode.
...\" 
...\" 
.LI "\*L-i\ \*Vprot_seq\*O"
Specifies the RPC protocol sequence to be used; either ``\*Lncacn_ip_tcp\*O''
or ``\*Lncadg_ip_udp\*O''.
...\" 
...\" 
.LI "\*L-P\*O"
Specifies that the client should perform a ping of the server (by calling
\*Lrpc_mgmt_is_server_listening(\|)\*O).
...\" 
...\" 
.LI "\*L-j\ \*Vaggregate_nr\*O"
Specifies the number of aggregate accounts to add or delete from the registry.
...\" 
...\" 
.LE
...\" 
.P
Both the client and the server program will detect conflicting parameters
and output an appropriate error message to the invoker.
...\" 
...\" i.e., You.
...\" 
...\" 
...\" 
...\" 
...\" 
...\" ----------------------------------------------------------------------
.H 4 "Usage Examples"
...\" ----------------------------------------------------------------------
...\" 
.P
Following as a sequence of example commands showing how to run the \*Lsec.rgy.7\*O
test by hand.
...\" 
.P
First, the setup script is run:
...\" 
.iS
    secrgy_setup -n foo -p bar
.iE
...\" 
.P
\(emThis adds the server name and password to the registry.
...\" 
.P
Next, the server is started:
...\" 
.iS
    secrgy_server -n foo -p bar
.iE
...\" 
.P
\(emThis invokes the server program, which adds the server name to the namespace and
starts a thread to refresh the server's credentials at the midpoint of their default
registry lifetime.
...\" 
...\" 
...\" 
.iS
    secrgy_client -n foo -p bar -s foo -r 10
.iE
.P
Invokes the client program, which logs in as the principal ``foo'' using
the password ``bar'', binds to the CDS-named server ``foo'', and executes
the login-logout operation on the server 10 times concurrently (i.e., with
10 client call threads). 
...\" 	
...\" 
...\" 	
...\" 
...\" ----------------------------------------------------------------------
.H 2 "CDS"
...\" ----------------------------------------------------------------------
...\" 
.P
The following sections describe the DCE CDS system tests run under TET.
...\" 
...\" 
...\" 
...\" 
...\" ----------------------------------------------------------------------
.H 3 "CDS Server System Test"
...\" ----------------------------------------------------------------------
...\" 
.P
\*Lcdsserv\*O performs tight loop access of local and remote cell (DNS naming)
objects, using ten clients per cell host. The test sets \*Lcdscp\*O confidence
to ``high'' and gathers statistics on time per loop and the number of server
read accesses.
...\" 
...\" 
...\" 
.VL 1.5i
.LI "Test\ Script:"
\*L$TET_ROOT/system/directory/cds/ts/cds.server.4/cdsserv.ksh\*O
...\" 
.LI "Data\ Script:"
\*L$TET_ROOT/system/directory/cds/ts/cds.server.4/cdsserv.cfg\*O
...\" 
.LE
...\" 
.P
\*Lcdsserv\*O is invoked as follows:
...\" 
.iS
    run.cds \*V{\*L-l \*Vloops | \*L-t \*Vhours } [other_options] \*Lcdsserv \*V[cell_name(s)]
.iE

.P
where:
...\" 
...\" 
.VL 1.5i
.LI "\*L-l\ \*Vloops\*O"
Specifies the number of loops or passes to run.
...\" 
.LI "\*L-t\ \*Vhours\*O"
Specifies the time to run in hours. A decimal point is accepted; e.g. ``.5'' is
interpreted as 30 minutes.
...\" 
.LI "\*Lcdsserv\*O"
Specifies the name of the test.
...\" 
.LE
.P
The \*Vother_options\*O and \*Vcell_name(s)\*O are described in the following section.
...\" 
...\" 
...\" ----------------------------------------------------------------------
.H 4 "Test-specific Command Line Options for cdsserv"
...\" ----------------------------------------------------------------------
...\" 
.P
Following are descriptions of command line options specific to \*Lcdsserv\*O.
...\" 
...\" 
.BL
.LI
\*L-q high\*V|\*Lmedium\*V|\*Llow\*O
.P
Specifies the CDS clerk confidence level for the \*Lcdscp\*O loop sessions.
...\" 
.LI
\*L-T \*Vhours\*O and \*L-L \*Vnumber\*O
.P
Specifies the number of hours or times to execute the test's internal loop.
The \*Vhours\*O parameter may include a decimal point; e.g., ``\*L-T .5\*O'' is
interpreted to mean 30 minutes.  Note that \*L-L\*O and \*L-T\*O are mutually
exclusive. A loop count greater than 999 means loop forever.
...\" 
.LI
\*L-u ``\*Vprincipal_1 .\ .\ .\  principal_N\*O'' and \*L-p ``\*Vpassword_1  .\ .\ .\  password_N\*O''
.P
\*L-u\*O specifies a list of principal names that are used for control of the
inner main loop execution. The default is \*Lcell_admin\*O. \*L-p\*O specifies
a list of passwords for the list of principal names. The list of passwords the
must match the order of the corresponding principal name list.
.P
Specifying additional principals starts additional, simultaneous processes to
access CDS, so this is a good way to increase the load on CDS.
...\" 
.LI
\*Vcell_name(s)\*O
.P
Specifies a list of cells that will be used for control of the outer main loop
portion of the test execution. Default is ``\*L/.:\*O''.
...\" 
.LE
...\" 
.P
This test also uses the following standard \*Lrun\*O options:
...\" 
.BL
.LI
\*L-e \*Vnumber\*O
.LI
\*L-E \*Vnumber\*O
.LI
\*L-c\*O
.LI
\*L-h\*O
.LE
...\" 
.P
For explanations of these options, see ``Command Line Options Common to Some
or All of the ``Run'' Scripts'', in Chapter 13.
...\" 
...\" 
...\" 
...\" ----------------------------------------------------------------------
.H 4 "Logic Flow of the cdsserv System Test"
...\" ----------------------------------------------------------------------
...\" 
.P
The test consists of three nested control loops:
...\" 
.BL
.LI
The outermost loop is controlled by the number of cells in the cell list.
.LI
The next inner loop is controlled by the number of principal logins.
.LI
The innermost loop is controlled by the number of passes (loops) or the number
of hours of execution specified on the command line. This loop is entirely
contained in a separate process.
.LE
...\" 
.P
The test executes for all cells in the cell list and for each principal login.
This establishes the authenticated login context for all subsequent \*Lcdscp\*O
operations. The CDS clerk, however, is invoked by the CDS advertiser on a UNIX
ID basis, not by DCE authenticated login context. Therefore, in order to increase
the number of CDS clerks which would apply localized stress to the \*Lcdsd\*O
server, the test should be executed using differing multiple UIDs.
.P
The innermost loop performs two \*Lcdscp\*O \*Lset confidence\*O, and
\*Lshow directory\*O operations, followed by a single \*Lshow clearinghouse\*O
operation. The output of the \*Lcdscp show clearinghouse\*O command is parsed
to gather individual CDS server statistics on ``read'' access count and response
timing.
.P
The \*Lcdscp\*O operations are monitored and success failure results
compiled and sent to the test process standard output and TET journal file.
...\" 
...\" 
...\" 
...\" 
...\" 
...\" 
...\" ----------------------------------------------------------------------
.H 3 "CDS ACL Manager System Test"
...\" ----------------------------------------------------------------------
...\" 
.P
This test exercises the CDS ACL manager via client access requests to local and
foreign cells. If clearinghouse replicas are available, they are tested. Five
administrators on each host in the specified cell(s) sequentially verify valid
and invalid ACL entry type permissions and management on replicas, soft links,
objects, and directories.
...\" 
.VL 1.5i
.LI "Test\ Script:"
\*L$TET_ROOT/system/directory/cds/ts/cds.acl.6/dcecdsacl6\*O
...\" 
.LI "Data\ Script:"
\*L$TET_ROOT/system/directory/cds/ts/cds.acl.6/dcecdsacl6.data\*O
...\" 
.LE
...\" 
...\" 
.P
\*Ldcecdsacl6\*O is invoked as follows:
...\" 
...\" 
.iS
    run.cds \*V{\*L-l \*Vloops | \*L-t \*Vhours } [other_options] \*Ldcecdsacl6 \*V[cell_name(s)]
.iE
...\" 
.P
where:
...\" 
.VL 1.5i
.LI "\*L-l\ \*Vloops\*O"
\*Vloops\*O specifies the number of loops or passes to run.
...\" 
.LI "\*L-t\ \*Vhours\*O"
Specifies the time in hours. A decimal point is accepted; e.g. ``.5'' is
interpreted as 30 minutes.
...\" 
.LI "\*Ldcecdsacl6\*O"
Specifies the name of the test.
...\" 
.LE
...\" 
...\" 
.nS "note:
In DCE 1.1, \*Ldcecdsacl6\*O cannot be run correctly with more than one CDS server.
It must be run on the server machine.
.nE
...\" 
...\" 
.P
Test-specific options are described in the following section.
...\" 
...\" 
...\" ----------------------------------------------------------------------
.H 3 "Test-specific Command Line Options for dcecdsacl6"
...\" ----------------------------------------------------------------------
...\" 
.P
Following are descriptions of command line options specific to \*Ldcecdsacl6\*O.
...\" 
...\" 
.BL
.LI
\*L-q high\*V|\*Lmedium\*V|\*Llow\*O
.P
Specifies \*Lcdscp\*O clerk operation confidence, as described in the \*VOSF DCE
Administration Reference\*O. Note that this applies only to the \*Lcdscp show directory\*O
operation performed at the beginning of principal loop execution, not to all \*Lcdscp\*O
operations.
...\" 
.LI
\*Vcell name(s)\*O
.P
Specify the cell(s) over which to execute the main test loop. The default is the
local cell if no cell argument is specified.
...\" 
.LE
...\" 
.P
This test also uses the following standard \*Lrun\*O options:
...\" 
.BL
.LI
\*L-e \*Vnumber\*O
.LI
\*L-E \*Vnumber\*O
.LI
\*L-c\*O
.LI
\*L-h\*O
.LE
...\" 
.P
For explanations of these options, see ``Command Line Options Common to Some
or All of the ``Run'' Scripts'', in Chapter 13.
...\" 
...\" 
...\" 
...\" ----------------------------------------------------------------------
.H 3 "dcecdsacl6 Initialization"
...\" ----------------------------------------------------------------------
...\" 
.P
During initialization the necessary user and administrative groups are first added
to the registry, then the administrative and user principals are added to those
groups, and finally the associated principal accounts are added. CDS ACLs for the
cell and clearinghouses are modified to include the \*Lst_admin\*O group initial
permissions as follows:
...\" 
.VL 2i
.LI "cell:"
\*Lrwcidta\*O permissions
.LI "master\ clearinghouse:"
\*Lrwdtc\*O permissions
.LE
...\" 
.P
The ACL of each clearinghouse server is modified to include the \*Lst_admin\*O
group initial permissions (\*Lrwcidta\*O).
...\" 
...\" 
...\" 
...\" 
...\" 
...\" ----------------------------------------------------------------------
.H 3 "Logic Flow of dcecdsacl6 Test"
...\" ----------------------------------------------------------------------
...\" 
.P
When invoked, \*Ldcecdsacl6\*O executes a series of three nested control loops:
...\" 
.BL
.LI
The outermost loop is controlled by the number of cells.
.LI
The next inner loop is controlled by the number of administrative principals.
.LI
The innermost loop is controlled by the number of clearinghouses.
.LE
...\" 
.P
The principal loop sequence is executed for each administrative principal
passed into the test driver on the command line and for every user principal
included in the clearinghouse operations files.
.P
In each complete pass of the test, the following is done:
...\" 
.BL
.LI
some miscellaneous initialization;
.LI
\*Lcdscp show directory\*O and \*Lset confidence\*O operations;
.LI
the specified ACL management-related operations.
.LE
...\" 
...\" 
.P
The ACL management operations are determined by reading the clearinghouse
specific operation files created in advance and parsing output based on
principal name. The operation sequence and expected result (pass or fail)
is parsed in the order it appears in the file.
.P
The state of the tested cell at the end of the clearinghouse operation
sequence for each complete test pass using default test setup parameters
will be the same as the cell's state at the beginning of the pass, so that
the test can continue execution indefinitely.
...\" 
...\" 
...\" 
...\" ----------------------------------------------------------------------
.H 3 "Hierarchical Cell Tests"
...\" ----------------------------------------------------------------------
...\" 
.P
These are tests of the DCE 1.1 hierarchical cell functionality. \*Lhclcfg001\*O
tests intercell authentication with a list of cells using \*Lrgy_edit\*O.
\*Lhclrel001\*O performs intercell testing to a specified list of cells.
...\" 
.P
.VL 1.5i
.LI "Test\ Script:"
\*L$TET_ROOT/system/directory/cds/bin/run.hcell\*O
...\" 
.LE
...\" 
.P
The tests are invoked as follows:
...\" 
.iS
    run.hcell \*V{\*L-l \*Vloops | \*L-t \*Vhours } \*Vtestname\*O \*Vcellnames\*O
.iE
...\" 
.P
where:
...\" 
.VL 1.5i
.LI "\*L-l\ \*Vloops\*O"
\*Vloops\*O specifies the number of loops or passes to run.
.P
Note that \*Lhclcfg001\*O runs one pass only; thus it does not accept the
\*L-l\*O flag.
...\" 
.LI "\*L-t\ \*Vhours\*O"
Specifies the time in hours. A decimal point is accepted; e.g. ``.5'' is
interpreted as 30 minutes.
.P
Note that \*Lhclcfg001\*O runs one pass only; thus it does not accept the
\*L-t\*O flag.
...\" 
.LI \*Vtestname\*O"
Specifies the name of the test to run, and is one of the following:
...\" 
.VL 1i
.LI "\*Lhclcfg001\*O"
Establishes intercell authentication with a list of cells using
\*Lrgy_edit\*O.
...\" 
.LI "\*Lhclrel001\*O"
Performs intercell testing to specified list of cells.
...\" 
.LI "\*Lall\*O"
Runs both of the tests.
...\" 
.LE
...\" 
...\" 
.LI "\*Vcellnames\*O"
A list of one or more cellnames with which to execute the tests.
...\" 
.LE
...\" 
...\" 
.P
\*Lrun.hcell\*O also accepts the standard \*L-c\*O, \*L-e\*O, \*L-E\*O
and \*L-h\*O options. For explanations of these options, see ``Command
Line Options Common to Some or All of the \*LRun\*O Scripts'' in
Chapter 13.
...\" 
...\" 
...\" 
...\" 
...\" 
.zA "def,10739,1.1beta,new info"
...\" 
...\" ----------------------------------------------------------------------
.H 2 "DCE Audit Service System Tests"
...\" ----------------------------------------------------------------------
...\" 
.P
The Audit system tests are invoked as follows:
...\" 
.iS
    run.aud \*V{\*L-l \*Vloops | \*L-t \*Vhours } \*Vtest_name\*O
.iE
...\" 
.P
where:
...\" 
.VL 1.5i
...\" 
.LI "\*L-l\ \*Vloops\*O"
\*Vloops\*O specifies number of loops or passes to run.
...\" 
.LI "\*L-t\ \*Vhours\*O"
Specifies the time in hours. A decimal point is accepted; e.g. ``.5'' is
interpreted as 30 minutes.
...\" 
.LI "\*L-c\*O"
Specifies that the log files from successful iterations be kept.
...\" 
.LI "\*Vtest_name\*O"
The name of the test to be run, which must be one of the following:
...\" 
.VL 1i
.LI "\*Laudstr001\*O"
Audit stress test.
...\" 
.LI "\*Laudrel001\*O"
Audit reliability test.
...\" 
.LE
...\" 
.LE
...\" 
...\" 
.P
This test also uses the following standard \*Lrun\*O options:
...\" 
.BL
.LI
\*L-e \*Vnumber\*O
.LI
\*L-E \*Vnumber\*O
.LI
\*L-c\*O
.LI
\*L-h\*O
.LE
...\" 
.P
For explanations of these options, see ``Command Line Options Common to Some
or All of the ``Run'' Scripts'', in Chapter 13.
...\" 
...\" 
.P
See also the 
...\" 
.DS
    \*Vdce-root-dir\*L/dce/src/test/systest/audit/README\*O
.DE
...\" 
.P
file.
...\" 	
.zZ "def,10739,1.1beta,new info"
...\" 
...\" 
...\" 
...\" 	
...\" ----------------------------------------------------------------------
.H 2 "DTS"
...\" ----------------------------------------------------------------------
...\" 
.P
The following sections describe the DCE DTS system tests run under TET.
...\" 
...\" 
...\" ----------------------------------------------------------------------
.H 3 "dcetmsyn"
...\" ----------------------------------------------------------------------
...\" 
...\" 
.P
\*Ldcetmsyn\*O tests that synchronization occurs when the \*Ldtscp synchronize\*O
command is executed.
.P
The state is tested to see if a synchronization is occurring, and if so, the test
will enter a loop to wait for the state to be ``on'', which will occur when the
synchronization is completed. The \*Ldtscp show last synchronization\*O command
is then executed and the output saved. The current time is saved. A \*Lsynchronize\*O
command is then executed, and a loop is entered in order to wait for the
synchronization to complete. The \*Ldtscp show last synchronization\*O command is
again executed and compared to the previous saved output to verify that a
synchronization did occur after the \*Ldtscp synchronize\*O command was entered.
...\" 
...\" 
.P
Before running the test you should do a
.iS
    \*Ldtscp set synch hold down 24:00:00\*O
.iE
...\" 
.P
\(emthis will set the default time to synchronize on the machine to
every 24 hours. If you do not do this, failures may occur when the
test attempts to do a synchronization at the same time that the machine
is trying to do one of its own. This test can be run on DTS local and
global servers and clerks.
...\" 
...\" 
.VL 1.5i
.LI "Test\ Script:"
\*L$TET_ROOT/system/time/ts/dcetmsyn/dcetmsyn\*O
.LE
...\" 
.P
Note that there is no data script for this test.
...\" 
...\" 
.P
\*Ldcetmsyn\*O is invoked as follows:
...\" 
.iS
    run.time \*V{\*L-l \*Vloops | \*L-t \*Vhours } [other_options] \*Ldcetmsyn
.iE
...\" 
.P
where:
...\" 
.VL 1.5i
.LI "\*L-l\ \*Vloops\*O"
\*Vloops\*O specifies the number of loops or passes to run.
...\" 
.LI "\*L-t\ \*Vhours\*O"
Specifies the time in hours. A decimal point is accepted; e.g. ``.5'' is
interpreted as 30 minutes.
...\" 
.LI "\*Ldcetmsyn\*O"
Specifies the name of the test.
...\" 
.LE
...\" 
.P
This test also uses the following standard \*Lrun\*O options:
...\" 
.BL
.LI
\*L-e \*Vnumber\*O
.LI
\*L-E \*Vnumber\*O
.LI
\*L-c\*O
.LE
...\" 
.P
For explanations of these options, see ``Command Line Options Common to Some
or All of the ``Run'' Scripts'', in Chapter 13.
.P
Note that \*Ldcetmsyn\*O has no test-specific command line options.
...\" 
...\" 
.zA "def,10739,1.1beta,new info"
...\" 
...\" 
...\" 
...\" 
...\" 
...\" IIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIII
...\" ----------------------------------------------------------------------
.H 2 "Internationalization System Tests"
...\" ----------------------------------------------------------------------
...\" 
.P
The files \*LI8NSAN001\*O and \*LI8NSAN002\*O, found in the
...\" 
.DS
    \*Vdce-root-dir\*L/dce/src/test/systest/I18N/ts\*O
.DE
...\" 
.P
directory, are the Internationalization system tests; they test Internationalization
support in the CDS and Security components. The tests are written as \*Ldcecp\*O
scripts, and are run under TET, but they are not run under a \*Lrun\*O script.
.P
Following is a list of the files and directories that make up the test; they are
located in the
...\" 
.DS
    \*Vdce-root-dir\*L/dce/src/test/systest/I18N\*O
.DE
...\" 
.P
directory and installed in the
...\" 
.DS
    \*Vdce-root-dir\*Ldce/install/\*Vplatform\*O/dcetest/dce1.1/test/tet/system/I18N\*O
.DE
...\" 
.P
directory:
...\" 
.VL 1i
...\" 
.LI "\*Llib\*O"
Directory containing files that define common procedures called by the test main
procedure.
...\" 
.LI "\*Ltet_code\*O"
File containing error definitions known by TET.
...\" 
.LI "\*Ltet_scen\*O"
TET scenario file.
...\" 
.LI "\*Ltetexec.cfg\*O"
File containing test configuration variables and assignments.
...\" 
.LI "\*Lts\*O"
Directory where the main test scripts reside.
...\" 
.LE
...\" 
...\" 
...\" 
...\" ----------------------------------------------------------------------
.H 3 "Prerequisite Setup"
...\" ----------------------------------------------------------------------
...\" 
.P
Before attempting to run the internationalization tests, you must do the following:
...\" 
...\" 
.AL
...\" 
.LI
Select a locale for testing and ready the message catalogs corresponding to that
locale.
...\" 
.LI
Make sure that the host machine's operating system has I18N support for the desired
locale.
...\" 
...\" 
.LI
Install and configure the DCE cell.
...\" 
.LI
Install and configure the system tests using \*Ldcetest_config\*O. For information on
\*Ldcetest_config\*O, see Chapter 13.
...\" 
.LI
Edit the value of the variables defined in the
...\" 
.DS       
    \*Ltetexec.cfg\*O
.DE
...\" 
.P
file. For example:
...\" 
.DS
    \*CLOCALE_NAME=c-french\*O
    \*CMESSAGE_CAT=/u1/piglatin/%N\*O
    \*CLOCALE_DATAFILE=french.short\*O
.DE
...\" 
.P
The above settings mean that the test will use the French locale, and will look for
message catalogs in the
...\" 
.DS
    \*L/u1/piglatin\*O
.DE
...\" 
.P
directory.
...\" 
...\" 
...\" 
.LI
Create the datafile defined by the environment variable \*LLOCALE_DATAFILE\*O. This
is the input file for the tests. It should contain a list of at least 20 words, arranged
one word per line.
...\" 
...\" 
...\" 
.LE
...\" 
...\" 
...\" 
...\" ----------------------------------------------------------------------
.H 3 "Running the Tests"
...\" ----------------------------------------------------------------------
...\" 
.P
To run the tests, do the following:
...\" 
.iS
    cd \*Vdce-root-dir\*L/dce/install/\*Vplatform\*L/dcetest/dce1.1/test/tet
    setenv TET_ROOT `pwd`
    setenv PATH $TET_ROOT/bin:$PATH
    tcc -e -j \*Vjournal_file\*L system/I18N \*Vtest_suite_name\*O
.iE
...\" 
.P
where \*Vtest_suite_name\*O is one of the following:
.BL
.LI
\*LI8NSAN001\*O
.LI
\*LI8NSAN002\*O
.LE
...\" 
...\" .P
...\" \(em listed in the TET scenario file:
...\" 
...\" .DS
...\"     \*Vdce-root-dir\*L/dce/install/\*Vplatform\*L/dcetest/dce1.1/test/tet/system/I18N/tet_scen\*O
...\" .DE
...\" 
.P
and \*Vjournal_file\*O is the name of the file to which you want the test results
written.
...\" 
...\" 
.P
The test can also be executed using the \*Lrun\*O script:
...\" 
.iS
    run.i18n \*V{\*L-l \*Vloops | \*L-t \*Vhours } [other_options] \*Vtest_suite_name\*O
.iE
...\" 
.P
where \*Vtest_suite_name\*O has the same values as in the example above.
...\" 
...\" 
.P
After the test has executed, the results will be found in the journal file (which
you specify). If a journal file is not specified, TET will create the file under
the
...\" 
.DS
    \*Lresults\*O
.DE
...\" 
.P
directory.
...\" 
...\" 
...\" 
...\" 
...\" ----------------------------------------------------------------------
.H 2 "DCE Serviceability System Tests"
...\" ----------------------------------------------------------------------
...\" 
.P
The DCE 1.1 Serviceability system tests are located at
...\" 
.DS
    \*Vdce-root-dir\*L/dce/src/test/systest/svc\*O
.DE
...\" 
.P
in the DCE source tree. They test different ways of configuring serviceability
at DCE startup. These tests are installed by \*Ldcetest_config\*O. They are
invoked as follows:
...\" 
.iS
    run.svc \*V{\*L-l \*Vloops | \*L-t \*Vhours } [other_options] \*Vtestname\*O
.iE
...\" 
.P
where:
...\" 
.VL 1.5i
.LI "\*L-l\ \*Vloops\*O"
Specifies the number of loops or passes to run.
...\" 
.LI "\*L-t\ \*Vhours\*O"
Specifies the time in hours to run. A decimal point is accepted; e.g. ``.5'' is
interpreted as 30 minutes.
...\" 
.LI "\*Vtestname\*O"
Specifies the name of the test, and is one of the following:
...\" 
.BL
.LI
\*Lsvccfg001\*O
.LI
\*Lsvccfg002\*O
.LI
\*Lsvccfg003\*O
.LI
\*Lsvccfg004\*O
.LI
\*Lsvccfg005\*O
.LI
\*Lsvccfg006\*O
.LE
...\" 
...\" 
.LE
...\" 
The contents of
...\" 
.DS
    \*Vdce-root-dir\*L/dce/src/test/systest/svc/README\*O
.DE
...\" 
.P
contains additional information about running the tests.
...\" 
...\" 
.zZ "def,10739,1.1beta,new info"
...\" 
...\" 
...\" 
...\" 
...\" 
...\" 
...\" 
...\" ----------------------------------------------------------------------
