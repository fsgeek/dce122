...\" @OSF_COPYRIGHT@
...\" COPYRIGHT NOTICE
...\" Copyright (c) 1990, 1991, 1992, 1993, 1994 Open Software Foundation, Inc.
...\" ALL RIGHTS RESERVED (DCE).  See the file named COPYRIGHT.DCE for
...\" the full copyright text.
...\" 
...\" HISTORY
...\" $Log: 3_dceprogs.gpsml,v $
...\" Revision 1.1.2.17  1994/10/30  22:47:36  weir
...\" 	Last updates
...\" 	[1994/10/30  22:46:32  weir]
...\"
...\" Revision 1.1.2.16  1994/10/30  16:25:38  weir
...\" 	Updates
...\" 	[1994/10/30  16:24:17  weir]
...\" 
...\" Revision 1.1.2.15  1994/10/29  23:25:58  weir
...\" 	More Updates
...\" 	[1994/10/29  23:24:42  weir]
...\" 
...\" Revision 1.1.2.14  1994/10/28  20:50:16  weir
...\" 	DCE 1.1 updates
...\" 	[1994/10/28  20:48:55  weir]
...\" 
...\" Revision 1.1.2.13  1994/10/26  20:40:51  weir
...\" 	DCE 1.1 Updates
...\" 	[1994/10/26  20:39:27  weir]
...\" 
...\" Revision 1.1.2.12  1994/10/14  18:38:55  weir
...\" 	Minor edit changes
...\" 	[1994/10/14  18:37:51  weir]
...\" 
...\" Revision 1.1.2.11  1994/06/20  21:39:46  weir
...\" 	Beta Update
...\" 	[1994/06/20  21:38:46  weir]
...\" 
...\" Revision 1.1.2.10  1994/06/20  20:28:48  weir
...\" 	Beta Update
...\" 	[1994/06/20  20:27:29  weir]
...\" 
...\" Revision 1.1.2.9  1994/06/19  20:53:59  weir
...\" 	Beta Update
...\" 	[1994/06/19  20:52:53  weir]
...\" 
...\" Revision 1.1.2.8  1994/06/17  13:50:25  weir
...\" 	Beta Update
...\" 	[1994/06/17  13:48:57  weir]
...\" 
...\" Revision 1.1.2.7  1994/06/13  19:25:18  devobj
...\" 	cr10872 - fix copyright
...\" 	[1994/06/13  19:24:18  devobj]
...\" 
...\" Revision 1.1.2.6  1994/06/12  17:32:04  weir
...\" 	No change-- for copyright insertion
...\" 	[1994/06/12  17:30:39  weir]
...\" 
...\" Revision 1.1.2.5  1994/06/08  18:59:56  weir
...\" 	Beta Update
...\" 	[1994/06/08  18:59:36  weir]
...\" 
...\" Revision 1.1.2.4  1994/06/08  18:47:23  weir
...\" 	Beta Update
...\" 	[1994/06/08  18:46:20  weir]
...\" 
...\" Revision 1.1.2.3  1994/06/02  21:12:37  weir
...\" 	Beta Updates
...\" 	[1994/06/02  21:10:54  weir]
...\" 
...\" Revision 1.1.2.2  1994/05/03  20:13:59  weir
...\" 	Reorganization (part 2)
...\" 	[1994/05/03  20:13:29  weir]
...\" 
...\" Revision 1.1.2.1  1994/05/03  19:00:24  weir
...\" 	Reorganization
...\" 	[1994/05/03  18:59:10  weir]
...\" 
...\" $EndLog$
...\" 
...\" 
...\" 
...\" 
...\" 
...\" ----------------------------------------------------------------------
.H 1 "DCE Programs"
...\" ----------------------------------------------------------------------
...\" 
.P
This chapter contains information regarding porting the following DCE 1.1
programs and facilities:
...\" 
.BL
.LI
\*Ldcecp\*O \(em the DCE command program
...\" 
.LI
\*Ldced\*O \(em the DCE daemon
...\" 
.LI
DCE ACL Facility
...\" 
.LI
DCE Backing Store Library
...\" 
.LE
...\" 
...\" 
.P
The chapter concludes with a section on various aspects of the DCE configuration
program, \*Ldce_config\*O.
...\" 
...\" 
...\" 
...\" ----------------------------------------------------------------------
.H 2 "dcecp"
...\" ----------------------------------------------------------------------
...\" 
.P
For DCE 1.1 a new control program called \*Ldcecp\*O has been added to the DCE
administrative package. This program is meant to augment the use of the existing
control programs in the present release, and ultimately to replace them entirely
in future releases.
.P
In DCE 1.1, \*Ldcecp\*O incorporates all features (except where noted otherwise)
of the following control programs:
...\" 
...\" 
.BL
.LI
\*Lrpccp\*O
.LI
\*Ldtscp\*O
.LI
\*Lcdscp\*O
.P
All but the following functionality:
...\" 
.BL
.LI
\*Ldisable clerk\*O
.LI
\*Ldisable server\*O
.LI
\*Lset directory\*O to new epoch
.LI
\*Lshow cell\*O
.LI
\*Lshow clerk\*O
.LI
\*Lshow server\*O
.LI
\*Lconfidence\*O setting (\*Lmedium\*O is always used)
.LE
...\" 
...\" 
...\" 
.LI
\*Lacl_edit\*O
.LI
\*Lrgy_edit\*O
.P
All functionality except for local registry commands
.LI
\*Lsec_admin\*O
.LE
...\" 
...\" 
.P
\*Ldcecp\*O also performs all administrative functions for the following new
DCE 1.1 components and features:
...\" 
...\" 
.BL
.LI
\*Ldced\*O
.LI
DCE Audit Service
.LI
DCE Serviceability message routing specification
.LI
Extended Registry Attribute (ERA) manipulation
.LI
Cell Aliasing and Hierarchical Cells
.LI
Delegation ACL Entry manipulation
.LI
CDS subtree operations (\*Ldelete\*O and \*Lmerge\*O)
.LE
...\" 
...\" 
.P
The \*Ldcecp\*O program includes a builtin scripting language which
allows powerful portable scripts to be written. The scripting language
is based on the Tool Command Language (Tcl) from the University of
California at Berkeley. Tcl Version 7.3 is included with DCE 1.1. In
accordance with DCE 1.1 coding guidelines, Tcl has been internationalized
for DCE.
.P
Consult the \*VOSF DCE Administration Reference\*O for the specifics of how
to use \*Ldcecp\*O.
.P
\*Ldcecp\*O requires a DCE 1.1 \*Llibdce\*O; it cannot be run with a DCE 1.0.X
\*Llibdce\*O.
...\" 
.P
The DCE 1.1 version of \*Ldcecp\*O includes several scripts that perform
administrative commands that cross component boundaries, including the
following:
...\" 
.BL
.LI
\*Luser\*O
.LI
\*Lcell\*O
.LI
\*Lhost\*O
.LI
\*Lcellalias\*O
.LE
...\" 
...\" 
.P
You should find that the \*Ldcecp\*O code is relatively easy to port. No
machine dependent files or macros are used, and \*Ldcecp\*O relies on public
DCE APIs for most of its functionality. Tcl has been ported to virtually all
Unix and several non-Unix platforms. A large test suite (containing approximately
3200 tests), covering every \*Ldcecp\*O command, is also included.
...\" 
...\" 
...\" 
.P
The locations of \*Ldcecp\*O installed files are given below. Note that all
pathnames are located under:
...\" 
.DS
    \*Vdce-root-dir\*L/dce/install/\*Vplatform\*L/opt/dce1.1\*O
.DE
...\" 
...\" 
...\" 
...\" 
.SP
...\" 
.ne 3i
.TB "Locations of dcecp Installed Files"
...\" .ad l
.TS H
expand tab (@) box;
lB | lB | lB
lB | lB | lB
lB | l | lB.
@@Location in
Filename@Description@Install Tree
_
.TH
_
dcecp@T{
The dcecp executable
T}@/bin/dcecp
_
dcedcp.cat@T{
Message catalog
T}@/nls/msg/en_US.ASCII/dcedcp.cat
_
init.tcl@T{
Tcl initialization
T}@/tcl/init.tcl
_
parray.tcl@T{
Prints the contents of a global array on stdout
T}@/tcl/parray.tcl
_
tclIndex@T{
Index of procedures defined in tcl scripts
T}@/tcl/tclIndex
_
attr_eval.tcl@T{
Used internally by dcecp cds functions
T}@/dcecp/attr_eval.tcl
_
attrlist.dcp@T{
The attrlist object
T}@/dcecp/attrlist.dcp
_
bckp_cds.dcp@T{
Called by cell backup; it backs up cds
T}@/dcecp/bckp_cds.dcp
_
bckp_sec.dcp@T{
Called by cell backup; it backs up the registry
T}@/dcecp/bckp_sec.dcp
_
cell.dcp@T{
The cell object
T}@/dcecp/cell.dcp
_
cellalias.dcp@T{
The cellalias object
T}@/dcecp/cellalias.dcp
_
dir_ops.dcecp@T{
Directory delete - tree and directory merge
T}@/dcecp/dir_ops.dcecp
_
dts.dcp@T{
dts catalog and clock compare
T}@/dcecp/dts.dcp
_
help.dcp@T{
The help command
T}@/dcecp/help.dcp
_
host.dcp@T{
The host object
T}@/dcecp/host.dcp
_
init.dcecp@T{
Hostwide dcecp initialization script.
T}@/dcecp/init.dcecp
_
parseargs.dcp@T{
Used by task scripts
T}@/dcecp/parseargs.dcp
_
registry.dcp@T{
Registry dump and verify
T}@/dcecp/registry.dcp
_
user.dcp@T{
The user object
T}@/dcecp/user.dcp
_
verb-object.dcp@T{
Defines verb-object syntax
T}@/opt/dcelocal/dcecp/verb-object.dcecp
...\" 
...\" _
...\" init.dcecp@T{
...\" dcecp specific host-wide init file
...\" T}@@/dcecp/init.dcecp
...\" _
...\" dir_ops.dcecp@T{
...\" Operations required for the directory object.
...\" (subject to change)
...\" T}@@/opt/dcelocal/dcecp/dir_ops.dcecp
...\" _
...\" init.tcl@T{
...\" Generic tcl init file: All tcl programs (not only dcecp) read this
...\" T}@@/opt/dcelocal/tcl/init.tcl
...\" _
...\" parray.tcl@T{
...\" See the Tcl README for details.
...\" T}@@/opt/dcelocal/tcl/parray.tcl
...\" _
...\" tclIndex@T{
...\" See the Tcl README for details.
...\" T}@@/opt/dcelocal/tcl/tclIndex
...\" 
.TE
...\" 
...\" 
...\" 
.nP
...\" 
...\" 
.TB "Locations of dcecp Source Files"
...\" .ad l
.TS H
expand tab (@) box;
lB | lB | lB
lB | lB | lB
lB | l | lB.
@@Source
Filename@Description@Pathname
_
.TH
_
dcecp@T{
Executable
T}@src/admin/dcecp/*
_
dcecp.cat@T{
Message catalogue
T}@src/admin/dcecp/dcp.sams
_
@T{
Contents of dcelocal/dcecp
T}@src/admin/dcecp/scripts/*
_
@T{
Contents of dcelocal/tcl
T}@src/admin/tcl_dce
.TE
...\" 
...\" 
...\" 
...\" ----------------------------------------------------------------------
.H 3 "Tcl"
...\" ----------------------------------------------------------------------
...\" 
.P
Source code for the Tcl scripting language included in \*Ldcecp\*O is located
in the following directories:
...\" 
.BL
.LI
\*Vdce-root-dir\*L/dce/src/admin/tcl7.3\*O
.P
as released from Berkeley. See the
...\" 
.DS
    \*Vdce-root-dir\*L/dce/src/admin/tcl7.3/README\*O
.DE
...\" 
.P
and
...\" 
.DS
    \*Vdce-root-dir\*L/dce/src/admin/tcl7.3/Makefile\*O
.DE
...\" 
.P
files for further information about porting Tcl, including information
regarding non-Unix platforms.
...\" 
.LI
\*Vdce-root-dir\*L/dce/src/admin/tcl_dce\*O
.P
contains OSF changes to Tcl; for DCE 1.1, these include internationalization.
...\" 
...\" 
...\" 
.LE
...\" 
.P
Note that OSF has made few changes to Tcl itself.
...\" 
...\" 
...\" 
...\" ----------------------------------------------------------------------
.H 3 "Porting Considerations"
...\" ----------------------------------------------------------------------
...\" 
.P
The following sections contain information about various platform-specific
aspects of \*Ldcecp\*O.
...\" 
...\" 
...\" 
...\" ----------------------------------------------------------------------
.H 4 "Use of pthread_signal_to_cancel_np(\|) by dcecp"
...\" ----------------------------------------------------------------------
...\" 
.P
In order to handle keyboard-generated interrupt signals in a thread-safe fashion,
\*Ldcecp\*O uses the \*Lpthread_signal_to_cancel_np(\|)\*O call, which may not be
available on all systems.
...\" 
...\" 
...\" 
...\" ----------------------------------------------------------------------
.H 4 "Threadsafeness of Tcl Signal Support Routines"
...\" ----------------------------------------------------------------------
...\" 
.P
The Tcl Unix signal support routines and the signal commands, the code for
which is found in
...\" 
.DS
    \*Vdce-root-dir\*L/dce/src/admin/dcecp/util_signal.c\*O
.DE
...\" 
.P
has been made thread-safe, with the exception of putting locks around accesses
of global variables. The global variables which should be protected by locks are:
...\" 
.BL
.LI
\*LnumInterps\*O
.LI
\*LsignalsReceived\*O
.LI
\*LsignalTrapCmds\*O
.LE
...\" 
...\" 
...\" 
...\" 
...\" ----------------------------------------------------------------------
.H 4 "Unix Dependencies in Tcl"
...\" ----------------------------------------------------------------------
...\" 
.P
The following Tcl commands depend on Unix:
...\" 
.BL
.LI
\*Lcd\*O
.LI
\*Lclose\*O
.LI
\*Leof\*O
.LI
\*Lexec\*O
.LI
\*Lexit\*O
.LI
\*Lfile\*O
.LI
\*Lflush\*O
.LI
\*Lgets\*O
.LI
\*Lglob\*O
.LI
\*Lopen\*O
.LI
\*Lpid\*O
.LI
\*Lputs\*O
.LI
\*Lpwd\*O
.LI
\*Lread\*O
.LI
\*Lseek\*O
.LI
\*Lsource\*O
.LI
\*Ltell\*O
.LI
\*Ltime\*O
.LE
...\" 
...\" 
.P
See the contents of:
...\" 
.DS
    \*Vdce-root-dir\*L/dce/src/admin/tcl7.3/README\*O
.DE
...\" 
.P
and:
...\" 
.DS
    \*Vdce-root-dir\*L/dce/src/admin/tcl7.3/Makefile\*O
.DE
...\" 
.P
for details.
...\" 
...\" 
...\" 
...\" ----------------------------------------------------------------------
.H 4 "Platform Definitions and Variables"
...\" ----------------------------------------------------------------------
...\" 
.P
The following system-dependent \*Ldcecp\*O preprocessor variables exist:
...\" 
...\" 
...\" 
.BL
.LI
\*L_DCECP_TEST\*O
.P
If defined, this flag enables Tcl extensions for signal handling. These
extensions are not thread-safe, and should not be made available to users
of \*Ldcecp\*O. However, they are needed for running the functional tests.
\*L_DCECP_TEST\*O must be defined when building \*Ldcecp\*O for testing,
but should not be defined in a production environment.
...\" 
.LI
\*LSNI_SVR4_POSIX\*O
.P
The \*Lstrings.h\*O header must be included in several \*Ldcecp\*O files
when building on all but SNI SVR4 machines. The \*LSNI_SVR4_POSIX\*O macro
is used to distinguish SNI SVR4 machines. It should be defined only on that
platform.
...\" 
...\" 
.LI
\*LSNI_SVR4\*O
.P
Used only in \*Lcdscp_utils.c\*O. If it is defined, question marks appearing
in a string are escaped differently. There should be no difference in the
interface seen by the user.
...\" 
...\" 
.LI
\*LBROKEN_CMA_EXC_HANDLING\*O
.P
This is an old macro that is not set and is no longer useful. It should never
be defined. It will be removed in the next version of DCE.
...\" 
.LE
...\" 
...\" 
.P
See the
...\" 
.DS
    \*Vdce-root-dir\*L/dce/src/admin/tcl7.3/README\*O
.DE
...\" 
.P
file, and the preceding section, for system-dependent information about Tcl.
...\" 
...\" 
...\" 
...\" ----------------------------------------------------------------------
.H 3 "Building and Linking"
...\" ----------------------------------------------------------------------
...\" 
.P
The only build dependencies that \*Ldcecp\*O has on other components are in the
\*Lexport\*O tree. Consequently, before attempting to build \*Ldcecp\*O you must
run the export pass over all the other DCE components, except for DFS and GDS
(neither of which \*Ldcecp\*O depends on). The following sequence of commands
does this:
...\" 
.iS
    cd ${\*Vsandbox_base\*L}/src
    build export_all
.iE
...\" 
.P
This will put the headers and libraries that \*Ldcecp\*O depends on in the DCE
export tree.
.P
After doing this, you can rebuild \*Ldcecp\*O as many times as you want simply
by doing:
...\" 
.iS
    cd ${\*Vsandbox_base\*L}/src/admin/dcecp
    build
.iE
...\" 
...\" E.g.:  dcecp depends on cdscp.h.  It gets cdscp.h from the
...\"  export tree (which is the right thing to do), not from the
...\"  directory/cds/includes directory.
...\" 
.P
Note that you must have \*Llibdce\*O and \*Llibaudit\*O built in order to build
\*Ldcecp\*O. In particular, \*Ldcecp\*O uses the DCE serviceability interface
throughout, so you must have a DCE 1.1 library, not a DCE 1.0 library.
...\" 
...\" There are other 1.1 dependencies (for example, on the audit component), but
...\"  these are not as pervasive as the serviceability one.
...\" 
...\" 
...\" 
.P
Tcl is built under ODE (OSF Development Environment; see Chapter 12 for
information about ODE). You can type \*Lbuild\*O in
...\" 
.DS
    \*Vdce-root-dir\*L/dce/src/admin/dcecp\*O
.DE
...\" 
.P
or in:
...\" 
.DS
    \*Vdce-root-dir\*L/dce/src/admin/tcl*\*O
.DE
...\" 
.P
The \*LREADME\*O at
...\" 
.DS
    \*Vdce-root-dir\*L/dce/src/admin/tcl7.3/README\*O
.DE
...\" 
.P
explains how Tcl is built.
...\" 
...\" 
...\" 
...\" 
...\" ----------------------------------------------------------------------
.H 3 "Testing and Verification"
...\" ----------------------------------------------------------------------
...\" 
.P
The \*Ldcecp\*O functional tests are designed to run under the TET scaffold
(Test Environment Toolkit; see ``Overview of TET Use'' in Chapter 13 for
general information on TET).
.P
The \*Ldcecp\*O tests can be run in two different ways:
...\" 
.BL
.LI
Use \*Ltcc\*O to run a block of tests
.LI
Run individual test files as scripts
.LE
...\" 
.P
The second method is often helpful when you are porting and want to just run
specific tests without going through the overhead of running \*Ltcc\*O.
.P
The general format of running the tests under the TET scaffold is:
...\" 
.iS
    tcc -e functional/admin/dcecp \*Vtest_suite_name\*O
.iE
...\" 
.P
where \*Vtest_suite_name\*O is one of the following, as defined in the TET
scenario file:
...\" 
.BL
.LI
\*Lall\*O
.LI
\*Laccount\*O
.LI
\*Lacl\*O
.LI
\*Lattrlist\*O
.LI
\*Laud\*O
.LI
\*Laudevents\*O
.LI
\*Laudfilter\*O
.LI
\*Laudtrail\*O
.LI
\*Lcdsalias\*O
.LI
\*Lcdsalias_hcell\*O
.LI
\*Lclearinghouse\*O
.LI
\*Lclock\*O
.LI
\*Ldirectory\*O
.LI
\*Ldts\*O
.LI
\*Lendpoint\*O
.LI
\*Lgroup\*O
.LI
\*Lgroup_era\*O
.LI
\*Lhostdata\*O
.LI
\*Lktb\*O
.LI
\*Llink\*O
.LI
\*Llog\*O
.LI
\*Lmisc\*O
.LI
\*Lobject\*O
.LI
\*Lorg_era\*O
.LI
\*Lorganization\*O
.LI
\*Lprincipal\*O
.LI
\*Lprincipal_era\*O
.LI
\*Lregistry\*O
.LI
\*Lregistry_one\*O
.LI
\*Lrpcentry\*O
.LI
\*Lrpcgroup\*O
.LI
\*Lrpcprofile\*O
.LI
\*Lschema\*O
.LI
\*Lsecval\*O
.LI
\*Lserver\*O
.LI
\*Lutc\*O
.LE
...\" 
...\" 
.P
The \*Lall\*O \*Vtest_suite_name\*O is used to run the entire suite of
\*Ldcecp\*O tests.
.P
Most of the above suites are named for the \*Ldcecp\*O object they test.
The names whose meanings are not obvious have the following explanations:
...\" 
.VL 1.5i
.LI "\*Vobj\*L_era\*O"
Tests manipulating Extended Registry Attributes (ERAs) on \*Vobj\*O
objects.
...\" 
.LI "\*Vobj\*L_hcell\*O"
Tests the \*Lcdsalias\*O command on \*Vobj\*O objects in a hierarchical
cells environment.
...\" 
.LI "\*Lmisc\*O"
Tests miscellaneous, non-object \*Ldcecp\*O commands such as \*Llogin\*O.
...\" 
.LI "\*Lktb\*O"
Tests \*Lkeytab\*O objects.
...\" 
.LI "\*Lregistry_one\*O"
Destructive registry tests. These tests should be run individually outside
of the test suite.
...\" 
.LI "\*Lschema\*O"
Tests the \*Lxattrschema\*O object.
...\" 
.LE
...\" 
.P
Within each test suite are individual test files that are used to test
subcomponents. The list of these subcomponents is too lengthy to be
given here, but it can be found in the tests scenario file at:
...\" 
.DS
    \*Vdce-root-dir\*L/dce/src/test/functional/admin/dcecp/tet_scen\*O
.DE
...\" 
.P
Tests are divided into two groups. The first group consists of negative tests.
These are found in files with the \*L_N.tcl\*O suffix in their name; they
are designed to supply input that generates error conditions.
.P
The second group consists of positive tests. These are found in files with
the \*L_P.tcl\*O suffix in their name; they verify the functionality of
\*Ldcecp\*O commands.
.P
For more information about this file and other files used for the \*Ldcecp\*O
functional test suite, see ``Files Used By the Tests''. below.
...\" 
...\" TET has had heretofore two APIs: a C version, and a shell version; for DCE 1.1
...\" a Tcl API has been added, so that the tests can be invoked as \*Ldcecp\*O scripts.
...\" TET APIs are routines that must be called by tests to do things in TET-acceptable
...\" ways; for example (from the POSIX C API), \*Ltet_exec(\|)\*O to execute a file,
...\" \*Ltet_infoline(\|)\*O and \*Ltet_result(\|)\*O to output information to a results
...\" file, and so on. The source for all the TET APIs can be found in:
...\" 
.P
For the purpose of creating the \*Ldcecp\*O functional test suite, a Tcl API to
the TET scaffold was added to the previously existing C, Bourne shell (XPG3) and
Korn shell APIs. The TET APIs are designed to allow tests to log test information
and report results to the TET journal file. The source for all the TET APIs can be
found in:
...\" 
.DS
    \*Vdce-root-dir\*L/dce/src/test/tet/src/tcl/api\*O
    \*Vdce-root-dir\*L/dce/src/test/tet/src/posix_c/api\*O
    \*Vdce-root-dir\*L/dce/src/test/tet/src/ksh/api\*O
    \*Vdce-root-dir\*L/dce/src/test/tet/src/xpg3sh/api\*O
.DE
...\" 
.P
For more information about TET in general, see ``Overview of TET Use'' in
Chapter 13. See ``Running the Tests'', below, for details on running the
\*Ldcecp\*O tests.
...\" 
.P
See the ``Platform Definitions and Variables'' section earlier in this chapter
for information on the \*L_DCECP_TEST\*O preprocessor variable, which must be
defined when building \*Ldcecp\*O for functional testing.
...\" 
...\" 
...\" 
...\" ----------------------------------------------------------------------
.H 4 "Building the Tests"
...\" ----------------------------------------------------------------------
...\" 
...\" 
The current source location of the \*Ldcecp\*O functional tests is:
...\" 
.DS
    \*Vdce-root-dir\*L/dce/src/tests/functional/admin/dcecp\*O
.DE
...\" 
.P
In order to run any of the \*Ldcecp\*O functional tests, you must first build
and install all the files in the following directories:
...\" 
.DS
    \*Vdce-root-dir\*L/dce/src/test/functional/admin/dcecp\*O
    \*Vdce-root-dir\*L/dce/src/test/functional/admin/dcecp/lib\*O
    \*Vdce-root-dir\*L/dce/src/test/tet/src/posix_c\*O
    \*Vdce-root-dir\*L/dce/src/test/tet/src/tcl/api\*O
    \*Vdce-root-dir\*L/dce/src/test/tools\*O
.DE
...\" 
.P
The tests themselves are found in:
...\" 
.DS
    \*Vdce-root-dir\*L/dce/src/test/functional/admin/dcecp/ts/*\*O
.DE
...\" 
.P
These may be installed by subcomponent or as a whole.
.P
To build and install the entire \*Ldcecp\*O test suite (without the required
TET and tools directories) under ODE, do the following:
...\" 
.iS
    cd dce-root-dir/dce/src/test/functional/admin/dcecp
    build
    build install_all
.iE
...\" 
.P
(ODE is the OSF Development Environment; for more information on it, see
Chapter 12.)
...\" 
...\" 
...\" 
...\" 
...\" 
...\" ----------------------------------------------------------------------
.H 4 "Running the Tests"
...\" ----------------------------------------------------------------------
...\" 
...\"                                             Please mention that the
...\" tests must be run as an ordinary user. This is because some tests verify
...\" functional running unauthenticated. When the user is logged in a root,
...\" this automatically acquires authentication, so root is out too.
...\" 
.nS "Note"
The \*Ldcecp\*O functional tests should be run under an ordinary user login,
\*Vnot\*O as root or any other extraordinary identity. This is because some
of the tests verify functionality running unauthenticated, and invoking the
tests under an ordinary login is the only way to make sure that authentication
does not occur when it is not supposed to.
.nE
...\" 
...\" 
.P
There are two methods for running the \*Ldcecp\*O functional tests. The first
is the standard approach. After installing the tests, do the following:
...\" 
.iS
    cd \*Vdce-root-dir\*L/dce/install/\*Vplatform\*L/dcetest/dce1.1/test/tet
    setenv TET_ROOT `pwd`
    setenv PATH $TET_ROOT:$PATH
    tcc -e functional/admin/dcecp \*Vtest_suite_name\*O
.iE
...\" 
.P
where \*Vtest_suite_name\*O is one of the test suites listed in the TET scenario
file. (See ``Testing and Verification'', above, for a list of valid test suite
names.)
.P
The second method for running tests can be helpful during the development and
debugging process. The individual script files found in:
...\" 
.DS
    \*L$TET_ROOT/functional/admin/dcecp/ts/*\*O
.DE
...\" 
.P
can be run by hand. To do this, set the \*LTET_CONFIG\*O environment variable to
the location of the \*Ltetexec.cfg\*O file, as follows:
...\" 
.iS
    setenv TET_CONFIG $TET_ROOT/functional/admin/dcecp/tetexec.cfg
.iE
...\" 
.P
Prior to running the tests, the \*Ltetexec.cfg\*O file must be modified to
reflect your local configuration.
.P
This file defines variables that are used throughout the tests. There
are only a few variables that need to be changed. The following list
shows the variables that you will need to modify, and what their values
should be changed to (example values are given in parentheses):
...\" 
.VL 2i
.LI "\*LDCP_CLIENT\*O"
The principal name of the cell administrator (\*Lcell_admin\*O).
...\" 
.LI "\*LDCP_CLIENT_PW\*O"
The password for \*LDCP_CLIENT\*O.
...\" 
.LI "\*LDCP_CELLNAME_ONE\*O"
The name of the cell you are in. (\*L/.../name.foo.com\*O).
...\" 
.LI "\*LDCP_CELLNAME_TWO\*O"
The name of the cell used for intercell tests (\*L/.../name.foo.com\*O).
...\" 
.LI "\*LDCP_HOSTNAME_ONE\*O"
The simple name of the host you are on (\*Lfamagusta\*O).
...\" 
.LI "\*LDCP_HOSTNAME_TWO\*O"
The simple name of another host in your cell (\*Lmurgatroyd\*O).
...\" 
.LI "\*LDCP_ROOT_CH\*O"
The name of the clearinghouse that contains the master copy of the root
directory (\*Lmachine_ch\*O).
...\" 
.LI "\*LDCP_INTERCELL_AVAIL\*O"
Do you want to run the intercell tests? (\*L0\*O or \*L1\*O).
...\" 
.LI "\*LDCP_SR_IP_ADDR\*O"
The IP address of the machine that you are running the tests on.
...\" 
.LI "\*LDCP_SR_STR_BINDING\*O"
A protocol sequence followed by the above IP address. Separated by a
colon ``\*L:\*O''. (\*Lncacn_ip_tcp:127.0.0.1\*O).
...\" 
.LE
...\" 
.P
After you have changed the above variables' values as appropriate, \*Lcd\*O
to the directory that contains the \*Ldcecp\*O functional test that you wish
to run. For example:
...\" 
.iS
    cd $TET_ROOT/functional/admin/dcecp/ts/dts
.iE
...\" 
.P
You may now execute the test script by hand:
...\" 
.iS
    dts_modify_P.tcl
.iE
...\" 
.P
After the test completes, the results will be left in the file \*Ltet_xres\*O in
the current directory. Note that each test file invocation will overwrite this file,
so you should either view or save its contents, as desired, after each test run.
...\" 
...\" **The rest of the section, starting with "Note that the above..." looks
...\" great.
...\" 
...\" 
.P
Note that the above sequence of commands assumes that the tests have been installed
in their default location (by ODE) and that you wish to run them from that location.
However, the
...\" 
.DS
    \*Vdce-root-dir\*L/dce/install/\*Vplatform\*L/dcetest/dce1.1\*O
.DE
...\" 
.P
test tree is self-contained (insofar as the tests and TET are concerned), and
can be copied to any other preferred location on your system, and executed from
there. If you do this, the first step given above becomes the following three
steps:
...\" 
.iS
    cd \*Vdce-root-dir\*L/dce/install/\*Vplatform\*L/dcetest
    cp -r dce1.1 \*Vyour_test_tree\*L
    cd \*Vyour_test_tree\*L
.iE
...\" 
...\" 
.P
If you execute the tests from their default installed location, test results
will be found at:
...\" 
...\" 
.DS
\s-1
  \*Vdce-root-dir\*L/dce/install/\*Vplatform\*L/dcetest/dce1.1/test/tet/functional/admin/dcecp/results/\*Vpass_nr\*L/journal\*O
\s+1
.DE
...\" 
.P
where \*Vpass_nr\*O is the number of the test iteration whose results are being
written. The \*Lresults\*O subdirectory is created by TET in the subdirectory
specified by \*L-e\*O to the \*Ltcc\*O command, as shown above. For further
information about TET output, see ``Overview of TET Use'' in Chapter 13.
...\" 
.P
For information on how to run specific tests within a suite, see the following
section.
...\" 
...\" 
...\" 
...\" ----------------------------------------------------------------------
.H 4 "Special Requirements for Running the Tests"
...\" ----------------------------------------------------------------------
...\" 
.P
All of the \*Ldcecp\*O tests must be run in a fully functioning DCE cell with
the following specific characteristics:
...\" 
.BL
.LI
There must be a \*Ldced\*O running on the current host.
.LI
A security master and a CDS server must be running in the cell.
.LI
The appropriate helper programs (such as a CDS advertiser (\*Lcdsadv\*O) and
a CDS clerk (\*Lcdsclerk\*O)) must be running on the host on which the tests
are run.
.LE
...\" 
.P
In addition, the following \*Ldcecp\*O tests have the following special
requirements:
...\" 
.BL
.LI
\*Lclearinghouse\*O and \*Ldirectory\*O tests
.P
These tests must be run on a machine that is running a CDS server.
...\" 
.LI
\*Ldts\*O and \*Lacl\*O tests
.P
These tests must be run on a machine that is running a DTS server.
...\" 
.LI
\*Laudit\*O tests
.P
These tests must be run on a machine that is running an audit daemon,
which must be started with the \*L-a\*O option.
...\" 
.LI
\*Lregistry\*O tests
.P
These tests must be run in a cell that has a security replica.
...\" 
.LI
\*Lregistry_one\*O tests
.P
Must be run on a machine on which a security replica is running. In addition,
the tests must be run one at a time, and the security state of the cell has
to be restored between each run.
...\" 
.LE
...\" 
...\" 
...\" 
...\" 
...\" ----------------------------------------------------------------------
.H 4 "Files Used By the Tests"
...\" ----------------------------------------------------------------------
...\" 
.P
The following files are used by TET when invoked to run \*Ldcecp\*O functional
tests:
...\" 
...\" 
.BL
.LI
The TET configuration file
...\" 
.DS
    \*Vdce-root-dir\*L/dce/src/test/admin/dcecp/tetexec.cfg\*O
.DE
...\" 
.P
is where global variables should be defined for all \*Ldcecp\*O tests.
...\" 
...\" 
.LI
The TET scenario file
...\" 
.DS
    \*Vdce-root-dir\*L/dce/src/test/admin/dcecp/tet_scen\*O
.DE
...\" 
.P
is where TET gets the list of tests it must run for a specific test component.
...\" 
...\" For example:
...\"   acl
...\"   dts
...\"   cds
...\" 
If you wish to run a specific test within a component, you must change the
contents of the TET scenario file. For example, to run specific ``negative ACL modify''
tests, you should edit the following section in the scenario file:
...\" 
.oS
        "Starting negative ACL MODIFY tests"
        /ts/acl/acl_modify_N.tcl
.oE
...\" 
.P
so that it reads:
...\" 
.oS
        "Starting negative ACL MODIFY tests"
        /ts/acl/acl_modify_N.tcl{28-30}
.oE
...\" 
.P
or:
...\" 
.oS
        "Starting negative ACL MODIFY tests"
        /ts/acl/acl_modify_N.tcl{28,29,30}
.oE
...\" 
.P
Either version will result in only tests 28, 29, and 30 in the negative
ACL modify suite to be executed when the ACL test suite is run by invoking
TET as follows:
...\" 
.iS
    tcc -e admin/dcecp acl
.iE
...\" 
...\" 
.LE
...\" 
...\" 
...\" ----------------------------------------------------------------------
.H 4 "Tcl Tests"
...\" ----------------------------------------------------------------------
...\" 
.P
The
...\" 
.DS
    \*Vdce-root-dir\*L/dce/src/test/admin/tcl_dce\*O
.DE
...\" 
.P
subdirectory contains a set of validation tests for the Tcl commands. See the
\*LREADME\*O file located in this directory for instructions on how to build
and run these tests.
...\" 
...\" 
...\" 
...\" ----------------------------------------------------------------------
.H 4 "Hand Tests for dcecp registry set Functionality"
...\" ----------------------------------------------------------------------
...\" 
.P
\*Ldcecp\*O contains support for several \*Lsec_admin\*O commands, as follows:
...\" 
...\" 
...\" 
.TB
...\" 
.TS H
expand tab (@) box;
cB | cB
l | l.
New dcecp Command@Equivalent sec_admin Command
_
.TH
_
registry set <replica_name>@change_master -to <replica_name>
_
registry set <replica_name> -slave@become -slave
_
registry set <replica_name> -master@become -master 
...\" 
.TE
...\" 
...\" 
.P
This section contains procedures for hand testing this \*Ldcecp\*O functionality.
...\" 
.P
To execute the test procedures successfully, the tester must first set up
a master and at least one slave replica, as follows:
...\" 
.oS
    dcecp> \*Lregistry cat\*C
    /.../\*Vcellname\*C/subsys/dce/sec/spartacus
    /.../\*Vcellname\*C/subsys/dce/sec/caesar
.oE
...\" 
.P
where, in the example given here, \*Lspartacus\*O is the name of a slave machine
in \*Vcellname\*O before the tests are performed, and \*Lcaesar\*O is the name of
the master machine in the same cell.
...\" 
...\" 
.VL .5i
...\" 
.LI "Test\ 1:"
Bind to master and change master to slave.
.LE
...\" 
.P
The test is performed as follows:
...\" 
...\" 
.oS
    dcecp> \*Lregistry set subsys/dce/sec/spartacus
.oE
...\" 
.P
You should now be able to execute the \*Lregistry dump\*O command and get
results similar to the following:
...\" 
...\" 
.oS
    dcecp> \*Lregistry dump\*C
    {name /.../\*Vcellname\*C/subsys/dce/sec/caesar
    {type slave}
    {cell /.../\*Vcellname\*C}
    {uuid 08c199b6-b836-11cd-94b4-0800092734a4}
    {status enabled}
    {lastupdtime 1994-08-22-13:54:07.000-04:00I-----}
    {lastupdseq 0.1100}
    {addresses {ncacn_ip_tcp \*Vnnn\*L.\*Vnnn\*L.\*Vn\*L.\*Vnnn\*C}
               {ncadg_ip_udp \*Vnnn\*L.\*Vnnn\*L.\*Vn\*L.\*Vnnn\*C}}
    {masteraddrs {ncacn_ip_tcp \*Vnnn\*L.\*Vnnn\*L.\*Vn\*L.\*Vnnn\*C}
                 {ncadg_ip_udp \*Vnnn\*L.\*Vnnn\*L.\*Vn\*L.\*Vnnn\*C}}
    {masterseqnum 0.1101}
    {masteruuid 2e7ac32b-b846-11cd-a8cf-0000c0239a70}
    {version secd.dce.1.1}

    {name /.../\*Vcellname\*C/subsys/dce/sec/spartacus}
    {type master}
    {cell /.../\*Vcellname\*C}
    {uuid 2e7ac32b-b846-11cd-a8cf-0000c0239a70}
    {status enabled}
    {lastupdtime 1994-08-22-14:10:25.000-04:00I-----}
    {lastupdseq 0.1101}
    {addresses {ncacn_ip_tcp \*Vnnn\*L.\*Vnnn\*L.\*Vn\*L.\*Vnnn\*C}
               {ncadg_ip_udp \*Vnnn\*L.\*Vnnn\*L.\*Vn\*L.\*Vnnn\*C}}
    {masteraddrs {ncacn_ip_tcp \*Vnnn\*L.\*Vnnn\*L.\*Vn\*L.\*Vnnn\*C}
                 {ncadg_ip_udp \*Vnnn\*L.\*Vnnn\*L.\*Vn\*L.\*Vnnn\*C}}
    {masterseqnum 0.1101}
    {masteruuid 2e7ac32b-b846-11cd-a8cf-0000c0239a70}
    {version secd.dce.1.1}
    {updseqqueue {0.1099 0.1101}}
.oE
...\" 
...\" 
...\" 
...\" 
...\" 
...\" 
.VL .5i
.LI "Test\ 2:"
Change replica to a slave replica.
.LE
...\" 
.P
The test is performed as follows:
...\" 
...\" 
.oS
    dcecp> registry set subsys/dce/sec/caesar -slave
.oE
...\" 
.P
You should now be able to execute the \*Lregistry dump\*O command and get
results similar to the following:
...\" 
.oS
    dcecp> registry dump
    {name /.../\*Vcellname\*C/subsys/dce/sec/spartacus}
    {type slave}
    {cell /.../\*Vcellname\*C}
    {uuid 2e7ac32b-b846-11cd-a8cf-0000c0239a70}
    {status enabled}
    {lastupdtime 1994-08-22-12:26:39.000-04:00I-----}
    {lastupdseq 0.1091}
    {addresses {ncacn_ip_tcp \*Vnnn\*L.\*Vnnn\*L.\*Vn\*L.\*Vnnn\*C}
               {ncadg_ip_udp \*Vnnn\*L.\*Vnnn\*L.\*Vn\*L.\*Vnnn\*C}}
    {masteraddrs {ncacn_ip_tcp \*Vnnn\*L.\*Vnnn\*L.\*Vn\*L.\*Vnnn\*C}
                 {ncadg_ip_udp \*Vnnn\*L.\*Vnnn\*L.\*Vn\*L.\*Vnnn\*C}}
    {masterseqnum 0.1091}
    {masteruuid 08c199b6-b836-11cd-94b4-0800092734a4}
    {version secd.dce.1.1}

    {name /.../\*Vcellname\*C/subsys/dce/sec/caesar}
    {type slave}
    {cell /.../\*Vcellname\*C}
    {uuid 08c199b6-b836-11cd-94b4-0800092734a4}
    {status enabled}
    {lastupdtime 1994-08-22-12:26:39.000-04:00I-----}
    {lastupdseq 0.1091}
    {addresses {ncacn_ip_tcp \*Vnnn\*L.\*Vnnn\*L.\*Vn\*L.\*Vnnn\*C}
               {ncadg_ip_udp \*Vnnn\*L.\*Vnnn\*L.\*Vn\*L.\*Vnnn\*C}}
    {masteraddrs unknown}
    {version secd.dce.1.1}
.oE
...\" 
...\" 
...\" 
...\" 
.VL .5i
.LI "Test\ 3:"
Change replica to a master replica.
.LE
...\" 
.P
The test is performed as follows:
...\" 
...\" 
.oS
    dcecp> registry set subsys/dce/sec/spartacus -master
.oE
...\" 
.P
You should now be able to execute the \*Lregistry dump\*O command and get
results similar to the following:
...\" 
.oS
    dcecp> registry dump
    {name /.../\*Vcellname\*C/subsys/dce/sec/spartacus}
    {type master}
    {cell /.../\*Vcellname\*C}
    {uuid 2e7ac32b-b846-11cd-a8cf-0000c0239a70}
    {status enabled}
    {lastupdtime 1994-08-22-14:26:45.000-04:00I-----}
    {lastupdseq 0.1104}
    {addresses {ncacn_ip_tcp \*Vnnn\*L.\*Vnnn\*L.\*Vn\*L.\*Vnnn\*C}
               {ncadg_ip_udp \*Vnnn\*L.\*Vnnn\*L.\*Vn\*L.\*Vnnn\*C}}
    {masteraddrs {ncacn_ip_tcp \*Vnnn\*L.\*Vnnn\*L.\*Vn\*L.\*Vnnn\*C}
                 {ncadg_ip_udp \*Vnnn\*L.\*Vnnn\*L.\*Vn\*L.\*Vnnn\*C}}
    {masterseqnum 0.1104}
    {masteruuid 2e7ac32b-b846-11cd-a8cf-0000c0239a70}
    {version secd.dce.1.1}
    {updseqqueue {0.1103 0.1104}}

    {name /.../\*Vcellname\*C/subsys/dce/sec/caesar}
    {type slave}
    {cell /.../\*Vcellname\*C}
    {uuid 08c199b6-b836-11cd-94b4-0800092734a4}
    {status enabled}
    {lastupdtime 1994-08-22-14:26:45.000-04:00I-----}
    {lastupdseq 0.1104}
    {addresses {ncacn_ip_tcp \*Vnnn\*L.\*Vnnn\*L.\*Vn\*L.\*Vnnn\*C}
               {ncadg_ip_udp \*Vnnn\*L.\*Vnnn\*L.\*Vn\*L.\*Vnnn\*C}}
    {masteraddrs {ncacn_ip_tcp \*Vnnn\*L.\*Vnnn\*L.\*Vn\*L.\*Vnnn\*C}
                 {ncadg_ip_udp \*Vnnn\*L.\*Vnnn\*L.\*Vn\*L.\*Vnnn\*C}}
    {masterseqnum 0.1104}
    {masteruuid 2e7ac32b-b846-11cd-a8cf-0000c0239a70}
    {version secd.dce.1.1}
.oE
...\" 
...\" 
...\" 
...\" 
...\" 
...\" ----------------------------------------------------------------------
...\" .H 3 "dcecp Runtime Output and Debugging Output"
...\" ----------------------------------------------------------------------
...\" 
...\" .P
...\" The \*Ldcecp\*O program outputs server information of all kinds via the DCE
...\" serviceability component. The following sections describe how to control the
...\" various kinds of information (including debugging output) available from \*Ldcecp\*O
...\" via serviceability.
...\" 
...\" 
...\" 
...\" 
...\" ----------------------------------------------------------------------
...\" .H 4 "Normal dcecp Server Message Routing"
...\" ----------------------------------------------------------------------
...\" 
...\" .P
...\" There are basically two ways to control normal \*Ldcecp\*O server message routing:
...\" 
...\" .BL
...\" .LI
...\" At startup, through the contents of a routing file (which are applied to
...\" all components that use serviceability messaging).
...\" .LI
...\" Dynamically, through the \*Ldcecp log\*O object.
...\" .LE
...\" 
...\" 
...\" .P
...\" The following sections describe each of these methods.
...\" 
...\" 
...\" 
...\" ----------------------------------------------------------------------
...\" .H 5 "Routing File"
...\" ----------------------------------------------------------------------
...\" 
...\" .P
...\" If a file called
...\" 
...\" .DS
...\"     \*Vdce-local-path\*L/svc/routing\*O
...\" .DE
...\" 
...\" .P
...\" exists when \*Ldcecp\*O is brought up, the contents of the file (if in
...\" the proper format) will be used as to determine the routing of \*Ldcecp\*O
...\" serviceability messages.
...\" .P
...\" The value of \*Vdce-local-path\*O depends on the values of two \*Lmake\*O
...\" variables when DCE is built:
...\" 
...\" 
...\" 
...\" .VL 1i
...\" .LI "\*LDCEROOT\*O"
...\" its default value is: \*L/opt\*O
...\" 
...\" .LI "\*LDCELOCAL\*O"
...\" its default value is: \*L$DCEROOT/dcelocal\*O
...\" 
...\" .LE
...\" 
...\" .P
...\" Thus, the default location of the serviceability routing file is normally:
...\" 
...\" .DS
...\"     \*L/opt/dcelocal/svc/routing\*O
...\" .DE
...\" 
...\" .P
...\" However, a different location for the file can be specified by setting the
...\" value of the environment variable \*LDCE_SVC_ROUTING_FILE\*O to the complete
...\" desired pathname.
...\" 
...\" .P
...\" The contents of the routing file consist of formatted strings specifying
...\" the routing desired for the various kinds of messages (based on message
...\" severity). Each string consists of three fields as follows:
...\" 
...\" .DS
...\"     \*Vseverity\*L:\*Voutput_form\*L:\*Vdestination\*O\ [\*Voutput_form\*L:\*Vdestination\*O .\ .\ .\ ]
...\" .DE
...\" 
...\" .P
...\" Where:
...\" 
...\" .VL 1i
...\" .LI "\*Vseverity\*O"
...\" specifies the severity level of the message, and must be one of the following:
...\" .BL
...\" .LI
...\" \*LFATAL\*O
...\" Fatal error, about to exit
...\" .LI
...\" \*LERROR\*O
...\" Normal exit
...\" .LI
...\" \*LWARNING\*O
...\" Error detected, program proceeding
...\" .LI
...\" \*LNOTICE\*O
...\" Informational notice
...\" .LI
...\" \*LNOTICE_VERBOSE\*O
...\" Verbose informational notice
...\" .LE
...\" 
...\" .P
...\" (The meanings of these severity levels are explained in detail in Chapter 4 of
...\" the \*VOSF DCE Application Development Guide \(em Core Components\*O volume,
...\" in the section entitled ``Specifying Message Severity''.)
...\" 
...\" 
...\" 
...\" .LI "\*Voutput_form\*O
...\" specifies how the messages of a given severity level should be processed, and
...\" must be one of the following:
...\" .BL
...\" .LI
...\" \*LBINFILE\*O
...\" .P
...\" Write these messages as binary log entries
...\" .LI
...\" \*LTEXTFILE\*O
...\" .P
...\" Write these messages as human-readable text
...\" .LI
...\" \*LFILE\*O
...\" .P
...\" Equivalent to \*LTEXTFILE\*O
...\" .LI
...\" \*LDISCARD\*O
...\" .P
...\" Do not record messages of this severity level
...\" .LI
...\" \*LSTDOUT\*O
...\" .P
...\" Write these messages as human-readable text to standard output
...\" .LI
...\" \*LSTDERR\*O
...\" .P
...\" Write these messages as human-readable text to standard error
...\" .LE
...\" 
...\" .P
...\" Files written as \*LBINFILE\*Os can be read and manipulated with a set of
...\" logfile functions. See Chapter 4 of the \*VOSF DCE Application Development
...\" Guide \(em Core Components\*O volume, mentioned above, for further information.
...\" .P
...\" The \*Voutput_form\*O specifier may be followed by a two-number specifier of the form:
...\" 
...\" .DS
...\"     \*L.\*Vgens\*L.\*Vcount\*O
...\" .DE
...\" 
...\" .P
...\" Where:
...\" 
...\" .VL .5i
...\" .LI "\*Vgens\*O"
...\" is an integer that specifies the number of files (i.e., generations) that
...\" should be kept
...\" .LI "\*Vcount\*O"
...\" is an integer specifying how many entries (i.e., messages) should be
...\" written to each file
...\" .LE
...\" 
...\" .P
...\" The multiple files are named by appending a dot to the simple specified
...\" name, followed by the current generation number. When the number of entries
...\" in a file reaches the maximum specified by \*Vcount\*O, the file is closed,
...\" the generation number is incremented, and the next file is opened. When the
...\" maximum generation number files have been created and filled, the generation
...\" number is reset to 1, and a new file with that number is created and written
...\" to (thus overwriting the already-existing file with the same name), and so
...\" on, as long as messages are being written. Thus the files wrap around to their
...\" beginning, and the total number of log files never exceeds \*Vgens\*O, although
...\" messages continue to be written as long as the program continues writing them.
...\" 
...\" 
...\" 
...\" 
...\" .LI "\*Vdestination\*O
...\" specifies where the message should be sent, and is a pathname. The field
...\" can be left blank if the \*Voutput_form\*O specified is \*LDISCARD\*O,
...\" \*LSTDOUT\*O, or \*LSTDERR\*O. The field can also contain a \*L%ld\*O
...\" string in the filename which, when the file is written, will be replaced
...\" by the process ID of the program that wrote the message(s). Filenames may
...\" \*Vnot\*O contain colons or periods.
...\" 
...\" 
...\" .LE
...\" 
...\" 
...\" .P
...\" Multiple routings for the same severity level can be specified by simply
...\" adding the additional desired routings as space-separated
...\" 
...\" .DS
...\"     \*Voutput_form\*L:\*Vdestination\*O
...\" .DE
...\" 
...\" .P
...\" strings.
...\" 
...\" .P
...\" For example, 
...\" 
...\" .oS
...\"     FATAL:TEXTFILE:/dev/console
...\"     WARNING:DISCARD:--
...\"     NOTICE:BINFILE.50.100:/tmp/log%ld STDERR:-
...\" .oE
...\" 
...\" .P
...\" Specifies that:
...\" 
...\" .BL
...\" .LI
...\" Fatal error messages should be sent to the console.
...\" .LI
...\" Warnings should be discarded.
...\" .LI
...\" Notices should be written both to standard error and as binary entries in files
...\" located in the \*L/tmp\*O directory. No more than 50 files should be written, and
...\" there should be no more than 100 messages written to each file. The files will have
...\" names of the form:
...\" 
...\" .DS
...\"     \*L/tmp/log\*Vprocess_id\*L.\*Vnn\*O
...\" .DE
...\" 
...\" .P
...\" where \*Vprocess_id\*O is the process ID of the program originating the messages,
...\" and \*Vnn\*O is the generation number of the file.
...\" 
...\" 
...\" .LE
...\" 
...\" 
...\" 
...\" ----------------------------------------------------------------------
...\" .H 5 "Routing by the dcecp log Object"
...\" ----------------------------------------------------------------------
...\" 
...\" .P
...\" Routing of an already-started \*Ldcecp\*O's server messages can be controlled
...\" through the \*Ldcecp log\*O object. See the \*Llog.8dce\*O reference page in the
...\" \*VOSF DCE Command Reference\*O for further information.
...\" 
...\" 
...\" 
...\" ----------------------------------------------------------------------
...\" .H 4 "Debugging Output"
...\" ----------------------------------------------------------------------
...\" 
...\" .P
...\" Debugging output from \*Ldcecp\*O can be enabled (provided that \*Ldcecp\*O has
...\" been built with \*LDCE_DEBUG\*O defined) by specifying the desired debug messaging
...\" level and route(s) in the
...\" 
...\" .DS
...\"     \*Vdce-local-path\*L/svc/routing\*O
...\" .DE
...\" 
...\" .P
...\" routing file (described above), or by specifying the same information in the
...\" \*LSVC_DCP_DBG\*O environment variable, before bringing up \*Ldcecp\*O. Debugging
...\" output can also be enabled and controlled through the \*Ldcecp log\*O object.
...\" .P
...\" Note that, unlike normal message routing, debugging output is always specified
...\" on the basis of DCE component/sub-component (the meaning of ``sub-component''
...\" will be explained below) and desired level.
...\" .P
...\" The debug routing and level instructions for a component are specified by the
...\" contents of a specially-formatted string that is either included in the value
...\" of the environment variable or is part of the contents of the routing file.
...\" .P
...\" The general format for the debug routing specifier string is:
...\" 
...\" .DS
...\" \s-1
...\"     "\*Vcomponent\*L:\*Vsub_comp\*L.\*Vlevel\*L,\*V.\ .\ .\*L:\*Voutput_form\*L:\*Vdestination\*O \\
...\"     [\*Voutput_form\*L:\*Vdestination\*O .\ .\ .\ ] "
...\" \s+1
...\" .DE
...\" 
...\" .P
...\" where the fields have the same meanings as in the normal routing specifiers
...\" described above, with the addition of the following:
...\" 
...\" 
...\" 
...\" .VL 1i
...\" .LI "\*Vcomponent\*O"
...\" specifies the component name
...\" 
...\" .LI "\*Vsub_comp\*L.\*Vlevel\*O"
...\" specifies a subcomponent name, followed (after a dot) by a debug level
...\" (expressed as a single digit from 1 to 9). Note that multiple
...\" subcomponent/level pairs can be specified in the string.
...\" .P
...\" A star (``\*L*\*O'') can be used to specify all sub-components. The sub-component
...\" list is parsed in order, with later entries supplementing earlier ones; so the
...\" global specifier can be used to set the basic level for all sub-components, and
...\" specific sub-component exceptions with different levels can follow (see the example
...\" below).
...\" 
...\" .LE
...\" 
...\" 
...\" .P
...\" ``Sub-components'' denote the various functional modules into which a component has
...\" been divided for serviceability messaging purposes. For \*Ldcecp\*O, the sub-components
...\" are as follows:
...\" 
...\" 
...\" 
...\" .VL 2.5i
...\" .LI "\*Ldcp_svc_options\*O"
...\" Serviceability messages dealing with options handling
...\" 
...\" .LI "\*Ldcp_svc_general\*O"
...\" General serviceability messages
...\" 
...\" .LI "\*Ldcp_svc_acl\*O"
...\" DCE Control Program ACL Messages
...\" 
...\" .LI "\*Ldcp_svc_aud\*O"
...\" DCE Control Program aud sub-component messages
...\" 
...\" .LI "\*Ldcp_svc_cds\*O"
...\" DCE Control Program cdscp messages
...\" 
...\" .LI "\*Ldcp_svc_clock\*O"
...\" DCE Control Program clock messages
...\" 
...\" .LI "\*Ldcp_svc_dhd\*O"
...\" DCE Control Program dced (dhd) sub-component messages
...\" 
...\" .LI "\*Ldcp_svc_dts\*O"
...\" DCE Control Program dts messages
...\" 
...\" .LI "\*Ldcp_svc_hd\*O"
...\" DCE Control Program hostdata sub-component messages
...\" 
...\" .LI "\*Ldcp_svc_kt\*O"
...\" DCE Control Program keytab sub-component messages
...\" 
...\" .LI "\*Ldcp_svc_log\*O"
...\" DCE Control Program LOG Messages
...\" 
...\" .LI "\*Ldcp_svc_misc\*O"
...\" DCE Control Program miscellaneous messages
...\" 
...\" .LI "\*Ldcp_svc_util\*O"
...\" Dcecp internal utility messages
...\" 
...\" .LI "\*Ldcp_svc_rgy\*O"
...\" DCE rgy_edit control  messages
...\" 
...\" .LI "\*Ldcp_svc_rpc\*O"
...\" DCE Control Program rpccp messages
...\" 
...\" .LI "\*Ldcp_svc_sr\*O"
...\" DCE Control Program server sub-component messages
...\" 
...\" .LI "\*Ldcp_svc_sv\*O"
...\" DCE Control Program secval sub-component messages
...\" 
...\" .LE
...\" 
...\" 
...\" 
...\" 
...\" 
...\" .P
...\" For example, the string
...\" 
...\" .DS
...\"     "dcp:*.1,dcp_svc_util.3:TEXTFILE.50.200:/tmp/dcecp_LOG
...\" .DE
...\" 
...\" .P
...\" sets the debugging level for all \*Ldcecp\*O sub-components (\*Vexcept\*O
...\" \*Ldcp_svc_util\*O) at 1; \*Ldcp_svc_util\*O's level is set
...\" at 3. All messages are routed to \*L/tmp/dcecp_LOG\*O. No more than
...\" 50 log files are to be written, and no more than 200 messages are
...\" to be written to each file.
...\" .P
...\" The texts of all the \*Ldcecp\*O serviceability messages, and the sub-component
...\" list, can be found in the \*Ldcecp\*O sams file, at:
...\" 
...\" .DS
...\"     \*Vdce-root-dir\*L/dce/src/admin/dcecp/dcecp.sams\*O
...\" .DE
...\" 
...\" .P
...\" For further information about the serviceability mechanism and API, see Chapter 4
...\" of the \*VOSF DCE Application Development Guide \(em Core Components\*O volume,
...\" ``Using the DCE Serviceability Application Interface''.
...\" 
...\" 
...\" 
...\" 
...\" 
...\" ----------------------------------------------------------------------
.H 2 "dced"
...\" ----------------------------------------------------------------------
...\" 
.P
This and the following sections contain porting and testing information
about \*Ldced\*O, the DCE Host Daemon, which replaces for DCE 1.1 the RPC
daemon (\*Lrpcd\*O) and \*Lsec_clientd\*O.
.P
Source code for \*Ldced\*O (both the server itself and its programming interface)
is located in the following subdirectories:
...\" 
...\" 
.DS
    \*Vdce-root-dir\*L/dce/src/admin/dced/api\*O
    \*Vdce-root-dir\*L/dce/src/admin/dced/idl\*O
    \*Vdce-root-dir\*L/dce/src/admin/dced/server\*O
.DE
...\" 
...\" 
.P
The following tables describe the contents of these subdirectories.
...\" 
...\" 
.sp 2
...\" 
...\" 
.nf
.TB "Locations of dced API Source Files"
...\" .ad l
.TS H
expand tab (@) box;
lB | lB | lB
lB | lB | lB
lB | l | lB.
@@ Source
Filename @ Description @ Pathname
_
.TH
_
 Makefile @T{

T}@ src/admin/dced/api/Makefile
_
 dce_server_sec.c@T{
 API server setup routines 
T}@ src/admin/dced/api/dce_server_sec.c
_
 dced.h@T{
 API include file 
T}@ src/admin/dced/api/dced.h
_
 dced_binding.c@T{
 dced API binding routines 
T}@ src/admin/dced/api/dced_binding.c
_
 dced_common.c@T{
 dced API common routines 
T}@ src/admin/dced/api/dced_common.c
_
 dced_convert.acf@T{
 data conversion ACF file 
T}@ src/admin/dced/api/dced_convert.acf
_
 dced_data.c@T{
 dced global data routines, client and server 
T}@ src/admin/dced/api/dced_data.c
_
 dced_data.h@T{
 declarations for dced global data, client and server 
T}@ src/admin/dced/api/dced_data.h
_
 dced_hostdata.c@T{
 dced hostdata routines 
T}@ src/admin/dced/api/dced_hostdata.c
_
 dced_rkeytab.c@T{
 dced rkeytab routines 
T}@ src/admin/dced/api/dced_rkeytab.c
_
 dced_secval.c@T{
 dced secval routines 
T}@ src/admin/dced/api/dced_secval.c
_
 dced_server.c@T{
 dced srvrconf and srvrexec routines 
T}@ src/admin/dced/api/dced_server.c
_
 dced_util.c@T{
 dced convenience utility routines 
T}@ src/admin/dced/api/dced_util.c
_
 dced_util.h@T{
 data declarations for dced convenience utility routines 
T}@ src/admin/dced/api/dced_util.h
_
 dced_util_p.c@T{
 dced API internal routines 
T}@ src/admin/dced/api/dced_util_p.c
_
 dcedimpl.h@T{
 dced API implementation declarations 
T}@ src/admin/dced/api/dcedimpl.h
_
 hostdata.acf@T{
 hostdata ACF file 
T}@ src/admin/dced/api/hostdata.acf
_
 kmlocal.c@T{
 key management operations 
T}@ src/admin/dced/api/kmlocal.c
_
 register.c@T{
 server registration routines 
T}@ src/admin/dced/api/register.c
_
 rkeytab.acf@T{
 rkeytab ACF file 
T}@ src/admin/dced/api/rkeytab.acf
_
 secval.acf@T{
 secval ACF file 
T}@ src/admin/dced/api/secval.acf
_
 server.c@T{
 dce_server routines 
T}@ src/admin/dced/api/server.c
_
 srvrconf.acf@T{
 server configuration ACF file 
T}@ src/admin/dced/api/srvrconf.acf
_
 srvrexec.acf@T{
 server_exec ACF file 
T}@ src/admin/dced/api/srvrexec.acf
.TE
...\" 
.fi
...\" 
...\" 
...\" 
.nP
...\" 
...\" 
.TB "Locations of dced IDL Source Files"
.ad l
.TS H
expand tab (@) box;
lB | lB | lB
lB | lB | lB
lB | l | lB.
@@Source
Filename@Description@Pathname
_
.TH
_
Makefile@T{

T}@src/admin/dced/idl/Makefile
_
dced_aclbits.idl@T{
ACL permission definitions as used by dced
T}@src/admin/dced/idl/dced_aclbits.idl
_
dced_base.idl@T{
common datatypes for all dced services
T}@src/admin/dced/idl/dced_base.idl
_
dhd.sams@T{
message definition file for dced
T}@src/admin/dced/idl/dhd.sams
_
hostdata.idl@T{
IDL declarations for dced hostdata service
T}@src/admin/dced/idl/hostdata.idl
_
llb.idl@T{
IDL declarations for dced local location broker support
T}@src/admin/dced/idl/llb.idl
_
rkeytab.idl@T{
IDL declarations for dced remote keytab service
T}@src/admin/dced/idl/rkeytab.idl
_
rrpc.idl@T{
IDL declarations for procedures exported by all NCS1.5.1 servers
T}@src/admin/dced/idl/rrpc.idl
_
secval.idl@T{
IDL declarations for dced secval service
T}@src/admin/dced/idl/secval.idl
_
srvrconf.idl@T{
IDL declarations for dced server configuration service
T}@src/admin/dced/idl/srvrconf.idl
_
srvrexec.idl@T{
IDL declarations for dced server execution service
T}@src/admin/dced/idl/srvrexec.idl
.TE
...\" 
...\" 
...\" 
...\" 
.sp 2
...\" 
...\" 
.nf
.TB "Locations of dced Server Source Files"
...\" .ad l
.TS H
expand tab (@) box;
lB | lB | lB
lB | lB | lB
lB | l | lB.
@@ Source 
 Filename @ Description @ Pathname 
_
.TH
_
 Makefile@T{

T}@ src/admin/dced/server/Makefile
_
 acldefs.h@T{
 declarations for ACL types used by dced 
T}@ src/admin/dced/server/acldefs.h
_
 acls.c@T{
 ACL manipulation routines 
T}@ src/admin/dced/server/acls.c
_
 asimpl.h@T{
 implementation data for extended attribute schema 
 operations 
T}@ src/admin/dced/server/asimpl.h
_
 asops.c@T{
 extended attribute schema operations 
T}@ src/admin/dced/server/asops.c
_
 copy.c@T{
 data copy routines 
T}@ src/admin/dced/server/copy.c
_
 dce_lock.h@T{
 lock manager declarations 
T}@ src/admin/dced/server/dce_lock.h
_
 dcecf_postproc.sh@T{
 script to set cellname, hostname, or cellaliases 
 in the dce_cf.db file 
T}@ src/admin/dced/server/dcecf_postproc.sh
_
 dced_convert.acf@T{
 data conversion ACF file 
T}@ src/admin/dced/server/dced_convert.acf
_
 dced_convert.idl@T{
 data conversion IDL file 
T}@ src/admin/dced/server/dced_convert.idl
_
 dced_svc.c@T{
 remote serviceability routines 
T}@ src/admin/dced/server/dced_svc.c
_
 dcedimpl.h@T{
 data structure and function prototypes 
T}@ src/admin/dced/server/dcedimpl.h
_
 epops.c@T{
 dced endpoint RPC operations 
T}@ src/admin/dced/server/epops.c
_
 hdimpl.h@T{
 hostdata data structures 
T}@ src/admin/dced/server/hdimpl.h
_
 hdmisc.c@T{
 hostdata miscellaneous routines 
T}@ src/admin/dced/server/hdmisc.c
_
 hdops.c@T{
 hostdata RPC operations 
T}@ src/admin/dced/server/hdops.c
_
 init.c@T{
 dced initialization routines 
T}@ src/admin/dced/server/init.c
_
 kmimpl.h@T{
 key management declarations 
T}@ src/admin/dced/server/kmimpl.h
_
 kmops.c@T{
 key management RPC operations 
T}@ src/admin/dced/server/kmops.c
_
 lb.h@T{
 prototypes and declarations for local location 
 broker support module 
T}@ src/admin/dced/server/lb.h
_
 lbimpl.h@T{
 implementation data for local location broker 
 support 
T}@ src/admin/dced/server/lbimpl.h
_
 lbops.c@T{
 local location broker support RPC operations 
T}@ src/admin/dced/server/lbops.c
_
 lock.c@T{
 lock manager routines 
T}@ src/admin/dced/server/lock.c
_
 main.c@T{
 dced main module 
T}@ src/admin/dced/server/main.c
_
 misc.c@T{
 miscellaneous routines 
T}@ src/admin/dced/server/misc.c
_
 ncsops.c@T{
 RPC operations for NCS1.5 management interface 
T}@ src/admin/dced/server/ncsops.c
_
 oe.h@T{
 pre-DCE 1.1 endpoint table support declarations 
T}@ src/admin/dced/server/oe.h
_
 oeimpl.h@T{
 implmentation data for pre-DCE 1.1 endpoint table 
 support 
T}@ src/admin/dced/server/oeimpl.h
_
 oemis.c@T{
 pre-DCE 1.1 endpoint table support database list 
 and miscellaneous routines 
T}@ src/admin/dced/server/oemisc.c
_
 oeops.c@T{
 pre-DCE 1.1 endpoint table support RPC operations 
T}@ src/admin/dced/server/oeops.c
_
 scimpl.h@T{
 implementation data for server configuration 
T}@ src/admin/dced/server/scimpl.h
_
 scops.c@T{
 server configuration RPC operations 
T}@ src/admin/dced/server/scops.c
_
 sv_clientd.c@T{
 secval sec_clientd service routines 
T}@ src/admin/dced/server/sv_clientd.c
_
 sv_preauth.c@T{
 secval sec_clientd service routines 
T}@ src/admin/dced/server/sv_preauth.c
_
 sv_rover.c@T{
 secval security override routines 
T}@ src/admin/dced/server/sv_rover.c
_
 svimpl.h@T{
 implementation data for secval services 
T}@ src/admin/dced/server/svimpl.h
_
 svops.c@T{
 secval RPC operations 
T}@ src/admin/dced/server/svops.c
_
 sximpl.h@T{
 implementation data for server execution 
 service 
T}@ src/admin/dced/server/sximpl.h
_
 sxops.c@T{
 server execution RPC operations 
T}@ src/admin/dced/server/sxops.c
.TE
...\" 
.fi
...\" 
...\" 
...\" 
...\" 
...\" 
...\" 
...\" ----------------------------------------------------------------------
...\" .H 3 "Porting Considerations"
...\" ----------------------------------------------------------------------
...\" 
...\" .P
...\" 
...\" 
...\" 
...\" 
...\" ----------------------------------------------------------------------
...\" .H 4 "Platform Definitions and Variables"
...\" ----------------------------------------------------------------------
...\" 
...\" .P
...\" 
...\" 
...\" 
...\" 
...\" 
...\" 
...\" 
...\" .H 3 "Building, Linking and Installing"
...\" ----------------------------------------------------------------------
.H 3 "Configuring"
...\" ----------------------------------------------------------------------
...\" 
.P
No special configuration is required in order to bring up a DCE cell using
\*Ldced\*O. If, however, you wish to run \*Lsec_clientd\*O and \*Lrpcd\*O
instead of using the full \*Ldced\*O functionality, comments in \*Ldce_config\*O
(the DCE configuration script), which is located at:
...\" 
.DS
    \*Vdce-root-dir\*L/dce/src/config/dce_config\*O
.DE
...\" 
.P
and installed at:
...\" 
.DS
    \*L/opt/dcelocal/etc/dce_config\*O
.DE
...\" 
.P
explain how to do this.
...\" 
...\" OT 12652:
Note that the Security Validation service (\*Lsecval\*O) in \*Ldced\*O
requires that a directory
...\" 
.DS
    \*L/opt/dcelocal/var/security/preauth\*O
.DE
...\" 
.P
exist and be owned by the privileged user (\*Luid\*O 0, \*Lgid\*O 0), and
have permissions \*Lrwx--x--x\*O. This directory is created by \*Lrc.dce\*O and
\*Ldce_config\*O, and its existence and mode is checked by \*Ldced\*O; the code
that accomplishes this is located in:
...\" 
.DS
    \*Vdce-root-dir\*L/dce/src/admin/dced/server/sv_preauth.c\*O
.DE
...\" 
...\" 
...\" 
...\" .P
...\" To configure a DCE cell with \*Ldced\*O, do the following:
...\" 
...\" .AL
...\" .LI
...\" Set the \*LEPMAP\*O environment variable to ``dced'':
...\" 
...\" .iS
...\"     setenv EPMAP dced
...\" ...\"     export EPMAP=dced
...\" .iE
...\" 
...\" .LI
...\" Configure the cell by running \*Ldce_config\*O with the \*L-i\*O option:
...\" 
...\" .iS
...\"     dce_config -i
...\" .iE
...\" 
...\" .LE
...\" 
...\" .P
...\" To use \*Ldced\*O's \*Lsecval\*O functionality (which replaces \*Lsec_clientd\*O),
...\" \*Vwithout\*O replacing \*Lrpcd\*O with \*Ldced\*O, do the following:
...\" 
...\" .AL
...\" .LI
...\" Start \*Lrpcd\*O and the other DCE services on your machine
...\" 
...\" .LI
...\" Kill \*Lsec_clientd\*O
...\" 
...\" .LI
...\" Start \*Ldced\*O as follows:
...\" 
...\" .iS
...\"     dced -es
...\" .iE
...\" 
...\" .P
...\" (The \*Le\*O option specifies that \*Ldced\*O not do endpoints, and the \*Ls\*O
...\" option specifies that \*Lsecval\*O be started automatically.)
...\" 
...\" .LE
...\" 
...\" 
...\" 
...\" ----------------------------------------------------------------------
.H 3 "Testing and Verification"
...\" ----------------------------------------------------------------------
...\" 
.P
The installed location of the \*Ldced\*O tests is:
...\" 
.DS
    \*Vyour_install_path\*L/test/tet/functional/admin/dced\*O
.DE
...\" 
.P
which by default is:
...\" 
.DS
    \*Vdce-root-dir\*L/dce/install/\*Vplatform\*L/dcetest/dce1.1/test/tet/functional/admin/dced\*O
.DE
...\" 
...\" 
...\" 
...\" 
...\" ----------------------------------------------------------------------
.H 4 "Running the Tests"
...\" ----------------------------------------------------------------------
...\" 
.P
Before attempting to run the tests, you must edit the
...\" 
.DS
    \*Vdce-root-dir\*L/dce/install/\*Vplatform\*L/dcetest/dce1.1/test/tet/functional/admin/dced/tetexec.cfg\*O
.DE
...\" 
.P
file and set the values of the following parameters:
...\" 
.VL 1i
...\" 
.LI "\*LT_CELL_ADMIN\*O"
This should be the value of your Cell Adminstrator's principal name (the default
value when setting up the cell with \*Ldce_config\*O is \*Lcell_admin\*O).
...\" 
...\" 
.LI "\*LT_CELL_ADMIN\*O"
This should be your Cell Administrator principal's password.
...\" 
...\" 
.LI "\*LTET_SIG_IGN\*O"
This should be the (system-dependent) value of the \*LSIGVTALRM\*O signal,
defined in
...\" 
.DS
    \*L/usr/include/sys/signal.h\*O
.DE
...\" 
.P
for your platform.
...\" 
...\" It is a system-dependent value. 
...\"   its value is 26 on 486, while it is 20 on HP.
...\" 
...\" 
.LE
...\" 
.P
To run the tests, do the following:
...\" 
...\" 
.AL
.LI
Make sure \*Ldced\*O is running.
...\" 
.LI
\*Ldce_login\*O as a privileged user.
...\" 
.LI
Change directory to the installed test subtree:
...\" 
.iS
    cd \*Vyour_install_path\*L/test/tet/
    set TET_ROOT `pwd`
    setenv PATH $TET_ROOT/bin:$PATH
.iE
...\" 
.LI
To execute all of the tests, do:
...\" 
.iS
    tcc -e functional/admin/dced
.iE
...\" 
.LI
To execute a test suite, do:
...\" 
.iS
    tcc -e functional/admin/dced \*Vtest_suite_name\*O
.iE
...\" 
.P
where \*Vtest_suite_name\*O is one of the suites listed in the TET scenario
file located at:
...\" 
.DS
\s-1
  \*Vdce-root-dir\*L/dce/install/\*Vplatform\*L/dcetest/dce1.1/test/tet/functional/admin/dced/tet_scen\*O
\s+1
.DE
...\" 
.P
The existing test suites are:
...\" 
.BL
.LI
\*Lbinding\*O
.LI
\*Lcommon\*O
.LI
\*Lhostdata\*O
.LI
\*Lkeytab\*O
.LI
\*Lsecval\*O
.LI
\*Lsrvrconf\*O
.LI
\*Lsrvrexec\*O
.LE
...\" 
.P
You can also specify a \*Vtest_suite_name\*O of \*Lall\*O, which will cause all
of the suites to be run.
.P
If you execute the tests from their default installed location, test results will
be found at:
...\" 
.DS
\s-1
\*Vdce-root-dir\*L/dce/install/\*Vplatform\*L/dcetest/dce1.1/test/tet/functional/admin/dced/results/\*Vpass_nr\*L/journal\*O
\s+1
.DE
...\" 
.P
where \*Vpass_nr\*O is the number of the test iteration whose results are being
written. The \*Lresults\*O subdirectory is created by TET in the subdirectory
specified by \*L-e\*O to the \*Ltcc\*O command, as shown above. For further
information about TET output, see ``Overview of TET Use'' in Chapter 13.
...\" 
...\" 
...\" 
...\" 
...\" ----------------------------------------------------------------------
.H 3 "dced Runtime Output and Debugging Output"
...\" ----------------------------------------------------------------------
...\" 
.P
The \*Ldced\*O component outputs server information of all kinds via the DCE
serviceability component. The following sections describe how to control the
various kinds of information (including debugging output) available from
\*Ldced\*O via serviceability.
...\" 
...\" 
...\" 
...\" 
...\" ----------------------------------------------------------------------
.H 4 "Normal dced Server Message Routing"
...\" ----------------------------------------------------------------------
...\" 
.P
There are several ways to control normal \*Ldced\*O server message routing:
...\" 
.BL
.LI
At startup, through the contents of a routing file (which are applied to
all components that use serviceability messaging).
.LI
Dynamically, through the \*Ldcecp log\*O object.
.LI
Via environment variables (such as \*LSVC_ERROR\*O).
.LI
Via command line options
.LE
...\" 
...\" 
.P
The \*Lsvcroute(5dce)\*O reference page describes most of these methods;
the \*Ldced(8dce)\*O reference page should be referred to for the last
method. Routing of an already-started \*Ldced\*O's messages can be controlled
through the \*Ldcecp log\*O object. See the \*Llog.8dce\*O reference page in
the \*VOSF DCE Command Reference\*O for further information.
...\" 
...\" 
...\" 
...\" ----------------------------------------------------------------------
...\" .H 5 "Routing File"
...\" ----------------------------------------------------------------------
...\" 
...\" .P
...\" If a file called
...\" 
...\" .DS
...\"     \*Vdce-local-path\*L/svc/routing\*O
...\" .DE
...\" 
...\" .P
...\" exists when \*Ldced\*O is started, the contents of the file (if in the proper
...\" format) will be used as to determine the routing of \*Ldced\*O serviceability
...\" messages.
...\" .P
...\" The value of \*Vdce-local-path\*O depends on the values of two \*Lmake\*O
...\" variables when DCE is built:
...\" 
...\" 
...\" 
...\" .VL 1i
...\" .LI "\*LDCEROOT\*O"
...\" its default value is: \*L/opt\*O
...\" 
...\" .LI "\*LDCELOCAL\*O"
...\" its default value is: \*L$DCEROOT/dcelocal\*O
...\" 
...\" .LE
...\" 
...\" .P
...\" Thus, the default location of the serviceability routing file is normally:
...\" 
...\" .DS
...\"     \*L/opt/dcelocal/svc/routing\*O
...\" .DE
...\" 
...\" .P
...\" However, a different location for the file can be specified by setting the
...\" value of the environment variable \*LDCE_SVC_ROUTING_FILE\*O to the complete
...\" desired pathname.
...\" 
...\" .P
...\" The contents of the routing file consist of formatted strings specifying
...\" the routing desired for the various kinds of messages (based on message
...\" severity). Each string consists of three fields as follows:
...\" 
...\" .DS
...\"     \*Vseverity\*L:\*Voutput_form\*L:\*Vdestination\*O\ [\*Voutput_form\*L:\*Vdestination\*O .\ .\ .\ ]
...\" .DE
...\" 
...\" .P
...\" Where:
...\" 
...\" .VL 1i
...\" .LI "\*Vseverity\*O"
...\" specifies the severity level of the message, and must be one of the following:
...\" .BL
...\" .LI
...\" \*LFATAL\*O
...\" Fatal error, about to exit
...\" .LI
...\" \*LERROR\*O
...\" Normal exit
...\" .LI
...\" \*LWARNING\*O
...\" Error detected, program proceeding
...\" .LI
...\" \*LNOTICE\*O
...\" Informational notice
...\" .LI
...\" \*LNOTICE_VERBOSE\*O
...\" Verbose informational notice
...\" .LE
...\" 
...\" .P
...\" (The meanings of these severity levels are explained in detail in Chapter 4 of
...\" the \*VOSF DCE Application Development Guide \(em Core Components\*O volume,
...\" in the section entitled ``Specifying Message Severity''.)
...\" 
...\" 
...\" 
...\" .LI "\*Voutput_form\*O
...\" specifies how the messages of a given severity level should be processed, and
...\" must be one of the following:
...\" .BL
...\" .LI
...\" \*LBINFILE\*O
...\" .P
...\" Write these messages as binary log entries
...\" .LI
...\" \*LTEXTFILE\*O
...\" .P
...\" Write these messages as human-readable text
...\" .LI
...\" \*LFILE\*O
...\" .P
...\" Equivalent to \*LTEXTFILE\*O
...\" .LI
...\" \*LDISCARD\*O
...\" .P
...\" Do not record messages of this severity level
...\" .LI
...\" \*LSTDOUT\*O
...\" .P
...\" Write these messages as human-readable text to standard output
...\" .LI
...\" \*LSTDERR\*O
...\" .P
...\" Write these messages as human-readable text to standard error
...\" .LE
...\" 
...\" .P
...\" Files written as \*LBINFILE\*Os can be read and manipulated with a set of
...\" logfile routines. See Chapter 4 of the \*VOSF DCE Application Development
...\" Guide \(em Core Components\*O volume, mentioned above, for further information.
...\" .P
...\" The \*Voutput_form\*O specifier may be followed by a two-number specifier of the form:
...\" 
...\" .DS
...\"     \*L.\*Vgens\*L.\*Vcount\*O
...\" .DE
...\" 
...\" .P
...\" Where:
...\" 
...\" .VL .5i
...\" .LI "\*Vgens\*O"
...\" is an integer that specifies the number of files (i.e., generations) that
...\" should be kept
...\" .LI "\*Vcount\*O"
...\" is an integer specifying how many entries (i.e., messages) should be
...\" written to each file
...\" .LE
...\" 
...\" .P
...\" The multiple files are named by appending a dot to the simple specified
...\" name, followed by the current generation number. When the number of entries
...\" in a file reaches the maximum specified by \*Vcount\*O, the file is closed,
...\" the generation number is incremented, and the next file is opened. When the
...\" maximum generation number files have been created and filled, the generation
...\" number is reset to 1, and a new file with that number is created and written
...\" to (thus overwriting the already-existing file with the same name), and so
...\" on, as long as messages are being written. Thus the files wrap around to their
...\" beginning, and the total number of log files never exceeds \*Vgens\*O, although
...\" messages continue to be written as long as the program continues writing them.
...\" 
...\" 
...\" 
...\" 
...\" .LI "\*Vdestination\*O
...\" specifies where the message should be sent, and is a pathname. The field
...\" can be left blank if the \*Voutput_form\*O specified is \*LDISCARD\*O,
...\" \*LSTDOUT\*O, or \*LSTDERR\*O. The field can also contain a \*L%ld\*O
...\" string in the filename which, when the file is written, will be replaced
...\" by the process ID of the program that wrote the message(s). Filenames may
...\" \*Vnot\*O contain colons or periods.
...\" 
...\" 
...\" .LE
...\" 
...\" 
...\" .P
...\" Multiple routings for the same severity level can be specified by simply
...\" adding the additional desired routings as space-separated
...\" 
...\" .DS
...\"     \*Voutput_form\*L:\*Vdestination\*O
...\" .DE
...\" 
...\" .P
...\" strings.
...\" 
...\" .P
...\" For example, 
...\" 
...\" .oS
...\"     FATAL:TEXTFILE:/dev/console
...\"     WARNING:DISCARD:--
...\"     NOTICE:BINFILE.50.100:/tmp/log%ld STDERR:-
...\" .oE
...\" 
...\" .P
...\" Specifies that:
...\" 
...\" .BL
...\" .LI
...\" Fatal error messages should be sent to the console.
...\" .LI
...\" Warnings should be discarded.
...\" .LI
...\" Notices should be written both to standard error and as binary entries in files
...\" located in the \*L/tmp\*O directory. No more than 50 files should be written, and
...\" there should be no more than 100 messages written to each file. The files will have
...\" names of the form:
...\" 
...\" .DS
...\"     \*L/tmp/log\*Vprocess_id\*L.\*Vnn\*O
...\" .DE
...\" 
...\" .P
...\" where \*Vprocess_id\*O is the process ID of the program originating the messages,
...\" and \*Vnn\*O is the generation number of the file.
...\" 
...\" 
...\" .LE
...\" 
...\" 
...\" 
...\" ----------------------------------------------------------------------
.H 4 "Debugging Output"
...\" ----------------------------------------------------------------------
...\" 
.P
Debugging output from \*Ldced\*O can be enabled (provided that \*Ldced\*O has been
built with \*LDCE_DEBUG\*O defined) by specifying the desired debug messaging level
and route(s) in the
...\" 
.DS
    \*Vdce-local-path\*L/svc/routing\*O
.DE
...\" 
.P
routing file (described above), or by specifying the same information in the
\*LSVC_DHD_DBG\*O environment variable, before bringing up \*Ldced\*O.
Debugging output can also be enabled and controlled through the \*Ldcecp log\*O
object.
.P
Note that, unlike normal message routing, debugging output is always specified
on the basis of DCE component/sub-component (the meaning of ``sub-component''
will be explained below) and desired level.
.P
The debug routing and level instructions for a component are specified by the
contents of a specially-formatted string that is either included in the value
of the environment variable or is part of the contents of the routing file.
.P
The general format for the debug routing specifier string is:
...\" 
.DS
\s-1
    "\*Vcomponent\*L:\*Vsub_comp\*L.\*Vlevel\*L,\*V.\ .\ .\*L:\*Voutput_form\*L:\*Vdestination\*O \\
    [\*Voutput_form\*L:\*Vdestination\*O .\ .\ .\ ] "
\s+1
.DE
...\" 
.P
where the fields have the same meanings as in the normal routing specifiers
described above, with the addition of the following:
...\" 
...\" 
...\" 
.VL 1i
.LI "\*Vcomponent\*O"
specifies the component name
...\" 
.LI "\*Vsub_comp\*L.\*Vlevel\*O"
specifies a subcomponent name, followed (after a dot) by a debug level
(expressed as a single digit from 1 to 9). Note that multiple
subcomponent/level pairs can be specified in the string.
.P
A star (``\*L*\*O'') can be used to specify all sub-components. The sub-component
list is parsed in order, with later entries supplementing earlier ones; so the
global specifier can be used to set the basic level for all sub-components, and
specific sub-component exceptions with different levels can follow (see the example
below).
...\" 
.LE
...\" 
...\" 
.P
``Sub-components'' denote the various functional modules into which a component has
been divided for serviceability messaging purposes. For \*Ldced\*O, the sub-components
are as follows:
...\" 
...\" 
...\" 
...\" 
...\" 
.VL 2.5i
.LI "\*Laclmgr\*O"
The \*Ldced\*O ACL managers
...\" 
.LI "\*Lxattrschema\*O"
The \*Ldced\*O attribute service
...\" 
.LI "\*Lgeneral\*O"
General \*Ldced\*O facilities
...\" 
.LI "\*Lhostdata\*O"
The \*Ldced\*O hostdata service
...\" 
.LI "\*Lrkeytab\*O"
The \*Ldced\*O rkeytab service
...\" 
.LI "\*Lsecval\*O"
The \*Ldced\*O secval service
...\" 
.LI "\*Lsrvrconf\*O"
The \*Ldced\*O srvrconf service
...\" 
.LI "\*Lsrvrexec\*O"
The \*Ldced\*O srvrexec service
...\" 
.LI "\*Llocks\*O"
The \*Ldced\*O lock manager
...\" 
.LI "\*Lendpoint\*O"
The \*Ldced\*O endpoint mapper service
...\" 
...\" 
.LE
...\" 
...\" 
...\" 
.P
For example, the string
...\" 
.oS
    dhd:*.1,general.3:TEXTFILE.50.200:/tmp/dced_LOG
.oE
...\" 
.P
sets the debugging level for all \*Ldced\*O sub-components (\*Vexcept\*O
\*Lgeneral\*O) at 1; \*Lgeneral\*O's level is set
at 3. All messages are routed to \*L/tmp/dced_LOG\*O. No more than
50 log files are to be written, and no more than 200 messages are
to be written to each file.
.P
The texts of all the \*Ldced\*O serviceability messages, and the sub-component
list, can be found in the \*Ldced\*O sams file, at:
...\" 
.DS
    \*Vdce-root-dir\*L/dce/src/admin/dced/idl/dhd.sams\*O
.DE
...\" 
.P
For further information about the serviceability mechanism and API, see Chapter 4
of the \*VOSF DCE Application Development Guide \(em Core Components\*O volume,
``Using the DCE Serviceability Application Interface''.
...\" 
...\" 
...\" 
...\" 
...\" 
...\" ----------------------------------------------------------------------
.H 2 "DCE ACL Facility and Backing Store Library"
...\" ----------------------------------------------------------------------
...\" 
.P
Descriptions of all DCE ACL Facility and Backing Store library source files are
given in the table below. All files are located in the
...\" 
.DS
    \*Vdce-root-dir\*L/dce/src/dce/utils/acldb\*O
.DE
...\" 
.P
subdirectory.
...\" 
.nf
...\" 
.TB "Locations of DCE ACL Facility and Backing Store Source Files"
...\" .ad l
.TS H
expand tab (@) box;
lB | lB
lB | l.
Filename@Description
_
.TH
_
aclconv.c@T{
ACL convenience routines
T}
_
acleval.c@T{
ACL evaluation routines
T}
_
aclif.h@T{
ACL management library API prototypes
T}
_
aclimpl.c@T{
implementations of rdacl operations
T}
_
aclimpl.h@T{
private ACL management definitions
T}
_
database.acf@T{
Database ACF file
T}
_
database.idl@T{
Database IDL file
T}
_
dbdelete.c@T{
Database/Backing store single-entry delete routines
T}
_
dbfetch.c@T{
Database/Backing store entry fetch routines
T}
_
dbfree.c@T{
Database/Backing store entry free routine
T}
_
dbheader.c@T{
Database/Backing store header initialization and fetch routines
T}
_
dbif.h@T{
database API prototypes
T}
_
dbimpl.h@T{
Internal Database/Backing store implementation declarations
T}
_
dbiterate.c@T{
Database/Backing store entry iteration routines
T}
_
dblock.c@T{
Database/Backing store locking routines
T}
_
dbopen.c@T{
Database/Backing store open routines
T}
_
dbstore.c@T{
Database/Backing store storage routines
T}
_
dceacl.acf@T{
ACL encoding function ACF definition
T}
_
dceacl.idl@T{
ACL encoding function IDL definition
T}
.TE
...\" 
.fi
...\" 
...\" 
...\" 
...\" ----------------------------------------------------------------------
.H 3 "Porting Considerations"
...\" ----------------------------------------------------------------------
...\" 
...\" 
.P
The Backing Store library uses the Berkeley 4.4 ``db'' library. The DCE source
tree includes version 1.72 (slightly modified to reside in a single directory).
The latest released version can be found via FTP to
...\" 
.DS
    \*Lftp.cs.berkeley.edu\*O
.DE
...\" 
.P
and the file:
...\" 
.DS
    \*Lucb/4bsd/db.tar.Z\*O
.DE
...\" 
...\" 
...\" 
...\" 
...\" ----------------------------------------------------------------------
...\" .H 3 "Building and Linking"
...\" ----------------------------------------------------------------------
...\" 
...\" .P
...\" 
...\" 
...\" 
...\" 
...\" 
...\" 
...\" ----------------------------------------------------------------------
.H 3 "Testing and Verification"
...\" ----------------------------------------------------------------------
...\" 
.P
The source code for the functional tests for the DCE Backing Store library is
located in the
...\" 
.DS
    \*Vdce-root-dir\*L/dce/src/test/dce/utils/acldb/ts/db\*O
.DE
...\" 
.P
subdirectory. The following tests are supplied:
...\" 
.BL
.LI
\*Ldce_db_open\*O
.LI
\*Ldce_db_close\*O
.LI
\*Ldce_db_fetch\*O
.LI
\*Ldce_db_store\*O
.LI
\*Ldce_db_misc\*O
.LI
\*Ldce_db_delete\*O
.LI
\*Ldce_db_iter\*O
.LE
...\" 
.P
These programs test the DB APIs implied by their names. They are standalone
(no server) tests which create, manipulate, and delete backing stores in the
current directory.
...\" 
...\" 
.P
The source code for the functional tests for the DCE ACL facility are located
in the
...\" 
.DS
    \*Vdce-root-dir\*L/dce/src/test/dce/utils/acldb/ts/acl\*O
.DE
...\" 
.P
subdirectory. The following tests are supplied:
...\" 
.BL
.LI
\*Lrdacl_svr_opers\*O
.P
Tests the \*Lrdacl_*\*O routines.
...\" 
.LI
\*Ldce_acl_perm_fcns\*O
.P
Tests the \*Ldce_acl_*\*O permissions-related routines.
...\" 
.LI
\*Ldce_acl_conv_fcns\*O
.P
Tests the \*Ldce_acl_*\*O convenience routines.
...\" 
.LI
\*Lacl_setup\*O
.P
This module implements the setup routines for the DCE ACL functional tests.
FVT's.
...\" 
...\" 
.LE
...\" 
.P
Each of the test suites attempts to add a principal and account, called
\*Ltest_princ1\*O, which they need. The setup script logs in as \*Lcell_admin\*O
and sets an ACL on
...\" 
.DS
    \*L/.:/hosts/\*Vhost_name\*O
.DE
...\" 
.P
in preparation for the tests.  
...\" 
...\" 
...\" 
...\" ----------------------------------------------------------------------
.H 4 "Running the Tests"
...\" ----------------------------------------------------------------------
...\" 
.P
To run the Backing Store or ACL library tests, do the following:
...\" 
.iS
    cd \*Vdce-root-dir\*L/dce/install/\*Vplatform\*L/dcetest/dce1.1/test/tet
    setenv TET_ROOT `pwd`
    setenv PATH $TET_ROOT/bin:$PATH
    tcc -e functional/dce/utils/acldb \*Vtest_suite_name\*O
...\" 
...\"     tcc -e admin/dcecp acl
...\"     tcc -e admin/dcecp log
...\" 
.iE
...\" 
.P
where \*Vtest_suite_name\*O is one of the suites listed in the TET scenario
file located at:
...\" 
.DS
    \*Vdce-root-dir\*L/dce/install/\*Vplatform\*L/dcetest/dce1.1/test/tet/functional/dce/utils/acldb/tet_scen\*O
.DE
...\" 
.P
Note that the above sequence of commands assumes that the tests have been installed
in their default location (by ODE) and that you wish to run them from that location.
However, the
...\" 
.DS
    \*Vdce-root-dir\*L/dce/install/\*Vplatform\*L/dcetest/dce1.1\*O
.DE
...\" 
.P
test tree is self-contained (insofar as the tests and TET are concerned), and
can be copied to any other preferred location on your system, and executed from
there. If you do this, the first step given above becomes the following three
steps:
...\" 
.iS
    cd \*Vdce-root-dir\*L/dce/install/\*Vplatform\*L/dcetest
    cp -r dce1.1 \*Vyour_test_tree\*L
    cd \*Vyour_test_tree\*L
.iE
...\" 
...\" 
.P
If you execute the tests from their default installed location, test results
will be found at:
...\" 
.DS
\s-1
\*Vdce-root-dir\*L/dce/install/\*Vplatform\*L/dcetest/dce1.1/test/tet/functional/dce/utils/acldb/results/\*Vpass_nr\*L/journal\*O
\s+1
.DE
...\" 
.P
where \*Vpass_nr\*O is the number of the test iteration whose results are being
written. The \*Lresults\*O subdirectory is created by TET in the subdirectory
specified by \*L-e\*O to the \*Ltcc\*O command, as shown above. For further
information about TET output, see ``Overview of TET Use'' in Chapter 13.
...\" 
...\" 
...\" 
...\" 
...\" 
...\" moved dce_config stuff from end of Chapter 12 to here...
...\" ----------------------------------------------------------------------
.H 2 "The DCE Configuration Program"
...\" ----------------------------------------------------------------------
...\" 
.P
This section contains information relating to the use of the DCE configuration
program, \*Ldce_config\*O, on different platforms. For further information on
\*Ldce_config\*O, see the \*VOSF DCE Administration Guide\(emIntroduction\*O.
...\" 
...\" 
...\" 
...\" 
...\" 
...\" ----------------------------------------------------------------------
.H 3 "How the Security Service is Accessed During DCE Configuration"
...\" ----------------------------------------------------------------------
...\" 
.P
DCE applications normally locate the Security Service via the
.DS
    \*L/.../cell_name/subsys/dce/sec\*O
.DE
.P
entry in the CDS namespace. However, the environment variable \*LBIND_PE_SITE\*O,
when set to any value other than 0, disables the CDS lookup. Instead, the Security
Service's location is determined in this case by information found in the file:
.DS
    \*Vdcelocal\*L/etc/security/pe_site\*O
.DE
.P
The reason for this is as follows. During cell configuration, the following basic
steps are performed by \*Ldce_config\*O:
...\" 
.AL
.LI
Create the Security Service.
.LI
Run \*Ldce_login\*O.
.LI
Perform Security setup (using \*Lrgy_edit\*O, etc.).
.LI
Create the Cell Directory Service.
.LE
...\" 
.P
Use of the Security Service is required in Steps 2 and 3, but Security cannot
be found via CDS at that time, because CDS has not been created yet. So
\*Ldce_config\*O uses the following method:
...\" 
.AL
.LI
Set \*LBIND_PE_SITE\*O = 1, which will cause the Security server to be looked up
by reading the \*Lpe_site\*O file, not by querying CDS.
.LI
Create the Security Service.
.LI
Run \*Ldce_login\*O.
.LI
Perform Security setup (using \*Lrgy_edit\*O, etc.).
.LI
Set \*LBIND_PE_SITE\*O = 0, enabling normal CDS lookup of the Security Service.
.LI
Create the Cell Directory Service.
.LE
...\" 
.nS "note"
Be careful in the use of \*LBIND_PE_SITE\*O. Things can go subtly wrong when
the \*Lpe_site\*O file information is the only way to locate Security. For
example, if you attempt to cross a cell boundary with \*LBIND_PE_SITE\*O set,
you will be unable to reach the other cell's Security Service to establish
trust there. This is because only the \*Vlocal\*O cell's Security Service
binding information is placed in the \*Lpe_site\*O file.
.nE
...\" 
...\" 
...\" ----------------------------------------------------------------------
.H 4 "Security Use of BIND_PE_SITE"
...\" ----------------------------------------------------------------------
...\" 
.P
\*LBIND_PE_SITE\*O is examined in the module:
.DS
    \*Vdce-root-dir\*L/dce/src/security/client/rca/internal_binding.c\*O
.DE
.P
The file \*Linternal_binding.c\*O also contains a routine \*Lsec_rgy_enable_nsi()\*O,
which allows a program to select either NSI or the \*Lpe_site\*O file. This routine
is called in CDS (see below) to get through the bootstrap process.
.P
The following is a summary of the registry binding logic in the
\*Linternal_binding.c\*O file.
...\" 
...\" 
.oS
    /*
    * Do an UNauthenticated NS lookup to find the security
    * server. It must be unauthenticated because we might
    * not yet be authenticated to the particular CDS we're
    * trying to reach.
    */
    rpc_ns_set_authn (none)
    /*
    * Do the NSI lookup
    */
    bound = nil
    if (!BIND_PE_SITE)
    {
    	do the NSI lookup 
	if success 
		bound = t
    }
    /*
    * If the NSI lookup failed, or BIND_PE_SITE is set,
    * then look in the pe_site file now.
    */
    if (!bound || use_pe_site_file)
        ...

.oE
...\" 
...\" 
.P
The last comment is significant. The \*Lpe_site\*O file is not just for
bootstrapping: it can also be thought of as a backstop for a CDS failure to
resolve a lookup of the Security Service. This backstop mechanism is
weak\(emthe \*Lpe_site\*O file is \*Vnot\*O a shadow of the CDS database,
but only a pointer to the local machine's Security Service. If, for example,
the Security Service is moved to another host in the cell, the \*Lpe_site\*O
file will not correctly track this move.
.P
Further information about the \*Lpe_site\*O file can be found in Chapter
9 of this guide, in the ``Basic Security Setup'' section.
...\" 
...\" 
...\" ----------------------------------------------------------------------
.H 4 "CDS and BIND_PE_SITE"
...\" ----------------------------------------------------------------------
...\" 
.P
The normal CDS startup sequence is as follows:
...\" 
.BL
.LI
Start the advertiser.
.LI
Start the clerks (which are forked by the advertiser).
.LI
Start the server.
.LE
...\" 
.P
The advertiser is aware of some Security bootstrap issues. The clerks must be
started with \*LBIND_PE_SITE\*O set to 0, otherwise the Directory Service will
never be used to find Security Servers. But the advertiser must also contact the
Security Service before the rest of CDS is up and running.
.P
The advertiser model (in the \*Ladver_dacl.c\*O file) is:
...\" 
.oS
    orig_sec_nsi_state = sec_rgy_enable_nsi (0); /* disable */
    access security;
    sec_rgy_enable_nsi(orig_sec_nsi_state);      /* restore */
        ...
    fork the clerks;
.oE
...\" 
.P
The advertiser must have BIND_PE_SITE set to 0 at startup (as is correctly done
in \*Ldce_config\*O). This ensures that the clerks will always use the Directory
Service to locate Security.
.P
Similarly, \*Lcdsd\*O temporarily disables Security's use of NSI while performing
Security initialization (namely when executing a secure \*Llogin\*O, creating the
default ACL for server management, starting the key management thread and the
refresh identity thread).
...\" 
...\" 
...\" 
...\" 
...\" 
...\" ----------------------------------------------------------------------
.H 3 "Setting Up CDS Communications"
...\" ----------------------------------------------------------------------
...\" 
.P
This subsection describes how the \*Lcdscp\*O command \*Ldefine cached server\*O
can be used to set up CDS communications on networks that do not allow RPC
broadcast messages (which is how CDS communications are normally arranged).
...\" 
...\" 
...\" ----------------------------------------------------------------------
.H 4 "With Broadcast"
...\" ----------------------------------------------------------------------
...\" 
.P
In the normal CDS communications model, the CDS advertiser (\*Lcdsadv\*O)
sends an RPC broadcast over the network. This broadcast is seen by other
\*Lcdsadv\*O processes (and everyone else). Once the two advertisers see
each other, they can begin a conversation like the following:
...\" 
...\" 
.oS
    cdsadv 1:
            I've got a clearinghouse. Here is its name
            and UUID... Even more important, here is my IP
            address...

    cdsadv 2:
            Thanks for the IP address. Now I can find your
            CDS server.
.oE
...\" 
...\" 
.P
In this example, \*Lcdsadv 2\*O is acting only as a client of the server
advertised by \*Lcdsadv 1\*O. \*Lcdsadv 2\*O could also represent a server.
...\" 
...\" 
...\" ----------------------------------------------------------------------
.H 4 "Without Broadcast"
...\" ----------------------------------------------------------------------
...\" 
.P
The model above is predicated on having a working network broadcast mechanism.
But in some networks, broadcasting is not possible. For example, there could
be a router between the two nodes which is not configured to relay broadcast
messages. Or the scenario might involve a wide area public data network, where
the expense of broadcasting would be prohibitive. Another possible source of
failure is the RPC protocol itself\(emconnection-based RPC is not capable of
broadcasting.
.P
In such cases, how can the two CDS components find each other?
.P
The \*Lcdscp\*O program has a command that allows a system administrator
to manually create knowledge in the CDS clerks' cache about a CDS server:
...\" 
...\" 
.iS
    define cached server <cds server> <ip address>
.iE
...\" 
.P
For example:
...\" 
.iS
    define cached server absolut.osf.org 111.222.3.44
.iE
...\" 
.P
By making known to the clerks the IP address of a CDS server in this way, 
\*Lcdscp define cached server\*O allows the two CDS advertisers to exchange
the same information as in the broadcast model.
...\" 
...\" 
...\" ----------------------------------------------------------------------
...\" .H 4 "CDS Communications and dce_config"
...\" ----------------------------------------------------------------------
...\" 
...\" Since 1.0.3, what happens instead of what's below is that dce_config
...\"  simply waits for the advertiser to find a server. If it doesn't, it
...\"  (dce_config) will silently do a define cached server itself, without
...\"  prompting.
...\" 
...\" 
...\" .P
...\" The \*Ldce_config\*O program asks:
...\" 
...\" .oS
...\"     Can \*VHOSTNAME\*C broadcast to \*Vcdsserver\*C? (y) n
...\" .oE
...\" 
...\" .P
...\" where \*VHOSTNAME\*O is the machine on which you are running \*Ldce_config\*O,
...\" and \*Vcdsserver\*O is the machine running \*Lcdsd\*O, which was just previously
...\" prompted for by \*Ldce_config\*O. If you answer ``NO'' to this question,
...\" \*Ldce_config\*O will execute a \*Ldefine cached server\*O command, because
...\" you have in effect told it that the CDS advertiser cannot get through. As a
...\" result, you may get the following error message:
...\" 
...\" 
...\" .oS
...\"     Failure in routine: cp_define_cached_server; code = 282108915
...\"     Specified full name already exists (dce / cds)
...\"     cdscp define cached server command failed.
...\" .oE
...\" 
...\" 
...\" .P
...\" This error will occur when the advertisers have in fact \*Valready\*O found
...\" each other, but \*Ldce_config\*O tries the \*Ldefine cached server\*O command
...\" anyway. In practice, this is a benign error message, and you can ignore it.
...\" 
...\" 
...\" ----------------------------------------------------------------------
.H 4 "Disabling Broadcasting for CDS Testing"
...\" ----------------------------------------------------------------------
...\" 
.P
There are at least three easy ways to ensure that the advertisers are not
broadcasting to each other, thereby allowing you to test the \*Ldefine cached
server\*O command:
...\" 
.BL
.LI
Test between two different subnets with a router between them. Check with your
network administrator to make sure that the router is not passing broadcast
messages.
.LI
Modify \*Ldce_config\*O to use the \*L-s\*O option in the \*Lcdsadv\*O daemon;
specifying this option will disable all broadcasting.
.LI
Force the use of \*LRPC_SUPPORTED_PROTSEQS = ncacn_ip_tcp\*O. The RPC connection
oriented (CN) protocol cannot broadcast.
.LE
...\" 
...\" 
...\" 
...\" 
...\" 
...\" 
...\" 
...\" ----------------------------------------------------------------------
...\" .H 3 "Preventing ``dce_config'' from Clearing the Screen"
...\" ----------------------------------------------------------------------
...\" 
...\" .P
...\" The \*Ldce_config\*O program frequently clears the screen it is outputting to,
...\" which may have the undesirable effect of erasing information you wanted to keep.
...\" One way to prevent this is to create the following shellscript:
...\" 
...\" .oS
...\"     #!/bin/sh
...\"     echo
...\"     echo "<<clear the screen>>"
...\"     echo
...\" .oE
...\" 
...\" .P
...\" Give it a name (for example, \*Lclear\*O), and then insert its directory pathname
...\" in your \*LPATH\*O environment variable before the directory \*L/bin\*O (or wherever
...\" your normal \*Lclear\*O command resides).
...\" 
...\" 
...\" 
...\" 
...\" 
...\" 
...\" 
...\" 
...\" 
...\" ----------------------------------------------------------------------

