...\" @OSF_COPYRIGHT@
...\" 
...\" 
...\" HISTORY
...\" $Log: 13_tet.gpsml,v $
...\" Revision 1.1.2.7  1994/10/30  22:47:26  weir
...\" 	Last updates
...\" 	[1994/10/30  22:46:18  weir]
...\"
...\" Revision 1.1.2.6  1994/10/30  16:25:27  weir
...\" 	Updates
...\" 	[1994/10/30  16:24:02  weir]
...\" 
...\" Revision 1.1.2.5  1994/10/29  23:25:47  weir
...\" 	More Updates
...\" 	[1994/10/29  23:24:27  weir]
...\" 
...\" Revision 1.1.2.4  1994/10/28  20:50:01  weir
...\" 	DCE 1.1 updates
...\" 	[1994/10/28  20:48:40  weir]
...\" 
...\" Revision 1.1.2.3  1994/10/26  20:40:40  weir
...\" 	DCE 1.1 Updates
...\" 	[1994/10/26  20:39:13  weir]
...\" 
...\" Revision 1.1.2.2  1994/10/14  18:38:46  weir
...\" 	Minor edit changes
...\" 	[1994/10/14  18:37:36  weir]
...\" 
...\" Revision 1.1.2.1  1994/10/12  20:31:19  weir
...\" 	Reorganized system test material
...\" 	[1994/10/12  20:30:37  weir]
...\" 
...\" $EndLog$
...\" 
...\" 
...\" 
...\" 
...\" ----------------------------------------------------------------------
.H 1 "TET and DCE Testing"
...\" ----------------------------------------------------------------------
...\" 
.P 
Many of the DCE system tests have been modified to use the Test Environment Toolkit
(TET) version 1.10.
.P
Source code for TET is provided in the source tree under
.DS
    \*Vdce-root-dir\*L/dce/src/test/tet\*O
.DE
...\" 
.P
TET is built and placed in the release area as part of the default source tree
build. The X/Open release notes, specifications and user guides for TET can be
found in the
.DS
    \*Vdce-root-dir\*L/dce/src/test/tet/doc\*O
.DE
...\" 
.P
directory.
.P
TET provides support for building, running and for cleaning up the test suites.
However, to provide better integration with OSF's software process, TET is used
only to execute the tests, and ODE is used to build and install the test suites.
...\" 
...\" 
...\" 
...\" 
...\" ----------------------------------------------------------------------
.H 2 "Installing TET"
...\" ----------------------------------------------------------------------
...\"  and the DCE Functional and System Tests
...\" 
...\" 
.P
Once DCE has been built and installed, the system test directory should lie by
default at:
...\" 
.DS
    \*Vdce-root-dir\*L/dce/install\*V/platform\*L/dcetest/dce1.1/test/systest\*O
.DE
...\" 
.P
(for most of the tests that do not run under TET), and:
...\" 
.DS
    \*Vdce-root-dir\*L/dce/install/\*Vplatform\*L/dcetest/dce1.1/test/tet/system\*O
.DE
...\" 
.P
(for the tests that do run under TET).
...\" 
.P
The \*Lsystest\*O directory contains the following:
...\" 
.BL
...\" 
.LI
\*Ladmin\*O
.P
Directory containing DCE Administrative automated tests and checklists.
...\" 
.LI
\*Ldirectory/gds\*O
.P
Directory containing DCE Global Directory Service system tests.
...\" 
...\" 
.LI
\*Lprofile.dcest\*O
.P
File containing definitions for environmental variables used by the system 
tests.
...\" 
.LI
\*Ldcetest_config\*O
.P
The DCE Test Installation and Configuration script.
...\" 
...\" .LI
...\" \*Ltools\*O
...\" .P
...\" Link to \*Vtet-root\*L/system/tools, which contains the DCE system test tools.
.LI
\*Lfile\*O
Directory containing DFS system tests.
...\" 
...\" 
.LI
\*Ltools\*O
Directory containing DCE system test tools used by system tests that are not
run under TET.
...\" 
...\" 
...\"
.LE
...\" 
.zA "def,10739,1.1beta,new info"
...\" 
...\" 
.P
The \*Ltet/system\*O directory contains the following:
...\" 
.BL
...\" 
.LI
\*LI18N\*O
.P
DCE Internationalization system tests.
...\" 
.LI
\*Laudit\*O
.P
DCE Audit Service system tests.
...\" 
.LI
\*Ldced\*O
.P
DCE Host Daemon (\*Ldced\*O) system tests.
...\" 
...\" 
.LI
\*Ldirectory/cds\*O
.P
DCE Cell Directory Service system tests.
...\"
.LI
\*Lprofile.dcest.tet\*O
.P
File containing definitions for environmental variables used by the system 
tests.
...\" 
.LI
\*Lrpc\*O
.P
DCE RPC system tests. Note that this directory contains the \*Lrpc.cds.3\*O
system test, which \*Vis not\*O run under TET.
...\" 
.LI
\*Lsecurity\*O
.P
DCE Security Service system tests.
...\" 
.LI
\*Lsvc\*O
.P
DCE Serviceability system tests.
...\" 
.LI
\*Lthreads\*O
.P
DCE Threads system tests.
...\" 
.LI
\*Ltime\*O
.P
DCE Distributed Time Service system test.
...\"
.LI
\*Ltools\*O
.P
DCE system test tools.
...\"
...\" 
.LE
...\" 
...\" 
.zZ "def,10739,1.1beta,new info"
...\" 
...\" 
...\"
...\" The \*Lsystest\*O directory also contains the following:
...\" 
...\" 
...\" .BL
...\" .LI
...\" \*Ldcetest_config\*O
...\" .P
...\" The DCE System Test Installation and Configuration script.
...\" 
...\" .LI
...\" \*Lprofile.dcest\*O and \*Lprofile.dcest.tet\*O
...\" .P
...\" Files which contain definitions for all the environment variables used by
...\" the system tests.
...\" 
...\" 
...\" .LE
...\" 
...\" 
...\" 
.P
For the remainder of this chapter, the name:
.DS
    \*Vsystest-root\*O
.DE
...\" 
.P
will be used to signify the correct path on your system to the \*Lsystest\*O
directory in the DCE install tree.
...\" 
...\" 
...\" ----------------------------------------------------------------------
.H 3 "Using dcetest_config"
...\" ----------------------------------------------------------------------
...\" 
.P
\*Ldcetest_config\*O is a menu-driven utility which can be used to do the
following things:
...\" 
...\" 
.BL
...\" 
.LI
Install any of the DCE system tests.
...\" 
.LI
Install DCE functional tests, found in:
...\" 
.DS
    \*Vdce-root-dir\*L/dce/install\*V/platform\*L/dcetest/dce1.1/test/\*Vcomponent_name\*O
.DE
...\" 
...\" NOTE: This is in theory; in practice the dcecp testcases are here, even
...\"       though they are run under TET. 
...\" 
...\" 
...\" 
.P
(for non-TET functional tests), and:
...\" 
.DS
    \*Vdce-root-dir\*L/dce/install\*V/platform\*L/dcetest/dce1.1/test/tet/functional/\*Vcomponent_name\*O
.DE
...\" 
.P
(for functional tests run under TET).
...\" 
.LI
Install TET
...\" 
.LE
...\" 
...\" 
.P
\*Ldcetest_config\*O operates much like \*Ldce_config\*O, the script used
to install and configure DCE itself. As long as you are using \*Ldcetest_config\*O
only to install tests, there is no requirement to have run \*Ldce_config\*O;
the only requirement is that DCE must have been built. However, if you wish
to execute tests for any component other than GDS, you must of course have a
DCE cell up and running\(emwhich means that you must have run \*Ldce_config\*O.
For GDS testing, the only requirement is that GDS be installed on the test systems.
.P
You start \*Ldcetest_config\*O by typing:
...\" 
.iS
    \*Vsystest-root\*L/dcetest_config \*V[\*LDEBUG\*V]\*O
.iE
...\" 
.P
(Specifying \*LDEBUG\*O will keep \*Ldcetest_config\*O from clearing the
screen when it changes menus.)
.P
You may find it necessary to make the following environment variable
setting:
...\" 
.iS
    MORE= -W notite -e
.iE
...\" 
.P
to prevent \*Ldcetest_config\*O from prompting you to press a key to
continue after each menu is displayed.
...\" 
...\" 
...\" 
.P
The following sections describe the various uses of \*Ldcetest_config\*O.
...\" 
...\" 
...\" 
...\" 
...\" 
...\" 
...\" ----------------------------------------------------------------------
.H 3 "Installing TET with dcetest_config"
...\" ----------------------------------------------------------------------
...\" 11.2.2 Installing TET with dcetest_config
.P
To install TET, become root and start the \*Ldcetest_config\*O script. From the
\*Ldcetest_config\*O Main Menu, select ``1'' to install.
...\" 
...\" 
...\" .nP
...\" 
.sp 2
.FG "Installing TET: Step 1"
.oS
    DCE Test Main Menu
    
     1. Install
     2. Configure
    
    99. Exit
    
    selection: \*L1
.oE
...\" 
...\" 
.P
After you have selected the ``Install'' menu option, the ``Location of DCE Test
Install Binaries'' menu will be displayed. You can install TET either from a
filesystem or from media.
...\" 
.sp 2
.FG "Installing TET: Step 2"
.oS
    Location of DCE Test Install Binaries
    
    
      1. Filesystem
      2. Media
    
     98. Return to previous menu
     99. Exit
    
     selection: \*L1\*C
    
    Enter the full path to the DCE binary install tree.
    This will be the directory that contains the
    .../<BUILD>/install/<machinetype>/dcetest/dce1.1
    directory:  \*L/myproject/dce/mybuild/nb_ux/install/hp800/dcetest/dce1.1\*C
    
    
    Enter the path to the DCE test tree location.
    This will be the directory that will contain all the tests.
    Please locate this directory somewhere other than the root 
    partition, if possible.  A softlink /dcetest/dcelocal will be made
    to this location.
    directory: \*L/usr/dcetest
.oE
...\" 
.P
After you have specified the location information and typed \*L<RETURN>\*O, the ``DCE
Test Installation Menu'' will be displayed. Select ``3'' to install TET.
...\" 
...\" .nP
...\" 
.sp 2
.FG "Completion of Installation"
.oS
    DCE Test Installation Menu
    
     1. Functional Tests
     2. System Tests
     3. TET
    
    98. Return to previous menu
    99. Exit
    
    selection: \*L3
.oE
...\" 
.P
As TET is being installed, you should see the following messages:
...\" 
.oS
    installing test/tet/bin ...
    installing test/tet/lib ...
.oE
...\" 
.P
After TET has been installed, you will be returned to the \*Ldcetest_config\*O
Main Menu.
...\" 
.sp 2
.FG "Return to Main Menu"
.oS
     DCE Test Main Menu
    
     1. Install
     2. Configure
    
    99. Exit
    
    selection: \*L99
.oE
...\" 
...\" 
...\" 
.P
You have now installed TET.
...\" 
...\" 
.nP
...\" 
...\" ----------------------------------------------------------------------
.H 3 "Installing the DCE Functional Tests with dcetest_config"
...\" ----------------------------------------------------------------------
...\" 
.P
To install any or all of the DCE functional tests, you should select ``1''
in the \*Ldcetest_config\*O Main Menu:
...\" 
.sp 2
.FG "Selecting Test Installation"
.oS
     DCE Test Main Menu

     1. Install
     2. Configure

    99. Exit

    selection:  \*L1
.oE
...\" 
.P
You will then be prompted for the location of the test binaries. You
can install the tests either from media (e.g., tape) or from a
filesystem. In the following example, ``1'' (filesystem) has been
selected; this causes the user to be prompted for the location of
the filesystem and, following that, for the path at which the tests
are to be installed:
...\" 
...\" 
.sp 2
.FG "Supplying Test Location"
.oS
    Location of DCE Test Install Binaries


     1. Filesystem
     2. Media

    98. Return to previous menu
    99. Exit

    selection:  \*L1\*C

    Enter the full path to the DCE binary install tree.
    This will be the directory that contains the
    .../<BUILD>/install/<machinetype>/dcetest/dce1.1
    directory:  \*L/myproject/dce/mybuild/nb_ux/install/hp800/dcetest/dce1.1\*C

    Enter the path to the DCE Test tree location.
    This will be the directory that will contain all the tests.
    Please locate this directory somewhere other than the root
    partition, if possible. A softlink /dcetest/dcelocal will be made
    to this location.
    directory: \*L/usr/dcetest
.oE
...\" 
.P
Following these steps, you will be returned to the Test Installation
menu, where you can now select ``1'' to actually install the tests:
...\" 
...\" 
...\" 
.FG "Functional Test Installation Menu"
.oS
     DCE Test Installation Menu

     1. Functional Tests
     2. System Tests
     3. TET

    98. Return to previous menu
    99. Exit

    selection:  \*L1
.oE
...\" 
...\" 
.P
Note that if you have previously installed tests at the destination
path that you have given, \*Ldcetest_config\*O will warn you of this
and give you the chance to go no further:
...\" 
...\" 
.sp 2
.FG "Previously Installed Tests"
.oS
    Location of DCE Test Install Binaries


     1. Filesystem
     2. Media

    98. Return to previous menu
    99. Exit

    selection:  \*L1\*C


    Enter the full path to the DCE binary install tree.
    This will be the directory that contains the
    .../<BUILD>/install/<machinetype>/dcetest/dce1.1
    directory:  \*L/myproject/dce/mybuild/nb_ux/install/hp800/dcetest/dce1.1\*C

    Tests have previously been installed in /usr/dcetest
    Do you want to continue storing the tests in the same location (y) \*Ly
.oE
...\" 
.P
The final menu for functional test installation allows you to select
one or all of the functional suites for installation:
...\" 
...\" 
.nP
.FG "Installing Functional Tests"
.oS
     DCE Test Installation (Functional Tests) Menu

     1. Cell Directory Service
     2. Distributed File Service
     3. Global Directory Service
     4. Remote Procedure Call
     5. Security
     6. Threads
     7. Distributed Time Service
     8. Audit
     9. DCE Control Program
    10. DCE Host Configuration Server

    97. All of the above
    98. Return to previous menu
    99. Exit

    selection:  \*L7\*C
            installing test/time ...
            installing test/systest/profile.dcest ...
            installing test/systest/dcetest_config ...
.oE
...\" 
...\" 
.P
As was shown in the screen example above, \*Ldcetest_config\*O will install
the tests at the path you give it, and will create a softlink called
\*L/dcetest/dcelocal\*O to that location. For example, it would install the
DTS functional tests at:
.DS
    \*L/dcetest/dcelocal/test/time/\*O
.DE
...\" 
.P
where \*L/dcetest/dcelocal\*O is a link to the path:
.DS
    \*L/usr/dcetest\*O
.DE
...\" 
.P
which you supplied as the install destination.
.P
The advantage in using \*Ldcetest_config\*O to install the functional tests
is that it will install \*Vall\*O that is needed and \*Vonly\*O what is needed
out of the DCE build, thus avoiding the mistakes that can occur with manual
installation.
.P
For instructions on how to run the installed functional tests, refer to the
section on functional testing in the appropriate component chapter of this
guide.
...\" 
...\" 
...\" 
...\" ----------------------------------------------------------------------
.H 3 "Installing the DCE System Tests with dcetest_config"
...\" ----------------------------------------------------------------------
...\" 
.P
Installing the DCE system tests is similar to functional test installation.
From the Main Menu, select ``1'':
...\" 
.sp 2
.FG "Installing System Tests: Step 1"
.oS
     DCE Test Main Menu

     1. Install
     2. Configure

    99. Exit

    selection:  \*L1
.oE
...\" 
.P
You will then be prompted for the location of the to-be-installed tests, as
well as the location you wish them to be installed at:
...\" 
...\" 
.FG "Installing System Tests: Step 2"
.oS
    Location of DCE Test Install Binaries


     1. Filesystem
     2. Media

    98. Return to previous menu
    99. Exit

    selection:  \*L1\*C


    Enter the full path to the DCE binary install tree.
    This will be the directory that contains the
    .../<BUILD>/install/<machinetype>/dcetest/dce1.1
    directory:  \*L/myproject/mybuild/nb_ux/install/hp800/dcetest/dce1.1\*C

    Enter the path to the DCE Test tree location.
    This will be the directory that will contain all the tests.
    Please locate this directory somewhere other than the root
    partition, if possible. A softlink /dcetest/dcelocal will be made
    to this location.
    directory: \*L/usr/dcetest
.oE
...\" 
...\" 
.nP
...\" 
.P
In the Test Installation Menu you can now select ``2'' to install the tests:
.sp 2
.FG "Installing System Tests: Step 3"
.oS
     DCE Test Installation Menu
    
     1. Functional Tests
     2. System Tests
     3. TET
    
    98. Return to previous menu
    99. Exit
    
    selection:  \*L2
.oE
...\" 
...\" 
.P
You will then be shown the System Test Installation Menu, from which you
can select one or all of the system tests for installation:
...\" 
...\" 
.FG "Installing System Tests: Step 4"
.oS
     DCE Test Installation (System Tests) Menu

     1. Admin Tests
     2. Cell Directory Service
     3. Distributed File Service
     4. Global Directory Service
     5. Remote Procedure Call
     6. Security
     7. Threads
     8. Distributed Time Service
     9. Audit
    10. I18N
    11. Serviceability
    12. DCED

    97. All of the above
    98. Return to previous menu
    99. Exit

   selection:  \*L97\*C
.oE
...\" 
.nP
...\" 
.P
As \*Ldcetest_config\*O installs the tests, it will display a series of messages updating
you on its progress:
...\" 
.sp 2
.FG "Installing System Tests: Installation Messages"
.oS
\s-1
                    installing test/systest/admin ...
                    installing test/tet/system/directory/cds ...
                    installing test/systest/file ...
...\" ################################################################################
...\" ######### This messages appears on OSF/1 because we do not support DFS #########
...\" #                                                                              #
...\" /myproject/mybuild/install/<machinetype>/dcetest/dce1.0/dce1.0/test/systest/file does not exist
...\" 
...\"         Ensure that the file is in the install tree
...\" 
...\" /myproject/mybuild/install/<machinetype>/dcetest/dce1.0/test/systest/file not installed...
...\" #                                                                              #
...\" ######### This messages appears on OSF/1 because we do not support DFS #########
...\" ################################################################################
...\" 
                    installing test/systest/directory/gds ...
                    installing test/tet/system/rpc ...
                    installing test/tet/system/security ...
                    installing test/tet/system/threads ...
                    installing test/tet/system/time ...
                    installing test/tet/system/audit ...
                    installing test/tet/system/I18N ...
                    installing test/tet/system/svc ...
                    installing test/tet/system/dced ...
                    installing test/tet/system/profile.dcest.tet ...
                    installing test/systest/dcetest_config ...
                    installing test/tet/system/tools ...
                    installing test/systest/profile.dcest ...

\s+1
.oE
...\" 
.P
To install some subset of tests, simply select the appropriate choice in the
System Test Installation Menu instead of ``97'', until you have installed all
the tests you want.
...\" 
...\" 
...\" 
.nP
...\" ----------------------------------------------------------------------
.H 3 "Configuring for System Test with dcetest_config"
...\" ----------------------------------------------------------------------
...\" 
.P
The configuration step for system testing is mainly a matter of specifying
where logs and temporary files are to be created by the tests. Select ``2''
from the Main Menu:
...\" 
...\" 
.sp 2
.FG "Configuring for System Test"
.oS
     DCE Test Main Menu

     1. Install
     2. Configure

    99. Exit

    selection:  \*L2\*C


    You need to specify the directory where the logs would be stored.
    Please locate this directory somewhere other than the root
    partition, if possible. A softlink would be established to
    point to this directory from /dcetest/dcelocal/status
    Enter directory to store the logs: \*L/dcetest/dcelocal/results\*C

    Directory /dcetest/dcelocal/results does not exist...
    Do you want it it to be created (y) \*Ly\*C

    You need to specify the directory where the temporary files
    would be stored.
    Enter directory to store the temporary files: \*L/usr/tmp\*C

    Please ensure that /usr/tmp is periodically cleaned...
.oE
...\" 
.P
You will be prompted for the paths at which you want logfiles and temporary
files to be created. Note that \*Ldcetest_config\*O will create a soft
link (called \*L/dcetest/dcelocal/status\*O) to the directory you specify.
...\" 
...\" 
.nP
...\" 
.P
At the end of this step, you will be returned to the Main Menu:
...\" 
.sp 2
.FG "End of Configuration"
.oS
     DCE Test Main Menu

     1. Install
     2. Configure

    99. Exit

    selection:  \*L99
.oE
...\" 
.P
You have now completed the configuration step, and can exit from
\*Ldcetest_config\*O.
...\" 
...\" ZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZ
...\" 
...\" ----------------------------------------------------------------------
.H 2 "Using TET"
...\" ----------------------------------------------------------------------
...\" 
...\" 
...\" 
.P
The DCE system tests that are run under TET fall into two categories:
...\" 
.BL
.LI
Tests that are run directly by invoking TET itself
.P
There is only one DCE system test in this category, namely \*Lrpc.sec.2\*O.
The user invokes TET (\*Ltcc\*O), which runs the \*Ldcerpsec\*O script.
...\" 
.LI
Tests that are run by invoking a \*Lrun.\*Vcomponent_name\*O script. The
following table shows these tests:
.LE
...\" 
...\" 
.TB "DCE System Test Suites and TET Scenarios"
.TS H
center tab(@) box;
lb | lb | lb
lb | lb | lb.
Component@Test Suite Name@Scenario Name
_
.TH
_
cds@systest/directory/cds@cdsserv
@@dcecdsacl6
@@hclcfg001
@@hclrel001
_
I18N@systest/I18N@I8NSAN001
@@I8NSAN002
_
audit@systest/audit@audstr001
@@audrel001
_
svc@systest/svc@svccfg001
@@svccfg002
@@svccfg003
@@svccfg004
@@svccfg005
@@svccfg006
_
dced@systest/dced@dcdrel001
@@dcdrel002
@@dcdrel003
_
rpc@systest/rpc@dcerpbnk
@@dcerpcrun
@@dcerpbnk_auth
_
security@systest/security@dceseacl
@@dceseact
@@dcesepol
@@dcesestr
@@dcesergy
@@dlgcfg001
...\" @@dlgcfg002
...\" @@dlgstr001
@@eraobj001
@@erarel001
_
threads@systest/threads@dceth002
@@dcethmut
@@dcethrpc
@@dcethrpc_auth
_
dts@systest/time@dcetmsyn
...\" 
.TE
...\" 
...\" 
.P
The following section gives a basic overview of TET operation. For more detailed
information consult the following documents:
...\" 
.BL
.LI
\*VTest Environment Toolkit: Architectural, Functional, and Interface Specification\*O
.P
located at:
.DS
    \*Vdce-root-dir\*L/dce/src/test/tet/doc/tet_spec.ps\*O
.DE
...\" 
.LI
\*VTest Environment Toolkit: Programmer's Guide\*O
.P
located at:
.DS
    \*Vdce-root-dir\*L/dce/src/test/tet/doc/tet_prog_guide.ps\*O
.DE
...\" 
.LE
...\" 
.P
Unformatted \*Lnroff\*O source (using the \*Lmm\*O macro package) for each of the
above documents is also available in the directories in the
.DS
    \*Vdce-root-dir\*L/dce/src/test/tet/doc\*O
.DE
...\" 
.P
directory.
...\" 
.P
The following sections describe the use of TET to invoke the DCE system tests.
...\" 
.sp 1
.P
In the examples given, it is assumed that the tests are being run in a DCE cell
that contains at least three machines configured as follows:
...\" 
...\" 
...\" 
.VL 1i
.LI "\*Lmachine1:\*O"
CDS Server, Security Server, Local Time Server \(em NTP provider
...\" 
.LI "\*Lmachine2:\*O"
CDS Client, Security Client, Local Time Server
...\" 
.LI "\*Lmachine3:\*O"
CDS Client, Security Client, Local Time Server
...\" 
.LE
...\" 
...\" 
...\" 
...\" 
...\" 
...\" 
...\" ----------------------------------------------------------------------
.H 3 "Overview of TET Use"
...\" ----------------------------------------------------------------------
...\" 
.P
Following is the structure of tests within the TET environment:
...\" 
...\" 
...\" 
.VL 2i
...\" 
.LI "\*Ltest\ suite\*O"
contains a related group of test cases. Test cases are grouped together in scenarios.
...\" 
.LI "\*Ltestcase\*O"
A testcase is an independent executable (a shell script or compiled C program)
which contains one or more test \*Vpurposes\*O. Test purposes are combined together
into invocable components within a testcase.
...\" 
.LI "\*Ltest\ purpose\*O"
A test purpose is the component of the tests that report PASS/FAIL results. Each
test purpose is a shell of a C function.
...\" 
.LI "\*Lscenario\*O"
A scenario is a collection of test cases that are executed together. Scenarios are
defined in the \*Ltet_scen\*O file at the top of each test suite. Every test suite
has an ``all'' scenario that runs all test cases within a test suite.
...\" 
.LI "\*Linvocable\ component\*O"
An invocable component (IC) consists of one or more test purposes. There can be one
or more IC per testcase. An IC is the smallest group of test purposes that can be
executed independently. ICs are defined in data structures that are located inside
of each testcase.
...\" 
...\" 
.LE
...\" 
.P
.P
Before any test cases can be run you must define the \*LTET_ROOT\*O environment
variable as follows:
...\" 
.DS
    \*LTET_ROOT=/dcetest/dcelocal/test/tet\*O
.DE
...\" 
.P
\*LTET_ROOT\*O defines the location of all the test suites and support utilities.
When combined, \*LTET_ROOT\*O and the test suite name will define the location of
the top of the test suite.
.P
To run a test suite that uses TET you use the \*Ltcc\*O command in the following
form:
...\" 
.iS
    tcc -e [\*Voptional_switches\*L] \*Vtest_suite \*L[\*Vscenario\*L]
.iE
...\" 
.P
For the DCE system tests, the \*L-e\*O flag is required. It tells \*Ltcc\*O to
\*Le\*Oxecute the specified test suite. \*Ltcc\*O has other modes that are not used
by the DCE system tests.
.P
There are many other switches that you may find useful, including:
...\" 
...\" 
.VL 1.5i
.LI "\*L-p\*O"
tells \*Ltcc\*O to print the name of each testcase as it executes it. This is a good
way to track the progress of the running tests.
...\" 
.LI "\*L-j\ \*Vfilename\*O"
tells \*Ltcc\*O to write the journaled test results to the designated \*Vfilename\*O.
...\" 
.LI "\*L-v\ \*Vvariable\*L=\*Vvalue\*O"
Sets a TET variable to be used by the testcase. Default values for TET variables are
specified in the \*Ltetexec.cfg\*O file located in the top of the test suite. Values
specified on the command line override the values in the \*Ltetexec.cfg\*O file. The
variables that are used by the specific test suites are documented in the sections
specific to each test suite.
...\" , later in this chapter.
...\" 
.LE
...\" 
...\" 
.P
For information on other \*Ltcc\*O command line options, consult the TET specification.
.P
\*Vtest_suite\*O is the name of the test suite you wish to run. It also specifies the
relative path from \*LTET_ROOT\*O to the location of the test suite to be run.
.P
\*Vscenario\*O tells \*Ltcc\*O which pieces of the test suite to run. If you do not
specify a scenario, the ``all'' scenario will be run. The scenarios for each test
suite are defined in the \*Ltet_scen\*O file at the top of the test suite tree.
.P
When you run \*Ltcc\*O the first thing that it will report is the location of the
\*Vjournal file\*O. The journal file contains the results of the test scenario run.
Each line in a journal file starts with a number code indicating the type of information
appearing on that line. For example, lines that contain result codes start with ``220''.
To get a quick view of the results of a test run you can do the following:
...\" 
.iS
    grep "^220" \*Vjournal_file\*O
.iE
...\" 
.P
\(emwhich will cause all the PASS/FAIL results from the journal file to be displayed.
For more details on possible errors and causes of failures you will have to read the
details of the results file.
...\" 
.P
Other important journal line codes are:
...\" 
...\" 
.VL .5i
.LI "\*L50\*O"
Identifies lines that contain test case execution error messages from \*Ltcc\*O.
...\" 
.LI "\*L200\*O"
Identifies lines marking the beginning of each test purpose.
...\" 
.LI "\*L220\*O"
Identifies lines marking the end of each test purpose and containing the result from
the test purpose.
...\" 
.LI "\*L520\*O"
Identifies lines that contain text printed by the test purpose.
...\" 
.LE
...\" 
...\" 
...\" 
...\" 
...\" 
...\" 
...\" 
...\" 
...\" 
...\" ----------------------------------------------------------------------
.H 3 "Running DCE System Tests under TET"
...\" ----------------------------------------------------------------------
...\" 
.P
TET assumes when running DCE system tests that the following environment variables
have the following values:
...\" 
.VL 1.5i
.LI "\*LTET_ROOT\*O"
\*L/dcetest/dcelocal/test/tet\*O
.P
This is the base directory for all tests which run under TET.
...\" 
.LI "\*LDCELOGDIR\*O"
\*L/dcetest/dcelocal/status\*O
.P
This is the base directory for DCE Functional and System test output.
...\" 
.LI "\*LSTTMPDIR\*O"
\*L/tmp\*O
.P
This is the base directory for temporary files.
...\" 
.LE
...\" 
...\" 
...\" 
...\" ----------------------------------------------------------------------
.H 4 "DCE System Tests that can be Invoked with ``Run'' Scripts"
...\" ----------------------------------------------------------------------
...\" 
.P
The installed names of the scripts and tests that can be run from a \*Lrun\*O
script are as follows:
...\" 
...\" 
.BL
.LI
\*L$TET_ROOT/system/directory/cds/bin/run.cds\*O
.VL 1.5i
...\" 
.LI "\*Ldcecdsacl6\*O"
CDS ACL Manager Test (formerly \*Lcds.acl.6\*O)
...\" 
.LI "\*Lcdsserv\*O"
CDS Directory Service Stress Test (formerly \*Lcds.server.4\*O)
...\" 
.LE
...\" 
...\" 
.LI
\*L$TET_ROOT/system/directory/cds/bin/run.hcell\*O
.VL 1.5i
...\" 
.LI "\*Lhclcfg001\*O"
Establishes intercell authentication with a list of cells using
\*Lrgy_edit\*O.
...\" 
.LI "\*Lhclrel001\*O"
Performs intercell testing to specified list of cells.
...\" 
.LE
...\" 
...\" 
.LI
\*L$TET_ROOT/system/dced/ts/lib/run.dced\*O
.VL 1.5i
...\" 
.LI "\*Ldcdrel001\*O"
\*Ldced\*O endpoint reliability test.
...\" 
.LI "\*Ldcdrel002\*O"
\*Ldced\*O server configuration and server execution service reliability
test.
...\" 
.LI "\*Ldcdrel003\*O"
\*Ldced\*O hostdata, keytab, and ACL service reliability test.
...\" 
.LE
...\" 
...\" 
.LI
\*L$TET_ROOT/system/rpc/bin/run.rpc\*O
.VL 1.5i
.LI "\*Ldcerpsec\*O
RPC-Security System Test
...\" 
.LI "\*Ldcerpper\*O"
RPC system test version of RPC \*Lperf\*O functional tests
...\" 
.LI "\*Ldcerpbnk\*O"
RPC Object Registry, Threads, CDS, and Security Test
...\" 
.LI "\*Ldcerpbnk_auth\*O"
Authenticated RPC version of \*Ldcerpbnk\*O
...\" 
.LI "\*Ldcerpcrun\*O"
RPC Stress Test (formerly \*Lrpc.runtime.1\*O)
...\" 
.LE
...\" 
...\" 
.LI
\*L$TET_ROOT/system/security/bin/run.sec\*O
...\" 
.VL 1.5i
...\" 
.LI "\*Ldceseacl\*O"
Registry Access Control List (ACL) and Stress Test
...\" 
.LI "\*Ldceseact\*O"
Tests Additions and Deletes in the Security Registry
...\" 
.LI "\*Ldcesepol\*O"
Security policy option test
...\" 
.LI "\*Ldcesergy\*O"
Security Registry Login and Administration Stress Test (formerly \*Lsec.rgy.7\*O)
...\" 
.LI "\*Ldcesestr\*O"
Multiple-client Security Registry Stress Test
...\" 
.LI "\*Ldlgcfg001\*O"
Delegation Configuration Test
...\" 
.LI "\*Ldlgcfg002\*O"
Delegation Configuration Test
...\" 
.LI "\*Ldlgstr001\*O"
Delegation Stress Test
...\" 
.LI "\*Leraobj001\*O"
Extended Registry Attributes ACL Test
...\" 
.LI "\*Lerarel001\*O"
Extended Registry Attributes Stress Test
...\" 
...\" 
.LE
...\" 
...\" 
...\" 
.LI
\*L$TET_ROOT/system/audit/bin/run.aud\*O
...\" 
.VL 1.5i
.LI "\*Laudstr001\*O"
Audit Service Stress Test
.LI "\*Laudrel001\*O"
Audit Service Reliability Test
.LE
...\" 
...\" 
...\" 
.LI
\*L$TET_ROOT/system/threads/bin/run.thr\*O
.VL 1.5i
.LI "\*Ldceth002\*O"
Threads Creation Test
.LI "\*Ldcethmut\*O"
Threads Creation and Mutex Exclusion Test
.LI "\*Ldcethrpc\*O"
RPC Server and Client Threads Test
.LI "\*Ldcethrpc_auth\*O"
RPC Server and Client Threads Test \(em authenticated version
.LE
...\" 
...\" 
.LI
\*L$TET_ROOT/system/time/bin/run.time\*O
.VL 1.5i
.LI "\*Ldcetmsyn\*O"
Test DTS Local Synchronization with DTS Servers
.LE
...\" 
...\" 
.LI
\*L$TET_ROOT/system/svc/bin/run.svc\*O
.VL 1.5i
.LI "\*Lsvccfg001\*O"
Serviceability Configuration Test 1
...\" 
.LI "\*Lsvccfg002\*O"
Serviceability Configuration Test 2
...\" 
.LI "\*Lsvccfg003\*O"
Serviceability Configuration Test 3
...\" 
.LI "\*Lsvccfg004\*O"
Serviceability Configuration Test 4
...\" 
.LI "\*Lsvccfg005\*O"
Serviceability Configuration Test 5
...\" 
.LI "\*Lsvccfg006\*O"
Serviceability Configuration Test 6
...\" 
.LE
...\" 
...\" 
...\" 
.LE
...\" 
...\" 
...\" 
...\" ----------------------------------------------------------------------
.H 3 "Using the ``Run'' Scripts: An Example"
...\" ----------------------------------------------------------------------
...\" 
.nS "note"
You \*Vmust\*O be using the Korn shell (\*Lksh\*O) in order to run the DCE
system tests under TET, as described in this and the following sections.
.nE
...\" 
...\" 
...\" 
.P
To run DCE system tests which use TET and the \*Lrun.\*Vcomponent_name\*O scripts,
do the following after installing the DCE systems tests and TET:
...\" 
.oS
    $ \*Lcd /dcetest/dcelocal/test/tet/system\*C
    $ \*L. profile.dcest.tet		\*V# Set up System Test Environment\*C
    $ \*Lrun.thr -l 2 dceth002		\*V# Run dceth002 just as an example
.oE
...\" 
.P
The example shown above will run two iterations (\*L-l 2\*O) of \*Ldceth002\*O,
creating some output in and under the standard directory, e.g.:
...\" 
.DS
    \*L$DCELOGDIR/system/dceth002.\*Vhostname\*L.931022124807\*O
.DE
...\" 
.P
\(emwhere \*Vhostname\*O is the name of the machine the test was invoked on,
and the series of concluding digits is a starting timestamp in the form of
\*Vyymmddhhmmss\*O. The \*Lrun\*O script you invoke will tell you the name of
the directory to which it writes its output. The contents of this directory
will look something like the following:
...\" 
.oS
    $ ls -lsFR $DCELOGDIR/system/dceth002.\*Vhostname\*C.931022124807\*C
    total 6
       2 drwxrwxrwx   2 root     system         512 Oct 22 12:49 fail/
       2 drwxrwxrwx   2 root     system         512 Oct 22 12:48 pass/
       2 -rw-rw-rw-   1 root     system         326 Oct 22 12:49 pass_fail_log

    /dcetest/dcelocal/status/system/dceth002.\*Vhostname\*C.931022124807/fail:
    total 0

    /dcetest/dcelocal/status/system/dceth002.\*Vhostname\*C.931022124807/pass:
    total 4
       4 -rw-rw-rw-   1 root     system        1276 Oct 22 12:48 journal.00001
.oE
...\" 
.P
When the \*Lrun.thr\*O script was invoked, a directory was created for TET journal
files for the iterations of the test that passed, and another was created for any
failed iterations. The \*Lpass_fail_log\*O contains a header, one status line for
each iteration, and a trailer. The contents of the \*Lpass_fail_log\*O file from
the example above would look something like the following:
...\" 
...\" For more information on the
...\" standard output of these tests, see section [REF RUNDOT_OUTPUT].
...\" 
.oS
    COMMAND: run.thr -l 2 dceth002
    PLATFORM: \*Vhostname\*C(osf1i386)
    TEST NAME: dceth002
    STARTED AT: 10/22/93-12:48:07
    NEWEST /OPT/DCELOCAL/BIN: Oct 21 23:55
    10/22/93-12:48:42       PASS    \*Vpathname of journal file\*C
...\" 
...\"                               /dcetest/dcelocal/status/system/dceth002.\*Vhostname\*C.931022124807/pass/journal.00001
...\" 
    10/22/93-12:49:45       PASS    <journal.00002 deleted>
    COMPLETED: 10/22/93-12:49:45
.oE
...\" 
.P
To view the results of the test, you would enter the following:
...\" 
.oS
    $ \*Lrun_summary.ksh $DCELOGDIR/system/dceth002.\*Vhostname\*L.931022124807
.oE
...\" 
.P
\(emwhich will produce output something like the following (assuming that no
errors occurred during the test; if there were errors, they will be listed
in the results as well):
...\" 
...\" 
.oS
  \*Vhostname\*C(osf1i386)dceth002:       pass = 2, fail = 0
              "run.thr -l 2 dceth002" completed at 10/22/93-12:49:45
              /opt/dcelocal/bin complete: Oct 21 23:55
              Failures under /dcetest/dcelocal/status/system/dceth002.\*Vhostname\*C.931022124807
                      None
.oE
...\" 
...\" 
.P
For more information on \*Lrun_summary.ksh\*O see ``Checking Test Results''
later in this chapter.
.P
Finally, to clean up when you had finished evaluating the results, you
would enter:
...\" 
.oS
    $ \*Lrm -r $DCELOGDIR/system/dceth002.\*Vhostname\*C.931022124807
.oE
...\" 
...\" 
...\" 
...\" ----------------------------------------------------------------------
.H 3 "Prerequisites for Running System Tests Using the ``Run'' Scripts"
...\" ----------------------------------------------------------------------
...\" 
.P
Each \*Lrun.\*Vcomponent_name\*O script contains some test-specific option
processing code of its own and a call to the
.DS
    \*L$TET_ROOT/system/tools/run_loops.ksh\*O
.DE
...\" 
.P
script, which is used in common by all the \*Lrun\*O scripts. \*Lrun_loops.ksh\*O
controls test iteration, checks test output for pass/fail, reports totals, and
writes the test output to a standard location.
...\" 
...\" 
...\" 
...\" 
...\" 
.P
Before running any of the DCE system tests, note the following.
.P
The DCE System Tests should be run in a standalone (i.e., a non-production)
cell. The tests place a heavy load both on DCE and on the host machines,
and they do so for many hours or days. Such behavior is generally considered
incompatible with a production environment. Furthermore, the only automatic way
to finish cleaning up after running the DCE System Tests is to shut down the cell.
All DCE credentials are deleted, and the unusable memory which accumulates in
the DCE servers when these tests run is reclaimed.
.P
The cell in which the tests are to be run must be
created with the default cell administrator name (\*Lcell_admin\*O) and password
(\*L-dce-\*O). This is necessary because these names are hardcoded in the
tests themselves. Such a configuration is obviously inappropriate for a cell
intended for general use.
...\" 
...\" 
.P
For the DCE system tests runnable under \*Lrun\*O scripts, the following things must
be true before the tests can be successfully run:
...\" 
...\" 
.BL
.LI
The \*L/.rhosts\*O or equivalent file on each machine in the test cell must include
all machines in the cell, since the DCE System Tests use \*Lrsh\*O or its equivalent
to start processes on other machines in the cell.
...\" 
...\" 
.LI
All DCE System Test and TET software must have been installed by \*Ldcetest_config\*O
on all machines in the DCE System Test cell. For instructions on how to do this, see
``Installing TET and the DCE Functional and System Tests'', earlier in this chapter.
...\" 
...\" 
.LI
The DCE System Tests \*Vrequire\*O the following environment variables to have the
following values:
...\" 
.VL 1i
.LI "\*LTET_ROOT\*O"
\*L/dcetest/dcelocal/test/tet\*O
.LI "\*LSTTMPDIR\*O"
\*L/tmp\*O
.LE
...\" 
.P
Note that this must be true on \*Vevery\*O system in the test cell. It is acceptable to
achieve arrange this via symbolic links. In any case, failure to do this will result in
unpredictable test behavior.
...\" 
...\" 
...\" 
.LI
A number of quotas and limits must be set and/or monitored in order to safely and
successfully run the DCE System Tests. All such account-specific changes should be
done to the ``root'' account, which is the account from which DCE and all DCE System
Tests must be run.
...\" 
...\" 
.LI
Substantial disk space is required to run the tests. The tests will fail and possibly
bring down both DCE and the system if the disks fill up. Disk usage varies greatly,
depending on test choice and run duration. Twenty megabytes of free space is recommended
as an \*Vabsolute minimum\*O for the disk holding the top-level directory for DCE System
Test output,
.DS
    \*L$DCELOGDIR/system\*O
.DE
...\" 
...\" 
.LI
Too little swap space is another potential problem. Some of the DCE servers grow slowly
as the DCE System Tests run. Again, the rate and degree of such behavior depends on the
platform used, which tests are run, and test run duration. Yous should consult your
platform's system manuals and tune your machines for heavy memory usage, including
allocating large swap files.
...\" 
...\" 
.LI
Note that CPU time limits are a problem for DCE servers. Set ``root'' time limits to
unlimited.
...\" 
...\" 
...\" 
.LI
Make sure you are using the Korn shell (\*Lksh\*O) and that you have sourced the
...\" 
.DS
    \*L/dcetest/dcelocal/test/tet/system/profile.dcest.tet\*O
.DE
...\" 
.P
file in your current shell before running any of the DCE System Tests. This will
setup the shell variables the tests need. The main variables defined are:
...\" 
...\" 
.VL 1.5i
.LI "\*LTET_ROOT\*O"
\*L/dcetest/dcelocal/test/tet\*O
.P
This is the base directory for all tests which run under TET.
...\" 
.LI "\*LDCELOGDIR\*O"
\*L/dcetest/dcelocal/status\*O
.P
This is the base directory for DCE Functional and System test output.
...\" 
.LI "\*LSTTMPDIR\*O"
\*L/tmp\*O
.P
This is the directory for creation of temporary files.
...\" 
.LE
...\" 
...\" 
.nS "note"
Note that sourcing \*Lprofile.dcest.tet\*O clears the \*LENV\*O environment variable,
thus affecting the behavior of all lower level Korn shell invocations. This will be a
problem for any site that attempts to access \*LMANDATORY\*O Korn shell definitions
via the \*LENV\*O variable.
.nE
...\" 
.P
There is no requirement that the machines in the system test cell have the
``root'' account \*Vdefault\*O shell be the Korn shell (/bin/ksh). If the
default shell is something other than \*Lksh\*O, you need only invoke the
Korn shell before sourcing \*Lprofile.dcest.tet\*O.
...\" 
...\" 
.LE
...\" 
...\" 
...\" 
...\" ----------------------------------------------------------------------
.H 3 "Standard DCE System Test Output Location"
...\" ----------------------------------------------------------------------
...\" 
.P
Each time you run a system test with a \*Lrun\*O script, a new directory will
be created in the ``standard location''. The standard output location for the DCE
System Tests is:
.DS
    \*L$DCELOGDIR/system/\*Vtestname\*L.\*Vhostname\*L.\*Vyymmddhhmmss\*O
.DE
...\" 
.P
If \*LDCELOGDIR\*O is non-existent or empty, the default directory
.DS
    \*L/dcetest/dcelocal/status\*O
.DE
...\" 
.P
will be used. No matter what directory name is specified by \*LDCELOGDIR\*O,
the \*Lrun_loops.ksh\*O script will append \*L/system\*O to it.
.P
Note that there is no \*Lrun\*O script option by which \*LDCELOGDIR\*O can
be specified or overridden. You must either set the variable yourself to the
desired pathname, or the
.DS
    \*L/dcetest/dcelocal/status\*O
.DE
...\" 
.P
default directory must already exist when the \*Lrun\*O script is invoked.
.P
The final directory name
.DS
    \*Vtestname\*L.\*Vhostname\*L.\*Vyymmddhhmmss\*O
.DE
...\" 
.P
is designed to allow you to pick out a particular run by what you ran, where you
ran it, and when you started it. The fine granularity of this name enables you to
direct the output of multiple runs to a single collection point without worrying
about name collisions.
.P
Because all the normal output from one run of these tests is created under a
single directory, deleting the output of that run when you are finished with
it is easily done with a
...\" 
.iS
    rm -r \*Vdir_name\*O
.iE
...\" 
.P
command.
.P
The normal output of a test run is found in a structure of files underneath the
standard location. The directories and files found there are as follows:
...\" 
.BL
.LI
\*Lpass\*O
.P
Directory containing results of passed iterations.
...\" 
.LI
\*Lpass/\*Vjournal.NNNNN\*O
.P
Pass journal files.
...\" 
.LI
\*Lfail\*O
.P
Directory containing results of failed iterations.
.LI
\*Lfail/\*Vjournal.NNNNN\*O
.P
Failure journal files.
...\" 
.LI
\*Lpass_fail_log\*O
.P
Log file of all test iterations, both passed and failed.
...\" 
.LE
...\" 
...\" 
...\" 
.P
The journal files are TET format journals. \*VNNNNN\*O is a digit group that
represents the iteration number of the test whose results are recorded. You
should refer to the TET documentation for the details of the format of these
files. In general, the format is that each line has a TET-defined header before
and between a vertical bar pair, followed by the test- or TET-generated text.
Test-generated messages start on the line labelled with a ``520'' code. The
following example shows part of the contents of a typical journal file; the
last two lines were generated by the test itself.
...\" 
.oS
    10|0 /ts/cds.server.4/cdsserv.ksh 14:19:03|TC Start, scenario ref 35-1
    15|0 1.9 1|TCM Start
    520|0 0 25874 1 1|Starting test CDSSERV
    400|0 1 1 14:19:06|IC Start
    200|0 1 14:19:06|TP Start
    520|0 1 25874 1 2|The test will execute for: 900 sec.
    520|0 1 25874 1 3|Executing in cell: /.../dce3_cell.qadce.osf.org
.oE
...\" 
.P
The TET journal files are always created and written in the \*Lfail\*O directory
and only moved into the \*Lpass\*O directory if and when the test iteration has
passed. At least one passed test iteration will have its journal file saved,
assuming that any iterations passed at all. All journals from failed iterations
are left in the \*Lfail\*O directory.
.P
The \*Lpass_fail_log\*O file is created by the \*Lrun.\*Vcomponent_name\*O script
and has the following format:
...\" 
...\" 
.oS
    COMMAND: \*Vcommand invoking the run\*C
    PLATFORM: \*Vname of machine the test was run on\*C (\*Vplatform type\*C)
    TEST NAME: \*Vtest name\*C
    STARTED AT: \*Vtime stamp recording when the run was started\*C
    NEWEST /OPT/DCELOCAL/BIN: \*Vtime stamp of when DCE was built\*O
       \*VPass/fail lines, one per iteration.  Each line contains:
            iteration completion timestamp
            <tab>
            PASS or FAIL keyword
            <tab>
            full journal file specification or delete message\*C
    COMPLETED: \*Vtimestamp indicating when all iterations of run completed\*O
.oE
...\" 
.P
The ``COMPLETED'' line at the end of the file shows that the requested testing
was run to normal completion, whether successful or not; i.e. that the run did
not hang.
...\" 
...\" 
.P
Each of the tests sends test-specific output to standard output. However,
since all these tests ultimately run under \*Lrun_loops.ksh\*O, the text
sent to standard output is always surrounded by a series of standard lines
of information, as in the following example:
...\" 
...\" 
.oS
    Starting DCETH002 iteration 1 at 0 seconds executed, 11/12/93-14:37:22
    journal file name is:
    /dcetest/dcelocal/status/system/dceth002.\*Vhostname\*C.931112143719/fail/journal.00001\*C
     \*VOutput from DCETH002\*C
     \*VOutput from DCETH002\*C
     \*VOutput from DCETH002\*C
    PASSED,     Test "DCETH002_C":      Test ran successfully.
    Completed iteration 1 successfully at 18 seconds.
    Journal file moved to
    /dcetest/dcelocal/status/system/dceth002.\*Vhostname\*C.931112143719/pass/journal.00001

    Command "run.thr -l 1 dceth002" completed at 11/12/93-14:37:41
    All iterations on DCETH002 completed without error!
    See synopsis of iteration status in
    /dcetest/dcelocal/status/system/dceth002.\*Vhostname\*C.931112143719/pass_fail_log
    or use $TET_ROOT/system/tools/run_summary.ksh for more information.
.oE
...\" 
...\" 
.P
There is a header and a trailer for each iteration of the test. Totals are
output when all iterations have completed. Other information includes the
pass/fail status of each iteration and of the test run as a whole.
...\" 
...\" 
...\" 
...\" 
...\" 
...\" ----------------------------------------------------------------------
.H 3 "Command Line Options Common to Some or All of the ``Run'' Scripts"
...\" ----------------------------------------------------------------------
...\" 
.P
The basic \*Lrun.\*Vcomponent_name\*O script command line to invoke a DCE system
test has the following general form:
...\" 
.iS
    run.\*Vcomponent_name\*L \*V{\*L-l \*Vloops | \*L-t \*Vhours} [other_opts] test_name [parameters]
.iE
...\" 
.P
Either the \*L-l\*O or \*L-t\*O flag is required, as is the test name. In DCE 1.1 the
names of the \*Lrun\*O scripts are as follows:
...\" 
.BL
.LI
\*Lrun.cds\*O
.LI
\*Lrun.rpc\*O
.LI
\*Lrun.sec\*O
.LI
\*Lrun.thr\*O
.LI
\*Lrun.time\*O
.LI
\*Lrun.hcell\*O
.LI
\*Lrun.dced\*O
.LI
\*Lrun.aud\*O
.LI
\*Lrun.svc\*O
.LE
...\" 
...\" 
.P
The following command line options are common to some or all of the tests:
...\" 
...\" 
...\" 
.sp 1
...\" 
.VL 1.5i
.LI "\*L-h\*O"
List test-specific options.
.LE
.P
Causes the test-specific options for a test to be listed. For \*Lrun.thr\*O,
you must specify the test name as an argument to this option. Note that there
is no test-specific help for \*Lrun.time\*O. However, all the \*Lrun\*O scripts
give basic help messages if invoked with no arguments.
...\" 
...\" 
.sp 1
...\" 
.VL 1.5i
.LI "\*L-l\ \*Vnumber\*O"
Number of external loops (iterations) to run.
...\" 
.LI "\*L-t\ \*Vhours\*O"
Time allowed for external loops (iterations) to run.
...\" 
.LI "\*L-L\ \*Vnumber\*O"
Number of internal loops to run.
...\" 
.LI "\*L-T\ \*Vhours\*O"
Time allowed for internal loops to run.
...\" 
.LE
...\" 
.P
The above four flags specify in various ways the number of times or hours that
the test is to be run. An iteration count is most useful for quickly checking the
test, e.g. invoking a test with something like ``\*L-l 1\*O'' or ``\*L-l 2\*O''
will allow you to quickly verify whether the test is present, whether it runs,
and so on.
.P
For longer test runs it is more useful to specify a time rather than an
iteration count; for example ``\*L-t 60\*O'' for a Friday night-to Monday morning,
60 hour run. The \*Vhours\*O parameter may contain a decimal point; e.g.,
``\*L-t 1.5\*O'' is a valid specifier for a 90 minute run. Note that the \*Lrun\*O
scripts make \*Vno\*O time estimates. If at the conclusion of an iteration only
one second is left in a specified time interval, the \*Lrun\*O script will start
another iteration of the test. Note also that the \*Lrun\*O scripts make extensive
use of the Korn shell \*LSECONDS\*O variable. You should not alter the tests in any
way that affects this variable's value.
.P
The \*L-l\*O and \*L-t\*O flags both control \*Vexternal\*O test iterations, that is,
loops in which the entire test is repeated, including:
...\" 
.BL
.LI
TET invocation
.LI
creation of a new journal file
.LI
test initialization
.LI
invocation of the test itself
.LI
cleanup
.LE
...\" 
.P
The \*L-L\*O and \*L-T\*O flags accept the same parameters as \*L-l\*O and \*L-t\*O.
For tests for which they are available, they control \*Vinternal\*O test looping,
in other words: the number of times the test itself is executed within a single
invocation of TET (including journal file creation and cleanup). The \*L-L\*O and
\*L-T\*O options are available for the following \*Lrun\*O script/test combinations:
...\" 
.sp 1
...\" 
.VL 1i
.LI "\*Lrun.cds\*O"
\*Lcdsserv\*O
.LI "\*Lrun.rpc\*O"
\*Ldcerpcrun\*O
.LI "\*Lrun.sec\*O"
\*Ldcesergy\*O
.LE
...\" 
.P
The \*L-l\*O and \*L-t\*O options are mutually exclusive, but either one or the other
is required for most tests. The \*L-L\*O and \*L-T\*O are likewise mutually exclusive,
but for the tests listed above it is acceptable to specify one internal loop control
(\*L-L\*O or \*L-T\*O) along with the required external iteration control (\*L-l\*O or
\*L-t\*O).
...\" 
...\" 
.sp 1
...\" 
.VL 1.5i
.LI "\*L-c\*O"
Keep all journal files from successful iterations.
.LE
...\" 
.P
Normally, when a successful external iteration of the test is completed, the
journal file is deleted, and the only record of the iteration is a single line in
\*Lpass_fail_log\*O noting that the iteration passed, when it completed, and that
\*Ljournal.\*VNNNNN\*O was deleted.
.P
There are three possible reasons why a journal file will not automatically be
deleted:
...\" 
.BL
.LI
The test iteration failed, in which case the journal file is saved in the \*Lfail\*O
subdirectory.
.LI
The journal file was for the first successful iteration (usually \*Ljournal.00001\*O).
.LI
The \*L-c\*O option was specified, in which case all journal files are kept.
.LE
...\" 
...\" 
.sp 1
...\" 
.VL 1.5i
.LI "\*L-e\ \*Vnumber\*O"
Maximum number of consecutive errors allowed before quitting (default is 50)
.LI "\*L-E\ \*Vnumber\*O"
Total number of errors allowed before quitting (default is 500)
.LE
...\" 
.P
There is seldom any useful information to be gained from the contents of a large
number of failure journal files. Moreover, some failure modes can result in a large
number of test executions occurring in a very short time, possibly filling up the disk.
In order to prevent this, upper limits on test failures are imposed by the \*Lrun\*O
scripts by default. You can use the \*L-e\*O and \*L-E\*O flags to modify these limits.
For example, a common expedient is to specify ``\*L-e 1\*O'' which will cause the run to
terminate as soon as one error is detected.
...\" 
.sp 1
...\" 
.VL 1.5i
.LI "\*L-m\ \*Vname(s)\*O"
List of machine(s) for the test to use.
.LI "\*L-M\*O"
List of machine(s) to use should be read from <testname>.data.
.LE
...\" 
.P
Several tests require one or more additional machines for execution, and the \*L-m\*O
option is used to specify that information. Using the \*L-m\*O option to specify the
machine the test is invoked on is legal but reduces the usefulness of the test. Both
multiple ``\*L-m \*Vname\*O'' groups or a single ``\*L-m \*Vname1 .\ .\ . nameN\*O''
are accepted.
.P
The tests can also obtain the list of additional machines from the \*Vtestname\*L.data\*O
file associated with each test. The \*L-M\*O flag is used to tell the \*Lrun\*O script
that the absence of the \*L-m\*O option for a test that requires it is not an error.
The use of the \*L-M\*O option is discouraged, because it requires changing files
whenever different machines are needed to run a test. The \*L-m\*O and \*L-M\*O flags
are mutually exclusive.
.P
The tests that require a list of additional machines are the following:
...\" 
.sp 1
...\" 
.VL 1i
.LI "\*Lrun.sec\*O"
\*Ldceseact\*O, \*Ldcesepol\*O, \*Ldcesestr\*O
.LI "\*Lrun.rpc\*O"
\*Ldcerpbnk\*O, \*Ldcerpcrun\*O, \*Ldcerpper\*O
.LI "\*Lrun.thr\*O"
\*Ldcethrpc\*O, \*Ldcethrpc_auth\*O
.LE
...\" 
...\" 
...\" ----------------------------------------------------------------------
.H 3 "External and Internal Looping"
...\" ----------------------------------------------------------------------
...\" 
.P
In general, test ``looping'' can be classified into external loops (iterations)
and internal loops. A somewhat confusing collection of common and test-specific
options exists for controlling looping of the system tests. 
.P
There is no ``best way'' to run the system tests with respect to the division
between internal and external loops. Tests that support internal loops and/or
execution threads have default count parameters, and the user is thus not
required to specify them. However, explicit biasing may be done. See
``Command Line Options Common to Some or All of the ``Run'' Scripts'' for
more information.
...\" 
.P
Biasing towards more internal loops makes the tests more efficient testers of
DCE because they spend less time in initializing and cleaning up.  Furthermore,
since many tests set up accounts and such, running for an equal length of time
with higher internal bias creates fewer accounts and causes the servers to grow
less.
.P
Biasing towards a greater proportional number of external iterations affords
TET more opportunities to indicate test success or failure, which is usually
desirable in long runs. However, if the bias on internal looping is too large,
there is a risk of the test's credentials expiring. And, too, failures sometimes
occur that affect several system tests at once. Having too large a time granularity
as a result of high internal bias makes it difficult to correlate such failures.
Thus keeping the internal loop time down is desirable even though this adds to
test overhead.
.P
It is still desirable to avoid the extreme case where the test is biased completely
internally, for example as the following run would be:
...\" 
.iS
    run.cds -l 1 -T 48 cdsserv
.iE
...\" 
.P
The above command specifies that one external iteration of \*Lcdsserv\*O be run
with a 48 hour internal duration. No matter what goes wrong during this run,
there will only be a single failure from TET as a record of it., and there will
be a rather large journal file to evaluate. A more balanced approach would
be to run the test as follows:
...\" 
.iS
    run.cds -t 48 -T .25 cdsserv
.iE
...\" 
.P
\(emthat is, with 48 hours' worth of 15 minute runs.
.P
There is also the question of how to increase the load on DCE during a system
test run. Increasing the internal loop bias increases the actual DCE work done
per test executed, but that approach suffers from diminishing returns. Running more
tests simultaneously on different machines in the test cell is the right way to
make the servers busier.
.sp 1
.nS "note"
The DCE 1.1 system tests are known to have mutual interference problems within
a cell, causing test (not DCE) failures. These failures are due to name collisions
both in the filespace and in the DCE namespace.
.P
The possibility of interference should be considered when planning simultaneous
DCE system test runs. Interference of some tests with themselves has been noted
where two or more copies of the test were run simultaneously on the same machine
or even in the same cell. However, interference has not been noted with multiple,
different tests run simultaneously on different machines, one test per machine.
.P
Using DCE DFS or NFS to create common areas for the DCE system tests to use,
especially directories for temporary files, makes the interference problem
significantly worse. However, the standard output location provided by the
\*Lrun\*O scripts is a \*Vknown safe\*O exception.
.nE
...\" 
...\" 
...\" 
...\" 
...\" 
...\" ----------------------------------------------------------------------
.H 4 "Checking Test Results"
...\" ----------------------------------------------------------------------
...\" 
.P
A reporting script has been provided that produces a summary of all the DCE
system test run output collected in a single directory tree. To run it, enter:
...\" 
.iS
    run_summary.ksh \*Vdirectory\*O
.iE
...\" 
.P
\*Lrun_summary.ksh\*O does a
.DS
    \*Lfind \*Vdirectory\*L -name pass_fail_log
.DE
...\" 
.P
to find all the DCE system test run records under \*Vdirectory\*O, and then
summarizes and displays the results, including any journal file error messages
from iteration(s) that failed, if any.
.P
Following is an example of the output, showing in this case the error messages from
one iteration (out of 2569 total) of \*Ldcethrpc\*O. The test was run on an HP/UX
platform named ``dce3'', and the machines ``dce5'' and ``west'' were also used:
...\" 
.in -.5i
.oS
    dce2(hpux)      dcethrpc:       pass = 2568, fail = 1
            "run.thr -t48 -m west -m dce5 dcethrpc" completed at 11/10/93-14:18:44
            /opt/dcelocal/bin complete: Nov 4 21:15
            Failures under /dcetest/dcelocal/status/system/dcethrpc.dce2.931108141817
                    There were 6 ERRORs and/or FAILures total in
                    the 1 failed iterations.  Here's the breakdown:
                       1 - DCE_ERROR
                       1 - ERROR: Copying thd_server to west:/tmp failed
                       1 - ERROR: dcethrpc threads test failed
                       1 - ERROR:Failed to start thd_server on dce5
                       1 - Exiting the test due to failure in check_servers
                       1 - Exiting the test due to failure in kill_servers
.oE
.in +.5i
...\" 
.P
The error messages (identified by the case-insensitive keywords ``error'' or
``fail'') from journal files of failed tests are collected and sorted, duplicate
messages are counted and eliminated, and each unique error message is reported.
This simple summary can tell you a lot about whether the same or different errors
were occurring during a run, and you can learn something of the nature of the
errors as well.
.P
You can do a
.iS
    run_summary.ksh \*Vdirectory\*O
.iE
...\" 
.P
while the test is running; in this case you will see a ``\*Cdid NOT complete!\*O'' message
in the command output.
...\" 
.P
To collect the output from different test runs under a single directory, define
\*LDCELOGDIR\*O for each test process before running the test.
...\" 
...\" 
...\" 
.P
See also ``Performing a Quick Check of DCE on a Machine'' later in this chapter
for information on monitoring DCE status during DCE system test runs.
...\" 
...\" 
...\" TTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTT
...\" ----------------------------------------------------------------------
.H 2 "System Test Tools"
...\" ----------------------------------------------------------------------
...\" 
.P
This section describes the tool set developed to support the DCE System Test.
These tools are generalized enough for system vendors to use them when developing
their own test suites.
...\" 
...\" 
...\" ----------------------------------------------------------------------
.H 3 "Performing a Quick Check of DCE on a Machine"
...\" ----------------------------------------------------------------------
...\" 
.P
\*Ldce.ps\*O is a script that provides \*Lps\*O (process status) data only for
the configured DCE processes that are supposed to be running on the machine it
is executed on. It will identify any missing configured processes and any
unconfigured processes. If everything seems in order, \*Ldce.ps\*O will go on to
attempt to derive the cell name from a CDS clearinghouse name via \*Lcdscp\*O.
If that works, \*Ldce.ps\*O will report the cell name, and you can be reasonably
sure that the cell is running.
.P
\*Ldce.ps\*O returns a 0 (success) status code only if it successfully completes
all its checks; otherwise it returns a non-zero code. It provides ``\*Lps\*O''-style
output for the DCE processes and helpful messages for the user as well. An attempt
has been made to standardize the \*Ldce.ps\*O's process status output across platforms.
Following is an example of its output:
...\" 
...\" 
.oS
    $ \*L$TET_ROOT/system/tools/dce.ps\*C

    The following DCE components are running on "dce2".
       PID     STIME   TIME COMMAND
     17075  10:18:05   0:15 rpcd
     17194  10:18:54   0:28 secd -bootstrap
     18689  10:31:13   0:03 dts_ntp_provider -h paperboy -p 600 -i 30
     17654  10:21:50   0:32 cdsd -a
     18529  10:30:19   0:19 dtsd
     18556  10:30:29   0:00 dtstimed
     17625  10:21:40   0:03 cdsadv
     18481  10:30:06   0:06 sec_clientd
    DCE on "dce2" seems to be running as configured.
    Configured: dts_ntp_provider dtstimed dtsd cdsd cdsadv sec_clientd secd rpcd 
    CDSCP says "dce2" is responding in the cell "/.../my_cell".

    $ \*Lecho $?\*C
    0
.oE
...\" 
.P
Note that if you have sourced \*Lprofile.dcest.tet\*O in your current or ancestor
shell then the proper path exists in \*LPATH\*O, and you need only type \*Ldce.ps\*O.
Note also that \*Ldce.ps\*O will give incorrect results while \*Ldced\*O system
tests are being run.
...\" 
...\" 
...\" 
.zA "def,10739,1.1beta,new info"
...\" 
...\" ----------------------------------------------------------------------
.H 3 "TET Tools"
...\" ----------------------------------------------------------------------
...\" 
.P
The following sections describe several utilities that have proven useful
in integrating tests with TET.
...\" 
...\" 
...\" 
...\" ----------------------------------------------------------------------
.H 4 "tet_setup"
...\" ----------------------------------------------------------------------
...\" 
.P
\*Ltet_setup\*O is a utility used by various DCE tests run under TET. When
invoked, it executes (as root, and \*Ldce_login\*O'd as the machine machine
principal (\em for example, \*Lhosts/foobar/self\*O) a program specified to
it. The program is typically a TET-run test; executing it via \*Ltet_setup\*O
allows it to assume the principal identities necessary to test desired ACLs.
.P
It is invoked as follows:
...\" 
.iS
    tet_setup \*Vprogram\ \*O[\*Vargs\*O\ .\ .\ .\ ]
.iE
...\" 
.P
where:
...\" 
.VL 1i
.LI "\*Vprogram\*O"
is the name of the program to be executed
...\" 
.LI "\*Vargs\*O"
are the arguments, if any, to be passed to the program to be executed
...\" 
.LE
...\" 
.P
For an example of \*Ltet_setup\* use, see the contents of
...\" 
.DS
    \*Vdce-root-dir\*L/dce/src/test/admin/dcecp/ts/secval/secval_cleanup.tcl\*O
.DE
...\" 
.P
or:
...\" 
.DS
    \*Vdce-root-dir\*L/dce/src/test/admin/dcecp/ts/secval/secval_setup.tcl\*O
.DE
...\" 
.P
\*Ltet_setup\*O is installed in:
...\" 
.DS
    \*Vdce-root-dir\*L/dce/install/\*Vplatform\*L/dcetest/dce1.1/test/tet/tools\*O
.DE
...\" 
.P
Its source is located in:
...\" 
.DS
    \*Vdce-root-dir\*L/dce/src/test/tools\*O
.DE
...\" 
...\" 
...\" 
...\" 
...\" ----------------------------------------------------------------------
.H 4 "TET Utility Routines"
...\" ----------------------------------------------------------------------
...\" 
.P
Source for various miscellaneous TET utility routines is located in:
...\" 
.DS
    \*Vdce-root-dir\*L/dce/src/test/lib/libdcetst\*O
.DE
...\" 
.P
The utilities are built into a library \*Llibdcetst.a\*O which is placed in:
...\" 
.DS
    \*Vdce-root-dir\*L/dce/export/\*Vplatform\*L/usr/lib\*O
.DE
...\" 
...\" 
.P
when DCE is built. Following are brief descriptions of the routines.
...\" 
...\" 
.BL
...\" 
.LI
\*Lextern int tst_tet_printf(const char *\*Vformat\*L, ...)\*O
.P
Sends the contents of a \*Lprintf(\|)\*O to the TET journal file. Allows a
tester to use the different format directives accepted by \*Lprintf(\|)\*O
when sending a message to the journal file (\*Ltet_infoline(\|)\*O by itself
does not allow this). If successful, a 0 is returned; otherwise, a non-zero
value is returned.
...\" 
...\" 
...\" .LI
...\" \*Lint tst_tet_syncall(int \*Vsyncpoint\*L, int \*Vtimeout\*L)\*O
...\" .P
...\" A wrapper routine for \*Ltet_sync(\|)\*O. This function is used for DTET
...\" testcases. Instead of forcing the tester to fill in a list of nodes to
...\" synchronize with, this function will automatically determine the current
...\" node and perform the synchronization with the other DTET nodes. If successful,
...\" a 0 is returned; otherwise, a non-zero value is returned.
...\" 
...\" 
.LI
\*Lextern void tst_dce_login(char *\*Vuser\*L, char *\*Vpassword\*L, error_status_t *\*Vstatus\*L)\*O
.P
Attempts a \*Ldce_login\*O as the specified principal. If successful
\*Lerror_status_ok\*O is returned; otherwise, a non-zero value is returned.
...\" 
...\" 
.LI
\*Lextern int tst_chk_command(char *\*Vcommand\*L, pid_t *\*Vpid\*L)\*O
.P
Checks whether the specified command is in the process table: if it is,
a 0 is returned; otherwise, a non-zero value is returned.
...\" 
...\" 
.LI
\*Lextern int tst_chk_process(pid_t *\*Vpid\*L)\*O
.P
Checks whether the specified \*Vpid\*O is in the process table: if it is,
a 0 is returned; otherwise, a non-zero value is returned.
...\" 
...\" 
.LE
...\" 
...\" 
.zZ "def,10739,1.1beta,new info"
...\" 
...\" 
...\" ----------------------------------------------------------------------
.H 3 "Multi-Vendor Test Case Development Tools"
...\" ----------------------------------------------------------------------
...\" 
.P
The test cases have been designed to be easily ported to other flavors of the
UNIX operating system. This is aided by a suite of tools which are considered
multi-vendor because they are aware of the flavor of UNIX which they are running
under and adjust their nature of operation accordingly.
.P
A good example of the types of porting problems you may encounter is the use of
the \*Lps\*O command. If a test case needed to determine the process identification
(PID) of some daemon process, it would search the output of the \*Lps\*O command
for the name of the daemon in question and extract its PID. The \*Lps\*O command
has a different syntax for the BSD and System V flavors of UNIX. For example, BSD
UNIX syntax is \*Lps -ax\*O while System V syntax is \*Lps -ef\*O. The test case
needs to be aware of the type of system it is executing under in order to be able
to choose the proper syntax. The problem grows very quickly. A test case needs a
special case for each difference of each flavor of UNIX. Not only can this cause
the test cases to be hard to port and maintain, but the readability and modularity
of the code can suffer as well. For example, the test case would need a large
\*Lcase\*O statement to handle the various syntaxes of the same command offered
on the different flavors of UNIX. Maintaining every instance of the command's usage
in every test case is time-consuming and costly.
.P
The object of the multi-vendor tools is to abstract the differences of the flavors
of UNIX into a set of commands. The commands determine the type of operating system
automatically, if they have been ported to a particular flavor. Once the type of
operation system is known, it is easy to use the correct syntax of the command.
.P
The tools currently support the following operating systems:
...\" 
.BL
.LI
AIX 3.2.4
.LI
OSF/1 1.2 (on DECpc 450ST)
.LI
HP/UX 9.0.1
.LI
SINIX 5.41 (SVR4 on MX300i)
.LE
...\" 
.P
To port the tools to another operating system, you need to begin with the
\*Lexpmachinfo\*O command. In the system test environment, this command
is executed by:
.DS
    \*Vsystest-root\*L/profile.dcest\*O
.DE
...\" 
.P
or
...\" 
.DS
    \*L/dcetest/dcelocal/test/tet/system/profile.dcest.tet\*O
.DE
...\" 
.P
It creates the environment variables necessary for the other commands to
determine under what operating system they are executing.
.P
The following commands are referred to as the core set, and since they use the
information created by the \*Lexpmachinfo\*O command, they may also need to be
ported:
...\" 
.VL 1.4i
.LI "\*Lchkproc\*O"
Returns 0 if a process exists and 1 if it does not.
.LI "\*Lgetproc\*O"
Returns the process id (PID) of a given process.
.LE
...\" 
.P
The rest of the commands increase the usability of the core set. They are as
follows:
...\" 
.VL 1.4i
.LI "\*Lkillproc\*O"
Kills processes that match the given strings.
.LI "\*Lrshsp\*O"
Enhances the usability of \*Lrsh\*O by sourcing a file of environment variables
before running the command on the remote machine and by returning the return code
of the remote command.
.LE
...\" 
.P
All the commands are located in the
.DS
    \*L/dcetest/dcelocal/test/tet/system/tools\*O
.DE
...\" 
.P
directory.
...\" 
...\" 
...\" ----------------------------------------------------------------------
.H 3 "Test Case Logging Facilitators for System Tests Not under TET"
...\" ----------------------------------------------------------------------
...\" 
.P
The tools in this section were developed to support faster analysis of scenario
executions. They provide standard mechanisms for logging results, and several tools
for examining the status.
...\" 
...\" 
...\" 
...\" ----------------------------------------------------------------------
.H 4 "Logging Results"
...\" ----------------------------------------------------------------------
...\" 
.P
The tools that are used to log results print the message you provide, with a header
attached to the front to indicate what has occurred (success, failure, etc.). The
message is printed to \*Lstdout\*O and to the file whose name is stored in the
environment variable \*LJOURNAL\*O (see the ``Test Logging During Iterations'' and
``Test Logging After Iterations'' sections earlier in this chapter). This allows
testers to watch the progress of tests scroll by on the screen while also recording
the results in a permanent file.
.P
These tests are divided into two groups: tests used by testcases and tests used by
testcase drivers. The following commands should be used within testcases:
...\" 
.VL 1.5i
.LI "\*Lxx_log\*O"
Records something that worked successfully (or adds comments to the journal file).
.LI "\*Lxx_warning\*O"
Records something that may not have been an actual error but should be examined.
.LI "\*Lxx_error\*O"
Records something that did not work successfully (but the testcase will continue
to execute).
.LI "\*Lxx_severe\*O"
Records something that failed and was so important that the testcase should not
continue to execute.
.LE
...\" 
.P
These commands are available from the command level (through shell scripts),
and at the API level through a library called \*Llibxx_.a\*O. The scripts are
installed and the library built via:
...\" 
.DS
    \*Vdce-root-dir\*L/dce/src/test/systest/tools/Makefile\*O
.DE
...\" 
...\" 
.P
The following commands should be used only by testcase drivers:
...\" 
.VL 1.5i
.LI "\*Lxx_begin\*O"
Marks the beginning of an iteration of a testcase.
.LI "\*Lxx_pass\*O"
Indicates that a testcase iteration has completed successfully.
.LI "\*Lxx_fail\*O"
Indicates that a testcase iteration has completed with errors.
.LI "\*Lxx_example\*O"
Checks journal files for errors.
.LE
...\" 
.P
These commands are available only at the command level, not at the API level.
...\" 
...\" 
...\" 
...\" ----------------------------------------------------------------------
.H 3 "Execution Tools"
...\" ----------------------------------------------------------------------
...\" 
.P
You can use the following tools to set up and execute System Test scenarios:
...\" 
.VL 1.5i
...\" 
.LI "\*Ltest/tet/system/profile.dcest.tet\*O"
Defines all the necessary environment variables used by the DCE system tests
run under TET.
...\" 
...\" 
.LI "\*Ltest/systest/profile.dcest\*O"
Defines all the necessary environment variables used by all DCE system tests
not run under TET.
...\" 
.LE
...\" 
...\" 
...\" 
...\" 
...\" ----------------------------------------------------------------------
.H 3 "Miscellaneous Tools"
...\" ----------------------------------------------------------------------
...\" 
.P
The following tools are also available:
...\" 
.VL 1.5i
.LI "\*Lgdskill\*O"
Deactivates a directory system installation of GDS, then deletes the configuration
data.
...\" 
...\" 
.LI "\*LgdsSetup\*O"
Sets up GDS on a system, based on the contents of a configuration file. See
the contents of the \*Lgds_xds_str_001.data\*O file for more information.
...\" 
...\" 
.LI "\*LworldSetup\*O"
Sets up GDS on a system, based on the contents of a configuration file. See
``Running the dcegdshd Driver'' in Chapter 15 for more information.
...\" 
...\" 
.LI "\*Lsu.dce\*O"
Provides DCE authentication and accepts passwords on the command line. This program
should be owned by \*Lroot\*O and have the \*Lsetuid\*O bit set.
...\" 
...\" 
.LI "\*Lrcheck\*O"
Checks a return code value against an expected value.
...\" 
.LE
...\" 
...\" 
...\" 
...\" ----------------------------------------------------------------------
