...\" @OSF_COPYRIGHT@
...\" Copyright (c) 1990, 1991, 1992, 1993, 1994 Open Software Foundation, Inc.
...\" ALL RIGHTS RESERVED (DCE).  See the file named COPYRIGHT.DCE in the
...\" src directory for the full copyright text.
...\" 
...\" HISTORY
...\" $Log: 7_gds.gpsml,v $
...\" Revision 1.1.2.14  1994/10/30  22:47:44  weir
...\" 	Last updates
...\" 	[1994/10/30  22:46:45  weir]
...\"
...\" Revision 1.1.2.13  1994/10/30  16:25:47  weir
...\" 	Updates
...\" 	[1994/10/30  16:24:30  weir]
...\" 
...\" Revision 1.1.2.12  1994/10/29  23:26:08  weir
...\" 	More Updates
...\" 	[1994/10/29  23:24:55  weir]
...\" 
...\" Revision 1.1.2.11  1994/10/28  20:50:28  weir
...\" 	DCE 1.1 updates
...\" 	[1994/10/28  20:49:10  weir]
...\" 
...\" Revision 1.1.2.10  1994/10/26  20:41:00  weir
...\" 	DCE 1.1 Updates
...\" 	[1994/10/26  20:39:41  weir]
...\" 
...\" Revision 1.1.2.9  1994/10/14  18:36:31  weir
...\" 	GDS intercell test instructions added
...\" 	[1994/10/14  18:35:55  weir]
...\" 
...\" Revision 1.1.2.8  1994/10/13  20:10:11  weir
...\" 	Updates for 1.1
...\" 	[1994/10/13  20:09:36  weir]
...\" 
...\" Revision 1.1.2.7  1994/06/20  20:28:57  weir
...\" 	Beta Update
...\" 	[1994/06/20  20:27:42  weir]
...\" 
...\" Revision 1.1.2.6  1994/06/19  20:54:06  weir
...\" 	Beta Update
...\" 	[1994/06/19  20:53:04  weir]
...\" 
...\" Revision 1.1.2.5  1994/06/17  13:50:33  weir
...\" 	Beta Update
...\" 	[1994/06/17  13:49:09  weir]
...\" 
...\" Revision 1.1.2.4  1994/06/12  17:32:11  weir
...\" 	No change-- for copyright insertion
...\" 	[1994/06/12  17:30:51  weir]
...\" 
...\" Revision 1.1.2.3  1994/06/08  18:47:31  weir
...\" 	Beta Update
...\" 	[1994/06/08  18:46:32  weir]
...\" 
...\" Revision 1.1.2.2  1994/06/02  21:12:52  weir
...\" 	Beta Updates
...\" 	[1994/06/02  21:11:12  weir]
...\" 
...\" Revision 1.1.2.1  1994/05/03  19:00:33  weir
...\" 	Reorganization
...\" 	[1994/05/03  18:59:19  weir]
...\" 
...\" $EndLog$
...\" 
...\" 
...\" 
...\" 
...\"
...\"
.lg 0
...\" 
...\" 
...\" 
...\" ----------------------------------------------------------------------
.H 1 "DCE Global Directory Service"
...\" ----------------------------------------------------------------------
...\" 
...\" 
...\" 
...\" 
...\" 
...\" 
...\" ----------------------------------------------------------------------
.H 2 "Overview"
...\" ----------------------------------------------------------------------
...\" 
.iX "-: GDS" "Global Directory Service"
.iX "GDS" "overview of"
.iX "overview" "of GDS"
...\" 
.P
The DCE Global Directory Service (GDS) provides an X.500-compliant directory
service.
...\" 
...\" .cS
...\"  based on Siemens-Nixdorf Informationssysteme AG DIR-X.
...\" .cE
...\" 
GDS includes the Directory User Agent (DUA), or client,
and the Directory Service Agent (DSA), or server, as specified by the X.500
standard.
.P
In conjunction with the directory service, GDS supplies the following
services and interfaces:
...\" 
.nS "note"
In the descriptions below, OSI means ``Open System Interconnection,'' an
internationally recognized (ISO) term.
However,
in Chapter 11 of this guide, which covers porting and
testing DFS, OSI means ``Operating-System Independent.''
.nE
...\" 
.BL
.LI
The standard XDS/XOM (X/Open Directory Service \*L/\*O X/Open
OSI-Abstract-Data Manipulation) application programming interface to GDS
.LI
The RTROS and CMX interface, and libraries for the OSI
protocol stack upper layers
.LI
An ASN.1 compiler (MAVCOD/MAVROS) and ASN.1 runtime library, used by GDS
.LI
A screen-based menu-oriented administration interface
.zA "def,10739,1.1beta,new info"
.LI
A shell-based command interface to administer GDS
.LI
A shell-based command interface to create and initialize a directory
configuration
.zZ "def,10739,1.1beta,new info"
.zA "def,10739,1.1beta,new info"
.LI
An integrated ROS interface (RTROS) with AOM12 support for use by DME and DME
applications
.zZ "def,10739,1.1beta,new info"
.LE
...\" 
.nS "note"
Reference pages for the \*Lmavros\*O and \*Lmavcod\*O commands
can be found in the \*VOSF DCE Technical Supplement\*O.
.nE
...\" 
...\" 
...\" ----------------------------------------------------------------------
.H 3 "Considerations and Dependencies"
...\" ----------------------------------------------------------------------
...\" 
.iX "dependencies" "of GDS"
.iX "GDS" "dependencies"
...\" 
...\" 
.zA "def,10739,1.1beta,new info"
...\" 
.P
All GDS executables are linked with \*Llibdce\*O. No non-thread-safe
static libraries are needed any longer for linking GDS executables.
...\" thread-safe libraries \*LlibXDS.a\*O and \*LlibXOM.a\*O.
...\" 
...\" 
.nS "note"
If you are using the default compile-time constants (see ``GDS Preprocessor
Variables'' later in this chapter), the Client depends on both Threads and
CDS.
.nE
...\" 
...\" 
.zZ "def,10739,1.1beta,new info"
...\" 
...\" ----------------------------------------------------------------------
.H 3 "GDS File Locations"
...\" ----------------------------------------------------------------------
...\" 
.iX "file locations" "GDS"
.iX "GDS" "file locations"
...\" 
.de ZY
\v'-3p'\\$1\v'3p'\s0
..
.P
The locations of libraries and programs built in GDS are listed below.
Note that a subcomponent typically consists of multiple source files.
.P
All paths given for the location of source files
are relative from:
.DS
    \*Vdce-root-dir\*L/dce/src/directory\*O
.DE
.P
The path indicates the directory in which the \*LMakefile\*O attempts
to build the component.
.P
All paths given for the location of installed files are relative from
.DS
    \*Vdce-root-dir\*L/dce/install/\*Vmachine\*L/opt/dce1.1\*O
.DE
.P
unless otherwise noted by ``N/A.''
The path indicates the directory in which the subcomponent is
installed.
.SP
...\" 
.ne 3i
.TB "Locations of GDS Subcomponent Files"
.ad l
.TS H
expand tab (@) box;
lB | lB | lB | lB
lB | lB | lB | lB
lB | l | lB | lB.
GDS@@Location of@Location of
Subcomponent@Function\h'1.6i'@Makefiles@Installation
_
.TH
_
gdscache@T{
GDS process to cache user data and store locally data used for regulation
purposes.
T}@gds/cache@bin
_
gdscacheadm@T{
Cache administration program.
T}@gds/cacheadm/admin@bin
_
gdscacheupd@T{
Updates the GDS cache.
T}@gds/adm/delupd@bin
_
gdschdb@T{
Shell script to change the directory information database from old
to new.
It calls \*Lgdsgendb\*O and \*Lgdstransfer\*O.
T}@gds/dsa@bin
_
gdscmxl@T{
A filter that is called by \*Lgdsstep\*O to get the trace of the communication layer in a readable format.
T}@gds/tsi@bin
_
gdsconf@T{
Shell script used to configure a directory system.
T}@gds/bin@bin
_
gdscp@T{
Command line administration program for GDS.
T}@gds/gdscp/gci@bin
_
gdscrontab@T{
Shell script to update the cron table for update of shadows and cache.
T}@gds/bin@bin
_
gdscstub@T{
GDS C-stub process to handle all outgoing requests to remote DSAs.
T}@gds/stub@bin
_
gdsdaemon@T{
Daemon that transfers the delta updates to target DSAs.
T}@gds/adm/delupd@bin
_
gdsdbread@T{
Shell script used to restore directory system data information.
T}@gds/bin@bin
_
gdsdbwrite@T{
Shell script used to save directory system data information.
T}@gds/bin@bin
_
gdsdeact@T{
Shell script used to deactivate a directory system.
T}@gds/bin@bin
_
gdsdirinfo@T{
Reads information about running processes of a directory system
installation from shared memory.
Writes to standard output.
T}@gds/ipc@bin
_
gdsdistcmd@T{
Sends a given distributed command to a class of directory system
processes by calling the proper IPC function.
T}@gds/adm/usradmin@bin
_
gdsditadm@T{
Provides management interface to the directory.
Lets administrator manipulate information in the DIT.
T}@gds/adm/admin@bin
_
gdsdsa@T{
Main DSA program, forks as many DSA processes as needed.
T}@gds/dsa@bin
_
gdsexec@T{
Starts up any other program required to run under the UID and GID of
the directory system installation.
T}@gds/adm/delupd@bin
_
gdsgendb@T{
Takes the file scheme generated by \*Lgdsmkiss\*O as input and creates
an empty database.
T}@gds/dsa@bin
_
gdsgennsap@T{
Generates NSAP address configuration file.
T}@gds/osiadr@bin
_
gdshdlcache@T{
Shell script used to set the environment and to activate
\*Lgdscacheupd\*O.
T}@gds/bin@bin
_
gdshdlupd@T{
Shell script used to set the environment and to activate
\*Lgdsdaemon\*O.
T}@gds/bin@bin
_
gdsinfo@T{
Shell procedure for displaying directory system state information.
T}@gds/bin@bin
_
gdsipcchk@T{
Verifies the IPC state information contained in the shared memory area
of a directory system installation.
T}@gds/ipc@bin
_
gdsipcinit@T{
Provides the IPC resources required within a directory system
installation to allow communication among the directory
system components.
T}@gds/ipc@bin
_
gdsipcstat@T{
Displays the IPC state information contained in the shared memory
area of a directory system installation.
T}@gds/ipc@bin
_
gdslanguage@T{
Gets a message from a message catalog for a language.
T}@gds/adm/usradmin@bin
_
gdslog@T{
Shell script used to switch the logging state of the directory system.
T}@gds/bin@bin
_
gdsmkiss@T{
Used during initialization of the directory system to retrieve schema
information from the DIT and store it in a system file \*Lscheme\*O.
When DSA starts, it reads this file for information on the
DIT's structure.
T}@gds/dsa@bin
_
gdsmkupd@T{
Modifies the master knowledge if database is read from disk.
T}@gds/dsa@bin
_
gdsrosstep@T{
A filter that is called by \*Lgdsstep\*O to get the trace of
RTROS in a readable format.
T}@gds/rtros/com/rostep@bin
_
gdssetup@T{
Command line program to create and initialize a directory configuration.
T}@gds/adm/setup@bin
_
gdssstub@T{
GDS \*Lsstub\*O process.
Handles all incoming requests from remote DUAs and DSAs and handles
outgoing requests from a DSA.
T}@gds/stub@bin
_
gdsstart@T{
Shell script used to activate a directory system.
T}@gds/bin@bin
_
gdsstep@T{
Tool that makes a logfile (binary) into a readable file.
T}@gds/step@bin
_
gdssysadm@T{
Prepares and shows login menu mask and the masks of the main
administrative functions.
T}@gds/adm/usradmin@bin
_
gdstransfer@T{
Used by the directory system to transfer data from a DIB with an old
schema to an empty DIB with a new schema.
T}@gds/dsa@bin
_
gdsutil@T{
Utility program used to terminate directory system processes or
get information about file sizes.
T}@gds/adm/useradmin@bin
_
init.gdscp@T{
Initialization script for \*Lgdscp\*O.
T}@gds/gdscp/scripts@gdscp
_
ndscomp@T{
Compiles PSAP-address mapping information into configuration
data base.
T}@gds/nds@bin
_
libasn1.a@T{
Contains (reentrant) ASN.1 functions for use by the security
component for use by GDS.
T}@gds/ASN1@N/A\v'-3p'\\1\v'3p'\s0
_
libd21sw.a@T{
Contains (reentrant) functions to support the CDS switch.
T}@gds/dua/switch@N/A\v'-3p'\\1\v'3p'\s0
_
libd23.a@T{
Contains (reentrant) IPC functions.
T}@gds/ipc@N/A\v'-3p'\\1\v'3p'\s0
_
libd27.a@T{
Contains (reentrant) general functions used by different GDS subcomponents.
T}@gds/util@N/A\v'-3p'\\1\v'3p'\s0
_
libdua.a@T{
Contains (reentrant) DUA interface functions for use by GDS.
T}@gds/dua@N/A\v'-3p'\\1\v'3p'\s0
_
libdua_sec.a@T{
Contains (reentrant) security enhancement functions.
T}@gds/gds_sec@N/A\v'-3p'\\1\v'3p'\s0
_
libosiaddr.a@T{
Contains (reentrant) functions to handle OSI addresses.
T}@gds/osiadr@N/A\v'-3p'\\1\v'3p'\s0
_
libXDS.a@T{
Contains (reentrant) XDS interface functions.
T}@xds@N/A\v'-3p'\\1\v'3p'\s0
_
libXOM.a@T{
Contains (reentrant) XOM interface functions.
T}@xom@N/A\v'-3p'\\1\v'3p'\s0
_
libxoms.a@T{
Contains (reentrant) XOM convenience functions.
T}@xoms@N/A\v'-3p'\\1\v'3p'\s0
_
libNDS.a@T{
Contains PSAP-address mapping functions.
T}@gds/nds/\*Vmachine\*O@usr/lib
_
libdsal.a@T{
Contains the locale dependent functions for phonetic matching.
T}@gds/dsa/\*Vmachine\*O@usr/lib
...\" _
...\" libslog.a@T{
...\" Contains separate logging functionality (non-reentrant) for
...\" use by GDS.
...\" T}@@not installed
...\" _
...\" libasn1_r.a@T{
...\" Contains a re-entrant ASN.1 library for use by the security
...\" component.
...\" T}@gds/ASN1/lib_r@N/A\v'-3p'\\1\v'3p'\s0
...\" _
...\" libdua_r.a @T{
...\" Contains (re-entrant) DUA interface functions.
...\" T}@gds/dua@N/A\v'-3p'\\1\v'3p'\s0
...\" _
...\" libXDS@T{
...\" Contains (reentrant) XDS interface functions.
...\" T}@xds@N/A\v'-3p'\\1\v'3p'\s0
...\" _
...\" libXOM@T{
...\" Contains (reentrant) XOM interface functions.
...\" T}@xom@N/A\v'-3p'\\1\v'3p'\s0
...\" _
...\" libslog_r.a@T{
...\" Contains separate logging functionality (re-entrant).
...\" T}@@N/A\v'-3p'\\1\v'3p'\s0
...\" _
...\" libNDS@T{
...\" Contains PSAP-address mapping functions.
...\" T}@nds@/usr/lib
.TE
...\" 
...\" 
.P
.ZY "1"
The libraries are incorporated into \*Llibdce\*O.
.ad b
...\" 
.zA "def,10739,1.1beta,new info"
...\" 
In most cases, the source files are located under the same directory as the
\*LMakefile\*O and, where necessary, in machine or operating system dependent
subdirectories. In some cases, several source files that are needed, are found
by the \*LVPATH\*O variable in other locations.
...\" 
...\" 
.BL
...\" 
.LI
\*LlibNDS.a\*O
.P
Additional sources in:
...\"
.BL
.LI
\*Lgds/nds/FSF\*O; the source files \*Lgnu_regex.h\*O and \*Lgnu_regex.c\*O
(which implement a regular expression parser) are taken from the Free Software
Foundation, with modifications.
.LE
...\" 
...\" .LI
...\" \*Llibd23.a\*O
...\" .P
...\" Makefile in \*Lgds/ipc\*O
...\" .P
...\" Additional sources in:
...\"
...\" .BL
...\" .LI
...\" \*L../../../dce/utils/svc\*O
...\" .LE
...\"
.LI
\*Llibd27.a\*O
...\" .P
...\" Makefile in \*Lgds/util\*O
.P
Additional sources in:
...\"
.BL
.LI
\*Lgds/sams\*O
.LE
...\"
.LI
\*Llibosiaddr.a\*O
...\" .P
...\" Makefile in \*Lgds/osiadr\*O
.P
Additional sources in:
...\"
.BL
.LI
\*Lgds/conf/\*Vmachine\*O
.LE
...\"
.LI
\*Lgdscacheadm\*O
...\" .P
...\" Top-Level \*LMakefile\*O
...\" 
.P
Additional sources in:
...\" 
.BL
.LI
\*Lgds/adm/usradmin\*O
.LI
\*Lgds/adm/admin\*O
.LI
\*Lgds/adm/admin/\*Vmachine\*O
.LE
...\" 
.LI
\*Lgdsditadm\*O
.P
Additional sources in:
...\" 
.BL
.LI
\*Lgds/adm/usradmin\*O
.LI
\*Lgds/adm/admin/\*Vmachine\*O
.LE
...\" 
.LI
\*Lgdssysadm\*O
.P
Additional sources in:
...\"
.BL
.LI
\*Lgds/adm/admin/\*Vmachine\*O
.LE
...\"
...\" .LI
...\" \*Lgdssetup\*O
...\" .P
...\" Additional sources in:
...\"
...\" .BL
...\" .LI
...\" \*Lgds/sams\*O
...\" .LE
...\"
.LI
\*Lgdsipcchk\*O
.P
Additional sources in:
...\"
.BL
.LI
\*L../../../dce/utils/svc\*O
.LE
...\"
...\" .LI
...\" \*Lgdsstep\*O
...\" .P
...\" Additional sources in:
...\"
...\" .BL
...\" .LI
...\" \*Lgds/sams\*O
...\" .LE
...\"
.LE
...\" 
...\" 
...\" 
.zZ "def,10739,1.1beta,new info"
...\" 
...\" 
.P
The first three letters of almost all GDS source files follow the
convention listed below:
.P
Filenames begin with ``\*Ld2\*O''.
The third character is a digit, according to which subcomponent
the file belongs to.
...\" 
.TB "GDS Source File Naming Conventions"
.TS H
center box;
lB lB
lB l.
Name	Subcomponent
.TH
_
d20	admin
d21	DUA
d22	cache
d23	IPC
d24	c-stub
d25	s-stub
d26	DSA
d27	utilities
.TE
...\" 
...\" 
.P
Note that two files containing Free Software Foundation source code are
located at:
...\" 
.DS
    \*Vdce-root-dir\*L/dce/src/directory/gds/nds/FSF/gnu_regex.c\*O
    \*Vdce-root-dir\*L/dce/src/directory/gds/nds/FSF/gnu_regex.h\*O
.DE
...\" 
.P
The contents of these two files are copyrighted under the GNU General Public
License.
...\" 
...\" 
...\" ----------------------------------------------------------------------
.H 2 "Porting"
...\" ----------------------------------------------------------------------
...\" 
.iX "porting" "GDS"
.iX "GDS" "porting"
...\" 
.P
OSF\*(Tm DCE Version 1.1 contains GDS code ported to the reference platforms
listed in the ``Reference Platforms'' section of Chapter 1 of this
guide.
Some of the platform dependencies mentioned in the following list are
not formal dependencies, but are porting problems noted by developers.
If you are porting to a different platform, you need to consider the
information in the following sections.
...\" 
...\" 
...\" ----------------------------------------------------------------------
...\" .H 3 "Choice of Shell"
...\" ----------------------------------------------------------------------
...\" 
...\" .P
...\" Many of the GDS administrative functions are implemented as shell scripts.
...\" Different shells (e.g., \*L/bin/sh\*O or \*L/bin/ksh\*O) should be used,
...\" depending on the porting platform. The shell must be able to support function
...\" calls, for example. On OSF/1, both \*Lsh\*O and \*Lksh\*O can be used; on
...\" Ultrix, only \*Lksh\*O can be used; and on AIX \*Lsh\*O can be used. To
...\" change the choice of shell, modify the first line of each script.
...\" 
...\" 
...\" ----------------------------------------------------------------------
.H 3 "C-ISAM Database"
...\" ----------------------------------------------------------------------
...\" 
.iX "C-ISAM database" "porting"
.iX "porting" "C-ISAM database"
...\" 
.P
The DSA uses the C (-language) Indexed Sequential Access Method (C-ISAM
version 3.1) interface for its access to the directory database.
If there is a standard C-ISAM library (typically labeled \*Lcisam\*O)
on your operating system, you can use your C-ISAM library instead of
porting the library source files provided with the GDS source.
The C-ISAM library files provided with GDS are located in the
.DS
    \*Vdce-root-dir\*L/dce/src/directory/gds/cisam/isam\*O
.DE
.P
directory.
.P
Low level utility routines can be found in:
.DS
    \*Vdce-root-dir\*L/dce/src/directory/gds/cisam/isam/asmb.c\*O
.DE
.P
You may want to rewrite these in assembler for better performance.
...\" 
...\" 
...\" ----------------------------------------------------------------------
.H 3 "Administration Interface"
...\" ----------------------------------------------------------------------
...\" 
.iX "porting" "GDS administration interface"
.iX "GDS" "porting" "administration interface"
...\" 
.P
The \*Ladm_term_cap\*O file in
.DS
    \*Vdcelocal\*L/var/adm/directory/gds/adm\*O    
.DE
...\" 
.P
contains keyboard mappings for the keys used by administration programs.
This file should be modified to map missing keyboard functionality.
.P
The \*Lgdsdbwrite\*O and \*Lgdsdbread\*O shell scripts save
the GDS database to diskette, tape, or to a file.
The shell scripts read the parameters they need for saving the
database (like the device used and the arguments of the \*Ltar\*O command)
from:
.DS
    \*Vdcelocal\*L/var/adm/directory/gds/conf/dirparam\*O
.DE
.P
(where \*Vdcelocal\*O usually stands for
.DS
    \*L/opt/dcelocal\*O
.DE
.P
as set up by default by \*Ldce_config\*O during cell configuration). (See the
sections in this chapter on ``The dirparam File'' and ``Saving the Database.'')
...\" 
...\" 
...\" ----------------------------------------------------------------------
.H 3 "The dirparam File"
...\" ----------------------------------------------------------------------
...\" 
.P
The file
.DS
    \*Vdcelocal\*L/var/adm/directory/gds/conf/dirparam\*O
.DE
.P
contains definitions of machine dependent parameters used in internal
shell scripts of the \*Lgdssysadm\*O command (``saving of directory
data'' and ``restoring of directory data'').
The parameters are as follows:
...\" 
.BL
.LI
Floppy Disk Parameters
...\" 
.BL
.LI
Device Name (\*LFLOPPYDEVICE\*O)
.LI
Block Size for Floppy (\*LFLOPPYBLSIZE\*O)
...\" 
.LI
Volume Size in Number of Blocks (\*LFLOPPYVOLSIZE\*O)
...\" 
.LI
Command for Formatting a Floppy (\*LFLOPPYFORMCMD\*O)
.LE
...\" 
.LI
Streamer Tape Parameters
...\" 
.BL
.LI
Device Name (\*LTAPEDEVICE\*O)
.LI
Block Size for Streamer Tape (\*LTAPEBLSIZE\*O)
.LI
Volume Size in Number of Blocks (\*LTAPEVOLSIZE\*O)
.LE
...\" 
.LI
File Parameters
...\" 
.BL
.LI
Volume Size (\*LFILEVOLSIZE\*O)
.LE
...\" 
.LI
Flags for \*Ltar\*O Command
...\" 
.BL
.LI
For Reading (\*LREADFLAGS\*O)
.LI
For Writing (\*LWRITEFLAGS\*O)
.LI
Path of saved/restored file (\*LTARPATH\*O)
.LI
Name of NLS File for Configuration (\*LNLSFILENAME\*O)
.LE
...\" 
.LE
...\" 
.P
The values after the symbolic names previously listed must be
modified according to the target machine.
...\" 
...\" If a machine has no device on which to store GDS data, it is also
...\" possible to store the data into a file.
...\" This could be done if you define any filename
...\" after the symbolic name FLOPPYDEVICE (e.g., \*L/var/tmp/GDS_FLOPPY\*O).
...\" If the floppy device is selected
...\" in \*Lgdssysadm\*O (``restoring of directory data''),
...\" the data is stored into this (\*Ltar\*O) file.
...\" 
...\" 
...\" ----------------------------------------------------------------------
.H 3 "MAVROS and ASN.1"
...\" ----------------------------------------------------------------------
...\" 
.iX "porting" "MAVROS compiler"
.iX "MAVROS compiler" "porting"
.iX "porting" "ASN.1 runtime library"
.iX "ASN.1 runtime library" "porting"
...\" 
.P
The MAVROS compiler is portable and does not make assumptions about
the target machine's CPU or the particular operating system used.
Moreover, it generates portable code; the system dependencies are
concentrated in the ASN.1 runtime library, which must be ported to
every target system.
MAVROS makes only one assumption: that the machine is byte-oriented,
so that it can address individual bytes.
Porting MAVROS to a non-byte-oriented architecture (where a single
character is stored on a 64-bit word, or where the word size is 36
bits) can present challenges.
.P
When porting to byte-oriented machines, you should update in
.DS
    \*Vdce-root-dir\*L/dce/src/directory/gds/ASN1/asn1.h\*O
.DE
.P
the following flags:
...\" 
...\" 
.in +0.5i
.oS
    #if defined(mc68020) || defined(mc68010) || defined(mc68000)
    #define ANYBOUNDARY
    #define BIGENDIAN
    #define IEEE_REAL
    #else
    #if defined(sparc)
    #define BIGENDIAN
    #define IEEE_REAL
    #else
    #if defined(gould)
    #define BIGENDIAN
    #else
    #if defined(vax)
    #define ANYBOUNDARY
    #endif /* vax */
    #endif /* gould */
    #endif /* sparc */
    #endif /* mc68020 */
.oE
.in -0.5i
...\" 
...\" 
.P
These flags are used for optimizing the coding and decoding of integer
and real elements, and for defining bit string constants. They have the
following meanings:
...\" 
.BL
.LI
\*LANYBOUNDARY\*O is set to indicate that long integers can be stored on
arbitrary locations on the target machine. This flag should not be set if
the target machine requires that long integers start on word boundaries.
.LI
\*LBIGENDIAN\*O is set if the machine stores the bytes of an integer word
in big endian format (most significant byte first).
This flag should not be set on machines that use the little endian convention.
.LI
\*LIEEE_REAL\*O is set if the machine uses the conventions for
handling floating-point numbers defined by the IEEE.
.LE
...\" 
.P
Once you determine the correct values for these flags for your platform and
modify \*Lasn1.h\*O to reflect these values, you can compile the ASN.1 library.
.P
Once the flags have been set and the runtime library has been
compiled, you can check
the port by using the test suite described later in this chapter.
...\" 
...\" 
...\" ----------------------------------------------------------------------
.H 3 "Transport Mechanisms"
...\" ----------------------------------------------------------------------
...\" 
.iX "GDS" "transport mechanisms"
...\" 
.P
GDS can use either sockets or the X/Open Transport Interface (XTI) as its
transport interface for communications between machines.
...\" 
...\" The default is sockets.
...\" You determine which transport mechanism is used by editing the
...\" .DS
...\"     \*Vdcelocal\*L/var/adm/directory/gds/.profile\*O
...\" .DE
...\" .P
...\" file.
...\" Set the \*LTSITYPE\*O environment variable to either \*LSOCKET\*O
...\" or \*LXTI\*O for your platform.
...\" You decide which value to use when configuring the GDS system
...\" as a part of system administration.
...\" Because of this late binding, calls to both interfaces are generated.
...\" 
...\" 
.P
If you decide to use the XTI transport interface and an actual XTI
library is present on the target machine, you must prevent building of
the dummy XTI library, so that XTI calls are bound to functional
interfaces. To do so, comment out the appropriate line in
.DS
    \*Vdce-root-dir\*L/dce/src/directory/gds/xti/Makefile\*O
.DE
.P
before starting the build. See the comments in the \*LMakefile\*O for more
details.
.P
If you decide to use only sockets as the transport layer, GDS
binds a dummy XTI library to the executables, and sockets are used.
...\" 
.nS "note"
The XTI functions provided in the dummy XTI library are
non-functional and return an error if called.
.nE
...\" 
.P
Any other transport mechanism requires porting.
...\" 
...\" 
...\" ----------------------------------------------------------------------
.H 3 "Presentation Address Mapping"
...\" ----------------------------------------------------------------------
...\" 
.iX "GDS" "porting" "presentation address mapping"
...\" 
.P
The
.DS
    \*Vdce-root-dir\*L/dce/src/directory/gds/\*Vmachiine\*L/nds/ndssockmap.c\*O
    \*Vdce-root-dir\*L/dce/src/directory/gds/\*Vmachiine\*L/nds/ndsxtimap.c\*O
.DE
.P
modules map presentation addresses from a neutral X.500 format to the actual
socket- or XTI-interface format on the target machine. In particular, the
\*Lndsxtimap.c\*O module must be modified for your platform if the XTI
implementation in use defines new interface formats.
.P
Figures 5-1 and 5-2 show the NSAP (Network Service Access Point) address formats
supported by the address mapping software for the RIOS platform.
...\" 
.DS
.FG "XTI Interface Address Mapping"
.so port_gd/pic/xti_map.pic
.DE
...\" 
.DS
.FG "Socket Interface Address Mapping (see also RFC 1277)"
.so port_gd/pic/socket_map.pic
.DE
...\" 
...\"    !!!!! Note: The figure 5-2 must be changed as follows  !!!!!!!
...\" 		up to now		in future
...\" 	   1.	Prefix                  Prefix
...\" 		= 05                    = 03
...\"            2.   Transport Set           Transport Set
...\" 		= 00001 = 0             = 00001
...\" 
...\" 
...\" 
...\" ----------------------------------------------------------------------
.H 3 "Mapping OSI to XTI TSAP Addresses"
...\" ----------------------------------------------------------------------
...\" 
.iX "GDS" "porting" "OSI TSAP to XTI TSAP address mapping"
.iX "OSI TSAP"
.iX "XTI TSAP"
...\" 
.P
You may need to make some changes in the area of Transport Service Access Point
(TSAP) address mapping when porting the C-stub and S-stub portions of GDS to
other platforms. You must always do so if the XTI implementation on the new
platform requires a TSAP address structure that differs from the structure used
by the XTI implementation on the RIOS machine (see Figure 5-3).
...\" 
.DS
.FG "XTI TSAP Address Format"
.so port_gd/pic/tsap.pic
.DE
...\" 
...\" 
...\" 
...\" 
...\" 
...\" 
.P
The functionality contained in the library \*LlibNDS.a\*O
provides the mapping of OSI TSAP address information
into SOCKET-interface specific and also into XTI-interface
specific TSAP addresses by means of the configuration data
base \*LNDSCONF.DIB\*O. The address mapping entry function is
always \*Lnds_map_addrinfo(\|)\*O. Depending upon the specified
operation mode parameter, this function performs the operations
as follows:
...\" 
...\" 
.BL
.LI
operation mode = \*LNDS_CMXSEL\*O
.P
Selects the NSAP (Network Service Access Point)-address(es)
available in the provided TSAP-address(es) and assigns it,
corresponding to the specification of the configuration data
base, to the socket- or XTI-interface. Any NSAP-address
not specified in the data base is ignored. As a result of
this operation TSAP-addresses are returned containing interface
specific NSAP-addresses only. If two TSAP-addresses are provided,
then the selection is additionally controlled by the priority
information found in the data base.
...\" 
.LI
operation mode = \*LNDS_XTISEL\*O
.P
Selects the NSAP-address(es) available in the provided
TSAP-address(es) and assigns it, corresponding to the
specification of the configuration data base, to the
specific XTI-transport provider (e.g. OSI-LAN, OSI-WAN, etc.).
...\" 
.LI
operation mode = \*LNDS_OSITOSOCK\*O
.P
Maps the provided TSAP-address(es), corresponding to the
specification of the configuration data base, into address
information which may be used for addressing purposes at
the socket-interface (IP-address + port number) and for the
RFC1006 protocol (T-selector). The real mapping is performed
by the module \*Lndssockmap.c\*O.
...\" 
.LI
operation mode = \*LNDS_OSITOXTI\*O
.P
Maps the provided TSAP-address(es), corresponding to the
specification of the configuration data base, into address
information which may be used for addressing purposes at
the XTI-interface for a specific transport provider (provider
specific TSAP-address + provider name). The real mapping is
performed by the module \*Lndsxtimap.c\*O.
...\" 
.LE
...\" 
.P
Figure 5-4 gives an overview to the internal software
architecture at the transport interface (showing also the
different locations of address mapping function calls).
...\" 
.sp 1
...\" 
...\"                  
...\" 
...\" 
.DS
.FG "Transport Interface Software Architecture"
\*C\s-2

                                 SESSION-LAYER

                 |                                          |
                 +------ common transport interface --------+
                 |                                          |
                 |           interface dispatcher           |
                 |             mode = NDS_CMXSEL            |
                 |                                          |
                 +--------------------+---------------------+
                 |                    |                     |
                 |   XTI-interface    |  SOCKET-interface   |
                 |      handler       |  handler + RFC1006  |
                 |                    |                     |
                 | mode = NDS_XTISEL  | mode = NDS_OSITOSOCK|
                 | mode = NDS_OSITOXTI|                     |
                 |                    |                     |
                 +----XTI-interface---+---SOCKET-interface--+
                 |                    |                     |
                 |	    TRANSPORT-PROVIDER              |
                 |                    |                     |
                   OSI-LAN | OSI-WAN	      TCP/IP
\*O\s+2
.DE
...\" 
...\" 
.P
For example, assume that an environment on some platform
consists of the following service providers:
...\" 
...\" 
...\" 
.BL
.LI
XTI service providers
...\" 
.BL
.LI
A LAN service provider, TOSITP4, that supports Authority Format Identifiers
(AFIs) 47 and 49. The priority assigned to the provider is 2 (the higher the
value the higher the priority).
.LI
A WAN service provider, TOSITP0, that supports AFIs 36, 37, 52, and 53.
The priority assigned to this provider is 1.
.LE
...\" 
.LI
Socket service provider
...\" 
.BL
.LI
A LAN service provider, TCP/IP over RFC1006, that supports AFI 54.
The priority assigned to this provider is 3.
...\" 
.LE
...\" 
...\" 
.P
It is also assumed that the content of the configuration data base \*LNDSCONF.DIB\*O
available on that platform reflects this environment.
.P
If a client is started on this platform, having the following TSAP-address:
...\" 
.VL .75i
...\" 
.LI "T-selector:"
Client
...\" 
.LI "NSAP1:"
(AFI = 54)
.LI "NSAP2:"
(AFI = 36)
.LI "NSAP3:"
(AFI = 47)
.LE
...\" 
.P
and establishes a connection to a remote server, with the following TSAP-address:
...\" 
.VL .75i
...\" 
.LI "T-selector:"
Server
...\" 
.LI "NSAP1:"
(AFI = 49)
.LI "NSAP2:"
(AFI = 37)
.LI "NSAP3:"
(AFI = 54)
.LI "NSAP4:"
(AFI = 48)
.LE
...\" 
.P
then the following address mapping operations are performed:
...\" 
...\" 
.BL
.LI
\*LStep 1\*O
.P
Client attaches to the network(s). Only the client TSAP-address is provided
at the common transport interface:
...\" 
...\" 
.VL 1i
.LI "\*LStep\ 1.1:\*O"
Address mapping call from interface multiplexer
(mode = NDS_CMXSEL, TSAP-addr. = client-TSAP)
.P
\*VReturned information\*O:
.VL 1.5i
.LI "TSAP (SOCKET):"
.LI "T-selector:"
Client
.LI "NSAP1:"
(AFI = 54)
.LI ""
.LI "TSAP (XTI):"
.LI "T-selector:"
Client
.LI "NSAP1:"
(AFI = 36)
.LI "NSAP2:"
(AFI = 47)
.LE
...\" 
.LI "\*LStep\ 1.2:\*O"
Address mapping call from socket-interface handler
(mode = NDS_OSITOSOCK TSAP-addr. = TSAP(SOCKET))
.P
\*VReturned information\*O: socket-interface specific address 
...\" 
.LI "\*LStep\ 1.3:\*O"
Address mapping call from XTI-interface handler
(mode = NDS_XTISEL, TSAP-addr. = TSAP(XTI))
.P
\*VReturned information\*O: TSAP-address is associated with 2 providers
...\" 
.LI "\*LStep\ 1.4:\*O"
Address mapping call from XTI-interface handler
(mode = NDS_OSITOXTI, TSAP-addr. = TSAP(XTI),  provider = first)
.P
\*VReturned information\*O: XTI-provider specific address + provider name TOSITP0
...\" 
.LI "\*LStep\ 1.5:\*O"
Address mapping call from XTI-interface handler
(mode = NDS_OSITOXTI, TSAP-addr. = TSAP(XTI),  provider = second)
.P
\*VReturned information\*O: XTI-provider specific address + provider name
TOSITP4
...\" 
.LE
...\" 
...\" 
.LI
\*LStep 2\*O
.P
Connection establishment. Both client and server TSAP-addresses are
provided at the common transport interface.
...\" 
...\" 
.VL 1i
.LI "\*LStep\ 2.1:\*O"
Address mapping call from interface multiplexer
(mode = NDS_CMXSEL, TSAP-addr. = client-TSAP, server-TSAP)
.P
\*VReturned information\*O:
.VL 2i
.LI "client-TSAP(SOCKET):"
.LI "T-selector:"
Client
.LI "NSAP1:"
(AFI = 54)
.LI ""
.LI "server-TSAP(SOCKET):"
.LI "T-selector:"
Server
.LI "NSAP1:"
(AFI = 54)
.LE
...\" 
.P
The selection is made by searching for a pair of (client/server) NSAP-addresses
associated with the same transport provider of the highest priority. In this
example, the following pairs of NSAP-addresses are found:
...\" 
...\" 
...\"    client-NSAP    server-NSAP    provider     priority
...\"      AFI = 54       AFI = 54     socket          3
...\"      AFI = 36       AFI = 37     xti (WAN)       1
...\"      AFI = 47       AFI = 49     xti (LAN)       2
...\" 
.TS
center tab(@) box;
lb | lb | lb | lb
l | l | l | l.
client-NSAP@server-NSAP@Provider@Priority
_
AFI = 54@AFI = 54@socket@3
_
AFI = 36@AFI = 37@XTI (WAN)@1
_
AFI = 47@AFI = 49@XTI (LAN)@2
.TE
...\" 
...\" 
.LI "\*LStep\ 2.2:\*O"
Address mapping call from socket-interface handler
(mode = NDS_OSITOSOCK, TSAP-addr. = client-TSAP(SOCKET),
server-TSAP(SOCKET))
.P
\*VReturned information\*O:
socket-interface specific client-/server addresses
...\" 
.LE
...\" 
.LE
...\" 
...\" 
...\" 
...\" 
...\" 
...\" Removed (replaced) in 1.0.3:
...\" ZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZ
...\" .P
...\" The following two functions map OSI TSAP address information into XTI
...\" interface-specific TSAP addresses within the stubs:
...\" 
...\" .BL
...\" .LI
...\" \*Lt_getnprov(\|)\*O
...\" .P
...\" This function supports multiservice provider environments by
...\" evaluating information about a given OSI TSAP address and returning
...\" the number of service providers that are affected by the Network 
...\" Service Access Point (NSAP) address information contained in the
...\" TSAP address.
...\" .LI
...\" \*Lt_gettprovdev(\|)\*O
...\" .P
...\" This function evaluates a specific NSAP address, referenced by the
...\" input parameter \*Lindx\*O, within the given OSI TSAP address information
...\" (input parameter \*Lcalling_iadr\*O).
...\" It converts the NSAP address and the T-selector information into
...\" the format required by the affected service provider (output parameter
...\" \*Lcalling_oadr\*O).
...\" It returns a reference to the name of this service provider.
...\" .P
...\" If a second OSI TSAP address is provided (input parameter
...\" \*Lcalled_iadr\*O), then \*Lt_gettprovdev(\|)\*O also searches for an
...\" NSAP address that corresponds to the evaluated NSAP address of the
...\" first OSI TSAP address information for the same service provider.
...\" If such an NSAP address is found, then the same conversions
...\" are done as for the first address.
...\" If no corresponding NSAP address can be found, then the function
...\" returns a NIL pointer.
...\" .LE
...\" 
...\" .P
...\" For example, assume that an XTI service provider environment consists
...\" of the following components:
...\" 
...\" .BL
...\" .LI
...\" A LAN service provider, TOSITP4, that supports Authority Format
...\" Identifiers (AFIs) 47 and 49.
...\" .LI
...\" A WAN service provider, TOSITP0, that supports AFIs 36, 37, 52, and
...\" 53.
...\" .LE
...\" 
...\" .P
...\" The following table shows some OSI TSAP addresses and the
...\" corresponding values that \*Lt_getnprov(\|)\*O should return in this
...\" environment.
...\" ...\" 
...\" .ne 2i
...\" .TB "OSI\ TSAP Addresses and t_getnprov(\|) Return Values"
...\" .TS
...\" center tab (@) box;
...\" lB s |cB.
...\" @Returned Number of
...\" OSI\ \  TSAP Address@Affected Service Providers
...\" _
...\" .T&
...\" r l | c.
...\" T-sel/@NSAP1(AFI=47)/NSAP2(AFI=36)@2
...\" T-sel/@NSAP1(AFI=49)@1
...\" T-sel/@NSAP1(AFI=54)/NSAP2(AFI=36)@1
...\" T-sel/@NSAP1(AFI=48)@\ 0\s-2\v'-3p'*\v'3p'\s0
...\" _
...\" .T&
...\" l s s.
...\" \s-2\v'-3p'*\v'3p'\s0  Address cannot be handled by any XTI service provider.
...\" .TE
...\" 
...\" .P
...\" If \*Lt_gettprovdev(\|)\*O is then called with the OSI
...\" TSAP address as the first address parameter (T-sel/NSAP1(AFI=47)/NSAP2(AFI=36))
...\" and with an index parameter value of 0, \*Lt_gettprovdev(\|)\*O converts the
...\" NSAP address NSAP1(AFI=47) and returns the reference to the
...\" service provider name TOSITP4.
...\" If \*Lt_gettprovdev(\|)\*O is called with the same TSAP address but with an index
...\" parameter value of 1, then the NSAP address NSAP2(AFI=36)
...\" is converted and a reference to the service provider name
...\" TOSITP0 is returned.
...\" .P
...\" If a second OSI TSAP address (T-sel/NSAP1(AFI=54)/NSAP2(AFI=36))
...\" is added to the preceding example, \*Lt_gettprovdev(\|)\*O
...\" does no conversions if the \*Vindex\*O parameter value is 0.
...\" It returns a NIL pointer because there is no NSAP address information
...\" in either TSAP address that affects the same service provider.
...\" If the \*Vindex\*O parameter value is 1, then it converts the NSAP address
...\" NSAP2(AFI=36) of the second TSAP address and returns a reference
...\" to the service provider name TOSITP0.
...\" 
...\" ZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZ
...\" 
...\" 
...\" 
...\" 
...\" 
...\" ----------------------------------------------------------------------
.H 3 "IPC Mechanisms"
...\" ----------------------------------------------------------------------
...\" 
.P
The following mechanisms are used for interprocess communication (IPC):
...\" 
.BL
.LI
Shared Memory
.LI
Semaphores
.LI
Message Queues
.LI
Named Pipes (FIFO)
.LI
Signals
.LE
...\" 
.P
If they are not available on your port platform, then all of the IPC
interfaces (the \*Ld23*\*O modules) have to be ported to other mechanisms.
...\" 
...\" 
...\" 
...\" ----------------------------------------------------------------------
.H 3 "XOM Intermediate Data Types"
...\" ----------------------------------------------------------------------
...\" 
.P
XOM uses the following \*Vintermediate\*O data types.
Their precise definitions in C are system-dependent.
...\" 
.ne 2i
.TB "XOM Intermediate Data Types"
.TS H
center tab (@) box;
 lB | l.
Data Type@\*LDefinition\*O
_
.TH
_
OM_sint, OM_sint16@Positive and negative signed integers representable in 16 bits
_
OM_sint32@Positive and negative signed integers representable in 32 bits
_
OM_uint, OM_uint16@Non-negative unsigned integers representable in 16 bits
_
OM_uint32@Non-negative unsigned integers representable in 32 bits
.TE
...\" 
.P
The \*LOM_sint\*O and \*LOM_uint\*O types are defined by the range of
integers they must accommodate.
Normally, that definition is the range of integers permitted by the
host machine's word size.
However, the latter range, \*LOM_uint\*O, always encompasses the former.
.P
These data types are defined in \*Lxom.h\*O.
They should be redefined for your system, if necessary.
The default settings, as applied to the reference platforms, are shown below:
...\" 
.nP
...\" 
.TB "XOM Intermediate Type Settings"
.TS
center tab (@) box;
le lw(2.0i) lb.
typedef@int@OM_sint
typedef@unsigned@OM_uint
typedef@short@OM_sint16
typedef@unsigned short@OM_uint16
typedef@long int@OM_sint32
typedef@long unsigned@OM_uint32
.TE
...\" 
...\" 
...\" .zA "Added conditional symbols"
...\" 
...\" ----------------------------------------------------------------------
.H 3 "GDS Preprocessor Dedinitions"
...\" ----------------------------------------------------------------------
...\" 
...\" 
.P
The following compile-time constants, set by default in the GDS Makefiles,
govern GDS configuration, testing, and logging.
...\" 
...\" 
.sp 1
...\" 
.VL .5i
...\" 
...\" 
...\" 
.LI
\*LBERKELEY\*O
...\" .LI
...\" \*LSYS5\*O
.P
Found in:
.DS
    \*Vdce-root-dir\*L/dce/src/directory/gds/ASN1/asn1.h\*O
.DE
.P
Used to decide which include files of either System 5 or BSD UNIX
are to be built into GDS \(emfor example, to decide whether to use \*Lbcopy(\|)\*O
or \*Lmemcopy(\|)\*O. Note that many other system/machine dependent conditional
definitions are found in this file, so it should be carefully inspected
when porting GDS.
...\" 
...\" 
...\" 
.LI
\*LDSA\*O
.P
Found in:
.DS
    \*Vdce-root-dir\*L/dce/src/directory/gds/asn1\*O
.DE
.P
DSA is used for compiling the same source twice: if defined, the messages
are taken as DSP messages, if not, as DAP messages. The files which are
compiled with DSA you will find in \*Llibdirasn.a\*O (linked by the DSA),
the corresponding files which are compiled without DSA you will find
in \*Llibd24asn.a\*O (linked by DSA and C-Stub).
...\" 
...\" 
...\" 
...\" .LI
...\" \*LDSP_TESTING\*O
...\" .P
...\" Found in:
...\" .DS
...\"     \*Vdce-root-dir\*L/dce/src/directory/gds/adm/delupd\*O
...\" 
...\"     \*Vdce-root-dir\*L/dce/src/directory/gds/dua\*O
...\" .DE
...\" .P
...\" If defined, turns on yet more logging for DSP testing.
...\" 
...\" 
...\" 
.sp 1
...\" .LI
...\" \*LERRLOG\*O
...\" .LI
...\" \*LFUNCLOG\*O
...\" .LI
...\" \*LMSGLOG\*O
...\" .P
...\" Found in:
...\" .DS
...\"     \*Vdce-root-dir\*L/dce/src/directory/gds/h/d23ipc.h\*O
...\" 
...\"     \*Vdce-root-dir\*L/dce/src/directory/gds/ipc/*.c\*O
...\" .DE
...\" .P
...\" These three symbols, if defined, turn on \*LD23_ELOG\*O (error logging),
...\" \*LD23_FLOG\*O (function entry/exit logging), and \*LD23_MLOG\*O (message logging),
...\" respectively, for IPC testing.
...\" 
...\" 
...\" 
...\" .LI
...\" \*LHETERO\*O
...\" .P
...\" Strukturdefinition soll unabhaengig von eventuellen alignments sein, d.h. 
...\" fuer beliebige Compiler dasselbe Speicherabbild ergeben (Wichtig fuer Verwen-
...\" dung dieser Strukturen bei Nachrichtenschnittstellen z.B. zwischen 
...\" BS2000- und SINIX-Systemen).
...\" 
...\" 
...\" 
...\" .LI
...\" \*LFUNCLOG\*O
...\" .P
...\" See \*LERRLOG\*O.
...\" 
...\" 
...\" 
...\" .LI
...\" \*LISAM_LOCK\*O
...\" .P
...\" 
...\" 
...\" 
...\" 
...\" 
...\" .LI
...\" \*LMSGLOG\*O
...\" .P
...\" See \*LERRLOG\*O.
...\" 
...\" 
...\" 
.LI
\*LM_SYSV\*O
.P
Found in:
.DS
    \*Vdce-root-dir\*L/dce/src/directory/gds/adm/admin/cget.c\*O
.DE
.P
Sets up line discipline, i.e. terminal escape sequences, for different
platforms, over the entire GDS tree.
...\" 
...\" .DS
...\"     \*Vdce-root-dir\*L/dce/src/directory/gds/adm/admin\*O
...\" .DE
...\" governs whether System V file attribute functions and structures are
...\" to be compiled in.
...\" 
...\" 
...\" 
.LI
\*LOSFCDS\*O
.P
A default symbol found in:
.DS
    \*Vdce-root-dir\*L/dce/src/directory/gds/dua\*O
...\" 
...\"     \*Vdce-root-dir\*L/dce/src/directory/gds/dua/dua_dce\*O
.DE
.P
Supports XDS switching between GDS and CDS. If \*LOSFCDS\*O and
\*LOSF_CDS_REFERRALS\*O are defined, the DUA checks to see if it should be
referring an operation to the CDS instead, and if so, calls CDS through the
DUA switch code. Otherwise, no switch support is compiled into GDS.
...\" 
...\" 
...\" 
.LI
\*LOSF_DCE\*O
.P
Found in:
...\" 
.DS
    \*Vdce-root-dir\*L/dce/src/directory/gds/ASN1/asn1.h\*O
    \*Vdce-root-dir\*L/dce/src/directory/gds/ASN1/Makefile\*O .\ .\ .
.DE
...\" 
.P
Governs whether GDS's portable \*Lmalloc(\|)\*O and \*Lfree(\|)\*O will be compiled
in, as well as the use of the CMA thread-safe library.
...\" 
...\" 
...\" 
...\" .LI
...\" \*LSYS5\*O
...\" .P
...\" See \*LBERKELEY\*O.
...\" 
...\" 
...\" 
...\" .LI
...\" \*LSYS5ATT\*O
...\" .P
...\" Found in:
...\" .DS
...\"     \*Vdce-root-dir\*L/dce/src/directory/gds/adm/admin\*O
...\" 
...\"     \*Vdce-root-dir\*L/dce/src/directory/gds/util\*O
...\" .DE
...\" .P
...\" Governs whether System V file attribute functions and structures are to
...\" be compiled in.
...\" 
...\" 
...\" 
.LI
\*LTHREADSAFE\*O
.P
Found in:
.DS
    \*Vdce-root-dir\*L/dce/src/directory/xds\*O
    \*Vdce-root-dir\*L/dce/src/directory/xom\*O
    \*Vdce-root-dir\*L/dce/src/directory/gds/dua\*O
    \*Vdce-root-dir\*L/dce/src/directory/gds/ASN1\*O
    \*Vdce-root-dir\*L/dce/src/directory/gds/cache\*O
    \*Vdce-root-dir\*L/dce/src/directory/gds/ipc\*O   .\ .\ .
.DE
.P
Activates threads support.
...\" 
...\" 
...\" 
.LI
\*LTRACE\*O
.P
Found in:
.DS
    \*Vdce-root-dir\*L/dce/src/directory/gds/adm/adm_dump

    \*Vdce-root-dir\*L/dce/src/directory/gds/adm/admin
.DE
.P
Compiles GDS trace code into modules. This mostly consists of function
entrance/exit/error logs, written to \*Lstderr\*O.
...\" 
...\" 
...\" 
...\" .LI
...\" \*LUSE_LOCAL_PRINT_MACROS\*O
...\" .P
...\" Found in:
...\" .DS
...\"     \*Vdce-root-dir\*L/dce/src/directory/gds/gda/h/gda_x500.h\*O
...\" .DE
...\" .P
...\" Builds in macros for \*Lgda_child\*O debugging messsages. The header file
...\" \*Lcommon.h\*O should have been included before this. There are macros in
...\" \*Lcommon.h\*O called \*LPRINT_ALLWAYS(\|)\*O, \*LERROR_PRINT(\|)\*O, and
...\" \*LPRINT(\|)\*O. These macros resolve to calls to the function
...\" \*Lerror_print(\|)\*O in \*Lgda_main.c\*O.
...\" 
...\" 
...\" 
...\" .LI
...\" \*LXTITRACE\*O
...\" .P
...\" Found in:
...\" .DS
...\"     \*Vdce-root-dir\*L/dce/src/directory/gds/oss/prod\*O
...\" .DE
...\" .P
...\" Turns on the XTI trace package, defined in:
...\" .DS
...\"     \*Vdce-root-dir\*L/dce/src/directory/gds/oss/prod/xtitrace.h\*O
...\" 
...\"     \*Vdce-root-dir\*L/dce/src/directory/gds/oss/prod/xtitrace.c\*O
...\" .DE
...\" 
...\" 
...\" 
...\" .LI
...\" \*LX500_CHILD_PROCESS\*O
...\" .P
...\" Found in:
...\" .DS
...\"     \*Vdce-root-dir\*L/dce/src/directory/gds/gda/h/gda_x500.h
...\" .DE
...\" .P
...\" Governs whether IDL stubs and prototypes for functions from \*Lx500access.c\*O
...\" are compiled into \*Lgda_child\*O.
...\" 
...\" 
...\" 
.LE 
...\" 
...\" 
...\" 
...\" 
...\" 
...\" ----------------------------------------------------------------------
.H 3 "XDS/XOM Preprocessor Variables"
...\" ----------------------------------------------------------------------
...\" 
...\" 
...\" 
.P
The following compile-time constants, set by default in the XDS/XOM Makefiles,
govern XDS/XOM configuration, testing, and logging.
...\" 
...\" 
...\" 
.VL .5i
...\" 
...\" .LI
...\" \*LOMTRACE\*O
...\" .P
...\" If defined, turns on the tracing facility for XOM, defined in:
...\" .DS
...\"     \*Vdce-root-dir\*L/dce/src/directory/xom/omTrace.c\*O
...\" .DE
...\" .P
...\" XOM discovers its trace options by getting the value of the environment variable
...\" \*LOM_TRACE_OPTIONS\*O. \*LOMTRACE\*O is left undefined by default in the
...\" shipped XOM source tree.
...\" 
.LI
\*LTHREADSAFE\*O
.P
Set in:
.DS
    \*Vdce-root-dir\*L/dce/src/directory/xds/Makefile\*O

    \*Vdce-root-dir\*L/dce/src/directory/xom/Makefile\*O
.DE
.P
Enables XDS multi-threading.
...\" 
.LI
\*LTRACE\*O
.P
Set by default in:
.DS
    \*Vdce-root-dir\*L/dce/src/directory/xds/Makefile\*O
.DE
.P
Compiles in the XDS tracing package, which logs various information using the
\*LTRACE_xx\*O macros. The trace package is found in:
.DS
    \*Vdce-root-dir\*L/dce/src/directory/xds/h/xdstrace.h\*O
.DE
...\" 
...\" .LI
...\" \*LXDSINIT\*O
...\" .P
...\" Set by default in:
...\" .DS
...\"     \*Vdce-root-dir\*L/dce/src/directory/xom/Makefile\*O
...\" .DE
...\" .P
...\" for alloc.o, and directly in:
...\" .DS
...\"     \*Vdce-root-dir\*L/dce/src/directory/xom/dsPWkspace.c\*O
...\" .DE
...\" .P
...\" The following include files:
...\" .DS
...\"     \*Vdce-root-dir\*L/dce/src/directory/xom/h/mduppkg.h\*O
...\" 
...\"     \*Vdce-root-dir\*L/dce/src/directory/xom/h/xdsalloc.h\*O
...\" 
...\"     \*Vdce-root-dir\*L/dce/src/directory/xom/h/xdspackage.h\*O
...\" .DE
...\" .P
...\" use it to set up various default XDS packages, including the packages necessary
...\" for running XDS over GDS, such as the GDS extension package. \*LXDSINIT\*O is
...\" also used to set up structures for allocation statistics.
...\" 
.LI
\*L_MDUP_PKG_\*O
.P
Set by default in:
.DS
    \*Vdce-root-dir\*L/dce/src/directory/xds/Makefile\*O
.DE
.P
Sets up the DCE MDUP package in:
.DS
    \*Vdce-root-dir\*L/dce/src/directory/xds/h/mdupppkg.h\*O

    \*Vdce-root-dir\*L/dce/src/directory/xds/h/xdsalloc.h\*O

    \*Vdce-root-dir\*L/dce/src/directory/xds/h/xdspackage.h\*O
.DE
...\" .P
...\" Alternatively, \*Lxdspackage.h\*O has dummy definitions for the MDUP macros
...\" which can be defined to set up one's own MDUP package.
...\" 
.LE
...\" 
...\"  
...\" .zZ "Added conditional symbols"
...\" 
...\" 
...\" 
...\" 
...\" ----------------------------------------------------------------------
.H 2 "GDS, XDS, and XOM: Building and Linking"
...\" ----------------------------------------------------------------------
...\" 
.iX "building component code" "GDS"
.iX "GDS" "building component code"
...\" 
.P
The
.DS
    \*Vdce-root-dir\*L/dce/src/directory/gds\*O
.DE
.P
directory contains the source code for building the DCE Global Directory Service
(GDS).
.P
The
.DS
    \*Vdce-root-dir\*L/dce/src/directory/xds\*O
.DE
.P
directory contains the source code for building the DCE X/Open Directory Service
(XDS) library.
.P
The
.DS
    \*Vdce-root-dir\*L/dce/src/directory/xom\*O
.DE
.P
directory contains the source code for building the DCE X/Open OSI-Abstract-Data
Manipulation (XOM) library.
.P
The
.DS
    \*Vdce-root-dir\*L/dce/src/directory/xoms\*O
.DE
.P
directory contains the source code for building the convenience library 
\*Llibxoms\*O for the DCE X/Open OSI-Abstract-Data Manipulation (XOM) 
functionality.
.P
Compiler and linker flags for building GDS reside in:
.DS
    \*Vdce-root-dir\*L/dce/src/directory/gds/gds.mk\*O
.DE
.P
Machine-specific compiler and linker flags that affect the compilation
or linking of the whole component should be included in this file.
.P
See the table in the ``GDS File Locations'' section of this chapter for a
list of directories where executables are built and for the GDS, XDS,
and XOM modules incorporated into \*Llibdce\*O.
...\" 
...\" 
...\" 
...\" ----------------------------------------------------------------------
.H 3 "Libraries"
...\" ----------------------------------------------------------------------
...\" 
.P
To simplify linking of GDS executables, some GDS component-specific libraries
are copied (exported) to the
.DS
    \*Vdce-root-dir\*L/dce/export/\*Vmachine\*L/usr/lib\*O
.DE
.P
directory. Since this directory is
included in the \*LLIBPATH\*O environment variable within the build environment,
explicit paths to the exported GDS libraries need not be specified in the
\*LMakefiles\*O used to build the executables dependent on those libraries.
...\" 
...\" .P
...\" Although \*Llibasn1_r.a\*O, a re-entrant version of \*Llibasn1.a\*O, is built for
...\" inclusion in \*Llibdce\*O, GDS components that require the ASN.1 library link
...\" to the standard version found in:
...\" .DS
...\"     \*Vdce-root-dir\*L/dce/export/\*Vmachine\*L/usr/lib\*O
...\" .DE
...\" 
...\" 
...\" 
...\" ----------------------------------------------------------------------
.H 2 "GDS Testing Overview"
...\" ----------------------------------------------------------------------
...\" 
.P
The following types of GDS tests are shipped with DCE:
...\" 
.BL
.LI
Admin
.P
Tests the menu-driven administration interface and the functionality it
provides.
.LI
API
.P
Tests the XDS/XOM/XOMS/MHS application programming interfaces.
.LI
DUA Switch
.P
Tests the switching mechanism between CDS and GDS.
.LI
\*Lgdscp\*O
.P
Tests the command line interface.
.LI
\*Lgdssetup\*O
.P
Tests the command to create or initialize directory configuration.
.LI
\*Lgds_sec\*O
.P
Tests the use of DCE authentication.
.LI
MAVROS
.P
Tests for the MAVROS compiler.
...\" 
...\" .LI
...\" ROS
...\" .P
...\" Tests for the ROS protocols.
...\" 
.LE
...\" 
.P
In addition, hand procedures for testing GDS intercell operation can be found
in the section ``Testing GDS Intercell Operation'', later in this chapter.
...\" 
.P
Compiler and linker flags for building the GDS test cases reside in:
.DS
    \*Vdce-root-dir\*L/dce/src/test/test.mk\*O
.DE
.P
Machine-specific compiler and linker flags that affect the compilation
or linking of the GDS test cases should be included in this file.
...\" 
.P
The following subsections describe how to install and set up GDS, and how to
run tests for each of the categories in the previous list.
...\" 
...\" ZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZ
...\" 
...\" 
...\" 
...\" .P
...\" The testing process for the Admin tests and the XDS/XOM tests are similar.
...\" A detailed step-by-step process is given for the Admin tests, and a more
...\" abbreviated process is given for the XDS/XOM tests. If you are running the
...\" XDS/XOM tests, refer back to the description of the Admin tests for more
...\" details.
...\" 
...\" 
...\" 
...\" .zA "Added information on XDS-CDS testing"
.P
Note the following prerequisite conditions for testing various aspects
of XDS:
...\" 
.BL
.LI
In order to test XDS access to GDS, you must have GDS running.
.LI
You do not have to have GDS running in order to test XDS access to CDS.
...\" 
.LE
...\" .zZ "Added information on XDS-CDS testing"
...\" 
...\" 
...\" ----------------------------------------------------------------------
...\" .zA "dcetest_config information added"
...\" 
...\" ----------------------------------------------------------------------
.H 3 "Changes to the GDS Functional Tests Since DCE 1.0.3"
...\" ----------------------------------------------------------------------
...\" 
.P
The GDS and XDS functional tests have been overhauled for DCE 1.1, and new
functional tests have been implemented for new functionality. The tests have
been converted to use the X/Open Test Environment Tool (TET) test harness. TET
provides a common invocation mechanism for all GDS/XDS functional tests, a
consistent means of determining testcase outcome, and a common repository for
testcase results.
.P
Additionally, the administration tests are now completely automated.
.P
The exception to the above statement is the MAVROS test. This still runs in
the same manner as it did in the previous release.
.P
Following are the tests that are available:
...\" 
...\" 
.BL
.LI
GDS Tests
...\" 
...\" 
.BL
.LI
The admin tests located under the
...\" 
.DS
    \*L/dcetest/dcelocal/test/tet/functional/directory/gds/ts/admin\*O
.DE
...\" 
.P
directory:
...\" 
.VL 1i
.LI "\*Lcacheadm\*O"
cache administration testsuite
.LI "\*Ldsa\*O"
DSA administration testsuite
.LI "\*Lshadow\*O"
shadow administration testsuite
.LI "\*Lsubtree\*O"
subtree administration testsuite
.LI "\*Lscheme\*O"
schema administration testsuite
.LE
...\" 
...\" 
.LI
The \*Lgdscp\*O tests located under the
...\" 
.DS
    \*L/dcetest/dcelocal/test/tet/functional/directory/gds/ts/gdscp\*O
.DE
...\" 
.P
directory tests the GDS command program.
...\" 
.LI
The GDS security tests located under the
...\" 
.DS
    \*L/dcetest/dcelocal/test/tet/functional/directory/gds/ts/gds_sec\*O
.DE
...\" 
.P
directory test the GDS security methods.
...\" 
.LI
The \*Lgdssetup\*O tests located under the
...\" 
.DS
    \*L/dcetest/dcelocal/test/tet/functional/directory/gds/ts/gdssetup\*O
.DE
...\" 
.P
directory test the GDS setup program.
.LE
...\" 
...\" 
.LI
API Tests
...\" 
...\" 
.BL
.LI
The XDS API tests, located under the
...\" 
.DS
    \*L/dcetest/dcelocal/test/tet/functional/directory/xds/ts/xds\*O
.DE
...\" 
.P
directory:
...\" 
.VL .5i
.LI "\*Lxds_st\*O"
single-threaded mode
.LI "\*Lxds_mt\*O"
multi-threaded mode
.LE
...\" 
...\" 
.LI
XOM API tests, located under the
...\" 
.DS
    \*L/dcetest/dcelocal/test/tet/functional/directory/xds/ts/xom\*O
.DE
...\" 
.P
directory:
...\" 
...\" 
.VL .5i
.LI "\*Lxom_st\*O"
single-threaded mode
.LI "\*Lxom_mt\*O"
multi-threaded mode
.LE
...\" 
...\" 
.LI
XOMS API tests, located under the
...\" 
.DS
    \*L/dcetest/dcelocal/test/tet/functional/directory/xds/ts/xoms\*O
.DE
...\" 
.P
directory:
...\" 
...\" 
.VL .5i
.LI "\*Lxoms_st\*O"
single-threaded mode
.LI "\*Lxoms_mt\*O"
multi-threaded mode
.LE
...\" 
...\" 
.LI
MHS API tests, located under the
...\" 
.DS
    \*L/dcetest/dcelocal/test/tet/functional/directory/xds/ts/mhs\*O
.DE
...\" 
.P
directory:
...\" 
...\" 
...\" 
.VL .5i
.LI "\*Lmhs_st\*O"
single-threaded mode
.LE
...\" 
...\" 
.LI
SWITCH API tests, located under the
...\" 
.DS
    \*L/dcetest/dcelocal/test/tet/functional/directory/xds/ts/switch\*O
.DE
...\" 
.P
directory:
...\" 
...\" 
...\" 
.VL .5i
.LI "\*Lswitch_st\*O"
single threaded mode
.LI "\*Lswitch_mt\*O"
multi-threaded mode
.LI "\*Lswitch_DNS\*O"
typeless tests (uses DNS Cell Name)
.LE
.LE
.LE
...\" 
...\" 
.P
The MAVROS tests are located at:
...\" 
.DS
    \*L/dcetest/dcelocal/test/directory/gds/mavrostest\*O
.DE
...\" 
.P
The TET binaries and scripts are located at:
...\" 
.DS
    \*L/dcetest/dcelocal/test/tet/bin\*O
    \*L/dcetest/dcelocal/test/tet/lib\*O
.DE
...\" 
...\" 
...\" 
...\" 
...\" ----------------------------------------------------------------------
.H 3 "Installing GDS Functional Tests with dcetest_config"
...\" ----------------------------------------------------------------------
...\" 
.P
You can install the functional tests described in the following sections
by running the menu-driven \*Ldcetest_config\*O script described in Chapter
13 of this guide. \*Ldcetest_config\*O will install the tests you select at
the path you specify, and will create a softlink (called \*L/dcetest/dcelocal\*O)
to that location. The functional tests for a given component will thus be
installed under a:
.DS
    \*L/dcetest/dcelocal/test/\*Vcomponent_name\*L/\*O
.DE
...\" 
.P
directory, where the \*Ltest/\*Vcomponent_name\*O elements of this path are
equivalent to the \*Ltest/\*Vcomponent_name\*O elements in the pathnames given in
the sections below, which refer to the tests' source or build locations.
...\" 
...\" 
.P
The GDS and XDS functional tests are available via option 4 (``Global Directory
Service'') of the ``DCE Test Installation (Functional Tests'' menu. The TET
binaries are available via option 3 (``TET'') of the DCE Test Installation
menu.
...\" 
...\" 
.P
Note that \*Ldcetest_config\*O will prompt you for the location \*Vfrom which\*O
the tests should be installed (in other words, the final location of the built
test tree). For the GDS functional tests, this path should be the location, on
your machine, of:
.DS
    \*Vdce-root-dir\*L/dce/install/\*Vtarget_machine\*L/dcetest/dce1.1\*O
.DE
...\" 
...\" 
.P
\(emwhich is the DCE \*Linstall\*O tree (for more information on the structure
of the DCE tree, see Chapter 12 of this guide).
.P
Thus, \*Ldcetest_config\*O will install the GDS functional tests at:
...\" 
.DS
    \*L/dcetest/dcelocal/test/tet/functional/directory/gds\*O
.DE
...\" 
.P
and:
...\" 
.DS
    \*L/dcetest/dcelocal/test/tet/functional/directory/xds\*O
.DE
...\" 
.P
where \*L/dcetest/dcelocal\*O is the link to whatever path you supplied as
the install destination.
...\" 
...\" 
.P
It is recommended that you not actually install the tests on your root filesystem;
they are quite large. You will need at least 8 Megabytes of space in order to install
the necessary software, and you should have another 8 Megabytes to allow for the
creation of log files and test results journals.
...\" 
...\" 
.P
The advantage in using \*Ldcetest_config\*O to install the functional tests
is that it will install \*Vall\*O that is needed and \*Vonly\*O what is needed
out of the DCE build, thus avoiding the mistakes that can occur with manual
installation.
.P
Note that you can only \*Vinstall\*O the functional tests with \*Ldcetest_config\*O;
you must use TET to run the tests (with the exception of the MAVROS tests). Information
on running the individual tests can be found in the following sections.
.P
See ``Overview of TET Use'' in Chapter 13 for general information on TET.
...\" 
...\" 
...\" .zZ "dcetest_config information added"
...\" 
...\" ----------------------------------------------------------------------
...\" 
...\" 
...\" ----------------------------------------------------------------------
.H 3 "Running GDS Functional Tests with TET"
...\" ----------------------------------------------------------------------
...\" 
.P
The following subsections describe and explain various aspects of running
the GDS functional tests that are run under TET.
...\" 
...\" 
...\" 
...\" ----------------------------------------------------------------------
.H 4 "Testing Tools: Test Drivers and Journal Filters"
...\" ----------------------------------------------------------------------
...\" 
.P
Several tools have been provided to make the testing process easier. These
are not part of either TET or the functional tests, but are additions to
ease the testing work load.
.P
In
...\" 
.DS
    \*L/dcetest/dcelocal/test/tet/functional/directory/gds/tools\*O
.DE
...\" 
.P
are the following scripts:
...\" 
...\" 
.VL 1.5i
...\" 
.LI "\*Llocal_TET.admin\*O"
GDS test driver
...\" 
.LI "\*LTET_filter.admin\*O"
Filter for \*Ladmin\*O test TET journal
...\" 
.LI "\*LTET_filter.gdscp\*O"
Filter for \*Lgdscp\*O test TET journal
...\" 
.LI "\*LTET_filter.gdssetup\*O"
Filter for \*Lgdssetup\*O test TET journal
...\" 
.LI "\*LTET_filter.gds_sec\*O"
Filter for \*Lgds_sec\*O test TET journal
...\" 
.LE
...\" 
.P
Similarly, in
...\" 
.DS
    \*L/dcetest/dcelocal/test/tet/functional/directory/xds/tools\*O
.DE
...\" 
.P
are the following:
...\" 
...\" 
.VL 1.5i
...\" 
.LI "\*Llocal_TET.api\*O"
XDS test driver
...\" 
.LI "\*LTET_filter.api\*O"
Filter for XDS tests TET journal
...\" 
.LI "\*Lxt_test\*O"
XDS test device
...\" 
.LE
...\" 
.P
The test driver is a front-end to the TET test environment. It sets a number
of environment variables used by the GDS tests and determines the location of
results files produced by the tests.
...\" 
The filters scan the TET journal and produce a more concise and understandable
summary of the test results.
...\" 
...\" 
...\" 
...\" ----------------------------------------------------------------------
.H 4 "Setting Up to Run the Tests"
...\" ----------------------------------------------------------------------
...\" 
.P
Before running either the GDS or API tests you must do the following things:
...\" 
...\" 
.AL
...\" 
.LI
Set the \*LTET_ROOT\*O environment variable to
...\" 
.DS
    \*L/dcetest/dcelocal/test/tet\*O
.DE
...\" 
.P
For example (in a C shell):
...\" 
.oS
    % \*Lsetenv TET_ROOT /dcetest/dcelocal/test/tet\*O
.oE
...\" 
...\" .LI
...\" Configure and activate GDS as follows:
...\" 
...\" .oS	
...\"     %  gdssysadm -fc -d1 -m1 -c1 -C16 
...\"     %  gdssysadm -fA 
...\" 
...\"     % \*Lgdssysadm -fc -d1 -m1 -c1 -C16\*C
...\"     % \*Lgdssysadm -fc -d2 -m1 -c2 -C16 -s2 -u1 -A2\*C
...\"     % \*Lgdssysadm -fc -d3 -m1 -c2 -C16 -s2 -u0 -A2\*C
...\"     % \*Lgdssysadm -fc -d4 -m1 -c2 -C16 -s2 -u0 -A2\*C
...\"     % \*Lgdssysadm -fc -d5 -m1 -c2 -C16 -s2 -u1 -A2\*C
...\"     % \*Lgdssysadm -fA\*O
...\" .oE
...\" 
.P
Note that the above configuration steps are required only if the user starts
with a newly-installed GDS. As soon as the tests have been started once, some
Directory IDs will always be configured already.
...\" 
...\" 
...\" 
.LI
Set the \*LOUTDIR\*O environment variable to specify a location to which the
test-specific log files are to be written. If this variable is not set, the
test driver will specify the default logfile destination to be:
...\" 
.DS
    \*L$TET_ROOT/functional/directory/gds/outdir.\*Vhostname\*O
.DE
...\" 
.P
or
...\" 
.DS
    \*L$TET_ROOT/functional/directory/xds/outdir.\*Vhostname\*O
.DE
...\" 
.P
\(emdepending on which tests are being run.
...\" 
.LE
...\" 
.P
You may now run whichever of the TET-executed tests you wish.
...\" 
...\" 
...\" 
...\" 
...\" ----------------------------------------------------------------------
.H 4 ""
...\" ----------------------------------------------------------------------
...\" 
.P
The tests listed below configure single-machine DCE cells as part of the test
environment. The cellnames are hard-coded into the test scripts; thus you cannot
run these tests on more than one machine on the same LAN at the same time. If
two or more cells of the same name exist on the same LAN they will intercept
and respond to each other's cell broadcasts. This will cause problems with
CDS which will result in failures of calls to \*Lrpc_binding_set_auth_info(\|)\*O,
typically by the CDS clerk.
...\" 
.P
The workaround is to do only one iteration of these tests at a time on any
subnet.
...\" 
...\" 
...\" 
.VL 1.5i
...\" 
.LI "\*VTest\*O"
\*VCellname configured\*O
...\" 
.LI "\*Lgds_sec\*O"
\*Lc=ie/o=digital\*O
...\" 
.LI "\*Lswitch_mt\*O"
\*Lc=ie/o=digital\*O
...\" 
.LI "\*Lswitch_st\*O"
\*Lc=ie/o=digital\*O
...\" 
.LI "\*Lswitch_DNS\*O"
\*Lsnidec.sni.com\*O
...\" 
.LE
...\" 
...\" 
...\" 
...\" ----------------------------------------------------------------------
.H 4 "Running the Admin Tests"
...\" ----------------------------------------------------------------------
...\" 
.P
The Administration test driver accepts options that specify which particular
suite of tests to run. The driver is invoked as follows:
...\" 
.iS
    local_TET.admin \*Vtest_suite\*O
.iE
...\" 
.P
where \*Vtest_suite\*O is one of the scenarios listed in the \*Ltet_scen\*O
file. The principal scenarios are:
...\" 
...\" 
.VL 1i
...\" 
.LI "\*Lall\*O"
All admin tests
...\" 
...\" .LI "\*Lall_no_gdssetup\*O"
...\" All admin tests except those for \*Lgdssetup\*O
...\" 
...\" .LI "\*Lall_no_gds_sec\*O"
...\" All admin tests except those for \*Lgds_sec\*O
...\" 
...\" .LI "\*Lall_no_gds_sec_gdssetup\*O"
...\" All admin tests except those for \*Lgds_sec\*O and \*Lgdssetup\*O
...\" 
...\" .LI "\*Lall_no_gds_sec_gdssetup_gdscp\*O
...\" All admin tests except those for \*Lgds_sec\*O, \*Lgdssetup\*O and \*Lgdscp\*O
...\" 
...\" .LI "\*Lall_no_gds_sec_gdscp\*O"
...\" All admin tests except those for \*Lgds_sec\*O and \*Lgdscp\*O
...\" 
.LI "\*Lgdscp\*O"
GDSCP test suite
...\" 
.LI "\*Lcadm\*O"
Cacheadm testsuite
...\" 
.LI "\*Ldsa\*O"
DSA testsuite
...\" 
.LI "\*Lscheme\*O"
Schema testsuite
...\" 
.LI "\*Lshadow\*O"
Shadow testsuite
...\" 
.LI "\*Lsubtree\*O"
Subtree testsuite
...\" 
.LI "\*Lgdssetup\*O"
GDS Setup test suite
...\" 
.LI "\*Lgds_sec\*O"
GDS Security test suite
...\" 
...\" 
...\" 
.LE
...\" 
...\" 
.P
For example:
...\" 
.oS
    % \*L./local_TET.admin gdscp\*C
    % \*L./local_TET.admin subtree\*O
.oE
...\" 
...\" 
...\" 
...\" 
...\" 
...\" ----------------------------------------------------------------------
.H 4 "Running the API Tests"
...\" ----------------------------------------------------------------------
...\" 
.P
For the API test driver, test suites are specified by switches followed by
values. The driver also will print a ``help'' message when this is specified
with the \*L-h\*O switch.
.P
The driver is invoked as follows:
...\" 
.iS
    local_TET.api [-c] [-h] [-l] -s \*Vtest_suite\*O
.iE
...\" 
.P
where:
...\" 
...\" 
.VL 1i
.LI "\*L-c\*O"
Specifies that  XOMS Convenience functions be used (this is the default when
\*Lall\*O is specified as the \*Vtest_suite\*O; see below).
...\" 
.LI "\*L-h\*O"
Specifies that a help message be displayed.
...\" 
.LI "\*L-l\*O"
Specifies that API test logs not be removed after test run.
...\" 
.LI "\*L-s\ \*Vtest_suite\*O"
Specifies the \*Vtest_suite\*O to run; \*Vtest_suite\*O is one of the following:
...\" 
.VL 2i
...\" 
.LI "\*Lxds_all_ST\*O"
All single-threaded XDS tests
...\" 
.LI "\*Lxds_all_MT\*O"
All multi-threaded XDS tests
...\" 
.LI "\*Lxds_all\*O"
All XDS tests (single- and multi-threaded)
...\" 
.LI "\*Lxom_all_ST\*O"
All single-threaded XOM tests
...\" 
.LI "\*Lxom_all_MT\*O"
All multi-threaded XOM tests
...\" 
.LI "\*Lxom_all\*O"
All XOM tests (single- and multi-threaded)
...\" 
.LI "\*Lxoms_all_ST\*O"
All single-threaded XOMS tests
...\" 
.LI "\*Lxoms_all_MT\*O"
All multi-threaded XOMS tests
...\" 
.LI "\*Lxoms_all\*O"
All XOMS tests (single- and multi-threaded)
...\" 
.LI "\*Lswitch_all_ST\*O"
All single-threaded SWITCH tests
...\" 
.LI "\*Lswitch_all_MT\*O"
All multi-threaded SWITCH tests
...\" 
.LI "\*Lswitch_all_DNS\*O"
All typeless SWITCH tests
...\" 
.LI "\*Lswitch_all\*O"
All SWITCH tests (single- and multi-threaded and typeless)
...\" 
.LI "\*Lmhs_all\*O"
All MHS tests
...\" 
.LI "\*Lall_no_switch\*O"
All of the above except switch tests
...\" 
.LI "\*Lall\*O"
All of the above
...\" 
.LE
...\" 
...\" 
.P
For example:
...\" 
.oS
    % \*L./local_TET.api -h\*C
    % \*L./local_TET.api -s switch_all_ST\*C
    % \*L./local_TET.api -s xds_all\*C
.oE
...\" 
...\" 
...\" 
...\" 
...\" 
...\" ----------------------------------------------------------------------
.H 4 "How to Interpret Test Results"
...\" ----------------------------------------------------------------------
...\" 
.P
Two kinds of output are generated by the GDS functional tests run under TET:
...\" 
...\" 
.BL
.LI
The TET journals, found at
...\" 
.DS
    \*L$TET_ROOT/functional/directory/gds/results 
.DE
...\" 
.P
and:
...\" 
.DS
    \*L$TET_ROOT/functional/directory/xds/results 
.DE
...\" 
.P
Journals produced by TET provide a synopsis of what happened during a test's
execution. Details about the kind of information contained in the journals may
be found in the TET documentation in the source tree, at
...\" 
.DS
    \*Vdce-root-dir\*L/dce/src/test/tet/doc\*O
.DE
...\" 
.P
In general, the journals contain statements that indicate whether the testcase
passed, failed, or did something else.
.P
The \*LTET_filter.*\*O scripts have been provided to help you organize the
journal information into a more manageable format. The formats of the reports
output by the filters vary, but each is self-explanatory. You run the filter
by specifying the relative path to the journal file you wish to filter; for
example:
...\" 
.oS
    % \*Ltools/filter_TET.api results/0001e/journal\*O
.oE
...\" 
.P
This will produce a file called \*Ljournal.log\*O in your current working
directory.
...\" 
...\" 
...\" 
.LI
The Test-Specific output files, found at
...\" 
.DS
    \*L$OUTDIR\*O
.DE
...\" 
.P
These files are not necessary for determining the pass/fail status of the test.
They contain supplementary information not contained in the journal file; this
information may be useful for debugging test problems, or simply as further
verification that a test has passed.
.P
The number, content, and format of these files are all specific to the test
being executed.
...\" 
...\" 
.LE
...\" 
...\" 
...\" 
...\" 
...\" ----------------------------------------------------------------------
...\" .H 2 "The Administration Tests"
...\" ----------------------------------------------------------------------
...\" 
...\" .P
...\" The administration tests fall into the following functional areas:
...\" 
...\" .BL
...\" .LI
...\" bind/unbind
...\" .LI
...\" object administration (DUA cache and DSA)
...\" .LI
...\" schema administration
...\" .LI
...\" shadow administration
...\" .LI
...\" cache administration
...\" .LI
...\" subtree administration
...\" .LE
...\" 
...\" .P
...\" Each test is a batch file that mimics the entries an administrator can make
...\" when entering options manually from the menu-driven interface (\*Ltestall.sh\*O).
...\" When you run these tests, the administration screens and batch file inputs flash
...\" on the screen.
...\" 
...\" 
...\" ----------------------------------------------------------------------
...\" .H 3 "Configuring the Directory Prior to Testing"
...\" ----------------------------------------------------------------------
...\" 
...\" .P
...\" The configuration for the Administration tests and the XDS/XOM
...\" tests is shown in Figure 5-5.
...\" 
...\" .DS
...\" .FG "Admin and XDS/XOM Test Configuration"
...\" .so port_gd/pic/05_gds_01.pic
...\" .DE
...\" 
...\" .P
...\" For the tests listed below to operate correctly, you must
...\" pre-configure the directory with the appropriate ID.
...\" The following directory ID(s) must be configured for each test.
...\" 
...\" .ne 2i
...\" .TB "Directory IDs that Must be Configured"
...\" .ad l
...\" .TS H
...\" center tab(@) box;
...\" lB | lB | lB | lB | lB
...\" l l | l | l | l.
...\" Test Number@Component@Test@Dir ID required@Second DSA
...\" _
...\" .TH
...\" _
...\" 0@DSA@Bind and Unbind@1@no
...\" 1@DSA@Object Administration@1@no
...\" 2@DSA@Schema Administration@3, 4@no
...\" 3@DSA@Shadow Administration@1@yes
...\" 4@DSA@Subtree Administration@1@yes
...\" 5@Cache@Object Administration@1@no
...\" .TE
...\" .ad b
...\" 
...\" .P
...\" The second DSA required for tests 3 and 4 can be on a remote machine or
...\" another DSA configured with Directory ID 2, reached over the local
...\" loopback.
...\" It is therefore possible to run all batch files on a single machine.
...\" 
...\" 
...\" 
...\" ----------------------------------------------------------------------
...\" .H 3 "Setting Up for the Administration Tests"
...\" ----------------------------------------------------------------------
...\" 
...\" .P
...\" This subsection gives a detailed step-by-step procedure for setting up GDS in
...\" preparation for running the Admin tests. The testing configuration consists of
...\" two machines, each configured as a Client/Server system. The tests are run from
...\" Machine 1. For information on running \*Lgdssysadm\*O and \*Lgdsditadm\*O, see
...\" the GDS part of the \*VOSF DCE Administration Guide\(emExtended Services\*O.
...\" 
...\" .AL
...\" .LI
...\" Install GDS software on Machine 1.
...\" 
...\" .BL
...\" .LI
...\" Log in as root:
...\" 
...\" .AL
...\" .LI
...\" Change your \*LPATH\*O environment variable to include
...\" \*L/usr/bin\*O.
...\" .LI
...\" Change your \*LLANG\*O variable to ``C''. You do not have to set \*LNLSPATH\*O.
...\" .LE
...\" 
...\" .LI
...\" Run \*Ldce_config\*O and install the GDS server.
...\" Do this for clients as well.
...\" .LE
...\" 
...\" .LI
...\" Configure Machine 1 with the \*Lgdssysadm\*O program as a client/server
...\" (option \*Lc\*O in the menu).
...\" .P
...\" Enter \ \*Lgdssysadm\*O\ at the command line.
...\" The GDS Administration main menu is displayed on the screen.
...\" 
...\" .nS "note"
...\" You may want to enter this command in a new window (if you are using,
...\" for example X windows), because the command resets some window parameters.
...\" .nE
...\" 
...\" .P
...\" Enter \*Lc\*O to configure a directory system.
...\" The Configuration menu is displayed.
...\" .P
...\" Select the default option,
...\" 
...\" .oS
...\"     creation of configuration data
...\" .oE
...\" 
...\" by pressing \*L<Enter>\*O.
...\" A directory ID selection is displayed; accept the default (\*C1\*O) by
...\" pressing \*L<Enter>\*O.
...\" Note that for some tests, you will need other values here.
...\" .P
...\" The next selection asks you for configuration type.
...\" You can view the various choices by pressing the space bar.
...\" Select \*Cclient/server-system\*O.
...\" .P
...\" For the remainder of the questions (a maximum of 16 clients, 2 server
...\" processes, etc.), select the default options with
...\" \*L<Enter>\*O.
...\" \*VExcept\*O you should answer YES to the question
...\" 
...\" .oS
...\"     Do you want to distributed update information?
...\" .oE
...\" 
...\" .P
...\" The main menu is redisplayed after you acknowledge the last prompt.
...\" .P
...\" You have now configured Directory ID 1. If you want to also run Test 2
...\" (the schema administration tests), Directories 3 and 4 must also be
...\" configured.
...\" .P
...\" You can reconfigure a machine at any time (for example, change it from
...\" a client to a client/server) by selecting \*Lc\*O from the main menu.
...\" In the Configuration menu, press the space bar until you see
...\" 
...\" .oS
...\"     changing of configuration data
...\" .oE
...\" 
...\" as your selection. Then press \*L<Enter>\*O.
...\" .P
...\" After reconfiguration, if you change from a Client/Server System to a
...\" Client System, the database is deleted, and you must repeat the
...\" GDS Administration steps.
...\" Make sure the system has been deactivated and reactivated for the
...\" changes to take effect.
...\" .P
...\" .LI
...\" Activate GDS (option \*Lb\*O in \*Lgdssysadm\*O) on Machine 1.
...\" .P
...\" To activate GDS, select \*Lb\*O for activation of a directory system
...\" installation from the Administration main menu. This one step completes
...\" activation.
...\" .P
...\" Select \*Li\*O from the ``Further functions'' menu to see a list of
...\" processes that are currently active. If you configured a client system,
...\" there are three active processes: a \*LDUA-cache\*O process, a \*LC-stub\*O
...\" process, and an \*LIPC-monitoring\*O process. If you configured a client/server
...\" system, there are five active processes: an \*LS-stub\*O process, a \*LDSA\*O
...\" process, and the three client processes listed above.
...\" .P
...\" Note the following:
...\" 
...\" .BL
...\" .LI
...\" If you suspect something is wrong with GDS, display directory system
...\" state information by selecting \*Li\*O from the ``Further functions''
...\" menu and check for the preceding processes. If the correct processes are
...\" not active for a configuration, you must \*Ldeactivate\*O and then
...\" \*Lreactivate\*O (from the main menu) in order to get all processes
...\" reactivated properly.
...\" .LI
...\" Entering \*L<Ctrl-C>\*O from a menu other than the main menu cancels
...\" that menu and returns you to the previous one. To back out of the main
...\" menu, enter \*L<Ctrl-D>\*O, thereby terminating \*Lgdssysadm\*O.
...\" .LI
...\" The \*Lgdsdirinfo\*O command can also be useful for checking the state
...\" of directory processes. See its reference page in the
...\" \*VOSF DCE Administration Reference\*O.
...\" .LE
...\" 
...\" .LI
...\" On Machine 1, enter the correct IP addresses in the batch files.
...\" .P
...\" You now have an active GDS, but it is not ready to use because it
...\" must be provided with its client address (the port through which the
...\" client communicates) and the addresses of the DSAs (generically,
...\" servers) with which it must communicate in order to obtain database
...\" information. This information is stored in the database in the same way
...\" that conventional directory information is stored; it resides in the local
...\" database cache. It is provided to the system by creating Client Address
...\" and DSA objects, using the standard Object Administration interface.
...\" .P
...\" One of the attributes of such objects is their Presentation Service
...\" Access Point (PSAP). For TCP/IP transport, the PSAP consists of the IP
...\" address plus the port number. Since addressing information resides in the
...\" cache for each GDS installation, this part of the installation procedure is
...\" more precisely referred to as ``administering the cache.''
...\" 
...\" ----------------------------------------------------------------------
...\" .sp 2
...\" .in -0.25i
...\" \*L\s+1Batch File Templates\s-1\*O
...\" .in +0.25i
...\" .sp 1
...\" ----------------------------------------------------------------------
...\" 
...\" .P
...\" You can administer the cache to initialize GDS for use by going into
...\" the main menu of \*Lgdssysadm\*O,
...\" selecting \*La\*O for administration of a directory
...\" system, and manually stepping through a number of object-creation steps.
...\" GDS provides a batch mode for administration, so you can run batch
...\" files to set up different GDS configurations.
...\" .P
...\" Templates for batch files, to which you can make minor modifications,
...\" are in the
...\" .DS
...\"     \*L/dcetest/dcelocal/test/directory/gds/tst/t.cache\*O
...\" .DE
...\" .P
...\" and
...\" .DS
...\"     \*L/dcetest/dcelocal/test/directory/gds/tst/t.dsa\*O
...\" .DE
...\" .P
...\" directories. These templates are only useful when the transport service is
...\" TCP/IP. Administration templates for other transport services are not
...\" available.
...\" .P
...\" Before running any of the templates, you must modify them to describe
...\" the machines and port numbers in the local environment.
...\" They contain one to three lines of the form
...\" .oS
...\"     Net-address 1:TCP/IP!internet=YYY.YYY.YYY.YYY+port=XXXXX\*O
...\" .oE
...\" 
...\" .BL
...\" .LI
...\" The first number (\*CYYY.YYY.YYY.YYY\*O) is the Internet address of
...\" the machine in question. The triplets of \*LY\*Os in the example do not
...\" necessarily correspond to 3-digit numbers \(em the numbers may be of
...\" various lengths, in the range 0 to 255.
...\" 
...\" .nS "note"
...\" If that address refers to the universal IP loopback address, which it
...\" does in several files, then the first number is 127.0.0.1.
...\" .nE
...\" 
...\" .LI
...\" The second number (\*LXXXXX\*O) is the port number on which the
...\" client/server/DSA communicates. It must be unique for that machine.
...\" Otherwise, it conflicts with port numbers for other services.
...\" The port numbers provided with the templates appear to be safe choices.
...\" If you change them, you must change them consistently over the whole
...\" set of template files. The port number range is from 1024 to 32768.
...\" For example, if you change the port number of the DSA running
...\" on Machine 1, you must also change that number in all references
...\" to the DSA on Machine 1 in the other \*Lt.cacheinit\*O files.
...\" .LE
...\" 
...\" 
...\" .P
...\" In the following list of batch file templates, assume that one or two
...\" machines, identified as Machine 1 and Machine 2 respectively, are involved
...\" (filenames given are relative to:
...\" .DS
...\"     \*L/dcetest/dcelocal/test/directory/gds/tst\*O)
...\" .DE
...\" 
...\" .BL
...\" .LI
...\" The \*Lt.cache/t.cacheinit1\*O template
...\" .P
...\" For this template, Machine 1 is configured as a client/server. It initializes
...\" Machine 1 so that an internal shortcut is taken that lets the DUA communicate
...\" directly with the DSA: the Open System Interconnection (OSI) communications
...\" stack is not used when the local DUA communicates with the local DSA. This is
...\" normal for communications for machines that run both the client and server.
...\" .P
...\" There are three addresses. Address 1 is the DUA loopback address, address 2 is
...\" the local IP address of Machine 1, and address 3 is the IP address of Machine 2.
...\" .P
...\" This template also initializes Machine 1 as a server for Machine 2, for the DSA
...\" on Machine 1, and initializes the DUA to expect Machine 2 to be a server for a
...\" second DSA.
...\" .LI
...\" The \*Lt.cache/t.3cacheinit1\*O template (for Test 2)
...\" .P
...\" This template is analogous to the \*Lt.cacheinit1\*O file, but refers to
...\" directory ID 3. The same two addresses that need to be supplied for the
...\" \*Lt.cacheinit1\*O file are needed for this file.
...\" The second line of the form
...\" .oS
...\"     Net-address 1:TCP...
...\" .oE
...\" .P
...\" must be changed to contain the address of Machine 1, and the third
...\" line of this form must be changed to contain the address of Machine 2.
...\" .LI
...\" The \*Lt.cache/t.4cacheinit1\*O template (for Test 2)
...\" .P
...\" See description for the \*Lt.3cacheinit1\*O template. They are identical, except
...\" that the \*Lt.4cacheinit1\*O template applies to directory ID 4.
...\" .LI
...\" The \*Lt.dsa/t8.dsa1\*O template
...\" .P
...\" This file creates objects for the DSA on Machine 1 in the master schema. This file
...\" contains a line which supplies the local IP address of Machine 1. Edit that line to
...\" conform to your installation.
...\" .LI
...\" The \*Lt.dsa/t8.dsa2\*O template
...\" .P
...\" This file creates objects for the DSA on \*VMachine 2\*O in the master schema. This
...\" file contains a line which supplies the local IP address of Machine 2. Edit that line
...\" to conform to your installation.
...\" .LI
...\" The \*Lt.cache/t.cacheinitr\*O template
...\" .P
...\" This is an optional template for Machine 1, configured as a client/server.
...\" It does not represent a configuration that would normally be used, but it can be useful
...\" for testing purposes. It configures Machine 1 as a standalone client/server so
...\" communications between the local DUA and the DSA make full use of the OSI stack and
...\" network communications (no shortcut, as for \*Lt.cacheinit1\*O). It can be used to
...\" test the OSI stack (OSS) in situations where only one machine is available for
...\" testing.
...\" .P
...\" This template can be used without modification, except for port numbers, if necessary
...\" (see the preceding text).
...\" .LE
...\" 
...\" .LI
...\" On Machine 1, execute the following commands:
...\" 
...\" .iS
...\" \*Lgdsditadm < t.cache/t.cacheinit1\*O
...\" 
...\" \*Lgdsditadm < t.cache/t.3cacheinit1\*O   \*V(for Test 2)\*L
...\" 
...\" \*Lgdsditadm < t.cache/t.4cacheinit1\*O   \*V(for Test 2)\*O
...\" .iE
...\" 
...\" 
...\" .P
...\" A logfile \*Ltstfile\*O will be produced in:
...\" .DS
...\"     \*L$DCELOCAL/var/adm/directory/gds/adm\*O
...\" .DE
...\" .P
...\" The contents of this file may be used to verify that each command completed successfully.
...\" Note that the line ``Schema from DSA could not be read'' in \*Ltstfile\*O is not an error;
...\" it signifies that there was no previous configuration information in the DSA.
...\" .P
...\" Each DSA is initialized by the initialization scripts with the 
...\" following DSA name:
...\" 
...\" .BL
...\" .LI
...\" DSA #1 name:   \*L/C=de/O=dbp/OU=dap11/CN=dsa/CN=dsa-m1\*O
...\" .LI
...\" DSA #2 name:   \*L/C=de/O=dbp/OU=dap11/CN=dsa/CN=dsa-m2\*O
...\" .LE
...\" 
...\" .P
...\" Each cache is initialized with the name and address of both DSAs.
...\" .LI
...\" Install GDS software on Machine 2.
...\" .LI
...\" Configure Machine 2 with the \*Lgdssysadm\*O program as a client/server
...\" (option \*Lc\*O in the menu).
...\" .P
...\" Use ``creation of configuration data'' with the configuration type
...\" ``Client/Server System'' and the default values displayed there to configure
...\" Directory ID 1.
...\" .LI
...\" Activate GDS (option \*Lb\*O in \*Lgdssysadm\*O ) on Machine 2.
...\" .LI
...\" On Machine 2, enter the correct IP addresses in the batch file:
...\" 
...\" .BL
...\" .LI
...\" \*Lt.cache/t.cacheinit2\*O
...\" .LE
...\" 
...\" .LI
...\" On Machine 2, execute the following command:
...\" 
...\" .iS
...\"     gdsditadm < t.cache/t.cacheinit2
...\" .iE
...\" 
...\" 
...\" 
...\" ----------------------------------------------------------------------
...\" .sp 2
...\" .in -0.25i
...\" \*L\s+1The t.cache/t.cacheinit2 Template\s-1\*O
...\" .in +0.25i
...\" .sp 1
...\" ----------------------------------------------------------------------
...\" 
...\" .P
...\" This template is for Machine 2, configured as a client/server, and
...\" is analogous to \*Lt.cacheinit1\*O for Machine 1.
...\" .P
...\" You must supply the same three IP addresses for \*Lt.cacheinit2\*O
...\" that you supplied for \*Lt.cacheinit1\*O: the first address is the
...\" loopback address, the second line of the form is the address of
...\" Machine 2, and the third is the address of Machine 1.
...\" 
...\" 
...\" 
...\" ----------------------------------------------------------------------
...\" .sp 2
...\" .in -0.25i
...\" \*L\s+1The t.cache/t.cacheinitc Template\s-1\*O
...\" .in +0.25i
...\" .sp 1
...\" ----------------------------------------------------------------------
...\" 
...\" .P
...\" This is an optional template designed for Machine 2 (configured as a client)
...\" and initializes Machine 2 to use the DSA on Machine 1 as its server.
...\" You must supply two IP addresses in this template: the first is the address
...\" of the client machine being administered (Machine 2), and the second is
...\" the address of the server (Machine 1).
...\" 
...\" .zA "def,8630,R1.0.3,add filenames"
...\" .LI
...\" At this point, both systems should be configured correctly. You can save
...\" the data for Directory IDs 1, 3, and 4 on Machine 1 and Directory ID 1 on
...\" Machine 2 (in the CACHE-DATABASE1, CACHE-DATABASE3, and CACHE-DATABASE4
...\" files). Note that when you restore Directory ID 1, you must do so on both
...\" Machine 1 and Machine 2.
...\" .zZ "def,8630,R1.0.3,add filenames"
...\" .P
...\" To save the state of the database, select in the Administration main menu
...\" \*Lgdssysadm\*O to save local data either to floppy, tape or file.
...\" .P
...\" The data is saved with the \*Ltar(1)\*O command. The options for the \*Ltar\*O
...\" command and the device or file to which the data is written can be changed by
...\" modifying the file:
...\" .DS
...\"     \*Vdcelocal\*L/var/adm/directory/gds/conf/dirparam\*O
...\" .DE
...\" .P
...\" You can both save and restore the Directory while the system is active.
...\" You do \*Vnot\*O have to deactivate and reactivate the system when doing
...\" either a save or restore command.
...\" 
...\" .P
...\" Be sure to save the database on all machines involved.
...\" 
...\" 
...\" .P
...\" To reinitialize the database, simply restore the directory with
...\" \*Lr\*O.
...\" 
...\" 
...\" .P
...\" For more information about the \*Ldirparam\*O file, see the section
...\" in this chapter on ``The dirparam File.''
...\" .LI
...\" The CACHE-DATABASE3 and CACHE-DATABASE4 for Machine 1 have to be
...\" restored each time before running Test 2.
...\" The CACHE-DATABASE1 for Machine 1 has to be restored each time before 
...\" running Tests 0, 1, or 5.
...\" The CACHE-DATABASE1 for Machine 1 and Machine 2 has to be restored 
...\" each time before starting Tests 3 or 4.
...\" .zA "def,8630,R1.0.3,corrected misstatements"
...\" .P
...\" Tests 3 and 4 add some more data to the directory restored from CACHE-DATABASE1.
...\" When you are running the tests for the first time, you are asked to run the
...\" additional batch files. After this you should save the new data to TEST3-DATABASE1
...\" (for Test 3) or TEST4-DATABASE1 (for Test 4) of Directory ID 1 of Machine 1 and
...\" Machine 2. Before you run any of the sub-testcases of Test 4, you have to restore
...\" the TEST4-DATABASE1 on both machines.
...\" .P
...\" When you are running the tests for ``Change Name'' or ``Change Master''
...\" (Test 4) for the first time, you are asked to run the additional batch
...\" files. After this you should save the new data to TEST4-CHANGEDB1 on both
...\" machines. Before you run any of the sub-testcases of ``Change Name'' or
...\" ``Change Master'' (Test 4), you must restore TEST4-CHANGEDB1 on both
...\" machines.
...\" .zZ "def,8630,R1.0.3,corrected misstatements"
...\" .P
...\" The sub-testcases for Test 3 can be run one after another without restoring
...\" the initial status TEST3-DATABASE1. TEST3-DATABASE1 has to be restored when
...\" you want to restart Test 3 again.
...\" .LI
...\" Now run the Administration test cases on Machine 1 as described in the
...\" next section The person who runs the tests must be the only person accessing
...\" GDS on Machines 1 and 2.
...\" .LE
...\" 
...\" 
...\" 
...\" ----------------------------------------------------------------------
...\" .H 3 "Running the Administration Tests"
...\" ----------------------------------------------------------------------
...\" 
...\" .iX "GDS" "testing" "administration"
...\" .iX "testing" "GDS administration"
...\" 
...\" .P
...\" This section describes how to run the Admin tests once the setup is
...\" complete.
...\" 
...\" 
...\" 
...\" ----------------------------------------------------------------------
...\" .H 4 "Running Tests with testall"
...\" ----------------------------------------------------------------------
...\" 
...\" .P
...\" You must use the
...\" .DS
...\"     \*L/dcetest/dcelocal/test/directory/gds/tst/testall.sh\*O
...\" .DE
...\" .P
...\" shell script to run the administration test cases. The individual test cases
...\" are not always independent; they must be run in a prescribed order to be sure
...\" of executing correctly. In particular:
...\" 
...\" .BL
...\" .LI
...\" Tests 3 and 4 (Shadow and Subtree Administration) create databases
...\" and database entries that must \*Vnot\*O be present when Tests 0, 1 or
...\" 2 are run.
...\" .LI
...\" You \*Vmust not\*O restore the database between the subtests in Test
...\" 3.
...\" .LI
...\" Conversely, you must restore the database between the subtests in Test 4.
...\" Use the procedures outlined above to do so.
...\" .P
...\" The \*Ltestall.sh\*O script tells you when to save to the database
...\" when you run Test 4. You have to restore this database before running the
...\" next test case.
...\" .LE
...\" 
...\" .P
...\" The \*Ltestall.sh\*O script will always order the tests correctly.
...\" It prompts you for the group of tests you wish to run and places its
...\" results in a file called \*Lt.erg\*O in the current directory.
...\" When you use \*Ltestall.sh\*O to run tests 3 and 4, it prompts you to
...\" perform the appropriate administrative steps before proceeding.
...\" .P
...\" When testing is complete, \*Lt.erg\*O scrolls on the screen. Watch for the
...\" \*LERROR\*O tag to find problems in testing. To save results from tests,
...\" rename the \*Lt.erg\*O file before running another test.
...\" 
...\" 
...\" ----------------------------------------------------------------------
...\" .H 4 "Tests That Return Errors"
...\" ----------------------------------------------------------------------
...\" 
...\" .P
...\" Some test cases exercise invalid operations, and are supposed to return
...\" errors. These results should appear in \*Lt.erg\*O, as a comment indicating
...\" the expected error followed by the actual error encountered.
...\" If these match, then the invalid test cases executed correctly.
...\" If an error is shown that is not preceded by a comment indicating that
...\" an error is expected, then the test cases did not execute correctly.
...\" .P
...\" As noted above, each test case generates either a success message or an
...\" error message, along with an indication of the expected response. All output
...\" goes to the error log. Use \*Lgrep\*O to search for the string ``ERROR.''
...\" Note that some errors are expected. For example:
...\" 
...\" .oS
...\"     \*C> **ADD AT entry (BN) --->ok***:
...\"     > **ADD AT entry (KE) --->ERROR(Object identifier is not unique !)***:
...\"     > ERROR: Object identifier is not unique !
...\"     > To continue press <CR> !\*O
...\" .oE
...\" 
...\" .P
...\" The first line indicates that the command is expected to succeed.
...\" The second line, containing the ERROR string, indicates that the
...\" next command is expected to fail with the indicated error message.
...\" The third line shows that the test did fail with the appropriate
...\" error message. Lines like the fourth line can be ignored; the test
...\" scripts handle any necessary input.
...\" .P
...\" For details on how to run administration tests individually, see the
...\" \*Ltestall.sh\*O shell script.
...\" 
...\" 
...\" .zA "def,9323,R1.0.3,New XDS/XOM test information"
...\" 
...\" ----------------------------------------------------------------------
.H 2 "The XDS Test Tool xt_test"
...\" ----------------------------------------------------------------------
...\" 
.P
The following sections describe the procedures necessary to use the XDS test
tool, \*Lxt_test\*O, which can be used to run individual test cases. Note that
the API test driver should be used to run suites of tests; this driver uses
\*Lxt_test\*O to invoke the individual tests. See ``Running the API Tests'',
earlier in this chapter.
...\" 
.P
The \*Lxt_test\*O program is an interpretive Directory test driver using the
XDS/XOM API. It allows the construction of testcases using an interpreted
notation which follows closely the form of the XDS interface, without the
disadvantages of compilation. The XOM public objects used are hard-wired
into the file \*Lxt_parms.h\*O. As a result, the creation of new testcases
using existing data is easy; however, alteration to the data or additions
to it require recompilation and linking.
...\" 
...\" 
...\" I think a note would be needed that
...\" the API tests use xt_test and that xt_test needs only to be executed
...\" explicitly to run individual test cases.
...\" 
...\" 
.P
The \*Lxt_test\*O tool is invoked as follows:
...\" 
.oS
    \*Lxt_test\*O { \*L-i\*O \*Vtestcase\*O | \*L-a\*O \*Vtestcases\*O \\
                    | \*L-t\*O \*Vtestcases\*O} [\*L-o\*O \*Vlogfile\*O] \\
                    [\*L-n\*O \*Vnumber\*O] [\*L-c\*O] [\*L-v\*O] [\*L-0\*O]
.oE
...\" 
.P
Where the flags and parameters have the following meanings:
...\" 
.VL
...\" 
.LI "\*L-i\*O \*Etestcase\*O"
Specifies that a single testcase (named by the testcase file parameter) be
run.
...\" 
.LI "\*L-a\*O \*Etestcases\*O"
Specifies that the parameter be interpreted as the name of a file containing
a list of testcase file names, each of which is to be run in turn.
.P
If no parameter is present, the filename \*LTestcases\*O is used.
...\" 
.LI "\*L-t\*O \*Etestcases\*O"
Specifies that the parameter be interpreted as the name of a file containing
a list of testcase file names, which are to be run in parallel using threads,
except for the first and last entries in the list, which are to be run in
single-threaded mode before and after, respectively, the testcases specified
between them.
.P
Option \*L-t\*O is available only if the client and tester are built with
\*LTHREADSAFE\*O defined.
...\" 
.LI "\*L-o\*O \*Elogfile\*O"
Specifies the logfile name (if \*LD2_LOG_DIR\*O is defined, the default is
\*L$D2_LOG_DIR/xt_test.log\*O; otherwise the default is \*L$HOME/xt_test.log).
...\" 
.LI "\*L-n\*O \*Enumber\*O"
Specifies the number of iterations (the default is 1).
...\" 
.LI "\*L-c\*O"
Specifies conversion of objects to string and back (convenience library). A
subset of XOM objects is converted to a string, which is logged, and then back
to an object. \*Lom_get(\|)\*O is performed on this object to test its syntactic
validity. The subset of objects is that which is recognised by the standard
version of the XOM Object Information file \*Lxoischema\*O.
...\" 
.P
Note that the \*L-c\*O flag is required when running convenience library
(\*Lxoms\*O) testcases.
...\" 
...\" 
...\" Note that if you call \*Lxt_test\*O without the \*L-c\*O flag in tests.xoms/valid
...\" almost all testcases will fail. If you call it with "-c" all works fine.
...\" The documentation says that it's not necessary to call xt_test in tests.xoms 
...\" with "-xc".
...\" 
...\" 
.LI "\*L-v\*O"
Specifies verbose output as an aid to debugging the tester itself; additional
output is logged.
...\" 
.LI "\*L-0\*O
Prints version information and exits.
.LE
...\" 
...\" 
.P
When \*Lxt_test\*O is invoked with no parameters, or with invalid parameters,
it produces a brief message describing the usage options.
...\" 
...\" 
...\" [[CC change - addition of next section, as new 7.5.1]]
...\" 
...\" 
...\" XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX
...\" 
.P
Before using the tester, GDS must be configured and activated. Since there are
scripts to do this when runnning tests under TET, the simplest way to configure
GDS is to run some tests under TET before using \*Lxt_test\*O. The Admin tests
scheme could be used, since they run quickly.
...\" 
...\"
...\"
...\" ----------------------------------------------------------------------
.H 4 "XDS/XOM/XMH/Switch Tests
...\" ----------------------------------------------------------------------
...\" 
.P
The following sections describe the XDS/XOM tests.
...\" 
...\" 
...\" 
...\" ----------------------------------------------------------------------
.H 5 "General"
...\" ----------------------------------------------------------------------
...\" 
...\" 
.P
The \*Lxom\*O, \*Lxoms\*O, \*Lxds\*O, \*Lswitch\*O and \*Lmhs\*O testcases are
found at:
...\" 
...\" 
.DS
    \*Vdce-root-dir\*L/dce/src/test/functional/directory/xds/ts/xom/lib\*O
    \*Vdce-root-dir\*L/dce/src/test/functional/directory/xds/ts/xoms/lib\*O
    \*Vdce-root-dir\*L/dce/src/test/functional/directory/xds/ts/xds/lib\*O
    \*Vdce-root-dir\*L/dce/src/test/functional/directory/xds/ts/switch/lib\*O
    \*Vdce-root-dir\*L/dce/src/test/functional/directory/xds/ts/mhs/lib\*O
.DE
...\" 
.P
respectively.
.P
The non-threaded tests in each suite are divided into four groups, whose expected
result is always to pass:
...\" 
...\" 
.VL 1.5i
.LI "\*Lbasic\*O"
Basic functionality tests
...\" 
.LI "\*Lvalid\*O"
More advanced tests, expecting success
...\" 
.LI "\*Linvalid\*O"
More advanced tests, expecting failure
...\" 
.LI "\*Lstress\*O"
Tests of capacity limits
.P
(These tests are slow.)
...\" 
.LE
...\" 
...\" 
...\" 
.P
Assessing the results of the threads tests is not always as straightforward
as for the other tests, since the parallel-running tests can influence each
other. There are four groups of threads tests:
...\" 
.VL 1.5i
.LI "\*Lthreads_as\*O"
in which all actions are expected to succeed
...\" 
.LI "\*Lthreads_af\*O"
in which all actions are expected to fail
...\" 
.LI "\*Lthreads_os\*O"
in which one success is expected
...\" 
.LI "\*Lthreads_up\*O"
in which the outcome is unpredictable
...\" 
.LE
.sp 1
...\" 
.P
The first two cases are easily interpreted: the outcome will be either
success or failure of the test's action, which (if it is the outcome expected)
will be equivalent to the test's passing. Thus all these tests should pass.
.P
The third case requires an inspection of the outcomes of all the tests, and
confirmation that only one action has succeeded. Since startup and shutdown
should also succeed, the expected (successful) result consists in three threads
passing and the rest failing.
.P
In the last group, success or failure \*Vper se\*O is not so important, since
this depends on the non-deterministic interleaving of the tests: the purpose of
these tests is to show whether the directory system is robust enough not to crash
or deadlock when confronted with a complex mix of simultaneous interacting requests.
.P
In summary, the desired outcomes are:
...\" 
.VL 1.5i
.LI "\*Lthreads_as\*O"
All tests will pass
...\" 
.LI "\*Lthreads_af\*O"
All tests will pass
...\" 
.LI "\*Lthreads_os\*O"
Three tests will pass, the rest fail
...\" 
.LI "\*Lthreads_up\*O"
There will be no hanging or crashing (passes/failures unimportant)
.LE
...\" 
...\" 
...\" 
...\" ----------------------------------------------------------------------
.H 5 "Running Individual Threads Tests"
...\" ----------------------------------------------------------------------
...\" 
...\" 
...\" 
.P
Each thread testcase consists of four parts. For example, for test \*Lthis1v\*O,
there exist four files:
...\" 
.BL
.LI
\*LSTARTthis1v\*O
.LI
\*LBODYthis1v\*O
.LI
\*LSHUTDOWNthis1v\*O
.LI
\*LT10this1v\*O
.LE
...\" 
.P
To run a test, for example \*LT10list1v\*O, do the following:
...\" 
.iS
    xt_test -t T10list1v
.iE
...\" 
.P
and the other three parts will be called implicitly.
.P
In general, the names of runnable threads tests start with an initial capital
``T'', followed by a number indicating how many threads will be created, and
ending with the name of the test itself.
...\" 
...\" 
...\" XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX
...\" 
...\" 
...\" 
...\" 
...\" 
...\" 
...\" ----------------------------------------------------------------------
.H 3 "Examples"
...\" ----------------------------------------------------------------------
...\" 
.P
Following are some examples of \*Lxt_test\*O usage.
...\" 
...\" 
.BL
.LI
To run the testcase file \*Eread1v\*O:
...\" 
.oS
    xt_test -i read1v
.oE
...\" 
.LI
To run the testcase files named in file \*ETestcases\*O sequentially:
...\" 
.oS
    xt_test -a
.oE
...\" 
.LI
To run the testcase files named in file \*Emy_tests\*O sequentially:
...\" 
.oS
    xt_test -a my_tests
.oE
...\" 
.LI
To run the threaded testcase file \*ET10add_entry37i\*O:
...\" 
.oS
    xt_test -t T10add_entry37i
.oE
...\" 
...\" 
.LE
...\" 
...\" 
...\" 
...\" ----------------------------------------------------------------------
...\" FOLLOWING IS OLD MATERIAL....
...\" 
...\" 
...\" Five subsections follow:
...\" 
...\" .BL
...\" .LI
...\" Overview
...\" .LI
...\" Test tool and testcases
...\" .LI
...\" GDS installation for testing
...\" .P
...\" Follow the procedures in this section if you wish to test XDS over GDS.
...\" .LI
...\" CDS installation for testing
...\" .P
...\" Follow the procedures in this section if you wish to test XDS over CDS.
...\" .LI
...\" Test tool usage
...\" .LE
...\" 
...\" 
...\" 
...\" ----------------------------------------------------------------------
...\" .H 3 "Test Tool and Testcases"
...\" ----------------------------------------------------------------------
...\" 
...\" .P
...\" The following sections describe the XDS test tool and the testcases.
...\" 
...\" 
...\" 
...\" ----------------------------------------------------------------------
...\" .H 4 "General"
...\" ----------------------------------------------------------------------
...\" 
...\" .P
...\" In the following sections,
...\" 
...\" 
...\" .sp 1
...\" .VL 2i
...\" .LI "\*Vmachine\*O"
...\" signifies the host machine, i.e.: \*Lrios\*O, \*Lsvr4\*O, \*Lat386\*O, or \*Lhp800\*O
...\"
...\" .LI "\*Vdce-test-dir\*O"
...\" signifies the path to the root of the DCE test case installation; e.g.,
...\" \*L/dcetest/dcelocal\*O.
...\" 
...\" .LI "\*Vdce-root-dir\*O"
...\" signifies the path to the root of your sandbox.
...\" 
...\" .LI "\*Vdcelocal\*O"
...\" signifies the path to the root of the DCE installation; e.g., \*L/opt/dcelocal\*O.
...\" 
...\" .LE
...\" 
...\" 
...\" 
...\" .P
...\" The test tool is located at:
...\" 
...\" .DS
...\"     \*Vdce-test-dir\*L/test/directory/xds\*O
...\" .DE
...\" 
...\" .P
...\" It contains the test-tool makefile, header and source files, and contains
...\" the following subdirectories:
...\" 
...\" .sp 1
...\" .VL 2i
...\" .LI "\*Ltests.xds\*O"
...\" XDS testcase directory
...\" .LI "\*Ltests.xds/basic\*O"
...\" basic functionality tests
...\" .LI "\*Ltests.xds/valid\*O"
...\" valid behavior tests
...\" .LI "\*Ltests.xds/invalid\*O"
...\" invalid behavior tests
...\" .LI "\*Ltests.xds/stress\*O"
...\" stress tests
...\" .LI "\*Ltests.xds/threads_as\*O"
...\" threads tests - all succeed
...\" .LI "\*Ltests.xds/threads_af\*O"
...\" threads tests - all fail
...\" .LI "\*Ltests.xds/threads_os\*O"
...\" threads tests - one succeeds
...\" .LI "\*Ltests.xds/threads_up\*O"
...\" threads tests - unpredictable
...\" .LI "\*Ltests.xds/threads_stress\*O"
...\" threads tests - unpredictable
...\" .LI "\*Ltests.xds/tree\*O"
...\" utilities for building/deleting trees
...\" .LE
...\" 
...\" 
...\" 
...\" 
...\" .VL 2i
...\" .LI "\*Ltests.mhs\*O"
...\" XDS MHS testcase directory
...\" 
...\" .LI "\*Ltests.mhs/valid\*O"
...\" valid behavior tests
...\" 
...\" .LI "\*Ltests.mhs/invalid\*O"
...\" invalid behavior tests
...\" 
...\" .LI "\*Ltests.mhs/tree\*O"
...\" utilities for building/deleting trees 
...\" .LE
...\" 
...\" 
...\" 
...\" 
...\" .VL 2i
...\" .LI "\*Ltests.switch\*O"
...\" switch testcase directory
...\" 
...\" .LI "\*Ltests.switch/valid\*O"
...\" valid behavior tests    
...\" 
...\" .LI "\*Ltests.switch/invalid\*O"
...\" invalid behavior tests    
...\" 
...\" .LI "\*Ltests.switch/threads_as\*O"
...\" threads tests - all succeed
...\" 
...\" .LI "\*Ltests.switch/threads_af\*O"
...\" threads tests - all fail
...\" 
...\" .LI "\*Ltests.switch/threads_os\*O"
...\" threads tests - one succeeds
...\" 
...\" .LI "\*Ltests.switch/threads_up\*O"
...\" threads tests - unpredictable
...\" 
...\" .LI "\*Ltests.switch/tree\*O"
...\" utilities for building/deleting trees 
...\" .LE
...\" 
...\" 
...\" 
...\" 
...\" 
...\" .VL 2i
...\" .LI "\*Ltests.xom\*O"
...\" XOM testcase directory
...\" 
...\" .LI "\*Ltests.xom/basic\*O"
...\" basic functionality tests
...\" 
...\" .LI "\*Ltests.xom/valid\*O"
...\" valid behavior tests
...\" 
...\" .LI "\*Ltests.xom/invalid\*O"
...\" invalid behavior tests
...\" .LE
...\" 
...\" 
...\" .sp 1
...\" .P
...\" Object code and \*Lxt_test\*O executable reside in:
...\" 
...\" .DS
...\"     \*Vdce-test-dir\*L/test/directory/xds\*O
...\" .DE
...\" 
...\" .P
...\" For instructions on installing GDS in order to execute the XDS or MHS tests,
...\" refer to section 5.6.2. For instructions on installing CDS in order to execute
...\" the Switch tests, refer to 5.6.3.
...\" .P
...\" 
...\" 
...\" 
...\" 
...\" ----------------------------------------------------------------------
...\" .H 4 "Test Tool Installation"
...\" ----------------------------------------------------------------------
...\" 
...\" .P
...\" The test tool is produced as follows:
...\"      
...\" .BL
...\" 
...\" 
...\" .LI
...\" Make sure that \*Llibdce\*O has been successfully built.
...\" 
...\" 
...\" .LI
...\" Change directory to
...\" .DS
...\"     \*Vdce-test-dir\*L/test/directory/xds\*O
...\" .DE
...\" 
...\" 
...\" .LI
...\" Run \*Lbuild\*O (with the appropriate build options) to produce the
...\" \*Lxt_test\*O executable
...\" 
...\" 
...\" .LI
...\" Add
...\" .DS
...\"     \*Vdce-test-dir\*L/test/directory/xds\*O
...\" .DE
...\" 
...\" .P
...\" to the \*L$PATH\*O environment variable
...\" 
...\" .LE
...\" 
...\" 
...\" 
...\" ----------------------------------------------------------------------
...\" .H 3 "GDS Installation for Testing"
...\" ----------------------------------------------------------------------
...\" 
...\" .P
...\" Two testing scenarios are supported:
...\" .BL
...\" .LI
...\" local test
...\" .LI
...\" remote test
...\" .LE
...\" 
...\" .P
...\" Both scenarios require the use of two machines. Target systems which are
...\" supported include:
...\" 
...\" .BL
...\" .LI
...\" MX300i (SVR4)
...\" .LI
...\" RS/6000 (RIOS)
...\" .LI
...\" HP700 (HPUX)
...\" .LI
...\" AT386 (OSF/1)
...\" .LE
...\" 
...\" 
...\" 
...\" 
...\" ----------------------------------------------------------------------
...\" .H 4 "Local Test"
...\" ----------------------------------------------------------------------
...\" 
...\" .P
...\" The local tester (Tester #1, in the diagram below) exercises the client-server
...\" configuration. It is run from Machine #1.
...\" .P
...\" The two machines are configured. Then batch files are used to initialise both
...\" the caches and the DSAs with essential start-up information.
...\" 
...\" 
...\" 
...\" .FG "Local Test Initialization"
...\" .DS
...\" \*C\s-2
...\" 
...\"          Machine #1                                   Machine #2
...\"  |-----------------------|            |---------------------------------------|
...\" 
...\"  +----------+                                                      ............
...\"  |          |                                                      :          :
...\"  |  Tester  |                                                      :  Tester  :
...\"  |    #1    |                                                      :    #2    :
...\"  |          |                                                      :          :
...\"  +----------+ +----------+            +----------+ ............    :..........:
...\"  |          | |          |            |          | :          :    :          :
...\"  |  CLIENT  | |  SERVER  |            |  SERVER  | :  CLIENT  :    :  CLIENT  :
...\"  |  (DUA)   | | (DSA #1) |            | (DSA #2) | :  (DUA)   :    :   (DUA)  :
...\"  |          | |          |            |          | :          :    :          :
...\"  +---|--|---+ +---|--|---+            +---|--|---+ :..........:    :..........:
...\"      |  |         |  |                    |  |
...\"      |  +--IPC----+  +--------DSP---------+  |
...\"      +----------------DAP--------------------+
...\" 
...\" \s+2\*O
...\" .DE
...\" 
...\" 
...\" 
...\" 
...\" ----------------------------------------------------------------------
...\" .H 4 "Remote Test"
...\" ----------------------------------------------------------------------
...\" 
...\" .P
...\" The remote tester (Tester #2, in the diagram below) exercises the client-only
...\" and the client-server configurations. It is run from Machine #2.
...\" .P
...\" The two machines are configured. Then batch files are used to initialise both
...\" the caches and the DSAs with essential start-up information.
...\" 
...\" 
...\" 
...\" .FG "Remote Test Initialization"
...\" .DS
...\" \*C\s-2
...\"          Machine #1                                   Machine #2
...\"  |-----------------------|            |---------------------------------------|
...\" 
...\"  ............                                                      +----------+
...\"  :          :                                                      |          |
...\"  :  Tester  :                                                      |  Tester  |
...\"  :    #1    :                                                      |    #2    |
...\"  :          :                                                      |          |
...\"  :..........: +----------+            +----------+ ............    +----------+
...\"  :          : |          |            |          | :          :    |          |
...\"  :  CLIENT  : |  SERVER  |            |  SERVER  | :  CLIENT  :    |  CLIENT  |
...\"  :  (DUA)   : | (DSA #1) |            | (DSA #2) | :  (DUA)   :    |   (DUA)  |
...\"  :          : |          |            |          | :          :    |          |
...\"  :..........: +---|--|---+            +---|------+ :..........:    +----|-----+
...\"                   |  |                    |                             |
...\"                   |  +-------DSP----------+                             |
...\"                   +-------------------------------DAP-------------------+
...\" 
...\" \s+2\*O
...\" .DE
...\" 
...\" 
...\" 
...\" ----------------------------------------------------------------------
...\" .H 4 "GDS Configuration and Initialization"
...\" ----------------------------------------------------------------------
...\" 
...\" 
...\" .P
...\" In order to run the tester, two machines must be configured and initialized.
...\" There are two ways to set up the directory service for the XDS/XOM tests. You
...\" can use the system test scripts for automated GDS setup, or you can use the
...\" more manual method described in the following sections. The following two
...\" sections explain these two methods.
...\" 
...\" 
...\" 
...\" 
...\" 
...\" ----------------------------------------------------------------------
...\" .H 5 "Automatic Setup"
...\" ----------------------------------------------------------------------
...\" 
...\" .P
...\" If you wish to have the directory service set up automatically, do the following:
...\" 
...\" 
...\" .AL
...\" .LI
...\" Use \*Ldcetest_config\*O to install the GDS system tests on the systems to be
...\" used for GDS testing. See Chapter 11 of this book for information on using
...\" \*Ldcetest_config\*O.
...\" 
...\" .LI
...\" Change directory to the \*Lgds_xds_str_001\*O system test directory:
...\" 
...\" .iS
...\"     cd /dcetest/dcelocal/test/systest/directory/gds/gds_xds_str_001
...\" .iE
...\" 
...\" .LI
...\" Edit the \*Lgds_xds_str_001\*O data file \*Lgds_xds_str_001.data\*O as
...\" follows:
...\" 
...\" .BL
...\" .LI
...\" Set the variable \*LCLI_MACHINES\*O to the names of the test machines. The first
...\" machine in this list will be configured as machine 1, i.e. it will house DSA
...\" \*Ldsa-m1\*O, and the second machine in the list will be configured as machine 2,
...\" i.e. it will house DSA \*Ldsa-m2\*O.
...\" 
...\" .LI
...\" Add the following line to the end of the file:
...\" 
...\" .oS
...\"     PASSES=0
...\" .oE
...\" 
...\" .LE
...\" 
...\" 
...\" .LI
...\" Using the Korn or Bourne shell, source the system test profile file:
...\" 
...\" .iS
...\"     \&. /dcetest/dcelocal/test/systest/profile.dcest
...\" .iE
...\" 
...\" 
...\" .LI
...\" Execute the following command:
...\" .iS
...\"     gds_xds_str_001 -f gds_xds_str_001.data -G
...\" .iE
...\" 
...\" .P
...\" The \*Lgds_xds_str_001\*O script will construct an input file for the GDS setup
...\" scripts, propagate it to the test machines, and use it to initialize and
...\" configure the directory service for the tests. The script writes logs in the
...\" following directories:
...\" 
...\" .BL
...\" .LI
...\" \*L/dcetest/dcelocal/status/current/gds_xds_str_001/working/runlog*\*O
...\" .P
...\" Describes the progress of the script in starting the GDS setup script.
...\" 
...\" .LI
...\" \*L/dcetest/dcelocal/status/current/worldSetup.gds/working/worldSetup.*\*O
...\" \*L/dcetest/dcelocal/status/current/worldSetup.gds/working/gdsSetup.*\*O
...\" .P
...\" Describe the progress of the GDS setup scripts on the test machines.
...\" 
...\" .LE
...\" 
...\" 
...\" .P
...\" If the \*Lrunlog\*O file reports that the GDS setup is complete, the machines
...\" were set up without error.
...\" 
...\" 
...\" 
...\" 
...\" 
...\" ----------------------------------------------------------------------
...\" .H 5 "Manual Setup"
...\" ----------------------------------------------------------------------
...\" 
...\" .P
...\" Manual configuration is performed by means of the Administration system.
...\" Manual Initialization is performed by means of special batch files.
...\" 
...\" 
...\" 
...\" .P
...\" GDS configuration of Machine #1:
...\" 
...\" .AL
...\" .LI
...\" Change your \*LLANG\*O variable to ``C''. You do not have to set
...\" \*L$NLSPATH\*O.
...\" 
...\" .LI
...\" Run \*Lgdssysadm\*O to activate the Administration system.
...\" 
...\" .LI
...\" Choose ``c'' from the Administration menu, and then:
...\" 
...\" .AL
...\" .LI
...\" Choose ``Creation of configuration data''
...\" .LI
...\" Choose directory ID 1
...\" .LI
...\" Choose configuration type ``Client-Server System''
...\" .LI
...\" Choose number of clients: ``16''
...\" .LI
...\" Choose number of servers: ``2''
...\" .LI
...\" Choose distribution: ``No''
...\" .LE
...\" 
...\" 
...\" .LI
...\" Choose ``b'' from the Administration menu to activate the directory.
...\" 
...\" .LE
...\"     
...\" 
...\" .P
...\" GDS configuration of Machine #2:
...\" 
...\" 
...\" .AL
...\" 
...\" .LI
...\" Change your \*LLANG\*O variable to ``C''. You do not have to set
...\" \*L$NLSPATH\*O.
...\" 
...\" .LI
...\" Run \*Lgdssysadm\*O to activate the Administration system.
...\" 
...\" .LI
...\" Choose ``c'' from the Administration menu, to configure the directory, and then:
...\" 
...\" .AL
...\" 
...\" .LI
...\" Choose ``Changing of configuration data''
...\" 
...\" .LI
...\" Choose directory ID ``1''
...\" 
...\" .LI
...\" Choose configuration type ``Client system''
...\" 
...\" .LI
...\" Choose number of clients to be ``16''
...\" 
...\" .LE
...\" 
...\" 
...\" .LI
...\" Choose ``c'' from the Administration menu, to configure the directory, and then:
...\" 
...\" .AL
...\" .LI
...\" Choose ``Creation of configuration data''
...\" 
...\" .LI
...\" Choose directory ID ``2''
...\" 
...\" .LI
...\" Choose configuration type ``Client-Server system''
...\" 
...\" .LI
...\" Choose number of clients to be ``16''
...\" 
...\" .LI
...\" Choose number of servers to be ``2''
...\" 
...\" .LI
...\" Choose distribution to be ``No''
...\" .LE
...\" 
...\" 
...\" .LI
...\" choose 'b' from the Administration menu, to activate the directory.
...\" 
...\" .LE
...\" 
...\" 
...\" 
...\" 
...\" 
...\" 
...\" 
...\" 
...\" .P
...\" GDS initialization of Machine #1 and Machine #2:
...\" 
...\" .sp 1
...\" .nS "note"
...\" Before the \*LinitXds\*O files below can be used they must be altered to include
...\" the correct PSAP addresses of the two machines being initialized.
...\" .nE
...\" .sp 1
...\" 
...\" 
...\" 
...\" .P
...\" Execute the following commands to initialize the two machines:
...\" 
...\" .iS
...\"     cd \*Vdce-test-dir\*L/test/directory/gds/tst    \*Vrun on Machine #1 and #2\*L
...\" 
...\"     gdsditadm < initXdsM1a                    \*Vrun on Machine #1 only\*L
...\" 
...\"     gdsditadm < initXdsM2                    \*Vrun on Machine #2 only\*L
...\" 
...\"     gdsditadm < initXdsM1b                    \*Vrun on Machine #1 only\*O
...\" .iE
...\" 
...\" 
...\" .P
...\" A logfile \*Ltstfile\*O is produced in
...\" 
...\" .DS
...\"     \*Vdcelocal\*L/var/adm/directory/gds/adm\*O
...\" .DE
...\" 
...\" .P
...\" which may be used to verify that each command completed successfully.
...\" .P
...\" Each DSA is initialized with the following DSA name by the above commands:
...\" 
...\" .VL 1i
...\" 
...\" .LI "DSA\ #1:"
...\" /C=de/O=dbp/OU=dap11/CN=dsa/CN=dsa-m1
...\" 
...\" .LI "DSA\ #2:"
...\" /C=de/O=dbp/OU=dap11/CN=dsa/CN=dsa-m2
...\" 
...\" .LE
...\" 
...\" 
...\" .P
...\" Each cache is initialized with the name and address of both DSAs.
...\" .P
...\" Each DSA holds the master entry for its own name. DSA #1 is the \*Linitial-DSA\*O;
...\" that is, it holds the master entry for the schema. DSA #2 holds a shadow copy of
...\" this schema.
...\" 
...\" .nP
...\" 
...\" .P
...\" The initial state of the directory information tree in both DSAs is
...\" shown in the following diagram:
...\" 
...\" 
...\" 
...\" .FG "Initial State of DIT"
...\" .DS
...\" \*C\s-2
...\"                 DSA #1                                DSA #2
...\" 
...\"                  ROOT                                  ROOT
...\"                  /  \                                  /  \
...\"      CN=schema [ ]  [ ] C=de                    C=de ( )  ( ) CN=schema
...\"                      |                                |
...\"                      |                                |
...\"                     [ ] O=dbp                        ( ) O=dbp   
...\"                      |                                |
...\"                      |                                |
...\"                     [ ] OU=dap11                     ( ) OU=dap11
...\"                      |                                |
...\"                      |                                |
...\"                     [ ] CN=dsa                       ( ) CN=dsa
...\"                      |                                |
...\"           +----------+                                +----------+
...\"           |          |                                |          |
...\"          ( )        [ ]                              ( )        [ ]
...\"         CN=dsa-m2  CN=dsa-m1                        CN=dsa-m1  CN=dsa-m2
...\" \s+2\*O
...\" .DE
...\" 
...\" 
...\" .P
...\" Where:
...\" 
...\" .VL 1i
...\" 
...\" .LI "[\ ]"
...\" denotes a master entry
...\" 
...\" .LI "(\ )"
...\" denotes a shadow entry
...\" 
...\" .LE
...\" 
...\" 
...\" ----------------------------------------------------------------------
...\" .H 3 "CDS Installation for Testing"
...\" ----------------------------------------------------------------------
...\" 
...\" 
...\" 
...\" .P
...\" The DUA switch tests verify the XDS interface's handling of object names comprising
...\" a combination of both typed and typeless components, or typeless components only
...\" (that is, not fully typed X.500 names). These tests are run like the XDS and XOM tests
...\" described previously, but you must have a minimally configured DCE cell before running
...\" the DUA switch tests.
...\" .P
...\" Since only the DUA cache is needed, the GDS configuration required for the DUA switch
...\" tests is much simpler than the configuration required for the XDS/XOM tests.
...\" 
...\" 
...\" 
...\" 
...\" 
...\" .P
...\" Before running the DUA switch tests, do the following:
...\" 
...\" 
...\" .AL
...\" .LI
...\" Install the Security, CDS, and (optionally) the GDS Server.
...\" 
...\" .LI
...\" Configure the initial security server with the cellname
...\" 
...\" .DS
...\"     \*Lc=ie/o=digital\*O
...\" .DE
...\" 
...\" 
...\" .LI
...\" Configure the initial CDS server, and configure the GDA for X.500.
...\" 
...\" .LE
...\" 
...\" .P
...\" To add the directories used by the testcases to the CDS namespace,
...\" enter the following:
...\" 
...\" .iS
...\"     dce_login cell_admin \*Vpassword\*L
...\"     cdscp create dir /.:/sales
...\"     cdscp create dir /.:/sales/admin
...\" .iE
...\" 
...\" .P
...\" For CDS tests, it is not necessary to have GDS installed. However, if CDS
...\" is to be tested with GDS installed and active, \*Lgdssysadm\*O must be used
...\" to do the following:
...\" 
...\" .AL
...\" .LI
...\" Activate the directory system.
...\" 
...\" .LI
...\" Initialize Directory ID 1 as the ``Initial Client/Server System'', as described
...\" in the \*VOSF DCE Administration Guide \(em Extended Services\*O, in the section
...\" entitled ``Initial Client-Server System,'' steps 1 and 2. In step 2 use the
...\" following values:
...\" 
...\" .VL 2i
...\" .LI "DSA\ name:"
...\" \*Lc=ie/o=digital/ou=dce/cn=dsa/cn=dsa\*O
...\" 
...\" .LI "2nd\ Attribute\ name:"
...\" \*LDSA-Type\*O
...\" 
...\" .LI "2nd\ Attribute\ value:"
...\" \*Ldefault/local\*O
...\" 
...\" .LE
...\" 
...\" .P
...\" Note that only the steps pertaining to the DUA cache need be performed.
...\" 
...\" 
...\" .LE
...\" 
...\" .P
...\" See the instructions for GDS Setup in this chapter for more information on
...\" \*Lgdssysadm\*O.
...\" .P
...\" The tests are located in the
...\" .DS
...\"     \*Vdce-root-dir\*L/dce/src/test/directory/xds/tests.switch\*O
...\" .DE
...\" 
...\" .P
...\" directory. Note that you must have a valid \*Ldce_login\*O to run the tests.
...\" 
...\" 
...\" 
...\" 
...\" ----------------------------------------------------------------------
...\" .H 3 "Test Tool Usage"
...\" ----------------------------------------------------------------------
...\" 
...\" .P
...\" The following sections describe how to use the test tool.
...\" 
...\" 
...\" 
...\" ----------------------------------------------------------------------
...\" .H 4 "The xt_test Driver"
...\" ----------------------------------------------------------------------
...\" 
...\" .P
...\" Test-tool trace information is produced in:
...\" 
...\" .DS
...\"     \*L$HOME/xt_test.log\*O
...\" .DE
...\" 
...\" .P
...\" or in:
...\" 
...\" .DS
...\"     \*L$D2_LOG_DIR/xt_test.log\*O
...\" .DE
...\" 
...\" .P
...\" if \*L$D2_LOG_DIR\*O is set.
...\" 
...\" .P
...\" XDS interface tracing is activated if \*L$XDS_LOG\*O is set to 1 (full tracing)
...\" or 0 (partial tracing).
...\" 
...\" .P
...\" XDS trace information is produced in:
...\" 
...\" .DS
...\"     \*L$HOME/log_xds.\*Vpid\*O
...\" .DE
...\" 
...\" .P
...\" or:
...\" 
...\" .DS
...\"     \*L$D2_LOG_DIR/log_xds.\*Vpid\*O
...\" .DE
...\" 
...\" .P
...\" if \*L$D2_LOG_DIR\*O is set.
...\" 
...\" 
...\" 
...\" 
...\" 
...\" ----------------------------------------------------------------------
...\" .H 4 "XDS/XOM/XMH/Switch Test Scripts"
...\" ----------------------------------------------------------------------
...\" 
...\" .P
...\" A collection of GDS test drivers was submitted late in the DCE 1.0.3 project.
...\" They can be found in:
...\" 
...\" .DS
...\"     \*Vdce-root-dir\*L/dce/src/test/directory/script\*O
...\" .DE
...\" 
...\" .P
...\" The files in this directory have not been built, installed, or tested. However
...\" they are being made available with DCE 1.0.3 for use if you wish.
...\" .P
...\" The remainder of this section, consisting of the following three subsections,
...\" is a \*Vpreliminary version\*O of the documentation describing the use of these
...\" scripts.
...\" 
...\" 
...\" 
...\" 
...\" ----------------------------------------------------------------------
...\" .H 5 "Running All Tests"
...\" ----------------------------------------------------------------------
...\" 
...\" .P
...\" Running the script \*LTTESTALL\*O in the \*Ltests.switch\*O directory has the
...\" same effect as running \*LTTEST\*O for each subdirectory in turn. Doing this
...\" will result in logfiles for each test being written to the corresponding subdirectory,
...\" and summaries entitled \*Lthreads_af.result\*O, \*Lthreads_as.result\*O, etc.,
...\" being written to the \*Ltests.switch\*O directory.
...\" .P
...\" \*LTTESTALLa\*O is the equivalent of \*LTTESTa\*O, except that it runs all the threads
...\" tests as sequential tests (i.e. without creating threads).
...\" .P
...\" The necessary script files, located in the
...\" 
...\" .DS
...\"     \*Vdce-root-dir\*L/dce/src/test/directory/script\*O
...\" .DE
...\" 
...\" .P
...\" directory, are as follows:
...\" 
...\" 
...\" .sp 1
...\" .VL 1.5i
...\" .LI "\*LTEST\*O"
...\" sequential tests in one subdirectory
...\" 
...\" .LI "\*LTTEST\*O"
...\" threaded tests in one subdirectory
...\" 
...\" .LI "\*LTTESTa\*O"
...\" threaded tests run sequentially in one subdirectory
...\" 
...\" .LI "\*LTESTALL\*O"
...\" sequential tests in all subdirectories
...\" 
...\" .LI \*LTTESTALL\*O"
...\" threaded tests in all subdirectories
...\" 
...\" .LI "\*LTTESTALLa\*O"
...\" threaded tests run sequentially in all subdirectories
...\" 
...\" .LI "\*L_test\*O"
...\" one sequential test (run from subdirectory)
...\" 
...\" .LI "\*L_ttest\*O"
...\" one threaded test (run from subdirectory)
...\" 
...\" .LI "\*L_testall\*O"
...\" called by \*LTESTALL\*O
...\" 
...\" .LI "\*L_ttestall\*O"
...\" called by \*LTTESTALL\*O
...\" 
...\" .LI "\*L_ttestalla\*O"
...\" called by \*LTTESTALL\*O
...\" 
...\" .LI "\*Lresult\*O"
...\" utility called by \*L*TEST*\*O
...\" 
...\" .LI "\*Lcleantree\*O"
...\" utility called by \*L*TEST*\*O
...\" 
...\" .LE
...\" 
...\" .P
...\" These script files must be accessible over \*L$PATH\*O.
...\" 
...\" 
...\" 
...\" 
...\" 
...\" ZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZ
...\" ----------------------------------------------------------------------
...\" .H 5 "Running All Non-Threaded Tests in One Subdirectory"
...\" ----------------------------------------------------------------------
...\" 
...\" .AL
...\" .LI
...\" Change to the directory over the testcases. For example:
...\" .iS
...\"     cd \*Vdce-test-dir\*L/test/directory/xds/tests.xom\*O
...\" .iE
...\" 
...\" .LI
...\" Run \*LTEST\*O with the subdirectory parameter.
...\" .LE
...\" 
...\" .P
...\" For example, to run all valid tests:
...\" 
...\" .iS
...\"     TEST valid
...\" .iE
...\" 
...\" .P
...\" The result of each test will be sent both to \*Lstdout\*O and to a file named
...\" \*Vsubdirectory\*L.result\*O. For each test, a log file will be created in the
...\" subdirectory, with the name \*Vtestname\*L.log\*O. For example, in the example
...\" given immediately above, the file \*Lvalid.result\*O would be created, and for
...\" each of the valid testcases a logfile would be created in the \*Lvalid\*O
...\" subdirectory.
...\" 
...\" 
...\" 
...\" ----------------------------------------------------------------------
...\" .H 5 "Running All Non-Threaded Tests in All Subdirectories"
...\" ----------------------------------------------------------------------
...\" 
...\" 
...\" .AL
...\" .LI
...\" Change to the directory over the testcases. For example,
...\" 
...\" .iS
...\"     cd \*Vdce-test-dir\*L/test/directory/xds/tests.switch\*O
...\" .iE
...\" 
...\" .LI
...\" Run \*LTESTALL\*O
...\" .LE
...\" 
...\" .P
...\" For example, to run all the tests (\*Lbasic\*O, \*Lvalid\*O, \*Linvalid\*O
...\" and \*Lstress\*O), simply enter (in the \*Ltests.switch\*O directory):
...\" 
...\" .iS
...\"     TESTALL
...\" .iE
...\" 
...\" .P
...\" The effect of executing the above command will be the same as running \*LTEST\*O
...\" for each of the subdirectories in turn, so that in this case the files \*Lbasic.result\*O,
...\" \*Lvalid.result\*O, \*Linvalid.result\*O, and \*Lstress.result\*O will be produced in the
...\" \*Ltests.switch\*O directory.
...\" 
...\" ZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZ
...\" 
...\" ----------------------------------------------------------------------
...\" .H 5 "Running All Threads Tests in One Group"
...\" ----------------------------------------------------------------------
...\" 
...\" .P
...\" To run all the XDS/XOM threads tests (\*Lthreads_as\*O, \*Lthreads_af\*O, etc.)
...\" in one group, the script \*LTTEST\*O may be invoked specifying the appropriate
...\" subdirectory.
...\" 
...\" For example:
...\" 
...\" 
...\" .iS
...\"     TTEST threads_os
...\" .iE
...\" 
...\" .P
...\" The terminal output from each test will be redirected into a file named
...\" \*Lthreads_os/\*Vtestname\*L.log\*O. A summary of the results be both displayed,
...\" and stored in a file named \*Lthreads_os.result\*O.
...\" .P
...\" To run the threads tests sequentially (i.e., instead of creating a thread for each
...\" line in the input file, to run each line in turn, as with the \*Lxt_test -a\*O
...\" command), use \*LTTESTa\*O instead of \*LTTEST\*O. This can be useful in determining
...\" whether a test failure is thread-related or not.
...\" 
...\" 
...\" 
...\" ZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZ
...\" 
...\" 
...\" 
...\" 
...\" 
...\" ----------------------------------------------------------------------
...\" .H 4 "Non-Threaded Tests"
...\" ----------------------------------------------------------------------
...\" 
...\" .P
...\" The following sections describe the XDS/XOM non-threaded tests.
...\" 
...\" 
...\" ----------------------------------------------------------------------
...\" .H 5 "Single Tests or Lists of Tests"
...\" ----------------------------------------------------------------------
...\" 
...\" 
...\" .P
...\" The general procedure for running single tests or lists of tests is as follows:
...\" 
...\" 
...\" .AL
...\" .LI
...\" Change directory to the testcase directory, e.g.:
...\" .iS
...\"     cd \*Vdce-test-dir\*L/test/directory/xds/tests.xds/basic\*O
...\" .iE
...\" 
...\" .P
...\" or
...\" 
...\" .iS
...\"     cd \*Vdce-test-dir\*L/test/directory/xds/tests.mhs/valid\*O
...\" .iE
...\" 
...\" 
...\" .LI
...\" Run \*Lxt_test\*O with the \*Vtestname\*O parameter specifying the test or test
...\" you wish to run.
...\" 
...\" .LE
...\" 
...\" 
...\" .P
...\" For example, to run a single test:
...\" 
...\" .iS
...\"     xt_test -i \*Vtestcase-filename\*O
...\" .iE
...\" 
...\" .P
...\" To run a list of tests in series:
...\" 
...\" .iS
...\"     xt_test -a \*Vtestcase_list_filename\*O
...\" .iE
...\" 
...\" .P
...\" To run a single test with logging output directed to a log named
...\" \*Vtestcase_filename\*L.log\*O,  and results to \*Lstdout\*O:
...\" 
...\" .iS
...\"     xt_test \*Vtestcase_filename\*O
...\" .iE
...\" 
...\" 
...\" 
...\" 
...\" 
...\" ----------------------------------------------------------------------
...\" .H 4 "Threads Tests"
...\" ----------------------------------------------------------------------
...\" 
...\" .P
...\" The following sections describe the XDS/XOM threads tests.
...\" 
...\" 
...\" 
...\" ----------------------------------------------------------------------
...\" .H 5 "General"
...\" ----------------------------------------------------------------------
...\" 
...\" 
...\" .P
...\" Assessing the results of the threads tests is not always as straightforward
...\" as for the other tests, since the parallel-running tests can influence each
...\" other. There are four groups of threads tests:
...\" 
...\" .VL 1.5i
...\" .LI "\*Lthreads_as\*O"
...\" in which all actions are expected to succeed
...\" 
...\" .LI "\*Lthreads_af\*O"
...\" in which all actions are expected to fail
...\" 
...\" .LI "\*Lthreads_os\*O"
...\" in which one is expected to succeed
...\" 
...\" .LI "\*Lthreads_up\*O"
...\" in which the outcome is unpredictable
...\" 
...\" .LE
...\" .sp 1
...\" 
...\" .P
...\" The first two cases are easily interpreted: the expected outcome should be either
...\" success or failure of the test's action, which corresponds to passing of the testcase.
...\" Thus all these tests should pass.
...\" .P
...\" The third case requires an inspection of the outcomes of all the tests, and confirmation
...\" that only one action succeeded. Since startup and shutdown should also succeed, the
...\" expected (successful) result consists in three threads passing and the rest failing.
...\" .P
...\" In the last group, success or failure \*Vper se\*O is not so important, since this
...\" depends on the non-deterministic interleaving of the tests: the purpose of these tests
...\" is to show whether the directory system is robust enough not to crash or deadlock when
...\" confronted with a complex mix of simultaneously interacting requests.
...\" .P
...\" In summary, the desired outcome is:
...\" 
...\" .VL 1.5i
...\" .LI "\*Lthreads_as\*O"
...\" all tests pass
...\" 
...\" .LI "\*Lthreads_af\*O"
...\" all tests pass
...\" 
...\" .LI "\*Lthreads_os\*O"
...\" test 3 passes, the rest fail
...\" 
...\" .LI "\*Lthreads_up\*O"
...\" no hanging or crashing (pass or fail unimportant)
...\" .LE
...\" 
...\" 
...\" 
...\" ----------------------------------------------------------------------
...\" .H 5 "Running Individual Threads Tests"
...\" ----------------------------------------------------------------------
...\" 
...\" 
...\" 
...\" .P
...\" Each thread testcase consists of four parts. For example, for test \*Lthis1v\*O,
...\" there exist four files:
...\" 
...\" .BL
...\" .LI
...\" \*LSTARTthis1v\*O
...\" .LI
...\" \*LBODYthis1v\*O
...\" .LI
...\" \*LSHUTDOWNthis1v\*O
...\" .LI
...\" \*LT10this1v\*O
...\" .LE
...\" 
...\" .P
...\" To run a test, for example \*LT10list1v\*O, do the following:
...\" .iS
...\"     xt_test -t T10list1v
...\" .iE
...\" 
...\" .P
...\" and the other three parts will be called implicitly. In general, runnable threads
...\" tests start with an initial capital ``T'', followed by a number indicating how many
...\" threads will be created, and ending with the name of the test itself.
...\" 
...\" ZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZ
...\" .P
...\" To run a test and redirect output to \*Vtestname\*L.log\*O and display the results,
...\" do the following:
...\" 
...\" .BL
...\" .LI
...\" Change to the desired test subdirectory,  e.g.:
...\" 
...\" .iS
...\"     cd tests.xom/basic
...\" .iE
...\" 
...\" .LI
...\" Enter:
...\" 
...\" .iS
...\"     _ttest \*Vtestname\*O
...\" .iE
...\" 
...\" 
...\" 
...\" .zZ "def,9323,R1.0.3,New XDS/XOM test information"
...\" 
...\" 
...\" ----------------------------------------------------------------------
...\" .H 3 "DUA Switch Tests"
...\" ----------------------------------------------------------------------
...\" 
...\" .P
...\" The DUA switch tests verify the XDS interface's handling of object
...\" names comprised of a combination of both typed and typeless
...\" components, or typeless components only (that is, not fully typed
...\" X.500 names). These tests are run like the XDS and XOM tests described
...\" previously, but you must have a minimally configured DCE cell before
...\" running the DUA switch tests.
...\" .P
...\" Since only the DUA cache is needed, the GDS configuration required for
...\" the DUA switch tests is much simpler than the configuration required
...\" for the XDS/XOM tests.
...\" 
...\" .nS "Note"
...\" Before running the switch tests, you must have completed porting RPC, CDS,
...\" and Security.
...\" .nE
...\" 
...\" .P
...\" To run the DUA switch tests, do the following:
...\" 
...\" .AL
...\" .LI
...\" Using \*Ldce_config\*O,
...\" 
...\" .AL
...\" .LI
...\" Install the Security, CDS, and GDS Servers.
...\" .LI
...\" Configure the initial security server with:
...\" 
...\" .iS
...\"     Cellname: c=ie/o=digital    \*V(for running tests using X.500 names)\*O
...\" .iE
...\" 
...\" .P
...\" or with
...\" 
...\" .iS
...\"     Cellname: snidec.sni.com    \*V(for running tests using DNS names)\*O
...\" .iE
...\" 
...\" 
...\" 
...\" .LI
...\" Configure the initial CDS server, and configure the GDA for X.500.
...\" .LE
...\" 
...\" .LI
...\" To add directories to the CDS namespace used by the test cases,
...\" enter the following at the command line:
...\" 
...\" .iS
...\"     dce_login cell_admin \*Vpassword\*L
...\"     dcecp -c directory create /.:/sales
...\"     dcecp -c directory create /.:/sales/admin\*O
...\" .iE
...\" 
...\"                                ???????????????????????????????????
...\" .P
...\" To configure/administer GDS the procedure in 7.5.1 can be followed.
...\" .P 
...\" The tests are located in the
...\" 
...\" .DS 
...\"     \*Vdce-root-dir\*L/dce/src/test/functional/directory/xds/ts/switch/lib\*O
...\" .DE
...\" 
...\" .P 
...\" directory. See the section in this chapter titled ``XDS/XOM Tests'' for
...\" instructions on using the \*Lxt_test\*O driver to run the tests. Note that
...\" you must have a valid \*Ldce_login\*O in order to run the tests.
...\" 
...\" 
...\" .LI
...\" Using \*Lgdssysadm\*O, do the following:
...\" 
...\" .AL
...\" .LI
...\" Configure Directory ID 1 as a client/server. Use default entries for the
...\" remaining options.
...\" .LI
...\" Activate the directory system.
...\" .LI
...\" 
...\" 
...\" Initialize Directory ID 1 as ``Initial Client/Server System'', as
...\" described in Chapter 6 (``Initializing GDS'') of the GDS part of
...\" \*VOSF DCE Administration Guide\(emExtended Services\*O,
...\" in the section entitled ``Initial client/server System,''
...\" step 1 and step 2. In step 2 use the following values:
...\" 
...\" .iS
...\"     DSA name: c=ie/o=digital/ou=dce/cn=dsa/cn=dsa-m1
...\"     2nd Attribute name: DSA-Type
...\"     2nd Attribute value: default/local
...\" .iE
...\" 
...\" .nS "Note"
...\" Only the steps pertaining to the DUA cache need be performed.
...\" .nE
...\" 
...\" .LE
...\" 
...\" .LE
...\" 
...\" .P
...\" See the instructions for GDS Setup in this chapter for more information
...\" on \*Lgdssysadm\*O.
...\" .P
...\" The tests are located in the
...\" 
...\" .DS
...\"     \*Vdce-root-dir\*L/dce/src/test/directory/xds/tests.switch\*O
...\" .DE
...\" 
...\" .P
...\" directory. See the section in this chapter titled ``XDS/XOM Tests'' for
...\" instructions on using the \*Lxt_test driver\*O to run the tests. Note that
...\" you must have a valid \*Ldce_login\*O in order to run the tests.
...\" 
...\" 
.zA "def,10533,1.1beta,update MAVROS test info"
...\" 
...\" ----------------------------------------------------------------------
.H 3 "MAVROS Compiler Tests"
...\" ----------------------------------------------------------------------
...\" 
.iX "testing" "MAVROS compiler"
.iX "MAVROS compiler" "testing"
...\" 
.P
The source files for the test drivers, input files, and reference
output files for the MAVROS tests are located in the
...\" 
.DS
    \*Vdce-test-dir\*L/test/directory/gds/mavrostest\*O
.DE
.P
directory.
...\" 
...\" .P
...\" Part of the test procedure is executed during the build of the
...\" .DS
...\"     \*Vdce-root-dir\*L/dce/src/test\*O
...\" .DE
...\" .P
...\" tree, and the remainder is run subsequently from the
...\" .DS
...\"     \*Vdce-test-dir\*L/test/directory/gds/mavrostest\*O
...\" .DE
...\" .P
...\" directory.
...\" 
...\" .P
...\" Most files required to complete and execute the test drivers that are not built are
...\" specified as ``DATAFILES'' in the \*Lmavrostest/Makefile\*O, and are copied into the
...\" \*Lobj\*O tree during the build. Two other files, \*Lasn1.h\*O and \*Llibasn1_r.a\*O,
...\" are expected to be in the build's export tree and are found using relative paths
...\" specified in \*Ltest_mvr.sh\*O.
...\" 
...\" .P
...\" There are two dependencies on the files exported during the GDS portion of the
...\" build:
...\" 
...\" .VL .5i
...\" .LI "\*Lasn1.h\*O"
...\" expected to be found either in the directory in which you are running the MAVROS
...\" test script, or in the \*Lexport\*O tree of your sandbox.
...\" 
...\" 
...\" .LI "\*Llibdce\*O"
...\" contains the ASN1 library.
...\" 
...\" .LE
...\" 
...\" 
...\" .P
...\" There are five steps in test procedure design:
...\" 
.P
Running the MAVROS compiler test consists of executing the \*Ltest_mvr.sh\*O
script. The script executes the test program to verify the coding routines can
be executed correctly. The \*Ltest_mvr.sh\*O shell script executes the test programs
in the \*Linstall\*O tree. Both \*Ltest_mvr\*O and \*Loidt\*O are executed. If these
programs execute correctly, the \*Ltest.errlog\*O (for \*Ltest_mvr\*O) and
\*Loidt.errlog\*O (for \*Loidt\*O) error logs will be empty.
...\" 
...\" .AL
...\" .LI
...\" Generation of coding routines and header files, using MAVROS, for a test syntax.
...\" .P
...\" This is done during the build of the test tree by the \*Lmavrostest/Makefile\*O.
...\" 
...\" .LI
...\" Compilation of the coding routines using the Makefile generated by MAVROS.
...\" .P
...\" This is done in the \*Lobj\*O tree by \*Ltest_mvr.sh\*O. The \*Ltest.a\*O
...\" library is produced.
...\" 
...\" .LI
...\" Compilation of the test program, which depends on the header file generated by
...\" MAVROS, and is linked with the routines produced in step 2.
...\" .P
...\" The \*Ltest_mvr\*O object is built. The \*Ltest_mvr\*O program is linked in the
...\" \*Lobj\*O tree by \*Ltest_mvr.sh\*O.
...\" .P
...\" The \*Loidt\*O test driver is built.
...\" 
...\" .LI
...\" 
...\" .LI
...\" Execution of the \*Llint\*O program to check the consistency of the code generated
...\" by MAVROS with the ASN.1 library and with the test program.
...\" .P
...\" This is done in the \*Linstall\*O tree by \*Ltest_mvr.sh\*O. The results (and
...\" \*Lstderr\*O) are redirected to \*Llint.log\*O.
...\" 
...\" .LE
...\" 
...\" 
...\" 
...\" 
.nS "note"
Once \*Lllib-ltest.ln\*O is up to date, \*Llint\*O is not actually executed.
After reexecuting \*Ltest_mvr.sh\*O, \*Llint.log\*O may be empty even though
there are \*Llint\*O errors in the code.
.nE
...\" 
...\" 
.zZ "def,10533,1.1beta,update MAVROS test info"
...\" 
...\" 
...\" ----------------------------------------------------------------------
...\" .H 4 "Lint Output"
...\" ----------------------------------------------------------------------
...\" 
...\" .P
...\" A large number of flags are passed to \*Llint\*O by \*Ltest_mvr.sh\*O in
...\" Step 5. The resulting \*Llint\*O output is
...\" 
...\" .oS
...\"     "stdio.h", line 181 ("test.c"): warning: mix of old and new style
...\"     function declaration
...\"     "stdio.h", line 181 ("test.c"): error: illegal redeclaration of sprintf
...\" .oE
...\" 
...\" .P
...\" for each file that includes \*Lstdio.h\*O and many instances of:
...\" 
...\" .oS
...\"     "test.c", line 1009: warning: WORD undefined
...\"     "test.c", line 1029: warning: REALWORD undefined
...\" .oE
...\" 
...\" .P
...\" in \*Ltest.c\*O.
...\" .P
...\" It is not necessary to use all the flags given in \*Ltest_mvr\*O to achieve this
...\" reduced output.
...\" 
...\" 
...\" 
...\" 
...\" .zA "def,8559,R1.0.3,Added ROS test information"
...\" OT 8559: ROS defuncted
...\" ----------------------------------------------------------------------
...\" .H 3 "ROS Tests"
...\" ----------------------------------------------------------------------
...\" 
...\" .P
...\" A test tool called \*Lrostest\*O exists to test the ROS provider. The
...\" testing is performed through the IROS interface; all IROS interface
...\" functions may be tested through \*Lrostest\*O.
...\" .P
...\" The ROS tester offers two main testing features, a manual test
...\" facility and an automatic test facility.
...\" .P
...\" With the manual test option the test is guided by the user selecting
...\" at the keyboard the IROS functions to be executed and entering the
...\" values of the function parameters. The function return code and any
...\" returned parameters will be displayed on the screen.
...\" .P
...\" The automatic test option allows a series of pre-defined IROS test
...\" cases to be executed. The IROS functions to be excuted and the IROS
...\" events to be waited upon, together with their parameter blocks, are
...\" defined in a file. Also defined is the expected return code from the
...\" function and expected values of any returned parameters. The
...\" automatic run executes the IROS functions in the sequence specified
...\" and with the parameter values specified and checks that the return
...\" code and any returned parameter values specified in the file match
...\" those that result during the automatic execution.
...\" .P
...\" The ROS tests ensure that the Session functionality required by ROS
...\" is thoroughly tested. The OSS component must be present for the tests
...\" to be successfully run.
...\" .P
...\" The ROS test tool does not require any special environment. Most
...\" automatic tests are run between two test applications, an initiator
...\" and a responder. These may be on different machines or on one
...\" machine using loopback. The responder application is run first so
...\" that the application has time to call \*Lr_attach\*O before the initiator
...\" application calls \*Lr_bindq\*O for the responder application. The tests
...\" are run in the
...\" 
...\" .DS
...\"     \*Vdce-test-dir\*L/test/directory/gds/ros/testenv\*O
...\" .DE
...\" 
...\" .P
...\" directory, either by invoking \*Lrostest\*O directly, or by using supplied
...\" shell scripts to invoke \*Lrostest\*O.
...\" .P
...\" Before invoking \*Lrostest\*O using the supplied shell scripts, it is
...\" necessary to set up the following environment variables:
...\" 
...\" 
...\" .VL 1i
...\" .LI "\*LROSINIT\*O"
...\" absolute pathname of the
...\" 
...\" .DS
...\"     \*Vdce-test-dir\*L/test/directory/gds/ros/testenv/rosinit\*O
...\" .DE
...\" 
...\" .P
...\" directory.
...\" 
...\" 
...\" .LI "\*LROSRESP\*O"
...\" absolute pathname of the
...\" .DS
...\"     \*Vdce-test-dir\*L/test/directory/gds/ros/testenv/rosresp\*O
...\" .DE
...\" 
...\" .P
...\" directory
...\" 
...\" .LE
...\" 
...\" .P
...\" Refer to the ``ROSTEST - TEST CASES'' document for a description of
...\" the ROS testcases and test scenarios.
...\" 
...\" 
...\" ----------------------------------------------------------------------
...\" .H 4 "Location Of ROS Test Files"
...\" ----------------------------------------------------------------------
...\" 
...\" .P
...\" The sources, headers, Makefiles, scripts, etc. for the ROS test component are
...\" supplied in the
...\" .DS
...\"     \*Vdce-root-dir\*L/dce/src/test/directory/gds/ros\*O
...\" .DE
...\" 
...\" .P
...\" directory.
...\" .P
...\" Run \*Lbuild\*O from this directory to produce the \*Lrostest\*O executable.
...\" The object code and executables are built in :
...\" .DS
...\"     \*Vdce-root-dir\*L/dce/install/machine/dce1.1/test/directory/ros\*O
...\" .DE
...\"
...\" .P
...\" The following test case subdirectories exist:
...\" 
...\" .BL
...\" .LI
...\" \*Lros/rosinit\*O
...\" .P
...\" Contains the test files for initiator applications.
...\" 
...\" .LI
...\" \*Lros/rosinit/badhist\*O
...\" .P
...\" Contains the output from the initiator invocation of \*Lrostest\*O in cases
...\" where the automatic test has failed. The file produced will have the same
...\" name as the test file used as input in the automatic test.
...\" 
...\" .LI
...\" \*Lros/rosresp\*O
...\" .P
...\" Contains the test files for initiator applications.
...\" 
...\" .LI
...\" \*Lros/rosresp/badhist\*O
...\" .P
...\" Contains the output from the responder invocation of \*Lrostest\*O in cases
...\" where the automatic test has failed. The file produced will have the same
...\" name as the test file used as input in the automatic test.
...\" 
...\" .LE
...\" 
...\" 
...\" 
...\" ----------------------------------------------------------------------
...\" .H 4 "To Run An Individual ROS Test"
...\" ----------------------------------------------------------------------
...\" 
...\" .P
...\" To run an individual test, e.g. \*Lrjurq.12.invrq\*O from test group \*Lrosi.12\*O,
...\" enter (from the \*Lros/testenv\*O directory) on the responder machine:
...\" 
...\" .iS
...\"     rost.sh -resp rjurq.12.invrq
...\" .iE
...\" 
...\" .P
...\" and then on the initiator machine enter:
...\" 
...\" .iS
...\"     rost.sh -init rjurq.12.invrq
...\" .iE
...\" 
...\" 
...\" 
...\" ----------------------------------------------------------------------
...\" .H 4 "To Run A Group Of ROS Tests"
...\" ----------------------------------------------------------------------
...\" 
...\" .P
...\" To run a group of tests, e.g. \*Lrosi.02\*O, enter from the \*Lros/testenv\*O
...\" directory:
...\" 
...\" .iS
...\"     rosr.02.sh
...\" .iE
...\" 
...\" .P
...\" Add any desired \*Lrostest\*O switches to this command line as described in the
...\" ``ROSTEST - TEST SPECIFICATION'' document. For example,
...\" 
...\" .iS
...\"     rosr.02.sh -p -i
...\" .iE
...\" 
...\" .P
...\" should be used where the test files were generated on a machine other than that
...\" which is being used in the test.
...\" .P
...\" Then from the \*Lros/testenv\*O directory on the initiator machine or window
...\" enter:
...\" 
...\" .iS
...\"     rosi.02.sh
...\" .iE
...\" 
...\" 
...\" .zZ "def,8559,R1.0.3,Added ROS test information"
...\" 
...\" 
...\" 
...\" ----------------------------------------------------------------------
.H 3 "Testing GDS Intercell Operation"
...\" ----------------------------------------------------------------------
...\" X.X  Using GDS for intercell communications.
.P
This section contains the steps followed to hand-test using GDS for intercell
communications. The typical test scenario involves two single-machine cells
configured with X.500 names; in the steps given below, these machines are
named ``prague'' and ``gemini''. The cell names used are, respectively:
...\" 
.oS
    /.../c=us/o=osf/ou=dce/cn=prague
    /.../c=us/o=osf/ou=dce/cn=gemini
.oE
...\" 
.P
The cell located on ``prague'' will be considered the foreign cell, and the cell
located on ``gemini'' will be considered the local cell.
...\" 
...\" 
.AL
...\" 
.LI
Configure the foreign cell, with GDA.
...\" 
...\" 
.LI
Configure the local cell, with GDA.
...\" 
...\" 
.LI
Start GDS on the local cell.
...\" 
...\" 
.LI
Administer the DUA Cache in the local cell with \*Lgdssysadm\*O, as follows:
...\" 
.VL .5i
.LI "a."
Prime cache with client address (option 5):
...\" 
.oS
    T-selector: \*LClient\*C
    NSAP:       \*LTCP/IP!internet=127.0.0.1+port=21010\*O
.oE
...\" 
.LI "b."
Prime cache with name of default DSA (option 1):
...\" 
.oS
    name:     c=us/o=osf/ou=dce/cn=gemini/cn=gemini-dsa
.oE
...\" 
.P
Select ``DSA-Type'' from the attribute list and provide the following
values:
...\" 
.oS
    dsa-type:   \*Ldefault/local'\*C
    T-selector: \*LServer\*C
    PSAP:       \*LTCP/IP!internet=127.0.0.1+port=21011\*O
.oE
...\" 
.LE
...\" 
...\" 
...\" 
.LI
Get UUIDs and towers of foreign cell.
.P
Logon to the foreign machine and type:
...\" 
.iS
    cdscp show cell as gds
.iE
...\" 
.P
You will get output that looks like this:
...\" 
.oS
                  SHOW
                  CELL   /.../c=us/o=osf/ou=dce/cn=prague
                    AT   1994-09-28-15:01:02
        Namespace Uuid = 6e22b59f-dad0-11cd-a4ac-0000c0a1de56
    Clearinghouse Uuid = 6d17b15e-dad0-11cd-a4ac-0000c0a1de56
    Clearinghouse Name = /.../c=us/o=osf/ou=dce/cn=prague/prague_ch
          Replica Type =   Master  
                 Tower = ncacn_ip_tcp:130.105.5.83[]
                 Tower = ncadg_ip_udp:130.105.5.83[]
.oE
...\" 
...\" 
.LI
Create object for foreign cell in DSA of local cell:
...\" 
.VL .5i
.LI "a."
Logon to the local DSA on the local cell.
...\" 
.LI ".b."
Create all superior objects; for example:
...\" 
.oS
    c=us/o=osf/ou=dce
.oE
...\" 
.LI "c."
Create object for the foreign cell:
...\" 
.oS
    c=us/o=osf/ou=dce/cn=prague
    application-process
.oE
...\" 
.P
Select ``CDS-Cell'' and ``CDS-Replica'' from the attribute list
and provide the following values:
...\" 
.VL 1.5i
.LI "CDS-Cell"
Cut and paste namespace UUID
.P
Root directory UUID is same as namespace UUID
.P
Name of cell is root directory name
...\" 
.LI "CDS-Replica"
Replica type is MASTER
.P
Cut and paste clearinghouse UUID
.P
Cut and paste clearinghouse name
.P
Cut and paste towers
.LE
...\" 
...\" 
...\" 
.LE
...\" 
...\" 
.LI
Have the cells exchange keys.
.P
On the local cell, \*Ldce_login\*O, enter \*Lrgy_edit\*O, and type the
following:
...\" 
.oS
    rgy_edit=> \*Lcell /.../c=us/o=osf/ou=dce/cn=haven\*C
    Enter group name of the local account for the foreign cell: \*Lnone\*C
    Enter group name of the foreign account for the local cell: \*Lnone\*C
    Enter org name of the local account for the foreign cell: \*Lnone\*C
    Enter org name of the foreign account for the local cell: \*Lnone\*C
    Enter your password:   \*Venter local cell cell_admin password\*C
    Enter account id to log into foreign cell with: \*Lcell_admin\*C
    Enter password for foreign account: \*Venter foreign cell cell_admin password\*C
    Enter expiration date [yy/mm/dd or 'none']: \*L(none)\*O
.oE
...\" 
...\" 
.LI    
Verify GDS intercell operation.
.P
Test unauthenticated access.
...\" 
Type:
...\" 
.iS
    cdscp show dir /.../c=us/o=osf/ou=dce/cn=prague'
.iE
...\" 
.P
You should perform this command not as root, but as an unauthenticated system
user. Type \*Lklist\*O to verify that you in fact have no credentials.
...\" 
.LI
Test authenticated access.
.P
\*Ldce_login\*O and issue the same \*Lcdscp\*O command as in the previous
step.
...\" 
.LE
...\" 
...\" 
...\" 
...\" 
...\" 
...\" 
...\" 
...\" 
...\" 
...\" ----------------------------------------------------------------------
.H 2 "GDS Runtime Output and Debugging Output"
...\" ----------------------------------------------------------------------
...\" 
...\" 
.P
The GDS component outputs server information of all kinds via the DCE
serviceability component. The \*VOSF DCE Administration Guide\*O, Chapter 5,
Section 5.5 describes how to control the various kinds of information (including
trace output) available from GDS via serviceability.
...\" 
...\" 
...\" 
...\" 
...\" 
...\" 
...\" 
...\" 
...\" 
...\" ----------------------------------------------------------------------
.H 3 "Test Plans"
...\" ----------------------------------------------------------------------
...\" 
.iX "test plans" "GDS"
.iX "GDS" "test plans"
...\" 
.P
Refer to Chapter 1 of the \*VOSF DCE Release Notes\*O for the location of
the DCE test plans on the DCE distribution tape.
...\" 
...\" 
...\" .P
...\" Test plans that list individual test cases and command tests are available
...\" in subdirectories of the
...\" .DS
...\"     \*Vdce-root-dir\*L/doc/testplans\*O
...\" .DE
...\" .P
...\" directory.
...\" 
...\" 
...\" 
...\" .zZ "def,8422,R1.0.3,alphabetized symbol lists"
...\" 
...\" 
...\" ----------------------------------------------------------------------
...\" ----------------------------------------------------------------------
...\" ----------------------------------------------------------------------
...\" ----------------------------------------------------------------------
