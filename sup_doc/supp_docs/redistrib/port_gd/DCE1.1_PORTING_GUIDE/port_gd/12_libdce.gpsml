...\" @OSF_COPYRIGHT@
...\" COPYRIGHT NOTICE
...\" Copyright (c) 1990, 1991, 1992, 1993, 1994 Open Software Foundation, Inc.
...\" ALL RIGHTS RESERVED (DCE).  See the file named COPYRIGHT.DCE for
...\" the full copyright text.
...\" 
...\" HISTORY
...\" $Log: 12_libdce.gpsml,v $
...\" Revision 1.1.2.14  1994/10/30  22:47:24  weir
...\" 	Last updates
...\" 	[1994/10/30  22:46:15  weir]
...\"
...\" Revision 1.1.2.13  1994/10/30  16:25:25  weir
...\" 	Updates
...\" 	[1994/10/30  16:24:00  weir]
...\" 
...\" Revision 1.1.2.12  1994/10/29  23:25:45  weir
...\" 	More Updates
...\" 	[1994/10/29  23:24:25  weir]
...\" 
...\" Revision 1.1.2.11  1994/10/28  20:49:59  weir
...\" 	DCE 1.1 updates
...\" 	[1994/10/28  20:48:37  weir]
...\" 
...\" Revision 1.1.2.10  1994/10/26  20:40:38  weir
...\" 	DCE 1.1 Updates
...\" 	[1994/10/26  20:39:10  weir]
...\" 
...\" Revision 1.1.2.9  1994/10/14  18:38:44  weir
...\" 	Minor edit changes
...\" 	[1994/10/14  18:37:33  weir]
...\" 
...\" Revision 1.1.2.8  1994/06/20  20:28:37  weir
...\" 	Beta Update
...\" 	[1994/06/20  20:27:13  weir]
...\" 
...\" Revision 1.1.2.7  1994/06/19  20:53:49  weir
...\" 	Beta Update
...\" 	[1994/06/19  20:52:38  weir]
...\" 
...\" Revision 1.1.2.6  1994/06/17  13:50:15  weir
...\" 	Beta Update
...\" 	[1994/06/17  13:48:42  weir]
...\" 
...\" Revision 1.1.2.5  1994/06/13  19:25:28  devobj
...\" 	cr10872 - fix copyright
...\" 	[1994/06/13  19:24:31  devobj]
...\" 
...\" Revision 1.1.2.4  1994/06/12  17:31:54  weir
...\" 	No change-- for copyright insertion
...\" 	[1994/06/12  17:30:24  weir]
...\" 
...\" Revision 1.1.2.3  1994/06/08  18:47:15  weir
...\" 	Beta Update
...\" 	[1994/06/08  18:46:07  weir]
...\" 
...\" Revision 1.1.2.2  1994/06/02  21:13:10  weir
...\" 	Beta Updates
...\" 	[1994/06/02  21:11:33  weir]
...\" 
...\" Revision 1.1.2.1  1994/05/03  19:00:11  weir
...\" 	Reorganization
...\" 	[1994/05/03  18:58:58  weir]
...\" 
...\" $EndLog$
...\" 
...\" 
...\" 
...\" 
...\" 
...\" 
...\" ----------------------------------------------------------------------
.H 1 "ODE, Makefiles, and the DCE Library"
...\" ----------------------------------------------------------------------
...\" 
...\" 
...\" 
.P
This chapter describes several aspects of DCE that are general to the offering
rather than specific to any particular component:
...\" 
.VL 1i
...\" 
.LI "ODE"
ODE (the OSF Development Environment) is the collection of development tools
used to build DCE on the reference platforms. This section includes subsections
on the following topics:
...\" 
.VL 1.5i
.LI "Documentation"
Describes where the ODE documentation is located.
...\" 
.LI "Build process"
Describes various aspects of the organization of the DCE build.
...\" 
.LI "\*LMakefile\*Os"
Including \*LMakeconf\*O, a file which contains platform specific definitions
that control the build process.
...\" 
.LI "Other Topics"
Describes other details of ODE.
...\" 
.LE
...\" 
.LI "\*Llibdce\*O"
The DCE library, \*Llibdce\*O, which contains the interfaces needed for accessing
the DCE components.
...\" 
...\" 
.LE
...\" 
...\" 
...\" ----------------------------------------------------------------------
.H 2 "DCE ODE"
...\" ----------------------------------------------------------------------
...\" 
.P
This section describes ODE, the OSF Development Environment, from a DCE
user's perspective. It does not provide full documentation on building
backing tree or sandboxes or in using the ODE commands. It does provide
detailed information on variables used in DCE Makefile's and some background
information on ODE tree organization and the ODE build system of passes.
You should also read the ODE documentation described in the next section.
...\" 
...\" 
...\" ----------------------------------------------------------------------
.H 3 "Other ODE Documentation"
...\" ----------------------------------------------------------------------
...\" 
.P
In the following sections it is assumed that you are familiar with OSF Development
Environment (ODE) tools and concepts such as backing trees, export areas, component
\*L.mk\*O files, common makefiles, and build passes. For information about these and
other build- and ODE-related topics, you should refer to the following documents,
which are supplied with DCE:
...\" 
.BL
.LI
\*VOSF Development Environment System Administration Guide\*O
.P
Located at:
...\" 
.DS
    \*Vdce-root-dir\*L/ode/doc/sag.ps\*O
.DE
...\" 
.LI
\*VOSF Development Environment User's Guide\*O
.P
Located at:
...\" 
.DS
    \*Vdce-root-dir\*L/ode/doc/dug.ps\*O
.DE
...\" 
.LI
\*VOSF DCE Release Notes\*O
.P
Located at
...\" 
.DS
    \*Vdce-root-dir\*L/doc/src/release_doc/relnotes/Output/draft/ps\*O
.DE
...\" 
.P
for PostScript output, and
...\" 
.DS
    \*Vdce-root-dir\*L/doc/src/release_doc/relnotes/Output/draft/ascii\*O
.DE
...\" 
.P
for ASCII output. A hardcopy of this document is supplied with every set of
DCE distribution tapes.
.P
Chapter 4 of the \*VRelease Notes\*O, ``Building and Installation'', contains
information on building the DCE source on the reference platforms.
.LE
...\" 
...\" 
...\" 
...\" ----------------------------------------------------------------------
.H 3 "Organization of the DCE Build Tree"
...\" ----------------------------------------------------------------------
...\" 
.P
ODE organizes the DCE build tree into several main parts:
...\" 
...\" 
.BL
...\" 
.LI
\*Vdce-root-dir\*L/dce/src\*O
.P
All source files reside here. Beneath this directory are subtrees for each
component of DCE.
...\" 
.LI
\*Vdce-root-dir\*L/dce/obj\*O
.P
An internal building area. All compiles are run here, and all objects and
executables are created here.
...\" 
.LI
\*Vdce-root-dir\*L/dce/export\*O
.P
Another internal building area. All inter-component dependencies are resolved
by exporting files (usually headers and libraries) here, and then having other
components look here instead of in the \*Lsrc\*O subtree of other components.
...\" 
.LI
\*Vdce-root-dir\*L/dce/install\*O
.P
The final resting place of user-visible programs, libraries, headers, datafiles,
tests, etc. The format of this tree mirrors the format of an installed DCE system
(i.e., programs are found in a \*Lbin\*O directory, etc.).
...\" 
.LI
\*Vdce-root-dir\*L/dce/tools\*O
.P
A directory containing all tools needed during the build process. Both the ODE
tools (e.g., \*Lmake\*O) and the DCE tools (e.g., \*Lidl\*O, \*Lmavros\*O, etc.)
reside here.
...\" 
.LE
...\" 
...\" 
...\" ----------------------------------------------------------------------
.H 3 "Organization of the DCE Build Process"
...\" ----------------------------------------------------------------------
...\" 
.P
ODE organizes the DCE build process into several passes. Passes have numbers
(e.g., \*LFIRST\*O, \*LFIRSTA\*O, etc.) and tags (e.g., \*LSETUP\*O, \*LEXPINC\*O,
\*LEXPLIB\*O, etc.) associated with them. The tags then have actions (e.g., export,
build, comp, clobber, etc.) associated with them.
...\" 
.BL
...\" 
.LI
\*Lsetup\*O
.P
This pass builds tools needed during the export pass. The primary example
of such a tool is \*Lidl\*O, which is built during this pass so that headers
generated by it can be exported during the export pass.
...\" 
.LI
\*Lexport\*O
.P
This pass builds headers (if necessary) and libraries needed by one component
from another component. Most programs need headers and functions contained in
\*Llibdce.a\*O; these are built and placed in the \*Lexport\*O tree during this
pass.
...\" 
.LI
\*Lcomp\*O
.P
This pass builds all other programs and datafiles needed. Any libraries that
are not exported are built during this pass as well.
...\" 
.LI
\*Linstall\*O
.P
This pass takes built programs libraries and datafiles and places them into
the \*Linstall\*O tree.
...\" 
.LE
...\" 
...\" 
.P
There are other passes defined as well. These allow \*Llint\*O and various tags
creating programs (e.g., \*Lctags\*O or \*Letags\*O) to be run on the source
files, as well as several cleanup passes that remove objects from the \*Lobj\*O
tree.
.P
The following sections contain lists of variables that can be defined in DCE
Makefiles to control the build process. The sections are organized by category
and by the passes in which the variables they describe are used.
...\" 
...\" 
...\" 
...\" 
...\" ----------------------------------------------------------------------
.H 3 "Makefiles in DCE"
...\" ----------------------------------------------------------------------
...\" 
...\" 
...\" ------------------from Rel Notes, Ch. 2.3:----------------------------
...\" 
...\" The first step in porting DCE to another platform is to port ODE. Instructions
...\" and hints for porting ODE to a new platform can be found in Appendix A of the
...\" \*VODE System Administrator's Guide\*O. You do not have to port the full ODE
...\" toolset; you need only port those tools which are used during the build process.
...\" These are: \*Lmake\*O, \*Lgenpath\*O, \*Lmakepath\*O, \*Lbuild\*O, \*Lrelease\*O,
...\" and \*Lmd\*O (that is, through step 6 of the ODE porting strategy).
...\" 
...\" ---------------------...from Rel Notes, Ch. 2.3-----------------------
...\" 
...\" In 1.0.1, according to Chapter 2 of the Release Notes, the beginning of the
...\" build procedure went roughly as follows.
...\" 
...\"     1. Build the "basic build tools" by running the setup.sh script to
...\"        build: 
...\" 
...\"              build, make (ODE make), md, makepath, genpath, release
...\" 
...\"     2. Build the "basic DCE tools" by running build to build:
...\" 
...\"              compile_et, idl, idl.cat (the message catalog), msg,
...\"              make ("DCE" make), mavcod, mavros, prs
...\" 
...\"     3. Then, before doing anything else, replace the ODE make built in
...\"        step 1 with the DCE make built in step 2. This was because the former
...\"        was a parallelized version that did not work with the DCE makefiles.
...\"        I do not know if this is to continue in DCE 1.0.2.
...\" 
...\" Of course, ODE itself and make must be built on a platform before
...\"  DCE can be built. The makefiles that govern this build are located
...\"  in src/lbe and src/lbe/bin.
...\" 
...\" 
...\" 
.P
The makefiles used in the DCE build by the ODE \*Lmake\*O fall into the following
categories:
...\" 
.BL
.LI
\*Vdce-root-dir\*L/dce/src/Makeconf\*O
...\" 
.P
This file, whose position marks the top of the DCE source tree, sets the values
of various platform-specific porting variables. Its contents are read by \*Lmake\*O.
...\" 
.LI
Component \*LMakefile\*Os
...\" 
.P
The standard UNIX \*LMakefile\*Os that appear in each of the DCE source subdirectories
that contains files from which objects are built. The \*Llibdce\*O \*LMakefile\*O at
...\" 
.DS
    \*Vdce-root-dir\*L/dce/src/libdce/Makefile\*O
.DE
...\" 
.P
is a component \*LMakefile\*O.
.P
The component \*LMakefile\*Os make use of variables and rules defined in the common
makefiles (described below). DCE developers create and modify the component
\*LMakefile\*Os as required during the development of a component.
...\" 
...\" 
...\" 
.LI
Common makefiles
...\" 
...\" 
.P
The common makefiles are located at:
.DS
    \*Vdce-root-dir\*L/dce/src/lbe/mk\*O
.DE
.P
All of them have names ending with an extension of \*L.mk\*O. They contain frequently used
build rules that can be defined in one place so that they do not have to be duplicated in
each separate \*LMakefile\*O in the \*Lsrc\*O tree.
...\" 
...\" 
.P
The common makefiles are explicitly included in each \*LMakefile\*O by the line
...\" 
.oS
    .include <${RULES_MK}>
.oE
...\" 
.P
This line \*Valways\*O appears \*Vafter\*O all variable defines in the \*LMakefile\*O.
...\" 
.LI
Component \*L.mk\*O files
...\" 
...\" 
.P
These files, located at
...\" 
.DS
    \*Vdce-root-dir\*L/dce/src/\*Vcomponent_name\*L/\*Vcomponent_name\*L.mk\*O
.DE
...\" 
.P
(in the topmost directory of each component), contain machine-specific variable settings
for entire subtrees and subdirectories of a particular DCE component. During the DCE build,
code in
...\" 
.DS
    \*Vdce-root-dir\*L/dce/src/lbe/mk/osf.dce.mk\*O
.DE
...\" 
.P
determines which component \*Lmake\*O is currently building, and includes the
\*L.mk\*O files for that component with a \*L.include\*O command.
...\" 
...\" 
.P
Note that you should not use these files for any new code. Instead, such information
should be put in the \*LMakefile\*Os and \*Lmachdep.mk\*O files.
...\" 
...\" 
...\" 
...\" 
.LI
Machine-dependent \*L.mk\*O files
...\" 
.P
These files, located at
...\" 
.DS
    \*Vdce-root-dir\*L/dce/src/\*Vcomponent_name\*L/\*VTARGET_MACHINE\*L/machdep.mk\*O
.DE
...\" 
.P
(where \*Vcomponent_name\*O can be \*Llibdce\*O as well as any of the other DCE
components), contain machine-specific variable settings for a particular component.
If the source code for a function contains machine dependent code, it is placed
in a ``target machine'' subdirectory of the component directory it would otherwise
have been located in. Then, in the \*LMakefile\*O for the program which contains this
function, there will be a command to include the machine dependent makefile from the
appropriate target machine subdirectory. It usually looks something like the
following code fragment:
...\" 
.oS
    .if exists(${TARGET_MACHINE}/machdep.mk)
    .include "${TARGET_MACHINE}/machdep.mk"
    .endif
.oE
...\" 
.P
\*VTARGET_MACHINE\*O is defined in:
...\" 
.DS
    \*Vdce-root-dir\*L/rc_files/shared\*O
.DE
...\" 
...\" 
.P
DCE developers create and modify the machine dependent makefiles as required during
the development of a component.
...\" 
...\" 
...\" .P
...\" It's been pointed out that there is yet another kind of makefile, though only
...\" a couple of examples of it exist: namely, the ``operating-system-dependent''
...\" makefiles at:
...\" .DS
...\"     \*Vdce-root-dir\*L/dce/src/directory/cds/control/\*VOS_TYPE\*L/osedp.mk\*O
...\" 
...\"     \*Vdce-root-dir\*L/dce/src/directory/gds/dsa/\*VOS_TYPE\*L/osedp.mk\*O
...\" .DE
...\" .P
...\" which are mentioned below in the ``Running Commands During the Build'' section.
...\" However, since it's not sure what we should say about them here, we decided to
...\" leave them out of this list.
...\" 
.LE
...\" 
...\" 
...\" 
...\" ----------------------------------------------------------------------
.H 4 "Terminology"
...\" ----------------------------------------------------------------------
...\" 
.P
In the remainder of this chapter, the term ``makefile'' is used generically to refer
to any of the types of files described above. The term ``\*LMakefile\*O'' (spelled
with an uppercase ``M'' and in bold font) denotes an ``ordinary'' makefile, of the
type used by \*Lmake\*O. The phrase ``common makefile'' (sometimes called ``ODE
makefile'' in the ODE documentation) denotes any of the files with ``\*L.mk\*O''
extensions located at:
...\" 
.DS
    \*Vdce-root-dir\*L/dce/src/lbe/mk\*O
.DE
...\" 
.P
Thus the phrase ``component \*L.mk\*O file'' denotes one of the component-specific files
with an extension of ``\*L.mk\*O'', while ``component \*LMakefile\*O'' means any of
the standard UNIX \*LMakefile\*Os located in a component's part of the \*Lsrc\*O tree.
.P
Thus
...\" 
.DS
    \*Vdce-root-dir\*L/dce/src/libdce/Makefile\*O
.DE
...\" 
.P
and
...\" 
.DS
    \*Vdce-root-dir\*L/dce/src/threads/Makefile\*O
.DE
...\" 
.P
and
...\" 
.DS
    \*Vdce-root-dir\*L/dce/src/rpc/idl/idl_compiler/Makefile\*O
.DE
...\" 
.P
are all ``component \*LMakefile\*Os'', while
...\" 
.DS
    \*Vdce-root-dir\*L/dce/src/threads/threads.mk\*O
.DE
...\" 
.P
and
...\" 
.DS
    \*Vdce-root-dir\*L/dce/src/rpc/rpc.mk\*O
.DE
...\" 
.P
are both ``component \*L.mk\*O files''.
...\" 
...\" 
...\" 
...\" 
...\" 
...\" ----------------------------------------------------------------------
.H 4 "Subdirectory Variables"
...\" ----------------------------------------------------------------------
...\" 
.P
The following variables can be used in Makefiles to define subdirectories
to visit during specified passes.
...\" 
...\" 
.BL
.LI
\*LSETUP_SUBDIRS\*O
.P
Defines a list of subdirectories to visit during the setup pass. This pass
is used to define tools that are needed during the export passes.
...\" 
.LI
\*LEXPINC_SUBDIRS\*O
.P
Defines a list of subdirectories to visit during the export include file
pass. This pass is used to place headers needed by other components into
the \*Lexport\*O tree.
...\" 
.LI
\*LEXPLIB_SUBDIRS\*O
.P
Defines a list of subdirectories to visit during the export libraries pass.
This pass is used to place libraries needed by other components into the
\*Lexport\*O tree.
...\" 
.LI
\*LEXPSHLIB_SUBDIRS\*O
.P
Defines a list of subdirectories to visit during the export shared libraries
pass. This pass is used to place shared libraries needed by other components
into the \*Lexport\*O tree. Currently it is used only for \*Llibdce.so\*O.
...\" 
.LI
\*LSUBDIRS\*O
.P
Defines a list of subdirectories to visit during all the other passes. For
the most part this means the comp pass which is used to build programs and
the install pass, but it is also used for the clean, rmtarget, clobber,
lint, and tags passes.
...\" 
.LE
...\" 
...\" 
...\" ----------------------------------------------------------------------
.H 4 "ODE Variables Used in the setup Pass"
...\" ----------------------------------------------------------------------
...\" 
.P
The following variables are used by ODE during the setup pass to determine
various targets and dependencies. The goal of the setup pass is to build
various tools needed during the export pass. The built tools are placed
in the \*Ltools\*O subtree.
...\" 
.BL
.LI
\*LSETUP_INCLUDES\*O
.P
Defines a list of include files.
...\" 
.LI
\*LSETUP_PROGRAMS\*O
.P
Defines a list of programs to be built during the setup pass.
...\" 
.LI
\*LSETUP_SCRIPTS\*O
.P
Defines a list of scripts to be built during the setup pass.
...\" 
.LI
\*LSETUP_OTHERS\*O
.P
Defines a list of other things to be built during the setup pass.
...\" 
.LE
...\" 
...\" 
...\" 
...\" ----------------------------------------------------------------------
.H 4 "ODE Variables Used in the export Pass"
...\" ----------------------------------------------------------------------
...\" 
...\" 
.P
These variables are used by ODE during the export pass to determine various
targets and dependencies. The goal of the export pass is to place any
dependency needed between components into the \*Lexport\*O tree.
...\" 
.BL
.LI
\*LINCLUDES\*O
.P
Defines a list of include files to be exported to the \*Lexport\*O tree.
...\" 
.LI
\*LEXPLIB_TARGETS\*O
.P
Defines a list of libraries to be built and exported to the \*Lexport\*O tree.
If this variable is not set, then all libraries listed in the variable
\*LLIBRARIES\*O (see below) will be exported. If this variable is set, only
the libraries listed in this variable will be exported, regardless of the values
of \*LLIBRARIES\*O.
...\" 
...\" 
.P
The value of this variable is a list of libraries; each library name must be
preceded with \*Lexport_\*O. Any targets in the \*LEXPLIB_TARGETS\*O list that
do not have  the \*Lexport_\*O prefix will be built, but not exported. You may
either put in the prefix yourself, or just list the library names without the
\*Lexport_\*O and include a substitution command after the definition to add it
as follows:
...\" 
.oS
    EXPLIB_TARGETS = liba.a libb.a libc.a
    EXPLIB_TARGETS = ${EXPLIB_TARGETS:S/^/export_/g}
.oE
...\" 
...\" 
...\" 
.LI
\*LEXPSHLIB_TARGETS\*O
.P
Defines a list of shared libraries to be exported to the \*Lexport\*O tree. If
this variable is not set, then all libraries listed in the variable
\*LSHARED_LIBRARIES\*O (see below) will be exported. If this variable is set,
only the libraries listed in this variable will be exported, regardless of the
values of \*LSHARED_LIBRARIES\*O.
...\" 
...\" 
...\" 
.LI
\*LEXPDIR\*O
.P
Defines the directory into which include files and libraries will be exported.
It is specified relative to the
...\" 
.DS
    \*Vdce-root-dir\*L/dce/export/\*VTARGET_MACHINE\*O
.DE
...\" 
.P
directory in the sandbox. Note that the path assigned to this variable must
begin and end  with a ``\*L/\*O''.
...\" 
...\" 
...\" 
.LI
\*LIDLFILES\*O
.P
Defines a list of \*L.idl\*O files (for the export area) to run the \*Lidl\*O
compiler on.
...\" 
...\" 
...\" 
.LE
...\" 
...\" 
.P
Note that some ODE documentation describes the variables \*LEXPLINKS\*O and
\*LEXPBIN\*O. You \*Vshould not\*O use these, as they are not supported by
the DCE common makefiles.
...\" 
...\" 
...\" 
...\" ----------------------------------------------------------------------
.H 4 "ODE Variables Used in the comp Pass"
...\" ----------------------------------------------------------------------
...\" 
.P
These variables are used by ODE during the comp pass to determine various
targets and dependencies. The comp pass is when programs and non-exported
libraries are built. It is the main build pass.
...\" 
.BL
.LI
\*LLIBRARIES\*O
.P
Defines a list of libraries which need to be compiled and archived. See the
definition of \*LEXPLIB_TARGETS\*O for how to export libraries. If
\*LEXPLIB_TARGETS\*O is not defined then all libraries listed here will
be exported during the export passes.
...\" 
.LI
\*LPROGRAMS\*O
.P
Defines a list of programs to compile and link. Programs have dependencies
on objects defined in \*LOFILES\*O and headers defined in \*LHFILES\*O, both
described below.
...\" 
.LI
\*LOBJECTS\*O
.P
Defines a list of objects that need to be compiled. Do not use this to build
programs; use it only for special cases where you need to explicitly place
objects into the \*Lobj\*O tree. Some Makefiles that build \*Llibdce.a\*O
or \*Llibdce.so\*O use this variable.
...\" 
.LI
\*LSCRIPTS\*O
.P
This variable defines a list of shell scripts that are to be built. If the
variable is defined, then rules for building files ending in \*L.csh\*O and
\*L.sh\*O are created by including the common makefile \*Losf.script.mk\*O.
In this case, ``building'' means that the following three things happen to all
files specified in \*LSCRIPTS\*O:
...\" 
.BL
.LI
The shell scripts are copied to the \*Lobj\*O tree and are stripped of their
extensions. Note that the elements of the \*LSCRIPTS\*O list must not have a
\*L.sh\*O or \*L.csh\*O extension; however, the corresponding files in the
\*Lsrc\*O tree \*Vmust\*O have one of these extensions. Thus, the correct way
to specify a script to the DCE build is to have in the \*LMakefile\*O something
like the following line:
...\" 
.oS
    SCRIPTS = foo
.oE
...\" 
.P
which will result in \*Lmake\*O looking in the \*Lsrc\*O tree for either \*Lfoo.sh\*O
or \*Lfoo.csh\*O, and then creating a file called \*Lfoo\*O in the \*Lobj\*O tree.
...\" 
...\" 
.LI
All of the execution bits are set on the files created in the \*Lobj\*O tree.
...\" 
...\" 
.LI
The files are processed through \*Lsed\*O to expand all occurrences of
\*L@SOURCEWARNING@\*O into the following string:
...\" 
.oS
    THIS IS NOT A SOURCE FILE - DO NOT EDIT
.oE
...\" 
.P
If the variable \*LSED_OPTIONS\*O is set, its value is passed to \*Lsed\*O as
well. A possible use of the \*LSED_OPTIONS\*O variable is to strip all the
comments out of scripts.
.LE
...\" 
.P
You should use this variable only if the scripts you want to ``build'' require
some processing before being installed. If the script in the \*Lsrc\*O tree is
identical to what should be installed on a system, then use the \*LILIST\*O,
etc. variables described below, and not the \*LSCRIPTS\*O variable. Do not use
\*LSCRIPTS\*O as a convenient name for a variable and then include it in some
other variable list such as \*LDATEFILES\*O or \*LILIST\*O; use it only for its
intended purpose.
...\" 
...\" 
...\" 
.LI
\*LDATAFILES\*O
.P
Defines a list of files that are to be copied from the \*Lsrc\*O tree to the
\*Lobj\*O tree, and keep the same name. Defining them with this variable
creates a rule that \*Lmake\*O can use to check if the file in the \*Lobj\*O
tree is up-to-date. This need only be used for files that must be in the
\*Lobj\*O tree during some later parts of the build (files can go directly
from the \*Lsrc\*O tree to the \*Linstall\*O tree).
.P
An example of the need for this variable is a tool that is compiled (so it is
in the \*Lobj\*O tree which does not have some equivalent of \*Lcpp\*O's
\*L-I\*O switch, so ODE has no way to tell it about search paths in the
\*Lsrc\*O tree. Therefore, to use this tool, the file will have to be
copied to the \*Lobj\*O tree; but what if it is then updated in the \*Lsrc\*O? 
If the file is simply copied, \*Lmake\*O has no way of knowing that the file
has changed. If, however, it is defined with \*LDATAFILES\*O, then \*Lmake\*O
can check if the file is up-to-date.
...\" 
.LI
\*LOTHERS\*O
.P
Defines a list of targets to be built which do not fall into another categories.
These targets are built by \*Lmake\*O but the common makefiles do not have any
rules on how to build \*LOTHERS\*O. To build others, specific make rules will
have to be specified in the \*LMakefiles\*O.
...\" 
.LI
\*LOFILES\*O
.P
Defines a list of object files that comprise a program or library. If there is
only one program described in the Makefile, then just use this variable
name, if there are more than one, then use the syntax \*Vtarget\*L_OFILES\*O,
where \*Vtarget\*O is the name of the program.
...\" 
.LI
\*LHFILES\*O
.P
Defines a list of header files that comprise a program or library. If there is
only one program described in the Makefile, then just use this variable
name; if there are more than one, then use the syntax \*Vtarget\*L_HFILES\*O,
where \*Vtarget\*O is the name of the program or library.
...\" 
...\" .LI
...\" \*LVPATH\*O
...\" .P
...\" 
...\" THIS NEEDS TO BE DOCUMENTED!!!!!!!!!!!!!!!!!!!!
...\" 
...\" 
...\" 
...\" 
.LE
...\" 
...\" 
...\" 
...\" 
...\" ----------------------------------------------------------------------
.H 4 "ODE Variable Conventions"
...\" ----------------------------------------------------------------------
...\" 
.P
ODE has several conventions for its variable naming scheme. The suffix of
a variable name defines the manner in which the variable should be set.
...\" 
.VL 1i
.LI "\*LARGS\*O"
Variables to be set on the command line.
...\" 
.LI "\*LENV\*O"
Variables to be set in the environment
...\" 
.LI "\*LFLAGS\*O"
Variables to be set in Makefiles
...\" 
.LI "\*LDIRS\*O"
Variables to be set in \*Lrc_file\*Os
...\" 
.LE
...\" 
...\" 
...\" ----------------------------------------------------------------------
.H 4 "ODE Flag Variables"
...\" ----------------------------------------------------------------------
...\" 
.P
Following is a list of the variables that ODE uses to determine flags to set
on various command lines. The flags given below should be set in Makefiles.
Those that end with the suffix \*LFLAGS\*O follow the ODE variable naming
conventions described above, and therefore have alternate forms to be set
in different manners.
...\" 
.BL
.LI
\*LCFLAGS\*O (also \*LARGS\*O and \*LENV\*O)
.P
Defines a list of flags to pass to the C Compiler.
...\" 
.LI
\*LINCFLAGS\*O (also \*LARGS\*O, \*LENV\*O and \*LDIRS\*O)
.P
Defines a list of directories to be included in the C compiler invocation line
with the \*L-I\*O switch. Each directory included on this list is used as an
argument to \*Lgenpath\*O so that the equivalent directory in the sandbox and
backing tree (and any intermediary shared sandboxes) are included in the compile
line.
...\" 
.LI
\*LLDFLAGS\*O (also \*LARGS\*O and \*LENV\*O)
.P
Defines a list of flags to pass to the linker.
...\" 
.LI
\*LLIBFLAGS\*O (also \*LARGS\*O, \*LENV\*O and \*LDIRS\*O)
.P
Defines a list of directories to be included in the linker invocation line
with the \*L-L\*O switch. Each directory included on this list is used as
an argument to \*Lgenpath\*O so that the equivalent directory in the sandbox
and backing tree (and any intermediary shared sandboxes) are included in the
link line. Values in this list are of the form:
...\" 
.oS
    -L\*V<path>
.oE
...\" 
.P
where \*V<path>\*O is a relative path to the directory where the library should
be found.
...\" 
...\" 
...\" 
.LI
\*LIDLFLAGS\*O (also \*LARGS\*O and \*LENV\*O)
.P
Defines a list of flags to pass to \*Lidl\*O.
...\" 
.LI
\*LIDLINCFLAGS\*O (also \*LARGS\*O and \*LENV\*O)
.P
Defines a list of directories to be included in the \*Lidl\*O compiler
invocation line with the \*L-I\*O switch. Each directory included on this
list is used as an argument to \*Lgenpath\*O so that the equivalent
directory in the sandbox and backing tree (and any intermediary shared
sandboxes) are included in the compile line. Values in this list are of
the form:
...\" 
.oS
    -I\*V<path>
.oE
...\" 
.P
where \*V<path\*O is a relative path to the directory where the library
should be found.
...\" 
...\" 
...\" 
.LI
\*LLFLAGS\*O (also \*LARGS\*O and \*LENV\*O)
.P
This variable defines a list of flags to pass to \*Llex\*O.
...\" 
.LI
\*LYFLAGS\*O (also \*LARGS\*O and \*LENV\*O)
.P
This variable defines a list of flags to pass to \*Lyacc\*O.
...\" 
.LI
\*LOPT_LEVEL\*O
.P
This variable is meant to define debugging and optimization switches. It is
included in both the compile and link invocation lines. To specify optimization
for only one of these lines use the following variables:
...\" 
.VL 1.5i
.LI "\*LCC_OPT_LEVEL\*O"
Used to specify optimization for only the compiler.
...\" 
.LI "\*LLD_OPT_LEVEL\*O"
Used to specify optimization for only the linker.
.LE
...\" 
...\" 
.LE
...\" 
...\" 
...\" 
...\" ----------------------------------------------------------------------
.H 4 "Variables Used in the install Pass"
...\" ----------------------------------------------------------------------
...\" 
.P
These variables are used by ODE during the install pass to determine various
targets and dependencies. The install pass populates the \*Linstall\*O tree
with targets found in either the \*Lobj\*O tree or the \*Lsrc\*O tree. ODE
will look first in the \*Lobj\*O tree and then in the \*Lsrc\*O tree to find
targets.
...\" 
.BL
.LI
\*LILIST\*O
.P
Defines a list of targets to place in the \*Linstall\*O tree.
...\" 
.LI
\*LTOSTAGE\*O
.P
Defines the base directory to install all target listed in \*LILIST\*O. It is
usually set by the \*Lrc_file\*Os and is set to include \*L${sandbox_base}\*O.
...\" 
.LI
\*LIDIR\*O
.P
Defines the directory (relative to \*LTOSTAGE\*O) in which to install the
targets listed in \*LILIST\*O. Targets are installed in the directory
\*L${TOSTAGE}/${IDIR}\*O. Note that the path assigned to this variable
is terminated with a ``\*L/\*O''.
...\" 
...\" 
.LI
\*LIMODE\*O
.P
Defines the permissions to set on installed targets.
...\" 
.LI
\*LIGROUP\*O
.P
Defines the group to set on installed targets.
...\" 
.LI
\*LIOWNER\*O
.P
Defines the owner to set on installed targets.
...\" 
.LE
...\" 
...\" 
...\" 
...\" 
...\" 
...\" 
...\" ------------------from Rel Notes, Ch. 1.7:----------------------------
...\" 
...\" ----------------------------------------------------------------------
.H 4 "Treatment of Machine Specific Code"
...\" ----------------------------------------------------------------------
...\" 
.P
Most of the code used to control the machine-specific aspects of a DCE build
is isolated in the following four areas of the \*Lsrc\*O tree:
...\" 
.BL
.LI
\*Vdce-root-dir/\*Lsrc/lbe/mk/osf.dce.mk\*O
.P
This common makefile contains machine-specific settings for the compiler
for the entire DCE build.
...\" 
...\" 
.LI
\*Vdce-root-dir\*L/dce/src/Makeconf\*O
.P
This makefile contains machine-specific sections that set values for compiler
type, etc. For more information, see ``The Makeconf File'' below.
...\" 
...\" 
...\" 
...\" 
...\" ------------------from Rel Notes, Ch. 2.3:----------------------------
...\" 
.LI
\*Vdce-root-dir\*L/dce/src/lbe/mk/osf.std.mk\*O
.P
This common makefile contains various machine-specific settings defined for the
following two variables:
...\" 
.BL
.LI
\*VTARGET_MACHINE\*L_VA_ARGV\*O
...\" 
.LI
\*VTARGET_MACHINE\*L_CHAR_EXTEND\*O
...\" 
.LE
...\" 
.P
This file must contain entries for the platform you are building on. If such
entries do not already exist, you must create them.
...\" 
...\" ---------------------...from Rel Notes, Ch. 2.3-----------------------
...\" 
...\" 
.LI
\*Vdce-root-dir/\*Lsrc/\*Vcomponent/component\*L.mk\*O
.P
Contains machine-specific variable settings for entire subtrees and subdirectories
of a particular DCE component.
...\" 
.LI
\*Vdce-root-dir/\*Lsrc/\*Vpath_to_directory/TARGET_MACHINE\*O
.P
Contains source files and makefiles needed to build the targets of the parent
directory for \*VTARGET_MACHINE\*O. Any special \*Lmake\*O rules required to build source
files in this directory are contained in:
...\" 
.DS
    \*Vdce-root-dir/\*Lsrc/\*Vpath_to_directory/TARGET_MACHINE/\*Lmachdep.mk\*O
.DE
...\" 
.P
For example, the directory
...\" 
.DS
    \*Vdce-root-dir\*L/dce/src/threads/HP800\*O
.DE
.P
contains the HP 9000 Series 700-specific files (including a \*Lmachdep.mk\*O file)
needed to build the DCE Threads component.
.LE
...\" 
...\" 
.P
The value of \*VTARGET_MACHINE\*O is used to specify a set of subdirectories in the
DCE source which contain code specific to building DCE on a given machine or platform,
and to control makefile parsing and variable assignments. Part of the task of porting
DCE to a new platform will involve creating a parallel set of subdirectories containing
the platform-specific source files for the new platform; the name chosen for the
subdirectories will specify the platform for the build. Further information about
platform-specific aspects of the DCE build can be found later in this chapter and in
Chapter 4 of the \*VOSF DCE Release Notes\*O.
.P
Note that the \*LTARGET_MACHINE\*O for the build must be defined in:
...\" 
.DS
    \*Vdce-root-dir\*L/rc_files/shared\*O
.DE
...\" 
.P
Based on the current contents of the DCE 1.1 source, \*VTARGET_MACHINE\*O can have
the following values:
...\" 
...\" 
...\" 
...\" 
.VL 1.5i
.LI "\*VTARGET_MACHINE\*O"
\*VHardware and OS Platform\*O
...\" 
.LI "\*LMIPS\*O"
DECstation 3100 running Ultrix
...\" 
...\" 
.LI "\*LPMAX\*O"
DECstation 3100 running OSF/1
...\" 
...\" 
.LI "\*LRIOS\*O"
RISC System/6000 running AIX 3.2
...\" 
...\" 
.LI "\*LMMAX\*O"
Multimax running OSF/1
...\" 
...\" 
.LI "\*LAT386\*O"
DECpc 450ST (an Intel 486-based machine) running OSF/1
...\" 
...\" 
.LI "\*LAPOLLO68K\*O"
Motorola 68000 running DomainOS
...\" 
...\" 
.LI "\*LHP_PA\*O"
HP PA/RISC running OSF/1
...\" 
...\" 
.LI "\*LHP300\*O"
Motorola 68000 running HPUX
...\" 
...\" 
.LI "\*LHP800\*O"
HP 9000 Series 700 running HP/UX
...\" HP RISC running HPUX
...\" 
...\" 
...\" 
...\" 
...\" 
...\" 
...\" 
...\" .zA "enh,5724,R1.0.2,add SVR4 info"
...\" 
.LI "\*LSVR4\*O"
MX300i running SINIX (but see below)
.P
The specific variation of SVR4 is indicated by the value of
\*LTARGET_OS_PLATFORM\*O, which should be used in conjunction with
\*LTARGET_MACHINE\*O when the latter is set to \*LSVR4\*O.
For example, the settings for the DCE SVR4 reference port are:
...\" 
.VL 2.5i
...\" 
.LI "\*VVariable\*O
\*VSetting\*O
...\" 
.LI ""
...\" 
.LI "\*LTARGET_MACHINE\*O"
\*LSVR4\*O
...\" 
.LI "\*LTARGET_OS_PLATFORM\*O"
\*LSINIX\*O
...\" 
.LE
...\" 
.P
Note that \*LTARGET_MACHINE\*O must be defined in the environment (in an
\*Lrc_file\*O), whereas a \*LMakefile\*O can contain the definition of
\*LTARGET_OS_PLATFORM\*O.
...\" 
...\" 
...\" 
...\" .zZ "enh,5724,R1.0.2,add SVR4 info"
...\" 
...\" 
...\" 
...\" 
.LE
...\" 
...\" ---------------------...from Rel Notes, Ch. 1.7-----------------------
...\" 
...\" 
...\" 
...\" 
...\" ----------------------------------------------------------------------
.H 4 "Build-Wide Conditional Compilation Variables"
...\" ----------------------------------------------------------------------
...\" 
.P
There are a number of variables whose values affect the entire DCE build. These
build-wide conditional compilation variables are assigned values in the file:
.DS
    \*Vdce-root-dir\*L/dce/src/Makeconf\*O
.DE
...\" 
.P
A list of the DCE-wide build variables used in \*LMakeconf\*O will be found in
the section on \*LMakeconf\*O below. For lists and descriptions of conditional
compilation flags in DCE which have an inter-component effect, refer to the
``Global Flags'' sections in the separate component chapters earlier in this
guide.
...\" 
...\" 
...\" 
...\" 
...\" .zA "enh,5724,R1.0.2,add SVR4 info"
...\" 
...\" ----------------------------------------------------------------------
.H 4 "SVR4 Conditional Compilation Variables"
...\" ----------------------------------------------------------------------
...\" 
.P
The DCE build environment defines SVR4-specific conditional compilation
variables that you can apply to the build-wide compilation of all the DCE
components. These variables control the conditional inclusion of DCE code
changes that are required for the SVR4 environment. They are:
...\" 
...\" 
.VL .5i
...\" 
...\" 
.LI
\*LSNI_SVR4_POSIX\*O
.P
Substitutes the POSIX call equivalents for the BSD calls listed in Tables 1-1
and 1-2 in Chapter 1 of this guide. This value is assigned to the \*Lmake\*O
variable \*LPOSIX_FLAGS\*O in:
...\" 
.DS
    \*Vdce-root-dir\*L/dce/src/lbe/mk/svr4.mk\*O
.DE
...\" 
...\" 
.LI
\*LSNI_SVR4\*O
.P
Includes the SVR4 operating system-related changes to DCE. The \*Lmake\*O
variable \*LTARGET_FLAGS\*O in
...\" 
.DS
    \*Vdce-root-dir\*L/dce/src/lbe/mk/svr4.mk\*O
.DE
...\" 
.P
sets this conditional compilation variable.
...\" 
...\" 
.LI
\*LSNI_PROPRIETARY\*O
.P
Includes the code added to DCE that is proprietary to Siemens Nixdorf Information
Systems, Inc. (SNI). This code is not part of the OSF DCE source code offering, so
setting this variable has no effect. The \*Lmake\*O variable \*LTARGET_FLAGS\*O in
...\" 
.DS
    \*Vdce-root-dir\*L/dce/src/lbe/mk/svr4.mk\*O
.DE
...\" 
.P
sets this conditional compilation variable. 
...\" 
...\" 
.LI
\*LSNI_SVR4_TAINTED\*O
.P
Includes proprietary SVR4 code added to DCE. This code is not part
...\" 
...\"  that is, proprietary to USL
...\" 
of the OSF DCE source code offering, so setting this variable has no effect (for more
information on this code, see Chapter 1). The \*Lmake\*O variable \*LTARGET_FLAGS\*O
in
...\" 
.DS
    \*Vdce-root-dir\*L/dce/src/lbe/mk/svr4.mk\*O
.DE
...\" 
.P
sets this conditional compilation variable.
...\" 
...\" 
.LI
\*L__STDC_ZERO_OK__\*O
.P
Permits the inclusion of ANSI C code in the SVR4 environment. This value is assigned
to the \*Lmake\*O variable \*LSTDC_FLAG\*O in:
...\" 
.DS
    \*Vdce-root-dir\*L/dce/src/lbe/mk/svr4.mk\*O
.DE
...\" 
...\" 
.LE
...\" 
...\" 
...\" .zZ "enh,5724,R1.0.2,add SVR4 info"
...\" 
...\" 
...\" 
...\" 
...\" ----------------------------------------------------------------------
.H 4 "The Makeconf File"
...\" ----------------------------------------------------------------------
...\" 
.P
The
.DS
    \*Vdce-root-dir\*L/dce/src/Makeconf\*O
.DE
.P
file contains platform specific definitions that control the DCE build process.
This file must be ported to your platform before you begin to build DCE.
...\" 
...\" 
...\" ------------------from Rel Notes, Ch. 2.3:----------------------------
...\" 
...\" 
...\" ----------------------------------------------------------------------
.H 5 "The ARCHIVE_FORMAT Variable"
...\" ----------------------------------------------------------------------
...\" 
.P
While it is necessary to understand the use of all of the variables described
in the discussion of the ODE porting strategy in Appendix A of the
\*VODE System Administrator's Guide\*O, it is particularly important that you
understand how to use the \*LARCHIVE_FORMAT\*O variable, which is defined in the
\*LMakeconf\*O file.
...\" 
...\" 
.P
The value of this variable is used to construct a pathname to the code appropriate
for searching and accessing libraries on different platforms. This code resides in
a file named:
...\" 
.DS
    \*Vdce-root-dir\*L/dce/src/lbe/bin/make/\*VYOUR_ARCHIVE_FORMAT\*L/arch_fmtdep.c\*O
.DE
...\" 
...\" 
.P
Currently supported values for \*VYOUR_ARCHIVE_FORMAT\*O are as follows.
.VL 1i
.LI "\*LAIXARCH\*O"
This value must be used if you are building DCE on an AIX platform.
...\" 
...\" 
...\" 
.LI "\*LOSF1ARCH\*O"
Use of this value assumes that names of library members are terminated by
a slash (/).
...\" 
...\" 
...\" 
.LI "\*LBSDARCH\*O"
Use of this value assumes that library members have 16-character names.
.LE
.P
If your platform does not obviously fall into one of these three categories,
you should inspect the code in the three different versions of \*Larch_fmtdep.c\*O
to determine which version assumes the library structure most similar to yours.
Copy this version into a directory, which you create, called:
.DS
    \*Vdce-root-dir\*L/dce/src/lbe/bin/make/\*VYOUR_ARCHIVE_FORMAT\*O
.DE
.P
and make whatever alterations are necessary in the code itself. Then set
\*LARCHIVE_FORMAT\*O in \*Vos\*L.sh\*O to the value of \*VYOUR_ARCHIVE_FORMAT\*O.
...\" 
...\" 
...\" 
...\" 
...\"
.P
For a more complete description of how to port \*Larch_fmtdep.c\*O, and for
information on other porting issues for \*Lmake\*O, see (in the \*VOSF Development
Environment System Administrator's Guide\*O) the appendix on ``Porting \*Lmake\*O''.
...\" 
...\" ---------------------...from Rel Notes, Ch. 2.3-----------------------
...\" 
...\" 
...\" 
...\" 
...\" ----------------------------------------------------------------------
.H 5 "Other Variables in Makeconf"
...\" ----------------------------------------------------------------------
...\" 
.P
\*LMakeconf\*O also contains definitions for the following DCE-wide build
variables:
...\" 
.BL
.LI
\*LNO_SHARED_LIBRARIES\*O
.P
Controls whether shared or static libraries are built. If defined, static libraries
will not be built.
...\" 
...\" 
.LI
\*LNO_KRPC\*O
.P
Controls whether in-kernel RPC should be built or not.
If defined, kernel RPC will not be built.
...\" 
.LI
\*LNO_THREADS\*O
.P
Controls whether or not to build DCE Threads.
If defined, DCE Threads will not be built.
...\" 
.LI
\*LNO_GDS\*O
.P
Controls whether or not to build GDS. If defined, GDS will not be built.
...\" 
.LI
\*LNO_DFS\*O
.P
Controls whether or not to build DFS. If defined, DFS will not be built. See
also Chapter 9 of this guide.
.zA "enh, 10306, R1.1, remove diskless documentation"
.zZ "enh, 10306, R1.1, remove diskless documentation"
...\" 
.LI
\*LUSE_DES\*O
.P
Controls whether DES should be used for Security encryption.
If defined, the build will attempt to use DES code.
...\" 
...\" .LI
...\" \*LNO_COMPAT_NCS15\*O
...\" .P
...\" Controls NCS 1.5 compatibility, archive format, object format, etc.
...\" If defined, RPC will not be built with NCS1.5 compatibility code.
...\" 
.LE
...\" 
...\" 
...\" 
.P
The definitions for already existing platforms which \*LMakeconf\*O contains
can be used as examples for constructing new definitions for the platform you are
porting to. The file is extensively commented in order to facilitate porting work.
For specific information on how to make modifications, see the comments at the top
of the file.
...\" 
...\" 
...\" ----------------------------------------------------------------------
.H 3 "Other ODE Topics"
...\" ----------------------------------------------------------------------
...\" 
.P
The following sections contain information on miscellaneous aspects of ODE.
This information is supplementary to that found in the ODE documentation
itself (see ``Other ODE Documentation'' earlier in this chapter).
...\" 
...\" 
...\" 
...\" .zA "def,9323,R1.0.3,updated for ODE 2.3"
...\" 
...\" ----------------------------------------------------------------------
.H 4 "How ODE RC Files Work"
...\" ----------------------------------------------------------------------
...\" 
...\" 
...\" FOLLOWING IS ODE 2.3 UPDATE:
...\" .P
...\" The \*LBuildconf\*O and \*LBuildconf.exp\*O files essentially do two things:
...\" they provide information to ODE tools (e.g., \*Lworkon\*O) on what values to
...\" set environment variables to, and they serve as a source of information about
...\" other variables which are not set in the shell but which are used by ODE and
...\" the BCS tools.
...\" 
.P
The \*LBuildconf\*O and \*LBuildconf.exp\*O files serve similar purposes.
For a build that is not backed by other builds, only the \*LBuildconf\*O
file is used. The \*LBuildconf.exp\*O file is not evaluated.
.P
When the \*LBuildconf\*O file is evaluated, the \*Lsandbox_base\*O variable's
value is set to the full path to the build that the user is working in. For
example, at OSF, the \*Lode2.3\*O build is located at:
...\" 
.DS
    \*L/project/ode/build\*O
.DE
...\" 
.P
The full path to the build, which will be the value of \*Lsandbox_base\*O when
\*LBuildconf\*O is evaluated, is thus:
...\" 
.DS
    \*L/project/ode/build/ode2.3\*O
.DE
...\" 
.P
\(emwhich is the same as if the \*LBuildconf\*O file contained the following line:
...\" 
.oS
    replace sandbox_base /project/ode/build/ode2.3
.oE
...\" 
.P
Most variables set in the build environment are simple strings that do not
refer to multiple builds. All of these variables are set in \*LBuildconf\*O.
For example, here are a few simple variable settings:
...\" 
.oS
    replace setenv RULES_MK osf.rules.mk
    replace setenv MAKESYSPATH ${source_base}/ode/mk
.oE
...\" 
.P
The \*LBuildconf.exp\*O file is the ``expansion'' file for \*LBuildconf\*O.
It is used to expand the values of certain variables. When the build that a
user is building in is backed by other builds, the \*LBuildconf\*O file is
evaluated first, and then the \*LBuildconf.exp\*O file is evaluated once for
each build in the backing chain, including the build that the user is building
in.
.P
In this case the value of \*Lsandbox_base\*O is set a little differently.
\*Lsandbox_base\*O is first set to the path for the last build in the backing
chain and \*LBuildconf\*O is evaluated. \*Lsandbox_base\*O is then set to
each build in the chain starting with the last and ending with the build that
the user is in. \*LBuildconf.exp\*O is evaluated once for each value of
\*Lsandbox_base\*O.
.P
Suppose that you are in the
...\" 
.DS
    \*L/usr/users/\*Lyour_name\*L/sb/ode\*O
...\" 
...\"     \*L/usr/users/suzieq/sb/ode\*O
...\" 
.DE
...\" 
.P
sandbox, which is backed by:
...\" 
.DS
    \*Vyour_project\*L/ode/build/ode2.3\*O
...\" 
...\"     \*L/project/ode/build/ode2.3\*O
...\" 
.DE
...\" 
.P
For the value of \*LMAKESYSPATH\*O, \*LBuildconf\*O would have:
...\" 
.oS
    replace setenv MAKESYSPATH ${source_base}/ode/mk
.oE
...\" 
.P
and \*LBuildconf.exp\*O would have:
...\" 
.oS
    replace setenv MAKESYSPATH ${source_base}/ode/mk:${MAKESYSPATH}
.oE
...\" 
.P
\(emwhich would result in \*LMAKESYSPATH\*O having a value of:
...\" 
.DS
    \*L/usr/users/\*Vyour_name\*L/sb/ode/src/ode/mk:/\*Vyour_project\*L/ode/build/ode2.3/src/ode/mk\*O
.DE
...\" 
...\" 
...\" ...END OF ODE 2.3 UPDATE.
...\" 
...\" 
...\" .zZ "def,9323,R1.0.3,updated for ODE 2.3"
...\" 
...\" .P
...\" RC files essentially do two things: they provide information to ODE tools
...\" (e.g., \*Lworkon\*O) on what values to set environment variables to, and
...\" they serve as a source of information about other variables which are not
...\" set in the shell but which are used by ODE and the BCS tools.
...\" .P
...\" If you look in your sandbox's RC files (located in the \*Lrc_files\*O
...\" directory, at the same level as the \*Lsrc\*O, \*Lobj\*O, \*Lexport\*O,
...\" etc. directories) you will notice that the \*Llocal\*O file includes the
...\" \*Lrc_files/shared\*O file. The \*Lshared\*O file in turn includes the
...\" \*Lshared\*O file of the sandbox which backs your personal sandbox.
...\" And this \*Lshared\*O file for your ``backing sandbox'' includes the
...\" \*Lshared\*O file from the backing build itself. In other words, the
...\" contents of these RC files are in effect concatenated together in the
...\" following sequence:
...\" 
...\" 
...\" .AL
...\" .LI
...\" backing build \*Lshared\*O file
...\" .LI
...\" shared sandbox \*Lshared\*O file
...\" .LI
...\" personal sandbox \*Lshared\*O file
...\" .LI
...\" personal sandbox \*Llocal\*O file, \*Vor\*O personal sandbox \*Vcomponent\*L.rc\*O
...\" file for that component.
...\" .P
...\" Note that if your sandbox supports split backing trees, the \*Vcomponent\*L.rc\*O
...\" file replaces your \*Lrc_files/local\*O file. In other words, the \*Llocal\*O file
...\" is used only if you do \*Vnot\*O have split backing trees.
...\" .LE
...\" 
...\" 
.P
Thus the RC files are really a single stream of variable-setting instructions
to a \*Lworkon\*O session. It is important to remember this, because the order
in which the instructions are evaluated by ODE affects what values variables end
up with. This will become clearer below, in the description of the various
instructions found in RC files.
.P
The RC files contain four different basic types of instruction:
...\" 
.BL
...\" 
.LI
\*Lon \*Vmachine_type \*Lsetenv \*Vvariable value\*O
...\" 
.LI
\*Lon \*Vmachine_type \*Lreplace setenv \*Vvariable value\*O
.P
(Or: \*Lreplace on \*Vmachine_type \*Lsetenv \*Vvariable value\*O)
...\" 
.LI
\*Lon \*Vmachine_type directive value\*O
...\" 
.LI
\*Lon \*Vmachine_type \*Lreplace \*Vdirective value\*O
.P
(Or: \*Lreplace on \*Vmachine_type  \*Vdirective value\*O)
...\" 
.LE
...\" 
...\" Note that either "on machine_type replace" or "replace on machine_type"
...\"  can occur; they are interchangeable.
...\" 
...\" 
.P
and two types of variables:
...\" 
.BL
.LI
environment variables which \*Vmay or may not\*O be exported to the shell
environment
.LI
``directives'', which are items used by the ODE and BCS tools; these are
never exported to the shell
.LE
...\" 
...\" 
.P
By convention, variables in uppercase are environment variables, and
variables in lowercase are usually directives. \*LMAKESYSPATH\*O is
thus an environment variable, while \*Lbuild_makeflags\*O is (probably)
a directive. (You can view the values of the environment variables and
directives for your ODE \*Lworkon\*O session by typing \*Lsbinfo\*O.
Note that some of the values you will see reported for environment
variables by \*Lsbinfo\*O may not match the values for the same
variables reported by the \*Lprintenv\*O command.)
.P
The instructions all have the following general meaning for the first
(\*Lon \*Vmachine_type\*O) part: on a machine of the specified type, perform
the action that follows (the \*Vmachine_type\*O value will have been
compiled into the ODE tools for that architecture). The variations in
the second part of the instruction have the following different meanings:
...\" 
.BL
.LI
The \*Lsetenv\*O instruction is similar to the shell \*Lsetenv\*O
command. Only in some cases, however, is a shell environment variable
actually changed by this instruction. The general processing rule for
\*Lsetenv\*O is: if the variable is already set in the shell environment,
preserve that value and ignore all other \*Lsetenv\*O references to
the variable. If the variable is not set in the shell, use the
first \*Lsetenv\*O value that appears, and ignore any subsequent
\*Lsetenv\*Os that are encountered.
.P
Specifying \*Lsetenv\*O will cause a variable to be set in the environment
when a \*Lworkon\*O is done. Without the \*Lsetenv\*O the variable will only
be set to the specified value (and used) by the tools (\*Lbuild\*O, \*Lsbinfo\*O,
and so on).
...\" 
...\" The location of the "on <machine>" statsment seems arbitrary
...\" (either at the beginning or after the replace), I wonder if
...\" there is any ordering checked for the other commands
...\" (replace, setenv)
...\" 
...\" 
...\" 
.LI
A \*Lreplace setenv\*O instruction resets the value of the specified
variable regardless of the variable's previous history.
...\" 
.LI
The \*Vdirective value\*O instruction assigns the specified value to
the \*Vdirective\*O variable according to the same rules as \*Lsetenv\*O
uses for environment variables.
...\" 
.LI
The \*Lreplace \*Vdirective\*O instruction resets the value of the specified
\*Vdirective\*O regardless of \*Vdirective\*O's previous history.
...\" 
.LE
...\" 
...\" 
...\" 
...\" 
...\" 
...\" ----------------------------------------------------------------------
.H 4 "Using a Local Set of Tools in ODE"
...\" ----------------------------------------------------------------------
...\" 
.P
If you want to use an entirely local set of tools in ODE, set the value of
the \*LMACHO_GCC_EXEC_PREFIX\*O environment variable to be the path (including
a trailing \*L/\*O) where your local tools reside. If you want to change only
one (or more) of the compiler tools you can do that by means of separate
assignments such as (in the case of \*Lgld\*O) the following:
...\" 
.iS
    ANSI_LD=/\*Vyour_path_to_a_tool\*L/gld
.iE
...\" 
.P
The non \*Lgcc\*O tools (such as \*Lidl\*O, \*Lmavros\*O, and so on) are
located by ODE by means of the following definitions in \*Losf.dce.mk\*O:
...\" 
.oS
    COMPILE_ET?=${DEFTOOLBASE}compile_et
    IDL?=${DEFTOOLBASE}idl
    MAVROS?=${DEFTOOLBASE}mavros
    MAVCOD?=${DEFTOOLBASE}mavcod
    MSG?=${DEFTOOLBASE}msg
    PRS?=${DEFTOOLBASE}prs
.oE
...\" 
.P
You thus have two options when you want to use other versions of these tools.
.P
If you want to use a completely different set of tools, you simply set the value of
\*LDEFTOOLBASE\*O to be the location of the new set of tools. This can be done on
the \*Lmake\*O or \*Lbuild\*O command line, in the shell environment, or in your
sandbox's \*Lrc_files/local\*O file. You can set \*LDEFTOOLBASE\*O to null if you
want the path to the tools to be searched for by the ODE tools.
.P
If you want to use a different version of only one or a subset of the entire set
of these tools, you can redefine the value of the \*LTOOLNAME\*O variable for the
tool or tools that you want the different version(s) of.
.P
For example: 
.iS
    build IDL=/tmp/myidl foo.h
.iE
...\" 
.P
Would override the global default for \*LIDL\*O only, while
.iS
    build DEFTOOLBASE=/tmp/ foo.h
.iE
...\" 
.P
would tell ODE to find all the above tools in \*L/tmp\*O.
...\" 
...\" 
...\" 
...\" 
...\" ----------------------------------------------------------------------
.H 2 "Building the DCE Library"
...\" ----------------------------------------------------------------------
...\" 
...\" 
.P
This section describes the DCE library, \*Llibdce\*O, and the three methods of
building \*Llibdce\*O that are supported by the \*LMakefile\*Os in the \*Lsrc\*O
tree:
...\" 
.BL
.LI
As a static library
.LI
As a shared library (``loader-centric'' build)
.LI
As a shared library (``compiler-centric'' build)
.LE
...\" 
.P
This section also describes the \*LMakefile\*O changes necessary for adding
new components to \*Llibdce\*O. You should determine which of these building
methods best fits your system and base your port on that method, as indicated
below.
...\" 
...\" 
...\" 
...\" 
...\" 
...\" 
...\" ----------------------------------------------------------------------
.H 3 "Overview"
...\" ----------------------------------------------------------------------
...\" 
.P
The DCE library contains the executable code for most of the interfaces and
utilities in the DCE system. It is a collection of all the libraries for the
separate DCE components, each of which libraries defines the interface for a
single component.
.P
Although the DCE library is thus built from source code drawn from different
directories in the DCE source tree, the design of its \*LMakefile\*O and the
\*LMakefiles\*O for the component libraries allows it to be built in the same
way as any other library: Whenever \*Llibdce\*O is rebuilt, only those pieces
of \*Llibdce\*O whose sources have changed since the last \*Llibdce\*O build
will actually be rebuilt and re-archived. This general similarity between
building \*Llibdce\*O and building other libraries is also true when other
build targets (such as \*Lclobber_all\*O) are specified.
...\" 
...\" 
...\" 
...\" 
...\" ----------------------------------------------------------------------
.H 4 "Purpose of the DCE Library"
...\" ----------------------------------------------------------------------
...\" 
.P
Combining all of the DCE components' library code into a single \*Llibdce\*O
is a convenient way to solve a number of problems that can arise in a system
in which each component API is represented by its own library. Some advantages
in having a single \*Llibdce\*O are: reduction of namespace crowding;
replacement of complex sequences of library specifications on link lines
(which would otherwise be made necessary by the interdependence of the components)
by the single specification of \*Llibdce\*O; and most important, the fact that
new users do not have to determine which specific component libraries to link
to their applications in order to access desired DCE functions.
...\" 
...\" 
...\" 
...\" 
...\" 
...\" ----------------------------------------------------------------------
.H 4 "Library Contents of libdce"
...\" ----------------------------------------------------------------------
...\" 
.P
The component libraries that make up \*Llibdce\*O are as follows:
...\" 
.VL 1.5i
.LI "\*VName\*O"
\*VLibrary\*O
...\" 
.LI "\*Llibcma.a\*O"
DCE Threads library.
...\" 
.LI "\*Llibdce_conf.a\*O"
DCE configuration library (the \*Ldce_cf_...(\|)\*O routines).
...\" 
.LI "\*Llibnck.a\*O"
DCE RPC runtime library.
...\" 
.LI "\*Llibidl.a\*O"
DCE RPC IDL runtime library.
...\" 
.LI "\*Llibcds.a\*O"
DCE CDS library.
...\" 
.LI "\*Llibsec.a\*O"
DCE Security library.
...\" 
.LI "\*Llibutc.a\*O"
DCE DTS library.
...\" 
.P
Built in kernel (\*Llibutc-kernel.a\*O) or user (\*Llibutc-user.a\*O) mode,
depending on which mode is selected in:
...\" 
.DS
    \*Vdce-root-dir\*L/dce/src/time/time.mk\*O
.DE
...\" 
.P
(See Chapter 8 for details.)
...\" 
...\" 
.LI "\*Llibasn1_r.a\*O"
DCE GDS re-entrant ASN.1 library for use by DCE Security.
...\" 
...\" 
.LI "\*Llibslog.a\*O"
DCE GDS ROS library     
...\" 
...\" 
.LI "\*Llibdua.a\*O"
DCE GDS DUA library.
...\" 
.LI "\*LlibXDS.a\*O"
DCE XDS library.
...\" 
.LI "\*Llibxom.a\*O"
DCE XOM library.
...\" 
.LI "\*Llibkrb5.a\*O"
DCE Security Kerberos library.
...\" 
.LI "\*Llibshth.a\*O"
...\" \*Vdce-root-dir\*L/dce/src/directory/gds/ros/shth/libshth.a\*O
DCE GDS ROS support library
...\" 
...\" 
.LE
...\" 
...\" 
...\" 
...\" 
...\" ----------------------------------------------------------------------
.H 4 "The Build Model for libdce"
...\" ----------------------------------------------------------------------
...\" 
.P
A simple and obvious way to build \*Llibdce\*O would be first to build each
of the component libraries, then unarchive each of the component libraries,
and finally archive each one's objects into \*Llibdce\*O.
.P
Unfortunately, this approach will fail on systems that impose a 15-character
limit on the length of library archive member names, since the filenames will
be truncated during the archiving of the component libraries. Thus an
alternative method has been developed for building the DCE library.
.P
The model for building \*Llibdce\*O is to:
...\" 
.VL 1i
...\" 
.LI "Pass 1:"
Read all the \*LMakefile\*Os that build some component library in order to get
a list of all the \*L.o\*O files that make up \*Llibdce\*O
...\" 
.LI "Pass 2:"
Build or rebuild any out-of-date files, adding any such files to \*Llibdce\*O
...\" 
.LE
...\" 
.P
The sequence of events that implements this model is described in detail in
the next section.
...\" 
...\" 
...\" ----------------------------------------------------------------------
.H 4 "What Happens When ``make'' is Run in the libdce Directory"
...\" ----------------------------------------------------------------------
...\" 
.P
This section describes how the \*LMakefile\*O in \*Lsrc/libdce\*O builds
\*Llibdce\*O from source files in directories all over the source tree, and
the changes to component \*L.mk\*O files and directory \*LMakefile\*Os
necessary for adding things to \*Llibdce\*O.
...\"
...\"
...\" ----------------------------------------------------------------------
.sp 2
.in -0.25i
\s+1\*LPass 1\*O\s-1
.in +0.25i
.sp 1
...\" ----------------------------------------------------------------------
...\"
.P
The \*Llibdce Makefile\*O sets the variable \*LLIBDCE_CURR_INCDIR\*O to the
path from the root of the source tree (i.e., \*Lsrc\*O) to the directory in
which a component library is built. It then includes the component \*L.mk\*O
files (e.g., \*Lrpc.mk\*O) for the component tree in which the library is
built. The per-component \*L.mk\*O files may contain platform-specific
additions to the list of object files (\*L.o\*O files) for the component
library.
...\" 
...\"
...\"
.P
The \*Llibdce Makefile\*O then includes the \*LMakefile\*O for each of the
component libraries and, via conditional parsing, reads only the value of the
variable \*Vlibname\*L_OFILES\*O (where \*Vlibname\*O is the name of the
library minus the \*L.a\*O or \*L.so\*O suffix) which the \*Llibdce Makefile\*O
assumes is defined at the top of the file. This variable defines the list of
\*LOFILES\*O for each library. The relative path to each \*L.o\*O file for
a library is prepended with the relative path to the directory in which the
library is built; this prevents naming collisions when archiving, and also gives
\*Lmake\*O the correct path to use when checking the date on the \*L.o\*O
file (see ``Changes to \*LMakefile\*Os'' below).
...\" 
...\" 
...\" ----------------------------------------------------------------------
.sp 2
.in -0.25i
\s+1\*LPass 2\*O\s-1
.in +0.25i
.sp 1
...\" ----------------------------------------------------------------------
...\"
.P
After setting up the list of files that comprise \*Llibdce\*O, the \*Llibdce
Makefile\*O causes \*Lmake\*O to visit each of the directories in which a
component library is built, rebuilding any \*L.o\*O files that are out of
date. If static libraries are being built, or if shared libraries are being
built with the loader-centric method, the component library is built as well.
.P
During this second pass through the \*LMakefile\*O for each component library,
the entire \*LMakefile\*O is read, and conditional parsing is used to determine
whether a static component library or shared objects should be built.
.P
After all of the component library directories have been visited, \*Lmake\*O
checks the date of all of the \*L.o\*O files that make up \*Llibdce\*O
against the date of \*Llibdce\*O, and archives any that are newer.
...\" 
...\" 
...\" 
...\" ----------------------------------------------------------------------
.H 3 "Changing the Makefiles to Build New Objects"
...\" ----------------------------------------------------------------------
...\" 
.P
In order for \*L.o\*O files from some directories in the source tree
to be built into \*Llibdce\*O, it is necessary to modify at least two, and as
many as four, \*LMakefile\*Os. These changes add code to the \*Llibdce\*O
\*LMakefile\*O so that the \*L.o\*O files from the directory are included
in \*Llibdce\*O, make sure that platform-specific \*L.o\*O files are included
in \*Llibdce\*O, provide support for the various shared library models, and guard
the \*Llibdce\*O build environment against pollution by variables that are
specific to a component. To add the \*L.o\*O files from a directory to
\*Llibdce\*O, it is necessary to at least modify the \*Llibdce\*O \*LMakefile\*O
and the \*LMakefile\*O in the directory. It may also be necessary to modify
a component \*L.mk\*O file and a \*Lmachdep.mk\*O file.
.P
This section describes the changes that must be made to each file, and how to
determine which files must be changed. Though this information is presented
in the context of adding to \*Llibdce\*O, it is also valuable to those who
wish to gain a better understanding of the implementation of the \*Llibdce\*O
build model.
...\" 
...\" 
...\" ----------------------------------------------------------------------
.H 4 "Changes to libdce"
...\" ----------------------------------------------------------------------
...\" 
.P
In order to add to \*Llibdce\*O the \*L.o\*O files from some directory where
a library is built, you must add the following to \*Llibdce/Makefile\*O:
...\" 
.BL
.LI
A stanza that sets \*LLIBDCE_CURR_INCDIR\*O, includes the component and
directory \*LMakefile\*Os for the library, and then sets the value of the
variable
...\" 
.DS
    \*LEXP_\*Vlibname\*L_OFILES\*O
.DE
...\" 
.P
to the expanded list of \*L.o\*O files that make up the library to be added to
\*Llibdce\*O.
.LI
A line that adds the relative path from the \*Llibdce\*O directory
to the directory where the \*L.o\*O files you want to add to \*Llibdce\*O
are built, to the definition of the \*LSLIST\*O variable.
.LI
A line that prepends the relative path from the \*Llibdce\*O directory
to the directory where the \*L.o\*O files are built to each \*L.o\*O
filename in the
...\" 
.DS
    \*LEXP_\*Vlibname\*L_OFILES\*O
.DE
...\" 
.P
list, and adds the result to one of the \*Llibdce_x.a\*O lists.
.LE
...\" 
.P
Note that each of these additions can be made easily by copying some of the
existing lines for another directory and library and making appropriate
changes to the directory and library names.
...\" 
...\" 
...\" ----------------------------------------------------------------------
.H 4 "Changes to Component .mk Files"
...\" ----------------------------------------------------------------------
...\" 
.P
Each of the per-component \*L.mk\*O files (e.g., \*Lrpc.mk\*O) for components
that are to be added to \*Llibdce\*O must be coded in such a way that they can
be read multiple times when they are included by the \*Llibdce\*O \*LMakefile\*O.
In addition, if there are any \*L.o\*O files that are built into the library
that is to be added to \*Llibdce\*O depending on the platform, then a conditional
of the form
...\" 
.iS
    .if ${MAKESUB}=="\*Vpath-to-dir\*L/" || 
      (defined(LIBDCE_LIBRARY_MAKEFILE) && ${LIBDCE_CURR_INCDIR} == "\*Vpath-to-dir\*L/")
.iE
...\" 
.P
(where \*Vpath-to-dir\*O is the path from the \*Lsrc\*O directory to the
directory where the library to be added to \*Llibdce\*O is built (with a
trailing slash)) must be added to the file. This conditional must surround
a definition or definitions of the form:
...\" 
.iS
    \*VTARGET_MACHINE\*L_\*Vlibname\*L_OFILES = \*Vofiles_list\*O
.iE
...\" 
.P
that define(s) the platform-specific \*L.o\*O file list for each platform for
the library to be added.
...\" 
...\" 
...\" ----------------------------------------------------------------------
.H 4 "Changes to Directory Makefiles"
...\" ----------------------------------------------------------------------
...\" 
.P
The following changes must be made to the \*LMakefile\*O that builds the
library to be added to \*Llibdce\*O:
...\" 
.BL
.LI
The definition of \*Vlibname\*L_OFILES\*O must be located at the top of the
\*LMakefile\*O. This definition is then usually followed by the definition:
...\" 
.DS
    \*Vlibname\*L.a_OFILES={\*Vlibname\*L_OFILES}\*O
.DE
...\" 
.P
If different \*L.o\*O files are to be built into the library depending on the
build platform, then the \*Vlibname\*L_OFILES\*O list must contain the following
variable:
...\" 
.DS
    \*L${TARGET_MACHINE}_\*Vlibname\*L_OFILES\*O
.DE
...\" 
.P
This variable must be defined either in a per-component \*L.mk\*O file, as
decribed above, or in a
...\" 
.DS
    \*Vdce-root-dir/\*Ldce/src/\*Vpath_to_directory/TARGET_MACHINE\*L/machdep.mk\*O
.DE
...\" 
.P
file, as described below.
.LI
The rest of the \*LMakefile\*O must be surrounded by a conditional of the
following form:
...\" 
.iS
    .if !defined(LIBDCE_LIBRARY_MAKEFILE)
        ....
        ....
        ....

    .endif
.iE
...\" 
.P
The exception to this rule is the case where the variable
...\" 
.DS
    \*VTARGET_MACHINE\*L_\*Vlibname\*L_OFILES\*O
.DE
...\" 
.P
is defined in a
...\" 
.DS
    \*Vdce-root-dir/\*Ldce/src/\*Vpath_to_directory/TARGET_MACHINE/\*Lmachdep.mk\*O
.DE
...\" 
.P
file. In this case, the entire \*LMakefile\*O, except for the \*Vlibname\*L_OFILES\*O
list and the include of \*L/machdep.mk\*O, must be surrounded by a conditional of the
form described above.
.LI
If shared libraries are to be built using the compiler-centric method,
then within the conditional that surrounds the main body of the \*LMakefile\*O
there must be a conditional of the following form:
...\" 
.iS
    .if ${USE_SHARED_LIBRARIES}==0
        LIBRARIES=\*Vlibname\*L.a
    .endif
.iE
...\" 
.P
as well as the following definition:
...\" 
.iS
    EXPSHLIB_TARGETS=${\*Vlibname\*L_OFILES}
.iE
...\" 
.LI
In addition, the following two definitions must be present if \*LOBJECTS\*O
and \*LLIBS\*O have not already been defined:
...\" 
.iS
    OBJECTS=
.iE
...\" 
.P
and:
...\" 
.iS
    LIBS=
.iE
...\" 
.P
If \*LLIBS\*O is already defined, it must be changed as noted above, and
a line of the form:
...\" 
.iS
    \*Vprog\*L_LIBS=\*Vlib_list\*O
.iE
...\" 
.P
must be added for each program that is to be built, specifying the list of
libraries to link against.
.LE
.sp 2
...\" 
...\" 
...\" ----------------------------------------------------------------------
.H 4 "Changes to TARGET_MACHINE/machdep.mk Files"
...\" ----------------------------------------------------------------------
...\" 
.P
If the definition of
...\" 
.DS
    \*VTARGET_MACHINE\*L_\*Vlibname\*L_OFILES
.DE
...\" 
.P
is located in a
...\" 
.DS
    \*Vdce-root-dir/\*Ldce/src/\*Vpath_to_directory/TARGET_MACHINE/\*Lmachdep.mk\*O
.DE
...\" 
.P
file, then the rest of the \*Lmachdep.mk\*O file should be surrounded by a
conditional referring to \*LLIBDCE_LIBRARY_MAKEFILE\*O, as described above.
...\" 
...\" 
...\" 
...\" ----------------------------------------------------------------------
.H 3 "libdce Porting Strategy"
...\" ----------------------------------------------------------------------
...\" 
.P
The strategy for porting the build of \*Llibdce\*O is as follows:
...\" 
.BL
.LI
Follow the steps described in this manual for porting include files and
libraries to the point where you have all of the component libraries and
\*Llibdce.a\*O built. If you are building a static DCE library, then at this
point you are done.
.LI
Since debugging with shared libraries may be more difficult than debugging
with static libraries (and on some systems may actually be impossible),
you may want to get the DCE binaries built, linked against a static \*Llibdce\*O,
and running well before attempting to build with a shared \*Llibdce\*O.
.LI
Determine (based on the information given above about the characteristics
of the loader-centric and compiler-centric models) which build model most
closely resembles the method used on your platform to build shared libraries.
.LI
Create the
...\" 
.DS
    \*Vdce-root-dir/\*Ldce/src/\*Vpath_to_directory/TARGET_MACHINE/\*Lmachdep.mk\*O
.DE
...\" 
.P
file, either from scratch, or on the pattern of one of the \*Lmachdep.mk\*O
files from the reference ports (e.g., \*LRIOS/machdep.mk\*O or \*LHP800/machdep.mk\*O).
The newly-created \*Lmachdep.mk\*O must contain the lists, dependencies, and rules
necessary for building a shared library on your platform.
.LI
If you are building with the compiler-centric method, you may also need
to modify or add to the list of variables at the end of the common makefile
...\" 
.DS
    \*Vdce-root-dir\*L/dce/src/lbe/mk/osf.dce.mk\*O
.DE
...\" 
.P
which specify flags for the compiler and loader needed to build shared libraries.
.LE
...\" 
...\" .P
...\" The following section gives more detail on building and porting the three types
...\" of DCE libraries.
...\" 
...\" 
...\" 
...\" ----------------------------------------------------------------------
...\" .H 4 "Shared Libraries vs. Static Libraries"
...\" ----------------------------------------------------------------------
...\" 
.P
As mentioned above, the application program interfaces to all of the DCE
core services are packaged into one library, \*Llibdce.a\*O, which is linked
with all the binaries that comprise DCE. Because of the size of this library
(approximately 5.5MB on a DECstation 3100), most sites with systems that support
shared objects or shared libraries will wish to use them in implementing
\*Llibdce\*O. Building shared libraries is highly machine specific, so the
following sections describe some of the issues involved in building a shared
version of \*Llibdce\*O.
...\" 
...\" 
...\" ----------------------------------------------------------------------
.H 4 "Building a Shared or a Static Library"
...\" ----------------------------------------------------------------------
...\" 
.P
The type of library built is determined by the variable \*LNO_SHARED_LIBRARIES\*O.
This variable is defined in the configuration makefile:
...\" 
.DS
    \*Vdce-root-dir\*L/dce/src/Makeconf\*O
.DE
...\" 
.P
The \*LMakeconf\*O file contains a conditional \*L.if\*O statement with branches
for different architectures. If you are not building a shared \*Llibdce\*O
using the compiler-centric method (see the next section), then you should define
\*LNO_SHARED_LIBRARIES\*O in the branch of the conditional that refers to your
machine. (By default, shared libraries are built.)
.P
If \*LNO_SHARED_LIBRARIES\*O is defined, then the usual flags are used for
compiling the objects that comprise libraries, and component libraries are
generated. If \*LNO_SHARED_LIBRARIES\*O is not defined (or if the definition
is commented out) in \*LMakeconf\*O), then special flags are passed to the
compiler to cause it to generate objects suitable for a shared library, the
loader is run to generate the shared library, and no component libraries are
built. As noted above, in general, if you are not building a shared version of
the library using the compiler-centric method, you should define
\*LNO_SHARED_LIBRARIES\*O in the part of the conditional in \*LMakeconf\*O
that refers to your machine, since loader-centric builds differ from static
builds only in that the loader is run with special flags to produce the library.
...\" 
...\" 
...\" ----------------------------------------------------------------------
.H 4 "Building Loader-Centric or Compiler-Centric Shared Libraries"
...\" ----------------------------------------------------------------------
...\" 
.P
There are two ways to build a shared DCE library:
...\" 
.BL
.LI
Loader-Centric Build
...\" 
.BL
.LI
Objects are built the same way regardless of whether they are to be included
in a static or shared library.
.LI
The loader is run to produce a shared object. The arguments for the loader are
a set of flags indicating that a shared library is to be produced; and, typically,
an ordered list of the symbols in the library objects, as well as the objects
themselves.
.LI
The shared object resulting from running the loader is archived into
\*Llibdce.a\*O.
.LE
...\" 
.LI
Compiler-Centric Build
...\" 
.BL
.LI
Objects are compiled differently depending on whether they are to be included
in a static or shared library.
.LI
Special compiler flags are used to produce the shared objects.
.LI
The loader is run to create a shared object. The loader arguments are flags
to indicate that a shared object is to be replaced, and a list of the objects
that make up the shared object. The result of the loader run is a shared
version of the DCE library, \*Llibdce.so\*O.
.LE
...\" 
.LE
...\" 
...\" 
...\" ----------------------------------------------------------------------
.H 4 "Location of Non-Portable Code"
...\" ----------------------------------------------------------------------
...\" 
.P
The \*LMakefile\*O that controls the building of \*Llibdce\*O is:
...\" 
.DS
    \*Vdce-root-dir\*L/dce/src/libdce/Makefile\*O
.DE
...\" 
.P
This makefile contains code to build a static version of \*Llibdce\*O.
Machine-specific build information that describes how to build a shared library
for a particular platform is contained in subdirectories of:
...\" 
.DS
    \*Vdce-root-dir\*L/dce/src/libdce\*O
.DE
...\" 
.P
For example:
...\" 
.DS
    \*Vdce-root-dir\*L/dce/src/libdce/HP800\*O
.DE
...\" 
.P
and:
...\" 
.DS
    \*Vdce-root-dir\*L/dce/src/libdce/RIOS\*O)
.DE
...\" 
...\" 
...\" ----------------------------------------------------------------------
.H 3 "Using a Static libdce"
...\" ----------------------------------------------------------------------
...\" 
.P
As shipped, the \*Llibdce\*O \*LMakefile\*O will build a static version of
\*Llibdce.a\*O on virtually any UNIX platform. The only modification you may
have to make is to further split up the lists of \*L.o\*O files that
make up \*Llibdce\*O. This will be necessary if your \*Lexec\*O, shell, or
\*Lar\*O commands have difficulty with the length of the command lines generated
by \*Lmake\*O when archiving the \*L.o\*O files into \*Llibdce.a\*O.
For example, if your build fails due to this problem, you may have to add lines
that will assign some of the .o files for \*Llibdce\*O to \*Llibdce_7.a\*O,
and then add \*Llibdce_7.a\*O to the list of sources for \*Llibdce.a\*O.
...\" 
...\" 
...\" ----------------------------------------------------------------------
.H 3 "Using a Shared libdce"
...\" ----------------------------------------------------------------------
...\" 
.P
The following sections contain information on how best to implement your choice
of strategy for porting a shared DCE library.
...\" 
...\" 
...\" ----------------------------------------------------------------------
.H 4 "Porting Loader-Centric Shared Libraries"
...\" ----------------------------------------------------------------------
...\" 
.P
If the method for building shared libraries on your system is closer to the
loader-centric method, then you should base your version of
...\" 
.DS
    \*Vdce-root-dir\*L/dce/src/libdce/\*VTARGET_MACHINE\*L/machdep.mk\*O
.DE
...\" 
.P
(where \*VTARGET_MACHINE\*O is the name of your platform) on:
...\" 
.DS
    \*Vdce-root-dir\*L/dce/src/libdce/RIOS/machdep.mk\*O
.DE
...\" 
.P
The port of \*LRIOS/machdep.mk\*O will generally consist of changes to the rules
for constructing the loader symbol map (if any), and changes to the flags passed
to the loader.
...\" 
.nS "note"
This method of building requires extra porting work if your system has a
16-character limit on the length of an archive member name. Also, if you
build shared libraries with this method, you need to add a line to the part
of the \*L.if\*O statement in
...\" 
.DS
    \*Vdce-root-dir\*L/dce/src/Makeconf\*O
.DE
...\" 
.P
that refers to your platform; this line must assign a value to the variable
\*LNO_SHARED_LIBRARIES\*O.
.nE
...\" 
...\" 
...\" 
...\" ----------------------------------------------------------------------
.sp 2
.in -0.25i
\s+1\*L
Notes on libdce/RIOS/machdep.mk
\*O\s-1
.in +0.25i
.sp 1
...\" ----------------------------------------------------------------------
...\" 
.P
The
...\" 
.DS
    \*Vdce-root-dir\*L/dce/src/libdce/RIOS/machdep.mk\*O
.DE
...\" 
.P
makefile has the following shortcomings:
...\" 
.BL
.LI
\*Llibdce\*O depends on libraries in the export tree, as well as the export
tree of the backing build or sandbox. This makes it possible for \*Llibdce\*O
to be built from objects that were built in an indeterminate environment,
which is not desirable.
.LI
Since \*Llibdce\*O depends on libraries and not objects, and because it lacks
knowledge of where the libraries are built, this makefile cannot
determine if the objects that make up the component libraries are up-to-date,
nor can it rebuild out-of-date libraries. As a result, you cannot run \*Lmake\*O
in the
...\" 
.DS
    \*Vdce-root-dir\*L/dce/src/libdce\*O
.DE
...\" 
.P
directory and generate a correct version of \*Llibdce\*O. Instead, it is
necessary to run:
...\" 
.iS
\*Lmake export_all_EXPLIB\*O
.iE
...\" 
.P
in the \*Vdce-root-dir\*L/dce/src\*O directory to ensure that all the component
libraries are up-to-date before being built into \*Llibdce\*O.
...\" 
.LI
Since a number of components build libraries in addition to those that are a
part of \*Llibdce\*O, this takes added time and could require additional
porting work or makefile modifications.
...\" 
.LE
...\" 
...\" 
...\" ----------------------------------------------------------------------
.H 4 "Porting Compiler-Centric Shared Libraries"
...\" ----------------------------------------------------------------------
...\" 
.P
If the compiler-centric method of building shared libraries is closer to the
method used on your platform, then you should base your version of
...\" 
.DS
    \*Vdce-root-dir\*L/dce/src/libdce/\*VTARGET_MACHINE\*L/machdep.mk\*O
.DE
...\" 
.P
on:
...\" 
.DS
    \*Vdce-root-dir\*L/dce/src/libdce/AT386/machdep.mk\*O
.DE
...\" 
.P
There are three areas of non-portable code in the DCE makefiles that
affect compiler-centric builds of DCE: compiler flags, tools limitations, and
component  makefiles. You will need to change the compiler and loader
flags for building shared objects to those used on your platform. Most of these
flags are set in the common makefiles as described below.
.P
You may need to modify the \*Llibdce\*O and possibly other makefiles if you
encounter problems with command line lengths, or other limitations in the
tools necessary to do the build. You may need to modify the component
makefiles to add lists of platform-specific \*L.o\*O files to be included
in \*Llibdce\*O, or to turn off shared library building in some directory or
subtree. The non-portable areas of code are described below.
...\" 
...\" 
...\" ----------------------------------------------------------------------
.sp 2
.in -0.25i
\s+1\*L
Compiler Flags
\*O\s-1
.in +0.25i
.sp 1
...\" ----------------------------------------------------------------------
...\" 
.P
There are five variables that define compiler flags that are passed when
building shared libraries using the compiler-centric method (i.e., they are
passed to the compiler and loader if \*LNO_SHARED_LIBRARIES\*O is not
defined):
...\" 
.BL
.LI
\*L_SHCCDEFS\*O
.P
This variable is set in the
...\" 
.DS
    \*Vdce-root-dir\*L/dce/src/lbe/mk/osf.dce.mk\*O
.DE
...\" 
.P
makefile, and is used to define the tags to trigger conditional compilation of
shared library code.
.LI
\*L_PICLIB_\*O
.P
This variable is set in:
...\" 
.DS
    \*Vdce-root-dir\*L/dce/src/lbe/mk/osf.dce.mk\*O
.DE
...\" 
.P
Its value consists of any special flags that need to be passed to the compiler
to indicate that position independent code (PIC) should be generated, as well
as a list of directories to search for shared libraries containing external
symbols and a list of the libraries containing such symbols (in \*L-l\*Vlibname\*O
format).
.LI
\*L_GLUE\*O
.P
This flag is set in the
...\" 
.DS
    \*Vdce-root-dir\*L/dce/src/lbe/mk/osf.dce.mk\*O
.DE
...\" 
.P
makefile, and is used to pass any special flags to the compiler needed to indicate
that shared objects are being compiled.
.LI
\*LLIBS\*O
.P
In order to correctly and efficiently generate references to routines in shared
libraries, every compilation done during a shared object build contains the list
of directories to be searched for the libraries used. The common makefiles
use the value of the \*LLIBS\*O variable for this list (e.g., \*C'-l' list\*O). By
default, if not set elsewhere, \*LLIBS\*O is set to \*L\-ldce\*O at the bottom of:
...\" 
.DS
    \*Vdce-root-dir\*L/dce/src/lbe/mk/osf.dce.mk\*O
.DE
...\" 
.P
It is also important that \*LLIBS\*O be set to NULL (i.e., \*LLIBS= \*O) in
makefiles that build pieces of \*Llibdce\*O.
.LI
\*L_SHLDFLAGS_\*O
.P
This flag is set in the
...\" 
.DS
    \*Vdce-root-dir\*L/dce/src/lbe/mk/osf.std.mk\*O
.DE
...\" 
.P
makefile, and is used to define the flags needed by the linker to create a shared
library. See your linker documentation for the correct flags in your environment.
.LI
\*LPARTIAL_LDFLAGS\*O
.P
This flag is set in the
...\" 
.DS
    \*Vdce-root-dir\*L/dce/src/libdce/Makefile\*O
.DE
...\" 
.P
makefile, and is used to define the flags used by the linker to create partially
linked objects if the linker supports this functionality. See your linker
documentation for the flags required.
.LE
...\" 
...\" 
...\" ----------------------------------------------------------------------
.sp 2
.in -0.25i
\s+1\*L
Tool Capabilities
\*O\s-1
.in +0.25i
.sp 1
...\" ----------------------------------------------------------------------
...\" 
.P
The final phase of building a shared \*Llibdce\*O using the compiler-centric
method is to link all of the \*L.o\*O files into the shared object. This is
done via an \*Lexec(\|)\*O of the loader line to do the link. On OSF/1, due to
the large number of files that make up \*Llibdce\*O, the length of the loader
command line exceeds the maximum input line length for the \*Lexec(\|)\*O
command. The \*Llibdce\*O \*LMakefile\*O works around this problem by building
four ``partially linked'' shared objects and then combining these into the final
\*Llibdce.so\*O. 
...\" 
.BL
.LI
If your version of the loader can create partially linked shared objects, then
you can use the \*LMakefile\*O as it is, substituting the proper values for the
various compiler and and loader flag variables described above.
.LI
If your loader can read its input from a file, then the \*L.o\*O list can be
written out, avoiding the \*Lexec(\|)\*O problem.
.LI
If your platform's version of \*Lexec(\|)\*O accepts extremely long command lines,
you may be able to avoid the intermediate linking steps.
.LI
If your \*Lexec(\|)\*O cannot handle the full loader line and your loader can
neither build partially linked objects nor accept an input file of object names,
then you will need to develop another way to handle the problem.
.LE
...\" 
...\" 
...\" ----------------------------------------------------------------------
.H 4 "Finishing the Shared Libraries Port"
...\" ----------------------------------------------------------------------
...\" 
.P
After porting the compiler-centric or loader-centric build of the shared
library, the DCE library must be rebuilt, and the problem of running commands
during a build must be solved.
...\" 
...\" 
...\" ----------------------------------------------------------------------
.sp 2
.in -0.25i
\s+1\*L
Rebuild the DCE Library
\*O\s-1
.in +0.25i
.sp 1
...\" ----------------------------------------------------------------------
...\" 
.P
If you are using the loader-centric build method, you can simply rerun the
\*Lexport_all_EXPLIB\*O pass from the \*Vdce-root-dir\*L/dce/src\*O directory with
the ported \*Llibdce\*O makefiles in place.
.P
If you are using the compiler-centric build method, you must remove all of
the objects that comprise \*Llibdce.so\*O before rebuilding. This can be
accomplished as follows:
...\" 
.iS
    cd \*Vdce-root-dir\*L/dce/src/libdce\*L
    make SUBMAKE_TARGET=clobber_all
.iE
...\" 
...\" 
...\" 
...\" ----------------------------------------------------------------------
.sp 2
.in -0.25i
\s+1\*L
Running Commands During the Build
\*O\s-1
.in +0.25i
.sp 1
...\" ----------------------------------------------------------------------
...\" 
.P
In two subdirectories of the DCE source tree, namely the
...\" 
.DS
    \*Vdce-root-dir\*L/dce/src/directory/cds/control\*O
.DE
...\" 
.P
and
...\" 
.DS
    \*Vdce-root-dir\*L/dce/src/directory/gds/dsa\*O
.DE
...\" 
.P
directories, commands are built, linked against \*Llibdce\*O, and then run to
produce other files needed by the build. On many platforms, it is necessary to
load a shared library into some kernel data space before it can be used by an
executable. If your system operates in this manner, then rules for loading the
library before running the commands linked to it should be placed in makefiles
named
...\" 
.DS
    \*Vdce-root-dir\*L/dce/src/directory/cds/control/\*VOS_TYPE\*L/osdep.mk\*O
.DE
...\" 
.P
and
...\" 
.DS
    \*Vdce-root-dir\*L/dce/src/directory/gds/dsa/\*VOS_TYPE\*L/osdep.mk\*O
.DE
...\" 
.P
which you must create in these directories. Refer to the makefiles
...\" 
.DS
    \*Vdce-root-dir\*L/dce/src/directory/cds/control/OSF1/osdep.mk\*O
.DE
...\" 
.P
and
...\" 
.DS
    \*Vdce-root-dir\*L/dce/src/directory/gds/dsa/OSF1/osdep.mk\*O
.DE
...\" 
.P
for examples of how the new makefiles should be coded.
...\" 
...\" 
...\" 
...\" 
...\" 
...\" .zA "Moved dce_config section to Chapter 3"
...\" .zZ "Moved dce_config section to Chapter 3"
...\" 
...\" 
...\" ----------------------------------------------------------------------
...\" .H 2 "The DCE Configuration Program"
...\" ----------------------------------------------------------------------
...\" 
...\" 
...\" 
...\" .zZ "Chapter has been rewritten for DCE 1.0.2"
...\" 
...\" 
...\" 
...\" 
...\" 
...\" 
...\" ----------------------------------------------------------------------
