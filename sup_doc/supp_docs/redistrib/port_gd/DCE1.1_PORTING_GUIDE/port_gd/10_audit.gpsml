...\" @OSF_COPYRIGHT@
...\" COPYRIGHT NOTICE
...\" Copyright (c) 1990, 1991, 1992, 1993, 1994 Open Software Foundation, Inc.
...\" ALL RIGHTS RESERVED (DCE).  See the file named COPYRIGHT.DCE for
...\" the full copyright text.
...\" 
...\" 
...\" HISTORY
...\" $Log: 10_audit.gpsml,v $
...\" Revision 1.1.2.15  1994/10/30  22:47:19  weir
...\" 	Last updates
...\" 	[1994/10/30  22:46:08  weir]
...\"
...\" Revision 1.1.2.14  1994/10/30  16:25:19  weir
...\" 	Updates
...\" 	[1994/10/30  16:23:53  weir]
...\" 
...\" Revision 1.1.2.13  1994/10/29  23:25:39  weir
...\" 	More Updates
...\" 	[1994/10/29  23:24:17  weir]
...\" 
...\" Revision 1.1.2.12  1994/10/28  20:49:52  weir
...\" 	DCE 1.1 updates
...\" 	[1994/10/28  20:48:29  weir]
...\" 
...\" Revision 1.1.2.11  1994/10/26  20:40:33  weir
...\" 	DCE 1.1 Updates
...\" 	[1994/10/26  20:39:03  weir]
...\" 
...\" 	Test
...\" 	[1994/10/24  17:20:59  weir]
...\" 
...\" Revision 1.1.2.10  1994/10/14  18:38:39  weir
...\" 	Minor edit changes
...\" 	[1994/10/14  18:37:25  weir]
...\" 
...\" Revision 1.1.2.9  1994/06/20  20:28:32  weir
...\" 	Beta Update
...\" 	[1994/06/20  20:27:06  weir]
...\" 
...\" Revision 1.1.2.8  1994/06/19  20:53:44  weir
...\" 	Beta Update
...\" 	[1994/06/19  20:52:31  weir]
...\" 
...\" Revision 1.1.2.7  1994/06/17  13:50:09  weir
...\" 	Beta Update
...\" 	[1994/06/17  13:48:34  weir]
...\" 
...\" Revision 1.1.2.6  1994/06/13  19:25:14  devobj
...\" 	cr10872 - fix copyright
...\" 	[1994/06/13  19:24:14  devobj]
...\" 
...\" Revision 1.1.2.5  1994/06/12  17:31:49  weir
...\" 	No change-- for copyright insertion
...\" 	[1994/06/12  17:30:17  weir]
...\" 
...\" Revision 1.1.2.4  1994/06/08  18:47:09  weir
...\" 	Beta Update
...\" 	[1994/06/08  18:46:00  weir]
...\" 
...\" Revision 1.1.2.3  1994/06/02  21:13:04  weir
...\" 	Beta Updates
...\" 	[1994/06/02  21:11:26  weir]
...\" 
...\" Revision 1.1.2.2  1994/05/03  20:13:55  weir
...\" 	Reorganization (part 2)
...\" 	[1994/05/03  20:13:24  weir]
...\" 
...\" Revision 1.1.2.1  1994/05/03  19:00:07  weir
...\" 	Reorganization
...\" 	[1994/05/03  18:58:55  weir]
...\" 
...\" $EndLog$
...\" 
...\" 
...\" 
...\" 
...\" 
...\" ----------------------------------------------------------------------
.H 1 "DCE Audit Service"
...\" ----------------------------------------------------------------------
...\" 
...\" 
...\" 
...\" 
.P
This chapter contains porting and testing information for the DCE Audit
Service.
...\" 
...\" 
...\" 
...\" ----------------------------------------------------------------------
.H 2 "Audit Service Overview"
...\" ----------------------------------------------------------------------
...\" 
.P
Audit plays a critical role in distributed systems, where there is widespread
sharing of data and resources, as well as the use of remote systems management
facilities. Adequate audit facilities are necessary for detecting and recording
critical events in a distributed application.
.P
Audit is a key component of DCE and is provided by the DCE Audit Service. It has
the following features:
...\" 
...\" 
.BL
.LI
An audit daemon is provided which performs the logging of audit records based on
specified criteria.
...\" 
.LI
Application Programming Interfaces (APIs) are provided which can be used as part
of application server programs to actuate the recording of audit events. These
APIs can also be used to create tools that can analyze the audit records.
...\" 
.LI
An administrative command interface to the audit daemon is provided which directs
the daemon in selecting the events that are going to be recorded based on certain
criteria.
...\" 
.LI
An event classification mechanism is used to logically group a set of audit events,
allowing for ease of administration.
...\" 
.LI
The display of audit records can be directed to logs or to the console.
...\" 
.LE
...\" 
...\" 
...\" 
...\" ----------------------------------------------------------------------
.H 3 "Components of DCE Audit Service"
...\" ----------------------------------------------------------------------
...\" 
.P
The DCE Audit Service has three basic components:
...\" 
...\" 
.BL
...\" 
.LI
Application Programming Interfaces
.P
These Provide the functions used to detect and record critical events when
the application server services a client. The application programmer uses these
functions at certain points (known as \*Vcode points\*O) in the application server
program to actuate the recording of audit events.
.P
Other functions are also provided which can be used to create tools that examine
and analyze the audit event records.
...\" 
.LI
Audit daemon
.P
Maintains the database which contains the set of criteria (called \*Vfilters\*O)
upon which audit records are logged.
...\" 
...\" .LI
...\" Audit Control Program
...\" .P
...\" Management interface to the audit daemon. Used by the administrator to specify how
...\" the audit library will filter the recording of audit events. It is also used by the
...\" administrator to control the state and attributes of the audit daemon, as well as
...\" to control the logging of audit records in the audit trail file.
...\" 
...\" 
.LI
Control Program
.P
Access to the management interface of the audit daemon is provided by the DCE Control
Program (\*Ldcecp\*O).
...\" 
...\" 
...\" 
.LE
...\" 
...\" 
...\" 
...\" ----------------------------------------------------------------------
.H 3 "Considerations and Dependencies"
...\" ----------------------------------------------------------------------
...\" 
.P
The DCE Audit Service interacts with the following DCE components in the following
ways:
...\" 
...\" 
.BL
...\" 
.LI
The audit service uses secure RPC to communicate with audit clients.
...\" 
.LI
The audit daemon uses the DCE Directory Service to export its serviceability and ACL
management interfaces.
...\" 
.LI
In DCE 1.1, The Security daemon and the DTS daemon are shipped as fully-enabled audit
clients. That is, code points and event classes are already predefined for these two
DCE services.
...\" 
.LE
...\" 
.P
The audit daemon has to run on the same host as the audit client. An application
server can use the audit services only if an audit daemon is run on the same host
as the application server.
...\" 
...\" 
...\" 
...\" ----------------------------------------------------------------------
.H 3 "Location of Audit Files
...\" ----------------------------------------------------------------------
...\" 
.P
The following table gives the locations of the Audit component source files,
and the installed location of the objects built from them; ``installed location''
denotes a position in the DCE \*Linstall\*O tree relative to:
...\" 
.DS
    \*Vdce-root-dir\*L/dce/install/\*Vplatform\*L/opt/dce1.1\*O
.DE
...\" 
...\" 
...\" 
.SP
...\" 
.ne 3i
.TB "Locations of Audit Installed Files"
...\" .ad l
.TS H
expand tab (@) box;
lB | lB | lB | lB
lB | lB | lB | lB
lB | l | lB | lB.
@@Source@Installed
Subcomponent@Function@Location@Location
_
.TH
_
libaudit@T{
Public API
T}@src/security/audit/libaudit@not installed
_
auditd@T{
Audit daemon
T}@src/security/audit/auditd@bin
_
auditcp@T{
Audit Control Program
T}@src/security/audit/auditcp@bin
_
event-class files@T{
Event classes for auditd, dtsd, and secd auditable events
T}@src/security/audit/ec@etc/audit/ec
_
public headers@T{

T}@src/security/audit/h@share/include/dce
_
public IDL files@T{

T}@src/security/audit/idl@share/include/dce
_
public ACF files@T{

T}@src/security/audit/idl@N/A
.TE
...\" 
...\" 
...\" .P
...\" Note that the Audit API (\*Llibaudit\*O in the above table) will be provided as
...\" part of \*Llibdce\*O in the DCE 1.1 general release.
...\" .P
...\" Note also that all commands provided by \*Lauditcp\*O are also implemented in
...\" \*Ldcecp\*O (the DCE control program). \*Lauditcp\*O as such is not planned to
...\" be a part of the DCE 1.1 general release; it is included with DCE 1.1 Beta
...\" because the functional and system tests depend upon it. The tests will be
...\" changed to use \*Ldcecp\*O for the general DCE 1.1 release.
...\" 
...\" 
...\" 
...\" 
...\" 
...\" 
...\" 
...\" ----------------------------------------------------------------------
.H 2 "Porting Considerations"
...\" ----------------------------------------------------------------------
...\" 
...\" OS-and Machine-specific areas
...\" 
.P
Currently, there exist the following machine specific makefiles and/or code in
the audit source tree:
...\" 
.DS
    \*Vdce-root-dir\*L/dce/src/security/audit/auditcp/HP800/machdep.mk\*O
    \*Vdce-root-dir\*L/dce/src/security/audit/auditd/HP800/machdep.mk\*O
.DE
...\" 
.P
These makefiles cause \*Lauditd\*O and \*Lauditcp\*O to be linked against
\*LlibM.a\*O on the HP-UX platform. This is necessary in order to resolve
the symbol \*Lfabs(\|)\*O in the math library.
...\" 
...\" 
...\" ----------------------------------------------------------------------
...\" .H 3 "OS and Machine-Specific Considerations"
...\" ----------------------------------------------------------------------
...\" OSF will provide this information.
...\" .P
...\" 
...\" 
...\" 
...\" 
...\" 
...\" ----------------------------------------------------------------------
...\" .H 3 "Platform Definitions and Variables"
...\" ----------------------------------------------------------------------
...\" 
...\" .P
...\" 
...\" 
...\" 
...\" 
...\" 
...\" 
...\" ----------------------------------------------------------------------
.H 2 "Building and Linking"
...\" ----------------------------------------------------------------------
...\" 
.P
The following facts are relevant to building the DCE Audit Service:
...\" 
...\" 
.BL
...\" 
.LI
An application server that wishes to use auditing services must link with
the audit library, \*Llibaudit.a\*O.
...\" 
.LI
The audit system uses the conditionally defined symbol
...\" 
.DS
    \*LDCE_AUD_DEBUG\*O
.DE
...\" 
.P
which is activated if \*LDCE_DEBUG\*O is defined.
...\" 
.LI
The environment variable \*LDCEAUDITOFF\*O, if defined, turns auditing off. By
default, auditing is turned on.
...\" 
.LI
The environment variable \*LDCEAUDITFILTERON\*O, if defined, causes the audit
library routines to check the filter directives before logging. By default,
audit filtering is turned off (meaning that all audit records are logged).
...\" 
...\" .LI
...\" \*LTBD\*O (for any other issues.)
...\" 
.LE
...\" 
...\" 
...\" 
...\" ----------------------------------------------------------------------
.H 2 "Installing the DCE Audit Service"
...\" ----------------------------------------------------------------------
...\" 
.P
The DCE Audit Service is installed as part of the basic package of utilities
by \*Ldce_config\*O whenever you install any DCE component.
.P
You can use \*Ldce_config\*O to configure \*Lauditd\*O to start automatically
upon system bootstrap. From the \*Ldce_config\*O main menu, select:
...\" 
.oS
    2.  Configure
.oE
...\" 
.P
and then:
...\" 
.oS
    2.  Additional Server Configuration
.oE
...\" 
.P
and finally:
...\" 
.oS
    9.  Auditing
.oE
...\" 
...\" 
...\" 
...\" 
...\" 
...\" ----------------------------------------------------------------------
.H 2 "Testing and Verification"
...\" ----------------------------------------------------------------------
...\" 
.P
The test cases provided for the DCE Audit Service test the audit API and the
command line interface.
.P
There are three types of audit test cases:
...\" 
...\" 
.BL
...\" 
.LI
API Tests
.P
These test the audit logging and analysis APIs.
...\" 
.LI
Command Tests
.P
These test the use of \*Ldcecp\*O to control the audit daemon.
...\" 
.LI
Event Class File Tests
.P
These test the configurability of event classes.
...\" 
.LE
...\" 
...\" 
.P
Each of these types and their corresponding test cases are described in the
following sections. Eight audit test cases are shipped with DCE.
...\" 
...\" 
...\" 
...\" ----------------------------------------------------------------------
.H 3 "Description of the Audit API Test Cases"
...\" ----------------------------------------------------------------------
...\" 
.P
In the API test cases, the audit and logging APIs are first tested together
independently of the filters. The filter mechanism is then tested by invoking
the audit logging API functions. Finally, the audit logging API functions are
invoked, specifying the audit daemon as the target of audit records.
.P
The audit analysis API functions are used to prove the correctness of test
results.
.P
Following are the API test cases and their descriptions:
...\" 
...\" 
.VL 2i
...\" 
.LI "\*Lapi_log\*O"
Invokes the logging APIs without using filters.
...\" 
.LI "\*Lapi_filter\*O"
Invokes the logging APIs and use filters.
...\" 
.LI "\*Lapi_log_to_daemon\*O"
Invokes the logging APIs without using filters, and logs to the audit daemon
(that is, the central audit trail file).
...\" 
.LE
...\" 
...\" 
...\" 
...\" ----------------------------------------------------------------------
...\" .H 3 "Description of the Audit Command Test Cases"
...\" ----------------------------------------------------------------------
...\" 
.P
In the Command test cases, the audit daemon is started and stopped using different
combinations of command line parameters. All other features are tested by having
the audit daemon audit its own control interface operations by linking the audit
library with the audit daemon, and starting the daemon using the \*L-a\*O option.
.P
The DCE Control Program (\*Ldcecp\*O) is used to check how the audit daemon handles
filters and the audit trail file.
.P
Following are the Command test cases and their descriptions:
...\" 
...\" 
.VL 2i
...\" 
.LI "\*Lcp_filter\*O"
Issues \*Ldcecp\*O commands that display and manipulate filters.
...\" 
.LI "\*Lcp_auditd\*O"
Issues \*Ldcecp\*O commands that display and modify the attributes of
the audit daemon, as well as well as to enable or disable audit logging, or stop
the daemon.
...\" 
.LI "\*Lauditd_startup\*O"
Starts the audit daemon using the different options of the \*Lauditd\*O command.
...\" 
.LI "\*Lauditd_acl\*O"
Checks that the default ACL of the audit daemon object contains the specified
ACL entries.
...\" 
.LE	
...\" 
...\" 
...\" 
...\" ----------------------------------------------------------------------
.H 3 "Description of the Event Class Test Case"
...\" ----------------------------------------------------------------------
...\" 
.P
In this test case, an event is added to an event class file. The test case then
verifies that the event generates an audit record when the event class is selected
by a filter.
.P
The event is then excluded from the event class. The test case verifies that the
event does not generate an audit record when the same filter is used.
.P
The name of the test case is \*Lec_filter\*O.
...\" 
...\" 
...\" 
...\" ----------------------------------------------------------------------
.H 3 "Installing the Audit functional tests with dcetest_config"
...\" ----------------------------------------------------------------------
...\" 
.P
You can install the functional tests described in the following sections
by running the menu-driven \*Ldcetest_config\*O script described in Chapter
13 of this guide. \*Ldcetest_config\*O will install the tests you select at
the path you specify, and will create a softlink (called \*L/dcetest/dcelocal\*O)
to that location. The functional tests for a given component will thus be
installed under a:
.DS
    \*L/dcetest/dcelocal/test/\*Vcomponent_name\*L/\*O
.DE
...\" 
.P
directory, where the \*Ltest/\*Vcomponent_name\*O elements of this path are
equivalent to the \*Ltest/\*Vcomponent_name\*O elements in the pathnames given in
the sections below, which refer to the tests' source or build locations.
...\" 
...\" 
.P
The DCE Audit functional tests are available via option 8 (``Audit'') of the
``DCE Test Installation (Functional Tests'' menu. The TET binaries are available
via option 3 (``TET'') of the DCE Test Installation menu.
...\" 
...\" 
.P
Note that \*Ldcetest_config\*O will prompt you for the location \*Vfrom which\*O
the tests should be installed (in other words, the final location of the built
test tree). For the Audit functional tests, this path should be the location, on
your machine, of:
.DS
    \*Vdce-root-dir\*L/dce/install\*O
.DE
...\" 
...\" 
.P
\(emwhich is the DCE \*Linstall\*O tree (for more information on the structure
of the DCE tree, see Chapter 12 of this guide).
.P
Thus, \*Ldcetest_config\*O will install the Audit functional tests at:
...\" 
.DS
    \*L/dcetest/dcelocal/test/tet/functional/security/audit\*O
.DE
...\" 
.P
where \*L/dcetest/dcelocal\*O is the link to whatever path you supplied as
the install destination.
...\" 
.P
The advantage in using \*Ldcetest_config\*O to install the functional tests
is that it will install \*Vall\*O that is needed and \*Vonly\*O what is needed
out of the DCE build, thus avoiding the mistakes that can occur with manual
installation.
.P
Note that you can only \*Vinstall\*O (if you choose) functional tests with
\*Ldcetest_config\*O; you must use TET to run the tests. Information on running
the individual tests can be found in the following sections.
.P
Refer to Chapter 13 of this guide for further information on using
\*Ldcetest_config\*O. See ``Overview of TET Use'' in Chapter 13 for
general information on TET.
...\" 
...\" 
...\" ----------------------------------------------------------------------
.H 3 "Audit Test Configuration Requirements"
...\" ----------------------------------------------------------------------
...\" 
.P
All Audit test suites are run from the TET environment. Before running the Audit
test suites, ensure that:
...\" 
...\" 
...\" 
.BL
.LI
You are logged in as root.
.LI
The DCE cell is up and running; that is, that the DCE daemons (\*Lsecd\*O, \*Lcdsd\*O,
and the DCE client daemons) have been started.
.LI
The Audit daemon (\*Lauditd\*O) is \*Vnot\*O running.
.LI
You are \*Vnot\*O authenticated in the cell. The tests are designed
to be run using the machine principal.
.LI
In the CDS namespace, the Audit ACL object
...\" 
.DS
    \*L.:/hosts/\*Vhostname\*L/audit-server\*O
.DE
...\" 
...\" .P
...\" and the Audit Serviceability object
...\" 
...\" .DS
...\"     \*L.:/hosts/\*Vhostname\*L/aud-svc\*O
...\" .DE
...\" 
.P
does not contain server binding entries (i.e., the \*LRPC_ObjectUUIDs\*O
attribute for both entries should be null). If it does contain such
entries, you should remove the object from the namespace before running
the tests.
...\" 
...\" 
.LE
...\" 
...\" 
.P
Note that since the test suites are run under TET, many of the configuration requirements
are taken care of in the test code.
...\" 
...\" 
...\" 
...\" ----------------------------------------------------------------------
.H 3 "Running the Audit Test Cases"
...\" ----------------------------------------------------------------------
...\" 
.P
To run the audit test cases, enter the following command:
...\" 
.iS
    tcc -e functional/security/audit
.iE
...\" 
.P
The test results can be viewed from the journals that TET creates in the
...\" 
.DS
    \*L/dcetest/dcelocal/test/tet/functional/security/audit/results\*O
.DE
...\" 
.P
directory. The journal is located in a numbered directory, where the number represents
a test run. A numbered directory and journal is created for each invocation of the
\*Ltcc\*O command (for example, \*L0001e\*O, \*L0002e\*O, and so on).
.P
Following is an example of an Audit TET journal which shows the test cases that succeeded
and those that failed:
...\" 
...\" 
.oS
\s-2
0|1.10 12:59:18 19940525|User: weisz (0) TCC Start, Command Line:
\*Vdce-install-path\*C/install/rios/dcetest/dce1.1/test/tet/bin/tcc -e functional/security/audit
20|\*Vdce-install-path\*C/install/rios/dcetest/dce1.1/test/tet/functional/security/audit/tetexec.cfg 1|Config Start
30||TET_VERSION=1.10
30||TET_OUTPUT_CAPTURE=False
30||TET_RESCODES_FILE=tet_code
30||TET_EXEC_IN_PLACE=False
30||TET_NSIG=31
30||TET_SIG_IGN=34
40||Config End
70||"Starting AUDIT Test Suite"
10|0 /ts/api_filter/api_filter 12:59:18|TC Start, scenario ref 11-1
15|0 1.9 1|TCM Start
520|0 0 18265 1 1|START DCE audit functional test:
\*Vdce-install-path\*C/install/rios/dcetest/dce1.1/test/tet/tet_tmp_dir/24146a/api_filter/api_filter; \\
    DATE: Wed May 25 12:59:22 EDT 1994
400|0 1 1 12:59:48|IC Start
200|0 1 12:59:48|TP Start
520|0 1 18265 1 2|START: api_filter1 started
520|0 1 18265 1 3|PASS: api_filter01 passed
520|0 1 18265 1 4|PASS: api_filter02 passed
520|0 1 18265 1 5|ERROR: api_filter03 failed
520|0 1 18265 1 6|PASS: api_filter04 passed
520|0 1 18265 1 7|PASS: api_filter05 passed
520|0 1 18265 1 8|PASS: api_filter06 passed
520|0 1 18265 1 9|PASS: api_filter07 passed
520|0 1 18265 1 10|PASS: api_filter08 passed
520|0 1 18265 1 11|PASS: api_filter09 passed
520|0 1 18265 1 12|PASS: api_filter10 passed
520|0 1 18265 1 13|PASS: api_filter11 passed
220|0 1 0 13:04:58|PASS
410|0 1 1 13:04:58|IC End
520|0 0 18265 1 1|END DCE audit functional test:
\*Vdce-install-path\*C/install/rios/dcetest/dce1.1/test/tet/tet_tmp_dir/24146a/api_filter/api_filter; \\
    DATE: Wed May 25 13:05:16 EDT 1994
80|0 0 13:05:19|TC End
70||"Completed AUDIT Test Suite"
900|13:05:19|TCC End
\s+2
.oE
...\" 
...\" 
...\" 
...\" 
...\" ----------------------------------------------------------------------
.H 3 "Test Plans"
...\" ----------------------------------------------------------------------
...\" 
.P
Refer to the \*VOSF DCE Release Notes\*O for the location of the DCE test
plans on the DCE distribution tape.
...\" 
...\" 
...\" 
...\" 
...\" ----------------------------------------------------------------------
.H 2 "Audit Runtime Output and Debugging Output"
...\" ----------------------------------------------------------------------
...\" 
.P
The Audit component outputs server information of all kinds via the DCE serviceability
component. The following sections describe how to control the various kinds of
information (including debugging output) available from Audit via serviceability.
...\" 
...\" 
...\" 
...\" 
...\" ----------------------------------------------------------------------
.H 3 "Normal Audit Server Message Routing"
...\" ----------------------------------------------------------------------
...\" 
.P
There are basically two ways to control normal Audit server message routing:
...\" 
.BL
.LI
At startup, through the contents of a routing file (which are applied to
all components that use serviceability messaging).
.LI
Dynamically, through the \*Ldcecp log\*O object.
.LE
...\" 
...\" 
.P
The following sections describe each of these methods.
...\" 
...\" 
...\" 
...\" ----------------------------------------------------------------------
.H 4 "Routing File"
...\" ----------------------------------------------------------------------
...\" 
.P
If a file called
...\" 
.DS
    \*Vdce-local-path\*L/svc/routing\*O
.DE
...\" 
.P
exists when Audit is brought up, the contents of the file (if in the proper format)
will be used as to determine the routing of Audit serviceability messages.
.P
The value of \*Vdce-local-path\*O depends on the values of two \*Lmake\*O
variables when DCE is built:
...\" 
...\" 
...\" 
.VL 1i
.LI "\*LDCEROOT\*O"
its default value is: \*L/opt\*O
...\" 
.LI "\*LDCELOCAL\*O"
its default value is: \*L$DCEROOT/dcelocal\*O
...\" 
.LE
...\" 
.P
Thus, the default location of the serviceability routing file is normally:
...\" 
.DS
    \*L/opt/dcelocal/svc/routing\*O
.DE
...\" 
.P
However, a different location for the file can be specified by setting the
value of the environment variable \*LDCE_SVC_ROUTING_FILE\*O to the complete
desired pathname.
...\" 
.P
The contents of the routing file consist of formatted strings specifying
the routing desired for the various kinds of messages (based on message
severity). Each string consists of three fields as follows:
...\" 
.DS
    \*Vseverity\*L:\*Voutput_form\*L:\*Vdestination\*O\ [\*Voutput_form\*L:\*Vdestination\*O .\ .\ .\ ]
.DE
...\" 
.P
Where:
...\" 
.VL 1i
.LI "\*Vseverity\*O"
specifies the severity level of the message, and must be one of the following:
.BL
.LI
\*LFATAL\*O
...\" Fatal error, about to exit
.LI
\*LERROR\*O
...\" Normal exit
.LI
\*LWARNING\*O
...\" Error detected, program proceeding
.LI
\*LNOTICE\*O
...\" Informational notice
.LI
\*LNOTICE_VERBOSE\*O
...\" Verbose informational notice
.LE
...\" 
.P
(The meanings of these severity levels are explained in detail in Chapter 4 of
the \*VOSF DCE Application Development Guide \(em Core Components\*O volume,
in the section entitled ``Specifying Message Severity''.)
...\" 
...\" 
...\" 
.LI "\*Voutput_form\*O
specifies how the messages of a given severity level should be processed, and
must be one of the following:
.BL
.LI
\*LBINFILE\*O
.P
Write these messages as binary log entries
.LI
\*LTEXTFILE\*O
.P
Write these messages as human-readable text
.LI
\*LFILE\*O
.P
Equivalent to \*LTEXTFILE\*O
.LI
\*LDISCARD\*O
.P
Do not record messages of this severity level
.LI
\*LSTDOUT\*O
.P
Write these messages as human-readable text to standard output
.LI
\*LSTDERR\*O
.P
Write these messages as human-readable text to standard error
.LE
...\" 
.P
Files written as \*LBINFILE\*Os can be read and manipulated with a set of
logfile functions. See Chapter 4 of the \*VOSF DCE Application Development
Guide \(em Core Components\*O volume, mentioned above, for further information.
.P
The \*Voutput_form\*O specifier may be followed by a two-number specifier of the form:
...\" 
.DS
    \*L.\*Vgens\*L.\*Vcount\*O
.DE
...\" 
.P
Where:
...\" 
.VL .5i
.LI "\*Vgens\*O"
is an integer that specifies the number of files (i.e., generations) that
should be kept
.LI "\*Vcount\*O"
is an integer specifying how many entries (i.e., messages) should be
written to each file
.LE
...\" 
.P
The multiple files are named by appending a dot to the simple specified
name, followed by the current generation number. When the number of entries
in a file reaches the maximum specified by \*Vcount\*O, the file is closed,
the generation number is incremented, and the next file is opened. When the
maximum generation number files have been created and filled, the generation
number is reset to 1, and a new file with that number is created and written
to (thus overwriting the already-existing file with the same name), and so
on, as long as messages are being written. Thus the files wrap around to their
beginning, and the total number of log files never exceeds \*Vgens\*O, although
messages continue to be written as long as the program continues writing them.
...\" 
...\" 
...\" 
...\" 
.LI "\*Vdestination\*O
specifies where the message should be sent, and is a pathname. The field
can be left blank if the \*Voutput_form\*O specified is \*LDISCARD\*O,
\*LSTDOUT\*O, or \*LSTDERR\*O. The field can also contain a \*L%ld\*O
string in the filename which, when the file is written, will be replaced
by the process ID of the program that wrote the message(s). Filenames may
\*Vnot\*O contain colons or periods.
...\" 
...\" 
.LE
...\" 
...\" 
.P
Multiple routings for the same severity level can be specified by simply
adding the additional desired routings as space-separated
...\" 
.DS
    \*Voutput_form\*L:\*Vdestination\*O
.DE
...\" 
.P
strings.
...\" 
.P
For example, 
...\" 
.oS
    FATAL:TEXTFILE:/dev/console
    WARNING:DISCARD:--
    NOTICE:BINFILE.50.100:/tmp/log%ld STDERR:-
.oE
...\" 
.P
Specifies that:
...\" 
.BL
.LI
Fatal error messages should be sent to the console.
.LI
Warnings should be discarded.
.LI
Notices should be written both to standard error and as binary entries in files
located in the \*L/tmp\*O directory. No more than 50 files should be written, and
there should be no more than 100 messages written to each file. The files will have
names of the form:
...\" 
.DS
    \*L/tmp/log\*Vprocess_id\*L.\*Vnn\*O
.DE
...\" 
.P
where \*Vprocess_id\*O is the process ID of the program originating the messages,
and \*Vnn\*O is the generation number of the file.
...\" 
...\" 
.LE
...\" 
...\" 
...\" 
...\" ----------------------------------------------------------------------
.H 4 "Routing by the dcecp log Object"
...\" ----------------------------------------------------------------------
...\" 
.P
Routing of Audit server messages can be controlled in an already-started cell
through the \*Ldcecp log\*O object. See the \*Llog.8dce\*O reference page
in the \*VOSF DCE Command Reference\*O for further information.
...\" 
...\" 
...\" 
...\" ----------------------------------------------------------------------
.H 3 "Debugging Output"
...\" ----------------------------------------------------------------------
...\" 
.P
Debugging output from Audit can be enabled (provided that Audit has been built with
\*LDCE_DEBUG\*O defined) by specifying the desired debug messaging level and route(s)
in the
...\" 
.DS
    \*Vdce-local-path\*L/svc/routing\*O
.DE
...\" 
.P
routing file (described above), or by specifying the same information in the
\*LSVC_AUD_DBG\*O environment variable, before bringing up Audit. Debugging
output can also be enabled and controlled through the \*Ldcecp log\*O object.
.P
Note that, unlike normal message routing, debugging output is always specified
on the basis of DCE component/sub-component (the meaning of ``sub-component''
will be explained below) and desired level.
.P
The debug routing and level instructions for a component are specified by the
contents of a specially-formatted string that is either included in the value
of the environment variable or is part of the contents of the routing file.
.P
The general format for the debug routing specifier string is:
...\" 
.DS
\s-1
    "\*Vcomponent\*L:\*Vsub_comp\*L.\*Vlevel\*L,\*V.\ .\ .\*L:\*Voutput_form\*L:\*Vdestination\*O \\
    [\*Voutput_form\*L:\*Vdestination\*O .\ .\ .\ ] "
\s+1
.DE
...\" 
.P
where the fields have the same meanings as in the normal routing specifiers
described above, with the addition of the following:
...\" 
...\" 
...\" 
.VL 1i
.LI "\*Vcomponent\*O"
specifies the component name
...\" 
.LI "\*Vsub_comp\*L.\*Vlevel\*O"
specifies a subcomponent name, followed (after a dot) by a debug level
(expressed as a single digit from 1 to 9). Note that multiple
subcomponent/level pairs can be specified in the string.
.P
A star (``\*L*\*O'') can be used to specify all sub-components. The sub-component
list is parsed in order, with later entries supplementing earlier ones; so the
global specifier can be used to set the basic level for all sub-components, and
specific sub-component exceptions with different levels can follow (see the example
below).
...\" 
.LE
...\" 
...\" 
.P
``Sub-components'' denote the various functional modules into which a component has
been divided for serviceability messaging purposes. For Audit, the sub-components are
as follows:
...\" 
...\" 
...\" 
.VL 2.5i
.LI "\*Lgeneral\*O"
General server administration
...\" 
.LI "\*Lesl\*O"
Event selection list (filters) management
...\" 
.LI "\*Levt\*O"
Audit record management
...\" 
.LI "\*Ltrl\*O"
Audit trail management
...\" 
.LI "\*Lmsgs\*O"
Debugging messages
...\" 
.LE
...\" 
...\" 
.P
For example, the string
...\" 
.DS
    "aud:*.1,trl.3:TEXTFILE.50.200:/tmp/AUD_LOG
.DE
...\" 
.P
sets the debugging level for all Audit sub-components (\*Vexcept\*O
\*Ltrl\*O) at 1; \*Ltrl\*O's level is set
at 3. All messages are routed to \*L/tmp/AUD_LOG\*O. No more than
50 log files are to be written, and no more than 200 messages are
to be written to each file.
.P
The texts of all the Audit serviceability messages, and the sub-component list,
can be found in the Audit sams file, at:
...\" 
.DS
    \*Vdce-root-dir\*L/dce/src/security/audit/libaudit/aud.sams\*O
.DE
...\" 
.P
For further information about the serviceability mechanism and API, see Chapter 4
of the \*VOSF DCE Application Development Guide \(em Core Components\*O volume,
``Using the DCE Serviceability Application Interface''.
...\" 
...\" 
...\" 
...\" 
...\" 
...\" ----------------------------------------------------------------------
