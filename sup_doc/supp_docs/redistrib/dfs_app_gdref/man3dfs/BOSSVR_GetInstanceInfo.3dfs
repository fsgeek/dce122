...\" @OSF_COPYRIGHT@
...\" COPYRIGHT NOTICE
...\" Copyright (c) 1990, 1991, 1992, 1993, 1994 Open Software Foundation, Inc.
...\" ALL RIGHTS RESERVED (DCE).  See the file named COPYRIGHT.DCE for
...\" the full copyright text.
...\" 
...\" 
...\" HISTORY
...\" $Log: BOSSVR_GetInstanceInfo.3dfs,v $
...\" Revision 1.1.2.2  1994/06/10  21:09:41  devobj
...\" 	cr10872 - fixed copyright
...\" 	[1994/06/10  20:49:34  devobj]
...\"
...\" Revision 1.1.2.1  1994/04/05  15:15:38  rom
...\" 	{enh, 10283, R1.1}
...\" 	Moved from dce_books/app_ref/man3dfs/BOSSVR_GetInstanceInfo.3dfs to
...\" 	supp_docs/redistrib/dfs_app_gdref/man3dfs/BOSSVR_GetInstanceInfo.3dfs.
...\" 	[1994/04/04  22:03:27  rom]
...\" 
...\" $EndLog$
...\"
...\" (c) Copyright 1991, Open Software Foundation, Inc. ALL RIGHTS RESERVED
.TH "BOSSVR_GetInstanceInfo" "3dfs" "" "" ""
...\'wH NOT_HANDLED{hspace{.15 in}}
...\" .iX "functions"  "in DFS"  "\*LBOSSVR_GetInstanceInfo(\|)\*O"
...\" .iX "\*LBOSSVR_GetInstanceInfo(\|)\*O"
.iX "bnode"  "displaying"
.SH "NAME"
.PP
\*LBOSSVR_GetInstanceInfo\*O - Gets a basic bnode instance description
.SH "SYNOPSIS"
.PP
.sS
...\'wH NOT_HANDLED{hspace{.15 in}}
\*Lsigned32 BOSSVR_GetInstanceInfo\*O(
.nL
\*Lhandle_t\*O \*VbosserverBinding\*O,
.nL
\*Lchar\*O \*Vinstance\*O[\*VBOSSVR_BSSIZE\*O],
.nL
\*Lbossvr_out_string *\*Vtype\*O,
.nL
\*Lstruct bossvr_status *\*Vstatus\*O,
.nL
\*Lerror_status_t *\*VtheCommStatus\*O)
.sE
.br
.ne 1.5i
.SH "PARAMETERS"
...\'wH NOT_HANDLED{hspace{.15 in}}
.SS Input
.VL 8m
...\'wH UNDEFINED{tightenlist}
.LI "\*VbosserverBinding\*O"
The RPC handle.
.LI "\*Vinstance\*O"
The name of the bnode instance.
.LE
.SS Output
.VL 8m
.LI "\*Vtype\*O"
The type of the named instance.
.LI "\*Vstatus\*O"
The status of the named instance.
.LI "\*VtheCommStatus\*O"
An RPC error is returned, if an error occurred.
.LE
.br
.ne 1.5i
.SH "DESCRIPTION"
...\'wH NOT_HANDLED{hspace{.15 in}}
.iX "Basic OverSeer Server"  "monitoring bnodes"
.iX "bossvr_status (DFS)"
.PP
\*LBOSSVR_GetInstanceInfo(\|)\*O returns the type (as a character string) and
current status of the named bnode instance. Status is set by calling
\*LBOSSVR_SetStatus(\|)\*O.
.PP
The \*Lbossvr_status\*O structure describes the
information recorded for a process
monitored by the BOS Server. It is defined as follows:
...\'wH UNDEFINED{footnotesize}
.iS
struct bossvr_status{
\&   unsigned32 goal;			/* the short-term goal */
\&   unsigned32 fileGoal;		/* the goal field in file */
\&   unsigned32 procStartTime;		/* last time a process was started */
\&   unsigned32 procStarts;		/* process starts */
\&   unsigned32 lastAnyExit;		/* time process exited, any reason */
\&   unsigned32 lastErrorExit;		/* time process exited unexpectedly */
\&   unsigned32 errorCode;		/* last exit return code */
\&   unsigned32 errorSignal;		/* last proc terminating signal */
\&   unsigned32 flags;			/* status flags (see below) */
\&   unsigned32 spare1;
\&   unsigned32 spare2;
\&   unsigned32 spare3;
\&   unsigned32 spare4;
\&   unsigned32 spare5;
\&   unsigned32 spare6;
\&   unsigned32 spare7;
\&   unsigned32 spare8;
};
.iE
.PP
The \*Lgoal\*O field gives the
short-term goal (a value of 1 means run this process, a value
of 0 (zero) means do not run this process)
for the specified process. The \*LfileGoal\*O field
gives the permanent goal for this collection; this field usually has the same
value as the \*Lgoal\*O field. The \*LprocStartTime\*O field gives the
time that the BOS Server last started the process,
and the \*LprocStarts\*O field gives the total number of times the BOS Server
has started this process since the BOS Server began running.
.PP
The \*LlastAnyExit\*O field gives the time that a process exited for any
reason, while the \*LlastErrorExit\*O field gives the time that a process
exited not in response to a request from the BOS Server.
.PP
The \*LerrorCode\*O field gives the exit return code from the last
process exit, and, if this return code indicates that the process was
terminated due to an uncaught signal, the uncaught signal is provided
in \*LerrorSignal\*O. The \*Lflags\*O field is one of the following:
...\'wH UNDEFINED{footnotesize}
.iS
const BOSSVR_HASCORE = 1;		/* core file exists */
const BOSSVR_ERRORSTOP = 2;		/* stopped due to too many errors */
const BOSSVR_BADDIRACCESS = 4;	/* bad mode bits */
.iE
.PP
No authorization is required to execute this routine.
.br
.ne 1.5i
.SH "ERRORS"
...\'wH NOT_HANDLED{hspace{.15 in}}
.VL 6.5m
...\'wH UNDEFINED{tightenlist}
.LI "\*LBZNOENT\*O"
The bnode instance specified does not exist.
.LI "\*LBZ_ERROR_INTERNAL_ERROR\*O"
An unexpected internal error occurred; check the BOS Server log.
.LE
.br
.ne 1.1i
.SH "RELATED INFORMATION"
...\'wH NOT_HANDLED{hspace{.15 in}}
.ad l
.PP
Functions:
\*LBOSSVR_CreateBnode(3dfs), BOSSVR_DeleteBnode(3dfs),
BOSSVR_EnumerateInstance(3dfs), BOSSVR_GetInstanceParm(3dfs)\*O.
.ad b
