%!PS-Adobe-
%%DocumentFonts: (atend)
%%Endcomments
%%%%%%%%%%%%%%%%%%%%%%%%%
%	PS macros
%%%%%%%%%%%%%%%%%%%%%%%%%
/bdf {bind def} bind def
/xdf {exch def} bdf
/ldd {load def} bdf
/msg { print (\n) print flush} bdf

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%	global constants and variables
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%
%	Version
%
/PS_MAJOR	4 def	%Nov 3, 1987
/PS_MINOR	0 def	%Nov 3, 1987
/PS_SUB	0 def	%Nov 3, 1987

%
%	Drawing modes
%
/PL_SET 	0 def		%ink black
/PL_CLEAR	1 def		%ink white
/PL_XOR		2 def		%ink by xor'ing source onto page - can PS do it?
/PL_REPLACE	3 def		%ink by replacing, e.g. overlayed bitmaps

%
%	 Default global PS state 
%
/drawmode	PL_SET def	%default is ink black
/docutmark	false def	%should cropping marks be printed
/invertmatrix [1 0 0 -1 0 0] def

%
%	Font limits
%
/MAXFONT 1024 def
/MAXFONT1 MAXFONT 1 sub def
/MAXCHARS 128 def	%per font
/MAXCHARS1 MAXCHARS 1 sub def
/VMHEADROOM 1000 def
/BOGUSWIDTH -1 def

%%%%%%%%%%%%%%%%%%%%%%%%%
%	Memory Defs
%%%%%%%%%%%%%%%%%%%%%%%%%
/mesg 64 string def
/charname 12 string def
/istr 3 string def
/ILEncoding 256 array def	% New global Encoding vector.
/ILSymBEnc 256 array def	% SymbolB Encoding vector.
/trashheap 1024 string def
/emsg1 256 string def
/emsg2 256 string def

%
%%%%%%%%%%%%%%%%%%%%%%%%%
%	Job Utilities
%%%%%%%%%%%%%%%%%%%%%%%%%
/inch {72 mul} bdf

%/headerpage {
%  %assumes standard PS state
%  /y 11 def
%  /nl {/y y .33 sub def 1 inch y inch moveto } bdf
%  /#copies 1 def
%  /Helvetica-Bold /ILhelvb ILEncoding ReEncode
%  /ILhelvb findfont 18 scalefont setfont
%  nl nl nl
%  /nhlines hline length def
%  nhlines 25 gt 
%    {
%      /lim nhlines 26 sub def 
%      hline lim ((        ...)) put
%    }
%    { 
%      /lim 0 def
%    }
%  ifelse
%  nhlines 1 sub -1  lim { 
%   hline exch get show nl
%  } for
%  /Helvetica findfont 8 scalefont setfont
%  1 inch 1 inch moveto 
%  (pl2ps )show PS_SUB PS_MINOR PS_MAJOR vershow
%  emsg1 0 get 0 ne { 1 inch .75 inch moveto emsg1 show } if
%  emsg2 0 get 0 ne { 1 inch .5 inch moveto emsg2 show } if
%} bdf

%/logme {
%  (\tInterleaf::pl2ps ) print
%  PS_SUB PS_MINOR PS_MAJOR verprint
%  /nllines lline length def
%  nllines 5 gt 
%    {
%      /lim nllines 5 sub def 
%    }
%    { 
%      /lim 0 def
%    }
%  ifelse
%  nllines 1 sub -1  lim { 
%    (\tInterleaf::) print lline exch get print (\n) print
%  } for
%  flush 
%} bdf

%/verprint {
%  10 mesg cvrs print (.) print 
%  10 mesg cvrs print (.) print 
%  10 mesg cvrs print (\n) print
%} bdf
%/vershow {
%  10 mesg cvrs show (.) show 
%  10 mesg cvrs show (.) show
%  10 mesg cvrs show 
%} bdf
    
%/versioncheck {
%  /PL_MAJOR xdf
%  /PL_MINOR xdf
%  /PL_SUB xdf
%  /doheader userdict /lline known def
%  PL_MAJOR PS_MAJOR ne 
%  PL_MINOR PS_MINOR ne or
%  PL_SUB PS_SUB ne or {
%    doheader {logme } if
%    (\tInterleaf:: FATAL ERROR: pspro.ps and pl2ps versions do not agree.) msg
%    (\tInterleaf:: pspro.ps version: \t) print
%    PS_SUB PS_MINOR PS_MAJOR verprint
%    (\tInterleaf:: pl2ps version: \t) print
%    PL_SUB PL_MINOR PL_MAJOR verprint
%    flush 
%    doheader {headerpage } if
%    ( FATAL ERROR. pspro version ) show
%   PS_SUB PS_MINOR PS_MAJOR vershow
%    ( does not agree with pl2ps version ) show 
%    PL_SUB PL_MINOR PL_MAJOR vershow
%    showpage
%    quit 
%  } if
%} bdf

%
%%%%%%%%%%%%%%%%%%%%%%%%%
%	Graphics
%%%%%%%%%%%%%%%%%%%%%%%%%
/sw /setlinewidth ldd
/m { /vpos xdf /hpos xdf } bdf %record pl current point, in rsu
/v { /vpos xdf } bdf
/h { /hpos xdf } bdf
/pm /moveto ldd
/as /lineto ldd % add segment 
/av /moveto ldd % add vertex 
%
% startangle endangle xradius yradius rotation xcenter ycenter el
%
/el {
  matrix currentmatrix 8 1 roll % save the CTM
  translate rotate scale
  0 0 1 5 -2 roll arc
  setmatrix 			% restore CTM
} bdf

%
% startangle endangle clockwise xrad yrad rotation xcenter ycenter addconic
%
/addconic {
  matrix currentmatrix 9 1 roll	% save the CTM
  translate rotate scale
  0 0 1 6 -3 roll 1 eq {arc} {arcn} ifelse
  setmatrix			% restore CTM
} bdf

%
%	Draw current path
%
/dp40 {
  1 setlinejoin 		% round line ends  
  1 setlinecap 			% round line ends
  setgray
  stroke  
} bdf 

/dp {
  gsave
  1 setlinejoin                 % round line ends
  1 setlinecap                  % round line ends
  drawmode PL_CLEAR eq {1} {0} ifelse setgray %only support two modes
  stroke
  grestore
} bdf

%
%	Pen pattern routines
%
/ALIGN_NONE 0 def
/ALIGN_OPEN 1 def
/ALIGN_CLOSE 2 def
/PENPATWIDTHADJ [0 0 4 8 12 16 20] def	% WARNING these values are derived 
					% by scaling widthadj[], defined
					% in /usr/xops/lib/crt/scr/pens.c,
					% by the same factor (.4) that the
					% pen patterns were scaled when
					% sent to printerleaf.
/MINSCALE .1 def			% Do not scale pen pattern below 10%
					% of original size.
% 
% Calulates length of current path. Ala cookbook.
%
/pathlength { 0 begin
    flattenpath				% changes all curveto's to lineto's
    /dist 0 def

    { /yfirst xdf /xfirst xdf
      /ymoveto yfirst def /xmoveto xfirst def}
    { /ynext xdf /xnext xdf
      /dist dist ynext yfirst sub dup mul
	xnext xfirst sub dup mul add sqrt add def
      /yfirst ynext def /xfirst xnext def}
    {}

    { /ynext ymoveto def /xnext xmoveto def
      /dist dist ynext yfirst sub dup mul
	xnext xfirst sub dup mul add sqrt add def
      /yfirst ynext def /xfirst xnext def}
    pathforall
    dist
    end
} bdf
/pathlength load 0 7 dict put

/setpenpat { 0 begin		% define penpattern dictionary
    /style xdf			% alignment style 
    /width xdf
    /pattern xdf

    % 
    % Adjust pattern for various pen widths.
    %
    /scaleup DPIx 300 div def		% Seybold hack!!!!
    /indx width 1 add scaleup div 4 div cvi def	% Change width into an index
    indx 1 gt indx 7 lt and {
	/adj PENPATWIDTHADJ indx get def% Get ajustment for specified pen width
	/adj adj scaleup mul def	% from predefined array PENPATWIDTHADJ
					% and scale up to the resolution.
	/indx 0 def
	pattern {
	    /iszero indx 2 mod def	% Add ajustment for pen width
	    iszero 0 ne			% to just "off" phases of pattern.
		{adj add /val xdf}
		{/val xdf}
	    ifelse
	    pattern indx val put
	    /indx indx 1 add def
	} forall
    } if

    %
    % Align pattern to pathlength.
    %
    /offset 0 def
    /patternlen 0 def
    /pathlen pathlength def		% Computes path length.
    pattern				% Compute total len of repeating pattern
	{patternlen add /patternlen xdf
	} forall

    style ALIGN_NONE eq {
    } if
    style ALIGN_CLOSE eq {		% from /usr/xops/lib/crt/scr/pens.c
	/n pathlen patternlen div cvi def
	/extralen pathlen cvi patternlen cvi mod def
	/halfpatlen patternlen 2 div def
	extralen halfpatlen gt {/n n 1 add def} if
	n 0 eq {/n 1 def} if
	/scale1 pathlen n patternlen mul div def
	scale1 MINSCALE gt {
	    /indx 0 def
	    pattern {
		scale1 mul /val xdf
		val 0 eq {/val 1 def} if
		pattern indx val cvi put
		/indx indx 1 add def
	    } forall
	} if
	/offset pattern 0 get 2 div round def
    } if
    style ALIGN_OPEN eq {		% from /usr/xops/lib/crt/scr/pens.c
	/firstdash pattern 0 get def
	/dashpct firstdash patternlen div def
	/n pathlen patternlen div dashpct sub cvi def
	/scale1 pathlen n dashpct add patternlen mul div def
	/scale2 pathlen n dashpct add 1 add patternlen mul div def
	/x scale2 1 sub abs def
	/y scale1 1 sub abs def
	x y lt {/scale1 scale2 def} if
	scale1 MINSCALE gt {
	    /indx 0 def
	    pattern {
		scale1 mul /val xdf
		val 0 eq {/val 1 def} if
		pattern indx val cvi put
		/indx indx 1 add def
	    } forall
	    /offset 0 def
	} if 
    } if

    pattern offset setdash
    end
} bdf
/setpenpat load 0 50 dict put

%
%%%%%%%%%%%%%%%%%%%%%%%%%
%	Text handling
%%%%%%%%%%%%%%%%%%%%%%%%%
/s { 
  /msp xdf
  /stEnd xdf
  /nsp xdf
  /fstr xdf

  hpos vpos moveto
  msp -1 ne
    {stEnd hpos sub fstr stringwidth pop sub nsp div 0 msp fstr widthshow}
    {fstr show}
  ifelse
  /hpos stEnd def	%adjust idea of current point
} bdf

%
%%%%%%%%%%%%%%%%%%%%%%%%%
%	Images
%%%%%%%%%%%%%%%%%%%%%%%%%
/ilr {
  binary_mode
    {
     readstring
     }
    {
     readhexstring
    } ifelse
} bdf

/PL_bitmap { 0 begin
  gsave
  /vpix xdf
  /hpix xdf

  /nbytes hpix 15 add 16 idiv 2 mul def
  /picstr nbytes string def
  hpos vpos translate
  nbytes 8 mul vpix false [1 0 0 1 0 0 ] 
  {currentfile picstr 0 nbytes getinterval ilr pop}
    imagemask
  grestore
  end
} bdf
/PL_bitmap load 0 4 dict put

/PL_contone { 0 begin
   gsave
  /nbits xdf
  /vpix xdf
  /hpix xdf

  /nbytes hpix nbits mul 15 add 16 idiv 2 mul def
  /picstr nbytes string def
  hpos vpos translate
  hpix vpix nbits [1 0 0 1 0 0] 
  {currentfile picstr 0 nbytes getinterval ilr pop }
    image
  grestore
  end
} bdf
/PL_contone load 0 5 dict put

/PL_image { 0 begin
  gsave
  /ho xdf	% upper left corner of image.
  /vo xdf	%
  /hh xdf	% Transformed upper right corner relative
  /vh xdf	% to upper left corner.
  /hv xdf	% Transformed lower left corner relative
  /vv xdf	% to upper left corner.
  /nbits xdf	% depth
  /vpix xdf	% height
  /hpix xdf	% width
  /scfrq xdf	% screen frequency
  /scang xdf	% screen angle
  /mapsz xdf	% PL_MAP data size
  /map xdf	% PL_MAP data

  mapsz 0 ne
  {
    /mapsz mapsz 1 sub def
    {map exch mapsz mul round cvi get} settransfer
  } if 
  scfrq 0 ne scang 0 ne and {
    scfrq scang currentscreen 3 1 roll pop pop setscreen
  } if
  %
  % allocate the largest amount of memory avail for reading image data...
  %
  /availmem vmstatus exch sub exch pop def
  /datasize hpix nbits mul 7 add 8 idiv vpix mul def 
  availmem 65535 gt {
    /availmem 65535 def 
  } if
  datasize availmem lt
  {
    /picstr datasize string def
  } {
    /picstr hpix nbits mul 7 add 8 idiv string def 
  } ifelse
  ho vo translate
  [hh vh hv vv 0 0] concat
  nbits 1 eq mapsz 0 eq and{
    hpix vpix false [hpix 0 0 vpix 0 0]
    {currentfile picstr ilr pop }
      imagemask
  } {
    hpix vpix nbits [hpix 0 0 vpix 0 0]
    {currentfile picstr ilr pop }
      image
  } ifelse
  grestore
  end
} bdf
/PL_image load 0 16 dict put

%
%%%%%%%%%%%%%%%%%%%%%%%%%
%	FONT GOODIES
%%%%%%%%%%%%%%%%%%%%%%%%%
%
%	ReEncodeSubset -map character set a'la Interleaf
%	
%	snarfed from PS manual, example 22
%	At the moment, it seems like all overlays will start at char 0,
%		but we might as well be general
/reencodesubdict 12 dict def
/ReEncode {
%
%	Copy basefontdict into newfont except for the FID entry.
%	First create a new font dictionary the size of basefontdict
%	plus 2 for a FID entry which definefont will provide.
%
  reencodesubdict begin
  /newencoding xdf
  /newfontname xdf
  /basefontname xdf
	
  /basefontdict basefontname findfont def
  /newfont basefontdict maxlength 2 add dict def
  basefontdict { 		% Copy basefontdict to newfont 
    exch dup /FID ne {		% except for the FID entry.
      exch newfont 3 1 roll put	% Copy entry into newfont.
    } {
      pop pop			% Remove entry from stack if equal FID.
    } ifelse
  } forall
  newfont /FontName newfontname put
  newencoding -1 ne {
    newfont /Encoding newencoding put
  } if
  newfontname newfont definefont pop
  end
} bdf

%
%	Now make a global Encoding vector
%
/insertcharnum { 0 begin	% Put /char# into entry i
  /encoding xdf			% of new encoding vector as
  /i xdf			% character names.

  (char) charname copy pop
  i istr cvs pop
  charname 4 istr  putinterval
  encoding i charname cvn  put
  end
} bdf
/insertcharnum load 0 2 dict put

ILEncoding 0
[
/Aacute /Acircumflex /Adieresis /Agrave /Aring /Atilde /Ccedilla /Eacute
/Ecircumflex /Edieresis /Egrave /Iacute /Icircumflex /Idieresis /Igrave /Ntilde
/Oacute /Ocircumflex /Odieresis /Ograve /Otilde /Scaron /Uacute /Ucircumflex
/Udieresis /Ugrave /Ydieresis /Zcaron /char28 /char29 /char30 /char31
/space /exclam /quotedbl /numbersign /dollar /percent /ampersand /quoteright
/parenleft /parenright /asterisk /plus /comma /hyphen /period /slash
/zero /one /two /three /four /five /six /seven
/eight /nine /colon /semicolon /less /equal /greater /question
/at /A /B /C /D /E /F /G
/H /I /J /K /L /M /N /O
/P /Q /R /S /T /U /V /W
/X /Y /Z /bracketleft /backslash /bracketright /asciicircum /underscore
/quoteleft /a /b /c /d /e /f /g
/h /i /j /k /l /m /n /o
/p /q /r /s /t /u /v /w
/x /y /z /braceleft /bar /braceright /asciitilde /quotedblleft
/aacute /acircumflex /adieresis /agrave /aring /atilde /ccedilla /eacute
/ecircumflex /edieresis /egrave /iacute /icircumflex /idieresis /igrave /ntilde
/oacute /ocircumflex /odieresis /ograve /otilde /scaron /uacute /ucircumflex
/udieresis /ugrave /ydieresis /zcaron /char156 /char157 /char158 /char159
/char160 /exclamdown /cent /sterling /fraction /yen /florin /section
/currency /quotesingle /quotedblleft /guillemotleft /guilsinglleft /guilsinglright /fi /fl
/char176 /endash /dagger /daggerdbl /periodcentered /char181 /paragraph /bullet
/quotesinglbase /quotedblbase /quotedblright /guillemotright /ellipsis /perthousand /char190 /questiondown
/char192 /grave /acute /circumflex /tilde /macron /breve /dotaccent
/dieresis /char201 /ring /cedilla /char204 /hungarumlaut /ogonek /caron
/emdash /char209 /char210 /char211 /char212 /char213 /char214 /char215
/char216 /char217 /char218 /char219 /char220 /char221 /char222 /char223
/char224 /AE /char226 /ordfeminine /char228 /char229 /char230 /char231
/Lslash /Oslash /OE /ordmasculine /char236 /char237 /char238 /char239
/char240 /ae /char242 /char243 /char244 /dotlessi /char246 /char247
/lslash /oslash /oe /germandbls /char252 /char253 /char254 /char255
] putinterval
%
%	Create a dictionary entry in "fontmap" indexed by
%	PL fontnames with PS names and sizes as entries
%	a call is of the form:    /timsps10 /ILtims 10 map
%
/map {
  2 dict begin
  /pssize xdf
  /psname xdf
  fontmap exch currentdict put	% install it, PL_name is the index
  end
} bdf

%
%	FONTWARE FRACTIONAL POINTSIZE HACK
%	This is a dictionary with one entry -- the current pointsize.
%	setcurrsize sets this size during each declaration of a down-
%	loaded font. It is subsequently referenced in the BuildChar
%	routines of Fontware outlines hacked for fractional pointsizes.
%
/currsize 1 dict def
/setcurrsize { currsize begin /val xdf end } bdf

%
%	Symbol_B character encoding vector. Encodes IL char num to PS
%	symbol names.
%
ILSymBEnc 32
[
/space /logicalor /arrowright /arrowdblleft /arrowdblup 
/arrowdblright /lozenge /arrowhorizex /angleleft /registersans
/Upsilon1 /plusminus /second /angle /greaterequal
/radical /ellipsis /Ifraktur /spade /lessequal
/minute /degree /fraction /florin /infinity
/approxequal /integral /propersuperset /parenrightbt /arrowup
/bracketrighttp /aleph /arrowdblboth /bracerightbt /integralbt
/notsubset /bracketleftbt /trademarksans /bracelefttp /braceleftmid
/braceleftbt /bracketlefttp /braceex /apple /angleright
/parenrightex /parenrighttp /arrowdown /divide /element
/summation /bracketleftex /parenlefttp /parenleftbt /dotmath
/copyrightsans /integralex /parenleftex /integraltp /registerserif 
/intersection /trademarkserif /arrowdbldown /gradient /logicalnot
/reflexsubset /equivalence /propersubset /partialdiff /arrowboth
/circlemultiply /heart /bracketrightex /bracerightmid /emptyset
/bracketrightbt /Rfraktur /proportional /reflexsuperset /carriagereturn
/notequal /notelement /diamond /club /bracerighttp
/arrowleft /weierstrass /bullet /circleplus /multiply
/arrowvertex /copyrightserif /union /product /logicaland
] putinterval
0 1 32 {ILSymBEnc insertcharnum } for
127 1 255 {ILSymBEnc insertcharnum } for

/declareFont { 0 begin
    /PLnum xdf
    /PLname xdf 

    { % if useNativeFont
    	PSfontobj PLnum
           fontmap PLname get dup 
	    /psname get findfont 
	    invertmatrix makefont exch
	%	FONTWARE FRACTIONAL POINTSIZE HACK
	%   ORIGINAL CODE:
	%   /pssize get DPIx 72 div mul scalefont 
	%   HACK CODE:
	    /pssize get dup setcurrsize DPIx 72 div mul scalefont
	put
    } { % else NonNativeFont
	PSfontobj PLnum % into the Plnum'th object make a dictionary:
	10 dict dup begin
	    /FontType 3 def
	    % scale 300 dpi downloaded fonts to target resolution (1270/300).
	    /FontMatrix [DPIx 300 div 0 0 DPIy 300 div 0 0] def
	    /FontBBox [0 0 0 0] def	%updated by LoadGlyph
	    /Encoding ILEncoding def
	    /BuildChar { 0 begin
		/char xdf
		/fontdict xdf
		/charname fontdict /Encoding get char get def
		/charinfo fontdict /CharData get charname get def
		/wx charinfo 0 get def
		charinfo 0 get BOGUSWIDTH eq 
		{puterrchar} 
		{ /charbbox charinfo 1 4 getinterval def
		  wx 0 charbbox aload pop setcachedevice	
		  charinfo 5 get charinfo 6 get true
		  fontdict /imagemaskmatrix get
		    dup 5 charinfo 8 get put
		    dup 4 charinfo 7 get  put
		  charinfo 9  get
		  imagemask
		}ifelse
	    end %BuildChar dict
	    }def %BuildChar
	    /BuildChar load 0 7 dict put
	    /imagemaskmatrix [1 0 0 1 0 0] def %scale factors irrelevant
	    /CharData MAXCHARS dict def	% CharData is built by LoadGlyph.
	end %font dictionary defn
	PLname exch definefont  put

	%load a bogus space character in case no one does
	PSfontobj PLnum get /CharData get 
		/space [16 0 0 1 1 16 1 0 0 [<00>] cvx ] put
    } ifelse % useNativeFonts
    end
} def
/declareFont load 0 3 dict put

/numLoadEmptyGlyph { 0 begin
	% by number, load font data for char with width but no bits
	/charno xdf
	/fontno xdf
	/w xdf
	w fontno PSfontobj fontno get /Encoding get charno get
	LoadEmptyGlyph
	end
} bdf
/numLoadEmptyGlyph load 0 3 dict put

/LoadEmptyGlyph { 0 begin
	% by name, load font data for char with width but no bits
	
	/charname xdf
	/fontno xdf
	/w xdf
	PSfontobj fontno get  /CharData get
	    charname [w 0 0 1 1 w 1 0 0 [<00>] cvx ] put
	end
} bdf
/LoadEmptyGlyph load 0 3 dict put

/puterrchar {
	PSfontobj errfontno  get dup 
	/BuildChar get  errcharno exch exec 
	(\tInterleaf::out of VM loading bitmap (?). Try breaking up document\n) 
		dup print flush
	emsg1 copy pop
} bdf

/timeToQuit {
%	initialstate restore
	(\tInterleaf::completely out of memory. \n\tTry breaking up the document \n) 
		dup print flush
	emsg2 copy pop
%	headerpage showpage
	stop
} bdf

/LoadGlyph { 0 begin
	% load a glyph into the CharData entry of PSFontobj[fontno]
	% the entry is in the position implied by charno
	% and with the metrics height, width, lsb

	/charno xdf
	/fontno xdf
	/height xdf
	/vadj xdf
	/width xdf
	/hsize xdf
	/lsb xdf

	/noVMHEADROOM vmstatus exch sub exch pop dup
		VMHEADROOM 2 idiv lt {timeToQuit} if
		VMHEADROOM lt 
		{true } {false} ifelse def
	/nbytes hsize 15 add 16 idiv 2 mul height mul def	
	noVMHEADROOM not  {/glyph nbytes string def } if
	currentfile noVMHEADROOM 
		{trashheap 0 nbytes getinterval } {glyph} ifelse 
		readhexstring pop pop
	
	   %actually, we pass bitmap rounded to 16 bits wide:
	/hsize hsize 15 add 16 idiv 16 mul def
	
	/thefont PSfontobj fontno get	def %the font dict
		% if we are loading glyphs, PSfontobj is an array of
		% dictionaries each of which already has the form
		% of Program 21, PS T&C
	/charname thefont /Encoding get charno get def %access by name !

	%now make the parameters for the CharData
	% 1 unit = 1 pixel
	
		
	/tx lsb  neg def
	/ty vadj neg def
	/lly  height vadj add def	%lower left of bbox
	/llx  lsb def
	/urx hsize lsb add def %upper right
	/ury vadj def
	thefont /CharData get charname 
	    noVMHEADROOM
	    { [BOGUSWIDTH] }
	    {[width llx lly urx ury hsize height tx ty [glyph] cvx ]} ifelse
	put
	end
} bdf
/LoadGlyph load 0 20 dict put

/sf { PSfontobj exch get setfont } bdf

%
%%%%%%%%%%%%%%%%%%%%%%%%%
%	FILL PATTERNS
%%%%%%%%%%%%%%%%%%%%%%%%%
%
%	Fill patterns by clipping a rectangle filled with characters
%
%	IL patterns are presently on 32x32 tiles, even if there is a subtile
%	which would define the whole pattern. However, we attempt generality
%	here grayArray determines whether to use grayscale for some patterns
%	even if not using native patterns
%
/patternstring	1 string def
/grayArray [	%indexed by position in IL pattern font, -1 means not grayscale 
		% others are fraction of  WHITE
	-1	-1	-1	-1	-1	-1	-1	-1
	-1	-1	-1	-1	-1	1	.92	.8	
	.65	0	.5	.35	.2	] def
/patgrayArray [ %when using grayscale as complete simulation
	0	.12	.22	.32	.42	.52	.62	.72
	.82	.92	.17	.27	.37	1	.92	.8	
	.65	0	.5	.35	.2	] def

%
%	THE APPLICATION CALLS:
%
/fillpatset40 {			% fillpatset for 4.0
    /patchar xdf
    /pfindex xdf
    /patIsGray false def	% tining is done by color lib
} bdf

/fillpatset {			% fnum patchar fillpatset
    /patchar xdf		% selects pattern ch in font fnum
    /pfindex xdf
    patgraylevel dup 0 ge {	% The extra call to patgraylevel
	/patIsGray true def	% is needed because PS computes
	/patgray xdf		% both operands of an "and" operator
    } {				% even if the first is false.
	pop /patIsGray false def
    } ifelse
} bdf

/fp {
    /useNativePattern xdf

    gsave
    pfindex 0 eq patchar 0 eq and {		% special case 
	/patIsGray true def
	/patgray 0 def
    } if

    patIsGray {
	/oldgray currentgray def
	patgray setgray
	eofill
	oldgray setgray
    } {
	useNativePattern {			% native non gray fill patterns
	    patchar 0 showpattern
	} {
	    currentfont 
	    PSfontobj pfindex get setfont
	    pfill
	    dup null ne {setfont} {pop} ifelse
	} ifelse
    } ifelse
    grestore
} bdf

%
%	Private implementation procedures
%

%	Before invoking pfill, you must have set the pattern
%	font as the current font.
%	pfill will cause a newpath, just as do fill and stroke.
%
/pfill {
  gsave 1 setgray eofill grestore % must fill on white
  setupfactors setupregion blastchars
  newpath
} bdf

/setupfactors {
  0 setgray
  [] 0 setdash
  patternstring 0 patchar put
  patternstring stringwidth pop /paty exch def /patx paty def
} bdf

/setupregion {
  eoclip	
  pathbbox
    /ry exch floor  def
    /rx exch floor  def
    /ly exch ceiling cvi
      dup 0 lt{paty sub}if cvi		%We need (lx,ly) modulo (patx,paty)
      dup paty ceiling cvi mod  sub  def	%in device space coords.
    /lx exch ceiling cvi
      dup 0 lt{patx sub}if cvi
      dup patx ceiling cvi mod  sub  def

    /ry ry paty add def		%we are painting downwards as positive
    /ly ly paty sub def

  newpath
} bdf

/blastchars {
  /#chars  rx lx sub patx div ceiling cvi  def
  ly paty ry  {
    lx exch moveto
    #chars{ patternstring show} repeat
  }for
} bdf

/patgraylevel {
  patchar grayArray length ge {
    -1
  } {
    grayArray patchar get
  } ifelse
} bdf

% 
%	Non gray Native fill pattern. Right out of the PS cook book page 192.
%
/setuserscreendict 22 dict def
setuserscreendict begin
 /tempctm matrix def
 /temprot matrix def
 /tempscale matrix def

 /concatprocs
  {/proc2 exch cvlit def
   /proc1 exch cvlit def
   /newproc proc1 length proc2 length add
    array def
   newproc 0 proc1 putinterval
   newproc proc1 length proc2 putinterval
   newproc cvx
  } bdf

  /resmatrix matrix def
  /findresolution
   {72 0 resmatrix defaultmatrix dtransform
    /yres xdf /xres xdf
    xres dup mul yres dup mul add sqrt
   } bdf
end

/setuserscreen
{setuserscreendict begin
   /spotfunction xdf
   /screenangle xdf
   /cellsize xdf

   /m tempctm currentmatrix def
   /rm screenangle temprot rotate def
   /sm cellsize dup tempscale scale def

   sm rm m m concatmatrix m concatmatrix pop
   1 0 m dtransform /y1 xdf /x1 xdf
   /veclength x1 dup mul y1 dup mul add sqrt def
   /veclength veclength DPIx 72 div mul def
   /frequency findresolution veclength div def
   /newscreenangle y1 x1 atan def
   m 2 get m 1 get mul m 0 get m 3 get mul sub 0 gt
   {{neg}
    /spotfunction load concatprocs
    /spotfunction xdf
   } if

   frequency newscreenangle /spotfunction load setscreen
  end % setuserscreendict begin
} bdf

/setpatterndict 32 dict def
setpatterndict begin
 /bitison
 {/ybit xdf /xbit xdf
  /bytevalue bstring ybit bwidth mul xbit 8 idiv add get def
  /mask 1 7 xbit 8 mod sub bitshift def
  bytevalue mask and 0 ne
 } bdf
end % setpatterndict begin

/bitpatternspotfunction
{setpatterndict begin
  /y xdf /x xdf
  /xindex x 1 add 2 div bpside mul cvi def
  /yindex y 1 add 2 div bpside mul cvi def
  xindex yindex bitison
  {/onbits onbits 1 add def 1 }
  {/offbits offbits 1 add def 0 }
  ifelse
  end % setpatterndict begin
} bdf
 
/setpattern
 {setpatterndict begin
  /cellsz xdf
  /angle  xdf
  /bwidth xdf
  /bpside xdf
  /bstring xdf

  /onbits 0 def /offbits 0 def
  cellsz angle /bitpatternspotfunction load setuserscreen
  {} settransfer
  offbits offbits onbits add div setgray
  end % setpatterndict begin
 } bdf
   
/showpattern
{/ang xdf
 /patnum xdf

 patternarray patnum get 32 4 ang 72 300 32 div div setpattern
 gsave eofill grestore
} bdf

/patternarray [
<>
<
00000000 60c00030 60c00030 00000000 00000000 060c0003 060c0003 00000000
00000000 3060c000 3060c000 00000000 00000000 03060c00 03060c00 00000000
00000000 003060c0 003060c0 00000000 00000000 0003060c 0003060c 00000000
00000000 c0003060 c0003060 00000000 00000000 0c000306 0c000306 00000000
>
<
00000000 0c000306 0c000306 00000000 00000000 c0003060 c0003060 00000000
00000000 0003060c 0003060c 00000000 00000000 003060c0 003060c0 00000000
00000000 03060c00 03060c00 00000000 00000000 3060c000 3060c000 00000000
00000000 060c0003 060c0003 00000000 00000000 60c00030 60c00030 00000000
>
<
00030c00 00030c00 00000000 00000000 000030c0 000030c0 00000000 00000000
0000030c 0000030c 00000000 00000000 c0000030 c0000030 00000000 00000000
0c000003 0c000003 00000000 00000000 30c00000 30c00000 00000000 00000000
030c0000 030c0000 00000000 00000000 0030c000 0030c000 00000000 00000000
>
<
0030c000 0030c000 00000000 00000000 030c0000 030c0000 00000000 00000000
30c00000 30c00000 00000000 00000000 0c000003 0c000003 00000000 00000000
c0000030 c0000030 00000000 00000000 0000030c 0000030c 00000000 00000000
000030c0 000030c0 00000000 00000000 00030c00 00030c00 00000000 00000000
>
<
00000000 00000707 00000707 00000707 00000000 00007070 00007070 00007070
00000000 00000707 00000707 00000707 00000000 00007070 00007070 00007070
00000000 00000707 00000707 00000707 00000000 00007070 00007070 00007070
00000000 00000707 00000707 00000707 00000000 00007070 00007070 00007070
>
<
00000000 00000000 00000000 00000000 00000000 00000000 00000000 00000000
00000000 00000000 00000000 00000000 00000000 00000000 00000000 00000000
00000000 0e0e0e0e 0e0e0e0e 0e0e0e0e 00000000 e0e0e0e0 e0e0e0e0 e0e0e0e0
00000000 0e0e0e0e 0e0e0e0e 0e0e0e0e 00000000 e0e0e0e0 e0e0e0e0 e0e0e0e0
>
<
cccc0ccc cccc0ccc 00000000 00000000 cccc0ccc cccc0ccc 00000000 00000000
cccc0ccc cccc0ccc 00000000 00000000 00000000 00000000 00000000 00000000
0ccccccc 0ccccccc 00000000 00000000 0ccccccc 0ccccccc 00000000 00000000
0ccccccc 0ccccccc 00000000 00000000 00000000 00000000 00000000 00000000
>
<
88880888 88880888 00000000 00000000 88880888 88880888 00000000 00000000
88880888 88880888 00000000 00000000 00000000 00000000 00000000 00000000
08888888 08888888 00000000 00000000 08888888 08888888 00000000 00000000
08888888 08888888 00000000 00000000 00000000 00000000 00000000 00000000
>
<
00000308 00000308 00040308 00040398 000c01d0 007e01f8 01cb80fc 0309803e
0618802f 06108027 06108063 07100843 03b01843 03e01046 01f018c6 00781c9c
007c07f0 005e0080 004e0180 00c60100 10860100 30860000 208c0000 318c0000
39380002 0fe00002 01000006 0300003f c20000e5 c2000184 40000304 4000030c
>
<
00007618 00003c70 00003fe0 00000f80 00000800 00040800 00041800 000c1000
00081000 007e0000 01db0000 03138000 06138000 06310000 0c200000 0c200010
18600010 18400030 18400020 18c001f8 1880076c 1c810c4e 1d86184e 0f1c18c4
0ff83080 03e03080 02006180 02006100 06006100 04006300 04006200 00007204
>
<
00000180 00000180 00000000 00000000 00000198 00000198 00000000 00000000
00000198 00000198 00000000 00000000 00000198 00000198 00000000 00000000
00000198 00000198 00000000 00000000 19999998 19999998 00000000 00000000
01999998 01999998 00000000 00000000 00000000 00000000 00000000 00000000
>
<
00000400 00000000 00000100 00000180 00000000 00000000 00000190 00000198
00000000 00000000 00000198 00000198 00000000 00000000 00000998 00000998
00000000 00000000 00001998 00019990 40000000 00000000 19999980 09999980
00000000 00000000 01999800 00999000 00000000 00000000 00000000 00000000
>
] def

%
%%%%%%%%%%%%%%%%%%%%%%%%%
%	Page
%%%%%%%%%%%%%%%%%%%%%%%%%
/bop  {/pagestate save def  } bdf
/eop  {docutmark {cutmark} if showpage pagestate restore } bdf %prints N copies

%
% 	Define clipping path
%
/clp {initclip newpath av as as as closepath clip } bdf

%
%	Cutting marks for typsetter paper
%
/cutmark { 0 begin
  /pw DPIx 40 div def		% pen width
  /pw2 pw 2 div def
  /lnx DPIx 4 div def
  /lny DPIy 4 div def

  initclip
  pw sw
  /lnx4 lnx 4 div def
  [lnx lnx4 sub lnx4 2 mul] 0 setdash
  newpath
  pw2 neg pw2 neg translate
  lnx neg 0 av lnx 0 as
  0 lny neg av 0 lny as
  PSpagewidth pw add 0 translate
  lnx neg 0 av lnx 0 as
  0 lny neg av 0 lny as
  0 PSpagelength pw add translate
  lnx neg 0 av lnx 0 as
  0 lny neg av 0 lny as
  PSpagewidth pw add neg 0 translate
  lnx neg 0 av lnx 0 as
  0 lny neg av 0 lny as
  0.0 dp
  end
} bdf
/cutmark load 0 5 dict put
%(pspro.ps version 4.0.0 download complete.\n) print flush
%%EndProlog
%!
%	InterLeaf to Postscript fontname mapping
%
/fontmap 8 dict def
	/Ops6 /ILtims 6 map
	/Ops7 /ILtims 7 map
	/Ops8 /ILtims 8 map
	/timsps10 /ILtims 10 map
	/timsps10b /ILtimsb 10 map
	/timsps14b /ILtimsb 14 map
	/timsps18b /ILtimsb 18 map
	/timsps24b /ILtimsb 24 map
%
%	Create and ReEncode the following fonts.
%
/Times-Roman /ILtims ILEncoding ReEncode
/Times-Bold /ILtimsb ILEncoding ReEncode
%!
% >> pl2ps version 4.0.0
%0 0 4 versioncheck
%/hline 3 array def
%hline 2 (Document: aclfig.doc ) put
%hline 1 (Last saved on: Sat Aug 14 15:27:29 1992 ) put
%hline 0 (Printed on: Sat Aug 14 16:28:44 1992 ) put
%/lline 3 array def
%lline 2 (Document: aclfig.doc ) put
%lline 1 (Last saved on: Sat Aug 14 15:27:29 1992 ) put
%lline 0 (Printed on: Sat Aug 14 16:28:44 1992 ) put
%logme
%letter
/initialstate save def
/PSpagelength 10795 def
/PSpagewidth 13970 def
/DPIx 1270 def /DPIy 1270 def
72 DPIx div 72 DPIy div neg scale
%Set page orientation
90 rotate
13970 neg 10795 neg translate
/PSfontobj 37 array def
/binary_mode false def
bop
0 10795 13970 10795 13970 0 0 0 clp
/drawmode PL_SET def
true /timsps14b 5 declareFont
5 sf
0.0 10636.0 m
0.0 v
16.0 sw
newpath
-90.0000 270.0000 
1186 1863 0.0000 
8133 2795 el
[] 0 setdash
dp
newpath
7370 1186 av
7540 1186 as
dp
newpath
7370 1271 av
7540 1271 as
dp
newpath
6947 1864 av
7116 1864 as
dp
newpath
6947 1948 av
7116 1948 as
dp
true /timsps24b 6 declareFont
6 sf
7201.0 1440.0 m
0 setgray
<2e> 0 7307 -1 s
7116.0 1609.0 m
0 setgray
<2e> 0 7222 -1 s
7031.0 1779.0 m
0 setgray
<2e> 0 7137 -1 s
0.0 0.0 m
newpath
6947 3473 av
7116 3473 as
dp
newpath
6947 3558 av
7116 3558 as
dp
newpath
7031 3812 av
7201 3812 as
dp
newpath
7031 3897 av
7201 3897 as
dp
newpath
7201 4151 av
7370 4151 as
dp
newpath
7201 4236 av
7370 4236 as
dp
newpath
7455 4405 av
7624 4405 as
dp
newpath
7455 4490 av
7624 4490 as
dp
newpath
6862 2118 av
7031 2118 as
dp
newpath
6862 2202 av
7031 2202 as
dp
newpath
10420 2795 av
9488 2795 as
dp
true /Ops6 7 declareFont
0 0 fillpatset
/drawmode PL_REPLACE def
newpath
0.0 sw
/drawmode PL_SET def
10254 2795 av
10254 2795 as
10224 2743 as
10420 2795 as
10224 2848 as
closepath
true fp
newpath
10254 2795 av
newpath
16.0 sw
10254 2795 av
10224 2743 as
10420 2795 as
10224 2848 as
closepath
dp
0.0 sw
newpath
10420 2795 av
closepath
/drawmode PL_REPLACE def
7 15 fillpatset
newpath
16.0 sw
/drawmode PL_SET def
-90.0000 270.0000 
593 932 0.0000 
10759 3558 el
true fp
dp
newpath
10251 4151 av
10420 4151 as
dp
newpath
10251 4236 av
10420 4236 as
dp
newpath
10166 3897 av
10335 3897 as
dp
newpath
10166 3981 av
10335 3981 as
dp
newpath
10505 4490 av
10674 4490 as
dp
newpath
10420 4405 av
10589 4405 as
dp
newpath
11691 3219 av
11369 3219 as
dp
0 0 fillpatset
/drawmode PL_REPLACE def
newpath
0.0 sw
/drawmode PL_SET def
11525 3219 av
11525 3219 as
11494 3166 as
11691 3219 as
11494 3272 as
closepath
true fp
newpath
11525 3219 av
newpath
16.0 sw
11525 3219 av
11494 3166 as
11691 3219 as
11494 3272 as
closepath
dp
0.0 sw
newpath
11691 3219 av
closepath
7 15 fillpatset
/drawmode PL_REPLACE def
newpath
16.0 sw
/drawmode PL_SET def
11691 3219 av
12538 3219 as
12538 3219 as
12538 4405 as
11691 4405 as
closepath
true fp
dp
newpath
11691 3558 av
12538 3558 as
dp
newpath
11691 3897 av
12538 3897 as
dp
newpath
11691 4236 av
12538 4236 as
dp
newpath
12877 3388 av
12538 3388 as
dp
0 0 fillpatset
/drawmode PL_REPLACE def
newpath
0.0 sw
/drawmode PL_SET def
12711 3388 av
12711 3388 as
12680 3336 as
12877 3388 as
12680 3441 as
closepath
true fp
newpath
12711 3388 av
newpath
16.0 sw
12711 3388 av
12680 3336 as
12877 3388 as
12680 3441 as
closepath
dp
0.0 sw
newpath
12877 3388 av
closepath
7 15 fillpatset
/drawmode PL_REPLACE def
newpath
16.0 sw
/drawmode PL_SET def
12877 3219 av
13639 3219 as
13639 3219 as
13639 3643 as
12877 3643 as
closepath
true fp
dp
5 sf
12961.0 3558.0 m
0 setgray
<6461636c5f69> 0 13592 -1 s
0.0 0.0 m
/drawmode PL_REPLACE def
newpath
/drawmode PL_SET def
12877 3981 av
13639 3981 as
13639 3981 as
13639 4405 as
12877 4405 as
closepath
true fp
dp
12961.0 4320.0 m
0 setgray
<6461636c5f6a> 0 13605 -1 s
0.0 0.0 m
newpath
12877 4151 av
12538 4151 as
dp
0 0 fillpatset
/drawmode PL_REPLACE def
newpath
0.0 sw
/drawmode PL_SET def
12711 4151 av
12711 4151 as
12680 4098 as
12877 4151 as
12680 4204 as
closepath
true fp
newpath
12711 4151 av
newpath
16.0 sw
12711 4151 av
12680 4098 as
12877 4151 as
12680 4204 as
closepath
dp
0.0 sw
newpath
12877 4151 av
closepath
11747.0 3727.0 m
0 setgray
<2e2e2e2e2e2e2e2e2e2e2e> 0 12429 -1 s
0.0 0.0 m
16.0 sw
newpath
10251 3219 av
9573 3219 as
dp
/drawmode PL_REPLACE def
newpath
0.0 sw
/drawmode PL_SET def
10085 3219 av
10085 3219 as
10054 3166 as
10251 3219 as
10054 3272 as
closepath
true fp
newpath
10085 3219 av
newpath
16.0 sw
10085 3219 av
10054 3166 as
10251 3219 as
10054 3272 as
closepath
dp
0.0 sw
newpath
10251 3219 av
closepath
16.0 sw
newpath
7031 3812 av
4170 3812 as
dp
/drawmode PL_REPLACE def
newpath
0.0 sw
/drawmode PL_SET def
6865 3812 av
6865 3812 as
6835 3759 as
7031 3812 as
6835 3865 as
closepath
true fp
newpath
6865 3812 av
newpath
16.0 sw
6865 3812 av
6835 3759 as
7031 3812 as
6835 3865 as
closepath
dp
0.0 sw
newpath
7031 3812 av
closepath
16.0 sw
newpath
12877 1016 av
12538 1016 as
dp
/drawmode PL_REPLACE def
newpath
0.0 sw
/drawmode PL_SET def
12711 1016 av
12711 1016 as
12680 964 as
12877 1016 as
12680 1069 as
closepath
true fp
newpath
12711 1016 av
newpath
16.0 sw
12711 1016 av
12680 964 as
12877 1016 as
12680 1069 as
closepath
dp
0.0 sw
newpath
12877 1016 av
closepath
16.0 sw
newpath
12877 1542 av
12538 1542 as
dp
/drawmode PL_REPLACE def
newpath
0.0 sw
/drawmode PL_SET def
12711 1542 av
12711 1542 as
12680 1489 as
12877 1542 as
12680 1594 as
closepath
true fp
newpath
12711 1542 av
newpath
16.0 sw
12711 1542 av
12680 1489 as
12877 1542 as
12680 1594 as
closepath
dp
0.0 sw
newpath
12877 1542 av
closepath
16.0 sw
newpath
12877 762 av
13639 762 as
13639 762 as
13639 1186 as
12877 1186 as
closepath
dp
12961.0 1101.0 m
0 setgray
<6f626a5f69> 0 13495 -1 s
0.0 0.0 m
newpath
12877 1355 av
13639 1355 as
13639 1355 as
13639 1779 as
12877 1779 as
closepath
dp
12961.0 1694.0 m
0 setgray
<6f626a5f6a> 0 13508 -1 s
0.0 0.0 m
7 15 fillpatset
/drawmode PL_REPLACE def
newpath
/drawmode PL_SET def
9996 847 av
12555 847 as
12555 847 as
12555 1694 as
9996 1694 as
closepath
true fp
dp
newpath
9996 1186 av
12538 1186 as
dp
10081.0 1355.0 m
0 setgray
<2e2e2e2e2e2e2e2e2e2e2e2e2e2e2e2e2e> 0 11135 -1 s
0.0 0.0 m
newpath
9996 1440 av
12538 1440 as
dp
newpath
8048 2287 av
9488 2287 as
dp
newpath
9488 2287 av
9488 2795 as
dp
newpath
2457 3304 av
5124 3304 as
dp
0 0 fillpatset
/drawmode PL_REPLACE def
newpath
0.0 sw
/drawmode PL_SET def
2623 3304 av
2623 3304 as
2653 3356 as
2457 3304 as
2653 3251 as
closepath
true fp
newpath
2623 3304 av
newpath
16.0 sw
2623 3304 av
2653 3356 as
2457 3304 as
2653 3251 as
closepath
dp
0.0 sw
newpath
2457 3304 av
closepath
true /timsps10b 8 declareFont
8 sf
10081.0 1101.0 m
0 setgray
<2861636c5f6b65796929636f6d706f6e656e745f6e616d655f69> 0 12283 -1 s
5 sf
11267.0 1355.0 m
0 setgray
<2e2e2e2e2e2e2e2e2e2e2e2e2e2e2e2e2e> 0 12321 -1 s
8 sf
10081.0 1609.0 m
0 setgray
<2861636c5f6b65796a29636f6d706f6e656e745f6e616d655f6a> 0 12303 -1 s
11775.0 4151.0 m
0 setgray
<61636c5f6b65796a> 0 12401 -1 s
0.0 0.0 m
16.0 sw
newpath
10081 3643 av
10251 3643 as
dp
newpath
10081 3727 av
10251 3727 as
dp
5 sf
11860.0 5388.0 m
0 setgray
<5f6c6f6f6b7570> 0 12709 -1 s
11860.0 5625.0 m
0 setgray
<5f7265706c616365> 0 12752 -1 s
11860.0 5913.0 m
0 setgray
<5f6765745f616363657373> 0 13066 -1 s
11860.0 6201.0 m
0 setgray
<5f6765745f7072696e74737472696e67> 0 13573 -1 s
8 sf
10251.0 3304.0 m
0 setgray
<7365635f61636c5f6d67725f> 0 11267 -1 s
10505.0 3558.0 m
0 setgray
<6c6f63616c> 0 10857 -1 s
10505.0 3727.0 m
0 setgray
<61636c> 0 10720 -1 s
10505.0 3897.0 m
0 setgray
<6d616e61676572> 0 11170 -1 s
10505.0 4066.0 m
0 setgray
<636f6465> 0 10847 -1 s
11775.0 3050.0 m
0 setgray
<64625f6e616d65> 0 12470 -1 s
3558.0 7370.0 m
0 setgray
<2e20636f6e6669675f637265617465> 1 4653 32 s
3558.0 7540.0 m
0 setgray
<2e20636f6e6669675f737461626c65> 1 4634 32 s
0.0 0.0 m
newpath
10081 3388 av
10251 3388 as
dp
newpath
10081 3473 av
10251 3473 as
dp
5 sf
10251.0 5100.0 m
0 setgray
<2e207365635f61636c5f6d67725f636f6e666967757265> 1 12802 32 s
0.0 0.0 m
0.0 sw
newpath
8048 4659 av
6947 2795 as
newpath
16.0 sw
6947 2795 av
8048 2795 as
8048 4659 as
dp
newpath
7709 4574 av
7879 4574 as
dp
newpath
7709 4659 av
7879 4659 as
dp
newpath
6862 2880 av
7031 2880 as
dp
newpath
6862 2965 av
7031 2965 as
dp
newpath
6862 3134 av
7031 3134 as
dp
newpath
6862 3219 av
7031 3219 as
dp
0.0 sw
newpath
6947 2541 av
8048 932 as
newpath
16.0 sw
8048 932 av
8048 2541 as
6947 2541 as
dp
8133.0 1525.0 m
0 setgray
<4170706c69632e> 0 8895 -1 s
8133.0 1779.0 m
0 setgray
<536572766572> 0 8833 -1 s
8 sf
7201.0 1864.0 m
0 setgray
<4170706c69632e> 0 7744 -1 s
7201.0 2033.0 m
0 setgray
<536572766572> 0 7699 -1 s
7201.0 2202.0 m
0 setgray
<696e74657266616365> 0 7866 -1 s
7286.0 3134.0 m
0 setgray
<726461636c5f> 0 7765 -1 s
7286.0 3388.0 m
0 setgray
<727063> 0 7540 -1 s
7286.0 3558.0 m
0 setgray
<61636c> 0 7501 -1 s
7286.0 3727.0 m
0 setgray
<6d6772> 0 7599 -1 s
7286.0 3897.0 m
0 setgray
<696e74657266616365> 0 7951 -1 s
0.0 0.0 m
newpath
10166 3558 av
8048 3558 as
dp
/drawmode PL_REPLACE def
newpath
0.0 sw
/drawmode PL_SET def
10000 3558 av
10000 3558 as
9969 3505 as
10166 3558 as
9969 3611 as
closepath
true fp
newpath
10000 3558 av
newpath
16.0 sw
10000 3558 av
9969 3505 as
10166 3558 as
9969 3611 as
closepath
dp
0.0 sw
newpath
10166 3558 av
closepath
5 sf
6947.0 5168.0 m
0 setgray
<726461636c5f6c6f6f6b7570> 0 8345 -1 s
7540.0 5422.0 m
0 setgray
<5f7265706c616365> 0 8432 -1 s
7540.0 6184.0 m
0 setgray
<5f746573745f616363657373> 0 8801 -1 s
7540.0 6438.0 m
0 setgray
<5f746573745f6163636573735f6f6e5f626568616c66> 0 9965 -1 s
7540.0 5642.0 m
0 setgray
<5f6765745f616363657373> 0 8746 -1 s
7540.0 5930.0 m
0 setgray
<5f6765745f7072696e74737472696e67> 0 9253 -1 s
7540.0 6675.0 m
0 setgray
<5f6765745f6d616e616765725f7479706573> 0 9704 -1 s
11860.0 6438.0 m
0 setgray
<5f69735f617574686f72697a6564> 0 13409 -1 s
6777.0 5083.0 m
0 setgray
<2e> 0 6839 -1 s
0.0 0.0 m
16.0 sw
newpath
-90.0376 269.9624 
1016 762 0.0000 
1440 3473 el
dp
newpath
1440 3050 av
1440 4320 as
dp
newpath
1440 3050 av
2287 3050 as
dp
newpath
1355 3219 av
1525 3219 as
dp
newpath
1355 3321 av
1525 3321 as
dp
newpath
1355 3981 av
1525 3981 as
dp
newpath
1355 4066 av
1525 4066 as
dp
newpath
1355 3473 av
1525 3473 as
dp
newpath
1355 3558 av
1525 3558 as
dp
newpath
1355 3727 av
1525 3727 as
dp
newpath
1355 3812 av
1525 3812 as
dp
8 sf
1694.0 3304.0 m
0 setgray
<7365635f61636c5f> 0 2309 -1 s
1694.0 3558.0 m
0 setgray
<636c69656e74> 0 2105 -1 s
1694.0 3727.0 m
0 setgray
<6167656e74> 0 2105 -1 s
1694.0 3897.0 m
0 setgray
<636f6465> 0 2036 -1 s
0.0 0.0 m
7 15 fillpatset
/drawmode PL_REPLACE def
newpath
/drawmode PL_SET def
8217 2033 av
8980 2033 as
8980 2033 as
8980 3897 as
8217 3897 as
closepath
true fp
dp
newpath
5124 3304 av
4170 3812 as
dp
5 sf
4083.0 2795.0 m
0 setgray
<52504361757468> 0 5069 -1 s
0.0 0.0 m
newpath
6862 2202 av
4737 2202 as
dp
0 0 fillpatset
/drawmode PL_REPLACE def
newpath
0.0 sw
/drawmode PL_SET def
6696 2202 av
6696 2202 as
6666 2150 as
6862 2202 as
6666 2255 as
closepath
true fp
newpath
6696 2202 av
newpath
16.0 sw
6696 2202 av
6666 2150 as
6862 2202 as
6666 2255 as
closepath
dp
0.0 sw
newpath
6862 2202 av
closepath
16.0 sw
newpath
3558 1779 av
5413 1779 as
dp
/drawmode PL_REPLACE def
newpath
0.0 sw
/drawmode PL_SET def
3724 1779 av
3724 1779 as
3754 1832 as
3558 1779 as
3754 1726 as
closepath
true fp
newpath
3724 1779 av
newpath
16.0 sw
3724 1779 av
3754 1832 as
3558 1779 as
3754 1726 as
closepath
dp
0.0 sw
newpath
3558 1779 av
closepath
16.0 sw
newpath
5413 1779 av
4737 2202 as
dp
7 15 fillpatset
/drawmode PL_REPLACE def
newpath
/drawmode PL_SET def
8302 7031 av
13724 7031 as
13724 7031 as
13724 8387 as
8302 8387 as
closepath
true fp
dp
8 sf
8472.0 7285.0 m
0 setgray
<416363657373> 0 8969 -1 s
8472.0 7455.0 m
0 setgray
<436f6e74726f6c> 0 9059 -1 s
8472.0 7624.0 m
0 setgray
<506f6c696379> 0 8932 -1 s
8472.0 7794.0 m
0 setgray
<28706572> 0 8785 -1 s
8556.0 7963.0 m
0 setgray
<6f626a656374> 0 9016 -1 s
8556.0 8133.0 m
0 setgray
<7479706529> 0 8938 -1 s
9234.0 7285.0 m
0 setgray
<b120636f6e74726f6c6c65642073686172696e67> 2 10740 32 s
9488.0 7540.0 m
0 setgray
<6f20646973747269627574696f6e206f662070726976696c65676573> 3 11469 32 s
9488.0 7709.0 m
0 setgray
<6f20726576696577206f662070726976696c65676573> 3 11076 32 s
9488.0 7878.0 m
0 setgray
<6f207265766f636174696f6e206f662070726976696c65676573> 3 11370 32 s
9234.0 8133.0 m
0 setgray
<b1206f626a656374206372656174696f6e2f6465737472756374696f6e> 2 11386 32 s
9234.0 8302.0 m
0 setgray
<b12070726f7465637465642073756273797374656d73> 2 10964 32 s
11691.0 7285.0 m
0 setgray
<b12061636365737320617574686f72697a6174696f6e> 2 13343 32 s
5 sf
508.0 5151.0 m
0 setgray
<2e207365635f61636c5f6c6f6f6b7570> 1 2222 32 s
1440.0 5405.0 m
0 setgray
<5f7265706c616365> 0 2332 -1 s
1440.0 5930.0 m
0 setgray
<5f746573745f616363657373> 0 2701 -1 s
1440.0 6184.0 m
0 setgray
<5f746573745f6163636573735f6f6e5f626568616c66> 0 3865 -1 s
1440.0 5676.0 m
0 setgray
<5f6765745f7072696e74737472696e67> 0 3153 -1 s
1440.0 6421.0 m
0 setgray
<5f6765745f6d616e616765725f7479706573> 0 3604 -1 s
1440.0 6658.0 m
0 setgray
<5f72656c6561736520286c6f63616c29> 1 3011 32 s
1440.0 6896.0 m
0 setgray
<5f62696e64> 0 2043 -1 s
1440.0 7133.0 m
0 setgray
<5f64656275675f62696e64202a2a2a2a> 1 3364 32 s
1440.0 7370.0 m
0 setgray
<5f6d757461626c652028636f64653f29> 1 3256 32 s
8 sf
11775.0 3473.0 m
0 setgray
<61636c5f6b657969> 0 12391 -1 s
9512.0 3134.0 m
0 setgray
<61636c5f6b6579> 0 10079 -1 s
9912.0 2372.0 m
0 setgray
<61636c5f6d67725f68616e646c65> 0 11125 -1 s
5 sf
424.0 8387.0 m
0 setgray
<4e6f7465733a> 0 1095 -1 s
593.0 8810.0 m
0 setgray
<282a29> 0 880 -1 s
1017.0 h
0 setgray
<206f74686572207479706573206f66206f626a656374b161636c5f6b6579206173736f63696174696f6e7320657869737420> 7 6055 32 s
1017.0 9149.0 m
0 setgray
<652e672e2c20636f6d706f6e656e745f6e616d6520b13e206f626a65637420b13e2061636c5f69642028696e2072656769737472792073657276657229> 8 7451 32 s
13131.0 5083.0 m
0 setgray
<2a2a> 0 13377 -1 s
593.0 9488.0 m
0 setgray
<282a2a29> 0 1003 -1 s
12555.0 847.0 m
0 setgray
<2a> 0 12678 -1 s
2101.0 6896.0 m
0 setgray
<2a2a2a> 0 2470 -1 s
508.0 9996.0 m
0 setgray
<282a2a2a29> 0 1041 -1 s
1186.0 h
0 setgray
<61636c5f62696e64203d3e> 1 2435 32 s
2457.0 h
0 setgray
<62696e64696e6720746f20287270632061636c206d677220696e746572666163653b20636f6d706f6e656e745f6e616d652920> 7 8046 32 s
0.0 0.0 m
newpath
9149 9319 av
8726 9657 as
dp
0 0 fillpatset
/drawmode PL_REPLACE def
newpath
0.0 sw
/drawmode PL_SET def
9007 9404 av
9007 9404 as
8954 9375 as
9149 9319 as
9008 9465 as
closepath
true fp
newpath
9007 9404 av
newpath
16.0 sw
9007 9404 av
8954 9375 as
9149 9319 as
9008 9465 as
closepath
dp
0.0 sw
newpath
9149 9319 av
closepath
16.0 sw
newpath
9065 10081 av
8726 9827 as
dp
/drawmode PL_REPLACE def
newpath
0.0 sw
/drawmode PL_SET def
8923 9995 av
8923 9995 as
8924 9934 as
9065 10081 as
8869 10024 as
closepath
true fp
newpath
8923 9995 av
newpath
16.0 sw
8923 9995 av
8924 9934 as
9065 10081 as
8869 10024 as
closepath
dp
0.0 sw
newpath
9065 10081 av
closepath
9149.0 9234.0 m
0 setgray
<656e74727920> 1 9773 32 s
0.0 0.0 m
16.0 sw
newpath
10113 8895 av
9742 9149 as
dp
/drawmode PL_REPLACE def
newpath
0.0 sw
/drawmode PL_SET def
9960 8960 av
9960 8960 as
9912 8924 as
10113 8895 as
9953 9021 as
closepath
true fp
newpath
9960 8960 av
newpath
16.0 sw
9960 8960 av
9912 8924 as
10113 8895 as
9953 9021 as
closepath
dp
0.0 sw
newpath
10113 8895 av
closepath
16.0 sw
newpath
10113 9488 av
9742 9234 as
dp
/drawmode PL_REPLACE def
newpath
0.0 sw
/drawmode PL_SET def
9960 9423 av
9960 9423 as
9953 9362 as
10113 9488 as
9912 9459 as
closepath
true fp
newpath
9960 9423 av
newpath
16.0 sw
9960 9423 av
9953 9362 as
10113 9488 as
9912 9459 as
closepath
dp
0.0 sw
newpath
10113 9488 av
closepath
9065.0 10081.0 m
0 setgray
<6f626a656374> 0 9709 -1 s
0.0 0.0 m
16.0 sw
newpath
10166 9742 av
9795 9912 as
dp
/drawmode PL_REPLACE def
newpath
0.0 sw
/drawmode PL_SET def
10004 9780 av
10004 9780 as
9963 9736 as
10166 9742 as
9987 9839 as
closepath
true fp
newpath
10004 9780 av
newpath
16.0 sw
10004 9780 av
9963 9736 as
10166 9742 as
9987 9839 as
closepath
dp
0.0 sw
newpath
10166 9742 av
closepath
16.0 sw
newpath
10166 10166 av
9795 9996 as
dp
/drawmode PL_REPLACE def
newpath
0.0 sw
/drawmode PL_SET def
10004 10127 av
10004 10127 as
9987 10069 as
10166 10166 as
9963 10172 as
closepath
true fp
newpath
10004 10127 av
newpath
16.0 sw
10004 10127 av
9987 10069 as
10166 10166 as
9963 10172 as
closepath
dp
0.0 sw
newpath
10166 10166 av
closepath
10198.0 9064.0 m
0 setgray
<7265736f6c766564> 0 11076 -1 s
10113.0 9403.0 m
0 setgray
<756e7265736f6c766564> 0 11265 -1 s
10166.0 9827.0 m
0 setgray
<7265736f6c766564> 0 11044 -1 s
10166.0 10250.0 m
0 setgray
<756e7265736f6c766564> 0 11318 -1 s
11267.0 8980.0 m
0 setgray
<b13e20635f6e203d20726573696475616c> 3 13079 32 s
11437.0 9403.0 m
0 setgray
<b13e20635f6e203d20726573696475616c2b> 3 13390 32 s
12538.0 9573.0 m
0 setgray
<756e7265735f70617274> 0 13703 -1 s
11267.0 9827.0 m
0 setgray
<b13e20635f6e203d> 2 12166 32 s
0.0 0.0 m
16.0 sw
newpath
12453 9573 av
12284 9912 as
dp
11437.0 10166.0 m
0 setgray
<b13e20635f6e203d20756e7265735f70617274> 3 13563 32 s
1101.0 9573.0 m
0 setgray
<73696e676c652061636c5f6d67722f736572766572203d3e206578706c6963697420636f6e66696720696e666f20697320756e6e656363657373617279> 7 7401 32 s
508.0 10335.0 m
0 setgray
<282a2a2a2a292062696e6420746f207270632061636c206d677220696e746572666163652077697468206e6f206e616d65207265736f6c7574696f6e> 10 6858 32 s
8 sf
8302.0 2541.0 m
0 setgray
<416363657373> 0 8799 -1 s
8302.0 2711.0 m
0 setgray
<436f6e74726f6c> 0 8889 -1 s
8302.0 2880.0 m
0 setgray
<506f6c696379> 0 8762 -1 s
8302.0 3050.0 m
0 setgray
<28706572> 0 8615 -1 s
8387.0 3219.0 m
0 setgray
<6f626a656374> 0 8847 -1 s
8387.0 3388.0 m
0 setgray
<7479706529> 0 8769 -1 s
5 sf
12267.0 9827.0 m
0 setgray
<4f> 0 12459 -1 s
762.0 3219.0 m
0 setgray
<61636c5f> 0 1187 -1 s
678.0 3473.0 m
0 setgray
<65646974> 0 1076 -1 s
593.0 3727.0 m
0 setgray
<636c69656e74> 0 1170 -1 s
1779.0 1609.0 m
0 setgray
<4170706c69632e> 0 2541 -1 s
1779.0 1948.0 m
0 setgray
<436c69656e74> 0 2424 -1 s
0.0 0.0 m
newpath
-90.0423 269.9577 
1016 678 0.0000 
2541 1779 el
dp
newpath
2880 1016 av
2880 2118 as
dp
newpath
2880 2118 av
3389 2118 as
dp
newpath
2796 1355 av
2965 1355 as
dp
newpath
2796 1457 av
2965 1457 as
dp
newpath
2796 1609 av
2965 1609 as
dp
newpath
2796 1694 av
2965 1694 as
dp
newpath
2796 1864 av
2965 1864 as
dp
newpath
2796 1948 av
2965 1948 as
dp
8 sf
3050.0 1694.0 m
0 setgray
<636c69656e74> 0 3461 -1 s
3050.0 1864.0 m
0 setgray
<6167656e74> 0 3461 -1 s
3050.0 2033.0 m
0 setgray
<636f6465> 0 3392 -1 s
0.0 0.0 m
newpath
8980 2152 av
9488 2152 as
dp
newpath
9488 2152 av
9488 1271 as
dp
newpath
9996 1271 av
9488 1271 as
dp
/drawmode PL_REPLACE def
newpath
0.0 sw
/drawmode PL_SET def
9830 1271 av
9830 1271 as
9800 1218 as
9996 1271 as
9800 1323 as
closepath
true fp
newpath
9830 1271 av
newpath
16.0 sw
9830 1271 av
9800 1218 as
9996 1271 as
9800 1323 as
closepath
dp
0.0 sw
newpath
9996 1271 av
closepath
true /timsps18b 9 declareFont
9 sf
2118.0 678.0 m
0 setgray
<4c6f63616c20616e642052656d6f74652041636365737320436f6e74726f6c20696e20444345> 6 7804 32 s
8 sf
2965.0 1101.0 m
0 setgray
<415049> 0 3268 -1 s
0.0 0.0 m
16.0 sw
newpath
1525 1186 av
1525 1779 as
dp
593.0 1271.0 m
0 setgray
<436f6d6d616e6473> 0 1454 -1 s
1355.0 4574.0 m
0 setgray
<415049> 0 1658 -1 s
0.0 0.0 m
newpath
424 3473 av
424 4320 as
dp
339.0 4574.0 m
0 setgray
<436f6d6d616e6473> 0 1200 -1 s
9 sf
424.0 678.0 m
0 setgray
<46696775726520362e312e> 1 1879 32 s
5 sf
7540.0 6947.0 m
0 setgray
<5f6765745f726566657272616c> 0 8925 -1 s
13970.0 10636.0 m
eop
/first_page true def
initialstate restore
%%Trailer
%%DocumentFonts: Times-Roman
%%+ Times-Bold

