%!PS-Adobe-2.0
%%Creator: VAX DOCUMENT V2.0
%%+Copyright 1986,1987,1988,1989,1990,1991 DIGITAL EQUIPMENT CORPORATION.  
%%+All Rights Reserved.
%% ********************************************************************
%%                                                                    *
%% COPYRIGHT (c) 1991 BY DIGITAL EQUIPMENT CORPORATION,               *
%% Maynard, Massachusetts                                             *
%% All Rights Reserved.                                               *
%%                                                                    *
%% This document is furnished under a license and may be used and     *
%% copied only in accordance with the terms of such license and with  *
%% the inclusion of the above copyright notice. No title to or        *
%% ownership of the document is hereby transferred.                   *
%%                                                                    *
%% The information in this document is subject to change without      *
%% notice and should not be construed as a commitment by Digital      *
%% Equipment Corporation.                                             *
%%                                                                    *
%% ********************************************************************
%%DocumentFonts: (atend)
%%Pages: (atend)
%%EndComments
/DEC_DVC$dict where {					%FIND DICTIONARY
  pop
}{ %else
  /DEC_DVC$dict 300 dict def
} ifelse 
/BeginDVC$PSDoc {					%BEGIN DOCUMENT
  vmstatus pop pop 0 eq {
    DEC_DVC$dict begin  InitializeState
  }{ %else
    /DVC$PSJob save def  DEC_DVC$dict begin  InitializeState
    /DVC$PSFonts save def
  } ifelse
} def
/EndDVC$PSDoc {						%END DOCUMENT
% --- Preserving current page count ---
  vmstatus pop pop 0 eq {
    end
  }{ %else
    DVC$PSFonts restore  end  DVC$PSJob restore
  } ifelse
} def
%
DEC_DVC$dict begin
%
mark		% CREATE ISOLatin1Encoding if not there already
/ISOLatin1Encoding
  8#000 1 8#054 {StandardEncoding exch get} for 
  /minus
  8#056 1 8#217 {StandardEncoding exch get} for 
  /dotlessi 
  8#301 1 8#317 {StandardEncoding exch get} for 
  /space /exclamdown /cent /sterling /currency /yen /brokenbar /section 
  /dieresis /copyright /ordfeminine /guillemotleft /logicalnot /hyphen 
  /registered /macron /degree /plusminus /twosuperior /threesuperior /acute 
  /mu /paragraph /periodcentered /cedilla /onesuperior /ordmasculine 
  /guillemotright /onequarter /onehalf /threequarters /questiondown /Agrave 
  /Aacute /Acircumflex /Atilde /Adieresis /Aring /AE /Ccedilla /Egrave /Eacute 
  /Ecircumflex /Edieresis /Igrave /Iacute /Icircumflex /Idieresis /Eth /Ntilde 
  /Ograve /Oacute /Ocircumflex /Otilde /Odieresis /multiply /Oslash /Ugrave 
  /Uacute /Ucircumflex /Udieresis /Yacute /Thorn /germandbls /agrave /aacute 
  /acircumflex /atilde /adieresis /aring /ae /ccedilla /egrave /eacute 
  /ecircumflex /edieresis /igrave /iacute /icircumflex /idieresis /eth /ntilde
  /ograve /oacute /ocircumflex /otilde /odieresis /divide /oslash /ugrave 
  /uacute /ucircumflex /udieresis /yacute /thorn /ydieresis 
  /ISOLatin1Encoding where not {256 array astore def} if 
cleartomark
%
/DOCPSE ISOLatin1Encoding 256 array copy def 
mark						% CREATE DOCPSE ENCODING
  8#055 /hyphen
  8#201 /bullet    8#202 /emdash     8#203 /endash    8#204 /dagger
  8#205 /daggerdbl 8#206 /registered 8#207 /trademark %8#210 /Delta
  8#211 /fi        8#212 /fl         8#213 /OE        8#214 /oe
  8#215 /Ydieresis
  counttomark -1 bitshift			% DIVIDE BY 2
  {DOCPSE 3 1 roll put} repeat			% STACK NOW CONTAINS MARK
cleartomark
%
/reencodedict 10 dict def			%Local storage for "ReENCODE"
/ReENCODE {		% /basefont /newfont encoding ReENCODE
    /newencoding exch def	%ARG: NAME OF ENCODING VECTOR
    /newfontname exch def	%ARG: NEW NAME FOR FONT AFTER RE-ENCODING
    findfont
    /basefontdict exch def	%ARG: NAME OF FONT TO BE RE-ENCODED
    basefontdict maxlength dict begin	%CREATE AND OPEN NEW DICT
	basefontdict {		%COPY ENTRIES FROM BASE FONT DICT TO NEW ONE
	    1 index /FID ne {
		def		%IF NOT THE ONE WE'RE ENCODING, JUST COPY PTRS
	    } { %else
		pop pop		%IGNORE FID AND ENCODING FOR ONE WE'RE ENCODING
	    } ifelse
	} forall
	/FontName newfontname def	%DEFINE NEW NAME 
	/Encoding newencoding def	%DEFINE NEW ENCODING VECTOR
	newfontname currentdict definefont	%TURN IT INTO A PS FONT
	pop			%IGNORE MODIFIED DICT RETURNED BY DEFINEFONT
    end
} def
%
/cvsstr 64 string def
/tempmatrix matrix def
%
/BP {							% BEGIN PAGE
  /Magnification exch def
  /Colorsused 0 def
  /processcolor false def
  /RVmatrix matrix def
  /DVC$PSPage save def
} def
%
/EP {DVC$PSPage restore} def				% END PAGE
%
/XP {				% EXIT PAGE (TEMPORARILY) TO ADD FONTS/CHARS
  % SAVE CURRENT POINT AND COLOR INFORMATION SO IT CAN BE RESET LATER
  matrix currentmatrix aload pop currentrgbcolor Colorsused processcolor
  /Xpos where {pop Xpos} {0} ifelse
  /Ypos where {pop Ypos} {0} ifelse
  /currentpoint cvx stopped {0 0 moveto currentpoint} if 
  /DVC$PSPage where {pop DVC$PSPage restore} if
  moveto
  /Ypos exch def  /Xpos exch def
  /processcolor exch def /Colorsused exch def setrgbcolor
  matrix astore setmatrix
} def
%
/RP {/DVC$PSPage save def} def		% RESUME PAGE
%
/PF {GlobalMode  LocalMode} def			% PURGE FONTS TO RECLAIM MEMORY
%
/GlobalMode {		% SWITCH TO BASE SAVE/RESTORE LEVEL, SAVING STATE
  /DEC$EDMS_SEPARATE_COLORS where{pop DEC$EDMS_SEPARATE_COLORS}{9999}ifelse
  RVmatrix aload pop processcolor
  PortraitMode  PaperWidth  PaperHeight  PxlResolution  Resolution 
  Magnification Ymax        Xorigin      Yorigin        RasterScaleFactor
  % SAVE CURRENTPOINT INFORMATION TO RESET LATER
  /currentpoint cvx stopped {0 0 moveto currentpoint} if 
  /DVC$PSPage where {pop DVC$PSPage restore} if
  DVC$PSFonts restore  RecoverState
} def
%
/RecoverState {					% PRESERVE STATE AT BASE LEVEL
  20 copy
  /Ypos exch def           /Xpos exch def        /RasterScaleFactor exch def
  /Yorigin exch def        /Xorigin exch def     /Ymax exch def
  /Magnification exch def  /Resolution exch def  /PxlResolution exch def
  /PaperHeight exch def    /PaperWidth exch def  /PortraitMode exch def
  /processcolor exch def    matrix astore /RVmatrix exch def
  dup 9999 ne{/DEC$EDMS_SEPARATE_COLORS exch def}{pop}ifelse
  DoInitialScaling
  RVmatrix concat
  PortraitMode not {PaperWidth 0 SetupLandscape} if
  Xpos Ypos moveto
} def
%
/InitializeState {		% INITIALIZE STATE VARIABLES TO DEFAULT VALUES
  /Resolution 3600 def  /PxlResolution 300 def
  /RasterScaleFactor PxlResolution Resolution div def
  /PortraitMode true def
  /Magnification 1000 def  /Xorigin 0 def  /Yorigin 0 def
  /Xpos 0 def  /Ypos 0 def  /InitialMatrix matrix currentmatrix def
  /Colorsused 0 def  /processcolor false def  /RVmatrix matrix def
} def
%
/LocalMode {		% SWITCH FROM BASE SAVE/RESTORE LEVEL, RESTORING STATE
  /Ypos exch def  /Xpos exch def  /RasterScaleFactor exch def
  /Yorigin exch def  /Xorigin exch def  /Ymax exch def
  /Magnification exch def  /Resolution exch def  /PxlResolution exch def
  /PaperHeight exch def  /PaperWidth exch def  /PortraitMode exch def
  /processcolor exch def  matrix astore /RVmatrix exch def
  dup 9999 ne{/DEC$EDMS_SEPARATE_COLORS exch def}{pop}ifelse
  DoInitialScaling
  RVmatrix concat
  PortraitMode not {PaperWidth 0 SetupLandscape} if
  Xpos Ypos moveto
  /DVC$PSFonts save def  /DVC$PSPage save def
} def
%							% ABBREVIATIONS 
/S /show load def
/SV /save load def
/RST /restore load def
/Yadjust {Ymax exch sub} def
%
/SXY {		% (x,y) POSITION ABSOLUTE, JUST SET Xpos & Ypos, DON'T MOVE
  Yadjust  /Ypos exch def /Xpos exch def
} def
%
/XY {						% (x,y) POSITION ABSOLUTE
  Yadjust  2 copy /Ypos exch def /Xpos exch def  moveto
} def
%
/X {						% (x,0) POSITION ABSOLUTE
  currentpoint exch pop   2 copy /Ypos exch def /Xpos exch def  moveto
} def
%
/Y {						% (0,y) POSITION ABSOLUTE 
  currentpoint pop exch Yadjust  2 copy
  /Ypos exch def /Xpos exch def  moveto
} def
%
/xy {						% (x,y) POSITION RELATIVE
  neg rmoveto  currentpoint /Ypos exch def /Xpos exch def
} def
%
/x {						% (x,0) POSITION RELATIVE
  0 rmoveto  currentpoint /Ypos exch def /Xpos exch def
} def
%
/y {						% (0,y) POSITION RELATIVE
  0 exch neg rmoveto  currentpoint /Ypos exch def /Xpos exch def
} def
%
/R {						% DRAW A RULE
  /ht exch def  /wd exch def   gsave
% 0 setgray
  currentpoint  newpath  moveto
  0 ht rlineto  wd 0 rlineto
  0 ht neg rlineto  wd neg 0 rlineto
  closepath fill  grestore  wd 0 rmoveto
  currentpoint /Ypos exch def /Xpos exch def
} def
%
/RES {		% <PXL-file resolution(pix/inch)> <resolution(pix/inch)> RES
  /Resolution exch def  /PxlResolution exch def
  /RasterScaleFactor PxlResolution Resolution div def
  DoInitialScaling
} def
%
/DoInitialScaling {					% DO INITIAL SCALING
  InitialMatrix setmatrix  72 Resolution div dup scale
} def
%
/PM {		% <paper-height(pix)> <paper-width(pix)> PM
  XP
    /PaperWidth exch def  /PaperHeight exch def
    /Ymax PaperHeight def /PortraitMode true def
    DoInitialScaling
  RP
} def  
%
/SetupLandscape {translate  90 rotate} def
/LM {		% <paper-height(pix)> <paper-width(pix)> LM 
  XP
    /PaperWidth exch def  /PaperHeight exch def
    /Ymax PaperWidth def  /PortraitMode false def
    DoInitialScaling PaperWidth 0 SetupLandscape
  RP
} def  
%
/MAG {						% CHANGE MAGNIFICATION SETTING
  XP  /Magnification exch def  RP
} def
%
/SPB {		%  <xoffset><yoffset>SPB - BEGIN "\SPECIAL" MODE
  Yadjust /Yorigin exch def /Xorigin exch def
  currentrgbcolor Colorsused
  GlobalMode Xorigin Yorigin translate
  Resolution 72 div dup scale			% RESTORE DEFAULT SCALING
  Magnification 1000 div dup scale		% ADJUST FOR ANY MAGNIFICATION
  /Xpos Xpos 72 Resolution div mul 1000 Magnification div mul def
  /Ypos Ypos 72 Resolution div mul 1000 Magnification div mul def
  /spsavobj save def	%SAVE STATE & STACK DEPTH FOR CLEANUP AFTER FIGURE
  /showpage {} def	%DISABLE DURING FIGURE; `RESTORE' WILL BLOW DEF AWAY

  /DEC$EDMS_SEPARATE_COLORS where       % if separating colors
  {                                     % then
    pop processcolor                    %   if using process colors
    {                                   %   then
      DEC$EDMS_SEPARATE_COLORS 0 ge     %     if on color pass .ge. 0
      {                                 %     then
        { pop 1 } settransfer           %       write only white
      }{                                %     else

        /DEC$EDMS_TRAP_SWELL where
        { pop DEC$EDMS_SEPARATE_COLORS -4 eq
          { /EDMS_setlinewidth /setlinewidth load def
            /setlinewidth { DEC$EDMS_TRAP_SWELL mul EDMS_setlinewidth } def
          } if
        } if

        /EDMS_setrgbcolor               %       set up for a redefine
          /setrgbcolor load def         %       of the setrgbcolor operator

        currentscreen                   % get the current screen parameters
        /DEC$EDMS_SCREEN_ANGLE where    % if changing the screen angle
        {                               % then
          pop exch pop                  %   replace the old angle
          DEC$EDMS_SCREEN_ANGLE exch    %   with the new one
        } if
        /DEC$EDMS_SCREEN_FREQ where     % if changing the screen frequency
        {                               % then
          pop 3 -1 roll pop             %   replace the old frequency
          DEC$EDMS_SCREEN_FREQ 3 1 roll %   with the new one
        } if
          setscreen                     % Set the new parameters

        /setrgbcolor {
          /b exch def
          /g exch def
          /r exch def
          /c3 1 r sub def
          /m3 1 g sub def
          /y3 1 b sub def
          /k c3 m3 2 copy gt { exch } if pop y3 2 copy gt { exch } if pop def
          /ik 1 k sub def
          ik 0 ne
          { /c4 c3 k sub ik div def
            /m4 m3 k sub ik div def
            /y4 y3 k sub ik div def
          }
          { /c4 /DEC$EDMS_BLACK_GEN where
            { pop DEC$EDMS_BLACK_GEN } { 0 } ifelse def
            /m4 c4 def
            /y4 c4 def
          } ifelse
          1 [ c4 m4 y4 k ]              % pick the separation for this color
          DEC$EDMS_SEPARATE_COLORS      % pass ( -1 = Cyan, -2 = Magenta,
          neg 1 sub get sub setgray     % -3 = Yellow, -4 = Black )
        } def
      } ifelse                          %     endif
    }{                                  %   else (if not using process colors)
      DEC$EDMS_SEPARATE_COLORS 0 ne     %     if not on color pass 0
      {                                 %     then
        { pop 1 } settransfer           %       write only white
      } if                              %     endif
    } ifelse                            %   endif
  } if                                  % endif
  mark
} def
%
/SPE {		% SPE - END "\SPECIAL" MODE
  cleartomark
  spsavobj restore 
  1000 Magnification div dup scale	% UN-ADJUST FOR ANY MAGNIFICATION
  72 Resolution div dup scale		% RESTORE DEFAULT INTERNAL SCALING
  LocalMode
  /Colorsused exch def setrgbcolor
} def
%
/PP
%
% If DEC$EDMS_MAKE_FILM is defined, it will add the crop & alignment marks,
% and the document name, page number, & ink color identifiers to the page.
%
% Formal Arguments:	None
%
% Referenced Variables: DocumentName
%			Colorsused
%			Currentpagecount
% 			DEC$EDMS_MAKE_FILM
%
% Referenced Procedures: AlignMark
%
% Side Effects: Leaves the current font as Helvetica 8 point.
%		Creates the variable "junkstr".
%
{ /PageNumber exch def
  /DEC$EDMS_MAKE_FILM where			% if making film...
  { pop
    /DEC$EDMS_SUPPRESS_COLOR where		% if color suppression is on
    { pop /DEC$EDMS_SEPARATE_COLORS 0 def	% then default to color 0
      /Colorsused 1 def } if			% ...for everything
    2 DEC$EDMS_SEPARATE_COLORS exp cvi Colorsused and 0 ne %if correct separatn
    DEC$EDMS_SEPARATE_COLORS 0 lt or		% ...or if a process color
    { /Helvetica findfont 400 scalefont setfont
      20 setlinewidth 0 setgray
      gsave
      PaperWidth 1000 add 200 translate 90 rotate 0 0 moveto
      (Ink: ) show				% show the ink color
      DEC$EDMS_SEPARATE_COLORS 0 ge
      { DEC$EDMS_COLOR_NAMES DEC$EDMS_SEPARATE_COLORS get }
      { (Process ) show [ (Cyan) (Magenta) (Yellow) (Black) ]
        DEC$EDMS_SEPARATE_COLORS neg 1 sub get } ifelse show
      /DEC$EDMS_SUPPRESS_COLOR where		% if color suppression is on
      { pop ( (Color Suppression enabled)) show } if	% tell them about it
       1800 0 rmoveto
      (Page: ) show				% show the page number
      /junkstr 4 string def PageNumber junkstr cvs show
      ( of ) show DEC$EDMS_TOTAL_PAGES junkstr cvs show

      DEC$EDMS_SEPARATE_COLORS -4 eq
      { 1800 0 rmoveto (Trap Swell Factor: )show
        /DEC$EDMS_TRAP_SWELL where	% if trap swell factor is supplied
        { pop DEC$EDMS_TRAP_SWELL 6 string cvs }
        { (1 (default)) } ifelse show
      } if

      DEC$EDMS_SEPARATE_COLORS 0 lt		% if a process color
      {
        PaperHeight 2 div 600 add 0 moveto (Screen Angle: ) show
        /DEC$EDMS_SCREEN_ANGLE where
            { pop DEC$EDMS_SCREEN_ANGLE junkstr cvs }	% if defined
            { ((default)) } ifelse show			% if not defined
         1800 0 rmoveto (Screen Frequency: ) show
        /DEC$EDMS_SCREEN_FREQ where
            { pop DEC$EDMS_SCREEN_FREQ junkstr cvs }	% if defined
            { ((default)) } ifelse show			% if not defined
      } if
      grestore
      gsave
      -600 200 translate 90 rotate 0 0 moveto
      (Document: ) show DEC$EDMS_DOCUMENT_ID show	% show document name
      PaperHeight 2 div 600 add 0 moveto
      (This film is the property of Digital Equipment Corporation) show
      grestore

      /mask 15					% all crop marks on by default
      /DEC$EDMS_SUPPRESS_CROPMARKS where   % if def'd, xor in suppression mask
          { pop DEC$EDMS_SUPPRESS_CROPMARKS xor } if def

      mask 1 and 1 eq
        { PaperWidth PaperHeight moveto		% Upper Right
          450 0 rmoveto 900 0 rlineto -1350 1350 rmoveto 0 -900 rlineto } if

      mask 2 and 2 eq
        { PaperWidth 0 moveto			% Lower Right
          450 0 rmoveto 900 0 rlineto -1350 -1350 rmoveto 0 900 rlineto } if

      mask 4 and 4 eq
        { 0 0 moveto				% Lower Left
          -450 0 rmoveto -900 0 rlineto 1350 -1350 rmoveto 0 900 rlineto } if

      mask 8 and 8 eq
        { 0 PaperHeight moveto			% Upper Left
          -450 0 rmoveto -900 0 rlineto 1350 1350 rmoveto 0 -900 rlineto } if
      stroke

      /mask 15				 % all registratn marks on by default
      /DEC$EDMS_SUPPRESS_REGMARKS where	 % if defined, xor in suppression mask
          { pop DEC$EDMS_SUPPRESS_REGMARKS xor } if def

      mask 1 and 1 eq				% Top Center
         { gsave PaperWidth 2 div PaperHeight 900 add
	   /DEC$EDMS_POSITION_REGMARKS where
	     { pop DEC$EDMS_POSITION_REGMARKS -50 mul add } if
	   translate AlignMark grestore } if

      mask 2 and 2 eq				% Right Center
        { gsave PaperWidth 900 add
	 /DEC$EDMS_POSITION_REGMARKS where
	  { pop DEC$EDMS_POSITION_REGMARKS -50 mul add } if
	  PaperHeight 2 div translate AlignMark grestore } if

      mask 4 and 4 eq				% Bottom Center
        { gsave PaperWidth 2 div -900
	 /DEC$EDMS_POSITION_REGMARKS where
	  { pop DEC$EDMS_POSITION_REGMARKS 50 mul add } if
	 translate AlignMark grestore } if

      mask 8 and 8 eq				% Left Center
        { gsave -900
	 /DEC$EDMS_POSITION_REGMARKS where
	  { pop DEC$EDMS_POSITION_REGMARKS 50 mul add } if
	 PaperHeight 2 div translate AlignMark grestore } if
      showpage
    }
    { % disabled the 'erasepage ' that was here!
    } ifelse
  }
  { showpage } ifelse
} def
/CLRP { % disabled the 'erasepage' that was here!
  } def
%
/DMF {		%  /font-name <point-size(pix)> DMF
  /psz exch def  /nam exch def  nam findfont psz scalefont setfont
} def
%
/concatnam {	%  /abcd (xxx) concatnam  ==> /abcdxxx
  /xxx exch def  /nam exch def
  /namstr nam cvsstr cvs def
  /newnam namstr length xxx length add string def
  newnam 0 namstr putinterval
  newnam namstr length xxx putinterval
  newnam cvn 
} def
%
/strip {	%  /abcdef 2 strip ==> /cdef
  /num exch def  /nam exch def
  /namstr nam cvsstr cvs def
  /newlen namstr length num sub def
  namstr num newlen getinterval  cvn
} def
%		ROUTINES TO HANDLE PACKING/UNPACKING NUMBERS
/PackHW {	% <target> <pos> <num> PackHW --> <new target>
  /num exch def  /pos exch def  /target exch def
  num 16#0000FFFF and 1 pos sub 16 mul bitshift  target or
} def
/PackByte {	% <target> <pos> <num> PackByte --> <new target>
  /num exch def  /pos exch def  /target exch def
  num 16#000000FF and 3 pos sub 8 mul bitshift   target or
} def
/UnpkHW {	%  <pos> <num> UnpkHW --> <unpacked value>
  /num exch def  /pos exch def
  num 1 pos sub -16 mul bitshift 16#0000FFFF and
  dup 16#00007FFF gt {16#00010000 sub} if
} def
/UnpkByte {	%  <pos> <num> UnpkByte --> <unpacked value>
  /num exch def  /pos exch def
  num 3 pos sub -8 mul bitshift 16#000000FF and
  dup 16#0000007F gt {16#00000100 sub} if
} def
%
/ps-scalefont {
    % FOR PS FONTS, LOOK AT SIZE REQUESTED.  IF IT HAS A DECIMAL REMAINDER
    % EQUIVALENT TO .001-.009 POINTS (I.E., .050-.450 VAXDOC UNITS), THAT'S 
    % A FLAG TO STRETCH IT VERTICALLY BY ADDING 1-9 EXTRA POINTS TO THE 
    % VERTICAL SCALING.
                % save requested size - as entered and as integer
    dup /x-size exch def cvi /x-int exch def
                % calc decimal remainder, mul x 1000, round
    x-size x-int sub 1000 mul round cvi /remainder exch def
                % see how we scale...
    remainder 50 lt remainder 450 gt or {
                % scale isomorphically
        /ystretch 0 def
        x-size scalefont
    } {
                % scale anamorphically
        /ystretch remainder def
        x-int ystretch add /y-size exch def
        [x-int 0 0 y-size 0 0] makefont
    } ifelse
} def
%
/DPSF {		% /procname size /fontname DPSF
    findfont exch ps-scalefont [ exch /setfont cvx ] cvx def
} def
%
/PXLBuildCharDict 17 dict def
/CMEncodingArray 256 array def
0 1 255 {CMEncodingArray exch dup cvsstr cvs cvn put} for
/RasterConvert {RasterScaleFactor div} def
/TransformBBox {
  aload pop
  /BB-ury exch def  /BB-urx exch def  /BB-lly exch def  /BB-llx exch def
  [ BB-llx RasterConvert BB-lly RasterConvert 
    BB-urx RasterConvert BB-ury RasterConvert ]
} def
/RunLengthToRasters {
  % none yet
} def
/GenerateRasters {			% GENERATE RASTERS FOR "IMAGEMASK"
  rasters  runlength 1 eq {RunLengthToRasters} if
} def
%
/int-dict-name {int (-dict) concatnam} def
/int-dict {int (-dict) concatnam cvx load} def
%
/DefinePXLFont {
	%  <int-font-name><ext-font-name><pt-sz(pix)><PXL mag><num-chars>...
	%  ...[llx lly urx ury]<newfont-fg>DefinePXLFont
  /newfont exch def  /bb exch def      /num exch def  /psz exch def
  /dsz exch def      /pxlmag exch def  /ext exch def  /int exch def
  /fnam ext (-) concatnam pxlmag cvsstr cvs concatnam def
  newfont not {
    int-dict-name 13 dict def
    int-dict begin
      /FontType 3 def  /FontMatrix [ 1 dsz div 0 0 1 dsz div 0 0 ] def
      /FontBBox bb TransformBBox def  /Encoding CMEncodingArray def
      /CharDict 1 dict def  CharDict begin  /Char-Info num array def  end
      /BuildChar {
        PXLBuildCharDict begin
          /char exch def  /fontdict exch def
          fontdict /CharDict get /Char-Info get char get aload pop
          /rasters exch def  /PackedWord1 exch def
          0 PackedWord1 UnpkHW 16#7FFF ne {
	    /PackedWord2 exch def  /wx 0 PackedWord1 UnpkHW def
            /rows 2 PackedWord1 UnpkByte def  /cols 3 PackedWord1 UnpkByte def
            /llx 0 PackedWord2 UnpkByte def   /lly 1 PackedWord2 UnpkByte def
            /urx 2 PackedWord2 UnpkByte def   /ury 3 PackedWord2 UnpkByte def
	  }{ %else
	    /PackedWord2 exch def  /PackedWord3 exch def /PackedWord4 exch def
            /wx 1 PackedWord1 UnpkHW def    /rows 0 PackedWord2 UnpkHW def
            /cols 1 PackedWord2 UnpkHW def  /llx 0 PackedWord3 UnpkHW def
            /lly 1 PackedWord3 UnpkHW def   /urx 0 PackedWord4 UnpkHW def
            /ury 1 PackedWord4 UnpkHW def
          } ifelse
          rows 0 lt {
	    /rows rows neg def /runlength 1 def
	  }{ %else
	    /runlength 0 def
	  } ifelse
          wx 0
          llx RasterConvert lly RasterConvert 
          urx RasterConvert ury RasterConvert setcachedevice
          rows 0 ne {
	    gsave
	      cols rows true  RasterScaleFactor 
              0 0 RasterScaleFactor neg llx .5 add neg ury .5 add 
              tempmatrix astore  GenerateRasters imagemask
            grestore
          } if
        end
      } def
    end
    fnam int-dict definefont pop 
  } if 
  int-dict-name fnam findfont psz scalefont def
  currentdict int [ int-dict /setfont cvx ] cvx put
} def 
/PXLF { true  DefinePXLFont} def	% SIGNAL THAT FONT ALREADY LOADED
/PXLNF {false  DefinePXLFont} def	% SIGNAL THAT FONT NOT ALREADY LOADED
%
/PXLC {	% <int-font-name><code><wx><llx><lly><urx><ury>...
	% ...<rows><cols><runlength><rasters>PXLC
  /rasters exch def  /runlength exch def  /cols exch def  /rows exch def
  /ury exch def      /urx exch def        /lly exch def   /llx exch def
  /wx exch def       /code exch def       /int exch def
  % SEE IF LONG OR SHORT FORMAT IS REQUIRED
  true cols CKSZ rows CKSZ ury CKSZ urx CKSZ lly CKSZ llx CKSZ 
  TackRunLengthToRows {
    int-dict /CharDict get /Char-Info get code 
    [ 0 0 llx PackByte 1 lly PackByte 2 urx PackByte 3 ury PackByte
      0 0 wx PackHW 2 rows PackByte 3 cols PackByte rasters ] put
  }{ %else
    int-dict /CharDict get /Char-Info get code 
    [ 0 0 urx PackHW 1 ury PackHW   0 0 llx PackHW 1 lly PackHW
      0 0 rows PackHW 1 cols PackHW 0 0 16#7FFF PackHW 1 wx PackHW rasters ] put
  } ifelse
} def
%
/CKSZ {abs 127 le and} def
/TackRunLengthToRows {runlength 0 ne {/rows rows neg def} if} def
%
/PLOTC {
  % <wx><dsz><psz><llx><lly><urx><ury><rows><cols><runlength><rasters>PLOTC
  /rasters exch def  /runlength exch def  /cols exch def  /rows exch def
  /ury exch def      /urx exch def        /lly exch def   /llx exch def
  /psz exch def      /dsz exch def        /wx exch def
  % "PLOT" A CHARACTER'S RASTER PATTERN
  rows 0 ne {
    gsave
      currentpoint translate  psz dsz div dup scale
      cols rows true  RasterScaleFactor 0 0 RasterScaleFactor 
      neg llx .5 add neg ury .5 add  tempmatrix astore
      GenerateRasters imagemask
    grestore
  } if
  wx x
} def
%
/AlignMark
%
% This procedure draws an alignment mark centered on the coordinate system
% origin. If the variable DEC$EDMS_SEPARATE_COLORS = 0 then a "positive"
% alignment mark is drawn. If DEC$EDMS_SEPARATE_COLORS <> 0 then a "negative"
% alignment mark is drawn. 
%
% Formal Arguments: NONE
%
% Referenced Variables: DEC$EDMS_SEPARATE_COLORS
%
% Referenced Procedures: NONE
%
% Side Effects: NONE
%
{ DEC$EDMS_SEPARATE_COLORS 0 eq
  { 0 0 300 0 360 arc
    0 -450 moveto 0 450 lineto -450 0 moveto 450 0 lineto stroke }
  { 0 0 450 0 360 arc fill 1 setgray 0 0 300 0 360 arc 
    0 -450 moveto 0 450 lineto -450 0 moveto 450 0 lineto stroke 0 setgray }
  ifelse
} def


/SC
% If not making film, the following procedure sets the current color using the
% RGB color model. If making film, the procedure notes the "color pass" and,
% if the specified color index matches the color pass, subsequent marks are
% written in black. If the specified color index does not match the color pass,
% marks are written in white. Use of colors on individual pages is also tracked
% to allow pages that don't use a particular color to be suppressed on that
% color pass (by the code in the /PP routine).
%
% Formal Arguments: color index (on stack)
%
% Referenced Variables: Colorsused
%			DEC$EDMS_SEPARATE_COLORS
%			DEC$EDMS_SUPPRESS_COLOR
%
% Referenced Procedures: NONE
%
% Side Effects: Modifies the variable Colorsused to record use of the color.
%               Tracks use of color in the variables 'ci' and 'processcolor'.
%
{ /ci exch def ci 0 lt			% if the color index is lt 0
  { /processcolor true def }		% then set 'processcolor' to 'true'.
  { ci /processcolor false def		% else set 'processcolor' to 'false'.
    /DEC$EDMS_SUPPRESS_COLOR where	% if suppressing color
    { pop 0 setgray pop }		% then set "color" to Black
    { /DEC$EDMS_SEPARATE_COLORS where	% else if separating colors
      { pop dup DEC$EDMS_SEPARATE_COLORS eq	% then if on this color pass
        { 0 setgray /Colorsused Colorsused	% then write black (do write)
          2 3 index exp cvi or def }		% ..and note use of the "color"
        { 1 setgray } ifelse pop }		% else write white (don't write)
      { dup (  ) cvs dup length 15 add string	% else if using the color index,
        /tstr exch def				% ..build up the name of the
        tstr 0 (DEC$EDMS_COLOR_) putinterval	% ..potential external color
        tstr exch 15 exch putinterval		% ..name procedure
        tstr cvn where				% ..and see if it is defined
          { pop pop tstr cvn cvx exec }		% execute it if it is
          { DEC$EDMS_COLOR_ARRAY exch get exec	% else exec internal color proc
        } ifelse
      } ifelse
    } ifelse
  } ifelse
} def

/RV					% .. gross recto/verso translate
{ /DEC$EDMS_ENABLE_RECTOVERSO where
      { pop
	/RVmatrix DEC$EDMS_ENABLE_RECTOVERSO 50 mul 0 matrix translate def
	RVmatrix concat
      } if
} def

%
%  Procedures for implementing the "rotate <theta>" special:
%  <theta> ROTB -
%        - ROTE -
 
/ROTB {
  XP
  gsave
  Xpos Ypos translate
  rotate % using <theta> from the stack
  Xpos neg Ypos neg translate
  RP
  } def
 
/ROTE {XP grestore RP} def

end  %DEC_DVC$dict
%%EndProlog
%%BeginSetup
/DEC$EDMS_MAKE_FILM where	% if we are making film...
 { pop			% ..clean up the stack
   54 dup translate		% ..make room for the film info
 } if
BeginDVC$PSDoc
/PaperWidth 8.500 Resolution mul def
/PaperHeight 11.000 Resolution mul def
/Ymax PaperHeight def
CLRP 300 3600 RES
%>  Postamble of file SYS$LOGIN_DEVICE:[LIPSKY.ELLEN]FRONTMATTER.DVI_PS.
% DefineFont:F151 Category:10 Pointsize:10
/NewCenturySchlbk-Roman /NewCenturySchlbk-Roman@DOCPSE DOCPSE ReENCODE
/F151 500.0 /NewCenturySchlbk-Roman@DOCPSE DPSF
% DefineFont:F40 Category:10 Pointsize:9
/Helvetica-Bold /Helvetica-Bold@DOCPSE DOCPSE ReENCODE
/F40 450.0 /Helvetica-Bold@DOCPSE DPSF
% DefineFont:F38 Category:10 Pointsize:9
/Helvetica /Helvetica@DOCPSE DOCPSE ReENCODE
/F38 450.0 /Helvetica@DOCPSE DPSF
% DefineFont:F24 Category:10 Pointsize:14
/F24 700.0 /Helvetica-Bold@DOCPSE DPSF
%%BeginDEC$EDMSInfo
/DEC$EDMS_DOCUMENT_ID () def
/DEC$EDMS_COLOR_NAMES [ (0_BLACK) ] def
/DEC$EDMS_COLOR_ARRAY [
%%RGBCustomColor 0.000 0.000 0.000 0_BLACK
  { 0.000 0.000 0.000 setrgbcolor } %  0_BLACK DOC$COLOR_INIT
] def
/DEC$EDMS_TOTAL_PAGES 0 def
%%EndDEC$EDMSInfo
/DEC$EDMS_MAKE_FILM where
{ pop /DEC$EDMS_SEPARATE_COLORS where
  { pop }
  { (ERROR - DEC$EDMS_MAKE_FILM requires DEC$EDMS_SEPARATE_COLORS be defined) = quit } ifelse
} if
/DEC$EDMS_SEPARATE_COLORS where
{ pop /DEC$EDMS_SUPPRESS_COLOR where
  { pop (ERROR - DEC$EDMS_SEPARATE_COLORS and DEC$EDMS_SUPPRESS_COLOR are mutually exclusive) = quit } if
} if
/DVC$PSFonts save def
%%EndSetup
%
%%Page: I 1
%%BeginPageSetup
%%EndPageSetup
%%PageFonts: (atend)
%%PageCustomColors: (atend)
1000 BP PaperHeight PaperWidth PM 0 0 XY 
%%BeginCustomColor: 0_BLACK
0 SC 8980 8382 XY F24(The)S 176 x(Cell)S 175 x(Directory)S 176 x(Service)S
175 x(Portable)S 176 x(Interface)S 8980 X 747 y(\(CDSPI\))S 8980 11819 XY
F40(November)S 166 x(1991)S 8980 13015 XY F38(This)S 197 x(manual)S
198 x(docume)S 2 x(nts)S 197 x(the)S 197 x(CDS)S 196 x(portable)S 198 x
(interface)S 197 x(\(CDSPI\))S 197 x(for)S 197 x(the)S 198 x(Open)S
197 x(Software)S 8980 X 548 y(Foundation)S 176 x(Distributed)S 175 x
(Computing)S 176 x(Environmen)S 2 x(t)S 175 x(\(OSF)S 175 x(DCE\).)S
175 x(The)S 175 x(CDSPI)S 175 x(is)S 175 x(an)S 176 x(unsuppor)S 2 x
(ted)S 8980 X 548 y(interface)S 169 x(and)S 170 x(is)S 168 x(for)S 169 x
(use)S 170 x(by)S 169 x(internal)S 169 x(DCE)S 168 x(compon)S 2 x(ents)S
169 x(only)S -33 x(.)S 254 x(This)S 169 x(docume)S 2 x(nt)S 168 x(is)S
169 x(for)S 169 x(informational)S 8980 X 548 y(purpose)S 2 x(s.)S 8980 35929 XY
F40(digital)S 165 x(equipment)S 166 x(corporation)S 8980 X 548 y(maynard,)S
166 x(massachuset)S 2 x(ts)S
%%EndCustomColor
1 PP EP
%%PageTrailer
%%PageFonts: Helvetica-Bold Helvetica
%%PageCustomColors: 0_BLACK
%
%%Page: II 2
%%BeginPageSetup
%%EndPageSetup
%%PageFonts: (atend)
%%PageCustomColors: (atend)
1000 BP PaperHeight PaperWidth PM 0 0 XY 
%%BeginCustomColor: 0_BLACK
0 SC 8980 13601 XY 19128 24 R 8980 14597 XY F40(November)S 166 x(1991)S
8980 X 897 y F38(The)S 185 x(information)S 186 x(in)S 184 x(this)S 185 x
(docume)S 2 x(nt)S 185 x(is)S 184 x(subject)S 186 x(to)S 184 x(chang)S
2 x(e)S 185 x(without)S 184 x(notice)S 185 x(and)S 186 x(should)S 186 x
(not)S 185 x(be)S 8980 X 498 y(construed)S 170 x(as)S 169 x(a)S 169 x
(comm)S 2 x(itment)S 168 x(by)S 169 x(Digital)S 168 x(Equipment)S 169 x
(Corpora)S 2 x(tion.)S 253 x(Digital)S 168 x(Equipment)S 169 x(Corpora)S
2 x(tion)S 8980 X 498 y(assumes)S 168 x(no)S 166 x(respon)S 2 x(sibili)S
-2 x(ty)S 166 x(for)S 166 x(any)S 167 x(errors)S 168 x(that)S 165 x
(may)S 167 x(appea)S 2 x(r)S 166 x(in)S 166 x(this)S 165 x(docum)S 2 x
(ent.)S 8980 X 896 y(The)S 177 x(software)S 177 x(described)S 178 x
(in)S 176 x(this)S 176 x(docum)S 2 x(ent)S 176 x(is)S 177 x(furnished)S
177 x(under)S 178 x(a)S 177 x(license)S 177 x(and)S 177 x(may)S 177 x
(be)S 177 x(used)S 178 x(or)S 8980 X 499 y(copied)S 167 x(only)S 166 x
(in)S 166 x(accordan)S 2 x(ce)S 166 x(with)S 165 x(the)S 166 x(terms)S
167 x(of)S 166 x(such)S 167 x(a)S 166 x(license.)S 8980 X 896 y(No)S
179 x(responsibility)S 178 x(is)S 179 x(assume)S 2 x(d)S 179 x(for)S
179 x(the)S 179 x(use)S 180 x(or)S 179 x(reliabilit)S -2 x(y)S 179 x
(of)S 179 x(software)S 179 x(on)S 180 x(equipment)S 180 x(that)S 179 x
(is)S 178 x(not)S 8980 X 498 y(supplied)S 166 x(by)S 167 x(Digit)S -2 x
(al)S 166 x(Equipmen)S 2 x(t)S 165 x(Corpora)S 2 x(tion)S 165 x(or)S
167 x(its)S 165 x(af)S -8 x(\211liated)S 166 x(companies.)S 8980 X 897 y
(Restricted)S 186 x(Rights:)S 288 x(Use,)S 191 x(duplication,)S 191 x
(or)S 187 x(disclosure)S 187 x(by)S 187 x(the)S 186 x(U.S.)S 185 x(Governm)S
2 x(ent)S 186 x(is)S 186 x(subject)S 186 x(to)S 8980 X 498 y(restrictions)S
154 x(as)S 155 x(set)S 155 x(forth)S 154 x(in)S 154 x(subpa)S 2 x(ragraph)S
156 x(\(c\)\(1\)\()S 2 x(ii\))S 154 x(of)S 154 x(the)S 154 x(Rights)S
154 x(in)S 155 x(T)S -50 x(echnical)S 155 x(Data)S 154 x(and)S 155 x
(Computer)S 8980 X 498 y(Software)S 166 x(clause)S 167 x(at)S 166 x
(DF)S -26 x(ARS)S 166 x(252.227-)S 2 x(7013.)S 8980 22567 XY(\251)S
166 x(Digital)S 165 x(Equipment)S 167 x(Corporation)S 167 x(1991.)S
8980 X 897 y(All)S 165 x(Rights)S 165 x(Reserve)S 2 x(d.)S 8980 X 896 y
(Digit)S -2 x(al)S 166 x(is)S 166 x(a)S 166 x(tradema)S 2 x(rk)S 166 x
(of)S 166 x(Digital)S 165 x(Equipment)S 167 x(Corporation.)S 8980 X
847 y(Open)S 166 x(Software)S 167 x(Foundation)S 166 x(and)S 167 x(OSF)S
166 x(are)S 167 x(trademar)S 2 x(ks)S 166 x(of)S 166 x(the)S 166 x(Open)S
167 x(Software)S 166 x(Foundation,)S 166 x(Inc.)S
%%EndCustomColor
2 PP EP
%%PageTrailer
%%PageFonts: Helvetica-Bold Helvetica
%%PageCustomColors: 0_BLACK
%
%%Page: III 3
%%BeginPageSetup
%%EndPageSetup
%%PageFonts: (atend)
%%PageCustomColors: (atend)
1000 BP PaperHeight PaperWidth PM 0 0 XY 
%%BeginCustomColor: 0_BLACK
0 SC 8980 2774 XY F151(This)S 166 x(document)S 167 x(was)S 165 x(prepared)S
166 x(using)S 167 x(V)S -56 x(AX)S 166 x(DOC)S -2 x(UMENT)S -45 x(,)S
166 x(V)S -46 x(ersion)S 166 x(2.0.)S 27710 37672 XY F40(-3)S
%%EndCustomColor
3 PP EP
%%PageTrailer
%%PageFonts: NewCenturySchlbk-Roman
%%+ Helvetica-Bold
%%PageCustomColors: 0_BLACK
%
%%Trailer
EndDVC$PSDoc
/DEC$EDMS_MAKE_FILM where	% if we are making film...
 { pop				% ..clean up the stack
   -54 dup translate		% ..undo the film translation
 } if
%%Pages: 3
%%DocumentFonts: NewCenturySchlbk-Roman
%%+ Helvetica-Bold Helvetica
%%DocumentCustomColors: 0_BLACK
