...\" @OSF_COPYRIGHT@
...\" COPYRIGHT NOTICE
...\" Copyright (c) 1990, 1991, 1992, 1993, 1994 Open Software Foundation, Inc.
...\" ALL RIGHTS RESERVED (DCE).  See the file named COPYRIGHT.DCE for
...\" the full copyright text.
...\" 
...\" 
...\" HISTORY
...\" $Log: README,v $
...\" Revision 1.1.6.1  1996/12/03  16:14:35  weir
...\" 	No change
...\" 	[1996/12/03  16:14:11  weir]
...\"
...\" Revision 1.1.4.4  1996/03/18  19:16:38  weir
...\" 	Update for DFA
...\" 	[1996/03/18  19:16:20  weir]
...\" 
...\" Revision 1.1.4.3  1995/12/28  19:00:09  weir
...\" 	First update for 1.2
...\" 	[1995/12/28  18:59:48  weir]
...\" 
...\" Revision 1.1.4.2  1995/09/01  20:06:19  weir
...\" 	Some corrections of my corrections
...\" 	[1995/09/01  20:06:00  weir]
...\" 
...\" Revision 1.1.4.1  1995/09/01  19:59:09  weir
...\" 	A few corrections
...\" 	[1995/09/01  19:58:33  weir]
...\" 
...\" Revision 1.1.2.7  1994/10/21  19:19:58  steto
...\" 	{edt, R1.1, Made final edits.}
...\" 	[1994/10/21  19:19:32  steto]
...\" 
...\" Revision 1.1.2.6  1994/10/19  22:41:55  steto
...\" 	{edt, CR9951, R1.1, Updated for location of sec.sams in the DCE unintegrated code tree.}
...\" 	[1994/10/19  22:41:36  steto]
...\" 
...\" Revision 1.1.2.5  1994/10/06  17:40:19  steto
...\" 	{enh, CR9951, R1.1, Clarified the instructions more.}
...\" 	[1994/10/06  17:39:59  steto]
...\" 
...\" Revision 1.1.2.4  1994/09/29  20:38:48  steto
...\" 	{enh, CR9951, R1.1, Edited for GA.}
...\" 	[1994/09/29  20:38:30  steto]
...\" 
...\" Revision 1.1.2.3  1994/06/13  16:15:43  devobj
...\" 	cr10872 - fix copyright
...\" 	[1994/06/13  16:09:54  devobj]
...\" 
...\" Revision 1.1.2.2  1994/06/07  13:12:06  digan
...\" 	{enh, CR9951, R1.1}
...\" 	Added information about /source directory and compiling instructions.
...\" 	[1994/06/07  13:11:29  digan]
...\" 
...\" Revision 1.1.2.1  1994/05/06  18:45:26  digan
...\" 	Entered list of subdirectories for Beta release
...\" 	[1994/05/04  12:48:45  digan]
...\" 
...\" 	Corrected comment leader
...\" 	[1994/05/03  17:13:29  digan]
...\" 
...\" 	{enh, 9951, R1.1}
...\" 	First version Initial Creation of file.
...\" 	[1994/05/03  16:44:18  digan]
...\" 
...\" $EndLog$
...\" 
...\" 
...\" 
==============================================================================
------------------------------------------------------------------------------
---------------------------------77 cols--------------------------------------

Directory: <dce-root-dir>/doc/dcedoc/src/dce_books/prob_gd


This directory contains the source files and output files for the OSF DCE
Problem Determination Guide. It also contains files which you must process
specially for inclusion in the document, and the tools required to perform
this processing.


Files and Subdirectories:

Description             Instructions required by book-format to build the
                        book.

Headers/
   header.mm            Page footer containing the document title.

Output/
  draft/ascii/          ASCII output of book-format
  draft/ps/             Postscript output of book-format 	 


frontmatter/
  preface.gpsml         Preface to book
  title.gpsml           Title page of book

prob_gd/
  appA_num.gpsml        Index by message number
  appB_text.gpsml       Index by message text
  intro.gpsml           Overview of book
  messages.gpsml        Messages for the DCE components	
  troubleshooting.gpsml (Currently not used)

sources/
  idx/                     
    dceptrmsg.idx       pthreads index entries  
    dcexdsmsg.idx       XDS index entries
    makeidx             Script for creating the index for
                        the messages for all the DCE components
  idl/
    nidlmsg.h           Header file needed by IDL message coverter
    nidlmsg.m           Source file for IDL messages
    idl_msg_cvtr        perl script that formats the IDL messages	

  pthreads_add          pthreads messages without numbers or symbolic names

  pthreads_pdg/         pthreads messages with numbers and symbolic names

  xds_pdg/              XDS/XOM messages  


The following instructions outline how to "compile" the Problem Determination
Guide body and its two indexes, which are built (by book-format) as appendixes.

==============================================================================
------------------------------------------------------------------------------
A.  GENERATING THE PDG BODY
===========================

------------------------------------------------------------------------------
1. Most of the sams files for the DCE components whose messages are
   included in the document are provided in subdirectories of the
   
       /opt/dce/build/dce1.1/src

   directory. Some are located elsewhere. You must copy all of the required
   files to a directory in a convenient location for processing.

   The filenames for each sams file begins with a three-letter prefix and ends
   with the extension .sams, as in the following examples:
  
       gds.sams
       dhd.sams
       rpc.sams
       dcd.sams
       csr.sams

   ...and so on.

   The pathnames of the sams files in the DCE 1.2 code tree are as follows:

       /project/dce/build/dce1.2/src/admin/dcecp/dcp.sams
       /project/dce/build/dce1.2/src/admin/tcl_dce/tcl.sams
       /project/dce/build/dce1.2/src/admin/dced/idl/dhd.sams
       /project/dce/build/dce1.2/src/dce/utils/svc/svc.sams
       /project/dce/build/dce1.2/src/dce/utils/dcecf/cfg.sams
       /project/dce/build/dce1.2/src/dce/utils/misc/lib.sams
       /project/dce/build/dce1.2/src/directory/cds/includes/cds.sams
       /project/dce/build/dce1.2/src/directory/gds/sams/gds.sams
       /project/dce/build/dce1.2/src/rpc/idl/uuidgen/uid.sams
       /project/dce/build/dce1.2/src/rpc/sys_idl/rpc.sams
       /project/dce/build/dce1.2/src/rpc/csrc/csr.sams
       /project/dce/build/dce1.2/src/security/h/sad.sams
       /project/dce/build/dce1.2/src/security/audit/libaudit/aud.sams
       /project/dce/build/dce1.2/src/security/gssapi/gss.sams
       /project/dce/build/dce1.2/src/security/idl/sec.sams
       /project/dce/build/dce1.2/src/threads/thd.sams
       /project/dce/build/dce1.2/src/time/common/dts.sams

   A few other hand-created sams format files are provided in subdirectories
   of the prob_gd book directory. You will be instructed where to find these
   files when you need them.

------------------------------------------------------------------------------
2. Create another directory to collect the output files that the sams tool
   will generate when it is run on the sams source files. A subdirectory of
   the one that you created in Step 1 will do.

------------------------------------------------------------------------------
3. Make sure you have the latest version of the sams tool. This tool is
   located in the DCE 1.2 code tree in:

       /project/dce/build/dce1.2/tools/<platform>/bin/sams

   If you add the following line to your .cshrc file, you will always have a
   pointer to the tool's location: 

       alias sams /project/dce/build/dce1.2/tools/<platform>/bin/sams
                                                   ^^^^^^^^
   Be sure you pick up the right version of the tool for your machine type.

------------------------------------------------------------------------------
4. The messages for the Interface Definition Language (IDL) component of DCE
   require special processing for conversion into the sams format. You must
   run the idl_msg_cvtr tool on the IDL message source files (nidlmsg.m and
   nidlmsg.h) to create the sams format file (idl.sams). The IDL message
   source files and converter tool are located in the DCE 1.2 code tree at:

       /project/dce/build/dce1.2/src/rpc/idl/idl_compiler/nidlmsg.m

       /project/dce/build/dce1.2/src/rpc/idl/idl_compiler/nidlmsg.h

   Copies of these files are located in the doc tree at:

       /project/dce/build/dce1.2doc/src/dce_books/prob_gd/sources

   (Note that whenever the code tree versions change, the doc tree copies
    must be replaced.)

   Instructions for the conversion are as follows:

   a.  Change to the 

           /project/dce/build/dce1.2doc/src/dce_books/prob_gd/sources/idl

       directory and run the IDL message converter (idl_msg_cvtr) on the
       nidlmsg.m and nidlmsg.h files:

           idl_msg_cvtr -m nidlmsg.m -h nidlmsg.h > idl.sams

   b.  Add the idl.sams file to the directory holding the sams files
       copied from the DCE install tree.

------------------------------------------------------------------------------
5. WARNING: You will need quite a bit of free disk space for this next step;
            to be precise, <nnnnnn>. A separate file will be generated during
            this step for each and every individual message.


   Locate yourself in the directory holding the sams files and run the
   sams tool against each sams file as follows: 

       sams -d <directory_name>  -m -op <sams_filename>

   where directory_name is the name of the directory where the sams output
   files will be placed, and sams_filename is the name of the sams source
   file on which the sams tool should operate. For example:

       sams  -d ~xyz/pdg -m  -op  cfg.sams

   In this example, all files will go into the directory named pdg and
   the first sams file will be cfg.sams.

------------------------------------------------------------------------------
[FOR DCE 1.2.1:]
5A. Process the dfa.sams file in prob_gd/sources/dfa/dfa.sams:

    a. Run sams over the file, in a separate output directory.

    b. Edit the output files, replacing the hexadecimal number in the
       .LI line with the following string: "-----------    -------"
       (i.e., 11 dashes followed by 4 spaces followed by 7 dashes).
       The hex codes are meaningless for DFA in DCE 1.2.1, since the
       actual error messaging is not done through the DCE serviceability
       interface and no sams file is compiled for the code; the sams file
       was created solely to make the formatting of the DFA Problem Determ-
       ination Guide easier, and to make sure the messages got in that
       book's index. The number of dashes in the string is greater than
       that of the similarly-edited Threads items, thus ensuring (we hope)
       that the latter will precede the former in the sorted book output.

    c. Now copy the edited DFA messages into the main sams output directory
       written to in step 5 above.

------------------------------------------------------------------------------
6. The messages that DCE provides for its pthreads and XDS/XOM components
   cannot be processed with the sams tool. You will find the already-
   formatted message files in the

       /project/dce/build/dce1.2doc/src/dce_books/prob_gd/sources/pthreads_pdg

   and

       /project/dce/build/dce1.2doc/src/dce_books/prob_gd/sources/xds_pdg

   subdirectories of the doc tree. Copy the files in these subdirectories to
   the directory where you placed the other SML output files.

   For example:

       cp .../sources/pthreads_pdg/*  ~xyz/pdg
       cp .../sources/xds_pdg/*  ~xyz/pdg

------------------------------------------------------------------------------
7. Once all the sams files have been added to your collection directory,
   locate yourself in this directory and run the following command:

       ls | sort -f -d | xargs cat > <output_filename>

   where output_filename is the name you want to give the "compiled" message
   file.

   For example:

       ls | sort -f -d | xargs cat > pdg_compiled

   The "compiled" message file is actually one large file of messages sorted
   by filename. (Note that the filenames are the symbolic names of the
   messages.)

------------------------------------------------------------------------------
8. Next, there are six pthreads messages (contained in the file pthreads_add)
   that must be included in the document by hand. These messages require
   special handling because they do not have a symbolic name and, therefore,
   they cause the sort operation in Step 6 to fail. They should be added to
   the beginning of the compiled message file. The pthreads_add file can be
   found at:

       /opt/dce/build/dce1.1doc/src/dce_books/prob_gd/sources/pthreads_add

------------------------------------------------------------------------------   
9. Finally, you need to add some SML markup to the compiled message file:

   a. Add the following lines at the beginning of the file:

      .in 0
      .nr !a 6n
      .VL \n(!au

   b. Add .LE as the last line in the file.


------------------------------------------------------------------------------
==============================================================================
------------------------------------------------------------------------------
B.  GENERATING THE TWO "INDEXES"
================================

To generate the indexes for the two appendixes of the PDG, you need to run the
sams tool on the sams files for the DCE components again.

------------------------------------------------------------------------------
1. First, create a directory to hold the index (.idx) files that the sams tool
   will create. A subdirectory of the one that contains the sams source
   files will do.

------------------------------------------------------------------------------
[FOR DCE 1.2.1:
Make sure before you do this step that there is an up-to-date dfa.sams file
in the directory from which you generate the indexes from the other sams
files...]

2. Locate yourself in the directory containing the sams source files and run
   the sams tool against the files. The command is as follows:

       sams -d <directory_name> -sn -ox <sams_filename>

   where directory_name is the name of the collection directory created in
   Step 1, and sams_filename is the name of each sams file.

   For example:

       sams  -d ~xyz/idx  -sn  -ox  cds.sams

------------------------------------------------------------------------------
3. As is the case for the pthreads and XDS/XOM message files, the pthreads
   and XDS/XOM index files cannot be generated by the sams tool. DCE provides
   the hand-created files (dcegdsmsg.idx and dcethrmsg.idx) in the doc tree in
   the

       /opt/dce/build/dce1.1doc/src/dce_books/prob_gd/sources/idx

   directory. Copy these files to the directory that holds the .idx files for
   the rest of the DCE components.

   The

       /opt/dce/build/dce1.1doc/src/dce_books/prob_gd/sources/idx

   directory also contains the makeidx script, which generates the two index
   files. Copy this script over to your idx collection directory too.

   The contents of the idx directory should now contain an output file for
   each DCE component and look similar to the following: 

       dcecdsmsg.idx   dcedcpmsg.idx   dcegdsmsg.idx   dcesvcmsg.idx
       dcecfgmsg.idx   dcedhdmsg.idx   dcelibmsg.idx   dceuidmsg.idx
       dcecsrmsg.idx   dcedtsmsg.idx   dcerpcmsg.idx   makeidx    

------------------------------------------------------------------------------
4. Run the makeidx script on the .idx files to create the SML format files
   for the two indexes. To do this, simply enter the following command at the
   system prompt:

       makeidx

   FYI, the contents of the script are as follows:

==============================================================================
------------------------------------------------------------------------------
   # makeidx
   # We assume this script is run in the directory where all
   # the individual SAMS files have been processed to get the
   # separate .idx files, as in
   #       sams -sn -ox XXX.sams
   #       sams -sn -ox YYY.sams
   #       ... and so on.
   # This creates dceXXXmsg.idx, dceYYYmsg.idx, etc., sorted by
   # numeric value.

   # Merge all the idx files into one master sorted file.
   cat dce*msg.idx | sed -e 's/ *@ */@/g' -e 's/\\n//' >full.idx

   # Create idx-part-1, which has two columns in numeric order:
   #       0x10d0a0a4      CDSCP_ACC_DENIED
   sort -t@ -n +2 -d full.idx | awk -F@ '{print $3, "@", $2 }' >idx-part-1

   # Sort alphabetically and create idx-part-2, which looks like:
   #       Acess Denied    CDSCP_ACC_DENIED
   cat <<EOF >idx-part-2
   .TS
   tab(@);
   lBw(3i) lBw(2i)
   lw(3i) lw(2i) .
   Message Text@Symbolic Name
   EOF

   sort -t@ -f -d +3 full.idx | awk -F@ '{
      if ($2 != "" && $4 != "") {
         if (NR % 20 == 0) { printf(".TE\n.TS\ntab(@);\nlw(3i) lw(2i) .\n"); }
         printf("T{\n%s\nT}@T{\n%s\nT}\n", $4, $2);
      }
   }' >>idx-part-2

   echo .TE >>idx-part-2

   # We're done.
   exit
------------------------------------------------------------------------------
==============================================================================

   The makeidx script generates the following output files, whose contents
   will be placed in the two PDG appendixes: 

       idx-part-1        Contains the book's numeric index
       idx-part-2        Contains the book's alphabetic textual index


------------------------------------------------------------------------------
[FOR DCE 1.2.1:]
4A. Because (as explained above) the DFA messages' sams-generated hexadecimal
    error codes are meaningless in DCE 1.2.1, the DFA entries should be
    removed from idx-part-1, which is the index of error codes. This can
    easily be done by loading the file into an editor, and deleting the block
    of KDDS messages. The text of idx-part-2 should be left as it is; it
    consists of the index according to message text and symbols, without
    reference to the actual codes.

------------------------------------------------------------------------------
==============================================================================
III.  REPLACING THE PDG'S SML FILES AND REBUILDING THE BOOK
===========================================================

Once the SML files for the PDG body and appendixes are created, you need to
copy the contents to the PDG source files in the book directory, then build
the book. The steps to do this are as follows:

------------------------------------------------------------------------------
1.  Move to the

        <dce-root-dir>/doc/dcedoc/src/dce_books/prob_gd/prob_gd

    directory in the doc tree and checkout (bco) the

        messages.gpsml
        appA_num.gpsml
        appB_text.gpsml

    files.

------------------------------------------------------------------------------
2.  Delete the entire contents of the

        messages.gpsml

    file between the opening and closing change bars (.zA "" and .zZ "") and
    replace them with the contents of the compiled message file.

------------------------------------------------------------------------------
3.  Replace the contents of the tables in the

        appA_num.gpsml

    and

        appB.text.gpsml

    files with the contents of the

        idx-part-1

    and

        idx-part-2

    files. (There are some junk characters (@) at the top of the

        idx-part-1

    file; delete these characters.)

    Each of the appendix source files has an opening paragraph:

------------------------------------------------------------------------------
    For the

        appA_num.gpsml

    file, look for the table head immediately following this paragraph and
    place the

        idx-part-1

    file's contents between the end of the table head and the .TE macro at
    the end of the appendix source file. The opening paragraph and table
    head in the

        appA_num.gpsml

    file appears as follows:

        .H 1 "Message Numbers and Symbolic Names"
        .P
        The following listing maps the symbolic name to the returned
        hexidecimal message number.  If you only have the number to go by, 
        look up that number in the following listing to find the symbolic
        name.  You can then look in the preceeding alphabetical listing by 
        symbolic name to find detailed information about the message.
        .P
        .TS
        tab(@);
        lB lB
        l l.
        Hex Number@Symbolic Name

    Make sure to put a .TE code at the end of the table. And, preserve
    the .zZ comment.

------------------------------------------------------------------------------
    For the

        appB.text.gpsml

    file, the procedure is a little different. The

        idx-part-2

    file contains a fully formatted table, so you only need to copy this
    table over to the appB.text.gpsml file below the opening paragraph. The
    opening paragraph of the file looks like this:

        .H 1 "Message Text and Symbolic Names"
        .zA "enh,9951,R1.1,New Manual"
        .P
        The table in this appendix provides a cross-reference between the
        text of a message and its symbolic name.  If you only have the text
        to go by, look up that text in the following listing to find the
        symbolic name. You can then look in Appendix A that contains a
        cross-reference of message numbers and symbolic names to find the
        symbolic name.
    
    Make sure that you preserve the .zZ comment at the end of the file.

------------------------------------------------------------------------------
4.  Check all the files back in (bci), submit them to the RCS tree (bsubmit),
    and build the PDG (book-format) to have your updated version of the
    document.


    NOTE: You should do a test build of the new PDG before checking the files
          back in to the RCS tree.




------------------------------------------------------------------------------
==============================================================================
