...\" COPYRIGHT NOTICE
...\" Copyright (c) 1990-1996 Open Software Foundation, Inc. 
...\" ALL RIGHTS RESERVED (DCE). See the file named COPYRIGHT.DCE in the 
...\" src directory for the full copyright text. 
...\" 
...\" 
...\" 
...\" HISTORY
...\" $Log: intro.gpsml,v $
...\" Revision 1.1.6.2  1996/12/21  00:40:54  weir
...\" 	DCE 1.2.2 versions
...\" 	[1996/12/21  00:38:22  weir]
...\"
...\" Revision 1.1.6.1  1996/05/14  21:03:52  weir
...\" 	Removed 1.2.1 Change Markers
...\" 	[1996/05/14  21:02:17  weir]
...\" 
...\" Revision 1.1.4.4  1996/03/27  17:07:57  weir
...\" 	DCE 1.2.1 update
...\" 	[1996/03/27  17:05:41  weir]
...\" 
...\" Revision 1.1.4.3  1996/03/14  22:05:17  weir
...\" 	DFA messages added
...\" 	[1996/03/14  22:03:47  weir]
...\" 
...\" Revision 1.1.4.2  1996/03/12  21:17:35  weir
...\" 	DCE 1.2 version, almost final
...\" 	[1996/03/12  21:16:10  weir]
...\" 
...\" Revision 1.1.4.1  1995/12/28  18:34:44  weir
...\" 	Update for 1.2.1
...\" 	[1995/12/28  18:32:58  weir]
...\" 
...\" Revision 1.1.2.9  1994/10/14  15:40:44  steto
...\" 	{enh, CR9951, R1.1, Incorporated review comments.}
...\" 	[1994/10/14  15:38:30  steto]
...\" 
...\" Revision 1.1.2.8  1994/10/06  20:50:08  steto
...\" 	{enh, CR9951, R1.1, Incorporated review comments.}
...\" 	[1994/10/06  20:49:12  steto]
...\" 
...\" Revision 1.1.2.7  1994/06/13  16:15:22  devobj
...\" 	cr10872 - fix copyright
...\" 	[1994/06/13  16:09:07  devobj]
...\" 
...\" Revision 1.1.2.6  1994/05/23  18:57:29  digan
...\" 	Minor editorial corrections.
...\" 	[1994/05/23  18:56:21  digan]
...\" 
...\" Revision 1.1.2.5  1994/05/18  15:41:05  digan
...\" 	Revised to include information about appendixes.
...\" 	[1994/05/18  13:39:55  digan]
...\" 
...\" Revision 1.1.2.4  1994/05/10  18:32:31  digan
...\" 	Added Change Bar
...\" 	[1994/05/10  18:13:34  digan]
...\" 
...\" Revision 1.1.2.3  1994/05/10  13:23:50  digan
...\" 	Added book definition strings
...\" 	[1994/05/10  13:00:40  digan]
...\" 
...\" Revision 1.1.2.2  1994/05/06  18:45:29  digan
...\" 	Added information for Beta release.
...\" 	[1994/05/04  15:46:07  digan]
...\" 
...\" Revision 1.1.2.1  1994/02/11  17:58:14  rom
...\" 	First version.
...\" 	[1994/02/11  15:01:29  rom]
...\" 
...\" $EndLog$
...\"
...\" ----------------------------------------------------------------------
.H 1 "Introduction"
...\" ----------------------------------------------------------------------
...\" 
.P
The error message and status codes in the following chapter include
detailed explanations and recovery actions for all DCE messages and
status codes issued by the following DCE components:
...\" 
.ML
.LI
Audit
.LI
Cell Directory Service 
.LI
Code-Set Registry Compiler
.LI
Configuration 
.LI
DCE Control Program 
...\" 
...\" .zA "enh,13375,1.2.1,Add DCE/File-Access Information"
.LI
Distributed File-Access (DFA)
...\" .zZ "enh,13375,1.2.1,Add DCE/File-Access Information"
...\" 
.LI
DCE Host Daemon 
.LI
Distributed Time Service 
.LI
Generic Security Service
.LI
Global Directory Service 
.LI
Interface Definition Language 
.LI
Pthreads
.LI
Remote Procedure Call 
.LI
Security 
.LI
Serviceability 
.LI
DCE Threads
.LI
Universal Unique Identifier Generator 
.LI
Utilities 
.LE
.P
All messages documented here are visible to the user, who might be a
programmer, administrator, or operator.
...\" 
...\" 
...\" ----------------------------------------------------------------------
.H 2 "Message Structure"
...\" ----------------------------------------------------------------------
...\" 
...\" .zA "enh,13375,1.2.1,Add DCE/File-Access Information"
.P
Each message or code block contains several fields of information.
With the exception of the Distributed File-Access (DFA), XDS, XOM,
and Pthreads messages, the first field contains a unique 32-bit hex
value.  XDS and XOM messages are X.500 compliant.  The Pthreads messages
are Posix-compliant.  DFA does not use DCE serviceability to display its
messages, and has its own system of error codes. Consequently, none of these
components' messages have error numbers or hex values.  Instead, their
messages contain dashes (---) in their first field in the listings in
this book.
...\" .zZ "enh,13375,1.2.1,Add DCE/File-Access Information"
.P
The second field contains the symbolic name for the message or code.
A few Pthreads messages do not have a symbolic name.  These messages
contain dashes (---) in the symbolic-name field.
.P
The symbolic name is followed by three fields containing the
severity level, component, and subcomponent name (which can be absent if not
applicable).  The sixth field contains the text of the message.  The seventh
field contains an explanation of the event that generated the message.  The
eighth field contains a recovery action.
.P
The following is an example of a typical DCE error message:
...\" 
...\" 
.in 0
.nr !a 6n
.VL \n(!au
.LI\*L0x1131f08b\*O
\*Ldcp_s_cds_no_obj_mod_operation\*O
.P
\*LSeverity:\*O Warning  \*LComponent:\*O dcp  \*LSubcomponent:\*O dcp_svc_cds
.P
\*LText:\*O
Option not specified.
.P
\*LExplanation:\*O
The \*Lobject modify\*O command requires one or more options.
.P
\*LAction:\*O
Retype the command with one or more of the following options:
\*L-add, -remove,\*O or \*L-change.\*O.
.LE
...\" 
...\" 
.P
The content of these eight fields is self explanatory with the
exception of the severity and the subcomponent fields.
...\" 
...\" 
...\" 
...\" ----------------------------------------------------------------------
.H 3 "Severity Levels"
...\" ----------------------------------------------------------------------
...\" 
.P
The level contained in the severity field will generally be
one of the following: 
...\" 
.VL 7m
.LI "\*LFatal\*O"
An unrecoverable error has occurred.  The program usually terminates
and special recovery action is required. 
.LI "\*LError\*O"
An unexpected, nonterminal or correctable event.  The program 
continues, but some services may not be available.  It might also
indicate that a request or action could not be completed.
.LI "\*LWarning\*O"
Action has been taken that may not be the desired or requested action.
For example, if a requested database was not found, the default might
be used.  Or it may be a warning that some possibly undesired action
will take place, such as a directory that is not empty will be removed.
It might also indicate that a future problem will arise if action
is not taken now; for example, a printer might be low on paper.
.LI "\*LNotice\*O"
An event has taken place that does not directly require action; for
example, a process might have started as requested.
.LI "\*LNotice Verbose\*O"
This is the same as above, but contains more detailed information.
.LE
...\" 
.P
When more than one subcomponent can return a given error message or
status code, the severity level is dependent on the subcomponent or
particular circumstances.  In
these cases, the severity field will state, "Varies".
...\" 
...\" 
...\" 
...\" ----------------------------------------------------------------------
.H 3 "Subcomponents"
...\" ----------------------------------------------------------------------
...\" 
.P
DCE components can consist of several subcomponents.  For example, the
DCE Host Daemon component consists of the following subcomponents: 
...\" 
.tS
aclmgr
xattrschema
general
hostdata
rkeytab
secval
srvrconf
srvrexec
locks
endpoint
.tE
...\" 
.P
When more than one subcomponent could issue an error message or status
code, the subcomponent field states, "Varies".  Otherwise, this field notes
the specific subcomponent.
...\" 
...\" 
...\" 
...\" ----------------------------------------------------------------------
.H 2 "Message Routing With the Serviceability API"
...\" ----------------------------------------------------------------------
...\" 
.P
Message routing allows for the specification of where messages are
sent.  There are five methods for routing messages.  See the
\*Lsvcroute(5svc)\*O reference page for details on how to set the routes.
...\" 
...\" 
...\" 
...\" ----------------------------------------------------------------------
.H 3 "Using Routing Files"  
...\" ----------------------------------------------------------------------
...\" 
.P
If a routing file is used, then the file specifies the routing
based on severity levels.  The destination could be one of the
following:
...\" 
.VL 7m
.LI "\*LBINFILE\*O"
Messages are written as binary log entries to a file
.LI "\*LTEXTFILE\*O"
Messages are written as human-readable text to a file
.LI "\*LFILE\*O"
This is the equivalent of TEXTFILE
.LI "\*LDISCARD\*O"
Messages are not recorded
.LI "\*LSTDOUT\*O"
Messages are written as human-readable text to standard output
.LI "\*LSTDERR\*O"
Messages are written as human-readable text to standard error
.LI "\*LGOESTO\*O"
Messages are sent to the destination designated for the specified
severity level
.LE
...\" 
.P
Messages of different severity levels can be routed differently.  For
example, all "Notices" could be discarded and all "Fatal" errors could
be written to a binary log.  
.P
\*LBINFILEs\*O can be read and manipulated with the following set of
logfile functions:  
...\" 
.VL 14m 
.LI "\*Ldce_svc_log_open(\|)\*O"
Opens a logfile for reading.
.LI "\*Ldce_svc_log_get(\|)\*O"
Reads the next entry from the logfile.
.LI "\*Ldce_svc_free_entry(\|)\*O"
Frees the logfile space of the current entry.
.LI "\*Ldce_svc_log_rewind(\|)\*O"
Returns log processing back to the first message.
.LI "\*Ldce_svc_log_close(\|)\*O"
Closes the open logfile.
.LE
...\" 
.P
For detailed information about the logfile functions, see the reference pages.
...\" 
...\" 
...\" 
...\" ----------------------------------------------------------------------
.H 3 "Using Environment Variables"
...\" ----------------------------------------------------------------------
...\" 
.P
You can also route messages based on severity by using the environment
variables:
...\" 
.ML
.LI
\*LSVC_FATAL\*O
.LI
\*LSVC_ERROR\*O
.LI
\*LSVC_WARNING\*O
.LI
\*LSVC_NOTICE\*O
.LI
\*LSVC_NOTICE_VERBOSE\*O
.LE
...\" 
...\" 
...\" 
...\" ----------------------------------------------------------------------
.H 3 "Using dce_svc_routing
...\" ----------------------------------------------------------------------
...\" 
.P
Message routing can be set up by the application itself, by calling
the \*Ldce_svc_routing(\|)\*O routine and passing to it a string
formatted in the same way as a line of text from a routing file.  The
routine must be called for each severity level being set.
...\" 
...\" 
...\" 
...\" ----------------------------------------------------------------------
.H 3 "Using Attributes"
...\" ----------------------------------------------------------------------
...\" 
.P
The final two routing methods allow for limited routing.  Routing can
be specified by attribute, either in the message definition in the
sams file, or as part of the argument list to \*Ldce_svc_printf(\|)\*O
routine.
.P
For additional information on the Serviceability API, see the
Serviceability chapter in the \*(Dk.
...\"\*EOSF DCE Application Development Guide\(emCore Components.\*O 
...\" 
...\" 
...\" 
...\" ----------------------------------------------------------------------
.H 2 "Administering the Routing State" 
...\" ----------------------------------------------------------------------
...\" 
.P
The \*Llog\*O command of the DCE control program (\*Ldcecp\*O) allows
you to determine the serviceability
components that are registered by the server.  You can also request a list of
the subcomponents for each component registered.  The \*Llog\*O
command also allows you to change the routing specifications for a
server. 
.P
See the \*(Ar
...\*EOSF DCE Command Reference\*O 
for additional information. 
...\" 
...\" 
...\" 
...\" ----------------------------------------------------------------------
.H 2 "Using This Guide"
...\" ----------------------------------------------------------------------
...\" 
.P
The messages and status codes found in the \*(Tg
...\"\*EOSF DCE Problem Determination Guide\*O 
are organized alphabetically by symbolic name. You may, however, only
have a textual message or hex number for a message.  To accommodate
these situations, there are two appendixes following the alphabetical
listing.  One maps the hex numbers to symbolic names and the other maps
symbolic names to textual messages.  You can use these two mappings to
find the symbolic name for a given textual message or hex number and
then look up the symbolic name in the alphabetical listing.
...\" 
...\" 
...\" 
...\" 
...\" 
...\" 
...\" ----------------------------------------------------------------------
