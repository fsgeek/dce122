...\" @OSF_COPYRIGHT@
...\" COPYRIGHT NOTICE
...\" Copyright (c) 1990, 1991, 1992, 1993, 1994 Open Software Foundation, Inc.
...\" ALL RIGHTS RESERVED (DCE).  See the file named COPYRIGHT.DCE for
...\" the full copyright text.
...\" 
...\" 
...\" HISTORY
...\" $Log: EDEADLK,v $
...\" Revision 1.1.2.3  1994/10/03  19:06:28  steto
...\" 	{enh, 9951, R1.1, Updated message format for GA.}
...\" 	[1994/10/03  19:04:15  steto]
...\"
...\" Revision 1.1.2.2  1994/06/13  16:15:47  devobj
...\" 	cr10872 - fix copyright
...\" 	[1994/06/13  16:10:09  devobj]
...\" 
...\" Revision 1.1.2.1  1994/06/06  13:05:28  digan
...\" 	{enh, CR9951, R1.1}
...\" 	This file should be copied to the compiled sams file.
...\" 	[1994/06/03  15:42:22  digan]
...\" 
...\" $EndLog$
.LI"\*L----------   EDEADLK\*O"
.P
\*LSeverity:\*O Warning  \*LComponent:\*O Threads
.P
\*LText:\*O 
Resource deadlock avoided
.P
\*LExplanation:\*O
The attempted operation would have resulted in one or more threads
being permanently blocked from executing.  This situation occurs when
a thread must wait on a resource that is held by another thread.  This
error is returned by the following routines:
.tS
\*Lpthread_cond_timedwait\*O
\*Lpthread_cond_wait\*O
\*Lpthread_mutex_lock\*O
\*Lpthread_join\*O	
.tE
.P
\*LAction:\*O
To avoid a deadlock situation, you can use the following technique:
.AL
.LI
Associate a sequence number with each mutex.
.LI
Lock mutexes in sequence
.LI
Do not attempt to lock a mutex with a sequence number lower than that
of a mutex the thread already holds.
.LE

In addition, if a thread needs to lock the same mutex more than once
before unlocking it, specify a recursive mutex in your call to
\*Lpthread_mutexattr_setkind_np()\*O.  
