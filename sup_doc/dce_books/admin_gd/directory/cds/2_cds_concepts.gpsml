...\"
...\" @OSF_COPYRIGHT@
...\" COPYRIGHT NOTICE
...\" Copyright (c) 1990, 1991, 1992, 1993 Open Software Foundation, Inc.
...\" ALL RIGHTS RESERVED (DCE).  See the file named COPYRIGHT.DCE in the
...\" src directory for the full copyright text.
...\"
...\"
...\" HISTORY
...\" $Log: 2_cds_concepts.gpsml,v $
...\" Revision 1.1.8.1  1996/09/19  14:26:38  sherman
...\" 	{def,13575,R1.2.2}
...\" 	Miscellaneous dcecp fixes
...\" 	[1996/09/19  14:26:17  sherman]
...\"
...\" Revision 1.1.6.19  1995/05/25  19:02:00  rcb
...\" 	PRENTICE HALL reformat: final changes
...\" 	[1995/05/25  13:14:16  rcb]
...\" 
...\" 	1.1 edit; terminology fix
...\" 	[1995/04/10  18:48:20  rcb]
...\" 
...\" 	PRENTICE HALL reformat -- index entries, odds and ends
...\" 	[1995/03/27  19:49:20  rcb]
...\" 
...\" 	PRENTICE HALL reformat
...\" 	[1995/02/27  17:18:39  rcb]
...\" 
...\" 	additional 1.1 edit changes
...\" 	[1995/02/27  17:14:12  rcb]
...\" 
...\" 	incorporated 1.1 edits
...\" 	[1995/02/27  16:39:20  rcb]
...\" 
...\" Revision 1.1.6.18  1994/10/19  15:58:44  wardr
...\" 	{edit R1.1}
...\" 	Final GA release edits
...\" 	[1994/10/19  15:57:56  wardr]
...\" 
...\" Revision 1.1.6.17  1994/09/29  21:11:54  steto
...\" 	{edt, R1.1, Changed wording that was not clear.}
...\" 	[1994/09/29  21:11:33  steto]
...\" 
...\" Revision 1.1.6.16  1994/09/23  18:39:42  pfa
...\" 	Added attribute definition.
...\" 	[1994/09/23  18:38:37  pfa]
...\" 
...\" Revision 1.1.6.15  1994/09/06  19:38:28  steto
...\" 	{edt, R1.1, Made a few edits.}
...\" 	[1994/09/06  19:38:13  steto]
...\" 
...\" Revision 1.1.6.14  1994/09/06  18:19:11  steto
...\" 	{edt, R1.1, Fixed bad index entries.}
...\" 	[1994/09/06  18:18:48  steto]
...\" 
...\" 	{edt, r1.1, Checked out by mistake.}
...\" 	[1994/08/31  20:45:39  steto]
...\" 
...\" Revision 1.1.6.13  1994/08/31  17:14:52  steto
...\" 	{enh, CR10014, R1.1, Updated for dcecp; prepared for final review.}
...\" 	[1994/08/31  17:14:32  steto]
...\" 
...\" Revision 1.1.6.12  1994/08/29  13:22:07  wardr
...\" 	{enh, 10400, R1.1}
...\" 	fixed app dev gd xref
...\" 	[1994/08/29  13:21:27  wardr]
...\" 
...\" Revision 1.1.6.11  1994/08/22  21:08:11  rjohnson
...\" 	Change made: Incorporated review comments.
...\" 	[1994/08/22  21:07:40  rjohnson]
...\" 
...\" 	Changes made: Added review comments.
...\" 	[1994/08/15  16:26:34  rjohnson]
...\" 
...\" Revision 1.1.6.10  1994/05/18  13:04:00  wardr
...\" 	{edit R1.1}SGML fixes
...\" 	[1994/05/18  13:03:43  wardr]
...\" 
...\" Revision 1.1.6.9  1994/05/13  20:53:31  steto
...\" 	{edt, R1.1}
...\" 	Checked out by error; no changes made.
...\" 	[1994/05/13  20:53:05  steto]
...\" 
...\" Revision 1.1.6.8  1994/05/11  18:50:02  rjohnson
...\" 	Updated to include CR#10578.
...\" 	[1994/05/11  18:49:38  rjohnson]
...\" 
...\" Revision 1.1.6.7  1994/05/10  14:59:03  wardr
...\" 	Fix Doc Build Probs
...\" 	[1994/05/10  14:57:31  wardr]
...\" 
...\" Revision 1.1.6.6  1994/05/09  12:05:06  rjohnson
...\" 	Changes made: Added info on hierarchial cells for release 1.1.
...\" 	File name: /admin_gd/directory/cds/2_cds_concepts.gpsml
...\" 	[1994/05/02  15:36:01  rjohnson]
...\" 
...\" Revision 1.1.6.5  1993/08/15  02:44:32  tmw
...\" 	Added index entries for second version of master index.
...\" 	[1993/08/13  03:40:23  tmw]
...\" 
...\" Revision 1.1.6.4  1993/07/06  18:34:05  buckler
...\" 	{edit, R1.0.2}
...\" 	Prentice-Hall editorial changes.
...\" 	[1993/07/06  18:24:43  buckler]
...\" 
...\" 	{edit, R1.0.2}
...\" 	More Prentice-Hall edits.
...\" 	[1993/06/29  21:28:04  buckler]
...\" 
...\" Revision 1.1.6.3  1993/05/26  20:31:16  weir
...\" 	Prentice-Hall edits
...\" 	[1993/05/26  20:30:32  weir]
...\" 
...\" Revision 1.1.6.2  1993/05/25  15:46:57  buckler
...\" 	{edit, R1.0.2}
...\" 	Prentice-Hall editorial review.
...\" 	[1993/05/25  15:46:09  buckler]
...\" 
...\" Revision 1.1.4.7  1993/02/23  01:58:02  lipsky
...\" 	Changes made:  Added security information due to reviewers' comments
...\" 	File name:  src/admin_gd/directory/cds/2_cds_concepts.gpsml
...\" 	[1993/02/23  01:57:20  lipsky]
...\" 
...\" Revision 1.1.4.6  1993/02/15  19:11:30  buckler
...\" 	Changed .P! to .pI and added Postscript boundary boxes
...\" 	[1993/02/15  19:10:35  buckler]
...\" 
...\" Revision 1.1.4.5  1993/01/28  19:06:39  dbelch
...\" 	Embedding copyright notice
...\" 	[1993/01/28  18:31:15  dbelch]
...\" 
...\" Revision 1.1.4.4  1993/01/27  16:03:27  buckler
...\" 	Fixed cross-refs and figure calls for new book org
...\" 	[1993/01/27  15:59:44  buckler]
...\" 
...\" Revision 1.1.4.3  1992/08/26  13:29:08  weir
...\" 	Test
...\" 	[1992/08/26  13:27:43  weir]
...\" 
...\" 	Removed change bars
...\" 	[1992/08/26  13:24:46  weir]
...\" 
...\" Revision 1.1.4.2  1992/08/25  20:33:33  weir
...\" 	Moved to dce1.0.2doc
...\" 	[1992/08/25  20:26:03  weir]
...\" 
...\" Revision 1.1.2.3  1992/07/06  23:15:37  lipsky
...\" 	Changes made:  Added review comments
...\" 	File name: 2_cds_concepts.gpsml
...\" 	[1992/07/06  23:14:59  lipsky]
...\" 
...\" Revision 1.1.2.2  1992/05/08  23:40:10  lipsky
...\" 	Checked this out by mistake.
...\" 	[1992/05/08  23:38:37  lipsky]
...\" 
...\" Revision 1.1  1992/01/29  16:15:53  damon
...\" 	Initial revision
...\" 
...\" $EndLog$
...\"
...\" (c) Copyright 1991, Open Software Foundation, Inc.  ALL RIGHTS RESERVED
...\"   HISTORY COMMENTS:
...\"
...\"   DATE:                            COMMENT:
...\"
...\"	Tues Oct 29, 1991                Initial File Submission for final
...\"                                    integration at IBM
...\"
...\" ********************************************************************
...\"                                                                    *
...\" COPYRIGHT (c) 1991 BY DIGITAL EQUIPMENT CORPORATION,               *
...\" Maynard, Massachusetts                                             *
...\" All Rights Reserved.                                               *
...\"                                                                    *
...\" This document is furnished under a license and may be used and     *
...\" copied only in accordance with the terms of such license and with  *
...\" the inclusion of the above copyright notice.  No title to or        *
...\" ownership of the document is hereby transferred.                   *
...\"                                                                    *
...\" The information in this document is subject to change without      *
...\" notice and should not be construed as a commitment by Digital      *
...\" Equipment Corporation.                                             *
...\"                                                                    *
...\" ********************************************************************
.H 1 "CDS Concepts"
.P
.iX "-[" "CDS" "concepts"
The Cell Directory Service (CDS) is a high-performance
distributed service that provides a consistent, location-independent method
for naming and using resources inside a cell.  CDS offers the
ability to replicate  CDS names; that is, to store copies of them on more
than one node.  CDS automatically keeps multiple copies consistent.  Names also
can be distributed among several nodes so that no one node has to store all of
them.  This feature is particularly valuable in large cells.
.P
The ability to replicate and distribute information has many benefits,
including the following:
.ML
.LI
Availability\(emBecause you can store the same name in
more than one place, data is likely to be available even in the event of
a system or network failure.
.LI
Efficiency\(emCDS finds names
efficiently because you can store them close to where they are used most
often.  Furthermore, once CDS finds a name,
it can connect to the same name immediately on all subsequent lookups.
.LI
Load Sharing\(emBecause names are in more than one
place, several systems can share the load of looking them up.
.LI
Expandability\(emNew names are easily accommodated as
the network grows and more applications use CDS.
.LE
.H 2 "How CDS Works"
.iX "CDS" "components"
.P
Operation of the CDS involves several major participants:
.ML
.LI
client applications
.LI
servers
.LI
clerks
.LI
clearinghouses
.LE
.P
CDS uses a client/server model.  An application that depends on
CDS to store and retrieve information for it is a client 
of CDS.  Client applications create names for
resources on behalf of their users.  Through a client application, a user can
supply other information for CDS to store as attributes of a
name.  Then, when a client application user refers to the resource by its
CDS name, CDS retrieves data from the attributes
for use by the client application.
.iX "CDS" "servers" "about"
.iX "CDS" "clerk" "about"
.P
A system running CDS server software is a CDS server.  
A CDS server stores and
maintains CDS names and handles requests to create, modify, or
look up data.
.P
A component called the \*Eclerk\*O 
is the interface between client
applications and CDS servers.  Every DCE node must run a CDS clerk.
The clerk receives a
request from a client application, sends the request to a server, and
returns the resulting information to the client.  This process is called a
\*Elookup\*O.  The clerk is also the interface through which client
applications create and modify names.  One clerk can work on behalf of many 
client applications.
.P
The clerk caches, or saves, the results of lookups so that it does not have
to repeatedly go to a server for the same information. 
The cache is written to disk periodically so that the information can 
survive a system reboot or the restart of an application.  
When you stop the CDS advertiser, the cache is written to disk.  
Caching improves performance and reduces
network traffic.
.P
.iX "CDS" "configuration (figure)" 
Figure 12-1 shows a sample configuration of CDS
clerks and servers on a 9-node local area network (LAN).  Every node is a 
clerk, and CDS servers run on two selected nodes.
.P
.ne 2.25i
.FG "CDS Clerks and Servers on a LAN"
.pI ../directory/cds/figures/2_cds_concepts_10.ps 0 0 1
.sp .5
.P
.iX "clearinghouses" "about"
Every CDS server has a database called a \*Eclearinghouse\*O 
in which it stores names and other 
CDS data.  The clearinghouse is where a CDS
server adds, modifies, deletes, and retrieves data on behalf of client
applications.  Although more than one clearinghouse can exist at a server 
node, it is not recommended as a normal configuration.
.iX "-[" "CDS" "how it works"
.iX "-[" "lookups" "how they work"
.P
Figure 12-2 shows the interaction between a CDS
client, clerk, server, and clearinghouse during a simple lookup.
...\" The preceding figure shows 
It illustrates the following CDS lookup steps:
...\" 
.AL
.LI
The client application on Node 1 sends a lookup request to the local clerk.
.LI
The clerk checks its cache and, not finding the name there, contacts the
server on Node 2.
.LI
The server checks to see if the name is in its clearinghouse.
.LI
The name exists in the clearinghouse, so the server gets the requested
information.
.LI
The server returns the information to the clerk on Node 1.
.LI
The clerk passes the requested data to the client application.  The clerk
also caches the information so that it does not have to contact a server the
next time a client requests a lookup of that same name.
.iX "-]" "lookups" "how they work"
.iX "-]" "CDS" "how it works" 
.LE
...\" 
.P
.ne 4i
.FG "A Sample CDS Lookup"
.pI ../directory/cds/figures/2_cds_concepts_20.ps 0 0 1
.sp .5
.H 2 "Replicas and Their Contents"
.iX "-[" "replica" "about (CDS)"
.P
Directories are the units by which you distribute and replicate names
throughout the cell's namespace.  
Each physical copy of a directory, including the original, is called a 
\*Ereplica\*O.   When you create a replica of a
directory, you replicate all of the entries in it as well.
.P
.iX "clearinghouses" "about"
Replicas are stored in clearinghouses.  You can think of
a clearinghouse as the collection of directory replicas at a particular
server.  After you create a directory in one clearinghouse, you can create
replicas of 
it in other clearinghouses to increase availability for looking up 
information.  
CDS periodically ensures that the contents of
all replicas of a directory remain consistent.
.P
.ne 5
Two types of replicas can exist:
.ML
.LI
Master
.LI
Read-only
.LE
.P
A replica's type affects the processing that can be done on it and the way
CDS updates it.  The type of replica that CDS
uses when it looks up or changes data is invisible to users.  However,
it helps to understand how the two types differ.
.P
The master replica 
is the first instance of a specific directory
in the cell's namespace.  After you make copies of the directory, you can designate
a different replica as the master, if necessary.  However, only one master
replica of each directory can exist at a time.  (See Chapter 21 for complete 
information on how to redesignate the master replica of a directory.)
.P
The master replica is the only directly modifiable replica of a directory.
CDS can create, change, and delete information in a master replica.
Because it is modifiable, the master replica incurs more overhead than
read-only replicas, which CDS keeps up-to-date periodically with changes
made to the master replica.
.P
A read-only replica
is a copy of a directory that is available only for looking up information.
CDS does not create, modify, or delete names in read-only replicas; it simply
updates them with changes made to the master replica.
.P
Replicas can contain three kinds of entries:
.ML
.LI
object entries
.LI
soft links
.LI
child pointers
.LE
.H 3 "Object Entries"
.iX "-[" "objects" "entries"
.iX "objects" "about"
.P
An object is any real resource\(emlike a disk, application,
or node\(emthat is given a CDS name.  When an object name is
created, client applications and the CDS software supply
attributes to be stored with the name.  
.iX "attribute"
An attribute, consisting of an attribute name and value(s), describes
a particular operational property of an object.
The name and its
attributes make up the \*Eobject entry\*O.  When a client application
requests a lookup of the name, CDS returns the value of the
relevant attribute or attributes.
.P
.ne 7
Object entries are typically created and managed through a client application
interface.  For example, the DCE control program and the 
Name Service Interface (NSI) of the RPC runtime let users create
entries that represent RPC servers, groups, and profiles.
These are special kinds of entries that enable an RPC application to locate 
and select servers.  (See the \*(Dg 
for details on how RPC uses CDS for this purpose.)
.P
You can also create object entries through the DCE
control program (\*Ldcecp\*O).  (See Part 1 of this document and the
\*(Ar
for information on the commands that allow you 
to create and manage object entries by using
\*Ldcecp\*O.)
.P
Every object can have a defined class, which is an optional attribute of the
object entry.  DCE components that use the directory service can 
define their own
object classes and supply class-specific attributes for the
directory service to store on their behalf.  Class-specific attributes have
meaning only to the particular class of objects with which they are associated.
.iX "clearinghouses" "object entries"
.P
The clearinghouse object entry represents a special class of 
object that is predefined by CDS.  A clearinghouse object entry
serves as a pointer to the location of a clearinghouse in the
network.  CDS needs this pointer so that it can look up and
update data in a clearinghouse.
.P
When you create a clearinghouse, CDS creates its clearinghouse
object entry automatically.  The clearinghouse object entry acquires the
same name as the
clearinghouse.  The clearinghouse object entry is like any other object
entry in that it describes an actual resource, but it is different because
it is solely for internal use by CDS.
Clearinghouses can only be created in
the cell root directory.  Therefore, all clearinghouse object entries are
stored in the cell root directory.
CDS itself
updates and manages clearinghouse object entries when necessary.  They do not
require any external management except in rare problem-solving situations.  
(See your vendor for help in these situations.)
.iX "-]" "objects" "entries"
.H 3 "Soft Links"
.iX "soft links" "about"
.P
A \*Esoft link\*O
is a pointer that provides an alternate name for an
object entry, directory, or other soft link in the cell's namespace.  You can do
minor restructuring of a cell's namespace by creating soft links that 
point from an existing name to a new name.  
Soft links also can be a way to give something
multiple names so that different kinds of users can refer to a name in a
way that makes the most sense to them.
.P
Soft links can be permanent, or they can expire after a period of time that you
specify.  If the name that a soft link points to is deleted, 
CDS deletes the soft link automatically when it expires.
.P
CDS managers should use soft links carefully.  They should not use soft links
to completely redesign the cell's namespace or to provide
shortcuts for users who do not want to use the full name of an object
entry.  Overuse of soft links makes CDS names more difficult to
keep track of and manage.
.H 3 "Child Pointers"
.iX "child" "pointers" "and child cells"
.iX "parent cells" "and child pointers"
.iX "child" "cells" "and child pointers" 
.iX "child" "pointers" "about"
.iX "directories" "child pointers (CDS)" 
.P 
A \*Echild pointer\*O provides the following kinds of connections 
for cells:   
.ML
.LI
Between a directory to another directory immediately beneath it in a
cell's namespace
.LI
Between a parent and its child cell
.LE
.P 
Users and applications do not create child pointers; CDS creates a child
pointer automatically when someone creates a new directory.
The child pointer is
created in the directory that is the parent of (one level above) the
directory to which it points.  CDS uses child pointers to locate
directory replicas when it is trying to find a name.  Child pointers do not
require management except in rare problem-solving situations.
.H 3 "Summary"
.P
To summarize, a cell consists of a 
complete set of names that are shared
and managed by one or more CDS servers in a cell.
A name can designate a directory, object entry, soft link, or child pointer. 
The logical representation of a cell's  
namespace is a hierarchical structure of directories and the names they 
contain.  Every physical instance of a directory is called a \*Vreplica\*O.
Names are physically stored in replicas, and replicas
are stored in clearinghouses.  Any node that contains a clearinghouse and
runs CDS server software is a \*VCDS server\*O.
.P
Figure 12-3 shows the components of a CDS server node.  Every server 
manages at least one clearinghouse containing directory
replicas.  A replica can contain object entries, soft links, and child pointers.
The figure shows only one replica and one of each type of entry
that is possible in a replica.  Normally, 
a clearinghouse contains many replicas, and
a replica contains many entries.
.iX "CDS" "servers" "components (figure)"
.FG "Components of a CDS Server Node"
.pI ../directory/cds/figures/2_cds_concepts_30.ps 0 0 1
.P
.iX "-]" "replica" "about (CDS)"
.H 2 "Security in the Cell Directory Environment"
.iX "-[" "CDS" "security"
.P
In a secure DCE cell operation, a server does not complete a user's 
request 
unless the user's identity has been verified through the DCE Authentication
Service.  So, for example, a CDS server allows a user to create a new
directory only if that user's identity has been verified.  The process of
verifying that users are who they say they are is called \*Eauthentication\*O. 
The proof is in the form of a user name, or principal name, coupled with a
special kind of password.
.P
CDS servers themselves must be authenticated principals for two reasons:
.ML
.LI
To prove to clients that they are trustworthy
.LI
To prove to each other that they have the permission to modify and manage 
the data that they share
.LE
.P
The principal name of a CDS server is automatically selected by the 
configuration program and is placed in a group 
that contains the names of all CDS servers in 
the cell.  The group is stored as an entry in the DCE Security Service database.
After initial contact with a CDS server, the clerk confirms through
the DCE Security Service that the server is a valid member of the server group.
.P
Authentication is not an end in itself, but is instead a step in
the process of authorization.  Once the identity of a principal has been
verified, the software must next determine whether that principal has the
permissions that are required to perform a requested action.
This is called \*Eauthorization\*O.
Therefore, to create a new directory,
the user in the previous example must not only be authenticated, but 
have the appropriate permissions as well.
.P
Servers need to be authenticated to each other because they share and modify
replicated data.
For example, suppose server A and
server B both store a replica of the same directory.  
Associated with each directory is a list of all the servers 
authorized to maintain that directory.  When a user modifies an
entry in the replica at server B, server B must notify server A of the change. 
Server A does not accept the update unless server B is an authenticated
principal and is one of the principals authorized to modify that directory.
.P
.iX "permissions" "CDS objects"
The CDS permissions are read, write, insert, delete, test, control, and
administer.  Each has a slightly different meaning depending on the kind
of name it is associated with, but, in general, their meanings are as follows:
.ML
.LI
Read permission lets users view data.
.LI
Write permission lets users add or change data.
.LI
Insert permission lets users create entries in a directory.
.LI
Delete permission lets users delete entries.
.LI
Test permission lets users test whether an attribute of a name has a
specific value without being able to see any values\(emthat is, 
without having read permission to the name.  The main advantage of 
this permission is that it gives application programmers a more 
efficient way to check for a value: rather than reading a whole set 
of values, the application can test for a particular value.
.LI
Control permission lets users manage the access control list
(ACL) of an entry.
.LI
Administer permission lets users manage directory replication.
.LE
.P
Note that it is possible to define a special ACL for users who cannot be
authenticated or who deliberately request unauthenticated operations.  In such
a case, the user's identity is not verified, and the ACL entry
for unauthenticated
users determines whether the user has the permissions to perform the requested
action.  (See
...\" the \*EDCE Security Service\*O module of this guide 
Part 6 of this guide
for details on creating ACLs for unauthenticated users.)
.iX "-]" "CDS" "security"
.H 2 "CDS User Interfaces"
...\" .iX "-[" "CDS" "user interfaces"
...\" .iX "-[" "user interfaces " "CDS"
.P
.iX "CDS" "user interfaces"
CDS has several \*Eentities\*O that can be managed via user interfaces
that are provided in DCE.  A CDS entity is any individually manageable
piece of the CDS software. 
.iX "entities" "about"
CDS directories, soft links, and object entries are the most common entities
that you manage with the DCE user interfaces.  Some object entries, though,
are normally managed through the client application that creates them.
.P
.iX "\*Ldcecp\*O"  "use with CDS" 
The DCE control program provides many commands for managing CDS
entities.  Chapter 15 of this guide contains information about these
commands.
.P
.zA "def,13575,R1.2.2,Removed cdscp and rpccp - replaced by dcecp"
.ne 5
CDS also comes with one other user interface called the browser.
.P
.iX "browser" "about"
.iX "namespace" "viewing"
The browser is a tool for viewing the content and structure of a
namespace.  It runs on workstations with windowing software that is based
on the OSF/Motif\(rg graphical user interface.  Using a mouse to manipulate
pull-down menus, you can view the directory structure of a namespace,
view child directories of a particular directory, view the object entries
and soft links in a directory, and set a filter to display only object
entries of a particular class.  (For users who do not have windowing 
software, similar functions are available with \*Ldcecp\*O.)
.P
In addition to \*Ldcecp\*O and the
browser, other DCE user interfaces allow access to and management of CDS
names.  For example, users can control access to CDS directories and their
contents by using an ACL editor such as the \*Ldcecp acl\*O object, which is 
supplied
with the DCE Security Service.  RPC application programmers can create
server entries, groups, and configuration profiles in the cell's namespace
with \*Ldcecp\*O.
.zZ "def,13575,R1.2.2,Removed cdscp and rpccp - replaced by dcecp"
.iX "-]" "CDS" "concepts"
