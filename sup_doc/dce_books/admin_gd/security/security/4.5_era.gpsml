...\" @OSF_COPYRIGHT@
...\" COPYRIGHT NOTICE
...\" Copyright (c) 1990, 1991, 1992, 1993, 1994 Open Software Foundation, Inc.
...\" ALL RIGHTS RESERVED (DCE).  See the file named COPYRIGHT.DCE for
...\" the full copyright text.
...\" 
...\" HISTORY
...\" $Log: 4.5_era.gpsml,v $
...\" Revision 1.1.6.1  1996/09/19  17:08:45  sherman
...\" 	{def,13330,R1.2.2}
...\" 	Fixed xattrschema create example
...\" 	{def,13339,R1.2.2}
...\" 	Fixed xattrschema rename example
...\" 	{def,13575,R1.2.2}
...\" 	Fixed various dcecp problems
...\" 	[1996/09/19  17:08:05  sherman]
...\"
...\" Revision 1.1.4.1  1996/03/12  19:52:26  wardr
...\" 	{edit R1.2.1}
...\" 	Release Edits
...\" 	[1996/03/12  19:52:05  wardr]
...\" 
...\" Revision 1.1.2.8  1995/05/25  19:07:52  rcb
...\" 	PRENTICE HALL reformat: final changes
...\" 	[1995/05/25  13:24:40  rcb]
...\" 
...\" 	PRENTICE HALL reformat -- index entries, odds and ends
...\" 	[1995/03/27  19:51:00  rcb]
...\" 
...\" 	minor edit fix
...\" 	[1995/03/16  17:30:21  rcb]
...\" 
...\" 	PRENTICE HALL reformat
...\" 	[1995/03/09  19:59:43  rcb]
...\" 
...\" 	incorporated 1.1 edits
...\" 	[1995/03/09  19:15:54  rcb]
...\" 
...\" Revision 1.1.2.7  1994/10/21  17:26:26  wardr
...\" 	{edit R1.1}
...\" 	Final GA release edits
...\" 	[1994/10/21  17:26:11  wardr]
...\" 
...\" Revision 1.1.2.6  1994/10/20  20:40:33  wardr
...\" 	{edit R1.1}
...\" 	Final GA release edits
...\" 	[1994/10/20  20:40:00  wardr]
...\" 
...\" Revision 1.1.2.5  1994/10/20  16:08:25  wardr
...\" 	{edit R1.1}
...\" 	Final GA release edits
...\" 	[1994/10/20  16:08:05  wardr]
...\" 
...\" Revision 1.1.2.4  1994/10/18  21:12:34  millette
...\" 	(enh,10056,R1.1)
...\" 	HP dcecp edits
...\" 	[1994/10/18  21:12:10  millette]
...\" 
...\" Revision 1.1.2.3  1994/10/18  19:18:26  millette
...\" 	(enh,10056,R1.1)
...\" 	HP dcecp edits
...\" 	[1994/10/18  19:17:49  millette]
...\" 
...\" Revision 1.1.2.2  1994/10/06  20:40:25  rrizzo
...\" 	expand copyright
...\" 	[1994/10/06  20:07:32  rrizzo]
...\" 
...\" Revision 1.1.2.1  1994/09/16  21:13:35  millette
...\" 	(enh,10056,R1.1)
...\" 	Created for ERA
...\" 	[1994/09/16  21:12:34  millette]
...\" 
...\" $EndLog$
.H 1 "Creating and Using Extended Registry Attributes"
.P
.iX "ERA"
.iX "-:ERA" "extended registry attribute"
.iX "schema"
.iX "attribute schema" "defined"
.iX "registry" "extending"
.P
The registry stores specific information about principals, groups, 
organizations, and
accounts.  This is the information that you create when you use 
\*Ldcecp\*O commands to create principals, groups, organizations, and
accounts.
The kind of information that can be stored in the registry database 
is defined in the registry 
schema, which is essentially a catalog of the kinds of data stored in the 
database.  There is a schema entry definition for each type of attribute that can be 
associated or attached to a 
registry object.   
For example, a schema entry 
defines principal names as a printable character string in 
DCE PCS
format.   When you create a principal, you enter 
a text string that is stored in PCS format.
.P
Using the extended registry attribute (ERA)
facility, you can add schema entries that define 
attribute types of your choosing.  These attributes are called 
\*Vextended attributes\*O because they extend the registry schema. 
Once the extended attribute types are defined, you can 
attach them to a security object with the \*Ldcecp create\*O or \*Lmodify\*O 
operations.  
The extended attribute types you create are used by custom 
applications that run in conjunction 
with DCE and are passed to those applications for processing.  
For example, if you work with an MVS application  
that requires a user's MVS name, you could establish an MVS name 
extended attribute that is stored in the registry.  The MVS name can then 
be passed to the MVS application for appropriate processing.
.P
If a principal has extended attributes, these attributes are carried with the 
Extended Privilege Attribute Certificate (EPAC) obtained when the
principal is authenticated.  
.P
In this manual, attribute type refers to the schema entry that defines 
an extended attribute type.  Attribute instance refers to an attribute that 
is attached to a registry object and has a value.    
.P
This chapter describes how to create and maintain attribute 
types and attribute 
instances.  
It begins first with a discussion of the \*Lxattrschema\*O object; then 
it describes how to define attribute types and attach attributes to objects.
.H 2 "The xattrschema Object"
.P
Extended attribute types are stored in the object named \*Lxattrschema\*O 
under the security junction point 
(usually \*L/.:/sec\*O) in the CDS namespace.  Access to \*Lxattrschema\*O and 
the attribute type definitions it contains is controlled by an  
ACL on the \*Lxattrschema\*O object. 
.iX "\*Lxattrschema object\*O"
.iX "attribute types" "access control"
The \*Lxattrschema\*O object is propagated from the master security
server to replicas, like other registry data.  
.P
.H 2 "Creating and Maintaining Attribute Types"
.P
Use the \*Ldcecp xattrschema\*O command to create and 
maintain attribute types.  As part of the command, you must 
supply the attribute type's fully qualified name (for example, 
\*L/.:/sec/xattrschema/\*Vname\*O) as an argument. 
...\"
.H 3 "Creating Attribute Types"
...\"
Use the \*Ldcecp xattrschema create\*O command to create 
attribute types.    
Attribute options you can supply with this command are
summarized in Table 32-1.
Note that the options described 
in this table can also be supplied without the dashes in attribute lists.
.P
.ne 5i
.TB "Options to Create Extended Attributes"
.TS H
center,box,tab(@);
lB | lB 
lB | lw(3.5i).
Option@Meaning
_
.TH
_
-aclmgr \*Vdescription@T{
A required list of the ACL manager types that support the objects 
to which this attribute type can be attached and the permissions supported by those managers.  
No default.  Attribute type ACL managers are described fully in 
Section 32.2.5.
T}
_
-annotation \*Vstring@T{
A PCS text string that annotates the attribute type.  If the 
string contains spaces, enclose it in braces or quotes.
The default is blank.
T}
_
-applydefs@T{
This option is not currently implemented.
T}
_
-encoding \*Vtype@T{
The format of the attribute type instance value.  Attribute 
encoding is described more fully in Section 32.2.6.
T}
_
-intercell@T{
This option is not currently implemented.
T}
_
-multivalued {yes | no}@T{
An indication of whether or not the attribute is multivalued
(\*Lyes\*O=multivalued; \*Lno\*O=not multivalued).  If an attribute is 
multivalued, multiple 
instances of the same attribute type can be attached to a single registry 
object.  For example, if attribute A is coded as 
multivalued, a single principal 
can have multiple instances of attribute A.  If it is not coded as 
multivalued, a single 
principal can have only one instance of attribute A.
The default is \*Lno\*O.
T}
_
-reserved {yes | no}@T{
An indication of whether or not the attribute is reserved 
(\*Lyes\*O=reserved; \*Lno\*O=not reserved).  Reserved attribute types cannot be deleted 
unless the reserved restriction is removed.  
The default is \*Lno\*O.
T}
_
-scope \*Vname@T{
Not implemented in the current release.
...\" .nL
...\" Controls the objects to which the attribute can be 
...\" attached.  If a scope is defined, the attribute can be attached only to 
...\" objects defined by the scope.  \*Vname\*O can be a directory name or an 
...\" object name.  For example, if \*L-scope\*O is the directory name 
...\" \*L/principal/krbgt\*O, instances of the 
...\" attribute can be attached only to objects in the \*L/principal/krbgt\*O 
...\" directory (a directory that by convention contains only cell principals).  
...\" If \*L-scope\*O is the object named \*L/principal/krbgt/dresden.com\*O, 
...\" instances of the attribute can be 
...\" attached only to the \*Ldresden.com\*O principal.  The default is blank.
T}
.ne 10
_
-trigtype \*Vtype@T{
Identifies whether or not a trigger server is associated 
with the attribute type and,
if a trigger server is associated, the type of trigger.
Possible values are the following:
.sp .3
\*Lnone\*O\(emA trigger server is not associated with the attribute type.
.sp .3
\*Lquery\*O\(emA query trigger server is associated with the attribute type.  
.sp .3
\*Lupdate\*O\(emAn update trigger server is associated with the attribute type. 
.sp .3
If the \%\*L-trigtype\*O option is set to \*Lquery\*O or \*Lupdate\*O, you must 
supply the \%\*L-trigbind\*O option to specify the trigger server's binding.
See Section 32.3 for more 
information.
T}
_
-trigbind \*Vbinding@T{
If a trigger server is associated with the  attribute type, 
this option specifies the trigger serving binding.  
T}
_
-unique {yes | no}@T{
An indication of whether or not each instance of the attribute type
must be unique within the cell (\*Lyes\*O=unique; \*Lno\*O=not unique).  
For example, assume that an instance of attribute 
type A is attached to 25 principals in the 
cell.  If attribute type A is coded as unique, the value of 
the A attribute for each 
of those 25 principals must be different.  If it is not coded as 
unique, all 25 principals can 
be assigned the same value for attribute A.  
The default is \*Lno\*O.
T}
_
-uuid \*Vuuid@T{
A UUID that identifies the attribute type internally.  Note that the name 
supplied as an argument to the \*Ldcecp xattrschema create\*O command is 
used to access the attribute type.  If you do not supply a UUID, the 
system will generate one.
T}
.TE
.P
.ne 3
The syntax of the \*Ldcecp xattrschema create\*O command is as follows:
.oS
\*Lxattrschema create \*Vattr_name\*L {\*Vattr_options\*L}
.oE
.P
where:
.VL 1.25i
.LI "\*Vattr_name\*O"
Is the fully qualified name of the attribute type to create.
.LI "\*Vattr_option\*O"
Is one or more of the options described in Table 32-1.
.LE 
.P
The following sample command creates the extended attribute 
type named \*Lemployee_num\*O and assigns it an ACL manager 
of \*Lprincipal\*O and an encoding type of \*Linteger\*O:
.zA "def, 13330,R1.2.2,Fixed xattrschema create example"
.oS
\*Cdcecp> \*Lxattrschema create /.:/sec/xattrschema/employee_num \\
\*C> \*L-aclmgr {principal r r r r} -encoding integer
\*Cdcecp>
.oE
...\" 
.zZ "def, 13330,R1.2.2,Fixed xattrschema create example"
Although this sample uses options to supply information, you can use 
standard \*Ldcecp\*O attribute lists.
.P
Note that you can supply a list of names to create multiple 
schema entries with one operation.  However, you should be aware that,
if the command
argument contains more than one schema name, you cannot specify a UUID
attribute and the attributes you specify are applied to all entries created.
...\" 
.H 3 "Modifying Attribute Types"
...\" 
Use the \*Ldcecp modify\*O command with the \%\*L-change\*O option 
to modify attribute types.  Only the 
\*Laclmgr\*O, \*Lapplydefs\*O, \*Lintercell\*O, \*Ltrigbind\*O, 
\*Lannotation\*O, and \*Lreserved\*O schema type attributes can be modified.  
.P
The syntax of the \*Lxattrschema modify\*O command is as follows:
.oS
\*Lxattrschema modify \*Vattr_name\*L -change \*Vnew_option\*O
.oE
where:
.VL +1.5i
.LI "\*Vattr_name\*O"
Is the fully qualified name of the attribute type to change.
.LI "\*Vnew_option\*O"
Is the option that specifies the changes.
.LE 
.P 
.ne 6
The following 
sample command modifies the \*LMVSname\*O attribute to change its annotation. 
Note that the fully qualified attribute type name must be supplied 
to the command.
.oS
\*Cdcecp> \*Lxattrschema modify /.:/sec/xattrschema/MVSname -change \\
\*C> \*L{annotation {Use with version 2.3}}\*O
\*Cdcecp>
.oE
...\" 
.H 3 "Renaming Attribute Types"
...\" 
.P
Use the \*Ldcecp xattrschema rename\*O command 
to change the name of an extended attribute. 
Enter the command in the 
following form:
.oS
\*Lxattrschema rename \*Vold_name\*L -to \*Vnew_name\*O
.oE
where:
.VL +1.5i
.LI "\*Vold_name\*O"
Is the fully qualified extended attribute name to be changed.
.zA "def, 13339,R1.2.2,Fixed xattrschema rename example"
.LI "\*Vnew_name\*O"
Is the new simple extended attribute name.
.LE 
.P
The following example shows the \*Lxattrschema rename\*O command 
used to change an attribute name from \*Llog_name\*O to \*LMVSname\*O. 
.iS
\*Cdcecp> \*Lxattrschema rename  /.:/sec/xattrschema/log_name -to MVSname\*C
\*Cdcecp>
.iE
.P
...\" 
.zZ "def, 13339,R1.2.2,Fixed xattrschema rename example"
.H 3 "Deleting Attribute Types"
...\" 
.P
Use the \*Ldcecp xattrschema delete\*O command 
to delete an extended attribute.  
Be aware that 
when you delete an attribute type you also delete all instances of that 
attribute type.  For example, assume that an instance of the 
\*LMVSname\*O attribute is 
attached to a principal named \*Ldelores\*O.  If you 
delete the \*LMVSname\*O attribute, you also delete the instance of 
that attribute attached to \*Ldelores\*O.
.P
To delete attribute types enter the command in the 
following form:
.oS
\*Lxattrschema delete \*Vattribute_name\*O
.oE\ 
where \*Vattribute_name\*O is the fully qualified 
name of the attribute to be deleted.
.P
For example, to delete the extended attribute named \*LMVSname\*O, 
the command would be as follows:
.oS
\*Cdcecp> \*Lxattrschema delete /.:/xattrschema/MVSname
\*Cdcecp> 
.oE
...\"
.H 3 "Defining the ACL Managers for Attributes"
...\"
When you define an extended attribute type, you must define 
the objects to which the attribute can be attached and the permissions 
to access the attribute.  To do this, you associate an attribute 
type with one or more ACL managers, 
and you supply the permission sets that control access to 
attribute instances of that type.  
The attribute can be attached 
only to the 
objects that are supported by the ACL manager types named 
in its ACL manager set.  
And, only the permissions named in the ACL manager set are valid for accessing the 
attribute instance.  (Note that these permissions are in addition to the 
permissions already established by the ACL manager for the object it controls.)
For example, suppose an ACL manager set for 
an attribute type named \*LMVSname\*O lists only the ACL manager type for principals.  
Then, instances 
of the attribute type named \*LMVSname\*O can be attached only to 
principals and not any other registry 
objects.   The ACL manager set for the \*LMVSname\*O 
attribute also contains the 
permissions that control access to the \*LMVSname\*O attribute.
.P
Use the \*Ldcecp xattrschema -aclmgr\*O option to specify an attribute's 
ACL manager set.  This option has the following form:
.oS
{\*Vmgr_uuid queryset updateset testset deleteset }
.oE
.P
where:
.VL 1.25i
.LI "\*Vmgr_uuid\*O"
Is the UUID that identifies the ACL manager to be associated with the attribute type.  
You can supply either the UUID or one of the following shorthand names (which are
converted internally to a UUID) to access the ACL manager types provided by DCE:
.VL 1.25i
.LI "\*Lpolicy\*O"
To access the ACL manager for the policy object.
.LI "\*Lprincipal\*O"
To access the ACL manager for principals.
.LI "\*Lgroup\*O"
To access the ACL manager for groups.
.LI "\*Lorganization\*O"
To access the ACL manager for organizations.
.LI "\*Lsecdirectory\*O"
To access the ACL manager for directories in the registry 
database.
.LI "\*Lreplist\*O"
To access the ACL manager for the replica list.
.LI "\*Lxattrschema\*O"
To access the ACL manager for the registry schema.
.LI "\*Lsrvrconf\*O"
To access the ACL manager for the \*Ldced\*O object.
.LE
.LI "\*Vqueryset\*O"
Is the permission set to query instances of the attribute.
.LI "\*Vupdateset\*O"
Is the permission set to modify instances of the attribute.
.LI "\*Vtestset\*O"
Is the permission set to test instances of the attribute.
.LI "\*Vdeleteset\*O"
Is the permission to delete instances of the attribute.
.LE
.P
To enter a permission set with more than one permission,  
concatenate the permissions; for example, to enter the permissions 
\*Lt\*O, \*LM\*O, and \*Ld\*O, enter \*LtMd\*O.
.P
Enclose each ACL manger type's information in braces and leave a space 
between each item (except, of course, between items in the concatenated 
permission sets).  
.P
For example, consider the following command to define an addition ACL 
Manager for the \*LMVS_name\*O attribute: 
.iS
\*Cdcecp> \*Lxattrschema modify /.:/sec/xattrschema/MVS_name \\
\*C> \*L-aclmgr {18dbdad2-23df-11cd-82d4-080009251352 r w t mD}
\*Cdcecp>
.iE
.P
The command adds an ACL manager identified by the UUID 
\*L18dbdad2-23df-11cd-82d4-08000925135\*O 
to the \*LMVS_name\*O attribute.  The permissions sets for the ACL manager are 
as follows:
.ML
.LI
\*Lr\*O is the query permission set
.LI
\*Lw\*O is the update permission set
.LI
\*Lt\*O is the test permission set
.LI
\*LmD\*O is the delete permission set
.LE
.P
Note that you cannot modify or delete an attribute type's ACL manager set.  However, you 
can add additional manager types to it. 
...\"
.H 3 "Defining Attribute Type Encoding"
...\"
.P
You must define the format of values that can be supplied for an attribute type in the 
attribute type's encoding.  An attribute can be assigned only those values that 
are in the format defined in the encoding.  For example, the encoding 
can specify that instances of this attribute type contain 
values only in the form of UUIDs.  
.P
Each 
attribute type can have only one encoding and that encoding cannot be modified.
In addition, a special encoding type lets you create attribute sets.  
.P
Use the \*Ldcecp xattrschema -encoding\*O option to specify an attribute's 
encoding.  This option has the following form:
.iS
\*L-encoding \*Vtype\*O
.iE
.P
The \*Vtype\*O parameter is one of the encoding types described in Table
32-2.
.P
.ne 5i
.zA "def, 13575,R1.2.2,Fixed encoding type any"
.TB "Encoding Types"
.TS H
center,box,tab(@);
lB | lB 
lB | lw(3.5i).
Encoding Type@Meaning
_
.TH
_
\*Lany\*O@T{
The attribute value can take on any encoding.  This encoding type is only 
legal for the definition of an ERA in a schema entry.  All instances 
of an ERA must have an encoding of some other value. 
...\"  The attribute instance value can be of any encoding type.  Type is defined 
...\" when attribute instance is created.
T}
_
\*Lattrset\*O@T{
The attribute value must be a list of attribute type 
UUIDs enclosed in braces.   This encoding type defines an attribute set.  
Attribute sets allow for easier attribute search and retrieval.  
For instance, a query on an attribute set returns all instances of 
attributes that are 
members of the set.  
T}
_
\*Lbinding\*O@T{
The attribute value must consist of authentication, authorization, and
binding information suitable for communicating with a DCE server.  
Use this encoding if 
you want to store a name or server binding as an object's attribute.  
See Section 32.3.2.2 for more information. 
T}
_
\*Lbyte\*O@T{
The attribute value must be a string of bytes. 
The byte string is assumed to be a 
pickle or is otherwise a self-describing type.  Note that this 
encoding type allows entry of binary data.  See the \*Lxattrschema(8dce)\*O 
reference page for more information on entering binary data.
T}
_
\*Lconfidential\*O@T{
Not implemented in this release of DCE.
...\" The attribute value is a string of encrypted 
...\" bytes.  Although this encrypted data is not stored in the registry database, 
...\" it can be passed over the network and is available to user-developed 
...\" applications.
T}
_
\*Li18ndata\*O@T{
The attribute value must be an internationalized string of 
bytes with a tag identifying 
the OSF registered codeset used to encode the data.  Note that this 
encoding type allows entry of binary data.  See the \*Lxattrschema(8dce)\*O 
reference page for more information on how to enter binary data.
T}
_
\*Linteger\*O@T{
The attribute value must be a signed 32-bit integer.
T}
_
\*Lprintstring\*O@T{
The attribute instance value must be a character 
string printable by the PCS.
T}
_
\*Lstringarray\*O@T{
The attribute value must be an array of one of more printstrings.  Note that 
the printstring can be a null.
T}
_
\*Luuid\*O@T{
The attribute value must be a DCE UUID.
T}
_
void@T{
The attribute has no value.  It is simply a marker that is either present or absent.
T}
.TE
.zZ "def, 13575,R1.2.2,Fixed encoding type any"
...\" NOT FOR 1.1
...\" .H 3 "Defining Defaults for Attribute Types"
...\" 
...\" The \%\*L-applydefs\*O option lets you specify whether or not default 
...\" no be applied, only those attributes explicitly attached to an object will 
...\" attributes should be supplied for objects.  If you specify that defaults should 
...\" no be applied, only those attributes explicitly attached to an object will 
...\" be evaluated during attribute processing.  If you specify that defaults should 
...\" be applied, the attributes instances will be associated with objects by default.  
...\" The default attribute applied depends on the type of object.  If the object is 
...\" a principal with an account, first the organization associated with the account is 
...\" examined to see if the requeseted attribute is attached.  If it is not, then the registry polic
...\" .P
...\" IF I PUT AN ATTR ON POLICY OBJECT, IT IS LIKE SETTING POLICY
...\" .P
...\" The apply_defaults flag indicates 
...\" whether or not default attributes 
...\" should be returned when objects are queried by 
...\" a client with the \*Lsec_rgy_attr_get_effective\*O call. 
...\" If apply-defaults flag is set on, defaults are 
...\" applied.  If it is set off, defaults are not 
...\" supplied. 
...\" .P
...\" Defaults are determined in the 
...\" following manner:
...\" .AL
...\" .LI
...\" If the requested attribute exists on the principal, that attribute is returned.  
...\" If it does not, the search continues.  
...\" .LI
...\" The next step in the search depends on the type of object:
...\" .P
...\" \*LFor principals with accounts:\*O
...\" .AL
...\" .LI
...\" The organization named in the principal's 
...\" account is examined to 
...\" see if an attribute of the requested type exists.  If it does, it 
...\" is returned and the search ends.  If it does not, the search continues 
...\" to the \*Lpolicy\*O object as described in b, below. 
...\" .LI
...\" The registry \*Lpolicy\*O object is examined to 
...\" see if an attribute of the requested type exits.  
...\" If it does, it is returned.  If it does not, a message indicating the 
...\" no attribute of the type exists for the object is returned.
...\" .LE
...\" .P
...\" \*LFor principals without accounts, for groups, and for organizations:\*O 
...\" the registry \*Lpolicy\*O object is examined to 
...\" see if an attribute of the requested type exits.  
...\" If it does, it is returned.  If it does not, a message indicating the 
...\" no attribute of the type exists for the object is returned.
...\"
...\".H 3 "Defining Intercell Actions for Attribute Types" NOT FOR 1.1
...\"
...\" 
...\" 
...\" 
.H 2 "Defining Attribute Trigger Servers"
...\"
Some attribute types require the support of an outside server either 
to verify input attribute values or to supply output attribute values 
when those values are stored in an external database. 
Such a server could, for example, 
connect a legacy registry system to the DCE registry.  
The attribute trigger facility provides for automatic calls  
to outside DCE servers, known as \*Vattribute triggers\*O.
.P
Trigger servers are invoked automatically when an attribute 
associated with a trigger server is queried or updated.  
Note that access to information maintained by a trigger server is controlled 
entirely by that server.  
.nS note
Update trigger servers are not supported in this release.
.nE
.P
To associate an attribute type with a trigger server, use the 
\*L-trigtype\*O and \%\*L-trigbind dcecp xattrschema\*O options.  
.P
.H 3 "The -trigtype Option"
The \%\*L-trigtype\*O options defines whether the attribute type is 
associated with a trigger server and, if it is, which kind of server.  This 
option has the following form:
.iS
-trigtype [none | query | update]
.iE
.P
where:
.VL
.LI \*Lnone\*O  
Indicates the attribute is not associated with a trigger server. (This is the 
default.)
.LI \*Lquery\*O
Indicates that the attribute is associated with a query trigger.  Query 
trigger servers can perform only queries.
.LI \*Lupdate\*O
Indicates the attribute is associated with an update trigger.  Update
trigger servers can perform queries and updates.
.nS note
Update trigger servers are not supported in this release.
.nE
.P
Once set the \%\*L-trigtype\*O option cannot be modified.
.H 3 "The -trigbind Option"
.P
The \*L-trigbind\*O\ option defines authentication information 
for the trigger server and the trigger binding itself. 
.P
The \%\*L-trigbind\*O option has the following format.
.oS
\*L-trigbind {{\*Vauth_info\*L} {\*Vbinding_info\*L}}
.oE
.P
The following sections describe how to specify the authentication type and the 
binding.
.P
.H 4 "Specifying the Authentication Type"
.P
The \*Vauth_info\*O parameter has the following syntax:
.oS
{\*Vauth_serv_type\*O \*Vname prot_level authentication_service authorization_service\*O}
.oE
.P
where: 
.VL 1.8i
.LI "\*Vauth_serv_type\*O"
Specifies the authentication type, which can be
.ML
.LI
.ne 3
\*Lnone\*O\(emNo authentication is performed.  
.LI
\*Ldce\*O\(emStandard DCE authentication is performed. 
.LE
.P
If you are using no authentication, no other information except the 
binding itself is required.  If you are using the standard DCE authentication type, you 
must specify all the remaining parameters.
.LI "\*Vname\*O"
Specifies the principal name of the trigger server.
.LI "\*Vprot_level\*O"
Specifies the protection level that
determines the degree to which authenticated communications
between the client and the server are protected
by the authentication service.  The possible protection levels 
are 
.ML
.LI
\*Ldefault\*O\(emUses the default protection 
level of \*Lpkt\*O.
.LI
\*Lnone\*O\(emPerforms no authentication:
tickets
are not exchanged, session keys are not established, client
EPACs or names are not certified,
and transmissions are in the clear.
Note that although uncertified EPACs should not be trusted,
they may be useful for
debugging, tracing, and measurement purposes.
.LI
\*Lconnect\*O\(emAuthenticates 
only when the client establishes a
relationship with the server.
.LI
\*Lcall\*O\(emAuthenticates 
only at the beginning of each remote procedure
call when the server receives the request.
.P
This level does not apply to remote procedure calls made over a
connection-based protocol sequence (that is,
\*Lncacn_ip_tcp\*O).  If this level is specified and the binding
handle uses a connection-based protocol sequence,
the routine uses
the \*Lpkt\*O protection level instead.
.LI
\*Lpkt\*O\(emEnsures that all data received 
is from the expected client.
.LI 
\*Lpktinteg\*O\(emEnsures and verifies that none 
of the data transferred between
client and server has been modified.
This is the highest protection level that is guaranteed to be
present in the RPC runtime.
.LI
\*Lpktprivacy\*O\(emAuthenticates as specified 
by all of the previous levels and
also encrypts each RPC argument value.
This is the highest protection level, but it is not guaranteed to be
present in the RPC runtime.
.LE
.LI "\*Vauthentication_service\*O"
Specifies the authentication service.  
The exact level of protection provided by the
authentication service is specified by the protection 
level.
The supported
authentication services are as follows:
.ML
.LI
\*Ldefault\*O\(emDCE shared-secret key.
.LI
\*Lnone\*O\(emNo authentication:  no tickets
are exchanged, no session keys established, client EPACs or names
are not transmitted, and transmissions are in the clear.
Specify \*Lnone\*O to turn authentication off for
remote procedure calls made using this binding.
.LI
\*Lsecret\*O\(emDCE shared-secret key authentication.
.LE
.LI "\*Vauthorization_service\*O"
Specifies the authorization service.  The validity and trustworthiness of
authorization data, like any application data, is dependent on the
authentication service and protection level specified.  The
supported authorization services are as follows:
.ML
.LI
\*Lnone\*O\(emServer performs no authorization.  
This is valid only if the authorization service 
is set to \*Lnone\*O, specifying that
no authentication is being performed.
.LI
\*Lname\*O\(emServer performs authorization based 
on the client principal name.
This value cannot be used if the authorization service is
\*Lnone\*O.
.LI
.ne 5
\*Ldce\*O\(emServer performs authorization by using the client's DCE 
EPAC sent to the server with each
remote procedure call made with this binding.  Generally,
access is checked against DCE ACLs.
.LE
.LE
...\"
.H 4 "Specifying the Binding Information"
...\"
The \*Vbinding_info\*O parameter specifies the binding, which can be a 
string binding, a server entry name, or a list containing one 
or more string bindings or server entry names.  The following example shows a server 
entry name binding:
.P
\*L./.:/hosts/host_name/dce_entity_name\*O
.P
The following example shows a string binding in standard syntax:
.P
\*Lncadg_udp_ip:130.105.96.3[1234]\*O
.P
The following example shows a string binding in TCL syntax:
.P
\*Lncarn_ip_tcp 10-29.58.00 2001\*O
.P
.P
.H 4 "Sample Value for the \*L-trigbind\*O Option"
.P
The following sample shows the value for a \%\*L-trigbind\*O option.  
In the sample, the binding has the principal name \*LMVS_server\*O, 
is authenticated with  packet-privacy protection level, uses a
shared secret key and an authorization service of DCE.  The 
binding is supplied as a server entry 
name.
...\" MIDDLE SENTENCE ABOVE SHOULD BE CHECKED FOR ACCURACY
.iS
-trigbind {{dce MVS_server pktprivacy secret dce} \\
    {/.:/hosts/host_name/dce_entity_name}}
.iE
...\" 
.H 2 "Creating and Maintaining Attribute Instances"
...\"
Using \*Ldcecp\*O, you can attach extended registry attributes 
to objects, modify the values assigned to those attributes, and delete the attachement just as you 
would any attribute attached to an object.
.P 
You can attach extended registry attributes to any of 
the following registry objects using the 
\*Ldcecp create\*O and \*Lmodify\*O operations:
.ML
.LI
\*Lprincipal\*O
.LI
\*Lgroup\*O
.LI 
\*Lorganization\*O
.LI
\*Lpolicy\*O 
.nS note
In DCE Version 1.2.1, you cannot attach attributes to the 
policy object.
.nE
.LI
\*Ldirectory\*O
.LI
\*Lreplist\*O
.LI
\*Lxattrschema\*O
.LE
....\"
.H 3 "Attaching Attribute Instances to Objects"
...\"
You can attach  attributes to object when you create the objects with the 
\*Ldcecp principal -attribute\*O operation, or you can attach attributes to 
existing objects with the \*Ldcecp modify -add\*O operation.  
.P
For example, to create the principal \*Ldelores\*O and at the 
same time attach the \*LMVSname\*O attribute with a value of \*Ladmin\*O,  
use the following \*Lprincipal create\*O command:
.oS
\*Cdcecp> \*Lprincipal create delores -attribute {MVSname admin}\*O
\*Cdcecp>
.oE
.P
To attach the \*LMVSname\*O attribute with a value of \*Ladmin\*O 
to the principal named \*Ldelores\*O, use the following \*Lprincipal modify\*O command:
.oS
\*Cdcecp> \*Lprincipal modify delores -add {MVSname admin}\*O
\*Cdcecp>
.oE
.P
To add instances of a multivalued extended attribute, include each 
value, separated by a space after the attribute name.  For example, to 
attach the \*Lmulti_name\*O attribute with values of \*Lvalue1\*O, 
\*Lvalue2\*O, \*Lvalue3\*O, and \*Lvalue4\*O 
to the principal named \*Ldelores\*O, use the following command: 
.oS
\*Cdcecp> \*Lprincipal modify delores -add {multi_name value1 value2 \\
\*C> \*Lvalue3 value4}\*O
\*Cdcecp>
.oE
....\"
.H 3 "Modifying Attribute Instances"
...\"
Use the \*Ldcecp modify -change\*O operation to change the values of 
attribute instances.  Whether an attribute is modifiable is determined 
by the application that uses the attribute.  For example, the following 
command changes the value assigned to the \*LMVSname\*O 
from \*Ladmin\*O to \*Lcell_admin\*O  for the principal named \*Ldelores\*O.
.oS
\*Cdcecp> \*Lprincipal modify delores -change {MVSname cell_admin}\*O
\*Cdcecp>
.oE
.P
If you use the \*Ldcecp modify -change\*O command as shown in the previous paragraphs 
to change the value of a multivalued attribute, all instances of the 
multivalued 
attribute are deleted and replaced by the new values specified in the command.  
For example, to change only a specific value, you must enter all the values.  
For example, assume that the \*Lmulti_name\*O attribute has the following 
four values: \*Lvalue1\*O, \*Lvalue2\*O, \*Lvalue3\*O, and \*Lvalue4\*O.  
To change \*Lvalue4\*O to \*Lvalue5\*O you must enter the following command:
.oS
\*Cdcecp> \*Lprincipal modify delores -change {multi_name {value1 value2 \\
\*C> \*Lvalue3 value5}}\*O
\*Cdcecp>
.oE 
However, you can add and remove individual values from a multivalued attribute.    
Use the \%\*L-add\*O option to add values.  
For example, assume that  the \*Lmulti_name\*O attribute has values 
of \*Lvalue1\*O, \*Lvalue2\*O, v\*Lalue3\*O, and \*Lvalue5\*O.  
The following sample command adds \*Lvalue6\*O to the \*Lmulti_name\*O attribute.
.oS
\*Cdcecp> \*Lprincipal modify delores -add {multi_name value6}\*O
\*Cdcecp>
.oE 
(Use the \*Lremove\*O option described in the following subsection to delete 
specific values in a multivalued attribute.)
.P
.ne 3
Note that 
the following command 
replaces all instances of the attribute named \*Lmulti_name\*O  attached to the 
principal named \*Ldelores\*O with a single instance with a 
value of \*Lvalue1\*O:
.oS
\*Cdcecp> \*Lprincipal modify delores -change {multi_name value1}\*O
\*Cdcecp>
.oE 
.P
For example, if the \*Lmulti_name\*O attribute had the following values:
.oS
{multi_name value1 value2 value3}
.oE
then the previous command would change the values as follows:
.oS
{multi_name value1}
.oE
....\"
.H 3 "Deleting Attribute Instances"
...\"
Use the \*Ldcecp modify\*O command with the \*L-remove\*O 
option to delete attribute instances attached 
to an object.  To delete all instances of an attribute from an object, 
supply the attribute name to the \%\*L-remove\*O option.  
For example, the following command deletes all instances of the \*LMVSname\*O 
attribute from the 
principal named \*Ldelores\*O:
.oS
\*Cdcecp> \*Lprincipal modify delores -remove MVSname\*O
\*Cdcecp>
.oE
.P
To remove a single instance of a multivalued attribute, 
supply the attribute name 
and the attribute value.  For example, the following command deletes 
only the instance \*Lvalue5\*O from the multivalued attribute named 
\*Lmulti-value\*O. 
All other values and the attribute itself remain intact.
.oS
\*Cdcecp> \*Lprincipal modify delores -remove {multi-value value5}\*O
\*Cdcecp>
.oE
However, if you delete the last instance of a  multivalued attribute, 
\*Ldcecp\*O will 
also delete the attribute from the object because an attribute without a value 
cannot be attached to an object.  Note that
you cannot combine deleting multivalued attributes and 
values from multivalued attributes with the same command. 
.P 
.ne 5
To delete more than one attribute from an object, you must use the 
\%\*L-types\*O option.  This option tells \*Ldcecp\*O that all the 
values supplied are the names of attribute types, not attribute values.
For example, the following sample command uses the \%\*L-types\*O option 
to delete the attributes named \*LMVSname\*O and \*LMVSinteger\*O from 
the principal \*Ldelores\*O:
.oS
\*Cdcecp> \*Lprincipal modify delores -remove {MVSname MVSinteger} -types\*O
\*Cdcecp>
.oE
Without the \%\*L-types\*O option,
\*Ldcecp\*O will assume that \*LMVSinteger\*O is the 
value for the \*LMVSname\*O attribute and, because no such value 
exists, the command will 
fail.  
...\" 
...\" .H 4 "Deleting Multi-Valued Attribute Instances"
...\"
...\" For multivalued attributes, you can delete all the values and the attribute itself by 
...\" supplying the attribute name.  For example, the following command deletes 
...\" all values of the multivalued attribute named \*Lmulti-value\*O and 
...\" the attribute itself.
...\" .oS
...\" \*Cdcecp> \*Lprincipal modify delores -remove multi-value\*O
...\" .oE 
...\" To remove more than one multivalued attribute you must use the \%\*L-types\*O option 
...\" as shown in the previous section.  Note you cannot combine deleting a mutli-valued attributes 
...\" and 
...\" .P
...\" To remove a single value of a multivalued attribute, supply the attribute name 
...\" and the attribute value.  For example, the following command deletes 
...\" only the value \*Lvalue5\*O from the multivalued attribute named \*Lmulti-value\*O. 
...\" All other values and the attribute itself remain intact.
...\" .oS
...\" \*Cdcecp> \*Lprincipal modify delores -remove {multi-value value5}\*O
...\" .oE
...\" However, if you delete the last value in a multivalued attribute, \*Ldcecp\*O will 
...\" also delete the attribute from the object because an attribute without a value 
...\" cannot be attached to an object.  
...\" Note you cannot combine deleting a mutli-valued attributes and values from multivalued 
...\" attributes with the same command.  
...\"
.H 3 "Using Attribute Sets"
...\"
At attribute set is a collection of attribute UUIDs that identify 
the attribute instances that are members of the set.  
Attribute sets let you group related attributes instances on an object for 
easier access.   For example, if you use 
the \*Ldcecp show\*O operation to display an attribute set, the 
display expands the attribute set and includes all members of the set 
in the display output.  This attribute expansion works only for 
\*Ldcecp\*O commands that display information.  The commands 
to create and modify attribute instances work only on the specific 
attribute named in the command.  Since the attributes that are set members 
exist independently of the attribute 
set, they can be manipulated directly like any other attribute.
.P
Each attribute set is attached to an object and, although 
the system does not enforce it, each attribute that is a member 
of a set should also be attached to the same object.  
Attribute sets cannot be nested;  a member of an attribute set cannot 
itself be an  attribute set. 
.P
To create, modify, and delete members in an attribute set, follow the instructions 
to create, modify, and delete mutli-valued attributes.  The attribute instances that 
are members of the set are identified by UUIDs.  
...\" For example, the following command creates an attribute set 
...\" named MVS, with 2 members:
...\" .oS
...\" \*Cdcecp> \*Lprincipal modify delores -add {MVS {18dbdad2-23df-11cd-82d4-080009251352 23dkakal2-18ab-50ef-78a4-093459231352}}\*O
...\" .oE
