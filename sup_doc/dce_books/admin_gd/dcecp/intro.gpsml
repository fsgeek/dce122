...\" @OSF_COPYRIGHT@
...\" COPYRIGHT NOTICE
...\" Copyright (c) 1990, 1991, 1992, 1993, 1994 Open Software Foundation, Inc.
...\" ALL RIGHTS RESERVED (DCE).  See the file named COPYRIGHT.DCE for
...\" the full copyright text.
...\" 
...\" HISTORY
...\" $Log: intro.gpsml,v $
...\" Revision 1.1.6.2  1996/09/27  13:49:51  weir
...\" 	Test
...\" 	[1996/09/27  13:49:16  weir]
...\"
...\" Revision 1.1.6.1  1996/09/19  13:42:36  sherman
...\" 	[def,13462,R1.2.2]
...\" 	Fixed Help commands]
...\" 	[def,13460,R1.2.2]
...\" 	Add key binding precedence text
...\" 	[def,10868,R1.2.2]
...\" 	Multiple commands separated by semi-colons
...\" 	{def,13575,R1.2.2}
...\" 	Miscellaneous dcecp corrections
...\" 	{def,13461,R1.2.2}
...\" 	Changing history command example
...\" 	[1996/09/19  13:40:51  sherman]
...\" 
...\" Revision 1.1.4.1  1996/03/12  15:35:25  wardr
...\" 	{edit R1.2.1}
...\" 	Release Edits
...\" 	[1996/03/12  15:35:15  wardr]
...\" 
...\" Revision 1.1.2.11  1995/05/25  19:01:04  rcb
...\" 	PRENTICE HALL reformat: final changes
...\" 	[1995/05/25  13:08:21  rcb]
...\" 
...\" 	PRENTICE HALL reformat -- index entries, odds and ends
...\" 	[1995/03/27  19:48:31  rcb]
...\" 
...\" 	prevented hyphenation of option names
...\" 	[1995/03/09  14:58:21  rcb]
...\" 
...\" 	fixed typo
...\" 	[1995/03/08  16:47:54  rcb]
...\" 
...\" 	fixes to header capitalization
...\" 	[1995/03/08  16:18:19  rcb]
...\" 
...\" 	additional 1.1 edit change
...\" 	[1995/02/27  17:01:29  rcb]
...\" 
...\" 	previous checkins include both incorporation of 1.1 edits and PH reformat
...\" 	[1995/02/23  18:20:26  rcb]
...\" 
...\" 	no change
...\" 	[1995/02/23  14:31:49  rcb]
...\" 
...\" 	PRENTICE HALL reformat
...\" 	[1995/02/22  16:31:47  rcb]
...\" 
...\" Revision 1.1.2.10  1994/10/28  12:40:28  wardr
...\" 	{edit R1.1}
...\" 	Added index hits
...\" 	[1994/10/28  12:40:04  wardr]
...\" 
...\" Revision 1.1.2.9  1994/10/20  16:23:02  wardr
...\" 	{edit R1.1}
...\" 	Final GA release edits
...\" 	[1994/10/20  16:22:16  wardr]
...\" 
...\" 	{edit R1.1}
...\" 	Final fixes for the GA release
...\" 
...\" Revision 1.1.2.8  1994/10/04  17:58:25  wardr
...\" 	{enh, CR10014, R1.1}
...\" 	prepare final draft of dcecp information
...\" 	[1994/10/04  17:57:01  wardr]
...\" 
...\" Revision 1.1.2.7  1994/06/29  12:22:57  wardr
...\" 	{edit R1.1}
...\" 	Initial hooks for dcecp object descriptions
...\" 	[1994/06/29  12:19:01  wardr]
...\" 
...\" Revision 1.1.2.6  1994/06/13  18:10:48  devobj
...\" 	cr10872 - fix copyright
...\" 	[1994/06/13  18:10:09  devobj]
...\" 
...\" Revision 1.1.2.5  1994/06/13  13:11:00  wardr
...\" 	{enh, CR10014, R1.1}
...\" 	fix typos in examples
...\" 	[1994/06/13  13:10:15  wardr]
...\" 
...\" Revision 1.1.2.4  1994/05/18  12:14:46  wardr
...\" 	{edit R1.1}SGML fixes
...\" 	[1994/05/18  12:14:34  wardr]
...\" 
...\" Revision 1.1.2.3  1994/04/18  18:31:33  wardr
...\" 	{enh, CR10014, R1.1}
...\" 	dcecp work
...\" 	[1994/04/18  18:29:58  wardr]
...\" 
...\" Revision 1.1.2.2  1994/04/14  20:42:23  wardr
...\" 	checked out files
...\" 	[1994/04/14  20:36:04  wardr]
...\" 
...\" Revision 1.1.2.1  1994/02/24  19:46:32  rom
...\" 	{enh, 10014, R1.1}
...\" 	Add new chapters for dcecp.
...\" 	[1994/02/24  19:44:41  rom]
...\" 
...\" $EndLog$
...\" 
...\" ************************************************************************
...\" ADMINISTRATION GUIDE (Core)
...\" 
...\" New Part I - The DCE Control Program 
...\" ************************************************************************
.H 1 "DCE Control Program Introduction"
.P
DCE is an integrated set of services that supports the development and
execution of distributed applications between heterogeneous networked
computers.  Each DCE environment (called a \*Vcell\*O) maintains at least
the following core DCE services: 
.ML
.LI
DCE Threads
.LI
DCE Host Services
.LI
DCE Cell Directory Service
.LI
DCE Time Service
.LI
DCE Security Service
.LE
.P
With the exception of DCE Threads, all of the core services require
administration in one way or another.  Some services, such as CDS and the 
DCE Security Service, usually need more managing than, say, 
the DCE Time Service,
which after you have set it up needs practically no intervention.
If your DCE cell consists of just a few computers and their users, you
could probably manage the naming, time, and security needs of users,
programs, and host systems by logging into individual hosts to perform
any necessary administration tasks.  But most cells will consist of
many, perhaps hundreds or even thousands, of computers and their users.
.P
.ne 9
Consequently, the core services in such large cells will likely be 
extensive and complex, with some services being replicated or even partitioned 
across multiple heterogeneous systems.  Some services, such as 
the DCE host services, will exist on every computer in the
cell.  Such large-scale operations demand an administrative interface
that provides consistent and uniform access to DCE administration
functions, wherever they reside, from any and every point in the cell.
This means that administrative operations must work consistently and
predictably regardless of the platform on which they execute.
.P
.iX "DCE control program" "description of"
.iX "-;\*Ldcecp\*O" "DCE control program" 
The DCE control program (\*Ldcecp\*O) 
fills this need, providing consistent, portable, extensible, and
secure access to nearly all DCE administration functions from any
point in a DCE cell.  \*Ldcecp\*O implements all of the
operations previously performed by using various component control
programs.
.P
\*Ldcecp\*O further streamlines administration by
providing a number of \*Etask objects\*O for performing complex DCE
operations.  For example, adding a host to a cell requires adding a
host principal to the registry, adding the principal to various
security groups and organizations, creating an account, placing host
information in CDS and probably setting some ACLs on CDS directories.
All of these operations can be accomplished using a single task object.
.H 2 "Flexible, Portable, and Extensible Administration"
.iX "DCE control program" "benefits of"
.iX "-:Tool Command Language" "Tcl"
.iX "Tool Command Language" "its use in \*Ldcecp\*O"
.iX "DCE control program" "its use of Tcl"
.P
\*Ldcecp\*O is built on a portable command language called
Tcl (pronounced "tickle"), which stands for Tool Command Language
developed by John K. Ousterhout at the University of California at
Berkeley, California.  Most computers provide a command language of
some sort to give users a flexible and extensible way to access and
use system capabilities.  For instance, many UNIX systems offer
shell language interpreters, and Digital Equipment Corporation's
OpenVMS operating system offers the Digital Command Language (DCL).
But these command languages aren't always portable.  Commands and
scripts based on one command language might not work in other command
language environments. 
...\" .P
...\" Tcl, on the other hand, is a platform-independent command language
...\" that runs on every system where DCE Version 1.1 is installed.  A Tcl
...\" command interpreter and the DCE Control Program which uses it are
...\" provided as part of the DCE Version 1.1 software.  The availability of
...\" both the DCE control program and the Tcl command language offer
...\" important benefits to DCE administrators:
.P
.ne 4
Tcl, on the other hand, is a platform-independent command language
that runs on every system where DCE is installed.  A Tcl
command interpreter and the DCE control program that uses it are
provided as part of the DCE software.  
.P
The availability of both the DCE control program and the DCE control
program language offer important benefits to DCE administrators:
...\" .P
...\" Tcl, on the other hand, is a platform-independent command language
...\" that runs on every system where DCE Version 1.1 is installed.  The
...\" \*Ldcecp\*O program's implementation of Tcl is called the DCE control
...\" program language and its Tcl command interpreter is designed expressly
...\" to support the DCE control program language.  Consequently, you will
...\" likely have difficulty if you try to execute some generic (not DCE)
...\" Tcl scripts using the \*Ldcecp\*O command interpreter.  The
...\" availability of the DCE control program and the \*Ldcecp\*O language
...\" offer important benefits to administrators:
.ML
.LI
You can perform all routine DCE operations from within
a single administrative interface.
.LI
Most DCE administrative operations are consistently and uniformly
executed from any DCE platform, allowing administrators to
manage just about all DCE operations from any DCE system
in the cell.  DCE platforms that are not UNIX systems
might not handle all DCE control program file operations.
.LI
\*Ldcecp\*O provides administration \*Vobjects\*O with
names like \*Lclearinghouse\*O, \*Lprincipal\*O, and \*Lendpoint\*O.
This direct approach makes DCE administration intuitive and
consistent.  While for now this has only the appearance of being
object oriented, it is an important step toward a true object-oriented
administration interface.
.LI
\*VTask objects\*O (high-level \*Ldcecp\*O scripts that perform
complex DCE operations) reduce the training requirements for DCE
administrators.  One needn't be a DCE guru to perform routine DCE
administrative tasks.
.LI
You can adapt the supplied task objects to new uses or write new task
objects or scripts by using the \*Ldcecp\*O operations along with more
general commands provided within Tcl.
.LI
The \*Ldcecp\*O language allows the use of variables, \*Lif\*O
statements, looping functions and other programming operations that
let you boost the power of your operations.  For instance, looping
functions let you repeat operations on multiple objects such as users,
servers, or CDS entries.
.LI
.ne 4
Administrators can easily share their tools because scripts 
can be moved to foreign platforms without change.  For
instance, enterprises with multiple cells could use \*Ldcecp\*O
scripts to propagate a common cell configuration throughout the
enterprise.
.LE
.P
.zA "def,13575,R1.2.2,Remove info on non-dcecp control programs"
The DCE control program is an administrative interface that
you can use to manage most aspects of the DCE core components.  You
cannot use \*Ldcecp\*O to manage every aspect of DCE.  For instance
\*Ldcecp\*O cannot control GDS or DFS.  
.zZ "def,13575,R1.2.2,Remove info on non-dcecp control programs"
.P 
The chapters in Part 1 discuss how you can use \*Ldcecp\*O 
to administer the core services in your DCE environment.  We also
discuss how to make your operations do more by using Tcl constructs on
the command line and by writing your own customized operations as
scripts.  We don't provide a complete discussion of Tcl or its
companion toolkit (called \*VTk\*O) for the X11 window system.  For in-depth
discussions of these topics, refer to \*VTcl and the Tk Toolkit\*O,
John K. Ousterhout, (c)1994, Addison\(EmWesley Publishing Company.
.H 2 "DCE Administration Objects"
.P
A DCE cell consists of many things that need administration.  As
examples, CDS servers (\*Vclearinghouses\*O), DTS clocks, and server
location information are all entities in a DCE cell that require
administration in one way or another.  The DCE control program treats
all of DCE's administrative entities as individual administration
objects.  
.iX "administration objects" 
.iX "objects" "\*Ldcecp\*O administration" 
.iX "DCE control program" "administration objects"
.P
You operate on an entity by invoking its \*Vobject\*O name with
some operation.  For example, to check the time of a DTS clock, you
invoke the object's name (\*Lclock\*O) and the desired operation
(\*Lshow\*O) as in the following:
.oS
dcecp> \*Lclock show\*O
1994-09-23-10:46:42.016-04:00I-----
dcecp> 
.oE
.P
Each administrative entity in DCE has a corresponding administration
object in the DCE control program.  As a few examples, you can manage
CDS clearinghouse operations in a cell by using the \*Lclearinghouse\*O
object.  Manage application servers and their configuration information
on DCE hosts by using the \*Lserver\*O object.  Compare and manipulate
time information using the \*Lutc\*O object.  Administer users in a DCE
cell with the \*Luser\*O task object.  These examples represent just a few
of the \*Ldcecp\*O administration objects.  All of the objects are listed
in the \*Ldcecp(8dce)\*O reference page.
.H 2 "Using the DCE Control Program"
.P
This section provides a quick look at how to start and stop the DCE
control program and how to perform operations.  Additional information
about these topics is contained in the \*Ldcecp\*O reference pages.
.H 3 "Starting and Stopping dcecp"
.P
.iX "DCE control program" "starting and stopping"
You can enter \*Ldcecp\*O operations directly from your operating
system prompt or from within the DCE control program.  If you are
performing just one or two simple \*Ldcecp\*O operations, you can
invoke them directly at the operating system prompt.  
.P
If you will be doing several operations, you can invoke the DCE
control program and then enter operations at the \*Ldcecp\*O
prompt.  This method offers several advantages.
.ML
.LI
It is more efficient for multiple operations because
\*Ldcecp\*O is initialized once rather than for each separate operation.
.LI
The program stores operations in a history facility so they can be
recalled and reused.
.LI
You avoid the extra keystrokes needed to precede
each operation with the \*Ldcecp\*O command.
.LE
.P
The following example shows how to invoke the DCE control program and
perform a \*Ldirectory\*O operation:
.oS
.ne 3
% \*Ldcecp\*C
dcecp> \*Ldirectory create /.:/hosts/appserver2 \*C
dcecp>
.oE
.P
.ne 3
When you are through using the DCE control program, use the \*Lexit\*O
or \*Lquit\*O operation to stop the program and return to the
operating system prompt.  The following example illustrates using
the \*Lexit\*O operation:
.oS
dcecp> \*Lexit\*C
%
.oE
.H 3 "Invoking dcecp Operations"
.iX "DCE control program" "invoking operations"
.iX "operations" "invoking"
.iX "DCE control program" "command-line operations"
.P
If you are performing a single \*Ldcecp\*O operation, you can invoke
it directly from the operating system prompt.  Just precede the
desired operation with the \*Ldcecp\*O command and the\*L-c\*O
(command-line operation) flag, as follows:
.oS
% \*Ldcecp -c directory list /.:/subsys -simplename\*C
HP applications dce sales eng admin accts
% \*Ldcecp -c cell show\*C
{secservers
 /.../my_cell.goodco.com/subsys/dce/sec/master}
{cdsservers 
 /.../my_cell.goodco.com/hosts/krypton}
{dtsservers 
 /.../my_cell.goodco.com/hosts/mars}
{hosts
 /.../my_cell.goodco.com/hosts/earth
 /.../my_cell.goodco.com/hosts/jupiter
 /.../my_cell.goodco.com/hosts/kyrpton
 /.../my_cell.goodco.com/hosts/mars
 /.../my_cell.goodco.com/hosts/mercury
 /.../my_cell.goodco.com/hosts/neptune
 /.../my_cell.goodco.com/hosts/pluto
 /.../my_cell.goodco.com/hosts/saturn
 /.../my_cell.goodco.com/hosts/uranus
 /.../my_cell.goodco.com/hosts/venus}
%
.oE
.P
.ne 4
You can also enter some limited multiple operations using the
; (semicolon) as a command separator and enclosing the operations in
"" (double quotes). The following example adds a principal to the registry
and then checks that the principal is added:
.oS
% \*Ldcecp -c "principal create S_Preska ; principal show S_Preska"\*C
{fullname {}}
{uid 28}
{uuid 0000001c-dc77-21cd-b700-0000c08adf56}
{alias no}
{quota unlimited}
%
.oE
.P
.iX "DCE control program" "multiple operations"
Be careful entering multiple operations via the \*Ldcecp\*O command
with the \%\*L-c\*O option because operation results return to the
\*Ldcecp\*O interpreter, not to the shell.  An operation like the
following returns the results of just the last operation (\*Lgroup list
users\*O) to the shell:
.oS
% \*Ldcecp -c "group list staff; group list managers; group list users"\*C
/.../ward_cell.osf.org/P_Pestana
/.../ward_cell.osf.org/R_Parsons
/.../ward_cell.osf.org/L_Jones
/.../ward_cell.osf.org/S_Preska
/.../ward_cell.osf.org/N_Long
/.../ward_cell.osf.org/D_Witt
/.../ward_cell.osf.org/C_Pilat
 .
 .
 .
%
.oE
.P
.zA "def,10868,R1.2.2,Added multiple commands"
This particular problem can be overcome by:
.oS
.ne 13
% \*Ldcecp -c "puts [group list staff]; puts [group list manager]; puts [group list users]"\*C
   .
   .
   .
%
.oE
.zZ "def,10868,R1.2.2,Added multiple commands"
.P
.iX "scripts" "invoking"
To invoke a \*Ldcecp\*O script, omit the \*L-c\*O argument but
include the name of the script.  The following example invokes a script
that lists the names of all hosts in the cell in alphabetical order:
.oS
.ne 13
% \*Ldcecp list_hosts\*C
earth
jupiter
krypton
mars
mercury
neptune
planets
pluto
saturn
uranus
venus
%
.oE
.P
.iX "DCE control program" "invoking operations"
.iX "operations" "invoking within \*Ldcecp\*O"
When you want to invoke complex or multiple operations, you might want
to invoke operations from within \*Ldcecp\*O.  The program
provides a convenient history facility and a command-line editing
capability that is useful for recalling and reusing previous
operations.  The following example operations invoke \*Ldcecp\*O
and add a new user to a DCE cell:
.oS
% \*Ldcecp\*C
dcecp> \*Lprincipal create J_Jones \*C
dcecp> \*Lgroup add users -member J_Jones\*C
dcecp> \*Lorganization add staff -member J_Jones\*C
dcecp> \*Laccount create J_Jones -group users -organization staff \\\*C
> \*L-password change.me -mypwd mxyzptlk\*C
dcecp> 
.oE
.P
.iX "DCE control program" "abbreviations"
.iX "abbreviations"
All \*Ldcecp\*O object, operation, and option names can be abbreviated
to the shortest unique string when used interactively.  These names
have been chosen with this in mind so that unique abbreviations are
usually not more than one or two characters.
.P
Avoid using object or command abbreviations within scripts as
this limits a script's portability.  Users defining their own commands
could alter the uniqueness of abbreviations, resulting in ambiguous
command names or object names.
.H 2 "Doing More with dcecp"
.P
.iX "DCE control program" "uses of"
The DCE control program accepts commands ranging from simple to
complex, with more complex commands offering greater strength and
versatility.  Although simple commands are the easiest to compose, they
are also limited, usually to performing one operation on a single
object.  So while it's always possible to enter simple commands,
you'll probably find that, at times, you want to repeat operations over
several or even many objects, or to perform some operation only under
certain conditions.  For instance you might want to add some entry to a
CDS directory only if some other specified entry already exists in
CDS. \*Ldcecp\*O makes this possible by utilizing Tcl's
built-in commands that imitate elements commonly found in numerous
programming and shell languages.
...\" Any control program's main purpose is to interpret commands.  While
...\" simple commands are the easiest to compose, they are also limited,
...\" usually to performing one operation on a single object. 
.P
The DCE control program contains many C-like constructs that control
command execution.  Some examples are \*Lif\*O statements for conditional
execution, looping commands such as \*Lwhile\*O, \*Lfor\*O, and
\*Lforeach\*O used to repeat operations under various conditions, a
\*Lcase\*O command for testing values against various patterns, and
\*Lproc\*O for writing your own customized commands.
.P
The DCE control program also includes other syntactic elements such as
"" (quotes), { } (braces), [ ] (brackets), and \\ (backslash),
which it uses to group elements together and for controlling
interpretation of special characters.
.P
Although many features are designed for use in scripts, you'll
probably find yourself using some constructs and elements
(particularly quotes, braces, brackets, and backslashes) in
interactive operations as well.  You'll need to decide when it makes
sense to perform operations interactively or to use a script.  In general,
complexity and potential for reuse can help you decide.
...\" DCE Version 1.1 provides several scripts for performing common DCE
...\" operations.  Nevertheless, you may want to modify or adapt these in
...\" some ways or you might want to develop your own scripts.
.P
Now let's look at a couple of simple examples that illustrate some DCE
control program and Tcl basics.  Some \*Ldcecp\*O operations can be very
straightforward like
.oS
dcecp> \*Laccount modify N_Long -expdate 1996-06-30 \*C
dcecp>
.oE
.P
This operation lets you change information in the DCE Security Service
registry.  Here, we're changing the account expiration date for the
principal (\*LN_Long\*O) named in the command line.  While it's relatively
simple to execute this operation for one or two principals, it's more
difficult to change the account expiration date for many principals.
.P
.ne 5
Imagine that your organization employs six temporary workers and the
project they're associated with has been extended for three months.
Rather than execute the \*Laccount modify\*O operation six times, you
can use a \*Ldcecp\*O \*Lforeach\*O command to loop (repeat) an action for
each item of a list:
.oS
dcecp> \*Lforeach i {N_Long L_Jones P_Sawyer \*C
> \*LD_Witt M_Dougherty S_Preska} { \*C
> \*Laccount modify $i -expdate 1996-06-30 }\*C
dcecp>
.oE
.P
In the example, the \*Lforeach\*O looping command has three arguments:
a variable, a list, and the body.  The variable \*Li\*O substitutes
sequentially for each item in the list (\*LN_Long\*O, \*LL_Jones\*O, 
and so on). 
The \*Lforeach\*O command executes the body (\*Laccount
modify $i -expdate 1996-06-30\*O) for each item in the list.
The \*L$i\*O variable in 
the body takes on the value of each principal name in the
list, in turn, until all items in the list have been used.  See
Section 2.9.2 for more detailed information about looping commands.
.P
This example illustrates several other important syntax rules.  The
DCE control program uses { } (braces) to determine where command
arguments, such as the script body, begin and end.  For example, the
\*Lforeach\*O command has three arguments: a variable name, a list,
and a script body.  Normally, command arguments are separated by spaces.
To prevent \*Ldcecp\*O from incorrectly interpreting the spaces
between list elements as argument separators, we use braces to enclose
the list and disable special interpretation of the spaces.  Thus, all of
the list elements appear as one argument.  Similarly, we use braces to
enclose the individual elements in the script body.
.P
Braces also help \*Ldcecp\*O determine whether a command is complete;
incomplete commands will have more opening than closing braces.  The
lack of a closing brace at the end of the first line signals
\*Ldcecp\*O that more command input is coming, so \*Ldcecp\*O prompts
with the secondary prompt (>). Similarly, the opening brace at the end
of line 2 signals that you are still not finished entering the
command.  This lets you wrap lines without using a \\ (backslash) line
wrap character.  The DCE control program executes the command when you
press
\*L<Return>\*O
after the closing brace at the end of line 3.  Chapter 2
contains more information about braces.
.P
.ne 5
Now assume that, instead of six temporary workers, your
organization has fifty temporary workers (all in one group called
\*Ltemps\*O) for whom you want to add three-month account extensions.
We'll still use the \*Lforeach\*O command but, rather than write all
fifty principals directly in the list, use the \*Ldcecp\*O \*Lgroup
list temps\*O operation to generate a list for you, as follows:
.oS  
dcecp> \*Lforeach i [group list temps] {\*C
> \*Laccount modify $i -expdate 1996-06-30 } \*C
dcecp>
.oE
.P
In this example, we've put the \*Lgroup list temps\*O
operation in [ ] (brackets).  Called \*Vcommand substitution\*O,
this technique replaces the command inside the brackets with
the results returned by that command.  The results of the \*Lgroup
list temps\*O operation produces a valid Tcl list that might look
like the following:
.oS
dcecp> \*Lgroup list temps\*C
N_Long
L_Jones
P_Sawyer
D_Witt
M_Dougherty
S_Preska
 .
 .
 .
J_Jones
.oE
.P
Here, we've provided a high-level look at some practical uses of
\*Ldcecp\*O. Of course there's a lot we haven't seen, too.  In the next
chapter we'll look more closely at some of the \*Ldcecp\*O operations
that you're likely to use for DCE administration.  Remember that
\*Ldcecp\*O is based on Tcl, and Tcl has other commands and command
variations we won't discuss.  So be sure you have access to the
standard Tcl publications for detailed information on all of the
commands.
.H 2 "When to Use an Interactive Command or Script"
.P
There's no absolute dividing line for when you should enter commands
interactively or with a script.  In general though, the simpler
operations\(emthose that perform one or maybe two tasks\(emmake
the best candidates for interactive use.  The following examples typify
interactive operations:
.oS
dcecp> \*Ldirectory create /.:/printers\*C

dcecp> \*Laccount show w_shakespeare\*C

dcecp> \*Lserver start /.:/hosts/curley/config/srvrconf/BBSserver\*C
.oE
.P
The next example is a little more complicated, so at first you might
choose to run this as a script: 
.oS
foreach i [group list temps] {
   account modify $i -expdate 1996-06-30}
.oE
.P				   
Saving a frequently used operation as a script (in a file) has its
advantages; it can help to automate repetitive or complicated tasks
and you can keep it around for possible modification and use in other
situations later on.  Whichever method you choose, as you become more
comfortable using \*Ldcecp\*O and Tcl, you might find yourself entering
fairly complex operations interactively.  For information on how to
how to create and invoke scripts, refer to Section 1.8.
.H 2 "Editing Command Lines 
.P
We've seen some basic ways to enter interactive \*Ldcecp\*O commands.
But let's say that now you want to edit the command you're entering or
that you want to recall and modify a command you entered previously.
The DCE control program offers several ways to edit commands.  You can
edit a current command line by using the command-line editing facility.
You can use the \*Lhistory\*O command to recall, edit, and reissue a
previously used command.
.H 3 "Editing the Current Command Line"
.P
.iX "DCE control program" "command-line editing"
.iX "editing" "DCE control program" 
.iX "command-line editing"
You can edit a command line before sending it to \*Ldcecp\*O by
typing control characters or escape sequences that resemble \*Lksh\*O
or \*Lemacs\*O editing commands.  A \*Vcontrol character\*O, shown as 
\*L<Ctrl-\*Vx\*L>\*O, where \*Vx\*O is a letter, is entered by holding down
\*L<Ctrl>\*O (or \*L<Control>\*O)
and pressing the letter key.  For example,
\*L<Ctrl-A>\*O is \*L<Ctrl>\*O and 
\*L<A>\*O, pressed at the same time.
Enter an \*Vescape sequence\*O by pressing \*L<Escape>\*O
followed by one or more characters.  In an escape sequence,
\*L<Escape >\*O is referred to as \*LESC\*O, as in \*L<ESC\ f>\*O
for example.  Case matters in escape sequences (unlike
control characters, which don't distinguish between upper and lower case);
\*L<ESC\ F>\*O is not the same as \*L<ESC\ f>\*O.
.P
You can enter an editing command anywhere on the line, not just at the
beginning.  In addition, a return may also be pressed anywhere on the line,
not just at the end.
.P
Most editing commands accept a repeat count, \*Vn\*O,
where \*Vn\*O is a number.  Enter a repeat count by pressing
\*L<Escape>\*O, the number, and then the command to execute.  For example,
\*L<ESC\ 4>\*O \*L<Ctrl-f>\*O moves forward four characters.  Some of the
descriptions that follow are marked with [\*Vn\*O] to identify
commands that accept a repeat count.
.P
The following control characters are accepted:
.VL 1.75i
.LI "\*L<Ctrl-A>\*O"
Move to the beginning of the line
.LI "\*L<Ctrl-B>\*O"
Move left (backward) [\*Vn\*O]
.LI "\*L<Ctrl-D>\*O"
Delete character [\*Vn\*O]
.LI "\*L<Ctrl-E>\*O"
Move to end of line
.LI "\*L<Ctrl-F>\*O"
Move right (forward) [\*Vn\*O]
.LI "\*L<Ctrl-G>\*O"
Ring the bell
.LI "\*L<Ctrl-H>\*O"
Delete character before cursor (\*L<Backspace>\*O) [\*Vn\*O]
.LI "\*L<Ctrl-I>\*O"
Complete filename (\*L<Tab>\*O); see following text
.LI "\*L<Ctrl-J>\*O"
Done with line (\*L<Return>\*O)
.LI "\*L<Ctrl-K>\*O"
Kill to end of line (or column [\*Vn\*O])
.LI "\*L<Ctrl-L>\*O"
Redisplay line
.LI "\*L<Ctrl-M>\*O"
Done with line (alternate \*L<Return>\*O)
.LI "\*L<Ctrl-N>\*O"
Get next line from history [\*Vn\*O]
.LI "\*L<Ctrl-P>\*O"
Get previous line from history [\*Vn\*O]
.LI "\*L<Ctrl-R>\*O"
Search backward (forward if [\*Vn\*O]) through history for
text; must start line if text begins with an up arrow
.LI "\*L<Ctrl-T>\*O"
Transpose characters
.LI "\*L<Ctrl-V>\*O"
Insert next character, even if it is an edit command
.LI "\*L<Ctrl-W>\*O"
Wipe to the mark
.LI "\*L<Ctrl-X><Ctrl-X>\*O"
Exchange current location and mark
.LI "\*L<Ctrl-Y>\*O"
Yank back last killed text
.LI "\*L<Ctrl-[>\*O"
Start an escape sequence (\*L<Escape>\*O)
.LI "\*L<Ctrl-]>\*O\*Vc\*O"
Move forward to next character \*Vc\*O
.LI "\*L<Ctrl-?>\*O"
Delete character before cursor (\*L<Delete>\*O) [\*Vn\*O]
.LE
.P
The following escape sequences are accepted:
.VL 1.75i
.LI "\*L<Escape><Ctrl-H>\*O"
Delete previous word (\*L<Backspace>\*O) [\*Vn\*O]
.LI "\*L<ESC\ DEL>\*O"
Delete previous word (\*L<Delete>\*O) [\*Vn\*O]
.LI "\*L<ESC\ SPC>\*O"
Set the mark (\*L<Spacebar>\*O); see \*L<Ctrl-X><Ctrl-X>\*O and \*L<Ctrl-Y>\*O
.LI "\*L<ESC\ \&.>\*O"
Get the last (or [\*Vn\*Oth]) word from previous line
.LI "\*L<ESC\ ?>\*O"
Show possible completions; see following text
.LI "\*L<ESC\ <>\*O"
Move to start of history
.LI "\*L<ESC\ >>\*O"
Move to end of history
.LI "\*L<ESC\ b>\*O"
Move backward a word [\*Vn\*O]
.LI "\*L<ESC\ d>\*O"
Delete word under cursor [\*Vn\*O]
.LI "\*L<ESC\ f>\*O"
Move forward a word [\*Vn\*O]
.LI "\*L<ESC\ l>\*O"
Make word lowercase [\*Vn\*O]
.LI "\*L<ESC\ u>\*O"
Make word uppercase [\*Vn\*O]
.LI "\*L<ESC\ y>\*O"
Yank back last killed text
.LI "\*L<ESC\ w>\*O"
Make area up to mark yankable
.LI "\*L<ESC\ \*Vnn\*L>\*O"
Set repeat count to the number \*Vnn\*O
.LE
.zA "def,13460,R1.2.2,Added key binding text precedence"
.P
In some cases, existing terminal key bindings take
precedence over these \*Ldcecp\*O control keys.  In particular, the
bindings used for \*Lerase\*O, \*Lkill\*O, \*Leof\*O, \*Lintr\*O, \*Lquit\*O, 
and \*Lsusp\*O in
your environment will supercede any \*Ldcecp\*O bindings for those
same control keys.
In most instances, control keys will not be interpreted by the
terminal but will be passed through to \*Ldcecp\*O.  One of the few
exceptions is \*Llnext\*O (literal next),
which quotes the next character typed.  When you type the
control key that is bound to \*Llnext\*O it is interpreted by the
terminal, which will pass the next character typed through to
\*Ldcecp\*O.
.zZ "def,13460,R1.2.2,Added key binding text precedence"
.P
The DCE control program also provides filename completion.  Suppose
the root directory has the following files in it:
.oS
bin	vmunix
core	vmunix.old
.oE
.P
If you type \*Lrm\ /v\*O and then press
\*L<Tab>\*O, the command processor
completes as much of the name as
possible by adding \*Lmunix\*O.  Because the example name
is not unique, it beeps.  If you press
\*L<Escape>\*O followed by the ? (question mark), 
it displays the two choices.  The command processor
completes the filename when you then enter the period (which makes the
name unique) followed by 
\*L<Tab>\*O, as shown in the following:
.iS
rm /v<Tab>\*Cmunix\*L.<Tab>\*Cold\*O
.iE
.P
In this example, the constant width font indicates text automatically
entered by the command processor.
.H 3 "Editing Command Lines with the history Command"
.P
.iX "DCE control program" "history"
.iX "editing" "using the history facility"
.iX "history" "DCE control program" 
Sometimes when you are entering interactive commands, you want to
recall and reuse a previously entered command.  Let's say you list the
objects in a CDS directory and then you modify one of the objects.  Now
you want to list the objects again to verify that your modification
took effect.  You can use the \*Lhistory\*O command to recall, edit,
and reissue a previously used command.  The history facility saves
only interactive commands.  Commands issued from scripts aren't saved
and can't be recalled. 
.P
The \*Lhistory\*O command takes various arguments depending on what you
want to do.  Entering \*Lhistory\*O with no arguments lists all the
commands (called \*Vevents\*O) entered during the current invocation of
\*Ldcecp\*O, as shown:
.oS
.ps 11
.vs 13
.ne 8
.zA "def,13461,R1.2.2,Add history to list"
dcecp> \*Lhistory\*C
     1  principal create wardr -fullname {Ward Rosenberry} \\
          -quota unlimited
     2  group add users -member wardr
     3  organization add consultants -member wardr
     4  account create wardr -mypwd mxyptlk -password qwerty \\
          -group users -organization consultants
     5  history
dcecp>
.oE
.ps 12
.vs 14
.zZ "def,13461,R1.2.2,Add history to list"
.P
Each history event is independent of previous events.  This means that, if a 
recalled command used a variable, its current value may not be the
same as when it was first entered.  The \*Lhistory\*O command itself
generates a history event, too. 
.P
By default, the history list keeps the 20 most recent commands.
You can use the \*Lhistory keep\*O command to lengthen or shorten the
history list.  For example, the following command lengthens the history
list to keep the 50 most recent events:
.oS
dcecp> \*Lhistory keep 50\*C
dcecp>
.oE
.P
You can specify events in various ways.  Positive numbers specify
events relative to the earliest event in the list.  Negative numbers
specify events relative to the most recent command.  You can also specify
an event by typing characters that match all or part of a previous
event.
.P
The history facility lets you reuse previous events in many ways.  The
following discussion covers just a few of the history commands you can
use. 
.ML
.LI
You can execute a previous command without revision by using the \*Lhistory
redo\*O command: 
.oS
.zA "def,13461,R1.2.2,Add history to list"
dcecp> \*Lhistory\*C
           1 directory show /.:/printers
           2 object create /.:/printers/ascii_printer1
           3 object create /.:/printers/ascii_printer2
           4 object create /.:/printers/ascii_printer3
           5 history
dcecp> \*Lhistory redo directory\*C
directory show /.:/printers
 .
 . [output omitted]
 .
dcecp>
.zZ"def,13461,R1.2.2,Add history to list"
.oE
.P
.ne 10
.iX "abbreviations"
You can save the most typing by entering just the unique first
characters of words in a history command.  For instance, you can enter
the \*Lhistory redo directory\*O command from the previous example as
.oS
dcecp> \*Lhi r d\*C
directory show /.:/printers
 .
 . [output omitted]
 .
dcecp>
.oE
Other ways to redo commands include \*L!!\*O, which recalls the most
recent command, and \*L!\*Vevent number\*O to recall a specific event.
.LI
.iX "substitutions"
.iX "editing" "command lines" "substitutions"
You can revise and reexecute a previous command by using the \*Lhistory
substitute\*O command.  A common use of this command is to
correct typing mistakes.  The command syntax is as follows:
.iS
history substitute \*Vold new\*O [\*Vevent number\*O]
.iE
.P
If you omit the \*Vevent number\*O, you'll redo the most recent
command.  Replace the \*Vold\*O part of the recalled command with
\*Vnew\*O information:
.oS
dcecp> \*Lhistory\*C
           1 directory show /.:/printers
           2 object create /.:/printers/ascii_printer1
           3 object create /.:/printers/ascii_printer2
           4 object create /.:/printers/ascii_printer3
           5 directory show /.:/printers
           6 history
dcecp> \*Lhi s printer3 printer4 -3\*C
object create /.:/printers/ascii_printer4
dcecp> 
.oE
.P
You can also recall and revise the most recent command by using the
\*L^\*Vold\*L^\*Vnew\*O syntax familiar to users of the 
UNIX \*Lcsh\*O shell, as follows:
.oS
dcecp> \*L^4^5\*C
object create /.:/printers/ascii_printer5
dcecp>
.oE
.LE
.H 2 "Using the dcecp Help Facilities"
.P
.zA "def,13462,R1.2.2,Fixed dcecp Help output"
.iX "DCE control program" "getting help"
.iX "help" "for the DCE control program"
The DCE control program offers help in several ways:
.ML
.LI
If you want to see a list of objects provided by the DCE control
program, enter \*Lhelp\*O at the \*Ldcecp\*O prompt as shown in the
following example:
.oS
.ps 9
.vs 11
dcecp> \*Lhelp\*C
The general format of all dcecp commands is as follows:
  dcecp> <object> <operation> [argument] [options]

In addition to all of the standard tcl commands, dcecp supports many
commands to administer DCE objects.  A dcecp object or task represents
a DCE entity.  Type 'man dcecp_<command>' for more information.  All
of the following dcecp objects and tasks require an operation:
  account        cdsalias       dts            log            rpcprofile
  acl            cdscache       endpoint       name           secval
  attrlist       cdsclient      group          object         server
  aud            cell           host           organization   user
  audevents      cellalias      hostdata       principal      utc
  audfilter      clearinghouse  hostvar        registry       uuid
  audtrail       clock          keytab         rpcentry       xattrschema
  cds            directory      link           rpcgroup

Miscellaneous commands perform specific functions.  Type 'man dcecp'
for more information.  These commands take no operation:
  echo     errtext  login    logout   quit     resolve  shell

To list all dcecp objects:                    dcecp> help -verbose
To list all operations an object supports:    dcecp> <object> help
To list all options for an object operation:  dcecp> <object> help <operation>
For verbose information on a dcecp object:    dcecp> <object> help -verbose
For the manual page of a dcecp object:        dcecp> man dcecp_<object>
dcecp>
.ps 12
.vs 14
.oE
.P
.LI
If you just need to know which operations an object supports, use the
command
.iS
\*Vobject\*L operations
.iE
which returns
a list of the actions you can take on an object.  The following example
shows how to list the operations available for the \*Lprincipal\*O
object: 
.oS
dcecp> \*Lprincipal operations\*C
catalog create delete modify show operations help
dcecp>
.oE
.P
You can save typing by abbreviating this command to
something like \*Lprin oper\*O. 
.LI
Get more detailed help about an object and its operations by using the
\*Vobject\*O \*Lhelp\*O command.  The following example returns a
1-line description of each operation supported by the
\*Lprincipal\*O object:
.oS
.ps 9
.vs 11
dcecp> \*Lprincipal help\*C
catalog             Returns all the names of principals in the registry.
create              Creates a DCE principal.
delete              Deletes a principal from the registry.
modify              Changes the information about a principal.
rename              Renames the specified principal.
show                Returns the attributes of a principal.
help                Prints a summary of command-line options.
operations          Returns a list of the valid operations for this command.
dcecp>
.ps 12
.vs 14
.oE
.P
.LI
Get information about available command options by adding an
\*Voperation\*O argument to the \*Vobject\*O \*Lhelp\*O command.  The
following example returns a 1-line description of each option
supported by the \*Lprincipal create\*O operation:
.oS
.ps 9
.vs 11
dcecp> \*Lprincipal help create\*C
-alias              Indicates the principal name is an alias of the uid.
-attribute          Specify principal attributes in an attribute list format.
-fullname           Fullname of the principal.
-quota              How many registry objects can the principal create.
-uid                User Identifier of the new principal.
-uuid               Orphaned UUID to be adopted by the principal.
dcecp>
.ps 12
.vs 14
.oE
.P
.LI
Get help about an object itself by using an \*Vobject\*O \*Lhelp
-verbose\*O command.  The following example returns a description of
the \*Lprincipal\*O object along with information about how to use the
object:
.oS
.ps 10
.vs 12
dcecp> \*Lprincipal help -verbose\*C
This object allows manipulation of principal information stored
in the DCE registry.  The argument is a list of either relative or
fully-qualified principal names.  Specify fixed attributes using
attribute options or an attribute list.  Specify any extended attributes
using an attribute list.  Principal operations connect to a registry that
can service the request.  Specify a particular registry by setting the
_s(sec) convenience variable to be a cell-relative or global replica
name, or the binding of the host where the replica exists.  The
completed operation sets the _b(sec) convenience variable to the name
of the registry contacted.
dcecp>
.ps 12
.vs 14
.oE
.P
.LI
.ne 5
.iX "help" "accessing reference pages"
.iX "reference pages" "within \*Ldcecp\*O"
Finally, some POSIX style systems will have reference pages for \*Ldcecp\*O objects
as well as a Tcl summary reference page.  Each \*Ldcecp\*O object has its own
reference page that describes the object and the operations available to it.
The general syntax for viewing a \*Ldcecp\*O object reference page is
.iS
man \*Vobject_name\*L
.iE
The following example shows how to invoke the reference page for the
\*Lprincipal\*O object.  Note that you can use the \*Lman\*O command
from within \*Ldcecp\*O.
.oS
dcecp> \*Lman principal\*C
 .
 . [output omitted]
 .
dcecp>
.oE
.P
The \*LTcl\*O reference page summarizes the Tcl built-in commands.  You can
view the Tcl summary reference page on a UNIX style system by entering
.oS
dcecp> \*Lman Tcl\*C
 .
 . [output omitted]
 .
dcecp>
.oE
.LE
.zZ "def,13462,R1.2.2,Fixed dcecp Help output"
.H 2 "Customizing dcecp Sessions"
.P
.iX "DCE control program" "customizing"
.iX "customizing the DCE control program" 
The DCE control program includes a number of commands, objects, and
task scripts for performing most of the day-to-day DCE administration
operations.  Nevertheless, as you gain experience using the
\*Ldcecp\*O interface, you may find you want to add new commands and
capabilities or to customize some existing ones.  The following
sections explain how to add scripts and new objects to your
\*Ldcecp\*O session.  An object is just a formal implementation of a
script that uses the \*Ldcecp\*O help system and takes the form of
\*Vobject operation\*O.  Chapters 2 and 3 explain the fundamentals of
writing \*Ldcecp\*O scripts and creating new objects.
.H 3 "Adding Scripts to dcecp Sessions
.P
Once you have written a script, you can make it available to
one person or to everyone who is logged into the host by modifying one
or more of the following files invoked when \*Ldcecp\*O initializes:
.iX "DCE control program" "initialization files"
.iX "initialization files" "use of in \*Ldcecp\*O"
.VL
.LI "\*L[info library]/init.tcl\*O"
.nL
This file is read first and contains standard Tcl initialization
commands for the host.  This affects all instances of \*Ldcecp\*O running on
a host.  The file contains definitions for the Tcl \*Lunknown\*O
command and the \*Lauto_load\*O facility used for initializing all of
the \*Ldcecp\*O objects.  Administrators should avoid adding
\*Ldcecp\*O customizations to this file.
.iX "\*Linit.tcl\*O" "use of"
.LI "\*Vdcelocal\*L/init.dcecp\*O"
.nL
This file contains \*Ldcecp\*O-specific startup information for the
host.  This affects all instances of \*Ldcecp\*O running on a host.
The \*Ldcecp\*O scripts implementing operations and tasks are stored
in the \*Vdcelocal\*L/dcecp\*O directory.  Add customizations in the form
of procedures to this file to make them available to all \*Ldcecp\*O
users on the host.
.iX "\*Linit.dcecp\*O" "use of"
.LI "\*L$HOME/.dcecprc\*O"
.nL
This optional file stores user customizations that affect individual
\*Ldcecp\*O users (the owners of the \*L.dcecprc\*O files).  Each DCE
user can maintain a \*L.dcecprc\*O file and store private
procedures or alias names for operations.  Modified \*L.dcecprc\*O
files allow flexible administration in environments with multiple
administrators.  For example, different \*L.dcecprc\*O files for each
administrator could use \*Ldcecp\*O \*Lsource\*O commands to call
specific commands and task scripts that are tailored to particular
areas of administration.
.iX "\*L.dcecprc\*O" "use of"
.LE
.P
The rest of this section illustrates a simple task script and shows
one way to make the script available for personal use.  Our example
begins with the control program's existing \*Lclock\*O object that
shows the current time.  However, the time is simply a DTS timestamp
from the clock on the local host as in
.oS
dcecp> \*Lclock show\*C
1994-10-03-10:22:59.991-04:00I-----
dcecp> 
.oE
.P
Let's say you create a procedure that gets a timestamp from a DTS
server but also displays the name of the DTS server with the time as
in the following example which invokes a user-created procedure called
\*Lshow_clock\*O:
.oS
dcecp> \*Lshow_clock\*C
Time on mars is        1994-09-30-15:03:43.979-04:00I-----
dcecp>
.oE
You can make this procedure available to one user by including the
procedure in the user's \*L.dcecprc\*O file.  The following sample
\*L.dcecprc\*O file includes user customizations consisting of the
\*L_dcp_show_clocks\*O procedure and an alias that lets you invoke the
procedure with the simpler \*Lshow_clocks\*O command name.  Another
procedure called \*L_dcp_whoami\*O shows the current login identity
information.  Note the order of operations in the \*L.dcecprc\*O file.
Procedures are defined at the beginning of the file.  Renaming and
invoking the procedures must occur after the procedures are defined.
.iX "\*L.dcecprc\*O" "example of"
.iX "initialization files" "example in \*Ldcecp\*O"
.oS
##
## Start up commands
##
# A simple command to rerun .dcecprc after modifications
proc .d {} {source $HOME/.dcecprc}

# Show your current login name and your current cell name.
proc _dcp_whoami {} {
  global _c _u
  return "You are '$_u' logged into '$_c'."
}

.ne 19
# Show the time on all of the dts servers running in your cell.
proc _dcp_show_clocks {} {
    set x [directory list /.:/hosts]
    foreach n $x {
        if {[catch {object show $n/dts-entity}] == 0} {
            set index [string last "/" $n] 
            set y [string range $n [incr index] end]
            if {[catch {clock show $n/dts-entity} msg] == 0} {
                set i [expr 20 - [string length $y]]
                puts [format "Time on $y is %${i}s %s" " " \\
                    [clock show $n/dts-entity]]
            } else {
                set i [expr 20 - [string length $y]]
                puts [format "Time on $y is %${i}s %s" " " \\
                   "Server not responding."]
            }
        }
    }
}

# Give some procs usable names
rename _dcp_whoami whoami
rename _dcp_show_clocks show_clocks

# If I am authorized, say so
if {$_u != ""} {
  whoami
}
.oE
.P
The \*Lrename\*O command near the end of the file lets you invoke the
\*L_dcp_show_clocks\*O and \*L_dcp_whoami\*O procedures using the
easier command names \*Lshow_clocks\*O and \*Lwhoami\*O.
.P
When you start \*Ldcecp\*O, the last part of this file
invokes the \*L_dcp_whoami\*O procedure if you are logged into DCE. If
the \*L_u\*O convenience variable is set, the \*L_dcp_whoami\*O
procedure prints your current login identity as follows:
.oS
% \*Ldcecp\*C
You are '\*Vprincipal_name\*C' logged into '\*Vcell_name\*C'. 
dcecp>
.oE
...\" .P
...\" Here's a example \*Linit.dcecp\*O file.  It calls in a \*Ldcecp\*O
...\" script that let's users enter commands using a \*Vverb object\*O
...\" syntax rather than the \*Vobject verb\*O syntax normally expected by
...\" \*Ldcecp\*O. This function is available to all users logging into the
...\" host where this file resides.
...\" 
...\" 	Numbered callouts briefly explain the purpose of each modification and
...\" 	point to a relevant section for more detailed explanation.
...\" 
...\" .oS
...\" # File: init.dcecp
...\" 
...\" # This means that all users on a host will have the verb
...\" # command by default.  So you can type:
...\" # 
...\" #       show dir /.:
...\" # 	and have it work.
...\" # 
...\" # Host specific dcecp initialization
...\" 
...\" source $dcecp_library/verb-object.dcecp
...\" .oE	
.H 3 "Adding New Objects to the DCE Control Program"
.P
.iX "DCE control program" "adding new objects"
.iX "administration objects" "adding new objects"
If you have written a script as a formal \*Ldcecp\*O object, you can
make it available by including the new object in the same directory
where other task objects reside.  On UNIX systems, this is often
\*Vdcelocal\*L/dcecp\*O.  As a rule, you should add the new object to
each host in the DCE cell.  Chapter 3 describes how you can use the
\*Ldcecp\*O \*Lhostdata\*O object to copy scripts or other files to
every host in a cell.
.P
When you install a new script, you must run the \*Lauto_mkindex\*O
utility to make the new object available to other users on the host.
For more information about running the \*Lauto_mkindex\*O utility, see
Chapter 3.
