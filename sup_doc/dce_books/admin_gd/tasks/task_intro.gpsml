...\" @OSF_COPYRIGHT@
...\" COPYRIGHT NOTICE
...\" Copyright (c) 1990, 1991, 1992, 1993, 1994 Open Software Foundation, Inc.
...\" ALL RIGHTS RESERVED (DCE).  See the file named COPYRIGHT.DCE for
...\" the full copyright text.
...\" 
...\" 
...\" HISTORY
...\" $Log: task_intro.gpsml,v $
...\" Revision 1.1.6.1  1996/09/19  13:57:30  sherman
...\" 	{def,13575,R1.2.2}
...\" 	Miscellaneous dcecp fixes
...\" 	[1996/09/19  13:56:46  sherman]
...\"
...\" Revision 1.1.4.1  1996/03/12  15:41:10  wardr
...\" 	{edit R1.2.1}
...\" 	Release Edits
...\" 	[1996/03/12  15:40:47  wardr]
...\" 
...\" Revision 1.1.2.6  1995/05/25  19:12:05  rcb
...\" 	PRENTICE HALL reformat: *really* last change
...\" 	[1995/05/25  14:28:27  rcb]
...\" 
...\" 	fixes to header capitalization
...\" 	[1995/03/08  16:22:03  rcb]
...\" 
...\" 	PRENTICE HALL reformat
...\" 	[1995/03/01  18:04:06  rcb]
...\" 
...\" 	incoroporated 1.1 edits
...\" 	[1995/03/01  17:54:27  rcb]
...\" 
...\" Revision 1.1.2.5  1994/10/28  14:38:58  wardr
...\" 	{edit R1.1}
...\" 	added index hits
...\" 	[1994/10/28  14:38:29  wardr]
...\" 
...\" Revision 1.1.2.4  1994/10/18  20:36:15  wardr
...\" 	{edit R1.1}
...\" 	Final fixes for the GA release
...\" 	[1994/10/18  20:35:54  wardr]
...\" 
...\" Revision 1.1.2.3  1994/10/07  17:59:59  wardr
...\" 	{enh, CR10014, R1.1}
...\" 	Prepare for final draft review
...\" 	[1994/10/07  17:58:30  wardr]
...\" 
...\" Revision 1.1.2.2  1994/09/02  17:25:35  wardr
...\" 	{edit R1.1}
...\" 	[Dfixed typos and minor eds
...\" 	[1994/09/02  17:25:08  wardr]
...\" 
...\" Revision 1.1.2.1  1994/08/05  19:01:43  wardr
...\" 	{enh, CR10014 R1.1}initial drafts of task scripts
...\" 	[1994/08/05  19:01:17  wardr]
...\" 
...\" $EndLog$
.H 1 "DCE Administration Task Objects"
.PP
.iX "task objects" "about"
This part of the \*(Ac discusses the purpose and use of DCE
administration task objects provided with DCE. Generally,
these special \*Ldcecp\*O objects perform routine high-level
administration tasks by combining several lower-level operations.
.PP
Often, a single task object uses or affects multiple DCE services.  For
example, one of the task objects, the \*Lhost\*O object, can configure
a host computer into a DCE cell.  This task adds specific kinds of
information to the DCE Security Service, the Cell Directory Service,
and the DCE host daemon services.  Because a single invocation of the
\*Lhost\*O object can perform multiple steps, it shields DCE
administrators from some of the lower-level administration details
that would otherwise have to be attended to by using several
lower-level \*Ldcecp\*O administration objects.
.PP
While we discuss the task objects at a high level, you'll need to keep
in mind that there is often more going on that we're only hinting at.
In these cases, we'll point out where to go in this guide for more
detailed information.  Usually you'll be directed to the corresponding
lower-level discussion in the relevant component's part of this guide.
...\"     Task Objects Simplify DCE Administration
...\" 
...\"	 Using the Cell Task Object
...\"	 Using the Cellalias Task Object
...\"	 Using the Host Task Object
...\"	 Using the User Task Object
.H 2 "Using Task Objects to Simplify DCE Administration"
.PP
Individual DCE control program objects operate on very specific pieces
of information in DCE.  For example, the \*Lgroup\*O object operates
solely on security groups in the DCE Security Service registry
database.  The \*Lgroup\*O object enables administrators to create and
delete security groups, add and remove members from security groups,
rename the groups, and so on.  Such precise control is necessary
because it allows you to custom tailor DCE to meet very specific needs
or circumstances.
...\" 	The DCE control program objects give DCE administrators precise
...\" 	control over most aspects of the core DCE services.  Such fine-grained
...\" 	control is necessary because it allows you to custom-tailor DCE to
...\" 	meet various needs or circumstances.  For instance, some DCE
...\" 	environments might have little need for security restrictions,
...\" 	allowing users to roam throughout the cell using any resource from any
...\" 	machine.  Meanwhile, some other DCE environment belonging to, say, the
...\" 	Department of Defence might be highly compartmentalized with very
...\" 	restrictive access controls closely regulating who can use each
...\" 	particular resource.
.PP
While such control might be necessary when configuring a new cell or
fixing some access control problem, it can overwhelm routine DCE
administration tasks.  As an example, let's look at the minimum steps
needed to add a new user to a DCE cell:
.AL
.LI
Use the \*Lprincipal\*O object to create a principal name for the user.
.LI
Use the \*Lgroup\*O object to add the principal to a security group.
.LI
Use the \*Lorganization\*O object to add the principal to a security
organization. 
.LI
Use the \*Laccount\*O object to create an account for the principal.
.LI
Use the \*Ldirectory\*O object to create a directory for the principal in CDS.
.LI
Use the \*Lacl\*O object to give the principal access to the CDS directory.
.LE
.PP
Performing these six steps probably wouldn't pose any problems in a
small cell with 15 or 20 users.  But consider a cell with
more, perhaps a hundred or maybe even a thousand or more users, and the need
to automate this and other administration tasks becomes evident.
.PP
To meet this administration need, the DCE control program includes
several administration \*Etask objects\*O for performing some routine
DCE administration tasks.  Here, we're using the term \*Etask\*O to
mean doing something that requires multiple steps, such as when adding
a user consists of performing six lower-level operations.
.PP
.ne 6
One of the task objects is the \*Luser\*O object that you can use to
add and remove user information in your DCE environment.  For
instance, a single invocation of the \*Luser\*O object can perform all
six of the previously mentioned steps needed to correctly add a new
user to your DCE environment.  You can also use this same task object
to delete the user from your environment.
.P
The task objects are implemented as \*Ldcecp\*O scripts by using the
DCE control program language, which means that you can extend the
scripts or change their behavior according to your needs.  For
instance, the default implementation of the \*Luser\*O task object
does not operate on any GDS or DFS information.  If your DCE
environment includes these extended services, you might want to add
some GDS or DFS operations to the script.  Part 1 of this guide
explains how to use the DCE control program language to write and
modify a \*Ldcecp\*O task object.
.H 2 "Looking Beyond the Tools"
.P
.iX "task objects" "listed"
Although you use the task objects to perform various administrative
operations, your most important focus is on the elements or entities
that you're managing.  Each of four task objects provided with DCE
enables you to manage a specific element or entity in your DCE cell.
The elements are as follows:
.VL 1.25i
.LI "A DCE cell"
You can test whether a cell is running, show general in\%for\%ma\%tion about
available services in a cell, and back up security and CDS
information by using the \*Lcell\*O task object.
.LI "Cell name"
.zA "def,13575,R1.2.2,Cannot change a name"
You can create and manage cell alias names, which are needed for
registering a cell in multiple global
directory services.  These operations use the \*Lcellalias\*O task object.
.zZ "def,13575,R1.2.2,Cannot change a name"
.LI "DCE hosts"
You can configure and remove DCE hosts in a cell, show information
about hosts in a cell, and start and stop DCE processes on hosts in a
cell by using the \*Lhost\*O task object.
.LI "DCE users"
You can add and remove users and show information about users in a DCE
cell with the \*Luser\*O task object.
.LE
.P
.ne 3
The remaining chapters in this part discusses how to manage these DCE
elements by using the default implementations of the four \*Ldcecp\*O
task objects provided with DCE. 
