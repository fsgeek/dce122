...\" @OSF_COPYRIGHT@
...\" COPYRIGHT NOTICE
...\" Copyright (c) 1990, 1991, 1992, 1993 Open Software Foundation, Inc.
...\" ALL RIGHTS RESERVED (DCE).  See the file named COPYRIGHT.DCE in the
...\" src directory for the full copyright text.
...\" 
...\" HISTORY
...\" $Log: overview.gpsml,v $
...\" Revision 1.1.6.2  1996/09/03  18:19:40  wardr
...\" 	{enh,R1.2.2}
...\" 	Update for sgml conversion
...\" 	[1996/09/03  18:19:20  wardr]
...\"
...\" Revision 1.1.6.1  1996/05/10  21:13:53  wardr
...\" 	{enh,R1.2.2}
...\" 	Removed Changebars
...\" 	[1996/05/10  21:13:36  wardr]
...\" 
...\" Revision 1.1.4.11  1995/06/15  16:25:22  rcb
...\" 	edited 1.1 version, PRENTICE HALL reformat
...\" 	[1995/06/13  19:24:11  rcb]
...\" 
...\" 	small change
...\" 	[1995/06/01  19:01:47  rcb]
...\" 
...\" 	small correction
...\" 	[1995/06/01  15:59:51  rcb]
...\" 
...\" 	edited 1.1 version, PRENTICE HALL reformat
...\" 	[1995/06/01  15:38:52  rcb]
...\" 
...\" Revision 1.1.4.10  1994/11/15  20:47:41  neilson
...\" 	Converted book title references to macro form.
...\" 	[1994/11/15  18:57:42  neilson]
...\" 
...\" Revision 1.1.4.9  1994/11/03  23:31:25  neilson
...\" 	Substituted macros for book names in cross refs.
...\" 	[1994/11/03  01:38:19  neilson]
...\" 
...\" 	Substituted macros for book names in cross refs.
...\" 
...\" Revision 1.1.4.8  1994/10/20  14:50:09  weir
...\" 	Corrected some cross-references
...\" 	[1994/10/20  14:49:46  weir]
...\" 
...\" Revision 1.1.4.7  1994/04/06  16:30:47  zahn
...\" 	{enh,5923,R1.1}
...\" 
...\" 	Corrected cross-references to now defunct User's
...\" 	Guide and Reference.
...\" 	[1994/04/06  16:30:34  zahn]
...\" 
...\" Revision 1.1.4.6  1994/03/14  22:00:20  rom
...\" 	{enh, 10129, R1.1}
...\" 	Fix pathnames of included files for new three-book organization.
...\" 	[1994/03/14  21:19:52  rom]
...\" 
...\" Revision 1.1.4.5  1993/01/28  18:38:47  cjd
...\" 	Embedded copyright notice
...\" 	[1993/01/28  17:57:52  cjd]
...\" 
...\" Revision 1.1.4.4  1993/01/25  18:27:18  steiner
...\" 	Review comment from Norbert - modify description of /.: to say
...\" 	that the elements immediately following (rather than all elements,
...\" 	which may be into another junction) are a CDS entry.
...\" 	[1993/01/25  18:26:45  steiner]
...\" 
...\" Revision 1.1.4.3  1993/01/07  16:49:55  buckler
...\" 	Bug 5335:  Corrected expansion of "ISO" from "International
...\" 	Organization for Standards" to "International Organization for
...\" 	Standardization".
...\" 	[1993/01/07  16:36:33  buckler]
...\" 
...\" Revision 1.1.4.2  1992/11/19  21:10:32  weir
...\" 	Moved into 1.0.2doc tree
...\" 	[1992/11/19  21:08:33  weir]
...\" 
...\" Revision 1.1.2.6  1992/10/19  18:16:39  lmk
...\" 	Prentice-Hall edits only
...\" 	[1992/10/19  18:15:31  lmk]
...\" 
...\" Revision 1.1.2.5  1992/10/09  18:41:31  steiner
...\" 	Second P-H edit pass.
...\" 	[1992/10/09  18:41:15  steiner]
...\" 
...\" Revision 1.1.2.4  1992/10/08  21:40:13  steiner
...\" 	Comments from Howard.
...\" 	[1992/10/08  21:39:48  steiner]
...\" 
...\" Revision 1.1.2.3  1992/10/08  18:44:18  steiner
...\" 	Edits.
...\" 	[1992/10/08  18:43:59  steiner]
...\" 
...\" Revision 1.1.2.2  1992/08/31  19:45:33  steiner
...\" 	New overview chapter
...\" 	[1992/08/31  19:44:56  steiner]
...\" 
...\" $EndLog$
.H 1 "DCE Directory Service Overview"
.P
This chapter provides an overview of the DCE Directory Service
for application programmers.
The chapter begins with a description
of this guide.
It then introduces DCE Directory Service concepts,
following which the structure of DCE names and
the DCE namespace are described.
The chapter then provides an overview of the programming interfaces
used to access the DCE Directory Service.
.H 2 "Introduction to This Guide"
.P
This guide describes how
application developers can access the DCE Directory Service.
From the application programmer's perspective, the directory service
has three main parts: the DCE Cell Directory Service (CDS), 
the DCE Global Directory Service (GDS), and
the X/Open Directory Service (XDS) and
X/Open OSI-Abstract-Data Manipulation
(XOM) programming interfaces.
This is reflected in the organization of the book, as follows:
.ML
.ne 8
.LI
Part 1. DCE Directory Service
.LI
Part 2. CDS Application Programming
.LI
Part 3. GDS Application Programming
.LI
Part 4. XDS/XOM Supplementary Information
.LE
.P
Parts 2 and 3 contain conceptual material on CDS and GDS
with descriptions of programming tasks, including the use
of programming interfaces.  Chapters
in each of these parts (Chapter 3 of Part 2 and Chapter 7 of Part 3)
contain annotated source code for sample applications.
.P
Part 4 consists mostly of tables of values
for the data structures used by the XDS and XOM application
interfaces, which are the interfaces used to directly access the 
directory service.  These chapters supplement the reference
pages for the XDS and XOM function calls, which are located in the \*(Dr.
.H 3 "Use of This Guide"
.P
Before reading this guide,
you should read
the \*(In.  It contains
overviews, along with illustrations, of all the DCE components and of
DCE as a whole.
Many concepts and details are explained in the \*(In
that are necessary to a full understanding of what is described here.
Next, read this chapter in its entirety.
.P
Determine whether you will be programming primarily in the CDS namespace
or the GDS namespace and read Part 2 or Part 3 accordingly.
At this point, you are ready to begin programming and should proceed
to Part 4.
The main purpose of Part 4 is to provide a convenient location
to look up the details of object values and structures needed
when writing code.
.P
If you do not find the information you need 
in either this guide or the \*(Dr, see the \*(Ag and the \*(Ar.
For example, information about the CDS
as a separate component is found in the \*(Ag.
Although the DCE Security Service is documented
in the \*(Dg, some information of interest to
programmers (such as adding new principals to the registry
database) is also found in the \*(Ag.
.H 3 "Directory Service Tools"
.P
Both CDS and GDS have commands that allow system administrators
to inspect and alter the contents of the directory.
This can be useful when developing applications that access the DCE namespace.
.P
For information on the CDS control program (\*Lcdscp\*O),
see the \*(Ac.
For information on the CDS browser (\*Lcdsbrowser\*O),
which is a Motif-based utility that allows you to inspect
the CDS namespace, see the \*(Ac.
.P
For information on the GDS system administration commands \*Lgdssysadm\*O,
\*Lgdsdirinfo\*O, \*Lgdsditadm\*O, and \*Lgdscacheadm\*O, see the \*(Ax.
...\" .cS
...\" .H 2 "Suggested Reading Paths"
...\" .ML
...\" .LI
...\" Directory Service Concepts
...\" .LI
...\" CDS
...\" .LI
...\" GDS
...\" .LI
...\" DNS
...\" .LI
...\" XDS/XOM
...\" .LI
...\" GDA
...\" .LE
...\" .cE
.H 2 "Using the DCE Directory Service"
.P
The DCE Directory Service can be used in many ways.
It is used by the DCE services themselves to support the
DCE environment.
For example, cells are registered in the global part of the
directory service, enabling users from different cells to
share information and resources.
.P
The directory service is also useful to DCE applications.
The client and server sides of an application can use it
to find each other's locations.
The directory service can also be used to store information that
must be made available in a globally accessible, well-known
place.
.P
For example, one DCE application could be a print service
consisting of a client side application that makes requests
for jobs to be printed, and a server side that prints jobs
on an available printer.
The directory service could be used as a central place where
the print clients could look up the location of a print server.
It could also be used to store
information about printers; for example, what type of jobs
a printer can accept and whether it is currently up or
down and lightly or heavily loaded.
.P
In some ways, a directory service can be used in the same way
as a file system has traditionally been
used; that is, for containing globally accessible information
in a well-known place.  An example is the use of configuration
information stored in files in a UNIX \*L/etc\*O directory.
.P
However, the directory service differs in important ways.
It can be replicated so that information is available even if
one server goes down.
Replicas can be kept automatically up-to-date, so that, unlike
multiple copies of a file on different machines, the
information in the replicas of the directory service can be kept current
without manual intervention.
.P
The directory service can also provide security for data that
is kept in a globally accessible place.
It supports access control lists (ACLs) that provide fine-grained control
over who is able to read, modify, create, and perform other operations
on its data.
.P
As you learn about the directory service and how to access it,
think about the ways in which your application can best take
advantage of the services it provides.
.H 2 "DCE Directory Service Concepts"
.P
This section provides a description of DCE Directory Service concepts
that are important to application developers.
Concepts that are specific to GDS are covered in more detail in
Part 3.
The following concepts are intended to convey general
definitions that are applicable to the directory service
as a whole rather than specific to a particular directory service
component.
For more detailed definitions, see the glossary in the
\*(In.
.ML
.LI
DCE namespace
.P
The DCE namespace is the collection of names in a DCE environment.
It can be made up of several domains, in which different types of
servers own the names in different parts of the namespace.
Typically, there are two high-level, or global, domains to a DCE
namespace: the GDS namespace and the Domain Name System (DNS) namespace.
At the next level is the CDS namespace,
with names contained in the
cell's CDS server.
A DCE environment always contains a cell namespace, which is
implemented by CDS.
Parts of the DCE namespace may not be contained in any of the
directory services; for example, the DFS namespace, also called
the filespace, contains the names of files and directories in DFS,
and the security namespace contains principals and groups contained
in the security server.
.P
.ne 5
The term \*EDCE namespace\*O is used when referring to
names, but not the information associated with them.
For example, it would include the name of a printer in the
directory service, but not its associated location attribute, and it
would include the name of a DFS file, but not its contents.
.LI
Cell namespace
.P
All of the names found in a single DCE cell comprise the cell's
namespace.
This includes names managed by the cell's CDS server and security
server, names in the cell's DFS if it has one, and any other names
that reside within a particular cell.
.LI
Hierarchy
.P
The DCE namespace is organized into a hierarchy; that is,
each name except the global root has a parent node and may itself have
child nodes or leaves.
The leaves are called objects or entries, and in
the CDS and DFS namespace, the nodes are called directories.
.LI
Directory
.P
The word \*Edirectory\*O has two meanings, which can be differentiated
by their context.
The first is the node of a hierarchy as mentioned in the previous
definition.
The second is a collection of objects managed by a directory service.
.LI
Directory service
.P
A directory service is software that manages names and their
associated attributes.
A directory service can store information, be queried about information,
and be requested to change information.
DCE contains two different directory services: CDS and GDS.
It also interacts with a third directory service, DNS, which is not
part of DCE.
.LI
Junction
.P
A junction is a point in the DCE namespace where two domains meet.
For example, the point where the DFS entries are \*Emounted\*O into
a CDS namespace is a junction.
DCE also has junctions between the global directory services and
CDS, and between CDS and the DCE Security Service.
.LI
.ne 8
Object
.P
The word \*Eobject\*O can have two meanings, depending on the context.
Sometimes it means an entry in a directory service.
Sometimes it means a real object that an entry in a directory
service describes, such as a printer.
In the context of XDS/XOM, the requested data is returned to the
application in one or more \*Vinterface objects\*O, which are data
structures that the application can manipulate.
.LI
Entry
.P
An entry is a unit of information in a directory service.
It consists of a name and associated attributes.
For example, an entry could consist of the name of a printer,
its capabilities, and its network address.
.ML
.LI
Class
.P
In GDS, each entry has a class associated with it.
The class determines what type of entry it is and
what attributes may be associated with it.
.LI
Link
.P
A link is one type of object class.
This type of object is a pointer to another object;
it is similar to a soft link in a UNIX file system.
A CDS link is similar to a GDS alias.
.LE
.LI
Attribute
.P
If an object is like a complex data structure, then its attributes are
analogous to the separate member fields within that structure.
Some of an object's attributes may be of significance only to the directory
service that manages it.
With attributes such as these, a directory service implements objects
that contain various kinds of data about the directory itself, thus enabling
the service to organize the entries
into a meaningful structure.  For example, directory objects can
contain attributes whose values are other directory objects (called
child directories or subdirectories) in the
directory.  Or link objects can contain attributes whose values
are the names and internal identifiers of other directory entries,
making
a link object's entry name an alias of the other object to which its
attributes indirectly refer.
.P
.ML
.LI
.ne 6
Type
.P
Every attribute is characterized as being of a certain
type.
The attribute is used to hold a certain kind of data,
such as
a zip code or the name of a cat.
Entries can also be classified by type; for
entries, the term used is \*Eclass\*O.
.LI
Value
.P
An attribute can have one or more values.
.LE
.LI
Object identifier
.P
Directory attributes are uniquely identified
by object identifiers (OIDs), which are administered
by the International Organization for Standardization (ISO). 
In GDS, OIDs are also used to identify object classes.
When it creates new attribute types, an application is responsible
for tagging them with new, properly allocated OIDs (see your
directory service administrator for OID assignments).
In CDS, attribute types are identified by strings, which can
be representations of OIDs.
.LI
Name
.P
A DCE
name corresponds to an entry in some service participating in
the DCE namespace, usually a directory service.
.ML
.LI
Global name
.P
A global name is a name that contains a path through one of the
global namespaces (GDS or DNS).
.LI
Local name
.P
A local name is a name that uses the cell prefix \*L/.:\*O
to indicate
the cell name and therefore does not have a specific
path through a global namespace.
The entry for a local name is always contained in the local cell.
.LE
.LI
.ne 12
Access control list
.P
Access to DCE namespace entries
is determined by lists of entities that are attached
through the DCE Security Service
to both the entries and the objects when they
are created.  The lists, called access control lists, 
specify the privileges
that an entity or group of entities has for the entry the ACL is
associated with.
The security service provides
servers with authenticated identification of every entity that contacts them;
it is then the server's responsibility to check the ACL attached to
the object that the potential client wants to access, and perform or refuse to
perform the requested operation on the basis of what it finds there.
The ACLs are checked using security service library routines.
.P
Objects in the GDS namespace have ACLs associated with them,
but they are not security service ACLs.
.LI
Replication
.P
The DCE Directory Service can keep replicas (copies) of its data on
different servers.
This means that if one server is unavailable, clients can still obtain
information from another server.
.LI
Caching
.P
Both the CDS and GDS components of the directory service support
caching of data on the client machine.
When a client requests a piece of data from the directory service
for the first time, the information must be obtained over the network
from a server.
However, the data can then be cached (stored) on the local machine,
and subsequent requests for the same data can be satisfied more quickly
by looking
in the local cache instead of sending a request over the network.
Programmers need to be aware of caching because in some cases you will
want to bypass the cache to ensure that the data you obtain is as
up-to-date as possible.
.LE
.H 2 "Structure of DCE Names"
.P
The following subsections
describe the structure of the names found in a DCE
environment.
DCE names can consist of several different parts, which reflect
the federated nature of the DCE namespace.
A DCE name has some combination of the following elements.
They
must occur in this order, but most elements are optional.
.ML
.LI
Prefix
.LI
GDS cell name or DNS cell name
.LI
GDS name or CDS name
.LI
Junction
.LI
Application name
.LE
.P
A DCE name can be represented by a string that
is a readable description of a specific entry
in the DCE namespace.  The name is a string consisting of a series of
elements separated by \*L/\*O (slash).  The elements are read from left to
right.  Each consecutive element adds further specificity to the entry being
described, until finally one arrives at the rightmost element, which is the
simple name of the entry itself.  Thus, in appearance DCE names are
similar to UNIX filenames.
.P
In the discussion that follows, a DCE name \*Velement\*O is the single piece
of a name string enclosed between a consecutive pair of slashes.  For example,
consider the following string:
.iS
/.../C=US/O=OSF/OU=DCE/hosts/abc/self
.iE
.P
In it, the following two substrings are both elements:
.iS
O=OSF

abc
.iE
.P
The entire name contains (counting the \*L...\*O element) a total of
seven elements.
.P
.ne 4
In GDS, an element is called a relative distinguished name (RDN) and the
entire name is called a distinguished name (DN).
In the preceding
example, the attribute type \*LO\*O stands for the
Organization type OID, which is 2.5.4.10.
.H 3 "DCE Name Prefixes"
.P
The leftmost element of any valid DCE name is a root prefix. The
appearance and meaning of each is as follows:
.VL .5i
.LI "\*L/...\*O"
This is the \*Eglobal root\*O.
It signifies that the immediately following elements form the name of a global
namespace entry.
Usually,
the entry's contents consist of binding information for
a DCE cell (more specifically, for some CDS server in the cell), and the
name of the global entry is the name of the cell.
...\" 
.LI "\*L/.:\*O"
This is the \*Ecell root\*O.
It is an alias for the global prefix plus the name of the
local cell; that is, the cell in which the prefix is being used.
It signifies that the immediately following elements taken together form
the name of
a cell namespace entry.
.LI "\*L/:\*O"
This is the \*Efilespace root\*O.
It is an alias for the global prefix, the name of the
local cell, and the DFS junction.
.LE
.P
DCE also supports a junction into the security service namespace, but
there is no alias for this junction.
.P
A prefix by itself is a valid DCE name.
For example, you can list the contents of the \*L/.:\*O directory
to see the top-level entries in the CDS namespace,
and you can use a file system command to list the contents of
the \*L/:\*O directory to see the top-level entries in the filespace.
.H 3 "Names of Cells"
.P
After the global root prefix, the next section of a DCE name contains
the name of
the cell in which the object's name resides.
The name of a cell can be expressed as either a GDS name or a DNS name,
depending on which global directory service (GDS or DNS) the cell is
registered in.
The following subsections provide examples.
.H 4 "GDS Cell Names"
.P
GDS elements always consist of a substring in
which an abbreviation or acronym in capital letters is followed by a
\*L=\*O (equal sign), which is followed by a string value.
As you will learn
in more detail in Chapter 2, these substrings represent pairs
of attribute types and attribute values.
.P
For example, consider the following global DCE name:
.iS
/.../C=DE/O=SNI/OU=DCE/subsys/druecker/docs
.iE
.P
In it, the \*Vattribute\*L=\*Vvalue\*O
form of the leftmost elements after the \*L/...\*O indicates
that the global part of the name is a GDS namespace entry, and that
it ends after the \*LOU=DCE\*O element; therefore, the rest of the name
is in the \*L/.../C=DE/O=SNI/OU=DCE\*O cell.
.H 4 "DNS Cell Names"
.P
If DNS is used as the global directory, a global name has a
form like the following:
.iS
/.../cs.univ.edu/subsys/printers/docs
.iE
.P
where the single element
.iS
cs.univ.edu
.iE
.P
is the cell name; that is, the cell's name in the
DNS namespace.  The DNS name consists of up to four domain names
(depending on the name assigned to the cell), separated by dots.
.H 4 "Discovering Your Local Cell's Name"
.P
A DCE cell consists of the machines that are configured into it; each
DCE machine belongs to one DCE cell.
Your local cell is therefore
the cell to which the machine you are using belongs.
Depending on the DCE name you are using, you can access your own
cell or other (foreign) cells.
If the name you are accessing
is global, then its cell is explicitly named.
If the name begins with the local cell prefix, then
you are accessing a name within your local cell.
You can find out what cell you are in by
calling the \*Ldce_cf_get_cell_name(\|)\*O function.
.P
Using the global directory services, applications can access resources
and services in foreign cells; however, applications most frequently
use resources from their local cell.
If this is not the case, the cell boundaries
may not have been well chosen.
.H 3 "CDS Names"
.P
After the cell name or cell root prefix, the next part of a DCE name
is often a CDS name.
For example, consider the following name:
.iS
/.../C=DE/O=SNI/OU=DCE/subsys/druecker/docs
.iE
.P
The CDS part of this name is
.iS
/subsys/druecker/docs
.iE
.P
Another example is the name
.iS
/.../cs.univ.edu/subsys/printers/docs
.iE
.P
In this name, the CDS part is
.iS
/subsys/printers/docs
.iE
.P
.ne 6
The following strings show equivalent names using the cell root prefix,
assuming that the name is used from within the
\*L/.../C=DE/O=SNI/OU=DCE\*O
and \*L/.../cs.univ.edu\*O cells, respectively:
.iS
/.:/subsys/druecker/docs
/.:/subsys/printers/docs
.iE
.H 3 "GDS Names"
.P
Some names fall entirely in the GDS namespace.
These names are ``pure'' X.500 (and therefore GDS)
names, since each element
consists of a type and an attribute.
The entries for these names are contained in a GDS server.
The following is an example of a pure GDS name:
.iS
/.../C=US/L=Cambridge/CN=Kilroy
.iE
.H 3 "Junctions in DCE Names"
.P
Some junctions are implied in a DCE name; others can be seen.
There is an implied junction between the global prefix and
either GDS or DNS.  It occurs after the global prefix.
The junction between either of the global namespaces and the local
cell namespace is also implied.  It occurs after the cell name.
The junction between the local cell namespace and either the DFS
namespace or the security namespace is shown by the symbol \*L/fs\*O
or \*L/sec\*O, respectively.
The following are examples of visible junctions in DCE names:
.iS
/.:/fs/usr/snowpaws
/.../dce.osf.org/sec/principal/ziggy
.iE
.H 3 "Application Names"
.P
The part of a DCE name that occurs after a junction into a DCE
application is the application name.
DFS and security names are the currently supported examples;
in the future, application programmers may also be able to create
junctions in the namespace.
.P
DFS names occur after the DFS junction.
They are typeless and resemble UNIX file system names.
After the global and CDS parts of a DFS name have been
resolved by the appropriate directory services, the
rest of the DFS name is handled within the DFS.
In the equivalent
examples that follow, \*L/usr/snowpaws\*O is the DFS part of the DCE
name:
.iS
/.../dce.osf.org/fs/usr/snowpaws
/.:/fs/usr/snowpaws
/:/usr/snowpaws
.iE
.P
Security names are similar to DFS names; first the parts of
the name within the DCE Directory Service are resolved, then
the rest of the name is handled by the security service.
The entry is contained in the security registry database.
Consider the following:
.iS
/.:/sec/principal/ziggy
.iE
In this example, the security part of the DCE name is \*L/principal/ziggy\*O.
.H 2 "The Federated DCE Namespace"
.P
The DCE namespace is a single hierarchy of names, but the names
can be contained in many different services.
Because several services cooperate to make the DCE namespace,
it is a federated namespace.
.P
Figure 1-1 shows a typical DCE namespace and the
different services in which names reside.
.P
.ne 3i
.FG "A Federated DCE Namespace"
.so ../directory/overview/pic/federation.pic
.sp .5
.P
The following sections describe the different domains of the DCE namespace.
.H 3 "The GDS Namespace"
.P
This section provides
a brief overview of the main characteristics of the GDS namespace regarded
apart from the XDS interface used to access it.  More detailed information
about GDS and XDS can be found in Part 3 and Part 4, respectively.
.P
In a GDS name such as
.iS
/.../C=US/O=OSF/OU=DCE
.iE
.P
the \*LC=US\*O and \*LO=OSF\*O elements do not refer to directory entries that are
fundamentally different from the one represented by \*LOU=DCE\*O, unlike
in CDS or the UNIX file system.
.P
Thus, in the name string
.iS
/C=US/O=OSF/OU=DCE
.iE
.P
the element \*LC=US\*O refers to a one-level-down Country entry whose value is
\*LUS\*O, then to a two-levels-down Organization entry whose value is
\*LOSF\*O, and then
to a three-levels-down Organization Unit
entry whose value is \*LDCE\*O.  Concatenating
these elements results in a valid path of entries from the directory root to
the \*LDCE\*O
entry.  The entry itself is the namespace sign to a GDS directory object
that contains binding information for the \*L/.../C=US/O=OSF/OU=DCE\*O
cell.
.H 4 "An Example GDS Namespace"
.P
Figure 1-2 shows what a part of the DCE global namespace could look
like.
Levels in the tree of entries are numbered; the global root is at Level 0. The
GDS structure rules as defined for DCE allow only country name entries
at the next level under the root;
organization name and locality name entries can exist at the level below a
country name.
An organizational unit name can be a child of an organizational name entry,
and
a common name can be a child of a locality name.
The details of the GDS rules for the valid types and locations of
entries in the
directory tree can be found in the
\*(Ag.
.P
The object entry \*L/C=US/O=OSF/OU=DCE\*O belongs to the
Organizational Unit class.
One of the object's values is
the CDS server binding information
that is used to reach the cell from other DCE cells.
The entire name is an attribute of the object that
it refers to, as is the CDS server binding information that it contains.
...\" Figure : showing GDS structure schema.
...\"          shows entry vs. object in GDS.
...\"          give some idea of schema.
...\" ------------------------------------
...\" pix/gds_schema.pic
.PP
.FG "GDS Namespace Entries and Directory Objects"
.sp .4
.PS
.in +.4i
scale = 100
"\fR\s9Level 3\s9\fR" ljust at 531, 3
"\fR\s9Level 2\s9\fR" ljust at 531, 63
"\fR\s9Level 1\s9\fR" ljust at 531, 119
"\fR\s9Level 0\s9\fR" ljust at 529, 175
line -> dotted from 515, 175 \
	to 483, 175 
line -> dotted from 519, 3 \
	to 487, 3 
line -> dotted from 519, 63 \
	to 487, 63 
line -> dotted from 517, 119 \
	to 485, 119 
"\fB\s9OU=DCE\s9\fR"  at 323, 7
"\fB\s9OU=Motif\s9\fR"  at 235, 7
"\fB\s9OU=West\s9\fR"  at 113, 7
"\fB\s9OU=Apollo\s9\fR"  at 27, 7
"\fB\s9CN=Kilroy\s9\fR"  at 443, 5
line   from 401, 55 \
	to 441, 15 
line   from 393, 55 \
	to 393, 55 
"\fB\s9L=Cambridge\s9\fR"  at 387, 65
line   from 237, 113 \
	to 385, 73 
line   from 207, 113 \
	to 79, 71 
"\fB\s9C=US\s9\fR"  at 219, 119
line   from 217, 113 \
	to 177, 73 
"\fB\s9/.../\s9\fR" ljust at 155, 179
line   from 225, 113 \
	to 265, 73 
line   from 169, 169 \
	to 209, 129 
line   from 281, 57 \
	to 321, 17 
line   from 273, 57 \
	to 233, 17 
"\fB\s9O=OSF\s9\fR"  at 275, 63
line   from 65, 57 \
	to 25, 17 
line   from 73, 57 \
	to 113, 17 
"\fB\s9O=HP\s9\fR"  at 75, 63
"\fB\s9O=IBM\s9\fR"  at 175, 63
.in -.4i
.PE
.H 4 "The GDS Schema"
.P
The schema defines the shape and format of entries in the GDS directory.
It contains four types of rules, which describe the following:
.ML
.LI
The legal hierarchy of entries.
What entries may be subordinate of other entries.
These rules are what prevents, for example, countries from being
subordinate to states.
.LI
The allowable object classes, the mandatory and optional attributes of
entries, and which attributes are the naming attributes.
.LI
The allowable attribute types, associating a unique OID and an
attribute syntax with each attribute type.
.LI
The syntaxes of attributes that describe what attribute values look like,
such as strings, numbers, or OIDs.
.LE
.P
By installing the proper schema, an entry of any particular object class
can have the two attributes needed to identify a cell.
See the \*(Ag for a full description of how to set
up a cell entry using either GDS or DNS.
.H 3 "The CDS Namespace"
.P
The CDS namespace is the part of the DCE namespace that resides in the
local cell's CDS.
DCE
itself is made up of components that, like the applications that use them,
are distributed client/server applications.
These components rely on the CDS
to make themselves available as services to DCE applications.  This requires
that the structure of the cell namespace be stable, known, and have
parts that are
not alterable by casual users or applications.
.H 4 "The CDS Schema"
.P
The cell namespace's hierarchy model is different from
the GDS model, and the CDS rules do not enforce any particular
model; CDS allows entries
containing any kind of data to be created anywhere in the namespace.
Thus, CDS offers a free-form namespace
in which entries and directories can be organized as desired, and in which
any entry or directory can contain any attributes.  The CDS
administrator
can create additional directories, and applications can add
name entries as needed;
applications \*Ecannot\*O create CDS directory entries.
Because of this, and because the cell namespace is so important to the
operation of the cell, application developers and system administrators
have
more responsibility in planning and regulating their use of it.
.P
The cell namespace has a structure similar to that of a UNIX
file system.  The CDS namespace is a tree of entries that grows from
the root downward.  The name entries are organized under directory entries,
which can themselves be subentries of other directories.  The cell root
(represented by the prefix \*L/.:\*O) can be thought of
as the location you get when you dereference the cell's global name.
New
directories and new entries within the directories can be added anywhere in
the tree, subject to the restrictions mentioned previously.
.H 4 "CDS Entries and CDS Attributes"
.P
There are three different kinds of CDS entries that are of
significance to application programmers, as follows:
.ML
.LI
Object
.LI
Soft link
.LI
Directory
.LE
.P
The object entries are the most primitive form. These are
where data is stored.  Directory entries contain other entries (that
is, can have children) just like UNIX file system directories.  Soft link
entries are essentially alias names for other directory or object entries.
Only object entries can be created by applications; soft links and directories
have to be created and manipulated with the \*Lcdscp\*O command.
.P
Thus,
any CDS entry is defined as a directory, a soft link, or an object entry
by the presence of a certain combination of attributes belonging to that
kind of entry.
You can use the \*Lcdscp\*O command to get a display
of all the attributes of any CDS entry.
.P
The term \*Eattribute\*O as applied to namespace entry objects has roughly
the same meaning in CDS and GDS.
The main difference is that CDS
does not restrict or control the combinations of attributes attached to entries
written in its namespace.
.H 3 "Other Namespaces"
.P
For information about names contained in the DFS namespace (the
filespace) and the security
namespace, refer to the chapters on those components in this guide.
.H 2 "Programming Interfaces to the DCE Directory Service"
.P
The following two subsections describe two programming interfaces for accessing
the DCE Directory Service.
.H 3 "The XDS Interface"
.P
The main programming interface to all services within the directory
service is XDS/XOM, as defined by X/Open.
The calls correspond to the X.500 service requests, including Read, List
(enumerate children), Search, Add Entry, Modify Entry, Modify RDN, and
Remove Entry.
XDS uses XOM to define and manipulate data structures (called
\*Eobjects\*O) used as the parameters to these calls, and used to
describe the directory entries manipulated by the calls.
XOM is extremely flexible, but also somewhat complex.
The interfaces are used in different ways, depending on which underlying
directory service is being addressed.
For example, CDS entries are typeless, but GDS entries are typed.
This difference is reflected in the use of the interface.
.nL
.ne 15
.H 3 "The RPC Name Service Interface"
.P
The DCE remote procedure call (RPC) facility supports an interface to the
directory service that is specific to RPC and is layered on top of
directory service interfaces; it is called
the Name Service Independent (NSI) interface.
NSI can manipulate three object classes: entries, groups, and
profiles, which were created to store RPC binding information.
NSI data is stored in CDS.  Programming using this interface is 
discussed in the \*(Dk and \*(Di volumes.
...\" 
.H 3 "Namespace Junction Interfaces"
.P
For information about programming interfaces to
names that occur in namespace junctions,
see the documentation for that component.
...\" 
...\" 
...\" 
...\" 
