...\" @OSF_COPYRIGHT@
...\" COPYRIGHT NOTICE
...\" Copyright (c) 1990, 1991, 1992, 1993 Open Software Foundation, Inc.
...\" ALL RIGHTS RESERVED (DCE).  See the file named COPYRIGHT.DCE in the
...\" src directory for the full copyright text.
...\" 
...\" HISTORY
...\" $Log: 3_xds_cds.gpsml,v $
...\" Revision 1.1.8.2  1996/09/03  17:20:34  wardr
...\" 	{enh,R1.2.2}
...\" 	Update for sgml conversion
...\" 	[1996/09/03  17:20:23  wardr]
...\"
...\" Revision 1.1.6.9  1995/06/15  16:28:00  rcb
...\" 	edited 1.1 version, PRENTICE HALL reformat
...\" 	[1995/06/13  19:25:06  rcb]
...\" 
...\" 	edited 1.1 version, PRENTICE HALL reformat
...\" 	[1995/06/05  16:19:10  rcb]
...\" 
...\" Revision 1.1.6.8  1994/11/15  20:47:47  neilson
...\" 	Converted book title references to macro form.
...\" 	[1994/11/15  18:57:50  neilson]
...\" 
...\" Revision 1.1.6.7  1994/11/03  23:32:52  neilson
...\" 	Substituted macros for book names in cross refs.
...\" 	[1994/11/03  01:38:35  neilson]
...\" 
...\" 	Substituted macros for book names in cross refs.
...\" 
...\" Revision 1.1.6.6  1994/10/20  14:52:08  weir
...\" 	Corrected some cross-references
...\" 	[1994/10/20  14:51:38  weir]
...\" 
...\" Revision 1.1.6.5  1994/10/18  20:54:55  weir
...\" 	{def,10340,R1.1}
...\" 	Corrected various OM-to-CDS table entries
...\" 	[1994/10/18  20:54:20  weir]
...\" 
...\" Revision 1.1.6.4  1993/02/23  02:27:40  lipsky
...\" 	Changes made: Added syntax mapping table
...\" 	File name:  src/app_gd/directory/xds_cds/3_xds_cds
...\" 	CR: 7200
...\" 	[1993/02/23  02:25:35  lipsky]
...\" 
...\" Revision 1.1.6.3  1993/01/28  18:40:19  cjd
...\" 	Embedded copyright notice
...\" 	[1993/01/28  17:59:36  cjd]
...\" 
...\" Revision 1.1.6.2  1992/11/20  15:24:16  weir
...\" 	Moved into 1.0.2doc tree
...\" 	[1992/11/20  15:21:06  weir]
...\" 
...\" Revision 1.1.4.5  1992/11/11  23:45:40  buckler
...\" 	Corrected index entries
...\" 	[1992/11/11  22:49:04  buckler]
...\" 
...\" Revision 1.1.4.4  1992/10/27  20:59:08  lmk
...\" 	Prentice-Hall edits only
...\" 	[1992/10/27  20:56:42  lmk]
...\" 
...\" Revision 1.1.4.3  1992/10/14  15:11:42  steiner
...\" 	Second P-H edit pass, from Eddie.
...\" 	[1992/10/14  15:11:11  steiner]
...\" 
...\" Revision 1.1.4.2  1992/09/09  15:40:34  steiner
...\" 	First editing pass.
...\" 	[1992/09/08  21:37:58  steiner]
...\" 
...\" Revision 1.1.2.8  1992/08/05  20:42:39  weir
...\" 	Fixed typeless RDNs (for real this time).
...\" 	[1992/08/05  20:42:06  weir]
...\" 
...\" Revision 1.1.2.7  1992/07/23  19:30:19  weir
...\" 	Fixed typeless RDN.
...\" 	[1992/07/23  19:29:33  weir]
...\" 
...\" Revision 1.1.2.6  1992/07/21  15:38:01  weir
...\" 	Small fix to example code.
...\" 	[1992/07/21  15:37:21  weir]
...\" 
...\" Revision 1.1.2.5  1992/07/21  14:23:20  weir
...\" 	Last cleanup.
...\" 	[1992/07/21  14:22:39  weir]
...\" 
...\" Revision 1.1.2.4  1992/07/20  20:04:13  weir
...\" 	Adjusted part of the example code.
...\" 	[1992/07/20  20:03:29  weir]
...\" 
...\" Revision 1.1.2.3  1992/07/09  20:39:09  weir
...\" 	Revised version.
...\" 	[1992/07/09  20:38:39  weir]
...\" 
...\" Revision 1.1.2.2  1992/05/08  19:52:02  weir
...\" 	bogus submit
...\" 
...\" 	 Revision 1.1.1.5  1992/05/08  19:46:15  weir
...\" 	xxx
...\" 
...\" 	 Revision 1.1.1.4  1992/05/08  19:25:41  weir
...\" 	xxx
...\" 
...\" 	 Revision 1.1.1.3  1992/05/08  19:18:34  weir
...\" 	bogus submit
...\" 
...\" 	 Revision 1.1.1.2  1992/05/08  19:16:59  weir
...\" 	bogus submit
...\" 	[1992/05/08  19:51:06  weir]
...\" 
...\" $EndLog$
.H 1 "XDS and the DCE Cell Namespace"
.P
This chapter describes the use of the XDS programming interface
when accessing the CDS namespace.
The first section provides an introduction to using XDS in the CDS
namespace.
Section 3.2 describes XDS objects and how they are used to access CDS
data.
Section 3.3 provides a step-by-step procedure for writing an XDS program
to access CDS.
Section 3.4 provides examples of using the XOM interface to manipulate
objects.
Section 3.5 provides details of the structure of XDS/CDS objects.
Finally, Section 3.6 provides translation tables between XDS and CDS
for attributes and data types.
.H 2 "Introduction to Accessing CDS with XDS"
.P
Outside of the DCE cells and their separate namespaces is the
global namespace
in which the cell names themselves are entered, and where all intercell
references are resolved.
Two directory services participate in the global namespace.
The first is the X.500-compliant GDS
supplied with DCE.
The second is DNS, with which DCE interacts,
but is not a part of DCE.
.P
The global and cell directory services are accessed implicitly by RPC
applications using the NSI interface.
GDS and CDS can also be accessed explicitly using
the XDS interface.
With XDS, application programmers can
gain access to GDS,
a powerful general-purpose distributed database service,
which can be used for many other things besides intercell binding.
XDS can also be used to access the \*Vcell\*O namespace directly,
as this chapter describes.
.P
An XDS application looks very different from the
RPC-based DCE applications.
This is partly because there is no dependency in XDS on the
DCE RPC interface, although you can use both interfaces in the same
application.
Also, XDS is a
generalized directory interface, oriented more toward performing large
database operations than toward fine-tuning the contents of RPC entries.
Nevertheless, XDS can be used as a general access mechanism on the
CDS namespace.
.H 3 "Using the Reference Material in This Chapter"
.P
Complete descriptions of all the XDS and XOM functions used in CDS operations
can be found in the the \*(Dr, which you should have beside you 
as you read through the examples in this chapter.
In particular, refer to that manual for information
about XDS error objects, which are not discussed in this chapter. 
.P
Complete descriptions for all objects required as \*Vinput\*O parameters by
XDS functions when accessing a CDS namespace can be found in Section
3.5.
Abbreviated
definitions for these same objects can be found with all the others in
Part 4.  XOM functions are
general-purpose utility routines that operate on objects of any class, and
take the rest of their input in conventional form.
.P
Slightly less detailed descriptions of the \*Voutput\*O objects you can
expect to receive when accessing CDS through XDS are also given in
Section 3.5. You do not have to construct objects of
these classes yourself; you just have to know their general structure so
that you can disassemble them using XOM routines.
.P
.ne 5
No information is given in this chapter about the \*LDS_status\*O error
objects that are returned by unsuccessful XDS functions; a description of
all the subclasses of \*LDS_status\*O requires a chapter in itself.  Code
for a rudimentary general-purpose \*LDS_status\*O-handling routine can be
found in the \*Lteldir.c\*O XDS sample program in Chapter 7 of this
guide.
.H 3 "What You Cannot Do with XDS"
.P
XDS allows you to perform general operations on CDS entry attributes,
something which you cannot do through the DCE RPC NSI interface.
However, there are certain things you cannot do to cell directory
entries even through XDS:
.ML
.LI
You cannot create or modify directory entries; the
\*Lds_modify_rdn(\|)\*O function does not work in a CDS namespace.  These
operations must be performed through the CDS control program (\*Lcdscp\*O).  
For more information, see the \*(Ar.
.LI
You cannot perform XDS searches on the cell namespace; the XDS function
\*Lds_search(\|)\*O does not work.  This is mainly because the CDS has no
concept of a hierarchy of entry attributes, such as the X.500 schema.
The \*Lds_compare(\|)\*O function, however, does work.
.LE
.H 3 "Registering A Nonlocal Cell"
.P
If you are planning to use XDS to access the cell namespace in a one-cell
environment (that is, your cell does not need to communicate
with other DCE cells), you do not need to set up a cell entry in
GDS for your cell because the XDS functions
simply call the appropriate statically linked CDS routines to access the
cell namespace.  In these circumstances, XDS always tries to access the
local cell
when given an untyped (non-X.500) name.
.P
For XDS to be able to access any nonlocal cell namespace, that cell must
be registered (that is, have an entry) in the global namespace.
.P
For information on setting up your cell name, see the \*(Ag.
.H 2 "XDS Objects"
.P
The XDS interface differs
from the other DCE component interfaces in that it is \*Eobject oriented\*O.
The following subsections explain two things: first,
what object-oriented
programming means in terms of using XDS; and second, how to use XDS to
access CDS.
.P
Imagine a generalized data structure that always has
the same data \*Vtype\*O,
and yet can contain any kind of data, and any amount of it.  Functions
could pass these structures back and forth in the same way all the time, and
yet they could use the same structures for any kind of data they wanted to
store or transfer.  Such a data structure, if it existed, would be a true
\*Vobject\*O.  Programming language constructs allow interfaces to pretend
that they use objects, although the realities of implementation are not
usually so simple.
.P
XDS is such an interface. For the most part, XDS functions neither accept
nor return values in any form but as objects.  The objects themselves are
indeed always the same data type; namely, pointers to arrays of \*Vobject
descriptor\*O (C \*Lstruct\*O) elements.
Contained within these \*LOM_descriptor\*O
element structures are unions that can actually accommodate all the different
kinds of values an object can be called on to hold.  In order to allow the
interface to make sense of the unions, each \*LOM_descriptor\*O also contains 
a \*Lsyntax\*O field, which indicates the data type of that descriptor's
union.
There is also a record of what the descriptor's value
actually is; for example, whether it is a name, a number, an address,
a list, and so on.  This information is held in the descriptor's \*Ltype\*O field.
.P
These \*LOM_descriptor\*O elements, which are referred to
as \*Eobject descriptors\*O or \*Edescriptors\*O, are the basic building blocks
of \*Eall\*O XDS objects; every actual XDS object reduces to arrays of them.
Each descriptor contains three items:
.ML
.LI
A \*Ltype\*O field, which identifies the descriptor's value
.LI
A \*Lsyntax\*O field, which indicates the data type of the \*Lvalue\*O
field
.LI
The \*Lvalue\*O field, which is a union
.LE
.P
Figure 3-1 illustrates one such object descriptor.
...\" Figure obj1: Figure of one descriptor.
...\" pix/obj1.pic
.P
.ne 1.5i
.FG "One Object Descriptor"
.sp .5
.PS
scale = 1.5
"\fR\s8type:OM_CLASS\s0\fP" ljust at 3.958i,7.417i;
"\fR\s8syntax:OID string\s0\fP" ljust at 3.958i,7.125i;
"\fR\s8value:DS_C_DS_DN\s0\fP" ljust at 3.958i,6.833i;
.ps 12
box at 4.906i,7.125i wid 2.000i ht 1.083i;
.PE
.sp .5
.P
Note that, from an abstract point of view, \*Lsyntax\*O is just an implementation
detail.  The scheme really consists only of a type/value pair.
The \*Ltype\*O gives
an identity to the object (something like CDS entry attribute, CDS entry name,
or DUA access point), and the \*Lvalue\*O is some data associated with that
identity, just as a variable has a name that gives meaning to the value it
holds, and the value itself.
.P
In order to make the representation of objects as logical and as flexible as
possible, these two logical components of every object, \*Ltype\*O and
\*Lvalue\*O, are themselves each represented by separate object descriptors.
Thus, the first element of every complete object descriptor array is
a descriptor whose \*Ltype\*O field identifies its \*Lvalue\*O field as
containing the name of the kind (or \*Vclass\*O) of this object,
and the \*Lsyntax\*O field indicates how that name \*Lvalue\*O should be
read.  Next is usually one (or more, if the object is
multivalued) object descriptor whose \*Ltype\*O field identifies its
\*Lvalue\*O field as containing some value appropriate for this class of
object.
Finally, every complete object descriptor array ends with a descriptor element
that is identified by its fields as being a NULL-terminating element.
.P
Thus, a
minimum-size descriptor array consists of just two elements: the
first contains its class identity, and the second is a NULL
(it is legitimate
for objects not to have values).  When an object does have a value, it
is held in the \*Lvalue\*O field of a descriptor whose \*Ltype\*O field
communicates the value's meaning.
.P
Figure 3-2 illustrates the arrangement of a complete
object descriptor array.
...\" Figure obj2: Figure of a full object descriptor array: three elements.
...\" pix/obj2.pic
.P
.FG "A Complete Object Represented"
.sp .5
.PS
.in +.5i
scale = 1.5
"\fR\s8type:OM_CLASS\s0\fP" ljust at 0.469i,7.417i;
"\fR\s8syntax:OID string\s0\fP" ljust at 0.469i,7.125i;
"\fR\s8value:DS_C_DS_DN\s0\fP" ljust at 0.469i,6.833i;
.ps 12
box at 1.417i,7.125i wid 2.000i ht 1.083i;
box at 3.667i,7.125i same;
box at 5.917i,7.125i same;
"\fR\s8type:DS_RDNS\s0\fP" ljust at 2.750i,7.417i;
"\fR\s8syntax:OM_S_OBJECT\s0\fP" ljust at 2.708i,7.125i;
"\fR\s8value:rdn1\s0\fP" ljust at 2.750i,6.833i;
"\fR\s8NULL\s0\fP" at 5.917i,7.125i;
.in -.5i
.PE
.H 3 "Object Attributes"
.P
The generic term for any object value is \*Vattribute\*O. In this sense, an
object is nothing but a collection of attributes, and every object descriptor
describes one attribute.  The first attribute's value
identifies the object's class, and this determines all the other
attributes the object is supposed to have.
One or more other attributes follow,
which contain the object's working values.
The NULL
object descriptor at the
end is an implementation detail, and is not a part of the object.
.P
Note that, depending on the
attribute it represents, a descriptor's
\*Lvalue\*O field can contain a pointer to another array of object descriptors.
In other words, an object's value can be
another object.
.P
Figure 3-3 shows a three-layer compound object: the top-level
superobject, \*Ldn_object\*O, contains the subobject \*Lrdn1\*O, which in
turn contains the subobject \*Lava1\*O.
...\" Figure obj3: Figure of representation of a two-layer object.
...\" pix/obj3.pic
.FG "A Three-Layer Compound Object"
.sp .5
.PS
.in +.4i
scale = 1.5
"\fR\s8type:OM_CLASS\s0\fP" ljust at 0.469i,7.417i;
"\fR\s8syntax:OID string\s0\fP" ljust at 0.469i,7.125i;
"\fR\s8value:DS_C_DS_DN\s0\fP" ljust at 0.469i,6.833i;
.ps 12
box at 1.417i,7.125i wid 2.000i ht 1.083i;
box at 3.667i,7.125i same;
box at 5.917i,7.125i same;
"\fR\s8type:DS_RDNS\s0\fP" ljust at 2.750i,7.417i;
"\fR\s8syntax:OM_S_OBJECT\s0\fP" ljust at 2.708i,7.125i;
"\fR\s8value:rdn1\s0\fP" ljust at 2.750i,6.833i;
"\fB\s8NULL\s0\fP" at 5.917i,7.125i;
"\fR\s8type:OM_CLASS\s0\fP" ljust at 0.469i,5.917i;
"\fR\s8syntax:OID string\s0\fP" ljust at 0.469i,5.625i;
box at 1.417i,5.625i same;
box at 3.667i,5.625i same;
box at 5.917i,5.625i same;
"\fR\s8syntax:OM_S_OBJECT\s0\fP" ljust at 2.708i,5.625i;
"\fB\s8NULL\s0\fP" at 5.917i,5.625i;
"\fR\s8dn_object\s0\fP" ljust at 0.458i,6.458i;
"\fR\s8rdn1\s0\fP" ljust at 0.500i,4.917i;
"\fR\s8value:DS_C_DS_RDN\s0\fP" ljust at 0.458i,5.333i;
"\fR\s8type:DS_AVAS\s0\fP" ljust at 2.750i,5.917i;
"\fR\s8value:ava1\s0\fP" ljust at 2.750i,5.333i;
"\fR\s8type:OM_CLASS\s0\fP" ljust at 0.469i,4.333i;
"\fR\s8syntax:OID string\s0\fP" ljust at 0.469i,4.042i;
box at 1.417i,4.042i same;
box at 3.667i,4.042i same;
box at 5.917i,4.042i same;
box at 8.167i,4.042i same;
"\fB\s8NULL\s0\fP" at 8.167i,4.042i;
"\fR\s8ava1\s0\fP" ljust at 0.500i,3.333i;
"\fR\s8value:DS_C_AVA\s0\fP" ljust at 0.490i,3.750i;
"\fR\s8type:DS_ATTRIBUTE_\s0\fP" ljust at 2.750i,4.333i;
"\fR\s8TYPE\s0\fP" ljust at 3.667i,4.167i;
"\fR\s8syntax:OID string\s0\fP" ljust at 2.750i,4.000i;
"\fR\s8value:DSX_TYPELESS_\s0\fP" ljust at 2.740i,3.792i;
"\fR\s8RDN\s0\fP" ljust at 3.656i,3.625i;
"\fR\s8type:DS_ATTRIBUTE_\s0\fP" ljust at 5.000i,4.333i;
"\fR\s8VALUES\s0\fP" ljust at 5.958i,4.167i;
"\fR\s8syntax:OM_S_TELETEX_\s0\fP" ljust at 5.000i,4.000i;
"\fR\s8STRING\s0\fP" ljust at 6.000i,3.833i;
"\fR\s8value:\"huh\"\s0\fP" ljust at 5.000i,3.667i;
line -> from 3.615i,6.740i to 1.417i,6.167i;
line -> from 3.615i,5.250i to 1.417i,4.583i;
.in +.4i
.PE
.H 3 "Interface Objects and Directory Objects"
.P
GDS is comprised of objects; these are directory objects, and reflect
the X.500 design.
The XDS interface also works with objects.
However, there is a big difference between
directory and XDS objects.
Programmers do not work directly with
the directory objects; they are composed of attributes
that make up the directory service's implementation of entries.
.P
Programmers work with XDS objects. XDS objects have explicit data
representations that can be directly manipulated
with programming language operators.  Some of these techniques
are described in this chapter; others can be found in Chapter 7.
.P
XDS and GDS terminology sometimes suggests that XDS objects are somehow
direct representations of the directory objects to which they communicate
information.  This is not the case, however.  You never directly
see or manipulate the directory objects; the XDS interface objects
are used only to pass parameters to the XDS calls, which in turn request
GDS (or CDS) to perform operations on the directory objects.
The XDS objects are therefore somewhat arbitrary structures defined
by the interface.
.P
Figure 3-4 illustrates the relationship between XDS (also
called \*Einterface\*O)
objects and directory objects.
The figure shows an application passing several properly initialized XDS
objects to some XDS function; it then takes some action, which affects
the attribute contents of certain directory objects.  The application never
works with the directory objects; it works with the
XDS interface objects.
.P
A side effect of the existence of a separate XDS interface and GDS or CDS
directory objects is the existence of attributes for both kinds of
objects as well.  Because the purpose of XDS objects is to feed data into and
extract data from directory objects, programmers work
with XDS objects whose attributes have \*Vdirectory\*O object
attributes as their values.
You should keep in mind the
distinction between directory objects and interface
objects.
...\" Figure : Showing different kinds of object...
...\" newpix/xds_obj.pic
.P
.ne 7i
.FG "Directory Objects and XDS Interface Objects"
.sp .5
.PS
.in +.3i
scale = 100
spline ->  from 144, 191 \
	to 148, 267 \
	to 444, 343 \
	to 150, 491 
line ->  from 302, 145 \
	to 214, 145 
"\fR\s9attribute\s9\fR" ljust at 482, 93
"\fR\s9attribute\s9\fR" ljust at 482, 145
"\fR\s9attribute\s9\fR" ljust at 480, 197
"\fR\s9XDS function\s9\fR"  at 118, 85
"\fB\s9ds_modify_entry()\s9\fR"  at 130, 149
line   from 68, 185 \
	to 230, 185 \
	to 190, 105 \
	to 28, 105 \
	to 68, 185 
"\fR\s9Postal Code\s9\fR"  at 106, 501
"\fR\s9XDS Object\s9\fR"  at 394, 3
"\fR\s9\"77 Sunset Strip\"\s9\fR"  at 396, 77
"\fR\s9=\s9\fR"  at 390, 91
"\fR\s9Attribute Value\s9\fR"  at 392, 107
"\fR\s9DS_A_POSTAL_CODE\s9\fR"  at 392, 131
"\fR\s9=\s9\fR"  at 390, 143
line  dotted from 312, 121 \
	to 472, 121 
"\fR\s9Attribute Type\s9\fR"  at 392, 157
"\fR\s9Entry Modification\s9\fR"  at 390, 181
"\fR\s9=\s9\fR"  at 390, 197
"\fR\s9Object Class attribute\s9\fR"  at 394, 213
line  dotted from 310, 65 \
	to 470, 65 
line  dotted from 310, 169 \
	to 472, 169 
box  wid 160 ht 200 at 390, 125
"\fR\s9GDS Directory Objects\s9\fR"  at 110, 649
"\fR\s9DN attribute\s9\fR"  at 106, 597
line  dotted from 2, 633 \
	to 24, 609 
line  dotted from 208, 385 \
	to 272, 321 
line  dotted from 0, 385 \
	to 64, 321 
line  dotted from 210, 633 \
	to 272, 569 
line  dotted from 64, 377 \
	to 64, 321 
line  dotted from 216, 569 \
	to 272, 569 
line  dotted from 272, 567 \
	to 272, 319 
box dotted wid 208 ht 248 at 104, 509
line  dotted from 66, 321 \
	to 274, 321 
line   from 232, 545 \
	to 248, 545 \
	to 248, 345 \
	to 96, 345 \
	to 96, 361 
line   from 216, 561 \
	to 232, 561 \
	to 232, 361 \
	to 80, 361 \
	to 80, 377 
line   from 200, 577 \
	to 216, 577 \
	to 216, 377 \
	to 58, 377 \
	to 58, 393 
line   from 184, 593 \
	to 200, 593 \
	to 200, 393 \
	to 40, 393 \
	to 40, 409 
line  dotted from 24, 441 \
	to 184, 441 
box  wid 160 ht 200 at 104, 509
"\fR\s9attribute\s9\fR"  at 104, 573
box dotted wid 160 ht 0 at 104, 585
"\fR\s9attribute\s9\fR"  at 104, 549
box dotted wid 160 ht 0 at 104, 561
"\fR\s9attribute\s9\fR"  at 104, 525
line  dotted from 24, 537 \
	to 184, 537 
"\fR\s9attribute\s9\fR"  at 102, 487
line  dotted from 24, 513 \
	to 184, 513 
"\fR\s9attribute\s9\fR"  at 102, 451
"\fR\s9attribute\s9\fR"  at 102, 425
line  dotted from 24, 459 \
	to 184, 459 
.in -.3i
.PE
.H 3 "Directory Objects and Namespace Entries"
.P
The GDS namespace is a hierarchical collection of entries. The name of
each of these entries is an attribute of a directory object.
The object is accessed through XDS by stating its name attribute.
.P
Figure 3-5 shows the relationship of entry names in the GDS
namespace to the GDS directory objects to which they refer. 
.P
...\" Figure : showing relationship of objects to entries.
...\"          shows same as above, PLUS cell-binding info, AND
...\"              specific paths.
...\" pix/gds_objects.pic
.FG "Directory Objects and Namespace Entries"
.sp .5
.PS
.in +.5i
scale = 110
"\fR\s9Object Entries\s9\fR"  at 132, 356
"\fR\s9GDS Directory Objects\s9\fR"  at 388, 330
spline   from 302, 276 \
	to 222, 276 \
	to 266, 354 \
	to 412, 372 \
	to 450, 532 \
	to 260, 540 
"\fR\s9DN attribute\s9\fR"  at 384, 278
"\fR\s9GDS Namespace\s9\fR"  at 134, 614
line  dotted from 280, 314 \
	to 302, 290 
line  dotted from 486, 66 \
	to 550, 2 
line  dotted from 278, 66 \
	to 342, 2 
line  dotted from 488, 314 \
	to 550, 250 
line  dotted from 342, 58 \
	to 342, 2 
line  dotted from 494, 250 \
	to 550, 250 
line  dotted from 550, 248 \
	to 550, 0 
box dotted wid 208 ht 248 at 382, 190
line  dotted from 344, 2 \
	to 552, 2 
line   from 510, 226 \
	to 526, 226 \
	to 526, 26 \
	to 374, 26 \
	to 374, 42 
line   from 494, 242 \
	to 510, 242 \
	to 510, 42 \
	to 358, 42 \
	to 358, 58 
line   from 478, 258 \
	to 494, 258 \
	to 494, 58 \
	to 336, 58 \
	to 336, 74 
line   from 462, 274 \
	to 478, 274 \
	to 478, 74 \
	to 318, 74 \
	to 318, 90 
line  dotted from 302, 122 \
	to 462, 122 
box  wid 160 ht 200 at 382, 190
"\fB\s9/.../C=US/O=OSF/OU=DCE\s9\fR"  at 125, 580
box  wid 242 ht 24 at 139, 582
"\fB\s9/.../C=US/L=Cambridge/CN=Killroy\s9\fR" ljust at 24, 542
box  wid 242 ht 24 at 139, 542
box  wid 242 ht 24 at 139, 502
box  wid 242 ht 24 at 139, 462
box  wid 242 ht 24 at 139, 424
box dotted wid 282 ht 248 at 141, 502
"\fR\s9attribute\s9\fR"  at 382, 254
box dotted wid 160 ht 0 at 382, 266
"\fR\s9attribute\s9\fR"  at 382, 230
box dotted wid 160 ht 0 at 382, 242
"\fR\s9attribute\s9\fR"  at 382, 206
line  dotted from 302, 218 \
	to 462, 218 
"\fR\s9attribute\s9\fR"  at 380, 168
line  dotted from 302, 194 \
	to 462, 194 
"\fR\s9attribute\s9\fR"  at 380, 132
"\fR\s9attribute\s9\fR"  at 380, 106
line  dotted from 302, 140 \
	to 462, 140 
.in -.5i
.PE
.H 3 "Values That an Object Can Contain"
.P
There are many different classes of objects defined for the XDS interface;
still more are defined by the X.500 standard for general directory use.  But
only a small number of classes are needed for XDS/CDS operations, and only
those classes are discussed in this chapter.  Information about other
classes can be found in Part 4 of this guide.
.P
The class that an object belongs to determines what sort of information
the object can contain.  Each object class consists of a list of attributes
that objects must have.  For example, you would expect an object in the
directory entry name class to be required to have an attribute to hold
the entry name string.  However, it is not sufficient to simply place a
string like the following into an object descriptor:
.iS
/.../C=US/O=OSF/OU=DCE/hosts/tamburlaine/self
.iE
.P
A full directory entry name such as the preceding
one is called in XDS a distinguished name (DN),
meaning that the entry name is fully qualified
(distinct) from root to entry name.  To properly represent the entry name
in an object, you must look up the definition of the XDS distinguished
name object class and build an object that has the set of attributes that
the definition prescribes.
.H 3 "Building a Name Object"
.P
Complete definitions for all the object classes required as input for XDS
functions can be found in Section 3.5.  Among them is the class for
distinguished name objects, called \*LDS_C_DS_DN\*O.
There you will learn that this class
of object has two attributes: its class attribute,
which identifies it as a \*LDS_C_DS_DN\*O object, and a second
attribute, which occurs multiple times in the object.
Each instance of this attribute contains as its value one
piece of the full name; for example, the
directory name \*Lhosts\*O.
.P
.ne 4
The \*LDS_C_DS_DN\*O attribute
that holds the entry name piece, or relative distinguished name (RDN),
is defined by the class rules to hold, not a string, but
another object of the RDN class (\*LDS_C_DS_RDN\*O).
.P
.ne 12
Thus, a static declaration of the descriptor array representing the \*LDS_C_DS_DN\*O
object would look like the following:
.oS
static OM_descriptor    Full_Entry_Name_Object[] = {

     OM_OID_DESC(OM_CLASS, DS_C_DS_DN),
/*   ^^^^^^^^^^^                                         */
/*   Macro to put an "OID string" in a descrip-          */
/*     tor's type field and fill its other               */
/*     fields with appropriate values.                   */

     {DS_RDNS, OM_S_OBJECT, {0, Country_RDN}},
/*    ^^^^^^^  ^^^^^^^^^^^      ^^^^^^^^^^^              */
/*     type      syntax            value                 */
/*                                                       */
/*     (the "value" union is in fact here a              */
/*      structure; the 0 fills a pad field in            */
/*      that structure.)                                 */
 
     {DS_RDNS, OM_S_OBJECT, {0, Organization_RDN}},
     {DS_RDNS, OM_S_OBJECT, {0, Org_Unit_RDN}},
     {DS_RDNS, OM_S_OBJECT, {0, Hosts_Dir_RDN}},
     {DS_RDNS, OM_S_OBJECT, {0, Tamburlaine_Dir_RDN}},
     {DS_RDNS, OM_S_OBJECT, {0, Self_Entry_RDN}},

     OM_NULL_DESCRIPTOR
/*   ^^^^^^^^^^^^^^^^^^                                  */
/*    Macro to fill a descriptor with proper             */
/*      NULL values.                                     */

};
.oE
.P
The use of the \*LOM_OID_DESC\*O and \*LOM_NULL_DESCRIPTOR\*O macros
slightly obscures the layout of this declaration.  However, each line
contains code to initialize exactly one \*LOM_descriptor\*O object;
the array consists of eight objects.
.P
.ne 5
The names (such as \*LCountry_RDN\*O) in the descriptors' \*Lvalue\*O
fields refer to the other descriptor arrays, which separately
represent the relative name objects.
(The order of the C
declaration in the source file is opposite to the order
described here.) Since \*LDS_C_DS_RDN\*O objects are now
called for, the next step is to look at what attributes that class
requires.
.P
The definition for \*LDS_C_DS_RDN\*O can be found in Section
3.5.2.6.
This class object is
defined, like \*LDS_C_DS_DN\*O, to have only one attribute (with
the exception of the
\*LOM_Object\*O attribute, which is mandatory for all objects).
The one attribute, \*LDS_AVAS\*O, holds the value
of one relative name.
The syntax of this value
is \*LOM_S_OBJECT\*O, meaning that \*LDS_AVAS\*O's value is
a pointer to yet another object descriptor array:
.oS
static OM_descriptor    Country_RDN[] = {
 
     OM_OID_DESC(OM_CLASS, DS_C_DS_RDN),

     {DS_AVAS, OM_S_OBJECT, {0, Country_Value}},
 
     OM_NULL_DESCRIPTOR
};
.oE
.P
Note that there should also be five other similar declarations, one
for each of the other \*LDS_C_DS_RDN\*O objects held in the \*LDS_C_DS_DN\*O.
.P
The declarations have the same meanings as they did in the previous
example. \*LCountry_Value\*O is the name of the descriptor array that
represents the object of class \*LDS_C_AVA\*O, which we are now about
to look up.
.P
The rules for the \*LDS_C_AVA\*O class can be found in this chapter just
after \*LDS_C_DS_RDN\*O.  They tell us that \*LDS_C_AVA\*O objects have
two attributes aside from the omnipresent \*LOM_Object\*O; namely:
.ML
.LI
\*LDS_ATTRIBUTE_VALUES\*O
.P
This attribute holds the object's value.
.LI
\*LDS_ATTRIBUTE_TYPE\*O
.P
This attribute gives the meaning of the object's value.
.LE
.P
.ne 6
In this instance, the meaning of the string \*LUS\*O is that it is a country
name.  There is a particular directory service attribute value for this;
it is identified by an OID that is associated with the label
\*LDS_A_COUNTRY_NAME\*O (the OIDs held in objects are represented in
string form).
Accordingly, we make that OID the value of \*LDS_ATTRIBUTE_TYPE\*O,
and we make the name string itself the value of \*LDS_ATTRIBUTE_VALUES\*O:
.ps 11
.vs 13
.oS
static OM_descriptor    Country_Value[] = {

    OM_OID_DESC(OM_CLASS, DS_C_AVA),

    OM_OID_DESC(DS_ATTRIBUTE_TYPE, DS_A_COUNTRY_NAME),

    {DS_ATTRIBUTE_VALUES, OM_S_PRINTABLE_STRING, OM_STRING("US")},
/*                                               ^^^^^^^^^^^^^^^  */
/*                                              Macro to properly */
/*        fill the "value" union with the NULL-terminated string. */

     OM_NULL_DESCRIPTOR
};
.oE
.ps 12
.vs 14
.P
There are also five other \*LDS_C_AVA\*O declarations, one
for each of the
five other separate name piece objects referred to in the \*LDS_C_DS_RDN\*O
superobjects.
.H 3 "A Complete Object"
.P
The previous sections described how an object is created:
you look up the rules for
the object class you require, and then add the attributes called for
in the definition.  Whenever some attribute is defined to have an object
as its value, you have to look up the class rules for the new object
and declare a further descriptor array for it.  In this way you continue
working down through layers of subobjects until you reach an object class that
contains no subobjects as values; at that point, you are finished.
...\" Objects are built or planned top-down, although if declared
...\"  they are declared bottom-up.
.P
Normally,
you do not statically declare objects in
real applications.  The steps outlined
in the preceding text
are given as a method for determining what an object
looks like.  Once you have done that, you can then write routines to create
the objects dynamically.  An example of how to do this can be found in the
\*Lteldir.c\*O example application in Chapter 7 of this guide.
.P
.ne 6
The process of object building is somewhat easier than it sounds. There are
only five different object classes needed for input to XDS functions
when accessing CDS, and only one of those, the \*LDS_C_DS_DN\*O class,
has more than one level of subobjects.  The rules for all five of these
classes can be found in Part 4 of this guide.
In order to use the GDS references, you should
know a few things about class hierarchy.
.H 3 "Class Hierarchy"
.P
Object classes are hierarchically organized so that some classes may be located
above some classes in the hierarchy and below others in the hierarchy.
In any such system of subordinate
classes, each next lower class inherits all the attributes prescribed for the
class immediately above it, plus whatever attributes are defined peculiarly for
it alone.  If the hierarchy continues further down, cumulative collection of
attributes continues to accumulate.  If there were a class for every letter of
the alphabet, starting at the highest level with A and continuing down to
the lowest level with Z, and if each succeeding letter was a subclass of its
predecessor, the Z class would possess all the attributes of all the other
letters, as well as its own, while the A class would possess only the A
class attributes.
.P
XDS/XOM classes are seldom nested more than two or at most three layers.
All inherited attributes are explicitly listed in the object
descriptions that follow,
so you do not have to worry about class hierarchies here.  However, the complete
descriptions of XDS/XOM objects in Part 4 of this guide rely on
statements of class inheritance to fill out their attribute lists for the
different classes.  Refer to Part 4
for information about
the classes of objects that can be returned by XDS calls in order to be
able to handle those returned objects.
.H 3 "Class Hierarchy and Object Structure"
.P
Note that \*Vclass hierarchy\*O is different from
\*Vobject structure\*O.  Object structure is the layering of object arrays that
was previously described in the \*LDS_C_DS_DN\*O declaration in Section
3.2.5. It
occurs when one object contains another object as the value of one or
more of its attributes.
.P
This is what is meant by recursive objects: one object
can point to another object as one of its attribute values.
The layering of subobjects
below superobjects in this way is described repeatedly in Section
3.5.
.P
The only practical significance of class hierarchy is
in determining all the attributes a certain object class must have.  Once
you have done this, you may find that a certain attribute requires as its
value some other object.  The result is a compound object,
but this is completely determined by the attributes for
the particular class you are looking at.
.H 3 "Public and Private Objects and XOM"
.P
In Section 3.2.5, you saw how a multilevel
XDS object can be statically declared in C code.  Now imagine that you have
written an application that contains such a static \*LDS_C_DS_DN\*O object
declaration.  From the point of view of your application, that object is
nothing but a series of arrays, and you can manipulate them with all the
normal programming operators, just as you can any other data type.
Nevertheless, the object is syntactically perfectly acceptable to any XDS
(or XOM) function that is prepared to receive a \*LDS_C_DS_DN\*O object.
.P
Objects are also created by the XDS functions themselves; this is the
way they usually return information to callers.  However, there is a
difference between objects generated by the XDS interface
and objects that are
explicitly declared by the application: you cannot access the former,
\*Vprivate\*O, objects in the direct way that you can the latter, \*Vpublic\*O,
objects.
.P
These two kinds of objects are the same as far as their
classes and attributes are concerned.  The only difference between them
is in the way they are accessed.  The public objects that an
application explicitly creates or declares in its own memory area are just
as accessible as any of the other data storage it uses.
However, private objects
are created and held in the XDS interface's own system memory.  Applications
get handles to private objects, and in order to access the private objects'
contents, they have to pass the handles to object management functions.  The
object management (XOM) functions make up a sort of all-purpose companion
interface to XDS.  Whereas XDS functions typically require some specific
class object as input, the XOM
functions accept objects of any class and perform useful operations on them.
.P
If a private object needs to be manipulated,
one of the XOM functions, \*Lom_get(\|)\*O, can be called to make
a public copy of the private object.
Then, calling the XOM \*Lom_create(\|)\*O
function allows applications to generate private objects manipulable by
\*Lom_get(\|)\*O.  The main significance of private as opposed to public
objects is that they do not have to be explicitly operated on; instead,
you can access them cleanly through the XOM interface and let it do most
of the work.  You still have to know something about the objects'
logical representation, however, to use XOM.
.P
Except for a few more details, which will be mentioned as needed, this is
practically all there is to XDS object representation.
.H 3 "XOM Objects and XDS Library Functions"
.P
To call an XDS library function, do the following:
.AL
.LI
Decide what input parameters you must supply to the function.
.LI
Bundle up these parameters in objects (that is, arrays of object descriptors)
in an XDS format.
.LE
.P
Almost all data returned to you by an XDS function is enclosed
in objects, which you must parse to recover the information that
you want.  This task is made almost automatic by a library function 
supplied with
the companion X/Open OSI-Abstract-Data Manipulation (XOM) interface.
.P
With XDS, the programmer has to perform a lot of
call parameter management, but in other respects the interface is easy to use.
The
XDS functions' dependence on objects makes them easy to call, once you have the
objects themselves correctly set up.
.H 2 "Accessing CDS Using the XDS Step-by-Step Procedure"
.P
You now know all that you need to know to work with a cell
namespace through XDS.
The following subsections provide a walk-through
of the steps of some typical XDS/CDS operations.
They
describe what is involved in using XDS to access existing CDS
attributes.
They then describe how you can create and access
new CDS entry attributes.
.H 3 "Reading and Writing Existing CDS Entry Attributes Using XDS"
.P
Suppose that you want to use XDS to read some information from the
following CDS entry:
.iS
/.../C=US/O=OSF/OU=DCE/hosts/tamburlaine/self
.iE
.P
As explained in the \*(Ag,
the \*L/.:/hosts/\*Vhostname/\*Lself\*O entry, which is created at the time
of cell configuration, contains binding information for the machine
\*Vhostname\*O.  Since this is a simple RPC NSI entry, there is not very much
in the entry that is interesting to read, but this entry is used as
an example anyway as a simple demonstration.
.P
Following are the header inclusions and general data declarations:
.oS
#include <stdio.h>
#include <stdlib.h>
#include <string.h>
#include <xom.h>
#include <xds.h>
#include <xdsbdcp.h>
...\" #include <xdsgds.h>
#include <xdscds.h>
.oE
.P
.ne 6
Note that the \*Lxom.h\*O and \*Lxds.h\*O header files must be included in the
order shown in the preceding example.  Also note that
the \*Lxdscds.h\*O header file is brought in for the sake of
\*LDSX_TYPELESS_RDN\*O.  This file is where the CDS-significant OIDs 
are defined.  The \*Lxdsbdcp.h\*O file
contains information necessary to the Basic Directory Contents
Package, which is the basic version of the XDS interface you can use
in this program. 
.P
The XDS/XOM interface defines numerous object identifier string constants,
which are
used to identify the many object classes, parts, and pieces (among other
things)
that it needs to know about.  In order to make sure that these OID constants
do not collide with any other constants, the interface refers to them with the string
\*LOMP_O_\*O prefixed to the user-visible
form; for example, \*LDS_C_DS_DN\*O
becomes \*LOMP_O_DS_C_DS_DN\*O internally.
In order to make application instances
consistent with the internal form, use \*LOM_EXPORT\*O to import
\*Vall\*O XDS-defined or
XOM-defined OID constants used in your application.
.oS
OM_EXPORT( DS_A_COUNTRY_NAME )
OM_EXPORT( DS_A_OBJECT_CLASS )
OM_EXPORT( DS_A_ORG_UNIT_NAME )
OM_EXPORT( DS_A_ORG_NAME )

OM_EXPORT( DS_C_ATTRIBUTE )
OM_EXPORT( DS_C_ATTRIBUTE_LIST )
OM_EXPORT( DS_C_AVA )
OM_EXPORT( DS_C_DS_DN )
OM_EXPORT( DS_C_DS_RDN )
OM_EXPORT( DS_C_ENTRY_INFO_SELECTION )
OM_EXPORT( DSX_TYPELESS_RDN )

/* ... Special OID for an untyped (that is, nonX.500)       */
/* relative distinguished name. Defined in xdscds.h header. */
.oE
.P
A further important effect of \*LOM_EXPORT\*O is that it builds an \*LOM_string\*O
structure to hold the exported OID hexadecimal
string.  As explained in
the previous chapter, OIDs are not numeric values, but strings.  Comparisons
and similar operations on OIDs must access them as strings.  Once an OID has
been exported, you can access it using its declared name.
For example, the hexadecimal
string representation of \*LDS_C_ATTRIBUTE\*O is contained in
\*LDS_C_ATTRIBUTE.elements\*O, and the length of this string is contained
in \*LDS_C_ATTRIBUTE.length\*O.
.H 4 "Significance of Typed and Untyped Entry Names"
.P
Next are the static declarations for the lowest layer of objects that
make up the global name (distinguished name)
of the CDS directory entry you want to read.  These lowest-level
objects contain the string values for each part of the name.  Remember
that the first three parts of the name (excluding the global prefix
\*L/.../\*O, which is not represented) constitute the cell name, as
follows:
.iS
/C=US/O=OSF/OU=DCE/
.iE
.P
In this example, assume that GDS is being used as
the cell's global directory service, so the cell name is represented in
X.500 format, and each part of it is typed in the object
representation; for example, \*LDS_\%A_\%COUNTRY_\%NAME\*O is the
\*LDS_ATTRIBUTE_TYPE\*O in the \*LCountry_\%String_\%Object\*O.  If you were
using DNS, the cell name might be something like the following:
.iS
osf.org.dce
.iE
.P
In this case the entire string \*Losf.org.dce\*O would be held in a single 
object whose \*LDS_ATTRIBUTE_TYPE\*O would be \*LDSX_TYPELESS_RDN\*O.
.P
\*LDSX_TYPELESS_RDN\*O is a special type that marks a name piece as not
residing in an X.500 namespace.  If the object resides under a
typed X.500 name, as is the case in the declared object structures, then
it serves as a delimiter for the end of the cell name GDS looks up, and
the beginning of the name that is passed to a CDS server in that
cell, assuming that the cell has access to GDS;
if not, such a name cannot be resolved.  In the following name, the
untyped portion is at the beginning:
.iS
/.../osf.org.dce/hosts/zenocrate/self
.iE
.P
In this case the name is passed immediately by XDS via the local CDS
(and the GDA) to DNS for resolution of the cell name.  Thus, the typing
of entry names determines which directory service a global
directory entry name is sent to for resolution.
.H 4 "Static Declarations"
.P
The following are the static declarations you need:
.ps 11
.vs 13
.oS
/*****************************************************************/
/* Here are the objects that contain the string values for each  */
/*  part of the CDS entry's global name...                       */

static OM_descriptor    Country_String_Object[] = {
 OM_OID_DESC(OM_CLASS, DS_C_AVA),
 OM_OID_DESC(DS_ATTRIBUTE_TYPE, DS_A_COUNTRY_NAME),
 {DS_ATTRIBUTE_VALUES, OM_S_PRINTABLE_STRING, OM_STRING("US")},
 OM_NULL_DESCRIPTOR
};

static OM_descriptor    Organization_String_Object[] = {
 OM_OID_DESC(OM_CLASS, DS_C_AVA),
 OM_OID_DESC(DS_ATTRIBUTE_TYPE, DS_A_ORG_NAME),
 {DS_ATTRIBUTE_VALUES, OM_S_PRINTABLE_STRING, OM_STRING("OSF")},
 OM_NULL_DESCRIPTOR
};

static OM_descriptor    Org_Unit_String_Object[] = {
 OM_OID_DESC(OM_CLASS, DS_C_AVA),
 OM_OID_DESC(DS_ATTRIBUTE_TYPE, DS_A_ORG_UNIT_NAME),
 {DS_ATTRIBUTE_VALUES, OM_S_PRINTABLE_STRING, OM_STRING("DCE")},
 OM_NULL_DESCRIPTOR
};

static OM_descriptor    Hosts_Dir_String_Object[] = {
 OM_OID_DESC(OM_CLASS, DS_C_AVA),
 OM_OID_DESC(DS_ATTRIBUTE_TYPE, DSX_TYPELESS_RDN),
 {DS_ATTRIBUTE_VALUES, OM_S_PRINTABLE_STRING, OM_STRING("hosts")},
 OM_NULL_DESCRIPTOR
};

static OM_descriptor    Tamburlaine_Dir_String_Object[] = {
 OM_OID_DESC(OM_CLASS, DS_C_AVA),
 OM_OID_DESC(DS_ATTRIBUTE_TYPE, DSX_TYPELESS_RDN),
 {DS_ATTRIBUTE_VALUES, OM_S_PRINTABLE_STRING, OM_STRING("tamburlaine")},
 OM_NULL_DESCRIPTOR
};

.ne 6
static OM_descriptor    Self_Entry_String_Object[] = {
 OM_OID_DESC(OM_CLASS, DS_C_AVA),
 OM_OID_DESC(DS_ATTRIBUTE_TYPE, DSX_TYPELESS_RDN),
 {DS_ATTRIBUTE_VALUES, OM_S_PRINTABLE_STRING, OM_STRING("self")},
 OM_NULL_DESCRIPTOR
};
.oE
.ps 12
.vs 14
.P
The string objects are contained by a next-higher level of objects
that identify the strings as being pieces (RDNs)
of a fully qualified directory entry name (DN).
Thus, the \*LCountry_RDN\*O object contains \*LCountry_String_Object\*O
as the value of its \*LDS_AVAS\*O attribute; \*LOrganization_RDN\*O
contains \*LOrganization_String_Object\*O, and so on.
.ps 11
.vs 13
.oS
/*****************************************************************/
/* Here are the "relative distinguished name" objects. 

static OM_descriptor    Country_RDN[] = {
 OM_OID_DESC(OM_CLASS, DS_C_DS_RDN),
 {DS_AVAS, OM_S_OBJECT, {0, Country_String_Object}},
 OM_NULL_DESCRIPTOR
};

static OM_descriptor    Organization_RDN[] = {
 OM_OID_DESC(OM_CLASS, DS_C_DS_RDN),
 {DS_AVAS, OM_S_OBJECT, {0, Organization_String_Object}},
 OM_NULL_DESCRIPTOR
};

static OM_descriptor    Org_Unit_RDN[] = {
 OM_OID_DESC(OM_CLASS, DS_C_DS_RDN),
 {DS_AVAS, OM_S_OBJECT, {0, Org_Unit_String_Object}},
 OM_NULL_DESCRIPTOR
};

static OM_descriptor    Hosts_Dir_RDN[] = {
 OM_OID_DESC(OM_CLASS, DS_C_DS_RDN),
 {DS_AVAS, OM_S_OBJECT, {0, Hosts_Dir_String_Object}},
 OM_NULL_DESCRIPTOR
};

static OM_descriptor    Tamburlaine_Dir_RDN[] = {
 OM_OID_DESC(OM_CLASS, DS_C_DS_RDN),
 {DS_AVAS, OM_S_OBJECT, {0, Tamburlaine_Dir_String_Object}},
 OM_NULL_DESCRIPTOR
};

.ne 5
static OM_descriptor    Self_Entry_RDN[] = {
 OM_OID_DESC(OM_CLASS, DS_C_DS_RDN),
 {DS_AVAS, OM_S_OBJECT, {0, Self_Entry_String_Object}},
 OM_NULL_DESCRIPTOR
};
.oE
.ps 12
.vs 14
.P
At the highest level, all the subobjects are gathered together in the
DN object named \*LFull_Entry_Name_Object\*O.
.oS
/***********************************************************/

static OM_descriptor    Full_Entry_Name_Object[] = {
     OM_OID_DESC(OM_CLASS, DS_C_DS_DN),
     {DS_RDNS, OM_S_OBJECT, {0, Country_RDN}},
     {DS_RDNS, OM_S_OBJECT, {0, Organization_RDN}},
     {DS_RDNS, OM_S_OBJECT, {0, Org_Unit_RDN}},
     {DS_RDNS, OM_S_OBJECT, {0, Hosts_Dir_RDN}},
     {DS_RDNS, OM_S_OBJECT, {0, Tamburlaine_Dir_RDN}},
     {DS_RDNS, OM_S_OBJECT, {0, Self_Entry_RDN}},
     OM_NULL_DESCRIPTOR
};
.oE
.H 4 "Other Necessary Objects for \*Lds_read(\|)\*O"
.P
The \*Lds_read(\|)\*O procedure takes requests in
the form of a \*LDS_C_ENTRY_INFO_SELECTION\*O class
object.  However, if you refer to the recipe for this object class in
Section 3.5, you will find that it is much simpler
than the name object;
it contains no subobjects, and
its declaration is straightforward.
.P
The value of the \*LDS_ALL_ATTRIBUTES\*O attribute specifies
that all attributes be read from the CDS entry, which is specified
in the \*LFull_Entry_Name_Object\*O variable.
.P
Note that the term \*Eattribute\*O is used slightly differently in CDS and
XDS contexts.
In
XDS, attributes describe the values that can be held by various object
classes; they can be thought of as ``object fields.''  In
CDS, attributes describe the values that can be associated with a
directory entry.
The following code fragment shows the definition of a
\*LDS_\%C_\%ENTRY_\%INFO_\%SELECTION\*O object:
.oS
.ne 7
static OM_descriptor    Entry_Info_Select_Object[] = {

    OM_OID_DESC(OM_CLASS, DS_C_ENTRY_INFO_SELECTION),
    {DS_ALL_ATTRIBUTES, OM_S_BOOLEAN, OM_TRUE},
    {DS_INFO_TYPE, OM_S_ENUMERATION, DS_TYPES_AND_VALUES},
    OM_NULL_DESCRIPTOR
};
.oE
.H 4 "Miscellaneous Declarations"
.P
The following are declarations for miscellaneous variables:
.ps 10
.vs 12
.oS
OM_workspace          xdsWorkspace;
     /* ...will contain handle to our "workspace"  */

DS_feature featureList[] = {

     { OM_STRING(OMP_O_DS_BASIC_DIR_CONTENTS_PKG), OM_TRUE },
     { 0 }
};
     /* ...list of service "packages" we will want from XDS  */

OM_private_object     session;
     /* ...will contain handle to a bound-to directory session  */


DS_status             dsStatus;
     /* ...status return from XDS calls  */

OM_return_code        omStatus;
     /* ...status return from XOM calls  */

OM_sint               dummy;
     /* ...for unsupported ds_read() argument  */

OM_private_object     readResultObject;
     /* ...to receive entry information read from CDS by "ds_read()" */

.ne 5
OM_type I_want_entry_object[] = {DS_ENTRY, OM_NO_MORE_TYPES};
OM_type I_want_attribute_list[] = {DS_ATTRIBUTES, OM_NO_MORE_TYPES};
OM_type I_want_attribute_value[] = {DS_ATTRIBUTE_VALUES, OM_NO_MORE_TYPES};
     /* ...arrays to pass to "om_get()" to extract subobjects */
     /*  from the result object returned by "ds_read()"       */

.ne 3
OM_value_position number_of_descriptors;
     /* ...to hold number of attribute descriptors returned   */
     /*  by "om_get()                                         */

OM_public_object entry;
     /* ...to hold public object returned by "om_get()"       */
...\" 
...\" OM_string_length      offset;
...\"      /* ...to input/output string offsets for "om_read()"     */
...\" 
...\" OM_string *valueRead;
...\"      /* ...to hold string value returned by "om_read()"       */
.oE
.ps 12
.vs 14
.H 4 "The Main Program"
.P
This section describes the main program. Three calls usually precede
any use of XDS.
.P
First, \*Lds_initialize(\|)\*O is called to set up a \*Eworkspace\*O.
A workspace is a memory area in which XDS can generate objects
that will be used
to pass information to the application.  If the call is successful,
it returns a handle that must be saved for the \*Lds_shutdown(\|)\*O call.
If the call is unsuccessful, it returns
NULL, but this example does not check for errors.
.oS
xdsWorkspace = ds_initialize();
.oE
.P
If GDS is being used as the global directory service, the service
packages are specified next.
Packages
consist of groups of objects, together with the associated supporting
interface functionality, designed to be used for some specific end.  For
example, to access the (X.500) Global Directory, specify
\*LDSX_GDS_PKG\*O.
This example uses the
basic XDS service so \*LDS_BASIC_DIR_CONTENTS_PKG\*O is specified.
The \*VfeatureList\*O parameter to \*Lds_version(\|)\*O is an array, not
an object, since packages are not being handled yet:
.oS
dsStatus = ds_version(featureList, xdsWorkspace);
.oE
.P
Note that if you are \*Enot\*O using GDS as your global directory service
(in other words, if you are using XDS by itself), then you should \*Enot\*O
call \*Lds_version(\|)\*O.
.P
.ne 8
From this point on, status is returned by XDS functions via a \*LDS_status\*O
variable. \*LDS_status\*O is a handle to a private object, whose value
is \*LDS_SUCCESS\*O (that is, NULL) if the call was successful.  If
something went wrong, the information in the (possibly complex) private
error object has to be analyzed through calls to \*Lom_get(\|)\*O,
which is one
of the general-purpose object management functions that belongs to XDS's
companion interface XOM. Usage of \*Lom_get(\|)\*O is demonstrated later on
in this program, but return status is not checked in this example.
.P
The third necessary call is to \*Lds_bind(\|)\*O.
This call brings up
the directory service, which binds to a Directory System Agent (DSA),
the GDS server,
through a Directory User Agent (DUA), the
GDS client.  The \*LDS_DEFAULT_SESSION\*O
parameter calls for a default session.  The alternative is to build and
fill out your own \*LDS_C_SESSION\*O object, specifying such things as
DSA addresses, and pass that.
The default is used in this example:
.ps 11
.oS
dsStatus = ds_bind(DS_DEFAULT_SESSION, xdsWorkspace, &session);
.oE
.ps 12
.H 4 "Reading a CDS Attribute"
.P
At this point, you can read a set of object attributes from the cell
namespace entry.  Call \*Lds_read(\|)\*O with the two objects
that specify the entry to be read and the specific entry attribute you
want:
.ps 11
.oS
dsStatus = ds_read(session, DS_DEFAULT_CONTEXT, Full_Entry_Name_Object,
                   Entry_Info_Select_Object, &readResultObject, &dummy);
.oE
.ps 12
.P
The \*LDS_DEFAULT_CONTEXT\*O parameter could be substituted with a
\*LDS_C_CONTEXT\*O object, which would typically be reused during a series
of related XDS calls.  This object specifies and records
how GDS should
perform the operation, how much progress has been made in resolving a
name, and so on.
.P
.ne 33
If the call succeeds, the private object \*LreadResultObject\*O contains
a series of \*LDS_C_ATTRIBUTE\*O subobjects, one for each attribute read
from the cell name entry.  A complete recipe for the \*LDS_C_READ_RESULT\*O
object can be found in Chapter 11, but the following is a skeletal outline
of the object's structure:
.oS
DS_C_READ_RESULT
        \*CDS_ENTRY\*C: object(\*CDS_C_ENTRY_INFO\*C)
...\"     (...The information extracted from the directory entry of the
...\"      target object.)
        \*CDS_ALIAS_DEREFERENCED\*C: \*COM_S_BOOLEAN\*C
...\"     (I from DS_C_COMMON_RESULTS)
...\"     (...Indicates whether the name of the target object that was passed
...\"      to ds_read(\|) included an alias that was dereferenced to determine the
...\"      entry name.)
        \*CDS_PERFORMER\*C: object(\*CDS_C_NAME\*C)
...\"     (I from DS_C_COMMON_RESULTS)
...\"     (...Not supported in DCE.)

    \*CDS_C_ENTRY_INFO\*C
            \*CDS_FROM_ENTRY\*C: \*COM_S_BOOLEAN\*C
...\"     (...Indicates whether the information was extracted from the specified object's
...\"      entry, rather than from a copy of the entry.)
            \*CDS_OBJECT_NAME\*C: object(\*CDS_C_NAME\*C)
...\"     (...The target object's distinguished name.)
            \*CDS_ATTRIBUTES\*C: one or more object(\*CDS_C_ATTRIBUTE\*C)
...\"     (I from DS_C_ATTRIBUTE_LIST)
...\"     (...The information extracted from the directory entry of the target
...\"      object.)

        \*CDS_C_NAME\*C == \*CDS_C_DS_DN\*C 
                \*CDS_RDNS\*C: object(\*CDS_C_DS_RDN\*C)

            \*CDS_C_DS_RDN\*C
                    \*CDS_AVAS\*C: object(\*CDS_C_AVA\*C)

                \*CDS_C_AVA\*C
                        \*CDS_ATTRIBUTE_TYPE\*C: OID string
                        \*CDS_ATTRIBUTE_VALUES\*C: anything

        \*CDS_C_ATTRIBUTE\*C \*V\*(EMone for each attribute read\*O
                \*CDS_ATTRIBUTE_TYPE\*C: OID string
...\"     (...The attribute type that indicates the class of information given by
...\"      this attribute.)
                \*CDS_ATTRIBUTE_VALUES\*C: anything
...\"     (...The values themselves.  Hooray!)
.oE
.oS
        \*CDS_C_ATTRIBUTE\*C
                \*CDS_ATTRIBUTE_TYPE\*C: OID string
                \*CDS_ATTRIBUTE_VALUES\*C: anything
.oE
.P
Figure 3-6 illustrates the general object structure of a
\*LDS_\%C_\%READ_\%RESULT\*O, showing only the object-valued 
attributes, and only one \*LDS_C_ATTRIBUTE\*O subobject.
...\" Figure x: 
...\" pix/objresult1.pic
.P
.ne 5i
.FG "The DS_C_READ_RESULT Object Structure"
.sp .5
.PS
.in +.25i
scale = 1.5
.ps 12
box at 1.417i,7.125i wid 2.000i ht 1.083i;
box at 3.333i,3.958i same;
box at 2.333i,5.542i same;
box at 5.583i,3.958i same;
box at 4.333i,2.375i same;
box at 5.333i,0.792i same;
"\fR\s8DS_C_READ_RESULT\s0\fP" ljust at 0.542i,7.115i;
"\fR\s8DS_C_ENTRY_INFO\s0\fP" ljust at 1.458i,5.708i;
"\fR\s8DS_C_DS_DN\s0\fP" ljust at 2.479i,4.042i;
"\fR\s8DS_C_ATTRIBUTE\s0\fP" ljust at 4.750i,4.021i;
"\fR\s8DS_C_DS_RDN\s0\fP" ljust at 3.448i,2.427i;
"\fR\s8DS_C_AVA\s0\fP" ljust at 4.479i,0.823i;
line -> from 1.417i,6.583i to 2.333i,6.083i;
line -> from 2.333i,5.000i to 3.333i,4.500i;
line -> from 2.333i,5.000i to 5.583i,4.500i;
line -> from 3.333i,3.417i to 4.333i,2.917i;
line -> from 4.333i,1.833i to 5.333i,1.333i;
.in -.25i
.PE
.H 4 "Handling the Result Object"
.P
The next goal is to extract
the instances of the
\*LDS_C_ATTRIBUTE\*O subsubclass, one for each attribute read,
from the returned object.
The first step is to make a public copy of
\*LreadResultObject\*O, which is a \*Vprivate\*O object, and therefore
does not allow access to the object descriptors themselves.
Using the XOM \*Lom_get(\|)\*O function,
you can make a public copy of \*LreadResultObject\*O, and at the same time
specify that only the relevant parts of it be preserved in the copy.  Then with
a couple of calls to \*Lom_get(\|)\*O, you can reduce the object to manageable
size, leaving a superobject whose immediate subobjects are
fairly easily accessed.
.P
.ne 12
The \*Lom_get(\|)\*O function
takes as its third input parameter an \*LOM_type_list\*O, which is
an array of \*LOM_type\*O.
Possible parameters are \*LDS_ENTRY\*O, \*LDS_ATTRIBUTES\*O,
\*LDS_ATTRIBUTE_VALUES\*O, and
anything that can legitimately appear in an object
descriptor's \*Ltype\*O field.
The types specified in this parameter are interpreted
according to the options specified in the preceding parameter.
For example, the relevent attribute from the read result is
\*LDS_ENTRY\*O.
It contains the \*LDS_C_ENTRY_INFO\*O object,
which in turn contains the \*LDS_C_ATTRIBUTE\*O objects.
The \*LDS_\%C_\%ATTRIBUTE\*O objects contain the
data read from the cell directory name entry.
Therefore, you should specify the
\*LOM_\%EXCLUDE_\%ALL_\%BUT_\%THESE_\%TYPES\*O option,
which has the effect of excluding
everything but the contents of the object's \*LDS_ENTRY\*O type attribute.
.P
The \*LOM_EXCLUDE_SUBOBJECTS\*O option is also ORed
into the parameter.
Why would you not preserve the subobjects of
\*LDS_C_ENTRY_INFO\*O?
Because \*Lom_get(\|)\*O
works only on private, not on public, objects.
If you were to use \*Lom_get(\|)\*O on the
entire object substructure, you would not be able to continue getting
the subobjects, and
instead you would have to follow the object pointers down to the
\*LDS_C_ATTRIBUTE\*Os.  However, when \*Lom_get(\|)\*O excludes
subobjects from a copy,
it does not really leave them out; it merely leaves the subobjects private,
with a handle to the private objects where pointers would have been.
This allows you to
continue to call \*Lom_get(\|)\*O as long as there are more subobjects.
.P
.ne 20
The following is the first call:
.oS
/* The DS_C_READ_RESULT object that ds_read() returns has  */
/* one subobject, DS_C_ENTRY_INFO; it in turn has two sub- */
/* objects, that is a DS_C_NAME which holds the object's   */
/* distinguished name (which we don't care about here),    */
/* and a DS_C_ATTRIBUTE which contains the attribute info  */
/* we read; that one we want.  So we climb down to it ...  */
/* This om_get() will "return" the entry-info object ...   */

omStatus = om_get(readResultObject,
                  OM_EXCLUDE_ALL_BUT_THESE_TYPES +
                  OM_EXCLUDE_SUBOBJECTS,
                  I_want_entry_object,
                  OM_FALSE,
                  OM_ALL_VALUES,
                  OM_ALL_VALUES,
                  &entry,
                  &number_of_descriptors);
.oE
.P
The \*Lnumber_of_descriptors\*O parameter contains the number of
attribute descriptors returned in the public copy,
not in any excluded subobjects.
.P
If an XOM function is successful, it returns an \*LOM_SUCCESS\*O code.
Unsuccessful
calls to XOM functions do not return error objects, but rather return
simple error codes.
The interface assumes that if the XOM
function does not accept your object, then you will not be able to get much
information from any further objects.
The return status is not checked in this example.
.P
.ne 19
The return parameter \*Lentry\*O should now contain a pointer to the
\*LDS_C_ENTRY_INFO\*O object with the following immediate 
structure.  (The number of instances of \*LDS_ATTRIBUTES\*O depends 
on the number of attributes read from the entry.)
.oS
DS_C_ENTRY_INFO
    DS_FROM_ENTRY: OM_S_BOOLEAN
    DS_OBJECT_NAME: object(DS_C_NAME)
    DS_ATTRIBUTES: object(DS_C_ATTRIBUTE)
			\*VDS_C_ATTRIBUTE\*C
			    \*VDS_ATTRIBUTE_TYPE\*C: OID string
			    \*VDS_ATTRIBUTE_VALUES\*C: anything
.oE
.oS
    DS_ATTRIBUTES: object(DS_C_ATTRIBUTE)
		    object(DS_C_ATTRIBUTE)
			\*VDS_C_ATTRIBUTE\*C
			    \*VDS_ATTRIBUTE_TYPE\*C: OID string
			    \*VDS_ATTRIBUTE_VALUES\*C: anything
.oE
.P
The italics indicate private subobjects.  Figure 3-7 shows the 
\*LDS_\%C_\%ENTRY_\%INFO\*O object.  Only one
instance of a \*LDS_\%C_\%ATTRIBUTE\*O subobject is 
shown in the figure; usually there are several such subobjects, 
all at the same level, each containing information about one of 
the attributes read from the entry.  These subobjects are represented 
in \*LDS_\%C_\%ENTRY_\%INFO\*O as a series of descriptors of type
\*LDS_\%ATTRIBUTES\*O, each of which has as its value a 
separate \*LDS_\%C_\%ATTRIBUTE\*O subobject.
...\" Figure x: 
...\" pix/objresult2.pic
.P
.ne 4i
.FG "The DS_C_ENTRY_INFO Object Structure"
.sp .5
.PS
scale = 1.5
.ps 12
box at 3.333i,3.958i wid 2.000i ht 1.083i;
box at 2.333i,5.542i same;
box at 4.333i,2.375i same;
box at 5.333i,0.792i same;
"\fR\s8DS_C_ENTRY_INFO\s0\fP" ljust at 1.458i,5.708i;
"\fR\s8DS_C_DS_DN\s0\fP" ljust at 2.479i,4.042i;
"\fR\s8DS_C_ATTRIBUTE\s0\fP" ljust at 4.750i,4.021i;
"\fR\s8DS_C_DS_RDN\s0\fP" ljust at 3.448i,2.427i;
"\fR\s8DS_C_AVA\s0\fP" ljust at 4.479i,0.823i;
line -> from 2.333i,5.000i to 3.333i,4.500i;
line -> from 3.333i,3.417i to 4.333i,2.917i;
line -> from 4.333i,1.833i to 5.333i,1.333i;
box dotted at 5.583i,3.958i same;
line -> dotted from 2.333i,5.000i to 5.583i,4.500i;
.PE
.sp .5
.P
Now extract the separate attribute values of the entry that
was read.
These were returned as separate object values of \*LDS_ATTRIBUTES\*O;
each one has an object class of \*LDS_C_ATTRIBUTE\*O.  To return any one of
these subobjects, a second call to \*Lom_get(\|)\*O is necessary, as follows:
.oS
.ne 30
/* The second om_get() returns one selected subobject      */
/* from the DS_C_ENTRY_INFO subobject we just got.  The    */
/* contents of "entry" as we enter this call is the        */
/* private subobject which is the value of DS_ATTRIBUTES.  */
/* If we were to make the following call with the          */
/* OM_EXCLUDE_SUBOBJECTS and without the                   */
/* OM_EXCLUDE_ALL_BUT_THESE_VALUES flags, we would get     */
/* back an object consisting of six private subobjects,    */
/* one for each of the attributes returned.  Note the      */
/* values for initial and limiting position: "2"           */
/* specifies that we want only the third DS_C_ATTRIBUTE    */
/* subobject to be gotten (the subobjects are numbered     */
/* from 0, not from 1), and the "3" specifies that we want */
/* no more than that--in other words, the limiting value   */
/* must always be one more than the initial value if the   */
/* latter is to have any effect.                           */
/* OM_EXCLUDE_ALL_BUT_THESE_VALUES is likewise required    */ 
/* for the initial and limiting values to have any         */
/* effect ...                                              */

omStatus = om_get(entry->value.object.object,
                  OM_EXCLUDE_ALL_BUT_THESE_TYPES
                  + OM_EXCLUDE_SUBOBJECTS
                  + OM_EXCLUDE_ALL_BUT_THESE_VALUES,
                  I_want_attribute_list,
                  OM_FALSE,
                  ((OM_value_position) 2),
                  ((OM_value_position) 3),
                  &entry,
                  &number_of_descriptors);
.oE
.P
Note the value that is passed as the first parameter.
Since \*Lom_get(\|)\*O does not work on public
objects, pass it the handle of the private subobject explicitly.  To
do this you have to know the arrangement of the descriptor's value union,
which is defined in \*Lxom.h\*O. 
.H 4 "Representation of Object Values"
.P
The following is the layout of the \*Lobject\*O field in a descriptor's
\*Lvalue\*O union:
.oS
typedef struct {
	OM_uint32	padding;
	OM_object	object;
} OM_padded_object;
.oE
.P
The following is the layout of the \*Lvalue\*O union itself:
.oS
typedef union OM_value_union {
	OM_string	string;
	OM_boolean	boolean;
	OM_enumeration	enumeration;
	OM_integer	integer;
	OM_padded_object	object;
} OM_value;
.oE
.P
The following is the layout of the descriptor itself:
.oS
typedef struct OM_descriptor_struct {
	OM_type			type;
	OM_syntax		syntax;
	union OM_value_union	value;
} OM_descriptor;
.oE
.P
Thus, if \*Lentry\*O is a pointer to the \*LDS_C_ENTRY_INFO\*O
object, then the private handle to the \*LDS_C_ATTRIBUTE\*O object 
you want next is the following:
.iS
entry\->value.object.object
.iE
.nL
.ne 10
.H 4 "Extracting an Attribute Value"
.P
The last call yielded one separate
\*LDS_C_ATTRIBUTE\*O subsubobject from the original returned result object:
.oS
DS_C_ATTRIBUTE
	DS_ATTRIBUTE_TYPE: OID string
	DS_ATTRIBUTE_VALUES: anything
.oE
.P
Figure 3-8 illustrates what is left.
...\" pix/objresult3.pic
.P
.FG "The DS_C_ATTRIBUTE Object Structure"
.sp .4
.PS
scale = 1.5
"\fR\s8DS_C_ATTRIBUTE\s0\fP" ljust at 4.104i,6.656i;
.ps 12
box dotted at 4.938i,6.594i wid 2.000i ht 1.083i;
.PE
.sp .5
.P
A final call to \*Lom_get(\|)\*O returns the single object descriptor
that contains the actual value of the single attribute you selected from the
returned object:
.oS
omStatus = om_get(entry->value.object.object,
                  OM_EXCLUDE_ALL_BUT_THESE_TYPES,
                  I_want_attribute_value,
                  OM_FALSE,
                  OM_ALL_VALUES,
                  OM_ALL_VALUES,
                  &entry,
                  &number_of_descriptors);
.oE
.P
At this point, the value of \*Lentry\*O is the base address of an object
descriptor whose \*Lentry\->type\*O is \*LDS_ATTRIBUTE_VALUES\*O.
Depending on the value found in \*Lentry\->syntax\*O, the value of
the attribute can be read from \*Lentry\->value.string\*O,
\*Lentry\->value.integer\*O,
\*Lentry\->value.boolean\*O, or \*Lentry\->value.enumeration\*O.  
.P
For example, suppose the value of \*Lentry\->syntax\*O is 
\*LOM_\%S_\%OCTET_STRING\*O.  The attribute value, represented as an 
octet string (\*Enot\*O terminated by a NULL), is found in 
\*Lentry\->value.string.elements\*O; its length
is found in \*Lentry\->value.string.length\*O.
.P
.ne 4
You can check any attribute value against the value you get from 
the \*Lcdscp\*O command by entering:
.iS
cdscp show object /.:/hosts/tamburlaine/self
.iE
.P
For further information on \*Lcdscp\*O, see the \*(Ar.
.P
Note that you can always call \*Lom_get(\|)\*O to get
the \*Ventire\*O returned object from an
XDS call.  This yields a full structure of object descriptors that you can manipulate
like any other data structure.  To do this with the \*Lds_read(\|)\*O return object
would have required the following call:
.oS
/* make a public copy of ENTIRE object...   */

omStatus = om_get(readResultObject,
                  OM_NO_EXCLUSIONS,
                  ((OM_type_list) 0),
                  OM_FALSE,
                  ((OM_value_position) 0),
                  ((OM_value_position) 0),
                  &entry,
                  &number_of_descriptors);
.oE
.P
At the end of every XDS session you have to unbind from the GDS, and then deallocate
the XDS and XOM structures and other storage.  You must also explicitly deallocate
any service-generated objects, whether public or private, with calls to \*Lom_delete(\|)\*O, as follows:
.oS
/* delete service-generated public or private objects... */

omStatus = om_delete(readResultObject);
omStatus = om_delete(entry);

/* unbind from the GDS...  */
dsStatus = ds_unbind(session);

/* close down the workspace... */
dsStatus = ds_shutdown(xdsWorkspace);

exit();
.oE
.H 3 "Creating New CDS Entry Attributes"
.P
The following subsections provide
the procedure and some code examples for creating new
CDS entry attributes.
.H 4 "Procedure for Creating New Attributes"
.P
To create new attributes of your own on cell namespace entries, you must do
the following:
.AL
.LI
Allocate a new ISO OID for the new attribute.  For
information on how to do this, see Chapter 2 of this guide and the \*(Ag.
.LI
Enter the new attribute's name and OID in the file
\*L/.:/opt/dcelocal/etc/cds_attributes\*O.  
This text file contains OID-to-readable string mappings that are used,
for example, by \*Lcdscp\*O when it displays
CDS entry attributes.  Each entry also gives a syntax for 
reading the information in the entry itself.  This should be congruent 
with the format of the data
you intend to write in the attribute.  For more information about the
\*Lcds_attributes\*O file, see the \*(Ag.
.LI
In the \*Lxdscds.h\*O header file, define an appropriate OID string
constant to represent the new attribute.
.P
For example, the following shows the \*Lxdscds.h\*O definition for the
CDS \*LCDS_Class\*O attribute:
.iS
#define OMP_O_DSX_A_CDS_Class      "\\x2B\\x16\\x01\\x03\\x0F"
.iE
.P
Note the XDS internal form of the name. This is what \*LDSX_A_CDS_Class\*O
looks like when it has been exported using
\*LOM_EXPORT\*O in an application, as all OIDs
must be.  Thus, if you wanted to create a CDS attribute called
\*LCDS_Brave_New_Attrib\*O, you would obtain an OID from your
administrator and
add the following line to \*Lxdscds.h\*O:
.iS
#define OMP_O_DSX_A_CDS_Brave_New_Attrib "\*Vyour_OID\*C"
.iE
.LI
In an application, call the XDS \*Lds_modify_entry(\|)\*O routine to add the
attribute to the cell namespace entry of your choice.
.LE
.H 4 "Coding Examples"
.P
In the following code fragments a set of declarations similar to those in
the previous examples is assumed. 
.P
The \*Lds_modify_entry(\|)\*O function, which is called to add new attributes
to an entry or to write new values into existing attributes, requires
a \*LDS_C_ENTRY_MOD_LIST\*O input object whose contents specify the
attributes and values to be written to the entry.  The name, as always, is
specified in a \*LDS_C_DS_DN\*O object.  The following is
a static declaration of
such a list, which consists of two attributes:
.oS
static OM_descriptor    Entry_Modification_Object_1[] = {
  OM_OID_DESC(OM_CLASS, DS_C_ENTRY_MOD),
  OM_OID_DESC(DS_ATTRIBUTE_TYPE, DSX_A_CDS_Brave_New_Attrib),
  {DS_ATTRIBUTE_VALUES, OM_S_PRINTABLE_STRING,
	OM_STRING("O brave new attribute")},
  {DS_MOD_TYPE, OM_S_ENUMERATION, DS_ADD_ATTRIBUTE},
  OM_NULL_DESCRIPTOR
};

static OM_descriptor    Entry_Modification_Object_2[] = {
  OM_OID_DESC(OM_CLASS, DS_C_ENTRY_MOD),
  OM_OID_DESC(DS_ATTRIBUTE_TYPE, DSX_A_CDS_Class),
  {DS_ATTRIBUTE_VALUES, OM_S_PRINTABLE_STRING, \\
      OM_STRING("Miscellaneous")},
  {DS_MOD_TYPE, OM_S_ENUMERATION, DS_ADD_ATTRIBUTE},
  OM_NULL_DESCRIPTOR
};

static OM_descriptor    Entry_Modification_List_Object[] = {
  OM_OID_DESC(OM_CLASS, DS_C_ENTRY_MOD_LIST),
  {DS_CHANGES, OM_S_OBJECT, {0, Entry_Modification_Object_1}},
  {DS_CHANGES, OM_S_OBJECT, {0, Entry_Modification_Object_2}},
  OM_NULL_DESCRIPTOR
};
.oE
.P
A full description of this object can be found in Section 3.5.
There could be any number of
additional attribute changes in the list; this would mean additional
\*LDS_C_ENTRY_MOD\*O objects declared, and an additional \*LDS_CHANGES\*O
descriptor declared and initialized in the \*LDS_C_ENTRY_MOD_LIST\*O
object. 
.P
With the \*LDS_C_ENTRY_MOD_LIST\*O class object having been declared as shown
previously, the following code fragment illustrates
how to call XDS to write a new attribute value (actually two new
values since two attributes are contained in the list object).  Note that any
of the attributes may be new, although the entry itself must already exist.
.oS
dsStatus = ds_modify_entry(session,    /* Directory session */
				       /* from "ds_bind()"  */
           DS_DEFAULT_CONTEXT, /* Usual directory context   */
           Full_Entry_Name_Object, /* Entry name object     */
           Entry_Modification_List_Object, /* Entry Modifi- */
					   /* cation object */
                   &dummy);        /* Unsupported argument  */
.oE
.P
If the entire entry is new, you must call \*Lds_add_entry(\|)\*O. This function
requires an input object of class \*LDS_C_ATTRIBUTE_LIST\*O, whose contents
specify the attributes (and values) to be attached to the new entry.
Following is the static declaration for an attribute list that
contains three attributes:
.ps 11
.vs 13
.oS
static OM_descriptor    Class_Attribute_Object[] = {
     OM_OID_DESC(OM_CLASS, DS_C_ATTRIBUTE),
     OM_OID_DESC(DS_ATTRIBUTE_TYPE, DSX_A_CDS_Class),
     {DS_ATTRIBUTE_VALUES, OM_S_PRINTABLE_STRING, OM_STRING("Printer")},
     OM_NULL_DESCRIPTOR
};

static OM_descriptor    ClassVersion_Attribute_Object[] = {
     OM_OID_DESC(OM_CLASS, DS_C_ATTRIBUTE),
     OM_OID_DESC(DS_ATTRIBUTE_TYPE, DSX_A_CDS_ClassVersion),
     {DS_ATTRIBUTE_VALUES, OM_S_PRINTABLE_STRING, OM_STRING("1.0")},
     OM_NULL_DESCRIPTOR
};

.ne 6
static OM_descriptor    My_Own_Attribute_Object[] = {
     OM_OID_DESC(OM_CLASS, DS_C_ATTRIBUTE),
     OM_OID_DESC(DS_ATTRIBUTE_TYPE, DSX_A_CDS_My_OwnAttribute),
     {DS_ATTRIBUTE_VALUES, OM_S_PRINTABLE_STRING, OM_STRING("zorro")},
     OM_NULL_DESCRIPTOR
};

static OM_descriptor    Attribute_List_Object[] = {
     OM_OID_DESC(OM_CLASS, DS_C_ATTRIBUTE_LIST),
     {DS_ATTRIBUTES, OM_S_OBJECT, {0, Class_Attribute_Object}},
     {DS_ATTRIBUTES, OM_S_OBJECT, {0, ClassVersion_Attribute_Object}},
     {DS_ATTRIBUTES, OM_S_OBJECT, {0, My_Own_Attribute_Object}},
     OM_NULL_DESCRIPTOR
};
.oE
.ps 12
.vs 14
.P
The \*Lds_add_entry(\|)\*O function
also requires a \*LDS_C_DS_DN\*O class object
containing the new entry's full name, for example:
.iS
/.../osf.org.dce/subsys/doc/my_book
.iE
where every member of the name exists except for the last one, \*Lmy_book\*O.
Assuming that \*LFull_Entry_Name_Object\*O is a \*LDS_C_DS_DN\*O object,
the following code shows what the call would look like:
.oS
dsStatus = ds_add_entry(session,    /* Directory session   */
				       /* from "ds_bind()" */
           DS_DEFAULT_CONTEXT,  /* Usual directory context */
           Full_Entry_Name_Object,    /* Name of new entry */
           Attribute_List_Object,      /* Attributes to be */
                     /* attached to new entry, with values */
           &dummy);                /* Unsupported argument */
.oE
.H 2 "Object-Handling Techniques"
.P
The following subsections describe
the use of XOM and discuss dynamic object
creation.
.H 3 "Using XOM to Access CDS"
.P
The following code fragments demonstrate an alternative way to set up the
entry modification object for a \*Lds_modify_entry(\|)\*O call, mainly for
the sake of showing how the \*Lom_put(\|)\*O and \*Lom_write(\|)\*O functions
are used. 
.P
The following technique is used to initialize the modification object:
.AL
.LI
The \*Lom_create(\|)\*O function
is called to generate a private object of a specified
class.
.LI
The \*Lom_put(\|)\*O function
is called to copy statically declared attributes into
a declared private object.
.LI
The \*Lom_write(\|)\*O function
is called to write the value string, which is to be
assigned to the attribute, into the private object.
.LI
The \*Lom_get(\|)\*O function
is called to make the private object public.
.LI
The object is now public, and its
address is inserted into the
\*LDS_C_ENTRY_MOD_LIST\*O object's \*LDS_CHANGES\*O attribute.
.LE
.P
.ne 18
The following new declarations are necessary:
.ps 11
.vs 13
.oS
OM_private_object newAttributeMod_priv;
     /* ...handle to a private object to "om_put()" to                */

OM_public_object newAttributeMod_pub;
     /* ...to hold public object from "om_get()"                      */

OM_type types_to_include[] = {DS_ATTRIBUTE_TYPE, DS_ATTRIBUTE_VALUES,
                              DS_MOD_TYPE, OM_NO_MORE_TYPES};
     /* ...that is, all attribute values of the Entry Modification    */
     /*  object.  For "om_put()" and "om_get()"                       */

char *my_string = "O brave new attribute"; 
     /* ...value I want to write into attribute                       */

OM_value_position number_of_descriptors;
     /* ...to hold value returned by "om_get()"                       */
.oE
.ps 12
.vs 14
.P
First, use XOM to generate a private object of the desired class:
.ps 11
.vs 13
.oS
omStatus = om_create(DS_C_ENTRY_MOD,  /* Class of object              */
                 OM_TRUE,   /* Initialize attributes per defaults     */
                 xdsWorkspace,  /* Our workspace handle               */
                 &newAttributeMod_priv);  /* Created object handle    */
.oE
.ps 12
.vs 14
.P
Next, copy the public object's attributes into the private object:
.ps 11
.vs 13
.oS
omStatus = om_put(newAttributeMod_priv, /* Private object to copy     */
                                        /*  attributes into           */
                 OM_REPLACE_ALL, /* Which attributes to replace in    */
                                  /*  destination object              */
                 Entry_Modification_Object, /* Source object to copy  */
                                             /*  attributes from      */
                 types_to_include, /* List of attribute types we      */
                                    /* want copied                    */
                 0, 0); /* Start-stop index for multivalued           */
                         /*  attributes; ignored with OM_REPLACE_ALL  */
.oE
.ps 12
.vs 14
.P
Since \*Lom_put(\|)\*O ignores the class of the source object (the object
from which attributes are being copied), it is not necessary to declare
class descriptors for the source objects.  In other words, the static
declarations could have omitted the \*LOM_CLASS\*O initializations if this
technique were being used, for example:
.oS
.ne 10
static OM_descriptor    Entry_Modification_Object_2[] = {

/*     OM_OID_DESC(OM_CLASS, DS_C_ENTRY_MOD),              */
/*     Not needed for "om_put()" ...                       */

     OM_OID_DESC(DS_ATTRIBUTE_TYPE, DSX_A_CDS_Class),
     {DS_ATTRIBUTE_VALUES, OM_S_PRINTABLE_STRING, \\
       OM_STRING("Miscellaneous")},
     {DS_MOD_TYPE, OM_S_ENUMERATION, DS_ADD_ATTRIBUTE},
     OM_NULL_DESCRIPTOR
};
.oE
.P
The \*LOM_CLASS\*O was already properly initialized by \*Lom_create(\|)\*O.
.P
Next, write the attribute value string into the private object:
.ps 11
.vs 12
.oS
omStatus = om_write(newAttributeMod_priv,/* Private object to write to */
                    DS_ATTRIBUTE_VALUES, /* Attribute type whose value */
                                         /*  we're writing             */
                    0, /* Descriptor index if attribute is multivalued */
                    OM_S_PRINTABLE_STRING, /* Syntax of value          */
                    0, /* Offset in source string to write from        */
                    my_string); /* Source string to write from         */
.oE
.ps 12
.vs 14
.P
.ne 10
Now make the whole thing public again:
.ps 11
.vs 13
.oS
omStatus = om_get(newAttributeMod_priv, /* Private object to get       */
                  0,                    /* Get everything              */
                  types_to_include,     /* All attribute types         */
                  0,                    /* Unsupported argument        */
                  0, 0, /* Start-stop descriptor index for multival-   */
                        /*  ued attributes; ignored in this case       */
                  &newAttributeMod_pub, /* Pointer to returned copy    */
                  &number_of_descriptors); /* Number of attribute      */
                                           /*  descriptors returned    */
.oE
.ps 12
.vs 14
.P
Finally, insert the address of the subobject into its superobject:
.oS
Entry_Modification_List_Object[1].value.object.object = \\
  newAttributeMod_pub;
.oE
.H 3 "Dynamic Creation of Objects"
...\" Coding technique discussed with Helmut: you can declare "template"
...\"  static descriptor arrays and use these as sources to om_put(\|) from
...\"  to om_create(\|)'d class instances.  In an application of any size 
...\"  this should cut down the declarations sizably.  Recode the first
...\"  example with this method.
.P
Objects can be completely dynamically allocated and initialized; however,
you have to implement the routines to do this yourself.
The examples in this section are code fragments; for complete examples,
see Chapter 7.
.P
Initialization of object structures can be automated by declaring macros
or functions to do this.  For example, the following macro initializes
one object descriptor with a full set of appropriate values:
.oS
/* Put a C-style (NULL-terminated) string into an object and */
/* set all the other descriptor fields to requested values   */
#define FILL_OMD_STRING( desc, index, typ, syntx, val ) \\
        desc[index].type = typ; \\
        desc[index].syntax = syntx; \\
        desc[index].value.string.length = \\
          (OM_element_position)strlen(val); \\
        desc[index].value.string.elements = val;
.oE
.P
.ne 6
When generating objects, use \*Lmalloc(\|)\*O to allocate
space for
the number of objects desired, and then use macros (or functions) such as the
preceding
one to initialize the descriptors.  The following code fragment shows how this
can be done for the top-level object of a \*LDS_C_DS_DN\*O, such as the one
described near the beginning of this chapter.  Recall that the \*LDS_C_DS_DN\*O
has a separate \*LDS_RDNS\*O descriptor for each name piece in the
full name.
.nL
.ps 11
.vs 13
.oS
/* Calculate number of "DS_RDNS" attributes there should be ... */
numberOfPieces = \*Vnumber_of_name_pieces\*C;

/* Allocate space for that many descriptors, plus one for the   */
/*  object class at the front, and a NULL descriptor at the     */
/*  back...                                                     */

Name_Object = (OM_object)malloc((numberOfPieces + 2) \\
 * sizeof(OM_descriptor));
if(Name_Object == NULL)                    /* "malloc()" failed */
return OM_MEMORY_INSUFFICIENT;

/* Initialize it as a DS_C_DS_DN object by placing that class   */
/*  identifier in the first position...                         */

FILL_OMD_XOM_STRING(Name_Object, 0, OM_CLASS,
    OM_S_OBJECT_IDENTIFIER_STRING, DS_C_DS_DN)
.oE
.ps 12
.vs 14
.P
.ne 5
Note that all of these steps would have to be repeated for each of the
\*LDS_C_DS_RDN\*O objects required as attribute values of the \*LDS_C_DS_DN\*O.
Then a tier of \*LDS_C_AVA\*O objects would have to be created in the
same way, since each of the \*LDS_C_DS_RDN\*Os requires one of them as
\*Vits\*O attribute value.
.P
You could now use \*Lom_create(\|)\*O and \*Lom_put(\|)\*O to generate a private
copy of this object, if so desired.
.P
The application is responsible for managing the memory it allocates
for such dynamic object creation.
.H 2 "XDS/CDS Object Recipes"
.P
The following subsections contain shorthand for object classes.
For example, if you look at the reference pages for the \*Lds_\*V*\*L(\|)\*O
functions, you will see that an object of class \*LDS_C_NAME\*O is required
to hold entry names you want to pass to the call, \*Vnot\*O \*LDS_C_DS_DN\*O
as is stated in this chapter.  However, \*LDS_C_NAME\*O is in fact an abstract
class with only one subclass, \*LDS_C_DS_DN\*O, so in this
chapter, \*LDS_C_DS_DN\*O is used.
.H 3 "Input XDS/CDS Object Recipes"
.P
In general, the objects you work with in an XDS/CDS application
fall into two categories:
.ML
.LI
Objects you have to supply as \*Einput parameters\*O to XDS functions
.LI
Objects returned to you as \*Eoutput\*O by XDS functions
.LE
.P
This section describes only the first category,
since you have to construct these input objects yourself.
.P
Table 3-1 shows XDS functions and the objects given to them
as input parameters.
.P
.ne 5
Only items significant to CDS are listed in the table.
\*LDS_C_SESSION\*O and \*LDS_C_CONTEXT\*O are ignored.
\*LDS_C_SESSION\*O is returned by \*Lds_bind(\|)\*O, which usually
receives the \*LDS_DEFAULT_SESSION\*O constant
as input.
\*LDS_C_CONTEXT\*O is
usually substituted by the \*LDS_\%DEFAULT_\%CONTEXT\*O constant.
.nS "note"
\*LDS_C_NAME\*O is an abstract class that has the single subclass
\*LDS_C_DS_DN\*O.  Therefore, \*LDS_C_NAME\*O is practically the same
thing as \*LDS_C_DS_DN\*O.
.nE
.P
.ne 22
.TB "Directory Service Functions with their Required Input Objects"
.TS H
box,tab(@),center;
lB | lB.
Function@Input Object
=
.TH
ds_add_entry(\|)@DS_C_NAME
@DS_C_ATTRIBUTE_LIST
_
ds_bind(\|)@\*ONone\*L
_
ds_compare(\|)@DS_C_NAME
@DS_C_AVA
_
ds_initialize(\|)@\*ONone\*L
_
ds_list(\|)@DS_C_NAME
_
ds_modify_entry(\|)@DS_C_NAME
@DS_C_ENTRY_MOD_LIST
_
ds_read(\|)@DS_C_NAME
@DS_C_ENTRY_INFO_SELECTION
_
ds_remove_entry(\|)@DS_C_NAME
_
ds_shutdown(\|)@\*ONone\*L
_
ds_unbind(\|)@\*ONone\*L
_
ds_version(\|)@\*ONone\*L
.TE
.nL
.ne 20
.H 3 "Input Object Classes for XDS/CDS Operations"
.P
The following subsections contain information about all the object
types required as input to any of the XDS functions that can be used to
access the CDS. In order to use these functions successfully, you must be
able to construct and modify the objects that the functions
expect as their input parameters.
XDS functions require most of their input parameters to be
wrapped in a nested series of data structures that represent
objects, and these functions deliver their output returns to callers in the
same object form.
.P
Objects that are returned to you by the interface are not difficult to
manipulate because
the \*Lom_get(\|)\*O function allows you to go through them and
retrieve only the value parts you are
interested in, and discard the parts of data structures you are not
interested in.
However, any objects you are
required to supply as \*Vinput\*O to an XDS or XOM function are another
matter: you must build and initialize these object structures yourself.
.P
The basics of object building have already been explained earlier in this
chapter.
Each object described in the
following subsections is accompanied by a static declaration in C of a very
simple instance of that object class.  The objects in an
application are usually built dynamically (this technique
was demonstrated earlier in this chapter).
The static declarations
that follow give a simple example of what the objects
look like.
.P
An object's properties, such as
what sort of values it can hold, how many of them
it can hold, and so on, are determined by the \*Vclass\*O the object belongs
to.
Each class consists of one or more \*Vattributes\*O that an
object can have.
The attributes hold whatever values the object contains.
Thus, the objects are data structures that all look the
same (and can be handled in the same way) from the outside,
but whose specific data fields are
determined by the class each object belongs to.
At the abstract level, objects
consist of attributes, just as structures consist fields.
.nL
.ne 15
.H 4 "XDS/CDS Object Types"
.P
Following is a list of all the object types that are
described in the following subsections.  Most of these
objects are object structures; that is, compounds consisting of
superobjects that contain subobjects as some of their values.
These latter
may in turn contain other objects, and so on.  Subobjects are indicated
by indentation.
A \*LDS_C_DS_DN\*O object contains at least one
\*LDS_C_DS_RDN\*O object, and each of the latter contains one
\*LDS_C_AVA\*O object.  Note that subobjects can, and often do, exist by
themselves, depending on what object class is called for by a given
function.  This list contains all the possible kinds of objects that can
be required as input for any XDS/CDS operation.
.ML
.LI
\*LDS_C_ATTRIBUTE_LIST\*O
.ML
.LI
\*LDS_C_ATTRIBUTE\*O
.LE
.LI
\*LDS_C_DS_DN\*O
.ML
.LI
\*LDS_C_DS_RDN\*O
.ML
.LI
\*LDS_C_AVA\*O
.LE
.LE
.LI
\*LDS_C_ENTRY_MOD_LIST\*O
.ML
.LI
\*LDS_C_ENTRY_MOD\*O
.LE
.LI
\*LDS_C_ENTRY_INFO_SELECTION\*O
.LE
.P
In each section, information is provided for the described object's
attributes.  All of its attributes are listed.
.P
The illustrations in the following sections can be compared to the same
object classes' tabular definitions later in this guide.
.H 4 "The \*LDS_C_ATTRIBUTE_LIST\*O Object"
.P
A \*LDS_C_ATTRIBUTE_LIST\*O class object is required as input to
\*Lds_add_entry(\|)\*O.
The object contains a list of the directory attributes
you want associated with the entry that is to be added.
.P
.ne 11
Its general structure is as follows:
.ML
.LI
Attribute List class type attribute
.LI
Zero or more Attribute objects:
.ML
.LI
Attribute class type attribute
.LI
Attribute Type attribute
.LI
Zero or more Attribute Value(s)
.LE
.LE
.P
Thus, a \*LDS_C_ATTRIBUTE_LIST\*O object containing one attribute
consists of two object descriptor arrays because
each additional attribute in
the list requires an additional descriptor array to represent it.
The subobject arrays' names (that is, addresses) are the contents of
the value fields in the \*LDS_ATTRIBUTES\*O object descriptors.
.P
Figure 3-9 shows the attributes of the \*LDS_C_ATTRIBUTE_LIST\*O object.
.P
.ne 5i
.FG "The DS_C_ATTRIBUTE_LIST Object"
.sp .5
.PS
.in +.6i
scale = 100
spline   from 509, 160 \
	to 549, 160 \
	to 557, 152 \
	to 565, 144 \
	to 571, 136 \
	to 573, 128 \
	to 571, 120 \
	to 567, 112 \
	to 557, 104 \
	to 549, 96 \
	to 533, 96 \
	to 93, 96 \
	to 85, 96 \
	to 79, 88 \
	to 75, 80 \
	to 73, 72 \
	to 71, 68 \
	to 73, 64 \
	to 77, 54 \
	to 81, 48 \
	to 87, 40 \
	to 109, 40 
line   from 85, 94 \
	to 85, 94 
line   from 573, 136 \
	to 573, 136 
line   from 509, 320 \
	to 549, 320 
line   from 229, 40 \
	to 269, 40 
line  dotted from 309, 80 \
	to 269, 80 \
	to 269, 0 \
	to 309, 0 
line  dotted from 589, 360 \
	to 549, 360 \
	to 549, 280 \
	to 591, 280 
"\fR\s8VALUES\s8\fR"  at 171, 58
"\fR\s8type=DS_ATTRIBUTE_\s8\fR"  at 169, 70
"\fR\s8VALUES\s8\fR"  at 451, 178
box dotted wid 120 ht 80 at 169, 40
line   from 349, 160 \
	to 389, 160 
line   from 189, 160 \
	to 229, 160 
line   from 349, 320 \
	to 391, 320 
"\fR\s8VALUES\s8\fR"  at 451, 178
"\fR\s8type=DS_ATTRIBUTE_\s8\fR"  at 449, 190
"\fR\s8IDENTIFIER_STRING\s8\fR"  at 293, 154
"\fR\s8syntax=OM_S_OBJECT_\s8\fR"  at 289, 168
"\fR\s8TYPE\s8\fR"  at 281, 180
"\fR\s8type=DS_ATTRIBUTE_\s8\fR"  at 287, 192
"\fR\s8type=DS_ATTRIBUTES\s8\fR"  at 447, 350
box dotted wid 120 ht 80 at 449, 320
"\fR\s8IDENTIFIER_STRING\s8\fR"  at 135, 162
"\fR\s8syntax=OM_S_OBJECT_\s8\fR"  at 131, 176
"\fR\s8type=OM_CLASS\s8\fR"  at 113, 190
line   from 189, 320 \
	to 229, 320 
box  wid 120 ht 80 at 449, 160
box  wid 120 ht 80 at 289, 160
box  wid 120 ht 80 at 129, 160
"\fR\s8[DS_C_ATTRIBUTE]\s8\fR"  at 297, 322
"\fR\s8syntax=OM_S_OBJECT\s8\fR"  at 287, 336
"\fR\s8type=DS_ATTRIBUTES\s8\fR"  at 287, 350
"\fR\s8IDENTIFIER_STRING\s8\fR"  at 135, 322
"\fR\s8syntax=OM_S_OBJECT_\s8\fR"  at 131, 336
box  wid 120 ht 80 at 289, 320
"\fR\s8type=OM_CLASS\s8\fR"  at 113, 350
box  wid 120 ht 80 at 129, 320
"\fR\s81 only\s8\fR"  at 127, 266
"\fR\s80 or more\s8\fR"  at 291, 268
"\fR\s81 only\s8\fR"  at 127, 106
"\fR\s81 only\s8\fR"  at 293, 108
"\fR\s81 or more\s8\fR"  at 457, 108
"\fR\s8value=DS_C_\s8\fR" ljust at 75, 308
"\fR\s8ATTRIBUTE_LIST\s8\fR" ljust at 87, 294
"\fR\s8value=[\ \ \ \ \ ]\s8\fR" ljust at 233, 304
"\fR\s8value=DS_C_\s8\fR" ljust at 75, 148
"\fR\s8ATTRIBUTE\s8\fR" ljust at 85, 134
"\fR\s8value=...\s8\fR" ljust at 233, 140
"\fR\s8syntax=any\s8\fR" ljust at 395, 166
"\fR\s8value=any\s8\fR" ljust at 395, 148
line ->  from 275, 304 \
	to 89, 202 
"\fR\s8DS_C_ATTRIBUTE Object\s8\fR"  at 67, 214
"\fR\s8DS_C_ATTRIBUTE_LIST Object\s8\fR"  at 81, 372
.in -.6i
.PE
.P
.ne 4
.ML
.LI
\*LOM_CLASS\*O
.P
The value of this attribute is an OID string that identifies
the object's class; its value is always \*LDS_C_ATTRIBUTE_LIST\*O.
.LI
\*LDS_ATTRIBUTES\*O
.P
This is an attribute whose value is another object of class
\*LDS_C_ATTRIBUTE\*O (see Section 3.5.2.3).
The attribute is defined by a
separate array of object descriptors whose base address is the value
of the \*LDS_ATTRIBUTES\*O attribute.
Note that there can be any number of
instances of this attribute, and therefore any number of subobjects.
.LE
.H 4 "The \*LDS_C_ATTRIBUTE\*O Object"
.P
An object of this class can be an attribute of a \*LDS_C_ATTRIBUTE_LIST\*O
object (see Section 3.5.2.2).
.ML
.LI
\*LOM_CLASS\*O
.P
The value of this attribute is an OID string that identifies
the object's class; its value is always \*LDS_C_ATTRIBUTE\*O.
.LI
\*LDS_ATTRIBUTE_TYPE\*O
.P
The value of this attribute, which is an OID string, identifies the
directory attribute whose value is contained in this object.
.LI
\*LDS_ATTRIBUTE_VALUES\*O
.P
These are the actual values for the directory attribute represented by
this \*LDS_C_ATTRIBUTE\*O object.  Both the value syntax and the number of
values depend on what directory attribute this is; that is,
they depend on the value of \*LDS_ATTRIBUTE_VALUE\*O.
.LE
.H 4 "Example Definition of a \*LDS_C_ATTRIBUTE_LIST\*O Object"
.P
The following code fragment is a definition of a
\*LDS_\%C_\%ATTRIBUTE_LIST\*O object.
.oS
static OM_descriptor    Single_Attribute_Object[] = {
 OM_OID_DESC(OM_CLASS, DS_C_ATTRIBUTE),
 OM_OID_DESC(DS_ATTRIBUTE_TYPE, DSX_A_CDS_Class),
 {DS_ATTRIBUTE_VALUES, OM_S_PRINTABLE_STRING, \\
   OM_STRING("Printer")},
 OM_NULL_DESCRIPTOR
};

static OM_descriptor    Attribute_List_Object[] = {
 OM_OID_DESC(OM_CLASS, DS_C_ATTRIBUTE_LIST),
 {DS_ATTRIBUTES, OM_S_OBJECT, {0, Single_Attribute_Object}},
 OM_NULL_DESCRIPTOR
};
.oE
.H 4 "The \*LDS_C_DS_DN\*O Object"
.P
\*LDS_C_DS_DN\*O class objects are used to hold the full names of directory
entries (distinguished names).
You
need an object of this class to pass directory entry names to the following
XDS functions:
.ML
.LI
\*Lds_add_entry(\|)\*O
.LI
\*Lds_compare(\|)\*O
.LI
\*Lds_list(\|)\*O
.LI
\*Lds_modify_entry(\|)\*O
.LI
\*Lds_read(\|)\*O
.LI
\*Lds_remove_entry(\|)\*O
.LE
.P
Figure 3-10 shows the attributes of a \*LDS_C_DS_DN\*O object.
.P
.ne 5i
.FG "DS_C_DS_DN Object Attributes"
.sp .5
.PS
.in +.5i
scale = 100
"\fR\s8[DS_C_DS_RDN]\s8\fR" ljust at 248, 373
"\fR\s8value=DS_C_DS_DN\s8\fR" ljust at 62, 357
line   from 498, 213 \
	to 530, 213 
line   from 498, 373 \
	to 538, 373 
line  dotted from 578, 413 \
	to 538, 413 \
	to 538, 333 \
	to 580, 333 
line   from 338, 213 \
	to 378, 213 
line   from 178, 213 \
	to 218, 213 
line   from 338, 373 \
	to 380, 373 
box dotted wid 120 ht 80 at 438, 373
line   from 178, 373 \
	to 218, 373 
line ->  from 266, 359 \
	to 114, 257 
box  wid 120 ht 80 at 118, 213
box  wid 120 ht 80 at 278, 373
box  wid 120 ht 80 at 118, 373
"\fR\s8syntax=OM_S_OBJECT\s8\fR" ljust at 222, 387
"\fR\s8value=[\ \ \ \ \ ]\s8\fR" ljust at 222, 357
"\fR\s8type=OM_CLASS\s8\fR" ljust at 62, 403
"\fR\s8syntax=OM_S_OBJECT_\s8\fR" ljust at 62, 389
"\fR\s8IDENTIFIER_STRING\s8\fR" ljust at 68, 375
"\fR\s8type=OM_CLASS\s8\fR" ljust at 62, 243
"\fR\s8syntax=OM_S_OBJECT_\s8\fR" ljust at 62, 231
"\fR\s8IDENTIFIER_STRING\s8\fR" ljust at 68, 217
"\fR\s8type=DS_RDNS\s8\fR" ljust at 222, 403
"\fR\s81 only\s8\fR"  at 116, 325
"\fR\s81 or more\s8\fR"  at 280, 325
"\fR\s8type=DS_RDNS\s8\fR" ljust at 384, 403
"\fR\s8value=DS_D_DS_RDN\s8\fR" ljust at 62, 197
box dotted wid 120 ht 80 at 438, 213
"\fR\s8type=DS_AVAS\s8\fR" ljust at 224, 243
"\fR\s8syntax=OM_S_OBJECT\s8\fR" ljust at 224, 229
"\fR\s8[DS_C_AVA]\s8\fR" ljust at 260, 215
"\fR\s8value=[\ \ \ \ \ ]\s8\fR" ljust at 224, 197
box  wid 120 ht 80 at 278, 213
line  dotted from 572, 253 \
	to 532, 253 \
	to 532, 173 \
	to 572, 173 
"\fR\s8type=DS_AVAS\s8\fR" ljust at 384, 243
box  wid 120 ht 80 at 118, 53
box  wid 120 ht 80 at 278, 53
box  wid 120 ht 80 at 438, 53
line   from 178, 53 \
	to 218, 53 
line   from 338, 53 \
	to 378, 53 
line ->  from 266, 197 \
	to 110, 95 
"\fR\s8syntax=OM_S_OBJECT_\s8\fR" ljust at 64, 67
"\fR\s8type=OM_CLASS\s8\fR" ljust at 64, 81
"\fR\s8IDENTIFIER_STRING\s8\fR" ljust at 68, 53
"\fR\s8value=DS_C_AVA\s8\fR" ljust at 64, 35
"\fR\s8TYPE\s8\fR" ljust at 262, 69
"\fR\s8type=DS_ATTRIBUTE_\s8\fR" ljust at 222, 83
"\fR\s8syntax=OM_S_OBJECT_\s8\fR" ljust at 222, 55
"\fR\s8IDENTIFIER_STRING\s8\fR" ljust at 228, 43
"\fR\s8value=...\s8\fR" ljust at 222, 27
"\fR\s8type=DS_ATTRIBUTE_\s8\fR" ljust at 382, 83
"\fR\s8VALUES\s8\fR" ljust at 426, 69
"\fR\s8syntax=any\s8\fR" ljust at 382, 53
"\fR\s8value=...\s8\fR" ljust at 382, 29
"\fR\s81 only\s8\fR"  at 122, 163
"\fR\s81 or more\s8\fR"  at 282, 163
"\fR\s81 only\s8\fR"  at 122, 3
"\fR\s81 only\s8\fR"  at 282, 3
"\fR\s81 only\s8\fR"  at 440, 3
"\fR\s8DS_C_DS_RDN Object\s8\fR"  at 58, 263
"\fR\s8DS_C_AVA Object\s8\fR"  at 50, 103
"\fR\s8DS_C_DS_DN Object\s8\fR"  at 54, 423
.in -.5i
.PE
.sp .5
.P
.ML
.LI
\*LOM_CLASS\*O
.P
The value of this attribute is an OID string that identifies
the object's class; its value is \*LDS_C_DS_DN\*O.
.LI
\*LDS_RDNS\*O
.P
This is an attribute whose value is another object
of class \*LDS_C_DS_RDN\*O (see
Section 3.5.2.6).
The \*LDS_C_DS_RDN\*O object is
defined by a
separate array of object descriptors whose base address is the value
of the \*LDS_RDNS\*O attribute.
.P
There are as many \*LDS_RDNS\*O attributes in a \*LDS_C_DS_DN\*O object
as there are separate name components in the full directory entry name.
For example, suppose you wanted to represent the following CDS entry name:
.iS
/.../C=US/O=OSF/OU=DCE/hosts/brazil/self
.iE
.P
.ne 7
This would require a total of six instances of the \*LDS_RDNS\*O 
attribute in the \*LDS_C_DS_DN\*O object.
The \*L/.../\*O (global root prefix) is
not represented.  This means that
another six object descriptor arrays are required to hold the
RDN objects, as well as six object descriptors in
the present object, one to hold (as the value of a \*LDS_RDNS\*O attribute)
a pointer to each array.
.P
Note that the order of these \*LDS_RDNS\*O attributes is significant; that
is, the first \*LDS_RDNS\*O should contain as its value a pointer to the
array representing the \*LC=US\*O part of the name; the next \*LDS_RDNS\*O
should contain as its value a pointer to the array representing the
\*LO=OSF\*O part, and so on.  The root part of the name is not represented
at all.
.LE
.H 4 "The \*LDS_C_DS_RDN\*O Object"
.P
\*LDS_C_DS_RDN\*O class objects are required as values for the \*LDS_RDNS\*O
attributes of \*LDS_C_DS_DN\*O objects.
(For an illustration of its
structure, see Figure 3-10.)
\*LRDN\*O
refers to the X.500 term RDN that is used to signify a
part of a full entry name.
Separate objects of this class are not usually
required as input to XDS functions.
.P
The standard permits multiple AVAs in an RDN, but the DCE Directory and
XDS API restrict an RDN to one AVA.
.ML
.LI
\*LOM_CLASS\*O
.P
The value of this attribute is an OID string that identifies
the object's class; its value is always \*LDS_C_DS_RDN\*O.
.LI
\*LDS_AVAS\*O
.P
This is an attribute whose value is yet another object
of class \*LDS_C_AVA\*O (see Section
3.5.2.7).
The \*LDS_C_AVA\*O object is defined by a
separate array of object descriptors whose base address is the value
of the \*LDS_AVAS\*O attribute.
.P
Note that there can only be one instance of this attribute in
the \*LDS_C_RDN\*O object.
The object descriptor array describing
this object always consists of three object descriptor structures:
the first describes the object's class, the second
describes the \*LDS_AVAS\*O
attribute, and the third descriptor is the terminating
NULL.
.LE
.H 4 "The \*LDS_C_AVA\*O Object"
.P
The \*LDS_C_AVA\*O class object is used to hold an actual value.
The value is usually in the form of one of the many different XOM string
types. (For an illustration of its structure, see Figure 3-10.)
.P
In calls to \*Lds_compare(\|)\*O, an object of this type is required to hold
the type and value of the attribute that you want compared with those in
the entry you specify.
It holds the type and value in a separate \*LDS_C_DS_DN\*O object.
.P
\*LDS_C_AVA\*O is also included here because it is a required subsubobject
of \*LDS_C_DS_DN\*O itself.
\*LDS_C_AVA\*O is the subobject in which the name
part's actual literal value is held.
.ML
.LI
\*LOM_CLASS\*O
.P
The value of this attribute is an OID string that identifies
the object's class; its value is always \*LDS_C_AVA\*O.
.LI
\*LDS_ATTRIBUTE_TYPE\*O
.P
The value of this attribute, which is an OID string, identifies the
directory attribute whose value is contained in this object.
.LI
\*LDS_ATTRIBUTE_VALUES\*O
.P
This is the literal value of what is represented by this \*LDS_C_AVA\*O
object.
.P
If the \*LDS_C_AVA\*O object
is a subobject of \*LDS_C_DS_RDN\*O (and therefore also of
\*LDS_C_DS_DN\*O), then the value is a string representing
the part of the directory entry name represented by this object.  For
example, if the \*LDS_C_DS_RDN\*O object
contains the \*LO=OSF\*O part of an entry
name, then the string \*LOSF\*O is
the value of the \*LDS_ATTRIBUTE_VALUES\*O
attribute, and \*LDS_A_COUNTRY_NAME\*O is the value of the
\*LDS_ATTRIBUTE_TYPE\*O attribute.
.P
On the other hand, if \*LDS_C_AVA\*O contains an entry attribute type
and value to be passed to \*Lds_compare(\|)\*O,
then \*LDS_ATTRIBUTE_TYPE\*O identifies the type of the
attribute, and \*LDS_ATTRIBUTE_VALUES\*O contains a value, which is
appropriate for the attribute type,
to be compared with the entry value.
.P
.ne 9
For example, suppose you wanted to compare a certain value with a CDS entry's
\*LCDS_Class\*O attribute's value.  The identifiers for all the valid CDS
entry attributes are found in the file 
\*L/.:/opt/dcelocal/etc/cds_attributes\*O.
The value of \*LDS_\%ATTRIBUTE_\%TYPE\*O would be \*LCDS_Class\*O,
which is the label of an object identifier string, and \*LDS_ATTRIBUTE_VALUES\*O
would contain some desired value, in the correct syntax for \*LCDS_Class\*O.
The syntax also is found in the \*Lcds_attributes\*O file; for \*LCDS_Class\*O
it is \*Lbyte\*O; that is, a character string.
.LE
.H 4 "Example Definition of a \*LDS_C_DS_DN\*O Object"
.P
The following code fragment shows an example definition for a
\*LDS_C_DS_DN\*O object.
.oS
static OM_descriptor    Entry_String_Object[] = {
 OM_OID_DESC(OM_CLASS, DS_C_AVA),
 OM_OID_DESC(DS_ATTRIBUTE_TYPE, DSX_TYPELESS_RDN),
 {DS_ATTRIBUTE_VALUES, OM_S_PRINTABLE_STRING, \\
   OM_STRING("brazil")},
 OM_NULL_DESCRIPTOR
};

static OM_descriptor    Entry_Part_Object[] = {
 OM_OID_DESC(OM_CLASS, DS_C_DS_RDN),
 {DS_AVAS, OM_S_OBJECT, {0, Entry_String_Object}},
 OM_NULL_DESCRIPTOR
};

static OM_descriptor    Entry_Name_Object[] = {
 OM_OID_DESC(OM_CLASS, DS_C_DS_DN),
 {DS_RDNS, OM_S_OBJECT, {0, Entry_Part_Object}},
 OM_NULL_DESCRIPTOR
};
.oE
.H 4 "The \*LDS_C_ENTRY_MOD_LIST\*O Object"
.P
\*LDS_C_ENTRY_MOD_LIST\*O class
objects, which contain a list of changes to be made to some
directory entry, must be passed to \*Lds_modify_entry(\|)\*O.
\*LDS_C_ENTRY_MOD_LIST\*O objects have the
attributes shown in Figure 3-11.
.P
.FG "The DS_C_ENTRY_MOD_LIST Object"
.sp .5
.PS
.in +.6i
scale = 100
"\fR\s8DS_C_ENTRY_MOD_LIST Object\s8\fR"  at 109, 387
"\fR\s8DS_C_ENTRY_MOD Object\s8\fR"  at 93, 229
"\fR\s81 only\s8\fR"  at 177, 3
"\fR\s80 or more\s8\fR"  at 461, 125
"\fR\s81 only\s8\fR"  at 297, 125
"\fR\s81 only\s8\fR"  at 137, 125
"\fR\s81 or more\s8\fR"  at 301, 285
"\fR\s81 only\s8\fR"  at 137, 285
"\fR\s8VALUES\s8\fR" ljust at 319, 73
"\fR\s8type=DS_ATTRIBUTE\s8\fR" ljust at 277, 87
line   from 393, 55 \
	to 433, 55 
line  dotted from 473, 95 \
	to 433, 95 \
	to 433, 15 \
	to 473, 15 
box dotted wid 120 ht 80 at 333, 55
"\fR\s8ATTRIBUTE\s8\fR" ljust at 159, 23
"\fR\s8value=DS_ADD_\s8\fR" ljust at 117, 35
"\fR\s8ENUMERATION\s8\fR" ljust at 150, 47
"\fR\s8syntax=OM_S_\s8\fR" ljust at 117, 59
"\fR\s8CATION_TYPE\s8\fR" ljust at 153, 71
"\fR\s8type=DS_MODIFI-\s8\fR" ljust at 117, 85
"\fR\s8value=...\s8\fR" ljust at 397, 161
"\fR\s8VALUES\s8\fR" ljust at 437, 193
"\fR\s8type=DS_ATTRIBUTE\s8\fR" ljust at 397, 205
"\fR\s8OID>\s8\fR" ljust at 293, 141
"\fR\s8value=<attribute\s8\fR" ljust at 239, 153
"\fR\s8IDENTIFIER_STRING\s8\fR" ljust at 241, 167
"\fR\s8syntax=OM_S_OBJECT_\s8\fR" ljust at 237, 181
"\fR\s8TYPE\s8\fR" ljust at 275, 193
"\fR\s8type=DS_ATTRIBUTE_\s8\fR" ljust at 237, 205
"\fR\s8MOD\s8\fR" ljust at 87, 149
"\fR\s8value=DS_C_ENTRY_\s8\fR" ljust at 77, 163
spline   from 513, 175 \
	to 553, 175 \
	to 559, 167 \
	to 565, 159 \
	to 569, 151 \
	to 571, 143 \
	to 569, 135 \
	to 565, 127 \
	to 557, 119 \
	to 549, 111 \
	to 523, 109 \
	to 185, 111 \
	to 89, 111 \
	to 83, 99 \
	to 79, 91 \
	to 79, 83 \
	to 81, 75 \
	to 85, 67 \
	to 93, 55 \
	to 113, 55 
"\fR\s8type=DS_CHANGES\s8\fR" ljust at 399, 365
line ->  from 279, 309 \
	to 91, 217 
"\fR\s8value=[     ]\s8\fR" ljust at 237, 309
"\fR\s8MOD]\s8\fR" ljust at 267, 325
"\fR\s8[DS_C_ENTRY_\s8\fR" ljust at 263, 337
"\fR\s8syntax=OM_S_OBJECT\s8\fR" ljust at 237, 351
"\fR\s8type=DS_CHANGES\s8\fR" ljust at 237, 365
"\fR\s8LIST\s8\fR" ljust at 83, 301
"\fR\s8MOD_\s8\fR" ljust at 83, 313
"\fR\s8value=DS_C_ENTRY_\s8\fR" ljust at 77, 325
"\fR\s8IDENTIFIER_STRING\s8\fR" ljust at 83, 179
"\fR\s8IDENTIFIER_STRING\s8\fR" ljust at 81, 337
box  wid 120 ht 80 at 173, 55
line   from 513, 335 \
	to 553, 335 
line   from 233, 55 \
	to 273, 55 
line  dotted from 593, 375 \
	to 553, 375 \
	to 553, 295 \
	to 595, 295 
line   from 353, 175 \
	to 393, 175 
line   from 193, 175 \
	to 233, 175 
line   from 353, 335 \
	to 395, 335 
box dotted wid 120 ht 80 at 453, 335
line   from 193, 335 \
	to 233, 335 
box  wid 120 ht 80 at 453, 175
box  wid 120 ht 80 at 293, 175
box  wid 120 ht 80 at 133, 175
box  wid 120 ht 80 at 293, 335
box  wid 120 ht 80 at 133, 335
"\fR\s8syntax=any\s8\fR" ljust at 397, 177
"\fR\s8type=OM_CLASS\s8\fR" ljust at 77, 365
"\fR\s8syntax=OM_S_OBJECT_\s8\fR" ljust at 77, 351
"\fR\s8type=OM_CLASS\s8\fR" ljust at 77, 205
"\fR\s8syntax=OM_S_OBJECT_\s8\fR" ljust at 77, 193
.in -.6i
.PE
.sp .5
.P
.ML
.LI
\*LOM_CLASS\*O
.P
The value of this attribute is an OID string that identifies
the object's class; its value is always \*LDS_C_ENTRY_MOD_LIST\*O.
.LI
\*LDS_CHANGES\*O
.P
This is an attribute whose value is another object
of class \*LDS_C_ENTRY_MOD\*O
(see Section 3.5.2.10).
The \*LDS_\%C_\%ENTRY_\%MOD\*O object is defined by a
separate array of object descriptors whose base address is the value
of the \*LDS_CHANGES\*O attribute.
.P
Note that there can be one or more instances of this attribute in the object,
which is why it is called \*L_LIST\*O.
Each attribute contains one separate
entry modification.  To learn how the modification itself is specified, see
Section 3.5.2.10.
The order of multiple instances of this attribute is significant
because if more
than one modification is specified, the modifications are performed by
\*Lds_modify_entry(\|)\*O in the order in which the \*LDS_CHANGES\*O attributes
appear in the \*LDS_C_ENTRY_MOD_LIST\*O object.
.LE
.H 4 "The \*LDS_C_ENTRY_MOD\*O Object"
.P
The \*LDS_C_ENTRY_MOD\*O class object
holds the information associated
with a directory entry modification.
(For an illustration of its structure,
see Figure 3-11.) Each \*LDS_C_ENTRY_MOD\*O object describes
one modification.
To create a list of modifications suitable to be passed
to a \*Lds_modify_entry(\|)\*O call, describe each modification
in a separate \*LDS_C_ENTRY_MOD\*O object, and then insert these
objects as multiple instances of the \*LDS_CHANGES\*O attribute in a
\*LDS_\%C_\%ENTRY_\%MOD_\%LIST\*O object (see Section 3.5.2.9).
.ML
.LI
\*LOM_CLASS\*O
.P
The value of this attribute is an OID string that identifies
the object's class; its value is always \*LDS_C_ENTRY_MOD\*O.
.LI
\*LDS_ATTRIBUTE_TYPE\*O
.P
The value of this attribute, which is an OID string, identifies the
directory attribute whose modification is described in this object.
.LI
\*LDS_ATTRIBUTE_VALUES\*O
.P
These are the values required for the entry modification; their
type and number depend on both the entry type and the modification
requested.
.LI
.ne 12
\*LDS_MOD_TYPE\*O
.P
The value of this attribute identifies the kind of modification requested.
It can be one of the following:
.ML 
.LI 
\*LDS_ADD_ATTRIBUTE\*O
.P
The attribute specified by \*LDS_ATTRIBUTE_TYPE\*O is not currently in
the entry.  It should be added, along
with the value(s) specified by \*LDS_ATTRIBUTE_VALUES\*O,
to the entry.
The entry itself is specified in a separate
\*LDS_C_DS_DN\*O object, which is also passed to \*Lds_modify_entry(\|)\*O.
.LI 
\*LDS_ADD_VALUES\*O
.P
The specified attribute is currently in the entry.  The value(s) specified by
\*LDS_ATTRIBUTE_VALUES\*O should be added to it.
.LI 
\*LDS_REMOVE_ATTRIBUTE\*O
.P
The specified attribute is currently in the entry and should be
deleted from the entry.  Any values specified by \*LDS_\%ATTRIBUTE_\%VALUES\*O
are ignored.
.LI 
\*LDS_REMOVE_VALUES\*O
.P
The specified attribute is currently in the entry.  One or more values, specified
by \*LDS_ATTRIBUTE_VALUES\*O, should be removed from it.
.LE
.LE
.H 4 "Example Definition of a \*LDS_C_ENTRY_MOD_LIST\*O Object"
.P
The following code fragment is an example definition of a
\*LDS_C_ENTRY_MOD_LIST\*O object.
.oS
.ne 15
OM_string my_uuid;

static OM_descriptor    Entry_Mod_Object[] = {
 OM_OID_DESC(OM_CLASS, DS_C_ENTRY_MOD),
 OM_OID_DESC(DS_ATTRIBUTE_TYPE, DSX_UUID),
 {DS_ATTRIBUTE_VALUES, OM_S_OCTET_STRING, my_uuid},
 {DS_MOD_TYPE, OM_S_ENUMERATION, DS_ADD_ATTRIBUTE},
 OM_NULL_DESCRIPTOR
};

static OM_descriptor    Entry_Mod_List_Object[] = {
 OM_OID_DESC(OM_CLASS, DS_C_ENTRY_MOD_LIST),
 {DS_CHANGES, OM_S_OBJECT, {0, Entry_Mod_Object}},
 OM_NULL_DESCRIPTOR
};
.oE
.H 4 "The \*LDS_C_ENTRY_INFO_SELECTION\*O Object"
.P
When you call \*Lds_read(\|)\*O to read one or more attributes from a CDS entry,
you specify in the \*LDS_C_ENTRY_INFO_SELECTION\*O
object the entry attributes you want to read.
.P
The \*LDS_C_ENTRY_INFO_SELECTION\*O
object contains the attributes shown in Figure 3-12.
.P
.FG "The DS_C_ENTRY_INFO_SELECTION Object"
.sp .5
.PS
.in +.6i
scale = 100
"\fR\s8UTES_SELECTED\s8\fR" ljust at 280, 69
"\fR\s8type=DS_ATTRIB-\s8\fR" ljust at 260, 83
"\fR\s8UTES_SELECTED\s8\fR" ljust at 402, 191
"\fR\s8type=DS_ATTRIB-\s8\fR" ljust at 380, 203
"\fR\s8INFO_TYPE\s8\fR" ljust at 104, 71
"\fR\s8IDENTIFIER_STRING\s8\fR" ljust at 386, 163
"\fR\s8IDENTIFIER_STRING\s8\fR" ljust at 64, 175
"\fR\s8value=DS_C_ENTRY_\s8\fR" ljust at 60, 163
"\fR\s8BOOLEAN\s8\fR" ljust at 256, 165
"\fR\s8value=OM_TRUE or\s8\fR" ljust at 220, 151
"\fR\s8syntax=OM_S_\s8\fR" ljust at 220, 179
"\fR\s8OM_FALSE\s8\fR" ljust at 252, 139
"\fR\s8DS_C_ENTRY_INFO_SELECTION Object\s8\fR"  at 120, 225
"\fR\s81 only\s8\fR"  at 160, 3
"\fR\s80 or more\s8\fR"  at 444, 123
"\fR\s81 only\s8\fR"  at 278, 123
"\fR\s81 only\s8\fR"  at 116, 123
"\fR\s8AND_VALUES\s8\fR" ljust at 118, 23
"\fR\s8value=DS_TYPES_\s8\fR" ljust at 100, 35
"\fR\s8ENUMERATION\s8\fR" ljust at 118, 47
"\fR\s8syntax=OM_S_\s8\fR" ljust at 100, 59
"\fR\s8type=DS_\s8\fR" ljust at 100, 85
"\fR\s8OID>\s8\fR" ljust at 434, 139
"\fR\s8value=<attribute\s8\fR" ljust at 380, 151
"\fR\s8syntax=OM_S_OBJECT_\s8\fR" ljust at 380, 177
"\fR\s8value=DS_C_ENTRY_\s8\fR" ljust at 60, 163
"\fR\s8value=DS_C_ENTRY_\s8\fR" ljust at 60, 163
"\fR\s8ATTRIBUTES\s8\fR" ljust at 258, 191
"\fR\s8type=DS_ALL_\s8\fR" ljust at 220, 203
"\fR\s8SELECTION\s8\fR" ljust at 70, 139
"\fR\s8INFO_\s8\fR" ljust at 70, 151
"\fR\s8value=DS_C_ENTRY_\s8\fR" ljust at 60, 163
line   from 376, 53 \
	to 416, 53 
line  dotted from 456, 93 \
	to 416, 93 \
	to 416, 13 \
	to 458, 13 
line   from 216, 53 \
	to 256, 53 
spline   from 496, 173 \
	to 536, 173 \
	to 544, 165 \
	to 548, 153 \
	to 552, 149 \
	to 552, 141 \
	to 552, 133 \
	to 548, 125 \
	to 540, 117 \
	to 532, 109 \
	to 256, 109 \
	to 76, 109 \
	to 68, 101 \
	to 64, 93 \
	to 64, 81 \
	to 68, 69 \
	to 76, 61 \
	to 84, 53 \
	to 96, 53 
box  wid 120 ht 80 at 436, 173
box dotted wid 120 ht 80 at 316, 53
box  wid 120 ht 80 at 156, 53
line   from 336, 173 \
	to 378, 173 
line   from 176, 173 \
	to 216, 173 
box  wid 120 ht 80 at 276, 173
box  wid 120 ht 80 at 116, 173
"\fR\s8type=OM_CLASS\s8\fR" ljust at 60, 203
"\fR\s8syntax=OM_S_OBJECT_\s8\fR" ljust at 60, 189
.in -.6i
.PE
.sp .5
.P
.ne 6
Note that this object class has no subobjects.
.ML
.LI
\*LOM_CLASS\*O
.P
The value of this attribute is an OID string that
identifies the object's class; its value is always
\*LDS_C_ENTRY_INFO_SELECTION\*O.
.LI
\*LDS_ALL_ATTRIBUTES\*O
.P
This attribute is a simple Boolean option whose value indicates whether
all the entry's attributes are to be read, or only some of them.  Its
possible values are as follows:
.ML
.LI
\*LOM_TRUE\*O, meaning
that all attributes in the directory entry should be read.  Any values
specified by the \*LDS_\%ATTRIBUTES_\%SELECTED\*O attribute are ignored.
.LI
\*LOM_FALSE\*O, meaning
that only some of the entry attributes should be read; namely, those
specified by the \*LDS_\%ATTRIBUTES_\%SELECTED\*O attribute.
.LE
.LI
\*LDS_ATTRIBUTES_SELECTED\*O
.P
The value of this attribute, which is an OID string,
identifies the entry attribute to be read.  Note that this attribute's
value has meaning only if the value of \*LDS_ALL_ATTRIBUTES\*O is \*LOM_FALSE\*O;
if it is \*LOM_TRUE\*O, the value of \*LDS_ATTRIBUTES_SELECTED\*O is ignored.
.P
Note also that there are multiple instances of this attribute if more than
one attribute, but not all of them, is to be selected for reading.  Each
separate instance of \*LDS_ATTRIBUTES_SELECTED\*O has as its value an
OID string that identifies one directory entry attribute to be read.  If
\*LDS_ATTRIBUTES_SELECTED\*O is present but does not have
a value, \*Lds_read(\|)\*O
reads the entry but does not return any attribute data; this technique can
be used to verify the existence of a directory entry.
.LI
\*LDS_INFO_TYPE\*O
.P
The value of this attribute specifies what information is to be read from
each attribute specified by \*LDS_ATTRIBUTES_SELECTED\*O.  The two possible
values are as follows:
.ML 
.LI
\*LDS_TYPES_ONLY\*O, meaning that
only the attribute types of the selected attributes should be read.
.LI
\*LDS_TYPES_AND_VALUES\*O, meaning that
both the attribute types and the attribute values of the selected attributes
should be read.
.LE
.LE
.nL
.ne 15
.H 4 "Example Definition of a \*LDS_C_ENTRY_INFO_SELECTION\*O Object"
.P
The following code fragment provides an example definition of a
\*LDS_C_ENTRY_INFO_SELECTION\*O object.
.oS
static OM_descriptor    Entry_Info_Select_Object[] = {
 OM_OID_DESC(OM_CLASS, DS_C_ENTRY_INFO_SELECTION),
 OM_OID_DESC(DS_ATTRIBUTES_SELECTED, DSX_A_CDS_Class),
 {DS_ALL_ATTRIBUTES, OM_S_BOOLEAN, OM_FALSE},
 {DS_INFO_TYPE, OM_S_ENUMERATION, DS_TYPES_AND_VALUES},
 OM_NULL_DESCRIPTOR
};
.oE
.H 2 "Attribute and Data Type Translation"
.P
This section provides translations between CDS and XDS for attributes and
data types.
Table 3-2 provides the OM syntax for CDS attributes.
Table 3-3 provides the OM syntax for CDS data types.
Table 3-4 defines the mapping of the CDS Data Types to OM Syntaxes.
.P
.ne 4i
.TB "CDS Attributes to OM Syntax Translation"
.TS H
box,tab(@),center;
lB | lB.
CDS Attribute@OM Syntax
=
.TH
CDS_CTS@OM_S_OCTET_STRING
CDS_UTS@OM_S_OCTET_STRING
CDS_Class@OM_S_OCTET_STRING
CDS_ClassVersion@OM_S_INTEGER
CDS_ObjectUID@OM_S_OCTET_STRING
CDS_AllUpTo@OM_S_OCTET_STRING
CDS_Convergence@OM_S_INTEGER
CDS_InCHName@OM_S_INTEGER
CDS_DirectoryVersion@OM_S_INTEGER
CDS_UpgradeTo@OM_S_INTEGER
CDS_LinkTimeout@OM_S_INTEGER
CDS_Towers@OM_S_OCTET_STRING
.TE
.sp .5
.P
.TB "OM Syntax to CDS Data Types Translation"
.TS H
box,tab(@),center;
lB | lB.
OM Syntax@CDS Data Type
=
.TH
OM_S_TELETEX_STRING@cds_char
OM_S_OBJECT_IDENTIFIER_STRING@cds_byte
OM_S_OCTET_STRING@cds_byte
OM_S_PRINTABLE_STRING@cds_char
OM_S_NUMERIC_STRING@cds_char
OM_S_BOOLEAN@cds_long
OM_S_INTEGER@cds_long
OM_S_UTC_TIME_STRING@cds_char
OM_S_ENCODING_STRING@cds_byte
.TE
.P
.ne 4i
.TB "CDS Data Types to OM Syntax Translation"
.TS H
box,tab(@),center;
lB | lB.
CDS Data Type@OM Syntax
_
.TH
cds_none@OM_S_NULL
cds_long@OM_S_INTEGER
cds_short@OM_S_INTEGER
cds_small@OM_S_INTEGER
cds_uuid@OM_S_OCTET_STRING
cds_Timestamp@OM_S_OCTET_STRING
cds_Version@OM_S_PRINTABLE_STRING
cds_char@OM_S_TELETEX_STRING
cds_byte@OM_S_OCTET_STRING
.TE
