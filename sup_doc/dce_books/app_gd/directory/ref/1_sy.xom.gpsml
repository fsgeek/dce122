...\"
...\" @OSF_COPYRIGHT@
...\" COPYRIGHT NOTICE
...\" Copyright (c) 1990, 1991, 1992, 1993 Open Software Foundation, Inc.
...\" ALL RIGHTS RESERVED (DCE).  See the file named COPYRIGHT.DCE in the
...\" src directory for the full copyright text.
...\"
...\"
...\" HISTORY
...\" $Log: 1_sy.xom.gpsml,v $
...\" Revision 1.1.10.1  1996/09/03  18:40:44  wardr
...\" 	{enh,R1.2.2}
...\" 	Update for sgml conversion
...\" 	[1996/09/03  18:39:51  wardr]
...\"
...\" Revision 1.1.8.8  1995/06/15  16:25:48  rcb
...\" 	edited 1.1 version, PRENTICE HALL reformat
...\" 	[1995/06/13  19:36:05  rcb]
...\" 
...\" 	edited 1.1 version, PRENTICE HALL reformat
...\" 	[1995/06/12  20:07:30  rcb]
...\" 
...\" Revision 1.1.8.7  1994/08/05  15:45:51  rnollman
...\" 	[rnollman] - Checkin after OSF edits
...\" 	[1994/08/05  15:45:29  rnollman]
...\" 
...\" 	[rnollman] - checkin afaterafter incorporating OSF edits
...\" 
...\" Revision 1.1.8.4  1994/05/14  22:41:11  rnollman
...\" 	last beta submittal
...\" 	[1994/05/14  22:36:02  rnollman]
...\" 
...\" Revision 1.1.8.3  1994/05/10  21:16:16  rnollman
...\" 	final update for beta
...\" 	[1994/05/10  21:15:40  rnollman]
...\" 
...\" Revision 1.1.8.2  1993/11/11  21:36:47  rnollman
...\" 	updated SNI copyright
...\" 	[1993/11/11  21:36:30  rnollman]
...\" 
...\" Revision 1.1.8.1  1993/10/27  15:15:42  rnollman
...\" 	fixed problem with log format
...\" 	[1993/10/27  15:15:22  rnollman]
...\" 
...\" Revision 1.1.6.4  1993/03/16  19:38:55  buckler
...\" 	Fixed formatting problem in Table 35-1 (moved notes out of table).
...\" 	[1993/03/16  19:38:12  buckler]
...\" 
...\" Revision 1.1.6.3  1993/01/28  18:39:00  cjd
...\" 	Embedded copyright notice
...\" 	[1993/01/28  17:58:06  cjd]
...\" 
...\" Revision 1.1.6.2  1992/11/19  21:52:46  weir
...\" 	Moved into 1.0.2doc tree
...\" 	[1992/11/19  21:46:33  weir]
...\" 
...\" Revision 1.1.4.6  1992/11/11  23:41:14  buckler
...\" 	Corrected index entries
...\" 	[1992/11/11  22:44:39  buckler]
...\" 
...\" Revision 1.1.4.5  1992/10/29  20:41:24  lmk
...\" 	Prentice-Hall index edits only
...\" 	[1992/10/29  20:37:15  lmk]
...\" 
...\" Revision 1.1.4.4  1992/10/27  16:18:33  steiner
...\" 	More P-H edits - changed fonts of superscripts, and 0 or 1 to zero or
...\" 	one.
...\" 	[1992/10/27  16:18:12  steiner]
...\" 
...\" Revision 1.1.4.3  1992/10/20  22:26:50  buckler
...\" 	Pre-Prentice-Hall editorial review
...\" 	[1992/10/20  22:24:43  buckler]
...\" 
...\" Revision 1.1.4.2  1992/10/05  19:24:51  steiner
...\" 	First P-H edit pass - edits from Eddie.
...\" 	[1992/10/05  19:24:28  steiner]
...\" 
...\" Revision 1.1.2.4  1992/06/15  15:20:01  buckler
...\" 	Fixed various formatting problems
...\" 	[1992/06/15  15:16:11  buckler]
...\" 
...\" Revision 1.1.2.3  1992/06/12  21:00:02  buckler
...\" 	Incorporated changes from Brian Keane (Dublin) markup
...\" 	[1992/06/12  20:58:56  buckler]
...\" 
...\" Revision 1.1.2.2  1992/06/10  21:18:04  marty
...\" 	Doc drop from Dublin
...\" 	[1992/06/10  21:14:35  marty]
...\" 
...\" $EndLog$
...\"
.H 1 "Information Syntaxes"
...\" /* * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *
...\" * COPYRIGHT   (C)  SIEMENS NIXDORF INFORMATIONSSYSTEME AG 1994   *
...\" *                  ALL RIGHTS RESERVED                           *
...\" *                                                                *
...\" * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * */
.P
This chapter defines the syntaxes permitted for attribute values.
The syntaxes are closely aligned with the types and type constructors of ASN.1.
The \*LOM_value\*O data type specifies how a value of each syntax is
represented in the C interface (see Chapter 18).
.H 2 "Syntax Templates"
.P
The names of certain syntaxes are constructed from \*Esyntax templates\*O.
.gL "syntax template"
A syntax template
is a lexical construct comprising a primary identifier followed by a
\*L*\*O (asterisk) enclosed in parentheses, as follows: 
.iS
\*Videntifier \*L(*)\*O
.iE
.P 
.ne 7
A syntax template encompasses a group of related syntaxes.  Any member of the 
group, without distinction, is indicated by the primary identifier
(\*Videntifier\*O) alone.
A particular member is indicated by the template with the asterisk 
replaced by one of a set of secondary identifiers associated with the 
template, as follows: 
.iX "syntax" "template"
.iS
\*Videntifier\s-2\d1\u\s+2\*O \*L(\*Videntifier\s-2\d2\u\s+2\*O)\*O
.iE
.H 2 "Syntaxes"
.P
A variety of syntaxes are defined.  Most are functionally equivalent to ASN.1 
types, as documented in Sections 17.5 through 17.8.
.P 
The following syntaxes are defined:
.ML
.LI
\*LOM_S_BOOLEAN\*O
.P
A value of this syntax is a Boolean; that is, it can be
\*LOM_TRUE\*O or \*LOM_FALSE\*O.
.LI
Enum(\*L*\*O)
.P
.iX "Enum(*)"
A value of any syntax encompassed by this syntax template is one of a
set of values associated with the syntax.
The only significant characteristic of the values is that they are distinct. 
.P 
The group of syntaxes encompassed by this template is openended.
Zero or more members are added to the group by each package definition.
The secondary identifiers that indicate the members are also assigned there.
.LI
\*LOM_S_INTEGER\*O
.P
A value of this syntax is a positive or negative integer.
.LI
\*LOM_S_NULL\*O
.P
The one value of this syntax is a valueless placeholder.
.LI
.ne 8
Object(\*L*\*O)
.P
A value of any syntax encompassed by this syntax template is an object,
which is any instance of a class associated with the syntax. 
.P 
The group of syntaxes encompassed by this template is open-ended.
One member is added to the group by each class definition.
The secondary identifier that indicates the member is the name of the class.
.LI
String(\*L*\*O)
.P
.iX "string(*)"
.iX "strings" "in directory service"
A value of any syntax encompassed by this syntax template is a 
string (as defined in Section 17.3)
whose form and meaning are associated
with the syntax. 
.P 
The group of syntaxes encompassed by this template is closed.
One syntax is defined for each ASN.1 string type.
The secondary identifier that indicates the member is,
in general,
the first word of the type's name.
.LE
.H 2 "Strings"
.P
A 
\*Estring\*O
.gL "string"
.iX "string"
is an ordered sequence of zero or more bits, octets, or characters
accompanied by the string's length.
.P 
The value \*Elength\*O of a string is the number of
bits in a \*Ebit string\*O, octets in an \*Eoctet string\*O,
or characters in a \*Echaracter string\*O.
Any constraints on the value length of a string are specified in the
.gL "bit string"
.gL "octet string"
.gL "character string"
.gL "element"
.iX "elements"
.gL "length"
.iX "string" "length"
.iX "length, string"
appropriate class definitions.  The length
is confined to the range 0 to 2\s-2\u32\d\s+2.
.P 
.nS note
The length of a character string does not necessarily equal the
.iX "character string"
number of characters
it comprises because, for example, a single character can be
represented by using several octets.
.nE
.P 
The elements of a string are numbered.  The position
.gL "position (within a string)"
.iX "position" "string"
.iX "string" "position"
of the first element is 0 (zero).  The positions of successive elements are 
successive positive integers.
.P 
The syntaxes that form the string group are identified
in Table 17-1, which gives the
secondary identifier assigned to each such
syntax.
.nS "note"
.ne 4
The identifiers in the first, second, and third columns of Table 17-1
indicate the syntaxes of bit, octet, and character strings, respectively.
The String group comprises all syntaxes identified in the table.
.nE
.P
.TB "String Syntax Identifiers"
.ps 11
.vs 13
.TS 
center,box,tab(#);
lB | lB | lB
lB | lB | lB.
##Character String
Bit String Identifier#Octet String Identifier#Identifier
=
OM_S_BIT_STRING#OM_S_ENCODING_#OM_S_GENERAL_
#STRING\*O\s-2\u1\d\s+2#STRING\*O\s-2\u2\d\s+2
##
#OM_S_OBJECT_#OM_S_GENERALIZED_
#IDENTIFIER_STRING\*O\s-2\u3\d\s+2#TIME_STRING\*O\s-2\u2\d\s+2
##
#OM_S_OCTET_STRING#OM_S_GRAPHIC_STRING\*O\s-2\u2\d\s+2
##OM_S_IA5_STRING\*O\s-2\u2\d\s+2
##OM_S_NUMERIC_STRING\*O\s-2\u2\d\s+2
##OM_S_OBJECT_
##DESCRIPTOR_STRING\*O\s-2\u2\d\s+2
##OM_S_
##PRINTABLE_STRING\*O\s-2\u2\d\s+2
##OM_S_TELETEX_STRING\*O\s-2\u2\d\s+2
##OM_S_UTC_TIME_STRING\*O\s-2\u2\d\s+2
##OM_S_VIDEOTEX_STRING\*O\s-2\u2\d\s+2
##OM_S_VISIBLE_STRING\*O\s-2\u2\d\s+2
.TE
.VL .2i
.LI "\s-11\s0"
The octets are those that BER permits for the contents octets of 
the encoding of a value of any ASN.1 type.
.LI "\s-12\s0"
The characters are those permitted by ASN.1's type of
the corresponding name.
Values of these syntaxes are represented in their BER encoded form.
The octets by means of which they are represented are those that BER
permits for the contents octets of a primitive encoding of a value
of that type.
.LI "\s-13\s0"
The octets are those that BER permits for the contents octets of 
the encoding of a value of ASN.1's object identifier type.
.LE
.ps 12
.vs 14
.gL "IA5"
.gL "UTC"
.H 2 "Representation of String Values"
.P
In the service interface, a string value is represented by a string
data type.  This is defined in Section 17.3.
The length of a string is the number of octets by which it is represented
at the interface.  It is confined to the range 0 to 2\s-2\u32\d\s+2.
.P
The length of a character does not need to be equal to
the number of characters it comprises
because, for example, a single character can be represented by using several
octets.
.P
It may be necessary to segment large string values when passing them across
the interface.  A segment is any zero or more contiguous octets of a
string value.  Segment boundaries are without semantic significance.
.H 2 "Relationship to ASN.1 Simple Types"
.P
As shown in Table 17-2,
for every ASN.1 simple type except Real,
there is an OM syntax that is functionally equivalent to it.
The simple types are listed in the first column of the table;
the corresponding syntaxes are listed in the second column.
.P 
.TB "Syntax for ASN.1 Simple Types"
.TS 
center,box,tab(#);
lB | lB
l | l.
Type#Syntax
=
Bit String#String\*L(OM_S_BIT_STRING)\*O
Boolean#\*LOM_S_BOOLEAN\*O
Integer#\*LOM_S_INTEGER\*O
Null#\*LOM_S_NULL\*O
Object Identifier#String\*L(OM_S_OBJECT_IDENTIFIER_STRING)\*O
Octet String#String\*L(OM_S_OCTET_STRING)\*O
Real#None\s-2\u1\d\s+2
.TE
.VL .2i
.LI "\s-21\s0"
A future edition of XOM may define a syntax corresponding to this type.
.LE
.H 2 "Relationship to ASN.1 Useful Types"
.P
As shown in Table 17-3, for every ASN.1 useful type,
there is an OM syntax that is functionally equivalent to it.
The useful types are listed in the first column of the table;
the corresponding syntaxes are listed in the second column.
.P 
.TB "Syntaxes for ASN.1 Useful Types"
.TS 
center,box,tab(#);
lB | lB
l | l.
Type#Syntax
=
External#Object\*L(OM_C_EXTERNAL)\*O
Generalized Time#String\*L(OM_S_GENERALISED_TIME_STRING)\*O
Object Descriptor#String\*L(OM_S_OBJECT_DESCRIPTOR_STRING)\*O
Universal Time#String\*L(OM_S_UTC_TIME_STRING)\*O
.TE
.H 2 "Relationship to ASN.1 Character String Types"
.P
As shown in Table 17-4, for every ASN.1 character string type,
.iX "character string" "type"
there is an OM syntax that is functionally equivalent to it.
The ASN.1 character string types are listed in the first column of the table;
the corresponding syntax is listed in the second column.
.P
.ne 3i
.TB "Syntaxes for ASN.1 Character String Types"
.TS 
center,box,tab(#);
lB | lB
l | l.
Type#Syntax
=
General String#String\*L(OM_S_GENERAL_STRING)\*O
Graphic String#String\*L(OM_S_GRAPHIC_STRING)\*O
IA5 String#String\*L(OM_S_IA5_STRING)\*O
.T&
c | l.
\*(EM#String\*L(OM_S_LOCAL_STRING)\*O
.T&
l | l.
Numeric String#String\*L(OM_S_NUMERIC_STRING)\*O
Printable String#String\*L(OM_S_PRINTABLE_STRING)\*O
Teletex String#String\*L(OM_S_TELETEX_STRING)\*O
Videotex String#String\*L(OM_S_VIDEOTEX_STRING)\*O
Visible String#String\*L(OM_S_VISIBLE_STRING)\*O
.TE
.H 2 "Relationship to ASN.1 Type Constructors"
.P
As shown in Table 17-5, there are functionally equivalent OM
syntaxes for some (but not all) ASN.1 type constructors.
The constructors are listed in the first
column; corresponding syntaxes are listed
in the second column.
.P
.ne 3.5i
.TB "Syntaxes for ASN.1 Type Constructors"
.TS
center,box,tab(#);
lB | lB
l | l.
Type Constructor#Syntax
=
Any#String\*L(OM_S_ENCODING_STRING)\*O
Choice#\*LOM_S_OBJECT\*O
Enumerated#\*LOM_S_ENUMERATION\*O
Selection#None\s-2\u1\d\s+2
Sequence#\*LOM_S_OBJECT\*O
Sequence Of#\*LOM_S_OBJECT\*O
Set#\*LOM_S_OBJECT\*O
Set Of#\*LOM_S_OBJECT\*O
Tagged#None\s-2\u2\d\s+2
.TE
.VL .2i
.LI "\s-21\s0"
This type constructor, a purely specification-time phenomenon,
has no corresponding syntax.
.LI "\s-22\s0"
This type constructor is used to distinguish the alternatives of
a choice or the elements of a sequence or set, a function performed by 
attribute types.
.iX "attribute" "type"
.LE
.P 
The effects of the principal type constructors can be achieved,
in any of a variety of ways, by using objects to group attributes
or using attributes to group values.  An OM application designer can
(but need not) model these constructors as classes of the following kinds:
.P
.ML
.LI
Choice
.P
An attribute type can be defined for each alternative, with
just one being permitted in an instance of the class.
.LI
Sequence\ or\ Set
.P
An attribute type can be defined for each sequence or set element.
If an element is optional, then the attribute has zero or one values.
.LI
Sequence Of\ or\ Set Of
.P
A single multivalued attribute can be defined.
.LE
.P 
An ASN.1 definition of an Enumerated Type component of a structured type
is generally mapped to an OM attribute with an OM syntax
\*LOM_S_ENUMERATION\*O
in this interface.
Where the ASN.1 component is optional, this is generally indicated by an
additional member of the enumeration, rather than by the
omission of the OM attribute.
This leads to simpler programming in the application.
