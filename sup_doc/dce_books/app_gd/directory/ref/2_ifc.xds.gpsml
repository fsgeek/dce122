...\" @OSF_COPYRIGHT@
...\" COPYRIGHT NOTICE
...\" Copyright (c) 1990, 1991, 1992, 1993 Open Software Foundation, Inc.
...\" ALL RIGHTS RESERVED (DCE).  See the file named COPYRIGHT.DCE in the
...\" src directory for the full copyright text.
...\"
...\"
...\" HISTORY
...\" $Log: 2_ifc.xds.gpsml,v $
...\" Revision 1.1.13.1  1996/09/03  18:40:46  wardr
...\" 	{enh,R1.2.2}
...\" 	Update for sgml conversion
...\" 	[1996/09/03  18:39:53  wardr]
...\"
...\" 	{enh,R1.2.2}
...\" 	removed changebars
...\" 	[1996/05/10  21:18:32  wardr]
...\"
...\" Revision 1.1.11.1  1996/03/19  15:23:47  wardr
...\" 	{edit R1.2.1}
...\" 	Release Edits
...\" 	[1996/03/19  15:20:10  wardr]
...\" 
...\" Revision 1.1.9.11  1995/06/15  16:26:02  rcb
...\" 	edited 1.1 version, PRENTICE HALL reformat
...\" 	[1995/06/13  19:36:11  rcb]
...\" 
...\" 	edited 1.1 version, PRENTICE HALL reformat
...\" 	[1995/06/12  14:42:08  rcb]
...\" 
...\" Revision 1.1.9.10  1994/11/03  23:31:48  neilson
...\" 	Substituted macros for book names in cross refs.
...\" 	[1994/11/03  01:38:23  neilson]
...\" 
...\" 	Substituted macros for book names in cross refs.
...\" 
...\" Revision 1.1.9.9  1994/10/17  21:05:51  rnollman
...\" 	incorporated editorial comments from Dublin
...\" 	[1994/10/17  21:05:39  rnollman]
...\" 
...\" Revision 1.1.9.8  1994/08/05  15:49:59  rnollman
...\" 	[rnollman] - Checkin after OSF edits
...\" 	[1994/08/05  15:49:37  rnollman]
...\" 
...\" 	[rnollman] - checkin afaterafter incorporating OSF edits
...\" 
...\" Revision 1.1.9.5  1994/05/19  13:30:25  weir
...\" 	Fixed build error
...\" 	[1994/05/19  13:29:49  weir]
...\" 
...\" Revision 1.1.9.4  1994/05/14  22:41:33  rnollman
...\" 	last beta submittal
...\" 	[1994/05/14  22:36:44  rnollman]
...\" 
...\" Revision 1.1.9.3  1994/05/10  21:18:32  rnollman
...\" 	final update for beta
...\" 	[1994/05/10  21:18:15  rnollman]
...\" 
...\" Revision 1.1.9.2  1993/11/11  21:39:27  rnollman
...\" 	updated SNI copyright
...\" 	[1993/11/11  21:39:10  rnollman]
...\" 
...\" Revision 1.1.9.1  1993/10/27  15:18:03  rnollman
...\" 	replacing old chapter with revised chapter from Dublin
...\" 	[1993/10/27  15:17:46  rnollman]
...\" 
...\" Revision 1.1.7.5  1993/02/22  18:36:03  marrek
...\" 	fix for OT 6723
...\" 	[1993/02/19  14:49:49  marrek]
...\" 
...\" Revision 1.1.7.4  1993/01/29  13:28:20  marrek
...\" 	*** empty log message ***
...\" 
...\" Revision 1.1.7.3  1993/01/28  18:39:06  cjd
...\" 	Embedded copyright notice
...\" 	[1993/01/28  17:58:13  cjd]
...\" 
...\" Revision 1.1.7.2  1992/11/19  21:53:01  weir
...\" 	Moved into 1.0.2doc tree
...\" 	[1992/11/19  21:46:44  weir]
...\" 
...\" Revision 1.1.5.9  1992/11/11  23:41:21  buckler
...\" 	Corrected index entries
...\" 	[1992/11/11  22:44:47  buckler]
...\" 
...\" Revision 1.1.5.8  1992/11/06  16:01:37  lmk
...\" 	Prentice-Hall index edits only
...\" 	[1992/11/06  15:57:23  lmk]
...\" 
...\" Revision 1.1.5.7  1992/10/30  15:16:02  lmk
...\" 	Prentice-Hall index entries only
...\" 	[1992/10/30  15:14:22  lmk]
...\" 
...\" Revision 1.1.5.6  1992/10/26  20:45:16  steiner
...\" 	A few more P-H edits, mostly formatting tables and removing
...\" 	spurious .P macros.
...\" 	[1992/10/26  20:44:46  steiner]
...\" 
...\" Revision 1.1.5.5  1992/10/20  22:22:13  buckler
...\" 	Additional editorial changes
...\" 	[1992/10/20  22:19:40  buckler]
...\" 
...\" Revision 1.1.5.4  1992/10/19  17:54:36  steiner
...\" 	Questions from Julie B. - fixed a table, some other small changes.
...\" 	[1992/10/19  17:54:15  steiner]
...\" 
...\" Revision 1.1.5.3  1992/10/15  21:52:35  buckler
...\" 	Pre-Prentice-Hall editorial review
...\" 	[1992/10/15  21:50:24  buckler]
...\" 
...\" Revision 1.1.5.2  1992/09/29  20:38:41  steiner
...\" 	First editing pass (edits from Eddie).
...\" 	[1992/09/29  20:37:49  steiner]
...\" 
...\" Revision 1.1.2.5  1992/07/17  19:21:34  weir
...\" 	Fixed some typos.
...\" 	[1992/07/17  19:21:08  weir]
...\" 
...\" Revision 1.1.2.4  1992/06/15  15:20:08  buckler
...\" 	Fixed various formatting problems
...\" 	[1992/06/15  15:16:24  buckler]
...\" 
...\" Revision 1.1.2.3  1992/06/12  20:27:46  buckler
...\" 	Incorporated changes from Brian Keane (Dublin) markup
...\" 	[1992/06/12  20:26:02  buckler]
...\" 
...\" Revision 1.1.2.2  1992/06/10  21:18:13  marty
...\" 	Doc drop from Dublin
...\" 	[1992/06/10  21:14:40  marty]
...\" 
...\" $EndLog$
.H 1 "XDS Class Definitions"
.P
...\" /* * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *
...\" * COPYRIGHT   (C)  SIEMENS NIXDORF INFORMATIONSSYSTEME AG 1994   *
...\" *                  ALL RIGHTS RESERVED                           *
...\" *                                                                *
...\" * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * */
When referring to classes and attributes in the directory service,
the chapters in Parts 3 and 4 make a clear
distinction between
OM classes and directory classes, and between OM attributes 
and directory attributes.
In both cases, the former is a construct of 
the closely associated Object Management interface,
while the latter is a construct of 
the directory service to which XDS provides access.
The terms \*Vobject class\*O and \*Vattribute\*O indicate the
directory constructs, while the phrases \*VOM class\*O
and \*VOM attribute\*O
indicate the Object Management constructs.
.H 2 "Introduction to OM Classes"
This chapter defines, in alphabetical order,
the OM classes that constitute the directory service package.
This package incorporates the OM classes for the errors which may be
returned at the XDS interface.
The object identifier associated with this package is
.iS
{iso(1) identified-organization(3) icd-ecma(0012) member-company(2) 
dec(1011) xopen(28) dsp(0)}
.iE
.P
.ne 3
It takes the following encoding:
.iS
\\x2B\\xC\\x2\\x87\\x73\\x1C\\x0
.iE
This object identifier is represented by the constant
\*LDS_SERVICE_PKG\*O.
.iX "service" "package"
.iX "package" "service"
.P 
The object management notation is briefly described in the following text.
See Chapters 17 through 19 for more information on object management.
.iX "API"
.iX "OM" "classes"
.P 
Each OM class is described in a separate section,
which identifies the OM attributes specific to that OM class.
The OM classes and OM attributes for each OM class
are listed in alphabetical order.
The OM attributes that can be found in an instance of an OM class
are those OM attributes specific to that OM class,
as well as those inherited from each of its superclasses (see Chapter 5).
The OM class-specific OM attributes are defined in a table.
The table indicates the name of each OM attribute,
the syntax of each of its values,
any restrictions upon the length (in bits, octets (bytes), or characters)
of each value,
any restrictions upon the number of values,
and the value, if any,
\*Lom_create(\|)\*O
supplies.
.P 
The constants that represent the OM classes and OM attributes in the C binding
are defined in the
\*Lxds.h(4xds)\*O
header file.
.H 2 "XDS Errors"
...\" .iX "-[" "errors" "directory service"
.P
Errors are reported to the application program by means of
\*LDS_status\*O,
which is a result of every function
(it is 
\*Vthe\*O function result in the C language binding
for most functions).
A function that completes successfully returns the value
\*LDS_SUCCESS\*O,
whereas one that is not successful returns an error.
The error is a private object
containing details of the problem that occurred.
The error constant \*LDS_NO_WORKSPACE\*O can be returned by all
directory service functions, except \*Lds_initialize(\|)\*O.
\*LDS_\%NO_\%WORKSPACE\*O is returned if \*Lds_initialize(\|)\*O is not
invoked before calling any other directory service function.
.P 
Errors are classified into
ten OM classes.
The standards (see \*EThe Directory: Abstract Service
.iX "standards"
Definition\*O, ISO 9594-3, CCITT X.511) classify errors
into eight different groups, as follows:
.ML
.ne 5
.LI
Abandoned
.LI
Abandon Failed
.LI
Attribute Error
.LI
Name Error
.LI
Referral
.LI
Security Error
.LI
Service Error
.LI
Update Error
.LE
.P
The directory service interface never returns an Abandoned error.
The interface also defines three more kinds of errors, as follows:
.ML
.LI
\*LDS_C_LIBRARY_ERROR\*O
.LI
\*LDS_C_COMMUNICATIONS_ERROR\*O
.LI
\*LDS_C_SYSTEM_ERROR\*O
.LE
.P
Each of these kinds of errors is represented by an OM class.
These OM classes are detailed in subsequent sections of this chapter.
All of them inherit the OM attribute 
\*LDS_PROBLEM\*O
from their superclass
\*VDS_C_ERROR\*O,
which is described in this chapter.  The values \*LDS_PROBLEM\*O can take
are listed in the relevent subsections of this chapter.  For a description of
these errors please refer to the \*(Tg.
The error OM classes defined in this chapter are part of the
directory service package.
.P 
The
\*Lds_bind(\|)\*O
operation returns a Security Error or a Service Error.
All other operations can also return the same errors as \*Lds_bind(\|)\*O.
Such errors can arise in the course of following an automatic referral
list.
.P 
\*LDS_C_REFERRAL\*O is not a real error, and it is not a subclass
of \*VDS_C_ERROR\*O, although it is reported in the same way as a
\*LDS_status\*O result.
A \*LDS_C_ATTRIBUTE_ERROR\*O, also not a subclass of
\*VDS_C_ERROR\*O, is special because it can report several
problems at once.  Each one is reported in
\*LDS_C_ATTRIBUTE_PROBLEM\*O, which is a subclass of
\*VDS_C_ERROR\*O.
.H 2 "OM Class Hierarchy"
This section shows the hierarchical organization of the OM
classes defined in this chapter
and, as a result, shows which OM classes inherit additional OM attributes
from their superclasses.
In the following list, subclassification is indicated by indentation,
and the names of abstract classes are in italics.
Thus, for example, the concrete class
.gL "Concrete Class"
\*LDS_C_PRESENTATION_ADDRESS\*O
is an immediate subclass of the abstract class
\*VDS_C_ADDRESS\*O,
which in turn is an immediate subclass of the abstract class
\*VOM_C_OBJECT\*O. (\*VOM_C_OBJECT\*O is defined in Chapter 19 of
this guide.)
.P
\*VOM_C_OBJECT\*O
.ML 
.LI 
\*LDS_C_ACCESS_POINT\*O
.LI 
\*VDS_C_ADDRESS\*O
.ML
.LI 
\*LDS_C_PRESENTATION_ADDRESS\*O
.LE
.LI 
\*LDS_C_ATTRIBUTE\*O
.ML
.LI 
\*LDS_C_AVA\*O
.LI 
\*LDS_C_ENTRY_MOD\*O
.LI 
\*LDS_C_FILTER_ITEM\*O
.LE
.LI
\*LDS_C_ATTRIBUTE_ERROR\*O
.LI 
\*LDS_C_ATTRIBUTE_LIST\*O
.ML
.LI 
\*LDS_C_ENTRY_INFO\*O
.LE
.LI 
\*VDS_C_COMMON_RESULTS\*O
.ML
.LI 
\*LDS_C_COMPARE_RESULT\*O
.LI 
\*LDS_C_LIST_INFO\*O
.LI 
\*LDS_C_READ_RESULT\*O
.LI 
\*LDS_C_SEARCH_INFO\*O
.LE
.LI 
\*LDS_C_CONTEXT\*O
.LI 
\*LDS_C_CONTINUATION_REF\*O
.ML
.LI
\*LDS_C_REFERRAL\*O
.LE
.LI 
\*LDS_C_ENTRY_INFO_SELECTION\*O
.LI 
\*LDS_C_ENTRY_MOD_LIST\*O
.LI 
\*VDS_C_ERROR\*O
.ML
.LI 
\*LDS_C_ABANDON_FAILED\*O
.LI 
\*LDS_C_ATTRIBUTE_PROBLEM\*O
.LI 
\*LDS_C_COMMUNICATIONS_ERROR\*O
.LI 
\*LDS_C_LIBRARY_ERROR\*O
.LI 
\*LDS_C_NAME_ERROR\*O
.LI 
\*LDS_C_SECURITY_ERROR\*O
.LI 
\*LDS_C_SERVICE_ERROR\*O
.LI 
\*LDS_C_SYSTEM_ERROR\*O
.LI 
\*LDS_C_UPDATE_ERROR\*O
.LE
.LI 
\*LDS_C_EXT\*O
.LI 
\*LDS_C_FILTER\*O
.LI 
\*LDS_C_LIST_INFO_ITEM\*O
.LI 
\*LDS_C_LIST_RESULT\*O
.LI 
\*VDS_C_NAME\*O
.ML
.LI 
\*LDS_C_DS_DN\*O
.LE
.LI 
\*LDS_C_OPERATION_PROGRESS\*O
.LI 
\*LDS_C_PARTIAL_OUTCOME_QUAL\*O
.LI 
\*VDS_C_RELATIVE_NAME\*O
.ML
.LI 
\*LDS_C_DS_RDN\*O
.LE
.LI 
\*LDS_C_SEARCH_RESULT\*O
.LI 
\*LDS_C_SESSION\*O
.LE
.P 
.ne 6
None of the classes in the preceding list are encodable using 
\*Lom_encode(\|)\*O and \*Lom_decode(\|)\*O.
The application is not permitted to create or modify instances of some
OM classes because these OM classes are only returned by the interface
and never supplied to it.
These OM classes are as follows:
.ML
.LI
\*LDS_C_ACCESS POINT\*O
.LI
\*LDS_C_ATTRIBUTE_ERROR\*O
.LI
\*LDS_C_COMPARE_RESULT\*O
.LI
\*LDS_C_CONTINUATION_REF\*O
.LI
All subclasses of \*VDS_C_ERROR\*O
.LI
\*LDS_C_LIST_INFO\*O
.LI
\*LDS_C_LIST_INFO_ITEM\*O
.LI
\*LDS_C_LIST_RESULT\*O
.LI
\*LDS_C_OPERATION_PROGRESS\*O
.LI
\*LDS_C_PARTIAL_OUTCOME_QUAL\*O
.LI
\*LDS_C_READ_RESULT\*O
.LI
\*LDS_C_REFERRAL\*O
.LI
\*LDS_C_SEARCH_INFO\*O
.LI
\*LDS_C_SEARCH_RESULT\*O
.LE
.H 2 "DS_C_ABANDON_FAILED"
An instance of OM class
\*LDS_C_ABANDON_FAILED\*O
reports a problem encountered during an attempt to abandon an operation.
.P 
An application is not permitted to create or modify instances of this OM class.
An instance of this OM class has the OM attributes of its superclasses,
\*VOM_C_OBJECT\*O and
\*VDS_C_ERROR\*O,
and no additional OM attributes.
.P 
.ne 8
The OM attribute \*LDS_PROBLEM\*O, which is inherited from the superclass
\*VDS_C_ERROR\*O, identifies the problem.
Its value is one of the following:
.ML
.LI
\*LDS_E_CANNOT_ABANDON\*O
.LI
\*LDS_E_NO_SUCH_OPERATION\*O
.LI
\*LDS_E_TOO_LATE\*O
.LE
.P
.ne 3
A \*Lds_abandon(\|)\*O XDS call always returns a \*LDS_E_TOO_LATE\*O
error for the \*LDS_C_ABANDON_FAILED\*O OM class.  Refer to Chapter 10 for
information on abandoning directory operations.
.H 2 "DS_C_ACCESS_POINT"
.gL "Access Point"
An instance of OM class \*LDS_C_ACCESS_POINT\*O
identifies a particular point at which a DSA can be accessed.
.P 
An application is not permitted to create or modify instances of this OM class.
An instance of this OM class has the OM attributes of its superclass,
\*VOM_C_OBJECT\*O,
in addition to
the OM attributes listed in Table 11-1.
.P
.ne 1.7i
.TB "OM Attributes of DS_C_ACCESS_POINT"
.TS
center,box,tab(#);
lB | lB | lB | lB | lB
lB | lB | lB | lB | lB
lB | l | c | c | c.
##Value#Value#Value
OM Attribute#Value Syntax#Length#Number#Initially
=
DS_ADDRESS#Object\*V(DS_C_\*O#\*(EM#1#\*(EM
#\*VADDRESS)\*O
_
DS_AE_TITLE#Object\*V(DS_C_\*O#\*(EM#1#\*(EM
#\*VNAME)\*O
.TE
.P 
.ML
.LI
\*LDS_ADDRESS\*O
.P
This attribute indicates the
address of the DSA to be used when communicating with it.
.iX "DSA" "address"
.LI
\*LDS_AE_TITLE\*O
.P
This attribute indicates the
name of the DSA.
.LE
.H 2 "DS_C_ADDRESS"
The OM class \*VDS_C_ADDRESS\*O
.gL "Address"
represents the address of a particular entity or service,
such as a DSA.
.P 
It is an abstract class that has the OM attributes of its superclass,
\*VOM_C_OBJECT\*O,
and no other OM attributes.
.P 
.ne 3
An address is an unambiguous name, label, or number
that identifies the location of the entity or service.
All addresses are represented as instances of some subclass of this OM class.
.P
The only subclass defined by the DCE XDS API is
\*LDS_\%C_\%PRESENTATION_\%ADDRESS\*O,
.gL "Presentation Address"
which is the presentation address of an OSI application entity
.iX "OSI" "application entity"
used for OSI communications with this subclass.
.iX "OSI" "communications"
.H 2 "DS_C_ATTRIBUTE"
An instance of OM class \*LDS_C_ATTRIBUTE\*O
.iX "attribute"
is an attribute of an object,
and is thus a component of its directory entry.
.P 
An instance of this OM class has the OM attributes of its superclass,
\*VOM_C_OBJECT\*O,
in addition to
the OM attributes listed in Table 11-2.
.P
.ne 2.1i
.TB "OM Attributes of DS_C_ATTRIBUTE"
.TS
center,box,tab(#);
lB | lB | lB | lB | lB
lB | lB | lB | lB | lB
lB | l | c | c | c.
##Value#Value#Value
OM Attribute#Value Syntax#Length#Number#Initially
=
DS_ATTRIBUTE_#String\*L(OM_S_\*O#\*(EM#1#\*(EM
TYPE#\*LOBJECT_\*O
#\*LIDENTIFIER_\*O
#\*LSTRING\*O)
_
DS_ATTRIBUTE_#Any#\*(EM#0 or more#\*(EM
VALUES
.TE
.P 
.ML
.LI
\*LDS_ATTRIBUTE_TYPE\*O
.iX "attribute" "type"
.P
The attribute type
that indicates the class of information given by this attribute.
.LI
\*LDS_ATTRIBUTE_VALUES\*O
.iX "attribute" "value" "OM"
.P
The attribute values.
The OM value syntax and the number of values allowed for this OM attribute
are determined by the value of the
\*LDS_ATTRIBUTE_TYPE\*O
OM attribute
in accordance with the rules given in Chapter 10.
.P
If the values of this OM attribute have the syntax String(\*L*\*O),
the strings can be long and segmented.
For this reason,
\*Lom_read(\|)\*O and \*Lom_write(\|)\*O
need to be used to access all String(\*L*\*O) values.
.LE
.P 
.nS note
A directory attribute must always have at least one value,
although it is acceptable for instances of this OM class not to have
any values.
.nE
.H 2 "DS_C_ATTRIBUTE_ERROR"
An instance of OM class
\*LDS_C_ATTRIBUTE_ERROR\*O
.iX "errors" "directory service" "attribute"
.iX "attribute" "error"
reports an attribute-related directory service error.
.P 
An application is not permitted to create or modify instances
of this OM class.
An instance of this OM class has the OM attributes of its superclass,
\*VOM_C_OBJECT\*O,
in addition to
the OM attributes listed in Table 11-3.
.P 
.nP
.ne 2i
.TB "OM Attributes of DS_C_ATTRIBUTE_ERROR"
.TS 
center,box,tab(#);
lB | lB | lB | lB | lB
lB | lB | lB | lB | lB
lB | l | c | c | c.
##Value#Value#Value
OM Attribute#Value Syntax#Length#Number#Initially
=
DS_OBJECT_#Object\*V(DS_C_\*O#\*(EM#1#\*(EM
NAME#\*VNAME)\*O
_
DS_PROBLEMS#Object\*L(DS_C_\*O#\*(EM#1 or more#\*(EM
#\*LATTRIBUTE_\*O
#\*LPROBLEM)\*O
.TE
.ML
.LI
\*LDS_OBJECT_NAME\*O
.iX "object" "name"
.P
This attribute contains
the name of the directory entry to which the operation is applied
when the failure occurs.
.LI
.ne 5
\*LDS_PROBLEMS\*O
.P
This attribute
documents the attribute-related problems encountered.
Uniquely, a \*LDS_C_ATTRIBUTE_ERROR\*O
can report several problems at once.
All problems are related to the preceding object.
.LE
.H 2 "DS_C_ATTRIBUTE_LIST"
An instance of OM class \*LDS_C_ATTRIBUTE_LIST\*O
.iX "attribute" "list"
is a list of directory attributes.
.P 
An instance of this OM class has the OM attributes of its superclass,
\*VOM_C_OBJECT\*O,
in addition to
the OM attribute listed in Table 11-4.
.P
.ne 10
.TB "OM Attribute of DS_C_ATTRIBUTE_LIST"
.TS 
center,box,tab(#);
lB | lB | lB | lB | lB
lB | lB | lB | lB | lB
lB | l | c | l | c.
##Value#Value#Value
OM Attribute#Value Syntax#Length#Number#Initially
=
DS_ATTRIBUTES#Object\*L(DS_C_\*O#\*(EM#0 or more#\*(EM
#\*LATTRIBUTE)\*O
.TE
.P 
.ML
.LI
\*LDS_ATTRIBUTES\*O
.iX "attribute"
.P
The attributes that constitute a new object's directory entry,
or those selected from an existing entry.
.LE
.H 2 "DS_C_ATTRIBUTE_PROBLEM"
An instance of OM class
\*LDS_C_ATTRIBUTE_PROBLEM\*O
documents one attribute-related problem
encountered while performing an operation as requested on a particular 
occasion.
.P 
An application is not permitted to create or modify
instances of this OM class.
An instance of this OM class has the OM attributes of its superclasses,
\*VOM_C_OBJECT\*O and
\*VDS_C_ERROR\*O,
in addition to
the OM attributes listed in Table 11-5.
.P 
.ne 3i
.TB "OM Attributes of DS_C_ATTRIBUTE_PROBLEM"
.TS 
center,box,tab(#);
lB | lB | lB | lB | lB
lB | lB | lB | lB | lB
lB | l | c | c | c.
##Value#Value#Value
OM Attribute#Value Syntax#Length#Number#Initially
=
DS_ATTRIBUTE_#String\*L(OM_S_\*O#\*(EM#1#\*(EM
TYPE#\*LOBJECT_\*O
#\*LIDENTIFIER_\*O
#\*LSTRING)\*O
_
DS_ATTRIBUTE_#Any#\*(EM#0 or 1#\*(EM
VALUE
.TE
.P
.ML
.LI
\*LDS_ATTRIBUTE_TYPE\*O
.P
This attribute
identifies the type of attribute with which the problem is associated.
.LI
\*LDS_ATTRIBUTE_VALUE\*O
.P
This attribute specifies
the attribute value with which the problem is associated.
Its syntax is determined by the value of
\*LDS_\%ATTRIBUTE_\%TYPE\*O.
This OM attribute is present if it is
necessary to avoid ambiguity.
.LE
.P
The OM attribute \*LDS_PROBLEM\*O, which is inherited from the superclass
\*VDS_C_ERROR\*O, identifies the problem.
Its value is one of the following:
.ML
.LI
\*LDS_E_ATTRIBUTE_OR_VALUE_EXISTS\*O
.LI
\*LDS_E_CONSTRAINT_VIOLATION\*O
.LI
\*LDS_E_INAPPROP_MATCHING\*O
.LI
\*LDS_E_INVALID_ATTRIBUTE_SYNTAX\*O
.LI
\*LDS_E_NO_SUCH_ATTRIBUTE_OR_VALUE\*O
.LI
\*LDS_E_UNDEFINED_ATTRIBUTE_TYPE\*O
.LE
.H 2 "DS_C_AVA"
An instance of OM class \*LDS_C_AVA\*O  (Attribute Value Assertion)
.iX "-: AVA" "Attribute Value Assertion"
.iX "AVA"
is a proposition concerning the values of a directory entry.
.P 
An instance of this OM class has the OM attributes of its superclasses,
\*VOM_C_OBJECT\*O and \*LDS_C ATTRIBUTE\*O,
and no other OM attributes.
An additional restriction on this OM class is
that there must be exactly one value of the OM attribute
\*LDS_ATTRIBUTE_VALUES\*O.
The
\*LDS_\%ATTRIBUTE_\%TYPE\*O
remains single valued.
The OM value syntax of
\*LDS_\%ATTRIBUTE_\%VALUES\*O
must conform to the rules outlined in Chapter 10.
.H 2 "DS_C_COMMON_RESULTS"
The OM class \*VDS_C_COMMON_RESULTS\*O
.iX "common results"
comprises results that are returned by, and are common to,
the directory interrogation operations.
.P 
It is an abstract OM class, which has the OM attributes of its superclass,
\*VOM_C_OBJECT\*O,
in addition to
the OM attributes listed in Table 11-6.
.P
.TB "OM Attributes of DS_C_COMMON_RESULTS"
.TS 
center,box,tab(#);
lB | lB | lB | lB | lB
lB | lB | lB | lB | lB
lB | l | c | c | c.
##Value#Value#Value
OM Attribute#Value Syntax#Length#Number#Initially
=
DS_ALIAS_#\*LOM_S_\*O#\*(EM#1#\*(EM
DEREFERENCED#\*LBOOLEAN\*O
_
DS_PERFORMER#Object\*V(DS_C_\*O#\*(EM#0 or 1#\*(EM
#\*VNAME)\*O
.TE
.P 
.ML
.LI
\*LDS_ALIAS_DEREFERENCED\*O
.P
This attribute indicates whether the name of the target object
that is passed as a function argument
includes an alias that is dereferenced
to determine the DN.
.LI
.ne 7
\*LDS_PERFORMER\*O
.P
When present, this attribute
gives the DN of the performer of a particular operation.
It can be present when the result is signed,
.gL "Signed"
and it holds the name of the DSA that signed the result.
The DCE directory service
does not support the optional feature of signed results;
therefore, this OM attribute is never present.
.LE
.H 2 "DS_C_COMMUNICATIONS_ERROR"
An instance of OM class
\*LDS_C_COMMUNICATIONS_ERROR\*O
.iX "communications error"
.iX "errors" "directory service" "communications"
reports an error occurring in the other OSI services supporting
the directory service.
.P 
An application is not permitted to create or modify instances
of this OM class.
An instance of this OM class has the OM attributes of its superclasses,
\*VOM_C_OBJECT\*O and
\*VDS_C_ERROR\*O,
and no additional OM attributes.
.P 
Communications errors include those arising in
remote operation,
association control,
presentation,
session, and
transport.
.P 
The OM attribute \*LDS_PROBLEM\*O, which is inherited from the
superclass \*VDS_C_ERROR\*O, identifies the problem.  Its
value is \*LDS_\%E_\%COMMUNICATIONS_\%PROBLEM\*O.
.H 2 "DS_C_COMPARE_RESULT"
.iX "compare result"
An instance of OM class \*LDS_C_COMPARE_RESULT\*O
comprises the results of a successful call to
\*Lds_compare(\|)\*O.
.P 
An application is not permitted to create or modify instances of this OM class.
An instance of this OM class has the OM attributes of its superclasses,
\*VOM_C_OBJECT\*O and \*VDS_C_COMMON_RESULTS\*O,
in addition to
the OM attributes listed in Table 11-7.
.P
.ne 3i
.TB "OM Attributes of DS_C_COMPARE_RESULT"
.TS 
center,box,tab(#);
lB | lB | lB | lB | lB
lB | lB | lB | lB | lB
lB | l | c | c | c.
##Value#Value#Value
OM Attribute#Value Syntax#Length#Number#Initially
=
DS_FROM_ENTRY#\*LOM_S_\*O#\*(EM#1#\*(EM
#\*LBOOLEAN\*O
_
DS_MATCHED#\*LOM_S_\*O#\*(EM#1#\*(EM
#\*LBOOLEAN\*O
_
DS_OBJECT_NAME#Object\*V(DS_C_\*O#\*(EM#0 or 1#\*(EM
#\*VNAME)\*O
.TE
.P 
.ML
.LI
\*LDS_FROM_ENTRY\*O
.P
This attribute indicates whether the assertion is
tested against the specified object's 
entry, rather than a copy of the entry.
.LI
\*LDS_MATCHED\*O
.iX "matched"
.P
This attribute indicates whether the assertion specified as an 
argument returns the value \*LOM_TRUE\*O.
It takes the value
\*LOM_TRUE\*O
if the values are compared and matched; otherwise,
it takes the value \*LOM_FALSE\*O.
.LI
\*LDS_OBJECT_NAME\*O
.iX "object" "name"
.P
This attribute contains
the DN of the target object of the operation.
It is present if the OM attribute
\*LDS_ALIAS_DEREFERENCED\*O,
inherited from the superclass
\*VDS_C_COMMON_RESULTS\*O,
is \*LOM_TRUE\*O.
.LE
.H 2 "DS_C_CONTEXT"
An instance of OM class \*LDS_C_CONTEXT\*O
.iX "context"
comprises per-operation arguments 
that are accepted by most of the interface functions.
.P 
.ne 2
An instance of this OM class has the OM attributes of its superclass,
\*VOM_C_OBJECT\*O, in addition to the OM attributes listed in Table 11-8.
...\" remove vertical bars because in publish format, the table is
...\" multipaged and can't deal
...\"
...\" P-H folk: you should put back the vertical bars
...\" (such as, lB | lB | lB | lB | lB
...\" and then break the tables into separate tables, one
...\" for each page.  Then the vertical lines will come out
...\" correctly.  This is a hack for sure - the real solution
...\" would be to fix the table sfotware.
.P
.ne 6i
.TB "OM Attributes of DS_C_CONTEXT"
.ps 11
.vs 13
.TS
center,box,tab(#);
lB lB lB lB lB
lB lB lB lB lB
cB s  s  s  s
lB lB c c lB
lB lB c c lB
lB lB c c lB
cB s  s s s
lB lB c c lB
lB lB c c lB
lB lB c c lB
lB lB c c lB
lB lB c c lB
lB lB c c lB
lB lB c c lB
lB lB c c lB
lB lB c c lB
cB s  s s s
lB lB c c lB
lB lB c c lB.
##Value#Value#Value
OM Attribute#Value Syntax#Length#Number#Initially
=
Common Arguments
_
DS_EXT#T{
\*OObject\*L(DS_C_ EXT\*O
T}#\*(EM#0 or more#\*O\*(EM
_
T{
DS_OPERATION_ PROGRESS
T}#T{
\*OObject\*L(DS_C_ OPERATION_ PROGRESS
T}#\*(EM#1#T{
DS_ OPERATION_ NOT_STARTED
T}
_
T{
DS_ALIASED_ RDNS
T}#T{
OM_S_ INTEGER
T}#\*(EM#0 or 1#\*O0
_
Service Controls
_
T{
DS_CHAINING_ PROHIB
T}#T{
OM_S_ BOOLEAN
T}#\*(EM#1#OM_TRUE
_
T{
DS_DONT_ DEREFERENCE_ ALIASES
T}#T{
OM_S_ BOOLEAN
T}#\*(EM#1#OM_FALSE
_
T{
DS_DONT_ USE_COPY
T}#T{
OM_S_ BOOLEAN
T}#\*(EM#1#OM_TRUE
_
T{
DS_LOCAL_ SCOPE
T}#T{
OM_S_ BOOLEAN
T}#\*(EM#1#OM_FALSE
_
T{
DS_PREFER_ CHAINING
T}#T{
OM_S_ BOOLEAN
T}#\*(EM#1#OM_FALSE
_
DS_PRIORITY#T{
\*OEnum\*L(DS_ Priority)
T}#\*(EM#1#DS_MEDIUM
_
T{
DS_SCOPE_ OF_REFERRAL
T}#T{
\*OEnum\*L(DS_ Scope_ of_Referral)
T}#\*(EM#0 or 1#\*O\*(EM
_
T{
DS_SIZE_ LIMIT
T}#T{
OM_S_ INTEGER
T}#\*(EM#0 or 1#\*O\*(EM
_
T{
DS_TIME_ LIMIT
T}#T{
OM_S_ INTEGER
T}#\*(EM#0 or 1#\*O\*(EM
_
Local Controls
_
T{
DS_ ASYNCHRONOUS
T}#T{
OM_S_ BOOLEAN
T}#\*(EM#1#OM_FALSE
_
T{
DS_AUTOMATIC_ CONTINUATION
T}#T{
OM_S_ BOOLEAN
T}#\*(EM#1#\*LOM_TRUE\*O
.TE
.nL
.ps 12
.vs 14
.P 
The context gathers several arguments passed to interface functions,
which are presumed to be relatively static for a given
directory user during a particular directory interaction.
The context is passed as an argument to each function that
interrogates or updates the directory.
Although it is generally assumed that the context is changed infrequently,
the value of each argument can be changed between every operation if required.
The \*LDS_ASYNCHRONOUS\*O argument must not be changed.
Each argument is represented by one of the OM attributes of the
\*LDS_C_CONTEXT\*O
OM class.
.P 
The context contains the common arguments defined in the standards
(see \*EThe Directory: Abstract Service Definition\*O,
ISO 9594-3, CCITT X.511),
except that all security information is omitted
for reasons discussed in Chapter 10.
These are made up of a number of service controls explained in the following
text, possible extensions in the
\*LDS_EXT\*O
OM attribute,
and operation progress and alias dereferencing information in the
\*LDS_OPERATION_PROGRESS\*O
OM attribute.
It also contains a number of arguments that provide local control over
the interface.
.P
The OM attributes of the \*LDS_C_CONTEXT\*O OM class are as follows:
.ML
.LI
Common Arguments
.ML
.LI
\*LDS_EXT\*O
.P
This attribute represents
any future standardized extensions that need to be applied
to the directory service operation.
The DCE XDS implementation does not evaluate this optional OM attribute.
.LI
\*LDS_OPERATION_PROGRESS\*O
.iX "operation" "progress"
.P
This attribute represents
the state that the directory service assumes at the start of the operation.
This OM attribute normally takes its default value, which is the value
\*LDS_\%OPERATION_\%NOT_\%STARTED\*O described in the
.iX "operation" "not started"
\*LDS_\%C_\%OPERATION_\%PROGRESS\*O OM class definition.
.LI
\*LDS_ALIASED_RDNS\*O
.P
This attribute indicates to the directory service
that the object component of the \*Voperation\*O
parameter is created by dereferencing of an alias on an earlier operation
attempt.  This value is set in the referral response of the previous
operation.
.LE
.LI
.ne 6
Service Controls
.ML
.LI
\*LDS_CHAINING_PROHIB\*O
.iX "chaining prohibited"
.gL "Chaining"
.P
This attribute indicates that chaining
and other methods of distributing the request around the 
directory service
are prohibited.
.LI
\*LDS_DONT_DEREFERENCE_ALIASES\*O
.P
This attribute
indicates that any alias used to identify the target entry of an operation
is not dereferenced.
This allows interrogation of alias entries
(aliases are never dereferenced during updates).
.LI
\*LDS_DONT_USE_COPY\*O
.P
This attribute
indicates that the request can only be satisfied by accessing
directory entries,
and not by using copies of entries.
This includes both copies maintained in other DSAs by bilateral agreement,
and, copies cached locally.
.gL "Cache"
.gL "Copy"
.LI
\*LDS_LOCAL_SCOPE\*O
.iX "local scope"
.P
This attribute
indicates that the directory request will be satisfied locally.
The meaning of this option is configured by an administrator.
This option typically restricts the request to a single DSA or DMD.
.LI
\*LDS_PREFER_CHAINING\*O
.iX "prefer chaining"
.P
This attribute
indicates that chaining is preferred to referrals when necessary.
The directory service is not obliged to follow this preference,
and can return a referral even if it is set.
.LI
\*LDS_PRIORITY\*O
.P
This attribute indicates
the priority, relative to other directory requests, according to which
the directory service attempts to satisfy the request.
This is not a guaranteed service since there is no queuing throughout the
directory.
Its value must be one of the following:
.iX "priority"
.ML
.LI
\*LDS_LOW\*O
.LI
\*LDS_MEDIUM\*O
.LI
\*LDS_HIGH\*O
.LE
.iX "low priority"
.iX "medium priority"
.iX "high priority"
.LI 
.ne 5
\*LDS_SCOPE_OF_REFERRAL\*O
.P
This attribute indicates
the part of the directory to which referrals are limited.
This includes referral errors and partial outcome qualifiers.
Its value must be one of the following:
.P
.ML 
.LI 
\*LDS_COUNTRY\*O,
meaning DSAs within the country in which the request originates.
.LI 
\*LDS_DMD\*O,
.iX "DMD"
.gL "DMD"
.gL "Directory Management Domain"
meaning DSAs within the DMD in which the request originates.
.LE
.P
\*LDS_SCOPE_OF_REFERRAL\*O is an optional attribute. The lack of this
attribute in a \*LDS_C_CONTEXT\*O object indicates that the scope is not
limited.
.P
.LI 
\*LDS_SIZE_LIMIT\*O
.iX "size limit"
.P
If present, this attribute indicates
the maximum number of objects about which
\*Lds_list(\|)\*O  or \*Lds_search(\|)\*O
needs to return information.
If this limit is exceeded,
information is returned about exactly this number of objects.
The objects that are chosen are not specified
because this can depend on the timing of interactions between DSAs,
among other reasons.
.LI 
\*LDS_TIME_LIMIT\*O
.iX "time limit"
.P
If present, this attribute indicates
the maximum elapsed time, in seconds,
within which the service needs to be provided
(not the processing time devoted to the request).
If this limit is reached,
a service error (\*LDS_E_TIME_LIMIT_EXCEEDED\*O) is returned,
except for the
.iX "time limit" "exceeded"
\*Lds_list(\|)\*O  or \*Lds_search(\|)\*O
operations, which return
an arbitrary selection of the accumulated results.
.LE
.LI
Local Controls
.ML
.LI
\*LDS_ASYNCHRONOUS\*O
(Optional Functionality)
.iX "optional functionality"
.P
The interface currently operates synchronously (within the same thread)
only, as detailed in Chapter 10.
There is only one possible value, as follows:
.ML 
.LI 
\*LOM_FALSE\*O,
meaning that
the operation is performed sequentially (synchronously)
with the application being blocked until a result or error is returned.
.LE
.LI
.ne 5
\*LDS_AUTOMATIC_CONTINUATION\*O
.iX "automatic continuation"
.P
This attribute
indicates the requestor's requirement for continuation reference handling,
including referrals and those in partial outcome qualifiers.
The value is one of the following:
.ML 
.LI
\*LOM_FALSE\*O,
meaning that the interface returns all continuation references
to the application program.
.LI
\*LOM_TRUE\*O,
meaning that
continuation references are automatically processed, and the subsequent
results are returned to the application instead of the continuation references,
whenever practical.
This is a much simpler option than \*LOM_FALSE\*O
unless the application has special requirements.
.LE
.LE
.LE
.nS note
Continuation references can still be returned to the application 
if, for example, the relevant DSA cannot be contacted.
.nE
.P 
Applications can assume that an object of OM class
\*LDS_C_CONTEXT\*O,
created with default values of all its OM attributes,
works with all the interface functions.
The \*LDS_DEFAULT_CONTEXT\*O constant
.iX "default" "context"
can be used as an argument to interface functions instead of creating
an OM object with default values.
.H 2 "DS_C_CONTINUATION_REF"
An instance of OM class \*LDS_C_CONTINUATION_REF\*O
.iX "continuation reference"
comprises the information that enables a partially 
completed directory request to be continued; for example, following
a referral.
.P 
An application is not permitted to create or modify instances of this OM class.
An instance of this OM class has the OM attributes of its superclass,
\*VOM_C_OBJECT\*O, in addition to
the OM attributes listed in Table 11-9.
.P
.nP
.ne 3.1i
.TB "OM Attributes of DS_C_CONTINUATION_REF"
.ps 11
.vs 13
.TS 
center,box,tab(#);
lB | lB | lB | lB | lB
lB | lB | lB | lB | lB
lB | l | c | c | c.
##Value#Value#Value
OM Attribute#Value Syntax#Length#Number#Initially
=
DS_ACCESS_#Object\*L(DS_C_\*O#\*(EM#1 or more#\*(EM
POINTS#\*LACCESS_POINT)\*O
_
DS_ALIASED_#\*LOM_S_INTEGER\*O#\*(EM#1#\*(EM
RDNS
_
DS_OPERATION_#Object\*L(DS_C_\*O#\*(EM#1#\*(EM
PROGRESS#\*LOPERATION_\*O
#\*LPROGRESS)\*O
_
DS_RDNS_#\*LOM_S_INTEGER\*O#\*(EM#0 or 1#\*(EM
RESOLVED
_
DS_TARGET_#Object\*V(DS_C_\*O#\*(EM#1#\*(EM
OBJECT#\*VNAME)\*O
.TE
.ps 12
.vs 14
.P 
.ML
.LI
\*LDS_ACCESS_POINTS\*O
.P
This attribute indicates
the names and presentation addresses of the DSAs from where the
directory request is continued.
.LI
\*LDS_ALIASED_RDNS\*O
.P
This attribute
indicates how many (if any) of the RDNs in the target name are
.iX "RDN"
produced by dereferencing an alias.
Its value is 0 (zero) if no aliases are dereferenced.
This value needs to be used in the \*LDS_C_CONTEXT\*O of any continued operation.
.LI
\*LDS_OPERATION_PROGRESS\*O
.iX "operation" "progress"
.P
This attribute indicates
the state at which the directory request must be continued.
This value needs to be used in the
\*LDS_C_CONTEXT\*O
of any continued operation.
.LI
\*LDS_RDNS_RESOLVED\*O
.iX "RDN" "resolved"
.P
This attribute indicates
the number of RDNs in the supplied object name
.iX "RDN"
that are resolved (using internal references),
and not just assumed to be correct (using cross-references).
.LI
\*LDS_TARGET_OBJECT\*O
.iX "target object"
.P
This attribute indicates
the name of the object upon which the continuation must focus.
.LE
.H 2 "DS_C_DS_DN"
An instance of OM class \*LDS_C_DS_DN\*O
represents a name of a directory object.
.P 
An instance of this OM class has the OM attributes of its superclasses,
\*VOM_C_OBJECT\*O and \*VDS_C_NAME\*O,
in addition to the OM attribute listed in Table 11-10.
.P
.ne 1.25i
.TB "OM Attribute of DS_C_DS_DN"
.TS 
center,box,tab(#);
lB | lB | lB | lB | lB
lB | lB | lB | lB | lB
lB | l | c | c | c.
##Value#Value#Value
OM Attribute#Value Syntax#Length#Number#Initially
=
DS_RDNS#Object\*L(DS_C_DS_\*O#\*(EM#0 or more#\*(EM
#\*LRDN)\*O
.TE
.ML
.LI
\*LDS_RDNS\*O
.iX "RDN"
.P
This attribute indicates
the sequence of RDNs that define the path through the DIT from its 
root to the object that the \*LDS_C_DS_DN\*O indicates.
The \*LDS_C_DS_DN\*O of the root of the directory is the null name
(no
\*LDS_RDNS\*O
values).
The order of the values is significant;
the first value is closest to the root,
and the last value is the RDN of the object.
.LE
.H 2 "DS_C_DS_RDN"
An instance of OM class \*LDS_C_DS_RDN\*O
is a relative distinguished name.
An RDN uniquely identifies an 
immediate subordinate of an object whose entry is displayed in the DIT.
.P 
An instance of this OM class has the OM attributes of its superclasses,
\*VOM_C_OBJECT\*O and
\*VDS_C_RELATIVE_NAME\*O, in addition to
the OM attribute listed in Table 11-11.
.P
.ne 2i
.TB "OM Attribute of DS_C_DS_RDN"
.TS 
center,box,tab(#);
lB | lB | lB | lB | lB
lB | lB | lB | lB | lB
lB | l | c | c | c.
##Value#Value#Value
OM Attribute#Value Syntax#Length#Number#Initially
=
DS_AVAS#Object\*L(DS_C_AVA)\*O#\*(EM#1 or more#\*(EM
.TE
.ML
.LI
\*LDS_AVAS\*O
.P
This attribute indicates the \*LDS_AVAS\*O that are marked
by the DIB as components of the object's RDN.
The assertion is TRUE of the object but not of any of its siblings,
and the attribute type and value
are displayed in the object's directory entry.
The order of the \*LDS_AVAS\*O is not significant.
.LE
.H 2 "DS_C_ENTRY_INFO"
An instance of OM class \*LDS_C_ENTRY_INFO\*O
contains selected information from a single directory entry.
.P 
An instance of this OM class has the OM attributes of its superclasses,
\*VOM_C_OBJECT\*O and
\*LDS_C_ATTRIBUTE_LIST\*O,
in addition to
the OM attributes listed in Table 11-12.
.P
.ne 2i
.TB "OM Attributes of DS_C_ENTRY_INFO"
.TS 
center,box,tab(#);
lB | lB | lB | lB | lB
lB | lB | lB | lB | lB
lB | l | c | c | c.
##Value#Value#Value
OM Attribute#Value Syntax#Length#Number#Initially
=
DS_FROM_ENTRY#\*LOM_S_\*O#\*(EM#1#\*(EM
#\*LBOOLEAN\*O
_
DS_OBJECT_NAME#Object\*V(DS_C_\*O#\*(EM#1#\*(EM
#\*VNAME)\*O
.TE
.P 
The OM attribute
\*LDS_ATTRIBUTES\*O
is inherited from the superclass
\*LDS_C_ATTRIBUTE_LIST\*O.
It contains the information extracted from the directory entry
of the target object.
The type of each attribute requested and located is indicated in the list
as are its values, if types and values are requested.
.P 
.ne 6
The OM class-specific OM attributes are as follows:
.P
.ML
.LI
\*LDS_FROM_ENTRY\*O
.iX "from entry"
.P
This attribute
indicates whether the information is
extracted from the specified 
object's entry, rather than from a copy of the entry.
.LI
\*LDS_OBJECT_NAME\*O
.iX "object" "name"
.P
This attribute contains the object's DN.
.LE
.H 2 "DS_C_ENTRY_INFO_SELECTION"
An instance of OM class \*LDS_C_ENTRY_INFO_SELECTION\*O
identifies the information to be extracted from a directory entry.
.P 
An instance of this OM class has the OM attributes of its superclass,
\*VOM_C_OBJECT\*O,
in addition to
the OM attributes listed in Table 11-13.
.P
.ne 3.75i
.TB "OM Attributes of DS_C_ENTRY_INFO_SELECTION"
.ps 11
.vs 13
.TS 
center,box,tab(#);
lB | lB | lB | lB | lB
lB | lB | lB | lB | lB
lB | l | c | c | lB.
##Value#Value#Value
OM Attribute#Value Syntax#Length#Number#Initially
=
DS_ALL_#\*LOM_S_\*O#\*(EM#1#\*LOM_TRUE\*O
ATTRIBUTES#\*LBOOLEAN\*O
_
DS_#String\*L(OM_S_\*O#\*(EM#0 or more#\*(EM
ATTRIBUTES_#\*LOBJECT_\*O
SELECTED#\*LIDENTIFIER_\*O
#\*LSTRING)\*O
_
DS_INFO_TYPE#Enum\*L(DS_\*O#\*(EM#1#\*LDS_TYPES_\*O
#\*LInformation_\*O###\*LAND_VALUES\*O
#\*LType)\*O
.TE
.ps 12
.vs 14
.P
.ML
.ne 20
.LI
\*LDS_ALL_ATTRIBUTES\*O
.P
This attribute indicates which attributes are relevant.
It can take one of the following values:
.ML
.LI
\*LOM_FALSE\*O,
meaning that information is only requested on those attributes that are
listed in the OM attribute
\*LDS_\%ATTRIBUTES_\%SELECTED\*O.
.LI
\*LOM_TRUE\*O,
meaning that information is requested on all attributes in the directory
entry.
Any values of the OM attribute
\*LDS_\%ATTRIBUTES_\%SELECTED\*O
are ignored in this case.
.LE
.LI
\*LDS_ATTRIBUTES_SELECTED\*O
.P
This attribute lists the types of attributes in the entry
from which information will be extracted.
The value of this OM attribute is used only if the value of
\*LDS_ALL_ATTRIBUTES\*O is \*LOM_FALSE\*O.  If an empty list is supplied, no attribute
data is returned that could be used to verify
the existence of an entry for a DN.
.LI
\*LDS_INFO_TYPE\*O
.iX "information type"
.P
This attribute identifies what
information will be extracted from each attribute identified.
It must take one of the following values:
.ML 
.LI
\*LDS_TYPES_ONLY\*O,
meaning that only the attribute types
of the selected attributes in the entry
are returned.
.LI
\*LDS_TYPES_AND_VALUES\*O,
.iX "types" "and values"
meaning that both the attribute types and the attribute values
of the selected attributes in the entry
are returned.
.LE
.LE
.H 2 "DS_C_ENTRY_MOD"
An instance of OM class \*LDS_C_ENTRY_MOD\*O
.iX "entry" "modification"
describes a single modification to a specified attribute of a directory entry.
.P 
An instance of this OM class has the OM attributes of its superclasses,
\*VOM_C_OBJECT\*O and
\*LDS_C_ATTRIBUTE\*O,
in addition to
the OM attribute listed in Table 11-14.
.P
.ne 2i
.TB "OM Attribute of DS_C_ENTRY_MOD"
.TS 
center,box,tab(#);
lB | lB | lB | lB | lB
lB | lB | lB | lB | lB
lB | l | c | c | lB.
##Value#Value#Value
OM Attribute#Value Syntax#Length#Number#Initially
=
DS_MOD_TYPE#Enum\*L(DS_\*O#\*(EM#1#DS_ADD_\*O
#\*LModification_\*O###ATTRIBUTE
#\*LType)\*O
.TE
.P 
The attribute type to be modified, and the associated values,
are specified in the OM attributes
\*LDS_ATTRIBUTE_TYPE\*O and \*LDS_\%ATTRIBUTE_\%VALUES\*O
that are inherited from the
\*LDS_\%C_\%ATTRIBUTE\*O
superclass.
.ML
.LI
\*LDS_MOD_TYPE\*O
.iX "modification type"
.P
This attribute identifies the type of modification. It must have
one of the following values:
.ML 
.LI 
\*LDS_ADD_ATTRIBUTE\*O,
.iX "attribute" "adding"
meaning that the specified attribute is absent and will be added
with the specified values.
.LI 
\*LDS_ADD_VALUES\*O,
meaning that the specified attribute is present and that one or more
specified values will be added to it.
.LI 
\*LDS_REMOVE_ATTRIBUTE\*O,
meaning that the specified attribute is present and will be removed.
Any values present in the OM attribute
\*LDS_ATTRIBUTE_VALUES\*O
are ignored.
.LI 
\*LDS_REMOVE_VALUES\*O,
meaning that the specified attribute is present and that one or
more specified values will be removed from it.
.LE
.LE
.H 2 "DS_C_ENTRY_MOD_LIST"
An instance of OM class \*LDS_C_ENTRY_MOD_LIST\*O
.iX "entry" "modification" "list"
comprises a sequence of changes to be made to a directory entry.
.P 
An instance of this OM class has the OM attributes of its superclass,
\*VOM_C_OBJECT\*O,
in addition to
the OM attribute listed in Table 11-15.
.P
.ne 2i
.TB "OM Attribute of DS_C_ENTRY_MOD_LIST"
.TS 
center,box,tab(#);
lB | lB | lB | lB | lB
lB | lB | lB | lB | lB
lB | l | c | c | c.
##Value#Value#Value
OM Attribute#Value Syntax#Length#Number#Initially
=
DS_CHANGES#Object\*L(DS_C_\*O#\*(EM#1 or more#\*(EM
#\*LENTRY_MOD)\*O
.TE
.P
.ML
.LI
\*LDS_CHANGES\*O
.P
This attribute identifies
the modifications to be made (in the order specified)
to the directory entry of the specified object.
.LE
.H 2 "DS_C_ERROR"
The OM class
\*VDS_C_ERROR\*O
comprises the parameters common to all errors.
.P 
It is an abstract OM class
with the OM attributes of its superclass,
\*VOM_C_OBJECT\*O,
in addition to
the OM attribute listed in Table 11-16.
.P 
.ne 1.2i
.TB "OM Attribute of DS_C_ERROR"
.TS 
center,box,tab(#);
lB | lB | lB | lB | lB
lB | lB | lB | lB | lB
lB | l | c | c | c.
##Value#Value#Value
OM Attribute#Value Syntax#Length#Number#Initially
=
DS_PROBLEM#Enum\*L(DS_Problem)\*O#\*(EM#1#\*(EM
.TE
.P 
.ne 5
Details of errors are returned in an instance of a subclass of this OM class.
Each such subclass represents a particular kind of error,
and is one of the following:
.ML
.LI
\*LDS_C_ABANDON_FAILED\*O
.LI
\*LDS_C_ATTRIBUTE_PROBLEM\*O
.LI
\*LDS_C_COMMUNICATIONS_ERROR\*O
.LI
\*LDS_C_LIBRARY_ERROR\*O
.LI
\*LDS_C_NAME_ERROR\*O
.LI
\*LDS_C_SECURITY_ERROR\*O
.LI
\*LDS_C_SERVICE_ERROR\*O
.LI
\*LDS_C_SYSTEM_ERROR\*O
.LI
\*LDS_C_UPDATE_ERROR\*O
.LE
.P 
A number of possible values are defined for these subclasses.
DCE XDS does not return other values for error conditions
described in this chapter.
Information on system errors can be found in Section 11.44.
The following is a list of the error values.  Each error OM class section
defines the possible error values associated with that class.  For a 
description of the errors please refer to the \*(Tg.
.ML
.LI
\*LDS_E_ADMIN_LIMIT_EXCEEDED\*O
.LI
\*LDS_E_AFFECTS_MULTIPLE_DSAS\*O
.LI
\*LDS_E_ALIAS_DEREFERENCING_PROBLEM\*O
.LI
\*LDS_E_ALIAS_PROBLEM\*O
.LI
\*LDS_E_ATTRIBUTE_OR_VALUE_EXISTS\*O
.LI
\*LDS_E_BAD_ARGUMENT\*O
.LI
\*LDS_E_BAD_CLASS\*O
.LI
\*LDS_E_BAD_CONTEXT\*O
.LI
\*LDS_E_BAD_NAME\*O
.LI
\*LDS_E_BAD_SESSION\*O
.LI
\*LDS_E_BAD_WORKSPACE\*O
.LI
\*LDS_E_BUSY\*O
.LI
\*LDS_E_CANNOT_ABANDON\*O
.LI
\*LDS_E_CHAINING_REQUIRED\*O
.LI
\*LDS_E_COMMUNICATIONS_PROBLEM\*O
.LI
\*LDS_E_CONSTRAINT_VIOLATION\*O
.LI
\*LDS_E_DIT_ERROR\*O
.LI
\*LDS_E_ENTRY_EXISTS\*O
.LI
\*LDS_E_INAPPROP_AUTHENTICATION\*O
.LI
\*LDS_E_INAPPROP_MATCHING\*O
.LI
\*LDS_E_INSUFFICIENT_ACCESS_RIGHTS\*O
.LI
\*LDS_E_INVALID_ATTRIBUTE_SYNTAX\*O
.LI
\*LDS_E_INVALID_ATTRIBUTE_VALUE\*O
.LI
\*LDS_E_INVALID_CREDENTIALS\*O
.LI
\*LDS_E_INVALID_REF\*O
.LI
\*LDS_E_INVALID_SIGNATURE\*O
.LI
\*LDS_E_LOOP_DETECTED\*O
.LI
\*LDS_E_MISCELLANEOUS\*O
.LI
\*LDS_E_MISSING_TYPE\*O
.LI
\*LDS_E_MIXED_SYNCHRONOUS\*O
.LI
\*LDS_E_NAMING_VIOLATION\*O
.LI
\*LDS_E_NO_INFO\*O
.LI
\*LDS_E_NO_SUCH_ATTRIBUTE_OR_VALUE\*O
.LI
\*LDS_E_NO_SUCH_OBJECT\*O
.LI
\*LDS_E_NO_SUCH_OPERATION\*O
.LI
\*LDS_E_NOT_ALLOWED_ON_NON_LEAF\*O
.LI
\*LDS_E_NOT_ALLOWED_ON_RDN\*O
.LI
\*LDS_E_NOT_SUPPORTED\*O
.LI
\*LDS_E_OBJECT_CLASS_MOD_PROHIB\*O
.LI
\*LDS_E_OBJECT_CLASS_VIOLATION\*O
.LI
\*LDS_E_OUT_OF_SCOPE\*O
.LI
\*LDS_E_PROTECTION_REQUIRED\*O
.LI
\*LDS_E_TIME_LIMIT_EXCEEDED\*O
.LI
\*LDS_E_TOO_LATE\*O
.LI
\*LDS_E_TOO_MANY_OPERATIONS\*O
.LI
\*LDS_E_TOO_MANY_SESSIONS\*O
.LI
\*LDS_E_UNABLE_TO_PROCEED\*O
.LI
\*LDS_E_UNAVAILABLE\*O
.LI
\*LDS_E_UNAVAILABLE_CRIT_EXT\*O
.LI
\*LDS_E_UNDEFINED_ATTRIBUTE_TYPE\*O
.LI
\*LDS_E_UNWILLING_TO_PERFORM\*O
.LE
.H 2 "DS_C_EXT"
An instance of OM class \*LDS_C_EXT\*O
.iX "extensions"
indicates that a standardized extension
to the directory service is outlined in the standards.
Such extensions will only be standardized in post-1988
versions of the standards.
Therefore, this OM class is not used by the XDS API and is only included
for X/Open conformance purposes.
.P 
An instance of this OM class has the OM attributes of its superclass,
\*VOM_C_OBJECT\*O, in addition to
the OM attributes listed in Table 11-17.
.P
.TB "OM Attributes of DS_C_EXT"
.ps 11
.vs 13
.TS 
center,box,tab(#);
lB | lB | lB | lB | lB
lB | lB | lB | lB | lB
lB | l | c | c | c.
##Value#Value#Value
OM Attribute#Value Syntax#Length#Number#Initially
=
DS_CRIT#\*LOM_S_BOOLEAN\*O#\*(EM#1#\*LOM_FALSE\*O
_
DS_IDENT#\*LOM_S_INTEGER\*O#\*(EM#1#\*(EM
_
DS_ITEM_#Any#\*(EM#1#\*(EM
PARAMETERS
.TE
.ps 12
.vs 14
.P 
.ML
.LI
\*LDS_CRIT\*O
.P
This attribute must have one of the following values:
.ML
.LI
\*LOM_FALSE\*O,
meaning that the originator permits the operation to be performed
even if the extension is not available.
.LI
\*LOM_TRUE\*O,
meaning that the originator mandates that the extended operation be
performed.  If the extended operation is not performed, an error is reported.
.LE
.LI
.ne 3
\*LDS_IDENT\*O
.iX "identifier"
.P
This attribute identifies the service extension.
.LI
\*LDS_ITEM_PARAMETERS\*O
.P
This OM attribute supplies the parameters of the extension.
Its syntax is determined by the value of
\*LDS_IDENT\*O.
.LE
.H 2 "DS_C_FILTER"
An instance of OM class \*LDS_C_FILTER\*O
.gL "Filter"
.iX "filter"
is used to select or reject an object on the basis of
information in its directory entry.
At any point in time, an attribute filter has a value relative to every object.
The value is FALSE, TRUE, or undefined.
The object is selected if, and only if, the filter's value is TRUE.
.P 
An instance of this OM class has the OM attributes of its superclass,
\*VOM_C_OBJECT\*O, in addition to
the OM attributes listed in Table 11-18.
.P
.TB "OM Attributes of DS_C_FILTER"
.TS 
center,box,tab(#);
lB | lB | lB | lB | lB
lB | lB | lB | lB | lB
lB | l | c | c | c.
##Value#Value#Value
OM Attribute#Value Syntax#Length#Number#Initially
=
DS_FILTER_#Object\*L(DS_C_\*O#\*(EM#0 or more#\*(EM
ITEMS#\*LFILTER_ITEM)\*O
_
DS_FILTERS#T{
Object\*L(DS_C_ FILTER)\*O
T}#\*(EM#0 or more#\*(EM
_
DS_FILTER_#Enum\*L(DS_Filter_\*O#\*(EM#1#\*LDS_AND\*O
TYPE#\*LType)\*O
.TE
.P 
A \*Efilter\*O is a collection of less elaborate filters and
elementary \*LDS_FILTER_ITEMS\*O,
together with a Boolean operation.
The filter value is undefined if, and only if, all the component
\*LDS_FILTERS\*O and \*LDS_FILTER_ITEMS\*O are undefined.
Otherwise, the filter has a Boolean value with respect to any directory entry,
which can be determined by evaluating each of the nested components
and combining their values using the Boolean operation.
The components whose values are undefined are ignored.
.ML
.ne 4
.LI
\*LDS_FILTER_ITEMS\*O
.iX "filter" "item"
.P
This attribute is a collection of assertions,
each relating to just one attribute of a directory entry.
.LI
\*LDS_FILTERS\*O
.P
This attribute is a collection of simpler filters.
.LI
\*LDS_FILTER_TYPE\*O
.iX "filter" "type"
.P
This attribute is the filter's type.
It can have any of the following values:
.ML
.LI
\*LDS_AND\*O,
meaning that the filter is the logical conjunction of its components.
The filter is TRUE unless any of the nested filters or filter items is FALSE.
If there are no nested components, the filter is TRUE.
.LI
\*LDS_OR\*O,
meaning that the filter is the logical disjunction of its components.
The filter is FALSE unless any of the nested filters or filter items is TRUE.
If there are no nested components, the filter is FALSE.
.LI
\*LDS_NOT\*O,
meaning that the result of this filter is reversed.
There must be exactly one nested filter or filter item.
The filter is TRUE if the enclosed filter or filter item is FALSE,
and is FALSE if the enclosed filter or filter item is TRUE.
.LE
.LE
.H 2 "DS_C_FILTER_ITEM"
An instance of OM class \*LDS_C_FILTER_ITEM\*O
.iX "item"
is a component of \*LDS_C_FILTER\*O.
It is an assertion about the existence or values of a single attribute type
in a directory entry.
.P 
An instance of this OM class has the OM attributes of its superclasses,
\*VOM_C_OBJECT\*O and \*LDS_C_ATTRIBUTE\*O, in addition to
the OM attributes listed in Table 11-19.
.P
.ne 3i
.TB "OM Attributes of DS_C_FILTER_ITEM"
.TS 
center,box,tab(#);
lB | lB | lB | lB | lB
lB | lB | lB | lB | lB
lB | l | c | c | c
lB | l | l | c | c.
##Value#Value#Value
OM Attribute#Value Syntax#Length#Number#Initially
=
DS_FILTER_#Enum\*L(DS_Filter_\*O#\*O\*(EM#1#\*(EM
ITEM_TYPE#\*LItem_Type)\*O
_
DS_FINAL_#String(\*L*\*O)#\*O1 or more#\*O0 or 1#\*(EM
SUBSTRING
_
DS_INITIAL_#String(\*L*\*O)#\*O1 or more#\*O0 or 1#\*(EM
SUBSTRING
.TE
.P 
.nS note
\*OOM attributes \*LDS_ATTRIBUTE_TYPE\*O and \*LDS_\%ATTRIBUTE_\%VALUES\*O 
are inherited from the superclass \*LDS_C_ATTRIBUTE\*O.
.nE
.P 
The value of the filter item is undefined in the following cases:
.P
.ML 
.LI 
The \*LDS_ATTRIBUTE_TYPE\*O
is not known.
.LI 
None of the
\*LDS_ATTRIBUTE_VALUES\*O
conform to the attribute syntax defined for that attribute type.
.LI 
The \*LDS_FILTER_ITEM_TYPE\*O
uses a matching rule that is not defined for the attribute syntax.
.LE
.P 
Access control restrictions can also cause the value to be undefined.
.P 
.ML
.LI
\*LDS_FILTER_ITEM_TYPE\*O
.iX "filter" "item type"
.P
This attribute identifies the type of filter item and,
thus, the nature of the filter.
The filter item can adopt any of the following values:
.ML
.LI
\*LDS_APPROXIMATE_MATCH\*O,
.iX "approximate match"
meaning that the filter is TRUE if the
directory entry contains at least one value 
of the specified type that is approximately equal to that specified
(the meaning of ``approximately equal'' is implementation dependent);
otherwise, the filter is FALSE.
.P
.ne 6
Rules for approximate matching are defined locally.
For example, an approximate match may take into account spelling 
variations or employ phonetic comparison rules.
In the absence of any such capabilities,
a DSA needs to treat an approximate match as a test for equality.
DCE GDS supports phonetic comparisons.
There must be exactly one value of the OM attribute
\*LDS_ATTRIBUTE_VALUES\*O.
.LI
.ne 5
\*LDS_EQUALITY\*O,
meaning that the filter is TRUE if the entry contains
at least one value of the specified type 
that is equal to the value specified, according to the equality matching
rule in force; otherwise, the filter is FALSE.
There must be exactly one value of the OM attribute
\*LDS_ATTRIBUTE_VALUES\*O.
.LI
\*LDS_GREATER_OR_EQUAL\*O,
meaning that the filter item is TRUE if, and only if,
at least one value of the attribute is greater than or equal to the
supplied value.
There must be exactly one value of the OM attribute
\*LDS_ATTRIBUTE_VALUES\*O.
.LI
\*LDS_LESS_OR_EQUAL\*O,
meaning that the filter item is TRUE if, and only if,
at least one value of the attribute is less than or equal to the
supplied value.
There must be exactly one value of the OM attribute
\*LDS_ATTRIBUTE_VALUES\*O.
.LI
\*LDS_PRESENT\*O,
meaning that the filter is TRUE if the entry
contains an attribute of the specified 
type; otherwise, it is FALSE.
.P
Any values of the OM attribute
\*LDS_ATTRIBUTE_VALUES\*O
are ignored.
.LI
\*LDS_SUBSTRINGS\*O,
.iX "substrings"
meaning that the filter is TRUE if the entry
contains at least one value of the specified attribute type
that contains all of the specified substrings in the given order;
otherwise, the filter is FALSE.
.P
Any number of substrings can be given as values of the OM attribute
\*LDS_ATTRIBUTE_VALUES\*O.  Similarly, no substrings can be specified.
There can also be a substring in
\*LDS_INITIAL_SUBSTRING\*O or \*LDS_FINAL_SUBSTRING\*O, or both.
The substrings do not overlap,
but they can be separated from each other or from the ends of the attribute
value by zero or more string elements.
However, at least one attribute of type \*LDS_ATTRIBUTE_VALUES\*O,
\*LDS_INITIAL_SUBSTRING\*O, or \*LDS_FINAL_SUBSTRING\*O must exist.
.LE
.LI
\*LDS_FINAL_SUBSTRING\*O
.iX "final substring"
.P
If present, this attribute is the substring that will match the final part
of an attribute value in the entry.
This attribute can only exist if the \*LDS_FILTER_ITEM_TYPE\*O is equal
to \*LDS_SUBSTRINGS\*O.
.LI
.ne 4
\*LDS_INITIAL_SUBSTRING\*O
.iX "initial substring"
.P
If present, this attribute is
the substring that will match the initial part of an
attribute value in the entry.
.LE
.H 2 "DS_C_LIBRARY_ERROR"
An instance of OM class
\*LDS_C_LIBRARY_ERROR\*O
.iX "errors" "directory service" "library"
reports an error detected by the interface function library.
.P 
An application is not permitted to create or modify instances of
this OM class.
An instance of this OM class has the OM attributes of its superclasses,
\*VOM_C_OBJECT\*O and
\*VDS_C_ERROR\*O,
and no additional OM attributes.
.P 
Each function has several possible errors that can be detected
by the library itself
and that are returned directly by the subroutine.
These errors occur when the library itself is incapable of performing
an action, submitting a service request, or deciphering a
response from the directory service.
.P 
The OM attribute \*LDS_PROBLEM\*O, which is inherited from the superclass
\*VDS_C_ERROR\*O, identifies the particular library error that occurred.
(In reference pages, the ERRORS section of
each function description lists the errors that the respective
function can return.)
Its value is one of the following:
.P
.ML
.LI
\*LDS_E_BAD_ARGUMENT\*O
.LI
\*LDS_E_BAD_CLASS\*O
.LI
\*LDS_E_BAD_CONTEXT\*O
.LI
\*LDS_E_BAD_NAME\*O
.LI
\*LDS_E_BAD_SESSION\*O
.LI
\*LDS_E_MISCELLANEOUS\*O
.LI
\*LDS_E_MISSING_TYPE\*O
.LI
\*LDS_E_MIXED_SYNCHRONOUS\*O
.LI
\*LDS_E_NOT_SUPPORTED\*O
.LI
.ne 3
\*LDS_E_TOO_MANY_OPERATIONS\*O
.LI
\*LDS_E_TOO_MANY_SESSIONS\*O
.LE
.H 2 "DS_C_LIST_INFO"
An instance of OM class \*LDS_C_LIST_INFO\*O
.iX "list" "info"
is part of the results of
\*Lds_list(\|)\*O.
.P 
An application is not permitted to create or modify instances of this OM class.
An instance of this OM class has the OM attributes of its superclasses,
\*VOM_C_OBJECT\*O and \*VDS_C_COMMON_RESULTS\*O, in addition to
the OM attributes listed in Table 11-20.
.P
.ne 3i
.TB "OM Attributes of DS_C_LIST_INFO"
.TS 
center,box,tab(#);
lB | lB | lB | lB | lB
lB | lB | lB | lB | lB
lB | l | c | c | c.
##Value#Value#Value
OM Attribute#Value Syntax#Length#Number#Initially
=
DS_OBJECT_#Object\*V(DS_C_\*O#\*(EM#0 or 1#\*(EM
NAME#\*VNAME)\*O
_
DS_PARTIAL_#Object\*L(DS_C_\*O#\*(EM#0 or 1#\*(EM
OUTCOME_#\*LPARTIAL_\*O
QUAL#\*LOUTCOME_\*O
#\*LQUAL)\*O
_
DS_#Object\*L(DS_C_\*O#\*(EM#0 or more#\*(EM
SUBORDINATES#\*LLIST_INFO_\*O
#\*LITEM)\*O
.TE
.P
.ML
.LI
\*LDS_OBJECT_NAME\*O
.iX "object" "name"
.P
This attribute is
the DN of the target object of the operation.
It is present if the OM attribute
\*LDS_ALIAS_DEREFERENCED\*O,
inherited from the superclass
\*VDS_C_COMMON_RESULTS\*O,
is
\*LOM_TRUE\*O.
.LI
\*LDS_PARTIAL_OUTCOME_QUAL\*O
.iX "partial outcome qualifier"
.P
This OM attribute value is present if the list of subordinates is incomplete.
The DSA or DSAs that provided this list did not complete the search
for some reason.
The partial outcome qualifier contains details of why the search is not
completed, and which areas of the directory have not been searched.
.LI
.ne 4
\*LDS_SUBORDINATES\*O
.iX "object" "subordinate"
.P
This attribute contains
information about zero or more subordinate objects identified by
\*Lds_list(\|)\*O.
.LE
.H 2 "DS_C_LIST_INFO_ITEM"
An instance of OM class \*LDS_C_LIST_INFO_ITEM\*O
comprises details
returned by
\*Lds_list(\|)\*O
of a single subordinate object.
.P 
An application is not permitted to create or modify instances of this OM class.
An instance of this OM class has the OM attributes of its superclass,
\*VOM_C_OBJECT\*O, in addition to
the OM attributes listed in Table 11-21.
.P
.ne 3i
.TB "OM Attributes of DS_C_LIST_INFO_ITEM"
.TS 
center,box,tab(#);
lB | lB | lB | lB | lB
lB | lB | lB | lB | lB
lB | l | c | c | c.
##Value#Value#Value
OM Attribute#Value Syntax#Length#Number#Initially
=
DS_ALIAS_ENTRY#\*LOM_S_\*O#\*(EM#1#\*(EM
#\*LBOOLEAN\*O
_
DS_FROM_ENTRY#\*LOM_S_\*O#\*(EM#1#\*(EM
#\*LBOOLEAN\*O
_
DS_RDN#Object\*V(DS_C_\*O#\*(EM#1#\*(EM
#\*VRELATIVE_\*O
#\*VNAME)\*O
.TE
.P 
.ML
.LI
\*LDS_ALIAS_ENTRY\*O
.P
This attribute indicates whether the object is an alias.
.LI
\*LDS_FROM_ENTRY\*O
.iX "from entry"
.P
This attribute indicates whether information about the 
object was obtained directly from its directory entry,
rather than from a copy of the entry.
.LI
\*LDS_RDN\*O
.iX "-: RDN" "relative distinguished name"
.P
This attribute contains the RDN of the object.
If this is the name of an alias entry, as indicated by
\*LDS_ALIAS_ENTRY\*O,
it is not dereferenced.
.LE
.H 2 "DS_C_LIST_RESULT"
An instance of OM class \*LDS_C_LIST_RESULT\*O
comprises the results of a successful call to
\*Lds_list(\|)\*O.
.P 
An application is not permitted to create or modify instances of this OM class.
An instance of this OM class has the OM attributes of its superclass,
\*VOM_C_OBJECT\*O, in addition to
the OM attributes listed in Table 11-22.
.P
.TB "OM Attributes of DS_C_LIST_RESULT"
.TS 
center,box,tab(#);
lB | lB | lB | lB | lB
lB | lB | lB | lB | lB
lB | l | c | c | c.
##Value#Value#Value
OM Attribute#Value Syntax#Length#Number#Initially
=
DS_LIST_INFO#Object\*L(DS_C_\*O#\*(EM#0 or 1#\*(EM
#\*LLIST_INFO)\*O
_
DS_#Object\*L(DS_C_\*O#\*(EM#0 or more#\*(EM
UNCORRELATED_#\*LLIST_\*O
LIST_INFO#\*LRESULT)\*O
.TE
.nS note
\*ONo instance contains values of both OM attributes.
.nE
.P 
.ML
.LI
\*LDS_LIST_INFO\*O
.iX "list" "info"
.P
This attribute contains the full results of
\*Lds_list(\|)\*O,
or just part of them.
.LI
\*LDS_UNCORRELATED_LIST_INFO\*O
.P
When the DUA requests a protection request of \*Esigned\*O,
the information returned can comprise a number of sets of results
originating from, and signed by, different components of the directory.
Implementations can reflect this structure by nesting
\*LDS_LIST_RESULT\*O
OM objects as values of this OM attribute.
Alternatively, they can collapse all results
into a single value of the OM attribute
\*LDS_LIST_INFO\*O.
The DCE directory service does not support the optional feature of signed
results; therefore, this OM attribute is never present.
.LE
.H 2 "DS_C_NAME"
The OM class \*VDS_C_NAME\*O
.iX "name"
represents a name of an object in the directory,
or a part of such a name.
.P 
It is an abstract class, which has the attributes of its superclass,
\*VOM_C_OBJECT\*O,
and no other OM attributes.
.P 
A name uniquely distinguishes the object from all other objects whose
entries are displayed in the DIT.
However, an object can have more than one name;
that is, a name need not be unique.  A DN is unique;
there are no other DNs that identify the same object.  An RDN is part of a name
and only distinguishes the object from others that are its siblings.
.P 
Most of the interface functions take a \*Vname\*O parameter,
the value of which must be
an instance of one of the subclasses of this OM class.
Thus, this OM class is useful for amalgamating all possible representations
of names.
.P 
The DCE XDS implementation defines one subclass of this OM class
and, thus, a single representation for names; that is,
\*LDS_C_DS_DN\*O,
which provides a representation for names, including DNs.
.H 2 "DS_C_NAME_ERROR"
An instance of OM class
\*LDS_C_NAME_ERROR\*O
.iX "errors" "directory service" "name"
reports a name-related directory service error.
.P 
An application is not permitted to create or modify instances
of this OM class.
An instance of this OM class has the OM attributes of its superclasses,
\*VOM_C_OBJECT\*O and
\*VDS_C_ERROR\*O,
in addition to
the OM attribute listed in Table 11-23.
.P
.ne 2i
.TB "OM Attribute of DS_C_NAME_ERROR"
.TS 
center,box,tab(#);
lB | lB | lB | lB | lB
lB | lB | lB | lB | lB
lB | l | c | c | c.
##Value#Value#Value
OM Attribute#Value Syntax#Length#Number#Initially
=
DS_MATCHED#Object\*V(DS_C_\*O#\*(EM#1#\*(EM
#\*VNAME)\*O###
.TE
.ML
.LI
\*LDS_MATCHED\*O
.P
This attribute identifies the initial part
(up to, but excluding, the first RDN that is unrecognized)
of the name that is supplied,
or of the name resulting from dereferencing an alias.
It names the lowest entry (object or alias) in the DIT that is matched.
.LE
.P
The OM attribute \*LDS_PROBLEM\*O, which is inherited from the superclass
\*VDS_C_ERROR\*O, identifies the cause of the failure.
Its value is one of the following:
.ML
.LI
\*LDS_E_ALIAS_DEREFERENCING_PROBLEM\*O
.LI
\*LDS_E_ALIAS_PROBLEM\*O
.LI
\*LDS_E_INVALID_ATTRIBUTE_VALUE\*O
.LI
\*LDS_E_NO_SUCH_OBJECT\*O
.LE
.H 2 "DS_C_OPERATION_PROGRESS"
An instance of OM class \*LDS_C_OPERATION_PROGRESS\*O
.iX "operation" "progress"
specifies the progress or processing state of a directory request.
.P 
An application is not permitted to create or modify instances of this OM class.
An instance of this OM class has the OM attributes of its superclass,
\*VOM_C_OBJECT\*O, in addition to
the OM attributes listed in Table 11-24.
.P
.ne 3i
.TB "OM Attributes of DS_C_OPERATION_PROGRESS"
.TS
center,box,tab(#);
lB | lB | lB | lB | lB
lB | lB | lB | lB | lB
lB | l | c | c | c.
##Value#Value#Value
OM Attribute#Value Syntax#Length#Number#Initially
=
DS_NAME_#Enum\*L(DS_Name_\*O#\*(EM#1#\*(EM
RESOLUTION_#\*LResolution_Phase)\*O
PHASE
_
DS_NEXT_#\*LOM_S_INTEGER\*O#\*(EM#0 or 1#\*(EM
RDN_TO_BE_
RESOLVED
.TE
.P 
The target name mentioned as follows is the name upon which
processing of the directory request is currently focused.
.P
.ML
.LI
\*LDS_NAME_RESOLUTION_PHASE\*O
.iX "name" "resolution phase"
.P
This attribute indicates what phase is reached in handling the target name.
It must have one of the following values:
.ML
.LI 
\*LDS_COMPLETED\*O,
meaning that the DSA holding the target object is reached.
.LI 
\*LDS_NOT_STARTED\*O,
meaning that so far a DSA is not reached with a naming context
containing the initial RDNs of the name.
.LI 
\*LDS_PROCEEDING\*O,
meaning that the initial part of the name has been recognized,
although the DSA holding the target object has not yet been reached.
.LE
.LI
\*LDS_NEXT_RDN_TO_BE_RESOLVED\*O
.P
This attribute
indicates to the DSA which of the RDNs in the target name is next to be
resolved.
It takes the form of an integer in the range from 1 to the number of RDNs
in the name.
This OM attribute only has a value if the value of
\*LDS_NAME_RESOLUTION_PHASE\*O is \*LDS_PROCEEDING\*O.
.LE
.P 
The constant
\*LDS_OPERATION_NOT_STARTED\*O
.iX "operation" "not started"
can be used in the
\*LDS_C_CONTEXT\*O
of an operation instead of an instance of this OM class.
.H 2 "DS_C_PARTIAL_OUTCOME_QUAL"
An instance of OM class \*LDS_C_PARTIAL_OUTCOME_QUAL\*O
.iX "partial outcome qualifier"
explains to what extent the results of a call to
\*Lds_list(\|)\*O or \*Lds_search(\|)\*O
are incomplete and why.
.P 
An application is not permitted to create or modify instances of this OM class.
An instance of this OM class has the OM attributes of its superclass,
\*VOM_C_OBJECT\*O, in addition to
the OM attributes listed in Table 11-25.
.P
.ne 2.5i
.TB "OM Attributes of a DS_C_PARTIAL_OUTCOME_QUAL"
.TS 
center,box,tab(#);
lB | lB | lB | lB | lB
lB | lB | lB | lB | lB
lB | l | c | c | c.
##Value#Value#Value
OM Attribute#Value Syntax#Length#Number#Initially
=
DS_LIMIT_#Enum\*L(DS_Limit_\*O#\*(EM#1#\*(EM
PROBLEM#\*LProblem)\*O
_
DS_#\*LOM_S_\*O#\*(EM#1#\*(EM
UNAVAILABLE_#\*LBOOLEAN\*O
CRIT_EXT
_
DS_#Object\*L(DS_C_\*O#\*(EM#0 or more#\*(EM
UNEXPLORED#\*LCONTINUATION_\*O
#\*LREF)\*O
.TE
.P 
.ML
.LI
\*LDS_LIMIT_PROBLEM\*O
.iX "limit problem"
.P
This attribute explains fully or partly why the results are incomplete.
It can have one of the following values:
.ML
.LI
\*LDS_ADMIN_LIMIT_EXCEEDED\*O,
.iX "administrative limit exceeded"
meaning that an administrative limit is reached.
.LI
\*LDS_NO_LIMIT_EXCEEDED\*O,
.iX "no limit exceeded"
meaning that there is no limit problem.
.LI
\*LDS_SIZE_LIMIT_EXCEEDED\*O,
meaning that the maximum number of objects specified as a service control is
reached.
.LI
\*LDS_TIME_LIMIT_EXCEEDED\*O,
.iX "time limit" "exceeded"
meaning that the maximum number of seconds specified as a service control is
reached.
.LE
.LI
.ne 12
\*LDS_UNAVAILABLE_CRIT_EXT\*O
.P
If \*LOM_TRUE\*O, this attribute
indicates that some part of the directory service cannot provide
a requested critical service extension.
The user requested one or more standard service extensions
by including values of the OM attribute
\*LDS_EXT\*O
in the \*LDS_C_CONTEXT\*O
supplied for the operation.  Furthermore, the user indicated that some
of these extensions are essential by setting the OM attribute
\*LDS_CRIT\*O
in the extension to
\*LOM_TRUE\*O.
Some of the critical extensions cannot be performed by one particular DSA
or by a number of DSAs.
In general, it is not possible to determine which DSA could not perform
which particular extension.
.LI
\*LDS_UNEXPLORED\*O
.P
This attribute identifies any regions of the directory that are left unexplored
in such a way that the directory request can be continued.
Only continuation references within the scope specified by the
\*LDS_SCOPE_OF_REFERRAL\*O
service control are included.
.LE
.H 2 "DS_C_PRESENTATION_ADDRESS"
An instance of OM class \*LDS_C_PRESENTATION_ADDRESS\*O
.iX "presentation" "address"
is a presentation address of an OSI application entity,
which is used for OSI communications with this instance.
.P 
An instance of this OM class has the OM attributes of its superclasses,
\*VOM_C_OBJECT\*O and \*VDS_C_ADDRESS\*O, in addition to
the OM attributes listed in Table 11-26.
.P
.ne 3i
.TB "OM Attributes of DS_C_PRESENTATION_ADDRESS"
.ps 11
.vs 13
.TS 
center,box,tab(#);
lB | lB | lB | lB | lB
lB | lB | lB | lB | lB
lB | l | c | c | c.
##Value#Value#Value
OM Attribute#Value Syntax#Length#Number#Initially
=
DS_N_#String\*L(OM_S_\*O#\*(EM#1 or more#\*(EM
ADDRESSES#\*LOCTET_STRING)\*O
_
DS_P_SELECTOR#String\*L(OM_S_\*O#\*(EM#0 or 1#\*(EM
#\*LOCTET_STRING)\*O
_
DS_S_SELECTOR#String\*L(OM_S_\*O#\*(EM#0 or 1#\*(EM
#\*LOCTET_STRING)\*O
_
DS_T_SELECTOR#String\*L(OM_S_\*O#\*(EM#0 or 1#\*(EM
#\*LOCTET_STRING)\*O
.TE
.ps 12
.vs 14
.P
.ML
.LI
\*LDS_N_ADDRESSES\*O
.iX "network addresses"
.P
This attribute is the network addresses of the application entity.
.LI
\*LDS_P_SELECTOR\*O
.iX "presentation" "selector"
.P
This attribute is the presentation selector.
.LI
\*LDS_S_SELECTOR\*O
.iX "session" "selector"
.P
This attribute is the session selector.
.LI
\*LDS_T_SELECTOR\*O
.P
This attribute is the transport selector.
.LE
.H 2 "DS_C_READ_RESULT"
An instance of OM class \*LDS_C_READ_RESULT\*O
.iX "read result"
comprises the result of a successful call to
\*Lds_read(\|)\*O.
An application is not permitted to create or modify instances of this OM class.
An instance of this OM class has the OM attributes of its superclasses,
\*VOM_C_OBJECT\*O and \*VDS_\%C_\%COMMON_\%RESULTS\*O,
in addition to the OM attribute listed in Table 11-27.
.P
.ne 2i
.TB "OM Attribute of DS_C_READ_RESULT"
.TS 
center,box,tab(#);
lB | lB | lB | lB | lB
lB | lB | lB | lB | lB
lB | l | c | c | c.
##Value#Value#Value
OM Attribute#Value Syntax#Length#Number#Initially
=
DS_ENTRY#Object\*L(DS_C_\*O#\*(EM#1#\*(EM
#\*LENTRY_INFO)\*O
.TE
.P 
.ML
.LI
\*LDS_ENTRY\*O
.iX "entries"
.P
This attribute contains
the information extracted from the directory entry of the target object.
.LE
.H 2 "DS_C_REFERRAL"
An instance of OM class
\*LDS_C_REFERRAL\*O
.iX "referral"
reports failure to perform an operation and
redirects the requestor to one or more access points
better equipped to perform the operation.
.P 
An application is not permitted to create or modify instances of this OM
class.
An instance of this OM class has the OM attributes of its superclasses,
\*VOM_C_OBJECT\*O and
\*LDS_C_CONTINUATION_REF\*O,
and no additional OM attributes.
.P 
The referral is a continuation reference by means of which the 
operation can progress.
.H 2 "DS_C_RELATIVE_NAME"
The OM class \*VDS_C_RELATIVE_NAME\*O
.iX "relative name"
represents the RDNs of objects in the directory.
It is an abstract class, which has the attributes of its superclass,
\*VOM_C_OBJECT\*O,
and no other OM attributes.
.P 
An RDN is part of a name,
and only distinguishes the object from others that are its siblings.
This OM class is used to accumulate all possible representations
of RDNs.
An argument of interface functions that is an RDN,
or an OM attribute value that is an RDN
is an instance of one of the subclasses of this OM class.
.P 
.ne 3
The DCE XDS API defines one subclass of this OM class,
and, thus, a single representation for RDNs; that is,
\*LDS_C_DS_RDN\*O,
which provides a representation for RDNs.
.H 2 "DS_C_SEARCH_INFO"
An instance of OM class \*LDS_C_SEARCH_INFO\*O
.iX "search" "info"
is part of the result of
\*Lds_search(\|)\*O.
.P 
An application is not permitted to create or modify instances of this OM class.
An instance of this OM class has the OM attributes of its superclasses,
\*VOM_C_OBJECT\*O and \*VDS_C_COMMON_RESULTS\*O, in addition to
the OM attributes listed in Table 11-28.
.P
.TB "OM Attributes of DS_C_SEARCH_INFO"
.TS 
center,box,tab(#);
lB | lB | lB | lB | lB
lB | lB | lB | lB | lB
lB | l | c | c | c.
##Value#Value#Value
OM Attribute#Value Syntax#Length#Number#Initially
=
DS_ENTRIES#Object\*L(DS_C_\*O#\*(EM#0 or more#\*(EM
#\*LENTRY_INFO)\*O
_
DS_OBJECT_#Object\*V(DS_C_\*O#\*(EM#0 or 1#\*(EM
NAME#\*VNAME)\*O##
_
DS_PARTIAL_#Object\*L(DS_C_\*O#\*(EM#0 or 1#\*(EM
OUTCOME_#\*LPARTIAL_\*O
QUAL#\*LOUTCOME_\*O
#\*LQUAL)\*O
.TE
.P 
.ML
.LI 
\*LDS_ENTRIES\*O
.iX "entries"
.P
This attribute contains
information about zero or more objects found by
\*Lds_search(\|)\*O
that matched the given selection criteria.
.LI 
\*LDS_OBJECT_NAME\*O
.iX "object" "name"
.P
This attribute contains
the DN of the target object of the operation.
It is present if the OM attribute
\*LDS_ALIAS_DEREFERENCED\*O,
inherited from the superclass
\*VDS_C_COMMON_RESULTS\*O, is \*LOM_TRUE\*O.
.LI 
.ne 7
\*LDS_PARTIAL_OUTCOME_QUAL\*O
.iX "partial outcome qualifier"
.P
This OM attribute value is only present if the list of entries
is incomplete.
The DSA or DSAs that provided this list did not complete the search
for some reason.
The partial outcome qualifier contains details of why the search was not
completed and which areas of the directory were not searched.
.LE
.H 2 "DS_C_SEARCH_RESULT"
An instance of OM class \*LDS_C_SEARCH_RESULT\*O
comprises the result of a successful call to
\*Lds_search(\|)\*O.
.P 
An application is not permitted to create or modify instances of this OM class.
An instance of this OM class has the OM attributes of its superclass,
\*VOM_C_OBJECT\*O, in addition to
the OM attributes listed in Table 11-29.
.P
.ne 2i
.TB "OM Attributes of DS_C_SEARCH_RESULT"
.ps 11
.vs 13
.TS 
center,box,tab(#);
lB | lB | lB | lB | lB
lB | lB | lB | lB | lB
lB | l | c | c | c.
##Value#Value#Value
OM Attribute#Value Syntax#Length#Number#Initially
=
DS_SEARCH_INFO#Object\*L(DS_C_\*O#\*(EM#0 or 1#\*(EM
#\*LSEARCH_INFO)\*O
_
DS_#Object\*L(DS_C_\*O#\*(EM#0 or more#\*(EM
UNCORRELATED_#\*LSEARCH_\*O
SEARCH_INFO#\*LRESULT)\*O
.TE
.ps 12
.vs 14
.nS note
No instance contains values of both OM attributes.
.nE
.ML
.LI 
\*LDS_SEARCH_INFO\*O
.P
This attribute contains the full result of
\*Lds_search(\|)\*O,
or part of the result.
.LI 
.ne 11
\*LDS_UNCORRELATED_SEARCH_INFO\*O
.P
When the DUA requests a protection request of \*Esigned\*O,
the information returned can comprise a number of sets of results
originating from and signed by different components of the 
directory service.
Implementations can reflect this structure by nesting
\*LDS_\%C_\%SEARCH_\%RESULT\*O
OM objects as values of this OM attribute.
Alternatively, they can collapse all results
into a single value of the OM attribute
\*LDS_SEARCH_INFO\*O.  The DCE directory service
does not support the optional
feature of signed results; therefore, this OM attribute is never
present.
.LE
.H 2 "DS_C_SECURITY_ERROR"
An instance of OM class
\*LDS_C_SECURITY_ERROR\*O
.iX "errors" "directory service" "security"
reports a security-related directory service error.
.P 
An application is not permitted to create or modify instances of this OM
class.
An instance of this OM class has the OM attributes of its superclasses,
\*VOM_C_OBJECT\*O
and \*VDS_C_ERROR\*O,
and no additional OM attributes.
.P
The OM attribute \*LDS_PROBLEM\*O, which is inherited from the superclass
\*VDS_C_ERROR\*O, identifies the cause of this failure.
Its value is one of the following:
.P
.ML
.LI
\*LDS_E_INAPPROP_AUTHENTICATION\*O
.LI
\*LDS_E_INSUFFICIENT_ACCESS_RIGHTS\*O
.LI
\*LDS_E_INVALID_CREDENTIALS\*O
.LI
\*LDS_E_INVALID_SIGNATURE\*O
.LI
\*LDS_E_NO_INFO\*O
.LI
\*LDS_E_PROTECTION_REQUIRED\*O
.LE
.H 2 "DS_C_SERVICE_ERROR"
An instance of OM class
\*LDS_C_SERVICE_ERROR\*O
.iX "errors" "directory service" "service"
reports a directory service error related to the provision of 
the service.
.P 
An application is not permitted to create or modify instances of
this OM class.
An instance of this OM class has the OM attributes of its superclasses,
\*VOM_C_OBJECT\*O
and \*VDS_C_ERROR\*O,
and no additional OM attributes.
.P 
The OM attribute \*LDS_PROBLEM\*O, which is inherited from the superclass
\*VDS_C_ERROR\*O, identifies the cause of the failure.
Its value is one of the following:
.ML
.LI
\*LDS_E_ADMIN_LIMIT_EXCEEDED\*O
.LI
\*LDS_E_BUSY\*O
.LI
\*LDS_E_CHAINING_REQUIRED\*O
.LI
\*LDS_E_DIT_ERROR\*O
.LI
\*LDS_E_INVALID_REF\*O
.LI
\*LDS_E_LOOP_DETECTED\*O
.LI
\*LDS_E_OUT_OF_SCOPE\*O
.LI
\*LDS_E_TIME_LIMIT_EXCEEDED\*O
.LI
\*LDS_E_UNABLE_TO_PROCEED\*O
.LI
\*LDS_E_UNAVAILABLE\*O
.LI
\*LDS_E_UNAVAILABLE_CRIT_EXT\*O
.LI
\*LDS_E_UNWILLING_TO_PERFORM\*O
.LE
.H 2 "DS_C_SESSION"
An instance of OM class \*LDS_C_SESSION\*O
identifies a particular link from the application program
to a DUA.
.P 
An instance of this OM class has the OM attributes of its superclass,
\*VOM_C_OBJECT\*O, in addition to
the OM attributes listed in Table 11-30.
.P
.ne 4i
.TB "OM Attributes of DS_C_SESSION"
.TS
center,box,tab(#);
lB | lB | lB | lB | lB
lB | lB | lB | lB | lB
lB | l | c | c | l.
##Value#Value#Value
OM Attribute#Value Syntax#Length#Number#Initially
=
DS_DSA_#Object\*V(DS_C_\*O#\*(EM#0 or 1#\*Vlocal\*O\s-3\u1\d\s+3
ADDRESS#\*VADDRESS)\*O
_
DS_DSA_NAME#Object\*V(DS_C_\*O#\*(EM#0 or 1#\*Vlocal\*O\s-3\u1\d\s+3
#\*VNAME)\*O
_
T{
DS_FILE_ DESCRIPTOR
T}#\*LOM_S_INTEGER\*O#\*(EM#1#T{
See text
T}
_
DS_#Object\*V(DS_C_\*O#\*(EM#0 or 1#\*(EM
REQUESTOR#\*VNAME)\*O
.TE
.VL .2i
.LI "\s-11\s+1
The default values of these OM attributes are
set to the address and name of the default DSA entry in
the local cache.  If this cache entry is not present, then
these OM attributes are absent.
.LE
.P 
The \*LDS_C_SESSION\*O
gathers all the information that describes
a particular directory interaction.
The parameters that will control such a session are set up in an
instance of this OM class, which is then passed as an argument to
\*Lds_bind(\|)\*O.
This sets the OM attributes that describe the actual characteristics
of this session, and then starts the session.
A session started in this way must pass as the first argument
to each interface function.
The result of modifying an initiated session is unspecified.
Finally, \*Lds_unbind(\|)\*O
is used to terminate the session,
after which the parameters can be modified and a new session started
using the same instance,
if required.
Multiple concurrent sessions can run
using multiple instances of this OM class.
.P 
The OM attributes of a session are as follows:
.P
.ML
.LI 
\*LDS_DSA_ADDRESS\*O
.iX "DSA" "address"
.P
This attribute indicates the address of the default DSA named by
\*LDS_DSA_NAME\*O.
.LI 
.ne 4
\*LDS_DSA_NAME\*O
.iX "DSA" "name"
.P
This attribute indicates the DN of the DSA that is
used by default to service directory requests.
.LI 
.ne 4
\*LDS_FILE_DESCRIPTOR\*O
(Optional Functionality)
.iX "optional functionality"
.P
This OM attribute is not used by DCE XDS and is always set to
\*LDS_NO_VALID_FILE_DESCRIPTOR\*O.
.LI 
\*LDS_REQUESTOR\*O
.iX "requestor"
.P
This attribute is the DN of the user of this
directory service session.
.LE
.P 
Applications can assume that an object of OM class
\*LDS_C_SESSION\*O,
created with default values of all its OM attributes,
works with all the interface functions.
Local administrators need to ensure that this is the case.
Such a session can be created by passing the constant
\*LDS_\%DEFAULT_\%SESSION\*O
as an argument to \*Lds_bind(\|)\*O.
.H 2 "DS_C_SYSTEM_ERROR"
An instance of OM class
\*LDS_C_SYSTEM_ERROR\*O
.iX "errors" "directory service" "system"
reports an error that occurred in the underlying operating system.
.P 
An application is not permitted to create or modify instances of this OM class.
An instance of this OM class has the OM attributes of its superclasses,
\*VOM_C_OBJECT\*O and
\*VDS_C_ERROR\*O,
and no additional OM attributes,
although there can be additional implementation-defined OM attributes.
.P 
The OM attribute \*LDS_PROBLEM\*O, which is inherited from the superclass
\*VDS_C_ERROR\*O, identifies the cause of the failure.
Its value is the same as that of
\*Lerrno\*O
defined in the C language.
.P
The standard names of system errors are defined in
Volume 2 of the \*VX/Open Portability Guide\*O.
.P
If such an error persists, a \*LDS_C_LIBRARY_ERROR\*O
(\*LDS_\%E_\%MISCELLANEOUS\*O) is reported.
.H 2 "DS_C_UPDATE_ERROR"
An instance of OM class
\*LDS_C_UPDATE_ERROR\*O
.iX "errors" "directory service" "update"
reports a directory service error peculiar to a modification operation.
.P 
An application is not permitted to create or modify
instances of this OM class.
An instance of this OM class has the OM attributes of its superclasses,
\*VOM_C_OBJECT\*O and
\*VDS_C_ERROR\*O,
and no additional OM attributes.
.P 
The OM attribute \*LDS_PROBLEM\*O, which is inherited from the superclass
\*VDS_C_ERROR\*O, identifies the cause of the failure.
Its value is one of the following:
.ML
.LI
\*LDS_E_AFFECTS_MULTIPLE_DSAS\*O
.LI
\*LDS_E_ENTRY_EXISTS\*O
.LI
\*LDS_E_NAMING_VIOLATION\*O
.LI
\*LDS_E_NOT_ALLOWED_ON_NON_LEAF\*O
.LI
\*LDS_E_NOT_ALLOWED_ON_RDN\*O
.LI
\*LDS_E_OBJECT_CLASS_MOD_PROHIB\*O
.LI
\*LDS_E_OBJECT_CLASS_VIOLATION\*O
.LE
