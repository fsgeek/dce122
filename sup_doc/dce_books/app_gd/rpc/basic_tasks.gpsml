...\" @OSF_COPYRIGHT@
...\" COPYRIGHT NOTICE
...\" Copyright (c) 1990, 1991, 1992, 1993, 1994 Open Software Foundation, Inc.
...\" ALL RIGHTS RESERVED (DCE).  See the file named COPYRIGHT.DCE for
...\" the full copyright text.
...\" 
...\" 
...\" HISTORY
...\" $Log: basic_tasks.gpsml,v $
...\" Revision 1.1.4.2  1996/03/27  13:32:21  wardr
...\" 	{edit R1.2.1}
...\" 	More Release Edits
...\" 	[1996/03/27  13:31:44  wardr]
...\"
...\" Revision 1.1.4.1  1996/03/21  20:31:27  wardr
...\" 	{edit R1.2.1}
...\" 	Release Edits
...\" 	[1996/03/21  20:30:59  wardr]
...\" 
...\" Revision 1.1.2.6  1995/06/07  14:37:24  rcb
...\" 	PRENTICE HALL reformat; final edits and changes
...\" 	[1995/06/05  19:55:44  rcb]
...\" 
...\" 	PRENTICE HALL reformat
...\" 	[1995/04/17  19:37:11  rcb]
...\" 
...\" 	incorporated 1.1 edits
...\" 	[1995/04/17  19:08:35  rcb]
...\" 
...\" 	no change
...\" 	[1995/04/17  17:18:31  rcb]
...\" 
...\" Revision 1.1.2.5  1994/10/27  19:42:51  jshirley
...\" 	Final edits.
...\" 	[1994/10/27  19:41:38  jshirley]
...\" 
...\" Revision 1.1.2.4  1994/10/10  12:46:43  jshirley
...\" 	{def,10256,R1.1} RPC reorganization and update.
...\" 	[1994/10/10  12:46:07  jshirley]
...\" 
...\" Revision 1.1.2.3  1994/08/11  20:36:28  jhh
...\" 	expand copyright
...\" 	[1994/08/11  19:58:29  jhh]
...\" 
...\" Revision 1.1.2.2  1994/07/11  16:52:11  jshirley
...\" 	{def,10526,R1.1}
...\" 	Cleaned up headings for RPC reorganization.  Moved some sections to
...\" 	other chapters.
...\" 	[1994/07/11  16:51:48  jshirley]
...\" 
...\" Revision 1.1.2.1  1994/07/07  19:28:47  jshirley
...\" 	{def,10526,R1.1}
...\" 	Created new file for the RPC reorganization based on the
...\" 	old file rpc/5_dce_rpc_ops.gpsml.
...\" 	[1994/07/07  19:28:14  jshirley]
...\" 
...\" $EndLog$
...\"
...\"
.H 1 "Basic RPC Routine Usage"
This chapter introduces a number of basic
DCE RPC routines for directory service, communications, and authentication operations 
and discusses major usage issues important for developing
DCE RPC applications.  
.PP
This chapter discusses the following topics:
.ML
.LI
Overview of basic runtime routines
.LI
Server initialization tasks
.LI
How clients find servers
.LE
...\" .ML (bulleted) list
.H 2 "Overview of the RPC Routines"
This section summarizes the major 
concerns of RPC communications, name service interface (NSI) usage, 
and authenticated RPCs.
.H 3 "Basic Operations of RPC Communications"
.PP
The DCE RPC runtime provides the following communications operations for RPC
applications:
.ML
.LI
Managing communications for RPC applications
.PP
As part of server initialization, a server sets up
its communications capabilities by a series of calls to the RPC runtime.
These runtime calls
register the server's RPC interfaces,
tell the RPC runtime what combination of communications protocols to use
for the server,
and register the endpoints of the server for each of its interfaces.
After completing these and any other initialization tasks, 
the server tells the runtime to begin listening for incoming calls. 
.LI
Managing binding information 
.PP
A variety of communications operations allow servers to
access and manipulate binding information.
In addition, a set of communications operations enables applications to
manipulate string representations of binding information
(string bindings).
.LE
.H 3 "Basic Operations of the NSI"
.PP
The NSI routines perform operations on a namespace for RPC
applications.  The fundamental operations include the following:
.iX "NSI" "operations"
.iX "operations" "NSI"
.ML
.LI
Creating and deleting entries in namespaces
.LI
Exporting
.PP
A server uses the NSI 
...\" .gL "export"
.iX "export operation"
export operation to place binding information associated with
its RPC interfaces and
objects into the namespace used by the RPC application.
.LI
Importing
.PP
Clients can 
search for exported binding information associated with
an interface and object by using the NSI
...\" .gL "import"
.iX "NSI" "import operation"
.iX "NSI" "lookup operation"
.iX "import operation" "RPC"
.iX "lookup operation" "RPC"
import operation or lookup operation.  These two operations are
collectively referred to as the \*ENSI search operations\*O.
.LI
Unexporting
.PP
...\" .gL "unexport"
.iX "NSI" "unexport operation"
.iX "unexport operation"
The unexport operation enables a server to remove some
or all of its binding information from a server entry.
.LI
Managing information in a namespace 
.PP
Applications use the NSI interface to place information about
server entries into a
namespace and to inquire about and manage that information.
.LE 
.PP
.H 3 "Basic Operations of Authenticated RPCs"
.iX "authenticated RPC" "basic operations"
.PP
The authenticated RPC routines provide a mechanism for establishing
secure communications between clients and servers.
.PP
To engage in authenticated RPC, a client and server must agree on the
authentication service to be used.  The server's responsibility is to
register its principal name and the authentication service to be
supported with the RPC runtime.  The client's responsibility is to
establish the authentication service, a given protection level, and an
authorization service for the server binding handle.  The protection
level determines the degree of protection applied to individual
messages between the client and server.  The authorization service
determines the form in which the client's credentials will be
presented to the server (for access checking).
.PP
Once authenticated RPC has been established between a client and server, 
the client issues remote procedure calls in the usual fashion, 
with all authentication and protection being
handled by the DCE Security Service and the RPC runtime.
.PP
Table 13-1 relates several of the RPC runtime operations just
discussed with specific routines or sets of routines. 
.PP
.ne 5i
.TB "Basic Runtime Routines"
.na
.ps 11
.vs 13
.TS H
center,box,tab(%);
lbw | lb | lbw.
Description of Operation%Usage%Routine Name(s)
=
.TH
.T&
lb s s.
Communications Routines
_
.T&
l | l | lb.
T{
Set the type of an RPC object 
with the RPC runtime
T}%Server%rpc_object_set_type(\|)
_
T{
Register RPC interfaces
T}%Server%rpc_server_register_if(\|)
_
T{
Select RPC protocol sequences
T}%Server%T{
rpc_network_inq_protseqs(\|) \*Oand\*L rpc_server_use_*protseq*_...(\|)
T}
_
T{
Obtain server binding handles 
T}%Server%rpc_server_inq_bindings(\|)
_
T{
Register endpoints
T}%Server%T{
rpc_ep_register(\|) \*Oand \*Lrpc_ep_register_no_replace(\|)
T}
_
T{
Unregister endpoints
T}%Server%T{
rpc_ep_unregister(\|) 
T}
_
T{
Listen for calls
T}%Server%rpc_server_listen(\|)
_
T{
Manipulate string representations of binding information
(string bindings)
T}%Client%rpc_binding_from_string_binding(\|)
%T{
Client, Server
T}%T{
rpc_binding_to_string_binding(\|), rpc_string_binding_compose(\|), \*Oand\*L 
rpc_string_binding_parse(\|)
T}
_
T{
Change the RPC object in server binding information
T}%Client%rpc_binding_set_object(\|)
_
T{
Convert a client binding handle to a server binding handle
T}%Server%rpc_binding_server_from_client(\|)
_
.T&
lb s s.
T{
Name Service Interface Routines
T}
_
.T&
l | l | lb.
T{
Export binding information to a namespace 
T}%Server%rpc_ns_binding_export(\|)
_
T{
Search a namespace for binding information
T}%Client%T{
rpc_ns_binding_import_...(\|), rpc_ns_binding_lookup_...(\|), \*Oand\*L 
rpc_ns_binding_select(\|)
T}
_
.T&
lb s s.
Authentication Routines
_
.T&
l | l | lb.
T{
Authentication and authorization
T}%T{
Server, Client
T}%rpc_*auth...(\|)
.TE
.ps 12
.vs 14
.ad
.H 2 "Server Initialization Using the RPC Routines"
Before a server can receive any remote procedure calls, it
should usually initialize itself by calling the
\*Ldce_server_register(\|)\*O routine so that the server is properly
recognized by DCE.  
However, servers can instead use a series of
the lower-level RPC runtime routines.  The server initialization
code, written by the application developer, varies among servers.
However, every server must set up its communications capabilities, which
usually involves most of the following tasks:
.AL
.LI
Assigning types to objects
.LI
Registering at least one interface 
.LI
Specifying which protocol sequences the server will use
.LI
Obtaining a list of references to a server's binding information 
(a list of binding handles)
.LI
Registering endpoints
.LI
Exporting binding information to a server entry or entries
in the namespace 
.LI
Listening for remote procedure calls 
.LI
Performing cleanup tasks including unregistering endpoints
.LE
.PP
The following pseudocode illustrates the calls a server makes to
accomplish these basic initialization tasks: 
.oS
/* Initialization tasks */

    rpc_object_set_type(...);
    rpc_server_register_if(...);
    rpc_server_use_all_protseqs(...);
    rpc_server_inq_bindings(...);
    rpc_ep_register(...);
    rpc_ns_binding_export(...);
    rpc_server_listen(...);

/* Cleanup tasks */

    rpc_ep_unregister(...);
.oE
...\" GOT RID OF A FIGURE THAT SHOWED PSEUDO CODE
...\".ne 5.5i
...\".FG "Typical Initialization Calls of an RPC Server"
...\" DEC-file name .P! pictures/rpc-rt-server-calls.ps 4.75i
...\".pI ../rpc/figures/5_dce_rpc_ops_02.ps 0 0 1
...\"
.H 3 "Assigning Types to Objects"
An \*Eobject type\*O is a mechanism for associating a set of RPC
objects and the manager whose remote procedures implement an RPC
interface for those objects.
Object types allow an application to cluster objects, such as
computing resources, according to any relevant criteria.  For example, a
single accounting interface can be implemented to operate on accounting
databases that contain equivalent information but that are formatted
differently; each database format represents a distinct type. 
.PP
To simultaneously offer alternative implementations of an RPC interface for
different types of objects, a server uses alternative managers. 
Servers that implement each of their interfaces with only one manager 
can usually avoid the tasks associated with
assigning object types.  However, when a server offers multiple managers, each
manager must be dedicated to operating on a separate type of object.  In this
case, a server must classify some or all of its objects into types; for
example, a calendar application that specifies one non-nil type UUID for
departmental calendars and another non-nil type UUID for personal calendars. 
.P
By default, objects have the nil type.  Only a server that implements different 
managers for different objects or sets of objects needs to type classify its
RPC objects.  To type classify an object, a server associates the object UUID of
the object with a single 
...\" .gL "type UUID"
.iX "type" "UUID"
type UUID by calling the \*Lrpc_object_set_type(\|)\*O procedure separately
for each object. 
To create a UUID, a server calls the \*Luuid_create(\|)\*O routine.
.P
The exact
implementation of a manager can vary with the type of object
on which each manager operates.  For example, a queue-management interface may
be implemented to manage print queues as objects in one case and to manage
batch queues as objects in another. 
Figure 13-1 illustrates the use of type UUIDs to identify two
types of managers.  
.P
.ne 5i
.FG "Manager Types"
...\" DEC-file name .P! pictures/rpc-manager-types.ps 4.75i
.pI ../rpc/figures/5_dce_rpc_ops_04.ps 0 0 1
.sp .5
.P
When the server receives an
incoming call that specifies an object UUID, the server dispatches the call to
the manager for the type to which the object belongs.
For information on how a type is used to select a manager for
an incoming call, see Chapter 17.
.H 3 "Registering Interfaces"
A server calls the \*Lrpc_server_register_if(\|)\*O routine
to tell the RPC runtime about a specific RPC interface.  Registering an
interface informs the runtime that the server is offering that interface and
makes it available to clients.  A server can register any number of interfaces
with the RPC runtime by calling the 
\*Lrpc_server_register_if(\|)\*O routine once
for each set of procedures, or manager, that implements an interface. 
.PP
.ne 2
To offer more than one manager for an interface, a server must
register each manager separately.
.PP
When registering an interface, the server provides the following information:
.ML
.LI
...\" .gL "interface specification"
.iX "interface" "RPC specification"
.iX "RPC" "interface" "specification" 
Interface specification
.PP
This is a reference to information about an RPC interface as offered
by its server stub.  The DCE IDL compiler generates an interface
specification as part of the stub code.  For a specific version of an
interface, all managers  use the same interface specification. 
Information in an interface specification
that concerns application developers includes the following:
.ML
.LI
The interface identifier (UUID and major and minor version numbers)
.LI
The supported transfer syntaxes
.LI
A list of any well-known endpoints (and their associated
protocol sequences) specified in the interface
definition (\*L.idl\*O) file
.LI
The interface's default manager entry point vector (manager EPV), if present 
.P
A default manager EPV, constructed using the operation names of the interface
definition, is typically generated for stubs by the DCE IDL compiler 
(the \%\*L-no_mepv\*O compiler option suppresses this feature). 
.LE
.LI
A type UUID for the manager
.P
Each implementation of an interface, a manager, is represented by a
type UUID.  
.LI
A manager EPV for the interface
.P
A server can register a given interface more than once by specifying a
different type UUID and manager EPV each time it calls
\*Lrpc_server_register_if(\|)\*O. 
.P
A manager EPV
is a list of the addresses (the entry points of the
remote procedures provided by the manager) that represent the location
of each remote procedure implementation.  
A manager EPV must contain exactly one entry point for each procedure
defined in the interface definition. 
.P
The server can use the default manager EPV only once, and only
for a manager that uses the procedure names as they are
declared in the interface definition. 
For any additional manager of the RPC interface, 
(and if the server needs to rename the implemented procedures),
the server must create and register a unique manager EPV.
Also, each manager must be associated with a distinct type UUID.
.iX "type" "of a manager EPV"
...\" .gL "type UUID"
.iX "type" "UUID"
.LE
.H 3 "Selecting RPC Protocol Sequences"
.P
A server can inquire about whether the local RPC runtime supports a
specific protocol sequence by using the
\*Lrpc_network_is_protseq_valid(\|)\*O routine.  
The server can also use the \*Lrpc_network_inq_protseqs(\|)\*O routine
to ask the RPC runtime for a list of all protocol sequences supported
by both the RPC runtime and the operating system. 
.P
To prepare to receive remote procedure calls, a server uses 
\*Lrpc_server_use_all_protseqs(\|)\*O or
\*Lrpc_\%server_use_protseq(\|)\*O calls to tell the
RPC runtime to use at least one protocol sequence. 
For each protocol combination, the RPC runtime creates one or more
binding handles with dynamic endpoints on which the server will listen for
remote procedure calls.
The server then can use a list of these binding handles to register
dynamic endpoints in the endpoint map and to export its binding
information (except the endpoints) to the name service.
.PP
As an option, an interface can contain one or more well-known endpoints, 
each of which is accompanied by a protocol sequence.
A server uses the
\*Lrpc_server_use_all_protseqs_if(\|)\*O,
\*Lrpc_server_use_protseq_if(\|)\*O, 
or \*Lrpc_\%server_\%use_protseq_ep(\|)\*O, to notify the RPC runtime
about which protocol sequence and well-known endpoint 
combinations will be used.
.P
A server can use any protocol sequence declared in an interface
endpoint declaration, or the server can ignore the
endpoint declarations, as long as it registers
at least one endpoint.
.H 3 "Obtaining a List of Server Binding Handles"
After a server passes to the RPC runtime the protocol sequences over which it
will listen for remote procedure calls, the RPC runtime constructs
server binding handles.
Each binding handle refers to a complement of binding information 
that defines one 
...\" .gL "potential binding"
.iX "potential binding" "RPC"
.iX "NSI" "potential binding" 
potential binding; that is, 
a specific RPC protocol sequence, RPC protocol major version, network address,
endpoint, and transfer syntax that an RPC client can use to establish a binding
with an RPC server. 
.PP
Before registering endpoints or exporting binding information, a server must
obtain a list of its binding handles from the RPC runtime by using the
\*Lrpc_server_inq_bindings(\|)\*O routine.  The server passes
this list back to the runtime as an argument when registering endpoints and
exporting binding information. 
.H 3 "Registering Endpoints"
Servers can use well-known or dynamic endpoints with any protocol sequence.
.PP
When a server asks the runtime to use a dynamic endpoint with a protocol
sequence, the runtime asks the operating system to generate the endpoint. 
To use the dynamic endpoints, a server must register
the server's binding information, including the endpoints, by using
the \*Lrpc_ep_register(\|)\*O routine.
For each combination of RPC interface identifier, object UUID, and binding
information that the server offers, the endpoint mapper service
creates an element in the local endpoint map. 
.PP
.iX "endpoint" "register operation"
.iX "RPC" "operations"
A server does not necessarily need to register well-known endpoints;
however, by registering well-known endpoints, the server ensures that clients
can always obtain them.  Registration also makes the endpoints accessible to
administrators, who can use the DCE control program, \*Ldcecp\*O, 
to show the map elements of an endpoint map by using the \*Lendpoint show\*O 
operation.
.PP
Servers can remove map elements from a local endpoint map by using the 
.iX "RPC" "runtime" "routines"
.iX "endpoint" "unregister operation"
\*Lrpc_ep_unregister(\|)\*O routine.
Servers should unregister endpoints after they stop listening.
.H 3 "Making Binding Information Accessible to Clients"
A server needs to make its binding information accessible
to clients.  Usually, a server uses the NSI export
operation to place its binding information into a server entry.
However, it is also possible for servers to make
string bindings accessible to clients.
In any case, the server obtains its binding information from the
runtime by first using the \*Lrpc_\%server_\%inq_bindings(\|)\*O routine
to ask for a list of binding handles.
.H 4 "Using String Bindings to Provide Binding Information"
While implementing and debugging a server program you
may temporarily
want to communicate binding information to clients by using string bindings.
This allows a server to establish a client/server relationship without
registering endpoints in the local endpoint map or exporting binding
information to a namespace. 
.PP
The server can convert into a string each binding handle in the list
obtained from the \*Lrpc_server_inq_bindings(\|)\*O call 
by calling \*Lrpc_\%binding_\%to_\%string_\%binding(\|)\*O.  The resulting
string binding is always fully bound.  The server then makes some or all
of its string bindings available to clients somehow; for example, 
by placing the string
bindings in a file to be read by clients or users or both. 
.H 4 "Exporting Binding Information"
.iX "NSI" "export operation"
.iX "export operation"
Servers can export binding information (and interface identifiers)
or objects or both by calling the \*Lrpc_ns_binding_export(\|)\*O routine.
To export binding information associated with a given RPC interface, a server
uses 
...\" .gL "interface handle"
.iX "interface" "handle" "RPC use of"
.iX "RPC" "interface" "handle" 
an interface handle.  The
interface handle is created by the IDL compiler as a reference to
information about the interface that the compiler stores in an interface
specification.
.P
.ne 8
To refer to binding information, the application code obtains a
list of server binding handles from the RPC runtime and passes
the list to the export operation.  The list contains binding handles for all the
protocol sequence and endpoint combinations that the server has requested;
it does this by calling the use-protocol-sequence operations.  
However, the server can remove any
of those binding handles from the list before exporting it.  This enables a
server to export the binding information associated with a subset of its
binding handles. 
.PP
To export object UUIDs, a server application must provide a list of object
UUIDs for the RPC objects it offers.  The server can generate these object UUIDs
itself or obtain them from some application-specific source such as an
object-UUID database.  All object UUIDs in a given server entry are associated
with every interface UUID and server address in the entry. 
.PP
Figure 13-2 illustrates how server binding handles in the
application code refer to server binding information in the runtime,
which is exported to the name service.
.P
.ne 4.6i
.FG  "Exporting Server Binding Information"
...\" DEC-file name .P! pictures/rpc-ops-export.ps 4.5i
.pI ../rpc/figures/5_dce_rpc_ops_05.ps 0 0 1
.sp .5
.PP
.ne 6
A server entry must belong exclusively to a server running on a given host.  If
there are identical, interchangeable instances of a server on the host, 
they can share a single set of server entries. 
However, if clients need to distinguish between coexisting instances of a
server (for example, when each offers a different RPC object), each instance
requires its own server entry.
.nS note
CDS databases are subject to access control. 
To access entries in a CDS database, you need 
.iX "NSI" "CDS ACL permissions"
.iX "ACL" "permissions" "for RPC control program"
access control list (ACL) permissions.
Depending on the NSI operation, you need ACL permissions to the parent
directory, the CDS object entry, or both. 
If you need ACL permissions, see your CDS administrator.
.nE
.PP
The ACL permissions are as follows: 
.ML
.LI
To create an entry, you need insert permission to the parent directory.
.LI
To read an entry, you need read permission to the CDS object entry.
.LI
To write to an entry, you need write permission to the CDS object entry.
.LI
To delete an entry, you need delete permission either to the CDS object entry
or to the parent directory. 
.LI
To test an entry, you need either test permission or read permission
to the CDS object entry.
.LE
.PP
Note that write permission does not imply read permission.
.H 3 "Listening for Calls"
.PP
When a server is ready to accept remote procedure calls, it initiates
listening, specifying the maximum number of 
calls it can execute concurrently; it does this 
by calling the \*Lrpc_server_listen(\|)\*O routine.
If a server allows concurrent calls, its remote procedures are
responsible for concurrency control.  If executing a set of remote procedures
concurrently requires concurrency control and a server lacks this control, the
server must allow only one call at a time. 
.PP
Under normal circumstances, the \*Lrpc_server_listen(\|)\*O routine
does not return but 
the RPC runtime continues listening for new remote procedure calls to
the server's registered interfaces until one of the following events
occurs:
.ML
.LI
Any of the server's procedures makes a local management call to stop a
server from listening for future remote procedure calls. 
.LI
For applications whose servers enable clients to stop servers from
listening, a client makes a remote management call to stop a server
from listening for future remote procedure calls.
.LE
.PP
On receipt of a stop listening request, the RPC runtime stops
accepting new remote procedure calls for all registered interfaces.
However, currently executing calls are allowed to complete.  After all
executing calls complete, the listen operation stops listening and
returns control to the server.
Servers should unregister endpoints after they stop listening.
.H 2 "How Clients Find Servers"
A client runtime can obtain server binding information from a namespace.   
Alternatively, a client can obtain server binding information in
string format from an application-specific source such as a file.
Runtime routines enable client applications to obtain server binding
handles that refer to server binding information obtained from either source. 
.H 3 "Searching a Namespace"
To obtain binding information from a namespace,
a client can do one of the following:
.ML
.LI
The client must call the import routines
\*Lrpc_\%ns_\%binding_\%import_\%begin(\|)\*O,
\*Lrpc_\%ns_\%binding_\%import_\%next(\|)\*O, 
and \*Lrpc_\%ns_\%binding_\%import_\%done(\|)\*O 
to obtain a binding handle for a compatible server.
.LI
The client must call the lookup routines
\*Lrpc_\%ns_\%binding_\%lookup_\%begin(\|)\*O,
\*Lrpc_\%ns_\%binding_\%lookup_\%next(\|)\*O, 
and \*Lrpc_\%ns_\%binding_\%lookup_\%done(\|)\*O
to obtain a list of binding handles for a compatible server.
Select a binding handle from the list by calling either of the following:
.ML
.LI 
The NSI select routine \*Lrpc_ns_binding_select(\|)\*O, 
which selects a binding handle at random 
.LI
A user-defined select routine, which implements an application-specific 
selection algorithm 
.LE 
.LI
The client must use the automatic method of binding management to 
make the client stub transparently manage binding information.
.PP
In this case, the application code lacks any calls to the NSI interface. 
However, the automatic method does require the client to identify the directory
service entry at which to begin the search for binding information.  The client
must specify the starting entry name as the value of the NSI-defined
\*LRPC_DEFAULT_ENTRY\*O environment variable. 
.LE 
...\".ne 4.0i DELETED FIGURE, NOT USEFUL
...\".FG "Calls for NSI Search Operations by RPC Clients"
...\"...\" DEC-file name .P! pictures/rpc-rt-client-nsi-calls.ps 4.0i
...\".pI ../rpc/figures/5_dce_rpc_ops_08.ps 0 0 1
.PP
An NSI import or lookup operation searches server entries for a compatible
server.  On finding such a server entry, the search operation copies the server
binding information associated with the requested interface and an object UUID.
The search operation then creates a randomly ordered list of server binding
handles to refer to the potential bindings represented by the binding
information. 
.PP
Figure 13-3 illustrates the use of a server binding handle to
refer to server binding information selected by an import operation.
.PP
.FG  "Importing Server Binding Information"
...\" DEC-file name .P! pictures/rpc-ops-import.ps 4.25i
.pI ../rpc/figures/5_dce_rpc_ops_09.ps 0 0 1
.sp .5
.PP
.ne 4
The callouts in the figure refer to the following operations:
.AL
.LI
The import operation looks up binding information of a 
server that is compatible with the client.
.PP
The import operation finds a server entry based on the specified interface
identifier, and then looks at the list of object UUIDs.  If the importing client
specifies a non-nil object UUID, the import operation looks for 
and returns that object UUID.  
If the client specifies the nil object UUID and the
server entry contains any object UUIDs, the import operation selects and
returns one UUID at random.  If the entry lacks any object UUIDs, the
import operation returns the nil UUID. 
.LI
The import operation fetches the compatible binding information 
and creates a binding handle for
each potential binding represented in the binding information.
.LI
The import operation then selects a binding handle at random
and passes it to the client application.
.LE
...\" .AL (numbered) list
.H 3 "Using String Bindings to Obtain Binding Information"
.iX "string" "bindings"
To use a string binding, a client starts with either an existing string binding
or with the components of the binding information.  
Do \*Enot\*O hardcode string bindings into application code.  Rather,
specify them at runtime using a command argument, environment variable, file, 
or other means.  The simplest way to specify a string binding is for 
a user to supply a string binding manually to a client.  However, this manual
approach is awkward for users who must know how to obtain and manipulate the
string bindings.  Also, if binding information changes, the users are
responsible for updating any string bindings used by their clients.  Reducing
manual intervention in the use of string bindings requires that an application
provide its own mechanisms for storing, maintaining, and accessing 
binding information.  In contrast, a directory service such as CDS provides these
mechanisms automatically to applications that store binding information in a
namespace. 
.PP
Regardless of how a client obtains a string binding, before
establishing a binding, the client must ask the RPC runtime for a binding
handle that refers to the server binding information depicted in the string
binding.  The client converts the string binding into a server binding handle
by calling the \*Lrpc_binding_from_string_binding(\|)\*O routine.
.PP
The following pseudocode lists the calls for composing a string binding
and for using it to obtain a server binding handle:
...\".PP  GOT RID OF FIGURE, USED PSEUDO CODE INSTEAD
...\".ne 3.25i
...\".FG "Basic String Binding Calls of an RPC Client"
...\"...\" DEC-file name .P! pictures/rpc-rt-client-st-binding-calls.ps 3.5i
...\".pI ../rpc/figures/5_dce_rpc_ops_07.ps 0 0 1
.P
.oS
rpc_string_binding_compose(...);

rpc_binding_from_string_binding(...);
 .
 .
 .
rpc_string_free(...);
.oE
