!H1: "Introduction to DCE Application Programming"
!TOC: .)T 1 1 "Chapter2." "Threads" 1 2
!H1: "Threads"
!INDEX: 1 02\(mi001 \fBpthread_create(\|)\fR
!INDEX: 1 02\(mi001 \fBpthread_setprio(\|)\fR
!INDEX: 2 02\(mi001 threads
!INDEX: attributes object
!TOC: .)T 2 2 "2.1" "Thread Use Policy" 2 2
!H2: "Thread Use Policy"
!INDEX: 2 02\(mi002 multithreadedness
!INDEX: in servers
!INDEX: 2 02\(mi002 multithreadedness
!INDEX: in clients
!TOC: .)T 3 3 "2.1.1" "Choosing to Thread" 2 2
!H3: "Choosing to Thread"
!INDEX: 2 02\(mi002 multithreadedness
!INDEX: advantages and disadvantages of
!INDEX: 2 02\(mi002 multithreadedness
!INDEX: and single processors
!INDEX: 2 02\(mi002 multithreadedness
!INDEX: and multiprocessors
!INDEX: 2 02\(mi002 DCE threads
!INDEX: user-space implementation
!INDEX: 2 02\(mi002 multithreadedness
!INDEX: and blocking
!INDEX: 2 02\(mi003 threads
!INDEX: scheduling policies
!INDEX: 2 02\(mi003 multithreadedness
!INDEX: questions to consider when adding to applications
!INDEX: 2 02\(mi003 multithreadedness
!INDEX: complexity cost of
!TOC: .)T 3 3 "2.1.2" "Specifying the Number of Threads" 3 2
!H3: "Specifying the Number of Threads"
!INDEX: 2 02\(mi003 threads
!INDEX: specifying the number of in server
!INDEX: 2 02\(mi003 incoming RPCs
!INDEX: specifying maximum concurrency of
!INDEX: 2 02\(mi003 buffer
!INDEX: incoming RPC call request
!INDEX: 1 02\(mi003 \fBrpc_server_listen(\|)\fR
!TOC: .)T 3 3 "2.1.3" "Scheduling Policies" 4 2
!H3: "Scheduling Policies"
!INDEX: 2 02\(mi004 threads
!INDEX: default scheduling policy of
!TOC: .)T 2 2 "2.2" "Thread Safety" 4 2
!H2: "Thread Safety"
!INDEX: 2 02\(mi004 threads
!INDEX: behavior of when blocked
!INDEX: 1 02\(mi004 reentrancy
!INDEX: 1 02\(mi004 \fBmalloc(\|)\fR
!INDEX: 2 02\(mi005 threadsafeness
!INDEX: of library routines
!INDEX: 2 02\(mi005 threads
!INDEX: wrappers
!INDEX: 1 02\(mi005 threadsafe routines provided by DCE
!INDEX: 2 02\(mi005 threadsafeness
!INDEX: criteria for routines
!INDEX: 2 02\(mi005 reentrancy
!INDEX: non-reentrant library calls
!INDEX: 1 02\(mi005 \fBpthread_lock_global_np(\|)\fR
!TOC: .if 1=\\$1 .)T 1 1 "TABLE2-1." "Thread-Safe Calls" 6 2
!INDEX: 1 02\(mi006 mutexes
!INDEX: 1 02\(mi006 global lock
!INDEX: 1 02\(mi006 \fBpthread_mutex_lock(\|)\fR
!INDEX: 2 02\(mi006 threads
!INDEX: cancelability
!INDEX: 1 02\(mi006 condition variables
!INDEX: 2 02\(mi006 mutexes
!INDEX: and shared objects
!INDEX: 2 02\(mi006 threads
!INDEX: wrappers and \fBpthread.h\fR
!INDEX: 2 02\(mi006 reentrancy
!INDEX: reentrant libraries
!INDEX: 1 02\(mi006 \fBwait(\|)\fR
!INDEX: 2 02\(mi006 mutexes
!INDEX: and locking sequences
!INDEX: 2 02\(mi006 threads
!INDEX: avoiding priority inversions
!INDEX: 2 02\(mi006 threads
!INDEX: default scheduling policy of
!INDEX: 1 02\(mi007 \fBpthread_lock_global_np(\|)\fR
!INDEX: 2 02\(mi007 multithreadedness
!INDEX: and unsafe libraries
!INDEX: 1 02\(mi007 \fBatfork(\|)\fR
!INDEX: 1 02\(mi007 \fBfork(\|)\fR
!INDEX: 1 02\(mi007 \fBpthread_cond_wait(\|)\fR
!INDEX: 2 02\(mi007 threads
!INDEX: attributes object
!INDEX: 1 02\(mi007 \fBpthread_set_scheduler(\|)\fR
!INDEX: 1 02\(mi007 \fBpthread_set_prio(\|)\fR
!TOC: .)T 2 2 "2.3" "Threads Programming Topics" 7 2
!H2: "Threads Programming Topics"
!TOC: .)T 3 3 "2.3.1" "Thread Handles" 7 2
!H3: "Thread Handles"
!INDEX: 2 02\(mi007 threads
!INDEX: handles
!INDEX: 1 02\(mi007 \fBpthread_join(\|)\fR
!INDEX: 1 02\(mi007 \fBpthread_detach(\|)\fR
!INDEX: 1 02\(mi007 \fBpthread_cancel(\|)\fR
!INDEX: 1 02\(mi007 \fBpthread_equal(\|)\fR
!TOC: .)T 3 3 "2.3.2" "Storage for Thread Specific Data" 8 2
!H3: "Storage for Thread Specific Data"
!INDEX: 2 02\(mi008 threads
!INDEX: specific global storage
!INDEX: 1 02\(mi008 \fBpthread_keycreate(\|)\fR
!INDEX: 1 02\(mi008 \fBpthread_setspecific(\|)\fR
!INDEX: 1 02\(mi008 \fBpthread_getspecific(\|)\fR
!TOC: .)T 3 3 "2.3.3" "Canceling Threads" 9 2
!H3: "Canceling Threads"
!INDEX: 2 02\(mi009 threads
!INDEX: canceling
!INDEX: 1 02\(mi009 \fBpthread_cancel(\|)\fR
!INDEX: 2 02\(mi009 threads
!INDEX: cancelability state
!INDEX: 3 02\(mi009 threads
!INDEX: canceling
!INDEX: and exceptions
!INDEX: 2 02\(mi009 threads
!INDEX: termination
!INDEX: 1 02\(mi009 \fBpthread_signal_to_cancel_np(\|)\fR
!H4: "Cancelability State"
!INDEX: 2 02\(mi010 threads
!INDEX: cancelability state
!INDEX: 1 02\(mi010 general cancelability of threads
!INDEX: 2 02\(mi010 asynchronous
!INDEX: cancelability of threads
!INDEX: 1 02\(mi010 \fBpthread_setasynccancel(\|)\fR
!INDEX: 1 02\(mi010 \fBpthread_setcancel(\|)\fR
!TOC: .if 1=\\$1 .)T 1 1 "TABLE2-2." "Cancelability State" 10 2
!H4: "Cancellation Points"
!INDEX: 2 02\(mi010 threads
!INDEX: cancellation points
!INDEX: 1 02\(mi010 \fBpthread_cond_timedwait(\|)\fR
!INDEX: 1 02\(mi010 \fBpthread_cond_wait(\|)\fR
!INDEX: 1 02\(mi010 \fBpthread_join(\|)\fR
!INDEX: 1 02\(mi010 \fBpthread_testcancel(\|)\fR
!INDEX: 1 02\(mi010 \fBsigwait(\|)\fR
!INDEX: 1 02\(mi010 \fBpthread_delay_np(\|)\fR
!INDEX: 2 02\(mi011 threads
!INDEX: timeslice interruption of
!INDEX: 2 02\(mi011 threads
!INDEX: wrappers as cancellation points
!INDEX: 1 02\(mi011 \fBread(\|)\fR
!INDEX: 1 02\(mi011 \fBreadv(\|)\fR
!INDEX: 1 02\(mi011 \fBselect(\|)\fR
!INDEX: 1 02\(mi011 \fBwrite(\|)\fR
!INDEX: 1 02\(mi011 \fBwritev(\|)\fR
!INDEX: 1 02\(mi011 \fBaccept(\|)\fR
!INDEX: 1 02\(mi011 \fBconnect(\|)\fR
!INDEX: 1 02\(mi011 \fBrecv(\|)\fR
!INDEX: 1 02\(mi011 \fBrecvmsg(\|)\fR
!INDEX: 1 02\(mi011 \fBrecvfrom(\|)\fR
!INDEX: 1 02\(mi011 \fBsend(\|)\fR
!INDEX: 1 02\(mi011 \fBsendmsg(\|)\fR
!INDEX: 1 02\(mi011 \fBsendto(\|)\fR
!INDEX: 1 02\(mi011 \fBpthread_setasynccancel(\|)\fR
!INDEX: 1 02\(mi011 \fBpthread_mutex_lock(\|)\fR
!INDEX: 2 02\(mi011 mutexes
!INDEX: when they should be used
!INDEX: 2 02\(mi011 condition variables
!INDEX: when they should be used
!INDEX: 2 02\(mi011 threads
!INDEX: disabling cancellation state
!INDEX: 1 02\(mi011 \fBpthread_testcancel(\|)\fR
!H4: "Cancellation Side Effects"
!INDEX: 2 02\(mi012 threads
!INDEX: side effects of cancellation
!INDEX: 1 02\(mi012 \fBpthread_join(\|)\fR
!INDEX: 2 02\(mi012 threads
!INDEX: cancellation and condition variables
!INDEX: 2 02\(mi012 condition variables
!INDEX: and threads cancellation
!INDEX: 2 02\(mi012 mutexes
!INDEX: and threads cancellation
!H5: "Using \fBpthread_cancel(\|)\fR to Terminate a Thread"
!INDEX: 1 02\(mi012 \fBpthread_cancel(\|)\fR
!INDEX: 1 02\(mi012 \fBpthread_setcancel(\|)\fR
!INDEX: 2 02\(mi012 global lock
!INDEX: and threads cancellation
!INDEX: 2 02\(mi012 mutexes
!INDEX: and threads cancellation
!INDEX: 2 02\(mi012 threads
!INDEX: cancellation and exception-handling block
!INDEX: 2 02\(mi012 condition variables
!INDEX: and threads cancellation
!INDEX: 1 02\(mi012 \fBpthread_mutex_lock(\|)\fR
!INDEX: 1 02\(mi012 \fBTRY\fR macro
!INDEX: 1 02\(mi012 \fBFINALLY\fR macro
!INDEX: 1 02\(mi012 \fBENDTRY\fR macro
!INDEX: 1 02\(mi012 \fBpthread_mutex_unlock(\|)\fR
!INDEX: 2 02\(mi013 threads
!INDEX: cancellation and exception-handling block
!H4: "Thread Cleanup"
!INDEX: 2 02\(mi013 threads
!INDEX: cancellation cleanup
!INDEX: 1 02\(mi013 \fBpthread_cleanup_push(\|)\fR
!INDEX: 1 02\(mi013 \fBpthread_cleanup_pop(\|)\fR
!INDEX: 1 02\(mi014 \fBpthread_exit(\|)\fR
!INDEX: 1 02\(mi014 \fBlongjmp(\|)\fR
!INDEX: 1 02\(mi014 \fBsiglongjmp(\|)\fR
!H4: "Asynchronous Cancel Safety"
!INDEX: 2 02\(mi014 asynchronous
!INDEX: cancelability of threads
!INDEX: 1 02\(mi014 \fBpthread_cancel(\|)\fR
!H4: "Cancel Rules Summary"
!INDEX: 2 02\(mi014 threads
!INDEX: rules for cancellation
!INDEX: 1 02\(mi014 \fBpthread_mutex_lock(\|)\fR
!INDEX: 2 02\(mi014 threads
!INDEX: cancellation and mutexes
!INDEX: 2 02\(mi014 threads
!INDEX: cancellation and condition variables
!INDEX: 1 02\(mi014 \fBpthread_cond_timedwait(\|)\fR
!INDEX: 1 02\(mi014 \fBpthread_cond_wait(\|)\fR
!INDEX: 1 02\(mi014 \fBlongjmp(\|)\fR
!INDEX: 1 02\(mi014 \fBsiglongjmp(\|)\fR
!TOC: .)T 3 3 "2.3.4" "Signals" 14 2
!H3: "Signals"
!INDEX: 2 02\(mi014 signals
!INDEX: handling of in a multithreaded environment
!INDEX: 2 02\(mi015 signals
!INDEX: blocking of
!INDEX: 2 02\(mi015 signals
!INDEX: semantics of
!INDEX: 2 02\(mi015 signals
!INDEX: synchronous
!INDEX: 1 02\(mi015 \fBsigaction(\|)\fR
!INDEX: 2 02\(mi015 signals
!INDEX: asynchronous
!INDEX: 1 02\(mi015 \fBsigwait(\|)\fR
!H4: "Signal Masking"
!INDEX: 2 02\(mi015 signals
!INDEX: masking of
!INDEX: 1 02\(mi015 \fBsigprocmask(\|)\fR
!H4: "Synchronous Signal Handling"
!INDEX: 2 02\(mi016 signals
!INDEX: synchronous
!INDEX: 2 02\(mi016 \fBsigaction(\|)\fR
!INDEX: should not be used for asynchronous signals
!H4: "Asynchronous Signal Handling"
!INDEX: 2 02\(mi016 signals
!INDEX: asynchronous
!INDEX: 1 02\(mi016 \fBsigwait(\|)\fR
!INDEX: 1 02\(mi016 \fBsigprocmask(\|)\fR
!H4: "Signal Rules"
!INDEX: 2 02\(mi018 signals
!INDEX: rules for handling in multithreaded programs
!INDEX: 1 02\(mi018 \fBsigwait(\|)\fR
!INDEX: 1 02\(mi018 \fBpthread_cond_signal(\|)\fR
!TOC: .)T 3 3 "2.3.5" "Forking in a Threaded Application" 18 2
!H3: "Forking in a Threaded Application"
!INDEX: 1 02\(mi018 \fBfork(\|)\fR
!INDEX: 1 02\(mi018 \fBexec(\|)\fR
!INDEX: 1 02\(mi018 \fBatfork(\|)\fR
!TOC: .)T 2 2 "2.4" "RPC Threads and RPC Cancel Semantics" 19 2
!H2: "RPC Threads and RPC Cancel Semantics"
!INDEX: 2 02\(mi019 RPC
!INDEX: threads
!INDEX: 3 02\(mi019 RPC
!INDEX: threads
!INDEX: cancel semantics of
!SYNC: "20" "2" "4" "0" "0" "0" "2"
