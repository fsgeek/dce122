...\"
...\" @OSF_COPYRIGHT@
...\" COPYRIGHT NOTICE
...\" Copyright (c) 1990, 1991, 1992, 1993 Open Software Foundation, Inc.
...\" ALL RIGHTS RESERVED (DCE).  See the file named COPYRIGHT.DCE in the
...\" src directory for the full copyright text.
...\"
...\"
...\" HISTORY
...\" $Log: 1_overv.gpsml,v $
...\" Revision 1.1.8.1  1996/03/27  13:53:01  wardr
...\" 	{edit R1.2.1}
...\" 	More Release Edits
...\" 	[1996/03/27  13:52:35  wardr]
...\"
...\" Revision 1.1.6.23  1995/06/07  14:39:10  rcb
...\" 	PRENTICE HALL reformat; final edits and changes
...\" 	[1995/06/05  19:59:21  rcb]
...\" 
...\" 	index fix
...\" 	[1995/05/15  14:37:28  rcb]
...\" 
...\" 	another minor one
...\" 	[1995/05/04  18:51:10  rcb]
...\" 
...\" 	minor change
...\" 	[1995/05/04  17:34:18  rcb]
...\" 
...\" 	PRENTICE HALL reformat
...\" 	[1995/05/03  15:58:52  rcb]
...\" 
...\" 	incorporated 1.1 edits
...\" 	[1995/05/03  15:25:50  rcb]
...\" 
...\" Revision 1.1.6.22  1994/11/04  16:47:34  neilson
...\" 	Substituted macros for book names in cross refs.
...\" 	[1994/11/03  01:39:05  neilson]
...\" 
...\" 	Substituted macros for book names in cross refs.
...\" 
...\" Revision 1.1.6.21  1994/10/21  01:18:27  jshirley
...\" 	Fixed cross refs. and got rid of ref. to User's Guide.
...\" 	[1994/10/21  01:17:18  jshirley]
...\" 
...\" Revision 1.1.6.20  1994/10/19  21:55:43  neilson
...\" 	Automatic fix to mistake in .zA-.zZ
...\" 	[1994/10/19  21:54:48  neilson]
...\" 
...\" Revision 1.1.6.19  1994/10/13  17:54:24  norb
...\" 	changes for Ext.  Login
...\" 	[1994/10/13  17:53:31  norb]
...\" 
...\" Revision 1.1.6.18  1994/09/15  18:35:31  buckler
...\" 	{def, 9272, R1.1}
...\" 	Added a clear pointer to doc for RPC routines that directly relate
...\" 	to security issues.
...\" 	[1994/09/15  18:35:12  buckler]
...\" 
...\" Revision 1.1.6.17  1994/09/15  18:12:18  norb
...\" 	changes for Ext.  Login & Pwd.  Mgmt.
...\" 	[1994/09/15  18:11:36  norb]
...\" 
...\" Revision 1.1.6.16  1994/09/07  21:44:53  rjohnson
...\" 	Changes made: None.
...\" 	[1994/09/07  21:44:32  rjohnson]
...\" 
...\" Revision 1.1.6.15  1994/08/29  16:02:26  marty
...\" 	Undefunct this file
...\" 	[1994/08/29  16:02:09  marty]
...\" 
...\" 	<<<no changes>>>
...\" 	[1994/08/26  13:12:16  norb]
...\" 
...\" 	checked out by mistake
...\" 
...\" Revision 1.1.6.14  1994/08/26  13:18:49  norb
...\" 	File is defunct
...\" 
...\" Revision 1.1.6.13  1994/07/12  23:55:30  jshirley
...\" 	{def,10220,R1.1} Remove reference to rpcd and sec_clientd
...\" 	[1994/07/12  23:54:54  jshirley]
...\" 
...\" Revision 1.1.6.12  1994/05/17  17:05:15  jshirley
...\" 	SGML conversion edits.
...\" 	[1994/05/17  17:04:54  jshirley]
...\" 
...\" Revision 1.1.6.11  1994/05/11  19:48:59  millette
...\" 	(enh, 10056, R1.1)
...\" 	Added ERA API
...\" 	(enh, 10514, R1.1)
...\" 	Added EPA API
...\" 	[1994/05/11  19:48:33  millette]
...\" 
...\" Revision 1.1.6.10  1994/05/11  15:00:02  rjohnson
...\" 	Changes made: Updated to include CR#10577.
...\" 	[1994/05/11  14:59:22  rjohnson]
...\" 
...\" Revision 1.1.6.9  1994/05/10  22:22:39  jshirley
...\" 	Fixed  doc build errors.
...\" 	[1994/05/10  22:22:15  jshirley]
...\" 
...\" Revision 1.1.6.8  1994/05/09  10:54:22  rjohnson
...\" 	Added GSSAPI enhancements to chapter for release 1.1.
...\" 	[1994/05/02  02:44:49  rjohnson]
...\" 
...\" Revision 1.1.6.4  93/02/03  15:01:00  rom
...\" 	Change .P! to .pI and fix PostScript bounding boxes.
...\" 	[1993/02/03  15:00:06  rom]
...\" 
...\" Revision 1.1.6.3  1993/01/28  18:45:44  cjd
...\" 	Embedded copyright notice
...\" 	[1993/01/28  18:06:36  cjd]
...\" 
...\" Revision 1.1.6.2  1992/11/20  19:58:36  weir
...\" 	Moved into 1.0.2doc tree
...\" 	[1992/11/20  19:49:59  weir]
...\" 
...\" Revision 1.1.4.6  1992/11/11  23:52:14  buckler
...\" 	Corrected index entries
...\" 	[1992/11/11  22:57:13  buckler]
...\" 
...\" Revision 1.1.4.5  1992/11/06  16:30:37  lmk
...\" 	Prentice-Hall index edits only
...\" 	[1992/11/06  16:26:37  lmk]
...\" 
...\" Revision 1.1.4.4  1992/10/10  15:50:08  casey
...\" 	Index changes for PH
...\" 	[1992/10/10  15:36:29  casey]
...\" 
...\" Revision 1.1.4.3  1992/10/09  15:17:31  lmk
...\" 	Prentice-Hall edits only
...\" 	[1992/10/09  15:14:05  lmk]
...\" 
...\" Revision 1.1.4.2  1992/09/11  21:02:14  lmk
...\" 	Prentice-Hall edits only
...\" 	[1992/09/11  20:59:08  lmk]
...\" 
...\" Revision 1.1.2.3  1992/06/08  17:58:54  millette
...\" 	Bug 3791:  Miscellaneous editorial and technical corrections.  Change bars not used,
...\" 	except for addition of dce_login in "Interfaces to Login Facility."
...\" 	[1992/06/08  17:57:03  millette]
...\" 
...\" Revision 1.1.2.2  1992/05/07  14:35:09  millette
...\" 	Bug 2769: Miscellaneous editorial corrections.  Change bars not used
...\" 	except for added note in "The Cell Namespace and the Security Namespace.
...\" 	[1992/05/07  14:21:48  millette]
...\" 
...\" Revision 1.1  1992/01/29  16:08:45  damon
...\" 	Initial revision
...\" 
...\" $EndLog$
...\"
...\" (c) Copyright 1991, Open Software Foundation, Inc.  ALL RIGHTS RESERVED
.H 1 "Overview of Security"
.P
This chapter provides a brief overview of the two security services
available in DCE:
.ML
.LI
DCE Security Service
.LI
Generic Security Services (GSS)
.LE
.P
Refer to the \*(Dr for detailed information on the Application Program
Interfaces (APIs) discussed in the security chapters of this guide.
.H 2 "Purpose and Organization of the Security Chapters"
.P
This part of the guide explains the major
features of DCE security so that you can decide what, if anything,
you need to do to ensure that your DCE application is sufficiently
secure.  A lot of security is built into DCE, so in many cases you will
need to do nothing, or very little, to secure your DCE application.  
Furthermore, you do not need to understand all of the 
details of the DCE security services in order to use them effectively.
.P
Following the overview of the DCE Security Service
in this chapter are two chapters
that contain conceptual discussions of authentication and authorization.
The remaining chapters in this part of the guide discuss the DCE
Security Service 
.iX "API" "security"
APIs\(emregistry, login, extended registry attribute (ERA), extended privilege 
attribute (EPA), key management, access control list (ACL), password management,
and ID map\(emand GSS credentials.
.H 2 "About Authenticated RPC"
.iX "-; services" "protocols" "authentication and authorization"
.iX "RPC" "authenticated" 
.P
Perhaps the most important security facility is the 
authenticated remote procedure call (RPC) facility.  Authenticated 
RPC enables distributed applications
to participate in authenticated network communications.  Applications
using the authenticated RPC routines may select the authentication
protocol and the authorization protocol to be used, and
set various protocol-independent protection levels for communicating
with remote entities (users, servers, and computers).
.P
The use of authenticated RPC is explained in Chapters 13 and 14.
Chapter 14 contains information about a number of RPC
routines that relate directly to security issues, such as
\*Lrpc_binding_set_auth_info(\|)\*O. 
.P
These security chapters, however, contains conceptual information that is
useful for understanding the authentication and authorization protocols
that authenticated RPC routines use; for this information, we recommend
that you read Chapters 24 and 25, as well as this one.
.H 2 "About the GSSAPI"
.iX "-: GSSAPI" "Generic Security Service"
.iX "GSSAPI" "about"
.iX "-; services" "protocols" "authentication and authorization"
.iX "GSSAPI" "context initiator defined"
.iX "GSSAPI" "context acceptor defined"
.iX "-; context initiator" "GSSAPI"
.iX "-; context acceptor" "GSSAPI"
.iX "security" "for peer-to-peer applications"
.P
The GSS provides an alternate way of
providing DCE security to distributed applications that handle network
communications by themselves.  With GSSAPI, you can include established
applications in DCE and ensure the security and integrity of the
applications and their data.
In peer-to-peer communications, the
application that establishes the secure connection is the \*Econtext
initiator\*O or simply \*Einitiator\*O.  The context initiator is like a
DCE RPC client.  The application that accepts the secure connection is
the \*Econtext acceptor\*O or simply \*Eacceptor\*O.  The context
acceptor is like a DCE RPC server.
.PP
.ne 5
The GSS available with DCE includes two
sets of routines:
.ML
.LI
Standard GSSAPI routines, which are defined in the 
Internet RFC 1509 ``Generic Security Service API: C-bindings.''
These routines have the prefix \*Lgss_\*O.
.LI
OSF DCE extensions to the GSSAPI routines.  These are additional routines
that enable an application to use DCE security services.  These routines
have the prefix \*Lgssdce_\*O.
.LE
.PP
The chapters that follow provide information about how the GSSAPI
routines use the authentication and authorization protocols.  Chapter 26
provides information about GSS credentials, which are used to establish
an application's identity in DCE.
.H 2 "UNIX System Security and DCE Security"
.iX "security" "UNIX versus DCE"
.P
UNIX system security mostly presumes that a computer's backplane can
be trusted because computing operations are assumed to be local, and
because the computer itself can be physically secured.  In a distributed
environment, the logical equivalent of the single system's backplane
is the network itself.  Network computing means distributed, rather
than localized, computing operations and, in the case of an open network
(which DCE assumes), little of the network is physically secure.  Thus,
.iX "security" "risks"
the nature of distributed systems poses special security risks, in
addition to those posed by nondistributed systems.  Unlike UNIX system
security, DCE security is designed specifically to address those risks.
.P
These considerations notwithstanding, network security is ultimately
dependent on the security features that are local to the individual
computers in the network and, what is more important, the manner in
which those features are used and administered.  Since any compromise
to the local security of a computer in the distributed environment
may introduce opportunities for compromising network security, DCE
security does not diminish the importance of local security.  In fact,
the relative importance of local system security is greater in the
distributed environment because the consequences of a local security
breach may not be local.  Finally, while DCE security does nothing
to enhance local security, neither does it introduce any new avenues
for compromising local security.
.P
In the discussions in this guide, we assume you are familiar with
the authentication and authorization features that UNIX systems 
provide: \*L/etc/passwd\*O and\*L /etc/group\*O file processing, routines that
return or change file attributes, routines that return or change real
or effective user IDs (UIDs) and group IDs (GIDs), 
and data encryption and decryption.
.H 2 "What Authentication and Authorization Mean"
.iX "authentication"
.iX "authorization"
.P
There are two questions that DCE security can answer for a principal
about another principal with which it might want to communicate:
.ML
.LI
Is this principal really who it says it is?
.LI
Does it have the right to do what it wants to do?
.LE
.P
Depending on the answers to these questions, a security-sensitive
principal takes different courses of action with respect to a principal
with which it is communicating.
.P
To authenticate a principal means to verify that the principal is
representing its true identity.  To authorize a principal means to
grant permission for the principal to perform an operation.
While distinct, the concepts of authentication and authorization are
also intertwined.  For one thing, a principal's authorization is explicitly
linked to its identity.  For another, there is the possibility that
authorization data concerning an authenticated principal can be falsified,
which raises the additional question, ``Should the authorization
data concerning this principal be believed?''  To this question also,
DCE security can provide an answer to a principal for which this issue
is a concern.
.P
.iX "protocol" "DCE Authorization"
.iX "protocol" "authentication and authorization"
The discussions of authenticated RPC refer to the specific mechanisms
by which authentication and authorization are performed as authentication and
authorization protocols.  Authenticated RPC supports at least one of each.
However, RPC documentation
.iX "security" "services and authenticated RPC"
refers to authentication and authorization protocols as services.
The security chapters use the term \*Eprotocol\*O instead of
\*Eservice\*O in this context to prevent confusion between the
protocol-independent DCE authentication and authorization services and
the various authentication and authorization protocols that those
services support.
.PP
.iX "security" "services and GSSAPI"
.iX "GSSAPI" "authentication and authorization"
.iX "GSSAPI" "Kerberos and"
.iX "Kerberos" "available using GSSAPI"
.ne 4
The GSSAPI combines authentication and authorization under a single
security concept called a \*Emechanism\*O.  
The security mechanism provides applications a
choice of either Kerberos security or Privilege Attribute Certificate (PAC)
authorization under DCE security.
.H 2 "Authentication, Authorization, and Data Protection in Brief"
.P
When one principal talks to another in a distributed computing environment,
there is a risk that communications between the two will provide a
means for compromising the security of one or the other.  For example,
a client may attack a server, or a server may set a trap for clients.
An attack is most likely to succeed if the malevolent principal can
convince its victim that it is something other than what it really
is (an attacker), and/or that it possesses authorization that it does
not really have.  A counterfeit identity and/or authorization data
grants an attacker access that it presumably would not otherwise have,
and so provides an opportunity for the attacker to do damage. 
.P
One way an attacker might obtain counterfeit credentials is to intercept
network transmissions between a client and a server, and then attempt
to decipher (and perhaps modify) the transmitted data.
If the attacker is able to intercept \*Vand decipher\*O a principal's authentication
or authorization information, it can later use this data to masquerade as an 
authentic principal with proper authorization.
.P
DCE security protects against these kinds of attacks. It contains features 
that enable principals to 
.ML
.LI
Detect whether data they receive has
been modified in transit
.LI
Be certain that an attacker will be unable to decipher any 
authentication and authorization data it may succeed in intercepting
.LE
.P
DCE security gives DCE principals confidence that the identity and 
authorization of principals they communicate with are authentic.
.P
.ne 5
Figure 23-1 is an extremely condensed and highly stylized representation of
the essentials of DCE security in terms of the DCE shared-secret
authentication protocol and the DCE authorization protocol.
Unless we note otherwise, assume that discussions in the security
chapters of this guide refer to these two protocols, used in conjunction with
one another.
.P
The following is a description of the events depicted in the illustration:
.AL
.LI
Principal A (which could be an attacker masquerading as Principal A) 
requests authentication of its identity from the authentication service. 
This request is encrypted using several keys, one of which is a key derived 
from the password supplied
by Principal A.  A copy of Principal A's key also exists in the registry 
database, having been stored there when the principal's account was created 
(or when the password was changed).  It is thus available to the authentication 
service.
.P
The authentication service then obtains 
the registry's copy of Principal A's key 
and uses it to decrypt Principal A's authentication request.  If the 
decryption succeeds, the keys are the same; Principal A is therefore
authenticated and the authentication service replies with information
that enables Principal A to ask the privilege service
to authenticate its privilege attributes. 
(Privilege attributes
are data used in making authorization decisions; they consist of the
principal's name and group memberships.) If Principal A fails to get
authenticated privilege attributes (also referred to as \*Ecredentials\*O), 
it may simply assert its privilege attributes to Principal B.
.LI
Principal A now makes a request
to Principal B to perform some operation that requires the \*Lc\*O
permission to object \*Ld\*O, and presents its certified privilege
attributes.  Principal B may grant or deny \*Lc\*O access to
\*Ld\*O after examining the ACL that
protects object \*Ld\*O.  (An ACL associates the privilege attributes
of principals with permissions to an object.)  If\*L c\*O is one
of the permissions listed in the ACL granted to Principal A, 
then Principal A is allowed
to perform the operation; if the \*Lc\*O permission is not granted,
A is denied access.
.P
.ne 3.5i
.FG "Shared-Secret Authentication and DCE Authorization in Brief"
.pI ../security/figures/1_overv_10.ps 4.2i 3.9i
.P
Had the authentication service been unable to decrypt the principal's
authentication request, the principal
would have been unauthenticated and, as a consequence, unable to 
acquire certified privilege attributes from the privilege service.
In that case, Principal A might have simply asserted its privilege
attributes to B; that is, claimed 
them for itself, without the benefit of having the privilege service certify 
this data as being genuine.  Had Principal A then presented asserted privilege 
attributes to Principal B, then B might have denied the requested permission or
granted it, depending on whether B grants permissions to unauthenticated 
principals, and whether\*L c\*O is among the permissions that B grants to such 
principals.
.P
If Principals A and B are especially sensitive to security concerns,
they may request that transmitted data be checked for integrity to establish
whether it has been modified in transit, and possibly also encrypted
to ensure that the data is unintelligible to any party other than
Principals A and B.
.LE
.H 2 "Summary of DCE Security Services and Facilities"
.P
The DCE Security Service consists of services and facilities.
The security services are
.ML
.LI
The registry service, which maintains a database
of principals, groups, organizations, accounts, and administrative
policies.
.LI
The authentication service, which verifies
the identity of a principal and issues tickets that the principal
uses to access remote services.  (A ticket is data about a principal
that is presented to the entity providing the service.)
.LI
The privilege service, which certifies a
principal's privilege attributes (that is, its name and group memberships,
which are represented as UUIDs).
.LE
.P
.iX "security" "server"
The three security services are implemented in a single daemon, the
security server.
.P
The DCE Security Service facilities are
.ML
.LI
The login facility, which enables a principal
to establish its network identity.
.LI
The ERA facility, which extends 
the registry database to maintain attribute types and instances.
.LI
The EPA facility, which provides access 
to the information in extended 
privilege attribute certificates (EPACs) 
.LI
The ACL facility, which
enables a principal's access to an object to be determined by a comparison
of the principal's privilege attributes to the object's permissions.
.LI
The key management facility, which enables
noninteractive principals (most frequently, servers) to manage their
secret keys.
.LI
The ID map facility, which maps cell-relative principal names to global principal names, and global principal
names to cell-relative principal names.  This facility is used
in connection with the transmission of information about principals
that are members of different DCE cells.
.LI
The password management facility, which enables principal's passwords to
be generated, and to be subjected to strength-checks beyond those defined
in DCE standard policy.
.LE
.P
For UNIX system compatibility with DCE, the DCE Security Service also
provides implementations of UNIX system C library interfaces to the \*L/etc/passwd\*O and \*L/etc/group\*O files.
.H 3 "Interfaces to the Security Server"
.iX "-: API" "Application Programming Interface"
.iX "security" "server" "interfaces"
.iX "interface" "security server"
.P
Following are the user interfaces to the security server itself
(see the \*(Ac and the \*(Ar):
.ML
.LI
\*Lsecd\*O
.P
The security daemon (a replicated server)
.LI
\*Lsec_create_db\*O
.P
Creates the security databases
.LI
\*Lsec_admin\*O
.P
Administers instances of the security daemon
.LI
\*Lsec_salvage_db\*O
.P
Converts the security database from one version of DCE to another
.P
Salvages a corrupted security database
...\" DCE 1.2 WRITERS: SCO comments through Greg Doench/PH:
...\" "Is this still supported?" (sec_salvage_db)
.LI
The security validation service of \*Ldced\*O
.P
Enables clients of the security server to communicate with it
.LE
.P
All other interfaces to the security server are more precisely characterized
as interfaces to its three services: registry, authentication, and
privilege.
.H 4 "Registry Service Interfaces"
.iX "-[" "API" "security services and facilities"
.iX "-[" "interface" "security services and facilities"
.P
User interfaces to the registry service are described in the
\*(Ac
and the \*(Ar.  Following is a summary of them:
.ML
.LI
.ne 3
\*Lrgy_edit\*O
.P
Edits registry database entries
.LI
\*Lpasswd_import\*O
.P
Creates registry database entries from UNIX system
\*L/etc/passwd\*O and \*L/etc/group\*O files
...\" DCE 1.2 WRITERS: SCO comments through Greg Doench/PH:
...\" "How will we implement these SCO[??]-specific attributes?"
...\" (passwd_import, passwd_export)
.LI
\*Lpasswd_export\*O
.P
Creates local registry
information that corresponds to network registry database entries
.LI
\*Lchpass\*O
.P
Changes a user's password
in a registry database entry
.LE
.H 4 "Authentication Service Interfaces"
.P
.iX "default" "authentication protocol"
Following is a summary of the user interfaces to the 
authentication service
when the default authentication protocol is in effect (the
default protocol is DCE shared-secret, which is based on the Kerberos
Version 5 network authentication system). 
.ML
.LI
\*Lkinit\*O
.P
Obtains a login session's 
ticket(s) to remote services (the\*L login\*O and \*Lsu\*O tools
also perform this service)
.LI
\*Lklist\*O
.P
Lists a login session's 
tickets to remote services
.LI
\*Lkdestroy\*O
.P
Destroys a login session's tickets to remote services
.LE
.P
There are two security APIs that distributed applications are
most likely to call to use the authentication service: 
.ML
.LI
Authenticated RPC facility
.LI
GSSAPI
.LE
.PP
.ne 3
Although an application that uses GSSAPI may not make explicit calls to RPC
routines, the GSSAPI implementation itself uses DCE RPC to communicate with
the DCE registry.
.H 4 "Privilege Service Interfaces"
.P
There are no user interfaces or APIs
to the privilege service.  The login facility and authenticated RPC or
GSSAPI encapsulate interactions between a principal and the privilege
service.
.H 3 "Interfaces to the Login Facility"
.P
User interfaces to the login facility consist of the following tools:
.ML 
.LI
\*Ldce_login\*O
.P
Enables an interactive principal to log into DCE, 
but does not change the principal's local identity 
.LI
\*Llogin\*O
.P
Enables an interactive principal
to log in
.LI
\*Lsu\*O
.P
Enables a logged-in interactive
principal to assume a different principal identity
.LE
.P
The API to the login facility consists of calls that are prefixed with
\*Lsec_login_\*O.  This API enables application processes to 
assume their network
identities.  Network login and system login programs are examples of
applications that call this API.
.H 3 "Interfaces to the Extended Registry Attribute Facility"
.P
The user interface to the ERA facility consists of DCE control program
(\*Ldcecp\*O) commands
that allow users to modify the registry schema to 
create and maintain attribute types and to create and maintain instances 
of those types.
.P
The API to the ERA facility consists of calls that are prefixed 
with \*Lsec_rgy_attr_\*O. 
.H 3 "Interfaces to the Extended Privilege Attribute Facility"
.P
There are no user interfaces 
to the EPA facility.  The API to this facility 
consists of calls that are prefixed with \*Lsec_cred_\*O.  These 
routines extract data from EPACs. 
.H 3 "Interfaces to the Key Management Facility"
.P
For a distributed application, it may be important for a server to
have a network identity that is distinct from the principal identity
it inherits from the user who invokes it or the host on which it runs.
The key management facility provides features that enable noninteractive
principals to manage their secret keys.
.P
The user interface to the key management facility consist of a 
few \*Lrgy_edit\*O subcommands that enable an administrator to 
maintain a key table.  A remote interface allows users and
administrators to maintain key tables on remote machines through the
\*Ldcecp keytab\*O verbs.  A subset of local operations is also
available though this interface.  These
subcommands call the key management API, which consists of several
calls with the prefix \*Lsec_key_\*O.
...\" DCE 1.2 WRITERS: Please check above paragraph.
.H 3 "Interfaces to the ID Map Facility"
.P
There are no user interfaces to the ID map facility. The API to this
facility consists of calls that are prefixed wht \*Lsec_id_\*O.  These
routines map a global principal or group name into a cell name and
a cell-relative principal or group name, and generate a global
principal or group name from a cell name and a cell-relative principal
or group name.  This API also converts between
the internal (UUID) representation of a name and the human-readable string.
.H 3 "Interfaces to the Access Control List Facility"
.P
The only user interface to the ACL facility
is the \*Ldcecp\*O ACL object \*Lacl_edit\*O.  
This tool edits an object's ACL, the
entries of which specify the permissions to the object that
may be granted to principals possessing specified privilege attributes.
.P
The ACL API consists of routines that are prefixed with
\*Lsec_acl_\*O.
This is the same API that \*Lacl_edit\*O calls, so an ACL editor
or browser that is intended to replace \*Lacl_edit\*O would call
this API. A different case is that of an application server that needs
to store and retrieve application-specific, access-control
information for its clients.  Such an application needs to implement
its own ACL manager by using the DCE ACL library.
(Refer to Chapter 32 for more information on ACL managers).
.iX "-]" "API" "security services and facilities"
.iX "-]" "interface" "security services and facilities"
.H 3 "DCE Implementations of UNIX System Program Interfaces"
.P
.iX "C" "library interfaces"
.iX "UNIX" "security interfaces"
.iX "interface" "C library"
.iX "interface" "UNIX security"
DCE security provides implementations of UNIX system C library interfaces
related to security.  These are \*Lgetpwent(\|)\*O and the related
program interfaces to the \*L/etc/passwd\*O file, and \*Lgetgrent(\|)\*O and 
the related program interfaces to the \*L/etc/group\*O file.  Applications 
that bind with \*Llibdce.a\*O are bound with the DCE security implementations
of these interfaces.
.H 3 "Interfaces to the Password Management Facility"
.P
.iX "C" "library interfaces"
.iX "password management" "facility" "interfaces"
.iX "interface" "password management facility"
The user interface to the password management facility is provided by
subcommands to the \*Lrgy_edit\*O and \*Ldcecp\*O commands.  These
subcommands enforce password management policy for principals and
enable them to request generated passwords.  See the 
\*Lrgy_edit(8sec)\*O and \*Ldcecp(8dce)\*O reference pages 
and the \*(Ac for information on using these commands to create and
change principal passwords.
.P
The API to the password management facility consists of routines that
are prefixed with \*Lsec_pwd_mgmt_\*O.  See the appropriate 
reference pages and Chapter 36 for information on these routines.
.H 2 "Relationships Between the DCE Security Service and DCE Applications"
.P
Figure 23-2 is
a schematic illustration of the relationships among the interfaces
to the DCE Security Service, and the relationship of security interfaces
to DCE applications.
.FG "DCE Security and the DCE Application Environment"
.pI ../security/figures/1_overv_20.ps 0 0 1
.H 2 "DTS, the Cell Namespace, and Security"
.P
.iX "DTS" "security dependencies"
.iX "security" "DTS dependencies"
The following subsections discuss the dependencies of DCE security on 
the Distributed Time Service (DTS), and the relationship between the 
security namespace
and the Cell Directory Service (CDS) namespace.  For information about
how DCE components such as CDS use features of DCE security, refer
to the documentation on the component of interest (for example, the
section of the \*(Ac on CDS).
.H 3 "DTS and Security"
.P
The DCE Security Service depends on a relatively close synchronization
of network clocks, a service provided by DTS.
When network clocks become too skewed, unexpired tickets to services
may be regarded as invalid, and/or expired tickets considered valid.
Excessive skewing can inconvenience users and introduce
opportunities for security breaches; in the latter case, 
administrative intervention is required.
.H 3 "The Cell Namespace and the Security Namespace"
.P
.iX "CDS" "and security namespace"
.iX "security" "service" "namespaces"
The registry database maintains three security namespaces: the principal,
group, and organization (PGO) namespaces.  These namespaces are distinct
from the cell namespace maintained by CDS.
Security names take the following form:
.oS
/.../\*Vcell_name\*C/\*Vpgo_name
.oE
.P
CDS names take the following form:
.oS
/.../\*Vcell_name\*C/\*Vpathname\*C/\*Vobject_name
.oE
.P
.ne 5
Since the security namespace is rooted in the CDS namespace, security
names have equivalent CDS names.  Thus, for example, an entry for a
principal in the registry database has the first of the following
forms in the security namespace and the second of the following forms in
the CDS namespace:
.oS
/.../\*Vcell_name\*C/\*Vprincipal_name

/.../\*Vcell_name\*C/\*Vsecurity_mount_point\*C/\*Vprincipal\*C/\*Vprincipal_name
.oE 
.nS note
The security ``mount point'' (\*Vsecurity_mount_point\*O 
as shown in the preceding syntax) 
is determined when DCE is configured.  Therefore, the name
may differ at individual sites.
.nE 
.P
There is no ambiguity about the security namespace to which a name
refers because security names are always used in contexts that
identify the namespace in question.  For example, logging into
DCE requires a principal name to be supplied.
.P
.iX "ACL" "names"
However, an ACL is an object that is referenced not directly, but
by the name of the object it protects.  Since protected objects are
not always security objects (and therefore may be registered \*Eonly\*O
in the CDS namespace), ACL management interfaces always take CDS names
rather than security names as input, whether or not it is the ACL
of a security object (such as a registry database entry) that is being
read or modified.
