...\"
...\" @OSF_COPYRIGHT@
...\" COPYRIGHT NOTICE
...\" Copyright (c) 1990, 1991, 1992, 1993 Open Software Foundation, Inc.
...\" ALL RIGHTS RESERVED (DCE).  See the file named COPYRIGHT.DCE in the
...\" src directory for the full copyright text.
...\"
...\"
...\" HISTORY
...\" $Log: 3_authz.gpsml,v $
...\" Revision 1.1.8.1  1996/03/27  13:53:05  wardr
...\" 	{edit R1.2.1}
...\" 	More Release Edits
...\" 	[1996/03/27  13:52:39  wardr]
...\"
...\" Revision 1.1.6.10  1995/06/07  14:39:33  rcb
...\" 	PRENTICE HALL reformat; final edits and changes
...\" 	[1995/06/05  19:59:25  rcb]
...\" 
...\" 	PRENTICE HALL reformat
...\" 	[1995/05/08  18:03:37  rcb]
...\" 
...\" 	incorporated 1.1 edits
...\" 	[1995/05/08  17:22:22  rcb]
...\" 
...\" Revision 1.1.6.9  1994/11/03  23:35:09  neilson
...\" 	Substituted macros for book names in cross refs.
...\" 	[1994/11/03  01:39:08  neilson]
...\" 
...\" 	Substituted macros for book names in cross refs.
...\" 
...\" Revision 1.1.6.8  1994/10/21  14:03:29  jshirley
...\" 	Fixed cross ref. numbers.
...\" 	[1994/10/21  14:02:53  jshirley]
...\" 
...\" Revision 1.1.6.7  1994/10/19  19:57:24  millette
...\" 	{enh,10514, R1.1}
...\" 	added pointer to The Extended Privilege Attribute
...\" 	Application Program Interface chapter, which describes
...\" 	delegated authroization.
...\" 	[1994/10/19  19:56:54  millette]
...\" 
...\" Revision 1.1.6.6  1994/09/07  21:47:13  rjohnson
...\" 	Changes made: None.
...\" 	[1994/09/07  21:46:44  rjohnson]
...\" 
...\" Revision 1.1.6.5  1994/03/14  22:00:52  rom
...\" 	{enh, 10129, R1.1}
...\" 	Fix pathnames of included files for new three-book organization.
...\" 	[1994/03/14  21:20:30  rom]
...\" 
...\" Revision 1.1.6.4  1993/02/22  21:43:29  buckler
...\" 	Changed .P! to .pI and added Postscript boundary boxes
...\" 	[1993/02/22  21:42:37  buckler]
...\" 
...\" Revision 1.1.6.3  1993/01/28  18:45:59  cjd
...\" 	Embedded copyright notice
...\" 	[1993/01/28  18:06:50  cjd]
...\" 
...\" Revision 1.1.6.2  1992/11/20  19:58:59  weir
...\" 	Moved into 1.0.2doc tree
...\" 	[1992/11/20  19:50:14  weir]
...\" 
...\" Revision 1.1.4.6  1992/11/11  23:52:31  buckler
...\" 	Corrected index entries
...\" 	[1992/11/11  22:57:54  buckler]
...\" 
...\" Revision 1.1.4.5  1992/11/06  16:30:50  lmk
...\" 	Prentice-Hall index edits only
...\" 	[1992/11/06  16:27:12  lmk]
...\" 
...\" Revision 1.1.4.4  1992/10/10  15:50:16  casey
...\" 	Index changes for PH
...\" 	[1992/10/10  15:36:43  casey]
...\" 
...\" Revision 1.1.4.3  1992/10/09  15:17:41  lmk
...\" 	Prentice-Hall edits only
...\" 	[1992/10/09  15:14:24  lmk]
...\" 
...\" Revision 1.1.4.2  1992/09/11  21:02:36  lmk
...\" 	Prentice-Hall edits only
...\" 	[1992/09/11  20:59:24  lmk]
...\" 
...\" Revision 1.1.2.2  1992/05/07  14:51:47  millette
...\" 	Bug 2769: Miscellaneous editorial changes.  Not marked with change bars.
...\" 	[1992/05/07  14:25:38  millette]
...\" 
...\" Revision 1.1  1992/01/29  16:08:23  damon
...\" 	Initial revision
...\" 
...\" $EndLog$
...\"
...\" (c) Copyright 1991, Open Software Foundation, Inc.  ALL RIGHTS RESERVED
.H 1 "Authorization"
.iX "-; protocols" "authentication" "protocols"
.iX "-; protocols" "authorization" "protocols"
.iX "authentication" "protocols"
.iX "authorization" "protocols"
.iX "default" "authorization protocol"
.P
This chapter explains concepts related to authorization. The authenticated
RPC facility enables you to select the authorization protocol that
your application uses.  Among the authorization protocols supported
by the DCE Security Service for use by authenticated RPC is DCE authorization
(the default), and name-based authorization.
.P
This chapter first discusses DCE authorization, and more particularly,
DCE access control lists (ACLs).  At the end of this chapter, we also
briefly discuss the name-based authorization protocol.
.H 2 "DCE Authorization"
.iX "-[" "authorization"
.P
.iX "ACL" "definition"
.iX "DCE" "authorization protocol"
.iX "protocol" "DCE authorization"
The DCE authorization protocol is based in part on the UNIX 
file-protection model, but is extended with ACLs.  An ACL is a
list of access control entries that protects an object.  Each entry
in the ACL specifies a set of permissions.  Usually, most of the entries
in the ACL specify a privilege attribute (such as membership in a
group) and the set of permissions that may be granted to the principal(s)
that possesses that privilege attribute.  Some other entries specify
a set of permissions that may mask the permission set in
a privilege attribute entry.
.P
.iX "ACL" "manager types"
Every ACL is managed by an ACL manager type.  An ACL manager type determines
a principal's authorization to perform an operation on an object by
reading the object's ACL to find the appropriate entry (or entries)
that matches some privilege attribute possessed by the principal.
If the type of access requested by the principal is one of the permissions
listed in the matching entry, and assuming no applicable mask entry
denies that permission, then the ACL manager type allows the principal
to perform the requested operation.  If the requested permission is
not listed in the matching ACL entry, or is denied by a mask, permission
to perform the
operation is denied.  Permission to perform the operation is
also denied if the ACL contains no matching privilege attribute entry.
.P
Unlike UNIX file permissions, DCE ACLs are not limited to the
protection of file system objects such as is, files, directories, and
devices.  ACLs may also control access to nonfile-system objects,
such as the individual entries in a database.
.nS "note"
The implementation of DCE ACLs is aligned with POSIX  P1003.6 Draft 12.
.nE
.P
In the discussions in this chapter, we use the general term \*Ename\*O
to refer to a principal, group, or cell identifier; but readers should
always bear in mind that these names have two representations: as
UUIDs in ACL program interfaces and as print strings in user interfaces.
.H 3 "Object Types and ACL Types"
.iX "ACL"
.P
The ACL facility distinguishes between two types of objects: container
objects and simple objects.  Container objects contain other objects,
which may be simple and/or other container objects.  Simple objects
do not contain other objects.  Examples of container objects 
include file-system directories and databases; examples of simple objects
include files and database entries.
.P
To protect both object types, and to enable newly created objects
to inherit default ACLs from their parent container objects, the ACL
facility supports two basic kinds of ACLs:
.ML
.LI
An Object ACL is associated with either a container
or a simple object, and controls access to it.
.LI
.ne 4
A Creation ACL is associated with a container object
only.  Its function is not to control access to the container but
to supply default values for the ACLs of objects created in the container.
There are two types of Creation ACLs:
.ML
.LI
An Initial Object Creation ACL supplies default values for
a simple object's Object ACL and for a container object's Initial
Object Creation ACL.
.LI
An Initial Container Creation ACL supplies default values
for both a container object's Object ACL and its Initial Container
Creation ACL.
.LE
.LE
.P
Figure 25-1 illustrates how ACL defaults are derived from
Creation ACLs.
.PP
.FG "Derivation of ACL Defaults"
.pI ../security/figures/3_authz_10.ps 2.4i 4.3i
.sp .5
.P
Aside from the distinctions previously described, there are no differences
between Object ACLs and Creation ACLs; therefore, the information
about ACLs in the rest of this chapter does not differentiate between
them.
.H 3 "ACL Manager Types"
.iX "ACL"
.P
A separate ACL manager type manages the ACLs for each class of objects
for which permissions are uniquely defined.  The manager type defines
the permissions for those objects whose ACLs it manages, which are the 
number of permissions, the meanings of the permissions, and the tokens that
represent the permissions in user interfaces to ACL manipulation tools.
.P
.ne 6
For example, for the purpose of access control, five classes of objects
are defined in the registry database, and five ACL manager types manage
the ACLs for the registry database objects (the five registry manager
types run in a single security server process).  Other DCE components
implement their own manager types, and applications implement manager 
types for the objects that the applications protect.
.P
Refer to the \*(Ag and the \*(Ar for information
about standard DCE ACL manager types and the permissions they implement.
Refer to Part 1 and Chapter 32 of this guide for information about
implementing ACL manager types for distributed applications.
.H 3 "Access Control Lists"
.iX "ACL" "contents"
.iX "-: ACL, entries" "entry types, ACL"
.P
An ACL consists of the following:
.ML
.LI
An ACL manager type identifier, which identifies the
manager type of the ACL.
.LI
A default cell identifier, which specifies the cell
of which a principal or group identified as local is assumed to be
a member.  A DCE global pathname is necessary to specify a principal
or a group from a nondefault cell; this consists of a pair of UUIDs
representing the principal or group, and the cell of which it is a
member.  It is necessary to use the ID Map API to convert the global
print string names of foreign principals and groups to the UUID representations
that DCE ACL managers use.
(Refer to Chapter 33 for more information on this subject.)
.LI
At least one ACL entry.
.LE
.P
The rest of this chapter discusses ACLs primarily from a user-interface point of view, since this perspective provides an orientation to
the discussion of the ACL API in this part.
.H 3 "ACL Entries"
.iX "-[" "ACL" "entries"
.iX "attributes" "privilege"
.iX "privilege" "attributes"
.P
DCE authorization defines two basic kinds of ACL entries:
.ML
.LI
Those
that associate a specified privilege attribute with a permission set; these
are privilege attribute entries.
.LI
Those that specify a permission
set that masks a permission set specified in a privilege attribute
entry; these are mask entries.
.LE
.P
The following subsections describe the two kinds of ACL entries in detail.
.H 4 "Privilege Attribute Entry Types"
.P
The privilege attributes of a principal are based on identity
and include the principal's name, its group membership(s), and native
cell.  Note that not all ACL manager types implement all privilege
attribute entry types.  For example, the ACL manager type of a database
object probably would not support the \*Luser_obj\*O and \*Lgroup_obj\*O entry types.
.nS "note"
The term \*Elocal cell\*O means the cell specified
in the ACL header; this is not necessarily the cell in which the
protected object resides.
.nE
The descriptions of the ACL entry types that specify privilege
attributes are as follows:
.ML
.LI
\*Luser_obj\*O
.P
The \*Luser_obj\*O entry establishes the permissions
for the object's ``user'' (in the established UNIX sense).  An ACL may
contain only one entry of this type.  The identity of the principal
to which this ACL entry refers is assumed to be local and is specified
somewhere other than in this entry.  In the case of a file, for
example, the identity is attached to the file's inode.
.LI
\*Luser\*O
.P
The \*Luser\*O entry establishes the permissions for
the local principal named in this entry.  An ACL may contain a number
of entries of this type, but each entry must be unique with respect
to the principal it specifies.
.LI
\*Lforeign_user\*O
.P
The \*Lforeign_user\*O entry establishes the permissions
for the foreign principal named in this entry.  An ACL may contain
a number of entries of this type, but each entry must be unique with
respect to the foreign principal it specifies.  This entry type is
exactly like the \*Luser\*O entry type, except that this entry explicitly
names a cell.  (For the entry type\*L user\*O, the principal inherits
the cell specified by the default cell identifier in the ACL header.)
.LI
\*Lgroup_obj\*O
.P
The \*Lgroup_obj\*O entry establishes the permissions
for the object's ``group'' (in the established UNIX sense).  An ACL may
contain only one entry of this type.  As is the case with the \*Luser_obj\*O entry, the identity of the group is assumed to be local and is
specified elsewhere than in the \*Lgroup_obj\*O entry itself.
.LI
\*Lgroup\*O
.P
The \*Lgroup\*O entry establishes the permissions for
the local group named in this entry.  An ACL may contain a number of
entries of this type, but each entry must be unique with respect to
the group it specifies.
.LI
\*Lforeign_group\*O
.P
The \*Lforeign_group\*O entry establishes the permissions
for the foreign group named in this entry.  An ACL may contain a number
of entries of this type, but each entry must be unique with respect
to the foreign group it specifies.  This entry type is exactly like
the \*Lgroup\*O entry type, except that this entry explicitly names
a cell (for the entry type\*L group\*O, the principals inherit the default
cell identifier).
.LI
\*Lother_obj\*O
.P
The \*Lother_obj\*O entry establishes the permissions
for local principals whose identities do not correspond to any entry
type that explicitly names a principal or group; an ACL may contain
only one entry of this type.
.LI
\*Lforeign_other\*O
.P
The \*Lforeign_other\*O entry establishes the permissions
for all principals that are members of a specified foreign cell and
whose identities do not correspond to any \*Lforeign_user\*O or \*Lforeign_group\*O entry.  An ACL may contain a number of entries of this type,
but each entry must specify a different foreign cell.
.LI
\*Lany_other\*O
.P
The \*Lany_other\*O entry establishes the permissions
for principals whose privilege attributes do not match those specified
in any other entry type.  An ACL may contain only one entry
of this type.
.LE
.P
The followng addtional ACL entry types are supplied for 
delegated identities:
.ML
.LI
\*Luser_obj_delegate\*O
.LI
\*Luser_delegate\*O
.LI
\*Lforeign_user_delegate\*O
.LI
\*Lgroup_obj_delegate\*O
.LI
\*Lgroup_delegate\*O
.LI
\*Lforeign_group_delegate\*O
.LI
\*Lforeign_other_delegate\*O
.LI
\*Lother_obj_delegate\*O
.LI
\*Lforeign_other_delegate\*O
.LI
\*Lany_other_delegate\*O
.LE  
.P
These ACL entry types are described in detail in Chapter 27,
along with the extensions to the ACL checking algorithm for 
delegation.  
.P
ACL entries for privilege attributes consist of three fields in the
following form:
.iS
\*Ventry_type\*L[:\*Vkey\*L]:\*Vpermissions\*O
.iE
.P
Following are descriptions of the fields:
.ML
.LI
The ACL \*Ventry_type\*O specifies an ACL entry
type as described in the previous list.
.LI
.ne 9
The \*Vkey\*O field specifies the privilege attribute
to which the permissions listed in the entry apply.  The key field
for the ACL entry types \*Luser\*O, \*Lgroup\*O, \*Lforeign_user\*O,
\*Lforeign_group\*O, and \*Lforeign_other\*O explicitly names 
a principal, group, or cell.  For the entry types 
\*Lforeign_user\*O, \*Lforeign_group\*O, and \*Lforeign_other\*O, 
the key field must contain a global DCE pathname of the forms 
\*L/.../\*Vcellname/principalname\*O, \*L/.../\*Vcellname/groupname\*O, 
or \*L/.../\*Vcellname\*O, respectively.  The entry
types \*Luser_obj\*O, \*Lgroup_obj\*O, \*Lother_obj\*O, 
and \*Lany_other\*O do not use the key field.
.LI
The \*Vpermissions\*O field lists the
permissions that may be granted to the principal possessing the privilege
attribute specified in the entry, unless a mask (or masks) further
restricts the permissions that may be granted to the principal.  As
noted previously, the number and meaning of the permissions that may
protect an object are defined by the object's ACL manager type.  Therefore,
the permissions that an ACL entry may specify must be the set, or
a subset, of the permissions implemented by the manager type of the
ACL in which the entry appears.
.P
A principal is denied access when a \*Luser \*Oor \*Lforeign_user\*O entry that names the principal contains an empty permission set.
.LE
.H 4 "Mask Entry Types"
.P
.iX "masks" "ACL entry types"
Following are descriptions of the ACL entry types that specify masks:
.ML
.LI
\*Lmask_obj\*O
.P
The \*Lmask_obj\*O entry establishes the permission set
that masks all privilege attribute entry types except the \*Luser_obj\*O
and \*Lother_obj\*O types.
.LI
\*Lunauthenticated\*O
.P
The \*Lunauthenticated\*O entry
establishes the permission
set that masks the permission set in a privilege attribute entry
that corresponds to a principal whose privilege attributes have not
been certified by an authority such as the privilege service.
.LE
.P
.ne 10
The two masks are similar in that the permission set specified
in the mask entry is intersected (logically ANDed) with the permission
set in a privilege attribute entry.  This masking 
operation yields the effective 
permission set (the permissions that may be granted to the principal) 
for the principal possessing the privilege attribute.  
For example, if a privilege attribute entry
specifies the permissions \*Lab\*O, and a mask entry that specifies
the permissions \*Lbc\*O masks that privilege attribute entry,
the effective permission set is \*Lb\*O.  Similarly, a mask
entry that specifies the empty permission set means that none of the
permissions in any privilege attribute entry that mask entry
masks is granted to the principal possessing the privilege attribute.
.P
The two masks are dissimilar in one notable respect. Adding an \*Lunauthenticated\*O mask entry with an empty permission set to an ACL is equivalent
to omitting the \*Lunauthenticated\*O mask entry from the ACL;
in both cases, the set of effective permissions for principals possessing
unauthenticated privilege attributes is empty.  
However, adding a \*Lmask_obj\*O  entry with an empty permission 
set to an ACL is different from
having no \*Lmask_obj\*O entry in the ACL.  In the first case, the
effective permission set is empty; in the second case, the effective
permission set is identical to the permission set in the privilege
attribute entry.
.P
ACL entries for masks consist of two fields in the following form:
.oS
\*Ventry_type:permissions\*O
.oE
.P
Following are descriptions of the fields:
.ML
.LI
The \*Ventry_type\*O field specifies one of the
two masks entry types: \*Lmask_obj\*O or \*Lunauthenticated.\*O
.LI
The \*Vpermissions\*O field specifies the permission
set that masks the permission set in any privilege attribute entry
masked by the mask entry.
.LE
.H 4 "The Extended ACL Entry Type"
.P
.iX "extended ACL entry type"
The ACL entry type \*Lextended\*O is a special entry type for ensuring
the compatibility of ACL data created by different software revisions.
It enables old application clients to copy ACLs from one newer revision
object store to another without losing data.  It also enables obsolete
clients to manipulate ACL data that they understand without corrupting
the extended entries that they do not understand.
.iX "-]" "ACL" "entries"
.H 3 "Access Checking"
.iX "-[" "ACL" "access checking"
.P
Standard DCE ACL manager types use a common access-check algorithm
to determine the permissions they grant to a principal.  Access checking
is executed in up to six stages, in the following order:
.AL
.LI
The \*Luser_obj\*O entry
check
.LI
The check for a matching \*Luser\*O
or \*Lforeign_user\*O entry
.LI
The \*Lgroup_obj\*O entry check
and the check for matching \*Lgroup\*O or \*Lforeign_group\*O
entries
.LI
The \*Lother_obj  \*Oentry check
.LI
The check for a matching \*Lforeign_other\*O entry
.LI
The \*Lany_other\*O check
.LE
.P
If during any stage of access checking an ACL manager type finds a
privilege attribute entry that matches a privilege attribute possessed
by a principal, then the manager type does not execute any subsequent
stages, even though the principal may possess other privilege attributes
for which there are other matching entries.  See the \*ESecurity
Volume\*O of the \*(Dc for descriptions of the algorithms used at 
each stage of access checking.
...\" FOLLOWING COMMENTED OUT AS PER INHERITED COMMENT FROM 1.1 COPY
...\" Said to refer to AES, keep above short overview & examples
...\" .H 4 "The user_obj Entry Check"
...\" .P
...\" The pseudocode that follows illustrates the \*Luser_obj\*O check
...\" algorithm.  If the principal seeking access is the identity to which
...\" the \*Luser_obj\*O entry refers, then the remaining checks are
...\" not executed.
...\" .oS
...\" IF (no USER_OBJ principal name is available)
...\" THEN
...\"   the requested permission is denied
...\" ELSE IF (the principal name matches the user name associated
...\" 	with the USER_OBJ entry) AND (the cell name matches
...\" 	the cell name for that entry)
...\" THEN
...\"   IF (the requested permission is listed in the USER_OBJ entry)
...\"   THEN
...\"     IF (the principal's privilege attributes are certified)
...\"     THEN
...\"       the requested permission is granted
...\"     ELSE
...\"       IF (the requested permission is listed in the
...\" 	 unauthenticated mask entry)
...\"       THEN
...\"         the permission is granted
...\"       ELSE
...\"         the permission is denied
...\"       ENDIF
...\"     ENDIF
...\"   ENDIF
...\" ELSE
...\"   the permission is denied
...\" ENDIF
...\" .oE
...\" .H 4 "The User Entries Check"
...\" .P
...\" The pseudocode that follows illustrates the algorithm for checking 
...\" \*Luser\*O or \*Lforeign_user\*O entries. If the principal's identity
...\" matches one of these entries, then the remaining checks are not executed.
...\" .oS
...\" IF (the principal name matches the user name of any USER
...\"       or FOREIGN_USER entry) AND (the principal's cell name
...\"       matches the cell name for that entry)
...\" THEN
...\"   IF (the requested permission is listed in the USER or
...\"      FOREIGN_USER entry) AND ((the requested permission
...\"      is listed in the mask_obj entry) OR (there is no
...\"      mask_obj entry))
...\"   THEN
...\"     IF (the principal's privilege attributes are certified)
...\"     THEN
...\"       the requested permission is granted
...\"     ELSE
...\"       IF (the requested permission is listed in the
...\"          unauthenticated mask entry)
...\"       THEN
...\"         the permission is granted
...\"       ELSE
...\"         the permission is denied
...\"       ENDIF
...\"     ENDIF
...\"   ELSE
...\"     the permission is denied
...\"   ENDIF
...\" ENDIF
...\" .oE
...\" .H 4 "The Group Entries Check"
...\" .P
...\" The pseudocode that follows illustrates the algorithm for checking
...\" group entries.  If a principal is associated with a concurrent
...\" group set, more than one search of the ACL entries for groups is executed:
...\" one for the primary group (the one specified in the principal's account
...\" information), and one for each group in the concurrent group set.
...\" .P
...\" The permissions granted are the union (the logical OR operation) of
...\" the permissions yielded by each search of the group entries.  For example,
...\" if two groups of which an authenticated
...\" principal is a member specify the permission sets \*Labc\*O
...\" and \*Lcde\*O, then the principal is granted the permission set\*L
...\" abcde\*O.
...\" .P
...\" If one or more matching group entries are found, then the remaining
...\" checks are not executed.
...\" .oS
...\" IF (a group name among the principal's privilege
...\"       attributes matches the group ID of any GROUP_OBJ, GROUP,
...\"       or FOREIGN_GROUP entry) AND (the principal's cell name
...\"       matches the cell name for that entry)
...\" THEN
...\"   IF (the requested permission is listed in the group entry)
...\"      AND ((the requested permission is listed in the
...\"      mask_obj entry) OR (there is no mask_obj entry))
...\"   THEN
...\"     IF (the principal's privilege attributes are certified)
...\"     THEN
...\"       the permission is granted
...\"     ELSE
...\"       IF (the requested permission is listed in the
...\"          unauthenticated mask entry)
...\"       THEN
...\"         the permission is granted
...\"       ELSE
...\"         the permission is denied
...\"       ENDIF
...\"     ENDIF
...\"   ELSE
...\"     the permission is denied
...\"   ENDIF
...\" ENDIF
...\" .oE
...\" .H 4 "The other_obj Entry Check"
...\" .P
...\" The pseudocode that follows illustrates the algorithm for checking
...\" the\*L other_obj\*O entry.
...\" .oS
...\" IF (the requested permission is listed in the OTHER_OBJ entry
...\"       AND (the principal's cell name matches the cell name for
...\"       that entry)
...\" THEN
...\"   IF (the principal's privilege attributes are certified)
...\"   THEN
...\"     the permission is granted
...\"   ELSE
...\"     IF (the requested permission is listed in the
...\"        unauthenticated mask entry)
...\"     THEN
...\"       the permission is granted
...\"     ELSE
...\"       the permission is denied
...\"     ENDIF
...\"   ENDIF
...\" ELSE
...\"   the permission is denied
...\" ENDIF
...\" .oE
...\" .H 4 "The foreign_other Entries Check"
...\" .P
...\" The pseudocode that follows illustrates the algorithm for checking
...\" the\*L foreign_other\*O entries.
...\" .oS
...\" IF (the requested permission is listed in a FOREIGN_OTHER
...\"       entry) AND (the principal's cell name matches the cell name
...\"       for that entry) AND ((the requested permission is listed
...\"       in the mask_obj entry) OR (there is no mask_obj entry))
...\" THEN
...\"   IF (the principal's privileges are certified)
...\"   THEN
...\"     the permission is granted
...\"   ELSE
...\"     IF (the requested permission is listed in the
...\"        unauthenticated mask entry)
...\"     THEN
...\"       the permission is granted
...\"     ELSE
...\"       the permission is denied
...\"     ENDIF
...\"   ENDIF
...\" ELSE
...\"   the permission is denied
...\" ENDIF
...\" .oE
...\" .H 4 "The any_other Entry Check"
...\" .P
...\" The pseudocode that follows illustrates the \*Lany_other \*Ocheck
...\" algorithm.  If no privilege attribute possessed by a principal matches
...\" any entry checked in any preceding stage of access checking, then
...\" the principal may be granted the effective permissions yielded by
...\" this check. 
...\" .P
...\" Note that if an ACL listing this entry also lists the \*Lother_obj \*Oentry,
...\" then only undistinguished foreign identities can match this entry.
...\" However, if the ACL does not list the\*L other_obj\*O entry, then
...\" all undistinguished identities, whether foreign or local, match this
...\" entry.
...\" .oS
...\" IF (the requested permission is listed in the any_other entry
...\"       AND ((the requested permission is listed in the mask_obj
...\"       entry) OR (there is no mask_obj entry))
...\" THEN
...\"   IF (the principal's privilege attributes are certified)
...\"   THEN
...\"     the permission is granted
...\"   ELSE
...\"     IF (the requested permission is listed in the
...\"        unauthenticated mask entry)
...\"     THEN
...\"       the permission is granted
...\"     ELSE
...\"       the permission is denied
...\"     ENDIF
...\"   ENDIF
...\" ELSE
...\"   the permission is denied
...\" ENDIF
...\" .oE
.H 3 "Examples of ACL Checking"
.P
The following subsections provide some examples that illustrate ACLs and the
access-check algorithms.  The examples use the arbitrary convention
of ordering entries as follows: masks, principals, groups, and ``other''
entries.  However, the access check algorithm disregards the order
in which entries appear in an ACL. Also note that the permissions
in these examples do not refer to any particular permissions implemented
by any ACL manager type.
.H 4 "Example 1"
.P
Following is an ACL that protects an object to which three principals, \*Ljanea\*O, \*L/.../cella/fritzb\*O, and\*L mariac\*O, seek access:
.oS
mask_obj:ab
user_obj:abc
user:janea:abdef
foreign_user:/.../cella/fritzb:abc
group:projectx:abcf
group:projecty:bcg
.oE
.nS "note"
The numbered lists in the discussions that follow correspond to stages
1, 2, 3, 4, 5 and 6 of the access-check algorithm referred to in
Section 25.1.5.
.nE
.P
The principal \*Ljanea\*O requests permission \*Lc \*Oto the
object protected by the ACL. Assume that the principal \*Ljanea\*O
has the privilege attributes of being a member of the groups\*L
projectx\*O and\*L projecty\*O (as well as having a \*Luser\*O
entry that names her) and that \*Ljanea\*O is the principal to
which the \*Luser_obj\*O entry refers.  Assume also that this principal's
privilege attributes are certified:
.AL
.LI
The \*Luser_obj\*O
check yields the permissions \*Labc\*O.
.LE
.P
The result of this check is that the effective permission set for  \*Ljanea\*O is\*L abc\*O. Because a matching entry is found during the
first stage of access checking, none of the remaining stages of access
checking is executed, even though there are three other matching entries.
The\*L mask_obj \*Oentry does not mask  the \*Luser_obj\*O entry,
so\*L janea\*O's effective permissions are the permissions in the \*Luser_obj\*O entry.  Since \*Ljanea\*O requested a permission that is
a member of the effective permission set, her request is granted.
.P
The second principal seeking access to the protected object is \*L/.../cella/fritzb\*O. This principal requests permission \*Lb\*O.  Assume
that \*Luser_obj\*O resolves to some identity other than 
\*L/.../cella/fritzb,\*O and that this principal's 
privilege attributes are uncertified:
.AL
.LI
The \*Luser_obj\*O
check yields no permissions because \*L/.../cella/fritzb\*O's identity
does not match that of the \*Luser_obj\*O (no foreign principal
can ever match this entry).
.LI
.ne 6
The \*Lforeign_user\*O entry
for \*L/.../cella/fritzb\*O specifies the permissions \*Labc\*O.
The application of the \*Lmask_obj\*O, which specifies the permissions\*L
ab\*O to this permission set, yields the permissions \*Lab\*O.
Since the \*Lunauthenticated\*O mask entry is missing from the
ACL, all permissions for unauthenticated identities are masked, yielding
an empty effective permission set.
.LE
.P
The result of these checks is that \*L/.../cella/fritzb\*O's
request is denied (and would be denied, regardless of the permission
requested).  In this case, only the first two stages of access checking
are executed.
.P
The third principal seeking access is \*Lmariac\*O, who requests
permission \*La\*O.  Assume that the privilege attributes of \*Lmariac\*O are certified, that \*Lmariac\*O is not the principal that
corresponds to the \*Luser_obj\*O entry, and that \*Lmariac\*O is
a member of the groups \*Lprojectx\*O and \*Lprojecty\*O:
.AL
.LI
The \*Luser_obj\*O
check yields no permissions.
.LI
There is no matching user entry.
.LI
The group check finds two matching
entries.  The permissions associated with \*Lprojectx\*O (\*Labcf\*O)
when masked by the \*Lmask_obj\*O entry (\*Lab\*O)
yield the permissions \*Lab\*O.  The permissions associated with \*Lprojecty\*O (\*Lbcg\*O) when masked by the \*Lmask_obj\*O entry
yield the permission \*Lb\*O.  The union of the permission sets \*Lab\*O
and \*Lb\*O is the set\*L ab\*O.
.LE
.P
The effective permission set for \*Lmariac\*O is \*Lab\*O
and since the requested permission (\*La\*O) is a member of that
set, \*Lmariac\*O's request is granted.  The remaining stages of
access checking are not executed.
.H 4 "Example 2"
.P
Following is the ACL for an object to which two principals, \*Lugob\*O
and\*L /.../cellb/lolad\*O, seek access:
.oS
.ne 6
mask_obj:bcde
unauthenticated:ab
user_obj:abcdef
user:ugob:abcdefg
group:projectz:abh
foreign_other:/.../cellb/:abc
.oE
.nS "note"
.ne 3
The numbered lists in the discussions that follow correspond to stages
1, 2, 3, 4, 5 and 6 of the access check algorithm referred to in
Section 25.1.5.
.nE
.P
The principal \*Lugob\*O requests permission \*Lb. \*OAssume
that \*Lugob\*O is not the principal to which the \*Luser_obj\*O
entry refers.  Assume also that the privilege attributes of \*Lugob\*O include membership in the group\*L projectz\*O, in addition to the \*Luser\*O
entry that names him.  In this case,  the principal has failed to acquire
certified privilege attributes:
.AL
.LI
The \*Luser_obj\*O
check yields no permissions.
.LI
The matching entry among
the user entries specifies the permissions \*Labcdefg.\*O Applying \*Lmask_obj\*O (\*Lbcde\*O) yields the permission set\*L bcde\*O.
Applying the \*Lunauthenticated\*O mask (\*Lab\*O) to the permission
set \*Lbcde\*O yields the effective permission set\*L b\*O.
.LE
.P
Since the principal \*Lugob\*O requests a permission (\*Lb\*O)
that is a member of the effective permissions set, this principal's
request is granted.
.P
A case that illustrates how access is determined for otherwise undifferentiated
members of a specified foreign cell is that of the principal \*L/.../cellb/lolad\*O, who requests permission \*Le\*O.  Assume that the privilege
attributes of this principal are certified:
.AL
.LI
The principal is
foreign, so the \*Luser_obj\*O check cannot be a match.
.LI
There are no \*Lforeign_user\*O
entries.
.LI
There are no \*Lforeign_group\*O
entries.
.LI
The principal \*Llolad\*O is a member of \*Lcellb\*O, meaning that the
privilege attributes match those in the \*Lforeign_other\*O entry for \*Lcellb.\*O The permissions specified by the \*Lforeign_other\*O entry for \*Lcellb\*O (\*Labc\*O) as masked by \*Lmask_obj\*O (\*Lbcde\*O) yields the effective permission set \*Lbc\*O.
.LE
.P
The permission requested (\*Le\*O) is not a member of the effective
permission set (\*Lbc\*O), so the request is denied.
.H 4 "Example 3"
.P
Following is the ACL for an object to which one principal, \*Lsilviob\*O
seeks access.
.oS
unauthenticated:a
user:jeand:abcde
user:denisf:-
group:projectx:abcd
foreign_other:/.../cella:-
foreign_other:/.../cellc:abc
any_other:ab
.oE
.nS "note"
The \*Luser\*O entry for \*Ldenisf\*O  and the \*Lforeign_other\*O entry 
for \*Lcella\*O both specify an empty permission set with the
notation \*L-\*O (dash), 
meaning that identities corresponding to these entries are explicitly denied all
permissions.  Also, the numbered lists in the discussions that follow 
correspond to stages 1, 2, 3, 4, 5 and 6 of the access-check algorithm
referred to in Section 25.1.5.
.nE
.P
The principal\*L silviob\*O requests permission\*L a\*O.
Assume that this principal's privileges include membership in the
group \*Lprojecty\*O and that they are not certified:
.AL
.LI
There is no \*Luser_obj\*O entry, so this check can yield no permissions.
.LI
There is no \*Luser\*O entry
for this principal, so this check yields no permissions.
.LI
There is no entry for the group \*Lprojecty\*O,  so this check yields no permissions.
.LI
There is no \*Lother_obj\*O
entry, so this check can yield no permissions.
.LI
The principal is local, so no \*Lforeign_other\*O entry can be a match; this check yields no permissions.
.LI
Having failed to match any entry
examined in the preceding checks,  the principal matches the\*L
any_other\*O entry, which yields the permission set\*L ab\*O.
There is no \*Lmask_obj\*O entry, but there is the \*Lunauthenticated\*O mask entry, which specifies the permission set\*L a\*O.  Applying
the \*Lunauthenticated\*O mask to this privilege attribute entry
yields the effective permission \*La\*O.
.LE
.P
The permission requested (\*La\*O) is a member of the effective
permission set (\*La\*O), so this principal's request is granted.
.iX "-]" "ACL" "access checking"
.H 2 "Name-Based Authorization"
.P
.iX "-]" "authorization"
.iX "name-based authorization"
.iX "protocol" "name-based authorization"
The Kerberos authentication service, upon which the DCE shared-secret
authentication protocol is based, authenticates the string name representation
of a principal.  The DCE Security Service
converts these string representations
to UUIDs, and it is these UUIDs that an ACL manager uses to make authorization
decisions.  However, since some existing (non-DCE) applications
implement Kerberos authentication, DCE security supports an authorization
protocol based on principal string names: name-based authorization.
.P
It is assumed that applications that use name-based authorization
have a means to associate string names with permissions, since the DCE
Security Service offers no such facility.  Because in name-based authorization
there is no UUID representation of privilege attribute data, and because
DCE ACL managers recognize only UUIDs, if an application uses name-based
authorization, then a principal's privilege attributes are represented
as an anonymous PAC. Such PAC data can only match the ACL entry types \*Lother_obj\*O, \*Lforeign_other\*O, or \*Lany_other\*O, and are
masked by the \*Lunauthenticated\*O mask.
.P
Also note that there is essentially no intercell security for an application
that uses the name-based authorization protocol because such applications
never communicate with the privilege service, which evaluates intercell
trust.
