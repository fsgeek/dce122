...\"
...\" @OSF_COPYRIGHT@
...\" COPYRIGHT NOTICE
...\" Copyright (c) 1990, 1991, 1992, 1993 Open Software Foundation, Inc.
...\" ALL RIGHTS RESERVED (DCE).  See the file named COPYRIGHT.DCE in the
...\" src directory for the full copyright text.
...\"
...\"
...\" HISTORY
...\" $Log: 3_programming.gpsml,v $
...\" Revision 1.1.6.12  1995/06/07  14:43:07  rcb
...\" 	PRENTICE HALL reformat; final edits and changes
...\" 	[1995/06/05  19:57:50  rcb]
...\"
...\" 	PRENTICE HALL reformat
...\" 	[1995/04/13  16:33:30  rcb]
...\"
...\" 	incorporated 1.1 edits
...\" 	[1995/04/13  16:09:57  rcb]
...\"
...\" Revision 1.1.6.11  1994/10/20  22:12:08  jshirley
...\" 	Fixed cross references.
...\" 	[1994/10/20  22:11:51  jshirley]
...\" 
...\" Revision 1.1.6.10  1994/09/30  18:51:43  weir
...\" 	Fixing internal cross-references
...\" 	[1994/09/30  18:51:06  weir]
...\" 
...\" Revision 1.1.6.9  1993/02/24  22:07:54  weir
...\" 	Added a period
...\" 	[1993/02/24  22:07:07  weir]
...\" 
...\" Revision 1.1.6.8  1993/02/23  18:36:35  johnson
...\" 	No changes made.
...\" 	[1993/02/23  18:32:50  johnson]
...\" 
...\" Revision 1.1.6.7  1993/02/19  20:29:11  weir
...\" 	Fixed CR6766
...\" 	[1993/02/19  20:28:22  weir]
...\" 
...\" Revision 1.1.6.6  1993/01/28  18:46:46  cjd
...\" 	Embedded copyright notice
...\" 	[1993/01/28  18:07:52  cjd]
...\" 
...\" Revision 1.1.6.5  1993/01/21  18:01:51  lmk
...\" 	CR#4589: In response to a 1/19/93 change to the bug file, in
...\" 	consultation with Howard Melman and John Dugas, decided to remove the
...\" 	change I had made to the file in the last revision.  The changes
...\" 	will be made instead to the Porting Guide.
...\" 	[1993/01/21  17:57:51  lmk]
...\" 
...\" Revision 1.1.6.4  1993/01/21  16:00:31  lmk
...\" 	CR#4589: added Pthreads search path information
...\" 	[1993/01/21  15:59:12  lmk]
...\" 
...\" Revision 1.1.6.3  1993/01/15  19:00:21  johnson
...\" 	CR#:     6452
...\" 	File:    /src/app_gd/threads/3_programming.gpsml
...\" 	Change:  Corrected routine names from pthread_global_lock_np and
...\" 	         pthread_global_unlock_np (incorrect) to pthread_lock_global_np and
...\" 	         pthread_unlock_global_np (correct)
...\" 	[1993/01/15  18:59:09  johnson]
...\" 
...\" Revision 1.1.6.2  1992/11/20  21:00:38  weir
...\" 	Moved into 1.0.2doc tree
...\" 	[1992/11/20  20:57:53  weir]
...\" 
...\" Revision 1.1.4.6  1992/11/11  23:54:33  buckler
...\" 	Corrected index entries
...\" 	[1992/11/11  22:59:41  buckler]
...\" 
...\" Revision 1.1.4.5  1992/11/06  16:36:40  lmk
...\" 	Prentice-Hall index edits only
...\" 	[1992/11/06  16:33:56  lmk]
...\" 
...\" Revision 1.1.4.4  1992/10/12  22:19:47  casey
...\" 	Index corrections for PH
...\" 	[1992/10/12  22:16:32  casey]
...\" 
...\" Revision 1.1.4.3  1992/10/08  17:45:41  lmk
...\" 	Prentice-Hall edits only
...\" 	[1992/10/08  17:44:04  lmk]
...\" 
...\" Revision 1.1.4.2  1992/09/10  20:43:12  buckler
...\" 	Second editorial review
...\" 	[1992/09/10  20:39:20  buckler]
...\" 
...\" Revision 1.1.2.4  1992/07/02  19:35:31  johnson
...\" 	Defect:  3880
...\" 
...\" 	File: src/app_gd/threads/3_programming.gpsml
...\" 	Short description:  Corrected coding error.
...\" 	[1992/07/02  19:34:10  johnson]
...\" 
...\" Revision 1.1  1992/01/29  16:07:00  damon
...\" 	Initial revision
...\" 
...\" $EndLog$
...\"
...\" Copyright 1991, Open Software Foundation, Inc.  ALL RIGHTS RESERVED.
...\" ********************************************************************
...\"                                                                    *
...\" COPYRIGHT (c) 1991 BY DIGITAL EQUIPMENT CORPORATION,               *
...\" Maynard, Massachusetts                                             *
...\" All Rights Reserved.                                               *
...\"                                                                    *
...\" This document is furnished under a license and may be used and     *
...\" copied only in accordance with the terms of such license and with  *
...\" the inclusion of the above copyright notice.  No title to or        *
...\" ownership of the document is hereby transferred.                   *
...\"                                                                    *
...\" The information in this document is subject to change without      *
...\" notice and should not be construed as a commitment by Digital      *
...\" Equipment Corporation.                                             *
...\"                                                                    *
...\" ********************************************************************
.H 1 "Programming with Threads"
.iX  "programming with threads"
.PP
This chapter discusses issues you face when writing a multithreaded
program and how to deal with those issues.
.PP
The topics discussed in this chapter are as follows:
.ML
.LI
Calling UNIX services
.LI
Using signals
.LI
Nonthreaded libraries
.LI
Avoiding nonreentrant software
.LI
Avoiding priority inversion
.LI
Using synchronization objects
.LI
Signaling a condition variable
.LE
.H 2 "Calling UNIX Services"
.PP
.iX "calling" "UNIX services"
.iX "-[" "UNIX" "services"
On a UNIX system that does not have kernel support for threads, making system 
and library calls from within a multithreaded
program raises the following issues:
.ML
.LI
System calls may not be thread-reentrant.
.LI
If a system call blocks, it blocks the entire process instead of
blocking the calling thread only.
.LE
.H 3 "Jacket Routines"
.iX "-[" "jacket routines"
.PP
To resolve the previous two issues, DCE Threads provides jacket
routines for a number of UNIX system calls.  Threads call the jacket routine
instead of the UNIX system service; this allows DCE Threads to
take action on behalf of the thread before or after calling the system
service.  For example, the jacket routines ensure that only one thread calls
any particular service at a time to avoid problems with system calls that
are not thread-reentrant.
.PP
Jacket routines are provided for UNIX input and output system calls
(documented in any UNIX programmer's manual) and
the \*Lfork(\|)\*O and \*Lsigaction(\|)\*O system calls.  Jackets are not
provided for any other UNIX system calls or for any of the C runtime
library services. 
See \*L/usr/include/dce/cma_ux.h\*O for the full list of jacket routines. 
.H 4 "Input and Output Jacket Routines"
.PP
.iX "-: jacket routines" "routines" "jacket"
.iX "input jacket routines"
.iX "output jacket routines"
Jacket routines are provided for routines that perform input and output
operations.  Examples of these operations are as follows:
.ML
.LI
Open or create files, pipe symbols, and sockets
.iX "opening files with jacket routines"
.iX "creating" "files with jacket routines"
.LI
Send and receive messages on sockets
.iX "sending and receiving messages on sockets"
.LI
Read and write files and pipe symbols
.iX "file" "reading/writing with jacket routines"
.iX "reading/writing files with jacket routines"
.LE
.PP
.ne 6
Jacket routines are provided for Input/Output services so that DCE Threads
can determine when to issue or block the service call based on
the results of the \*Lselect(\|)\*O system call.  For these UNIX services, 
DCE Threads can determine whether issuing the system call causes the
process to block.  If the system call causes the process to block, DCE
Threads blocks only the calling thread and schedules another thread
to run in its place.
.PP
Periodically, DCE Threads checks whether the original calling
thread can issue its operation without blocking the process.  When the thread
runs without blocking the process, that thread is placed back into the queue
of ready threads and, at its turn, the thread resumes execution and issues
the system call.  Therefore, the jacket routines provide thread-synchronous
I/O operations where otherwise the system calls block the entire process.
.H 4 "The \*Lfork(\|)\*O Jacket Routine"
.PP
.iX "-]" "UNIX" "services"
Jackets are provided for the \*Lfork(\|)\*O system
call.  A specific thread environment must exist in the forked process
when it resumes (begins) execution.  These jacket routines allow code
to be executed in the context of the new process before the user code
resumes execution in it.
.H 4 "The \*Latfork(\|)\*O Routine"
.PP
The \*Latfork(\|)\*O routine allows an application or library to ensure 
predicted behavior when the \*Lfork(\|)\*O routine is used in a multithreaded 
environment.
Using the \*Lfork(\|)\*O routine from a threaded application or from an application
that uses threaded libraries can result in unpredictable behavior.  
For example, one thread has a mutex locked, and the state covered by that
mutex is inconsistent while another thread calls the \*Lfork(\|)\*O 
routine.  In the
child process, the mutex will be in the locked state, and it cannot be 
unlocked because only the forking thread exists in the child process.
Having the child 
reinitialize the mutex is unsatisfactory because this approach does
not resolve the question of how to correct the inconsistent state
in the child.
.PP
.ne 3
The \*Latfork(\|)\*O routine provides a way for threaded applications
or libraries to protect themselves when a \*Lfork(\|)\*O occurs.  The 
\*Latfork(\|)\*O routine
allows you to set up routines that will run at the following times:
.iX "running routines with \*Lfork(\|)\*O"
.ML
.LI 
Prior to the \*Lfork(\|)\*O in the parent process 
.LI
After the \*Lfork(\|)\*O in the child process
.LI
After the \*Lfork(\|)\*O in the parent process
.LE
.PP
Within these routines, you can ensure that all mutexes are locked prior to 
the \*Lfork(\|)\*O and that they are unlocked after the \*Lfork(\|)\*O, thereby 
protecting any data
or resources associated with the mutexes.  You can register any number of 
sets of \*Latfork(\|)\*O routines; that is, any number of
libraries or user programs can set up \*Latfork(\|)\*O routines and they
will all execute at \*Lfork(\|)\*O time.  
.nS note
Using the \*Latfork(\|)\*O routine can
potentially cause a deadlock if two applications or libraries call
into one another using calls that require locking. 
Specifically, when these component's routines use the \*Latfork(\|)\*O 
routine to run prior to the fork in the parent process, a deadlock may occur 
when these routines are executing.
.nE
.H 4 "Using the Jacketed System Calls"
.PP
.iX "using jacketed system calls"
You do not have to rename your system calls to take advantage of the jacket
routines.  Macros put the jacket routines into place when you compile 
your program; these macros rename the jacketed system calls to 
the name of the DCE Threads jacket routine.  Thus, a reference to
the DCE Threads jacket routine is compiled into your code instead of
a reference to the system call.  When the code is executed, it calls the
jacket routine, which then calls the system on your code's behalf.
.PP
If you do not wish to use any of the jacket routines, you can add the 
following line to your program before any of the thread header files:
.oS
#define _CMA_NOWRAPPERS_
.oE
By adding this definition, you prevent 
the jacket routines from being substituted for the real routines.
.iX "-]" "jacket routines"
.PP
.ne 5
.iX "undefining jackets"
If you wish to use most of the jackets but do not wish to use a specific 
jacket, you can undefine a specific jacket by adding the following 
directive after the thread header files:
.iS
#undef \*Vroutine_name
.iE
For example, to not use the fork jacket, you can add the following:
.oS
#undef fork
.oE
.H 3 "Blocking System Calls"
.PP
.iX "blocking system calls"
DCE Threads provides jacket routines that make certain system calls
thread-synchronous. 
If calling one of these jacketed system calls would
normally block the process, the jacket routine ensures that only the
calling thread is blocked and that the process remains available to
execute other threads.  Examples of jacketed system calls include
\*Lread(\|)\*O, \*Lwrite(\|)\*O, \*Lopen(\|)\*O, \*Lsocket(\|)\*O, \*Lsend(\|)\*O, and 
\*Lrecv(\|)\*O.
.PP
If a thread makes a call to any of the other nonjacketed blocking
system calls (or if it calls one of the jacketed system calls without
going through the jacket), then when the system call blocks the
thread, it blocks the whole process, preventing any other threads in
the process from executing.  Examples of nonjacketed system calls 
include \*Lwait(\|)\*O, \*Lsigpause(\|)\*O, \*Lmsgsnd(\|)\*O,
\*Lmsgrcv(\|)\*O, and \*Lsemop(\|)\*O. 
.PP
Some care must be used when calling nonjacketed blocking system
calls from a multithreaded program.  Other threads in the program may
not be able to tolerate not running for an extended period of time
while the process blocks for the system call.  If your program must
make use of such system calls, the calling thread should specify a
nonblocking or polling option to the system call.  If the call is not
successful, then the calling thread
should retry; however, to prevent the retry code from becoming a hot
loop, a yield or delay function call should be inserted into the path.
This gives other threads in the program a chance to run between poll
attempts.
.H 3 "Calling fork(\|) in a Multithreaded Environment"
.PP
.iX "calling" "\*Lfork(\|)\*O"
.iX "\*Lfork(\|)\*O" "calling"
The \*Lfork(\|)\*O system call creates an exact duplicate of the address space
from which it is called, resulting in two address spaces executing the
same code.  Problems can occur if the forking address space has
multiple threads executing at the time of the \*Lfork(\|)\*O.  When
multithreading is a result of library invocation, threads are not
necessarily aware of each other's presence, purpose, actions, and so
on.  Suppose that one of the other threads (any thread other than the
one doing the \*Lfork(\|)\*O) has the job of deducting money from your
checking account.  Clearly, you do not want this to happen twice as a
result of some other thread's decision to call \*Lfork(\|)\*O.
.PP 
Because of these types of problems, which in general are problems of
threads modifying persistent state, POSIX defined the behavior of
\*Lfork(\|)\*O in the presence of threads to propagate only the forking
thread.  This solves the problem of improper changes being
made to persistent state.  However, it causes other problems, as 
discussed in the next paragraph.
.PP 
In the POSIX model, only the forking thread is propagated.  
All the other threads are eliminated without any
form of notice; no cancels are sent and no handlers are run.  However,
all the other portions of the address space are cloned, including
all the mutex state.  If the other thread has a mutex locked, the
mutex will be locked in the child process, but the lock owner will
not exist to unlock it.  Therefore, the resource protected by
the lock will be permanently unavailable.  
.PP 
The fact that there may be mutexes outstanding only becomes a
problem if your code attempts to lock a mutex that could be locked
by another thread at the time of the \*Lfork(\|)\*O.  This
means that you cannot call outside of your own code
between the call to \*Lfork(\|)\*O and the call to \*Lexec(\|)\*O.  Note that a call
to \*Lmalloc(\|)\*O, for example, is a call outside of the currently executing
application program and may have a mutex outstanding.  
The following code obeys these guidelines and is therefore safe:
.oS
fork ();
a = 1+2;  /* some inline processing */
exec();
.oE
.PP 
Similarly, if your code calls some of your own code that does not
make any calls outside of your code and does not lock any mutexes
that could possibly be locked in another thread, then your code is
safe.
.PP 
One solution to the problem of calling \*Lfork(\|)\*O in a multithreaded 
environment exists. (Note that this method will not
work for server application code or any other
application code that is invoked by a callback from a library.) 
Before an application performs a \*Lfork(\|)\*O followed by something other
than \*Lexec(\|)\*O, it must cancel all of the other threads.  After it joins 
the canceled threads, it can safely \*Lfork(\|)\*O because 
it is the only thread in
existence.  This means that libraries that create threads
must establish cancel handlers that propagate the cancel to the
created threads and join them.  The application should save
enough state so that the threads can be recreated and restarted
after the \*Lfork(\|)\*O processing completes.
.H 2 "Using Signals"
.PP
.iX "using signals"
The following subsections cover three topics: types of 
signals, DCE Threads signal handling,  and alternatives to using signals.
.H 3 "Types of Signals"
.PP
.iX "types" "of signals"
.iX "-[" "signals"
.iX "-[" "UNIX" "signals"
Signals are delivered as a result of some event.  UNIX signals are grouped
into the following four categories of pairs that are orthogonal to each other:
.ML
.LI
Terminating and synchronous
.LI
Terminating  and asynchronous 
.LI
Nonterminating and synchronous  
.LI
Nonterminating and asynchronous
.LE
.PP
The action that DCE Threads takes when a particular signal is
delivered depends on the characteristics of that signal.
.H 4 "Terminating Signals"
.PP
.iX "terminating signals"
.gL "Terminating"
Terminating signals result in the termination of the process by
default.  Whether a particular signal is terminating or not is independent of
whether it is synchronously or asynchronously delivered.
.H 4 "Nonterminating Signals"
.PP
.iX "nonterminating signals"
.gL "Nonterminating"
Nonterminating signals do not result in the termination of the
process by default.
.PP
Nonterminating signals represent events that can be either internal or
external to the process.  The process may require notification or
ignore these events.  When a
nonterminating asynchronous signal is delivered to the process,
DCE Threads awakens any threads that are waiting for the signal.
This is the only action that DCE Threads takes because, by
default, the signal has no effect.
.H 4 "Synchronous Signals"
.PP
.iX "synchronous signals"
.gL "Synchronous"
Synchronous signals are the result of an event that occurs inside
a process and are delivered synchronously with respect to that event.  For
example, if a floating-point calculation results in an overflow, then a
\*LSIGFPE\*O (floating-point exception signal) is delivered to the process
immediately following the instruction that resulted in the overflow.
...\" 
...\" 
...\" 
.PP
The default behavior of DCE Threads in DCE Version 1.0.2 when a synchronous
terminating signal occurs is to dump core; that is, to not handle the
signal.  This differs from the behavior prior to DCE Version 1.0.2, in which 
such a signal would be turned into an exception and propagated out to whatever
process was the original owner of the thread (namely the client, even
though the exception might have occurred in the server).  Therefore, if
an application using DCE Threads wants to handle such signals, it must
now set up a signal handler to do so by calling \*Lsigaction(\|)\*O.
Note that the new DCE Threads behavior is in fact similar to the default
behavior of most UNIX programs.
...\" 
...\" 
...\" 
.PP
Synchronous, terminating signals represent an error that has occurred in the
currently executing thread.
.H 4 "Asynchronous Signals"
.PP
.iX "asynchronous signals"
.gL "Asynchronous"
Asynchronous signals are the result of an event that is external
to the process and are delivered at any point in a thread's execution when
such an event occurs.  For example, when a user running a program types the
interrupt character at the terminal (generally \*L<Ctrl-c>\*O), a \*LSIGINT\*O 
(interrupt signal) is delivered to the process.
.PP
Asynchronous, terminating signals represent an occurrence of an event that
is external to the process and, if unhandled, results in the termination of
the process.  When an asynchronous terminating signal is delivered, DCE
Threads catches it and checks to see if any threads are waiting for
it.  If threads are waiting, they are awakened, and the signal is considered
handled and is dismissed.  If there are no waiting threads, then DCE
Threads causes the process to be terminated as if the signal had not 
been handled.
.iX "terminating" "threads"
.H 3 "DCE Threads Signal Handling"
.PP
.iX "DCE" "Threads signal handling"
DCE Threads provides the POSIX \*Lsigwait(\|)\*O service to allow threads to 
perform activities similar to signal handling without having to deal with 
signals directly.  It also provides a jacket for \*Lsigaction(\|)\*O 
that allows each thread to have its own handler for synchronous 
signals.
.PP
.iX "signal handlers"
.iX "UNIX" "signals" "installing signal handlers for"
In order to provide these mechanisms, DCE Threads installs
signal handlers for most of the UNIX signals during initialization.
.PP
DCE Threads do not provide handlers for several UNIX signals.
Those signals and the reasons why handlers are not provided are
shown in Table 8-1.
.iX "UNIX signals" "table of"
.iX "handlers not provided with UNIX signals"
.PP
.ne 2i
.TB "Signals for Which Handlers Are Not Provided"
.TS
center, allbox, tab(%);
lb | lb
l | l.
Signal%Reason Handler Is Not Provided
_
\*LSIGKILL\*O and \*LSIGSTOP\*O%T{
These signals cannot be caught by user mode code.
T}
\*LSIGTRAP\*O%T{
Catching this signal interferes with debugging.
T}
\*LSIGTSTP\*O and \*LSIGQUIT\*O%T{
These signals are caught only while a thread has issued a 
\*Lsigwait(\|)\*O call because their default actions are otherwise valuable.
T}
.TE
...\" .cS
...\" .VL 15m "
...\" .LI "\*LSignal\\*O"
...\" \*LReason Handler Is Not Provided\*O
...\" .LI "\*LSIGKILL\*O and \*LSIGSTOP\*O"
...\" These signals cannot be caught by user mode
...\" code.
...\" .LI "\*LSIGTRAP\*O"
...\" Catching this signal interferes with debugging.
...\" .LI "\*LSIGTSTP\*O and \*LSIGQUIT\*O"
...\" These signals are caught only while a thread
...\" has issued a sigwait call, because their default actions are otherwise
...\" valuable.
...\" .LE
...\" .cE
.H 4 "The POSIX \*Lsigwait(\|)\*O Service"
.PP
.iX "sigwait service"
.iX "POSIX" "sigwait service"
The DCE Threads implementation of the POSIX \*Lsigwait(\|)\*O service allows
any thread to block until one of a specified set of signals is delivered.  A
thread waits for any of the asynchronous signals, except for \*LSIGKILL\*O and
\*LSIGSTOP\*O. 
.PP
A thread cannot wait for a synchronous signal.  This is because
synchronous signals are the result of an error during the execution of a
thread; if the thread is waiting for a signal, then it is not executing.
Therefore, a synchronous signal cannot occur for a particular thread while
it is waiting, and so the thread waits forever.
POSIX stipulates that the thread must block the signals (using the 
UNIX system service \*Lsigprocmask(\|)\*O) it waits for
before calling \*Lsigwait(\|)\*O.
.PP
.ne 10
.H 4 "The POSIX \*Lsigaction(\|)\*O Service
.PP
.iX "POSIX" "sigaction service"
The DCE Threads implementation of the POSIX \*Lsigaction(\|)\*O service
allows for per-thread handlers to be installed for catching
synchronous signals.  The \*Lsigaction(\|)\*O routine modifies
behavior only for individual threads and works only for synchronous
signals.  Setting the signal action to \*LSIG_DFL\*O for a specific signal
will restore the thread's default behavior for that signal.
Attempting to set a signal action for an asynchronous signal is an
error.
.H 4 "The \*Litimer VTALARM\*O"
.PP
DCE Threads installs a handler for the \*Litimer VTALARM\*O.  Therefore, 
\*LVTALARM\*O is unavailable for use by other applications.
.H 3 "Alternatives to Using Signals"
.PP
Avoid using UNIX signals in multithreaded programs.  DCE Threads 
provides alternatives to signal handling.  These alternatives are discussed
in more detail in Sections 8.6 and 8.7.
.nS note
In order to implement these alternatives, DCE Threads must
install its own signal handlers.  These are installed when DCE
Threads initializes itself, typically on the first
thread-function call.  At this time, any existing signal handlers are
replaced.
.nE
Following are several reasons for avoiding signals:
.ML
.LI
They cannot be used in a modular way in a multithreaded program.
.LI
They are unnecessary when used as an asynchronous programming technique
in a multithreaded program.
.LI
There are almost no threads services available at signal level.
.LI
There is no reliable, portable way to modify predicates.
.LI
The signal-handler interface is unsuitable for use with threads.  (For
example, there is one signal action per signal per process, there is 
one signal mask per process, and \*Lsigpause(\|)\*O blocks the whole process.) 
.LE
.PP
.ne 9
.iX "-]" "signals"
.iX "-]" "UNIX" "signals"
In a multithreaded program, signals cannot be used in a modular way because,
on most current UNIX implementations, signals are inherently a process
construct.  There is only one instantiation of each signal and of each signal
handler routine for all of the threads in an application.  If one thread
handles a particular signal in one way, and a different thread handles the
same signal in a different way, then the thread that installs its signal
handler last handles the signal.  This applies only to asynchronously 
generated signals; synchronous signals can be handled on a per-thread 
basis using the DCE Threads \*Lsigaction(\|)\*O jacket.
.PP
.iX "synchronous programming techniques"
Do not use asynchronous programming techniques in conjunction with threads,
particularly those that increase parallelism such as using timer signals and
I/O signals.  These techniques can be complicated.  They are also
unnecessary because threads provide a mechanism for parallel execution that
is simpler and less prone to error where concurrence can be of value.
Furthermore, most of the threads routines
are not supported for use in interrupt routines (such as signal handlers),
and portions of runtime libraries cannot be used reliably inside a signal
handler.
.H 2 "Nonthreaded Libraries"
.PP
.iX "nonthreaded libraries"
As programming with threads becomes common practice, you need to
ensure that threaded code and nonthreaded code (code that is not
designed to work with threads) work properly together in the same
application.  For example, you may write a new application that uses
threads (for example, an RPC server),  and link it with a library that
does not use threads (and is thus not thread-safe).  In such a
situation you can do one of the following:
.ML
.LI
Work with the nonthreaded software.
.LI
Change the nonthreaded software to be thread-safe.
.LE
.H 3 "Working with Nonthreaded Software"
.PP
.iX "global lock"
Thread-safe code is code that works properly in a threaded
environment.  To work with nonthread-safe code, associate the global
lock with all calls to such code. 
.PP
.ne 6
You can implement the lock on the side of the routine user or the
routine provider.  For example, you can implement the lock on the side
of the routine user if you write a new application like an RPC server
that uses threads, and you link it with a library that does not.  Or,
if you have access to the nonthreaded code, the locks can be placed on
the side of the routine provider, within the actual routine. 
Implement the locks as follows: 
.AL
.LI
Associate one lock, a global lock, with execution of such code.
.LI
Require all of your threads to lock prior to execution of
nonthreaded code.
.LI
Perform an unlock when execution is complete.
.LE
.PP
By using the global lock, you ensure that only one thread executes in
outside libraries, which may call each other, and in unknown code.
Using a single global lock is safer than using multiple local locks 
because it is difficult to be aware of everything a library may be
doing or of the interactions that library can have with other
libraries. 
.H 3 "Making Nonthreaded Code Thread-Reentrant"
.PP
.iX "thread" "reentrant"
Thread-reentrant code is code that works properly while multiple
threads execute it concurrently.  Thread-reentrant code is
thread-safe, but thread-safe code may not be thread-reentrant. 
Document your code as being thread-safe or thread-reentrant. 
.PP
More work is involved in making code thread-reentrant than in making
code thread-safe.  To make code thread-reentrant, do the
following:
.AL
.LI
Use proper locking protocols to access global or static variables.
.LI
Use proper locking protocols when you use code that is not 
thread-safe.
.LI
Store thread-specific data on the stack or heap.
.LI
Ensure that the compiler produces thread-reentrant code.
.LI
Document your code as being thread-reentrant.
.LE
.H 2 "Avoiding Nonreentrant Software"
.PP
.iX "avoiding" "nonreentrant software"
.iX "nonreentrant software"
The following subsections discuss 
two methods to help you avoid the pitfalls of
nonreentrant software.  These methods are as follows:
.ML
.LI
Global lock
.LI
Thread-specific storage
.LE
.iX "thread-specific data"
.H 3 "Global Lock"
.iX "nonreentrant software" "using global lock to avoid"
.iX "lock" "global"
.iX "global lock"
.PP
Use a global lock, which has the characteristics of a recursive mutex,
instead of a regular mutex when calling routines that you think are
nonreentrant. (When in doubt, assume the code is nonreentrant.)
.iX "pthread functions"
.PP
The \*Lpthread_lock_global_np(\|)\*O 
routine is a locking protocol that is
used to call nonreentrant routines, often found in existing library packages
that were not designed to run in a multithreaded environment.
.PP
The way to call a library function that is not reentrant from a
multithreaded program is to protect the function with a mutex.  If every
function that calls a library locks a particular mutex before the call and
releases the mutex after the call, then the function completes without
interference.  However, this is difficult to do successfully because the 
function may be called by many libraries.  A global lock solves
this problem by providing a universal lock.  Any code that calls any
nonreentrant function uses the same lock.
.PP
To lock a global lock, call the \*Lpthread_lock_global_np(\|)\*O routine.
To unlock a
global lock, call the \*Lpthread_unlock_global_np(\|)\*O routine.
.nS note
Many COBOL and FORTRAN compilers generate inherently nonreentrant code. 
Many C, Ada,
Pascal, and BLISS compilers generate reentrant code by default.  It is
possible to write nonreentrant code in the reentrant languages by not
following a locking protocol.
.nE
.iX "compilers" "generating nonreentrant code"
.iX "compilers" "generating reentrant code"
.iX "COBOL compiler" "generating nonreentrant code"
.iX "C" "compiler"
.iX "Ada compiler" "generating reentrant code"
.iX "PASCAL compiler" "generating reentrant code"
.iX "BLISS compiler" "generating reentrant code"
.iX "reentrant code"
.iX "nonreentrant code"
.iX "generating nonreentrant code" 
.H 3 "Thread-Specific Storage"
.PP
.iX "nonreentrant software"
.iX "thread-specific storage"
.iX "thread-specific data"
To avoid nonreentrancy when writing new software, avoid using global
variables to store data that is thread-specific data. 
.PP
Alternatively, allocate thread-specific data on the stack or heap and
explicitly pass its address to called routines.
.H 2 "Avoiding Priority Inversion"
.PP
.iX "avoiding" "priority inversion"
.iX "priority" "inversion"
.iX "multithreaded programming" "potential disadvantages"
Priority inversion occurs when interaction among three or more threads
blocks the highest-priority thread from executing.  For example, a
high-priority thread waits for a resource locked by a low-priority thread,
and the low-priority thread waits while a middle-priority thread executes.
The high-priority thread is made to wait while a thread of lower priority 
(the middle-priority thread) executes.
.PP
To avoid priority inversion, associate a priority with each resource and
force any thread using that object to first raise its priority to that
associated with the object.  This method of avoiding priority 
inversion is not a complete solution because all threads will then block 
at the same ceiling priority and be unblocked in FIFO order rather 
than by their actual priority.
.PP
The \*LSCHED_OTHER\*O (default) scheduling policy prevents priority inversion 
from causing a complete blockage of the high-priority thread because the
low-priority thread is permitted to execute and release the
resource.  The \*LSCHED_FIFO\*O and \*LSCHED_RR\*O policies, however, do not 
force resumption of the low-priority thread if the middle-priority thread 
executes indefinitely.
.H 2 "Using Synchronization Objects"
.PP
.iX "using synchronization objects"
The following subsections discuss the use of mutexes to prevent two potential
problems: race conditions and deadlocks.  Also discussed is why you
should signal a condition variable with the associated mutex locked.
.H 3 "Race Conditions"
.PP
.iX "synchronization objects" "race conditions"
.iX "race conditions"
.iX "multithreaded programming"
A race condition occurs when two or more threads perform an operation, and
the result of the operation depends on unpredictable timing factors;
specifically, when each thread executes and waits and when each thread
completes the operation.
.PP
An example of a race condition is as follows:
.AL
.LI
Both A and B are executing (X = X + 1).
.LI
A reads the value of X (for example, X = 5).
.LI
B comes in and reads the value of X and increments it (making X = 6).
.LI
A gets rescheduled and now increments X. Based on its earlier 
read operation, A thinks (X+1 = 5+1 = 6).  X is now 6.  It should 
be 7 because it was incremented once by A and once by B.
.LE
.PP
.iX "avoiding" "race conditions"
To avoid race conditions, ensure that any variable modified by more than one
thread has only one mutex associated with it.  Do not assume that a 
simple add operation can be completed without allowing another thread 
to execute.  Such operations are generally not portable, especially to 
multiprocessor systems.  If it is possible for two threads to share a 
data point, use a mutex.
.H 3 "Deadlocks"
.PP
.iX "avoiding" "deadlocks"
.iX "synchronization objects"
.iX "deadlock " "avoiding"
.iX "multithreaded programming" "potential disadvantages"
A deadlock occurs when one or more threads are permanently blocked from 
executing because each thread waits on a resource held by another thread 
in the deadlock.
A thread can also deadlock on itself.
.PP
The following is one technique for avoiding deadlocks:
.AL
.LI
Associate a sequence number with each mutex.
.LI 
Lock mutexes in sequence.
.LI
Do not attempt to lock
a mutex with a sequence number lower than that of a mutex the thread already
holds.
.LE
.PP
Another technique, which is useful when a thread needs to lock the same mutex
more than once before unlocking it, is to use a recursive mutex.
This technique prevents a thread from deadlocking on itself.
.H 2 "Signaling a Condition Variable"
.PP
.iX "condition variable" "signaling"
.iX "mutex" "locking before signaling condition variable"
.iX "locking a mutex"
When you are signaling a condition variable and that signal may cause the
condition variable to be deleted, it is recommended that you signal or
broadcast with the mutex locked.
.PP
The recommended coding for signaling a condition variable 
appears at the end of this chapter.
The following two C code fragments show coding that is \*Enot recommended\*O.
The following C code fragment is executed by a releasing thread:
.oS
pthread_mutex_lock (m);
/* Change shared variables to allow */
/* another thread to proceed */

pthread_mutex_unlock (m);	<---- \*VPoint A\*C 
pthread_cond_signal (cv);	<---- \*VStatement 1\*C
.oE
.PP
.ne 7
The following C code fragment is executed by a potentially blocking thread:
.oS
pthread_mutex_lock (m);
while (!predicate ... 
	pthread_cond_wait (cv, m);

pthread_mutex_unlock (m);
.oE
.PP
.nS note
It is possible for a potentially blocking thread to be running at
\*VPoint A\*O while another thread is interrupted.  The potentially blocking
thread can then see the predicate true and therefore not become blocked
on the condition variable.
.nE
.PP
.iX "deleting" "condition variables"
Signaling a condition variable without first locking a mutex is not a
problem.  However, if the released thread deletes the condition variable 
without any further
synchronization at \*VPoint A\*O, then the releasing thread will fail when 
it attempts to execute \*VStatement 1\*O because the condition variable no 
longer exists.
.PP
This problem occurs when the releasing thread is a worker thread and the
waiting thread is the boss thread, and the last worker thread tells the boss
thread to delete the variables that are being shared by boss and worker.
.PP
The following C code fragment shows the \*Erecommended\*O coding for 
signaling a condition variable while the mutex is locked:
.oS
pthread_mutex_lock (m); 
/* Change shared variables to allow */
/* some other thread to proceed */

pthread_cond_signal (cv);   <---- \*VStatement 1\*C
pthread_mutex_unlock (m);
.oE
