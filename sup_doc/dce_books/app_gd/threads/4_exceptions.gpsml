...\"
...\" @OSF_COPYRIGHT@
...\" COPYRIGHT NOTICE
...\" Copyright (c) 1990, 1991, 1992, 1993 Open Software Foundation, Inc.
...\" ALL RIGHTS RESERVED (DCE).  See the file named COPYRIGHT.DCE in the
...\" src directory for the full copyright text.
...\"
...\"
...\" HISTORY
...\" $Log: 4_exceptions.gpsml,v $
...\" Revision 1.1.8.6  1995/06/07  14:43:18  rcb
...\" 	PRENTICE HALL reformat; final edits and changes
...\" 	[1995/06/05  19:57:55  rcb]
...\"
...\" 	no change
...\" 	[1995/04/13  17:57:35  rcb]
...\"
...\" 	PRENTICE HALL reformat
...\" 	[1995/04/13  17:56:45  rcb]
...\"
...\" 	incorporated 1.1 edits
...\" 	[1995/04/13  17:31:06  rcb]
...\"
...\" Revision 1.1.8.5  1994/11/03  23:35:54  neilson
...\" 	Substituted macros for book names in cross refs.
...\" 	[1994/11/03  01:39:17  neilson]
...\" 
...\" 	Substituted macros for book names in cross refs.
...\" 
...\" Revision 1.1.8.4  1994/10/20  22:14:41  jshirley
...\" 	Fixed table reference.
...\" 	[1994/10/20  22:14:30  jshirley]
...\" 
...\" Revision 1.1.8.3  1994/09/30  18:51:45  weir
...\" 	Fixing internal cross-references
...\" 	[1994/09/30  18:51:12  weir]
...\" 
...\" Revision 1.1.8.2  1993/06/01  18:18:33  buckler
...\" 	{defect, 7625, R1.0.3}
...\" 	Rewrote paragraph describing unhandled exceptions to state that
...\" 	the entire application process, not just the faulting thread,
...\" 	is terminated.
...\" 	[1993/05/27  21:25:06  buckler]
...\" 
...\" Revision 1.1.6.6  1993/01/28  18:46:55  cjd
...\" 	Embedded copyright notice
...\" 	[1993/01/28  18:08:01  cjd]
...\" 
...\" Revision 1.1.6.5  1993/01/14  19:49:57  buckler
...\" 	Remerged old revisions with K. Johnson's latest fixes for bug #2723.
...\" 	Somehow, all preceding revisions of the file were destroyed when
...\" 	the #2723 fixes were submitted.
...\" 	[1993/01/14  19:49:01  buckler]
...\" 
...\" Revision 1.1.6.4  1993/01/08  19:40:14  johnson
...\" 	CR#:     2723
...\" 	File:    /src/app_gd/threads/4_exceptions.gpsml
...\" 	Change:  Added exceptions that are in code but were not in doc
...\" 	[1993/01/08  19:39:23  johnson]
...\" 
...\" Revision 1.1.6.3  1993/01/06  17:12:02  mcdonald
...\" 	Changes made:           Add index entries pointing to text added to
...\" 	                        file src/app_gd/rpc/3_build_app.gpsml for
...\" 	                        Change Request #3474; this text responds to
...\" 	                        Change Request #2138.
...\" 	File name:              src/app_gd/threads/4_exceptions.gpsml
...\" 	Change Request Number:  2138
...\" 	[1993/01/06  17:10:26  mcdonald]
...\" 
...\" Revision 1.1.6.2  1992/11/20  21:00:48  weir
...\" 	Moved into 1.0.2doc tree
...\" 	[1992/11/20  20:58:01  weir]
...\" 
...\" Revision 1.1.4.5  1992/11/11  23:54:41  buckler
...\" 	Corrected index entries
...\" 	[1992/11/11  23:00:04  buckler]
...\" 
...\" Revision 1.1.4.4  1992/10/12  22:19:53  casey
...\" 	Index corrections for PH
...\" 	[1992/10/12  22:16:42  casey]
...\" 
...\" Revision 1.1.4.3  1992/10/08  17:45:46  lmk
...\" 	Prentice-Hall edits only
...\" 	[1992/10/08  17:44:11  lmk]
...\" 
...\" Revision 1.1.4.2  1992/09/10  20:43:19  buckler
...\" 	Second editorial review
...\" 	[1992/09/10  20:39:30  buckler]
...\" 
...\" Revision 1.1.2.3  1992/06/17  20:17:15  buckler
...\" 	Incorporated editorial review
...\" 	[1992/06/17  20:16:23  buckler]
...\" 
...\" Revision 1.1.2.2  1992/05/08  21:57:14  johnson
...\" 	File: src/app_gd/threads/4_exceptions.gpsml
...\" 
...\" 	Defect:  3192
...\" 	Short description:  Changed value to -1.
...\" 
...\" 	Defect:  2721
...\" 	Short description:  Added two exceptions to table.
...\" 	[1992/05/08  21:56:16  johnson]
...\" 
...\" Revision 1.1  1992/01/29  16:07:10  damon
...\" 	Initial revision
...\" 
...\" $EndLog$
...\"
...\" Copyright 1991, Open Software Foundation, Inc.  ALL RIGHTS RESERVED.
...\" ********************************************************************
...\"                                                                    *
...\" COPYRIGHT (c) 1991 BY DIGITAL EQUIPMENT CORPORATION,               *
...\" Maynard, Massachusetts                                             *
...\" All Rights Reserved.                                               *
...\"                                                                    *
...\" This document is furnished under a license and may be used and     *
...\" copied only in accordance with the terms of such license and with  *
...\" the inclusion of the above copyright notice.  No title to or        *
...\" ownership of the document is hereby transferred.                   *
...\"                                                                    *
...\" The information in this document is subject to change without      *
...\" notice and should not be construed as a commitment by Digital      *
...\" Equipment Corporation.                                             *
...\"                                                                    *
...\" ********************************************************************
.H 1 "Using the DCE Threads Exception-Returning Interface"
.PP
DCE Threads provides the following two ways to obtain information about the
status of a threads routine:
.iX "exception-returning interface"
.iX "thread" "exception-returning interface"
.ML
.LI
The routine returns a status value to the thread.
.LI
The routine raises an exception.
.LE
.PP
Before you write a multithreaded program, you must choose only one of the
preceding two methods of receiving status.  These two methods cannot be used
together in the same code module.
.PP
The POSIX P1003.4a (pthreads) draft standard specifies that errors be
reported to the thread by setting the external variable \*Lerrno\*O to 
an error code and returning a function value of \-1. The threads reference 
pages document this status-value-returning interface (see the
\*(Dr). 
However, an alternative to status values
is provided by DCE Threads in the exception-returning interface.
.PP
This chapter introduces and provides conventions for the modular use of the
exception-returning interface to DCE Threads.
.H 2 "Syntax for C"
.iX "exception-returning interface" "syntax for C"
.iX "-: exception-returning interface" "interface" "exception-returning"
.PP
Access to exceptions from the C language is defined by the macros in the
\*Lexc_handling.h\*O file.  The \*Lexc_handling.h\*O header file is 
included automatically when you include \*Lpthread_exc.h\*O (see 
Section 9.2).
.PP
The following example shows the syntax for handling exceptions:
.iX "\*LTRY\*O statement"
.iX "\*LCATCH\*O statement"
.iX "\*LCATCH_ALL\*O statement"
.iX "\*LENDTRY\*O statement"
.oS
TRY 
    try_block
[CATCH (exception_name) 
    handler_block]...
[CATCH_ALL 
    handler_block]
ENDTRY
.oE
.PP
A \*Ltry_block\*O or a \*Lhandler_block\*O is a sequence of
statements, the first of which may be declarations, as in a normal
block.  If an exception is raised in the \*Ltry_block\*O, the catch
clauses are evaluated in order to see if any one matches the current
exception.
.PP
The \*LCATCH\*O or \*LCATCH_ALL\*O clauses absorb an exception;
that is, they catch an exception propagating out of the \*Ltry_block\*O,
and direct execution into the associated \*Lhandler_block\*O.
Propagation of the exception, by default, then ends.  Within the
lexical scope of a handler, it is possible to explicitly cause
propagation of the same exception to resume (this is called
\*Vreraising\*O the exception), or it is possible to raise some new exception.
.PP
.iX "\*LRERAISE\*O statement"
The \*LRERAISE\*O statement is allowed in any handler statements and causes the
current exception to be reraised.  Propagation of the caught exception
resumes.
.PP
.iX "\*LRAISE\*O statement"
The \*LRAISE\*O (\*Lexception_name\*O) statement is allowed anywhere
and causes a particular exception to start propagating.  For example:
.oS
.ne 16
TRY
    sort(); /* Call a function that may raise an exception.
             * An exception is accomplished by longjumping
             * out of some nested routine back to the TRY
             * clause.  Any output parameters or return 
             * values of the called routine are therefore
             * indeterminate.
             */

CATCH (pthread_cancel_e) 
    printf("Alerted while sorting\\n"); RERAISE;

CATCH_ALL 
    printf("Some other exception while sorting\\n"); RERAISE;

ENDTRY
.oE
.PP
In the preceding example, if the \*Lpthread_cancel_e\*O 
exception propagates out 
of the function call, the first \*Lprintf\*O is executed. 
If any other exception propagates out of sort, the second \*Lprintf\*O is 
executed.  In either situation, propagation of the exception 
resumes because of the \*LRERAISE\*O statement. (If the 
code is unable to fully recover from the error, or does not understand the 
error, it needs to do what it did in the previous example and 
further propagate the error to its callers.)
.PP
The following shows the syntax for an epilogue:
.oS
TRY       try_block
[FINALLY  final_block]
ENDTRY
.oE
.PP
The \*Lfinal_block\*O is executed whether the \*Ltry_block\*O executes
to completion without raising an exception, or if an exception is
raised in the \*Ltry_block\*O.  If an exception is raised in the
\*Ltry_block\*O, propagation of the exception is resumed after
executing the \*Lfinal_block\*O.
.PP
Note that a \*LCATCH_ALL\*O handler and \*LRERAISE\*O could be used to do 
this, but the epilogue code would then have to be duplicated in two 
places, as follows:
.oS
.ne 7
TRY
     try_block
CATCH_ALL
     final_block
     RERAISE;
ENDTRY
{ final_block }
.oE
.PP
.iX "\*LFINALLY\*O statement"
A \*LFINALLY\*O statement has exactly this meaning, but avoids code duplication.
.nS note
The behavior of \*LFINALLY\*O along with the
\*LCATCH\*O or \*LCATCH_ALL\*O 
clauses is undefined.  Do \*Enot\*O combine them for the same \*Ltry_block\*O.
.nE
.PP
Another example of the \*LFINALLY\*O statement is as follows:
.oS
pthread__mutex_lock (some_object.mutex);
some_object.num_waiters = some_object.num_waiters + 1;
TRY
    while (! some_object.data_available)
        pthread_cond_wait (some_object.condition);
    /* The code to act on the data_available goes here */
FINALLY
    some_object.num_waiters = some_object.num_waiters - 1;
    pthread_mutex_unlock (some_object.mutex);
ENDTRY
.oE
.PP
In the preceding example, the call to \*Lpthread_cond_wait(\|)\*O could
raise the \*Lpthread_cancel_e\*O exception. 
The \*Lfinal_block\*O ensures that the 
shared data associated with the lock is correct for the next thread that 
acquires the mutex.
.H 2 "Invoking the Exception-Returning Interface"
.PP
.iX "exceptions" "invoking the exception-returning interface"
.iX "exception-returning interface" "invoking"
To use the exception-returning interface, replace the first statement
that follows with the second:
.oS
#include <pthread.h>

#include <pthread_exc.h>
.oE
.H 2 "Operations on Exceptions"
.PP
.iX "exceptions" "definition"
.iX "exceptions" "operations on"
.iX "operations" "on exceptions"
An exception is an object that describes an error condition.  Operations on
exception objects allow errors to be reported and handled.  If an exception
is handled properly, the program can recover from errors.  For example, if an
exception is raised from a parity error while reading a tape, the recovery
action may be to retry 100 times before giving up.
.PP
The DCE Threads exception-returning interface allows you to perform
the following operations on exceptions:
.ML
.LI
Declare and initialize an exception object
.LI
Raise an exception
.LI
Define a region of code over which exceptions are caught
.LI
Catch a particular exception or all exceptions
.LI
Define epilogue actions for a block
.LI
Import a system-defined error status into the program as an exception
.LE
.PP
These operations are discussed in the following subsections.
.H 3 "Declaring and Initializing an Exception Object"
.PP
.iX "exceptions" "declaring and initializing"
Declaring and initializing an exception object documents that a program 
reports or handles a particular error.  Having the error expressed as an
exception object provides future extensibility as well as portability.
Following is an example of declaring and initializing an exception object:
.oS
EXCEPTION parity_error;         /* Declare it */
EXCEPTION_INIT (parity_error);  /* Initialize it */
.oE
.H 3 "Raising an Exception"
.iX "exceptions" "raising"
.iX "raising exceptions"
.PP
Raising an exception reports an error, not by returning a value, but by
propagating an exception.  Propagation involves searching all active scopes
for code written to handle the error or code written to perform
scope-completion actions in case of any error, and then causing that code to
execute.  If a scope does not define a handler or epilogue block, then
the scope is simply torn down as the exception propagates through the stack.
This is sometimes referred to as \*Vunwinding the stack\*O.  DCE Threads 
exceptions are terminating; there is no option to make execution resume at
the point of the error. (Execution resumes at the point where the exception
was caught.)
.PP
If an exception is unhandled, the entire application process is
terminated.  Aborting the process, rather than just the faulting
thread, provides clean termination at the point of error. 
This prevents the disappearance of the faulting thread 
from causing problems at some later point.
.PP
An example of raising an exception is as follows:
.oS
RAISE (parity_error);
.oE
.H 3 "Defining a Region of Code over Which Exceptions Are Caught"
.iX "exceptions" "defining a region of code to catch"
.PP
Defining a region of code over which exceptions are
caught allows you to call functions that can raise an exception and specify
the recovery action.
.PP
Following is an example of defining an exception-handling region (without
indicating any recovery actions):
.oS
TRY {
   read_tape ();
    }
ENDTRY;
.oE
.H 3 "Catching a Particular Exception or All Exceptions"
.PP
.iX "exceptions" "catching"
It is possible to discriminate among errors and perform different actions
for each error.
.PP
Following is an example of catching a particular exception and specifying
the recovery action (in this case, a message).  The exception is reraised 
(passed to its callers) after catching the exception and executing the 
recovery action:
.oS
TRY {
   read_tape ();
    }
CATCH (parity_error) {
   printf ("Oops, parity error, program terminating\\n");
   printf ("Try cleaning the heads!\\n");
   RERAISE;
   }
ENDTRY
.oE
.H 3 "Defining Epilogue Actions for a Block"
.PP
.iX "epilogue actions"
.iX "defining" "epilogue actions"
.iX "exceptions" "defining epilogue actions"
A \*LFINALLY\*O 
mechanism is provided so that multithreaded programs
can restore invariants as certain scopes are unwound; for example, restoring
shared data to a correct state and releasing locks.  This is often the ideal
way to define, in one place, the cleanup activities for normal or abnormal
exit from a block that has changed some invariant.
.PP
Following is an example of specifying an invariant action whether or not
there is an error:
.oS
.ne 15
lock_tape_drive (t);
TRY 
    TRY
       read_tape ();
    CATCH (parity_error)
       printf ("Oops, parity error, program terminating\\n");
       printf ("Try cleaning the heads!\\n");
       RERAISE;
    ENDTRY
    /* Control gets here only if no exception is raised */
    /* ... Now we can use the data off the tape */
FINALLY
    /* Control gets here normally, or if any exception is */
    raised unlock_tape_drive (t);
ENDTRY
.oE
.H 3 "Importing a System-Defined Error Status into the Program as an Exception"
.iX "exceptions" "importing error status"
.PP
Most systems define error messages by integer-sized status values.  Each
status value corresponds to some error message text that should be expressed
in the user's own language.  The capability to import a status value as 
an exception permits the DCE Threads exception-returning interface to raise 
or handle system-defined errors as well as programmer-defined exceptions.
.PP
.ne 3
An example of importing an error status into an exception is as follows:
.oS
exc_set_status (&parity_error, EPARITY);
.oE
.PP
The \*Lparity_error\*O exception can then be raised and handled like 
any other exception.
.H 2 "Rules and Conventions for Modular Use of Exceptions"
.iX "exceptions" "rules for modular use of"
.iX "modular use of exceptions"
.PP
The following rules ensure that exceptions are used in a modular way so
that independent software components can be written without requiring
knowledge of each other:
.ML
.LI
Use unique names for exceptions.
.iX "exceptions" "naming convention for"
.PP
A naming convention makes sure that the names for exceptions that are
declared \*LEXTERN\*O from different modules do not clash.  The following
convention is recommended:
.oS
<facility-prefix>_<error_name>_e
.oE
.PP
For example, \*Lpthread_cancel_e\*O.
.LI
Avoid putting code in a \*LTRY\*O routine that belongs before it.
.PP
.iX "\*LTRY\*O statement"
.iX "\*LFINALLY\*O statement"
.iX "\*LCATCH\*O statement"
.iX "\*LCATCH_ALL\*O statement"
.iX "\*LENDTRY\*O statement"
The \*LTRY\*O only guards statements for which the statements in the 
\*LFINALLY\*O, \*LCATCH\*O, or \*LCATCH_ALL\*O clauses are always valid.
.PP
A common misuse of \*LTRY\*O is to put code in the \*Ltry_block\*O that 
needs to be placed before \*LTRY\*O.  An example of this misuse is as follows:
.oS
TRY
    handle = open_file (file_name);
    /* Statements that may raise an exception here */
FINALLY
    close (handle);
ENDTRY  
.oE
.PP
.ne 13
The preceding \*LFINALLY\*O code assumes that no exception is raised by 
\*Lopen_file\*O.  This is because the code accesses an invalid identifier in 
the \*LFINALLY\*O part if \*Lopen_file\*O is modified to raise an exception. 
The preceding example needs to be rewritten as follows:
.oS
handle = open_file (file_name);
TRY
    {
    /* Statements that may raise an exception here */
    }
FINALLY
    close (handle);
ENDTRY  
.oE
.PP
The code that opens the file belongs prior to \*LTRY\*O, and
the code that closes the file belongs in the
\*LFINALLY\*O statement. (If \*Lopen_file\*O raises exceptions, it may 
need a separate \*Ltry_block\*O.)
.LI
Raise exceptions to their proper scope.
.PP
Write functions that propagate exceptions to their callers so that the
function does not modify any persistent process state before raising the
exception.  A call to the matching \*Lclose\*O 
call is required only if the \*Lopen_file\*O
operation is successful in the current scope.
.PP
If \*Lopen_file\*O raises an exception, the identifier will not be written,
so \*Lopen_file\*O must not require that \*Lclose\*O 
be called when \*Lopen_file\*O raises an exception;
that is, \*Lopen_file\*O should not be part of the 
\*LTRY\*O clause because that 
means \*Lclose\*O is called if \*Lopen_file\*O fails, and you cannot close an 
unopened file.
.LI
Do not place a \*LRETURN\*O or nonlocal \*LGOTO\*O 
between \*LTRY\*O and \*LENDTRY\*O.
.PP
.iX "\*LTRY\*O statement"
.iX "\*LFINALLY\*O statement"
.iX "\*LCATCH\*O statement"
.iX "\*LCATCH_ALL\*O statement"
.iX "\*LENDTRY\*O statement"
It is invalid to use \*LRETURN\*O or \*LGOTO\*O, 
or to leave by any other means, a \*LTRY\*O, 
\*LCATCH\*O, \*LCATCH_ALL\*O, or \*LFINALLY\*O block.  Special code is 
generated by the \*LENDTRY\*O macro, and it must be executed.
.LI
Use the ANSI C volatile attribute.
.PP
Variables that are read or written by exception-handling code must be
declared with the ANSI C volatile attribute.  Run your tests with the
optimize compiler option to ensure that the compiler thoroughly tests your
exception-handling code.
.LI
.ne 7
Reraise exceptions that are not fully handled.
.PP
You need to reraise any exception that you catch, unless 
your handler performs the complete recovery action for the
error.  This rule permits an unhandled exception to propagate to some
final default handler that prints an error message to terminate
the offending thread. (An unhandled exception is an exception for
which recovery is incomplete.)
.PP
A corollary of this rule is that \*LCATCH_ALL\*O handlers must reraise 
the exception because they may catch any exception, and usually cannot do 
recovery actions that are proper for every exception.
.PP
Following this convention is important so that you also do not absorb a
cancel or thread-exit request.  These are mapped into exceptions so that
exception handling has the full power to handle all exceptional conditions
from access violations to thread exit. (In some applications, it is important
to be able to catch these to work around an erroneously written library
package, for example, or to provide a fully fault-tolerant thread.)
.LI
Declare only static exceptions.
.PP
For compatibility with C++, you need to only declare static exceptions.
.LE
.H 2 "DCE Threads Exceptions and Definitions"
.PP
.iX "thread" "exceptions and definitions, table of"
.iX "exceptions" "and definitions, table of"
Table 9-1 lists the DCE Threads exceptions and briefly
explains the meaning of each exception.  Exception names beginning with 
\*Lpthread_\*O are raised as the result of something happening 
internal to the DCE Threads facility and are not meant to be raised 
by your code.  Exceptions beginning with \*Lexc_\*O are generic and belong to 
the exception facility, the underlying system, or both.  The 
pthread-specific extensions are listed followed by the generic 
extensions, each in alphabetical order.
.iX "DCE" "Threads Exceptions" "table of"
.PP
.ne 5i
.TB "DCE Threads Exceptions"
.PP
.ps 11
.vs 13
.TS H
center,allbox,tab(%);
lb | lb
lb | lw(3i).
Exception%Definition
.TH
_
pthread_badparam_e%An improper parameter was used.
pthread_cancel_e%A thread cancellation is in progress.
pthread_defer_q_full_e%T{
No space is currently available to process an interrupt request.
T}
pthread_existence_e%The object referenced does not exist.
pthread_in_use_e%The object referenced is already in use.
pthread_nostackmem_e%T{
No space is currently available to create a new stack.
T}
pthread_notstack_e%T{
The current stack was not created by DCE Threads.
T}
pthread_signal_q_full_e%T{
Unable to process condition signal from interrupt level.
T}
pthread_stackovf_e%An attempted stack overflow was detected.
pthread_unimp_e%This is an unimplemented feature.
pthread_use_error_e%T{
The requested operation is improperly invoked.
T}
exc_decovf_e%T{
An unhandled decimal overflow trap exception occurred.
T}
exc_exquota_e%T{
The operation failed due to an insufficient quota.
T}
exc_fltdiv_e%T{
An unhandled floating-point division by zero trap exception occurred.
T}
exc_fltovf_e%T{
An unhandled floating-point overflow trap exception occurred.
T}
exc_fltund_e%T{
An unhandled floating-point underflow trap exception occurred.
T}
exc_illaddr_e%The data or object could not be referenced.
exc_insfmem_e%T{
There is insufficient virtual memory for the requested operation.
T}
exc_intdiv_e%T{
An unhandled integer divide by zero trap exception occurred.
T}
exc_intovf_e%T{
An unhandled integer overflow trap exception occurred.
T}
exc_nopriv_e%T{
There is insufficient privilege for the requested operation.
T}
_
exc_privinst_e%T{
An unhandled privileged instruction fault exception occurred.
T}
exc_resaddr_e%T{
An unhandled reserved addressing fault exception occurred.
T}
exc_resoper_e%T{
An unhandled reserved operand fault exception occurred.
T}
exc_SIGBUS_e%An unhandled bus error signal occurred.
exc_SIGEMT_e%An unhandled EMT trap signal occurred.
...\" DCE 1.2 WRITER: define EMT trap signal?
exc_SIGFPE_e%T{
An unhandled floating-point exception signal occurred.
T}
exc_SIGILL_e%T{
An unhandled illegal instruction signal occurred.
T}
exc_SIGIOT_e%An unhandled IOT trap signal occurred.
...\" DCE 1.2 WRITER: define IOT trap signal?
exc_SIGPIPE_e%An unhandled broken pipe signal occurred.
exc_SIGSEGV_e%T{
An unhandled segmentation violation signal occurred.
T}
exc_SIGSYS_e%T{
An unhandled bad system call signal occurred.
T}
exc_SIGTRAP_e%T{
An unhandled trace or breakpoint trap signal occurred.
T}
exc_SIGXCPU_e%T{
An unhandled CPU time limit exceeded signal occurred.
T}
exc_SIGXFSZ_e%T{
An unhandled file-size limit exceeded signal occurred.
T}
exc_subrng_e%T{
An unhandled subscript out-of-range trap exception occurred.
T}
exc_uninitexc_e%An uninitialized exception was raised.
.TE
.ps 12
.vs 14
.iX "exception-returning interface"
