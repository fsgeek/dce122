...\"
...\" @OSF_COPYRIGHT@
...\" COPYRIGHT NOTICE
...\" Copyright (c) 1990, 1991, 1992, 1993 Open Software Foundation, Inc.
...\" ALL RIGHTS RESERVED (DCE).  See the file named COPYRIGHT.DCE in the
...\" src directory for the full copyright text.
...\"
...\"
...\" HISTORY
...\" $Log: 1_intro_dts.gpsml,v $
...\" Revision 1.1.8.2  1996/03/27  13:15:14  wardr
...\" 	{edit R1.2.1}
...\" 	More Release Edits
...\" 	[1996/03/27  13:14:55  wardr]
...\"
...\" Revision 1.1.8.1  1996/03/21  20:38:00  wardr
...\" 	{edit R1.2.1}
...\" 	Release Edits
...\" 	[1996/03/21  20:37:44  wardr]
...\" 
...\" Revision 1.1.6.10  1995/06/07  14:36:36  rcb
...\" 	PRENTICE HALL reformat; final edits and changes
...\" 	[1995/06/05  19:53:55  rcb]
...\" 
...\" 	PRENTICE HALL reformat
...\" 	[1995/05/01  19:34:57  rcb]
...\" 
...\" 	incorporated 1.1 edits
...\" 	[1995/05/01  19:10:50  rcb]
...\" 
...\" Revision 1.1.6.9  1994/11/03  23:33:56  neilson
...\" 	Substituted macros for book names in cross refs.
...\" 	[1994/11/03  01:38:52  neilson]
...\" 
...\" 	Substituted macros for book names in cross refs.
...\" 
...\" Revision 1.1.6.8  1994/10/27  00:22:17  jshirley
...\" 	Minor edits.
...\" 	[1994/10/27  00:22:03  jshirley]
...\" 
...\" Revision 1.1.6.7  1994/10/21  00:22:16  jshirley
...\" 	Fixed cross refs. and table problem.
...\" 	[1994/10/21  00:21:37  jshirley]
...\" 
...\" Revision 1.1.6.6  1994/03/14  22:00:36  rom
...\" 	{enh, 10129, R1.1}
...\" 	Fix pathnames of included files for new three-book organization.
...\" 	[1994/03/14  21:20:11  rom]
...\" 
...\" Revision 1.1.6.5  1993/02/03  20:29:28  buckler
...\" 	Changed .P! to .pI and added Postscript boundary boxes
...\" 	[1993/02/03  20:28:47  buckler]
...\" 
...\" Revision 1.1.6.4  1993/01/28  18:41:51  cjd
...\" 	Embedded copyright notice
...\" 	[1993/01/28  18:01:23  cjd]
...\" 
...\" Revision 1.1.6.3  1993/01/07  16:50:09  buckler
...\" 	Bug 5335:  Changed ISO acronym expansion from "International Standards
...\" 	Organization" to "International Organization for Standardization".
...\" 	Also changed an index entry to conform with this expansion.
...\" 	[1993/01/07  16:44:26  buckler]
...\" 
...\" Revision 1.1.6.2  1992/11/20  19:20:49  weir
...\" 	Moved into 1.0.2doc tree
...\" 	[1992/11/20  19:16:47  weir]
...\" 
...\" Revision 1.1.4.6  1992/11/11  23:47:33  buckler
...\" 	Corrected index entries
...\" 	[1992/11/11  22:50:59  buckler]
...\" 
...\" Revision 1.1.4.5  1992/11/06  19:59:08  lmk
...\" 	Prentice-Hall index edits only
...\" 	[1992/11/06  19:57:55  lmk]
...\" 
...\" Revision 1.1.4.4  1992/10/10  15:46:01  casey
...\" 	Index changes for PH
...\" 	[1992/10/10  15:36:02  casey]
...\" 
...\" Revision 1.1.4.3  1992/10/08  16:45:00  lmk
...\" 	Prentice-Hall final edits only
...\" 	[1992/10/08  15:04:18  lmk]
...\" 
...\" Revision 1.1.4.2  1992/09/18  19:44:24  oaf
...\" 	*** empty log message ***
...\" 
...\" Revision 1.1.3.2  1992/09/18  19:43:00  oaf
...\" 	updated, moved to dce1.0.1PHdoc.
...\" 
...\" Revision 1.1.2.6  1992/07/17  14:24:14  weir
...\" 	Fixed faulty .zA/.zZ macro coding.
...\" 	[1992/07/17  14:23:50  weir]
...\" 
...\" Revision 1.1.2.5  1992/06/17  16:57:15  h_hoff
...\" 	Affected doc: App_gd, pp 36-3, 36-4, 36-5, examples
...\" 
...\" 	1. CR2183 -- pp 36-3, 1st example: Changed 'infinite' to 'unspecified.'
...\" 	2. CR2183 -- pp 36-3, 3rd example: Changed 'infinite' to 'unspecified.'
...\" 	3. CR2183 -- pp 36-3, 4th example: Changed 'infinite' to 'unspecified.'
...\" 	4. CR2183 -- pp 36-4, 1st example: Changed 'infinite' to 'unspecified.'
...\" 	[1992/06/17  15:13:10  h_hoff]
...\" 
...\" Revision 1.1.2.4  1992/06/05  12:57:40  h_hoff
...\" 	1. CR2843 -- pp 36-2, para 4: Changed 'Local time is UTC minus the TDF' to
...\" 	                'Local time is UTC plus the TDF'.
...\" 
...\" 	2. CR2843 -- pp 36-9: Changed of a binary relative time' to 'of a binary
...\" 	                relative timestamp'.
...\" 
...\" 	3. CR2843 -- pp 36-10, utc_binreltime: Change wording for clarity
...\" 
...\" 	4. CR2843 -- pp 36-10, utc_gmtzone:  Change wording to delete offset reference
...\" 
...\" 	5. CR2843 -- pp 36-11, utc_spantime: Correct for clarity
...\" 
...\" 	6. CR2843 -- pp 36-11, utc_subtime: Correct for clarity
...\" 	[1992/06/05  12:56:26  h_hoff]
...\" 
...\" Revision 1.1.2.2  1992/05/14  13:14:15  h_hoff
...\" 	The following files have been fixed, Postscript proofed, and verified as
...\" 	specified in CR2843:
...\" 
...\" 	  Submitted by Heinz A. Hoffmann - DOC; User name: h_hoff
...\" 	  Date: 5/14/92
...\" 	  Number of files: 1.
...\" 
...\" 	1, 1_intro_dts.gpsml, pp 1-10, utc_binreltime: CR2843 -- Change wording
...\" 	for clarity
...\" 
...\" 	2. 1_intro_dts.gpsml, pp 1-10, utc_gmtzone: CR2843 -- Change wording to delete
...\" 	offset reference
...\" 
...\" 	3. 1_intro_dts.gpsml, pp 1-11, utc_spantime, utc_subtime: CR2843 -- Correct
...\" 	for clarity
...\" 	[1992/05/14  13:12:56  h_hoff]
...\" 
...\" Revision 1.1  1992/01/29  16:06:14  damon
...\" 	Initial revision
...\" 
...\" $EndLog$
...\"
...\" (c) Copyright 1991, Open Software Foundation, Inc.  ALL RIGHTS RESERVED
...\"   HISTORY COMMENTS:
...\"
...\"   DATE:                            COMMENT:
...\"
...\"	Fri Oct 25, 1991                 Initial File Submission for final
...\"                                    integration at IBM
...\"
...\" ********************************************************************
...\"                                                                    *
...\" COPYRIGHT (c) 1991 BY DIGITAL EQUIPMENT CORPORATION,               *
...\" Maynard, Mass.                                                     *
...\"                                                                    *
...\" This document is furnished under a license and may be used and     *
...\" copied only in accordance with the terms of such license and with  *
...\" the inclusion of the above copyright notice.  No title to or       *
...\" ownership of the document is hereby transferred.                   *
...\"                                                                    *
...\" The information in this document is subject to change without      *
...\" notice and should not be construed as a commitment by Digital      *
...\" Equipment Corporation.                                             *
...\"                                                                    *
...\" ********************************************************************
.H 1 "Introduction to the Distributed Time Service API"
.PP
.iX "-: DTS, time structures" "time structures"
.iX "DTS" "routines"
This chapter describes the DCE Distributed Time Service (DTS) programming
routines.  You can use these routines to obtain timestamps that are based on
Coordinated Universal Time (UTC).  You can also use the DTS routines to
translate among different timestamp formats and perform calculations on
timestamps.  Applications can use the timestamps that DTS supplies to determine
event sequencing, duration, and scheduling.  Applications can call the DTS
routines from any host that has the \*Llibdce\*O.  The \*Ldtsd\*O need
not be running.
.PP
DTS routines are written in the C programming language.
You should be familiar with basic DTS concepts before you attempt to use
the application programming interface (API).  The DTS chapters of the
\*(Ac provide conceptual information about DTS.
.PP
The DTS API routines offer the following basic functions:
.ML
.LI
Retrieving timestamp information
.LI
Converting between binary timestamps that use different time structures
.LI
Converting between binary timestamps and ASCII representations
.LI
Converting between UTC time and local time
.LI
Manipulating binary timestamps
.LI
Comparing two binary time values
.LI
Calculating binary time values
.LI
Obtaining time zone information
.LE
.PP
The sections that follow describe how DTS represents time, discuss the DTS time
structures, discuss the
DTS API header files, and briefly describe the DTS API routines.
.H 2 "DTS Time Representation"
.PP
.iX "time representation"
.iX "UTC"
.iX "Coordinated Universal Time"
.iX "BIH"
.iX "International Time Bureau"
.iX "Greenwich Mean Time (GMT)"
.iX "ASCII text strings" "binary timestamps translated to"
UTC is the international time standard that has
largely replaced Greenwich Mean Time (GMT).  The standard is administered by the
International Time Bureau (BIH) and is widely used.  DTS uses opaque binary
timestamps that represent UTC for all of its internal processes.  You cannot
read or disassemble a DTS binary timestamp; the DTS API allows applications to
convert or manipulate timestamps, but they cannot be displayed.  DTS also
translates the binary timestamps into ASCII text strings, which can be
displayed.
.H 3 "Absolute Time Representation"
.PP
An absolute time is a point on a time scale. For DTS, absolute
.gL "absolute time"
times reference the UTC time scale; absolute time measurements are derived from
system clocks or external time-providers.  When DTS reads a system clock
time, it records the time in an opaque binary timestamp that also includes the
inaccuracy and other information.  When you display an absolute time, DTS
converts the time to ASCII text as shown in the following display:
.oS
1990-11-21-13:30:25.785-04:00I000.082
.oE
.PP
.iX "-[" "ISO format"
.iX "-: ISO" "International Organization for Standardization"
DTS displays all times in a format that complies with the International
Organization for Standardization (ISO) 8601 (1988) standard. 
Note that the inaccuracy
portion of the time is not defined in the ISO standard; times that do not
include an inaccuracy are accepted.
.P
.ne 3i
Figure 20-1 explains the ISO format that generated the previous display.
.PP
.FG "ISO Format for Time Displays"
.pI ../dts/figures/1_iso_format_10_dts.ps 0 0 1
...\" sourcefile = 1_iso_format_10_dts.gra scaled to 80%
.sp .5
.PP
.iX "TDF"
.iX "time differential factor"
.iX "inaccuracy, specifying ISO"
In this figure, the relative time preceded by the \*L+\*O (plus) 
or \*L\-\*O (minus) character indicates the hours and minutes that 
the calendar date and time are
offset from UTC. The presence of this time differential factor (TDF)
.gL "Time Differential Factor"
in the string also indicates that the calendar date and time are the local
time of the system, not UTC. Local time is UTC plus the TDF. The Inaccuracy
(\*LI\*O) designator indicates the beginning of the inaccuracy component
associated with the time.
.PP
Although DTS displays all times in the previous format, variations to the
ISO format shown in Figure 20-2 are also accepted as input for the
ASCII conversion routines.
.PP
.FG "Variations to the ISO Time Format"
.pI ../dts/figures/1_iso_variant_20_dts.ps 0 0 1
...\"sourcefile = 1_iso_variant_20_dts.gra scaled to 80%
.sp .5
.PP
.iX "-]" "ISO format"
.ne 3
In this figure, the Time (\*LT\*O) designator separates the
calendar date from the time, a \*L,\*O (comma) separates seconds from fractional
seconds, and the \*L+\*O or \*L\-\*O indicates the beginning of the
inaccuracy component.
.PP
The following examples show some valid time formats.
.PP
The following represents July 4, 1776 17:01 GMT and an unspecified inaccuracy
(default):
.oS
1776-7-4-17:01:00
.oE
.PP
The following represents a local time of 12:01 (17:01 GMT) on July 4, 1776
with a TDF of \-5 hours and an inaccuracy of 100 seconds:
.oS
1776-7-4-12:01:00-05:00I100
.oE
.PP
Both of the following represent 12:00 GMT in the current day, month, and year
with an unspecified inaccuracy:
.oS
12:00 and T12
.oE
.PP
The following represents July 14, 1792 00:00 GMT with an unspecified
inaccuracy:
.oS
1792-7-14
.oE
.H 3 "Relative Time Representation"
.PP
.iX "time" "relative"
.iX "relative time"
A relative time is a discrete time interval that is usually added to
.gL "relative time"
or subtracted from another time.  A TDF associated with an absolute time is one
example of a relative time.  A relative time is normally used as input for
commands or system routines.
.PP
.ne 2.5i
Figure 20-3 shows the full syntax for a relative time.
.PP
.FG "Full Syntax for a Relative Time"
.pI ../dts/figures/1_reltime_format_30_dts.ps 0 0 1
...\"sourcefile = 1_reltime_format_30_dts.gra scaled to 80%
.sp .5
.PP
The following example shows a relative time of 21 days, 8 hours, and 30
minutes, 25 seconds with an inaccuracy of 0.300 seconds:
.oS
21-08:30:25.000I00.300
.oE
.PP
The following example shows a negative relative time of 20.2 seconds with an
unspecified inaccuracy (default):
.oS
-20.2
.oE
.PP
The following example shows a relative time of 10 minutes, 15.1 seconds with an
inaccuracy of 4 seconds:
.oS
10:15.1I4
.oE
.PP
.iX "relative time"
Notice that a relative time does not use the calendar date fields, since these
fields concern absolute time.  A positive relative time is unsigned; a negative
relative time is preceded by a \*L\-\*O (minus) sign.  A relative time is often
subtracted from or added to another relative or absolute time.  Relative times
that DTS uses internally are opaque binary timestamps.  The DTS API offers
several routines that can be used to calculate new times by use of
relative binary timestamps.
.H 4 "Representing Periods of Time"
.PP
A given duration of a period of time can be represented by a data element of
variable length that uses the syntax shown in Figure 20-4.
.PP
.ne 2i
.FG "Syntax for Representing a Duration"
.pI ../dts/figures/1_periodtime_format_40_dts.ps 0 0 1
...\"sourcefile = 1_periodtime_format_40_dts.gra scaled to 80%
.H 4 "The Data Element Parts"
.PP
The data element contains the following parts:
.ML
.LI
The designator \*LP\*O precedes the part that includes the calendar
components, including the following:
.ML
.LI
The number of years followed by the designator \*LY\*O
.LI
The number of months followed by the designator \*LM\*O
.LI
The number of weeks followed by the designator \*LW\*O
.LI
The number of days followed by the designator \*LD\*O
.LE
.LI
The \*LT\*O designator precedes the part that includes the time components,
including the following:
.ML
.LI
The number of hours followed by the designator \*LH\*O
.LI
The number of minutes followed by the designator \*LM\*O
.LI
The number of seconds followed by the designator \*LS\*O
.LE
.LI
The designator \*LI\*O precedes the number of seconds of inaccuracy.
.LE
.PP
The following example represents a period of 1 year, 6 months, 15 days, 11
hours, 30 minutes, and 30 seconds and an unspecified inaccuracy:
.oS
.ne 3
P1Y6M15DT11H30M30S
.oE
.PP
The following example represents a period of 3 weeks and an inaccuracy of 4
seconds:
.oS
P3WI4
.oE
.H 2 "Time Structures"
.PP
.iX "DTS" "time structures"
DTS can convert among several types of binary time structures that are
based on different base dates and time unit measurements.
DTS uses UTC-based time structures and can convert other types of
time structures to its own presentation of UTC-based time.
The DTS API routines are used to perform these conversions for
applications on your system.
.PP
Table 20-1 lists the absolute time structures that the DTS API uses
to modify binary times for applications.
...\"
...\"  \*LAbsolute time\*O is a point on a time scale, such as
...\"  1970-01-01-00:00:00.000+00:00I000.000.  For DTS, absolute
...\"  times reference the UTC standard.
.P
.TB "Absolute Time Structures"
.ps 11
.vs 13
.TS
center, box, tab(%);
lb | lb | lb | lb
lb | l | l | l.
Structure%Time Units%Base Date%Approximate Range
=
utc%100-nanosecond%15 October 1582%A.D. 1 to A.D. 30,000
tm%second%1 January 1900%A.D. 1 to A.D. 30,000
timespec%nanosecond%1 January 1970%A.D. 1970 to A.D. 2106
.TE
.ps 12
.vs 14
.PP
Table 20-2 lists the relative time structures that the DTS API uses
to modify binary times for applications.
...\"
...\"  \*LRelative time\*O is a discrete time interval that is usually
...\"  added to or subtracted from an absolute time.  For example,
...\"  2 days, 2 hours, and 22 minutes, 22 seconds with an inaccuracy of 0.222
...\"  seconds.
...\"
.iX "DTS" "relative time structures"
.TB "Relative Time Structures"
.TS
center, box, tab(%);
lb | lb | lb
lb | l | l.
Structure%Time Units%Approximate Range
=
utc%100-nanosecond%+/- 30,000 years
tm%second%+/- 30,000 years
reltimespec%nanosecond%+/- 68 years
.TE
.PP
The remainder of this section explains the DTS time structures in detail.
.H 3 "The utc Structure"
.PP
.iX "DTS" "time structures" 
.iX "Binary Timestamps"
UTC is useful for measuring time across local time
zones and for avoiding the seasonal changes (summer time or daylight savings
time) that can affect the local time.  DTS uses 128-bit binary numbers to
represent time values internally; throughout this guide, these binary numbers
representing time values are referred to as \*Ebinary timestamps\*O.
.gL "binary timestamps"
The DTS \*Lutc\*O structure determines the ordering of the bits in a binary
timestamp; all binary timestamps that are based on the \*Lutc\*O structure
contain the following information:
.ML
.LI
The count of 100-nanosecond units since 00:00:00.00, 15 October 1582 (the date
of the Gregorian reform to the Christian calendar)
.LI
The count of 100-nanosecond units of inaccuracy applied to the
preceding item
.LI
The TDF, expressed as the signed quantity
.LI
The DTS version number
.LE
.PP
The binary timestamps that are derived from the DTS \*Lutc\*O structure have
an opaque format.  This format is a cryptic character sequence that DTS uses
and stores internally.  The opaque binary timestamp is designed for use in
programs, protocols, and databases.
.nS note
Applications use the opaque binary timestamps when storing time values or when
passing them to DTS.
.nE
.PP
The API provides the necessary routines for converting between opaque binary
timestamps and character strings that can be displayed and read by users.
.H 3 "The tm Structure"
.PP
.iX "DTS" "time structures" 
.iX "time.h header file"
The \*Ltm\*O structure is based on the time in years, months, days, hours,
minutes, and seconds since 00:00:00 GMT (Greenwich Mean Time), 1 January 1900.
The \*Ltm\*O structure is defined in the \*Ltime.h\*O header file.
.PP
.iX "tm time structures"
The \*Ltm\*O structure declaration follows:
.oS
.ne 12
struct tm {
     int tm_sec;    /* Seconds (0 - 59)                   */
     int tm_min;    /* Minutes (0 - 59)                   */
     int tm_hour;   /* Hours (0 - 23)                     */
     int tm_mday;   /* Day of Month (1 - 31)              */
     int tm_mon;    /* Month of Year (0 - 11)             */
     int tm_year;   /* Year - 1900                        */
     int tm_wday;   /* Day of Week (Sunday = 0)           */
     int tm_yday;   /* Day of Year (0 - 364)              */
     int tm_isdst;  /* Nonzero if Daylight Savings Time   */
                    /*  is in effect                      */
          };
.oE
.PP
Not all of the \*Ltm\*O structure fields are used for each routine that
converts between \*Ltm\*O structures and \*Lutc\*O structures.
(See the parameter descriptions contained in the reference pages
in the \*(Dr for additional
information about which fields are used for specific routines.)
.H 3 "The timespec Structure"
.PP
.iX "DTS" "time structures" 
The \*Ltimespec\*O structure is normally used in combination with
or in place of the \*Ltm\*O structure to provide finer resolution
for binary times.  The \*Ltimespec\*O structure is similar to the
\*Ltm\*O structure, but the \*Ltimespec\*O structure
specifies the number of seconds and nanoseconds since the base time of
00:00:00 GMT, 1 January 1970.
.iX "dce/utc.h header file"
You can find the structure in the \*Ldce/utc.h\*O header file.
.PP
The \*Ltimespec\*O structure declaration follows:
.oS
struct timespec {
   time_t  tv_sec;       /*  Seconds since 00:00:00 GMT,  */
                         /*   1 January 1970              */
   long    tv_nsec;      /*  Additional nanoseconds since */
                         /*   tv_sec                      */
             }    timespec_t;
.oE
.H 3 "The reltimespec Structure"
.PP
.iX "DTS" "time structures" 
The \*Lreltimespec\*O structure represents relative time.  This
structure is similar to the \*Ltimespec\*O structure, except that
the first field is \*Vsigned\*O in the \*Lreltimespec\*O
structure. (The field is \*Vunsigned\*O in the
\*Ltimespec\*O structure.)
You can find the \*Lreltimespec\*O structure in the \*Ldce/utc.h\*O
header file.
.PP
The \*Lreltimespec\*O structure declaration follows:
.oS
struct reltimespec {
         time_t tv_sec;   /*  Seconds of relative time    */
         long   tv_nsec;  /*  Additional nanoseconds of   */
                          /*   relative time              */
              }   reltimespec_t;
.oE
.H 2 "DTS API Header Files"
.PP
The \*Ltime.h\*O and \*Ldce/utc.h\*O header files contain the
data structures, type definitions, and define statements that are referenced by
the DTS API routines.  The \*Ltime.h\*O header file is a standard UNIX file.
The \*Ldce/utc.h\*O header file includes
\*Ltime.h\*O and contains the \*Ltimespec\*O, \*Lreltimespec\*O, and
\*Lutc\*O structures.
.PP
These header files are located in \*L/usr/include/dce\*O.
.nL
.ne 20
.H 2 "DTS API Routine Functions"
.PP
Figure 20-5 categorizes the DTS portable interface routines by function.
.P
.ne 6i
.FG "DTS API Routines Shown by Functional Grouping"
.pI ../dts/figures/1_routines_by_function_50_dts.ps 0 0 1
...\"sourcefile = 1_routines_by_function_50_dts.gra scaled to 80%
...\"             a.k.a. routines_by_function.gra
.sp .5
.PP
An alphabetical listing of the DTS portable interface routines and a brief
description of each one follows:
.ML
.LI
.ne 3
\*Lutc_abstime\*O
.P
Computes the absolute value of a binary relative timestamp
.LI
\*Lutc_addtime\*O
.P
Computes the sum of two binary timestamps; the timestamps can be two relative
times or a relative time and an absolute time
.LI
\*Lutc_anytime\*O
.P
Converts a binary timestamp into a \*Ltm\*O structure by using the TDF
information contained in the timestamp to determine the TDF returned with the
\*Ltm\*O structure
.LI
\*Lutc_anyzone\*O
.P
Gets the time zone label and offset from GMT by using the TDF contained in the
input \*Lutc\*O
.LI
\*Lutc_ascanytime\*O
.P
Converts a binary timestamp into an ASCII string that represents an arbitrary
time zone
.LI
\*Lutc_ascgmtime\*O
.P
Converts a binary timestamp into an ASCII string that expresses a GMT time
.LI
\*Lutc_asclocaltime\*O
.P
Converts a binary timestamp to an ASCII string that represents a local time
.LI
\*Lutc_ascreltime\*O
.P
Converts a binary timestamp that expresses a relative time to its ASCII
representation
.LI
\*Lutc_binreltime\*O
.P
Converts a relative binary timestamp into two \*Ltimespec\*O structures that
express relative time and inaccuracy
.LI
\*Lutc_bintime\*O
.P
Converts a binary timestamp into a \*Ltimespec\*O structure
.LI
\*Lutc_boundtime\*O
.P
Given two UTC times, one before and one after an event, returns a single
UTC time whose inaccuracy includes the event
.LI
\*Lutc_cmpintervaltime\*O
.P
Compares two binary timestamps or two relative binary timestamps
.LI
\*Lutc_cmpmidtime\*O
.P
Compares two binary timestamps or two relative binary timestamps, ignoring
inaccuracies
.LI
\*Lutc_gettime\*O
.P
Returns the current system time and inaccuracy as an opaque binary timestamp
.LI
\*Lutc_getusertime\*O
.P
Returns the time and process-specific TDF, rather than the system-specific TDF
.LI
\*Lutc_gmtime\*O
.P
Converts a binary timestamp into a \*Ltm\*O structure that expresses GMT or
the equivalent UTC
.LI
\*Lutc_gmtzone\*O
.P
Gets the time zone label, given \*Lutc\*O
.LI
\*Lutc_localtime\*O
.P
Converts a binary timestamp into a \*Ltm\*O structure that expresses local
time
.LI
\*Lutc_localzone\*O
.P
Gets the time zone label and offset from GMT, given \*Lutc\*O
.LI
\*Lutc_mkanytime\*O
.P
Converts a \*Ltm\*O structure and TDF (expressing the time in an arbitrary
time zone) into a binary timestamp
.LI
\*Lutc_mkascreltime\*O
.P
Converts a null-terminated character string, which represents a relative
timestamp, to a binary timestamp
.LI
\*Lutc_mkasctime\*O
.P
Converts a null-terminated character string, which represents an absolute
timestamp, to a binary timestamp
.LI
\*Lutc_mkbinreltime\*O
.P
Converts a \*Ltimespec\*O structure expressing a relative time to a binary
timestamp
.LI
\*Lutc_mkbintime\*O
.P
Converts a \*Ltimespec\*O structure into a binary timestamp
.LI
\*Lutc_mkgmtime\*O
.P
Converts a \*Ltm\*O structure that expresses GMT or UTC to a binary timestamp
.LI
\*Lutc_mklocaltime\*O
.P
Converts a \*Ltm\*O structure that expresses local time to a binary timestamp
.LI
\*Lutc_mkreltime\*O
.P
Converts a \*Ltm\*O structure that expresses relative time to a binary
timestamp
.LI
\*Lutc_mulftime\*O
.P
Multiplies a relative binary timestamp by a floating-point value
.LI
\*Lutc_multime\*O
.P
Multiplies a relative binary timestamp by an integer factor
.LI
\*Lutc_pointtime\*O
.P
Converts a binary timestamp to three binary timestamps that represent the
earliest, most likely, and latest time
.LI
\*Lutc_reltime\*O
.P
Converts a binary timestamp that expresses a relative time into a \*Ltm\*O
structure
.LI
\*Lutc_spantime\*O
.P
Given two (possibly unordered) binary timestamps, returns a single UTC time
interval whose inaccuracy spans the two input timestamps
.LI
\*Lutc_subtime\*O
.P
Computes the difference between two binary timestamps that express either
an absolute time and a relative time, two relative times, or two absolute
times
.LE
