...\"
...\" @OSF_COPYRIGHT@
...\" COPYRIGHT NOTICE
...\" Copyright (c) 1990, 1991, 1992, 1993 Open Software Foundation, Inc.
...\" ALL RIGHTS RESERVED (DCE).  See the file named COPYRIGHT.DCE in the
...\" src directory for the full copyright text.
...\"
...\"
...\" HISTORY
...\" $Log: 2_tpi_dts.gpsml,v $
...\" Revision 1.1.8.1  1996/03/27  13:15:15  wardr
...\" 	{edit R1.2.1}
...\" 	More Release Edits
...\" 	[1996/03/27  13:14:57  wardr]
...\"
...\" Revision 1.1.6.10  1995/06/07  14:36:48  rcb
...\" 	PRENTICE HALL reformat; final edits and changes
...\" 	[1995/06/05  19:54:00  rcb]
...\" 
...\" 	PRENTICE HALL reformat
...\" 	[1995/05/01  20:43:21  rcb]
...\" 
...\" 	incorporated 1.1 edits
...\" 	[1995/05/01  20:05:07  rcb]
...\" 
...\" Revision 1.1.6.9  1994/11/03  23:34:05  neilson
...\" 	Substituted macros for book names in cross refs.
...\" 	[1994/11/03  01:38:54  neilson]
...\" 
...\" 	Substituted macros for book names in cross refs.
...\" 
...\" Revision 1.1.6.8  1994/10/21  00:22:20  jshirley
...\" 	Fixed cross refs.
...\" 	[1994/10/21  00:22:00  jshirley]
...\" 
...\" Revision 1.1.6.7  1994/10/19  21:55:39  neilson
...\" 	Automatic fix to mistake in .zA-.zZ
...\" 	[1994/10/19  21:54:45  neilson]
...\" 
...\" Revision 1.1.6.6  1994/07/13  13:08:28  jshirley
...\" 	{def,10220,R1.1} Remove reference to rpcd and sec_clientd
...\" 	[1994/07/13  13:08:02  jshirley]
...\" 
...\" Revision 1.1.6.5  1994/03/14  22:00:38  rom
...\" 	{enh, 10129, R1.1}
...\" 	Fix pathnames of included files for new three-book organization.
...\" 	[1994/03/14  21:20:13  rom]
...\" 
...\" Revision 1.1.6.4  1993/02/03  20:29:34  buckler
...\" 	Changed .P! to .pI and added Postscript boundary boxes
...\" 	[1993/02/03  20:28:54  buckler]
...\" 
...\" Revision 1.1.6.3  1993/01/28  18:41:58  cjd
...\" 	Embedded copyright notice
...\" 	[1993/01/28  18:01:30  cjd]
...\" 
...\" Revision 1.1.6.2  1992/11/20  19:20:59  weir
...\" 	Moved into 1.0.2doc tree
...\" 	[1992/11/20  19:18:11  weir]
...\" 
...\" Revision 1.1.4.5  1992/11/11  23:47:41  buckler
...\" 	Corrected index entries
...\" 	[1992/11/11  22:51:09  buckler]
...\" 
...\" Revision 1.1.4.4  1992/10/10  15:46:10  casey
...\" 	Index changes for PH
...\" 	[1992/10/10  15:36:10  casey]
...\" 
...\" Revision 1.1.4.3  1992/10/08  16:45:05  lmk
...\" 	Prentice-Hall final edits only
...\" 	[1992/10/08  15:04:26  lmk]
...\" 
...\" Revision 1.1.4.2  1992/09/18  19:44:32  oaf
...\" 	*** empty log message ***
...\" 
...\" Revision 1.1.3.2  1992/09/18  19:43:15  oaf
...\" 	updated, moved to dce1.0.1PHdoc.
...\" 
...\" Revision 1.1.2.3  1992/05/27  20:35:43  h_hoff
...\" 	CR3724 -- Corrected build faults
...\" 	[1992/05/26  18:58:09  h_hoff]
...\" 
...\" Revision 1.1.2.2  1992/05/14  13:25:25  h_hoff
...\" 	The following files have been fixed, Postscript proofed, and verified as
...\" 	specified in CR2843:
...\" 
...\" 	  Submitted by Heinz A. Hoffmann - DOC; User name: h_hoff
...\" 	  Date: 5/11/92
...\" 	  Number of files: 1.
...\" 
...\" 	1. 2_tpi_dts.gpsml, pp 2-4 "TPstatus" and "timeOut:" 2843 -- Correct for
...\" 	clarity
...\" 
...\" 	2. 2_tpi_dts.gpsml, pp 2-6, time-provider example: CR2843 -- Correct for
...\" 	clarity
...\" 
...\" 	3. 2_tpi_dts.gpsml, pp 2-8 time-provider example: CR2843 -- Correct
...\" 	technical error, change "timestamp six" to "timestamp K_MAX_TIMESTAMP"
...\" 
...\" 	4. 2_tpi_dts.gpsml, pp 2-10, step 4:  CR2843 -- Add rpcd reference
...\" 
...\" 	5. 2_tpi_dts.gpsml, pp 2-14, admin guide reference: CR2843 -- Complete
...\" 	sentence by adding time-providers.
...\" 	[1992/05/14  13:24:01  h_hoff]
...\" 
...\" Revision 1.1  1992/01/29  16:06:17  damon
...\" 	Initial revision
...\" 
...\" $EndLog$
...\"
...\" (c) Copyright 1991, Open Software Foundation, Inc.  ALL RIGHTS RESERVED
...\"   HISTORY COMMENTS:
...\"
...\"   DATE:                            COMMENT:
...\"
...\"	Fri Oct 25, 1991                 Initial File Submission for final
...\"                                    integration at IBM
...\"
...\" ********************************************************************
...\"                                                                    *
...\" COPYRIGHT (c) 1991 BY DIGITAL EQUIPMENT CORPORATION,               *
...\" Maynard, Mass.                                                     *
...\"                                                                    *
...\" This document is furnished under a license and may be used and     *
...\" copied only in accordance with the terms of such license and with  *
...\" the inclusion of the above copyright notice.  No title to or       *
...\" ownership of the document is hereby transferred.                   *
...\"                                                                    *
...\" The information in this document is subject to change without      *
...\" notice and should not be construed as a commitment by Digital      *
...\" Equipment Corporation.                                             *
...\"                                                                    *
...\" ********************************************************************
.H 1 "Time-Provider Interface"
.PP
.iX "Time-Provider" "interface"
.iX "TPI"
This chapter describes the Time-Provider Interface (TPI) for DCE Distributed
Time Service software.  The chapter provides a brief overview of the TPI,
explains how to use external time-providers with DTS, and describes the
data structures and message protocols that make up the TPI.
.PP
.iX "UTC"
Coordinated Universal Time (UTC) is widely used and is disseminated
throughout the world by various standards organizations.  Several
manufacturers supply devices that can acquire UTC time values via radio,
satellite, or telephone.  These devices can then provide standardized
time values to computer systems.  Normally, one device is connected to a
computer system; the device runs a process that interprets signals and
translates them to time values, which can either be displayed or be
provided to the server process running on the connected system.
.PP
.iX "Time-Provider" "interface"
To synchronize its system clock with UTC using an external time-provider
device, a DTS server needs a software interface to the device to periodically
obtain UTC. In effect, this interface serves as an intermediary between the
DTS server and external time-provider processes.  The DTS server requires the
interface to obtain UTC time values and to determine the associated inaccuracy
of each value.  The interface between the DTS server process and the
time-provider process is called the \*ETime-Provider Interface\*O.
.PP
.ne 3
The remainder of this chapter describes the TPI and its attendant processes
in detail.  The following section describes the control flow between the
DTS server process, the TPI, and the time-provider process.
.H 2 "General TPI Control Flow"
.PP
.iX "TPI Control Flow"
.iX "TPI Control Flow"
When you use a time-provider with a system running DTS, the external
time-provider is implemented as an independent process that communicates
with a DTS server process through remote procedure calls (RPCs).  A
remote procedure call is a synchronous request and response
.gL "remote procedure call"
between a main calling program and a procedure executing in another process.
RPC applications are based on the client/server model.  In this context, the
following processes act as the client and server components in the RPC-based
application:
.iX "client" "and server components"
.ML
.LI
The DTS daemon is the client.
.LI
The Time-Provider process (TP process) is the server.
.LE
.PP
Both the RPC-client (DTS daemon) and the server (TP process) must be running
on the same system.
.PP
.iX "IDL" "file"
.iX "file" "IDL"
Applications running on RPC communicate through an interface that is well
known to both the client and the server.  The RPC interface consists of a
set of procedures, data types, and constants that describe how a client
can invoke a routine running on the server.  The server offers the interface
to the clients through the Interface Definition Language (IDL) file.
.PP
The IDL file defines the syntax for an operation, including the following:
.ML
.LI
The name of the operation
.LI
The data type of the value that the operation returns (if any)
.LI
The order and data types of the operation's parameters (if any)
.LE
.PP
.iX "ContactProvider" "remote procedure call"
The TP process offers two procedures that DTS calls to obtain time
values.  These procedures are \*LContactProvider\*O and
\*LServerRequestProviderTime\*O.
.PP
At each system synchronization, DTS makes the initial remote procedure call
(\*LContactProvider\*O) to a TP process that is assumed to be running on the
same node.
.PP
.ne 3
If the TP process is active, the RPC call returns the following arguments:
.ML
.LI
A successful communication status message
.LI
A control message that DTS uses for further processing
.LE
.PP
If the TP process is not active, the RPC call either returns a
communication status failure or a time\-out occurs.
DTS then synchronizes with other servers instead of with the external
time-provider.
.PP
If the initial call (\*LContactProvider\*O) is successful, DTS makes a second
call (\*LServerRequestProviderTime\*O) to retrieve the timestamps from the
external time-provider.  The control message sent by the TP process in the
first RPC call specifies the length of time DTS waits for the RPC call to
complete.  The TP process returns the following parameters in the procedure call:
.ML
.LI
A communication status message.
.LI
A time structure that contains timestamps collected from the external
time-provider. (DTS then uses these timestamps to complete its synchronization.)
.LE
.PP
Figure 21-1 illustrates the RPC calling sequence between DTS and the
TP process.
Note that solid black lines represent the path followed by input
parameters; dashed lines represent the path followed by output
parameters and return values.
.PP
The following steps describe the process shown in Figure 21-1:
.iX "TP stub"
.iX "runtime" "RPC library"
.iX "RPC" "runtime" "library"
.AL
.LI
...\" .cS
...\"  "\h'.09i'\s-2\*L1\*O\s+2\h'-.11i'\v'-.05i'\D'c .15i'\v'.05i'\h'-.09i'"
...\"  THE PREVIOUS LINE GIVES A CIRCLED NUMBER - NOT USED HERE.
...\" .cE
At synchronization time, DTS calls the \*LContactProvider\*O remote procedure.
Input parameters are passed to the TP client stub, dispatched to the RPC
runtime library, and then passed to the TP server stub.
.LI 
The TP process receives the call and executes the \*LContactProvider\*O
procedure.
.LI 
The procedure terminates and returns the results through the TP server stub,
the RPC runtime library, and the TP client stub.
.LI 
The procedure terminates in the DTS call, where the returned parameters are
examined.
.LI 
DTS then calls the \*LServerRequestProviderTime\*O remote procedure.  Input
parameters are passed to the TP client stub, dispatched to the RPC runtime
library, and then passed to the TP server stub.
.PP
.ne 4i
.FG "DTS/Time-Provider RPC Calling Sequence"
.pI ../dts/figures/2_message_exchange_10_dts.ps 0 0 1
.sp .5
...\"sourcefile = osf_ts_tp_msg_exch.gra scaled to 70%
.LI 
The TP process receives the call and executes the
\*LServer\%Request\%Provider\%Time\*O procedure.
.LI 
The procedure terminates and returns the results through the TP server stub,
the RPC runtime library, and the TP client stub.
.LI 
The DTS remote procedure call terminates and the timestamps are returned as an
output parameter.  DTS then synchronizes using the timestamps returned by the
external time-provider.
.LE
.PP
The following section describes the remote procedures that are exported by the
TP process during the previous sequence.
.H 3 "ContactProvider Procedure"
.iX "ContactProvider" "procedure"
.PP
\*LContactProvider\*O is the first routine called by DTS. The routine is
called to verify that the TP process is running and to obtain a control
message that DTS uses for subsequent communications with the TP process and
for synchronization after it receives the timestamps.  The parameters passed in
the \*LContactProvider\*O procedure call consist of the following elements:
.ML
.LI
Binding Handle
.P
An input parameter that establishes the relationship between DTS and the TP
process.  A binding handle enables the client (DTS) to recognize and find a
server (the TP process) that offers the same interface.
.LI
Control Message
.P
An output parameter that contains information used by DTS for subsequent
processing.  The control message consists of the following elements:
.VL 1i 
...\"  .LI  "Time-provider\0status"
.LI  "\*VTPstatus\*O"
One of the following values:
.ML
.LI
\*LK_TPI_SUCCESS\*O
.LI
\*LK_TPI_FAILURE\*O
.LE
.LI "\*VnextPoll\*O"
A time value that tells DTS when to contact the TP process again.  For example,
once a day through dial-up, radio, or satellite.
.LI "\*Vtimeout\*O"
A value that tells DTS how long to wait for a response from the TP process.
.LI "\*VnoClockSet\*O"
A value that specifies whether or not DTS is allowed to alter the system clock.
If \*VnoClockSet\*O is specified as 0x01 (TRUE), DTS does not adjust or set the
clock during the current synchronization.  This option is useful for systems
whose system clock is known to be accurate (such as systems equipped with
special hardware) or systems that are managed by some other time service (such
as Network Time Protocol (NTP)), but which still wish to function as a DTS
server.
.LE
.LI
.ne 5
Communication Status
.P
An output parameter that contains a status code returned by the DCE RPC
runtime library.  The status \*Lrpc_s_ok\*O is returned if the TP process is
successfully contacted.
.LE
.H 3 "ServerRequestProviderTime Procedure"
.PP
After the TP process is successfully contacted, DTS makes the
\*LServer\%Request\%Provider\%Time\*O 
procedure call to obtain the timestamps from
the external time-provider.  The parameters passed in the
\*LServer\%Request\%Provider\%Time\*O 
procedure call consist of the following
elements:
.ML
.LI
Binding Handle
.P
An input parameter that establishes the relationship between DTS and the TP
process.  A binding handle enables the client (DTS) to recognize and find a
server (the TP process) that offers the same interface.
.LI
Time Response Message
.P
An output parameter that contains a TP process status value
(\*LK_\%TPI_\%SUCCESS\*O or \*LK_TPI_FAILURE\*O), a count of the timestamps that
are returned, and the timestamps obtained from the external time-provider.  The
timestamp count is an integer in the range \*LK_\%MIN_\%TIMESTAMPS\*O to
\*LK_MAX_TIMESTAMPS\*O.  Each timestamp consists of three \*Lutc\*O time values:
.ML
.LI
The system clock time immediately before the TP process polls the external
time source. (The TP process normally obtains the time from the
\*Lutc_gettime(\|)\*O DTS API routine.)
.LI
The time value returned to the TP process by the external time source.
.LI
The system clock time immediately after the external time source is read.
(The TP process obtains the time from the \*Lutc_gettime(\|)\*O DTS API
routine.)
.LE
.LI
.ne 5
Communication Status
.P
An output parameter that contains a status code returned by the DCE RPC
runtime library.  The status \*Lrpc_s_ok\*O is returned if the TP process is
successfully contacted.
.LE
.H 2 "Time-Provider Process IDL File"
.iX "IDL" "Time-Provider process file"
.PP
A remote procedure call can only work if an interface definition that clearly
defines operation signatures exists.  Operation signatures define the syntax for
an operation, including its name and parameters (input and output) that are
passed as part of the procedure call.  The TP process interface exports the two
operation signatures that have been previously explained.  The interface is
provided in the file \*Lexamples/dts/dtsprovider.idl\*O.  When building the
TP process application, this file must be compiled using the IDL 
compiler, which creates three files:
.iX "dtsprovider files"
.ML
.LI
\*Ldtsprovider.h\*O (header file)
.LI
\*Ldtsprovider_sstub.c\*O (server stub file)
.LI
\*Ldtsprovider_cstub.c\*O (client stub file)
.LE
.PP
The Time-Provider program (TP program) must be compiled along with the
\*Ldtsprovider_sstub.c\*O code and then linked together.  The TP program must
also include the stub-generated file \*Ldtsprovider.h\*O.
The following sample code shows the structure of this interface.
.oS
/*
 *              Time Service Provider Interface
 *
 * This interface is defined through the Network Interface
 * Definition Language (NIDL).
 */
[uuid (bfca1238-628a-11c9-a073-08002b0dea7a),
    version(1)
]

.ne 5
interface time_provider
{

 import "dce/nbase.idl";
 import "dce/utctypes.idl";

/* Minimum and Maximum number of times to read time source at 
 * each synchronization
 */
const long K_MIN_TIMESTAMPS   = 1;
const long K_MAX_TIMESTAMPS   = 6;

/* Message status field return values
 */
const long K_TPI_FAILURE        = 0;
const long K_TPI_SUCCESS        = 1;

/* This structure contains one reading of the TP wrapped in 
 * the timestamps of the local clock.
 */
typedef struct TimeResponseType
{
   utc_t beforeTime;  /* local clk just before getting UTC */
   utc_t TPtime;      /* source UTC; inacc also supplied   */
   utc_t afterTime;   /* local clk just after getting UTC  */
} TimeResponseType;

/* Time-provider control message.  This structure is returned 
 * in response to a time service request.  The status field 
 * returns TP success or failure.  The nextPoll gives the 
 * client the time at which to poll the TP next.  The timeout 
 * value tells the client how long to wait for a time response 
 * from the TP.  The noClockSet will tell the client whether 
 * or not it is allowed to alter the system clock after a 
 * synchronization with the TP.
 */
.ne 7
typedef struct TPctlMsg
{
    unsigned long       status;
    unsigned long       nextPoll;
    unsigned long       timeout;
    unsigned long       noClockSet;
} TPctlMsg;

.ne 8
/* TP timestamp message.  The actual time-provider 
 * synchronization data.  The status is the result of the 
 * operation (success or failure).  The timeStampCount 
 * parameter returns the number of timestamps being returned 
 * in this message.  The timeStampList is the set of 
 * timestamps being returned from the TP.
 */
typedef struct TPtimeMsg
{
    unsigned long       status;
    unsigned long       timeStampCount;
    TimeResponseType    timeStampList[K_MAX_TIMESTAMPS];

} TPtimeMsg;

/* The Time-Provider Interface structures are described here.
 * There are two types of response messages from the TP:
 * control message and data message.
 *
 *         <<<< TPI CONTROL MESSAGE >>>>
 *
 * 31                                           0
 * +--------------------------------------------+
 * |            Time-Provider Status            |
 * +--------------------------------------------+
 * |            Next Poll Delta                 |
 * +--------------------------------------------+
 * |            Message Time Out                |
 * +--------------------------------------------+
 * |            NoSet Flag                      |
 * +--------------------------------------------+
 *
.ne 11
 *      <<<< a single timestamp >>>>
 *
 * 128                                          0
 * +--------------------------------------------+
 * |            Before Time                     |
 * +--------------------------------------------+
 * |            TP Time                         |
 * +--------------------------------------------+
 * |            After Time                      |
 * +--------------------------------------------+
 *
 *      <<<< TPI DATA MESSAGE >>>>
 *
 * 31                                           0
 * +--------------------------------------------+
 * |            Time-Provider Status            |
 * +--------------------------------------------+
 * |            Timestamp Count                 |
 * +--------------------------------------------+
 * |                                            |
 * |            <timestamp one>                 |
 * |                                            |
 * +--------------------------------------------+
 * |                  .                         |
 * |                  .                         |
 * |                  .                         |
 * |                  .                         |
 * |                  .                         |
 * +--------------------------------------------+
 * |                                            |
 * |      <timestamp K_MAX_TIMESTAMPS>          |
 * |                                            |
 * +--------------------------------------------+
 */

/* The RPC-based Time-Provider Program (TPP) interfaces are 
 * defined here.  These calls are invoked by a Time Service 
 * daemon running as a server (in this case it makes an RPC 
 * client call to the TPP server).
 */

.ne 4
/* CONTACT_PROVIDER
 * Send initial contact message to the TPP.  The TPP server
 * responds with a control message.
 */
void ContactProvider
        (
        [in]    handle_t        bind_h,
        [out]   TPctlMsg        *ctrlRespMsg,
        [out]   error_status_t  *comStatus
        );

/* SERVER_REQUEST_PROVIDER_TIME
 * The client sends a request to the TPP for times.  The
 * TPP server responds with an array of timestamps obtained 
 * by querying the Time-Provider hardware that it polls.
 */
void ServerRequestProviderTime
        (
        [in]    handle_t        bind_h,
        [out]   TPtimeMsg       *timesRspMsg,
        [out]   error_status_t  *comStatus
        );
}
.oE
.H 2 "Initializing the Time-Provider Process"
.PP
Initializing the RPC-based TP process prepares it to receive remote procedure
calls from a DTS daemon requesting the timestamps.  The following steps are
involved:
.AL 1
.LI
Include the header file (\*Ldtsprovider.h\*O) that is created by compiling
\*L/usr/include/dce/dtsprovider.idl\*O, which contains the interface definition.
.LI
Register the interface with the DCE RPC runtime.
.LI
.ne 6
Select one or more protocol sequences that are compatible with both the
interface and the runtime library.  It is recommended that the TP process
application selects all protocol sequences available on the system.  Available
protocol sequences are obtained by calling an RPC API routine, described in the
example that follows.  This ensures that transport independence is maintained in
RPC applications.
.LI
Register the TP process with the endpoint mapper service of the DCE
daemon (\*Ldced\*O) running on the system. 
This makes the TP process available to the DTS daemon.
.LI
Obtain the name of the machine's principal and then register an authentication
service to use with authenticated remote procedure calls coming from the DTS
daemon.  Note that DTS and the TP program are presumed to be running
in an authenticated environment.
.LI
Listen for remote procedure calls.
.LE
.PP
The following shows these steps, including the sequence of calls needed:
.oS
/* Register the TP server interface with the RPC runtime.
 * The interface specification time_provider_v1_0_ifspec
 * is obtained from the generated header file dtsprovider.h
 * The entry point vector is normally defined at the top of
 * the TP source program similar to this:
 *
 *    globaldef time_provider_v1_0_epv_t time_provider_epv =
 *    {
 *       ContactProvider,
 *       ServerRequestProviderTime
 *    };
 */
rpc_server_register_if (time_provider_v1_0_s_ifspec,
                        NULL,
                        (rpc_mgr_epv_t) &time_provider_epv,
                        &RPCstatus);

/*
 * This call tells the DCE RPC runtime to listen for remote
 * procedure calls using all supported protocol sequences.
 * To listen for a specific protocol sequence, use the
 * rpc_server_use_protreq call.
 */
.ne 2
rpc_server_use_all_protseqs (max_calls,
                             &RPCstatus);

/* This routine is called to obtain a vector of binding 
 * handles that were established with registration of 
 * protocol sequences.
 */
rpc_server_inq_bindings (&bind_vector,
                         &RPCstatus);

/* This routine adds the address information of the binding
 * handle for the TP server to the endpoint mapper database.
 */
rpc_ep_register (time_provider_v1_0_s_ifspec,
                 bind_vector,
                 NULL,
                 "Time-Provider",
                 &RPCstatus);

/* Obtain the name of the machine's principal and register an
 * authentication service to use for authenticated remote 
 * procedure calls coming from the time service daemon.
 */
dce_cf_prin_name_from_host (NULL,
                           &machinePrincipalName,
                           &status);

rpc_server_register_auth_info (machinePrincipalName,
                              rpc_c_authn_dce_private,
                              NULL,
                              NULL,
                              &RPCstatus);

/* This routine is called to listen for remote procedure calls
 * sent by the DTS client.  Possible RPC calls coming from DTS
 * client are ContactProvider and ServerRequestProviderTime.
 */
rpc_server_listen (max_calls,
                   &RPCstatus);
.oE
.H 2 "Time-Provider Algorithm"
.iX "Time-Provider" "algorithm"
.PP
The time-provider algorithm assumes that the two remote procedure calls will
come in the following order: \*LContactProvider\*O followed by
\*LServer\%Request\%Provider\%Time\*O.  The algorithm to create a generic
time-provider follows:
.AL 1
.LI
Initialize the TP process, as described previously.  Listen for RPC calls.
.LI
If the \*LContactProvider\*O procedure is invoked, perform the following steps:
.AL a
.LI
Initialize the control message to the appropriate values (status value to
\*LK_TPI_SUCCESS\*O; \*VnextPoll\*O, \*Vtimeout\*O, and \*VnoClockSet\*O to
valid integer values).
.LI
Set the communication status output parameter to \*Lrpc_s_ok\*O.
.LI
Return from the procedure call.  (The DCE RPC runtime returns the values to
DTS.)
.LE
.LI
If the \*LServerRequestProviderTime\*O procedure is run, perform the following
steps:
.AL a
.LI
Initialize the timestamp count to the appropriate number.
.LI
Use the \*Lutc_gettime(\|)\*O DTS API routine to read the system time.
.LI
Poll the external time source and read a UTC value.  Use the
\*Lutc_gmtime(\|)\*O routine to convert the UTC time value to a binary
timestamp.
.LI
Use the \*Lutc_gettime(\|)\*O routine to read the system time.
.LI
Repeat steps b, c, and d the number of times specified by the values of
\*LK_MIN_TIMESTAMPS\*O and \*LK_\%MAX_\%TIMESTAMPS\*O.
.LI
If steps b, c, or d return erroneous data, initialize the TP process status
field (\*VTPstatus\*O) of the data message to \*LK_\%TPI_\%FAILURE\*O; otherwise,
initialize the data message timestamps.
.LI
Set the communication status output parameter to \*Lrpc_s_ok\*O.
.LI
Return from the procedure call.  (The DCE RPC runtime sends the values back
to DTS.)
.LE
.LI
The TP process continues listening for RPC calls.
.LE
.H 2 "DTS Synchronization Algorithm"
.iX "DTS" "synchronization algorithm"
.PP
DTS performs the following steps to synchronize with an external time-provider:
.AL 1
.LI
At startup time, create the binding handle for the TPI.
The binding handle is obtained from the list of available protocol sequences
on the system.
.LI
At synchronization time, make the remote procedure call \*LContactProvider\*O,
assuming that a TP process is running on the system.  If the procedure call
fails, examine the RPC communication status, checking the availability of the
server.  If the server is unavailable, synchronize with peer servers; otherwise,
continue.
.LI
Wait for the procedure call to return the control message in the output
parameter.  If the procedure call does not return within the specified LAN
timeout interval, synchronize with peer servers.  Otherwise, go to step 4.
.LI
If the procedure call returned successfully (communication status is
\*Lrpc_s_ok\*O), read the data in the control message.
.LI
Make the remote procedure call \*LServerRequestProviderTime\*O to obtain the
timestamps from the external time-provider.  If the procedure does not return
within the elapsed time specified by the control message (\*Vtimeout\*O), then
synchronize with peer servers.  Schedule the next synchronization based upon the
applicable DTS management parameters, ignoring \*VnextPoll\*O.
.LI
If the procedure returns successfully, verify that the TP process status is
\*LK_TPI_SUCCESS\*O.  Otherwise, synchronize with peer servers and schedule the
next synchronization.
.LI
Extract the timestamps from the data message and synchronize using the
timestamps.
.LI
.ne 3
Schedule the next synchronization time by adding the value of \*VnextPoll\*O
seconds to the current time.  At the next synchronization, go to step 2.
.LE
.nS note
Application developers do not have to perform these steps; DTS performs these
steps internally during synchronization with an external time-provider.
.nE
.H 2 "Running the Time-Provider Process"
.iX "-: Time-Provider, process" "processes" "Time-Provider"
.iX "Time-Provider" "process"
.iX "running Time-Provider process"
.PP
Both the TP process and the DTS daemon must run on the same system.
The TP process must be started up under the login context of the machine's
principal, which has root privileges.
The DTS daemon and the TP process are started independently.
However, before starting the TP process, ensure that \*Ldced\*O
is running on the system.  If it is not running, start it.
The TP process can always exit without affecting the DTS daemon.  DTS
dynamically reestablishes communications with the TP process when it
creates binding handles.
.H 2 "Sources of Additional Information"
.PP
Refer to the following for additional information:
.ML
.LI
See \*L/examples/dts\*O for examples of time-provider programs that
you can use with several different types of external time-provider
devices.
.LI
See the \*(Ac for commercial sources of
external time-providers.
.LI
See the \*(Dr for reference pages describing
the RPC API and DTS API routines.
.LE
