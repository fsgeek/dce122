...\" @OSF_COPYRIGHT@
...\" COPYRIGHT NOTICE
...\" Copyright (c) 1990, 1991, 1992, 1993, 1994 Open Software Foundation, Inc.
...\" ALL RIGHTS RESERVED (DCE).  See the file named COPYRIGHT.DCE for
...\" the full copyright text.
...\" 
...\" 
...\" HISTORY
...\" $Log: sample.gpsml,v $
...\" Revision 1.1.2.15  1995/06/27  17:46:23  buckler
...\" 	More 1.1 edits.
...\" 	[1995/06/27  17:45:47  buckler]
...\"
...\" Revision 1.1.2.14  1995/06/27  17:04:17  buckler
...\" 	1.1 edits and Prentice Hall reformat
...\" 	[1995/06/27  17:03:02  buckler]
...\" 
...\" Revision 1.1.2.13  1994/11/15  16:25:52  weir
...\" 	No change
...\" 	[1994/11/15  16:25:15  weir]
...\" 
...\" Revision 1.1.2.12  1994/10/21  15:04:22  weir
...\" 	Some small corrections
...\" 	[1994/10/21  15:03:59  weir]
...\" 
...\" Revision 1.1.2.11  1994/10/19  20:48:22  weir
...\" 	Review comments
...\" 	[1994/10/19  20:47:31  weir]
...\" 
...\" Revision 1.1.2.10  1994/10/19  16:02:55  weir
...\" 	Review comments and edits
...\" 	[1994/10/19  16:02:10  weir]
...\" 
...\" Revision 1.1.2.9  1994/10/15  17:55:10  weir
...\" 	Added some source files
...\" 	[1994/10/15  17:54:44  weir]
...\" 
...\" Revision 1.1.2.8  1994/10/11  14:05:52  weir
...\" 	Updates
...\" 	[1994/10/11  14:04:59  weir]
...\" 
...\" Revision 1.1.2.7  1994/09/23  19:57:49  weir
...\" 	Updates for review
...\" 	[1994/09/23  19:57:00  weir]
...\" 
...\" Revision 1.1.2.6  1994/08/17  20:56:31  weir
...\" 	First set of updates
...\" 	[1994/08/17  20:55:46  weir]
...\" 
...\" Revision 1.1.2.5  1994/07/20  16:37:06  weir
...\" 	Updated for new code files
...\" 	[1994/07/20  16:36:40  weir]
...\" 
...\" Revision 1.1.2.4  1994/06/13  18:22:39  devobj
...\" 	cr10872 - fix copyright
...\" 	[1994/06/13  18:20:04  devobj]
...\" 
...\" Revision 1.1.2.3  1994/04/04  18:04:45  rom
...\" 	{enh, 10129, R1.1}
...\" 	Add .nr H1 0 to make this file become Appendix A.
...\" 	[1994/04/04  18:04:25  rom]
...\" 
...\" Revision 1.1.2.2  1994/03/14  22:00:57  rom
...\" 	{enh, 10129, R1.1}
...\" 	Fix pathnames of included files for new three-book organization.
...\" 	[1994/03/14  21:20:34  rom]
...\" 
...\" Revision 1.1.2.1  1994/03/11  23:05:12  rom
...\" 	{enh, 10129, R1.1}
...\" 	Initial split of App Dev Guide into three books and creation of
...\" 	Intro and Style Guide.
...\" 	[1994/03/11  23:01:57  rom]
...\" 
...\" $EndLog$
...\"
.nr H1 0
...\" 
...\" 
...\" 
...\" ----------------------------------------------------------------------
.H 1 "A Sample Application"
...\" ----------------------------------------------------------------------
...\" 
.P
This chapter presents the complete code for a generic sample application that
illustrates the recommended policies. The code is as generic as possible in
the sense that it demonstrates things that most servers need to do. This
generic server code is contained in the \*Lsample_server.c\*O and
\*Lsample_server.h\*O modules. The application-specific portion consists of a
set of simple examples to illustrate various styles of RPC data usage, including
pointers, pipes, and context handles. These illustrations are contained in
\*Lsample_manager.c\*O (the server side) and \*Lsample_client.c\*O (the client
side). \*Lsample.idl\*O contains a set of sample interface definitions for the
illustrated usages.
...\" 
...\" 
...\" ----------------------------------------------------------------------
.nL
.ne 12
.H 2 "The Generic Server"
...\" ----------------------------------------------------------------------
...\" 
.P
The generic server implemented by \*Lsample_server.c\*O demonstrates a variety
of tasks that most servers need to carry out, such as exporting bindings,
creating an authentication identity, establishing an ACL manager, and handling
asynchronous signals. As much as possible, the bulk of each task is implemented
as one or more separate functions. This modularity makes it easier to understand
the requirements for coding each task since each function or related set of
functions can be studied separately. Also, because the tasks performed are fairly
generic, the functions should be reusable in something close to the form presented
here by many servers.
.P
The IDL file \*Lsample.idl\*O is included here mainly to demonstrate the data type
declarations used for the ACL manager. A more complete IDL file is given in Section
A.2 to show how the illustrated RPC data types are declared.
...\" 
.nL
.ps 9
.vs 12
.oS
.dI ../style_gd/sample_code/generic_app/sample.idl
.dI ../style_gd/sample_code/generic_app/sample.acf
.oE
.ps 12
.vs 14
...\" 
.P
The IDL file \*Lsample_db.idl\*O and the ACF file \*Lsample_db.idl\*O are required
to generate a server-only stub for the database serialization routines used by the
ACL manager.
...\" 
.nL
.ne 12
.ps 9
.vs 12
.oS
.dI ../style_gd/sample_code/generic_app/sample_db.idl
.dI ../style_gd/sample_code/generic_app/sample_db.acf
.oE
.ps 12
.vs 14
...\" 
.P
The generic server is then implemented by \*Lsample_server.h\*O and
\*Lsample_server.c\*O.
...\" 
.nL
.ne 4.5i
.ps 9
.vs 12
.oS
.dI ../style_gd/sample_code/generic_app/sample_server.h
.dI ../style_gd/sample_code/generic_app/sample_server.c
.oE
.ps 12
.vs 14
...\" 
.P
Note that the server code contained in these files is nearly all generic. In the ACL
manager, the only application specific elements are the type of data stored in the
object database, declared in \*Lsample.idl\*O, and the name and object UUID for the
initial object created during ACL manager setup. The export objects operation uses
application-specific names and object uuids. The signal catcher thread installs
application-specific handling for asynchronous signals, although the actual signal
handling code simply causes the listen loop to return and invoke the generic cleanup
operations.
...\" 
...\" 
...\" 
...\" 
.nL
.ne 4.5i
...\" ----------------------------------------------------------------------
.H 2 "Object Bind Interface"
...\" ----------------------------------------------------------------------
...\" 
...\" 
.nL
.ps 9
.vs 12
.oS
.dI ../style_gd/sample_code/generic_app/sample_bind.c
.dI ../style_gd/sample_code/generic_app/sample_bind.idl
.dI ../style_gd/sample_code/generic_app/sample_bind.acf
.oE
.ps 12
.vs 14
...\" 
...\" 
...\" 
...\" 
...\" 
...\" ----------------------------------------------------------------------
.H 2 "Manager and Client Illustrations"
...\" ----------------------------------------------------------------------
...\" 
.P
Most of the application-specific server code is contained in \*Lsample_manager.c\*O.
Since generic client tasks are so simple, the whole client is contained in
\*Lsample_client.c\*O.
...\" 
...\" These still need to have the RPC data usage examples inserted
...\" 
.nL
.ps 9
.vs 12
.oS
.dI ../style_gd/sample_code/generic_app/sample_manager.c
.dI ../style_gd/sample_code/generic_app/sample_client.c
.oE
.ps 12
.vs 14
...\" 
...\" 
...\" ----------------------------------------------------------------------
.H 2 "Message (sams) File"
...\" ----------------------------------------------------------------------
...\" 
.P
The sample application's \*Lsams\*O file, which contains definitions for
various messages output by the serviceability interface routines, is as
follows:
...\" 
...\" 
.nL
.ps 9
.vs 12
.oS
.dI ../style_gd/sample_code/generic_app/smp.sams
.oE
.ps 12
.vs 14
...\" 
...\" 
...\" 
...\" ----------------------------------------------------------------------
.nL
.ne 25
.H 2 "Makefile"
...\" ----------------------------------------------------------------------
...\" 
.P
A generic Makefile suitable for building the sample code is as follows:
...\" 
.nL
.ps 9
.vs 12
.oS
.dI ../style_gd/sample_code/generic_app/Makefile
.oE
.ps 12
.vs 14
