...\" @OSF_COPYRIGHT@
...\" COPYRIGHT NOTICE
...\" Copyright (c) 1990, 1991, 1992, 1993, 1994 Open Software Foundation, Inc.
...\" ALL RIGHTS RESERVED (DCE).  See the file named COPYRIGHT.DCE for
...\" the full copyright text.
...\" 
...\" 
...\" HISTORY
...\" $Log: backing_store.gpsml,v $
...\" Revision 1.1.2.15  1995/06/07  14:35:39  rcb
...\" 	PRENTICE HALL reformat; final edits and changes
...\" 	[1995/06/05  19:52:06  rcb]
...\"
...\" 	PRENTICE HALL reformat
...\" 	[1995/04/10  19:35:03  rcb]
...\"
...\" 	incorporated 1.1 edits
...\" 	[1995/04/10  19:07:49  rcb]
...\"
...\" Revision 1.1.2.14  1994/11/08  21:26:18  neilson
...\" 	Added index entries.
...\" 	[1994/11/08  21:26:02  neilson]
...\" 
...\" Revision 1.1.2.13  1994/11/03  23:30:50  neilson
...\" 	Substituted macros for book names in cross refs.
...\" 	[1994/11/03  01:38:13  neilson]
...\" 
...\" 	Substituted macros for book names in cross refs.
...\" 
...\" Revision 1.1.2.12  1994/10/20  21:15:09  jshirley
...\" 	Fixed a reference to IDL Encoding.
...\" 	[1994/10/20  21:14:54  jshirley]
...\" 
...\" Revision 1.1.2.11  1994/10/17  15:26:33  neilson
...\" 	A few minor changes suggested by engineering.
...\" 	[1994/10/17  15:26:09  neilson]
...\" 
...\" Revision 1.1.2.10  1994/10/11  17:15:48  neilson
...\" 	CR 10357 - Engineering suggested several minor additions and improvements.
...\" 	[1994/10/11  17:15:02  neilson]
...\" 
...\" Revision 1.1.2.9  1994/09/08  15:46:23  neilson
...\" 	CR 10977 - Needed to say "fetch or store" not just "fetch".
...\" 	[1994/09/08  15:46:06  neilson]
...\" 
...\" Revision 1.1.2.8  1994/09/08  15:35:37  neilson
...\" 	CR 10977 - Additional info on freeing memory when using fetch outside
...\" 	server side RPC.
...\" 	[1994/09/08  15:35:14  neilson]
...\" 
...\" Revision 1.1.2.7  1994/08/26  16:03:54  neilson
...\" 	CR 10971 - fix wording.
...\" 	[1994/08/26  16:03:34  neilson]
...\" 
...\" Revision 1.1.2.6  1994/08/17  23:16:54  neilson
...\" 	CR 10971 (continued) Fix typo.
...\" 	[1994/08/17  23:16:37  neilson]
...\" 
...\" Revision 1.1.2.5  1994/08/17  23:10:47  neilson
...\" 	CR 10971 - Added restriction on conformant arrays in the section on
...\" 	encode, decode.
...\" 	[1994/08/17  23:10:26  neilson]
...\" 
...\" Revision 1.1.2.4  1994/06/13  18:39:30  devobj
...\" 	cr10872 - fix copyright
...\" 	[1994/06/13  18:37:31  devobj]
...\" 
...\" Revision 1.1.2.3  1994/05/22  03:36:25  neilson
...\" 	Add engineering changes.
...\" 	[1994/05/22  02:14:11  neilson]
...\" 
...\" Revision 1.1.2.2  1994/05/12  15:53:13  neilson
...\" 	  Initial material.
...\" 	  [1994/04/14  20:41:51  neilson]
...\" 
...\" Revision 1.1.2.1  1994/03/11  23:03:10  rom
...\" 	  {enh, 10129, R1.1}
...\" 	  Initial split of App Dev Guide into three books and creation of
...\" 	  Intro and Style Guide.
...\" 	  [1994/03/11  23:00:45  rom]
...\" 
...\" $EndLog$
...\"
.H 1 "The DCE Backing Store"
.P
This chapter describes the \*Ebacking store library\*O that DCE provides for
.iX "backing store" "library"
.iX "API" "backing store"
the convenience of programmers who are writing DCE servers.  A backing
store is a \*Epersistent database\*O or \*Epersistent object store\*O from 
which typed data can be stored and retrieved by a key.
.nS "Note"
Sometimes the backing store is called a \*Edatabase\*O.  For instance, the
associated IDL file is \*Ldce/database.idl\*O, and the name of the
backing store routines begin with \*Ldce_db_\*O.  The backing store
is, however, not a full-fledged database in the conventional sense,
and it has no support for SQL or for any other query system.
.nE
.P
Servers generally need to manage several objects.  Good design often
.iX "object" "persistance of"
.iX "managing several objects"
.iX "object" "managing several"
requires that the state of the objects be maintained over
sequential instances of a particular server.  For example, the ACLs
used by a server should not need to be recalculated each time the
system is rebooted.  The backing store interface provides a way to
store, into a file, any data that can be described with
IDL so that it can persist across instances of software that run from
time to time.  For example, the ACL library uses the backing store
library.  The backing store routines can be used in servers, in
clients or in standalone programs that do not involve remote procedure
calls (RPCs).  Backing store data should not be used
for sharing data between processes.
.H 2 "Data in a Backing Store"
.P
The backing store interface provides the applications programmer with
the capability for tagged storage and retrieval of typed data.  The
tag (or retrieval key) can be either a UUID or a standard C string.
For a specific backing store, the data type must be specified at
compile time and is established through the IDL encoding services.
Each backing store can contain only a single data type.
.P
Each \*Edata item\*O (which may also be called a \*Edata object\*O, 
or a \*Edata record\*O)
consists of the data stored in a single call to a storage routine.  The
storage routines are \*Ldce_db_store(\|)\*O,
\*Ldce_db_store_by_name(\|)\*O, and \*Ldce_db_store_by_uuid(\|)\*O.
Optionally, data items may have standard headers.  If a backing store has been
created to use headers, then every data item has the header.
.P
A program can have more than one backing store open at the same time.
.H 2 "Using a Backing Store"
.P
Although the backing store library is a generalized service, you are
encouraged to use it in a particular, standardized way.  You should
use the header and the recommended IDL interface format that are described in
the following sections.  Standardized use will ease the transition to
later developments in DCE.
.H 2 "Header for Data"
.P
An optional standard header is available for data objects or items in the backing
store.  If it is employed, then the backing store library
automatically maintains the \*Lcreated\*O, \*Lmodified\*O, and
\*Lmodified_count\*O fields, as shown in the following IDL
description, taken from the \*Ldce/database.idl\*O file:
.oS
.ps 11
.vs 13
.ne 33
/* The standard header for each "object" in the database. */

typedef struct dce_db_dataheader_s_t {
    uuid_t              uuid;
    uuid_t              owner_id;
    uuid_t              group_id;
    uuid_t              acl_uuid;
    uuid_t              def_object_acl;
    uuid_t              def_container_acl;
    unsigned32          ref_count;
    /* The following fields are updated by the library */
    utc_t               created;
    utc_t               modified;
    unsigned32          modified_count;
} dce_db_dataheader_t;

typedef enum {
    dce_db_header_std,
    dce_db_header_acl_uuid,
    dce_db_header_none
} dce_db_header_type_t;

typedef union switch (dce_db_header_type_t type) tagged_union {
    case dce_db_header_none:            /* none */ ;
    case dce_db_header_std:             dce_db_dataheader_t h;
    case dce_db_header_acl_uuid:        uuid_t  acl_uuid;
} dce_db_header_t;

void dce_db_header_convert(
    [in]        handle_t                h,
    [in,out]    dce_db_header_t         *data,
    [out]       error_status_t          *st
);
.oE
.P
The \*Lacl_uuid\*O field is intended for use as a UUID
retrieval key in a server's ACL database.
.H 2 "The User Interface"
.P
The recommended, standardized backing store IDL interface for a server
looks like the following, where \*VXXX\*O is the server name:
.oS
interface XXX_convert
{
    import "dce/database.idl"

    typedef XXX_data_s_t {
        dce_db_header_t  header;   /* Header must be first! */
        /* (server-specific data goes here) */
    } XXX_data_t;

    void XXX_data_convert(
        [in]        handle_t         h,
        [in, out]   XXX_data_t       *data
        [out]       error_status_t   *st
    );
}
.oE
.P
It should be compiled with the following Attribute
Configuration File (ACF), which instructs the
\*Lidl\*O compiler to write the data conversion routine into the
\*VXXX\*L_cstub.c\*O file:
.oS
interface XXX
{
    [encode, decode] XXX_data_convert([comm_status] st);
}
.oE
.H 2 "The IDL Encoding Services"
.P
When remote procedure call sends data between a client and a server, it
serializes the user's data structures by using the IDL encoding
services, described in Chapter 16 of this book.
.iX "IDL" "encoding services"
.H 3 "Encoding and Decoding in the Backing Store"
.P
The backing store uses this same serialization scheme for
encoding and decoding, informally called \*Vpickling\*O, when storing data
.iX "pickling of data"
.iX "encoding and decoding of data"
structures to disk.  The IDL compiler, \*Lidl\*O, writes the routine
that encodes and decodes the data.  This routine is passed to
\*Ldce_db_open(\|)\*O, remembered in the handle, and used by the following
store and fetch routines:
.ML
.LI
\*Ldce_db_fetch(\|)\*O
.LI
\*Ldce_db_fetch_by_name(\|)\*O
.LI
\*Ldce_db_fetch_by_uuid(\|)\*O
.LI
\*Ldce_db_header_fetch(\|)\*O
.LI
\*Ldce_db_store(\|)\*O
.LI
\*Ldce_db_store_by_name(\|)\*O
.LI
\*Ldce_db_store_by_uuid(\|)\*O
.LE
.H 3 "Conformant Arrays Not Allowed"
.P
You cannot use conformant arrays in objects stored to a backing store.
This is because the IDL-generated code that encodes (pickles) the structure
has no way to predict or detect the size of the array.  When the
object is fetched, there will likely be insufficient space provided
for the structure, and the array's data will destroy whatever is
in memory after the structure.
.P
To illustrate the problem more clearly, here is an example.  An IDL
file has a conformant array, \*Lna\*O, as an object in a \*Lstruct\*O:
.oS
.ne 22
typedef struct {
    unsigned32 length;
    [size_is(length)]
    unsigned32 numbers[];
} num_array_t
typedef struct {
    char          *name;
    num_array_t   na;
} my_type_t;
.oE
.P
The \*Lidl\*O compiler turns the IDL specification into the following \*L.h\*O
file contents:
.oS
typedef struct  {
    unsigned32 length;
    unsigned32 numbers[1];
} num_array_t
typedef struct {
    idl_char        *name;
    num_array_t     na;
} my_type_t;
.oE
.P
When the object is fetched, and the array length is greater than the 1
(one) assumed in the \*L.h\*O file, the decoding operation
destroys whatever follows \*Lmy_struct\*O in memory:
.oS
my_type_t  my_struct;
dce_db_fetch(dbh, key, &my_struct, &st);
.oE
.P
The correct method is to use a pointer to the array, not the array
itself, in the IDL file.  For example:
.oS
typedef struct {
    char            *name;
    num_array_t     *na;
} my_type_t;
.oE
.H 2 "The Backing Store Routines"
.P
Many of the backing store routines appear in three versions: plain, by
name, and by UUID.  The plain version will work with backing
stores that were created to be indexed either by name, or by UUID,
while the restricted versions accept only the matching type.  It is
advantageous to use the restricted versions when they are appropriate
because they provide type checking by the compiler, as well as
visual clarity of purpose.
.P
The backing store operations described in the following sections are supported.
.H 3 "Opening a Backing Store"
The \*Ldce_db_open(\|)\*O routine creates a new backing store or opens
.iX "backing store API" "\*Ldce_db_open(\|)\*O"
an existing one.  The backing store is identified by a filename.
There are flags to permit the following choices:
.ML
.LI
Create a new backing store or open an existing one.
.iX "opening an existing backing store"
.iX "backing store" "opening an existing"
.iX "creating" "new backing store"
.iX "backing store" "creating a new"
.LI
Create a new backing store indexed by name or UUID.  (The
choice depends upon the server's purpose.)  This index is called the
\*Ebacking store key\*O.
.LI
Open an existing backing store read/write or read-only.
.LI
Use the standard header or not.
.LE
.P
Every backing store is created with one of the two possible index
schemes, by name or by UUID, and you cannot subsequently open it for use
with the other scheme.  Also, once a backing store has been created
with (or without) standard headers, you cannot subsequently open it the other way.
.P
The routine returns a handle by which subsequent operations
identify the backing store.
.P
The following conventions for filenames are recommended:
.VL
.LI "\*Vxxx\*L.acl\*O"
ACL storage.
.LI "\*Vxxx\*L.db\*O"
Backing store filename.
.LE
.H 3 "Closing a Backing Store"
.iX "closing a backing store"
.iX "backing store" "closing"
.P
The \*Ldce_db_close(\|)\*O routine frees the handle.  It closes any
.iX "backing store API" "\*Ldce_db_close(\|)\*O"
open files and releases all other resources associated with the
backing store.
.H 3 "Storing or Retrieving Data"
.P
The following routines store data into a backing store:
.iX "storing data into a backing store"
.iX "backing store" "storing data into"
.VL
.LI "\*Ldce_db_store(\|)\*O"
.iX "backing store API" "\*Ldce_db_store(\|)\*O"
.nL
This routine can store into a backing store that is indexed by name or
by UUID.  The key's type must match the flag that was used in
\*Ldce_db_open(\|)\*O.
.LI "\*Ldce_db_store_by_name(\|)\*O"
.iX "backing store API" "\*Ldce_db_store_by_name(\|)\*O"
.nL
This routine can store only into a backing store that is indexed 
by name.
.LI "\*Ldce_db_store_by_uuid(\|)\*O"
.iX "backing store API" "\*Ldce_db_store_by_uuid(\|)\*O"
.nL
This routine can store only into a backing store that is indexed 
by UUID.
.LE
.P
To retrieve data from a backing store, use the appropriate one of the
.iX "retrieving data from a backing store"
.iX "backing store" "retrieving data from"
following routines: 
.VL
.LI "\*Ldce_db_fetch(\|)\*O"
.iX "backing store API" "\*Ldce_db_fetch(\|)\*O"
.nL
This routine can retrieve data from a backing store that is indexed by
name or by UUID.  The key's type must match the flag that was used in
\*Ldce_db_open(\|)\*O.
.LI "\*Ldce_db_fetch_by_name(\|)\*O"
.iX "backing store API" "\*Ldce_db_fetch_by_name(\|)\*O"
.nL
This routine can retrieve data only from a backing store that is indexed 
by name.
.LI "\*Ldce_db_fetch_by_uuid(\|)\*O"
.iX "backing store API" "\*Ldce_db_fetch_by_uuid(\|)\*O"
.nL
This routine can retrieve data only from a backing store that is indexed 
by UUID.
.LE
.P
When storing or retrieving data, a function that was specified at open
time converts between native format and on-disk (serialized) format.
This function is generated from the IDL file by the IDL compiler.
.H 3 "Freeing Data"
.P
When fetching data, the encoding services allocate memory for the
data structures that are returned.  These services accept a structure
and use \*Lrpc_sm_allocate(\|)\*O to provide additional memory needed
to hold the data.
.P
The backing store library does not know what memory has been allocated
and, therefore, cannot free it.  For fetch calls that are made from a server
.iX "freeing backing store memory"
stub, this is not a problem because the memory is freed automatically
when the server call terminates.  For fetch calls that are made from a
nonserver, the programmer is responsible for freeing the memory.
.P
Programs that call the fetch or store routines, such as \*Ldce_db_fetch(\|)\*O,
outside of a server operation (for instance, if a server does some
backing store initialization, or in a standalone program) must call
\*Lrpc_sm_enable_allocate(\|)\*O first.
.H 3 "Making or Retrieving Headers"
.P
The \*Ldce_db_std_header_init(\|)\*O routine initializes a
standard backing store header from the values the caller provides in
.iX "making backing store headers"
.iX "retrieving backing store headers"
its arguments.  It places the values into the header only and does
not write into the backing store file.  The \*Ldce_db_header_fetch(\|)\*O
routine retrieves the header of an object in the backing store.
.H 3 "Performing Iteration"
.P
The following routines iteratively traverse all of the keys 
(name or UUID) in a backing store.  The order of retrieval of the keys is
.iX "traversing the keys of a backing store"
.iX "backing store" "traversing the keys of"
.iX "iterating through a backing store"
.iX "backing store" "iterating through"
indeterminate; they are not sorted, nor are they necessarily returned
in the order in which they were originally stored.  It is strongly
recommended to use the locking and unlocking routines,
\*Ldce_db_lock(\|)\*O and \*Ldce_db_unlock(\|)\*O, whenever performing
iteration.
.VL
.LI "\*Ldce_db_iter_start(\|)\*O"
.iX "backing store API" "\*Ldce_db_iter_start(\|)\*O"
.nL
This routine prepares for the start of iteration.
.LI "\*Ldce_db_iter_next(\|)\*O"
.iX "backing store API" "\*Ldce_db_iter_next(\|)\*O"
.nL
This routine returns the key for the next item from a backing store
that is indexed by name or by UUID.  The \*Ldb_s_no_more\*O status
code indicates that there are no more items.
.LI "\*Ldce_db_iter_next_by_name(\|)\*O"
.iX "backing store API" "\*Ldce_db_iter_next_by_name(\|)\*O"
.nL
This routine returns the key for the next item only from a backing store
that is indexed by name.  Again, \*Ldb_s_no_more\*O indicates that no
items remain.
.LI "\*Ldce_db_iter_next_by_uuid(\|)\*O"
.iX "backing store API" "\*Ldce_db_iter_next_by_uuid(\|)\*O"
.nL
This routine returns the key for the next item only from a backing store
that is indexed by UUID.  Again, \*Ldb_s_no_more\*O indicates that no
items remain. 
.LI "\*Ldce_db_iter_done(\|)\*O"
.iX "backing store API" "\*Ldce_db_iter_done(\|)\*O"
.nL
This routine is counterpart to \*Ldce_db_iter_start(\|)\*O and should
be called when iteration is done.
.LI "\*Ldce_db_inq_count(\|)\*O"
.iX "backing store API" "\*Ldce_db_inq_count(\|)\*O"
.nL
This routine returns the number of items in a backing store.
.LE
.H 3 "Deleting Items from a Backing Store"
.P
The following routines delete an item from a backing store.
.iX "deleting" "items from a backing store"
.iX "backing store" "deleting items from"
.VL
.LI "\*Ldce_db_delete(\|)\*O"
.iX "backing store API" "\*Ldce_db_delete(\|)\*O"
.nL
This routine deletes an item from a backing store that is indexed by
name or by UUID.  The key's type must match the flag that was used in
\*Ldce_db_open(\|)\*O.
.LI "\*Ldce_db_delete_by_name(\|)\*O"
.iX "backing store API" "\*Ldce_db_delete_by_name(\|)\*O"
.nL
This routine deletes an item only from a backing store that is indexed by
name.
.LI "\*Ldce_db_delete_by_uuid(\|)\*O"
.iX "backing store API" "\*Ldce_db_delete_by_uuid(\|)\*O"
.nL
This routine deletes an item only from a backing store that is indexed by
UUID.
.LE
.P
To delete an entire backing store, ensure that the data file is not
open, and remove it.  There is only one file.
.H 3 "Locking and Unlocking a Backing Store"
The \*Ldce_db_lock(\|)\*O and \*Ldce_db_unlock(\|)\*O routines lock
.iX "backing store API" "\*Ldce_db_lock(\|)\*O"
.iX "backing store API" "\*Ldce_db_unlock(\|)\*O"
and unlock a backing store.  If a backing store is already locked,
.iX "locking a backing store"
.iX "backing store" "locking"
\*Ldce_db_lock(\|)\*O provides an indication.  A lock is associated
with an open backing store's handle.  The storage routines,
\*Ldce_db_store(\|)\*O, \*Ldce_db_store_by_name(\|)\*O, and
\*Ldce_db_store_by_uuid(\|)\*O, all acquire the lock before updating.
Explicit use of locking is appropriate in some circumstances; for
example, when reading or writing pairs (or multiples) of closely
associated items in a backing store, or when using iteration.
.P
The locks are advisory.  It is possible to write a backing store even
if it is locked so, if you want to rely upon the locks, you must
always check them.
.H 2 "Example of Backing Store Use"
.P
For a full example of backing store use, see the \*(Di.
.P
The following brief example shows a portion of a server that manages an
office telephone directory.  Following are the relevant structures, defined
in an IDL file:
.oS
typedef struct phone_record_s_t {
    [string,ptr] char       *name;
    [string,ptr] char       *email;
    [string,ptr] char       *phone;
    [string,ptr] char       *office;
} phone_record_t;

typedef struct phone_record_array_s_t {
                            unsigned32      count;
    [ptr,size_is(count)]    phone_record_t  *entry;
} phone_record_array_t;

typedef struct phone_data_s_t {
    dce_db_header_t h;
    phone_record_t  ph;
} phone_data_t;

.ne 11
/*
 * The following routine returns the entire contents of the
 * directory from the backing store by using the iteration 
 * routines.  First, the portion of the IDL file that 
 * defines the routine's RPC format: 
 */
[idempotent] void entire_phone_book(
    [in]        handle_t               h,
    [out]       phone_record_array_t  *e_array,
    [out]       error_status_t        *st
    );
.oE
.P
Next the routine itself, written in C:
.oS
/* global variables */
dce_db_handle__t db_h;  /* handle to phonebook backing store */

/* Other routines are not shown here, including the routine
 * that opened the backing store.
 */

void
entire_phone_book(
    /* [in]  */ handle_t        h,  /* For RPC, but not used
                                     * here.  An ACL check
                                     * would use it. */

    /* [out] */ phone_record_array_t  *e_array,
    /* [out] */ error_status_t        *st
)
{
    uuid_t             *dbkey;
    phone_data_t        pd;
    unsigned32          i;
    error_status_t      st2;

    *st = error_status_ok;
.ne 5
    /* Lock before starting work, so that the backing 
     * store does not change until after all the info 
     * has been returned.
     */
    dce_db_lock(db_h, st);
    /* Count the entries so enough storage can be allocated */
    e_array->count = 0;
    dce_db_inq_count(db_h, &e_array->count, st);
    if (*st != error_status_ok) {
        dce_fprintf(stderr, *st); /* or some other treatment */
        dce_db_unlock(db_h, st);
        return;
    }
    if (e_array->count == 0) {    /* No items, nothing to do */
        dce_db_unlock(db_h, st);
        return;
    }
    /* Allocate the space for the output. */
    e_array->entry = rpc_sm_allocate(
               e_array->count*sizeof(e_array->entry[0]),st);
    if (*st != rpc_s_ok) {
        dce_fprintf(stderr, *st); /* or some other treatment */
        return
    }
    dce_db_iter_start(db_h, st);
    i = 0;
    while (TRUE) {
        /* Get the next key. */
        dce_db_iter_next(db_h, &dbkey, st);
        /* break when we've scanned the entire backing store */
        if (*st == db_s_no_more) break;
        /* Get the data associated with the next key. */
        dce_db_fetch_by_uuid(db_h, dbkey, (void *)&pd, st);
        if (*st != error_status_ok) {
            dce_fprintf(stderr, *st);
            /* Don't forget to stop iterating and unlock after 
	     * an error. */
            dce_db_iter_done(db_h, &st2);
            dce_db_unlock(db_h, &st2);
            return;
        }
        /* Stick the item into the array to be returned 
         * when done. */
        e_array->entry[i].name   = strdup(pd.ph.name);
        e_array->entry[i].email  = strdup(pd.ph.email);
        e_array->entry[i].phone  = strdup(pd.ph.phone);
        e_array->entry[i].office = strdup(pd.ph.office);
        i++;
        /* The use of strdup(\|) above is illustrative, but it
         * is not correct within a server, because the 
	 * allocated memory is never freed.  Correct code 
	 * would involve the use of rpc_sm_allocate(\|).
         */
    }
    /* The iteration is finished. */
    dce_db_iter_done(db_h, st);
    dce_db_unlock(db_h, st);
}
.oE
