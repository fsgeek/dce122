...\"
...\" @OSF_COPYRIGHT@
...\" COPYRIGHT NOTICE
...\" Copyright (c) 1990, 1991, 1992, 1993 Open Software Foundation, Inc.
...\" ALL RIGHTS RESERVED (DCE).  See the file named COPYRIGHT.DCE in the
...\" src directory for the full copyright text.
...\"
...\"
...\" HISTORY
...\" $Log: aclgroup.gpsml,v $
...\" Revision 1.1.10.1  1996/05/14  19:51:53  wardr
...\" 	{enh,R1.2.2}
...\" 	Removed changebars
...\" 	[1996/05/14  19:50:49  wardr]
...\"
...\" Revision 1.1.8.8  1995/12/29  17:02:05  wfl
...\" 	{edit, R1.2.1}
...\" 	made copy edits
...\" 	[1995/12/29  16:59:08  wfl]
...\" 
...\" Revision 1.1.8.7  1995/10/04  15:50:51  wfl
...\" 	{def, 13140, R1.2.1}
...\" 	Fixed quotes in change markers
...\" 	[1995/10/04  15:49:36  wfl]
...\" 
...\" Revision 1.1.8.6  1995/09/16  16:12:29  wfl
...\" 	{no change}
...\" 	[1995/09/16  16:10:52  wfl]
...\" 
...\" Revision 1.1.8.5  1995/08/26  18:37:36  jeff
...\" 	Just testing on this fine Saturday afternoon....
...\" 	[1995/08/26  18:37:13  jeff]
...\" 
...\" Revision 1.1.8.4  1995/08/25  19:48:52  jeff
...\" 	Yes, more testing....
...\" 	[1995/08/25  19:48:31  jeff]
...\" 
...\" Revision 1.1.8.3  1995/08/25  17:25:23  jeff
...\" 	Testing again...
...\" 	[1995/08/25  17:24:57  jeff]
...\" 
...\" Revision 1.1.8.2  1995/08/25  15:13:03  jeff
...\" 	{still no defect}
...\" 	Still testing....
...\" 	[1995/08/25  15:08:58  jeff]
...\" 
...\" Revision 1.1.8.1  1995/08/25  15:05:26  jeff
...\" 	{no defect}
...\" 	Testing ODE (please work...)
...\" 	[1995/08/25  15:04:11  jeff]
...\" 
...\" Revision 1.1.6.24  1995/07/24  18:27:35  buckler
...\" 	More 1.1 edits.
...\" 	[1995/07/24  17:56:52  buckler]
...\" 
...\" Revision 1.1.6.23  1995/07/13  16:26:17  weir
...\" 	Prentice-Hall edits
...\" 	[1995/07/13  16:25:28  weir]
...\" 
...\" Revision 1.1.6.22  1995/07/12  21:17:32  weir
...\" 	Prentice-Hall edits
...\" 	[1995/07/12  21:16:39  weir]
...\" 
...\" Revision 1.1.6.21  1994/10/20  16:49:39  jeff
...\" 	{defect, 12637, R1.1}
...\" 	Purely editorial improvements to the previous defect.
...\" 	[1994/10/20  16:49:15  jeff]
...\" 
...\" Revision 1.1.6.20  1994/10/19  23:12:58  jeff
...\" 	{defect, 12637, R1.1}
...\" 	Incorporate information on delegation with DFS (mostly ACL text).
...\" 	[1994/10/19  23:12:35  jeff]
...\" 
...\" Revision 1.1.6.19  1994/10/14  21:57:31  jeff
...\" 	{defect, 12535, R1.1}
...\" 	Incorporate dcecp commands in DFS documentation (forgot
...\" 	something...).
...\" 	[1994/10/14  21:57:07  jeff]
...\" 
...\" Revision 1.1.6.18  1994/10/14  19:34:44  jeff
...\" 	{defect, 12535, R1.1}
...\" 	Incorporate dcecp commands in DFS documentation.
...\" 	[1994/10/14  19:31:50  jeff]
...\" 
...\" Revision 1.1.6.17  1994/08/12  13:17:58  jeff
...\" 	{defect, 11654, R1.1}
...\" 	Added information about ACL permissions for renaming
...\" 	an object.
...\" 	[1994/08/12  13:17:35  jeff]
...\" 
...\" Revision 1.1.6.16  1994/08/10  14:00:43  jeff
...\" 	More clarification for unauthenticated users.
...\" 	[1994/08/10  13:55:57  jeff]
...\" 
...\" Revision 1.1.6.15  1994/07/22  17:48:39  jeff
...\" 	{defect, 11388, R1.1}
...\" 	Document status and removal of unauthenticated entry.
...\" 	[1994/07/22  17:48:22  jeff]
...\" 
...\" Revision 1.1.6.14  1994/07/18  23:41:35  jeff
...\" 	{defect, 11350, R1.1}
...\" 	Document root/self privileges.
...\" 	[1994/07/18  23:41:10  jeff]
...\" 
...\" Revision 1.1.6.13  1994/07/09  16:44:05  jeff
...\" 	Small editorial changes to index.
...\" 	[1994/07/09  16:43:46  jeff]
...\" 
...\" Revision 1.1.6.12  1994/05/19  20:49:44  jeff
...\" 	{defect, 8118, R1.1}
...\" 	Correct use of double quotes.
...\" 	[1994/05/19  20:48:21  jeff]
...\" 
...\" Revision 1.1.6.11  1994/05/18  19:18:11  jeff
...\" 	{enh,10690,R1.1}
...\" 	Clarify relationship between executable files and x bit/permission.
...\" 	[1994/05/18  19:17:50  jeff]
...\" 
...\" Revision 1.1.6.10  1994/05/13  21:07:39  jeff
...\" 	{defect, 10576, R1.1}
...\" 	Improved the documentation of the ACL default cell.  I also made
...\" 	some improvements to my previous work for defect 8118.
...\" 	[1994/05/13  21:07:17  jeff]
...\" 
...\" Revision 1.1.6.9  1994/05/06  22:08:29  jeff
...\" 	{defect, 8118, R1.1}
...\" 	Work release notes into documentation.
...\" 	[1994/05/06  22:07:24  jeff]
...\" 
...\" Revision 1.1.6.8  1994/05/04  21:33:08  jeff
...\" 	{defect, 10527, R1.1}
...\" 	Create structure for new DFS documentation organization.
...\" 	[1994/05/04  21:31:48  jeff]
...\" 
...\" Revision 1.1.6.7  1994/04/28  22:21:20  jeff
...\" 	{defect, 10439, R1.1}
...\" 	Correct cross-references for reorganization of DFS documentation.
...\" 	[1994/04/28  22:14:45  jeff]
...\" 
...\" Revision 1.1.6.6  1994/04/25  21:31:46  jeff
...\" 	{defect, 10440, R1.1}
...\" 	Incorporate user information into admin documentation; make simple
...\" 	editorial changes as necessary.
...\" 	[1994/04/25  21:22:02  jeff]
...\" 
...\" Revision 1.1.6.5  1994/04/05  20:40:56  zahn
...\" 	{enh,5923,R1.1}
...\" 
...\" 	Fixed cross-references to now-defunct User's Guide
...\" 	and Reference.
...\" 	[1994/04/05  20:40:34  zahn]
...\" 
...\" Revision 1.1.6.4  1993/10/13  20:24:02  tmw
...\" 	Added index entries for second verions of master index.
...\" 	[1993/10/13  15:33:26  tmw]
...\" 
...\" Revision 1.1.6.3  1993/09/27  03:26:10  tmw
...\" 	Added index entries for second version of master index.
...\" 	[1993/09/27  03:23:12  tmw]
...\" 
...\" Revision 1.1.6.2  1993/08/12  01:55:40  jeff
...\" 	{def,8386,R1.0.3}
...\" 	Incorporate OSF editorial comments into DFS Admin Guide and related
...\" 	documentation.
...\" 
...\" 	{def,7946,R1.0.3}
...\" 	Correct and update the DFS ACL documentation.
...\" 	[1993/08/12  01:54:34  jeff]
...\" 
...\" Revision 1.1.4.11  1993/02/23  00:22:04  buckler
...\" 	Changed .P! to .pI and added Postscript boundary boxes
...\" 	[1993/02/23  00:20:56  buckler]
...\" 
...\" Revision 1.1.4.10  1993/02/19  18:39:31  jeff
...\" 	Fix for defect 6055, clarify root privileges (also
...\" 	some work for defect 7219).
...\" 	[1993/02/19  18:37:35  jeff]
...\" 
...\" Revision 1.1.4.9  1993/02/18  23:07:21  jeff
...\" 	Small change of wording.
...\" 	[1993/02/18  23:06:31  jeff]
...\" 
...\" Revision 1.1.4.8  1993/02/18  16:31:46  jeff
...\" 	Fix for defects 7212, 7149, 6900, 6730, and 4101.
...\" 	[1993/02/18  16:30:09  jeff]
...\" 
...\" Revision 1.1.4.7  1993/02/06  01:23:28  jeff
...\" 	Fixed a small formatting mistake (a comma in the intro
...\" 	comments); sorry.
...\" 	[1993/02/06  01:23:02  jeff]
...\" 
...\" Revision 1.1.4.6  1993/02/05  20:18:25  jeff
...\" 	Fix for defect 7135, change key file to keytab file.
...\" 	[1993/02/05  20:14:15  jeff]
...\" 
...\" Revision 1.1.4.5  1993/01/28  19:05:16  dbelch
...\" 	Embedding copyright notice
...\" 	[1993/01/28  18:29:10  dbelch]
...\" 
...\" Revision 1.1.4.4  1993/01/27  21:08:58  buckler
...\" 	Fixed cross-refs and figure calls for new book org
...\" 	[1993/01/27  21:06:28  buckler]
...\" 
...\" Revision 1.1.4.3  1993/01/24  19:47:01  jeff
...\" 	Fix for defect 6988, add permissions for binary and
...\" 	script execution; also converted tables to TBL.
...\" 	[1993/01/24  19:46:26  jeff]
...\" 
...\" Revision 1.1.4.2  1992/08/26  12:09:34  weir
...\" 	Removed change bars
...\" 	[1992/08/26  11:51:54  weir]
...\" 
...\" Revision 1.1.2.8  1992/07/04  15:36:56  jeff
...\" 	Documented that inclusion in the fxd group and being root
...\" 	are not the same.
...\" 	[1992/07/04  15:36:26  jeff]
...\" 
...\" Revision 1.1.2.7  1992/07/03  21:46:46  jeff
...\" 	Updated initial creation ACL and other information.
...\" 	[1992/07/03  21:46:15  jeff]
...\" 
...\" Revision 1.1.2.6  1992/07/02  22:44:50  jeff
...\" 	Text now states that user_obj always has the c permission.
...\" 	[1992/07/02  22:44:20  jeff]
...\" 
...\" Revision 1.1.2.5  1992/07/02  18:58:08  jeff
...\" 	Changed required permissions and small editorial things.
...\" 	[1992/07/02  18:56:23  jeff]
...\" 
...\" Revision 1.1.2.4  1992/06/25  23:23:08  jeff
...\" 	Removed obsolete chmod restriction for DCE LFS objects.
...\" 	[1992/06/25  23:22:36  jeff]
...\" 
...\" Revision 1.1.2.3  1992/06/09  17:45:58  jeff
...\" 	Included information about NULL initial ACLs of the root
...\" 	directory of a fileset and suggestions for how to set the
...\" 	ACLs.
...\" 	[1992/06/09  17:43:39  jeff]
...\" 
...\" 	Clarified the description of the DCE pathname used to
...\" 	specify a machine name.
...\" 	[1992/06/07  01:45:04  jeff]
...\" 
...\" Revision 1.1.2.2  1992/05/12  15:55:27  jeff
...\" 	Verified and/or modified italics and other editorial
...\" 	aspects of the file.
...\" 	[1992/05/12  14:43:57  jeff]
...\" 
...\" Revision 1.1  1992/01/29  16:14:41  damon
...\" 	Initial revision
...\" 
...\" $EndLog$
...\"
...\" (c) Copyright 1991, Open Software Foundation, Inc.  ALL RIGHTS RESERVED
..."Copyright (C) 1989, 1991, Transarc Corporation
..."The Gulf Tower
..."707 Grant Street
..."Pittsburgh, PA  15219
...\" CHANGED
...\" 12-09-91:  Added "group:" before four examples.
...\" 12-09-91:  Removed 28 extraneous hyphens.
...\" 12-09-91:  Added one space tp an example.
...\" 12-09-91:  Removed two spaces from an example.
...\" 12-11-91:  Section 3.1.4:  Made a fair amount of edits, all of them
...\"            technical, to the entire section.
...\" END CHANGED
.H 1 "Using ACLs and Groups "
.iX "-[" "access control lists (ACLs)" "for files and directories"
.iX "-[" "files" "protecting"
.iX "-[" "directories" "access control (DFS)"
.P
This chapter summarizes the use of DCE Access Control Lists (ACLs) with DFS.
DCE ACLs allow you to specify access to files and directories for individuals
and groups of users.  DCE ACLs can be used to protect files and directories
stored in DCE LFS filesets. (See the Security Service portion of the \*(Ac
for details about manipulating DCE ACLs.)
.P
This chapter also presents information about groups.  In addition to using
groups in ACLs, you can use groups in DFS administrative lists to specify the
users who are allowed to issue commands that affect filesets and server
processes.  In this manner, you can precisely control the security of the
administrative domains in your cell. (See Chapter 4 for complete details about
using administrative lists; see the Security Service portion of the \*(Ac for
information about creating and maintaining groups.)
.nS "note"
The information in this chapter applies only to ACLs used with data stored in
DCE LFS filesets.  It does not apply to ACLs used with other DCE components.
Differences exist between the use of DCE ACLs with DCE LFS objects and the
use of DCE ACLs with other DCE components.
.nE
.H 2 "Using DCE ACLs with DFS"
.P
In the UNIX operating system, mode bits provide file system protection for
file and directory objects (the general term "object" refers to a file or a
directory).  The access permissions for files and directories are set for three
kinds of users: the user who owns the object, members of the group that owns
the object, and all other users.  The operations that these users can perform
are determined by read, write, and execute mode bits.
.P
All file and directory objects in DCE LFS filesets also have mode bits.
However, the protection of such files and directories can be augmented with
DCE ACLs, which allow access permissions to be defined for many different
users and groups.  With DCE ACLs, you can grant users six different permissions
for your directories and four different permissions for your files.  These
permissions allow for the precise definition of access to directories and
files.
.P
DCE ACLs supplement the UNIX mode bits that are used to protect files and
directories in DCE LFS filesets; they do not replace them.  DCE LFS ensures
that an object's mode bits and its ACL permissions are always synchronized.
Note that objects in DCE LFS filesets can rely exclusively on mode bits as
their sole form of protection. (See Sections 3.1.5 and 3.1.6 for more
information about this possibility; see Section 3.1.4 for a description of
the interaction and level of compatibility between DCE ACLs and UNIX mode
bits.)
.P
DCE ACLs are used only with objects in DCE LFS filesets. Mode bits are the
only form of protection for objects in most non-LFS filesets.
.H 3 "ACL Entries"
.iX "-[" "access control lists (ACLs)" "format of entries"
.P
The DCE ACL for a file or directory object consists of multiple ACL entries.
Each ACL entry defines the operations that a different user or group can
perform on the object.  Each entry has the following format:
.oS
\*L{\*Vtype\*O [\*Vkey\*O] \*Vpermissions\*L}\*O
.oE
The elements of an entry provide the following information:
.ML
.LI
The \*Vtype\*O specifies the kind of user or group to which the entry applies.
.LI
The \*Vkey\*O names the specific user or group to which the entry applies.
Some entries apply to predefined collections of users and so do not include
a key.
.LI
The \*Vpermissions\*O define the operations that can be performed on the object
by the user or group to which the entry applies.  ACLs on DCE LFS objects can
include six access permissions: \*Lr\*O (read), \*Lw\*O (write), \*Lx\*O
(execute), \*Lc\*O (control), \*Li\*O (insert), and \*Ld\*O (delete).
.LE
.P
An ACL entry is also used to define a mask that can be included on an ACL to
limit the permissions granted by certain other entries.  The following
subsections provide more detailed information about the various ACL entry
types and keys and the permissions they can grant.
.nS "note"
Although the text of this chapter refers primarily to ACL entries for users
and groups, an ACL entry can apply to any principal (for example, to a server
principal).
.nE
.H 4 "ACL Entry Types for Users and Groups"
.iX "-[" "access control lists (ACLs)" "entry types"
.iX "-[" "access control lists (ACLs)" "default cell"
.P
Most ACL entry types are used to specify the permissions granted to users and
groups.  To fully understand how ACL entries for users and groups are defined
and interpreted, you need to understand the concept of an ACL's default cell.
Recall that a user's local, or home, cell is the cell in whose Registry
Database the user's principal and account are defined.  Just as each user has
a local cell, each ACL has a default cell.
.P
An ACL's default cell names the cell with respect to which the ACL's entries
are defined.  A user or group named in an ACL entry is assumed to be from the
default cell unless the entry explicitly names a different cell.  The default
cell is not necessarily the cell in which the ACL exists.  For example, an
object in cell \*Labc.com\*O can have an ACL whose default cell is
\*Ldef.com\*O.  With respect to ACLs, a local user is one whose local cell is
the same as the default cell of an ACL; conversely, a foreign user is one
whose default cell is different from the default cell of an ACL.
.P
Table 3-1 lists the different types of ACL entries, their use of entry keys,
and the users and groups to which they apply.  As necessary, the table provides
information about how an ACL's default cell affects the interpretation of the
entry.
.br
.TB "ACL Entry Types for Users and Groups"
.TS H
center, tab(@), allbox;
lB | lB | lB 
lB | lw(1.25i) | lw(1.8i).
Type@Key@Applies to
_
.TH
user_obj@T{
None
T}@T{
The user who owns the object.  The user is from the default cell.
T}
user@T{
\*Vusername\*O
T}@T{
The user \*Vusername\*O from the default cell.
T}
foreign_user@T{
\*Vcell_name\*L/\*Vusername\*O
T}@T{
The user \*Vusername\*O from the foreign cell \*Vcell_name\*O.
T}
group_obj@T{
None
T}@T{
Members of the group that owns the object.  The group is from the default cell.
T}
group@T{
\*Vgroup_name\*O
T}@T{
Members of the group \*Vgroup_name\*O from the default cell.
T}
foreign_group@T{
\*Vcell_name\*L/\*Vgroup_name\*O
T}@T{
Members of the group \*Vgroup_name\*O from the foreign cell \*Vcell_name\*O.
T}
other_obj@T{
None
T}@T{
Users from the default cell who do not match any of the preceding entries.
T}
foreign_other@T{
\*Vcell_name\*O
T}@T{
Users from the foreign cell \*Vcell_name\*O who do not match any of the
preceding entries.
T}
any_other@T{
None
T}@T{
Users from any foreign cell who do not match any of the preceding entries.
T}
.TE
.sp .5
.nL
.ne 10
.P
The default cell of an ACL, not the cell in which the ACL resides, determines
the cell with respect to which the following entry types are defined:
.ML
.LI
\*Luser_obj\*O
.LI
\*Luser\*O
.LI
\*Lgroup_obj\*O
.LI
\*Lgroup\*O
.LI
\*Lother_obj\*O
.LE
.P
For instance, a \*Luser\*O entry specifies the permissions for a user whose
local cell is the same as the default cell of an ACL.  Whereas the entry types
in the previous list refer to users and groups whose local cell is the same as
an ACL's default cell, the \*Lforeign_user\*O, \*Lforeign_group\*O,
\*Lforeign_other\*O, and \*Lany_other\*O entry types refer to users and groups
whose local cells are different from an ACL's default cell.  For instance, a
\*Lforeign_user\*O entry specifies the permissions for a user whose local
cell is different from the default cell of an ACL. (Note that \*Lforeign_\*O
entries can exist for users or groups from the default cell.  See Section
3.1.5.1 for more information about an ACL's default cell, how it is listed,
and how it is set.)
.P
Some examples of ACL entries for users and groups follow:
.VL 10
.LI "\*L{user_obj \*Vpermissions\*L}\*O"
.P
Defines the permissions for the user who owns the object. The user is from the
default cell.
.LI "\*L{user frost \*Vpermissions\*L}\*O"
.P
Defines the permissions for the user named \*Lfrost\*O from the default cell.
.LI "\*L{group writers \*Vpermissions\*L}\*O"
.P
Defines the permissions for the group named \*Lwriters\*O from the default
cell.
.LI "\*L{foreign_user /.../abc.com/wvh \*Vpermissions\*L}\*O"
.P
Defines the permissions for the user named \*Lwvh\*O from the foreign cell
named \*Labc.com\*O.
.nL
.ne 10
.LI "\*L{foreign_group /.../abc.com/writers \*Vpermissions\*L}\*O"
.P
Defines the permissions for the group named \*Lwriters\*O from the foreign cell
named \*Labc.com\*O.
.LE
.iX "-]" "access control lists (ACLs)" "default cell"
.P
The following rules govern the appearance of entries for users and groups on
the ACLs of DCE LFS objects:
.ML
.LI
The \*Luser_obj\*O, \*Lgroup_obj\*O, and \*Lother_obj\*O entries must exist;
all other entry types for users and groups are always optional.
.LI
Only one entry of the same specificity (the same entry type and, if applicable,
the same key) can exist on an ACL; for example, only one \*Luser\*O entry can
exist for a given \*Vusername\*O from the default cell.
.LE
.nS "note"
The first rule applies only to ACLs on DCE LFS objects, not to ACLs on objects
associated with other DCE components.  DCE LFS enforces these restrictions in an
effort to track Draft 12 of the POSIX standard for ACLs on file and directory
objects. (POSIX is a prominent collection of standards specifications for the
computer industry.)
.nE
.H 4 "ACL Entry Types for Masks"
.iX "-[" "permissions" "filtering and accrual"
.P
DCE ACLs also provide a \*Lmask_obj\*O entry type that can be used to filter,
or mask, the permissions granted by certain user and group entries.  The ACL
\*Lmask_obj\*O entry has the following format:
.oS
\*L{mask_obj \*Vpermissions\*L}\*O
.oE
.P
The \*Lmask_obj\*O entry specifies the maximum set of permissions that can be
granted by any entries \*Eexcept\*O the \*Luser_obj\*O and \*Lother_obj\*O
entries.  Permissions granted by any other entries are filtered through the
\*Lmask_obj\*O; only those permissions found in both the entry and the
\*Lmask_obj\*O are granted.
.nL
.ne 20
.P
The \*Lmask_obj\*O entry can only restrict the permissions granted by another
entry; it cannot extend them.  When DCE LFS determines the permissions granted
to a user by an entry to which the \*Lmask_obj\*O applies, it compares the
permissions granted by the applicable entry with those permitted by the
\*Lmask_obj\*O entry.  DCE LFS denies the user a permission granted by the
applicable entry if the permission is not included in the permission set
specified with the \*Lmask_obj\*O entry.  DCE LFS does not grant the user a
permission specified with the \*Lmask_obj\*O entry but not with the applicable
entry.
.P
If an entry other than \*Luser_obj\*O, \*Lgroup_obj\*O, or \*Lother_obj\*O
exists on an ACL, the \*Lmask_obj\*O entry must exist as well.  If a
\*Lmask_obj\*O entry does not already exist when an entry other than an
\*L_obj\*O entry is created, the \*Ldcecp acl\*O command, which is used to
modify an ACL, automatically creates one.  Note that the \*Lmask_obj\*O entry
filters the permissions granted to the \*Lgroup_obj\*O entry, but an ACL can
have a \*Lgroup_obj\*O entry without having a \*Lmask_obj\*O entry.
.nS "note"
The rule that requires the presence of the \*Lmask_obj\*O entry with an entry
other than an \*L_obj\*O entry applies only to ACLs on DCE LFS objects, not to
ACLs on objects associated with other DCE components.  DCE LFS enforces this
restriction in an effort to track Draft 12 of the POSIX standard for ACLs on
file and directory objects.
.nE
.H 4 "ACL Entry Types for Unauthenticated Users"
.P
An unauthenticated user is one whose DCE identity has not been verified by
the DCE Security Service.  For example, a user can access DCE without being
authenticated by logging into the local machine without logging into DCE.  In
this case, the user is said to be unauthenticated because DCE cannot verify
the user's identity.  An authenticated user whose DCE credentials have expired
is also considered an unauthenticated user.
.P
When a user attempts to access an object, DFS first determines whether the
user is authenticated.  For access to an object in a DCE LFS fileset, an
authenticated user acquires the permissions associated with the user's
authenticated identity according to the normal ACL evaluation routine. (See
Section 3.1.2 for a description of ACL evaluation.) An unauthenticated user's
permissions are determined as follows:
...\" .nL
...\" .ne 10
.AL
.LI
DFS uses the identity \*Lnobody\*O as the identity of the user; it treats the
identity as an authenticated user from a nonexistent foreign cell.
.P
.iX "access control lists (ACLs)" "\*Lnobody\*O"
.iX "access control lists (ACLs)" "\*Lnogroup\*O"
.iX "\*Lnobody\*O"
.iX "\*Lnogroup\*O"
DFS assigns the identity \*Lnobody\*O to all unauthenticated users, treating
the identity as an authenticated user from an unknown foreign cell, regardless
of the cell from which an unauthenticated user requests access to an object.
DFS uses a fictitious cell as the local cell of the identity \*Lnobody\*O; an
entry for the fabricated cell cannot be created on an ACL.  The primary group
of the identity \*Lnobody\*O is the group \*Lnogroup\*O.  The user ID of the
identity \*Lnobody\*O and the group ID of the group \*Lnogroup\*O are both
typically \*L-2\*O.  However, these IDs can vary between File Server machines.
.LI
DCE LFS grants the user the permissions associated with the \*Lany_other\*O
entry.
.P
Because the user \*Lnobody\*O is treated as a user from a \*Enonexistent\*O
foreign cell, the user \*Ecannot\*O match any \*Lforeign_\*O entries
(\*Lforeign_user\*O, \*Lforeign_group\*O, or \*Lforeign_other\*O).  The user
is therefore granted the permissions associated with the \*Lany_other\*O
entry.  If an \*Lany_other\*O entry is not present on the ACL, the user has no
permissions.  To prevent unauthenticated users from acquiring permissions for
an object, do not include an \*Lany_other\*O entry on the object's ACL.
.LE
.P
For access to objects in non-LFS filesets, unauthenticated users (regardless
of their cells) and all foreign users (authenticated or unauthenticated) are
treated as the user \*Lnobody\*O.  As a result, such users are granted the
permissions associated with the \*Lother\*O UNIX mode bits.  Note that
authenticated users from foreign cells are granted the permissions associated
with their authenticated foreign identities when they access objects in DCE
LFS filesets.
.nS "note"
.iX "\*Lunauthenticated\*O entry type" "removing"
DCE ACLs used with objects for other DCE components include an additional
\*Lunauthenticated\*O entry type that masks the permissions that can be
granted to unauthenticated users.  Prior to DCE Version 1.1, DCE LFS allowed
\*Lunauthenticated\*O entries to be included on the ACLs of DCE LFS
objects, but it ignored the entries when determining users' permissions.
.nL
.ne 20
.P
As of DCE Version 1.1, DCE LFS no longer allows \*Lunauthenticated\*O entries to
be included on the ACLs of DCE LFS objects.  It is possible for the ACLs of
existing objects to include \*Lunauthenticated\*O entries added with earlier
versions of DCE LFS.  DCE LFS continues to ignore existing \*Lunauthenticated\*O
entries when determining permissions.
.P
However, an ACL that includes an \*Lunauthenticated\*O entry cannot be modified
until the entry is removed from the ACL.  An attempt to make any other change
to the ACL fails until the entry is removed.  You can use the \*Ldcecp acl
modify\*O command with the \%\*L-remove\*O option to remove an
\*Lunauthenticated\*O entry from an ACL.
.P
To prevent potential failures, you may want to remove \*Lunauthenticated\*O
entries from the ACLs of all DCE LFS objects.  Moving or restoring a DCE LFS
fileset to a File Server machine that is running DCE Version 1.1 or a later version of
DCE automatically removes \*Lunauthenticated\*O entries from the ACLs of all
objects in the fileset.  You can also write a script that removes the entries
from the ACLs of all DCE LFS objects in your cell.
.nE
.iX "-]" "access control lists (ACLs)" "entry types"
.H 4 "ACL Permissions"
.iX "-[" "permissions" "for file and directory operations"
.P
Each ACL entry for a user or group includes a set of permissions that defines
the operations it grants to the user or users to whom it applies.  For a
\*Lmask_obj\*O entry, the permissions define the maximum set of permissions
that are allowed by the mask.  Each entry can be assigned a different set of
permissions.
.P
The following permissions can be associated with an entry on an ACL for a file
or directory in a DCE LFS fileset.  All six permissions apply to a directory,
but only the first four apply to a file; the insert and delete permissions are
meaningless for files.
.nL
.ne 10
.ML
.LI
\*Lr\*O (read)
.LI
\*Lw\*O (write)
.LI
\*Lx\*O (execute)
.LI
\*Lc\*O (control)
.LI
\*Li\*O (insert)
.LI
\*Ld\*O (delete)
.LE
.P
Table 3-2 lists the various operations that can be performed on a file or
directory and the ACL permissions that are required to perform them.  As the
table indicates, all operations performed on a file or directory object require
the \*Lx\*O (execute) permission on each directory that leads to the object.
Keep this requirement in mind when determining the permissions necessary to
perform the operations described in the following chapters; not all operations
explicitly list it.
.P
.nS "note"
.iX "execute (\*Lx\*O) permission" "when required" 
A user must have the \*Lx\*O (execute) permission on each directory that leads
to an object to access that object by its pathname.  However, certain file
system operations, such as the creation of hard links and mount points, can
circumvent this restriction by supplanting the usual traversal of the pathname.
To guarantee that an object is securely protected, set its permissions to the
precise protections you want it to have.  Do not rely on the absence of the
\*Lx\*O permission for a parent directory to prevent unwanted access of an
object.
.nE
.nL
.ne 20
.br
.TB "File and Directory Operations and Required ACL Permissions"
.TS H
center, allbox, tab(@);
lB | lB
lw(1.75i) | lw(3.25i).
Operation@Required Permissions
_
.TH
T{
Change to a directory
T}@T{
\*Lx\*O on the directory itself
.br
\*Lx\*O on all directories that lead to the directory
T}
T{
List the contents of a directory
T}@T{
\*Lr\*O on the directory itself
.br
\*Lx\*O on all directories that lead to the directory
T}
T{
List information about the objects in a directory
T}@T{
\*Lr\*O and \*Lx\*O on the directory itself
.br
\*Lx\*O on all directories that lead to the directory
T}
T{
Create an object
T}@T{
\*Lw\*O, \*Lx\*O, and \*Li\*O on the directory in which the object is to be
placed
.br
\*Lx\*O on all directories that lead to the directory in which the object is
to be placed
T}
T{
Delete an object
T}@T{
\*Lw\*O, \*Lx\*O, and \*Ld\*O on the directory from which the object is to be
deleted
.br
\*Lx\*O on all directories that lead to the directory from which the object is
to be deleted
T}
T{
Rename an object
T}@T{
\*Lw\*O, \*Lx\*O, and \*Ld\*O on the object's current directory
.br
\*Lx\*O on all directories that lead to the object's current directory
T}
T{

T}@T{
\*Lw\*O, \*Lx\*O, and \*Li\*O on the object's new directory
.br
\*Lx\*O on all directories that lead to the object's new directory
T}
T{

T}@T{
\*Lw\*O on the object \*Eif the object is a directory\*O
T}
T{
Read or read lock a file
T}@T{
\*Lr\*O on the file itself
.br
\*Lx\*O on all directories that lead to the file
T}
T{
Write or write lock a file
T}@T{
\*Lw\*O on the file itself
.br
\*Lx\*O on all directories that lead to the file
T}
T{
Execute a binary file
T}@T{
\*Lx\*O on the file itself
.br
\*Lx\*O on all directories that lead to the file
T}
T{
Execute a shell script
T}@T{
\*Lr\*O and \*Lx\*O on the script itself
.br
\*Lx\*O on all directories that lead to the script
T}
T{
List the ACLs on an object
T}@T{
\*Lx\*O on all directories that lead to the object
T}
T{
Change the ACLs on an object
T}@T{
\*Lc\*O on the object itself
.br
\*Lx\*O on all directories that lead to the object
T}
.TE
.sp .5
.iX "files" "required permissions (table)" 
.iX "directories" "required permissions (table)"
.nS "note"
In Table 3-2, the operation "List the contents of a directory" refers to
displaying a simple list of the objects in a directory (for example, using
the UNIX \*Lls\*O command with no flags or using the \*Lls -a\*O command).
The operation "List information about the objects in a directory" refers to
obtaining more detailed information about the objects in a directory, such as
each object's mode bits or the time of its most recent update (for example,
using the UNIX \*Lls -l\*O or \*Lls -t\*O command).
.P
Also, if you rename an object to have the name of an existing object, the
object that exists with that name is deleted.  In this case, you do not need
the \*Ld\*O permission on the parent directory of the existing object to be
deleted.
.nE
.P
For example, suppose the user \*Lrajesh\*O needs to execute the DFS \*Lfms\*O
command.  The command writes output to a log file named \*LFMSLog\*O, which it
places in the directory from which it is issued.  To create the file in a
directory, \*Lrajesh\*O must have the \*Lw\*O (write), \*Lx\*O (execute), and
\*Li\*O (insert) permissions on the directory from which the command is issued,
as well as the \*Lx\*O (execute) permission on each directory that leads to
the directory.
.P
The following example ACL entry grants \*Lrajesh\*O the \*Lw\*O, \*Lx\*O, and
\*Li\*O permissions on the directory from which the command is issued.  Each
\*L-\*O (dash) indicates a permission that is not granted.  Because a full
permission set is \*Lrwxcid\*O, this entry does not grant the \*Lr\*O (read),
\*Lc\*O (control), and \*Ld\*O (delete) permissions.
.oS
\*C{user rajesh -wx-i-}\*O
.oE
.P
The following example ACL entry grants the user the execute permission on
a directory that leads to the directory:
.oS
\*C{user rajesh --x---}\*O
.oE
.iX "-]" "access control lists (ACLs)" "format of entries"
.iX "-]" "permissions" "for file and directory operations"
.H 3 "ACL Evaluation"
.iX "-[" "access control lists (ACLs)" "checking sequence"
.iX "-[" "access control lists (ACLs)" "evaluation sequence"
.P
When a user tries to perform an operation on an object, DCE LFS examines the
object's ACL to determine whether the user is granted the necessary permissions
by an entry on the ACL.  For example, to read a file, a user must be granted the
read permission on the file (as well as the execute permission on each
directory that leads to the file).
.P
To determine a user's permissions for an object, DCE LFS evaluates the entries
on the object's ACL according to the checking sequence described in the
following list.  DCE LFS stops evaluating the entries as soon as the user
matches a condition described in the list.  Evaluation proceeds to a condition
in the checking sequence only if the user fails to match all of the previous
conditions. (See Table 3-1 for a description of the ACL entry types referred
to in the following list.)
.iX "-[" "\*Lmask_obj\*O entry type" "checking sequence"
.AL
.LI
.iX "\*Luser_obj\*O entry type" "checking sequence"
The user owns the object.  DCE LFS grants the user the permissions specified
with the \*Luser_obj\*O entry.  The permissions are \*Enot\*O filtered through
the \*Lmask_obj\*O entry.  Note that the \*Luser_obj\*O entry always explicitly
has the \*Lc\*O permission; the \*Lc\*O permission cannot be removed from the
\*Luser_obj\*O entry.
.LI
.iX "\*Luser\*O entry type" "checking sequence"
.iX "\*Lforeign_user\*O entry type" "checking sequence"
A \*Luser\*O or \*Lforeign_user\*O entry exists for the user.  DCE LFS grants
the user the permissions specified with the entry after filtering the
permissions through the \*Lmask_obj\*O entry.
.LI
.iX "\*Lgroup_obj\*O entry type" "checking sequence"
.iX "\*Lgroup\*O entry type" "checking sequence"
.iX "\*Lforeign_group\*O entry type" "checking sequence"
The user belongs to the group that owns the object (the owning group's
permissions are specified with the \*Lgroup_obj\*O entry) or to any other
groups that have \*Lgroup\*O or \*Lforeign_group\*O entries.  If one or more
group-related entries on the ACL apply, DCE LFS grants the user all of the
permissions accrued from the applicable group entries after filtering the
permissions through the \*Lmask_obj\*O entry, if it exists.  The user accrues
permissions from all of the groups to which the user belongs.
.LI
.iX "\*Lother_obj\*O entry type" "checking sequence"
The user is from the default cell.  DCE LFS grants the user the permissions
specified with the \*Lother_obj\*O entry.  The permissions are \*Enot\*O
filtered through the \*Lmask_obj\*O entry.
.LI
.iX "\*Lforeign_other\*O entry type" "checking sequence"
The user belongs to a foreign cell that has a \*Lforeign_other\*O entry.  DCE
LFS grants the user the permissions specified with the entry for that cell
after filtering the permissions through the \*Lmask_obj\*O entry.
.LI
.iX "\*Lany_other\*O entry type" "checking sequence"
The user is from a foreign cell that does not have a \*Lforeign_other\*O entry.
DCE LFS grants the user the permissions specified with the \*Lany_other\*O
entry, if it exists, after filtering the permissions through the \*Lmask_obj\*O
entry.
.LI
The user matches no entry.  DCE LFS denies the user access to the object.
.LE
.iX "-]" "\*Lmask_obj\*O entry type" "checking sequence"
.P
Before DCE LFS evaluates a user's permissions, DFS first determines whether the
user is authenticated.  If the user is authenticated, ACL evaluation proceeds as
described in the previous list.  If the user is not authenticated, DFS assigns
the user the identity \*Lnobody\*O and treats the identity as a foreign user
from an unknown cell, regardless of the cell from which the unauthenticated
user requests access to the object.  ACL evaluation based on the identity
\*Lnobody\*O then proceeds accordingly.
.P
When DCE LFS evaluates an ACL, it evaluates the more-specific entries before
it evaluates the less-specific entries.  Thus, the permissions granted to a
group are applied to a user who is a member of the group only if the user is
not granted permissions via the \*Luser_obj\*O entry or a \*Luser\*O or
\*Lforeign_user\*O entry.  If an individual is granted one set of permissions
as a user and another, wider set of permissions as a group member, the
additional permissions granted to the group are not recognized; DCE LFS stops
checking the ACL once it encounters the more-specific user-related entry.
.P
For example, suppose user \*Ldale\*O belongs to a group that has the read and
write permissions on a file through the \*Lgroup_obj\*O entry on the file's
ACL.  Suppose further that \*Ldale\*O is also specified in a \*Luser\*O entry
that grants only the read permission.  The relevant entries from the ACL follow
(assume the \*Lmask_obj\*O entry permits the \*Lr\*O and \*Lw\*O permissions):
.oS
\*C{user dale r-----}
{group_obj rw----}\*O
.oE
.P
Because the more-specific \*Luser\*O entry is evaluated before the
\*Lgroup_obj\*O entry, DCE LFS denies \*Ldale\*O write access for the file.
.nS "note"
A user can match both the \*Luser_obj\*O entry and a \*Luser\*O or
\*Lforeign_user\*O entry; in this case, the user is granted permissions
from only the \*Luser_obj\*O entry.  Similarly, a group can match both the
\*Lgroup_obj\*O entry and a \*Lgroup\*O or \*Lforeign_group\*O entry; in
this case, however, members of the group accrue permissions from both entries.
.nE
.iX "-]" "permissions" "filtering and accrual" 
.H 4 "ACL Evaluation for Local Access"
.iX "access control lists (ACLs)" "local access"
.P
If your vendor has properly configured your local operating system's
\*Lmount\*O command (or its equivalent), you can mount a DCE LFS fileset
locally, as a file system on its File Server machine.  You can access an object
in a locally mounted DCE LFS fileset via a local pathname, as well as via a
DCE pathname.  The same ACL evaluation algorithm is used to determine your
permissions in either case.  However, if your local identity is different from
your DCE identity, the permissions you receive when you access the object via
its local pathname are those associated with your local identity, but the
permissions you receive for access via the object's DCE pathname are those
associated with your DCE identity.  This is also true of objects in non-LFS
filesets.
.P
For example, suppose you log into the local machine as the \*Lroot\*O user and
then authenticate to DCE as your DCE identity.  In this case, if you access an
object via its local pathname, you receive \*Lroot\*O permissions for the
object; if you access the same object via its DCE pathname, you receive the
permissions associated with your DCE identity.
.P
.iX "access control lists (ACLs)" "\*Lroot\*O permissions"
.iX "access control lists (ACLs)" "\*Lself\*O permissions"
.iX "\*Lself\*O principal" "ACL permissions"
.iX "\*Lroot\*O" "ACL permissions"
If you log into the local machine as \*Lroot\*O without authenticating to DCE,
you assume the identity of the local machine's
\*L/.../\*Vcellname\*L/hosts/\*Vhostname\*L/self\*O principal for DCE access.
If you access an object via its local pathname, you receive \*Lroot\*O
permissions; however, if you access the object via its DCE pathname, you
receive the permissions associated with the \*Lself\*O identity of the local
machine.  To allow processes running as \*Lroot\*O on a machine (for example,
\*Lcron\*O jobs) to access an object via its DCE pathname, you can include an
entry for the machine's \*Lself\*O identity on the ACL of the object.  The
\*Lself\*O identity can also receive permissions from a group to which it
belongs or from the \*Lother_obj\*O entry (because it is treated as an
authenticated user from the local cell).
.iX "-]" "access control lists (ACLs)" "checking sequence"
.iX "-]" "access control lists (ACLs)" "evaluation sequence"
.H 3 "Setting and Examining ACLs"
.P
.iX "\*Ldcecp acl\*O command" "about"
The \*Ldcecp acl\*O command is used to list and modify the ACLs of DCE LFS
objects.  In most respects, the operation of the \*Ldcecp acl\*O command with
DCE LFS objects parallels its use with other types of DCE objects, as follows:
.ML
.LI
To list the entries on an ACL for a file or directory, use the \*Ldcecp acl
show\*O command.  To list an object's ACL, you must have the \*Lx\*O (execute)
permission on the directory in which the object resides, as well as on all
directories that lead to that directory.
.LI
To modify an entry on an ACL for a file or directory, use the \*Ldcecp acl
modify\*O command with one of the following options: \*L-add\*O, \*L-change\*O,
\*L-remove\*O, or \*L-purge\*O.  You can also use the \*Ldcecp acl delete\*O and
\*Ldcecp acl replace\*O commands to modify an ACL.  To modify an object's ACL,
you must have the \*Lc\*O (control) permission for the object, as well as the
\*Lx\*O (execute) permission on each directory that leads to the object.
.LE
.P
Because the \*Luser_obj\*O entry always has the control permission, you can
always modify the ACL of an object that you own (an object for which the
\*Luser_obj\*O entry applies to you).  To determine if you have the control
permission for an object that you do not own, use the \*Ldcecp acl show\*O
command to display the object's ACL.  You can also use the \*Ldcecp acl
check\*O command to display your permissions for an object.
.P
The following subsections provide information about modifying ACLs on DCE LFS
objects, including brief examples of using the \*Ldcecp acl\*O command to list
and modify a directory's ACL. (See the Security Service portion of the \*(Ac
for complete details about using the command to set and examine an object's
ACLs.)
.H 4 "Rules for Modifying ACLs"
.iX "access control lists (ACLs)" "rules for modifying"
.P
A number of rules restrict the changes you can make to the ACL of a file or
directory in a DCE LFS fileset.  The following rules apply only to DCE LFS file
and directory objects:
.nL
.ne 20
.ML
.LI
The \*Luser_obj\*O, \*Lgroup_obj\*O, and \*Lother_obj\*O entries must always
exist.  All other entry types are always optional.
.LI
The \*Lmask_obj\*O entry must exist if an entry other than \*Luser_obj\*O,
\*Lgroup_obj\*O, or \*Lother_obj\*O exists.  If the \*Lmask_obj\*O entry does
not already exist when an entry other than an \*L_obj\*O entry is created,
the \*Ldcecp acl\*O command automatically creates it.
.LI
The \*Luser_obj\*O entry must always explicitly retain the \*Lc\*O permission.
This requirement prevents the owner of an object from being denied access to
it; the owner can always grant himself or herself additional permissions.
.LE
.P
These rules restrict your use of the \*Ldcecp acl\*O command.  Namely, if a
single \*Ldcecp acl modify\*O command modifies an ACL in a way that violates
any of these restrictions, the command must include additional changes that
reinstate the necessary entries or permissions.  A single instance of the
\*Ldcecp acl modify\*O command cannot be used to effect a set of changes that
violates these restrictions.  The \*Ldcecp acl delete\*O and \*Ldcecp acl
replace\*O commands can also never be used to violate these restrictions.
The \*Ldcecp acl\*O command makes changes to an ACL in the order in which
the changes are specified on the command line; for a given \*Ldcecp acl\*O
command and a given ACL, either all of the changes indicated by the command
are applied or none of the changes are applied.
.P
Finally, recall that only one entry of the same specificity can exist on
an ACL; for example, only one \*Luser\*O entry can exist for a given
\*Vusername\*O.  Permissions you assign to an entry when you issue the \*Ldcecp
acl modify\*O command with the \%\*L-change\*O option \*Ereplace\*O the existing
permissions associated with the entry; the specified permissions are not added
to the existing permissions.  If you want a user or group to retain the
permissions already granted, you must include those permissions with the entry
that you specify with the command. (Note that a \*Ldcecp acl modify\*O command
that includes the \*L\-add\*O option fails if the entry to be added already
exists on the ACL.)
.H 4 "Examples of Listing and Modifying an ACL"
.P
.iX "-[" "access control lists (ACLs)" "editing entries"
.iX "access control lists (ACLs)" "viewing"
.iX "-[" "permissions" "restricting (example)"
The examples in this section demonstrate the use of the \*Ldcecp acl\*O command
to list and modify a directory's ACL.  The following example uses the \*Ldcecp
acl show\*O command to display an object's ACL.  The example shows the output of
the command when it is used to display the ACL for the directory \*Ldrafts\*O:
.iS
\*Cdcecp> \*Lacl show /.../abc.com/fs/doc/drafts\*O
.iE
.oS
{mask_obj r-x---}
{user_obj rwxcid}
{user dale rwx-id effective r-x---}
{group_obj rwx--- effective r-x---}
{group writers rwx--- effective r-x---}
{other_obj rwx---}\*O
.oE
.P
The output displays the ACL entries for the object. If an entry's permissions
are restricted by the \*Lmask_obj\*O entry, the permissions that remain after
filtering through the mask are labeled \*Leffective\*O.  In this example, the
permissions (\*Lrwx-id\*O) granted to \*Ldale\*O are restricted by the
\*Lmask_obj\*O entry to \*Lr\*O and \*Lx\*O.  Users belonging to the group
\*Lwriters\*O are, like \*Ldale\*O, restricted to \*Lr\*O and \*Lx\*O access.
The owner of the directory (\*Luser_obj\*O) retains all of the specified
permissions (\*Lrwxcid\*O) because \*Luser_obj\*O is not filtered by
\*Lmask_obj\*O.
.P
Suppose another user, \*Lpierette\*O, needs to have all of the permissions
except \*Lc\*O on the directory.  Suppose further that \*Lpierette\*O is a
member of the group \*Lwriters\*O, which effectively has only the \*Lr\*O and
\*Lx\*O permissions on the directory.  To give \*Lpierette\*O the required
permissions, the following need to be done:
.ML
.LI
A \*Luser\*O entry for \*Lpierette\*O needs to be added to grant the desired
permissions, not all of which are granted to the group \*Lwriters\*O.
.LI
The \*Lmask_obj\*O entry needs to be expanded to allow for the additional
permissions; it currently filters all user and group entries to only the
\*Lr\*O and \*Lx\*O permissions.
.LE
.nL
.ne 20
.P
The following example performs both of these operations with one invocation of
the \*Ldcecp acl modify\*O command.  It uses the \%\*L-add\*O option to add an
entry for \*Lpierette\*O to the ACL.  It also uses the \%\*L-mask\*O option with
the value \*Lcalc\*O to recalculate the permissions granted by the
\*Lmask_obj\*O entry to include those to be granted to \*Lpierette\*O.
Alternatively, the \%\*L-mask\*O option could be used with the value \*Lnocalc\*O
to prevent recalculation of the permissions granted by the \*Lmask_obj\*O
entry, but this would cause the \*Lmask_obj\*O entry to restrict
\*Lpierette\*O's permissions.  The command fails unless one of the two values
is specified with the \%\*L-mask\*O option.
.nS "note"
The \*Ldcecp acl modify\*O command dynamically recalculates the \*Lmask_obj\*O
entry as necessary when new entries are added to an ACL.  By default, it refuses
to readjust the \*Lmask_obj\*O entry if doing so would grant currently masked
permissions to another entry.  In such cases, you must specify the \*Lcalc\*O
or \*Lnocalc\*O value with the \*L\-mask\*O option to direct the command's
actions with respect to the \*Lmask_obj\*O entry.
.nE
.iS
\*Cdcecp> \*Lacl modify /.../abc.com/fs/doc/drafts -add {user pierette rwxid} \\
\*C> \*L-mask calc\*O
.iE
.P
The following example displays the new and modified ACL entries that grant
\*Lpierette\*O all permissions except \*Lc\*O.  Note that expanding the
permissions allowed by the \*Lmask_obj\*O entry increased the permissions
granted to the other entries filtered by the mask.
.iS
\*Cdcecp> \*Lacl show /.../abc.com/fs/doc/drafts\*O
.iE
.oS
\*C{mask_obj rwx-id}
{user_obj rwxcid}
{user dale rwx-id}
{user pierette rwx-id}
{group_obj rwx---}
{group writers rwx---}
{other_obj rwx---}\*O
.oE
.P
Recall that DCE LFS evaluates the more-specific \*Luser\*O entries before it
checks the less-specific entries.  Therefore, \*Lpierette\*O, although a member
of the group \*Lwriters\*O, receives the permissions granted by the
\*Luser pierette\*O entry.  This is true regardless of whether \*Lpierette\*O
is granted more or fewer permissions via the \*Luser\*O entry.
.iX "-]" "access control lists (ACLs)" "editing entries"
.iX "-]" "permissions" "restricting (example)"
.H 3 "ACL Interaction with UNIX Mode Bits"
.iX "-[" "UNIX permissions" "compared to DCE permissions"
.iX "-[" "permissions" "UNIX, interaction with ACLs"
.P
In the UNIX file system, every file and directory object has associated with
it a set of mode bits that provide information about the object.  In addition
to identifying the type of the object (file or directory), the bits define the
permissions granted to three types of users: the user who owns the object,
members of the group that owns the object, and all other system users.  These
mode bits are referred to as the \*Luser\*O, \*Lgroup\*O, and \*Lother\*O
mode bits, respectively.
.P
Each type of user (\*Luser\*O, \*Lgroup\*O, and \*Lother\*O) can be assigned
any combination of the \*Lr\*O, \*Lw\*O, and \*Lx\*O permissions via the
appropriate mode bits.  The operations associated with the bits are similar to
those associated with the same permissions for DCE ACLs.  The mode bits for an
object can be listed with the UNIX \*Lls -l\*O command or its equivalent; they
can be set with the UNIX \*Lchmod\*O command or its equivalent.
.P
.iX "Distributed File Service (DFS)" "protecting non-LFS data"
Because DCE ACLs can be used only with objects in DCE LFS filesets, mode bits
are the only form of protection associated with objects in most non-LFS
filesets.  In DCE LFS filesets, all file and directory objects can have both
UNIX mode bits and DCE ACLs.  Note that all objects always have UNIX mode bits,
but they do not necessarily have ACLs. (See Section 3.1.5 for more details.)
.P
For DCE LFS objects, DCE LFS synchronizes the protections set by an object's
UNIX mode bits with the protections set by its DCE ACL.  It maintains symmetry
between an object's mode bits and its ACL permissions as follows:
.ML
.LI
The \*Luser\*O mode bits are identified with the \*Lr\*O, \*Lw\*O, and \*Lx\*O
permissions of the \*Luser_obj\*O entry.
.LI
The \*Lother\*O mode bits are identified with the \*Lr\*O, \*Lw\*O, and \*Lx\*O
permissions of the \*Lother_obj\*O entry.
.LI
The \*Lgroup\*O mode bits are identified with the \*Lr\*O, \*Lw\*O, and \*Lx\*O
permissions of the \*Lmask_obj\*O entry.  If the \*Lmask_obj\*O entry does not
exist (which is the case with the root directory of a newly created DCE LFS
fileset, for example), the \*Lgroup\*O mode bits are identified with the
\*Lr\*O, \*Lw\*O, and \*Lx\*O permissions of the \*Lgroup_obj\*O entry.  If the
mode bits correspond to the \*Lmask_obj\*O entry, they do not correspond to
the \*Lgroup_obj\*O entry, and vice versa.
.LE
.P
To maintain this correspondence, when you modify an ACL \*L_obj\*O entry
(\*Luser_obj\*O, \*Lmask_obj\*O or \*Lgroup_obj\*O, or \*Lother_obj\*O),
DCE LFS updates the corresponding UNIX mode bits (\*Luser\*O, \*Lgroup\*O, or
\*Lother\*O) to reflect the permissions associated with the \*L_obj\*O entry.
For example, suppose a file's ACL has the following entries:
.oS
\*C{mask_obj r-----}
{user_obj rwxc--}
{group_obj r-x--- effective r-----}
{other_obj ------}\*O
.oE
DCE LFS sets the corresponding UNIX mode bits for the file to make the
\*Luser\*O mode bits \*Lr\*O, \*Lw\*O, and \*Lx\*O and the \*Lgroup\*O mode
bits \*Lr\*O.  These mode bits are displayed with the \*Lls -l\*O command as
follows:
.oS
\*C-rwxr----- 1 dale \ \ \ \ \ \ 3625 Nov 22 11:36 filename\*O
.oE
Suppose you then use the \*Ldcecp acl modify\*O command to modify the ACL to
give the \*Lother_obj\*O entry the \*Lr\*O, \*Lw\*O, and \*Lx\*O permissions
(leaving the other entries unchanged), as follows:
.oS
\*C{mask_obj r-----}
{user_obj rwxc--}
{group_obj r-x--- effective r-----}
{other_obj rwx---}\*O
.oE
DCE LFS adjusts the UNIX mode bits to make the \*Lother\*O mode bits \*Lr\*O,
\*Lw\*O, and \*Lx\*O in accordance with the \*Lother_obj\*O entry.  Displayed
with the \*Lls -l\*O command, the mode bits are now as follows:
.oS
\*C-rwxr--rwx 1 dale \ \ \ \ \ \ 3625 Nov 22 11:36 filename\*O
.oE
.iX "\*Lchmod\*O command"
Similarly, if you use the UNIX \*Lchmod\*O command to modify the mode bits
associated with an object, DCE LFS reconciles the corresponding ACL entries
accordingly.  Thus, DCE LFS ensures that the mode bits and ACL permissions of
an object always agree.
.nL
.ne 10
.P
It is worth noting that, for an executable file (for example, a binary file)
to be executed, the \*Lx\*O mode bit must be assigned to one or more of
\*Luser\*O, \*Lgroup\*O, or \*Lother\*O.  If one of these sets of mode bits
does not include the \*Lx\*O mode bit, no one can execute the file, not even
the \*Lroot\*O user.  For an executable file that has an ACL, this means that
at least one of the following ACL entries must have the \*Lx\*O permission for
the file to be executed: \*Luser_obj\*O, \*Lmask_obj\*O (or \*Lgroup_obj\*O,
if the \*Lmask_obj\*O entry does not exist on the ACL), or \*Lother_obj\*O.
.iX "-]" "permissions" "UNIX, interaction with ACLs"
.iX "-]" "UNIX permissions" "compared to DCE permissions"
.H 3 "Initial Protection of a New File or Directory"
.iX "-[" "access control lists (ACLs)" "inheritance"
.iX "-[" "directories" "default ACLs (DFS)"
.iX "-[" "files" "default ACLs (DFS)"
.iX "container objects"
.iX "objects" "container"
.iX "access control lists (ACLs)" "types"
.P
Each DCE LFS file or directory can have an Object ACL that controls access to
the file or directory; all previous examples in this chapter refer to the
Object ACL.  Because they can contain other objects, directories (also referred
to as \*Vcontainer objects\*O) can have two additional ACLs that determine the
default ACLs to be inherited by objects created in them.  Thus, a directory
can have the following three ACLs:
.VL .5i
.LI "Object ACL"
.iX "Object ACL"
.nL
Controls access to the directory itself.  By default, this is the ACL that the
\*Ldcecp acl\*O command displays or modifies when it is issued.
.LI "Initial Object Creation ACL"
.nL
.iX "Initial Object ACL"
Determines the default ACL inherited by files created in the directory.  To view
or modify a directory's Initial Object Creation ACL, include the \*L-io\*O
option with the \*Ldcecp acl\*O command.
.LI "Initial Container Creation ACL"
.nL
.iX "Initial Container ACL"
Determines the default ACL inherited by subdirectories created in the
directory.  To view or modify a directory's Initial Container Creation ACL,
include the \%\*L-ic\*O option with the \*Ldcecp acl\*O command.
.LE
.P
A directory's Object ACL, Initial Object Creation ACL, and Initial Container
Creation ACL can exist independently of one another; they do not need to exist
at all.  A given directory can have all, some, or none of these ACLs.  The type
of file system protection, ACLs or UNIX mode bits, initially used for a new
file or directory object depends on whether the parent directory of the new
object has the appropriate Initial Creation ACL, as follows:
.nL
.ne 10
.ML
.LI
If a new object's parent directory has the appropriate Initial Creation ACL,
the new object inherits an Object ACL as its form of protection.  The new object
also has mode bits, but the Object ACL supplements these bits.  Recall that DCE
LFS ensures that the object's mode bits and its ACL permissions are always
synchronized.
.LI
If a new object's parent directory does \*Enot\*O have the appropriate Initial
Creation ACL, the new object initially has no Object ACL; the object relies on
mode bits as its only form of protection.  If they are not inherited, ACLs can
be explicitly created with the \*Ldcecp acl\*O command. (See Section 3.1.5.4
for information about using the \*Ldcecp acl\*O command to create a directory's
initial ACLs.)
.nS "note"
An Object ACL is always created for a file or directory that is created by
a foreign user, even if the parent directory does not have the appropriate
Initial Creation ACL. (See Sections 3.1.5.3 and 3.1.5.4 for more information.)
.nE
.LE
.P
The following subsections describe how the initial protections of a new object
are derived.  The first subsection provides more information about an ACL's
default cell, which plays an important role in determining ACL inheritance.
The following subsections describe ACL inheritance for objects created by local
users and objects created by foreign users; both of these subsections assume
that the parent directory has the appropriate Initial Creation ACL.  The final
subsection discusses how the UNIX mode bits are determined for an object whose
parent directory does not have the appropriate Initial Creation ACL.
.iX "-]" "files" "default ACLs (DFS)"
.iX "-]" "directories" "default ACLs (DFS)"
.H 4 "The Default Cell and ACL Inheritance"
.iX "-[" "access control lists (ACLs)" "default cell"
.P
Recall that an ACL's default cell names the cell with respect to which the ACL
is defined, and the default cell is not necessarily the cell in which the ACL
exists.  For example, an object in cell \*Labc.com\*O can have an ACL whose
default cell is \*Ldef.com\*O.  In this case, even though the object resides
in cell \*Labc.com\*O, users from cell \*Labc.com\*O are foreign users with
respect to the object's ACL.
.P
With respect to ACLs, local users and foreign users are defined in terms of an
ACL's default cell as follows:
.ML
.LI
A local user is one whose local cell is the same as the default cell of an ACL.
The following entry types are defined for local users and groups:
.ML
.LI
\*Luser_obj\*O
.LI
\*Lgroup_obj\*O
.LI
\*Lother_obj\*O
.LI
\*Luser\*O
.LI
\*Lgroup\*O
.LE
.P
For example, an entry of the type \*Luser\*O \*Vusername\*O specifies the
permissions for the user \*Vusername\*O whose local cell is the same as the
default cell of the ACL.
.LI
A foreign user is one whose local cell is different from the default cell of an
ACL.  The following entry types are defined for foreign users and groups:
.ML
.LI
\*Lforeign_user\*O
.LI
\*Lforeign_group\*O
.LI
\*Lforeign_other\*O
.LI
\*Lany_other\*O
.LE
.P
For example, an entry of the type \*Lforeign_user\*O
\*Vcell_name\*L/\*Vusername\*O specifies the permissions for the user
\*Vusername\*O from the cell \*Vcell_name\*O. (The \*Vcell_name\*O of a
\*Lforeign_\*O entry is usually different from the default cell of an ACL,
but it does not have to be.)
.LE
.P
A directory's Object ACL, Initial Object Creation ACL, and Initial Container
Creation ACL each have their own default cells.  When a file or directory object
is initially created, the default cell of its Object ACL is set to the local
cell of the user who creates the object (the object's owner, who is named with
the \*Luser_obj\*O entry).  The default cells of a new directory's Initial
Creation ACLs are also set to the local cell of the user who creates the
directory.
.H 5 "Listing an ACL's Default Cell"
.P
.iX "access control lists (ACLs)" "displaying default cell"
To determine the default cell of an ACL, include the \%\*L-cell\*O option with
the \*Ldcecp acl show\*O command, as follows:
.iS
\*Cdcecp> \*Lacl show \*Vpathname\*L -cell\*O
.iE
.oS
\*C/.../\*Vcell_name\*O
.oE
.P
For example, the output for an ACL whose default cell is \*Labc.com\*O is the
following:
.oS
\*C/.../abc.com\*O
.oE
.H 5 "Changing an ACL's Default Cell"
.P
.iX "access control lists (ACLs)" "changing default cell" 
To change the default cell of an ACL, use the \%\*L-cell\*O option with the
\*Ldcecp acl modify\*O command.  If you indicate multiple changes with the
command, the change to the default cell is applied before any other changes
are applied.
.P
The default cell of the Object ACL for an object can be changed only by a cell
administrator for the File Server machine on which the object resides.  The
default cell of an Initial Creation ACL for a directory can be changed by any
user who has the \*Lc\*O permission on the directory's Object ACL, which always
includes the owner of the directory, or by a cell administrator for the File
Server machine on which the object resides. (Cell administrators are members
of the group specified with the \*L\-admingroup\*O option of the \*Lfxd\*O
command issued on the File Server machine.)
.P
Although you can make the default cells of a directory's Object ACL, Initial
Object Creation ACL, and Initial Container Creation ACL different from one
another, this is not recommended.  Changing each of a directory's ACLs to have
different default cells can make it difficult to predict the effects of ACL
inheritance.  Also, because the default cell of an object's Object ACL is
determined by the local cell of the user who creates the object, not by the
default cell of the Initial Creation ACL that the object inherits, changing
the default cell of an Initial Creation ACL is of limited utility.
.nL
.ne 10
.P
Note that changing an ACL's default cell by including the \%\*L-cell\*O option
with the \*Ldcecp acl modify\*O command changes the meaning of the ACL's
entries.  For example, the \*Lother_obj\*O entry no longer applies to users
from the former default cell; it now applies to users from the new default
cell.  Also, entry types such as \*Luser_obj\*O and \*Luser\*O, which are
defined with respect to an ACL's default cell, can now give permissions to
different users in the new default cell.
.P
If you change the default cell of an ACL, make sure you also change any
\*Luser\*O and \*Lgroup\*O entries on the ACL to \*Lforeign_user\*O and
\*Lforeign_group\*O entries as necessary.  You may also want to change any
\*Lforeign_user\*O and \*Lforeign_group\*O entries that apply to the new
default cell to \*Luser\*O and \*Lgroup\*O entries.
.iX "-]" "access control lists (ACLs)" "default cell"
.H 4 "ACL Inheritance for Objects Created by Local Users"
.iX "-[" "access control lists (ACLs)" "inheritance by local users"
.P
For ACLs, a local user is a user whose local cell is the same as the default
cell of an ACL.  When a local user creates an object in a directory that has
the appropriate Initial Creation ACL, DCE LFS uses the intersection of the
following information to determine the Object ACL that it creates for the
new object:
.ML
.LI
The UNIX mode bits specified at the system call level (with the UNIX
\*Lopen(\|)\*O, \*Lcreat(\|)\*O, or \*Lmkdir(\|)\*O system call) when the object is
created.  The application that invokes one of these system calls specifies the
mode bits for the new object.  For example, when the UNIX \*Ltouch\*O command
is used to create an object, the command usually specifies the \*Luser\*O,
\*Lgroup\*O, and \*Lother\*O mode bits as \*Lr\*O and \*Lw\*O in the resulting
\*Lcreat(\|)\*O system call.
.LI
The appropriate Initial Creation ACL of the object's parent directory.  The
parent's Initial Object Creation ACL is used for a file; the parent's Initial
Container Creation ACL is used for a directory.
.LE
.P
For example, when a file is created, DCE LFS derives the initial ACL entries
and permissions for its Object ACL, the only ACL associated with a file, as
follows:
.nL
.ne 20
.ML
.LI
The \*Lr\*O, \*Lw\*O, and \*Lx\*O permissions for the file's \*Luser_obj\*O
entry consist of the intersection of the \*Luser\*O mode bits specified when
the file is created and the corresponding permissions of the \*Luser_obj\*O
entry of its parent directory's Initial Object Creation ACL.  The \*Lc\*O,
\*Li\*O, and \*Ld\*O permissions for the file's \*Luser_obj\*O entry are
copied directly from the \*Luser_obj\*O entry of the parent's Initial Object
Creation ACL.
.LI
The \*Lr\*O, \*Lw\*O, and \*Lx\*O permissions for the file's \*Lmask_obj\*O
entry consist of the intersection of the \*Lgroup\*O mode bits specified when
the file is created and the corresponding permissions of the \*Lmask_obj\*O
entry of its parent directory's Initial Object Creation ACL.  The \*Lc\*O,
\*Li\*O, and \*Ld\*O permissions for the file's \*Lmask_obj\*O entry are
copied directly from the \*Lmask_obj\*O entry of the parent's Initial Object
Creation ACL.  In addition, the \*Lgroup_obj\*O entry is copied directly from
the parent's Initial Object Creation ACL to the file's Object ACL.
.P
If the \*Lmask_obj\*O entry does not exist on the parent's Initial Object
Creation ACL, the \*Lr\*O, \*Lw\*O, and \*Lx\*O permissions for the file's
\*Lgroup_obj\*O entry are defined as the intersection of the \*Lgroup\*O mode
bits specified when the file is created and the corresponding permissions of
the \*Lgroup_obj\*O entry of its parent directory's Initial Object Creation
ACL.  The \*Lc\*O, \*Li\*O, and \*Ld\*O permissions for the file's
\*Lgroup_obj\*O entry are copied directly from the \*Lgroup_obj\*O entry of
the parent's Initial Object Creation ACL.
.LI
The \*Lr\*O, \*Lw\*O, and \*Lx\*O permissions for the file's \*Lother_obj\*O
entry consist of the intersection of the \*Lother\*O mode bits specified when
the file is created and the corresponding permissions of the \*Lother_obj\*O
entry of its parent directory's Initial Object Creation ACL.  The \*Lc\*O,
\*Li\*O, and \*Ld\*O permissions for the file's \*Lother_obj\*O entry are
copied directly from the \*Lother_obj\*O entry of the parent's Initial Object
Creation ACL.
.LI
All other entries included on the parent directory's Initial Object Creation
ACL are copied directly to the file's Object ACL.
.LE
.nL
.ne 20
.PP
DCE LFS uses the same algorithm to determine the initial entries and
permissions for a subdirectory's Object ACL, but it uses the parent directory's
Initial Container Creation ACL instead of its Initial Object Creation ACL.  The
subdirectory also inherits its parent's Initial Container Creation ACL as its
Initial Container Creation ACL, and it inherits its parent's Initial Object
Creation ACL as its Initial Object Creation ACL.  The subdirectory inherits
these Initial Creation ACLs unchanged from its parent directory.
.PP
Figure 3-1 illustrates ACL inheritance for files and directories.
.PP
.ne 4.75i
.FG "ACL Inheritance"
.pI gd/figures/figure1_acl_inherit.ps 0 0 1
.P
.iX "-[" "access control lists (ACLs)" "inheritance by local users (example)"
The following simple example demonstrates ACL inheritance.  In the example, the
directory \*L/.../abc.com/fs/usr/rajesh\*O is the home directory for the user
\*Lrajesh\*O, whose local cell, \*Labc.com\*O, is the same as the default cell
of the directory's ACLs.  The following \*Ldcecp acl show\*O command displays
the Object ACL of the directory:
.nL
.ne 10
.iS
\*Cdcecp> \*Lacl show /.:/fs/usr/rajesh\*O
.iE
.oS
\*C{mask_obj rwx-id}
{user_obj rwxcid}
{user vijay rwx-id}
{group_obj r-x---}
{other_obj r-x---}\*O
.oE
.P
The following \*Ldcecp acl show\*O commands show the Initial Object Creation
ACL and Initial Container Creation ACL of the directory:
.iS
\*Cdcecp> \*Lacl show /.:/fs/usr/rajesh -io\*O
.iE
.oS
\*C{mask_obj rw----}
{user_obj rw-c--}
{user pierette rw----}
{group_obj r-----}
{other_obj r-----}\*O
.oE
.iS
\*Cdcecp> \*Lacl show /.:/fs/usr/rajesh -ic\*O
.iE
.oS
\*C{mask_obj rwx-id}
{user_obj rwxcid}
{user pierette rwx-id}
{group_obj r-x---}
{other_obj r-x---}\*O
.oE
.P
Suppose \*Lrajesh\*O, the owner of the directory, creates a subdirectory named
\*Lmyfiles\*O in the directory.  As the owner of the parent directory,
\*Lrajesh\*O is granted the permissions associated with the \*Luser_obj\*O
entry of the parent's Object ACL.  The \*Luser_obj\*O entry includes the
\*Lw\*O, \*Lx\*O, and \*Li\*O permissions, so \*Lrajesh\*O can create objects
in the directory.
.P
The \*Luser_obj\*O, \*Lmask_obj\*O, and \*Lother_obj\*O permissions of the
Object ACL for the new \*Lmyfiles\*O subdirectory are derived from the
intersection of the permissions granted to these entries in the parent
directory's Initial Container Creation ACL and the \*Luser\*O, \*Lgroup\*O,
and \*Lother\*O mode bits specified when the subdirectory is created.  If the
\*Luser\*O, \*Lgroup\*O, and \*Lother\*O mode bits are all \*Lr\*O, \*Lw\*O,
and \*Lx\*O in the system call that creates the \*Lmyfiles\*O subdirectory,
the subdirectory inherits the following Object ACL:
.nL
.ne 10
.iS
\*Cdcecp> \*Lacl show /.:/fs/usr/rajesh/myfiles\*O
.iE
.oS
\*C{mask_obj rwx-id}
{user_obj rwxcid}
{user pierette rwx-id}
{group_obj r-x---}
{other_obj r-x---}\*O
.oE
.P
Because the Initial Container Creation ACL includes a \*Lmask_obj\*O entry,
the \*Lmyfiles\*O subdirectory inherits the \*Lgroup_obj\*O entry directly from
the Initial Container Creation ACL.  Similarly, the subdirectory inherits the
\*Luser\*O entry for \*Lpierette\*O directly from the Initial Container
Creation ACL.  The subdirectory also inherits the Initial Container Creation
ACL and Initial Object Creation ACL unchanged from its parent directory.
.nS "note"
An object's existing ACLs may not be maintained across a file system operation
such as a move or copy (performed with the \*Lmv\*O and \*Lcp\*O commands in
the UNIX operating system).  Refer to your vendor's documentation for
information about how ACLs are treated with respect to such operations.
.nE
.iX "-]" "access control lists (ACLs)" "inheritance by local users (example)"
.iX "-]" "access control lists (ACLs)" "inheritance by local users"
.H 4 "ACL Inheritance for Objects Created by Foreign Users"
.iX "-[" "access control lists (ACLs)" "inheritance by foreign users" 
.P
For ACLs, a foreign user is a user whose local cell is different from the
default cell of an ACL.  Any user who has the \*Lw\*O, \*Lx\*O, and \*Li\*O
permissions on a directory's Object ACL can create objects in the directory,
regardless of whether the user is a foreign user with respect to the
directory's ACL.  For example, a user from the cell \*Ldef.com\*O who has the
\*Lw\*O, \*Lx\*O, and \*Li\*O permissions on a directory whose default cell
is \*Labc.com\*O can create an object in the directory.  The default cell of
the new object is \*Ldef.com\*O, not \*Labc.com\*O.
.P
When a foreign user creates an object, ACL inheritance occurs as described in
Section 3.1.5.2.  However, if the user is a foreign user with respect to the
appropriate Initial Creation ACL, entries inherited from the Initial Creation
ACL are modified as follows:
.nL
.ne 10
.ML
.LI
The \*Lmask_obj\*O entry remains unchanged.  It applies to the same entries on
both the Initial Creation ACL and the new Object ACL.
.LI
The \*Luser_obj\*O, \*Lgroup_obj\*O, and \*Lother_obj\*O entries remain
unchanged, but they are defined with respect to the default cell of the new
Object ACL, not the default cell of the Initial Creation ACL.  The
\*Luser_obj\*O entry specifies the permissions granted to the user who creates
the object (the user whose local cell dictates the default cell of the ACL).
.LI
Any \*Luser\*O and \*Lgroup\*O entries are changed to \*Lforeign_user\*O
and \*Lforeign_group\*O entries because they are not defined with respect to
the default cell of the new Object ACL.
.LI
Any \*Lforeign_user\*O and \*Lforeign_group\*O entries that are defined with
respect to the default cell of the new object ACL are changed to \*Luser\*O and
\*Lgroup\*O entries.
.LI
Any \*Lforeign_user\*O and \*Lforeign_group\*O entries that are defined with
respect to neither the default cell of the Initial Creation ACL nor the default
cell of the new Object ACL remain unchanged.
.LI
Any \*Lforeign_other\*O entries and the \*Lany_other\*O entry remain unchanged.
.LE
.P
If a foreign user creates an object in a directory, an Object ACL is created
for the new object even if the parent directory does not have the appropriate
Initial Creation ACL.  In this case, the Object ACL must be created to record
the fact that the new object's default cell is different from the cell in
which the object resides.  Because an unauthenticated user is treated as a user
from an unknown foreign cell, an Object ACL is always created for an object
created by an unauthenticated user also. (See Section 3.1.5.4 for information
about how the permissions granted by such an Object ACL are determined.)
.P
.iX "-[" "access control lists (ACLs)" "inheritance by foreign users (example)"
The following example demonstrates what happens when the local cell of a user
who creates an object is different from the default cell of the appropriate
Initial Creation ACL of the directory in which the object is created.  In the
example, the directory \*L/.../abc.com/fs/usr/srivas\*O is the home directory
of the user \*Lsrivas\*O, whose local cell, \*Labc.com\*O, is the same as the
default cell of the directory's ACLs.  The following \*Ldcecp acl show\*O
command displays the Object ACL of the directory:
.nL
.ne 10
.iS
\*Cdcecp> \*Lacl show /.:/fs/usr/srivas\*O
.iE
.oS
\*C{mask_obj rwx-id}
{user_obj rwxcid}
{user vijay rwx-id}
{foreign_user /.../def.com/andi rwx-id}
{foreign_user /.../ghi.com/pervaze r-x---}
{group_obj r-x---}
{other_obj r-x---}
{foreign_other /.../def.com r-x---}\*O
.oE
.P
The following \*Ldcecp acl show\*O commands display the Initial Object Creation
ACL and Initial Container Creation ACL of the directory:
.iS
\*Cdcecp> \*Lacl show /.:/fs/usr/srivas -io\*O
.iE
.oS
\*C{mask_obj rw----}
{user_obj rw-c--}
{user pierette rw----}
{foreign_user /.../def.com/andi rw----}
{foreign_user /.../ghi.com/pervaze r-----}
{group_obj r-----}
{other_obj r-----}
{foreign_other /.../def.com r-----}\*O
.oE
.iS
\*Cdcecp> \*Lacl show /.:/fs/usr/srivas -ic\*O
.iE
.oS
\*C{mask_obj rwx-id}
{user_obj rwxcid}
{user pierette rwx-id}
{foreign_user /.../def.com/andi rwx-id}
{foreign_user /.../ghi.com/pervaze r-x---}
{group_obj r-x---}
{other_obj r-x---}
{foreign_other /.../def.com r-x---}\*O
.oE
.P
All three of these ACLs are defined with respect to the cell \*Labc.com\*O.
For example, the \*Luser\*O entries for \*Lpierette\*O and \*Lvijay\*O apply
to specific users from the cell \*Labc.com\*O, and the \*Lother_obj\*O entries
apply to other users from the cell \*Labc.com\*O.
.nL
.ne 20
.P
The user \*Landi\*O, who is from the cell \*Ldef.com\*O, has entries on all
three of the directory's ACLs.  The \*Lforeign_user\*O entry on the Object ACL
allows \*Landi\*O to create objects in the directory.  If \*Landi\*O creates a
subdirectory named \*Landi_files\*O in the directory, the default cell of the
subdirectory is \*Ldef.com\*O.  Assuming the \*Luser\*O, \*Lgroup\*O, and
\*Lother\*O mode bits are \*Lr\*O, \*Lw\*O, and \*Lx\*O in the system call that
creates the subdirectory, the Object ACL of the subdirectory inherits the
following entries from the Initial Container Creation ACL of the parent
directory:
.iS
\*Cdcecp> \*Lacl show /.:/fs/usr/srivas/andi_files\*O
.iE
.oS
\*C{mask_obj rwx-id}
{user_obj rwxcid}
{user andi rwx-id}
{foreign_user /.../abc.com/pierette rwx-id}
{foreign_user /.../ghi.com/pervaze r-x---}
{group_obj r-x---}
{other_obj r-x---}
{foreign_other /.../def.com r-x---}\*O
.oE
.P
The permissions granted by the various entries are inherited according to the
ACL inheritance algorithm.  However, because \*Landi\*O's local cell
(\*Ldef.com\*O) is different from the default cell (\*Labc.com\*O) of the
parent directory's Initial Container Creation ACL, the entries from the
parent's Initial Container Creation ACL are interpreted and modified as
follows for use on the Object ACL of the \*Landi_files\*O subdirectory:
.ML
.LI
The \*Lmask_obj\*O entry is unchanged because it applies to the same users on
both ACLs.
.LI
The \*Luser_obj\*O, \*Lgroup_obj\*O, and \*Lother_obj\*O entries are unchanged,
but they now apply to users and groups from the cell \*Ldef.com\*O.  The
\*Luser_obj\*O entry grants permissions to the user \*Landi\*O.
.LI
The \*Luser pierette\*O entry is changed to the \*Lforeign_user
/.../abc.com/pierette\*O entry because it is no longer defined with respect
to the default cell of the ACL.
.LI
The \*Lforeign_user /.../def.com/andi\*O entry is changed to the \*Luser
andi\*O entry because it is now defined with respect to the default cell of
the ACL.  Note that, as the owner of the directory, \*Landi\*O derives
permissions from the \*Luser_obj\*O entry, so the \*Luser\*O entry for
\*Landi\*O is not used.  It remains on the ACL nonetheless.
.LI
The \*Lforeign_user /.../ghi.com/pervaze\*O entry is unchanged because it is
defined with respect to neither the default cell of the Initial Container
Creation ACL of the parent directory nor the Object ACL of the new directory.
.LI
The \*Lforeign_other /.../def.com\*O entry is unchanged; it continues to apply
to users from the cell \*Ldef.com\*O.  However, because the default cell of the
ACL is now \*Ldef.com\*O, users from that cell who are not granted permissions
from specific user or group entries are now granted permissions from the
\*Lother_obj\*O entry.  The \*Lforeign_other\*O entry for users from the cell
\*L/.../def.com\*O remains on the ACL, but as long as the default cell of the
ACL is \*Ldef.com\*O, this \*Lforeign_other\*O entry does not determine the
permissions granted to users from the \*Ldef.com\*O cell.
.nS "note"
You can explicitly include \*Lforeign_other\*O entries for the default cell
on a directory's Initial Creation ACLs to grant users from the default cell
permissions on objects created in the directory by foreign users.  For example,
if the Initial Container Creation ACL of the directory
\*L/.../abc.com/fs/usr/srivas\*O in the previous example had included the
entry \*Lforeign_other /.../abc.com\*O, the Object ACL of the \*Landi_files\*O
subdirectory would have inherited the entry unchanged from the Initial
Container Creation ACL.  The entry would have granted users from the cell
\*Labc.com\*O permissions on the subdirectory \*Landi_files\*O.
.nE
.LE
.P
Because \*Landi\*O's local cell is different from the default cell of the
Initial Object Creation ACL and Initial Container Creation ACL of the parent
directory of the \*Landi_files\*O subdirectory, entries on the corresponding
ACLs that the subdirectory inherits are also changed as necessary.  The new
subdirectory inherits the following Initial Object Creation ACL and Initial
Container Creation ACL from its parent:
.nL
.ne 20
.iS
\*Cdcecp> \*Lacl show /.:/fs/usr/srivas/andi_files -io\*O
.iE
.oS
\*C{mask_obj rw----}
{user_obj rw-c--}
{user andi rw----}
{foreign_user /.../abc.com/pierette rw----}
{foreign_user /.../ghi.com/pervaze r-----}
{group_obj r-----}
{other_obj r-----}
{foreign_other /.../def.com r-----}\*O
.oE
.iS
\*Cdcecp> \*Lacl show /.:/fs/usr/srivas/andi_files -ic\*O
.iE
.oS
\*C{mask_obj rwx-id}
{user_obj rwxcid}
{user andi rwx-id}
{foreign_user /.../abc.com/pierette rwx-id}
{foreign_user /.../ghi.com/pervaze r-x---}
{group_obj r-x---}
{other_obj r-x---}
{foreign_other /.../def.com r-x---}\*O
.oE
.iX "-]" "access control lists (ACLs)" "inheritance by foreign users"
.iX "-]" "access control lists (ACLs)" "inheritance by foreign users (example)"
.H 4 "Mode Bits for New Objects That Do Not Inherit ACLs"
.iX "-[" "UNIX permissions" "for objects without ACLs"
.iX "UNIX file creation mask" "interaction with ACLs"
.iX "file creation mask" "interaction with ACLs"
.iX "\*Lumask\*O command"
.iX "access control lists (ACLs)" "interaction with file creation mask"
.iX "-[" "access control lists (ACLs)" "determining for objects without ACLs"
.P
The ACL inheritance algorithm described in Section 3.1.5.2 applies only if the
directory in which a file or directory object is created has the appropriate
Initial Creation ACL.  If the parent directory of a new object does not have the
appropriate Initial Creation ACL, the object does not inherit an Object ACL; it
initially has no Object ACL and is protected only with UNIX mode bits.  DCE LFS
bases the object's initial mode bits on the intersection of the following
information:
.ML
.LI
The UNIX mode bits specified at the system call level (with the UNIX
\*Lopen(\|)\*O, \*Lcreat(\|)\*O, or \*Lmkdir(\|)\*O system call) when the object is
created.  The application that invokes one of these system calls specifies the
mode bits for the new object.  For instance, when the UNIX \*Ltouch\*O command
is used to create an object, the command usually specifies the \*Luser\*O,
\*Lgroup\*O, and \*Lother\*O mode bits as \*Lr\*O and \*Lw\*O in the resulting
\*Lcreat(\|)\*O system call.
.nL
.ne 20
.LI
The value of the UNIX file creation mask of the process that creates the
object.  The file creation mask filters the mode bits initially assigned to
an object; the mask is defined with the UNIX \*Lumask\*O command to be the
octal complement of the allowable mode bits.  For instance, when a user creates
an object, the value of the file creation mask of the user's process filters
the mode bits assigned to the object.
.LE
.P
For a new object, \*Luser\*O, \*Lgroup\*O, or \*Lother\*O receives a mode bit
only if the bit is specified in the system call \*Eand\*O the bit is not
filtered by the file creation mask.  For instance, \*Luser\*O for a new object
receives read access only if the system call that creates the object specifies
the \*Lr\*O mode bit for \*Luser\*O \*Eand\*O the file creation mask of the
creating process does not restrict \*Luser\*O from having the \*Lr\*O mode bit.
.P
For example, the system call to create a new file typically specifies read and
write access for \*Luser\*O, \*Lgroup\*O, and \*Lother\*O; the file creation
mask commonly restricts \*Lgroup\*O and \*Lother\*O to only read and execute
access.  When the file is created, \*Luser\*O has the \*Lr\*O and \*Lw\*O bits,
while \*Lgroup\*O and \*Lother\*O have only the \*Lr\*O bit.
.P
Similarly, the system call to create a new directory usually specifies read,
write, and execute access for \*Luser\*O, \*Lgroup\*O, and \*Lother\*O; the
file creation mask commonly restricts \*Lgroup\*O and \*Lother\*O to only read
and execute access.  When the directory is created, \*Luser\*O has the \*Lr\*O,
\*Lw\*O, and \*Lx\*O bits, while \*Lgroup\*O and \*Lother\*O have just the
\*Lr\*O and \*Lx\*O bits.
.P
A new directory whose parent directory has no Initial Container Creation ACL
is created without an Initial Container Creation ACL.  Likewise, a new directory
whose parent directory has no Initial Object Creation ACL is created without
an Initial Object Creation ACL.
.H 5 "Displaying Implicit (Nonexistent) ACLs"
.iX "-[" "access control lists (ACLs)" "displaying for objects without ACLs"
.iX "-[" "access control lists (ACLs)" "displaying implicit ACLs"
.P
If you use the \*Ldcecp acl show\*O command to display a nonexistent Object ACL,
DCE LFS displays an implicit Object ACL.  Although an Object ACL does not
physically exist, DCE LFS constructs an implicit Object ACL whose entries
and permissions match the object's UNIX mode bits.
.nL
.ne 20
.P
For the implicit Object ACL of a directory, DCE LFS expands the \*Lw\*O mode
bit to grant the \*Li\*O and \*Ld\*O ACL permissions in addition to the \*Lw\*O
permission.  Until a directory has an Object ACL, DCE LFS must perform this
expansion to allow for the creation of objects in the directory; without the
\*Li\*O and \*Ld\*O ACL permissions, the directory would effectively be
read-only.  Once the ACL exists, DCE LFS maps the \*Lw\*O mode bit to just the
\*Lw\*O ACL permission, not the \*Li\*O and \*Ld\*O permissions (see Section
3.1.4).  Because the \*Li\*O and \*Ld\*O ACL permissions are meaningless for a
file, DCE LFS does not expand the \*Lw\*O mode bit on the implicit Object ACL
of a file.
.P
If you use the \*Ldcecp acl show\*O command to display a nonexistent Initial
Creation ACL, DCE LFS displays an implicit Initial Creation ACL.  It bases the
permissions of the implicit Initial Creation ACL solely on a file creation mask
of \*L0\*O (zero).  In this case, DCE LFS ignores the file creation mask of the
process that attempts to display the nonexistent Initial Creation ACL.  For the
implicit Initial Container Creation ACL, DCE LFS expands the \*Lw\*O permission
to grant the \*Li\*O and \*Ld\*O permissions as well.
.P
Like the \*Luser_obj\*O entries of explicit ACLs (which physically exist),
the \*Luser_obj\*O entries of implicit ACLs grant the \*Lc\*O permission.
This ensures that the owner of an object can always change the ACLs of the
object.  Cell administrators for the File Server machine on which an object
physically resides can also always change the ACLs of the object.
.P
If you use the \*Ldcecp acl show -ic\*O command to display the Initial
Container Creation ACL of a directory that does not have this ACL, the command
always displays an implicit Initial Container Creation ACL that has the
following entries and permissions:
.oS
\*C{user_obj rwxcid}
{group_obj rwx-id}
{other_obj rwx-id}\*O
.oE
.P
If you use the \*Ldcecp acl show -io\*O command to display the Initial Object
Creation ACL of a directory that does not have this ACL, the command always
displays an implicit Initial Object Creation ACL that has the following entries
and permissions:
.oS
\*C{user_obj rwxc--}
{group_obj rwx---}
{other_obj rwx---}\*O
.oE
.nL
.ne 20
.P
Note again that, for an object created in a DCE LFS directory that does not have
the appropriate Initial Creation ACL, DCE LFS considers the value of the file
creation mask of the process that creates the new object when determining the
object's initial mode bits.  DCE LFS ignores the file creation mask of the
calling process only when displaying nonexistent Initial Creation ACLs.
.iX "-]" "access control lists (ACLs)" "displaying for objects without ACLs"
.iX "-]" "access control lists (ACLs)" "displaying implicit ACLs"
.H 5 "Creating Explicit (Existing) ACLs"
.iX "-[" "access control lists (ACLs)" "creating for objects without ACLs"
.iX "-[" "access control lists (ACLs)" "creating explicit ACLs"
.P
The Object ACL and Initial Creation ACLs of an object that is protected only
with UNIX mode bits remain implicit until you use the \*Ldcecp acl\*O command
to save them, at which point DCE LFS creates explicit ACLs for the object.
For example, if you use the \*Ldcecp acl modify\*O command to change an
implicit ACL, DCE LFS creates an explicit ACL when it saves the changes.
.P
Unless you change the permissions with the \*Ldcecp acl\*O command that saves
the ACL, the permissions granted by an Object ACL created with the command
match the object's initial mode bits.  Similarly, unless you change them with
the \*Ldcecp acl\*O command that saves the ACL, the permissions granted by an
Initial Creation ACL created with the command are based on a file creation
mask of \*L0\*O (zero).
.P
Note that an Object ACL is always created for a file or directory created by
a foreign user, even if the parent directory does not have the appropriate
Initial Creation ACL.  Because an unauthenticated user is treated as a user
from an unknown foreign cell, an Object ACL is always created for an object
created by an unauthenticated user also.  The permissions granted by an Object
ACL created in this way are based on the UNIX mode bits specified at the system
call level when the object is created and the value of the UNIX file creation
mask of the creating process.
.iX "-]" "access control lists (ACLs)" "creating for objects without ACLs"
.iX "-]" "access control lists (ACLs)" "creating explicit ACLs"
.iX "-]" "access control lists (ACLs)" "inheritance"
.iX "-]" "UNIX permissions" "for objects without ACLs"
.iX "-]" "access control lists (ACLs)" "determining for objects without ACLs"
.nL
.ne 20
.H 3 "Initial ACLs of a New Fileset"
.iX "-[" "filesets" "default permissions"
.iX "-[" "filesets" "initial ACLs"
.iX "-[" "directories" "implicit permissions in root (DFS)"
.iX "-[" "root directories" "implicit permissions"
.P
The root directory of a newly created DCE LFS fileset has no DCE ACLs.  The
directory is protected only with UNIX mode bits.  Files and subdirectories
created in the directory inherit UNIX mode bits according to the usual file
system semantics.  The root directory's Object ACL, Initial Object Creation
ACL, and Initial Container Creation ACL remain implicit until the
\*Ldcecp acl\*O command is used to create explicit ACLs for the directory.
(See Section 3.1.5.4.2.)
.P
A DCE LFS fileset can include many files and directories that never have ACLs.
However, this approach fails to take advantage of the enhanced security
available with DCE ACLs.  Therefore, it is important to use the \*Ldcecp acl\*O
command to create the Object ACL, Initial Object Creation ACL, and Initial
Container Creation ACL for the root directory of a fileset \*Ebefore\*O
other objects are created in the directory.
.P
For the root directory of a new DCE LFS fileset, \*Luser\*O, \*Lgroup\*O, and
\*Lother\*O all receive the UNIX \*Lr\*O, \*Lw\*O, and \*Lx\*O mode bits.  If
the \*Ldcecp acl show\*O command is used to view the directory's Object ACL,
DCE LFS displays an implicit Object ACL that has the following entries and
permissions:
.oS
\*C{user_obj rwxcid}
{group_obj rwx-id}
{other_obj rwx-id}\*O
.oE
.P
If the \*Ldcecp acl show\*O command is invoked with the \*L-io\*O or \*L-ic\*O
option to view the Initial Container Creation ACL or Initial Object Creation
ACL of a new root directory, DCE LFS displays an implicit Initial Creation ACL.
DCE LFS constructs implicit Initial Creation ACLs for a new root directory just
as it constructs implicit Initial Creation ACLs for any directory that does not
have these ACLs. (See Section 3.1.5.4.1.)
.iX "-]" "root directories" "implicit permissions"
.iX "-]" "directories" "implicit permissions in root (DFS)"
.H 3 "Suggested Initial ACLs for a New Fileset"
.P
Cell administrators need to use the \*Ldcecp acl\*O command to create the ACLs
for the root directory of a new DCE LFS fileset.  They should also manipulate
the root directory and its ACLs to assign the directory the proper owner and
give its ACL entries the appropriate permissions.
.P
The owner of a fileset's root directory is initially set to \*Lroot\*O. A cell
administrator must use the UNIX \*Lchown\*O command or its equivalent to make
the user who is to own the fileset the owner of the directory, thus granting
that individual the \*Lc\*O permission associated with the \*Luser_obj\*O
entry.  A cell administrator should also use the UNIX \*Lchgrp\*O command or
its equivalent to change the owning group, as required.
.P
Cell administrators may want to establish the convention of explicitly granting
the owner of a new fileset all permissions on the fileset's root directory.  In
addition, they may want to limit the permissions initially granted by the
\*Lgroup_obj\*O and \*Lother_obj\*O entries, changing these entries to grant
only the \*Lr\*O and \*Lx\*O permissions.  This allows all users from the local
cell to list the contents of the directory and view the ACLs of the objects it
contains, but little else.
.P
The following example ACL provides the owner (\*Lpierette\*O) of the root
directory of a new fileset all permissions, granting all other users from the
local cell just the \*Lr\*O and \*Lx\*O permissions:
.iS
\*Cdcecp> \*Lacl show /.../abc.com/fs/usr/pierette\*O
.iE
.oS
\*C{user_obj rwxcid}
{group_obj r-x---}
{other_obj r-x---}\*O
.oE
Cell administrators should also apply these suggestions to the root directory's
Initial Object Creation and Initial Container Creation ACLs.  Because they are
meaningless with respect to files, the \*Li\*O and \*Ld\*O permissions do not
need to be granted to the \*Luser_obj\*O entry on the directory's Initial
Object Creation ACL.
.nL
.ne 20
.P
Recall that a user must have the \*Lx\*O permission on each directory that
leads to an object to access the object.  Therefore, cell administrators should
grant the \*Lx\*O permission to the \*Lgroup_obj\*O and \*Lother_obj\*O entries
on all directories that lead to common binary files.  They should also grant
the \*Lx\*O permission to these entries on all directories that lead to the
root directories of user filesets.
.iX "-]" "filesets" "default permissions"
.iX "-]" "filesets" "initial ACLs"
.H 3 "Delegation with DCE LFS Objects"
.iX "access control lists (ACLs)" "delegation"
.iX "delegation" "access control lists (ACLs)"
.nS "note"
The information in this section applies only to applications that are written
to use delegation.
.nE
.P
The previous sections of this chapter document how ACLs work when you request
access to an object directly.  The information applies for most applications and
for most routine file system operations.  However, some applications may perform
operations on an object on your behalf.  An operation performed by such an
application is referred to as a \*Vdelegation operation\*O; you delegate the
operation to the server principal of the application.
.P
For any operation, the user who initially requests the operation is referred
to as the \*Vinitiator\*O.  For a delegation operation, the principal that performs
the operation for the initiator is known as the \*Vdelegate\*O.  Because users
typically delegate operations to server principals, delegation is usually
described with respect to principals rather than users.
.P
For an operation that does not involve delegation, only the initiator needs
to have the permissions necessary to perform the requested operation.  For
a delegation operation, both the initiator and the delegate must have the
permissions necessary to perform the operation.  For example, suppose you
request an application that executes as a delegate to print a file.  In this
case, you are the initiator because you have requested that the file be
printed; the application that prints the file is the delegate because you have
asked the application to print the file.  Both you and the application need the
permissions required to print the file.
.nL
.ne 20
.P
With DCE ACLs, you can grant permissions to a principal that apply only when
the principal is acting as a delegate on behalf of another principal.  In the
previous example, you could grant the application the necessary permissions for
the requested file directly, or you could grant the application permissions
only when it is acting as a delegate.  Granting the application permissions
directly allows the application to print the file on its own initiative, which
can allow unauthorized users to print the file via the application.  Granting
the application permissions as a delegate ensures that the application prints
the file only on behalf of authorized users.
.P
Multiple delegates can be associated with a single operation. In this case,
the collection of delegates is referred to as a \*Vdelegation chain\*O.  The initiator
and all delegates in the chain must have the permissions necessary to perform
a requested operation.  If the application in the previous example had forwarded
your print request to a print server, both the application and the print server
would have been members of the delegation chain for your print request.  In this
case, the initiator (you) and both delegates (the application and the print
server) would have needed the permissions required to print the file.
.P
The initiator of an operation is granted permissions via one of the standard
entries described in Table 3-1.  However, delegates can also be granted
permissions via special ACL entry types that exist exclusively for delegation.
The following subsections provide more information about the additional ACL
entries used for delegation and about how delegation works with DCE LFS
objects.
.H 4 "ACL Entry Types for Delegation"
.iX "access control lists (ACLs)" "format of delegation entries"
.P
For each ACL entry described in Table 3-1, a corresponding entry of type
\*L_delegate\*O is available.  Table 3-3 describes the ACL entry types that
can effectively be used for delegation with DCE LFS objects. (DCE LFS
always ignores \*Luser_obj_delegate\*O, \*Lgroup_obj_obj\*O, and
\*Lother_obj_delegate\*O entries, so these entries are omitted from the table.)
.nL
.ne 30
.P
.TB "ACL Entry Types for Delegation"
.in 0
.TS H
center, tab(@), allbox;
lB | lB | lB 
lB | lw(1.0i) | lw(1.8i).
Delegation Type@Key@Applies to
_
.TH
...\" .cS
...\" user_obj_delegate@T{
...\" None
...\" T}@T{
...\" The principal who owns the object acting as a delegate.  The principal is from
...\" the default cell.
...\" T}
...\" _
...\" .cE
user_delegate@T{
\*Vprincipal_name\*O
T}@T{
The \*Vprincipal_name\*O principal from the default cell acting as a delegate.
T}
foreign_user_delegate@T{
\*Vcell_name\*L/\*Vprincipal_name\*O
T}@T{
The \*Vprincipal_name\*O principal from the foreign cell \*Vcell_name\*O acting
as a delegate.
T}
...\" 
...\" .cS
...\" group_obj_delegate@T{
...\" None
...\" T}@T{
...\" Members of the group that owns the object acting as delegates.  The group is
...\" from the default cell.
...\" T}
...\" _
...\" .cE
group_delegate@T{
\*Vgroup_name\*O
T}@T{
Members of the group \*Vgroup_name\*O from the default cell acting as
delegates.
T}
foreign_group_delegate@T{
\*Vcell_name\*L/\*Vgroup_name\*O
T}@T{
Members of the group \*Vgroup_name\*O from the foreign cell \*Vcell_name\*O
acting as delegates.
T}
...\" 
...\" .cS
...\" other_obj_delegate@T{
...\" None
...\" T}@T{
...\" Principals from the default cell who do not match any of the preceding entries
...\" acting as delegates.
...\" T}
...\" _
...\" .cE
foreign_other_delegate@T{
\*Vcell_name\*O
T}@T{
Principals from the foreign cell \*Vcell_name\*O who do not match any of the
preceding entries acting as delegates.
T}
any_other_delegate@T{
None
T}@T{
Principals from any foreign cell who do not match any of the preceding entries
acting as delegates.
T}
.TE
.in
.sp .5
.P
Some examples of ACL entries for delegation follow:
.nL
.ne 20
.VL 10
.LI "\*L{user_delegate print-server \*Vpermissions\*L}\*O"
.P
Defines the permissions for the principal \*Lprint-server\*O from the default
cell when the principal is acting as a delegate.
.LI "\*L{group_delegate printers \*Vpermissions\*L}\*O"
.P
Defines the permissions for members of the group \*Lprinters\*O from the
default cell when members of the group are acting as delegates.
.LE
.P
Each delegation entry can grant any of the permissions available for DCE LFS
objects (\*Lr\*O, \*Lw\*O, \*Lx\*O, \*Lc\*O, \*Li\*O, and \*Ld\*O).  Each
permission has the same meaning for a delegation entry that it has for a
nondelegation entry. (See Section 3.1.1.4.)
.H 4 "ACL Evaluation for Delegation"
.iX "access control lists (ACLs)" "checking sequence for delegation"
.iX "access control lists (ACLs)" "evaluation sequence for delegation"
.P
DCE LFS performs an operation requested by one or more delegates only if the
initiator and all delegates have the permissions required to perform the
operation.  If the initiator or one of the delegates does not have the required
permissions, DCE LFS refuses to perform the operation.  For example, to create
a file in a directory, the initiator and all delegates must have the \*Lw\*O,
\*Lx\*O, and \*Li\*O permissions on the directory; if the initiator or one of
the delegates does not have all three of these permissions, the operation
fails.
.P
To determine the permissions for the initiator of an operation, DCE LFS
considers only nondelegation ACL entries according to the evaluation algorithm
presented in Section 3.1.2.  However, to determine the permissions for a
delegate, DCE LFS follows an evaluation algorithm that includes both delegation
and nondelegation ACL entries.  As with the usual evaluation algorithm, DCE LFS
stops checking entries once a delegate meets a condition in the checking
sequence; evaluation proceeds to a condition in the checking sequence only
if the delegate fails to match all previous conditions.
.P
The following list describes the order in which DCE LFS examines the entries
on an ACL to determine the permissions for a delegate:
.nL
.ne 20
.AL
.LI
The delegate owns the object.  DCE LFS grants the delegate the permissions
from the \*Luser_obj\*O entry.
.LI
A \*Luser\*O, \*Luser_delegate\*O, \*Lforeign_user\*O, or
\*Lforeign_user_delegate\*O entry exists for the delegate.  DCE LFS grants
the delegate the permissions from the first of these entries that the
delegate matches.
.LI
The delegate belongs to the group that owns the object (which acquires
permissions via the \*Lgroup_obj\*O entry) or to a group for which one
of the following entries exists: \*Lgroup\*O, 
\*Lgroup_delegate\*O, \*Lforeign_group\*O, or
\*Lforeign_group_delegate\*O.  DCE LFS grants the delegate
the permissions from all of the entries that the delegate matches.
.LI
The delegate is from the default cell.  DCE LFS grants the delegate the
permissions from the \*Lother_obj\*O entry.
.LI
The delegate is from a foreign cell for which a \*Lforeign_other\*O or
\*Lforeign_other_delegate\*O entry exists.  DCE LFS grants the delegate the
permissions from the first of these entries that the delegate matches.
.LI
The delegate is from a foreign cell and an \*Lany_other\*O or
\*Lany_other_delegate\*O entry exists.  DCE LFS grants the delegate the
permissions from the first of these entries that exists.
.LI
The delegate matches no entry.  DCE LFS denies the delegate access to the
object.
.LE
.P
Note that all delegation entries are always optional. Note also that a
principal acquires permissions from a delegation entry only when acting as a
delegate.  A principal that is initiating an operation cannot obtain permissions
from a delegation entry.  Finally, DCE LFS filters all permissions granted via
delegation entries through the \*Lmask_obj\*O entry.
.H 4 "DFS Notes and Restrictions for Delegation"
.P
In most respects, delegation works with DCE LFS objects in the same way that
it works with other DCE objects.  You use \*Ldcecp acl\*O commands to add,
delete, modify, and display delegation entries.  You can include delegation
entries on Object ACLs and Initial Creation ACLs.
.nL
.ne 20
.P
An object created through a delegation operation is owned by the last delegate
in the delegation chain.  For example, if you direct an application to create a
file, and that application in turn directs another server process to create the
file, the resulting file is owned by the server process that actually creates
it, not by you or the application.  In this case, you may not have the necessary
permissions to perform further operations on the file.
.P
Similarly, because non-LFS objects do not have DCE ACLs, the permissions
required for a delegation operation that involves a non-LFS object are based
solely on the identity and permissions of the last delegate in the chain.  The
last delegate must acquire the necessary permissions by way of the \*Luser\*O,
\*Lgroup\*O, or \*Lother\*O mode bits.
.P
The new ACL entry types introduced for delegation are incompatible with many
programs from previous versions of DCE.  Therefore, the following restrictions
apply to the use of delegation entries on the ACLs of DCE LFS objects:
.ML
.LI
Delegation is first available with Version 1.1 of DCE.  In earlier versions of
DCE, the \*Lacl_edit\*O program was used to list and modify ACLs.  Versions of
the \*Lacl_edit\*O program provided with versions of DCE earlier than 1.1
cannot display or modify ACLs that include delegation entries.
.LI
File Server machines based on versions of DCE earlier than Version 1.1 cannot house
filesets in which the ACLs of one or more objects include delegation entries.
If the ACLs of one or more objects in a fileset include delegation entries,
DFS does not allow you to do the following:
.ML
.LI
Move the fileset to a File Server that uses a version of DCE earlier than Version 1.1.
.LI
Add a replication site for the fileset on a File Server that uses a version of
DCE earlier than Version 1.1.
.LI
Restore the fileset to a File Server that uses a version of DCE earlier than
Version 1.1.
.LE
.LE
.nL
.ne 20
.P
Finally, to use the identity of a chain of delegates for a delegation operation
that involves DFS, an application sets the current login context to be that of
the delegation chain for the operation (see the \*(Ac for information about
login contexts).  When the operation is complete, the application sets the
current login context back to its original state.  This is required only for
delegation operations that involve requests to the File Exporter, which runs
in the kernel; for operations that involve requests to user-space processes,
applications can simply indicate that the login context of the delegation
chain is to be used for the operation. (An application uses the
\*Lsec_login_set_context(\|)\*O routine to set the current login context; see
the \*(Dk for more information.)
.iX "administrative lists" "delegation"
.iX "delegation" "administrative lists"
.nS "note"
DFS server processes that use administrative lists do not consider delegation
when determining administrative privileges.  The last delegate in the chain
must be included in the appropriate administrative list to perform a privileged
operation.  For example, a privileged \*Lbos\*O command requires that the last
delegate in the chain be a member of the \*Ladmin.bos\*O list on the specified
server machine. (See Chapter 4 for information about administering DFS server
processes.)
.nE
.iX "-]" "files" "protecting"
.iX "-]" "access control lists (ACLs)" "for files and directories"
.iX "-]" "directories" "access control (DFS)"
.H 2 "Using Groups with DFS"
.iX "-[" "groups" "how to use in DFS"
.P
Information about groups is maintained in the Registry Database by the DCE
Security Service. (See the Security Service portion of the \*(Ac for complete
details about creating and maintaining groups.)
.P
Using groups allows you to assign permissions to several users at one time,
rather than assigning them individually.  You can create user groups or special
interest groups (for example, a group of all of the people from one department
or a group of people who are working on one project) and then assign that group
access to the appropriate files and directories.
.nL
.ne 20
.P
You can also use groups to specify individuals who are permitted to perform
administrative tasks; these individuals are specified in DFS administrative
lists.  DFS uses administrative lists to determine who is authorized to issue
commands that affect filesets and server processes.  Through administrative
lists, you can precisely control the security in the administrative domains
in your cell.  This chapter does not discuss the management of administrative
lists in detail. (See Chapter 4 for details about creating and maintaining
administrative lists.)
.P
You can also specify a group as an argument with certain DFS commands.  The
groups specified with these commands, like those included in certain
administrative lists, define users who are allowed to issue commands that
affect filesets.  These groups are described in the following subsections.
.H 3 "Creating and Maintaining Groups"
.iX "groups" "registry information"
.iX "project lists" "about"
.iX "groups" "adding members"
.P
To authenticate to DCE, users must have accounts in the Registry Database
(although some parts of DCE allow unauthenticated use).  Part of the
information associated with a user's account is the user's principal name and
the groups and organizations to which the user belongs.  Accounts are created
and maintained by system administrators in the Registry Database, which is
organized into three main directories: a person directory, a group directory,
and an organization directory. (Some server machines run as separate
authenticated principals; these servers also have accounts in the Registry
Database.  In the following section, the term \*Eprincipal\*O refers to either
a human user or a server machine.) 
.P
The collection of groups to which a user belongs is called a project list.
A user acquires the access permissions granted to each group on the user's
project list.  To assign a user to a group, use the \*Ldcecp group add\*O
command to add the user's principal name to the group's membership list in
the Registry Database. (See the \*(Ar for information about the \*Ldcecp
group\*O command.)
.nL
.ne 20
.H 3 "Using Groups with ACLs, Administrative Lists, and Commands"
.iX "access control lists (ACLs)" "using groups"
.iX "administrative lists" "using groups"
.P
Groups can be used with ACLs, administrative lists, and certain DFS commands.
Using groups in each of these ways provides a convenient way to specify several
individuals with one entry.
.P
ACLs specify access permissions for the users and groups that can perform
operations on files and directories.  Rather than specify an ACL entry for
each member of a  project on all project files, you can set up a group in the
Registry Database that includes all project members.  You can then specify the
group on the files' ACLs to provide all members the same access to the files.
.P
Similarly, administrative lists specify the users and groups that can perform
actions affecting specific server processes.  Groups can be specified on the
administrative list associated with each DFS server process.  Often the same
users need to be included on several administrative lists; these users can be
specified as a group in the Registry Database and subsequently added to and
removed from administrative lists as a group.  For example, you can use a group
to specify a system administration team whose members need access to most DFS
servers.  Then rather than modify all the administrative lists when the team
membership changes, you can simply use the \*Ldcecp group\*O command to modify
the group in the Registry Database.
.P
Groups can also be specified with options on certain DFS commands, including
the \*Lfxd\*O and \*Lfts crserverentry\*O commands, to specify administrative
users.  Groups specified on the command lines of these commands differ from
those specified with ACLs and administrative lists because only one group can
be specified with these commands, but multiple groups can be specified with
ACLs and administrative lists.
.nL
.ne 20
.H 3 "Suggestions for Administrative Groups"
.P
Administrative lists determine which users are permitted to perform privileged
operations, such as restoring user files from backup copies or moving filesets
from one server machine to another.  Because they are stored on the local disk
of each machine, administrative lists provide local control over a machine.
.P
Each type of server process is associated with an administrative list, which
allows you to differentiate between users who perform different administrative
tasks.  For example, administrative users who start and stop server processes
need to be included on different administrative lists from users who
manipulate filesets. (See Chapter 4 for details about the administrative
tasks associated with each administrative list.)
.P
Rather than specifying individuals in administrative lists, you can use groups
in much the same way that you can use groups in ACLs. (You may want to use the
same groups for ACLs and administrative lists in certain instances.) For
example, you can create a large group of users for performing backup operations
and include them on the administrative lists required to use the DFS Backup
System (\*Ladmin.bak\*O, \*Ladmin.fl\*O, and \*Ladmin.ft\*O).  A subset of this
group can be included in the administrative list (\*Ladmin.bos\*O) for the BOS
Server process on each machine in a domain, since that list designates the
users and groups permitted to control server processes.
.P
In two important cases, administrative users are specified as a group in
command options.  These groups are defined in the Registry Database, as are
groups specified with ACLs and administrative lists; however, only one group
can be specified with each of these commands.
.nL
.ne 20
.P
.iX "\*Lfxd\*O command" "use of groups"
The first command, \*Lfxd\*O, initializes the File Exporter and starts related
kernel daemons.  The group specified with the command's \%\*L-admingroup\*O option
can change the ACLs and UNIX permissions associated with all file system
objects exported from the File Server machine on which the File Exporter is
running.  They have the equivalent of the ACL \*Lc\*O permission on all of the
files and directories in each exported DCE LFS fileset, and they can
effectively change the UNIX permissions on all of the files and directories in
each exported non-LFS fileset.  They can also change the owner and owning group
of any file system object exported from the machine, and they can change the
default cell of any DCE LFS object exported from the machine.  Because they have
access to all of the exported DCE LFS and non-LFS filesets on the File Server
machine, members of this group should be both few in number and highly trusted.
.P
While inclusion in this administrative group is similar in many respects to
being logged in as \*Lroot\*O, the two are not equivalent.  A user who is logged
into the local machine as \*Lroot\*O can perform different operations on a file
or directory, depending on whether the user accesses the object via its DCE
pathname or via its local pathname.
.P
.iX "access control lists (ACLs)" "\*Lroot\*O permissions"
.iX "access control lists (ACLs)" "\*Lself\*O permissions"
.iX "\*Lself\*O principal" "ACL permissions"
.iX "\*Lroot\*O" "ACL permissions"
The first way a user can access a file or directory is via the object's DCE
pathname.  For DCE access, DFS treats a user who is logged into the local
machine as \*Lroot\*O but is not authenticated to DCE as the
\*L/.../\*Vcellname\*L/hosts/\*Vhostname\*L/self\*O principal of the local
machine; in this case, the \*Lroot\*O user receives the permissions associated
with the machine's \*Lself\*O principal, which is treated as an authenticated
user from the local cell.  If the user is also authenticated to DCE as
\*Lroot\*O, DFS treats the user according to the DCE identity \*Lroot\*O.  The
DCE identity \*Lroot\*O effectively has \*Lroot\*O privileges for data in all
exported non-LFS filesets in the cell, which is a serious security risk.  Use
the DCE \*Lroot\*O identity very cautiously or disable it altogether.
.P
The second way a user can access a file or directory is via the object's local
pathname.  For local access, the \*Lroot\*O user has all of the privileges
commonly associated with \*Lroot\*O; the \*Lroot\*O user can perform any file
system operation on a file or directory.  Note that a file or directory in a
non-LFS fileset can always be accessed via a local pathname because a non-LFS
fileset must always be mounted locally, as a file system on its File Server
machine; a file or directory in a DCE LFS fileset can be accessed via a local
pathname only if its fileset is mounted locally.
.nL
.ne 20
.P
In summary, being a member of the \*Lfxd\*O administrative group allows you to
perform any operation on a file or directory in an exported fileset, but you
may have to change the file's or directory's protections first.  Being logged
into the local machine as \*Lroot\*O lets you perform any operation on a file
or directory in a locally mounted fileset immediately, without first changing
the protections.  Being authenticated as DCE \*Lroot\*O lets you perform any
operation on a file or directory in an exported non-LFS fileset immediately.
.P
.iX "\*Lfts\*O command suite" "\*Lcrserverentry\*O, use of groups"
.iX "Fileset Location Database" "group administration"
The second command, \*Lfts crserverentry\*O, creates a server entry in the
FLDB for a specified File Server machine.  The group specified with the
command's \%\*L-owner\*O option can administer entries in the FLDB for all
filesets on the File Server machine.  If the same group is given ownership of
the server entries for all of the File Server machines in a domain, members
of that group can then manipulate the FLDB entries for all of the filesets in
the domain.  Specifying a group with \*Lfts crserverentry\*O is an alternative
to specifying the same group in the \*Ladmin.fl\*O list, which would allow
members of the group to access FLDB entries for filesets on all machines in
the cell.
.P
The number and size of a cell's administrative groups depend upon the
organization of the cell.  For example, a cell with a simple organization\(emone
with a single administrative domain\(emcould have the following two basic
administrative groups:
.ML
.LI
A group for cell-wide file system and fileset administrators
(\*Lcell_fileset\*O)
.LI
A group for all server principals in the cell (\*Lcell_servers\*O)
.LE
.P
It could also include a third administrative group (\*Lcell_file_system\*O).
The members of this group would be a highly trusted subset of the members of
the \*Lcell_fileset\*O group.  Table 3-4 lists the groups associated with each
administrative list when only two groups are used and the groups associated
with each administrative list when three groups are used.  It also describes
the function of the groups included in each list.
.nL
.ne 20
.iX "administrative lists" "suggested uses (table)" 
.iX "cells " "administrative groups"
.TB "Suggested Groups for Administering a Single-Domain Cell"
.ad l
.in 0
.TS H
center, tab(@), box;
lB | lB | lB | lB
lB | lB | lB | lB
lBw(.80i) | lBw(1.0i) | lBw(1.0i) | lw(1.45i).
Administrative
List@With Two Groups@With Three Groups@Function
=
.TH
admin.bos@cell_fileset@cell_file_system@T{
Manages server processes
on each server machine
T}
_
admin.fl@cell_fileset@cell_fileset@T{
Creates server and fileset
entries in the Fileset
Location Database on
each Fileset Database
machine
T}
_
admin.ft@T{
cell_fileset
.br
cell_servers
T}@T{
cell_fileset
.br
cell_servers
T}@T{
Manages filesets on each
File Server machine;
moves filesets between
File Server machines
T}
_
admin.bak@cell_fileset@cell_fileset@T{
Modifies the Backup
Database on each Backup
Database machine
T}
_
admin.up@cell_servers@cell_servers@T{
Allows \*Lupclient\*O processes
to obtain files from
\*Lupserver\*O process\%es on
server machines
T}
.TE
.ad b
.in
.sp .5
.nL
.ne 20
.P
.iX "\*Lfxd\*O command" "use of groups"
.iX "\*Lfts\*O command suite" "\*Lcrserverentry\*O, use of groups"
If two groups are used, the \*Lcell_fileset\*O group is specified with both
the \p \%\*L-admingroup\*O option of the \*Lfxd\*O command and the \*L-owner\*O
option of the \*Lfts crserverentry\*O command for each File Server machine.
With this configuration, the same select group of administrators manages the
entire file system and all of the filesets in the cell.
.P
If the third group, \*Lcell_file_system\*O, is used, it replaces the
\*Lcell_fileset\*O group on the \*Ladmin.bos\*O lists on all server machines
in the cell to allow its members to control the server processes on the
machines.  It also replaces the \*Lcell_fileset\*O group on the
\*L\-admingroup\*O option of each \*Lfxd\*O command for the File Server
machines in the cell to enable its members to modify the permissions of all
exported filesets in the cell.
.P
An additional usage of the \*L\-owner\*O option of the \*Lfts crserverentry\*O
command and the \*L\-admingroup\*O option of the \*Lfxd\*O command is to allow
owners of local workstations to export data from their local disks to the
global namespace.  In this case, a group consisting of the owners of a local
workstation is specified with these options when a server entry is created
for the workstation and when the File Exporter is initialized on the machine.
(See Chapter 6 for more information about creating server entries.)
.iX "-]" "groups" "how to use in DFS"

