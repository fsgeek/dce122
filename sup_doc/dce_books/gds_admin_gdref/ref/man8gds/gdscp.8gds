...\" @OSF_COPYRIGHT@
...\" COPYRIGHT NOTICE
...\" Copyright (c) 1990, 1991, 1992, 1993, 1994 Open Software Foundation, Inc.
...\" ALL RIGHTS RESERVED (DCE).  See the file named COPYRIGHT.DCE for
...\" the full copyright text.
...\" 
...\" HISTORY
...\" $Log: gdscp.8gds,v $
...\" Revision 1.1.4.1  1996/06/18  15:51:41  wardr
...\" 	{enh,R1.2.2}
...\" 	Update for sgml conversion
...\" 	[1996/06/18  15:50:17  wardr]
...\"
...\" Revision 1.1.2.10  1995/08/16  18:37:00  weir
...\" 	Prentice-Hall edits: pass 2
...\" 	[1995/08/16  18:35:59  weir]
...\" 
...\" Revision 1.1.2.9  1995/08/11  21:10:47  weir
...\" 	Prentice-Hall edits
...\" 	[1995/08/11  21:09:53  weir]
...\" 
...\" Revision 1.1.2.8  1994/11/04  00:02:32  neilson
...\" 	Substituted macros for book names in cross refs.
...\" 	[1994/11/03  12:23:08  neilson]
...\" 
...\" Revision 1.1.2.7  1994/10/20  17:04:37  rnollman
...\" 	last checkin to be safe
...\" 	[1994/10/20  17:04:28  rnollman]
...\" 
...\" Revision 1.1.2.6  1994/10/19  17:58:06  rnollman
...\" 	incorporated Dave Treff's comments
...\" 	[1994/10/19  17:57:54  rnollman]
...\" 
...\" Revision 1.1.2.5  1994/10/18  16:19:49  rnollman
...\" 	editorial changes from munich
...\" 	[1994/10/18  16:19:38  rnollman]
...\" 
...\" Revision 1.1.2.4  1994/10/12  15:17:51  rnollman
...\" 	last minute editorial changes from munich
...\" 	[1994/10/12  15:17:36  rnollman]
...\" 
...\" Revision 1.1.2.3  1994/09/08  19:11:52  rnollman
...\" 	[rnollman] - updated with serviceability options
...\" 	[1994/09/08  19:10:10  rnollman]
...\" 
...\" Revision 1.1.2.2  1994/09/01  16:17:23  rnollman
...\" 	[rnollman] - checkin after munich comments incorp
...\" 	[1994/09/01  16:13:38  rnollman]
...\" 
...\" Revision 1.1.2.1  1994/08/04  21:04:13  hal
...\" 	Create DCE GDS Admin Gd & Ref from GDS parts of Adm Gd & Cmd Ref; fix log leaders if needed
...\" 	[1994/08/04  20:11:36  hal]
...\" 
...\" 	Creating GDS Admin Gd & Ref from Admin book.extended, Cmd Ref
...\" 
...\" Revision 1.1.2.7  1994/06/13  18:41:15  devobj
...\" 	cr10872 - fix copyright
...\" 	[1994/06/13  18:38:52  devobj]
...\" 
...\" Revision 1.1.2.6  1994/05/18  19:42:46  rnollman
...\" 	added new example
...\" 	[1994/05/18  19:42:31  rnollman]
...\" 
...\" Revision 1.1.2.5  1994/05/14  22:58:09  rnollman
...\" 	last beta update
...\" 	[1994/05/14  22:51:51  rnollman]
...\" 
...\" Revision 1.1.2.4  1994/05/09  19:24:36  rnollman
...\" 	updates from Munich trip
...\" 	[1994/05/09  19:24:16  rnollman]
...\" 
...\" Revision 1.1.2.3  1994/04/11  15:06:07  steto
...\" 	Checked out for testing tools; no changes made.
...\" 	[1994/04/11  15:05:37  steto]
...\" 
...\" Revision 1.1.2.2  1994/04/11  14:55:32  steto
...\" 	Added
...\" 	[1994/04/11  14:54:44  steto]
...\" 
...\" Revision 1.1.2.1  1994/04/07  17:17:21  rnollman
...\" 	new reference page
...\" 	[1994/04/07  17:17:05  rnollman]
...\" 
...\" $EndLog$
...\" /*****************************************************************
...\" *                                                                *
...\" * COPYRIGHT   (C)  SIEMENS NIXDORF INFORMATIONSSYSTEME AG 1994   *
...\" *                  ALL RIGHTS RESERVED                           *
...\" *                                                                *
...\" *****************************************************************/
.TH gdscp 8gds
.iX "Global Directory Service commands" "gdscp"
.SH "NAME"
\*Lgdscp\*O - is a command line interface you can use as an alternative to
the Object Administration menu-interface and part of the Cache Administration
menu-interface.
.SH "SYNOPSIS"
.PP
.sS
\*Lgdscp\*O \*L-c\*O {[\*Vobject\*O] \*Eoperation\*O [\*Edit-object-name\*O] [\*E-option\*O \*Evalue\*O]} [;] ...
.sE
.PP
.sS
\*Lgdscp\*O \*Efilename\*O
.sE
.PP
.sS
\*Lgdscp\*O
.sE
.SH "ARGUMENTS"
.VL
.LI "\*Vobject\*O"
The \*Lgdscp\*O interface supports the following object types:
.VL
.LI "\*Lx500obj\*O"
Represents the X.500 directory object.  These are the
objects in the DIT on which you will use \*Lgdscp\*O to perform directory operations.
.LI "\*Lx500svc\*O"
Represents the service controls that are passed in a directory operation (such
as \*Lsearch\*O, \*Llist\*O, and so on).  Refer to the \*(Dg for
more detailed explanation of how service controls are used by the Directory
Service).
.LI "\*Lx500abbr\*O"
Represents the abbreviations that are used by \*Lgdscp\*O for attributes.
.LE
.PP
The \*Eobject\*O parameter is optional.  If you do not specify an \*Eobject\*O
parameter, \*Lgdscp\*O defaults to the \*Lx500obj\*O object.
.LI "\*Voperation\*O
.nL 
Refer to the \*Lx500obj\*L, \*Lx500svc\*O, and \*Lx500abbr\*O reference pages for
descriptions of the operations supported by each object type.
.LI "\*Vdit-object-name\*O"
.nL
Refer to the \*Lx500obj\*O reference page for a description of how to specify
object names.
.LI "\*Voption\*O"
.nL
Refer to the \*Lx500obj\*L, \*Lx500svc\*O, and \*Lx500abbr\*O reference pages
for descriptions of the options supported by each object type.
.LI "\*Vfilename\*O"
.PP
The filename of a user-defined script containing \*Lgdscp\*O commands and/or any
other valid Tools Command Language (TCL) commands.
.LE
.PP 
.SH "DESCRIPTION"
The \*Lgdscp\*O program is a command line interface you can use as an alternative
to the Object Administration menu interface and part of the Cache
Administration menu interface of the GDS administration program.  You
can use \*Lgdscp\*O to manipulate objects in the DIT. You
can use \*Lgdscp\*O to perform operations such as \*Lcreate\*O,
\*Lmodify\*O, \*Ldelete\*O, and \*Lsearch\*O on DIT objects.  You can
perform SQL-like search operations.  You can also manipulate objects in
the DUA cache.  The \*Lgdscp\*O interface can be adapted to operate on any directory
schema.  You can specify DIT object names and attributes easily by using
strings.  The \*Lgdscp\*O interface supports the TCL
interface which allows the user to write scripts to perform repetitive
tasks.  Refer to the \*(Ac for information about the basic concepts and features
of TCL. You can direct the output of one command as an input to a
subsequent command.  The \*Lgdscp\*O interface also supports history mechanism and
line recall and editing.
.PP
The \*Lgdscp\*O interface allows you to enter commands in the following modes:
.ML
.LI 
Interactive
.LI 
Command line
.LE
.SS "Interactive Mode"
.PP
Enter the \*Lgdscp\*O command without any arguments to activate interactive mode.
At the \*Lgdscp\*O prompt, enter a \*Lgdscp\*O command.  The \*Lgdscp\*O
interface executes the command, displays the result, and is ready to accept another
command.
.SS "Command-Line Mode"
.PP
Activate command-line mode from the system prompt by using one of the following
methods:
.ML
.LI 
Enter the \*Lgdscp\*O command with a filename of a script containing \*Lgdscp\*O
commands (and/or other valid TCL commands) as follows:
.PP
.iS
\*Lgdscp myown.tcl\*O
.iE
.LI 
Enter the \*Lgdscp\*O command with the \%\*L-c\*O option followed by \*Lgdscp\*O
commands. Enter multiple commands by separating them with a semicolon (;) as follows:
.PP
.oS
\*C% \*Lgdscp -c "bind; show /C=de/O=sni/OU=ap11;quit"\*O
.oE
.LE
.SS "Startup Scripts"
.PP
When you invoke \*Lgdscp\*O, the following script files are executed in the
order shown:
.VL
.LI "\*L[info library]/init.tcl\*O"
Contains the standard TCL initialization scripts with definitions for the
\*Lunknown\*O and the \*Lauto_load\*O commands; \*L[info library]\*O evaluates
to the path where TCL is installed.
.LI "\*E$gdscp_library\*L/init.gdscp\*O"
Contains the initialization scripts implementing the \*Lgdscp\*O commands and
tasks. The implementation sets the TCL variable \*Egdscp_library\*O to
\*L/opt/dcelocal/gdscp\*O by default.
.LI "\*L$HOME/.gdscprc\*O"
Contains user customizations.
.LI "User-written Script Files"
These files are evaluated only if you specify the \*LTCL_PATH\*O environment
variable. The files must end with the \*L.tcl\*O extension and should be in
the directory specified by the environmental variable \*LTCL_PATH\*O. You can
specify multiple paths by separating the pathnames with a colon (:). For example:
.PP
.ps -2
.iS
\*LTCL_PATH=/home/nollman/develop/scripts:$HOME/scripts\*O
.iE
.ps +2
.LE
.PP
The following example shows a sample TCL script file.  The script
performs a bind operation. If the bind is successful, it creates the
objects \*L/C=de\*O, \*L/C=de/O=sni\*O, and so on.
.PP
.ps -2
.iS
#Example TCL Script file

#Perform a BIND operation
if {[catch bind] == 0} {
    #Create the objects
    create /C=de -attribute OCL=C
    create /C=de/O=sni -attribute OCL=ORG
    create /C=de/O=sni/OU=ap11 -attribute OCL=OU
    create /C=de/O=sni/OU=ap11/CN=schmid -attribute OCL=ORP SN=schmid
}
.iE
.ps +2
.PP
The following sample TCL script file prints the value of the first returned
result of a search operation:
.nL
.ne 20
.ps -2
.iS
#Example that demonstrates TCL commands

#Perform a BIND operation
bind

#Make a search request and store the result in variable "result"
set result [search /C=de/O=sni/OU=ap11 -filter CN='*' -subtree]

#Now access the first result item from the list and store it in 
#the variable "first"
set first [lindex $result 0]

#Print the first result
puts -nonewline "The first result is : "
puts $first
.iE
.ps +2
.PP
The following sample TCL procedure deletes the immediate children of the 
specified object in the DIT.
.PP
.ps -2
.iS
#The "object" parameter is the object in the DIT
#whose immediate children are to be deleted

proc delete_children {object} {
    foreach i [list $object] {
        delete $i
    }
}
.iE
.ps +2
.SS "Command Processing"
.PP
The \*Lgdscp\*O interface supports the TCL built-in commands apart from its
own commands. If a command name is unknown to \*Lgdscp\*O, it is
considered to be an "unknown" command and is evaluated using the
following algorithm:
.ML
.LI 
If the command is found in a TCL script file, \*Lgdscp\*O executes the
command.
.LI 
If the command exists as an executable UNIX program, \*Lgdscp\*O executes
the command.  Therefore, you can invoke any UNIX command from the \*Lgdscp\*O
prompt (for example, \*Lls -l\*O).
.LI 
If you have invoked the command at the top level of the TCL shell and
the command requests C-shell history substitution in one of the common
forms (for example, !!, !<\*Enumber\*O> or \*E\e^old\*O\*E\e^new\*O),
\*Lgdscp\*O emulates the C-shell's history substitution.
.LI 
If you have invoked the command at the top level of the TCL shell and the
command is a unique abbreviation for another command, \*Lgdscp\*O invokes the 
command.
.LE
.PP
The \*Lgdscp\*O interface makes use of two mechanisms to allow all object
names, operation names, and options to be abbreviated to the shortest unique
string.  
.PP
The first is the standard TCL mechanism built into the TCL
\*Lunknown\*O command described in the previous paragraphs. This
mechanism only works if the command is entered interactively. If the
command is found in a script, abbreviation checking is not performed
by the standard implementation of the \*Lunknown\*O command. This is
to discourage the practice of using abbreviations of commands in
scripts.
.PP
The other mechanism used for abbreviations is built into the individual
\*Lgdscp\*O commands themselves.  This allows the operation name to be
abbreviated to the shortest unique operation supported for an object, and
the options to be abbreviated to the shortest unique string representing
an option supported by an object and operation. This form of
abbreviation is always available, whether invoked interactively or using a
script.
.PP
For example, consider the \*Lmodify\*O operation on the \*Lx500svc\*O object:
.PP
.iS
\*Lx500svc  modify  -automaticcontinuation  TRUE  -sizelimit  100\*O
.iE
.PP
In the abbreviated form, the same operation can be entered as follows:
.PP
.iS
\*Lx500s  mod  -a  TRUE  -si  100\*O
.iE
.PP
.nS note
The \*Lgdscp\*O interface renames the TCL \*Llist\*O command to \*Lllist\*O
so that it does not conflict with the \*Lgdscp\*O \*Llist\*O command.
.nE
.SS "Terminating gdscp"
.PP
The \*Lexit\*O and \*Lquit\*O commands terminate an interactive \*Lgdscp\*O
session and unbind from the current Directory session. Use the following
command syntax:
.PP
\*Lexit\*O \*En\*O
.PP
\*Lquit\*O \*En\*O
.PP
Use the \*En\*O  argument to specify the exit value returned to the shell. 
.PP
The following example terminates a session and returns an exit value of
\*L56\*O to the shell:
.PP
.iS
\*Lexit 56\*O
.iE
.nL
.ne 20
.SS "Line Recall and Editing"
.PP
You can edit a line before it is sent to \*Lgdscp\*O by typing certain
control characters and escape sequences. To enter a control character,
hold down \*L<Ctrl>\*O while pressing the appropriate character
key. To enter an escape sequence, press \*L<Esc>\*O followed by
one or more character keys. The escape sequences are case sensitive;
the control characters are not.
.PP
You can enter an editing command anywhere on a line. In addition, you
can press \*L<RETURN>\*O anywhere on the line.
.PP
You can specify a number [\*En\*O] as a repeat count. To enter a repeat
count, press \*L<Esc>\*O , a number, and the command you want to execute. 
.PP
For example, \*LESC 4 C-d\*O deletes the next four characters on a line.
.PP
Use the control characters shown in the following table for line editing.
.PP
.ne 8i
.TS
center,box,tab(@);
lB | lB
l | l.
Control Character@Action Performed.
=
\*LC-A\*O@T{
Move to the beginning of the line.
T}
_
\*LC-B\*O@T{
Move left (backward) [\*En\*O].
T}
_
\*LC-D\*O@T{
Delete the character [\*En\*O].
T}
_
\*LC-E\*O@T{
Move to the end of the line.
T}
_
\*LC-F\*O@T{
Move right (forward) [\*En\*O].
T}
_
\*LC-G\*O@T{
Ring the bell.
T}
_
\*LC-H\*O@T{
Delete character before the cursor [\*En\*O].
T}
_
\*LC-I\*O@T{
Complete the filename (\*LTAB\*O key).
T}
_
\*LC-J\*O@T{
Done with line (\*LRETURN\*O key).
T}
_
\*LC-K\*O@T{
Kill to the end of the line (or column [\*En\*O]).
T}
_
\*LC-L\*O@T{
Redisplay the line.
T}
_
\*LC-M\*O@T{
Done with line (alternate \*LRETURN\*O key).
T}
_
\*LC-N\*O@T{
Get next line from history [\*En\*O].
T}
_
\*LC-P\*O@T{
Get previous line from history [\*En\*O].
T}
_
\*LC-R\*O@T{
Search backward (or forward if [\*En\*O]) through history for text; start line if text begins with an up arrow.
T}
_
\*LC-T\*O@T{
Transpose characters.
T}
_
\*LC-V\*O@T{
Insert next character even if it is an edit command.
T}
.TE
...\" 
...\" 
...\" 
...\" 
.TS
center,box,tab(@);
lB | lB
l | l.
Control Character@Action Performed.
=
\*LC-W\*O@T{
Wipe to the mark.
T}
_
\*LC-XC-X\*O@T{
Exchange the current location and mark.
T}
_
\*LC-Y\*O@T{
Yank back the last killed text.
T}
_
\*LC-[\*O@T{
Start an escape sequence (\*LESC\*O key).
T}
_
\*LC-]c\*O@T{
Move forward to the next character \*Ec\*O.
T}
_
\*LC-?\*O@T{
Delete the character before the cursor [\*En\*O].
T}
.TE
...\" 
...\" 
.PP
.ne 8i
Use the escape sequences shown in the following table for line editing.
.sp
.TS
center,box,tab(@);
l | l.
Escape Sequence@Action Performed.
=
\*LESC C-H\*O@T{
Delete the previous word (\*LBACKSPACE\*O key) [\*En\*O].
T}
_
\*LESC DEL\*O@T{
Delete the previous word (\*LDELETE\*O key) [\*En\*O].
T}
_
\*LESC SPC\*O@T{
Set the mark (\*LSPACE BAR\*O); refer to \*LC-XC-X\*O and \*LC-Y\*O control
characters in previous table.
T}
_
\*LESC .\*O@T{
Get the last (or [\*En\*O]th) word from the previous line.
T}
_
\*LESC ?\*O@T{
Show possible completions.
T}
_
\*LESC <\*O@T{
Move to the start of history.
T}
_
\*LESC >\*O@T{
Move to the end of history.
T}
_
\*LESC b\*O@T{
Move backward one word [\*En\*O].
T}
_
\*LESC d\*O@T{
Delete the word under the cursor [\*En\*O].
T}
_
\*LESC f\*O@T{
Move forward one word [\*En\*O].
T}
_
\*LESC l\*O@T{
Make the word lowercase [\*En\*O].
T}
_
\*LESC u\*O@T{
Make the word uppercase [\*En\*O].
T}
_
\*LESC y\*O@T{
Yank back the last killed text.
T}
_
\*LESC w\*O@T{
Make area up to mark yankable.
T}
_
\*LESC nn\*O@T{
Set repeat count to the number \*Enn\*O.
T}
.TE
.sp .5
.PP
The \*Lgdscp\*O interface also supports filename completion. For example,
suppose the root directory has the following files in it:
.PP
.ML
.LI
\*Lbin\*O
.LI
\*Lvmunix\*O
.LI
\*Lcore\*O
.LI
\*Lvmunix.old\*O
.LE
.nL
.ne 20
.PP
If you type \*Lrm /v\*O and then press \*L<TAB>\*O, \*Lgdscp\*O will finish off
as much of the name as possible by adding \*Lmunix\*O. If the name is not unique,
the terminal will sound a beep tone. If you press \*L<Esc>-?\*O, \*Lgdscp\*O will
display the two possible complete file names: \*Lvmunix\*O and \*Lvmunix.old\*O.
If you respond by entering a period (.) and by pressing the \*LTAB\*O key,
\*Lgdscp\*O completes the filename for you.
.PP 
.SS "Serviceability"
Refer to Section 5.5 of the \*(Ag for more information on serviceability messaging.
...\" 
...\" 
...\" 
.SH "EXAMPLES"
The following TCL script examples demonstrate various \*Lgdscp\*O operations.
.PP
...\" ---------------------------------------------------------------------
.SS "Bind Command"
The following script portion shows a \*Lbind\*O command which performs an
anonymous bind to a DSA for directory identifier \*L16\*O:
.PP
.ps -2
.iS
# Perform a bind operation to the specified DSA. 
gdscp> x500obj bind -dirid 16 -dsa /C=de/O=sni/OU=ap11/CN=dsa/CN=dsa16
.iE
.ps +2
...\" ---------------------------------------------------------------------
.PP
.SS "Create Command"
The following script portion shows various examples of \*Lcreate\*O commands:
.PP
.ps -2
.iS
# create the country object
gdscp> x500obj create /c=de -attribute ocl=c
# create the organization object
gdscp> x500obj create /c=de/o=sni -attribute ocl=org
# create the organizational-unit object
gdscp> x500obj create /c=de/o=sni/ou=nm123 -attribute ocl=ou
# Set the current working object variable
gdscp> set gdscp_cwo /c=de/o=sni/ou=nm123
/c=de/o=sni/ou=nm123
# create the common-name objects
gdscp> x500obj create cn=naik -attribute  { {ocl=orp} {sn=naik} 
{tn=12345;369072;576268} {up=naik} }
gdscp> x500obj create cn=naik,ou=nm123 -attribute { {ocl=orp} {sn=naik} 
{tn=99999} }
gdscp> x500obj create cn=mueller -attribute  { {ocl=orp} {sn=John} 
{dsc=Software Professional} }
gdscp> x500obj create cn=miller -attribute  { {ocl=orp} {sn=Peter} 
{dsc=Engineer} }
gdscp> x500obj create cn=maller -attribute  { {ocl=orp} {sn=Henry} 
{dsc=Engineer} }
gdscp> x500obj create cn=meller -attribute  { {ocl=orp} {sn=John} }
# create the dsa name object
gdscp> x500obj create cn=dsa -attribute { {ocl=app} }
gdscp> x500obj create CN=dsa/CN=dsa-m10 -attribute { {ocl=dsa}  
{PSA={TS=Server,NA='TCP/IP!internet=127.0.0.1+port=30101'}} }
# create an aliased object for /c=de/o=sni/ou=nm123/cn=naik
gdscp> x500obj create /cn=na -attribute AON={/c=de/o=sni/ou=nm123/cn=naik} 
OCL=ALI
.iE
.ps +2
...\" ---------------------------------------------------------------------
.PP
.SS "Various Display and Modify Commands"
The following script portion shows various examples of \*Lgdscp\*O commands
that either display the contents of the directory in various ways or allow
the contents to be modified:
.PP
.ps -2
.iS
gdscp> x500obj show /cn=na
/C=de/O=sni/OU=nm123/CN=naik {OCL=ORP;PER;TOP} CN=naik SN=naik 
{TN=12345;369072;576268} {UP='\ex6e\ex61\ex69\ex6b'}
gdscp> x500svc modify -dontdereferencealias TRUE
gdscp> x500obj show /cn=na
/CN=na {OCL=ALI;TOP} AON={/C=de/O=sni/OU=nm123/CN=naik} CN=na
gdscp> x500svc modify -default
gdscp> x500obj delete /cn=na
# list under '/C=de'
gdscp> x500obj list /c=de
/C=de/O=sni
# list under '/'
gdscp> x500obj list /
/CN=Schema /C=de
# list under '/C=de/O=sni/OU=nm123'
gdscp> x500obj list -pretty
.iE
.ps +2
.PP
The output from the last command will be as follows, if all of the operations
previously shown have been performed on the directory:
...\" 
.ps -2
.oS
 1) /C=de/O=sni/OU=nm123/CN=naik
 2) /C=de/O=sni/OU=nm123/CN=mueller
 3) /C=de/O=sni/OU=nm123/CN=miller
 4) /C=de/O=sni/OU=nm123/CN=maller
 5) /C=de/O=sni/OU=nm123/CN=meller
 6) /C=de/O=sni/OU=nm123/CN=dsa
 7) /C=de/O=sni/OU=nm123/CN=naik,OU=nm123
.oE
.ps +2
.PP
In the following script portion, the command examples are resumed from above:
...\" 
.ps -2
.iS
gdscp> x500obj show /C=de/O=sni/OU=nm123/CN=mueller -attribute SN DSC
/C=de/O=sni/OU=nm123/CN=mueller SN=John {DSC=Software Professional}
# -> the object and attributes (only types) will be displayed
gdscp> x500obj show /C=de/O=sni/OU=nm123/CN=mueller -types
/C=de/O=sni/OU=nm123/CN=mueller OCL CN SN DSC
.iE
.ps +2
.nL
.ne 20
.ps -2
.iS
# modify
# -> the attribute telephone number will be removed
gdscp> x500obj modify /c=de/o=sni/ou=nm123/cn=naik -removeattr tn
gdscp> x500obj show /c=de/o=sni/ou=nm123/cn=naik
/C=de/O=sni/OU=nm123/CN=naik {OCL=ORP;PER;TOP} CN=naik SN=naik {UP='\ex6e\ex61\ex69\ex6b'}
# modify
# -> the attribute telephone number (with value) will be added
gdscp> x500obj modify /c=de/o=sni/ou=nm123/cn=naik -addattr  "tn=12345;369072;576268;9999"
gdscp> x500obj show /c=de/o=sni/ou=nm123/cn=naik -pretty
.iE
.ps +2
.PP
The output from the last command will be as follows, if all of the operations
previously shown have been performed on the directory:
...\" 
.ps -2
.oS
 1) /C=de/O=sni/OU=nm123/CN=naik
    Object-Class     : Organizational-Person
                     : Person
                     : Top
    Common-Name      : naik
    Surname          : naik
    Telephone-Number : 12345
                     : 369072
                     : 576268
                     : 9999
    User-Password    : \ex6e\ex61\ex69\ex6b
.oE
.ps +2
.PP
In the following script portion, the command examples are resumed from above:
.ps -2
.iS
# modify
#y -> rdn of object /c=de/o=sni/ou=nm123/cn=meller will be 
#changed to Loose
gdscp> x500obj modify /c=de/o=sni/ou=nm123/cn=meller -rdn cn=Loose
gdscp> x500obj show /c=de/o=sni/ou=nm123/cn=Loose
/C=de/O=sni/OU=nm123/CN=Loose {OCL=ORP;PER;TOP} CN=Loose SN=John
.iE
.ps +2
...\" ---------------------------------------------------------------------
.PP
.SS "Compare and Search Commands"
The following script portion shows various examples of \*Lgdscp\*O commands
that perform comparison and search operations on the contents of the
directory:
...\" 
.PP
.ps -2
.iS
# compare 
# attribute telephone number 12345 has to be present
gdscp> x500obj compare /c=de/o=sni/ou=nm123/cn=naik -attribute tn=12345
.iE
.ps +2
.nL
.ne 20
.PP
The output from this command should be:
.oS
TRUE
.oE
.PP
if the commands previously shown have been performed on the directory.
.PP
The next command shows a search operation:
...\" 
.ps -2
.iS
# search for all children of '/c=de/o=sni/ou=nm123'
# -> all objects and attributes with cn=naik and 
#phonenumber=12345 or cn=dsa or cn=Loose will be found
gdscp> x500obj search /c=de/o=sni/ou=nm123 -filter {{cn=dsa ||  cn=Loose || \e
(cn=naik && tn=12345)}} -allattr -onelevel -pretty
.iE
.ps +2
.PP
The output from this command should be as follows:
...\" 
.ps -2
.oS
 1) /C=de/O=sni/OU=nm123/CN=naik
    Object-Class     : Organizational-Person
                     : Person
                     : Top
    Common-Name      : naik
    Surname          : naik
    Telephone-Number : 12345
                     : 369072
                     : 576268
                     : 9999
    User-Password    : \ex6e\ex61\ex69\ex6b
 2) /C=de/O=sni/OU=nm123/CN=Loose
    Object-Class     : Organizational-Person
                     : Person
                     : Top
    Common-Name      : Loose
    Surname          : John
 3) /C=de/O=sni/OU=nm123/CN=dsa
    Object-Class     : Application-Process
                     : Top
    Common-Name      : dsa
.oE
.ps +2
.PP
The next command shows a further search operation:
...\" 
.ps -2
.iS
# search for whole subtree under '/c=de/o=sni/ou=nm123'
# -> all objects with cn=m* and the attributes sn and dsc 
#will be found
gdscp> x500obj search /c=de/o=sni/ou=nm123 -filter {cn=m*} -attribute  
{sn dsc} -subtree -pretty
.oE
.ps +2
.PP
The output from this command should be as follows:
...\" 
.ps -2
.oS
 1) /C=de/O=sni/OU=nm123/CN=maller
    Surname     : Henry
    Description : Engineer
 2) /C=de/O=sni/OU=nm123/CN=miller
    Surname     : Peter
    Description : Engineer
 3) /C=de/O=sni/OU=nm123/CN=mueller
    Surname     : John
    Description : Software Professional
.oE
.ps +2
.PP
The following script portion shows one more example of a search operation:
.ps -2
.iS
# search for subtree (incl. base object) '/' 
# -> all objects with cn~=mueller, OCL=ORP or OCL=REP 
#and sn=(not)henry and dsc=* will be found
gdscp> search -filter {{(cn~=mueller) && ((OCL=ORP) || OCL=REP) && ! 
(sn=henry) && (dsc=*) }} -subtree
/C=de/O=sni/OU=nm123/CN=mueller /C=de/O=sni/OU=nm123/CN=miller
.iE
.ps +2
...\" ---------------------------------------------------------------------
.PP
.SS "Delete Command"
The following script portion shows various examples of \*Ldelete\*O
operations:
...\" 
.PP
.ps -2
.iS
# Remove the objects from the DIT
# remove the dsa object
gdscp> x500obj delete /C=de/O=sni/OU=nm123/CN=dsa/CN=dsa-m10
gdscp> x500obj delete /c=de/o=sni/ou=nm123/cn=dsa
# remove the common name objects
gdscp> x500obj delete /c=de/o=sni/ou=nm123/cn=Loose
gdscp> x500obj delete /c=de/o=sni/ou=nm123/cn=maller
gdscp> x500obj delete /c=de/o=sni/ou=nm123/cn=miller
gdscp> x500obj delete /c=de/o=sni/ou=nm123/cn=mueller
gdscp> x500obj delete /c=de/o=sni/ou=nm123/cn=naik,ou=nm123
gdscp> x500obj delete /c=de/o=sni/ou=nm123/cn=naik
# remove the organizational-unit object
gdscp> x500obj delete /c=de/o=sni/ou=nm123
# remove the organization object
gdscp> x500obj delete /c=de/o=sni
# remove the country object
gdscp> x500obj delete /c=de
.iE
.ps +2
...\" ---------------------------------------------------------------------
.PP
.SS "Cache Commands"
The following script portion shows various examples of operations on the
cache:
...\" 
.PP
.ps -2
.iS
# Bind to the cache
gdscp> x500obj bind -dirid 16 -cache
# Modify the service controls to perform operations on cache
gdscp> x500svc modify -duacache TRUE -usedsa FALSE -dontusecopy FALSE
gdscp> x500obj show /c=de/o=sni/ou=ap11/cn=dsa/cn=dsa16 -pretty
.iE
.ps +2
.PP
The output from this command should be as follows:
...\" 
.ps -2
.oS
 1) /C=de/O=sni/OU=ap11/CN=dsa/CN=dsa16
    Object-Class         : Directory-Service-Agent
                         : Application-Entity
                         : Top
    Presentation-Address
      Network-Address    : TCP/IP!internet=127.0.0.1+port=25016
      T-Selector         : Server
.oE
.ps +2
...\" 
...\" ---------------------------------------------------------------------
...\" 
.SH "RETURN VALUES"
.PP
All \*Lgdscp\*O commands return one of the following:
.ML
.LI 
A list of information requested by the user  (such as the results of a search
operation)
.LI 
NULL (indicating successful completion of an operation)
.LI 
An error message string  
.LE
.PP
The \*Lgdscp\*O interface uses the TCL native error handling facility to log
additional error information.  This additional information is stored
in the two variables \*EerrorInfo\*O and \*EerrorCode\*O.  The
\*EerrorInfo\*O variable contains a stack trace of each of the nested
calls to the TCL interpreter when the error occurred.  The
\*EerrorCode\*O variable is a TCL list containing two elements,
\*LGDSCP\*O (identifying the \*Lgdscp\*O program) and the numeric
value of the error code.  You can use the TCL \*Lcatch\*O command to
determine the successful completion or failure of the various
\*Lgdscp\*O commands.  Refer to \*Lgdscp.h\*O header file for a
description of the error codes.
.PP
To view the results in a structured format (for example, after a
successful search operation), use the \%\*L-pretty\*O option.  If you specify
this option, the output of a command result is output in pages of 23 lines in length.
You can scan through the output by using special \*Lgdscp\*O scrolling commands:
.nL
.ne 20
.VL
.LI "\*Ln\*O"
View the \*Vn\*Oth page
.LI "\*L-n\*O"
Skip \*Vn\*O pages backward
.LI "\*L+n\*O"
Skip \*Vn\*O pages forward
.LI "\*L$\*O"
View the last page
.LI "\*Lq\*O"
Quit
.LI "\*L<SPACE>\*O"
Advance to the next page
.LI "\*L<CR>\*O"
Advance one line
.LE
.PP
If you specify the \%\*L-pretty\*O option, the return value of the command will be NULL and not a TCL list.
.SH "RELATED INFORMATION
Refer to the \*(Ac for information about the basic concepts and features of TCL.
.PP
Refer to the \*Lx500abbr\*O, \*Lx500obj\*O, and \*Lx500svc\*O reference pages.
.iX "Global Directory Service" "gdscp"




