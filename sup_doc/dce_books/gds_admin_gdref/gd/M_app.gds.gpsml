...\" @OSF_COPYRIGHT@
...\" COPYRIGHT NOTICE
...\" Copyright (c) 1990, 1991, 1992, 1993, 1994 Open Software Foundation, Inc.
...\" ALL RIGHTS RESERVED (DCE).  See the file named COPYRIGHT.DCE for
...\" the full copyright text.
...\" 
...\" HISTORY
...\" $Log: M_app.gds.gpsml,v $
...\" Revision 1.1.2.6  1995/08/15  20:10:19  weir
...\" 	Prentice-Hall edits: second pass
...\" 	[1995/08/15  20:09:24  weir]
...\"
...\" Revision 1.1.2.4  1994/10/19  16:45:09  rnollman
...\" 	incorporated edits from dave treff
...\" 	[1994/10/19  16:44:51  rnollman]
...\" 
...\" Revision 1.1.2.3  1994/09/30  19:48:59  hal
...\" 	Make book format with right appendix Ids, ref page heads
...\" 	[1994/09/30  19:45:52  hal]
...\" 
...\" Revision 1.1.2.2  1994/09/01  16:59:11  rnollman
...\" 	[rnollman] - checkin with editOSF editorial comments
...\" 	[1994/09/01  16:54:12  rnollman]
...\" 
...\" Revision 1.1.2.1  1994/08/04  21:01:17  hal
...\" 	Create DCE GDS Admin Gd & Ref from GDS parts of Adm Gd & Cmd Ref; fix log leaders if needed
...\" 	[1994/08/04  20:08:29  hal]
...\" 
...\" 	Creating GDS Admin Gd & Ref from Admin book.extended, Cmd Ref
...\" 
...\" Revision 1.1.2.6  1994/06/22  20:21:56  rnollman
...\" 	changes from munich
...\" 	[1994/06/22  20:21:40  rnollman]
...\" 
...\" Revision 1.1.2.5  1994/06/22  20:16:30  rnollman
...\" 	changes from Munich
...\" 	[1994/06/22  20:16:16  rnollman]
...\" 
...\" Revision 1.1.2.4  1994/06/22  19:27:22  rnollman
...\" 	incorporated comments from munich after beta freeze
...\" 	[1994/06/22  19:27:04  rnollman]
...\" 
...\" Revision 1.1.2.3  1994/06/13  17:28:04  devobj
...\" 	cr10872 - fix copyright
...\" 	[1994/06/13  17:27:36  devobj]
...\" 
...\" Revision 1.1.2.2  1994/05/14  14:35:18  rnollman
...\" 	final final beta submittal
...\" 	[1994/05/14  14:21:46  rnollman]
...\" 
...\" Revision 1.1.2.1  1994/05/09  22:00:32  rnollman
...\" 	new appendix
...\" 	[1994/05/09  22:00:19  rnollman]
...\" 
...\" $EndLog$
'\"*********************************************************************
'\" /*****************************************************************
'\" *                                                                *
'\" * COPYRIGHT   (C)  SIEMENS NIXDORF INFORMATIONSSYSTEME AG 1994   *
'\" *                  ALL RIGHTS RESERVED                           *
'\" *                                                                *
'\" *****************************************************************/
.H 1 "Navigation in the GDS"
This appendix describes information about the internal behavior of GDS.
The material is provided for more advanced administrators who want to
know detailed information on how Directory Service requests are
routed and processed among DSAs.
.H 2 "Continuation References"
A continuation reference describes how a service request can be continued
at one or more other DSAs. A continuation reference is typically returned
when a DSA is unable to fulfill the request itself.
.P
A continuation reference has the following structure:
.P
.VL .5i
.LI "\*LTARGET\ OBJECT\*O"
.nL
The DN of the target object of the continued request or subrequest. In general
the target object of the continued request is the same as the target object of
the incoming request.
.P
The \*LTARGET OBJECT\*O is not the DN of the target object of the incoming
request if the DSA had dereferenced an alias. For example, suppose that the
\*LTARGET OBJECT\*O of the incoming request is:
.P
.oS
/RDN\d1\u/.../RDN\*E\dk\u\*O\*C/RDN\*O\*E\dk+1\u\*O\*C/.../RDN\*E\dn\u\*O
.oE
.P
and that \*L/RDN\*O\*E\dk\u\*O is an alias name for the object:
.P
.oS
/RDN\d1'\u/.../RDN\*O\*E\dj'\u\*O
.oE
.P
then the target object would be:
.P
.oS
/RDN\d1'\u/.../RDN\*E\dj'\u\*O\*C/RDN\*O\*E\dk+1\u\*O\*C/.../RDN\*O\*E\dn\u\*O
.oE
.P
The \*LTARGET OBJECT\*O is not the DN of a
subordinate of the incoming request if the following conditions are met:
.P
.ML
.LI
It is a \*Lsearch\*O or \*Llist\*O operation
.LI
The DSA has administrative authority for the target object
.LI
There is at least one immediate subordinate of it which is mastered by another DSA
.LE
.P
For example, suppose the target object of the incoming request is:
.P
.oS
/RDN\d1\u/.../RDN\dm\u
.oE
.P
The target object of the continuation reference is:
.P
.oS
/RDN\d1\u/.../RDN\dm\u/.../RDN\dn\u
.oE
.P
The DSA is master of this object and is not master of the subordinate object:
.P
.oS
/RDN\d1\u/.../RDN\dm\u/.../RDN\dn\u/RDN\dn+1\u
.oE
.P
.LI "\*LALIASED\ RDNS\*O"
.nL
The number of RDNs of the target object that have been generated by dereferencing
an alias. \*LALIASED RDNS\*O is present only if an alias was dereferenced. In the
example above, the \*LALIASED RDNS\*O would be simply \*Ej\*O.
.P
.LI "\*LOPERATION\ PROGRESS\*O"
.nL
Describes the progress of the name resolution as one of the following:
.VL
.LI "\*LNOT\ STARTED\*O"
.nL
The DSA has no knowledge of the target object nor any of its superior nodes.
.LI "\*LPROCEEDING\*O"
.nL
The DSA has knowledge about the target object of any of its superior nodes (indicated
by the \*Lnext RDN to be resolved\*O). The DSA that receives the request should have
administrative authority of this object, but not of its superior node.
.LI "\*LCOMPLETED\*O"
.nL
Name resolution is completed. The DSA that gets the continued request is no longer
involved in finding the target object.
.LE
.P
.LI "\*LREFERENCE\ TYPE\*O"
.nL
Characterizes the type of the reference as one of the following:
.VL
.LI "\*LSUPERIOR\*O"
Set when the DSA has no knowledge of the target object or any of its superior nodes
.LI "\*LSUBORDINATE\*O"
.nL
Operation progress is proceeding;(let \*Vk\*O be the next RDN to be resolved\*O),the
DSA has administrative authority of \*LRDN\dk-1\u\*O.
.LI "\*LCROSS\*O"
.nL
Operation progress is proceeding;(let \*Vk\*O be the next RDN to be resolved\*O),the
DSA does not have administrative authority of \*LRDN\dk-1\u\*O.
.LI "\*LNONSPECIFIC\ SUBORDINATES\*O"
.nL
Not used in GDS
.LE
.LI "\*LRDNS\ RESOLVED\*O"
.nL
Specifies the last RDN of the target object that is mastered by the DSA; it is present
when \*LREFERENCE TYPE\*O is \*LCROSS\*O.
.LI "\*LENTRY\ ONLY\*O"
.nL
Boolean component which is \*LTRUE\*O if, in a one-level search, the DSA has found an
alias as a subordinate of the base object whose aliased object could not be found locally.
.nL
.ne 20
.LI "\*LACCESS\ POINTS\*O
.nL
A set of DN and PSAP address pairs of the DSA that should continue to perform the
operation. The continuation references that are generated by the GDS contain only
one such access point.
.LE
.P
The continuation references are returned to the DUA either as a
referral or as components of a partial outcome qualifier in the result
of a \*Llist\*O or \*Lsearch\*O operation.  The DUA may use the access
points, to bind the referenced DSAs and to forward the request to
them.  The DUA includes the \*LOPERATION PROGRESS\*O and the \*LALIASED
RDNS\*O components in the common arguments to inform the referenced
DSA about the status of the operation.
.P
When the DSA handles the continuation references, it includes all the
components except \*LRDNS RESOLVED\*O and \*LACCESS POINTS\*O into the
chaining arguments of the chained request or subrequest to inform the
referenced DSA about the status of the operation.  The access points
are used to bind the referenced DSAs by DSP.
.H 2 "Generating References from the Local Database"
.P
This section describes how references are generated from information from
the local database.  
.P
Every entry of the local database contains the \*LMASTER KNOWLEDGE\*O
attribute.  The \*LMASTER KNOWLEDGE\*O attribute contains the DN of the
DSA that has the administrative authority of the entry.  If this DN is
different from the name of the performing DSA, it may be used for a
continuation reference.  To generate the ACCESS POINT, the DSA reads
the presentation address of this DSA from its local database.  The DSA
must contain this entry, otherwise it cannot 
work cooperatively with this DSA. 
.P
References are generated in the following phases:
.P
.VL
.LI "Name\ Resolution"
.nL
The handling of the request, before the target object of the operation
has been found.
.nL
.ne 20
.LI "Evaluation"
.nL
Performs the operation specified by a particular directory request
(for example, a \*Lsearch\*O request) after the target object of the
operation has been found.
.LE
.P
To demonstrate how references are generated in the Name Resolution
phase, suppose the target object is:
.P
.oS
RDN\d1\u/.../RDN\*E\dn\u\*O
.oE
.P
The DSA searches for the longest part of the target object in its local
database and finds the entry:
.P
.oS
RDN\d1\u/.../RDN\*E\dm\u, m <= n\*O
.oE
.P
This entry may be an object mastered by the DSA itself, a shadow or an alias.
.P
The following situations can occur:
.VL
.LI "\*Em\*O\ =\ \*L0\*O"
.nL
The DSA does not even hold \*LRDN\d1\u\*O. The DSA checks whether it is a
first-level DSA. If so, the DSA generates a name error with the problem
\*LNO SUCH OBJECT\*O. Otherwise the DSA generates a reference with the
components shown in Table A-1.
.LI "\*L0\*O\ <\ \*Em\*O\ <\ \*En\*O"
.nL
The DSA holds \*LRDN\d1\u/.../RDN\*E\dm\u\*O, but not \*LRDN\*E\dm+1\u\*O
(nor the target object itself). If this object is mastered by the DSA itself,
it creates a name error with the problem \*LNO SUCH OBJECT\*O. If the object
is mastered by another DSA (for example, \*LDSA1\*O) it determines the
following and creates a reference with the components shown in Table A-2:
.P
.ML
.LI
the last \*LRDN\*E\dk\u\*O that names an object that is mastered by a DSA,
that is different from \*LDSA1\*O
.LI 
the last \*LRDN\*E\dj\u\*O that is mastered by the DSA itself   
.LE
.nL
.ne 20
.P
Suppose the object is an alias, and \*LRDN1'/.../RDN\*O\*E\dk\u\*O' is the
aliased object name. If the operation is a modify operation, or if it is a
retrieval operation, and the service control bit \*LDON'T DEREFERENCE ALIAS\*O
is set, a name error with problem \*LALIAS DEREFERENCING PROBLEM\*O is generated.
Otherwise the target object will simply change to
\*LRDN'/.../RDN\*E\dk\u\*O'\*L/RDN\*E\dm+1\u\*O/.../\*LRDN\*E\dn\u\*O.
.P
The procedure of name resolution restarts with this target object. If it
terminates with a reference (as described in other cases), it contains
the component \*LALIASED RDNS\*O = \*Lk\*O.
.LI "\*Em\*O\ =\ \*En\*O"
.nL
The DSA holds an entry of the target object.  If it is a master entry,
the name resolution terminates with success, no references are generated.
.P
If the entry is a shadow, the service control option \*LDON'T USE COPY\*O
is not set, and the operation is a single object operation, name resolution
terminates and no references are generated.
.P
If the entry is a shadow, the service control option \*LDON'T USE COPY\*O is
not set, the operation is a \*Llist\*O or \*Lsearch\*O operation,
and the service control option \*LLOCAL SCOPE\*O is set,
name resolution terminates and no references are generated. Otherwise
a continuation reference is generated as described in the previous case.
.LE
.nL
.ne 30
.TB "Reference Component Values When m=0"
.TS
center,box,tab(@);
lB | lB
lB | l.
Component@Value
=
.TH
Target Object@T{
\*Etarget object of incoming request\*O
T}
_
Aliased RDNs@not present
_
Operation Progress@\*Lnot started\*O
_
RDNs Resolved@not present
_
Reference Type@\*Lsuperior\*O
_
Access Points@derived from master know-
@ledge for first level object
@which is superior to its own
@DSA object
_
Entry Only@not present
.TE
.P
.ne 15
.TB "Reference Component Values When 0<m<n"
.TS
center,box,tab(@);
lB | lB
lB | l.
Component@Value
=
.TH
Target Object@T{
\*Etarget object of incoming request\*O
T}
_
Aliased RDNs@not present
_
Operation Progress@T{
\*Lproceeding\*O (the next RDN to be resolved is \*Ek+1\*O)
T}
_
RDNs Resolved@\*Vj\*O
_
Reference Type@T{
\*Lsubordinate\*O (only if \*Ej\*O =\*Ek\*O); or \*Lcross\*O
T}
_
Access Points@derived from master know-
@ledge for \*LRDN\d1\u/...RDN\*O\*E\dk+1\u\*O
_
Entry Only@not present
.TE
.P
In the phase of request decomposition references are generated when
a partial result has been generated locally, but the DSA has some knowledge
of other DSAs holding information that is needed to satisfy the request
completely.
.nL
.ne 20
.P
A reference is generated for a subordinate of the target object of the
incoming request \*LRDN\d1\u/.../RDN\*E\dn\u\*O\*L/.../RDN\*O\*E\dp\u\*O
(let \*LS\*O be a symbolic name for
\*LRDN\d1\u/.../RDN\*E\dn\u\*O\*L/.../RDN\*O\*E\dp\u\*O) when:
.P
.BL
.LI
\*LS\*O is a shadow.
.LI
The immediate superior node of \*LS\*O is not a shadow.
.LI
The reference is not a replica of another reference that has been generated
previously. This may happen if the DSA holds shadows that share the superior
node and the master knowledge.
.LE
.P
The references have the components shown in Table A-3.
.P
.TB "Reference Component Values for a Subordinate of a Base Object"
.TS
center,box,tab(@);
lB | lB
lB | l.
Component@Value
=
.TH
Target Object@T{
\*LRDN\d1\u/.../RDN\*O\*E\dp-1\u\*O\*O
T}
_
Aliased RDNs@not present
_
Operation Progress@\*Lcompleted\*O
_
RDNs Resolved@not present
_
Reference Type@\*Lsubordinate\*O
_
Access Points@derived from master know-
@ledge of \*LRDN\d1\u/.../RDN\*O\*E\dp\u\*O\*O
_
Entry Only@T{
\*LTRUE\*O if the operation is a search with subset \*LONE LEVEL\*O, \*LSEARCH ALIASES\*O
is \*LTRUE\*O, and the target object is the aliased object of an immediate subordinate of
the base object; or \*LFALSE\*O otherwise
T}
.TE
...\" 
...\" 
...\" 
...\" 
...\" 
