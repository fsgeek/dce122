...\" @OSF_COPYRIGHT@
...\" COPYRIGHT NOTICE
...\" Copyright (c) 1990, 1991, 1992, 1993 Open Software Foundation, Inc.
...\" ALL RIGHTS RESERVED (DCE).  See the file named COPYRIGHT.DCE in the
...\" src directory for the full copyright text.
...\" 
...\" HISTORY
...\" $Log: gds.components.gpsml,v $
...\" Revision 1.1.4.1  1996/06/18  14:52:05  wardr
...\" 	{enh,R1.2.2}
...\" 	Update for sgml conversion
...\" 	[1996/06/18  14:48:01  wardr]
...\"
...\" Revision 1.1.2.4  1995/07/26  18:36:20  buckler
...\" 	1.1 edits and Prentice Hall reformat
...\" 	[1995/07/26  18:36:02  buckler]
...\" 
...\" Revision 1.1.2.3  1994/11/04  00:01:20  neilson
...\" 	Substituted macros for book names in cross refs.
...\" 	[1994/11/03  12:22:36  neilson]
...\" 
...\" Revision 1.1.2.2  1994/09/01  17:00:35  rnollman
...\" 	[rnollman] - checkin with editOSF editorial comments
...\" 	[1994/09/01  16:54:37  rnollman]
...\" 
...\" Revision 1.1.2.1  1994/08/04  21:03:38  hal
...\" 	Create DCE GDS Admin Gd & Ref from GDS parts of Adm Gd & Cmd Ref; fix log leaders if needed
...\" 	[1994/08/04  20:10:45  hal]
...\" 
...\" 	Creating GDS Admin Gd & Ref from Admin book.extended, Cmd Ref
...\" 
...\" Revision 1.1.4.14  1994/08/02  20:16:15  rnollman
...\" 	checkin for restructure
...\" 	[1994/08/02  20:06:08  rnollman]
...\" 
...\" Revision 1.1.4.13  1994/05/14  21:03:57  rnollman
...\" 	fixed index entries
...\" 	[1994/05/14  21:03:42  rnollman]
...\" 
...\" Revision 1.1.4.12  1994/05/14  14:37:33  rnollman
...\" 	final final beta submittal
...\" 	[1994/05/14  14:22:58  rnollman]
...\" 
...\" Revision 1.1.4.11  1993/11/11  19:47:48  rnollman
...\" 	update SNI copyright
...\" 	[1993/11/11  19:47:33  rnollman]
...\" 
...\" Revision 1.1.4.10  1993/10/21  18:55:11  rnollman
...\" 	incorporated comments from munich
...\" 	[1993/10/21  18:53:41  rnollman]
...\" 
...\" Revision 1.1.4.9  1993/10/11  19:54:14  rnollman
...\" 	fixed changed bar cr number
...\" 	[1993/10/11  19:53:52  rnollman]
...\" 
...\" Revision 1.1.4.8  1993/10/11  19:40:35  rnollman
...\" 	fixed change bars -- enh. to enh
...\" 	[1993/10/11  19:40:10  rnollman]
...\" 
...\" Revision 1.1.4.7  1993/10/11  15:25:31  rnollman
...\" 	added fixes from Munich
...\" 	[1993/10/11  15:25:08  rnollman]
...\" 
...\" Revision 1.1.4.6  1993/09/08  02:44:44  tmw
...\" 	Added index entries for second version of master index.
...\" 	[1993/09/08  02:40:04  tmw]
...\" 
...\" Revision 1.1.4.5  1993/08/12  17:24:18  buckler
...\" 	{edit, R1.0.2}
...\" 	Prentice-Hall editorial changes.
...\" 	[1993/08/12  16:24:57  buckler]
...\" 
...\" Revision 1.1.4.4  1993/06/22  14:08:32  lmk
...\" 	{defect, 8125, R1.0.2a}
...\" 	Added .za and .zz markers to the table number reference fixed in the
...\" 	last revision
...\" 	[1993/06/22  14:08:04  lmk]
...\" 
...\" Revision 1.1.4.3  1993/06/21  15:06:42  lmk
...\" 	{defect, 8125, R1.0.2a}
...\" 	Changed reference to Table 12-2 to Table 1-1
...\" 	[1993/06/21  15:06:16  lmk]
...\" 
...\" Revision 1.1.4.2  1993/06/07  21:06:51  rnollman
...\" 	submitted first pass editorial changes
...\" 	[1993/06/07  21:05:55  rnollman]
...\" 
...\" Revision 1.1.2.19  1993/03/17  16:41:48  steiner
...\" 	Added .DS/.DE to keep Figure 2-3 "Example of a Server Address"
...\" 	on the page and together with its title.
...\" 	[1993/03/17  16:41:29  steiner]
...\" 
...\" Revision 1.1.2.18  1993/02/21  18:00:31  rnollman
...\" 	fixed for final draft
...\" 	[1993/02/21  18:00:03  rnollman]
...\" 
...\" Revision 1.1.2.17  1993/02/05  16:22:28  rnollman
...\" 	inc comments for final draft
...\" 	[1993/02/05  16:21:59  rnollman]
...\" 
...\" Revision 1.1.2.16  1993/01/28  21:07:23  steiner
...\" 	Moved change bar to after .H 1 so extra page is not generated;
...\" 	also, removed several blank lines at end so extra page is not
...\" 	generated.
...\" 	[1993/01/28  21:06:57  steiner]
...\" 
...\" Revision 1.1.2.15  1993/01/28  20:06:08  dbelch
...\" 	Embedding copyright notice
...\" 	[1993/01/28  18:39:00  dbelch]
...\" 
...\" Revision 1.1.2.14  1993/01/27  22:45:11  buckler
...\" 	Fixed cross-refs and figure calls for new book org
...\" 	[1993/01/27  22:42:13  buckler]
...\" 
...\" Revision 1.1.2.13  1993/01/11  18:36:23  rnollman
...\" 	fixed bug 6005
...\" 	[1993/01/11  18:35:52  rnollman]
...\" 
...\" Revision 1.1.2.12  1993/01/10  20:56:03  rnollman
...\" 	fixes after Dublin edit
...\" 	[1993/01/10  20:55:42  rnollman]
...\" 
...\" Revision 1.1.2.11  1993/01/08  23:09:36  rom
...\" 	Restore leading gds/ to filename arguments to .so.
...\" 	[1993/01/08  22:42:52  rom]
...\" 
...\" Revision 1.1.2.10  1993/01/08  14:09:15  marrek
...\" 	Changes from SSE Dublin.
...\" 	[1993/01/08  14:08:14  marrek]
...\" 
...\" Revision 1.1.2.9  1992/12/03  22:45:55  rnollman
...\" 	update munich
...\" 	[1992/12/03  22:45:03  rnollman]
...\" 
...\" Revision 1.1.2.8  1992/11/25  19:51:45  rnollman
...\" 	submitting informal draft
...\" 	[1992/11/25  19:50:43  rnollman]
...\" 
...\" 	added index entries
...\" 	[1992/11/23  16:11:51  rnollman]
...\" 
...\" Revision 1.1.2.7  1992/10/30  01:24:53  rnollman
...\" 	fixed pic file problem
...\" 	[1992/10/30  01:24:26  rnollman]
...\" 
...\" Revision 1.1.2.6  1992/10/29  22:37:28  rnollman
...\" 	fixed Pic problem
...\" 	[1992/10/29  22:36:38  rnollman]
...\" 
...\" Revision 1.1.2.5  1992/10/23  21:46:43  rnollman
...\" 	work in progress
...\" 	[1992/10/23  21:46:20  rnollman]
...\" 
...\" Revision 1.1.2.4  1992/10/13  20:12:03  rnollman
...\" 	inc first draft comments
...\" 	[1992/10/13  20:11:27  rnollman]
...\" 
...\" Revision 1.1.2.3  1992/09/02  18:56:24  rnollman
...\" 	copied from private directory of Rich Nollman
...\" 	[1992/09/02  18:55:54  rnollman]
...\" 
...\" Revision 1.1.2.2  1992/09/01  14:36:36  rnollman
...\" 	creating file
...\" 	[1992/09/01  14:36:07  rnollman]
...\" 
...\" $EndLog$
...\" /* * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *
...\" * COPYRIGHT   (C)  SIEMENS NIXDORF INFORMATIONSSYSTEME AG 1994   *
...\" *                  ALL RIGHTS RESERVED                           *
...\" *                                                                *
...\" * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * */
.H 1 "GDS Components"
.so gd/screen.mac
.iX "-[" "Global Directory Service (GDS)" "components"
This chapter describes the components of GDS and how they work.  
.H 2 "Client/Server Model"
GDS is based on the client/server model.  In this model, a distributed application 
(in this case, GDS) is divided into two parts, with one part residing on each of the two
computers that communicate during the exchange of
information.  The client side of the application is the part
that resides on the node that initiates the distributed request and
receives the benefit of the service.  The server side of the
application is the part that resides on the node that receives and
executes the distributed request.
.P
The following figure shows how the client/server model is implemented for GDS.
.P
.ne 4.75i
.FG "GDS Components"
.P
.PS 
.in +.2i
#very big box
VBB:box width 5.25 height 4.15
move to last box.nw then down .25 then right .15
#big box
BB:box width 3.2 height 3.65 with .nw at Here
box invisible height .5 width 1.4 with .nw at last box.nw "UNIX System"
####### admin program
AP: box width 1 height .5 with .ne at last box.se "Administration" "Program"
APDUA: box width 1 height .2 with .n at AP.s "DUA"
move to AP.e then right .35i
####### application program
BA: box width 1 height .5  with .w at Here "User" "Application"
BADUA: box width 1 height .2 with .n at BA.s "DUA"
######## DUA (RIP)
DUA: box invisible width 1 height .75  with .c at BB.c+(0,-.1)
######## dashed line and GDS
box invisible height .5 width 3.2 with .c at DUA.n
"\ GDS" at last box.w ljust
line dashed from last box.nw to last box.ne
#####DUA cache
move to DUA.w then down .1
move left .3
DUAC: box height 0.7 width 0.7 with .e at Here "DUA" "cache"
#####DSA
move to DUA.s
move down .4
DSA: box width 1 height .75 "DSA"
#####CSTUB
move to DUA.e then down .1
move right .25
CSTUB: box width .7 height .7 with .w at Here "C-stub"
########## lines from DUAs to DSA
move to APDUA.se +(-.1,0)
LAPDSA: line from Here to (Here, DSA.n)
move to BADUA.sw +(.1,0)
LBADSA: line from Here to (Here, DSA.n)
########## lines from Cstub to DUA Cache
LTCSBDC: line invisible from CSTUB.nw +(0,-.5) to DUAC.ne +(0,-.5)
LBCSBDC: line invisible from CSTUB.sw +(0, .5) to DUAC.se +(0, .5)
arcrad= .08
move to (LBADSA.c, LTCSBDC.c) then left arcrad
ARC1:  arc from Here to Here +(2*arcrad,0) clockwise
line from ARC1.start to (DUAC.e, ARC1.start)
line from ARC1.end to (CSTUB.w, ARC1.start)
move to (LAPDSA.c,LBCSBDC.c) then left arcrad
ARC2:  arc from Here to Here +(2*arcrad,0) clockwise
line from ARC2.start to (DUAC.e, ARC2.start)
line from ARC2.end to (CSTUB.w, ARC2.start)
######### SSTUB
move to DSA.e
line right .25
SSTUB: box same with .w at Here "S-stub"
#CSTUB text
move to CSTUB.e 
line right .75
"DAP" at Here + (0.2, -0.4)
move to CSTUB.e + (0.75,0)
line down 0.75
arrow right 0.5
"To a" "Remote" "Server" at Here + (0.4, 0)
move to SSTUB.e + (0.5, 0)
arrow left 0.5
move to SSTUB.e + (0.5, 0)
line up 2
line right .5 "DAP" above
"From a remote" "Client" at Here + (0.5, 0)
move to SSTUB.se + (0.5, 0.2)
arrow left 0.5
move to SSTUB.se + (0.5, 0.2)
line down 0.4
arrow right .5 "DSP" above
"To/From" "a Remote" "Server" at Here + (0.5, 0)
.in -.2i
.PE 
.P
The client consists of the following (UNIX) processes:
.P
.ML
.LI
An application that links the XDS library. (The \*Lgdsditadm\*O program is an
example of such a process).
.LI
The C-stub that handles the connection over the communication network for
accessing a remote server.  It implements the upper layers of the ISO protocol
stack (described later in this chapter).  Its function is similar to the RPC Runtime (GDS uses OSI protocols instead of DCE RPC).
.LI
The DUA cache.
.LE
.P
The server consists of the following (UNIX) processes:
.P
.ML
.LI
A DSA that accesses the database.
.LI
An S-stub that handles the connection over the communication network
so it can either access a remote server or be accessed by a remote
server or client.  The S-stub is similar to the C-stub, except that it
runs on the server machine and manages its communications with DUAs
and other DSAs.
.LE
.P
Within the same system, the application (DUA) accesses the DSA directly by
bypassing the C-stubs and S-stubs.  The DUA cache is available to every
client for fast access to frequently required information.
.P
In addition, an Interprocess Communication (IPC) monitoring process
monitors the interprocess communication between the various components.
.P
All of these processes (apart from the application process) run
continuously in the background as long as the directory system is active.
.P
The following background processes are started when needed:
.VL
.LI
Shadow update process
.nL
To update the shadows of the directory in the DSAs, users
can generate a shadowing job for an object or a subtree and for a
target DSA.  The system starts a corresponding shadow update process,
either periodically or on request, and updates the shadows in the target
DSA.
.LI
Cache update process
.nL
There is one local shadowing job for updating the entries in the DUA cache.
The system starts a corresponding cache update process, either periodically or
on request, and updates all entries in the DUA cache.
.LE
.P
In addition to the background processes, the following administration
programs are available:
.P
.VL
.LI "\*Lgdssysadm\*O"
Supports administration of the local GDS installation, such as configuration,
server activation, and backup.
.LI "\*Lgdsditadm\*O"
Supports administration of the contents of a GDS database and the local cache.
.LI "\*Lgdscacheadm\*O"
.nL
Supports administration of the local DUA cache (only necessary on client
systems without \*Lgdsditadm\*O).
.LE
.H 2 "XDS Application Program Interface"
.iX "X/Open Directory Service (XDS)" "about"  
The X/Open Directory Service (XDS) is an application programming interface
based on X/Open standards specifications.  The XDS Application Program Interface (API) consists of a library of functions for developing applications
that access the directory service.  GDS uses the XDS API internally to
provide the functions available in the GDS administrative programs.
Application programmers can use the XDS API to develop their own customized
applications.
.P
DCE programmers use the XDS API to make directory service calls.  In
DCE, XDS API directs the calls it receives to either GDS or CDS by
examining the names of the information objects to be looked up.
The XDS API contains functions for managing connections that use a directory
server, namely, reading, comparing, adding, removing, modifying, listing, and
searching directory entries.  These functions map to the operations
standardized by X.500 (as shown in Table 1-1).
.P
The GDS package and the Message Handling Systems Directory User package provide
additional information objects for use by security, cache management, and
electronic mail applications when using GDS.
.P
(Refer to the \*(Dg 
...\" Part 4 
for more information on programming with XDS API.)

.H 2 "GDS Client/Server Communication"
.iX "-[" "OSI protocols"
The X.500 directory service standard is written with a view to running on top of the Open
Systems Interconnection (OSI) communications protocols.  The OSI protocols
are divided into seven layers: 
.ML
.LI
Physical
.LI
Data Link
.LI
Network
.LI
Transport
.LI
Session
.LI
Presentation
.LI
Application Layers
.LE
.P
The upper three layers are implemented as libraries that are linked together
with the C-stub and S-stub.  The lower layers are part of the operating
system, and their services are made available to the upper layers through
a transport interface.  The transport interface is the double line in Figure 2-2.
.P
.ne 2.75i
.FG "The OSI Protocol Layers"
.P
.PS
boxwid = 1.5
boxht = 0.3
box "Physical Layer" with .sw at (5, 1)
box "Data Link Layer" with .sw at last box.nw
box "Network Layer" with .sw at last box.nw
box "Transport Layer" with .sw at last box.nw
box "Session Layer" with .sw at last box.nw
box "Presentation Layer" with .sw at last box.nw
box "Application Layer" with .sw at last box.nw
line from (5, 2.15) to (6.5, 2.15)
"Transport Interface" at (3.8, 2.15)
arrow from (4.5, 2.15) to (5, 2.15)
.PE
.H 3 "Upper Layers"
The directory service is an application layer protocol.  Its specification
requires the use of two other application layer service elements\(emthe 
Association Control Service Element (ACSE) and the Remote Operation
Service Element (ROSE)\(emand of the underlying layers.  ROSE and ACSE
of the application layer are implemented
in GDS by the Remote Operation Service (ROS) library.  The OSI
Session Service (OSS), which is in the session layer, is implemented in GDS 
by the OSI Session Service library.
The Presentation Service in the Presentation Layer is implemented by the 
ASN.1 library.
.H 3 "Lower Layers"
.iX "TCP/IP"
DCE assumes that the system it runs on provides support for transport
layer communications (either OSI transport or TCP/IP transport).  The
OSI protocols running above the transport layer were originally
designed to run over OSI transport protocols.  Many DCE systems run the
Transmission Control Protocol (TCP/IP), so GDS provides the capacity
for running over the TCP/IP transport protocol as specified in RFC
1006.  OSI transport services are accessed via the XTI-interface; the
TCP/IP transport service is accessed via the socket interface.  All
transport services available within a particular system can be used in
parallel.
.H 3 "Client/Server Addresses (PSAPs)
.iX "-[" "addresses" "GDS clients and servers"
.iX "Service Access Points (SAP)"
OSI uses Service Access Points (SAPs) for addressing.  A
SAP is an abstract point at which a particular service is provided
between two layers in the OSI protocol stack.
.P
The administrator needs to know the Presentation Service Access Point (PSAP)
address of each server
machine in order to integrate it into the overall distributed directory
system.  A PSAP address is composed of one or more NSAP (Network Service Access
Point) addresses, and
the Presentation (P-Selector), Session (S-Selector), and Transport
(T-Selector) selectors.  
.P
The administrator also needs to know the PSAP address of the client stub
on the local machine so that it can be added to the DUA cache.  The
local DUA cannot access a remote DSA without knowing its client address.
.P  
NSAP addresses are intended to be globally unique.  Each NSAP address
identifies a particular computer system somewhere in the world.
Various registration authorities are responsible for maintaining the
uniqueness of these network addresses.  An administrator must apply to
these registration authorities to receive a globally unique NSAP
address. (See 
...\" the appendix entitled "PSAP Addresses" 
Appendix D
for more information on NSAP address authorities.)
.P
The P-Selectors, S-Selectors, and T-Selectors refer to the SAPs of upper
layers in the OSI protocol stack within a given system.  Unlike the
NSAP address, these upper-layer selectors need to be unique only
within a particular system.  They identify the
application that communication is to be set up with. 
.P
GDS requires that the T-Selector be specified. Typically, the
value of the T-Selector is \*Lserver\*O for a server and \*Lclient\*O for a
client.  However, an administrator can choose to
configure more than one directory service, resulting in multiple
directory IDs.  Each directory service must have a unique T-Selector.
For example, if two directory
services are running on a specific system, two different PSAP address
entries should be entered in the directory, in the DUA cache, or both,
with the T-Selectors set to unique values.  For example, one address can be assigned the
T-Selector value \*Lserver1\*O, and the other a T-Selector
value of \*Lserver2\*O.
.P
The P-Selector and S-Selector fields are ignored by GDS. However, it is
possible that a nonGDS service may interpret the P-Selector and S-Selector
fields.
.P
The following figure shows how a server address is entered in Mask 7a.
.PP
.ne 3.0i
.FG "Example of a Server Address"
.P
.in 0
.sS "(Mask 7a)" "\*Voperation\*O"
\*C
    \c
.us "P-Selector:"
.sp -1
                      \*A\*A\*A\*A\*A\*A\*A\*A\*A\*A\*A\*A\*A\*A\*A\*A\*A\*A\*A\*A\*A\*A\*A\*A\*A\*A\*A\*A\*A\*A\*A\*A\*A\*A\*A
.sp .5
    \c
.us "S-Selector:"
.sp -1
                      \*A\*A\*A\*A\*A\*A\*A\*A\*A\*A\*A\*A\*A\*A\*A\*A\*A\*A\*A\*A\*A\*A\*A\*A\*A\*A\*A\*A\*A\*A\*A\*A\*A\*A\*A
.sp .5
    \c
.us "T-Selector:"
.sp -1
                      \*LServer\*C
.sp .5
    \c
.us "NSAP-Address 1:"
.sp -1
                      \*LTCP/IP!internet=192.35.18.2+port=21011\*C
.sp .5
    \c
.us "NSAP-Address 2:"
.sp -1
                      \*LIBMLAN!ethernet=080014151475\*C
.sp .5
    \c
.us "NSAP-Address 3:"
.sp -1
                      \*A\*A\*A\*A\*A\*A\*A\*A\*A\*A\*A\*A\*A\*A\*A\*A\*A\*A\*A\*A\*A\*A\*A\*A\*A\*A\*A\*A\*A\*A\*A\*A\*A\*A\*A\*A\*A\*A\*A\*A\*A\*A\*A\*A\*A\*A\*A\*A
.sp .5
    \c
.us "NSAP-Address 4:"
.sp -1
                      \*A\*A\*A\*A\*A\*A\*A\*A\*A\*A\*A\*A\*A\*A\*A\*A\*A\*A\*A\*A\*A\*A\*A\*A\*A\*A\*A\*A\*A\*A\*A\*A\*A\*A\*A\*A\*A\*A\*A\*A\*A\*A\*A\*A\*A\*A\*A\*A
.sp .5
    \c
.us "NSAP-Address 5:"
.sp -1
                      \*A\*A\*A\*A\*A\*A\*A\*A\*A\*A\*A\*A\*A\*A\*A\*A\*A\*A\*A\*A\*A\*A\*A\*A\*A\*A\*A\*A\*A\*A\*A\*A\*A\*A\*A\*A\*A\*A\*A\*A\*A\*A\*A\*A\*A\*A\*A\*A
\*O

.sE
.in
.S 12
.P
The NSAP-addresses in Figure 2-3 show two
different types of NSAP addresses: 
\*LNSAP-address 1\*O and \*LNSAP-address 2\*O.  
.P
\*LNSAP-address 1\*O is a TCP/IP (socket) address.
It is the responsibility of the administrator to ensure that
the port numbers (entered in the figure as \*Lport=21011\*O) are
unique on their machines.
.P
\*LNSAP-address 2\*O is an example of a Local Area Network (LAN) address used on IBM RS6000
machines.  
.P
If the administrator wants to use both address
types in an installation, both addresses can be stored in the DUA
cache or DIT for the same object. 
.P
The structure and format of PSAP addresses is somewhat complex.
...\" The appendix entitled "PSAP Addresses" 
Appendix D
describes how these network addresses
are derived and provides some basic guidelines on when and how to
apply to registration authorities for a unique address.

.iX "-]" "addresses" "GDS clients and servers"
.iX "-]" "OSI protocols"
.H 2 "Directory System Agents"
.iX "-[" "Directory System Agents (DSAs)" "about"
DSAs are application processes that provide access to the
DIB, to DUAs, and to other DSAs.  A DSA may use information stored in its
local database or interact with other DSAs to carry out requests.
Alternatively, the DSA may direct a request to another DSA, which can
help carry out the request.
.P
This section describes three types of DSAs:
.ML
.LI
Initial DSA
.LI
First-level DSA
.LI
Default DSA
.LE

.H 3 "Initial DSA and Administrative Domain"
.iX "-[" "Directory System Agents (DSAs)" "initial"
.iX "-[" "administrative domains" "in GDS"
Each DSA must contain the schema object under the root of the DIB.  If
a DSA has the master entry of the schema object, it is called an
initial DSA.  If other DSAs contain a shadow of the schema from
an initial DSA, these DSAs constitute an administrative domain.
To make a DSA part of an administrative domain, the administrator must
perform special steps in the DUA cache and local DSA to initialize a
client/server system.
.P
.ne 12
For example, if the directory system uses the default schema, the
administrator would enter the name of the initial DSA (including its
PSAP address) in the DUA cache.  The administrator would also 
change the \*LMaster-Knowledge\*O attribute of 
the schema in the local DSA to that of the
initial DSA. (This is similar to giving the responsibility of mastering
the schema to the initial DSA.) 
Finally, the administrator would enter the initial DSA 
as a shadow in the local DSA so that the local DSA knows about it.
.P
However, a copy of the initial DSA in the local DSA is not always required. 
In Figure 2-4, \*Ldsa-osf\*O could be the initial DSA for the
\*LOSF\*O administrative domain.  The \*Ldsa-munich\*O and
\*Ldsa-Boston\*O DSAs are normally connected to the initial DSA,
\*Ldsa-osf\*O.  The DSA \*Ldsa-doc\*O could be connected to 
the initial DSA \*Ldsa-osf\*O or to \*Ldsa-Boston\*O, 
which is not an initial DSA.
.P
.ne 2.75i
.FG "A Sample Tree with a First-Level DSA and an Initial DSA"
...\" .so gd/Pics/fig13.samptreeinitDSA.pic
.P
.PS
scale = 106.667
"\fH\s7MK     Master Knowledge of this node\s0\fP"  at 139, 4
"\fH\s7Legend\s0\fP"  at 17, 19
.ps 20
line   from 312, 103 \
	to 344, 78 
line   from 270, 145 \
	to 306, 110 
line   from 248, 185 \
	to 265, 153 
line   from 176, 103 \
	to 143, 72 
line   from 217, 145 \
	to 184, 112 
line   from 242, 184 \
	to 222, 153 
line   from 244, 225 \
	to 245, 193 
.ps 10
"\fH\s7C=US (MK = dsa-usa)\s0\fP"  at 320, 227
"\fH\s7O=OSF (MK = dsa-osf)\s0\fP"  at 323, 187
circle radius 4 at 244, 229
circle radius 4 at 245, 188
"\fH\s7L=Munich (MK = dsa-munich)\s0\fP"  at 136, 148
"\fH\s7OU=tech (MK = dsa-tec)\s0\fP"  at 106, 108
"\fH\s7CN=Maier (MK = dsa-tec)\s0\fP"  at 66, 68
"\fH\s7CN=Smith (MK = dsa-doc)\s0\fP"  at 436, 74
circle radius 4 at 348, 74
circle radius 4 at 309, 106
circle radius 4 at 220, 149
circle radius 4 at 267, 148
"\fH\s7L=Boston (MK = dsa-Boston)\s0\fP"  at 362, 148
"\fH\s7OU=DOC (MK = dsa-doc)\s0\fP"  at 393, 106
circle radius 4 at 140, 68
circle radius 4 at 180, 107
.PE
.P
To make a DSA part of an administrative domain where the default schema is not 
being used, the administrator carries out the steps mentioned in the previous
example, as well as some additional steps.  The administrator must copy the modified 
schema over to the local DSA because the initial schema has changed.
The administrator must also give the local DSA a shadow of the initial DSA and enter 
the local DSA and the initial DSA (including their PSAP addresses) in the DUA cache, 
using the new schema structure.  
.iX "-]" "Directory System Agents (DSAs)" "initial"
.iX "-]" "administrative domains" "in GDS"
.nL
.ne 2.5i
.H 3 "First-Level DSA"
.iX "Directory System Agents (DSAs)" "first-level DSA"
A first-level object is an object under the root.  If a DSA is
master of a first-level object, it is called a first-level DSA.
Typically, the first-level DSA is also the initial DSA for an
administrative domain.  However, as shown in the Figure 2-4,
\*Ldsa-usa\*O is the first-level DSA and
\*Ldsa-osf\*O is the initial DSA for the \*LOSF\*O administrative domain.
.P
The first-level DSA is usually responsible for a country and
for administering all the nodes in the DIT below a country.
The first-level DSA is normally an administrative
institution (such as the Deutsche Bundespost in
Germany).  The first-level DSA is responsible for the first node in
the DIT (for example, \*LDE\*O, which is the 
designation for Germany).  The first-level DSA in turn 
provides a node for one or more subordinate nodes. 
These subordinate nodes can be
administrative domains responsible for managing the objects and
holding the names unique in the directory system.
.P
Normally, the first-level DSA knows all the other first-level
DSAs in the directory system so that it can find all X.500 entries in
a worldwide X.500 directory system.
.P
Administrators must make sure that each DSA has at least a shadow
entry of the DSA that masters the object in the next superior level in the
DIT.  If superior nodes are mastered by nonGDS DSAs,
administrators also need to make sure that the shadows of these nonGDS
DSAs are present as shadows in the local DSA.
.H 3 "Default DSA"
.iX "Directory System Agents (DSAs)" "default"
The default DSA is the local or remote DSA contacted when the 
\*LLogon to the Default DSA\*O option
is selected in the Logon Menu Mask (Mask 1) of the administration program
\*Lgdsditadm\*O.  The administrator can specify one or more default
DSAs by specifying a special attribute called a \*LDSA-Type\*O when
entering a DSA object in the DUA cache. \*LDSA-Type\*O is described
in Section 2.5.
.H 2 "DUA Cache"
.iX "DUA cache" "DSAs"
The administrator must add an object called 
\*Lclient\*O with the PSAP address of
the client to the DUA cache to set up a connection to a remote DSA.
The entries of all DSAs (including their PSAP
addresses) that the DUA wants to establish direct connections to must
also be added.  Typically,
the DUA cache must contain the name and the PSAP address of the local
DSA.
.P
However, the administrator can specify a special optional attribute
called \*LDSA-Type\*O. \*LDSA-Type\*O enables the administrator to
determine whether a particular DSA object entered in the cache is considered
as the local DSA, the default DSA, or both the local and the default DSA.
.P
\*VLocal\*O in this case means that the 
DSA of the directory system is in the same computer
as the DUA.  The local DUA does not need to
establish a connection to the network in order to access it. 
The DUA sends its requests to
the local DSA, which can access other remote DSAs and can be
accessed by remote DUAs and DSAs.
.P
\*VDefault\*O means that this DSA is the remote DSA that the
administrator wants to contact when using the 
\*LLogon to the Default DSA\*O option 
from the User Identification Mask (Mask 1).  To access this DSA,
the DUA needs to establish a connection to the network.
.P
\*LDefault/local\*O indicates that the local DSA is also the default DSA;
normally, an administrator who has a client/server system needs to
specify this DSA type.
.P
Several default DSAs can be specified in the DUA cache. When the
administrator logs into the default DSA, a connection is set up with
the first available DSA in the list of DSAs entered in the cache.  The
administrator establishes priority according to the order in which
the names of the default DSAs are entered in the cache.
.P
The administrator can enter other DSA objects in the DUA without
specifying the \*LDSA-Type\*O attribute.  To set up a connection with one
of these remote DSAs, the administrator must select the 
\*LLogon to a Specific DSA\*O option in Mask 1. (Refer to 
...\" Chapter 19 
Chapter 7
for more information on Mask 1.)
.iX "-]" "Directory System Agents (DSAs)" "about"
.iX "-]" "Global Directory Service (GDS)" "components"
