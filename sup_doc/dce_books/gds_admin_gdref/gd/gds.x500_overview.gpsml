...\" @OSF_COPYRIGHT@
...\" COPYRIGHT NOTICE
...\" Copyright (c) 1990, 1991, 1992, 1993 Open Software Foundation, Inc.
...\" ALL RIGHTS RESERVED (DCE).  See the file named COPYRIGHT.DCE in the
...\" src directory for the full copyright text.
...\"
...\" HISTORY
...\" $Log: gds.x500_overview.gpsml,v $
...\" Revision 1.1.4.1  1996/06/18  14:53:45  wardr
...\" 	{enh,R1.2.2}
...\" 	Update for sgml conversion
...\" 	[1996/06/18  14:49:46  wardr]
...\"
...\" Revision 1.1.2.5  1995/08/15  20:10:32  weir
...\" 	Prentice-Hall edits: second pass
...\" 	[1995/08/15  20:09:42  weir]
...\" 
...\" Revision 1.1.2.4  1995/07/26  18:36:21  buckler
...\" 	1.1 edits and Prentice Hall reformat
...\" 	[1995/07/26  18:35:59  buckler]
...\" 
...\" Revision 1.1.2.3  1994/11/04  00:02:11  neilson
...\" 	Substituted macros for book names in cross refs.
...\" 	[1994/11/03  12:22:58  neilson]
...\" 
...\" Revision 1.1.2.2  1994/09/01  17:02:53  rnollman
...\" 	[rnollman] - checkin with editOSF editorial comments
...\" 	[1994/09/01  16:55:59  rnollman]
...\" 
...\" Revision 1.1.2.1  1994/08/04  21:04:04  hal
...\" 	Create DCE GDS Admin Gd & Ref from GDS parts of Adm Gd & Cmd Ref; fix log leaders if needed
...\" 	[1994/08/04  20:11:22  hal]
...\" 
...\" 	Creating GDS Admin Gd & Ref from Admin book.extended, Cmd Ref
...\" 
...\" Revision 1.1.4.19  1994/08/02  20:21:09  rnollman
...\" 	checkin for restructure
...\" 	[1994/08/02  20:13:13  rnollman]
...\" 
...\" Revision 1.1.4.18  1994/06/22  20:05:17  rnollman
...\" 	munich changes
...\" 	[1994/06/22  20:04:56  rnollman]
...\" 
...\" Revision 1.1.4.17  1994/06/22  19:22:26  rnollman
...\" 	first set of change from munich after beta freeze
...\" 	[1994/06/22  19:22:02  rnollman]
...\" 
...\" Revision 1.1.4.16  1994/05/14  21:09:23  rnollman
...\" 	fixed index entry
...\" 	[1994/05/14  21:09:02  rnollman]
...\" 
...\" Revision 1.1.4.15  1994/05/14  14:41:16  rnollman
...\" 	final final beta submittal
...\" 	[1994/05/14  14:29:24  rnollman]
...\" 
...\" Revision 1.1.4.14  1994/05/13  19:49:54  rnollman
...\" 	final final update for beta
...\" 	[1994/05/13  19:49:31  rnollman]
...\" 
...\" Revision 1.1.4.13  1994/05/13  19:33:01  rnollman
...\" 	final update for beta
...\" 	[1994/05/13  19:32:34  rnollman]
...\" 
...\" Revision 1.1.4.12  1994/05/12  19:46:02  rnollman
...\" 	update for beta
...\" 	[1994/05/12  19:45:35  rnollman]
...\" 
...\" Revision 1.1.4.11  1994/05/12  17:18:49  rnollman
...\" 	latest update for beta
...\" 	[1994/05/12  17:18:22  rnollman]
...\" 
...\" Revision 1.1.4.10  1994/04/07  17:44:06  rnollman
...\" 	changes for R1.1
...\" 	[1994/04/07  17:43:49  rnollman]
...\" 
...\" Revision 1.1.4.9  1993/11/10  19:39:57  rnollman
...\" 	changed .TS H to .TS in Table 1-5
...\" 	[1993/11/10  19:39:37  rnollman]
...\" 
...\" Revision 1.1.4.8  1993/11/08  19:52:34  rnollman
...\" 	fixed table formats
...\" 	[1993/11/08  19:52:07  rnollman]
...\" 
...\" Revision 1.1.4.7  1993/10/27  19:13:31  tmw
...\" 	Index correction.
...\" 	[1993/10/27  19:12:05  tmw]
...\" 
...\" Revision 1.1.4.6  1993/10/11  19:29:24  rnollman
...\" 	fixed change bar problem replaced enh. with enh
...\" 	[1993/10/11  19:29:05  rnollman]
...\" 
...\" Revision 1.1.4.5  1993/10/11  14:48:02  rnollman
...\" 	added change bars for Munich fixes
...\" 	[1993/10/11  14:47:23  rnollman]
...\" 
...\" Revision 1.1.4.4  1993/09/08  02:44:39  tmw
...\" 	Added index entries for second version of master index.
...\" 	[1993/09/08  02:40:24  tmw]
...\" 
...\" Revision 1.1.4.3  1993/08/12  17:25:46  buckler
...\" 	{edit, R1.0.2}
...\" 	Prentice-Hall editorial changes.
...\" 	[1993/08/12  16:27:06  buckler]
...\" 
...\" Revision 1.1.4.2  1993/06/07  20:49:09  rnollman
...\" 	submit first pass editorial changes
...\" 	[1993/06/07  20:46:48  rnollman]
...\" 
...\" Revision 1.1.2.24  1993/03/02  18:47:47  buckler
...\" 	Fixed mismatching .zA and .zZ codes
...\" 	[1993/03/02  18:46:14  buckler]
...\" 
...\" Revision 1.1.2.23  1993/02/21  18:16:46  rnollman
...\" 	fixed for final draft
...\" 	[1993/02/21  18:16:17  rnollman]
...\" 
...\" Revision 1.1.2.22  1993/02/05  17:14:22  rnollman
...\" 	inc changes for final draft
...\" 	[1993/02/05  17:13:47  rnollman]
...\" 
...\" Revision 1.1.2.21  1993/01/28  20:07:08  dbelch
...\" 	Embedding copyright notice
...\" 	[1993/01/28  18:40:31  dbelch]
...\" 
...\" Revision 1.1.2.20  1993/01/27  22:45:57  buckler
...\" 	Fixed cross-refs and figure calls for new book org
...\" 	[1993/01/27  22:43:00  buckler]
...\" 
...\" Revision 1.1.2.19  1993/01/10  21:20:30  rnollman
...\" 	fixes after Dublin edit
...\" 	[1993/01/10  21:20:00  rnollman]
...\" 
...\" Revision 1.1.2.18  1993/01/08  23:10:34  rom
...\" 	Restore leading gds/ to filename arguments to .so.
...\" 	[1993/01/08  22:44:22  rom]
...\" 
...\" Revision 1.1.2.17  1993/01/08  14:00:21  marrek
...\" 	Changes from SSE Dublin.
...\" 	[1993/01/08  13:59:14  marrek]
...\" 
...\" Revision 1.1.2.15  1993/01/07  13:47:28  rnollman
...\" 	checking in
...\" 	[1993/01/07  13:46:51  rnollman]
...\" 
...\" Revision 1.1.2.14  1992/12/23  20:57:52  rnollman
...\" 	fixed pic references after Dublin edits
...\" 	[1992/12/23  20:57:15  rnollman]
...\" 
...\" Revision 1.1.2.13  1992/12/22  14:51:20  marrek
...\" 	modified by SSE, Dublin.
...\" 	[1992/12/22  14:49:56  marrek]
...\" 
...\" Revision 1.1.2.12  1992/12/03  23:07:04  rnollman
...\" 	  update munich
...\" 	  [1992/12/03  23:05:53  rnollman]
...\" 
...\" Revision 1.1.2.11  1992/12/02  15:44:48  rnollman
...\" 	  trying to bsubmit file
...\" 	  [1992/12/02  15:43:53  rnollman]
...\" 
...\" 	  test check-in
...\" 	  [1992/12/01  20:58:15  rnollman]
...\" 
...\" 	  updated for comments from Munich
...\" 	  [1992/12/01  20:49:15  rnollman]
...\" 
...\" Revision 1.1.2.10  1992/11/25  20:56:34  rnollman
...\" 	  informal draft submittal
...\" 	  [1992/11/25  20:55:39  rnollman]
...\" 
...\" 	  update index
...\" 	  [1992/11/20  18:54:02  rnollman]
...\" 
...\" 	  add munich changes
...\" 	  [1992/11/19  22:35:57  rnollman]
...\" 
...\" Revision 1.1.2.9  1992/10/30  01:20:02  rnollman
...\" 	  fix Pic file problem
...\" 	  [1992/10/30  01:19:21  rnollman]
...\" 
...\" Revision 1.1.2.8  1992/10/29  22:32:31  rnollman
...\" 	  fixed problem with Pics
...\" 	  [1992/10/29  22:31:55  rnollman]
...\" 
...\" Revision 1.1.2.7  1992/10/26  23:05:05  rnollman
...\" 	  work in progress
...\" 	  [1992/10/26  23:04:15  rnollman]
...\" 
...\" Revision 1.1.2.6  1992/10/13  20:22:59  rnollman
...\" 	  inc comments
...\" 	  [1992/10/13  20:21:55  rnollman]
...\" 
...\" Revision 1.1.2.5  1992/10/08  14:44:37  rnollman
...\" 	  add more changes
...\" 	  [1992/10/08  14:43:33  rnollman]
...\" 
...\" Revision 1.1.2.4  1992/09/02  19:12:40  rnollman
...\" 	  This should be ok now.
...\" 	  [1992/09/02  19:11:55  rnollman]
...\" 
...\" Revision 1.1.2.3  1992/09/02  19:07:22  rnollman
...\" 	  test5gds.x500_overview.gpsml
...\" 	  [1992/09/02  19:01:32  rnollman]
...\" 
...\" 	  test4
...\" 	  [1992/09/02  18:51:31  rnollman]
...\" 
...\" 	  test3
...\" 	  [1992/09/02  18:49:15  rnollman]
...\" 
...\" 	  test2
...\" 	  [1992/09/02  18:46:50  rnollman]
...\" 
...\" 	  test
...\" 	  [1992/09/02  18:43:58  rnollman]
...\" 
...\" 	  copied file from Rich Nollman's private directory
...\" 	  [1992/09/02  18:40:52  rnollman]
...\" 
...\" Revision 1.1.2.2  1992/09/01  14:45:02  rnollman
...\" 	  create file
...\" 	  [1992/09/01  14:44:20  rnollman]
...\" 
...\" $EndLog$
...\"*********************************************************************
...\" Title of Chapter
...\"*********************************************************************
'\" /*****************************************************************
'\" *                                                                *
'\" * COPYRIGHT   (C)  SIEMENS NIXDORF INFORMATIONSSYSTEME AG 1994   *
'\" *                  ALL RIGHTS RESERVED                           *
'\" *                                                                *
'\" *****************************************************************/
.iX "-: masks, MHS" "message handling"
.iX "-: \*Valso\*O shadows, shadowing jobs" "directories"
.H 1 "Overview of the X.500 Directory Service"
.iX "-[" "directories" "information model (GDS)"
The Global Directory Service (GDS) is a distributed, replicated
directory service. ``Distributed'' in this 
context means that information is stored
in different places in the network.  Requests for information are
routed by GDS to directory servers throughout
the network.  ``Replicated'' in this context 
means that information is stored in more than one location for easier access.
.P
GDS is based on the CCITT X.500/IS 9594
(1988) international standard.  The aim of this standard, also
referred to as the International Organization for Standardization (ISO)  directory standard, is to provide a global
directory that supports network users and applications with
information required for communication.  The directory plays a
significant role in allowing the interconnection of information
processing systems from different manufacturers, under different
managements, of different levels of complexity, and of different ages.
.P
GDS is the DCE implementation of the OSI directory standard. Together
with the Cell Directory Service (CDS), it provides its users with a
centralized place to store information required for communication,
which can be retrieved from anywhere in a distributed system.  GDS
maintains information describing objects such as people,
organizations, applications, distribution lists, network hardware, and
other distributed services dispersed over a large geographical area.
.P
CDS stores names and attributes of resources
located in a DCE cell.  A DCE cell consists of various combinations of
DCE machines connected by a network.  Each DCE cell contains its own
CDS Server, which provides access to local resource
information.  CDS is optimized to provide users with access to
local information.
.P
GDS serves as a general-purpose information
repository.  It provides information about resources outside a DCE
cell.  GDS links the various cells by helping to locate remote
cells.  
.H 2 "The Directory Information Model"
.iX "objects" "about (GDS)"
.iX "-[" "Directory Information Base (DIB)" "about"
A \*Edirectory\*O is a collection of information about objects that exist in
the world.  Objects are anything with a name, for example
people, organizations, printer
servers, and application processes. 
.P
All types of information can
be stored in a directory.  This information is usually in the form of
a description or an address.
For example, a typical directory is a white pages city telephone
directory containing information about people and businesses.  The
addressing information stored in the directory consists of the telephone
number and street address of a person or business.  Descriptive
information is the name of the person or business.  Another
example is a yellow pages directory that provides information about an
object, such as a restaurant.  A specific restaurant may include additional
information such as types of food, serving times,
credit cards accepted, and so on.
.P
The information stored in a directory is known as the \*EDirectory
Information Base\*O (DIB).
.H 3 "Entries"
.iX "objects" "entries"
Information about an object is stored
in an entry in the DIB.  There are
two types of entries in the directory.  An \*Eobject\*O entry refers to an
object and contains all the information about that object in the DIB.
An \*Ealias\*O entry is a special type of entry that
provides an alternative name for an entry.
Alias entries are described later in this chapter.
.H 3 "Attributes"
.iX "-[" "attributes" "GDS"
Each entry in the DIB is made up of a set of attributes.  Each attribute
stores information about the object to which the entry refers.
An entry for a person can contain separate attributes for
their last name, full name, postal address, telephone number, and so on. 
.P
Each attribute, in turn, is made up of an \*Eattribute type\*O and one
or more \*Eattribute values\*O.  The attribute type identifies the
attribute.  The attribute types for an entry describing a person,
would be \*LSurname\*O, \*LCommon-Name\*O, \*LPostal-Address\*O and
\*LTelephone-Number\*O.  Attributes that have more than one value are
called \*Emultivalued\*O attributes.  For example, the entry for
someone who has more than one telephone number, would contain one
\*LTelephone-Number\*O attribute with two values, one for each number.
.iX "directory" "structure of the DIB"
...\" Figure 12-1 
Figure 1-1
shows the structure of the DIB.
.P
.iX "Directory Information Base (DIB)" "structure (figure)"
.ne 5.5i
.FG "Structure of the DIB"
...\" .so gd/Pics/fig1.04.pic
.P
.PS
scale = 160
.ps 40
box  wid 272 ht 98 at 304, 130
line   from 296, 289 \
	to 440, 179 
line   from 200, 288 \
	to 168, 179 
box  wid 80 ht 32 at 232, 129
box  wid 118 ht 32 at 365, 129
.ps 10
"\f(HB\s6Type\s0\fP"  at 230, 128
"\f(HB\s6Value(s)\s0\fP"  at 367, 128
"\f(HB\s6Attribute\s0\fP"  at 454, 306
"\f(HB\s6Attribute\s0\fP"  at 247, 306
"\f(HB\s6Attribute\s0\fP"  at 135, 305
.ps 40
box  wid 471 ht 92 at 295.5, 306
box  wid 96 ht 40 at 452, 308
.ps 10
"\f(HB\s22.\s0\fP"  at 372, 304
"\f(HB\s22.\s0\fP"  at 348, 304
"\f(HB\s22.\s0\fP"  at 348, 304
"\f(HB\s22.\s0\fP"  at 324, 304
.ps 40
box  wid 96 ht 40 at 248, 308
box  wid 96 ht 40 at 136, 308
.ps 10
"\f(HB\s6\s0\fP"  at 0, 4
"\f(HB\s6\s0\fP"  at 108, 76
"\f(HB\s6\s0\fP"  at 156, 160
"\f(HB\s6Entry\s0\fP"  at 76, 388
"\f(HB\s6Object Entry\s0\fP"  at 344, 460
.ps 40
box  wid 72 ht 32 at 512, 492
box  wid 72 ht 32 at 340, 492
box  wid 72 ht 32 at 88, 492
box  wid 72 ht 32 at 440, 568
box  wid 72 ht 32 at 164, 568
ellipse wid 52 ht 32 at 290, 704
.ps 10
"\f(HB\s6Root\s0\fP"  at 292, 704
.ps 40
box  wid 72 ht 32 at 356, 648
.ps 10
"\f(HB\s6alias entry\s0\fP"  at 212, 456
.ps 40
box  wid 72 ht 32 at 296, 568
box  wid 72 ht 32 at 236, 648
line   from 304, 477 \
	to 60, 353 
line   from 376, 477 \
	to 531, 352 
line   from 273, 692 \
	to 235, 665 
line   from 233, 633 \
	to 160, 584 
line   from 246, 632 \
	to 297, 585 
line   from 309, 693 \
	to 355, 664 
line   from 358, 633 \
	to 439, 585 
line   from 440, 552 \
	to 340, 509 
line   from 449, 553 \
	to 512, 509 \
	to 512, 509 
line   from 160, 553 \
	to 87, 509 
line   from 172, 553 \
	to 191, 499 
line ->  from 213, 490 \
	to 296, 491 
line   from 199, 511 \
	to 176, 473 \
	to 176, 472 \
	to 224, 472 \
	to 199, 512 
.PE
.P
Each attribute type also has an \*Eattribute syntax\*O which describes
the format of the legal values of that attribute
type.  An example is \*LCommon-Name\*O, which is assigned the \*LCase Ignore
String\*O syntax.  This allows a \*LPrintable String\*O or a
\*LTeletex String\*O to be entered and specifies that cases are not
significant for matching. \*LPrintable String\*O or \*LTeletex
String\*O defines the permitted character sets.
.iX "-]" "attributes" "GDS"
.nL
.ne 2.5i
.H 3 "Object Classes"
.iX "-[" "object classes" "about"
In order to categorize entries in the DIB,
each entry is said to belong to one or more \*Eobject classes\*O. 
Sample object classes are \*LCountry\*O, \*LPerson\*O,
\*LOrganizational-Person\*O, and \*LApplication-Entity\*O.  The object class of an entry
restricts the permitted attributes for that entry.  The mandatory and optional
attributes of entries in an object class are determined by
\*Eobject class rules\*O. (These rules are part of a
schema and are described later in this chapter.)
.P
For example, an entry representing an organization must contain an
attribute called \*LOrganization-Name\*O, which has the name of the
organization as its value.  It can contain optional attributes that
describe the organization, the state or locality in which the
organization resides, the postal address of the organization, the business
category of the organization, and so on.
.P
As a general rule, \*Eall\*O entries must contain the \*LObject-Class\*O attribute, which contains the list of object classes
to which the entry belongs.  This attribute is multivalued.  If an
entry belongs to more than one object class, all object classes must
be listed in this attribute.
.P
For example, there are two object classes defined as \*LPerson\*O and
\*LOrganizational-Person\*O.  An entry in the \*LPerson\*O object class must contain a
\*LCommon-Name\*O attribute and a \*LSurname\*O attribute.  It can contain several
other attributes such as \*LDescription\*O, \*LTelephone-Number\*O, and
\*LUser-Password\*O.  An entry in the object class \*LOrganizational-Person\*O is
defined as a subclass of \*LPerson\*O.  This means that it must contain
every mandatory attribute of \*LPerson\*O and can contain every
optional attribute of \*LPerson\*O.  However, it is also defined as an
extension of \*LPerson\*O. \*LOrganizational-Person\*O can contain more
attributes than \*LPerson\*O.  These attributes include
\*LOrganizational-Unit-Name\*O, \*LTelex-Number\*O, and so on. An entry
that describes \*LOrganizational-Person\*O must have at least two values
in its \*LObject-Class\*O attribute, that is \*LPerson\*O and
\*LOrganizational-Person\*O.
.P
...\" Figure 12-2 
Figure 1-2
shows an example of an entry describing \*LOrganizational-Person\*O.
.P
.ne 7.5i
.FG "Example of Entry Describing Organizational Person"
...\" .so gd/Pics/fig01.ditentry.pic
.P
.PS
scale = 106.667
.ps 20
box  wid 281 ht 110 at 271.5, 439
box  wid 281 ht 110 at 238.5, 566
box  wid 281 ht 110 at 208.5, 693
.ps 10
line ->  from 49, 369 \
	to 179, 327 
line ->  from 37, 362 \
	to 219, 183 
line ->  from 27, 359 \
	to 259, 55 
line ->  from 483, 495 \
	to 347, 543 
line ->  from 523, 503 \
	to 339, 663 
line ->  from 515, 463 \
	to 435, 359 
line ->  from 555, 463 \
	to 483, 71 
line ->  from 531, 463 \
	to 443, 199 
line ->  from 491, 471 \
	to 371, 439 
line ->  from 27, 399 \
	to 83, 663 
line ->  from 35, 399 \
	to 115, 551 
line ->  from 51, 399 \
	to 139, 439 
"\fH\s7attribute values\s0\fP"  at 531, 487
"\fH\s7attribute types\s0\fP"  at 35, 383
.ps 20
box dashed wid 281 ht 110 at 350.5, 185
box dashed wid 281 ht 110 at 311.5, 313
box dashed wid 281 ht 110 at 390.5, 55
.ps 10
box  wid 88 ht 32 at 192, 440
"\fH\s7Surname\s0\fP"  at 189, 438
box  wid 88 ht 32 at 307, 440
"\fH\s7Schmidt\s0\fP"  at 307, 440
box  wid 88 ht 32 at 310, 53
"\fH\s7Organizational\s0\fP"  at 310, 58
"\fH\s7Unit Name\s0\fP"  at 312, 46
box  wid 88 ht 32 at 422, 53
"\fH\s7New York Sales\s0\fP"  at 424, 53
box  wid 88 ht 32 at 270, 184
box  wid 88 ht 32 at 383, 185
"\fH\s7Title\s0\fP"  at 267, 182
"\fH\s7Sales Manager\s0\fP"  at 386, 184
box  wid 88 ht 32 at 231, 329
"\fH\s7Telphone Number\s0\fP"  at 234, 328
box  wid 88 ht 32 at 342, 285
line   from 323, 301 \
	to 323, 327 \
	to 408, 327 \
	to 408, 292 \
	to 386, 292 
line   from 342, 327 \
	to 342, 357 \
	to 425, 357 \
	to 425, 315 \
	to 408, 315 
"\fH\s7Common Name\s0\fP"  at 159, 583
box  wid 88 ht 32 at 155, 586
box  wid 88 ht 32 at 271, 543
line   from 250, 559 \
	to 250, 586 \
	to 334, 586 \
	to 334, 554 \
	to 315, 554 
"\fH\s7A. S. Schmidt\s0\fP"  at 317, 594
"\fH\s7Al Schmidt\s0\fP"  at 294, 570
"\fH\s7Alfred Schmidt\s0\fP"  at 275, 543
line   from 270, 587 \
	to 270, 609 \
	to 353, 609 \
	to 353, 571 \
	to 336, 571 
"\fH\s7Person\s0\fP"  at 240, 660
"\fH\s7Organizational\s0\fP"  at 241, 671
box  wid 88 ht 32 at 241, 666
"\fH\s7Object Class\s0\fP"  at 125, 703
box  wid 88 ht 32 at 126, 703
line   from 219, 682 \
	to 219, 705 \
	to 302, 705 \
	to 302, 669 \
	to 285, 669 
line   from 241, 706 \
	to 241, 735 \
	to 324, 735 \
	to 324, 695 \
	to 303, 695 
"\fH\s7Top/GDS-Top\s0\fP"  at 283, 716
"\fH\s7Person\s0\fP"  at 259, 692
"\fH\s7617 289 4448\s0\fP"  at 389, 342
"\fH\s7617 753 8871\s0\fP"  at 344, 283
"\fH\s7800 289 4400\s0\fP"  at 371, 312
.PE
.iX "-]" "object classes" "about"
.H 3 "Object Identifiers"
.iX "-[" "object identifiers"  
As shown in the previous section, attribute types and object classes
have human-language names.  Although all names are meaningful and
unique, they are not used in the protocols; an Object Identifier
(OID) is used instead.  This is a
hierarchical number assigned by a registration authority.  The
possible values of OIDs are defined in a tree.
The standards bodies ISO and CCITT control the top of the tree and
define portions of this tree.  These standards bodies 
delegate the remaining portions to other
organizations, so that each object class, attribute type, and attribute syntax
has a unique OID.  These OIDs are written in the format \*L2.5.6.2\*O;
this is the OID of the \*LCountry\*O object class.  If more information
is required, the OIDs can be written as follows:
.iS
\*Ljoint-iso-ccitt {2}  modules {5} object classes {6} country {2}\*O
.iE
.P
...\" Figure 12-3 
Figure 1-3
shows a portion of the tree.
.P
.ne 4.0i
.FG "Object Identifiers"
...\" .so gd/Pics/fig01.tree.pic
.P
.PS
scale = 80
"\fH\s10root\s0\fP"  at 95, 264
"\fH\s10iso(1)\s0\fP"  at 95, 172
"\fH\s10ccitt(0)\s0\fP"  at 17, 171
line   from 95, 256 \
	to 20, 181 
line   from 95, 255 \
	to 171, 179 
"\fH\s10at(2)\s0\fP"  at 318, 4
line   from 279, 49 \
	to 313, 15 
line   from 269, 48 \
	to 237, 16 
"\fH\s10arch(5)\s0\fP"  at 274, 60
line   from 228, 116 \
	to 272, 72 
"\fH\s10mhs-motis(6)\s0\fP"  at 225, 123
line   from 184, 165 \
	to 214, 135 
line   from 135, 113 \
	to 177, 71 
line   from 128, 113 \
	to 86, 71 
line   from 175, 164 \
	to 146, 135 
line   from 95, 255 \
	to 95, 185 
"\fH\s10objectClass(6)\s0\fP"  at 170, 60
"\fH\s10attributeType(4)\s0\fP"  at 76, 60
"\fH\s10ds(5)\s0\fP"  at 132, 124
"\fH\s10joint-iso-ccitt(2)\s0\fP"  at 176, 172
"\fH\s10oc(1)\s0\fP"  at 235, 4
.PE
.P
.ne 10
To enable more efficient transmission over a communications line,
the first two subidentifiers \*L2\*O and \*L5\*O are coded together; this
results in one subidentifier, \*L85\*O.  The encoded format of the OID for
the \*LCountry\*O object class is thus \*L85.6.2\*O.  This encoded
representation is used in the GDS administration
programs and in tables in this book.  For example, Table 1-5 (shown
later in this chapter), which contains a list of OIDs
for selected object classes, uses this format.  Where
unencoded format is used in text, the encoded format is included in
parentheses for clarity.
.iX "-]" "object identifiers"
.iX "-]" "directories" "information model (GDS)"
.iX "-]" "Directory Information Base (DIB)" "about"
.H 2 "X.500 Naming Concepts"
.iX "-[" "X.500" "naming concepts"
Large amounts of information need to be organized to enable efficient
data retrieval and ensure that names are unique.  Information in the DIB
is organized in a hierarchical structure called the \*EDirectory
Information Tree\*O (DIT).  The structure and naming of the nodes in the
DIT are specified by registration authorities for a standardized set
of X.500 names, and by implementors of the directory service (such as OSF)
for implementation-specific names.  A schema describes the DIT hierarchy.
Schemas are described in more detail later in Section 1.6.
.P
Although the X.500 standard does not define a specific schema, it
does make general recommendations.  For example, countries and
organizations need to be named near the root of the DIT, whereas people,
applications, and devices need to be named further down in the
hierarchy.  GDS supplies a default schema that complies with these
recommendations.
.H 3 "Distinguished Names"
.iX "-[" "Distinguished Names (DN)" "about"
A hierarchical path exists from the root of the DIT to any entry in
the DIB.  Each entry must have a name that uniquely describes that entry.  A \*ERelative Distinguished Name\*O (RDN) distinguishes an
entry from other entries with the same superior node in the DIT.  A
sequence of RDNs, starting from the root of the tree, can identify a
unique path down the tree, and thus a unique entry.  This sequence of
RDNs, which identifies a particular entry, is the \*EDistinguished Name\*O (DN) of
that entry.  Each entry in the DIB can be referenced by its
DN.
.P
...\" Figure 12-4 
Figure 1-4
shows an example of a DN.  The
shaded boxes in the DIT represent the entries that are named in the
column labeled RDN.  According to the schema,
countries are named directly below the root, followed by
organizations, organization units, and people.
.P
.ne 5.0i
.FG "Distinguished Name in a Directory Information Tree"
...\" .so gd/Pics/fig1.06a.pic
.P
.PS
.in +.3i
scale = 106.667
"\f(HB\s9OU=New York Sales\s0\fP"  at 303, 179
"\f(HB\s9People\s0\fP"  at 104, 83
"\f(HB\s9Organization Units\s0\fP"  at 114, 173
"\f(HB\s9Organizations\s0\fP"  at 115, 258
"\f(HB\s9Countries\s0\fP"  at 111, 338
line   from 53, 208 \
	to 105, 181 
line   from 130, 165 \
	to 174, 144 
line   from 86, 166 \
	to 111, 143 
line   from 48, 208 \
	to 76, 180 
line   from 44, 207 \
	to 44, 143 
.ps 20
box  wid 47 ht 21 at 110.5, 218.5
.ps 10
circle radius 2 at 113, 384
"\f(HB\s9DIT\s0\fP"  at 115, 475
circle radius 5 at 113, 384
.ps 20
box  wid 47 ht 21 at 173.5, 45.5
.ps 10
box  wid 40 ht 14 at 174, 45
box  wid 33 ht 8 at 174.5, 45
box  wid 25 ht 4 at 174.5, 45
.ps 20
box  wid 47 ht 21 at 48.5, 132.5
.ps 10
box  wid 40 ht 14 at 49, 132
box  wid 33 ht 8 at 49.5, 132
box  wid 25 ht 4 at 49.5, 132
box  wid 25 ht 4 at 111.5, 293
box  wid 33 ht 8 at 111.5, 293
box  wid 40 ht 14 at 111, 293
.ps 20
box  wid 47 ht 21 at 110.5, 293.5
box  wid 47 ht 21 at 46.5, 45.5
box  wid 47 ht 21 at 108.5, 45.5
box  wid 47 ht 21 at 109.5, 132.5
box  wid 47 ht 21 at 173.5, 218.5
box  wid 607 ht 453 at 303.5, 226.5
line   from 224, 452 \
	to 225, 0 
line   from 423, 453 \
	to 424, 0 
line   from 225, 119 \
	to 607, 119 
line   from 224, 201 \
	to 606, 201 
line   from 224, 280 \
	to 607, 280 
line   from 224, 360 \
	to 606, 360 
.ps 10
"\f(HB\s9RDN\s0\fP"  at 315, 476
"\f(HB\s9Distinguished Name (DN)\s0\fP"  at 511, 474
.ps 20
box  wid 47 ht 21 at 173.5, 293.5
box  wid 47 ht 21 at 48.5, 293.5
line   from 120, 378 \
	to 173, 304 
line   from 44, 120 \
	to 44, 56 
.ps 10
"\f(HB\s9Root\s0\fP"  at 113, 406
.ps 20
line   from 108, 377 \
	to 48, 304 
line   from 112, 375 \
	to 112, 348 \
	to 112, 348 
line   from 113, 328 \
	to 112, 305 
line   from 111, 282 \
	to 92, 267 
line   from 112, 283 \
	to 112, 267 \
	to 112, 267 
line   from 73, 252 \
	to 46, 230 
line   from 111, 249 \
	to 111, 230 
line   from 111, 281 \
	to 126, 269 
box  wid 47 ht 21 at 172.5, 132.5
line   from 49, 121 \
	to 76, 94 
line   from 88, 74 \
	to 104, 56 
line   from 53, 121 \
	to 95, 97 \
	to 105, 92 
line   from 150, 249 \
	to 178, 229 
.ps 10
circle radius 8 at 113, 384
.ps 20
line   from 141, 75 \
	to 175, 56 
.ps 10
box  wid 25 ht 4 at 49.5, 218
box  wid 33 ht 8 at 49.5, 218
box  wid 40 ht 14 at 49, 218
.ps 20
box  wid 47 ht 21 at 48.5, 218.5
.ps 10
"\f(HB\s9{}\s0\fP"  at 441, 413
"\f(HB\s9{C=US}\s0\fP"  at 456, 330
"\f(HB\s9{C=US\s0\fP"  at 453, 249
"\f(HB\s9O=Acme Enterprises}\s0\fP"  at 503, 235
"\f(HB\s9{C=US\s0\fP"  at 452, 180
"\f(HB\s9O=Acme Enterprises\s0\fP"  at 502, 162
"\f(HB\s9OU=New York Sales}\s0\fP"  at 506, 145
"\f(HB\s9{C=US\s0\fP"  at 453, 90
"\f(HB\s9O=Acme Enterprises\s0\fP"  at 502, 73
"\f(HB\s9OU=New York Sales\s0\fP"  at 503, 57
"\f(HB\s9CN=Alfred Schmidt}\s0\fP"  at 500, 42
"\f(HB\s9C=US\s0\fP"  at 256, 329
"\f(HB\s9O=Acme Enterprises\s0\fP"  at 303, 249
"\f(HB\s9CN=Alfred Schmidt\s0\fP"  at 296, 89
.in -.3i
.PE
.P
Every entry in the DIB has a DN, not just the leaf
nodes.  For example, the DN for Acme
Enterprises in 
...\" Figure 12-4 
Figure 1-4 is the concatenation of the DN of the entry above with its RDN. 
.iX "-]" "Distinguished Names (DN)" "about"
.nL
.ne 2.5i
.H 3 "RDNs and Attribute Value Assertions"
.iX "-[" "Relative Distinguished Names (RDN)" "about"
.iX "-[" "Attribute Value Assertions (AVA)" 
.P
An RDN consists of one or more assertions about the type and value of an
attribute.  A pair consisting of an attribute type and a value of that
type is known as an \*EAttribute Value Assertion\*O (AVA).  All attribute
types in an RDN must be different.  The value of an
attribute in an RDN's AVA is called the distinguished value of
that attribute as opposed to the other possible values of that
attribute.
.P
For example, the entry shown in 
...\" Figure 12-4 
Figure 1-4
contains the RDN \*LCN = Alfred Schmidt\*O.  Although the 
\*LCN\*O (\*LCommon-Name\*O) 
attribute consists of three values: Alfred Schmidt, A.
S.  Schmidt, and Al Schmidt, the AVA \*LCN = Alfred Schmidt\*O
contains the value \*LAlfred Schmidt\*O, which has been designated as the
distinguished value in the AVA.
.P
An RDN usually contains a
single distinguished value, and therefore is made up of a single
AVA.  However, under certain circumstances additional values (and
hence multiple AVAs) are used.
.P
...\" Figure 12-4 
For example, the RDN of an \*LOrganizational-Person\*O entry is
usually composed of a single AVA, such as the \*LCommon-Name\*O attribute
type with a distinguished value (in 
...\" Figure 12-4, 
Figure 1-4,
the AVA is \*LCN = Alfred Schmidt\*O).  Depending on the schema, the RDN of an
\*LOrganizational-Person\*O entry may contain more than one AVA.  For
example, the RDN in 
...\" Figure 12-4 
Figure 1-4
can contain the AVAs \*LCN = Alfred Schmidt\*O 
and \*LOU = New York Sales\*O, with \*LAlfred Schmidt\*O 
and \*LNew York Sales\*O as distinguished values.
.P
To summarize:
.ML
.LI
A DIT consists of a collection of DNs
.LI
DNs result from a concatenation of RDNs
.LI
RDNs consist of an unordered collection of attribute type and value pairs (AVAs)
.LE
.iX "-]" "Relative Distinguished Names (RDN)" "about"
.iX "-]" "Attribute Value Assertions (AVA)"
.H 3 "Aliases"
.iX "-[" "aliases" "for GDS objects" 
.iX "-[" "aliases" "about"
Alternative names or aliases are supported in the DIT through special
pointer entries called \*Ealias entries\*O.  Alias entries do not contain
any attributes other than those attributes belonging to their RDN, the object
class attribute, and the aliased object name attribute (that is, the
DN of the aliased object entry).  Because an
alias entry has no subordinate entries, it is, by definition, a
leaf entry of the DIT as shown in 
...\" Figure 12-5. 
Figure 1-5.
Alias entries point to
object entries and provide the basis for alternative names for the
corresponding objects.
.P
For example, aliases are used to provide more user-friendly
names, to direct the search for a particular entry, to reduce the
scope of a search, to provide for common alternative abbreviations and
spellings, or to provide continuity after a name change.
.P
...\" Figure 12-5 
Figure 1-5
demonstrates how an alias name provides continuity after a
name change.  The \*LABC\*O company's branch office, located originally in
Osaka, has moved to Tokyo.  To make the transition easier for directory
users and to guarantee that a search based on the old information
finds its target, an alias for \*LO=ABC\*O is added to the directory
beneath \*LL=Osaka\*O.  This alias entry points to the object entry \*LO=ABC\*O.
A search for \*LABC\*O under \*LL=Osaka\*O in the DIT finds the entry
\*L/C=Japan/L=Tokyo/O=ABC\*O.
.P
.ne 3.5i
.FG "An Alias in the Directory Information Tree"
...\" .so gd/Pics/fig1.06aa.pic
.P
.PS
scale = 106.667
"\fH\s7C = Japan\s0\fP"  at 111, 251
line   from 147, 250 \
	to 100, 309 
line   from 216, 145 \
	to 259, 87 
box  wid 32 ht 16 at 260, 79
"\fH\s7O = ABC\s0\fP"  at 298, 95
"\fH\s7OU = Osaka Branch\s0\fP"  at 290, 18
box  wid 32 ht 16 at 220, 8
line   from 259, 71 \
	to 220, 16 
line ->  from 59, 78 \
	to 243, 78 
"\fH\s7L = Tokyo\s0\fP"  at 252, 171
line   from 156, 232 \
	to 209, 160 
line   from 153, 233 \
	to 104, 161 
"\fH\s7L = Osaka\s0\fP"  at 57, 169
line   from 96, 145 \
	to 53, 82 
box  wid 32 ht 16 at 155, 241
"\fH\s7O = ABC\s0\fP"  at 23, 92
box  wid 32 ht 16 at 210, 153
box  wid 32 ht 16 at 98, 153
line   from 57, 71 \
	to 65, 71 \
	to 49, 87 
line   from 49, 87 \
	to 33, 71 \
	to 57, 71 
.PE
.P
.iX "filtering"
Alias entries can also be used instead of \*Efiltering\*O.
Filtering is a process that uses assertions about particular
attributes to search through the DIT.  Although filtering does not
require any special information in the DIT, a search
involving a large population of entries and
attributes can be expensive.  An alternative approach is to set up special subtrees
whose naming structures are designed to perform searches similar to yellow pages
searching. 
...\" Figure 12-6
Figure 1-6 
shows an example of such a subtree, populated
by alias entries and segregated by localities within the organization.
Note that the entries within these special subtrees
could also be a mixture of object and alias entries, provided there is
only one object entry for each object stored in the directory.
.P
.ne 3.0i
.FG "Subtree Populated by Aliases"
...\" .so gd/Pics/fig1.06aaa.pic
.P
.PS
.in +.3i
scale = 106.667
"\fH\s7the organization\s0\fP"  at 68, 61
"\fH\s7Object within\s0\fP"  at 65, 75
"\fH\s7Aliases\s0\fP"  at 272, 67
line   from 262, 177 \
	to 315, 121 
line   from 260, 175 \
	to 289, 132 
line   from 258, 174 \
	to 258, 174 \
	to 242, 127 
line   from 254, 175 \
	to 229, 117 
line   from 100, 174 \
	to 106, 124 
line   from 100, 174 \
	to 62, 137 
line   from 102, 175 \
	to 117, 114 
line   from 98, 175 \
	to 47, 133 
line   from 179, 254 \
	to 253, 182 
line   from 171, 253 \
	to 104, 181 
circle radius 4 at 257, 179
"\fH\s7Locality\s0\fP"  at 290, 178
circle radius 4 at 175, 256
"\fH\s7Country\s0\fP"  at 127, 255
circle radius 67 at 67, 68
circle radius 67 at 273, 67
circle radius 4 at 101, 178
"\fH\s7Organization\s0\fP"  at 61, 178
.in -.3i
.PE
.P
An object with an entry in the DIT can have zero or more aliases.
Several alias entries can point to the same object entry.  An alias
entry can point to an object that is not a leaf entry.  Only object
entries can have aliases; aliases of aliases are not permitted.
.iX "-]" "aliases" "about"
.iX "-]" " aliases" "for GDS objects"
.iX "-]" "X.500" "naming concepts"
.H 2 "Standardized Operations and Features"
.iX "X.500" "standardized operations"
The following table lists and briefly describes the underlying
operations defined by X.500 that are used internally by GDS to provide
the functions available in the GDS administration programs.  These
operations are available to programmers in the library of XDS API
function calls that are included with GDS.  XDS API allows programmers
to write applications that perform operations on the directory.
(Refer to the \*(Dg for more
information on programming with XDS API.)
.P
.TB "Operations Standardized by X.500"
.TS H
center,box,tab(@);
lB | lB
lB | lw(3.5i).
Operation@Meaning
=
.TH
\*LBind\*O@T{
Used at the beginning of a directory session for accessing the directory
T}
_
\*LUnbind\*O@T{
Used at the end of a directory session to release the directory association
T}
_
\*LRead\*O@T{
Reads a particular entry with particular attributes
T}
_
\*LCompare\*O@T{
Checks whether an attribute value supplied
matches a value of that attribute of a particular entry
T}
_
\*LList\*O@T{
Lists all the immediate subordinates of a particular entry
T}
_
\*LSearch\*O@T{
Returns information from all the entries (that
satisfy some filter) within a certain section of the DIT
T}
_
\*LAbandon\*O@T{
Cancels an outstanding interrogation request
T}
_
\*LAdd entry\*O@Adds a new leaf entry to the DIT
_
\*LRemove entry\*O@Removes a leaf entry from the DIT
_
\*LModify entry\*O@Modifies attributes of a particular entry
_
\*LModify RDN\*O@Modifies the last RDN of a leaf entry
.TE
.iX "-[" "Global Directory Service (GDS)" "features"
.P
.ne 10
Directory service users are concerned with goal-oriented tasks
(such as looking up a name or a telephone number).  The
directory service provides the following features:
.ML
.LI
User-friendly naming
.LI
Lookup
.LI
Searching
.LI
Browsing
.LI
Groups
.LI
User identification (authentication)
.LI
Routing of requests
.LE
.H 3 "User-Friendly Naming"
Objects can be referred to with names that are readable.
These names are assigned to ensure, as far as possible, that they
can be predicted or remembered by human users.  When
sending a message by means of electronic mail, it is ill-advised to
specify a confusing combination of figures, letters, and special
characters as the receiver because they are open to misinterpretation.  This
information, which is necessary for sending but is of no interest to
the user, is concealed in the directory service.  User-friendly
names typically consist of attributes that are inherent to
the object, and not fabricated to suit the method of transmission.
.P
.gL "Alias name"
This user-friendly naming is enhanced by the use of the alias names.
One administrator can use the names ``laser printer''
and ``line printer'' whereas another can call them ``high-
quality printer'' and ``high-speed printer.''
.nL
.ne 2.5i
.H 3 "Lookup"
Users can select the DN or alias name of an
object together with the types of attributes required.  The directory service
returns all values associated with these attribute types.
This function is similar to the white pages of the telephone directory.
However, it supplies considerably more information than just addresses and
telephone numbers.  For example, an entry for a program name not only
indicates what a program can do, but also where it is installed and who
has access rights.
.H 3 "Searching"
It is possible to search for objects according to common characteristics
in a similar fashion to using the yellow pages in a telephone directory. 
As a general rule, the search is carried out from a particular entry onwards
and, in extreme cases, from the root onwards. 
.P
``Filters'' are used to specify search criteria;
that is, only entries that satisfy the filter are returned.  Both the
search time and the number of hits in a successful search operation
can be specified by the user.
The user could use this function of the directory service to obtain, for
example, a list of all laser printers installed in one particular building.
.H 3 "Browsing"
A user who does not know the DN or the alias name of
the object to be located can find the necessary information by ``browsing'' 
through the DIT.  The user selects a specific entry, 
and all entries located immediately below it in the
hierarchical structure are then displayed.  The user then selects a new
entry from these entries (this is known as recursive listing).
.H 3 "Groups"
A ``group'' is an object consisting of a collection of object names.  Object
names within groups can also form groups.  For example, groups can be used 
to make distribution lists.
.H 3 "User Identification (Authentication)"
The directory service supports simple user authentication using name
and password.  GDS administration programs do not use strong
authentication.  However, XDS application programs may use the Strong
Authentication Package as a security method.  Refer to
the \*(Dg for more information on
how the SAP can be integrated into an XDS application program.
.H 3 "Transparent Routing of Requests"
The directory service supports distribution transparency in which the user gets the same consistent view of information irrespective of where the user is attached to the directory service.  If a DSA cannot find the requested information, the following mechanisms are available to handle the request:
.P
.VL
.LI "Referral"
The DSA sends the requesting DUA or DSA a reference
indicating a DSA to be addressed as an alternative.  The
referral is handled using the DAP or DSP.
.LI "Chaining"
The DSA passes the request directly on to another DSA using the DSP.
.LE
.P
Refer to section 1.6 for a detailed description of referral and chaining.
.iX "-]" "Global Directory Service (GDS)" "features"
.H 2 "Extensions to the X.500 Directory Service"
.iX "-[" "X.500" "GDS extensions"
In addition to the functions standardized by X.500, the following features are
also available in GDS:
.P
.ML
.LI
Shadow Replication of Information and shadow update
.LI
Access Control
.LI
DCE Authentication
.LI
Directory User Agent Cache
.LI
Remote Administration
.LI
Tree Processing
.LI
Configurable Routing of Requests
.LE
.H 3 "Shadow Information"
Frequently used data that is stored on one DSA can be copied and
updated to other DSAs.  This functionality increases the availability
of the data and reduces the network access and costs.  A temporary
inconsistency in the data, which can occur, is tolerated by the
directory system.  If this inconsistency is unacceptable, only master
information can be used.

.iX "attributes" "Master Knowledge"
.iX "Master Knowledge attribute" 
.iX "shadows" "administration"
The \*LMaster Knowledge\*O attribute, which is part of every object,
indicates whether the data is master or shadow
information.
.P
\*EShadow administration\*O involves the creation and manipulation
of shadows and shadowing jobs.  A shadowing job is stored in a local shadowing 
job file and contains the following information:
.ML
.LI
Name of an object or subtree that has been replicated on a specific target DSA
.LI
Name of the target DSA that has the replica
.LI
Update frequency for the object or subtree on the target DSA
.LE
.P
.ne 10
In the GDS implementation, a daemon process periodically updates an
object or subtree on a target DSA by looking at the information stored
in the shadowing job file.  Note that a shadowing job should not be
confused with a process or system task.  A shadow is a read-only (in
most cases) replica of some object or subtree maintained in a
nonlocal DSA that is updated at specified intervals.
.P
The administrator has the option of activating a shadowing job (if one
does not already exist), setting the update frequency of an existing
job, or deactivating a job.  The administrator selects the update
frequency from one of three values: HIGH, MEDIUM, or LOW.  A series of
exact time values, which can be specified, is associated with each one
of these values:
.ML
.LI
HIGH - 5 to 30 minutes
.LI
MEDIUM - 1 to 12 hours
.LI
LOW - daily, weekly, twice a week
.LE
.P
An administrator should choose the high update frequency if several
objects change over a very short time in the DSA and the entries need to
be updated as soon as possible.  A low update frequency is
used when there are only a few changes over the DSA in a short period of time.
.P
An administrator can perform shadow administration while
connected to the local DSA containing the objects to be
administered.  Shadow administration allows the
administrator to create and delete shadows of objects or
subtrees in a DSA, to create and delete shadowing jobs, and to manage
shadowing jobs. 
.H 3 "Directory Distribution and Knowledge Information"
The DIB is potentially distributed transparently across multiple DSAs,
with each DSA comprising part of the DIB.  Conceptually, DSAs are made up of two types
of information. \*EDirectory Information\*O is the collection of entries over which the
administrator of a particular DSA has administrative authority.  The information required to 
locate the DSA with administrative authority for a particular entry is \*VKnowledge Information\*O.
.P
.ne 12
In the GDS implementation,
every object entry has an attribute called the \*LMaster Knowledge\*O
attribute.  This attribute contains the DN of the DSA
responsible for maintaining the "master copy" of the data.  The entry
can be replicated and stored on other DSAs.  The DSA that maintains
the master copy updates the entry periodically in a process
called ``shadowing.'' The frequency of these updates is determined by the
administrator through shadow administration functions (described in
Chapter 10).  The updated entries distributed on one or more DSAs are 
``shadow copies'' of the entry that masters the object.
.P
Each DSA must have an entry containing its own name and a network
address.  Each DSA knows its own name from a configuration
file.  By comparing this name with the \*LMaster Knowledge\*O
attribute of an entry in the DSA, the DSA determines whether it
masters the entry or contains a shadow copy of the entry.
.P
...\" Figure 12-11, 
Figure 1-7,
presented later in this chapter, shows an example
of how master and shadow entries are stored on two DSAs, \*LDSA1\*O and \*LDSA2\*O.
The figure shows the copy of \*LAP2\*O on \*LDSA1\*O with an indication that
the \*LMaster Knowledge\*O attribute is set to the DN
of \*LDSA2\*O. \*LAP2\*O is mastered on \*LDSA2\*O.
.P
A master entry can be modified only by an administrator with the
appropriate access rights to the entry.
.P
.iX "-[" "shadows" "creating"
.iX "-[" "Knowledge Information" "modeling"
.iX "-[" "Directory Information Base (DIB)" "distributing"
.iX "-[" "Directory Information Tree (DIT)" "distributing" 
.P
GDS models the knowledge information so that each DSA contains an
entry with its own name (\*L/C=DE/O=Smith
Ltd/OU=DI/CN=DSA/CN=DSA1\*O, for example) and its Presentation Service Access Point
(PSAP) address (which is its network address) as attributes. 
.P
The \*LMaster Knowledge\*O attribute
contains the DN of the DSA that masters the object.  This is shown in 
...\" Figure 12-11 
Figure 1-7 with the names of the DSAs and the objects they master.
.ML
.LI
\*L/C=DE/O=Smith Ltd/OU=AP2\*O is mastered by \*LDSA2\*O
.LI
\*L/C=DE\*O is mastered by \*LDSA1\*O
.LI
\*L/C=DE/O=Smith Ltd\*O is mastered by \*LDSA1\*O
.LI
\*L/C=DE/O=Smith Ltd/OU=AP2/CN=M\*O is mastered by
\*LDSA1\*O)
.LE
.P
When a master entry is created on one DSA and the entry's
superior node is mastered by another DSA, a ``mandatory shadow'' of
that entry is created automatically on the DSA that masters the
superior node.  
.P
.ne 12
For example, as shown in 
...\" Figure 12-11, 
Figure 1-7,
the entry for \*L/C=DE/O=Smith
Ltd/OU=AP2\*O is mastered by \*LDSA2\*O.  When the administrator adds
the master entry to \*LDSA2\*O, a mandatory shadow of \*L/C=DE/O=Smith
Ltd/OU=AP2\*O is created automatically on \*LDSA1\*O (as shown by the
triangle indicating a mandatory shadow entry).  Note that the three
subordinate master entries under \*L/C=DE/O=Smith Ltd/OU=AP2\*O in the
tree do not appear as shadow entries on \*LDSA1\*O.  That is because
their superior node, \*L/C=DE/O=Smith Ltd/OU=AP2\*O, is mastered by
the same DSA.
.P
...\" Figure 12-11 
Figure 1-7
also illustrates how a mandatory shadow is created on \*LDSA2\*O.
The entry \*L/C=DE/O=Smith Ltd/OU=AP2/CN=M\*O is added to the tree by
the administrator of \*LDSA1\*O beneath its superior node (and shadow
entry) \*L/C=DE/O=Smith Ltd/OU=AP2\*O.  A mandatory shadow of
\*L/C=DE/O=Smith Ltd/OU=AP2/CN=M\*O is created automatically on
\*LDSA2\*O under the master entry \*L/C=DE/O=Smith Ltd/OU=AP2\*O.  The
mandatory shadow is created because the superior node of the new
master entry is mastered on another DSA (\*LDSA2\*O).
.P
The reverse works with respect to removing entries 
from the directory.  When a master
entry is removed, its mandatory shadow entry is removed too.
.P
Mandatory shadow entries will be modified automatically if their corresponding master entries are modified.
.P
When the DIT is distributed over several DSAs, each DSA must
contain the following:
.ML
.LI
All the entries that it masters.
.P
This is shown for \*LDSA1\*O in 
...\" Figure 12-11
Figure 1-7
by the circles denoting master information for the following objects:
.ML
.LI
\*L/C=DE\*O
.LI
\*L/C=DE/O=Smith Ltd\*O
.LI
\*L/C=DE/O=Smith Ltd/OU=AP1\*O
.LI
\*L/C=DE/O=Smith Ltd/OU=AP2/CN=M\*O
.LI
\*L/C=DE/O=Smith Ltd/OU=AP1/CN=Huber\*O
.LI
\*L/C=DE/O=Smith Ltd/OU=AP1/CN=Meter\*O
.LI
\*L/C=DE/O=Smith Ltd/OU=AP1/CN=Laser Printer\*O
.LE
.LI
If applicable, all shadow entries necessary to link the master entries
to the root.  
.P
This is shown in 
...\" Figure 12-11 
Figure 1-7
by the inclusion of the
shadow entry \*L/C=DE/O=Smith Ltd/OU=AP2\*O (with the name of the DSA that masters it, \*LDSA2\*O, in
parentheses) to specify the master entry \*L/C=DE/O=Smith Ltd/OU=AP2/CN=M\*O.
.LI
All direct children of master entries.  
.P
This is shown in 
...\" Figure 12-13 
Figure 1-9 
in the box containing \*LDSA1\*O. 
\*L/C=DE/O=Smith Ltd/OU=AP1\*O and \*L/C=DE/O=Smith Ltd/OU=AP2\*O
are direct children of \*LSmith Ltd\*O.
.LI
The shadows of the DSA entries that appear as \*LMaster Knowledge\*O
attributes in the shadows available in this DSA.  
.P
For example, in order
to return referrals or to perform chaining, the DSA must know the
appropriate DSAs.  The DSA's name must be kept as master, and all the
other DSAs are stored in this DSA as shadows.
.P
In 
...\" Figure 12-11, 
Figure 1-7,
\*LDSA1\*O retains its name as master and the name of
\*LDSA2\*O as shadow. \*LDSA2\*O holds its name also as master and
the name of \*LDSA1\*O as shadow.  If an administrator looks for
children of \*L/C=DE/O=Smith Ltd/OU=AP2\*O (on \*LDSA1\*O) and
does not restrict the request to \*L LOCAL SCOPE\*O, \*LDSA1\*O uses
the master
knowledge of \*L/C=DE/O=Smith Ltd/OU=AP2\*O to determine which DSA
needs to be contacted.  To contact this DSA, it needs to know that DSA's PSAP
address (which is guaranteed by the existence of a shadow entry of
\*LDSA2\*O).  This enables a DSA to take part in navigation through
chaining and referrals.
.P
(The DSA can also hold additional shadows for data
replication purposes; see section 1.4.1.)
.LE
.P
.ne 4.0i
.FG "Storage of Knowledge Information in GDS"
...\" .so gd/Pics/fig12.knowleginfo.pic
.P
.PS
.in +.3i
scale = 106.667
"\fH\s7CN=dsa\s0\fP"  at 353, 196
line   from 381, 192 \
	to 409, 158 
line   from 379, 192 \
	to 355, 158 
line   from 395, 219 \
	to 383, 199 
box  wid 6 ht 7 at 380, 196.5
line   from 530, 222 \
	to 598, 162 
line   from 603, 168 \
	to 591, 151 
line   from 604, 167 \
	to 614, 151 
line   from 592, 151 \
	to 613, 151 
line   from 603, 168 \
	to 591, 151 
line   from 592, 151 \
	to 613, 151 
line   from 592, 151 \
	to 613, 151 
line   from 603, 168 \
	to 591, 151 
line   from 603, 168 \
	to 591, 151 
line   from 592, 151 \
	to 613, 151 
line   from 604, 167 \
	to 614, 151 
box  wid 6 ht 7 at 603, 156.5
circle radius 3 at 32, 153
circle radius 3 at 133, 154
circle radius 3 at 230, 151
"\fH\s7CN=DSA1\s0\fP"  at 35, 142
"\fH\s7CN=DSA2\s0\fP"  at 95, 142
"\fH\s7CN=Huber\s0\fP"  at 153, 142
line   from 525, 221 \
	to 502, 160 
line   from 528, 222 \
	to 540, 160 
.ps 20
line   from 178, 263 \
	to 223, 226 
.ps 10
"\fH\s7O=Smith Ltd\s0\fP"  at 133, 266
"\fH\s7OU=AP2\s0\fP"  at 272, 218
"\fH\s7(DSA2)\s0\fP"  at 271, 206
line   from 229, 232 \
	to 239, 216 
line   from 217, 216 \
	to 238, 216 
line   from 228, 233 \
	to 216, 216 
line   from 228, 233 \
	to 216, 216 
line   from 217, 216 \
	to 238, 216 
line   from 217, 216 \
	to 238, 216 
line   from 228, 233 \
	to 216, 216 
line   from 228, 233 \
	to 216, 216 
line   from 217, 216 \
	to 238, 216 
box  wid 6 ht 7 at 228, 221.5
line   from 229, 232 \
	to 239, 216 
"\fH\s7CN=M\s0\fP"  at 604, 145
"\fH\s7(DSA1)\s0\fP"  at 608, 134
circle radius 3 at 541, 156
circle radius 3 at 503, 156
"\fH\s7CN=N\s0\fP"  at 504, 143
"\fH\s7Machine\s0\fP"  at 547, 133
"\fH\s7CN=Fax\s0\fP"  at 546, 143
box  wid 6 ht 7 at 397, 222.5
"\fH\s7OU=DI\s0\fP"  at 370, 223
"\fH\s7OU=AP2\s0\fP"  at 557, 225
line   from 522, 223 \
	to 454, 159 
circle radius 3 at 527, 224
circle radius 3 at 453, 155
box  wid 307 ht 239 at 160.5, 233.5
.ps 20
line   from 175, 292 \
	to 174, 269 
line   from 174, 325 \
	to 174, 300 
.ps 10
circle radius 3 at 175, 264
circle radius 3 at 175, 296
circle radius 3 at 175, 328
"\fH\s7root\s0\fP"  at 197, 329
"\fH\s7CN=DE\s0\fP"  at 202, 295
box  wid 6 ht 7 at 222, 55.5
"\fH\s7Legend:\s0\fP"  at 178, 71
"\fH\s7Master Information\s0\fP"  at 288, 73
circle radius 3 at 223, 70
box  wid 6 ht 7 at 222, 55.5
"\fH\s7Copy with Master Knowledge Information\s0\fP"  at 345, 56
"\fH\s7Mandatory Shadow (automatically generated)\s0\fP"  at 352, 32
"\fH\s7DSA1\s0\fP"  at 165, 103
"\fH\s7DSA2\s0\fP"  at 415, 104
line   from 225, 44 \
	to 235, 28 
line   from 213, 28 \
	to 234, 28 
line   from 224, 45 \
	to 212, 28 
line   from 224, 45 \
	to 212, 28 
line   from 213, 28 \
	to 234, 28 
line   from 213, 28 \
	to 234, 28 
line   from 224, 45 \
	to 212, 28 
line   from 224, 45 \
	to 212, 28 
line   from 225, 44 \
	to 235, 28 
line   from 213, 28 \
	to 234, 28 
box  wid 299 ht 241 at 478.5, 234.5
box  wid 632 ht 364 at 316, 182
box  wid 6 ht 7 at 352, 154.5
"\fH\s7CN=DSA2\s0\fP"  at 413, 143
circle radius 3 at 411, 155
"\fH\s7CN=DSA1\s0\fP"  at 356, 143
"\fH\s7(DSA1)\s0\fP"  at 401, 253
.ps 20
line   from 453, 292 \
	to 453, 267 
line   from 454, 324 \
	to 453, 300 
.ps 10
circle radius 3 at 454, 327
box  wid 6 ht 7 at 453, 263.5
box  wid 6 ht 7 at 453, 296.5
"\fH\s7(DSA 1)\s0\fP"  at 483, 282
"\fH\s7CN=DE\s0\fP"  at 486, 295
"\fH\s7O=Smith Ltd\s0\fP"  at 415, 263
"\fH\s7root\s0\fP"  at 480, 326
line   from 450, 260 \
	to 400, 226 
line   from 457, 260 \
	to 524, 226 
"\fH\s7CN=H\s0\fP"  at 463, 143
circle radius 3 at 62, 200
line   from 75, 221 \
	to 63, 203 
circle radius 3 at 78, 223
line   from 171, 264 \
	to 80, 225 
"\fH\s7CN=dsa\s0\fP"  at 36, 200
"\fH\s7OU=DI\s0\fP"  at 55, 224
circle radius 3 at 175, 223
.ps 20
line   from 174, 260 \
	to 174, 227 
.ps 10
"\fH\s7OU=API\s0\fP"  at 146, 222
box  wid 6 ht 7 at 92, 157.5
line   from 93, 167 \
	to 103, 151 
line   from 81, 151 \
	to 102, 151 
line   from 92, 168 \
	to 80, 151 
line   from 92, 168 \
	to 80, 151 
line   from 81, 151 \
	to 102, 151 
line   from 81, 151 \
	to 102, 151 
line   from 92, 168 \
	to 80, 151 
line   from 92, 168 \
	to 80, 151 
line   from 93, 167 \
	to 103, 151 
line   from 81, 151 \
	to 102, 151 
"\fH\s7CN=Meier\s0\fP"  at 176, 156
circle radius 3 at 174, 167
line   from 60, 197 \
	to 33, 156 
line   from 63, 198 \
	to 89, 164 
line   from 172, 220 \
	to 134, 158 
line   from 174, 219 \
	to 174, 171 
line   from 178, 221 \
	to 227, 154 
"\fH\s7CN=Laser Printer\s0\fP"  at 235, 141
"\fH\s7CN=M\s0\fP"  at 298, 141
circle radius 3 at 292, 151
.ps 20
line   from 231, 219 \
	to 289, 153 
.in -.3i
.PE
.iX "-]" "Knowledge Information" "modeling"
.iX "-]" "Directory Information Tree (DIT)" "distributing"
.iX "-]" "Directory Information Base (DIB)" "distributing"
.iX "-]" "shadows" "creating" 
.H 3 "Access Control"
.iX "-[" "attributes" "access control"
.iX "-[" "access control lists (ACLs)" "in GDS"
In addition to authentication (by means of name and password), access
protection is required for each object at attribute level.  A
telephone number, for example, is an attribute that, in general,
everybody is allowed to read.  However, attribute values such as
number of children, bank accounts, or salary groups are restricted
to a limited number of people.  In addition, even for attributes that everyone
is allowed to read, it is only acceptable for a few people to
have authorization to change the values.
.P
Because there can be many different attributes in the DIT, it is
too expensive to define a protection mechanism for each individual
attribute type.  Instead, the attributes are divided into three
classes:
.ML
.LI
Public
.LI
Standard
.LI
Sensitive
.LE
.P
.ne 10
Read and modify access rights can be defined for each of the three
classes.  The values for the \*LAccess-Control-List\*O (\*LACL\*O) attribute
for an entry specify which person has which type of
access to the individual attributes.  Each entry has an
\*LACL\*O attribute that has a single value.  This value is composed of a list
of
names associated with one of the three access classes \*LPUBLIC\*O,
\*LSTANDARD\*O, and \*LSENSITIVE\*O, and \*LREAD\*O and \*LMODIFY\*O access
rights; this provides a total
of five possible lists. (\*LREAD PUBLIC\*O is not necessary.) These lists
are used to control access to other attributes in the entry.  For
example, to modify the public attribute \*LTelephone-Number\*O you must
be on the \*LMODIFY PUBLIC\*O list in the ACL of the specific entry.
.P
The following figure shows the values of the ACL attribute. (The class of
authorization \*LREAD PUBLIC\*O does not need to be entered because, by definition,
\*LPUBLIC\*O attributes can be read by all users.)
.P
.ne 4.5i
.FG "Access Control using the ACL Attribute"
...\" .so gd/Pics/fig12.accesscontrol.pic
.P
.PS
.in +.3i
scale = 106.667
"\fH\s7Attribute Types\s0\fP"  at 52, 257
"\fH\s7Attribute Values\s0\fP"  at 54, 122
"\fH\s7MODIFY PUBLIC\s0\fP"  at 186, 138
"\fH\s7name of the authorized persons *\s0\fP"  at 348, 73
"\fH\s7name of the authorized persons *\s0\fP"  at 348, 122
"\fH\s7name of the authorized persons *\s0\fP"  at 348, 106
"\fH\s7name of the authorized persons *\s0\fP"  at 348, 89
"\fH\s7MODIFY SENSITIVE\s0\fP"  at 193, 74
"\fH\s7* for this object or the pertaining subtree\s0\fP"  at 348, 39
line   from 574, 238 \
	to 434, 159 
line   from 444, 238 \
	to 127, 159 
box  wid 306 ht 104 at 281, 107
"\fH\s7name of the authorized persons *\s0\fP"  at 348, 138
"\fH\s7MODIFY STANDARD\s0\fP"  at 195, 105
"\fH\s7\s0\fP"  at 490, 23
"\fH\s7READ SENSITIVE\s0\fP"  at 187, 90
"\fH\s7READ STANDARD\s0\fP"  at 189, 121
line   from 383, 377 \
	to 573, 273 
line   from 444, 273 \
	to 444, 238 
box  wid 462 ht 35 at 342, 255.5
"\fH\s7Access-Control-List\s0\fP"  at 503, 257
line   from 350, 273 \
	to 350, 238 
line   from 313, 273 \
	to 313, 238 
line   from 210, 273 \
	to 210, 238 
"\fH\s7...\s0\fP"  at 334, 259
"\fH\s7Street-Address\s0\fP"  at 263, 257
"\fH\s7User-Password\s0\fP"  at 399, 257
"\fH\s7Common-Name\s0\fP"  at 159, 257
box  wid 40 ht 32 at 363, 393
"\fH\s7Object\s0\fP"  at 364, 393
line   from 343, 377 \
	to 111, 273 
"\fH\s7(for example, Person)\s0\fP"  at 447, 394
box  wid 609 ht 446 at 304.5, 223
.in -.3i
.PE
.P
.ne 2.0i
The following specifications apply for assigning access rights:
.ML
.LI
The ACL of the default schema does not restrict access rights when GDS is
configured.  Every user, including the anonymous user (one without a DN and password), has read and write access to all attributes in the schema.  When an object is created without supplying the ACL attribute, the ACL attribute is inherited from the superior object.  For first-level objects (directly under root) the ACL attribute is inherited from the schema object.
.P
The administrator needs to remember that any anonymous user who has
access to the GDS administration programs can log on to a remote DSA.
However, all attributes that are not protected by an ACL
can be read and modified.  It is strongly recommended that
administrators protect objects by entering their DNs
in the ACLs of objects requiring some form of restricted
access.  Otherwise, an unauthorized user could change or destroy an
object not protected in this manner.
.LI
A master entry can only be created by the user who has write access to
the naming attribute of the parent node.  The user creates all
attributes of the entry and establishes which
objects can access these attributes in the \*LACL\*O attribute. 
.P
In Figure 1-9, \*LCN=new_object\*O can only
be created if the administrator logs on as \*L/C=us/O=osf/OU=sales/CN=admin\*O.
If no ACL is specified, the new object is assigned the \*LACL\*O attribute
of \*L/C=us/O=osf/OU=sales\*O; otherwise, it takes the ACL that the 
administrator specified for the operation.
.P
.ne 2.25i
.FG "Assigning ACLs for an Add Operation"
...\" .so gd/Pics/fig12.addacl3.pic
.P
.PS
scale = 106.667
"\fH\s7CN=new_object\s0\fP"  at 50, 20
"\fH\s7ACL of this object (for modify public: /C=us/O=osf/OU=sales/CN=admin)\s0\fP"  at 217, 53
.ps 20
line   from 3, 65 \
	to 3, 25 
line   from 4, 112 \
	to 3, 75 
line   from 4, 159 \
	to 4, 121 
circle radius 4 at 6, 164
circle radius 4 at 4, 20
.ps 10
"\fH\s7ACL: either from superior or a totally new ACL\s0\fP"  at 160, 4
"\fH\s7C=us\s0\fP"  at 28, 165
.ps 20
circle radius 4 at 5, 117
.ps 10
"\fH\s7O=osf\s0\fP"  at 30, 116
.ps 20
circle radius 4 at 4, 69
.ps 10
"\fH\s7OU=sales\s0\fP"  at 35, 68
.PE
.ps 12
.nL
.ne 10
.LI
\*OA master entry can only be deleted by users who have modify access to the
naming attribute of the entry to be deleted.
.P
In Figure 1-9, \*LCN=new_object\*O can only be deleted if the
administrator logs on as \*L/C=us/O=osf/OU=sales/CN=admin\*O.
.P
The object can only be
modified if the administrator logs on as
\*L/C=us/O=osf/OU=sales/CN=admin\*O.
.P
.LI
A shadow entry created by means of shadow handling (see 
...\" the chapter entitled ''Shadow Administration'') 
Chapter 10)
has the same \*LACL\*O attribute as
the corresponding master entry.  Therefore, such an entry can only be
modified and deleted by users who are also permitted to modify and delete the
master entry.
.LE
.iX "-]" "attributes" "access control"
.iX "-]" "access control lists (ACLs)" "in GDS"
.H 4 "Trusted DSA Tables"
The administrator can restrict authenticated access by specific DSAs
by creating and maintaining the Trusted DSA Table (TDT).  These
restrictions apply if a chained operation follows a bind
initiated by the intermediate DSA using the DCE authentication
mechanism.  Each table entry contains the DN of a DSA and permission
tags that define the type of access rights permitted for the DSA.
.P
Refer to section 3.7 in chapter 3, \*VDeveloping a Configuration
Plan\*O in this manual.
.H 3 "DCE Authentication"
.iX "Authentication" "DCE"
.iX "Global Directory Service" "DCE Authentication"
.iX "DCE Authentication in GDS"
In addition to simple authentication, GDS supports DCE Authentication
as a security method for accessing DSAs in the DCE environment.  DCE
authentication requires that users and the DSAs these users want to
access are registered in the DCE registry.  The extended attributes
feature of the DCE Registry is used for this purpose.
.P
.ne 10
The DCE rgy schema contains two GDS specific attributes (by default):
.VL 
.LI "\*LX500_DN\*O"
.nL
Present for principals representing GDS users and DSAs.  This attribute has to contain the DN of the principal for using the Directory Service.  The DN 
must be entered in Printable Form syntax 
(\*L/C=de/O=sni/OU=buba, OU=nm123/CN=meier\*O, for example).
.LI "\*LX500_DSA_Admin\*O"
.nL
Only necessary for the administrators principals.  This attribute has to contain the list of the names of all DSAs on which the administrator expects to create shadows.
.LE
.P
Users will have to logon to the DCE (for example, using
\*Ldce_login\*O) prior to using the DCE authentication in a GDS client
program.
.H 3 "The Directory User Agent Cache"
.iX "DUA cache" "about"
The Directory User Agent (DUA) cache is a process that stores a cache of
information obtained from DSAs.  One DUA cache runs on each client
machine and is used by all the users on that machine.  The DUA cache
contains copies of recently accessed object entries and information
about DSAs.  The user specifies which information is to be
cached.  It is also possible to bypass the DUA cache by obtaining
information directly from a DSA.  This is desirable, for example, if
the user wants to ensure that the information obtained is up-to-date.
.P
A cache process also runs on a client/server machine. It contains the
client address, the name of the local DSA, and the DSA's PSAP address
(PSAP addresses are described in Chapter 2), 
which is required to get GDS running.
.P
Unlike the DSA, the cache knows nothing about a schema or
tree structure.  Therefore, information without existing superiors can be 
added to the cache, and objects can be deleted while
subordinates still exist. 
.P
The cache does not handle ACL
attributes.  If an application reads data from a DSA and stores it
automatically in the cache, only attributes that are classified as
\*LPublic\*O are stored in the cache.
.P
The \*LCache Update\*O process updates replicated
information in a DUA cache.  It runs as required and then
terminates.  The \*LCache Update\*O process runs on GDS client and client/server machines.
.P
An administrator (or any user who has access to the GDS administration tools)
controls the information stored in the cache by logging on to the local
machine using the option in Mask 1 \*LLogon to the DUA cache\*O. 
(Masks enable a user to
enter input interactively in the GDS administration programs.  Masks
are described in detail in Chapters 8-11.) 
.P
.H 3 "Remote Administration"
.iX "Directory System Agents (DSAs)" "administration"
.iX "masks" "about"
The X.500 standard does not cover all aspects of Directory administration.
This means that each DSA
must be administered separately.  For maximum
flexibility, GDS provides remote administration.  This enables
administrators to log on to other DSAs and perform directory
operations from one workstation.  GDS enables remote administration of
objects, schema, copies, and subtrees.  
.P
The administrator remotely logs on to a DSA through the User
Identification mask (Mask 1). 
The administrator enters a DN that represents the administrator and a
password.  The DN must exist in the
directory tree and have modify access to any object (as defined in the
ACL of that object) the administrator wants to perform object,
schema, subtree, or shadow administration functions on. 
(However, modify access is only required if 
the administrator wants to change anything in the
DIT.) The next mask that is displayed, the Logon to a Specific DSA
mask (Mask 2), enables administrators to enter the name of a remote
DSA to which they want to be connected.
.H 3 "Tree Processing"
.iX "-[" "Directory Information Tree (DIT)" "structuring" 
The current standard defines only the insertion, deletion, and renaming of
end nodes (leaves).  In addition, GDS administration includes a series
of tree processing functions that can be used to restructure the DIT.
.P
These tree processing functions allow the user to save, append, move,
copy, and delete subtrees, to change the \*LMaster Knowledge\*O
attribute of all objects in a subtree, and also to modify a special
value of an existing attribute in a subtree.
.P
...\" Figure 12-16 
Figure 1-10
illustrates how tree processing functions could be used to to delete a subtree 
from one node and append it to another.
.P
.ne 4.75i
.FG "Moving a Subtree"
...\" .so gd/Pics/fig12.treeprocess.pic
.P
.PS
scale = 106.667
circle radius 3 at 78, 150
line   from 117, 179 \
	to 80, 154 
"\fH\s7root\s0\fP"  at 120, 193
circle radius 3 at 120, 181
circle radius 3 at 164, 150
"\fH\s7C=DE\s0\fP"  at 192, 150
"\fH\s7C=US\s0\fP"  at 55, 151
line   from 124, 180 \
	to 162, 153 
line   from 159, 107 \
	to 92, 67 
line   from 92, 61 \
	to 119, 27 
line   from 87, 61 \
	to 53, 25 
"\fH\s7CN=McMahon\s0\fP"  at 131, 4
"\fH\s7CN=Matsuda\s0\fP"  at 31, 5
circle radius 3 at 123, 22
circle radius 3 at 51, 22
"\fH\s7OU=Dep1\s0\fP"  at 57, 62
circle radius 3 at 90, 63
line   from 251, 60 \
	to 293, 25 
line   from 245, 60 \
	to 215, 26 
"\fH\s7OU=Dep2\s0\fP"  at 284, 62
circle radius 3 at 249, 62
"\fH\s7CN=Bauer\s0\fP"  at 303, 6
"\fH\s7CN=Garland\s0\fP"  at 211, 5
circle radius 3 at 294, 22
circle radius 3 at 213, 22
circle radius 3 at 164, 108
line   from 167, 108 \
	to 245, 65 
"\fH\s7O=Sales\s0\fP"  at 135, 110
.ps 20
line  dashed from 163, 145 \
	to 163, 112 
.ps 10
"\fH\s7O=Sales\s0\fP"  at 134, 359
line   from 166, 357 \
	to 244, 314 
line   from 208, 429 \
	to 246, 402 
"\fH\s7C=US\s0\fP"  at 139, 400
"\fH\s7C=DE\s0\fP"  at 276, 399
circle radius 3 at 248, 399
circle radius 3 at 204, 430
"\fH\s7root\s0\fP"  at 204, 442
line   from 201, 428 \
	to 164, 403 
circle radius 3 at 163, 357
line   from 162, 394 \
	to 162, 361 
circle radius 3 at 212, 271
circle radius 3 at 293, 271
"\fH\s7CN=Garland\s0\fP"  at 210, 254
"\fH\s7CN=Bauer\s0\fP"  at 302, 255
circle radius 3 at 248, 311
"\fH\s7OU=Dep2\s0\fP"  at 283, 311
line   from 244, 309 \
	to 214, 275 
line   from 250, 309 \
	to 292, 274 
circle radius 3 at 162, 399
circle radius 3 at 89, 312
"\fH\s7OU=Dep1\s0\fP"  at 56, 311
circle radius 3 at 50, 271
circle radius 3 at 122, 271
"\fH\s7CN=Matsuda\s0\fP"  at 30, 254
"\fH\s7CN=McMahon\s0\fP"  at 130, 253
line   from 86, 310 \
	to 52, 274 
line   from 91, 310 \
	to 118, 276 
line   from 158, 356 \
	to 91, 316 
.PE
.H 3 "Configurable Routing"
Configurable routing is an optional feature that does not
completely conform to the distributed operations model described
later in section 1.6.
Configurable routing provides a higher level of control of
distributed operations (for example, an administrator can configure a
DSA where chaining is not used).  Configurable routing is an advanced
feature of GDS that is generally only used in large, complex
configurations of the Directory Service. 
.P
Refer to Appendix J, \*VThe DSA Configuration File\*O, for detailed
information on how to configure routing.
.iX "-]" "X.500" "GDS extensions"
.H 2 "Schema"
.iX "-[" "schemas" "about"
.iX "schemas" "about"
The \*Edirectory schema\*O governs the structure of the directory tree.
It consists of a set of rules that defines the name structure, the
object classes, and the attribute types and their syntaxes.
The directory standard only describes the schema concept and not the
schema structure.  It does, however, make recommendations on the
attributes types and object classes that need to be present in the
directory.
.P
In GDS, the schema is stored as an object in the directory directly
under the root with the following \*Ldistinguished name : /CN=Schema\*O. 
A default schema is supplied to initialize a directory service system.
.P
The structure of directory information is governed by a set of rules called
a \*Eschema\*O.  A schema specifies rules for the following:
.P
.ML
.LI
The structure of the DIT
.LI
The contents of entries in terms of attributes
.LI
The syntax of attribute values and rules for comparing and matching them
.LE
.P
These rules are represented by attribute values of the schema.
.P
Each attribute in the schema is assigned a unique object identifier
and the syntax of its value.  In addition, the schema specifies the
mechanism for comparing attributes of this type with one
another.  Each entry in the DIT belongs to an object class governed by
the schema.  Object class definitions can be used to derive
subclasses, supporting the inheritance and refinement of the attribute
types defined for the superclass.
.iX "-]" "schemas" "about"
.iX "-[" "schemas" "structure"
.iX "objects" "defining subclasses"
.iX "structure rules" "about"
.P
The ability to define subclasses is a powerful feature of the
directory service.  Structure rules determine which object classes are
children and which object classes are parents in the DIT.  Therefore,
they define possible name forms.
.P
...\" Figure 12-17 
Figure 1-11
shows the relationship between schemas and the directory
information model.
.P
.ne 3.0i
.FG "Relationship Between Schemas and the DIT"
...\" .so gd/Pics/fig1.08.pic
.P
.PS
scale = 160
"\f(HB\s6\s0\fP"  at 350, 168
.ps 40
box  wid 361 ht 363 at 180.5, 181.5
line ->  from 72, 106 \
	to 72, 57 
line ->  from 73, 187 \
	to 73, 139 
box  wid 130 ht 32 at 75, 122
line ->  from 74, 266 \
	to 74, 219 
box  wid 130 ht 32 at 76, 41
.ps 10
"\f(HB\s6uses\s0\fP"  at 39, 77
"\f(HB\s6uses\s0\fP"  at 40, 246
"\f(HB\s6uses\s0\fP"  at 39, 158
"\f(HB\s6rules for\s0\fP"  at 181, 51
"\f(HB\s6rules for\s0\fP"  at 180, 131
"\f(HB\s6rules for\s0\fP"  at 180, 211
"\f(HB\s6rules for\s0\fP"  at 180, 290
"\f(HB\s9Definitions\s0\fP"  at 73, 344
"\f(HB\s9DIT Elements\s0\fP"  at 292, 344
"\f(HB\s7Values\s0\fP"  at 286, 41
"\f(HB\s7Attributes\s0\fP"  at 290, 122
"\f(HB\s7DIT\s0\fP"  at 281, 279
"\f(HB\s7Entries\s0\fP"  at 285, 200
.ps 40
ellipse wid 106 ht 48 at 287, 41
ellipse wid 106 ht 48 at 288, 122
ellipse wid 106 ht 48 at 286, 202
ellipse wid 106 ht 48 at 283, 281
line ->  from 141, 43 \
	to 231, 42 
line ->  from 141, 123 \
	to 231, 122 
line ->  from 140, 203 \
	to 230, 202 
line ->  from 138, 282 \
	to 228, 281 
box  wid 130 ht 32 at 75, 202
box  wid 130 ht 32 at 74, 283
.ps 10
"\f(HB\s7Attribute Syntax\s0\fP"  at 75, 43
"\f(HB\s7Attribute Type\s0\fP"  at 68, 123
"\f(HB\s7Object Class\s0\fP"  at 61, 203
"\f(HB\s7Structure Rules\s0\fP"  at 73, 283
.PE
.P
.H 3 "The GDS Standard Schema"
DCE includes a default or ``standard'' schema for GDS.  This is the
GDS proprietary interpretation of the X.500 schema.
.P
.ne 2.0i
The GDS standard schema includes the following tables which
define the structure of the DIT:
.ML
.LI 
Structure Rule Table (SRT)  
.LI 
Object Class Table (OCT)  
.LI 
Attribute Table (AT)  
.LE
.P
The directory standard defines a number of standard attribute types
and object classes.  For example, it defines the attribute types \*LCommon-Name\*O
and \*LDescription\*O, and the object classes \*LCountry\*O and \*LOrganizational-Person\*O.
Based on the standard rules, GDS applications may
enhance the schema with additional attribute types and object classes.
.iX "Directory Information Tree (DIT)" "relation to schemas (figure)"
.H 3 "The Structure Rule Table"
.iX "-[" "Structure Rule Table" "about"
The Structure Rule Table (SRT) defines the hierarchical
relationships that are permitted between objects and their RDNs. 
The SRT supplied with the GDS standard schema 
contains the entries shown in Table 1-2.
.P
.TB "SRT Entries (for DSAs)"
.TS H
center,box,tab(@);
lB | lB | lB | lB
lB | lB | lB | lB
lB | lB | lB | lB
c | c | l | l .
@Superior@Acronyms of@Acronym of
Rule@Rule@Naming@Structural
Number@Number@Attribute@Object Class
=
.TH
 1@0@CN@SCH
_
 2@0@C@C
_
 3@2@O@ORG
_
 4@3@OU@OU
_
 5@4@CN@ORP
_
 6@4@CN@ORR
_
 7@4@CN@APP
_
 8@4@CN@MDL
_
 9@4@CN, OU@ORP
_
10@7@CN@APE
_
11@7@CN@DSA
_
12@7@CN@MMS
_
13@7@CN@MTA
_
14@7@CN@MUA
_
15@7@CN@DNA
_
16@2@L@LOC
_
17@15@CN@REP
_
18@15@CN, STA@REP
.TE
.P
The SRT determines how the object classes are laid out in the DIT by
assigning rule numbers to each object class.  An object class's
Superior Rule Number specifies the object class directly above it in
the DIT.
.nL
.ne 20
.P
For example, the object class \*LOrganization\*O (abbreviated with the
acronym \*LORG\*O in the SRT), has a Superior Rule Number of 2, indicating
that it is located in the DIT beneath the object class \*LCountry\*O (\*LC\*O) which
has a Rule Number of 2. \*LOrganizational Unit\*O (\*LOU\*O) is located beneath
\*LOrganization\*O because it has a Superior Rule Number of 3, and so on.
.P
The SRT only contains structural object classes (that is, classes
forming branches in the DIT).  Other object classes (such as abstract
and alias classes) are not included.
.P
The SRT specifies the attribute or attributes used to name entries belonging to
each object class.  These attributes, called \*Enaming attributes\*O,
are used to define the RDN and therefore the DN of
directory entries.
.P
There are actually two SRTs defined for GDS, one for DSAs and a
slightly different one for the administration programs.  The SRT for
the GDS administration programs is a compressed version of the DSA
version and is updated to reflect any changes in the DSA schema.
Instead of having 17 Structure Rules, one for each naming attribute,
it has only 10.  Where naming attributes share the same Superior
Rule Number, the naming attributes are given the same rule number.
.P
...\" Figure 12-18 
Figure 1-12
shows the structure of the Directory Information Tree as
defined by the Structure Rule Tree of the
GDS standard schema for a DSA.  It corresponds to the SRT entries in Table
1-2.  Note that in Figure 1-12, 
the SRT contains two entries for \*LOrganizational-Person\*O 
that specify different sets of permitted naming attributes.
.P
.ne 6.25i
.FG "Structure of the DIT for GDS Administration Programs"
...\" .so gd/Pics/fig1.06c.pic
.P
.PS
scale = 106.667
#"\fH\s9The SRT contains two entries for Organizational Person and Residential Person\s0\fP"  at 302, 19
line ->  from 101, 344 \
	to 184, 227 
ellipse wid 104 ht 40 at 192, 205
"\fH\s7Organizational Role\s0\fP"  at 193, 204
.ps 20
line ->  from 361, 184 \
	to 336, 129 
line ->  from 347, 188 \
	to 214, 129 
line ->  from 335, 192 \
	to 89, 127 
.ps 10
"\fH\s7MHS-Message-Store\s0\fP"  at 71, 107
ellipse wid 104 ht 40 at 192, 109
ellipse wid 104 ht 40 at 71, 108
"\fH\s7MHS-Message-\s0\fP"  at 192, 115
"\fH\s7Transfer-Agent\s0\fP"  at 193, 105
ellipse wid 104 ht 40 at 320, 109
"\fH\s7MHS-User-Agent\s0\fP"  at 322, 109
"\fH\s7List\s0\fP"  at 523, 235
"\fH\s7MHS-Distribution-\s0\fP"  at 527, 248
ellipse wid 104 ht 40 at 525, 244
line ->  from 385, 182 \
	to 437, 130 
"\fH\s7DSA\s0\fP"  at 564, 110
ellipse wid 104 ht 40 at 563, 108
line ->  from 418, 191 \
	to 557, 129 
line ->  from 82, 344 \
	to 61, 266 
"\fH\s7Application-Process\s0\fP"  at 379, 204
ellipse wid 104 ht 40 at 376, 204
line ->  from 129, 350 \
	to 360, 223 
"\fH\s7Schema\s0\fP"  at 396, 508
"\fH\s7Locality\s0\fP"  at 294, 437
"\fH\s7Organizational-Unit\s0\fP"  at 94, 364
"\fH\s7Organization\s0\fP"  at 142, 437
"\fH\s7Country\s0\fP"  at 203, 509
"\fH\s7Root\s0\fP"  at 293, 577
line ->  from 222, 490 \
	to 291, 457 
line ->  from 319, 557 \
	to 392, 528 
line ->  from 140, 419 \
	to 92, 385 
line ->  from 202, 489 \
	to 153, 457 
line ->  from 262, 559 \
	to 224, 529 
ellipse wid 104 ht 40 at 390, 508
ellipse wid 104 ht 40 at 294, 574
ellipse wid 104 ht 40 at 294, 436
ellipse wid 104 ht 40 at 205, 509
ellipse wid 104 ht 40 at 141, 437
ellipse wid 104 ht 40 at 93, 364
"\fH\s7Application-Entity\s0\fP"  at 442, 110
ellipse wid 104 ht 40 at 441, 109
line ->  from 140, 355 \
	to 472, 249 
ellipse wid 120 ht 42 at 60, 245
"\fH\s7Organizational-Person\s0\fP"  at 61, 245
"\fH\s7Residential-Person\s0\fP"  at 427, 370
ellipse wid 104 ht 40 at 424, 371
line ->  from 322, 420 \
	to 399, 390 
#"\f(HB\s7NOTE:\s0\fP"  at 43, 19
#"\fH\s9that specify different sets of permitted naming attributes.\s0\fP"  at 233, 4
.PE
.P
The SRT for the standard schema used by the GDS administration programs is
shown in Table 1-3.
.P
.ne 30
.TB "SRT Entries (for GDS Administration Programs)"
.TS H
center,box,tab(@);
lB | lB | lB | lB
lB | lB | lB | lB
lB | lB | lB | lB
c | c | l | lw(1.5i).
@Superior@Acronyms of@Acronym of
Rule@Rule@Naming@Structural
Number@Number@Attribute@Object Class
=
.TH
 1@0@CN@SCH
_
 2@0@C@C
_
 3@2@O@ORG
_
 4@3@OU@OU
_
 5@4@CN@T{
ORP, APP, ORR, MDL
T}
_
 6@4@CN, OU@ORP
_
 7@5@CN@T{
DSA, APE, MMS, MTA, MUA, DNA
T}
_
 8@2@L@LOC
_
 9@8@CN@REP
_
10@8@CN, STA@REP
.TE
.P
...\" Figure 12-19 
Figure 1-13
shows the structure of the DIT as defined by the SRT of the GDS
standard schema for the GDS administration programs.  It corresponds
to the SRT entries in Table 1-3.  Note that in Figure 1-13, 
the SRT contains two entries for 
\*LOrganizational-Person\*O and \*LResidential-Person\*O 
that specify different sets of permitted naming attributes.
.P
.ne 6.25i
.FG "Structure of the DIT for Administration Programs"
...\" .so gd/Pics/fig12.admsrt.pic
.P
.PS
scale = 106.667
line ->  from 373, 253 \
	to 423, 167 
"\fH\s7SR=7\s0\fP"  at 427, 159
line ->  from 111, 342 \
	to 234, 282 
"\fH\s7SR=5\s0\fP"  at 251, 279
"\fH\s7(SR = structure rule number)\s0\fP"  at 448, 587
#"\fH\s9that specify different sets of permitted naming attributes.\s0\fP"  at 227, 4
#"\fH\s9The SRT contains two entries for Organizational Person and Residential Person\s0\fP"  at 298, 16
"\fH\s7SR=10\s0\fP"  at 525, 446
"\fH\s7SR=9\s0\fP"  at 480, 381
"\fH\s7Residential Person\s0\fP"  at 478, 421
line ->  from 340, 427 \
	to 423, 421 
ellipse wid 104 ht 40 at 475, 421
"\fH\s7SR=8\s0\fP"  at 348, 451
"\fH\s7SR=6\s0\fP"  at 110, 236
line ->  from 90, 340 \
	to 60, 233 
ellipse wid 120 ht 42 at 60, 211
"\fH\s7Organizational Person\s0\fP"  at 61, 211
"\fH\s7DSA\s0\fP"  at 402, 74
ellipse wid 104 ht 40 at 401, 72
ellipse wid 104 ht 40 at 468, 128
"\fH\s7MHS-User-Agent\s0\fP"  at 470, 128
ellipse wid 104 ht 40 at 365, 294
"\fH\s7MHS-Distribution-\s0\fP"  at 367, 298
"\fH\s7List\s0\fP"  at 363, 285
"\fH\s7Application Process\s0\fP"  at 330, 264
ellipse wid 104 ht 40 at 327, 264
ellipse wid 120 ht 42 at 247, 209
"\fH\s7Organizational Person\s0\fP"  at 248, 209
ellipse wid 104 ht 40 at 284, 238
"\fH\s7Organizational Role\s0\fP"  at 285, 237
ellipse wid 104 ht 40 at 508, 162
"\fH\s7MHS-Message-\s0\fP"  at 508, 168
"\fH\s7Transfer-Agent\s0\fP"  at 509, 158
"\fH\s7Application Entity\s0\fP"  at 440, 101
ellipse wid 104 ht 40 at 439, 100
ellipse wid 116 ht 42 at 549, 197
"\fH\s7MHS-Message-Store\s0\fP"  at 549, 198
"\fH\s7Schema\s0\fP"  at 392, 505
"\fH\s7Locality\s0\fP"  at 290, 434
"\fH\s7Organizational Unit\s0\fP"  at 90, 361
"\fH\s7Organization\s0\fP"  at 138, 434
"\fH\s7Country\s0\fP"  at 199, 506
"\fH\s7Root\s0\fP"  at 289, 574
line ->  from 218, 487 \
	to 287, 454 
line ->  from 315, 554 \
	to 388, 525 
line ->  from 136, 416 \
	to 88, 382 
line ->  from 198, 486 \
	to 149, 454 
line ->  from 258, 556 \
	to 220, 526 
ellipse wid 104 ht 40 at 386, 505
ellipse wid 104 ht 40 at 290, 571
ellipse wid 104 ht 40 at 290, 433
ellipse wid 104 ht 40 at 201, 506
ellipse wid 104 ht 40 at 137, 434
ellipse wid 104 ht 40 at 89, 361
"\fH\s7Residential Person\s0\fP"  at 423, 367
ellipse wid 104 ht 40 at 420, 368
line ->  from 318, 417 \
	to 395, 387 
#"\f(HB\s7NOTE:\s0\fP"  at 39, 16
"\fH\s7SR=0\s0\fP"  at 350, 587
"\fH\s7SR=1\s0\fP"  at 445, 522
"\fH\s7SR=2\s0\fP"  at 259, 524
"\fH\s7SR=3\s0\fP"  at 193, 453
"\fH\s7SR=4\s0\fP"  at 140, 384
.PE
.P
An administrator uses the structure rules to determine the name
structure of an object entry so that the DN of the entry
can be entered in administration program masks.  For example, in 
...\" Figure 12-20, 
Figure 1-14,
the name structure of the following DSA object entry 
is 02-03-04-05-07:
.iS
\*L/C=DE/O=Smith Ltd/OU=AP2/CN=ApplProc-DSA/CN=DSA1\*O 
.iE
Starting
from Structure Rule 7 (the Structure Rule for DSA), it is easier to
work backwards to successive superior rules to determine the correct
name structure.  Chapter 8 describes how an administrator uses
these rules in the administration program to enter object entries into
the directory.
.P
.ne 4.25i
.FG "Determining the Name Structure of a DSA Object Entry"
...\" .so gd/Pics/fig12.srtruledsa.pic
.P
.PS
scale = 106.667
line ->  from 212, 149 \
	to 212, 135 \
	to 5, 135 \
	to 5, 156 \
	to 21, 156 
"\fH\s7LOC\s0\fP"  at 212, 125
"\fH\s7L\s0\fP"  at 141, 124
"\fH\s78\s0\fP"  at 34, 125
"\fH\s72\s0\fP"  at 90, 125
"\fH\s710\s0\fP"  at 34, 77
"\fH\s78\s0\fP"  at 90, 77
"\fH\s7CN,STA\s0\fP"  at 156, 76
"\fH\s7REP\s0\fP"  at 212, 76
"\fH\s7REP\s0\fP"  at 212, 100
"\fH\s7CN\s0\fP"  at 145, 100
"\fH\s79\s0\fP"  at 34, 101
"\fH\s78\s0\fP"  at 90, 101
line ->  from 388, 33 \
	to 446, 125 
"\fI\s7/C=DE/O=Smith Ltd/OU=AP2/CN=ApplProc-DSA/CN=DSA1\s0\fP"  at 450, 3
line ->  from 212, 167 \
	to 212, 173 \
	to 446, 173 \
	to 446, 145 
"\f(HB\s702-03-04-05-07\s0\fP"  at 486, 133
box  wid 100 ht 20 at 484, 135
"\fH\s75\s0\fP"  at 90, 157
"\fH\s74\s0\fP"  at 90, 205
"\fH\s73\s0\fP"  at 90, 229
"\fH\s72\s0\fP"  at 90, 253
"\f(HB\s7DSA\s0\fP"  at 214, 157
"\fH\s7,APE,MMS,MTA,MUA\s0\fP"  at 283, 157
"\f(HB\s77\s0\fP"  at 34, 157
"\f(HB\s75\s0\fP"  at 34, 205
"\f(HB\s74\s0\fP"  at 34, 229
"\f(HB\s73\s0\fP"  at 34, 253
"\f(HB\s72\s0\fP"  at 34, 277
"\fI\s7Rule #\s0\fP"  at 30, 325
"\fI\s7Rule #\s0\fP"  at 83, 324
"\fI\s7Superior\s0\fP"  at 87, 334
"\fI\s7Attribute\s0\fP"  at 145, 323
"\fI\s7For Naming\s0\fP"  at 153, 334
"\fI\s7Acronym of Structural\s0\fP"  at 246, 335
"\fI\s7Object Class\s0\fP"  at 221, 324
"\fH\s7ORG\s0\fP"  at 213, 252
"\fH\s7O\s0\fP"  at 142, 253
"\fH\s7ORP,APP,ORR,MDL\s0\fP"  at 249, 205
"\fH\s7CN\s0\fP"  at 145, 205
"\fH\s7ORP\s0\fP"  at 212, 180
"\fH\s76\s0\fP"  at 34, 181
"\fH\s74\s0\fP"  at 90, 181
"\fH\s7CN.OU\s0\fP"  at 154, 181
"\fH\s7CN\s0\fP"  at 145, 156
"\fH\s7OU\s0\fP"  at 209, 228
"\fH\s7OU\s0\fP"  at 145, 229
"\fH\s7C\s0\fP"  at 206, 276
"\fH\s7C\s0\fP"  at 142, 276
"\fH\s70\s0\fP"  at 90, 277
"\fH\s7SCH\s0\fP"  at 212, 300
"\fH\s7CN\s0\fP"  at 145, 300
"\fH\s71\s0\fP"  at 34, 301
"\fH\s70\s0\fP"  at 90, 301
"\fI\s7Acronym \s0\fP"  at 148, 345
circle radius 12 at 34, 157
circle radius 12 at 90, 157
circle radius 12 at 34, 205
circle radius 12 at 34, 229
circle radius 12 at 34, 253
circle radius 12 at 34, 277
box  wid 32 ht 18 at 212, 158
line ->  from 46, 157 \
	to 80, 157 
line ->  from 82, 167 \
	to 42, 197 
circle radius 12 at 90, 205
circle radius 12 at 90, 229
circle radius 12 at 90, 253
line ->  from 46, 205 \
	to 78, 205 
line ->  from 78, 211 \
	to 46, 225 
line ->  from 48, 229 \
	to 78, 229 
line ->  from 78, 233 \
	to 46, 249 
line ->  from 46, 253 \
	to 78, 253 
line ->  from 80, 257 \
	to 46, 273 
"\f(HB\s7Structure Rule Table for GDS Administration Programs\s0\fP"  at 160, 381
line   from 0, 313 \
	to 342, 313 
line ->  from 212, 145 \
	to 212, 145 
"\f(HB\s7Name structure of DSA object entry:\s0\fP"  at 386, 19
box  wid 342 ht 311 at 171, 203.5
line   from 186, 359 \
	to 186, 48 
line   from 116, 359 \
	to 116, 48 
line   from 56, 359 \
	to 56, 49 
.PE
.iX "-]" "Structure Rule Table" "about"
.H 3 "The Object Class Table" 
.iX "-[" "Object Class Table" "about"
The object classes that make up the GDS standard schema are defined in
the Object Class Table (OCT), which describes 
each object class, including its mandatory
and optional attributes and the inheritance of the attributes from
other object classes.  Table 1-4 contains a partial listing of the
OCT (refer to 
...\" \*LAppendix F\*O 
Appendix B
for a complete listing of the OCT for
the GDS standard schema).  Each column contains information about an
object class entry in the schema.
.P
.ne 30
.TB "OCT Entries"
.ps 9
.vs 12
.in -.5i
.TS H
center,box,tab(@);
cB s s | lB | lB | lB | lB | lB | lB
lB | lB | lB | lB | lB | lB | lB | lB | lB
lB | lB | lB | lB | lB | lB | lB | lB | lB
l | l | l | c | l | l | n | l | l.
Object Class@@Super-@@File@Mandatory@Optional
_@_@_
Acronym@Name@Kind@Aux.@class@OID@No.@Attributes@Attributes
=
.TH
TOP@Top@Abstract@-@None@85.6.0@-1@OCL@None
_
GTP@T{
GDS-Top
T}@Abstract@-@TOP@None@-1@None@ACL MK
_
SCH@Schema@Structural@-@GTP@T{
43.12.2.1107.1.3.6.0
T}@0@CN@T{
TST SRT OCT AT
T}
_
ALI@Alias@Alias@-@TOP@85.6.1@-1@AON@None
_
C@Country@Structural@-@GTP@85.6.2@1@C@T{
DSC SG CDC CDR
T}
_
LOC@Locality@Structural@-@GTP@85.6.3@4@None@T{
DSC L SPN STA SEA SG CDC CDR
T}
_
ORG@Organization@Structural@-@GTP@85.6.4@1@O@T{
DSC L SPN STA
PDO PA PC POB
FTN IIN TN TTI
TXN X1A PDM DI
RA SEA UP BC
SG CDC CDR
T}
.TE
.in
.ps 12
.vs 14
.nS note
All these object identifiers stem from the root \*L{joint-iso-ccitt(2)
ds(5) objectClass(6)}\*O.
.nE
.P
Column 2, Acronyms of Super Classes, provides the class from which an
object class inherits its attributes.  Using the information in Column
2, it is possible to derive a graphical representation of the
inheritance properties of object classes in the DIT, as shown in 
...\" Figure 12-18.
Figure 1-12.
.P
The object class, \*LTop\*O, is the root of the tree with \*LAlias\*O and \*LGDS-Top\*O
as the main branches. \*LTop\*O contains the attribute type \*LObject-Class\*O, 
which is inherited by all the other object classes.
.P
.iX "Structure Rule Table" "compared to OCT"
.iX "Object Class Table" "compared to SRT"
Do not confuse the information in the OCT with that presented in the
SRT.  There is no direct relationship between the relative location of
branches and leaves in the DIT structure and the inheritance
properties of classes with their superclasses and subclasses.
.P
.ne 10
For example, when a directory service request such as a \*Lsearch\*O operation
is made by a directory user, the SRT is used by the directory
service to indicate its position in the DIT.  The directory service
uses the information defined in the SRT to traverse the tree so that
the requested object can be located in the directory.  
...\" Figure 12-18 
Figure 1-12
shows the object class 
\*LOrganization\*O located beneath \*LCountry\*O in the DIT.
.P
On the other hand, the OCT defines, among other things, the
attributes of an object class along with its inherited attributes from
its superclasses.  The superclasses, in turn, inherit the attributes
from their superclasses, and so on until the root \*LTop\*O is reached (from
which all classes derive their attributes). 
...\" Figure 12-21 
Figure 1-15
shows the
object class \*LOrganization\*O as a subclass of \*LGDS-Top\*O.  As such it
inherits its attributes from \*LGDS-TOP\*O, which in turn inherits them from its
superclass, \*LTop\*O.  \*LGDS-TOP\*O is an \*Eunregistered object class\*O 
that is proprietary to GDS.  As such it does not have an object ID and does not 
appear in any of the administration masks.  
The ``M'' in parenthesis indicates a mandatory attribute.
.P
.ne 4.75i
.FG "Partial Representation of the Object Class Table"
...\" .so gd/Pics/fig1.07.pic
.P
.PS
scale = 160
.ps 20
line   from 93, 623 \
	to 164, 623 
.ps 40
box  wid 132 ht 16 at 69, 591
.ps 140
line   from 59, 607 \
	to 60, 598 
.ps 40
ellipse wid 62 ht 34 at 62, 624
.ps 10
"\fH\s5Aliased-Object_Name (M)\s0\fP"  at 71, 592
"\f(HB\s7Alias\s0\fP"  at 61, 623
.ps 20
line   from 244, 580 \
	to 355, 444 
line   from 215, 579 \
	to 194, 446 
line   from 188, 583 \
	to 118, 496 
.ps 10
"\fH\s5Object-Class (M)\s0\fP"  at 289, 666
"\f(HB\s7GDS-Top\s0\fP"  at 222, 597
"\f(HB\s7Top\s0\fP"  at 220, 627
.ps 40
ellipse wid 120 ht 66 at 222, 611
box  wid 120 ht 41 at 382, 572.5
.ps 10
"\fH\s5Access-Control-List\s0\fP"  at 380, 564
"\fH\s5Master Knowledge\s0\fP"  at 371, 580
.ps 140
line   from 280, 604 \
	to 322, 577 
.ps 40
box  wid 90 ht 17 at 288, 664.5
.ps 140
line   from 243, 665 \
	to 227, 645 
.ps 40
line   from 161, 612 \
	to 281, 612 
.ps 10
"\fH\s5Organization-Name (M)\s0\fP"  at 345, 382
"\fH\s5CDS-Cell\s0\fP"  at 311, 351
.ps 40
box  wid 147 ht 139 at 194.5, 339.5
ellipse wid 60 ht 28 at 92, 488
ellipse wid 58 ht 28 at 189, 431
ellipse wid 86 ht 32 at 362, 427
.ps 140
line   from 358, 411 \
	to 359, 397 
.ps 10
"\fH\s5X121-Address\s0\fP"  at 324, 14
"\fH\s5Street_Address\s0\fP"  at 325, 95
"\fH\s5See-Also\s0\fP"  at 311, 127
"\fH\s5Search-Guide\s0\fP"  at 320, 143
"\fH\s5Registered-Address\s0\fP"  at 336, 159
"\fH\s5Preferred-Delivery-Method\s0\fP"  at 354, 175
"\fH\s5Post-Office-Box\s0\fP"  at 330, 190
"\fH\s5Postal-Address\s0\fP"  at 326, 222
"\fH\s5Postal-Code\s0\fP"  at 319, 207
"\fH\s5Locality-Name\s0\fP"  at 323, 255
"\fH\s5Description\s0\fP"  at 315, 319
"\fH\s5CDS-Replica\s0\fP"  at 319, 335
"\fH\s5Business-Category\s0\fP"  at 333, 367
"\f(HB\s6Country\s0\fP"  at 91, 486
"\f(HB\s6Locality\s0\fP"  at 189, 431
"\fH\s5Street_Address\s0\fP"  at 169, 286
"\fH\s5Search-Guide\s0\fP"  at 165, 333
"\fH\s5CDS-Replica\s0\fP"  at 164, 366
"\fH\s5Description\s0\fP"  at 158, 397
"\fH\s5CDS-Cell\s0\fP"  at 156, 381
.ps 140
line   from 91, 475 \
	to 91, 460 
line   from 189, 418 \
	to 189, 409 
.ps 10
"\f(HB\s6Organization\s0\fP"  at 361, 427
"\f(HB\s6\s0\fP"  at 370, 406
.ps 40
box  wid 108 ht 95 at 54, 414.5
.ps 10
"\fH\s5Country-Name (M)\s0\fP"  at 59, 449
"\fH\s5Search-Guide\s0\fP"  at 44, 383
"\fH\s5Description\s0\fP"  at 38, 398
"\fH\s5CDS-Replica\s0\fP"  at 43, 416
"\fH\s5CDS-Cell\s0\fP"  at 35, 432
"\fH\s5State-or-Prov_Name\s0\fP"  at 185, 301
"\fH\s5See-Also\s0\fP"  at 155, 318
"\fH\s5Locality-Name\s0\fP"  at 167, 349
.ps 40
box  wid 157 ht 396 at 357.5, 198
.ps 10
"\fH\s5User-Password\s0\fP"  at 326, 30
box  wid 4 ht 1 at 321, 300.5
"\fH\s5Dest-Indicator\s0\fP"  at 324, 302
"\fH\s5Facsimile-Phone-Nbr\s0\fP"  at 340, 286
"\fH\s5Internat-ISDN-Nbr\s0\fP"  at 336, 270
"\fH\s5Phys.-Deliv-Off-Name\s0\fP"  at 345, 238
"\fH\s5State-or-Prov_Name\s0\fP"  at 341, 111
"\fH\s5Phone-Nbr\s0\fP"  at 316, 78
"\fH\s5Telex-NBR\s0\fP"  at 316, 63
"\fH\s5TTX-Term-Ident\s0\fP"  at 327, 46
.PE
.P
.iX "object identifier" "Object Class Table"
The OCT also contains the unique object ID (OID) of each class in
the DIT except \*LGDS-TOP\*O, which has none.  OIDs are described in Section 1.1.4.
Table 1-5 shows some examples of OIDs for directory classes as defined in the 
X.500 standard.
.P
.ne 20
.TB "Object Identifiers for Selected Directory Classes"
.TS H
center,box,tab(#);
lB | lB
l | l.
Object Class Type#Object Identifier
=
.TH
\*LAlias\*O#85.6.1
_
\*LApplication-Entity\*O#85.6.12
_
\*LApplication-Process\*O#85.6.11
_
\*LCountry\*O#85.6.2
_
\*LDevice\*O#85.6.14
_
\*LDSA\*O#85.6.13
_
\*LGroup-of-Names\*O#85.6.9
_
\*LLocality\*O#85.6.3
_
\*LOrganization\*O#85.6.4
_
\*LOrganizational-Person\*O#85.6.7
_
\*LOrganizational-Role\*O#85.6.8
_
\*LOrganizational-Unit\*O#85.6.5
_
\*LPerson\*O#85.6.6
_
\*LResidential-Person\*O#85.6.10
_
\*LTop\*O#85.6.0
.TE
.P
.nS note
All these object identifiers stem from the root \*L{joint-iso-ccitt(2)
ds(5) objectClass(6)}\*O.  To enable more efficient transmission over a communications line, the first two subidentifiers, \*L2\*O and
\*L5\*O, are coded together which results in one subidentifier,
\*L85\*O.
.nE
.H 4 "Object Class Types"
Object classes in the OCT are divided into four categories:
.ML
.LI
An \*Eabstract\*O object class provides basic relationships
on subclass object classes, but has no entries itself.
Typical examples of these subclasses are 
\*LTop\*O, \*LGDS-Top\*O, or \*LPerson\*O.
.nL
.ne 10
.LI
An \*Ealias\*O object class indicates that an entry is an
alias entry.  In the GDS implementation, there is only one alias object class,
which is the object class \*LAlias\*O.
.LI
A \*Estructural\*O object class is defined to be used in the structural
specification of the DIT. 
.P
Only a structural object class can be
referenced in the SRT.  For example, \*LOrganization\*O is a structural
object class, while its superclasses \*LGDS-Top\*O and \*LTop\*O are
not.  The third entry in Table 1-3 references \*LOrganization\*O as
a structural object class by the acronym \*LORG\*O, however, the object
class \*LTop\*O with the acronym \*LTOP\*O is not referenced in any
entry of the table.
.LI
An \*Eauxiliary\*O object class provides attributes that 
are not included in a structural object class.
.LE
.P
An object entry belongs to exactly one structural object
class.  For example, an object, whose distinguished name is
ruled by the fifth entry of the SRT in Table 1-3 can belong to only one
of the structural object classes \*LOrganizational-Person\*O (\*LORP\*O),
\*LApplication Process\*O (\*LAPP\*O), \*LOrganizational Role\*O
(\*LORR\*O) or \*LMHS Distribution List\*O (\*LMDL\*O). 
.P
An object that belongs to an object class also belongs to all its
superclasses.  Therefore, an object of object class \*LOrganization\*O
belongs at least to the abstract object classes \*LOrganization\*O,
\*LGDS-Top\*O and \*LTop\*O.  This is reflected by the values of its
object class attribute, which are the object identifiers \*L85.6.4\*O
for \*LOrganization\*O and \*L85.6.0\*O for \*LTop\*O. \*LGDS-Top\*O
as a proprietary object class has no object identifier and is not
among the values of the object class attribute.
.P
As described in Section 1.6.4.2, object classes list the attributes
that may be assigned to objects.  Some applications of the
directory may need to specify object attributes for objects that are not listed 
in the structural object class or its superclasses.  These applications can define 
auxiliary object classes, which list these attributes.
.P
For example, message handling systems use the auxiliary class
\*LMHS-User\*O to specify a package of message handling attributes for
objects of different object classes.  In Table 1-4, \*LMHS-User\*O is
assigned to the structural object class \*LOrganization\*O as an
auxiliary object class.  It could be assigned to other structural
object classes (such as \*LLocality\*O) also.
.P
.ne 10
Therefore, in addition to being a member of a structural object class, an
entry can be a member of one or more Auxiliary object classes.  The
acronyms of the Auxiliary object classes permitted for the entries of
a particular structural object class are listed in the OCT entry of
the structural object class.  Hence in our example an
\*LOrganization\*O may be an \*LMHS User\*O or not, as indicated by
its object class attribute.  If the object class attribute has a value
\*L86.5.1.3\*O in addition to the values mentioned above, the organization is
also an \*LMHS User\*O and the message handling attributes may be
assigned to it.
.P
The file numbers in the OCT entries tell the DSA which objects it has
to store in the same C-ISAM files.  Table 1-4 shows, that
\*LCountries\*O and \*LOrganizations\*O are stored in the same file,
while \*LLocalities\*O are stored in a different file.  The file
number is ignored for object classes that are not structural.  When
object classes share most of their attributes, they should share the
file number to increase performance.  When many of the attributes
differ in the mandatory and optional attribute sets (described in 
Section 1.6.4.2), the object classes should not share the file
number in order to save space on disk.
.H 4 "Mandatory and Optional Attributes"
.iX "attributes" "Object Class Table"
Another important feature of the OCT is the distinction made between
mandatory and optional attributes for each object class.
This
distinction is based on definitions in the X.500 standards documents.
These documents (Recommendations X.520 and X.521) recommend selected
object classes and associated attribute types using ASN.1 notation.
Each object class has one or more mandatory attributes associated with
it, to be used by the implementors who want to comply with the X.500 standards
recommendations.  Optional attributes are also defined.
.nL
.ne 20
.P
For example, the class \*LCountry\*O must contain the mandatory attribute
\*LCountry Name\*O (or \*LCountry-Name\*O as defined in the GDS standard schema),
and can contain the optional attributes \*LDescription\*O and
\*LSearch-Guide\*O.  The DCE implementation also adds two more
attributes, \*LCDS-Cell\*O and \*LCDS-Replica\*O, to incorporate other aspects of
the DCE environment that are implementation-specific.
.P
.ne 10
\*LCountry\*O is assigned the OID 2.5.6.2 (85.6.2). This
number distinguishes it from the other object classes defined by the
standard.  The \*LTop\*O superclass is designated as 2.5.6.0 (85.6.0).  The
first three numbers, 2.5.6 (85.6), identify the object class as a
member of a discrete set of object classes defined by X.500.  The last
number in the OID distinguishes objects within that
discrete set. \*LAlias\*O, a subclass of \*LTop\*O, is assigned the number
2.5.6.1 (85.6.1). \*LCountry\*O is assigned the number 2.5.6.2 (85.6.2),
and so on. \*LGDS-Top\*O has no OID, because it is
implementation-specific and as such, is not identified by the standard.
.iX "-]" "Object Class Table" "about"
.H 3 "The Attribute Table"
.iX "-[" "Attribute Table" "about"
The Attribute Table (AT) defines the attributes that constitute the
entries in the GDS standard schema. (Refer to 
...\" the \*(Ag Module 3 ("Directory Service") 
the \*(Ac
for a complete listing of the AT.) The OIDs range from
85.4.0 to 85.4.40, as defined by the X.500 standard, 86.5.2.0
to 86.5.2.10, as defined by the X.400 standard, and include additional
OIDs for GDS-specific attributes.
.P
Table 1-6 shows a partial listing of the AT for the GDS Standard
Schema.
.P
.ne 30
.TB "AT Entries"
.ps 9
.vs 12
.TS H
center,box,tab(@);
cB s | lB | lB | lB | lB | lB | lB | lB | lB
1B  1B | lB | lB | lB | lB | lB | lB | lB | lB
lB | lB | lB | lB | lB | lB | lB | lB | lB | lB
lB | lB | lB | lB | lB | lB | lB | lB | lB | lB
l2w | l2w | l2w | n2w | n2w | n2w | n2w | n2w | n2w | n2w.
Attribute@@@@Max.@@@@@@
_@_
Acr.@Name@@Lower@Upper@No. of@@Phon.@Access@Index
@@OID@Bound@Bound@Val.@Syntax@Flag@Class@Level
=
.TH
OCL@Object-Class@85.4.0@1@28@0@2@0@0@0
_
AON@Aliased-
@Object-Name@85.4.1@1@1024@1@1@0@0@0
_
KNI@Knowledge-
@Information@85.4.2@1@1024@0@4@0@0@0
_
CN@Common-
@Name@85.4.3@1@64@2@4@1@0@1
_
SN@Surname@85.4.4@1@64@2@4@1@0@0
_
SER@Serial-Number@85.4.5@1@64@2@5@0@0@0
_
C@Country-Name@85.4.6@2@2@1@1010@1@0@1
_
L@Locality-Name@85.4.7@1@128@2@4@1@0@1
_
SPN@State-or-
@Province-
@Name@85.4.8@1@128@2@4@1@0@0
.TE
.in
.ps 12
.vs 14
.P
The \*LLower Bound\*O and \*LUpper Bound\*O columns specify the
maximum or minimum number of bytes (or octets) that the value of an
attribute can contain.  In the \*LMaximum Number of Values\*O column,
the schema puts constraints on the number of
values that an attribute can contain.  A 0 (zero) in this column means that there is 
no restriction on the number of values.
.P
The \*LSyntax\*O column describes how the data is represented and how it relates to
\*LASN.1\*O syntax definitions for attributes.  The \*LCommon-Name\*O attribute is
defined as case-insensitive.  The size of the string ranges from 1 to the
upperbound value defined by the schema in the \*LUpper Bound\*O column for the
\*LCommon-Name\*O attribute
(in this case, 64 bytes or octets).
.P 
.nSnote
The \*LCommon-Name\*O attribute is assigned the number 3 as
standard.  This corresponds to the 3 in the OID 85.4.3.
.nE
.P
As mentioned previously for object classes, OID values
specified in the AT are defined as constants in the GDS header files.
.P
An \*LAccess\*O class is assigned for each attribute 
(\*LPublic(0)\*O, \*LStandard(1)\*O, \*LSensitive(2)\*O). 
An administrator can change this value
for any attribute using the schema administration 
operations described in Chapter 9.
.P
The other columns refer to the maximum number of permitted
values, phonetic matching, and index level, described in Chapter 9.
...\" 
...\" the chapter entitled ''Schema Administration'' later in this book.
.iX "-]" "Attribute Table" "about"
.H 3 "Syntaxes"
.iX "-[" "attributes" "syntax"
An attribute syntax defines the syntactic rules for the attribute
values for each attribute type in the directory.  This syntax includes
the data type in \*LASN.1\*O and, generally, one or more of the matching rules
used to compare values.
.P
As shown previously, the AT has a \*LSyntax\*O column.
This column contains a number that corresponds
to a particular syntax, which describes how that data value is
represented for a specific attribute type.  In Table 1-6, for example,
the \*LSyntax\*O column gives the value 2
for the \*LObject-Class\*O attribute, indicating that the syntax type is
Object Identifier. (Refer to the \*(Dg for more information about syntaxes).
.P
Refer to Chapter 9 for a description of the syntaxes that can be applied.
.iX "-]" "attributes" "syntax"
.iX "-]" "schemas" "structure"
.iX "-]" "Directory Information Tree (DIT)" "structuring"
.H 2 "GDS as a Distributed Service" 
.iX "replication" "about (GDS)"
.iX "Directory System Agents (DSAs)" "about"
.iX "Directory User Agents (DUA)"
.iX "Directory Access Protocol (DAP)"
.iX "Directory System Protocol (DSP)" "about"
GDS has two basic functions in a DCE cell.
.ML
.LI
It provides a high-level, worldwide directory service
by tying together independent DCE cells
.LI
It is used as an
additional directory service to CDS for storing object names and
attributes in a central place
.LE
.P
The GDS database contains information that can be distributed over
several GDS servers.  In addition, copies of information can be stored
in multiple GDS servers, and the information can be cached locally.  The
unit of replication in GDS is the entry (whole subtrees can also be replicated).
.P
The information belonging to the DIB is shared between
several \*EDirectory Service Agents\*O (DSAs).  A DSA is a process that runs
on a GDS server machine and manages the GDS database.  DSAs that know only
part of the total directory information (as shown in 
...\" Figure 12-7)
Figure 1-16)
cooperate with each other to perform directory service operations.  
This cooperation often involves the 
navigation of operations through the network.
.P
.ne 3.25i
.FG "DSA/DUA Relationship"
...\" .so gd/Pics/fig1.15.pic
.P
.PS
.in +.3i
scale = 160
...\" "\f(HB\s4fig1.15.src\s0\fP"  at 587, 3
"\f(HB\s9DSA\s0\fP"  at 220, 156
"\f(HB\s9DSA\s0\fP"  at 222, 293
.ps 40
circle radius 42 at 221, 158
line <->  from 265, 290 \
	to 349, 290 
.ps 10
"\f(HB\s9DSP\s0\fP"  at 307, 301
.ps 40
circle radius 42 at 224, 295
circle radius 42 at 389, 278
.ps 10
"\f(HB\s9DSA\s0\fP"  at 390, 276
"\f(HB\s9DUA\s0\fP"  at 548, 51
.ps 40
circle radius 42 at 545, 53
.ps 10
"\f(HB\s9DUA\s0\fP"  at 543, 341
.ps 40
circle radius 42 at 544, 344
.ps 10
"\f(HB\s7The Directory\s0\fP"  at 307, 357
"\f(HB\s7Directory Environment\s0\fP"  at 103, 440
.ps 40
circle radius 172 at 307, 209
line <->  from 507, 324 \
	to 427, 291 
.ps 10
"\f(HB\s9DUA\s0\fP"  at 43, 158
.ps 40
circle radius 42 at 42, 160
line <->  from 85, 160 \
	to 180, 160 
.ps 10
"\f(HB\s9DAP\s0\fP"  at 135, 172
.ps 40
line <->  from 223, 252 \
	to 223, 200 
circle radius 42 at 354, 157
.ps 10
"\f(HB\s9DSA\s0\fP"  at 354, 155
.ps 40
line <->  from 387, 235 \
	to 372, 196 
line <->  from 263, 161 \
	to 312, 162 \
	to 312, 162 
line <->  from 390, 137 \
	to 508, 76 
.in -.3i
.PE
.P
Users access the directory through \*EDirectory User Agents\*O (DUAs). DUAs
issue requests to DSAs on behalf of users requesting directory service
operations.  The manner in which DUAs talk to DSAs is defined by the
X.500 standard. 
.P
The \*EDirectory Access Protocol\*O (DAP) is defined for
communication between DUAs and DSAs. 
.iX "Directory Access Protocol (DAP)"
.P
The directory standard also defines directory functions in the
DAP.  The directory functions can be
divided into three general categories:
.ML
.LI
\*ERead\*O operations involve the retrieval of information from specific
named entries.  This enables name-to-attribute mapping
that is similar to the white pages telephone directory.
.LI
\*ESearch\*O operations involve general browsing and relational
searching of information.  They support human interaction
with the directory and are similar to the yellow pages
telephone directory.
.LI
\*EModify\*O operations are used to modify the information in the
directory.
.LE
.P
.iX "Directory System Protocol (DSP)" "about"
The \*EDirectory System Protocol\*O (DSP) is defined by the directory
standard to allow DSAs to communicate with one another.  DSP offers a
convenient way for a client to download distributed operations to a
server which cooperates with other DSAs to perform user requests.
.P
.ne 10
Through DAP and DSP the Directory Service provides transparent service. Users get the same result from a request irrespective of where in the Directory system
the request originates. 
.H 3 "Referral" 
.iX "-[" "referral"
In some cases, a DSA is unable to provide a service to a DUA
because the required information is held elsewhere in the network.  Using a method called
\*Ereferral\*O, a DSA informs the DUA (DAP referral) or the 
calling DSA (DSP referral) where the information is located.  The referral 
method may be initiated by the user's preference or the DSA's circumstances.
.P
Referrals are possible because the DN provided by the
DUA identifies where the requested entry is located in the DIT.  DSAs
use their knowledge of the DIT to inform the DUA of the DSA that
holds the requested information (or a DSA that is closer to the
DSA holding the information).
.P
...\" Figure 12-8 
Figure 1-17
shows an example of referral. \*LDSA1\*O passes a referral to
\*LDSA2\*O back to \*LDUA\*O. \*LDUA\*O then makes a request to \*LDSA2\*O.
.P
.ne 5.25i
.FG "Referral"
...\" .so gd/Pics/fig1.16.pic
.P
.PS
scale = 160
"\fH\s6Step 2\s0\fP"  at 22, 339
"\fH\s6Step 1\s0\fP"  at 20, 734
"\fH\s6Read request\s0\fP"  at 141, 161
.ps 80
line   from 95, 111 \
	to 147, 153 
line ->  from 171, 173 \
	to 206, 203 
.ps 10
"\fH\s6Result\s0\fP"  at 93, 304
"\fH\s6Read request\s0\fP"  at 139, 521
"\fH\s6Referral to DSA 2\s0\fP"  at 59, 607
"\f(HB\s9DSA\s0\fP"  at 372, 86
"\f(HB\s9DSA3\s0\fP"  at 408, 207
"\f(HB\s9DSA1\s0\fP"  at 238, 87
"\f(HB\s9DSA2\s0\fP"  at 240, 224
"\f(HB\s9DSA4\s0\fP"  at 357, 504
"\f(HB\s9DSA3\s0\fP"  at 393, 625
"\f(HB\s9DSA1\s0\fP"  at 223, 505
"\f(HB\s9DSA2\s0\fP"  at 225, 642
.ps 80
line ->  from 225, 267 \
	to 211, 285 \
	to 204, 293 \
	to 192, 301 \
	to 186, 303 \
	to 163, 308 \
	to 140, 306 \
	to 117, 298 \
	to 96, 284 \
	to 85, 272 \
	to 71, 252 \
	to 59, 220 \
	to 53, 196 \
	to 53, 182 \
	to 61, 134 
.ps 40
circle radius 158 at 304, 576
line <->  from 88, 509 \
	to 181, 510 
circle radius 42 at 224, 507
.ps 80
line ->  from 214, 548 \
	to 202, 567 \
	to 193, 574 \
	to 181, 582 \
	to 175, 584 \
	to 169, 586 \
	to 153, 590 \
	to 134, 593 \
	to 126, 592 \
	to 109, 588 \
	to 95, 582 \
	to 87, 578 \
	to 69, 565 \
	to 60, 557 \
	to 58, 554 
.ps 40
circle radius 41 at 45, 509
circle radius 42 at 357, 506
.ps 10
"\f(HB\s9DUA\s0\fP"  at 46, 507
"\f(HB\s7The Directory\s0\fP"  at 310, 706
.ps 40
circle radius 42 at 392, 627
circle radius 42 at 227, 644
circle radius 158 at 319, 158
circle radius 42 at 239, 89
circle radius 41 at 60, 91
circle radius 42 at 372, 88
.ps 10
"\f(HB\s9DUA\s0\fP"  at 61, 89
"\f(HB\s7The Directory\s0\fP"  at 325, 288
.ps 40
circle radius 42 at 407, 209
circle radius 42 at 242, 226
.PE
.iX "-]" "referral"
.H 3 "Chaining" 
.iX "Global Directory Service (GDS)" "chaining"
.iX "-[" "chaining"
As an alternative to the referral mechanism, the DSA chains the
request over DSP, asking another DSA to perform the requested
function.  That DSA either performs the function or sends back a
referral of its own.  In either case, the first DSA eventually responds
to the originating DUA with the results of the completed operation or
a referral.  This process is called \*Echaining\*O.
.P
Chaining can go deeper than one level. To prevent lengthy searches, a
user needs to specify no chaining or a limit on total
elapsed time for an operation.
.P
...\" Figure 12-9 
.ne 10
Figure 1-18
shows an example of chaining. \*LDUA\*O issues a request to
\*LDSA1\*O. \*LDSA1\*O is unable to service the request and passes it to \*LDSA2\*O.
\*LDSA2\*O services the request, passes the result back to 
\*LDSA1\*O, and \*LDSA1\*O
passes the result back to \*LDUA\*O. 
.P
.ne 5.25i
.FG "Chaining"
...\" .so gd/Pics/fig1.17.pic
.P
.PS
scale = 160
"\fH\s6Step 2\s0\fP"  at 22, 327
"\fH\s6Step 1\s0\fP"  at 20, 725
.ps 40
circle radius 42 at 238, 85
.ps 10
"\f(HB\s9DSA1\s0\fP"  at 238, 87
.ps 40
line ->  from 240, 149 \
	to 238, 129 
.ps 10
"\fH\s6Result\s0\fP"  at 136, 101
.ps 40
line ->  from 87, 509 \
	to 180, 510 
line ->  from 194, 88 \
	to 98, 88 
line   from 244, 184 \
	to 243, 163 
.ps 10
"\fH\s6Chained result\s0\fP"  at 236, 155
"\fH\s6Chained read request\s0\fP"  at 222, 572
.ps 40
line   from 217, 549 \
	to 219, 565 
line ->  from 222, 581 \
	to 225, 602 
circle radius 42 at 241, 226
circle radius 42 at 406, 209
.ps 10
"\f(HB\s7The Directory\s0\fP"  at 324, 288
"\f(HB\s9DUA\s0\fP"  at 60, 89
.ps 40
circle radius 42 at 371, 88
circle radius 41 at 59, 91
circle radius 158 at 318, 158
circle radius 42 at 226, 644
circle radius 42 at 391, 627
.ps 10
"\f(HB\s7The Directory\s0\fP"  at 309, 706
"\f(HB\s9DUA\s0\fP"  at 45, 507
.ps 40
circle radius 42 at 356, 506
circle radius 41 at 44, 509
circle radius 42 at 223, 507
circle radius 158 at 303, 576
.ps 10
"\f(HB\s9DSA2\s0\fP"  at 224, 642
"\f(HB\s9DSA1\s0\fP"  at 222, 505
"\f(HB\s9DSA3\s0\fP"  at 392, 625
"\f(HB\s9DSA4\s0\fP"  at 356, 504
"\f(HB\s9DSA2\s0\fP"  at 239, 224
"\f(HB\s9DSA3\s0\fP"  at 407, 207
"\f(HB\s9DSA\s0\fP"  at 371, 86
"\fH\s6Read request\s0\fP"  at 138, 521
.PE
.iX "-]" "chaining"
.P
In the evaluation of a search or list operation a DSA may have to
decompose the request in a number of different subrequests and chain
them out to other DSAs.  This is called request decomposition.  Figure
1-19 shows an example of request decomposition. \*LDSA1\*O sends a
request out in parallel and merges the result before returning it to
the DSA.
.P
.ne 3.75i
.FG "Request Decomposition"
...\" .so gd/Pics/fig12.multicast2.pic
.P
.PS
scale = 106.667
.ps 40
circle radius 42 at 223, 229
.ps 80
line ->  from 261, 90 \
	to 305, 89 
line ->  from 251, 118 \
	to 354, 179 
line ->  from 221, 131 \
	to 221, 182 
.ps 40
circle radius 42 at 388, 209
.ps 10
"\fH\s9Search request\s0\fP"  at 135, 103
"\f(HB\s13DSA4\s0\fP"  at 353, 86
"\f(HB\s13DSA3\s0\fP"  at 389, 207
"\f(HB\s13DSA1\s0\fP"  at 219, 87
"\f(HB\s13DSA2\s0\fP"  at 221, 224
.ps 40
circle radius 158 at 300, 158
line <->  from 84, 91 \
	to 177, 92 
circle radius 42 at 220, 89
circle radius 41 at 41, 91
circle radius 42 at 353, 88
.ps 10
"\f(HB\s13DUA\s0\fP"  at 42, 89
"\f(HB\s10The Directory\s0\fP"  at 306, 288
.PE
.H 3 "Navigation in the GDS"
When a service request is generated by a Directory Service user, the
bind DSA (the DSA to which the bind was made) attempts to satisfy the
request.  When a request cannot be satisfied by the bind DSA alone,
either the bind DSA or the DUA (acting on information returned by the
bind DSA) distributes the request to other DSAs.  This distribution is
performed by either the DUA or the bind DSA, depending on how the
service control options are set in the request.  The service control
options also determine how the request is handled during the
distribution process.
.H 4 "Continuation Reference"
A continuation reference describes how a service request can be
continued at one or more other DSAs.  It contains access points which consist of a DSA name and its corresponding PSAP address.
A continuation reference is
typically created when a DSA is unable to fulfill the request itself.
.P
.ne 10
The continuation references are returned to the DUA either as a
referral or as components of a partial outcome qualifier in the result
of a \*Llist\*O or \*Lsearch\*O operation.  The DUA may use the access
points, to bind the referenced DSAs and to forward the request to
them. 
.P
Refer to Appendix I, ``Navigation in GDS'', for a more detailed 
description of how GDS handles continuation references.
.H 4 "Service Controls"
Service controls are passed from DUA to DSA using DAP protocol.  If
the DSA chains to other DSAs, the service controls are passed
unchanged to these other DSAs.
.P
When service controls are enabled, they affect how a Directory Service
request is distributed as follows:
.P
.VL
.LI "\*LLOCAL SCOPE\*O"
.nL
The evaluation of the request is restricted to the bind DSA.  No references are generated and the distribution of the request is not performed.  If this service control is disabled, the DSA can generate continuation references. 
.LI "\*LCHAINING PROHIBITED\*O"
.nL
No chaining is done in the DSA.  References are returned to the DUA. 
.LI "\*LAUTOMATIC CONTINUATION\*O (known only in the DUA)"
.nL
If the DUA gets continuation references from the DSA, they are
handled in the DUA.  The DUA will send the request to the referenced DSAs.
If this service control option is not set, the references are returned
to the user or application program that initiated the request.
.LI "\*LPREFER CHAINING\*O"
.nL
The bind DSA handles the continuation references and forwards a chained request to the referenced DSA (\*LLOCAL SCOPE\*O and \*LCHAINING PROHIBITED\*O service options must be disabled).  
.P
.ne 10
In the case of a \*LLIST\*O or \*LSEARCH\*O operation, the request may be decomposed and subrequests are forwarded to the referenced DSAs.  Even if \*LPREFER CHAINING\*O is set, the DSA may still end up with a set of unresolved continuation references which it has to pass back to the DUA.
.LE
