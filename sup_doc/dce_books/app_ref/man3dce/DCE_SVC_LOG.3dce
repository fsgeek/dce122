...\" @OSF_COPYRIGHT@
...\" COPYRIGHT NOTICE
...\" Copyright (c) 1990, 1991, 1992, 1993, 1994 Open Software Foundation, Inc.
...\" ALL RIGHTS RESERVED (DCE).  See the file named COPYRIGHT.DCE for
...\" the full copyright text.
...\" HISTORY
...\" $Log: DCE_SVC_LOG.3dce,v $
...\" Revision 1.1.6.1  1996/11/18  16:58:54  wardr
...\" 	{edit,R1.2.2}
...\" 	Init capped heads and added PDG pointer
...\" 	[1996/11/18  16:55:43  wardr]
...\"
...\" Revision 1.1.4.1  1996/03/11  21:16:51  weir
...\" 	Needless checkout
...\" 	[1996/03/11  21:16:28  weir]
...\" 
...\" Revision 1.1.2.6  1995/05/31  17:04:43  buckler
...\" 	1.1 edits.
...\" 	PRENTICE HALL reformat.
...\" 	[1995/05/30  22:37:42  buckler]
...\" 
...\" Revision 1.1.2.5  1994/10/17  22:29:10  buckler
...\" 	{enh, 8441, R1.1}
...\" 	Incorporated technical review.
...\" 	[1994/10/17  22:25:12  buckler]
...\" 
...\" Revision 1.1.2.3  1994/09/14  14:52:21  weir
...\" 	Updates
...\" 	[1994/09/14  14:51:06  weir]
...\" 
...\" Revision 1.1.2.2  1994/09/13  21:30:25  weir
...\" 	Updates
...\" 	[1994/09/13  21:29:00  weir]
...\" 
...\" Revision 1.1.2.1  1994/09/08  19:31:27  weir
...\" 	Reorganized reference pages
...\" 	[1994/09/08  19:30:17  weir]
...\" 
...\" $EndLog$
...\" 
...\" 
...\" 
...\" 
.TH DCE_SVC_LOG 3dce
.SH "Name"
\*LDCE_SVC_LOG\*O \- Macro to output a binary form of a serviceability debug message
.SH "Synopsis"
...\" ----------------------------------------------------------------------
.sS
\*L#include <dce/dce.h>\*O
.sp .4v
\*LDCE_SVC_LOG\*L((\*O
.nL
	\*Ldce_svc_handle_t \*Vhandle\*L,\*O
.nL
	\*Lconst unsigned32 \*Vtable_index\*L,\*O
.nL
	\*Lunsigned32 \*Vdebug_level\*L,\*O
.nL
	\*Lconst unsigned32 \*Vmessageid\*L,\*O
.nL
	\*Lchar * \*Vformat\*L,\*O
.nL
	\*L.\ .\ .));\*O
.sE
.SH "Parameters"
...\" ----------------------------------------------------------------------
.SS "Input"
.VL
.LI "\*Vhandle\*O"
The caller's serviceability handle.
.LI "\*Vtable_index\*O"
The message's subcomponent name (defined in the \*Lsams\*O file).
.LI "\*Vdebug_level\*O"
Serviceability debug level for the message.
.LI "\*Vmessageid\*O"
A message ID, defined in the message's \*Lcode\*O field in the \*Lsams\*O file.
.LI "\*Vformat\*O"
A message format specifier string (used if \*Vmessageid\*O cannot be found).
.LI "\*L.\ .\ .\*O"
Any format arguments for the message string.
.LE
.SH "Description"
...\" ----------------------------------------------------------------------
...\" 
.PP
The \*LDCE_SVC_LOG\*O macro is used to generate debugging output based on a
message defined in an application's \*Lsams\*O file (in this respect it is unlike
\*LDCE_SVC_DEBUG\*O, in which the message is specified as a literal string
parameter).  Because it is a macro that takes a variable number of arguments,
the entire parameter list must be enclosed in two sets of parentheses.  The
\*Vhandle\*O and \*Vtable_index\*O parameters are as described for
\*Ldce_svc_printf(\|)\*O.
.PP
The message can be specified in either one of two ways: by \*Vmessageid\*O,
identifying a message defined in the normal way in the application's \*Lsams\*O
file; or as a string literal paramater (\*Vformat\*O).  The \*Vformat\*O
string is used only if the specified \*Vmessageid\*O cannot be found.
.PP
.ne 8
\*LDCE_SVC_LOG\*O generates a record in the serviceability binary format,
not a conventional serviceability message as such.  The complete message text
is not normally written; instead, only the message ID (the \*Vmessageid\*O
specified in the macro parameter), and its format arguments (if any) are
written.  When the binary log is read (see \*Lsvcdumplog(8dce)\*O), the text
of the message is reconstructed from the application's installed message
catalog.  However, if the original message was generated from the \*Vformat\*O
argument, then the entire message text is written to the binary record.
...\" 
...\" 
.PP
The \*Vdebug_level\*O argument indicates the level of detail associated with
the message and must be in the range \*Lsvc_c_debug1\*O to \*Lsvc_c_debug9\*O.
...\" 
.PP
Thus the value of \*Vdebug_level\*O associates the message with one of nine
levels, and whether or not the message is actually generated at run
time will depend on what debugging level has been set for the application.
The level can be set by the application itself by a call to
\*Ldce_svc_debug_set_levels(\|)\*O or \*Ldce_svc_debug_routing(\|)\*O.
The level can also be set by
the value of an environment variable or a serviceability routing file.
See \*Lsvcroute(5dce)\*O for further information.
...\" 
...\" 
...\" 	Explicitly set with dce_svc_routing call, if not then
...\" 	value of SVC_<level> environment variable, if not then
...\" 	file named by DCE_SVC_ROUTING_FILE environment variable.
...\" 	The default value of DCE_SVC_ROUTING_FILE is /opt/dcelocal/svc/routing
...\" 	If that file does not exist, then there are compiled-in defaults:
...\" 		send to stderr.
...\" 
...\" 
.PP
The significance of the various levels is application-defined, but in
general the higher levels (numbers) imply more detail in debugging
output.
.SH "Related Information"
Functions:  \*LDCE_SVC_DEBUG(3dce)\*O, \*LDCE_SVC_DEBUG_ATLEAST(3dce)\*O,
\*LDCE_SVC_DEBUG_IS(3dce)\*O.
