...\" @OSF_COPYRIGHT@
...\" COPYRIGHT NOTICE
...\" Copyright (c) 1990, 1991, 1992, 1993, 1994 Open Software Foundation, Inc.
...\" ALL RIGHTS RESERVED (DCE).  See the file named COPYRIGHT.DCE for
...\" the full copyright text.
...\" 
...\" HISTORY
...\" $Log: dce_attr_intro.3dce,v $
...\" Revision 1.1.4.1  1996/11/18  16:58:56  wardr
...\" 	{edit,R1.2.2}
...\" 	Init capped heads and added PDG pointer
...\" 	[1996/11/18  16:55:45  wardr]
...\"
...\" Revision 1.1.2.4  1995/06/21  19:16:33  buckler
...\" 	More 1.1 edits.
...\" 	[1995/06/21  18:32:05  buckler]
...\" 
...\" Revision 1.1.2.3  1995/05/31  17:04:44  buckler
...\" 	1.1 edits.
...\" 	PRENTICE HALL reformat.
...\" 	[1995/05/30  22:38:07  buckler]
...\" 
...\" Revision 1.1.2.2  1994/10/06  20:40:35  rrizzo
...\" 	expand copyright
...\" 	[1994/10/06  20:07:40  rrizzo]
...\" 
...\" Revision 1.1.2.1  1994/08/30  18:11:36  millette
...\" 	(enh,11628,R1.1)
...\" 	Created for generic attributes
...\" 	[1994/08/30  18:11:10  millette]
...\" 
...\" $EndLog$
.TH dce_attr_intro 3dce
.SH "Name"
\*Ldce_attr_intro\*O - Introduction to the DCE attribute interface routines
.SH "Description"
The DCE attribute interface API allows applications to define and 
access attributes types (schema entries) in a schema of your choice. 
It is based on the extended registry attribute (ERA) interface, which
defines and accesses attribute types in the 
registry database schema.  
Except for the binding methods, the 
two APIs are similar.  
.PP
Note however, that the extended registry attribute API provides routines to create 
attribute types in the registry 
schema, to create and manipulate attribute instances, and 
to attach those instances to objects.  The DCE attribute interface 
in its current state provides calls only to create attribute types.
.SS "The DCE Attribute Interface Routines"
.PP
The DCE attribute interface consists of the 
following routines:
.VL
.LI "\*Ldce_attr_sch_bind(\|)\*O"
Returns an opaque handle of 
type \*Ldce_attr_sch_handle_t\*O to a 
schema object specified by name and sets authentication and 
authorization parameters for the handle.
.LI "\*Ldce_attr_sch_bind_free(\|)\*O"
Releases an opaque handle of 
type \*Ldce_attr_sch_handle_t\*O.
.LI "\*Ldce_attr_sch_create_entry(\|)\*O"
Creates a schema entry in a schema 
bound to with \*Ldce_attr_sch_bind(\|)\*O. 
.LI "\*Ldce_attr_sch_update_entry(\|)\*O"
Updates a schema entry in a schema 
bound to with \*Ldce_attr_sch_bind(\|)\*O. 
.LI "\*Ldce_attr_sch_delete_entry(\|)\*O"
Deletes a schema entry in a schema 
bound to with \*Ldce_attr_sch_bind(\|)\*O. 
.LI "\*Ldce_attr_sch_scan(\|)\*O"
Reads a specified number of schema entries.
.nL
.ne 5
.LI "\*Ldce_attr_sch_cursor_init(\|)\*O"
Allocates resources 
to and initializes a cursor used with \*Ldce_attr_sch_scan(\|)\*O. 
The \*Ldce_attr_sch_cursor_init(\|)\*O 
routine makes a
remote call that also returns the current number of schema entries in the schema.
.LI "\*Ldce_attr_sch_cursor_alloc(\|)\*O"
Allocates resources to a cursor 
used with \*Ldce_attr_sch_scan(\|)\*O.  The \*Ldce_attr_sch_cursor_alloc(\|)\*O 
routine is a local operation.
.LI "\*Ldce_attr_sch_cursor_release(\|)\*O"
Releases states associated with a 
cursor created by \*Ldce_attr_sch_cursor_alloc(\|)\*O or \*Ldce_attr_sch_cursor_init(\|)\*O.
.LI "\*Ldce_attr_sch_cursor_reset(\|)\*O"
Reinitializes a cursor used with 
\*Ldce_attr_sch_scan(\|)\*O.  The reset cursor can then be reused without 
releasing and reallocating.
.LI "\*Ldce_attr_sch_lookup_by_id(\|)\*O"
Reads a schema entry identified by attribute type UUID.
.LI "\*Ldce_attr_sch_lookup_by_name(\|)\*O"
Reads a schema entry identified by attribute name.
.LI "\*Ldce_attr_sch_get_acl_mgrs(\|)\*O"
Retrieves the manager types of the ACLs 
protecting objects dominated by a named schema.
.LI "\*Ldce_attr_sch_aclmgr_strings(\|)\*O"
Returns printable ACL strings associated with an ACL manager 
protecting a schema object.
.LE
.SS "Data Types and Structures"
.VL
.LI "\*Ldce_attr_sch_handle_t\*O"
An opaque handle to a schema object.  Use \*Ldce_attr_sch_bind(\|)\*O to 
acquire the handle.
.LI "\*Ldce_attr_component_name_t\*O"
A pointer to a character string used to further 
specify a schema object.  
.nL
.ne 7
.LI "\*Ldce_bind_auth_info_t\*O"
An enumeration that defines whether or not the 
binding is authenticated.  
This data type is defined exactly as the 
\*Lsec_attr_bind_auth_info_t\*O data type in the ERA 
interface.  See the \*Lsec_intro(3sec)\*O reference page for 
more information on \*Lsec_attr_bind_auth_info_t\*O.
.LI "\*Ldce_attr_schema_entry_t\*O"
A structure that defines a complete attribute entry for the schema catalog.  
This data type is defined exactly as the  
\*Lsec_attr_schema_entry_t\*O data type in the ERA 
interface.  See the \*Lsec_intro(3sec)\*O reference page for 
more information on \*Lsec_attr_schema_entry_t\*O. 
.LI "\*Ldce_attr_cursor_t\*O"
A structure that provides a pointer into a database and is used for 
multiple database operations.  
This cursor must minimally 
represent the object indicated by \*Ldce_attr_sch_handle_t\*O. 
The cursor may additionally 
represent an entry within that schema.
.LI "\*Ldce_attr_schema_entry_parts_t\*O"
A 32-bit bitset containing flags that specify the schema 
entry fields that can be modified
on a schema entry update operation.  
This data type is defined exactly as the  
\*Lsec_attr_schema_entry_parts_t\*O data type in the ERA 
interface.  See the \*Lsec_intro(3sec)\*O reference page for 
more information on \*Lsec_attr_schema_entry_parts_t\*O. 
.LE
