...\" @OSF_COPYRIGHT@
...\" COPYRIGHT NOTICE
...\" Copyright (c) 1990, 1991, 1992, 1993, 1994 Open Software Foundation, Inc.
...\" ALL RIGHTS RESERVED (DCE).  See the file named COPYRIGHT.DCE for
...\" the full copyright text.
...\" 
...\" 
...\" HISTORY
...\" $Log: dced_intro.3dce,v $
...\" Revision 1.1.4.1  1996/11/18  17:01:02  wardr
...\" 	{edit,R1.2.2}
...\" 	Init capped heads and added PDG pointer
...\" 	[1996/11/18  16:57:25  wardr]
...\"
...\" Revision 1.1.2.7  1995/05/31  17:06:15  buckler
...\" 	1.1 edits.
...\" 	PRENTICE HALL reformat.
...\" 	[1995/05/30  22:58:25  buckler]
...\" 
...\" Revision 1.1.2.6  1994/10/20  03:06:14  jshirley
...\" 	Final edits.
...\" 	[1994/10/20  03:04:11  jshirley]
...\" 
...\" Revision 1.1.2.5  1994/09/15  17:48:17  jshirley
...\" 	{def,9830,R1.1} New dced documents.
...\" 	[1994/09/15  17:48:01  jshirley]
...\" 
...\" Revision 1.1.2.4  1994/09/13  20:33:35  jshirley
...\" 	Minor edits to streamline reference page.
...\" 	[1994/09/13  20:33:05  jshirley]
...\" 
...\" Revision 1.1.2.3  1994/09/02  17:04:59  jshirley
...\" 	Second draft edits: notes from bowe, jcarroll, pwang, rsalz, self.
...\" 	[1994/09/02  17:04:02  jshirley]
...\" 
...\" Revision 1.1.2.2  1994/08/11  20:36:46  jhh
...\" 	expand copyright
...\" 	[1994/08/11  19:58:55  jhh]
...\" 
...\" Revision 1.1.2.1  1994/08/03  00:00:35  jshirley
...\" 	{def,9830,R1.1}
...\" 	Created the first draft.
...\" 	[1994/08/03  00:00:04  jshirley]
...\" 
...\" $EndLog$
.TH dced_intro 3dce
.SH "Name"
\*Ldced_intro\*O - Introduction to the DCE host daemon routines
.SH "Description"
This introduces the DCE host daemon application programming interface:
the \*Ldced\*O API.  This API gives management applications remote
access to various data, servers, and services on DCE hosts.
Servers manage their own configuration in the local \*Ldced\*O by using
the routines starting with \*Ldce_server\*O, introduced in the
\*Ldce_server_intro(3dce)\*O reference page. 
.SS "The dced API Naming Conventions"
.PP
All of the \*Ldced\*O API routine names begin with the \*Ldced_\*O prefix.
This API contains some specialized routines that operate on services 
represented by the following keywords in the routine names:
.VL
.LI "\*Lhostdata\*O"
The host data management service stores host-specific data  such
as the host name, the host's cell name, and other data, 
and it provides access to these data items.
.LI "\*Lserver\*O"
The server control service configures, starts, and stops servers, 
among other things.  
Applications must distinguish two general states of server control:
server configuration (\*Lsrvrconf\*O) and server execution (\*Lsrvrexec\*O).
.LI "\*Lsecval\*O"
The security validation service maintains a host's principal identity
and ensures applications that the DCE security daemon is genuine.
.LI "\*Lkeytab\*O"
The key table management service remotely manages key tables.
.LE
The \*Ldced\*O also provides the endpoint mapper service which has its
own API, described with the RPC API.  These routines begin with \*Lrpc_ep\*O
and \*Lrpc_mgmt_ep\*O.
.PP
Since some of the \*Ldced\*O daemon's services require the same operations 
(but on different data types), the \*Ldced\*O API also contains 
generic routines that may operate on more than one of the preceding services.
For example, you use the routine \*Ldced_object_read(\|)\*O to read
a data item (object) from the \*Lhostdata\*O, \*Lsrvrconf\*O, \*Lsrvrexec\*O,
or \*Lkeytab\*O services.
.SS "dced Binding Routines"
.PP
A binding must be established to a \*Ldced\*O service on a particular
host before you can use any other \*Ldced\*O routines.
The resources of the \*Ldced\*O binding should also be released when an
application is finished with the service.
.VL
.LI "\*Ldced_binding_create(\|)\*O"
Establishes a \*Ldced\*O binding to a host service.
.LI "\*Ldced_binding_from_rpc_binding(\|)\*O"
Establishes a \*Ldced\*O binding to a \*Ldced\*O service on the host
specified in an already-established RPC binding handle to any server.
.LI "\*Ldced_binding_set_auth_info(\|)\*O"
Sets authentication, authorization, and protection level information
for a \*Ldced\*O binding handle.
.LI "\*Ldced_binding_free(\|)\*O"
Releases the resources of a \*Ldced\*O binding handle.
.LE
.SS "Generic Entry Routines"
.PP
All data maintained by \*Ldced\*O is managed as entries.  Most of the
services of \*Ldced\*O have lists of entries traversed with a cursor
that describe where the actual data is maintained.
.VL
.LI "\*Ldced_entry_add(\|)\*O"
Adds a \*Lkeytab\*O or \*Lhostdata\*O entry.
.LI "\*Ldced_entry_remove(\|)\*O"
Removes a \*Lhostdata\*O or \*Lkeytab\*O data entry from \*Ldced\*O.
.LI "\*Ldced_initialize_cursor(\|)\*O"
Obtains a list of data entries from \*Ldced\*O and sets a cursor at the
beginning of the list.
.LI "\*Ldced_entry_get_next(\|)\*O"
Obtains the next data entry from a list of entries.
.LI "\*Ldced_release_cursor(\|)\*O"
Releases the resources associated with a cursor which traverses a
service's list of entries.
.LI "\*Ldced_list_get(\|)\*O"
Returns the list of data entries maintained by a DCE host service.
.LI "\*Ldced_list_release(\|)\*O"
Releases the resources of a list of entries.
.LI "\*Ldced_inq_id(\|)\*O"
Obtains the UUID associated with an entry name.
.LI "\*Ldced_inq_name(\|)\*O"
Obtains the name associated with an entry UUID.
.LE
.SS "Generic Routines to Read Data Objects"
.PP
These routines obtain the actual data for items to which entries refer
(objects).
.VL
.LI "\*Ldced_object_read(\|)\*O"
Reads one data item of a \*Ldced\*O service, based on the entry UUID.
.LI "\*Ldced_object_read_all(\|)\*O"
Reads all the data of a \*Ldced\*O service's entry list.
.LI "\*Ldced_objects_release(\|)\*O"
Releases the resources allocated for data obtained.
.LE
.SS "Host Data Management Routines"
.PP
.VL
.LI "\*Ldced_hostdata_create(\|)\*O"
Creates a \*Lhostdata\*O item and the associated entry.
.LI "\*Ldced_hostdata_read(\|)\*O"
Reads a \*Lhostdata\*O item.
.LI "\*Ldced_hostdata_write(\|)\*O"
Replaces an existing \*Lhostdata\*O item.
.LI "\*Ldced_hostdata_delete(\|)\*O"
Deletes a \*Lhostdata\*O item from a specific host and removes the
associated entry.
.LE
.SS "Server Configuration Control Routines"
.PP
.VL
.LI "\*Ldced_server_create(\|)\*O"
Creates a DCE server's configuration data.
.LI "\*Ldced_server_modify_attributes(\|)\*O"
Modifies a DCE server's configuration data.
.LI "\*Ldced_server_delete(\|)\*O"
Deletes a DCE server's configuration data.
.LI "\*Ldced_server_start(\|)\*O"
Starts a DCE-configured server.
.LE
.SS "Server Execution Control Routines"
.PP
.VL
.LI "\*Ldced_server_disable_if(\|)\*O"
Disables a service provided by a server.
.LI "\*Ldced_server_enable_if(\|)\*O"
Re-enables a service provided by a server.
.LI "\*Ldced_server_stop(\|)\*O"
Stops a DCE-configured server.
.LE
.SS "Security Validation Routines"
.PP
.VL
.LI "\*Ldced_secval_start(\|)\*O"
Starts a host's security validation service.
.LI "\*Ldced_secval_validate(\|)\*O"
Validates that the DCE security daemon (\*Lsecd\*O) used by a specific host is legitimate.
.LI "\*Ldced_secval_status(\|)\*O"
Returns a status parameter of TRUE if the security validation service
is activated and FALSE if not.
.LI "\*Ldced_secval_stop(\|)\*O"
Stops a host's security validation service.
.LE
.SS "Key Table Management Routines"
.PP
.VL
.LI "\*Ldced_keytab_create(\|)\*O"
Creates a key table with a list of keys in a new file.
.LI "\*Ldced_keytab_delete(\|)\*O"
Deletes a key table file and removes the associated entry.
.LI "\*Ldced_keytab_initialize_cursor(\|)\*O"
Obtains a list of keys from a key table and sets a cursor at the
beginning of the list.
.LI "\*Ldced_keytab_get_next_key(\|)\*O"
Returns a key from a cached list, and advances the cursor.
.LI "\*Ldced_keytab_release_cursor(\|)\*O"
Releases the resources associated with a cursor that traverses a key table.
.LI "\*Ldced_keytab_add_key(\|)\*O"
Adds a key to a key table.
.LI "\*Ldced_keytab_change_key(\|)\*O"
Changes a key in both a key table and in the security registry.
.LI "\*Ldced_keytab_remove_key(\|)\*O"
Removes a key from a key table.
.LE
.SS "Data Types and Structures"
.PP
The following data types used with the \*Ldced\*O API are defined in
\*Ldce/dced_base.idl\*O and are shown here in alphabetical order.
.VL
...\"
...\"
.LI "\*Ldced_attr_list_t\*O"
This data structure specifies the configuration attributes to use when you 
start a server via \*Ldced\*O.  The structure consists of the following:
.VL
.LI "\*Lcount\*O"
An \*Lunsigned32\*O number representing the number of attributes in the list.
.LI "\*Llist\*O"
An array of configuration attributes where each element
is of type \*Lsec_attr_t\*O.  This data type is described in the
\*Lsec_intro(3sec)\*O reference page.
For \*Ldced\*O, the \*Llist[i].attr_id\*O field can have values of either
\*Ldced_g_uuid_fileattr\*O specifying plain text or
\*Ldced_g_uuid_binfileattr\*O specifying binary data.
.LE
...\"
...\"
.LI "\*Ldced_binding_handle_t\*O"
A \*Ldced\*O binding handle is an opaque pointer that refers to information
that includes  a \*Ldced\*O service
(\*Lhostdata\*O, \*Lsrvrconf\*O, \*Lsrvrexec\*O, \*Lsecval\*O, or \*Lkeytab\*O)
and RPC binding information for a specific DCE host daemon. 
...\"
...\"
.LI "\*Ldced_cursor_t\*O"
The entry list cursor is an opaque pointer used to keep track of a location in
an entry list between calls that traverse the list.  
...\"
...\"
.LI "\*Ldced_entry_t\*O"
An \*Eentry\*O is the structure that contains information about a data
item (or object) maintained by a \*Ldced\*O service.
The actual data is maintained elsewhere.
Each entry consists of the following structure members: 
.VL
.LI  "\*Lid\*O"
A unique identifer of type \*Luuid_t\*O that \*Ldced\*O maintains for every 
data item it maintains
.LI   "\*Lname\*O"
The name for the data item.  The data type is \*Ldced_string_t\*O .
.LI "\*Ldescription\*O"
A brief description the data item (of type \*Ldced_string_t\*O) 
for the convenience of human users.
.nL
.ne 5
.LI "\*Lstorage_tag\*O"
A string of type \*Ldced_string_t\*O describing the location of the
actual data.
This is implementation-specific and may be a file (with a pathname) on
the host system or a storage identifier for the \*Ldced\*O process.
.LE
...\"
...\"
.LI "\*Ldced_entry_list_t\*O"
An entry list is a uniform way to list the data items a \*Ldced\*O 
service maintains.  The entry list structure contains a list of all
the entries for a given service.
For example, the complete list of all entries of hostdata, 
server configuration data,  server execution data, and keytab data
are each maintained in separate entry lists.  
The structure consists of the following:
.VL
.LI "\*Lcount\*O"
An \*Lunsigned32\*O number representing the number of entries in the list.
.LI "\*Llist\*O"
An array of entries where each element is of type \*Ldced_entry_t\*O.
.LE
...\"
...\"
.LI "\*Ldced_key_t\*O"
A key consists of the following structure members:
.VL
.LI "\*Lprincipal\*O"
A \*Ldced_string_t\*O type string representing the principal for the key. 
.LI "\*Lversion\*O"
An \*Lunsigned32\*O number representing the version number of the key.
.LI "\*Lauthn_service\*O"
An \*Lunsigned32\*O number representing the authentication service used.
.LI "\*Lpasswd\*O"
A pointer to a password.  This is of type \*Lsec_passwd_rec_t\*O .
.LE
See also the security introduction reference page, \*Lsec_intro(3sec)\*O.
...\"
...\"
.LI  "\*Ldced_key_list_t\*O"
A key list contains all the keys for a given key table and consists of the 
following structure elements:
.VL
.LI "\*Lcount\*O"
An \*Lunsigned32\*O number representing the number of keys in the list.
.LI "\*Llist\*O"
An array of keys where each element is of type \*Ldced_key_t\*O.
.LE
...\"
...\"
.LI "\*Ldced_keytab_cursor_t\*O"
The keytab cursor is an opaque pointer used to keep track of a location
in a key list between calls that traverse the list.
...\"
...\"
.LI "\*Ldced_opnum_list_t\*O"
A list of operation numbers is used in the \*Lservice_t\*O structure.
This structure consists of the following fields:
.VL
.LI "\*Lcount\*O"
An \*Lunsigned32\*O number representing the number of operations in the list.
.LI "\*Llist\*O"
An array of UUIDs where each element is of type \*Luuid_t\*O.
.LE
...\"
...\"
.LI "\*Ldced_service_type_t\*O"
The \*Ldced\*O service type distinguishes the services provided by \*Ldced\*O.
It is an enumerated type used mainly in a parameter of the 
\*Ldced_binding_from_rpc_binding(\|)\*O routine.
It can have one of the following values:
.VL
.LI "\*Ldced_e_service_type_hostdata\*O"
The host data management service.
.LI "\*Ldced_e_service_type_srvrconf\*O"
The server configuration management service.
.LI "\*Ldced_e_service_type_srvrexec\*O"
The server execution management service.
.LI "\*Ldced_e_service_type_secval\*O"
The security validation service.
.LI "\*Ldced_e_service_type_keytab\*O"
The key table management service.
.LI "\*Ldced_e_service_type_null\*O"
A NULL service type used internally.
.LE
...\"
...\"
.LI "\*Ldced_string_t\*O"
This data type is a character string from the Portable Character Set (PCS).
...\"
...\"
.LI "\*Ldced_string_list_t\*O"
A list of strings with the following format:
.VL
.LI "\*Lcount\*O"
An \*Lunsigned32\*O number representing the number of strings in the list.
.LI "\*Llist\*O"
An array of strings where each element is of type \*Ldced_string_t\*O.
.LE
...\"
...\"
.LI "\*Ldced_tower_list_t\*O"
A list of protocol towers used in the \*Lservice_t\*O structure.
This structure consists of the following fields:
.VL
.LI "\*Lcount\*O"
An \*Lunsigned32\*O number representing the number of protocol towers
in the list.
.LI "\*Llist\*O"
An array of pointers where each element is a pointer to a protocol
tower of the type \*Lsec_attr_twr_set_p_t\*O.  
This data type is described in the \*Lsec_intro(3sec)\*O reference page.
.LE
...\"
...\"
.LI "\*Lserver_fixedattr_t\*O"
This structure is a field in the \*Lserver_t\*O structure.
It contains the following fields:
.VL
...\"
.LI "\*Lstartupflags\*O"
This field is of type \*Lunsigned32\*O and can be any combination of
the following bits:
.VL
.LI "\*Lserver_c_startup_at_boot"\*O
This means that \*Ldced\*O should start the server when \*Ldced\*O is started.
.LI "\*Lserver_c_startup_auto"\*O
This means that the server can be started automatically if \*Ldced\*O
determines there is a need.
.LI "\*Lserver_c_startup_explicit"\*O
This means \*Ldced\*O can start the server if it receives an
explicit command to do so via \*Ldced_server_start(\|)\*O or the
\*Ldcecp\*O operation \*Lserver start\*O.
.LI "\*Lserver_c_startup_on_failure"\*O
This means that the server should be restarted by \*Ldced\*O if it
exits with an unsuccesful exit status.
...\" PRIVATE FOR 1.1
...\".LI "\*Lserver_c_startup_on_schedule"\*O
...\"This is an advisory setting only and means whatever the administrator
...\"desires. 
...\"For example, the administrator may decide it means the server could be
...\"started at a specific data and time.
.LE
.nL
.ne 6
Several bits are also reserved for vendor-specific startup and include
the following:
.VL
.LI "\*Lserver_c_startup_vendor1\*O" 
.LI "\*Lserver_c_startup_vendor2\*O"
.LI "\*Lserver_c_startup_vendor3\*O" 
.LI "\*Lserver_c_startup_vendor4\*O"
.LE
.LI "\*Lflags\*O"
This represents the execution state of the server and is the
\*Lunsigned32\*O type.  This field is maintained only by \*Ldced\*O and
should not be modified.
Valid values to check for are self-explanatory and include the following:
.VL
.LI "\*Lserver_c_exec_notrunning\*O"
.LI "\*Lserver_c_exec_running\*O"
.LE
.PP
Several bits are also reserved for vendor-specific execution states
and include:
.VL
.LI "\*Lserver_c_exec_vendor1\*O"
.LI "\*Lserver_c_exec_vendor2\*O"
.LI "\*Lserver_c_exec_vendor3\*O"
.LI "\*Lserver_c_exec_vendor4\*O"
.LE
.LI "\*Lprogram\*O"
This is the full path name of the server and is of type \*Ldced_string_t\*O.
.LI "\*Larguments\*O"
This is a list of arguments for the server and is of type
\*Ldced_string_list_t\*O.
.LI "\*Lprerequisites\*O"
This is an advisory field that means this server is a client of other
prerequisite servers whose IDs are in a list of type \*Luuid_list_t\*O.
The UUIDs should be the \*Lid\*O fields from the \*Lserver_t\*O
structures of the relevent servers.
.LI "\*Lkeytables\*O"
This is a list of keytab entry UUIDs representing the key tables for this
server and is of type \*Luuid_list_t\*O.
.LI "\*Lposix_uid\*O"
This is a POSIX execution attribute for the user ID.
It is of type \*Lunsigned32\*O.
.LI "\*Lposix_gid\*O"
This is a POSIX execution attribute for the group ID.
It is of type \*Lunsigned32\*O.
.LI "\*Lposix_dir\*O"
This is a POSIX execution attribute for the directory in which
the server started when it is invoked.  It is of type \*Ldced_string_t\*O.
.LE
...\"
...\"
.LI "\*Lserver_t\*O"
The DCE host daemon describes a server as follows:
.VL
.LI "\*Lid\*O"
Each server has a unique ID of type \*Luuid_t\*O.
.LI "\*Lname\*O"
Each server's name is of type \*Ldced_string_t\*O.
.LI "\*Lentryname\*O"
The server's entry name is a hint as to where the server appears in
the namespace.  This is of type \*Ldced_string_t\*O.
.LI "\*Lservices\*O"
Each server offers a list of services specified in a list of type
\*Lservice_list_t\*O.  This structure has the following members:
.VL
.LI "\*Lcount\*O"
An \*Lunsigned32\*O number representing the number of services in the list.
.LI "\*Llist\*O"
A pointer to an array of services where each element is of type
\*Lservice_t\*O.
.LE
.LI "\*Lfixed\*O"
This is a set of attributes common to all DCE implementations.
The data type is \*Lserver_fixedattr_t\*O.
.LI "\*Lattributes\*O"
This field is of type \*Ldced_attr_list_t\*O and contains a list of
attributes representing the behavior specific to a particular server or host.
.LI "\*Lprin_names\*O"
This field is a list of principal names for the server and is of type
\*Ldced_string_list_t\*O.
.LI "\*Lexec_data\*O"
Data about an executing server is maintained in a tagged union 
(named \*Ltagged_union\*O) 
with a discriminator of type \*Lunsigned32\*O named \*Lexecstate\*O 
representing the server's execution state.
.PP
.ne 8
The union has the following two execution states:
.VL
.LI "\*Lserver_c_exec_notrunning\*O"
For the case where the server is not running, the union member has no value. 
For example:
.in -1i
.ps 9
.vs 13
.oS
if(server->exec_data.execstate == server_c_exec_notrunning)
    server->exec_data.tagged_union = NULL;
.oE
.ps 12
.vs 14
.in +1i
.LI "\*Lserver_c_exec_running\*O"
For the case where the server is running,
and the value of the union member is
a \*Lsrvrexec_data_t\*O data type named  \*Lrunning_data\*O.
A \*Lsrvrexec_data_t\*O structure contains the following members:
.VL
.LI "\*Linstance\*O"
Each instance of a server on a host is identified with a UUID 
(type \*Luuid_t\*O).
.LI "\*Lposix_pid\*O"
Each server has a POSIX process ID of type \*Lunsigned32\*O.
.LE
.LE
.LE
...\"
.LI "\*Lservice_t\*O"
This structure describes each service offered by a server.  
The \*Lserver_t\*O structure, described earlier, contains an array of
these structures.
The \*Lservice_t\*O structure contains the following fields:
.VL
.LI "\*Lifspec\*O"
An interface specification of type \*Lrpc_if_id_t\*O, generated by an
\*Lidl\*O compilation of the interface definition representing the service.
This data type is described in the \*Lrpc_intro(3rpc)\*O reference page.
.LI "\*Lifname\*O"
An interface name of type \*Ldced_string_t\*O.
.LI "\*Lannotation\*O"
An annotation about the purpose of the interface (type \*Ldced_string_t\*O).
This field is for user display purposes only.
.nL
.ne 7
.LI "\*Lflags\*O"
The flag field is of type \*Lunsigned32\*O and currently has only one
bit field defined, \*Lservice_c_disabled\*O.
If this flag is set, it indicates that the service is not currently
available for the server.  
Also, the \*Ldced\*O endpoint mapper will not map an
endpoint to a disabled service.
Several values are also reserved for vendor-specific use: 
.VL
.LI "\*Lservice_c_vendor1\*O"
.LI "\*Lservice_c_vendor2\*O"
.LI "\*Lservice_c_vendor3\*O"  
.LI "\*Lservice_c_vendor4\*O"
.LE
.LI "\*Lentryname\*O"
The entry name (type \*Ldced_string_t\*O) is a hint as to where this
service appears in the namespace.  If the value is NULL, the
value in the \*Lentryname\*O field of the \*Lserver_t\*O structure is used.
.LI "\*Lobjects\*O"
This is a list of objects supported by the service.  
The list is of type \*Luuid_list_t\*O.
.LI "\*Loperations\*O"
This is a list of operation numbers of type \*Ldced_opnum_list_t\*O.
This field is not currently used.
.LI "\*Ltowers\*O"
This is a list of protocol towers of type \*Ldced_tower_list_t\*O,
specifying the endpoints where this server can be reached.
.LE
...\"
...\"
.LI "\*Lsrvrexec_stop_method_t\*O"
The server execution stop method is an enumerated type with one of the 
following values:
.VL
.LI "\*Lsrvrexec_stop_rpc\*O"
Stops the running server gracefully by letting the server complete all
outstanding remote procedure calls.  
This causes \*Ldced\*O to invoke the
\*Lrpc_mgmt_server_stop_listening(\|)\*O routine in that server.
.LI "\*Lsrvrexec_stop_soft\*O"
This uses a system-specific mechanism such as the \*LSIGTERM\*O signal.
It stops the running server with a mechanism that the server can
ignore or intercept in order to do application-specific cleanup.
.LI "\*Lsrvrexec_stop_hard\*O"
This uses a system-specific mechanism such as the \*LSIGKILL\*O signal.
It stops the running server immediately with a mechanism that the
server cannot intercept.
.LI "\*Lsrvrexec_stop_error\*O"
This uses a system-specific mechanism such as the \*LSIGABRT\*O signal.
The local operating system captures the server's state before stopping
it, and the server can also intercept it.
.LE
...\"
...\"
.LI "\*Luuid_list_t\*O"
A list of UUIDs in the following format:
.VL
.LI "\*Lcount\*O"
An \*Lunsigned32\*O number representing the number of UUIDs in the list.
.LI "\*Llist\*O"
A pointer to an array of UUIDs where each element is of type
\*Luuid_t\*O.
.LE
.LE
.nL
.ne 1.5i
.SH "Files"
.VL
.LI "\*Ldce/dced_base.h\*O"
.LI "\*Ldce/dced.h\*O"
.LI "\*Ldce/dced_data.h\*O"
.LI "\*Ldce/rpctypes.idl\*O"
.LI "\*Ldce/passwd.idl\*O"
.LI "\*Ldce/sec_attr_base.idl\*O"
.LE
.SH "Related Information"
.PP
Functions: \*Ldced_\*V*\*O API.
.PP
Books:
\*(Dg
