...\" @OSF_COPYRIGHT@
...\" COPYRIGHT NOTICE
...\" Copyright (c) 1990, 1991, 1992, 1993, 1994 Open Software Foundation, Inc.
...\" ALL RIGHTS RESERVED (DCE).  See the file named COPYRIGHT.DCE for
...\" the full copyright text.
...\" HISTORY
...\" $Log: dce_svc_intro.3dce,v $
...\" Revision 1.1.4.1  1996/11/18  17:00:32  wardr
...\" 	{edit,R1.2.2}
...\" 	Init capped heads and added PDG pointer
...\" 	[1996/11/18  16:57:01  wardr]
...\"
...\" Revision 1.1.2.4  1995/06/21  13:19:45  buckler
...\" 	More 1.1 edits.
...\" 	[1995/06/19  15:31:03  buckler]
...\" 
...\" Revision 1.1.2.3  1995/05/31  17:05:51  buckler
...\" 	1.1 edits.
...\" 	PRENTICE HALL reformat.
...\" 	[1995/05/30  22:53:43  buckler]
...\" 
...\" Revision 1.1.2.2  1995/05/18  16:25:26  rcb
...\" 	PRENTICE HALL reformat: preliminary fiddling
...\" 	[1995/05/18  16:21:33  rcb]
...\" 
...\" Revision 1.1.2.1  1994/10/14  19:00:26  buckler
...\" 	{enh, 12204, R1.1}
...\" 	Created new intro page.
...\" 	[1994/10/14  19:00:02  buckler]
...\" 
...\" $EndLog$
.TH dce_svc_intro 3dce
.SH "Name"
\*Ldce_svc_intro\*O - Introduction to the DCE serviceability interface
.SH "Description"
The routines listed below are intended to be used by servers that export the
serviceability interface defined in \*Lservice.idl\*O.  The complete list of
these remote serviceability implementation calls is as follows (the remote
operation name is given in the left column, and the corresponding implementation
routine is given in the right column).
.PP
.TS
center,allbox,tab(@);
cb | cb
lb | lb.
Remote Operation@Implementation Routine
_
dce_svc_set_route@dce_svc_routing
dce_svc_set_dbg_route@dce_svc_debug_routing
dce_svc_set_dbg_levels@dce_svc_debug_set_levels
dce_svc_inq_components@dce_svc_components
dce_svc_inq_table@dce_svc_table
dce_svc_filter_control@dce_svc_filter
dce_svc_inq_stats@dce_svc_inq_stats
.TE
.sp .5
.PP
These routines perform all the necessary processing 
(except for checking clients' authorization) that must be 
done by the application manager to implement the
remote serviceability operations.
.PP
Note that most of these routines have little meaning except as implementations
of remote operations.  However, the \*Ldce_svc_routing(\|)\*O,
\*Ldce_svc_filter(\|)\*O, \*Ldce_svc_debug_routing(\|)\*O and 
\*Ldce_svc_debug_set_levels(\|)\*O routines can conceivably 
be used by servers as purely local 
operations (for example, in order to allow routing and debug levels 
to be set via command line flags when the server is invoked).
.PP
The \*Ldce_svc_log_\*O routines provide read access to \*LBINFILE\*O format
logs which are created and written by the DCE serviceability routines; see
\*Lsvcroute(5)\*O for further information.  The \*Ldce_svc_log_handle_t\*O
typedef is an opaque pointer to a handle for an opened log file.
.PP
.ne 8
Applications that use the serviceability interface can install a routine that
will be effectively hooked into the operation of the interface.  If a filter
is installed, it will be called whenever one of the serviceability
output routines (\*Ldce_svc_printf(\|)\*O) is about
to output a message; whenever this happens, 
the filter will receive a group of parameters that describe
the message that is about to be output and the circumstances that provoked the
action.  The filter can then allow the message output to proceed, or suppress the
message.
.PP
Along with the filter routine itself, the application also installs a filter
control routine, whose purpose is to permit the behavior of the filter to be
altered dynamically while the application is running. 
The \*Ldce_svc_filter(\|)\*O
routine is the interface's call-in to such an installed filter control.
.SS "The DCE Serviceability Routines"
.P
The serviceability routines are as follows, listed in alphabetical order:
.VL
.LI "\*Ldce_assert(\|)\*O"
Adds runtime ``can't happen'' assertions
to programs (such as, programming errors). 
.LI "\*Ldce_svc_components(\|)\*O"
Returns an array containing the 
names of all components in the program that have been registered with the 
\*Ldce_svc_register(\|)\*O routine.
.LI "\*Ldce_svc_debug_routing(\|)\*O"
Specifies both the level of an
applications's serviceability debug messaging, 
and where the messages are routed.
.LI "\*Ldce_svc_debug_set_levels(\|)\*O"
Sets serviceability debugging message level(s) for a component. 
.LI "\*Ldce_svc_define_filter(\|)\*O"
Lets applications define serviceability filtering routines.
.LI "\*Ldce_svc_filter(\|)\*O"
Controls the behavior of the serviceability message filtering routine, 
if one exists.
.LI "\*Ldce_svc_log_close(\|)\*O"
Closes an open binary format serviceability log and 
releases all internal state associated with the handle.
.LI "\*Ldce_svc_log_get(\|)\*O"
Reads the next entry from a binary format serviceability log. 
.LI "\*Ldce_svc_log_open(\|)\*O"
Opens the specified file for reading. 
.LI "\*Ldce_svc_log_rewind(\|)\*O"
Rewinds the current reading position
of the specified (by \*Vhandle\*O) log file to the first record.
.LI "\*Ldce_svc_printf(\|)\*O"
Provides the normal call for writing or displaying
serviceability messages. 
.LI "\*Ldce_svc_register(\|)\*O"
Registers a serviceability handle and subcomponent table. 
.LI "\*Ldce_svc_routing(\|)\*O"
Specifies how normal (non-debug) serviceability messages are routed. 
.LI "\*Ldce_svc_set_progname(\|)\*O"
If not called, the application's generated
serviceability messages will be identified by its process ID.
.LI "\*Ldce_svc_table(\|)\*O"
Returns the serviceability subcomponent table
registered with the specified component. 
.LI "\*Ldce_svc_unregister(\|)\*O"
Destroys a serviceability handle, releasing
all allocated resources associated with the handle.
.LE
.SS "Data Types and Structures"
.VL
.LI "\*Ldce_svc_filter_proc_t\*O"
The prototype of a serviceability filtering routine.
.LI "\*Ldce_svc_filterctl_proc_t\*O"
The prototype of a serviceability filter-control routine.
.LI "\*Ldce_svc_handle_t\*O"
An opaque handle to generate serviceability messages.  
(Use \*Ldce_svc_register(\|)\*O or \*LDCE_DEFINE_SVC_HANDLE\*O
to obtain one.)
.LI "\*Ldce_svc_log_handle_t\*O"
An opaque handle to an open serviceability binary format log file.
(Use \*Ldce_svc_log_open(\|)\*O to obtain one.)
.LI "\*Ldce_svc_log_prolog_t\*O"
A structure containing data about a serviceability binary format log
entry.
.LI "\*Ldce_svc_prolog_t\*O"
A structure containing the initial message parameters passed to
the filtering routine.
.LE
.SH "Files"
.VL
.LI "\*Ldce/service\.idl\*O"
.LI "\*Ldce/dce_svc\.h\*O"
.LE
.SH "Related Information"
Books:
\*(Dg
