...\" @OSF_COPYRIGHT@
...\" COPYRIGHT NOTICE
...\" Copyright (c) 1990, 1991, 1992, 1993, 1994 Open Software Foundation, Inc.
...\" ALL RIGHTS RESERVED (DCE).  See the file named COPYRIGHT.DCE for
...\" the full copyright text.
...\" 
...\" 
...\" HISTORY
...\" $Log: thr_intro.3thr,v $
...\" Revision 1.1.5.1  1996/11/19  20:26:14  wardr
...\" 	{edit,R1.2.2}
...\" 	Init capped heads
...\" 	[1996/11/19  20:24:25  wardr]
...\"
...\" Revision 1.1.2.6  1995/06/21  13:23:16  buckler
...\" 	More 1.1 edits.
...\" 	[1995/06/19  17:30:47  buckler]
...\" 
...\" Revision 1.1.2.5  1995/06/09  16:22:44  buckler
...\" 	1.1 edits and Prentice Hall reformat
...\" 	[1995/06/09  16:18:13  buckler]
...\" 
...\" Revision 1.1.2.4  1994/10/21  17:34:11  hileman
...\" 	Fixed problem with table breaks.
...\" 	[1994/10/21  17:33:52  hileman]
...\" 
...\" Revision 1.1.2.3  1994/09/30  17:59:41  weir
...\" 	(Defect, 9772, R1.1)
...\" 	Corrected miscellaneous errors
...\" 	[1994/09/30  17:57:24  weir]
...\" 
...\" Revision 1.1.2.2  1994/06/13  17:10:38  devobj
...\" 	cr10872 - fix copyright
...\" 	[1994/06/13  16:50:53  devobj]
...\" 
...\" Revision 1.1.2.1  1994/04/11  20:37:12  rom
...\" 	{def, 10326, R1.1}
...\" 	Rename intro.3thr to thr_intro.3thr.
...\" 	[1994/04/11  19:56:49  rom]
...\" 
...\" $EndLog$
...\"
...\" Copyright 1991, Open Software Foundation, Inc.  ALL RIGHTS RESERVED.
...\" ********************************************************************
...\"                                                                    *
...\" COPYRIGHT (c) 1991 BY DIGITAL EQUIPMENT CORPORATION,               *
...\" Maynard, Massachusetts                                             *
...\" All Rights Reserved.                                               *
...\"                                                                    *
...\" This document is furnished under a license and may be used and     *
...\" copied only in accordance with the terms of such license and with  *
...\" the inclusion of the above copyright notice.  No title to or        *
...\" ownership of the document is hereby transferred.                   *
...\"                                                                    *
...\" The information in this document is subject to change without      *
...\" notice and should not be construed as a commitment by Digital      *
...\" Equipment Corporation.                                             *
...\"                                                                    *
...\" ********************************************************************
...\".nr H1 1
.TH thr_intro 3thr
.SH "Name"
\*Lthr_intro\*O - Introduction to DCE Threads
.SH "Description"
DCE Threads is a set of routines that you can call to create a
multithreaded program.  Multithreading is used to improve the performance of
a program.  Routines implemented by DCE Threads that are not specified
by Draft 4 of the POSIX 1003.4a standard are indicated by an \*L_np\*O
suffix on the name.  These routines are new primitives.
.iX "new primitive routines"
.iX "non-portable routines"
.iX "np suffix"
.iX "suffix" "np"
.PP
The threads routines sort alphabetically in the reference pages;
however, the tables in this introduction list the routines in the following
functional groups:
.ad l
.ML
.LI
Threads routines
...\" 
.LI
Routines that implicitly initialize threads package
...\" 
.LI
Attributes object routines
.LI
Mutex routines
.LI
Condition variable routines
.LI
Thread-specific data routines
.LI
Threads cancellation routines
.LI
Threads priority and scheduling routines
.LI
Cleanup routines
.LI
The \*Latfork(\|)\*O routine
...\" .LI
...\" The \*Lexceptions(\|)\*O Routine
.LI
Signal handling routines
...\" 
...\" .LI
...\" Data Types
...\" 
.LE
...\" .TB "Threads Routines"
.ad b
.nL
.ne 4.0i
.TS
center tab (@) allbox;
cB s
lB | lB
lB | l.
Threads Routines
_
Routine@Description
_
pthread_create(\|)@T{
Creates a thread
T}
pthread_delay_np(\|)\ @T{
Causes a thread to wait for a period of time
T}
pthread_detach(\|)\ @T{
Marks a thread for deletion
T}
pthread_equal(\|)\ @T{
Compares one thread identifier to another thread identifier
T}
pthread_exit(\|)\ @T{
Terminates the calling thread
T}
pthread_join(\|)\ @T{
Causes the calling thread to wait for the termination of a specified thread
T}
pthread_once(\|)\ @T{
Calls an initialization routine to be executed only once
T}
pthread_self(\|)\ @T{
Obtains the identifier of the current thread
T}
pthread_yield(\|)\ @T{
Notifies the scheduler that the current thread
will release its processor to other threads of the same or higher priority
T}
.TE
.ad b
...\" 
...\" 
...\" 
...\" 
.sp
...\" 
.PP
The following DCE Threads routines will, when called, implicitly perform
any necessary initialization of the threads package.  Thus any application
using DCE Threads should call one of the following routines before calling
any other threads routines, in order to ensure that the package is properly
initialized.
.PP
...\" 
...\" 
...\" .TB "Routines that Cause Initialization"
.ne 6.0i
.TS
center tab (@) allbox;
cB s
lB | lB
lB | l.
Routines that Implicitly Perform Threads Initialization
_
Routine@Description
_
pthread_attr_create(\|)\ @T{
Creates a thread attributes object
T}
pthread_create(\|)\ @T{
Creates a thread
T}
pthread_self(\|)\ @T{
Obtains the identifier of the current thread
T}
pthread_setprio(\|)\ @T{
Changes the scheduling priority attribute
T}
pthread_getprio(\|)\ @T{
Obtains the scheduling priority attribute
T}
pthread_setscheduler(\|)\ @T{
Changes the scheduling policy attribute
T}
pthread_getscheduler(\|)\ @T{
Obtains the scheduling policy attribute
T}
pthread_once(\|)\ @T{
Calls an initialization routine to be executed only once
T}
pthread_keycreate(\|)\ @T{
Generates a unique thread-specific data key value
T}
pthread_mutexattr_create(\|)\ @T{
Creates a mutex attributes object
T}
pthread_mutex_init(\|)\ @T{
Creates a mutex
T}
pthread_condattr_create(\|)\ @T{
Creates a condition variable attributes object
T}
pthread_cond_init(\|)\ @T{
Creates a condition variable
T}
pthread_testcancel(\|)\ @T{
Requests delivery of a pending cancel
T}
pthread_setcancel(\|)\ @T{
Enables or disables the current thread's general cancelability
T}
pthread_setasynccancel(\|)\ @T{
Enables or disables the current thread's asynchronous cancel\%ability
T}
pthread_delay_np(\|)\ @T{
Causes a thread to wait for a period of time
T}
.TE
.ad b
...\" 
...\" 
...\" 
...\" 
...\" 
.sp
.ne 4.5i
...\" .TB "Attributes Object Routines"
.ad l
.in -.5i
.TS
center tab (@) allbox;
cB s
lB | lB
lB | l.
Attributes Object Routines
_
Routine@Description
_
pthread_attr_create(\|)@T{
Creates a thread attributes object
T}
pthread_attr_delete(\|)@T{
Deletes a thread attributes object
T}
pthread_attr_getinheritsched(\|)@T{
Obtains the inherit scheduling attribute
T}
pthread_attr_getprio(\|)@T{
Obtains the scheduling priority attribute
T}
pthread_attr_getsched(\|)@T{
Obtains the scheduling policy attribute
T}
pthread_attr_getstacksize(\|)@T{
Obtains the stacksize attribute
T}
pthread_attr_setinheritsched(\|)@T{
Changes the inherit scheduling attribute
T}
pthread_attr_setprio(\|)@T{
Changes the scheduling priority attribute
T}
pthread_attr_setsched(\|)@T{
Changes the scheduling policy attribute
T}
pthread_attr_setstacksize(\|)@T{
Changes the stacksize attribute
T}
pthread_condattr_create(\|)@Creates a condition variable attributes object
pthread_condattr_delete(\|)@T{
Deletes a condition variable attributes
object
T}
pthread_mutexattr_create(\|)@T{
Creates a mutex attributes object
T}
pthread_mutexattr_delete(\|)@T{
Deletes a mutex attributes object
T}
pthread_mutexattr_getkind_np(\|)@T{
Obtains the mutex type attribute
T}
pthread_mutexattr_setkind_np(\|)@T{
Changes the mutex type attribute
T}
.TE
.in
.ad b
.sp
.ne 3.5i
...\" .TB "Mutex Routines"
.ad l
.TS
center tab (@) allbox;
cB s
lB | lB
lB | l.
Mutex Routines
_
Routine@Description
_
pthread_lock_global_np(\|)\ @Locks a global mutex
pthread_mutex_destroy(\|)\ @Deletes a mutex
pthread_mutex_init(\|)\ @Creates a mutex
pthread_mutex_lock(\|)\ @T{
Locks a mutex and waits if the mutex is already locked
T}
pthread_mutex_trylock(\|)\ @T{
Locks a mutex and returns if the mutex is already locked
T}
pthread_mutex_unlock(\|)\ @Unlocks a mutex
pthread_unlock_global_np(\|)\ @Unlocks a global mutex
.TE
.ad b
.sp 3
.ne 2i
...\" .TB "Condition Variable Routines"
.ad l
.TS
center tab (@) allbox;
cB s
lB | lB
lB | l.
Condition Variable Routines
_
Routine@Description
_
pthread_cond_broadcast(\|)@T{
Wakes all threads waiting on a condition variable
T}
pthread_cond_destroy(\|)@Deletes a condition variable
pthread_cond_init(\|)@Creates a condition variable
pthread_cond_signal(\|)@T{
Wakes one thread waiting on a condition variable
T}
pthread_cond_timedwait(\|)@T{
Causes a thread to wait for a specified period of time for a
condition variable to be signaled or broadcast
T}
pthread_cond_wait(\|)@T{
Causes a thread to wait for a condition variable to be signaled or
broadcast
T}
pthread_get_expiration_np(\|)@T{
Obtains a value representing a desired expiration time
T}
.TE
.ad b
.sp 2
.ne 2i
...\" .TB "Thread-Specific Data"
.ad l
.TS
center tab (@) allbox;
cB s
lB | lB
lB | l.
Thread-Specific Data
_
Routine@Description
_
pthread_getspecific(\|)@T{
Obtains the thread-specific data associated with the specified key
T}
pthread_keycreate(\|)@T{
Generates a unique thread-specific data key value
T}
pthread_setspecific(\|)@T{
Sets the thread-specific data associated with
the specified key
T}
.TE
.ad b
.sp 2
.ne 3.0i
...\" .TB "Threads Cancellation Routines"
.ad l
.TS
center tab (@) allbox;
cB s
lB | lB
lB | l.
Threads Cancellation Routines
_
Routine@Description
_
pthread_cancel(\|)@T{
Allows a thread to request termination
T}
pthread_setasynccancel(\|)@T{
Enables or disables the current thread's asynchronous cancelability
T}
pthread_setcancel(\|)@T{
Enables or disables the current thread's general cancelability
T}
pthread_signal_to_cancel_np(\|)@T{
Cancels a thread if a signal is received by the process
T}
pthread_testcancel(\|)@T{
Requests delivery of a pending cancel
T}
.TE
.ad b
.sp 2
.ne 3.5i
...\" .TB "Threads Priority and Scheduling Routines"
.ad l
.TS
center tab (@) allbox;
cB s
lB | lB
lB | l.
Threads Priority and Scheduling Routines
_
Routine@Description
_
pthread_getprio(\|)@T{
Obtains the current priority of a thread
T}
pthread_getscheduler(\|)@T{
Obtains the current scheduling policy of a thread
T}
pthread_setprio(\|)@T{
Changes the current priority of a thread
T}
pthread_setscheduler(\|)@T{
Changes the current scheduling policy and priority of a thread
T}
.TE
.ad b
.sp 2
.ne 1.5i
...\" .TB "Cleanup Routines"
.ad l
.TS
center tab (@) allbox;
cB s
lB | lB
lB | l.
Cleanup Routines
_
Routine@Description
_
pthread_cleanup_pop(\|)\ @Removes a cleanup handler from the stack
pthread_cleanup_push(\|)\ @Establishes a cleanup handler
.TE
.ad b
.sp 2
.ne 1.5i
...\" .TB "The atfork(\|) Routine"
.TS
center tab (@) allbox;
cB s
lB | lB.
The atfork(\|) Routine
_
Routine@Description
_
.T&
lB | l.
atfork(\|)\ @Arranges for fork cleanup handling
.TE
.sp 2
.ne 1.5i
...\" .TB "Exceptions in DCE Threads"
...\" .TS
...\" center tab (@) box;
...\" cB s
...\" lB | lB.
...\" Exceptions in DCE Threads
...\" _
...\" Routine@Description
...\" _
...\" .T&
...\" lB | l.
...\" exceptions(\|)\ @Describes exception handling in DCE Threads
...\" .TE
...\" 
...\" 
.TS
center tab (@) allbox;
cB s
lB | lB
lB | l.
Signal Handling Routines
_
Routine@Description
_
sigaction(\|)\ @Specifies action to take on receipt of signal
sigpending(\|)\ @Examines pending signals
sigprocmask(\|)\ @Sets the current signal mask
sigwait(\|)\ @Causes thread to wait for asynchronous signal
.TE
