...\"
...\"  @OSF_COPYRIGHT@
...\"  COPYRIGHT NOTICE
...\"  Copyright (c) 1990, 1991, 1992, 1993 Open Software Foundation, Inc.
...\"  ALL RIGHTS RESERVED (DCE).  See the file named COPYRIGHT.DCE in the
...\"  src directory for the full copyright text.
...\"
...\"
...\" HISTORY
...\" $Log: utc_cmpintervaltime.3dts,v $
...\" Revision 1.1.9.1  1996/11/18  20:57:26  wardr
...\" 	{edit,R1.2.2}
...\" 	Init capped section heads
...\" 	[1996/11/18  20:56:26  wardr]
...\"
...\" Revision 1.1.7.6  1995/06/21  13:19:59  buckler
...\" 	More 1.1 edits.
...\" 	[1995/06/20  15:40:51  buckler]
...\" 
...\" 	More 1.1 edits.
...\" 	[1995/06/19  15:39:44  buckler]
...\" 
...\" Revision 1.1.7.5  1995/05/31  21:01:09  buckler
...\" 	No change
...\" 	[1995/05/31  20:57:37  buckler]
...\" 
...\" 	1.1 edits.
...\" 	PRENTICE HALL reformat.
...\" 	[1995/05/31  20:46:45  buckler]
...\" 
...\" Revision 1.1.7.4  1993/01/26  17:48:22  cjd
...\" 	Embedded copyright notice
...\" 	[1993/01/26  17:14:47  cjd]
...\" 
...\" Revision 1.1.7.3  1992/12/28  21:19:45  d_kenney
...\" 	Changes made: Delete 'const'
...\" 	Filename: app_ref/man3dts/utc_cmpintervaltime.3dts
...\" 	Change Request Number: 3504
...\" 	[1992/12/28  21:19:10  d_kenney]
...\" 
...\" Revision 1.1.7.2  1992/10/01  18:51:42  weir
...\" 	Removed change bars; moved into 1.0.2doc tree
...\" 	[1992/10/01  18:36:00  weir]
...\" 
...\" 	For P/H, now and forever!
...\" 	[1992/09/16  14:38:44  oaf]
...\" 
...\" Revision 1.1.5.3  1992/09/16  18:25:51  oaf
...\" 	*** empty log message ***
...\" 
...\" Revision 1.1.5.2  1992/08/04  15:46:23  lmk
...\" 	Made Prentice-Hall editorial changes only
...\" 	[1992/08/04  15:39:06  lmk]
...\" 
...\" Revision 1.1.2.4  1992/06/02  15:36:09  buckler
...\" 	Reinstated change bar codes
...\" 	[1992/06/02  15:25:16  buckler]
...\" 
...\" Revision 1.1.2.3  1992/05/20  17:32:41  buckler
...\" 	Editorial review
...\" 	[1992/05/20  17:25:35  buckler]
...\" 
...\" Revision 1.1.2.2  1992/05/08  12:32:12  h_hoff
...\" 	<<<
...\" 	<<< CR2839 -- Add sentence about NULL argument >>>
...\" 	<<< CR2839 -- EXAMPLE, internationalize time reference, 4 places >>>
...\" 	[1992/05/08  12:31:12  h_hoff]
...\" 
...\" Revision 1.1  1992/01/29  15:22:11  damon
...\" 	Initial revision
...\" 
...\" $EndLog$
...\"
...\" (c) Copyright 1991, Open Software Foundation, Inc.  ALL RIGHTS RESERVED
...\"   HISTORY COMMENTS:
...\"
...\"   DATE:                            COMMENT:
...\"
...\"	Fri Oct 25, 1991                 Initial File Submission for final
...\"                                    integration at IBM
...\"
...\" ********************************************************************
...\"                                                                    *
...\" COPYRIGHT (c) 1991 BY DIGITAL EQUIPMENT CORPORATION,               *
...\" Maynard, Mass.                                                     *
...\"                                                                    *
...\" This document is furnished under a license and may be used and     *
...\" copied only in accordance with the terms of such license and with  *
...\" the inclusion of the above copyright notice.  No title to or       *
...\" ownership of the document is hereby transferred.                   *
...\"                                                                    *
...\" The information in this document is subject to change without      *
...\" notice and should not be construed as a commitment by Digital      *
...\" Equipment Corporation.                                             *
...\"                                                                    *
...\" ********************************************************************
.TH utc_cmpintervaltime 3dts
...\" .iX "\*Lutc_cmpintervaltime(\|)\*O"
.iX "\*LCompare Interval Time\*O"
.SH "Name"
\*Lutc_cmpintervaltime\*O - Compares two binary timestamps or two relative
binary timestamps
.SH "Synopsis"
.sS
\*L#include <dce/utc.h>
.sp .4v
\*Lint utc_cmpintervaltime(
.nL
	\*Lenum utc_cmptype *\*Vrelation\*L,
.nL
	\*Lutc_t *\*Vutc1\*L,
.nL
	\*Lutc_t *\*Vutc2\*L);
.sE
.nL
.ne 1.5i
.SH "Parameters"
.SS "Input"
.VL
.LI "\*Vutc1\*O"
Binary timestamp or relative binary timestamp.  Use NULL if you want this
routine to use the current time for this parameter.
.LI "\*Vutc2\*O"
Binary timestamp or relative binary timestamp.  Use NULL if you want this
routine to use the current time for this parameter.
.LE
.SS "Output"
.VL
.LI "\*Vrelation\*O"
Receives the result of the comparison of \*Vutc1\*O:\*Vutc2\*O where the result
is an enumerated type with one of the following values:
.ad l
.ML
.LI
\*Lutc_equalTo\*O
.LI
\*Lutc_lessThan\*O
.LI
\*Lutc_greaterThan\*O
.LI
\*Lutc_indeterminate\*O
.LE
.ad b
.LE
.nL
.ne 1.5i
.SH "Description"
.PP
The \*Lutc_cmpintervaltime(\|)\*O routine compares two binary timestamps and
returns a flag indicating that the first time is greater than, less than,
equal to, or overlapping with the second time.  Two times overlap if the
intervals (\*Vtime\*O \(mi \*Vinaccuracy\*O, \*Vtime\*O \(pl \*Vinaccuracy\*O) of the two times
intersect.
.PP
The input binary timestamps express two absolute or
two relative times.  Do \*Enot\*O
compare relative binary timestamps to absolute binary timestamps.  If you do,
no meaningful results and no errors are returned.
.PP
The following routine does a temporal ordering of the time intervals.
.oS
utc1 is utc_lessThan utc2 iff
        utc1.time + utc1.inacc < utc2.time - utc2.inacc

utc1 is utc_greaterThan utc2 iff
        utc1.time - utc1.inacc > utc2.time + utc2.inacc

utc1 utc_equalTo utc2 iff
        utc1.time == utc2.time and
        utc1.inacc == 0 and
        utc2.inacc == 0

.oE
\*Lutc1\*O is \*Lutc_indeterminate\*O with respect to \*Lutc2\*O if the intervals
overlap.
.nL
.ne 1.5i
.SH "Return Values"
.VL
.LI "\00"
Indicates that the routine executed successfully.
.LI "\|-1"
Indicates an invalid time argument.
.LE
.nL
.ne 1.5i
.SH "Examples"
.PP
The following example checks to see if the current time is definitely after
13:00 local time.
.sp .5
.ps 11
.vs 13
.oS
struct tm           tmtime, tmzero;
enum utc_cmptype    relation;
utc_t               testtime;

/*   Zero the tm structure for inaccuracy...
 */
memset(&tmzero, 0, sizeof(tmzero));

/*  Get the current time, mapped to a tm structure...
 *
 *        NOTE: The NULL argument is used to get the current time.
 */
utc_gmtime(&tmtime,         /* Out: Current GMT time in tm struct   */
           (long *)0,       /* Out: Nanoseconds of time             */
           (struct tm *)0,  /* Out: Current inaccuracy in tm struct */
           (long *)0,       /* Out: Nanoseconds of inaccuracy       */
           (utc_t *)0);     /* In:  Current timestamp               */

/*   Alter the tm structure to correspond to 13:00 local time       */
 */

tmtime.tm_hour = 13;
tmtime.tm_min = 0;
tmtime.tm_sec = 0;

/*  Convert to a binary timestamp...
 */
utc_mkgmtime(&testtime,     /* Out: Binary timestamp of 13:00       */
             &tmtime,       /* In:  1:00 PM in tm struct            */
             0,             /* In:  Nanoseconds of time             */
             &tmzero,       /* In:  Zero inaccuracy in tm struct    */
             0);            /* In:  Nanoseconds of inaccuracy       */

/*   Compare to the current time. Note the use of the NULL argument */
 */
utc_cmpintervaltime(&relation,    /* Out: Comparison relation       */
                    (utc_t *)0,   /* In:  Current timestamp         */
                    &testtime);   /* In:  13:00 PM timestamp        */

/*   If it is not later - wait, print a message, etc.
 */

if (relation != utc_greaterThan) {

/*
 *     Note: It could be earlier than 13:00 local time or it could be
 *           indeterminate.  If indeterminate, for some applications
 *           it might be worth waiting.
 */
}
.oE
.ps 12
.vs 13
.nL
.ne .8i
.SH "Related Information"
.ad l
.PP
Functions: \*Lutc_cmpmidtime(3dts)\*O.
.ad b
