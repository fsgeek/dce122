...\" @OSF_COPYRIGHT@
...\" COPYRIGHT NOTICE
...\" Copyright (c) 1990, 1991, 1992, 1993, 1994 Open Software Foundation, Inc.
...\" ALL RIGHTS RESERVED (DCE).  See the file named COPYRIGHT.DCE for
...\" the full copyright text.
...\" 
...\" 
...\" HISTORY
...\" $Log: dts_intro.3dts,v $
...\" Revision 1.1.4.1  1996/11/18  20:57:10  wardr
...\" 	{edit,R1.2.2}
...\" 	Init capped section heads
...\" 	[1996/11/18  20:56:15  wardr]
...\"
...\" Revision 1.1.2.7  1995/06/21  13:19:52  buckler
...\" 	More 1.1 edits.
...\" 	[1995/06/20  15:19:19  buckler]
...\" 
...\" 	More 1.1 edits.
...\" 	[1995/06/19  15:38:28  buckler]
...\" 
...\" Revision 1.1.2.6  1995/06/15  19:23:13  rcb
...\" 	fixed figure file ref for 2-volume inclusion
...\" 	[1995/06/15  19:23:05  rcb]
...\" 
...\" Revision 1.1.2.5  1995/05/31  21:01:00  buckler
...\" 	No change
...\" 	[1995/05/31  20:56:55  buckler]
...\" 
...\" 	1.1 edits
...\" 	PRENTICE HALL reformat
...\" 	[1995/05/31  20:46:30  buckler]
...\" 
...\" Revision 1.1.2.4  1994/11/03  23:45:15  neilson
...\" 	Substituted macros for book names in cross refs.
...\" 	[1994/11/03  01:39:27  neilson]
...\" 
...\" Revision 1.1.2.3  1994/06/13  17:03:46  devobj
...\" 	cr10872 - fix copyright
...\" 	[1994/06/13  16:47:31  devobj]
...\" 
...\" Revision 1.1.2.2  1994/05/16  15:12:05  willie
...\" 	{edit, R1.1}
...\" 	Commented out .nr 1, since it was breaking the SGML conversion.
...\" 	[1994/05/16  15:11:45  willie]
...\" 
...\" Revision 1.1.2.1  1994/04/11  20:36:59  rom
...\" 	{def, 10326, R1.1}
...\" 	Rename time_intro.3dts to dts_intro.3dts.
...\" 	[1994/04/11  19:45:50  rom]
...\" 
...\" $EndLog$
...\"
...\" (c) Copyright 1991, Open Software Foundation, Inc.  ALL RIGHTS RESERVED
...\"   HISTORY COMMENTS:
...\"
...\"   DATE:                            COMMENT:
...\"
...\"	Fri Oct 25, 1991                 Initial File Submission for final
...\"                                    integration at IBM
...\"
...\" ********************************************************************
...\"                                                                    *
...\" COPYRIGHT (c) 1991 BY DIGITAL EQUIPMENT CORPORATION,               *
...\" Maynard, Mass.                                                     *
...\"                                                                    *
...\" This document is furnished under a license and may be used and     *
...\" copied only in accordance with the terms of such license and with  *
...\" the inclusion of the above copyright notice.  No title to or       *
...\" ownership of the document is hereby transferred.                   *
...\"                                                                    *
...\" The information in this document is subject to change without      *
...\" notice and should not be construed as a commitment by Digital      *
...\" Equipment Corporation.                                             *
...\"                                                                    *
...\" ********************************************************************
...\" .nr 1
.TH dts_intro 3dts
...\" .iX "\*Lintro(3dts)\*O"
.SH "Name"
\*Ldts_intro\*O - Introduction to DCE Distributed Time Service (DTS)
.SH "Description"
The DCE Distributed Time Service programming routines can obtain
timestamps that are based on Coordinated Universal Time (UTC), translate
between different timestamp formats, and perform calculations on
timestamps.  Applications can call the DTS routines from server or clerk systems
and use the timestamps that DTS supplies to determine event sequencing,
duration, and scheduling.
.PP
The DTS routines can perform the following basic functions:
.ad l
.ML
.LI
Retrieve the current (UTC-based) time from DTS.
.LI
Convert binary timestamps expressed in the \*Lutc\*O time structure to or from
\*Ltm\*O structure components.
.LI
Convert the binary timestamps expressed in the \*Lutc\*O time structure to or
from \*Ltimespec\*O structure components.
.LI
Convert the binary timestamps expressed in the \*Lutc\*O time structure to or
from ASCII strings.
.LI
Compare two binary time values.
.LI
Calculate binary time values.
.LI
Obtain time zone information.
.LE
.ad b
.PP
DTS can convert between several types of binary time structures that are
based on different calendars and time unit measurements.  DTS uses UTC-based
time structures, and can convert other types of time structures to its own
presentation of UTC-based time.
.PP
Absolute time is
an interval
on a time scale; absolute time measurements are
derived from system clocks or external time-providers.  For DTS, absolute times
reference the UTC standard and include the inaccuracy and other information.
When you display an absolute time, DTS converts the time to ASCII text, as
shown in the following display:
.oS
1992-11-21-13:30:25.785-04:00I000.082
.oE
Relative time is a discrete time interval that is often added to or
subtracted from an absolute time.  A TDF associated with an absolute time is one
example of a relative time.  Note that a relative time does not use the
calendar date fields, since these fields concern absolute time.
.PP
UTC is the international time standard that DTS
uses.  The zero hour of UTC is based on the zero hour of Greenwich Mean Time
(GMT).  The documentation consistently refers to the time zone of the Greenwich
Meridian as GMT.  However, this time zone is also sometimes referred to as UTC.
.PP
The Time Differential Factor (TDF) is the difference between UTC and the time
in a particular time zone.
.PP
The user's environment determines the time zone rule (details are system
dependent).  For example, on OSF/1 systems, the user selects a time zone
by specifying the \*LTZ\*O
environment variable. (The reference information for the
\*Llocaltime(\|)\*O system call, which is described in the
\*Lctime(3)\*O reference page, provides additional information.)
.PP
If the user's environment does not specify a time zone rule, the system's rule
is used (details of the rule are system dependent).  For example, on OSF/1
systems, the rule in \*L/etc/zoneinfo/localtime\*O applies.
.PP
The \*(Dg provides
additional information about UTC and GMT, TDF and time zones, and relative and
absolute times.
.PP
Unless otherwise specified, the default input and
output parameters are as
follows:
.ad l
.ML
.LI
If NULL is
specified for a \*Vutc\*O input parameter, the current time is used.
.LI
If NULL is specified for any output parameter,
no result is returned.
.LE
.ad b
.if t \{ .PP
.ne 6.15i
The following illustration categorizes the DTS portable interface routines
by function.
.PP
.pI ../app_ref/man3dts/figures/1_routines_by_function_10_dts.ps 0 0 1
.in \}
.sp .5
.PP
An alphabetical listing of the DTS portable interface routines and a brief
description of each one follows:
.VL
.LI "\*Lutc_abstime(\|)\*O"
Computes the absolute value of a relative binary timestamp.
.LI "\*Lutc_addtime(\|)\*O"
Computes the sum of two binary timestamps; the timestamps can be two relative
times or a relative time and an absolute time.
.nL
.ne 5
.LI "\*Lutc_anytime(\|)\*O"
Converts a binary timestamp to a \*Ltm\*O structure by using the TDF
information contained in the timestamp to determine the TDF returned with the
\*Ltm\*O structure.
.LI "\*Lutc_anyzone(\|)\*O"
Gets the time zone label and offset from GMT by using the TDF contained in the
\*Vutc\*O input parameter.
.LI "\*Lutc_ascanytime(\|)\*O"
Converts a binary timestamp to an ASCII string that represents an arbitrary
time zone.
.LI "\*Lutc_ascgmtime(\|)\*O"
Converts a binary timestamp to an ASCII string that expresses a GMT time.
.LI "\*Lutc_asclocaltime(\|)\*O"
Converts a binary timestamp to an ASCII string that represents a local time.
.LI "\*Lutc_ascreltime(\|)\*O"
Converts a relative binary timestamp to an ASCII string that represents the
time.
.LI "\*Lutc_binreltime(\|)\*O"
Converts a relative binary timestamp to two \*Ltimespec\*O structures that
express relative time and inaccuracy.
.LI "\*Lutc_bintime(\|)\*O"
Converts a binary timestamp to a \*Ltimespec\*O structure.
.LI "\*Lutc_boundtime(\|)\*O"
Given two UTC times, one before and one after an event, returns a single
UTC time whose inaccuracy includes the event.
.LI "\*Lutc_cmpintervaltime(\|)\*O"
Compares two binary timestamps or two relative binary timestamps.
.LI "\*Lutc_cmpmidtime(\|)\*O"
Compares two binary timestamps or two relative binary timestamps, ignoring
inaccuracies.
.LI "\*Lutc_gettime(\|)\*O"
Returns the current system time and inaccuracy as a binary timestamp.
.LI "\*Lutc_getusertime(\|)\*O"
Returns the time and process-specific TDF, rather than the system-specific TDF.
.LI "\*Lutc_gmtime(\|)\*O"
Converts a binary timestamp to a \*Ltm\*O structure that expresses GMT or the
equivalent UTC.
.LI "\*Lutc_gmtzone(\|)\*O"
Gets the time zone label for GMT.
.LI "\*Lutc_localtime(\|)\*O"
Converts a binary timestamp to a \*Ltm\*O structure that expresses local time.
.LI "\*Lutc_localzone(\|)\*O"
Gets the local time zone label and offset from GMT, given \*Lutc\*O.
.LI "\*Lutc_mkanytime(\|)\*O"
Converts a \*Ltm\*O structure and TDF (expressing the time in an arbitrary
time zone) to a binary timestamp.
.LI "\*Lutc_mkascreltime(\|)\*O"
Converts a NULL-terminated character string that represents a relative
timestamp to a binary timestamp.
.LI "\*Lutc_mkasctime(\|)\*O"
Converts a NULL-terminated character string that represents an absolute
timestamp to a binary timestamp.
.LI "\*Lutc_mkbinreltime(\|)\*O"
Converts a \*Ltimespec\*O structure expressing a relative time to a binary
timestamp.
.LI "\*Lutc_mkbintime(\|)\*O"
Converts a \*Ltimespec\*O structure to a binary timestamp.
.LI "\*Lutc_mkgmtime(\|)\*O"
Converts a \*Ltm\*O structure that expresses GMT or UTC to a binary
timestamp.
.LI "\*Lutc_mklocaltime(\|)\*O"
Converts a \*Ltm\*O structure that expresses local time to a binary timestamp.
.LI "\*Lutc_mkreltime(\|)\*O"
Converts a \*Ltm\*O structure that expresses relative time to a relative binary
timestamp.
.LI "\*Lutc_mulftime(\|)\*O"
Multiplies a relative binary timestamp by a floating-point value.
.LI "\*Lutc_multime(\|)\*O"
Multiplies a relative binary timestamp by an integer factor.
.LI "\*Lutc_pointtime(\|)\*O"
Converts a binary timestamp to three binary timestamps that represent the
earliest, most likely, and latest time.
.LI "\*Lutc_reltime(\|)\*O"
Converts a relative binary timestamp to a \*Ltm\*O structure.
.LI "\*Lutc_spantime(\|)\*O"
Given two (possibly unordered) binary timestamps, returns a single UTC time
interval whose inaccuracy spans the two input binary timestamps.
.LI "\*Lutc_subtime(\|)\*O"
Computes the difference between two binary timestamps that express either an
absolute time and a relative time, two relative times, or two absolute times.
.LE
.nL
.ne .8i
.SH "Related Information"
.PP
Books: \*(Dk.
