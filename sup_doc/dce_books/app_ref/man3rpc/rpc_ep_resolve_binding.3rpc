...\"
...\"  @OSF_COPYRIGHT@
...\"  COPYRIGHT NOTICE
...\"  Copyright (c) 1990, 1991, 1992, 1993 Open Software Foundation, Inc.
...\"  ALL RIGHTS RESERVED (DCE).  See the file named COPYRIGHT.DCE in the
...\"  src directory for the full copyright text.
...\"
...\"
...\" HISTORY
...\" $Log: rpc_ep_resolve_binding.3rpc,v $
...\" Revision 1.1.8.1  1996/11/18  19:57:01  wardr
...\" 	{edit,R1.2.2}
...\" 	Init capped heads and added PDG pointer
...\" 	[1996/11/18  19:34:13  wardr]
...\"
...\" Revision 1.1.6.7  1995/06/07  20:10:54  buckler
...\" 	1.1 edits  Prentice Hall reformat
...\" 	[1995/06/07  20:06:03  buckler]
...\" 
...\" Revision 1.1.6.5  1994/08/25  22:32:34  buckler
...\" 	{def, 9480, R1.1}
...\" 	Added the status rpc_s_rpcd_comm_failure.
...\" 	[1994/08/25  22:31:46  buckler]
...\" 
...\" Revision 1.1.6.4  1994/07/14  19:04:23  jshirley
...\" 	(def,10220,R1.1}
...\" 	Remove references to rpcd and sec_clientd.
...\" 	[1994/07/14  18:44:02  jshirley]
...\" 
...\" Revision 1.1.6.3  1993/01/26  17:50:22  cjd
...\" 	Embedded copyright notice
...\" 	[1993/01/26  17:19:10  cjd]
...\" 
...\" Revision 1.1.6.2  1992/10/01  20:44:11  weir
...\" 	Removed change bars; moved into 1.0.2doc tree
...\" 	[1992/10/01  19:54:58  weir]
...\" 
...\" 	For P/H, now and forever!
...\" 	[1992/09/16  14:43:44  oaf]
...\" 
...\" Revision 1.1.4.3  1992/09/16  18:28:12  oaf
...\" 	*** empty log message ***
...\" 
...\" Revision 1.1.4.2  1992/08/14  17:44:05  oaf
...\" 	2nd edits, PURPOSE fix, .ad l on related functions (& restore)
...\" 	[1992/08/14  16:46:17  oaf]
...\" 
...\" Revision 1.1.2.4  1992/06/04  15:36:46  mcdonald
...\" 	Changes made:            Delete status code rpc_s_invalid_if_handle
...\" 	File name:               src/app_ref/man3rpc/rpc_ep_resolve_binding.3rpc
...\" 	Change Request Number:   3562
...\" 	[1992/06/04  15:34:59  mcdonald]
...\" 
...\" Revision 1.1.2.3  1992/05/15  20:44:22  buckler
...\" 	Editorial review
...\" 	[1992/05/15  20:43:03  buckler]
...\" 
...\" Revision 1.1.2.2  1992/04/17  20:52:54  mcdonald
...\" 	Change made: Fix two typos.
...\" 	File name: rpc_ep_resolve_binding.3rpc
...\" 	Change Request Number: 2812
...\" 	[1992/04/16  20:17:13  mcdonald]
...\" 
...\" Revision 1.1  1992/01/29  15:36:01  damon
...\" 	Initial revision
...\" 
...\" $EndLog$
...\"
...\" (c) Copyright 1991, Open Software Foundation, Inc.  ALL RIGHTS RESERVED
...\"   HISTORY COMMENTS:
...\"
...\"   DATE:                            COMMENT:
...\"
...\"	Wed.  Dec 11, 1991                Update file submission for
...\"                                    V 1.0 final integration at IBM.
...\"                                   
...\"
...\" ********************************************************************
...\" Copyright (c) 1991 Hewlett-Packard Co. and Digital Equipment Corp. *
...\" All rights reserved.                                               *
...\" ********************************************************************
.TH rpc_ep_resolve_binding 3rpc
...\" .iX "\*Lrpc_ep_resolve_binding(\|)\*O"
.SH "Name"
\*Lrpc_ep_resolve_binding\*O - Resolves a partially bound server binding handle
into a fully bound server binding handle
.PP
Used by client and management applications
.SH "Synopsis"
.sS
\*L#include <dce/rpc.h>
.sp .4v
\*Lvoid \*Lrpc_ep_resolve_binding\*L(
.nL
	\*Lrpc_binding_handle_t \*Vbinding\*L,
.nL
	\*Lrpc_if_handle_t \*Vif_handle\*L,
.nL
	\*Lunsigned32 *\*Vstatus\*L);
.sE
.nL
.ne 1.5i
.SH "Parameters"
.SS "Input/Output"
.VL
.LI "\*Vbinding\*O"
Specifies a partially bound server binding handle to resolve into a
fully bound server binding handle.
.LI "\*Vif_handle\*O"
Contains a stub-generated data structure that specifies the interface
of interest.
.LE
.SS "Output"
.VL
.LI "\*Vstatus\*O"
Returns the status code from this routine.  This status code
indicates whether the routine completed successfully or, if not, why not.
.LE
.nL
.ne 1.5i
.SH "Description"
.PP
An application calls the \*Lrpc_ep_resolve_binding(\|)\*O routine to resolve
a partially bound server binding handle into
a fully bound server binding handle.
.PP
Resolving binding handles requires an interface UUID and an object UUID.
The object UUID can be a nil UUID.  The RPC runtime requests
the DCE host daemon's endpoint mapper service,
on the host that the \*Vbinding\*O parameter specifies, to look up
an endpoint for a compatible server instance.  
The endpoint mapper service finds
the endpoint by looking in the local endpoint map for
the interface UUID from the \*Vif_handle\*O parameter and
for the object UUID in the \*Vbinding\*O parameter.
.PP
.ne 7
The \*Lrpc_ep_resolve_binding(\|)\*O routine depends on whether the
specified binding handle is partially bound or fully bound.  When the
application specifies a partially bound handle, the routine
produces the following results:
.ad l
.ML
.LI
If no compatible server instances are registered in the local endpoint map,
the routine returns the \*Lept_s_not_registered\*O status code.
.LI
If one compatible server instance is registered in the local endpoint map,
the routine returns a fully bound binding handle in \*Vbinding\*O
and the \*Lrpc_s_ok\*O status code.
.LI
If more than one compatible server instance is registered in
the local endpoint map, the routine randomly selects one.  It then
returns the corresponding fully bound binding handle in
\*Vbinding\*O and the \*Lrpc_s_ok\*O status code.
.LE
.ad b
.PP
When the application specifies a fully bound binding handle, the
routine returns the specified binding handle in \*Vbinding\*O
and the \*Lrpc_s_ok\*O status code.  The routine makes no request
of the DCE host daemon.
.PP
In neither the partially bound case nor the fully bound case does the
routine contact a compatible server instance.
.SS "Using This Routine"
.PP
For each server instance, the RPC runtime automatically
provides routines (the \*Lrpc_mgmt_*\*O routines) that form an
RPC management interface.  If a server instance registers any
application-provided interfaces, the RPC runtime automatically
registers the RPC-provided management interface with the
local endpoint map for that server instance.
.PP
An application can call \*Lrpc_ep_resolve_binding(\|)\*O
at any time with either a partially bound or a fully bound handle.
However, applications typically call this routine
to avoid calling a routine in the management interface
with a partially bound handle.
.PP
An application can have a partially bound binding handle at the
following times:
.ad l
.ML
.LI
After importing a binding handle.
.LI
After resetting a binding handle.
.LI
After converting a string binding without an endpoint to a binding handle.
.LE
.ad b
.PP
.ne 7
If an application calls an application-provided remote procedure using
a partially bound handle, the RPC runtime automatically asks the
DCE host daemon to resolve the binding handle into a fully bound handle.
This fully bound binding handle corresponds to the RPC interface of the called
remote procedure and the requested object, if any.  The application
can then use this fully bound handle to make remote management calls,
so calling the \*Lrpc_ep_resolve_binding(\|)\*O routine is unnecessary.
.PP
When a high proportion of all servers in an environment offers the
same interface, the interface is known as a pervasive one.
The RPC management interface is a pervasive interface in all
environments that use DCE RPC.
.PP
Using this routine to unambiguously locate compatible
server instances applies to application-pervasive interfaces as well as
to the RPC management interface.
.SS "Partially Bound Handles with a Nonnil Object UUID"
.PP
If the application has a partially bound handle with a nonnil object
UUID, the application can decide not to call the
\*Lrpc_ep_resolve_binding(\|)\*O routine before calling a procedure in the
management interface.  In this case the remote management call
is sent to a server instance, registered on the remote host, that
offers that object UUID.
.PP
After completing the remote management call, the application has
a fully bound handle to that server instance.  The server instance
that the handle specifies probably offers the nonmanagement interfaces
of interest to the calling application.  However, if you want
to be certain of obtaining a fully bound handle to a
server instance that offers the interfaces needed for later
remote procedure calls, call the \*Lrpc_ep_resolve_binding(\|)\*O routine.
.SS "Partially Bound Handles with a Nil Object UUID"
.PP
When an application makes a remote procedure or management call
using a partially bound handle with a nil object UUID, the
DCE host daemon searches for a compatible server instance.  The search
is based on the nil object UUID and the UUID of the interface to which
the call belongs.
.PP
All server instances that register any RPC interface automatically
offer the RPC management interface.  When an application makes
a remote management call using a partially bound handle with
a nil object UUID, the DCE host daemon on the remote host cannot
distinguish among server instances registered in the local endpoint map.
.PP
When the DCE host daemon cannot distinguish among these instances
it selects \*Eany\*O server instance.  After completing the remote
management call, the calling application has a fully bound handle.
However, the server instance that the handle represents probably does
not offer the nonmanagement interfaces that interest the application.
.PP
The remote RPC management routines avoid this ambiguity.  They do this
by returning the status \*Lrpc_s_binding_incomplete\*O if the provided
binding handle is a partially bound one with a nil object UUID.
.PP
An application wanting to contact servers that have exported and
registered interfaces with a nil object UUID calls routine
\*Lrpc_ep_resolve_binding(\|)\*O.  The application obtains
a fully bound binding handle for
calling remote management procedures in a server instance that also
offers the remote procedures in the application-specific interface.
.PP
Note that an application that wants to manage all the server instances
on a host does not call \*Lrpc_ep_resolve_binding(\|)\*O.
Instead, the application obtains fully bound binding handles for
each server instance by calling the routines \*Lrpc_mgmt_ep_elt_inq_\*V*\*L(\|)\*O.
.nL
.ne 1.5i
.SH "Return Values"
.PP
No value is returned.
.nL
.ne 1.5i
.SH "Errors"
.PP
The following describes a partial list of errors that might be returned.
Refer to the \*(Tg for complete descriptions of all error
messages.
.VL
.LI "\*Lrpc_s_ok\*O"
Success.
.LI "\*Lept_s_not_registered\*O"
No entries found.
.LI "\*Lrpc_s_invalid_binding\*O"
Invalid binding handle.
.LI "\*Lrpc_s_wrong_kind_of_binding\*O"
Wrong kind of binding for operation.
.LI "\*Lrpc_s_rpcd_comm_failure\*O"
Communications failure while trying to reach the endpoint map.
.LE
.SH "Related Information"
.PP
.ad l
Functions:
\*Lrpc_binding_from_string_binding(3rpc)\*O,
\*Lrpc_binding_reset(3rpc)\*O,
\*Lrpc_ep_register(3rpc)\*O,
\*Lrpc_ep_register_no_replace(3rpc)\*O,
\*Lrpc_mgmt_ep_elt_inq_begin(3rpc)\*O,
\*Lrpc_mgmt_ep_elt_inq_done(3rpc)\*O,
\*Lrpc_mgmt_ep_elt_inq_next(3rpc)\*O.
.ad b
