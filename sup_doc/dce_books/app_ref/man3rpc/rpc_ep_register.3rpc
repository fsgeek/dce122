...\"
...\"  @OSF_COPYRIGHT@
...\"  COPYRIGHT NOTICE
...\"  Copyright (c) 1990, 1991, 1992, 1993 Open Software Foundation, Inc.
...\"  ALL RIGHTS RESERVED (DCE).  See the file named COPYRIGHT.DCE in the
...\"  src directory for the full copyright text.
...\"
...\"
...\" HISTORY
...\" $Log: rpc_ep_register.3rpc,v $
...\" Revision 1.1.8.1  1996/11/18  19:56:55  wardr
...\" 	{edit,R1.2.2}
...\" 	Init capped heads and added PDG pointer
...\" 	[1996/11/18  19:34:10  wardr]
...\"
...\" Revision 1.1.6.10  1995/06/21  15:21:49  buckler
...\" 	More 1.1 edits.
...\" 	[1995/06/21  14:32:37  buckler]
...\" 
...\" 	More 1.1 edits.
...\" 	[1995/06/21  14:12:39  buckler]
...\" 
...\" Revision 1.1.6.9  1995/06/21  13:20:23  buckler
...\" 	More 1.1 edits.
...\" 	[1995/06/20  20:00:12  buckler]
...\" 
...\" 	More 1.1 edits.
...\" 	[1995/06/19  16:17:43  buckler]
...\" 
...\" Revision 1.1.6.8  1995/06/07  20:10:52  buckler
...\" 	1.1 edits  Prentice Hall reformat
...\" 	[1995/06/07  20:06:00  buckler]
...\" 
...\" Revision 1.1.6.6  1994/11/03  23:45:35  neilson
...\" 	Substituted macros for book names in cross refs.
...\" 	[1994/11/03  01:39:29  neilson]
...\" 
...\" Revision 1.1.6.5  1994/10/19  20:15:26  neilson
...\" 	CR 10326 - Automatic fix to name of intro ref page
...\" 	[1994/10/19  20:09:08  neilson]
...\" 
...\" Revision 1.1.6.4  1994/07/14  19:04:21  jshirley
...\" 	(def,10220,R1.1}
...\" 	Remove references to rpcd and sec_clientd.
...\" 	[1994/07/14  18:43:42  jshirley]
...\" 
...\" Revision 1.1.6.3  1993/01/26  17:50:16  cjd
...\" 	Embedded copyright notice
...\" 	[1993/01/26  17:18:55  cjd]
...\" 
...\" Revision 1.1.6.2  1992/10/01  20:43:57  weir
...\" 	Removed change bars; moved into 1.0.2doc tree
...\" 	[1992/10/01  19:54:46  weir]
...\" 
...\" 	For P/H, now and forever!
...\" 	[1992/09/16  14:43:27  oaf]
...\" 
...\" Revision 1.1.4.3  1992/09/16  18:28:05  oaf
...\" 	*** empty log message ***
...\" 
...\" Revision 1.1.4.2  1992/08/14  17:43:40  oaf
...\" 	2nd edits, PURPOSE fix, .ad l on related functions (& restore)
...\" 	[1992/08/14  16:46:04  oaf]
...\" 
...\" Revision 1.1.2.3  1992/06/04  14:46:02  mcdonald
...\" 	Changes made:           Delete status code rpc_s_invalid_if_handle
...\" 	File name:              src/app_ref/man3rpc/rpc_ep_register.3rpc
...\" 	Change Request Number:  3562
...\" 	[1992/06/04  14:45:04  mcdonald]
...\" 
...\" Revision 1.1.2.2  1992/05/15  20:44:06  buckler
...\" 	Editorial review
...\" 	[1992/05/15  20:42:49  buckler]
...\" 
...\" Revision 1.1  1992/01/29  15:35:57  damon
...\" 	Initial revision
...\" 
...\" $EndLog$
...\"
...\" (c) Copyright 1991, Open Software Foundation, Inc.  ALL RIGHTS RESERVED
...\"   HISTORY COMMENTS:
...\"
...\"   DATE:                            COMMENT:
...\"
...\"	Wed.  Dec 11, 1991                Update file submission for
...\"                                    V 1.0 final integration at IBM.
...\"                                   
...\"
...\" ********************************************************************
...\" Copyright (c) 1991 Hewlett-Packard Co. and Digital Equipment Corp. *
...\" All rights reserved.                                               *
...\" ********************************************************************
.TH rpc_ep_register 3rpc
...\" .iX "\*Lrpc_ep_register(\|)\*O"
.SH "Name"
\*Lrpc_ep_register\*O - Adds to, or replaces, server address information in the local endpoint map
.PP
Used by server applications
.SH "Synopsis"
.sS
\*L#include <dce/rpc.h>
.sp .4v
\*Lvoid \*Lrpc_ep_register\*L(
.nL
	\*Lrpc_if_handle_t \*Vif_handle\*L,
.nL
	\*Lrpc_binding_vector_t *\*Vbinding_vec\*L,
.nL
	\*Luuid_vector_t *\*Vobject_uuid_vec\*L,
.nL
	\*Lunsigned_char_t *\*Vannotation\*L,
.nL
	\*Lunsigned32 *\*Vstatus\*L);
.sE
.nL
.ne 1.5i
.SH "Parameters"
.SS "Input"
.VL
.LI "\*Vif_handle\*O"
Specifies an interface specification to register with the
local endpoint map.
.LI "\*Vbinding_vec\*O"
Specifies a vector of binding handles over which the server can receive
remote procedure calls.
.LI "\*Vobject_uuid_vec\*O"
Specifies a vector of object UUIDs that the server offers.  The server
application constructs this vector.
.PP
Supply the value NULL to indicate there are no object UUIDs to
register.
.LI "\*Vannotation\*O"
Defines a character string comment applied to each cross product element added
to the local endpoint map.
The string can be up to 64 characters long, including the
NULL terminating character.
Specify NULL or the string \*L\\0\*O
if there is no annotation string.
.PP
The string is used by applications for informational purposes only.
The RPC runtime does not use this string to determine which server
instance a client
communicates with, or for enumerating endpoint map elements.
.LE
.SS "Output"
.VL
.LI "\*Vstatus\*O"
Returns the status code from this routine.  This status code
indicates whether the routine completed successfully or, if not, why not.
.LE
.nL
.ne 1.5i
.SH "Description"
.PP
The \*Lrpc_ep_register(\|)\*O routine
adds elements to, or replaces elements in, the local host's endpoint map.
.PP
Each element in the local endpoint map
logically contains the following:
.ad l
.ML
.LI
Interface ID, consisting of an interface UUID and
versions (major and minor)
.LI
Binding information
.LI
Object UUID (optional)
.LI
Annotation (optional)
.LE
.ad b
.PP
A server uses this routine, instead of
\*Lrpc_ep_register_no_replace(\|)\*O,
when only a single instance of the server runs on the
server's host.  Use this routine if, at any time,
no more than one server instance offers the same interface UUID,
object UUID, and protocol sequence.
.PP
When local endpoint map elements are not replaced, obsolete elements
accumulate each time a server instance stops running without calling
\*Lrpc_ep_unregister(\|)\*O.  Periodically the DCE host daemon
identifies these obsolete elements and removes them.  However,
during the time between these removals the obsolete elements increase the
chance that a client will receive endpoints to nonexistent servers.
The client then
wastes time trying to communicate with these servers before obtaining
another endpoint.
.PP
Using this routine to replace any existing local endpoint map
elements reduces the chance that a client will receive
the endpoint of a nonexistent server instance.
.PP
Suppose an existing element in the local endpoint map
matches the interface UUID, binding information exclusive of
the endpoint, and object UUID of an element this routine
provides.  The routine changes the endpoint map according to
the elements' interface major and minor version numbers, as shown
in the following table:
.PP
.ne 4.0i
.in -.8i
.ad l
.TS
center allbox tab(%);
lb | lb | lb | lb
l | l | l | lw(1.5i).
Existing Element%Relationship%Provided Element%Routine's Action
=
Major version number%Not equal to%Major version number%T{
Ignores minor version number relationship and adds
a new endpoint map element.  The existing element remains unchanged.
T}
_
Major version number%Equal to%Major version number%T{
Acts according to the minor version number relationship.
T}
_
Minor version number%Equal to%Minor version number%T{
Replaces the endpoint of the existing element based on the provided information.
T}
_
Minor version number%Less than%Minor version number%T{
Replaces the existing element based on the provided information.
T}
_
Minor version number%Greater than%Minor version number%T{
Ignores the provided information.
The existing element remains unchanged.
T}
.TE
.in
.ad b
.PP
For example, suppose under these circumstances that the existing interface
version number is 1.3 (major.minor) and the provided version number
is 2.0.  The routine adds a new endpoint map element with interface
version number 2.0 and does not change the element with version number
1.3.  However, if the existing interface version number is 1.5 and the provided
version number is 1.4, the routine does not change the endpoint map.
.PP
A server program calls this routine
to register endpoints that have been specified by calling any of
the following routines:
.ad l
.ML
.LI
\*Lrpc_server_use_all_protseqs(\|)\*O
.LI
\*Lrpc_server_use_protseq(\|)\*O
.LI
\*Lrpc_server_use_protseq_ep(\|)\*O
.LE
.ad b
.PP
.ne 9
A server that calls only the \*Lrpc_server_use_all_protseqs_if(\|)\*O or
\*Lrpc_server_use_protseq_if(\|)\*O routines does not need to call this routine.
In such cases, the client's runtime uses an endpoint from the client's
interface specification to fill in a partially bound binding handle.
However, it is recommended that you also register well-known endpoints
that the server specifies (registering endpoints from
interface definitions is unnecessary).
.PP
If the server also exports to the
name service database,
the server calls this routine with
the same \*Vif_handle\*O, \*Vbinding_vec\*O and
\*Vobject_uuid_vec\*O parameters as the server uses when calling the
\*Lrpc_ns_binding_export(\|)\*O routine.
...\" .cS
...\" .PP
...\" For automatically started servers running over
...\" the connection-oriented protocol sequence \*Lncacn_ip_tcp\*O,
...\" COMMENT-START (instead of .cS)
...\" DIGITAL_BEGIN
...\" ** To include Digital Equipment Corporation and HP/Apollo protocol sequences,
...\" ** replace the 1 line just before the ".cS" symbol with the following 2 lines.
...\" one of the connection-oriented protocol sequences
...\" (\*Lncacn_ip_tcp\*O, \*Lncacn_dnet_nsp\*O, or \*Lncacn_osi_dns\*O),
...\" DIGITAL_END
...\" COMMENT-END (instead of .cE)
...\" the RPC runtime automatically generates a dynamic endpoint.  In this case, the
...\" server can call the \*Lrpc_server_inq_bindings\*O routine followed by
...\" the \*Lrpc_ep_register\*O routine in order to make itself available to multiple
...\" clients.  Otherwise, the automatically started server is known only to the client
...\" for which the server was started.
...\" .cE
.PP
The \*Lrpc_ep_register(\|)\*O routine communicates with the DCE host
daemon (\*Ldced\*O),
which in turn communicates with the local endpoint map.  The routine
communicates using one of the protocol sequences specified in one of the
binding handles in \*Vbinding_vec\*O.  Attempting to register
a binding that specifies a protocol sequence that the DCE host daemon is
not listening on results in the failure of \*Lrpc_ep_register(\|)\*O.
The routine indicates this failure by placing the
value \*Lrpc_s_comm_failure\*O into \*Vstatus\*O.
.PP
For information about how the endpoint map service selects an
element for an interface ID and an object UUID, see the RPC information in
the \*(Dk.
This guide explains how the endpoint map service
searches for the endpoint of a server that is compatible with a client.
If the client supplies a nonnil object UUID that is not in the
endpoint map,
or the client supplies a nil object UUID, the search can
succeed, but only if the server has registered a nil object UUID using
the \*Lrpc_ep_register(\|)\*O or  \*Lrpc_ep_register_no_replace(\|)\*O routines.
The \*Vobject_uuid_vec\*O parameter can contain both nil and
nonnil object UUIDs for the routine to place into endpoint map elements.
.PP
For an explanation of how a server can establish a
client/server relationship without using the local endpoint map,
see the explanation of a string binding
in the \*Lrpc_intro(3rpc)\*O reference page.
.PP
This routine creates a cross product from the \*Vif_handle\*O,
\*Vbinding_vec\*O and \*Vobject_uuid_vec\*O parameters, and adds each
element in the cross product as a separate registration in
the local endpoint map.
If you supply NULL to \*Vobject_uuid_vec\*O, the corresponding elements in the
cross product contain a nil object UUID.
.PP
For example, suppose that \*Vif_handle\*O has the value \*Lifhand\*O,
\*Vbinding_vec\*O has the values \*Lb1\*O, \*Lb2\*O, \*Lb3\*O,
and
\*Vobject_uuid_vec\*O has the values \*Lu1\*O, \*Lu2\*O, \*Lu3\*O, \*Lu4\*O.
The resulting 12 elements in the cross product are as follows:
.iS
(ifhand,b1,u1)  (ifhand,b1,u2)  (ifhand,b1,u3)  (ifhand,b1,u4)
(ifhand,b2,u1)  (ifhand,b2,u2)  (ifhand,b2,u3)  (ifhand,b2,u4)
(ifhand,b3,u1)  (ifhand,b3,u2)  (ifhand,b3,u3)  (ifhand,b3,u4)
.iE
.PP
(An annotation string is part of each of these 12 elements.)
.nL
.ne 1.5i
.SH "Return Values"
.PP
No value is returned.
.nL
.ne 1.5i
.SH "Errors
.VL
.LI "\*Lrpc_s_ok\*O"
Success.
.LI "\*Lept_s_cant_access\*O"
Error reading endpoint database.
.LI "\*Lept_s_cant_create\*O"
Error creating endpoint database.
.LI "\*Lept_s_cant_perform_op\*O"
Cannot perform requested operation.
.LI "\*Lept_s_database_invalid\*O"
Endpoint map database invalid.
.LI "\*Lept_s_invalid_entry\*O"
Invalid database entry.
.LI "\*Lept_s_update_failed\*O"
Update failed.
.LI "\*Lrpc_s_comm_failure\*O"
Communications failure.
.LI "\*Lrpc_s_invalid_binding\*O"
Invalid binding handle.
.LI "\*Lrpc_s_no_bindings\*O"
No bindings.
.LI "\*Lrpc_s_wrong_kind_of_binding\*O"
Wrong kind of binding for operation.
.LE
.SH "Related Information"
.PP
.ad l
Functions:
\*Lrpc_ep_register_no_replace(3rpc)\*O,
\*Lrpc_ep_resolve_binding(3rpc)\*O,
\*Lrpc_ep_unregister(3rpc)\*O,
\*Lrpc_mgmt_ep_unregister(3rpc)\*O,
\*Lrpc_ns_binding_export(3rpc)\*O,
\*Lrpc_server_inq_bindings(3rpc)\*O,
\*Lrpc_server_use_all_protseqs(3rpc)\*O,
\*Lrpc_server_use_all_protseqs_if(3rpc)\*O,
\*Lrpc_server_use_protseq(3rpc)\*O,
\*Lrpc_server_use_protseq_ep(3rpc)\*O,
\*Lrpc_server_use_protseq_if(3rpc)\*O.
.PP
Books:
\*(Dk.
.ad b
