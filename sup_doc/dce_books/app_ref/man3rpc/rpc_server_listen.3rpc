...\"
...\"  @OSF_COPYRIGHT@
...\"  COPYRIGHT NOTICE
...\"  Copyright (c) 1990, 1991, 1992, 1993 Open Software Foundation, Inc.
...\"  ALL RIGHTS RESERVED (DCE).  See the file named COPYRIGHT.DCE in the
...\"  src directory for the full copyright text.
...\"
...\"
...\" HISTORY
...\" $Log: rpc_server_listen.3rpc,v $
...\" Revision 1.1.8.1  1996/11/18  19:59:33  wardr
...\" 	{edit,R1.2.2}
...\" 	Init capped heads and added PDG pointer
...\" 	[1996/11/18  19:35:24  wardr]
...\"
...\" Revision 1.1.6.8  1995/06/21  13:20:51  buckler
...\" 	More 1.1 edits.
...\" 	[1995/06/20  21:03:38  buckler]
...\" 
...\" Revision 1.1.6.7  1995/06/07  20:12:08  buckler
...\" 	1.1 edits  Prentice Hall reformat
...\" 	[1995/06/07  20:07:27  buckler]
...\" 
...\" Revision 1.1.6.5  1994/11/03  23:46:26  neilson
...\" 	Substituted macros for book names in cross refs.
...\" 	[1994/11/03  01:39:36  neilson]
...\" 
...\" Revision 1.1.6.4  1993/01/27  16:55:24  cjd
...\" 	Embedded copyright notice
...\" 	[1993/01/26  18:34:11  cjd]
...\" 
...\" Revision 1.1.6.3  1993/01/26  19:05:52  cjd
...\" 	Embedded copyright notice
...\" 	[1993/01/26  18:34:11  cjd]
...\" 
...\" Revision 1.1.6.2  1992/10/01  20:57:09  weir
...\" 	Removed change bars; moved into 1.0.2doc tree
...\" 	[1992/10/01  20:09:33  weir]
...\" 
...\" 	For P/H, now and forever!
...\" 	[1992/09/16  14:52:56  oaf]
...\" 
...\" Revision 1.1.4.3  1992/09/16  18:31:57  oaf
...\" 	*** empty log message ***
...\" 
...\" Revision 1.1.4.2  1992/08/14  17:54:35  oaf
...\" 	2nd edits, PURPOSE fix, .ad l on related functions (& restore)
...\" 	[1992/08/14  17:02:15  oaf]
...\" 
...\" Revision 1.1.2.2  1992/05/19  15:50:41  buckler
...\" 	Editorial review
...\" 	[1992/05/19  15:42:46  buckler]
...\" 
...\" Revision 1.1  1992/01/29  15:38:22  damon
...\" 	Initial revision
...\" 
...\" $EndLog$
...\"
...\" (c) Copyright 1991, Open Software Foundation, Inc.  ALL RIGHTS RESERVED
...\"   HISTORY COMMENTS:
...\"
...\"   DATE:                            COMMENT:
...\"
...\"	Mon Nov 11, 1991                 Initial file submission to HP
...\"                                    for final integration at IBM.
...\"
...\"
...\" ********************************************************************
...\" Copyright (c) 1991 Hewlett-Packard Co. and Digital Equipment Corp. *
...\" All rights reserved.                                               *
...\" ********************************************************************
.TH rpc_server_listen 3rpc
...\" .iX "\*Lrpc_server_listen(\|)\*O"
.SH "Name"
\*Lrpc_server_listen\*O - Tells the RPC runtime to listen for remote procedure calls
.PP
Used by server applications
.SH "Synopsis"
.sS
\*L#include <dce/rpc.h>\*L
.sp .4v
\*Lvoid \*Lrpc_server_listen\*L(
.nL
	\*Lunsigned32 \*Vmax_calls_exec\*L,
.nL
	\*Lunsigned32 *\*Vstatus\*L);
.sE
.nL
.ne 1.5i
.SH "Parameters"
.SS "Input"
.VL
.LI "\*Vmax_calls_exec\*O"
Specifies the maximum number of concurrent executing remote procedure calls.
.PP
Use the value \*Lrpc_c_listen_max_calls_default\*O to specify the
default value.
.PP
Also, the five \*Lrpc_server_use_\*V*\*L_protseq\*V*\*L(\|)\*O routines limit (according to
their \*Vmax_call_requests\*O parameter) the number of concurrent remote
procedure call requests that a server can accept.
.LE
.SS "Output"
.VL
.LI "\*Vstatus\*O"
Returns the status code from this routine.  This status code
indicates whether the routine completed successfully or, if not, why not.
.LE
.nL
.ne 1.5i
.SH "Description"
.PP
The \*Lrpc_server_listen(\|)\*O routine makes a server listen for
remote procedure calls.  DCE RPC allows a server to
simultaneously process multiple calls.  The \*Vmax_calls_exec\*O parameter
specifies the maximum number of concurrent remote procedure calls the server
executes.  Each remote procedure call executes in
a call execution thread.  The implementation of
the RPC architecture determines whether
it reuses call execution threads for the execution of
subsequent remote procedure calls or, instead, it creates a new thread for
each execution of a subsequent remote procedure call.
.PP
The following conditions affect the number of
concurrent remote procedure calls that a server can process:
.ML
.LI
Sufficient network resources must be available to accept simultaneous
call requests arriving over a particular protocol sequence.
The value of \*Vmax_call_requests\*O in the
five \*Lrpc_server_use_\*V*\*L_protseq*\*L(\|)\*O routines advises
the RPC runtime about the runtime's request of network resources.
.LI
Enough call threads must be available to execute the simultaneous
call requests once they have been accepted.  The value of
\*Vmax_calls_exec\*O in \*Lrpc_server_listen(\|)\*O
specifies the number of call threads.
.LE
.PP
These conditions are independent of each other.
.PP
A server application that specifies a value for \*Vmax_calls_exec\*O
greater than 1 is responsible for concurrency control
among the remote procedures since each executes in a separate
thread.
.PP
If the server receives more remote procedure calls than it can execute
(more calls than the value of \*Vmax_calls_exec\*O), the
RPC runtime accepts and queues additional remote procedure calls until
a call execution thread is available.  From the client's perspective,
a queued remote procedure call appears the same as one that the
server is actively executing.  A client call remains blocked and in the
queue until any one of the following events occurs:
.ad l
.ML
.LI
The remote procedure call is assigned to an available call execution thread
and the call runs to completion.
.LI
The client no longer can communicate with the server.
.LI
The client thread is canceled and the remote procedure call does not
complete within the cancel timeout limits.
.LE
.ad b
.PP
The implementation of the RPC architecture determines the amount of
queuing it provides.
.PP
The RPC runtime continues listening for remote procedure calls (that is, the
routine does not return to the server) until one of the following events
occurs:
.ad l
.ML
.LI
One of the server application's manager routines calls
\*Lrpc_\%mgmt_\%stop_\%server_\%listening(\|)\*O.
.LI
A client is allowed to, and makes,
a remote \*Lrpc_\%mgmt_\%stop_\%server_\%listening(\|)\*O
call to the server.
.LE
.ad b
.PP
On receiving a request to stop listening, the RPC runtime stops accepting new
remote procedure calls for all registered
interfaces.  Executing calls and existing queued calls
are allowed to complete.
.PP
After all calls complete, \*Lrpc_server_listen(\|)\*O returns
to the caller, which is a server application.
.PP
For more information about a server's listening for and
handling incoming remote procedure calls, refer to the
\*(Dk.
It also contains information about canceled threads.
.nL
.ne .8i
.SH "Return Values"
.PP
No value is returned.
.nL
.ne 1.5i
.SH "Errors"
.PP
The following describes a partial list of errors that might be returned.
Refer to the \*(Tg for complete descriptions of all error
messages.
.VL
.LI "\*Lrpc_s_ok\*O"
Success.
.LI "\*Lrpc_s_already_listening\*O"
Server already listening.
.LI "\*Lrpc_s_max_calls_too_small\*O"
Maximum calls value too small.
.LI "\*Lrpc_s_no_protseqs_registered\*O"
No protocol sequences registered.
.LE
.SH "Related Information"
.PP
.ad l
Functions:
\*Lrpc_mgmt_server_stop_listening(3rpc)\*O,
\*Lrpc_server_register_if(3rpc)\*O,
\*Lrpc_server_use_all_protseqs(3rpc)\*O,
\*Lrpc_server_use_all_protseqs_if(3rpc)\*O,
\*Lrpc_server_use_protseq(3rpc)\*O,
\*Lrpc_server_use_protseq_ep(3rpc)\*O,
\*Lrpc_server_use_protseq_if(3rpc)\*O.
.PP
Books:
\*(Dk.
.ad b
