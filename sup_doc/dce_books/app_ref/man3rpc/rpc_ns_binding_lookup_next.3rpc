...\"
...\"  @OSF_COPYRIGHT@
...\"  COPYRIGHT NOTICE
...\"  Copyright (c) 1990, 1991, 1992, 1993 Open Software Foundation, Inc.
...\"  ALL RIGHTS RESERVED (DCE).  See the file named COPYRIGHT.DCE in the
...\"  src directory for the full copyright text.
...\"
...\"
...\" HISTORY
...\" $Log: rpc_ns_binding_lookup_next.3rpc,v $
...\" Revision 1.1.75.1  1996/11/18  19:58:15  wardr
...\" 	{edit,R1.2.2}
...\" 	Init capped heads and added PDG pointer
...\" 	[1996/11/18  19:34:45  wardr]
...\"
...\" Revision 1.1.73.4  1995/06/21  13:20:37  buckler
...\" 	More 1.1 edits.
...\" 	[1995/06/20  20:23:37  buckler]
...\" 
...\" Revision 1.1.73.3  1995/06/07  20:11:28  buckler
...\" 	1.1 edits  Prentice Hall reformat
...\" 	[1995/06/07  20:06:39  buckler]
...\" 
...\" Revision 1.1.73.1  1993/10/12  15:26:55  stevel
...\" 	{def, 7682, R1.0.3}
...\" 	Modified text to reflect the fact that returned object UUIDs are
...\" 	selected in an unspecified way, not randomly, so that applications
...\" 	should not count on randomness or any other selection criterion.  Also
...\" 	added text to answer question about the effect of successive calls.
...\" 	[1993/10/08  17:28:37  stevel]
...\" 
...\" Revision 1.1.6.4  1993/01/27  16:52:09  cjd
...\" 	Embedded copyright notice
...\" 	[1993/01/26  18:30:06  cjd]
...\" 
...\" Revision 1.1.6.3  1993/01/26  19:03:51  cjd
...\" 	Embedded copyright notice
...\" 	[1993/01/26  18:30:06  cjd]
...\" 
...\" Revision 1.1.6.2  1992/10/01  20:50:20  weir
...\" 	Removed change bars; moved into 1.0.2doc tree
...\" 	[1992/10/01  20:01:30  weir]
...\" 
...\" 	For P/H, now and forever!
...\" 	[1992/09/16  14:48:03  oaf]
...\" 
...\" Revision 1.1.4.3  1992/09/16  18:30:04  oaf
...\" 	*** empty log message ***
...\" 
...\" Revision 1.1.4.2  1992/08/14  17:49:03  oaf
...\" 	2nd edits, PURPOSE fix, .ad l on related functions (& restore)
...\" 	[1992/08/14  16:58:54  oaf]
...\" 
...\" Revision 1.1.2.4  1992/07/06  21:38:44  mcdonald
...\" 	Changes made:            Add explanation of the number of binding handles
...\" 	                            that the routine searches for
...\" 	File name:               src/app_ref/man3rpc/rpc_ns_binding_lookup_next.3rpc
...\" 	Change Request Number:   3870
...\" 	[1992/07/06  21:37:03  mcdonald]
...\" 
...\" Revision 1.1.2.3  1992/05/18  20:04:09  buckler
...\" 	Editorial review
...\" 	[1992/05/18  19:55:18  buckler]
...\" 
...\" Revision 1.1.2.2  1992/04/28  17:29:41  hodgman
...\" 	File Name: src/app_ref/man3rpc/rpc_ns_binding_lookup_next.3rpc
...\" 	Change Request Number: 2961
...\" 	Changes Made: Added the status code rpc_s_not_rpc_entry.
...\" 	Added the status code rpc_s_class_version_mismatch.
...\" 	[1992/04/28  17:29:04  hodgman]
...\" 
...\" Revision 1.1  1992/01/29  15:37:07  damon
...\" 	Initial revision
...\" 
...\" $EndLog$
...\"
...\" (c) Copyright 1991, Open Software Foundation, Inc.  ALL RIGHTS RESERVED
...\"   HISTORY COMMENTS:
...\"
...\"   DATE:                            COMMENT:
...\"
...\"	Mon Nov 11, 1991                 Initial file submission to HP
...\"                                    for final integration at IBM.
...\"                                   
...\"
...\" ********************************************************************
...\" Copyright (c) 1991 Hewlett-Packard Co. and Digital Equipment Corp. *
...\" All rights reserved.                                               *
...\" ********************************************************************
.TH rpc_ns_binding_lookup_next 3rpc
...\" .iX "\*Lrpc_ns_binding_lookup_next(\|)\*O"
.SH "Name"
\*Lrpc_ns_binding_lookup_next\*O - Returns a list of binding handles of one
or more compatible servers (if found) from the name service database
.PP
Used by client applications
.SH "Synopsis"
.sS
\*L#include <dce/rpc.h>\*L
.sp .4v
\*Lvoid \*Lrpc_ns_binding_lookup_next\*L(
.nL
	\*Lrpc_ns_handle_t \*Vlookup_context\*L,
.nL
	\*Lrpc_binding_vector_t **\*Vbinding_vec\*L,
.nL
	\*Lunsigned32 *\*Vstatus\*L);
.sE
.nL
.ne 1.5i
.SH "Parameters"
.SS "Input"
.VL
.LI "\*Vlookup_context\*O"
Specifies a name service handle.  This handle is returned from the
\*Lrpc_ns_binding_lookup_begin(\|)\*O routine.
.LE
.SS "Output"
.VL
.LI "\*Vbinding_vec\*O"
Returns a vector of compatible server binding handles.
.LI "\*Vstatus\*O"
Returns the status code from this routine, which
indicates whether the routine completed successfully
or, if not, why not.
.LE
.nL
.ne 1.5i
.SH "Description"
.PP
The \*Lrpc_ns_binding_lookup_next(\|)\*O routine returns a vector of
compatible (to the client) server binding handles.
The servers offer the interface and object UUID specified by
the respective \*Vif_handle\*O and \*Vobject_uuid\*O
parameters in \*Lrpc_ns_binding_lookup_begin(\|)\*O.
The number of binding handles that
\*Lrpc_ns_binding_lookup_next(\|)\*O attempts to return is the
value of  \*Vbinding_max_count\*O in the
\*Lrpc_ns_binding_lookup_begin(\|)\*O routine.
.PP
A similar routine is \*Lrpc_ns_binding_import_next(\|)\*O, which returns
\*Vone\*O compatible server binding handle.
.PP
The \*Lrpc_ns_binding_lookup_next(\|)\*O routine
communicates only with the name service database, not directly with servers.
.PP
This routine traverses entries in the name service database, returning
compatible server binding handles from each entry.
The routine can return multiple binding handles from each entry.
The search operation obeys the following rules for traversing
the entries:
.ad l
.ML
.LI
At each entry visited, the search operation randomly processes
binding information, then group members, then profile members.
Profile members with different priorities
are returned according to their priorities, highest priority first.
.LI
The search operation returns members of a group
in random order.
.LI
The search operation returns members of a profile with the same
priority in random order.
.LE
.ad b
.PP
If the entry where the search begins
(see the \*Ventry_name\*O parameter in \*Lrpc_ns_binding_lookup_begin(\|)\*O)
contains binding handles as well as an RPC group and/or a profile,
\*Lrpc_ns_binding_lookup_next(\|)\*O returns the binding handles from
\*Ventry_name\*O before searching the group or profile.
This means that \*Lrpc_ns_binding_lookup_next(\|)\*O can
return a partially full vector before processing the members of the group
or profile.
.PP
Each binding handle in the returned vector always contains an object UUID.
Its value depends on the value specified in the \*Vobject_uuid\*O parameter
of \*Lrpc_ns_binding_lookup_begin(\|)\*O as follows:
.ad l
.ML
.LI
If \*Vobject_uuid\*O contains a nonnil object UUID, each returned binding
handle contains that object UUID.
.LI
If \*Vobject_uuid\*O contains a nil object UUID or NULL, the object UUID
returned in each binding handle depends on how the server exported
object UUIDS:
.ML
.LI
If the server did not export any object UUIDs, each returned binding handle
contains a nil object UUID.
.LI
If the server exported one object UUID, each returned binding handle
contains that object UUID.
.LI
If the server exported multiple object UUIDs, the returned binding
handle contains one of the object UUIDs, selected in an unspecified
way.  
.PP
.ne 10
Applications should not count on the binding handles returned from a
given entry to contain different object UUIDs.  In particular, note
that each name service entry stores server address information
separately from exported object UUIDs.  One or more calls to
\*Lrpc_ns_binding_lookup_next(\|)\*O will return exactly one binding
for each compatible server address, not the cross product of all
compatible server addresses with all exported UUIDs.  Each returned
binding will contain one of the exported object UUIDs, but
applications should not count on any specific selection mechanism for
these object UUIDs
.LE
.LE
.ad b
.PP
From the returned vector of server binding handles, the client application
can employ its own criteria for selecting individual binding handles, or the
application can call \*Lrpc_ns_binding_select(\|)\*O to select
a binding handle.  The \*Lrpc_binding_to_string_binding(\|)\*O and
\*Lrpc_string_binding_parse(\|)\*O routines are useful for a client
creating its own selection criteria.
.PP
The client application can use the selected binding handle to attempt
a remote procedure call to the server.  If the client fails to communicate
with the server, it can select another binding handle from the vector.
When all the binding handles in the vector are used,
the client application calls \*Lrpc_ns_binding_lookup_next(\|)\*O again.
.PP
Each time the client calls \*Lrpc_ns_binding_lookup_next(\|)\*O,
the routine returns another vector of binding handles.
The binding handles returned in each vector are unordered, as is the order
in which the vectors are returned from multiple calls to this routine.
.PP
When looking up compatible binding handles from a profile, the binding handles
from entries of equal profile priority are unordered in the returned vector.
In addition, the vector returned from a call
to \*Lrpc_ns_binding_lookup_next(\|)\*O
contains only compatible binding handles from entries
of equal profile priority.  This
means the returned vector may be partially full.
.PP
For example, if the \*Vbinding_max_count\*O parameter value in
\*Lrpc_\%ns_\%binding_\%lookup_\%begin(\|)\*O was \*L5\*O
and \*Lrpc_ns_binding_lookup_next(\|)\*O
finds only three compatible binding handles from profile entries
of priority 0 (zero),
\*Lrpc_ns_binding_lookup_next(\|)\*O returns a
partially full binding vector (with
three binding handles).  The next call to
\*Lrpc_\%ns_\%binding_\%lookup_\%next(\|)\*O
creates a new binding vector and begins looking for compatible binding handles
from profile entries of priority 1.
.PP
When the search finishes, the routine
returns a status code of \*Lrpc_s_no_more_bindings\*O and returns
the value NULL in \*Vbinding_vec\*O.
.PP
A client application calls \*Lrpc_ns_binding_inq_entry_name(\|)\*O
to obtain the name of the entry in the name service database where
the binding handle came from.
.PP
The \*Lrpc_ns_binding_lookup_next(\|)\*O routine allocates memory for the
returned \*Vbinding_vec\*O.
When a client application finishes with the vector, it must call
\*Lrpc_binding_vector_free(\|)\*O to deallocate the memory.
Each call to \*Lrpc_ns_binding_lookup_next(\|)\*O requires a
corresponding call to \*Lrpc_binding_vector_free(\|)\*O.
.PP
The client calls \*Lrpc_ns_binding_lookup_done(\|)\*O, which deletes the lookup context.
The client also calls \*Lrpc_ns_binding_lookup_done(\|)\*O if
the application wants to start a new search for compatible servers (by
calling the routine \*Lrpc_ns_binding_lookup_begin(\|)\*O).
The order of binding handles returned can be different for each new
search.  This means that the order in which binding handles are returned
to an application can be different each time the application is run.
.SS "Permissions Required"
.PP
You need read permission to the specified CDS object entry (the
starting name service entry) and to any CDS object entry in the
resulting search path.
.nL
.ne .8i
.SH "Return Values"
.PP
No value is returned.
.nL
.ne 1.5i
.SH "Errors"
.PP
The following describes a partial list of errors that might be returned.
Refer to the \*(Tg for complete descriptions of all error
messages.
.VL
.LI "\*Lrpc_s_ok\*O"
Success.
.LI "\*Lrpc_s_class_version_mismatch\*O"
RPC class version mismatch.
.LI "\*Lrpc_s_entry_not_found\*O"
Name service entry not found.
.LI "\*Lrpc_s_invalid_ns_handle\*O"
Invalid name service handle.
.LI "\*Lrpc_s_name_service_unavailable\*O"
Name service unavailable.
.LI "\*Lrpc_s_no_more_bindings\*O"
No more bindings.
.LI "\*Lrpc_s_no_ns_permission\*O"
No permission for name service operation.
.LI "\*Lrpc_s_not_rpc_entry\*O"
Not an RPC entry.
.LE
.SH "Related Information"
.PP
.ad l
Functions:
\*Lrpc_binding_to_string_binding(3rpc)\*O,
\*Lrpc_binding_vector_free(3rpc)\*O,
\*Lrpc_ns_binding_import_next(3rpc)\*O,
\*Lrpc_ns_binding_inq_entry_name(3rpc)\*O,
\*Lrpc_ns_binding_lookup_begin(3rpc)\*O,
\*Lrpc_ns_binding_lookup_done(3rpc)\*O,
\*Lrpc_ns_binding_select(3rpc)\*O,
\*Lrpc_string_binding_parse(3rpc)\*O.
.ad b
