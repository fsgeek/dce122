...\" @OSF_COPYRIGHT@
...\" COPYRIGHT NOTICE
...\" Copyright (c) 1990, 1991, 1992, 1993, 1994 Open Software Foundation, Inc.
...\" ALL RIGHTS RESERVED (DCE).  See the file named COPYRIGHT.DCE for
...\" the full copyright text.
...\" 
...\" HISTORY
...\" $Log: rpc_binding_inq_auth_caller.3rpc,v $
...\" Revision 1.1.6.2  1996/11/18  19:56:25  wardr
...\" 	{edit,R1.2.2}
...\" 	Init capped heads and added PDG pointer
...\" 	[1996/11/18  19:33:54  wardr]
...\"
...\" Revision 1.1.6.1  1996/05/13  18:07:16  wardr
...\" 	{enh,R1.2.2}
...\" 	Removed changebars
...\" 	[1996/05/13  18:03:52  wardr]
...\" 
...\" Revision 1.1.4.2  1996/02/07  20:17:47  rcb
...\" 	R1.2.1: editorial pass following HP revision
...\" 	[1996/02/07  20:12:19  rcb]
...\" 
...\" Revision 1.1.4.1  1996/01/28  22:01:06  weir
...\" 	CR 13293: miscellaneous HP work
...\" 	[1996/01/28  22:00:36  weir]
...\" 
...\" Revision 1.1.2.5  1995/06/07  20:10:39  buckler
...\" 	1.1 edits  Prentice Hall reformat
...\" 	[1995/06/07  20:05:41  buckler]
...\" 
...\" Revision 1.1.2.3  1994/06/13  17:04:13  devobj
...\" 	cr10872 - fix copyright
...\" 	[1994/06/13  16:48:16  devobj]
...\" 
...\" Revision 1.1.2.2  1994/05/11  20:01:04  jshirley
...\" 	No change.
...\" 	[1994/05/11  20:00:12  jshirley]
...\" 
...\" 	Just looked at file.
...\" 
...\" Revision 1.1.2.1  1994/05/10  18:35:49  millette
...\" 	(enh, 10515, R1.1)
...\" 	added for delegation
...\" 	[1994/05/10  18:34:14  millette]
...\" 
...\" $EndLog$
...\" 
...\" 
...\" HP History:
...\"	HP revision /main/HPDCE02/1  1995/11/14  17:05 UTC  millett
...\" 	07700:   clarifying status codes
...\" 
...\"	HP revision /main/1  1995/04/03  22:07 UTC  arh
...\" 	Add OSF doc sources.
...\" 
...\" 
...\" 
.TH rpc_binding_inq_auth_caller 3rpc
...\" .iX "\*Lrpc_binding_inq_auth_caller(\|)\*O"
.SH "Name"
\*Lrpc_binding_inq_auth_caller\*O - Returns authentication and authorization
information from the binding handle for an authenticated client
.PP
Used by server applications
.SH "Synopsis"
.sS
\*L#include <dce/rpc.h>\*L
.nL
\*L#include <dce/id_base.h>\*L
.sp .4v
\*Lvoid rpc_binding_inq_auth_caller\*L(
.nL
	\*Lrpc_binding_handle_t \*Vbinding_handle\*L,
.nL
	\*Lrpc_authz_cred_handle_t *\*Vprivs\*L,
.nL
	\*Lunsigned_char_p_t *\*Vserver_princ_name\*L,
.nL
	\*Lunsigned32 *\*Vprotect_level\*L,
.nL
	\*Lunsigned32 *\*Vauthn_svc\*L,
.nL
	\*Lunsigned32 *\*Vauthz_svc\*L,
.nL
	\*Lunsigned32 *\*Vstatus\*L);
.sE
.nL
.SH "Parameters"
.SS "Input"
.VL
.LI "\*Vbinding_handle\*O"
Specifies the client binding handle from which to return the
authentication and authorization information.
.LE
.SS "Output"
.VL
.LI "\*Vprivs\*O"
Returns an opaque handle to the authorization information for the client
that made the remote procedure call on \*Vbinding_handle\*O.  
.PP
...\" .PP
...\" The server must cast this handle to the data type specified by
...\" \*Vauthz_svc\*O.  The following table shows how to cast the return value.
...\" .br
...\" .ne 15
...\" .TB "Casts for Authorization Information"
...\" .in -0.4i
...\" .TS
...\" center, box, tab(@);
...\" cb s s
...\" lb | lb | lb
...\" lb | l | lb.
...\" Casts for Authorization Information
...\" _
...\" For \*Vauthz_svc value\*L:\*O@\*Vprivs\*L contains this data:\*O@Use this cast:
...\" _
...\" \*Lrpc_c_authz_none\*O@A \*LNULL\*O value.@\*ONone
...\" rpc_c_authz_name@The calling client's@(unsigned_char_t *)
...\" @principal name.
...\" rpc_c_authz_dce@The calling client's@(sec_id_pac_t *)
...\" @privilege attribute@
...\" @certificate.@
...\" .TE
...\" .in +0.5i 
...\" Note that \fBrpc_c_authz_none\fR is valid only if
...\" the \*Vauthn_svc\*O parameter is \*Lrpc_c_authn_none\*O.
...\" .PP
The data referenced by this parameter are read-only and should not be
modified by the server.  If the server wants to preserve any
of the returned data, it must copy the data into server-allocated
memory.
.LI "\*Vserver_princ_name\*O"
Returns a pointer to the server principal name specified by the
client that made the remote procedure call on \*Vbinding_handle\*O.
The content of the returned name and its syntax are
defined by the authentication service in use.
.PP
Specifying NULL prevents the routine from returning
this parameter.  In this case, the caller does not have to call
the \*Lrpc_string_free(\|)\*O routine.
.LI "\*Vprotect_level\*O"
Returns the protection level requested by the client that made the
remote procedure call on \*Vbinding\*O.  The protection level
determines the degree to which authenticated communications
between the client and the server are protected.
.PP
Specifying NULL prevents the routine from returning
this parameter.
.PP
The possible protection levels are as follows:
.VL
.LI "\*Lrpc_c_protect_level_default\*O"
Uses the default protection level for the specified
authentication service.
.LI "\*Lrpc_c_protect_level_none\*O"
Performs no protection.
.LI "\*Lrpc_c_protect_level_connect\*O"
Performs protection only when the client establishes a
relationship with the server.
.LI "\*Lrpc_c_protect_level_call\*O"
Performs protection only at the beginning of each remote procedure
call when the server receives the request.
.LI "\*Lrpc_c_protect_level_pkt\*O"
Ensures that all data received is from the expected client.
.LI "\*Lrpc_c_protect_level_pkt_integ\*O"
Ensures and verifies that none of the data transferred between
client and server has been modified.
.LI "\*Lrpc_c_protect_level_pkt_privacy\*O"
Performs protection as specified by all of the previous levels and
also encrypt each remote procedure call argument value.
.LE
.LI "\*Vauthn_svc\*O"
Returns the authentication service requested by the client
that made the remote procedure call on \*Vbinding\*O.
.PP
Specifying NULL prevents the routine from returning
this parameter.
.PP
The possible authentication services are as follows:
.VL
.LI "\*Lrpc_c_authn_none\*O"
No authentication.
.LI "\*Lrpc_c_authn_dce_secret\*O"
DCE shared-secret key authentication.
.LI "\*Lrpc_c_authn_dce_public\*O"
DCE public key authentication (reserved for future use).
.LI "\*Lrpc_c_authn_default\*O"
DCE default authentication service.
.LE
.LI "\*Vauthz_svc\*O"
Returns the authorization service requested by the client
that made the remote procedure call on \*Vbinding_handle\*O.
.PP
Specifying NULL prevents the routine from returning
this parameter.
.PP
The possible authorization services are as follows:  
.VL
.LI "\*Lrpc_c_authz_none\*O"
Server performs no authorization.  
This is valid only if the \*Vauthn_svc\*O parameter is \*Lrpc_c_authn_none\*O.
.LI "\*Lrpc_c_authz_name\*O"
Server performs authorization based on the client principal name.
.LI "\*Lrpc_c_authz_dce\*O"
Server performs authorization by using the client's DCE privilege
attribute certificate (PAC) sent to the server with each
remote procedure call made with \*Vbinding_handle\*O.  Generally,
access is checked against DCE access control lists (ACLs).
.LE
.LI "\*Vstatus\*O"
Returns the status code from this routine.  This status code
indicates whether the routine completed successfully or, if not, why not.
.PP
.ne 3
The possible status codes and their meanings are as follows:
.VL
.LI "\*Lrpc_s_ok\*O"
The routine completed successfully.
.LI "\*Lrpc_s_invalid_binding\*O"
The routine did not complete because of an invalid binding handle.
.LI "\*Lrpc_s_wrong_kind_of_binding\*O"
The routine did not complete because of the wrong kind of binding was specified for the operation.
.LI "\*Lrpc_s_binding_has_no_auth\*O"
The routine completed successfully, but the binding has no authentication information.
.LE
.LE
.SH "Description"
.PP
The \*Lrpc_binding_inq_auth_caller(\|)\*O routine returns
authentication and authorization information associated with
the client identified by \*Vbinding_handle\*O.  
The calling server manager routine can use the returned
data for authorization purposes.
.PP
If the client is part of a delegation chain, the 
call returns the authentication and authorization information 
for each member of the chain, the initiator and 
all subsequent delegates.  You can use the \*Lsec_cred_get_initiator(\|)\*O 
or \*Lsec_cred_get_delegate(\|)\*O calls to obtain the 
authorization information for a specific member of the chain.
.PP
The RPC runtime allocates memory for the returned
\*Vserver_princ_name\*O parameter.  The server is responsible for
calling the \*Lrpc_string_free(\|)\*O routine for the returned
parameter string.
.PP
For applications in which the client side uses the Interface Definition
Language (IDL) \*Lauto_handle\*O or
\*Limplicit_handle\*O attributes, the server side needs to be built
with the IDL \*Lexplicit_handle\*O attribute specified in the
attribute configuration file (ACF).  Using
\*Lexplicit_handle\*O provides \*Vbinding_handle\*O as the
first parameter to each server manager routine.
.nL
.SH "Errors"
.PP
The following describes a partial list of errors that might be returned.
Refer to the \*(Tg for complete descriptions of all error
messages.
.VL
.LI "\*Lrpc_s_invalid_binding\*O"
.LI "\*Lrpc_s_wrong_kind_of_binding\*O"
.LI "\*Lrpc_s_binding_has_no_auth\*O 
.LI "\*Lsec_login_s_default_use\*O"
.LI "\*Lsec_login_s_context_invalid\*O"
.LI "\*Lerror_status_ok\*O"
.LE
.SH "Related Information"
.PP
.ad l
Functions:
\*Lrpc_binding_inq_auth_info(3rpc)\*O,
\*Lrpc_binding_set_auth_info(3rpc)\*O,
\*Lrpc_string_free(3rpc)\*O, 
\*Lsec_cred_get_initiator(3sec)\*O,
\*Lsec_cred_get_delegate(3sec)\*O.
.ad b
