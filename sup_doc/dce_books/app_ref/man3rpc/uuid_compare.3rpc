...\"
...\"  @OSF_COPYRIGHT@
...\"  COPYRIGHT NOTICE
...\"  Copyright (c) 1990, 1991, 1992, 1993 Open Software Foundation, Inc.
...\"  ALL RIGHTS RESERVED (DCE).  See the file named COPYRIGHT.DCE in the
...\"  src directory for the full copyright text.
...\"
...\"
...\" HISTORY
...\" $Log: uuid_compare.3rpc,v $
...\" Revision 1.1.8.1  1996/11/18  20:00:17  wardr
...\" 	{edit,R1.2.2}
...\" 	Init capped heads and added PDG pointer
...\" 	[1996/11/18  19:36:02  wardr]
...\"
...\" Revision 1.1.6.6  1995/06/07  20:12:38  buckler
...\" 	1.1 edits  Prentice Hall reformat
...\" 	[1995/06/07  20:08:08  buckler]
...\" 
...\" Revision 1.1.6.4  1993/01/27  16:57:45  cjd
...\" 	Embedded copyright notice
...\" 	[1993/01/26  18:36:58  cjd]
...\" 
...\" Revision 1.1.6.3  1993/01/26  19:07:15  cjd
...\" 	Embedded copyright notice
...\" 	[1993/01/26  18:36:58  cjd]
...\" 
...\" Revision 1.1.6.2  1992/10/01  21:00:53  weir
...\" 	Removed change bars; moved into 1.0.2doc tree
...\" 	[1992/10/01  20:17:48  weir]
...\" 
...\" 	For P/H, now and forever!
...\" 	[1992/09/16  14:56:29  oaf]
...\" 
...\" Revision 1.1.4.3  1992/09/16  18:33:21  oaf
...\" 	*** empty log message ***
...\" 
...\" Revision 1.1.4.2  1992/08/14  17:59:17  oaf
...\" 	2nd edits, PURPOSE fix, .ad l on related functions (& restore)
...\" 	[1992/08/14  17:04:43  oaf]
...\" 
...\" Revision 1.1.2.2  1992/05/19  16:30:53  buckler
...\" 	Editorial review
...\" 	[1992/05/19  16:28:46  buckler]
...\" 
...\" Revision 1.1  1992/01/29  15:39:08  damon
...\" 	Initial revision
...\" 
...\" $EndLog$
...\"
...\" (c) Copyright 1991, Open Software Foundation, Inc.  ALL RIGHTS RESERVED
...\"   HISTORY COMMENTS:
...\"
...\"   DATE:                            COMMENT:
...\"
...\"	Mon Nov 11, 1991                 Initial file submission to HP
...\"                                    for final integration at IBM.
...\"                                   
...\"
...\" ********************************************************************
...\" Copyright (c) 1991 Hewlett-Packard Co. and Digital Equipment Corp. *
...\" All rights reserved.                                               *
...\" ********************************************************************
.TH uuid_compare 3rpc
...\" .iX "\*Luuid_compare(\|)\*O"
.SH "Name"
\*Luuid_compare\*O - Compares two UUIDs and determines their order
.PP
Used by client, server, or management applications
.SH "Synopsis"
.sS
\*L#include <dce/uuid.h>\*L
.sp .4v
\*Lsigned32 uuid_compare\*L(
.nL
	\*Luuid_t *\*Vuuid1\*L,
.nL
	\*Luuid_t *\*Vuuid2\*L,
.nL
	\*Lunsigned32 *\*Vstatus\*L);
.sE
.nL
.ne 1.5i
.SH "Parameters"
.SS "Input"
.VL
.LI \*Vuuid1\*O
Specifies a pointer to a UUID. This UUID is compared with the UUID specified in
\*Vuuid2\*O.
.PP
Use the value NULL to specify a nil UUID for this parameter.
.LI \*Vuuid2\*O
Specifies a pointer to a UUID. This UUID is compared with the UUID specified in
\*Vuuid1\*O.
.PP
Use the value NULL to specify a nil UUID for this parameter.
.LE
.SS "Output"
.VL
.LI "\*Vstatus\*O"
Returns the status code from this routine.  This status code
indicates whether the routine completed successfully or, if not, why not.
.LE
.nL
.ne 1.5i
.SH "Description"
.PP
The \*Luuid_compare(\|)\*O routine compares two UUIDs and determines their
order.  A nil UUID is considered the first element
in order.  The order of UUIDs is defined by the RPC architecture and
is not a temporal (related to time) ordering.  Comparing two specific
UUIDs always returns the same result regardless of the implementation
or system architecture.
.PP
You can use this routine to sort data with UUIDs as a key.
.nL
.ne 1.5i
.SH "Return Values"
.PP
Returns one of the following constants:
.VL
.LI "\-1"
The \*Vuuid1\*O parameter precedes the \*Vuuid2\*O parameter in order.
.LI "\00"
The \*Vuuid1\*O parameter is equal to the \*Vuuid2\*O parameter in order.
.LI "\01"
The \*Vuuid1\*O parameter follows the \*Vuuid2\*O parameter in order.
.LE
.PP
Note that a value of 0 (zero) has the same meaning as if
\*Luuid_equal\*O(\*V&uuid1\*O, \*V&uuid2\*O)
returned a value of TRUE.
.PP
A nil UUID is the first UUID in order.  This means the following:
.ad l
.ML
.LI
If \*Vuuid1\*O is NULL and \*Vuuid2\*O is nonnil,
the routine returns -1.
.LI
If \*Vuuid1\*O is NULL and \*Vuuid2\*O is NULL,
the routine returns 0.
.LI
If \*Vuuid1\*O is nonnil and \*Vuuid2\*O is NULL,
the routine returns 1.
.LE
.ad b
.nL
.ne 1.0i
.SH "Errors"
.PP
The following describes a partial list of errors that might be returned.
Refer to the \*(Tg for complete descriptions of all error
messages.
.VL
.LI "\*Luuid_s_ok\*O"
Success.
.LI "\*Luuid_s_bad_version\*O"
Bad UUID version.
.LE
.SH "Related Information"
.PP
.ad l
Functions:
\*Luuid_equal(3rpc)\*O,
\*Luuid_is_nil(3rpc)\*O.
.ad b
