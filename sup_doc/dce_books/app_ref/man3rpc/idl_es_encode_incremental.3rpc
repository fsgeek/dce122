...\" @OSF_COPYRIGHT@
...\" COPYRIGHT NOTICE
...\" Copyright (c) 1990, 1991, 1992, 1993, 1994 Open Software Foundation, Inc.
...\" ALL RIGHTS RESERVED (DCE).  See the file named COPYRIGHT.DCE for
...\" the full copyright text.
...\"
...\"
...\" HISTORY
...\" $Log: idl_es_encode_incremental.3rpc,v $
...\" Revision 1.1.4.1  1996/11/18  19:56:17  wardr
...\" 	{edit,R1.2.2}
...\" 	Init capped heads and added PDG pointer
...\" 	[1996/11/18  19:33:48  wardr]
...\"
...\" Revision 1.1.2.10  1995/06/07  20:10:34  buckler
...\" 	1.1 edits  Prentice Hall reformat
...\" 	[1995/06/07  20:05:34  buckler]
...\" 
...\" Revision 1.1.2.8  1994/07/25  15:47:33  zahn
...\" 	{review,9601,R1.1}
...\" 
...\" 	Added that routine prototypes should return an exception,
...\" 	per review comment from T. Jordahl.
...\" 	[1994/07/25  15:47:05  zahn]
...\" 
...\" Revision 1.1.2.7  1994/06/13  17:03:54  devobj
...\" 	cr10872 - fix copyright
...\" 	[1994/06/13  16:47:43  devobj]
...\" 
...\" Revision 1.1.2.6  1994/05/05  19:06:23  zahn
...\" 	Removed include line from Synopsis.  Replacing
...\" 	with information about including in rpc_intro.3rpc.
...\" 	[1994/05/05  19:06:06  zahn]
...\" 
...\" Revision 1.1.2.5  1994/04/29  18:25:53  zahn
...\" 	Fixed some typos.
...\" 	[1994/04/29  18:25:39  zahn]
...\" 
...\" Revision 1.1.2.4  1994/04/29  17:50:22  zahn
...\" 	Miscellaneous cleanup.
...\" 	[1994/04/29  17:50:02  zahn]
...\" 
...\" Revision 1.1.2.3  1994/04/27  18:33:38  zahn
...\" 	Added note about user-provided routines returning exceptions.
...\" 	[1994/04/27  18:33:21  zahn]
...\" 
...\" Revision 1.1.2.2  1994/04/26  19:21:20  zahn
...\" 	{enh,9601,R1.1}
...\" 
...\" 	Merged reference pages for user-provided prototypes
...\" 	(idl_es_allocate_ftn_t and idl_es_write_ftn_t)
...\" 	into this reference page to conform to documentation
...\" 	conventions used by other routines that require prototypes.
...\" 	See rpc_server_register_auth_info.3rpc for an example.
...\" 	Added include line for idl_es.h to Synopsis section.
...\" 	Added some information to Description section.
...\" 	[1994/04/26  19:19:53  zahn]
...\" 
...\" Revision 1.1.2.1  1994/03/21  16:33:46  rjohnson
...\" 	Changes made: New IDL reference page for Version 1.1.
...\" 	File name: app_ref/man3rpc/idl_es_encode_incremental.3rpc
...\" 	Change Request: 9601
...\" 	[1994/03/21  16:25:56  rjohnson]
...\" 
...\" $EndLog$ 
.TH idl_es_encode_incremental 3rpc
.SH "Name"
\*Lidl_es_encode_incremental\*O - Returns an
incremental encoding handle to the IDL encoding services
.PP
Used by client and server applications
.SH "Synopsis"
.sS
\*Lvoid idl_es_encode_incremental\*L(
.nL
	\*Lidl_void_p_t \*Vstate\*L,
.nL
	\*Lidl_es_allocate_fn_t \*Vallocate_fn\*L,
.nL
	\*Lidl_es_write_fn_t \*Vwrite_fn\*L,
.nL
	\*Lidl_es_handle_t *\*Ves_handle\*L,
.nL
	\*Lerror_status_t *\*Vstatus\*L);
.sE
.nL
.ne 1.5i
.SH "Parameters"
.SS "Input/Output"
.VL
.LI "\*Vstate\*O"
Specifies the address of an application-provided data structure that
coordinates the actions of the \*Vallocate_fn\*O and \*Vwrite_fn\*O routines.
The \*Vstate\*O data structure acts as a communications channel between
the application and the \*Vallocate_fn\*O and \*Vwrite_fn\*O routines.
.LE
.SS "Input"
.VL
.LI "\*Vallocate_fn\*O"
Specifies the address of a user-provided routine that
allocates an empty buffer.
The encoding stub uses the allocated buffer to store encoded data.
.PP
The following C definition for \*Lidl_es_allocate_fn_t\*O
illustrates the prototype for the buffer allocation routine:
.nL
.ne 1.5i
.iS
typedef void (*idl_es_allocate_fn_t)
 (
  idl_void_p_t    state,            /* in/out */
  idl_byte        **buffer,         /* out */
  idl_ulong_int   *size,            /* in/out */
 );
.iE
.PP
.ne 10
The \*Lidl_es_encode_incremental(\|)\*O routine passes the specified
\*Vstate\*O parameter value as input to the \*Vallocate_fn\*O buffer
allocation routine.  When the IDL encoding services call
the \*Vallocate_fn\*O routine, the value at the address
indicated by \*Vsize\*O represents the buffer size that
the IDL encoding services have requested the routine
to allocate.  When the \*Vallocate_fn\*O buffer allocation
routine allocates the buffer, it writes the actual size of the allocated
buffer to this parameter; the value must be a multiple of eight bytes.
The \*Vbuffer\*O parameter specifies the address of
the allocated buffer; this address must be 8-byte aligned.
.PP
The \*Vallocate_fn\*O routine should return an exception on error.
.PP
.LI "\*Vwrite_fn\*O"
Specifies the address of a user-provided routine that writes
the contents of a buffer that contains data that has been
encoded by the IDL encoding services.  The IDL encoding services
will call this routine when the buffer allocated by
\*Vallocate_fn\*O is full, or when all of the application's
encoding operation parameters have been encoded.
.PP
The following C definition for \*Lidl_es_write_fn_t\*O
illustrates the prototype for the \*Vwrite_fn\*O routine:
.nL
.ne 1.5i
.iS
typedef void (*idl_es_write_fn_t)
 (
  idl_void_p_t    state,            /* in/out */
  idl_byte        *buffer,          /* in */
  idl_ulong_int   size,             /* in */
 );
.iE
.PP
The \*Lidl_es_encode_incremental(\|)\*O routine passes the
specified \*Vstate\*O parameter value as input to
the \*Vwrite_fn\*O routine.  The \*Vbuffer\*O parameter value
is the address of the data that the IDL encoding services have
encoded.  The \*Vsize\*O parameter value is the size, in bytes, of the
encoded data.
.PP
The \*Vwrite_fn\*O routine should return an exception on error.
.LE
.SS "Output"
.VL
.LI "\*Ves_handle\*O"
Returns the address of an IDL encoding services handle for use
by a client or server encoding operation.
.LI "\*Vstatus\*O"
Returns the status code from this routine.  This status code indicates
whether the routine completed successfully or, if not, why not.
.LE
.SH "Description"
The IDL encoding services provide client and server
RPC applications with a method for encoding data types
in input parameters into a byte stream and decoding data types
in output parameters from a byte stream without invoking
the RPC runtime.  Encoding and decoding operations are
analogous to marshalling and unmarshalling, except that
the data is stored locally, and is not transmitted over
the network.  Client and server applications can use the
IDL encoding services to create persistent storage for
their data.  Encoding flattens complex data types into
a byte stream for storage on disk, while decoding restores
the flattened data to complex form.
.PP
The \*Lidl_es_encode_incremental(\|)\*O routine belongs
to a set of routines that return handles to the IDL
encoding services for use by client and server encoding
and decoding operations.  The information in the handle
controls the way in which the IDL encoding services
manage memory when encoding or decoding data.
.PP
The \*Lidl_es_encode_incremental(\|)\*O routine returns an
incremental encoding handle, which directs the IDL encoding
services to encode data into a chain of small buffers that
the user-provided \*Vallocate_fn\*O routine manages.
The user-provided \*Vwrite_fn\*O routine writes the
encoded data in these buffers back for access by
the application.
.PP
The \*Vstate\*O data structure is the communications path between
the application and the \*Vallocate_fn\*O and \*Vwrite_fn\*O routines.
For example, the application can build a cache of pre-allocated memory
to store encoded data, and store pointers to that pre-allocated memory
in the \*Vstate\*O data structure.  When invoked by the IDL encoding services
to allocate a buffer, the \*Vallocate_fn\*O routine can search
the \*Vstate\*O data structure for a free memory location to use.
.nL
.ne 1.5i
.SH "Return Values"
None.
.nL
.ne 1.5i
.SH "Errors"
.PP
The following describes a partial list of errors that might be returned.
Refer to the \*(Tg for complete descriptions of all error
messages.
.VL
.LI "\*Lrpc_s_ok\*O"
Success.
.LI "\*Lrpc_s_no_memory\*O"
Insufficient memory available to complete operation.
.LE
.SH "Related Information"
.ad l
Functions: \*Lidl_es_decode_incremental(3rpc)\*O,
\*Lidl_es_encode_dyn_buffer(3rpc)\*O,
\*Lidl_es_encode_fixed_buffer(3rpc)\*O.
.ad b
