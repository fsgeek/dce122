...\" @OSF_COPYRIGHT@
...\" COPYRIGHT NOTICE
...\" Copyright (c) 1990, 1991, 1992, 1993, 1994 Open Software Foundation, Inc.
...\" ALL RIGHTS RESERVED (DCE).  See the file named COPYRIGHT.DCE for
...\" the full copyright text.
...\" 
...\" 
...\" HISTORY
...\" $Log: cs_byte_local_size.3rpc,v $
...\" Revision 1.1.4.2  1996/11/18  19:56:06  wardr
...\" 	{edit,R1.2.2}
...\" 	Init capped heads and added PDG pointer
...\" 	[1996/11/18  19:33:38  wardr]
...\"
...\" Revision 1.1.4.1  1996/10/30  12:48:27  wardr
...\" 	{def,CR13630,R1.2.2}
...\" 	misc corrections from developer Mariko Romagna
...\" 	[1996/10/30  12:47:28  wardr]
...\" 
...\" Revision 1.1.2.9  1995/06/21  13:20:11  buckler
...\" 	More 1.1 edits.
...\" 	[1995/06/20  19:03:32  buckler]
...\" 
...\" 	More 1.1 edits.
...\" 	[1995/06/20  19:01:09  buckler]
...\" 
...\" Revision 1.1.2.8  1995/06/07  20:10:26  buckler
...\" 	1.1 edits  Prentice Hall reformat
...\" 	[1995/06/07  20:05:23  buckler]
...\" 
...\" Revision 1.1.2.6  1994/10/19  22:36:52  zahn
...\" 	{edt,5284,R1.1}
...\" 
...\" 	Added technical review comments.
...\" 	[1994/10/19  22:36:25  zahn]
...\" 
...\" Revision 1.1.2.5  1994/10/05  12:21:53  zahn
...\" 	{edt,5284,R1.1}
...\" 
...\" 	Miscellaneous corrections.
...\" 	[1994/10/05  12:21:35  zahn]
...\" 
...\" Revision 1.1.2.4  1994/08/12  15:41:36  zahn
...\" 	{edt,5284,R1.1}
...\" 	Added Mariko Romagna's corrections.
...\" 	[1994/08/12  15:40:36  zahn]
...\" 
...\" Revision 1.1.2.3  1994/06/13  17:04:02  devobj
...\" 	cr10872 - fix copyright
...\" 	[1994/06/13  16:48:02  devobj]
...\" 
...\" Revision 1.1.2.2  1994/04/29  19:33:36  zahn
...\" 	Removed pointer from binding parameter in synopsis.
...\" 	[1994/04/29  19:33:18  zahn]
...\" 
...\" Revision 1.1.2.1  1994/04/13  18:34:43  zahn
...\" 	{enh,5284,R1.1}
...\" 
...\" 	Added reference pages for char and code set i14y.
...\" 	[1994/04/13  18:34:28  zahn]
...\" 
...\" $EndLog$
.TH cs_byte_local_size 3rpc
...\" .iX "\*Lcs_byte_local_size(\|)\*O"
.SH "Name"
.zA "defect, 13630, 1.2.2, misc corrections from developer Mariko Romagna"
\*Lcs_byte_local_size\*O - Calculates the necessary buffer size
for code set conversion from a network code set to a local
code set prior to unmarshalling
.PP
Used by client and server stubs but not directly by applications
.zZ "defect, 13630, 1.2.2, misc corrections from developer Mariko Romagna"
.SH "Synopsis"
.sS
\*L#include <dce/codesets_stub.h>\*L
.sp .4v
\*Lvoid \*Lcs_byte_local_size\*L(
.nL
	\*Lrpc_binding_handle_t \*Vbinding\*L,
.nL
	\*Lunsigned32 \*Vnetwork_code_set_value\*L,
.nL
	\*Lunsigned32 \*Vnetwork_buffer_size\*L,
.nL
	\*Lidl_cs_convert_t *\*Vconversion_type\*L,
.nL
	\*Lunsigned32 *\*Vlocal_buffer_size\*L,
.nL
	\*Lerror_status_t *\*Vstatus\*L);
.sE
.nL
.ne 1.5i
.SH "Parameters"
.SS "Input"
.VL
.LI "\*Vbinding\*O"
Specifies the target binding handle from which to obtain
buffer size evaluation information.  When called from the client stub, 
this value is the binding handle of a compatible server returned by the
\*Lrpc_ns_binding_import_next(\|)\*O or \*Lrpc_ns_binding_select(\|)\*O
routine.  
.zA "defect, 13630, 1.2.2, misc corrections from developer Mariko Romagna"
.zZ "defect, 13630, 1.2.2, misc corrections from developer Mariko Romagna"
.LI "\*Vnetwork_code_set_value\*O"
The registered hexadecimal integer value that represents the
code set used to transmit character data over the network.
In general, the \*Enetwork\*O code set is the code set that the client application's
code sets evaluation routine has determined to be compatible for
this client and server.  When the caller is the client stub, this
value is the receiving tag.  When the caller is the server stub, this value
is the sending tag.
.LI "\*Vnetwork_buffer_size\*O"
The size, in units of \*Lidl_byte\*O, of the buffer that is allocated for the
international character data.  For a conformant or conformant
varying array, this value is the network value of
the \*Lsize_is\*O variable for the array; that is, the value is
the size of the unmarshalled string if no conversion is done.
.LE
.SS "Output"
.VL
.LI "\*Vconversion_type\*O"
A pointer to the enumerated type defined in \*Ldce/idlbase.h\*O that indicates whether data conversion
is necessary and whether or not the existing buffer is sufficient for storing
the results of the conversion.  The conversion type can be one
of the following values:
.VL
.LI "\*Lidl_cs_no_convert\*O"
No code set conversion is required.
.LI "\*Lidl_cs_in_place_convert\*O"
Code set conversion can be performed in the current buffer.
.LI "\*Lidl_cs_new_buffer_convert\*O"
The converted data must be written to a new buffer.
.LE
.zA "defect, 13630, 1.2.2, misc corrections from developer Mariko Romagna"
.LI "\*Vlocal_buffer_size\*O"
A pointer to the buffer size that needs to be allocated to contain
the converted data, in units of \*Lcs_byte\*O.  This value is to be
used as the local value of the \*Lsize_is\*O
variable for the array, and is nonNULL only if a conformant
or conformant varying array is to be unmarshalled.
A value of NULL in this parameter indicates that a fixed
or varying array is to be unmarshalled.
.zZ "defect, 13630, 1.2.2, misc corrections from developer Mariko Romagna"
.LI "\*Vstatus\*O"
Returns the status code from this routine.  This status code
indicates whether the routine completed successfully or, if not, why not.
.zA "defect, 13630, 1.2.2, moved ref to exceptions raised to client apps"
.zZ "defect, 13630, 1.2.2, moved ref to exceptions raised to client apps"
.LE
.nL
.ne 1.5i
.SH "Description"
.PP
.zA "defect, 13630, 1.2.2, misc corrections from developer Mariko Romagna"
The \*Lcs_byte_local_size(\|)\*O routine belongs to a set of
DCE RPC routines for use by client and server applications
that are transferring international character data
in a heterogeneous character set and code sets environment.
.PP
.ne 7
The \*Lcs_byte_local_size(\|)\*O routine is one of the four DCE RPC
buffer sizing routines that RPC stubs use before they
marshall or unmarshall data to determine whether or not the buffers allocated
for code set conversion need to be enlarged to hold the converted data.
The buffer sizing routines determine the type of conversion required and
calculate the size of the necessary buffer (if a conformant or conformant
varying array is to be marshalled or unmarshalled); the RPC stub then 
allocates a buffer of that size before it calls one of the code set conversion
routines.
.PP
Client and server stubs call the two \*Lcs_byte_\*V*\*L_size\*O
routines when the \*Lcs_byte\*O type (which is internally equivalent to
\*Lidl_byte\*O) has been specified
as the local data type using the \*Lcs_char\*O attribute in the
attribute configuration file for the application.  The
\*Lcs_byte_local_size(\|)\*O routine 
is used to evaluate buffer size requirements
prior to unmarshalling data received over the network.
.PP
Applications do not call \*Lcs_byte_local_size(\|)\*O routine directly.
Client and server stubs call the routine before they unmarshall any data.
The stubs pass the routine a binding handle and a code set value that
identifies the code set that was used to transfer international character
data over the network.  The stubs also specify the network storage size of the
data, in units of \*Lidl_byte\*O, if a conformant or conformant varying
array is to be unmarshalled, or they specify NULL if a fixed or
varying array is to be marshalled.
.PP
When called from a client stub, the \*Lcs_byte_local_size(\|)\*O
routine determines the value of \*Vconversion_type\*O from the client
and server's code set tag information stored in the binding handle
by a code sets evaluation routine or a tag-setting routine.
If the conversion type
specified in the handle is \*Lidl_\%cs_\%new_\%buffer_\%convert\*O,
the routine sets the \*Vconversion_type\*O parameter
to this value and, if a conformant or conformant varying
array is to be unmarshalled, calculates a new buffer size
by multiplying the value of \*Vnetwork_buffer_size\*O
by the maximum number of bytes required to represent the code set specified in
\*Vnetwork_code_set_value\*O.
The routine returns the new buffer size in the \*Vlocal_buffer_size\*O
parameter.  The size is specified in units of \*Lcs_byte\*O, which is the local
representation used for international character data (and is equivalent
to the \*Lidl_byte\*O data type).  For fixed and varying arrays,
the routine assumes that \*Vnetwork_buffer_size\*O is sufficient 
to store the converted data.
.PP
If the handle information specifies \*Lidl_cs_convert_in_place\*O
or \*Lidl_cs_no_convert\*O, the routine assumes that
\*Vnetwork_buffer_size\*O can store the converted data
(or that no conversion is necessary) and returns
\*Lidl_cs_convert_in_place\*O (or \*Lidl_cs_no_convert\*O)
in the \*Vconversion_type\*O parameter.  
If a conformant or conformant varying array is to be unmarshalled.
the routine also returns
the value of \*Vnetwork_buffer_size\*O in \*Vlocal_buffer_size\*O
.PP
.ne 12
In cases in which the binding handle does not contain the
results of character and code sets evaluation, or in which
the \*Lcs_byte_local_size(\|)\*O routine is being called from the server stub, it
determines the value of \*Vconversion_type\*O itself using the local code
set value and the code set value passed in the 
\*Vnetwork_code_set_value\*O parameter
and returns the appropriate \*Vconversion_type\*O value.
If a conformant or conformant varying array is to be unmarshalled,
and the routine finds that a new buffer is required to hold
the converted data, it also calculates the size of
this new buffer (by multiplying the value of \*Vnetwork_buffer_size\*O by 
the maximum number of bytes required to represent the code set specified in
\*Vnetwork_code_set_value\*O) and
returns the results, in units of \*Lcs_byte\*O, in \*Vlocal_buffer_size\*O.
.zZ "defect, 13630, 1.2.2, misc corrections from developer Mariko Romagna"
.SS "Permissions Required"
.PP
No permissions are required.
.nL
.ne 1.5i
.SH "Return Values"
.PP
No value is returned.
.nL
.ne 1.5i
.SH "Errors"
.PP
The following describes a partial list of errors that might be returned.
Refer to the \*(Tg for complete descriptions of all error
messages.
.VL
.LI "\*Lrpc_s_ok\*O"
Success.
.zA "defect, 13630, 1.2.2, misc corrections from developer Mariko Romagna"
.LI "\*Lrpc_s_ss_incompatible_codesets\*O"
The binding handle does not contain the information necessary
to evaluate the code set.
If this error occurs in the server stub, an exception is raised
to the client application.
.zZ "defect, 13630, 1.2.2, misc corrections from developer Mariko Romagna"
.LE
.zA "defect, 13630, 1.2.2, moved ref to exceptions raised to client apps"
.P
When invoked from the server stub, this routine calls the routines
\*Ldce_cs_loc_to_rgy(\|)\*O and \*Lrpc_rgy_get_max_bytes(\|)\*O.
If either of these routines returns an error, the \*Lcs_byte_local_size(\|)\*O
routine raises an exception to the client application.
.zZ "defect, 13630, 1.2.2, moved ref to exceptions raised to client apps"
.SH "Related Information"
.PP
.ad l
.zA "defect, 13630, 1.2.2, augmented functions list while I was at it"
Functions:
\*Lcs_byte_from_netcs(3rpc)\*O,
\*Lcs_byte_net_size(3rpc)\*O,
\*Lcs_byte_to_netcs(3rpc)\*O,
\*Ldce_cs_loc_to_rgy(3rpc)\*O,
\*Lrpc_rgy_get_max_bytes(3rpc)\*O.
\*Lwchar_t_local_size(3rpc)\*O,
\*Lwchar_t_net_size(3rpc)\*O.
.zZ "defect, 13630, 1.2.2, augmented functions list while I was at it"
.ad b
