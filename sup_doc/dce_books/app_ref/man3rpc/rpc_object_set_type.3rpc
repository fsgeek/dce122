...\"
...\"  @OSF_COPYRIGHT@
...\"  COPYRIGHT NOTICE
...\"  Copyright (c) 1990, 1991, 1992, 1993 Open Software Foundation, Inc.
...\"  ALL RIGHTS RESERVED (DCE).  See the file named COPYRIGHT.DCE in the
...\"  src directory for the full copyright text.
...\"
...\"
...\" HISTORY
...\" $Log: rpc_object_set_type.3rpc,v $
...\" Revision 1.1.8.1  1996/11/18  19:59:26  wardr
...\" 	{edit,R1.2.2}
...\" 	Init capped heads and added PDG pointer
...\" 	[1996/11/18  19:35:18  wardr]
...\"
...\" Revision 1.1.6.7  1995/06/21  13:20:51  buckler
...\" 	More 1.1 edits.
...\" 	[1995/06/20  21:01:20  buckler]
...\" 
...\" Revision 1.1.6.6  1995/06/07  20:11:58  buckler
...\" 	1.1 edits  Prentice Hall reformat
...\" 	[1995/06/07  20:07:20  buckler]
...\" 
...\" Revision 1.1.6.4  1993/01/27  16:54:59  cjd
...\" 	Embedded copyright notice
...\" 	[1993/01/26  18:33:40  cjd]
...\" 
...\" Revision 1.1.6.3  1993/01/26  19:05:37  cjd
...\" 	Embedded copyright notice
...\" 	[1993/01/26  18:33:40  cjd]
...\" 
...\" Revision 1.1.6.2  1992/10/01  20:56:36  weir
...\" 	Removed change bars; moved into 1.0.2doc tree
...\" 	[1992/10/01  20:09:13  weir]
...\" 
...\" 	For P/H, now and forever!
...\" 	[1992/09/16  14:52:27  oaf]
...\" 
...\" Revision 1.1.4.3  1992/09/16  18:31:46  oaf
...\" 	*** empty log message ***
...\" 
...\" Revision 1.1.4.2  1992/08/14  17:53:52  oaf
...\" 	2nd edits, PURPOSE fix, .ad l on related functions (& restore)
...\" 	[1992/08/14  17:01:50  oaf]
...\" 
...\" Revision 1.1.2.2  1992/05/18  20:59:55  buckler
...\" 	Editorial review
...\" 	[1992/05/18  20:58:48  buckler]
...\" 
...\" Revision 1.1  1992/01/29  15:38:12  damon
...\" 	Initial revision
...\" 
...\" $EndLog$
...\"
...\" (c) Copyright 1991, Open Software Foundation, Inc.  ALL RIGHTS RESERVED
...\"   HISTORY COMMENTS:
...\"
...\"   DATE:                            COMMENT:
...\"
...\"	Mon Nov 11, 1991                 Initial file submission to HP
...\"                                    for final integration at IBM.
...\"
...\"
...\" ********************************************************************
...\" Copyright (c) 1991 Hewlett-Packard Co. and Digital Equipment Corp. *
...\" All rights reserved.                                               *
...\" ********************************************************************
.TH rpc_object_set_type 3rpc
...\" .iX "\*Lrpc_object_set_type(\|)\*O"
.SH "Name"
\*Lrpc_object_set_type\*O - Registers the type of an object with the RPC
runtime
.PP
Used by server applications
.SH "Synopsis"
.sS
\*L#include <dce/rpc.h>\*L
.sp .4v
\*Lvoid \*Lrpc_object_set_type\*L(
.nL
	\*Luuid_t *\*Vobj_uuid\*L,
.nL
	\*Luuid_t *\*Vtype_uuid\*L,
.nL
	\*Lunsigned32 *\*Vstatus\*L);
.sE
.nL
.ne 1.5i
.SH "Parameters"
.SS "Input"
.VL
.LI "\*Vobj_uuid\*O"
Specifies an object UUID to associate with the type UUID in the
\*Vtype_uuid\*O  parameter.
Do not specify NULL or a nil UUID.
.LI "\*Vtype_uuid\*O"
Specifies the type UUID of the \*Vobj_uuid\*O parameter.
.PP
Specify an argument value of NULL or a nil UUID to reset the
object type to the default
association of object UUID/nil type UUID.
.LE
.SS "Output"
.VL
.LI "\*Vstatus\*O"
Returns the status code from this routine.  This status code
indicates whether the routine completed successfully or, if not, why not.
.LE
.nL
.ne 1.5i
.SH "Description"
.PP
The \*Lrpc_object_set_type(\|)\*O routine assigns a
type UUID to an object UUID.
.PP
By default, the RPC runtime assumes that the type of all objects is nil.
A server program that contains one implementation of
an interface (one manager entry point vector) does not need to
call this routine, provided
that the server registered the interface with the nil type UUID (see the
\*Lrpc_server_register_if(3rpc)\*O reference page).
.PP
A server program that contains multiple implementations of
an interface (multiple manager entry point vectors; that is,
multiple type UUIDs) calls this routine
once for each object UUID the server offers.  Associating each
object with a type UUID tells the RPC runtime which
manager entry point vector (interface implementation) to use
when the server receives a remote procedure call for a nonnil object UUID.
.PP
The RPC runtime allows an application to set the type for an unlimited number of objects.
.PP
To remove the association between an object UUID and its type UUID
(established by calling this routine), a server calls this routine again
and specifies the value NULL or a nil UUID for the
\*Vtype_uuid\*O parameter.
This resets the association between an object UUID and type UUID
to the default.
.PP
A server cannot register a nil object UUID. The RPC runtime automatically
registers the nil object UUID with a nil type UUID. Attempting to set
the type of a nil object UUID will result in the routine's returning
the status code \*Lrpc_s_invalid_object\*O.
.PP
Servers that want to maintain their own object UUID to type UUID
mapping can use \*Lrpc_object_set_inq_fn(\|)\*O in place of,
or in addition to, \*Lrpc_\%object_\%set_\%type(\|)\*O.
.nL
.ne .8i
.SH "Return Values"
.PP
No value is returned.
.nL
.ne .8i
.SH "Errors"
.PP
The following describes a partial list of errors that might be returned.
Refer to the \*(Tg for complete descriptions of all error
messages.
.VL
.LI "\*Lrpc_s_ok\*O"
Success.
.LI "\*Lrpc_s_already_registered\*O"
Object already registered.
.LI "\*Lrpc_s_invalid_object\*O"
Invalid object.
.LI "\*Luuid_s_bad_version\*O"
Bad UUID version.
.LE
.SH "Related Information"
.PP
.ad l
Functions:
\*Lrpc_object_set_inq_fn(3rpc)\*O,
\*Lrpc_server_register_if(3rpc)\*O.
.ad b
