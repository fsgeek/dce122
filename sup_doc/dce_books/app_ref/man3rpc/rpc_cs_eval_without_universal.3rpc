...\" @OSF_COPYRIGHT@
...\" COPYRIGHT NOTICE
...\" Copyright (c) 1990, 1991, 1992, 1993, 1994 Open Software Foundation, Inc.
...\" ALL RIGHTS RESERVED (DCE).  See the file named COPYRIGHT.DCE for
...\" the full copyright text.
...\" 
...\" 
...\" HISTORY
...\" $Log: rpc_cs_eval_without_universal.3rpc,v $
...\" Revision 1.1.4.1  1996/11/18  19:56:51  wardr
...\" 	{edit,R1.2.2}
...\" 	Init capped heads and added PDG pointer
...\" 	[1996/11/18  19:34:08  wardr]
...\"
...\" Revision 1.1.2.8  1995/06/21  13:20:22  buckler
...\" 	More 1.1 edits.
...\" 	[1995/06/20  19:47:11  buckler]
...\" 
...\" Revision 1.1.2.7  1995/06/07  20:10:50  buckler
...\" 	1.1 edits  Prentice Hall reformat
...\" 	[1995/06/07  20:05:58  buckler]
...\" 
...\" Revision 1.1.2.5  1994/10/18  21:59:46  zahn
...\" 	{edt,5284,R1.1}
...\" 
...\" 	Added technical review comments.
...\" 	[1994/10/18  21:59:24  zahn]
...\" 
...\" Revision 1.1.2.4  1994/08/22  17:53:17  zahn
...\" 	{edt,5284,R1.1}
...\" 
...\" 	Made a couple of corrections for new functionality.
...\" 	[1994/08/22  17:52:54  zahn]
...\" 
...\" Revision 1.1.2.3  1994/08/12  16:54:31  zahn
...\" 	{edt,5284,R1.1}
...\" 
...\" 	Removed rpc_cs_eval_with_universal() from
...\" 	related functions list and made a couple of
...\" 	corrections.
...\" 	[1994/08/12  16:54:11  zahn]
...\" 
...\" Revision 1.1.2.2  1994/06/13  17:04:10  devobj
...\" 	cr10872 - fix copyright
...\" 	[1994/06/13  16:48:11  devobj]
...\" 
...\" Revision 1.1.2.1  1994/04/13  21:22:21  zahn
...\" 	{enh,5284,R1.1}
...\" 
...\" 	Document character/code set interoperability functions.
...\" 	[1994/04/13  21:21:53  zahn]
...\" 
...\" $EndLog$
.TH rpc_cs_eval_without_universal 3rpc
...\" .iX "\*Lrpc_cs_eval_without_universal(\|)\*O"
.SH "Name"
\*Lrpc_cs_eval_without_universal\*O - Evaluates a server's supported
character sets and code sets during the server binding selection process
.PP
Used indirectly by client applications
.SH "Synopsis"
.sS
\*L#include <dce/rpc.h>\*L
.sp .4v
\*Lvoid \*Lrpc_cs_eval_without_universal\*L(
.nL
	\*Lrpc_ns_handle_t \*Vbinding_handle\*L,
.nL
	\*Lidl_void_p_t \*Veval_args\*L,
.nL
	\*Lidl_void_p_t *\*Vcontext\*L);
.sE
.nL
.ne 1.5i
.SH "Parameters"
.SS "Input"
.VL
.LI "\*Vbinding_handle\*O"
The server binding handle.
.LI "\*Veval_args\*O"
An opaque data type that contains matching criteria
that the routine uses to perform code sets
compatibility evaluation.
.LE
.SS "Input/Output"
.VL
.VL
.LI "\*Vcontext\*O"
An opaque data type that contains search context to perform character
and code sets compatibility evaluation.  The routine returns the
result of the evaluation in a field within \*Vcontext\*O.
.LE
.LE
.nL
.ne 1.5i
.SH "Description"
.PP
The \*Lrpc_cs_eval_without_universal(\|)\*O routine is a DCE RPC character
and code sets evaluation routine that can be added to an import context.
The routine provides a mechanism for a client application that is
passing character data in a heterogeneous character set and code sets
environment to evaluate a server's character and code sets compatibility
before establishing a connection with it.
.PP
.ne 8
Client applications do not call \*Lrpc_cs_eval_without_universal(\|)\*O directly.
Instead, they add it to the
import context created by the \*Lrpc_\%ns_\%binding_\%import_\%begin(\|)\*O routine
by calling the routine \*Lrpc_\%ns_\%import_\%ctx_\%add_\%eval(\|)\*O and
specifying the routine name and the RPC server entry name to be
evaluated.
When the client application calls the \*Lrpc_ns_binding_import_next(\|)\*O
routine to import compatible binding handles for servers, this routine
calls \*Lrpc_cs_eval_without_universal(\|)\*O, which applies client-server code
sets compatibility checking as another criteria for compatible binding selection.
.PP
The \*Lrpc_cs_eval_without_universal(\|)\*O routine directs the routine
\*Lrpc_\%ns_\%binding_\%import_\%next(\|)\*O to reject servers
with incompatible character sets. 
The routine also directs the \*Lrpc_ns_binding_import_next(\|)\*O routine
to reject servers whose supported code sets are incompatible with
the client's supported code sets; that is, it does not resort
to using an intermediate code set as a last resort.
.nS note
Application programmers need not pay attention to
the arguments of this routine.  Programmers only need to
use the routine \*Lrpc_ns_import_ctx_add_eval(\|)\*O
to set the routine, for example:
.oS
rpc_ns_import_ctx_add_eval(
&import_context,
rpc_c_eval_type_codesets,
(void *) nsi_entry_name,
rpc_cs_eval_without_universal,
NULL,
&status);
.oE
.nE
.SS "Permissions Required"
.PP
No permissions are required.
.nL
.ne .8i
.SH "Return Values"
.PP
No value is returned.
.nL
.ne 1.5i
.SH "Related Information"
.PP
.ad l
Functions:
\*Lrpc_cs_get_tags(3rpc)\*O,
\*Lrpc_ns_binding_import_begin(3rpc)\*O,
\*Lrpc_ns_binding_import_done(3rpc)\*O,
\*Lrpc_ns_binding_import_next(3rpc)\*O,
\*Lrpc_ns_import_ctx_add_eval(3rpc)\*O,
\*Lrpc_ns_mgmt_handle_set_exp_age(3rpc)\*O.
.ad b
