...\" @OSF_COPYRIGHT@
...\" COPYRIGHT NOTICE
...\" Copyright (c) 1990, 1991, 1992, 1993, 1994 Open Software Foundation, Inc.
...\" ALL RIGHTS RESERVED (DCE).  See the file named COPYRIGHT.DCE for
...\" the full copyright text.
...\" 
...\" 
...\" HISTORY
...\" $Log: wchar_t_net_size.3rpc,v $
...\" Revision 1.1.4.2  1996/11/18  20:00:29  wardr
...\" 	{edit,R1.2.2}
...\" 	Init capped heads and added PDG pointer
...\" 	[1996/11/18  19:36:11  wardr]
...\"
...\" Revision 1.1.4.1  1996/10/30  12:48:34  wardr
...\" 	{def,CR13630,R1.2.2}
...\" 	misc corrections from developer Mariko Romagna
...\" 	[1996/10/30  12:47:34  wardr]
...\" 
...\" Revision 1.1.2.8  1995/06/21  15:22:01  buckler
...\" 	More 1.1 edits.
...\" 	[1995/06/21  13:59:49  buckler]
...\" 
...\" Revision 1.1.2.7  1995/06/07  20:12:47  buckler
...\" 	1.1 edits  Prentice Hall reformat
...\" 	[1995/06/07  20:08:20  buckler]
...\" 
...\" Revision 1.1.2.5  1994/10/19  22:34:19  zahn
...\" 	{edt,5284,R1.1}
...\" 
...\" 	Added technical review comments.
...\" 	[1994/10/19  22:34:04  zahn]
...\" 
...\" Revision 1.1.2.4  1994/10/05  12:37:08  zahn
...\" 	{edt,5284,R1.1}
...\" 
...\" 	Made Mariko R.'s technical corrections to
...\" 	the cs_byte_net_size reference page to this reference page,
...\" 	since the routines are identical in function.
...\" 	[1994/10/05  12:36:55  zahn]
...\" 
...\" Revision 1.1.2.3  1994/06/13  17:04:01  devobj
...\" 	cr10872 - fix copyright
...\" 	[1994/06/13  16:48:01  devobj]
...\" 
...\" Revision 1.1.2.2  1994/04/29  19:40:13  zahn
...\" 	Removed binding handle as pointer from synopsis.
...\" 	[1994/04/29  19:40:00  zahn]
...\" 
...\" Revision 1.1.2.1  1994/04/01  21:35:31  zahn
...\" 	{enh,5284,R1.1}
...\" 
...\" 	Add documentation for character and code sets interoperability
...\" 	features for DCE 1.1.
...\" 	[1994/04/01  21:34:32  zahn]
...\" 
...\" $EndLog$
.TH wchar_t_net_size 3rpc
...\" .iX "\*Lwchar_t_net_size(\|)\*O"
.SH "Name"
.zA "defect, 13630, 1.2.2, misc corrections from developer Mariko Romagna"
\*Lwchar_t_net_size\*O - Calculates the necessary buffer size
for code set conversion from a local code set to a network 
code set prior to marshalling
.PP
Used by client and server stubs but not directly by applications
.zZ "defect, 13630, 1.2.2, misc corrections from developer Mariko Romagna"
.SH "Synopsis"
.sS
.zA "defect, 13630, 1.2.2, misc corrections from developer Mariko Romagna"
\*L#include <dce/codesets_stub.h>\*L
.zZ "defect, 13630, 1.2.2, misc corrections from developer Mariko Romagna"
.sp .4v
\*Lvoid \*Lwchar_t_net_size\*L(
.nL
	\*Lrpc_binding_handle_t \*Vbinding\*L,
.nL
	\*Lunsigned32 \*Vnetwork_code_set_value\*L,
.nL
	\*Lunsigned32 \*Vlocal_buffer_size\*L,
.nL
	\*Lidl_cs_convert_t *\*Vconversion_type\*L,
.nL
	\*Lunsigned32 *\*Vnetwork_buffer_size\*L,
.nL
	\*Lerror_status_t *\*Vstatus\*L);
.sE
.nL
.ne 1.5i
.SH "Parameters"
.SS "Input"
.VL
.LI "\*Vbinding\*O"
Specifies the target binding handle from which to obtain
buffer size evaluation information.  When called from the client stub, 
this value is the binding handle of a compatible server returned by the
\*Lrpc_ns_binding_import_next(\|)\*O or \*Lrpc_ns_binding_select(\|)\*O
routine.  
.zA "defect, 13630, 1.2.2, misc corrections from developer Mariko Romagna"
.zZ "defect, 13630, 1.2.2, misc corrections from developer Mariko Romagna"
.LI "\*Vnetwork_code_set_value\*O"
The registered hexadecimal integer value that represents the
code set to be used to transmit character data over the network.
In general, the network code set is the code set that the client application's
code sets evaluation routine has determined to be compatible for
this client and server.  When the caller is the client stub, this
value is the sending tag.  When the caller
is the server stub, this value is the receiving tag.
.zA "defect, 13630, 1.2.2, misc corrections from developer Mariko Romagna"
.LI "\*Vlocal_buffer_size\*O"
The size, in units of \*Lwchar_t\*O, of the buffer that is allocated for the
international character data.
For a conformant or conformant varying array, this value is the local value of
the \*Lsize_is\*O variable
for the array; that is, the value is the size of the marshalled
string if no conversion is done.
.zZ "defect, 13630, 1.2.2, misc corrections from developer Mariko Romagna"
.LE
.nL
.ne 8
.SS "Output"
.VL
.zA "defect, 13630, 1.2.2, misc corrections from developer Mariko Romagna"
.LI "\*Vconversion_type\*O"
A pointer to the enumerated type defined in \*Ldce/idlbase.h\*O
that indicates whether data conversion
is necessary and whether or not the existing buffer is sufficient for storing
the results of the conversion.  Because \*Lwchar_t\*O to
\*Lidl_byte\*O require different numbers of bytes to encode one character,
and \*Lwchar_t\*O to \*Lidl_byte\*O 
conversion always takes place, 
the conversion type returned is always
\*Lidl_cs_new_buffer_convert\*O.
.zZ "defect, 13630, 1.2.2, misc corrections from developer Mariko Romagna"
.LI "\*Vnetwork_buffer_size\*O"
A pointer to the buffer size that needs to be allocated to contain
the converted data, in units of \*Lidl_byte\*O.  This value is to be
used as the network value of the \*Lsize_is\*O
variable for the array, and is non-NULL only if a conformant
or conformant varying array is to be marshalled.
A value of NULL in this parameter indicates that a fixed
or varying array is to be marshalled.
.LI "\*Vstatus\*O"
Returns the status code from this routine.  This status code
indicates whether the routine completed successfully or, if not, why not.
.LE
.nL
.ne 1.5i
.SH "Description"
.PP
.zA "defect, 13630, 1.2.2, misc corrections from developer Mariko Romagna"
The \*Lwchar_t_net_size(\|)\*O routine belongs to a set of
DCE RPC routines for use by client and server applications
that are transferring international character data
in a heterogeneous character set and code sets environment.
.PP
The \*Lwchar_t_net_size(\|)\*O routine is one of the four DCE RPC
buffer sizing routines that RPC stubs use before they
marshall or unmarshall data to determine whether or not the buffers allocated
for code set conversion need to be enlarged to hold the converted data.
The buffer sizing routines determine the type of conversion required and
calculate the size of the necessary buffer (if a conformant 
or conformant varying array is to be marshalled or unmarshalled); the 
RPC stub then allocates a buffer 
of that size before it calls one of the code set conversion
routines.
.PP
Client and server stubs call the two \*Lwchar_t_\*V*\*L_size\*O
routines when the \*Lwchar_t\*O type has been specified
as the local data type using the \*Lcs_char\*O attribute in the
attribute configuration file for the application.  The
\*Lwchar_t_net_size(\|)\*O routine
is used to evaluate buffer size requirements
prior to marshalling data to be sent over the network.
.P
Applications do not call the \*Lwchar_t_net_size(\|)\*O routine directly.
Client and server stubs call the routine before they marshall any data.
The stubs pass the routine a binding handle and a code set value that
identifies the code set to be used to transfer international character data
over the network.  The stubs also specify the local storage size of the
data, in units of \*Lwchar_t\*O.
.PP
Because \*Lwchar_t\*O and \*Lidl_byte\*O require different
numbers of bytes to encode one character, \*Lwchar_t_net_size(\|)\*O always
sets \*Vconversion_type\*O to \*Lidl_cs_new_buffer_convert\*O, regardless of
whether it is called from a client or server stub, or whether client and
server code set tag information has been stored in the binding handle
by a code sets evaluation or tag-setting routine.
If a conformant or conformant varying
array is to be marshalled, the routine then calculates a new buffer size
by multiplying the value of \*Llocal_buffer_size\*O
by the number of bytes required to encode one \*Lwchar_t\*O unit.
The routine returns the new buffer size in the \*Vnetwork_buffer_size\*O
argument.  The size is specified in units of \*Lidl_byte\*O, which is the network 
representation used for international character data.
...\"
...\" Previous text (below) was redundant as well as erroneous.  conversion_type is
...\" always idl_cs_new_buffer_convert. -- rcb
...\"
...\" When called from a client stub, the \*Lwchar_t_net_size\*O
...\" routine determines the value of \*Vconversion_type\*O from conversion
...\" method and tag information set up in the binding handle
...\" by a code sets evaluation routine or a tag-setting routine.
...\" Since \*Lwchar_t\*O and \*Lidl_byte\*O are completely different
...\" data types, the routine always sets the value to
...\" \*Lidl_cs_new_buffer_convert\*O.
...\" The routine sets the \*Vconversion_type\*O parameter
...\" to this value and, if a conformant or conformant varying
...\" array is to be marshalled, calculates a new buffer size
...\" by multiplying the value of \*Vlocal_buffer_size\*O
...\" by the byte size for \*Lwchar_t\*O.
...\" The routine returns the new buffer size in the \*Vnetwork_buffer_size\*O
...\" parameter.  The size is specified in units of 
...\" \*Lidl_byte\*O, which is the network
...\" representation used for international character data.
...\" .PP
...\" In cases where the binding handle does not contain the
...\" results of character and code sets evaluation, or where
...\" it is being called from the server stub, the \*Lwchar_t_net_size\*O routine
...\" determines the value of \*Vconversion_type\*O itself using the local code
...\" set value and the code set value passed in the 
...\" \*Vnetwork_code_set_value\*O parameter,
...\" and returns the appropriate \*Vconversion_type\*O value.
...\" If a conformant or conformant varying array is to be marshalled,
...\" and the routine finds that a new buffer is required to hold
...\" the converted data, the routine calculates the size of
...\" this new buffer (by multiplying the value of \*Vlocal_buffer_size\*O by 
...\" sizeof(wchar_t); that is, the number of bytes required
...\" to encode one \*Lwchar_t\*O data type,
...\" returns the results, in units of \*Lidl_byte\*O, in \*Vnetwork_buffer_size\*O.
.PP
When a fixed or varying array is being
marshalled, the \*Lwchar_t_net_size(\|)\*O routine cannot calculate
the required buffer size and does not return a value in the
\*Vnetwork_buffer_size\*O argument.
.zZ "defect, 13630, 1.2.2, misc corrections from developer Mariko Romagna"
.SS "Permissions Required"
.PP
No permissions are required.
.nL
.ne 1.5i
.SH "Return Values"
.PP
No value is returned.
.nL
.ne 1.5i
.SH "Errors"
.PP
The following describes a partial list of errors that might be returned.
Refer to the \*(Tg for complete descriptions of all error
messages.
.VL
.LI "\*Lrpc_s_ok\*O"
Success.
.zA "defect, 13630, 1.2.2, misc corrections from developer Mariko Romagna"
.LI "\*Lrpc_s_ss_incompatible_codesets\*O"
The binding handle does not contain the information necessary
to evaluate the code set.
If this error occurs in the server stub, an exception is raised
to the client application.
.zZ "defect, 13630, 1.2.2, misc corrections from developer Mariko Romagna"
.LE
.P
When invoked from the server stub, this routine calls the routines
\*Ldcs_cs_loc_to_rgy(\|)\*O and \*Lrpc_rgy_get_max_bytes(\|)\*O.
If either of these routines returns an error, the \*Lwchar_t_net_size(\|)\*O
routine raises an exception to the client application.
.SH "Related Information"
.PP
.ad l
.zA "defect, 13630, 1.2.2, augmented functions list while I was at it"
Functions:
\*Lcs_byte_local_size(3rpc)\*O,
\*Lcs_byte_net_size(3rpc)\*O,
\*Ldcs_cs_loc_to_rgy(3rpc)\*O,
\*Lrpc_rgy_get_max_bytes(3rpc)\*O,
\*Lwchar_t_from_netcs(3rpc)\*O,
\*Lwchar_t_local_size(3rpc)\*O,
\*Lwchar_t_to_netcs(3rpc)\*O.
.zZ "defect, 13630, 1.2.2, augmented functions list while I was at it"
.ad b
