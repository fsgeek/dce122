...\" @OSF_COPYRIGHT@
...\" COPYRIGHT NOTICE
...\" Copyright (c) 1990, 1991, 1992, 1993, 1994 Open Software Foundation, Inc.
...\" ALL RIGHTS RESERVED (DCE).  See the file named COPYRIGHT.DCE for
...\" the full copyright text.
...\" 
...\" 
...\" HISTORY
...\" $Log: xds_intro.3xds,v $
...\" Revision 1.1.4.1  1996/11/20  16:51:29  wardr
...\" 	{edit,R1.2.2}
...\" 	Init capped heads and added PDG pointer
...\" 	[1996/11/20  16:50:41  wardr]
...\"
...\" Revision 1.1.2.11  1995/06/21  13:23:23  buckler
...\" 	More 1.1 edits
...\" 	[1995/06/20  16:00:33  buckler]
...\" 
...\" 	More 1.1 edits.
...\" 	[1995/06/19  20:26:11  buckler]
...\" 
...\" 	More 1.1 edits.
...\" 	[1995/06/19  20:23:37  buckler]
...\" 
...\" Revision 1.1.2.10  1995/06/09  16:27:19  buckler
...\" 	Line break fixes.
...\" 	[1995/06/07  22:37:44  buckler]
...\" 
...\" Revision 1.1.2.9  1995/06/07  22:28:15  buckler
...\" 	1.1 edits and Prentice Hall reformat
...\" 	[1995/06/07  19:52:58  buckler]
...\" 
...\" Revision 1.1.2.8  1994/11/03  23:48:55  neilson
...\" 	Substituted macros for book names in cross refs.
...\" 	[1994/11/03  01:39:52  neilson]
...\" 
...\" Revision 1.1.2.7  1994/09/22  19:44:51  hal
...\" 	{def, 10326, R1.1}
...\" 	Fixed name of page (in text) to conform with xxxx_intro format.
...\" 	[1994/09/22  19:44:30  hal]
...\" 
...\" Revision 1.1.2.6  1994/09/08  17:50:49  rnollman
...\" 	[rnollman] - updated input/output/return code parms from Dublin"n
...\" 	[1994/09/08  17:43:53  rnollman]
...\" 
...\" Revision 1.1.2.5  1994/08/05  16:53:52  rnollman
...\" 	[rnollman] - checkin after incorporating osf edits
...\" 	[1994/08/05  16:49:02  rnollman]
...\" 
...\" Revision 1.1.2.4  1994/06/13  17:11:04  devobj
...\" 	cr10872 - fix copyright
...\" 	[1994/06/13  16:50:57  devobj]
...\" 
...\" Revision 1.1.2.3  1994/05/10  20:54:19  rnollman
...\" 	final beta submittal from Dublin
...\" 	[1994/05/10  20:53:58  rnollman]
...\" 
...\" Revision 1.1.2.2  1994/04/17  15:44:11  rnollman
...\" 	updated with new information from Dublin
...\" 	[1994/04/17  15:43:55  rnollman]
...\" 
...\" Revision 1.1.2.1  1994/04/11  20:37:14  rom
...\" 	No change.
...\" 	[1994/04/11  20:04:16  rom]
...\" 
...\" 	{def, 10326, R1.1}
...\" 	Rename intro.3xds to xds_intro.3xds.
...\" 	[1994/04/11  20:02:29  rom]
...\" 
...\" $EndLog$
...\"
...\" (c) Copyright 1991, Open Software Foundation, Inc.  ALL RIGHTS RESERVED
...\" (c) Copyright 1991, Open Software Foundation, Inc.  ALL RIGHTS RESERVED
...\" /*****************************************************************
...\" *                                                                *
...\" * COPYRIGHT   (C)  SIEMENS NIXDORF INFORMATIONSSYSTEME AG 1994   *
...\" *                  ALL RIGHTS RESERVED                           *
...\" *                                                                *
...\" *****************************************************************/
.TH xds_intro 3xds
.SH "Name"
\*Lxds_intro\*O - Introduction to X/OPEN Directory Services (XDS) functions
.SH "Synopsis"
.sS
\*L#include <xom.h>\*O
.nL
\*L#include <xds.h>\*O
.nL
\*L#include <xdsext.h>\*O
.sE
.nL
.ne 1.5i
.SH "Description"
This \*Lxds_intro\*O reference page lists the XDS interface functions
in the following table.  XDS provides a C language binding.
.sp
.ne 17
.in 0
.ps 11
.vs 12
.TS
expand allbox tab(#);
cb s
lB | lB
lB | lw(3.0i).
Service Interface Functions\(emxds_intro(3xds)
_
Function#Description
_
dsX_extract_attr_values(\|)#Extracts attribute values from an OM object.
ds_abandon(\|)#Function not supported.
ds_add_entry(\|)#Adds a leaf entry to the directory information tree (DIT).
ds_bind(\|)#Opens a session with a directory user agent.
ds_compare(\|)#T{
Compares a purported attribute value with the attribute value stored
in the directory for a particular entry.
T}
ds_initialize(\|)#Initializes the interface.
ds_list(\|)#Enumerates the immediate subordinates of a particular
#directory entry.
ds_modify_entry(\|)#Performs an atomic modification of a directory entry.
ds_modify_rdn(\|)#Changes the relative distinguished name (RDN) of a leaf entry.
ds_read(\|)#Queries information on a directory entry by name.
ds_receive_result(\|)#Function partially supported.
ds_remove_entry(\|)#Removes a leaf entry from the DIT.
ds_search(\|)#Finds entries of interest in a portion of the DIT.
ds_shutdown(\|)#Shuts down the interface.
ds_unbind(\|)#Unbinds from a directory session.
ds_version(\|)#Negotiates features of the interface and service.
gds_decode_alt_addr(\|)#Used by DME applications for alternate address mapping.
gds_encode_alt_addr(\|)#Used by DME applications for alternate address mapping.
.TE
.in
.ps 12
.vs 14
.PP
.ne 9
The Distributed Computing Environment (DCE) XDS interface does not
support asynchronous operations within the same thread.  Thus, 
\*Lds_abandon(\|)\*O is redundant.  A \*Lds_abandon(\|)\*O call returns
with a \*LDS_\%C_\%ABANDON_\%FAILED\*O (\*LDS_E_TOO_LATE\*O) error.
For \*Lds_receive_result(\|)\*O, if there are any outstanding operations
(when multiple threads issue XDS calls in parallel), this function
returns \*LDS_SUCCESS\*O with the \*Vcompletion_flag_return\*O
parameter set to \*LDS_\%OUTSTANDING_\%OPERATIONS\*O.  
.PP
If no XDS calls are
outstanding, \*Lds_receive_result(\|)\*O returns with 
\*LDS_status\*O set to \*LDS_SUCCESS\*O, and with the 
\*Vcompletion_flag_return\*O parameter set to \*LDS_\%NO_\%OUTSTANDING_\%OPERATION\*O.
.PP
The following differences exist between Global Directory Service (GDS) and
Cell Directory Service (CDS):
.ad l
.ML
.LI
All functions operate on the GDS namespace.
.LI
CDS does not support the \*Lds_modify_rdn(\|)\*O or \*Lds_search(\|)\*O.  If either of 
these two functions are attempted on CDS, the error message \*LDS_\%C_\%SERVICE_\%ERROR\*O 
is returned (\*LDS_\%E_\%UNWILLING_\%TO_\%PERFORM\*O). 
.LI
In CDS, no X.500 schema rules apply.  There is
.ML
.LI
No concept of an object class.
.LI
No mandatory attributes for a given object.
.LI
No set of attributes expressly permitted for a given object.
.LI
No predefined definition of single and multivalued attributes.
.LE
.LE
.ad b
.PP
The absence of these schema rules means that the usual errors,
which are returned by GDS for breach
of schema rules, are not returned by CDS.
.PP
The CDS naming DIT
is modeled on a typical file system architecture,
where directories are used for storing objects and directories can contain
subdirectories.  Leaf objects in the CDS DIT are similar to X.500 naming
objects.  However, subtree objects are called directories as in a file
system directory.  All new objects must be added to an existing directory.
CDS directory objects cannot be added, removed, modified, or compared
using the XDS programming interface.
.PP
In CDS, the naming attribute of an object is not stored in the object.
Consequently, in CDS, \*Lds_read(\|)\*O never returns this attribute.
Note that
the \*Lds_compare(\|)\*O routine applied to this attribute returns with
\*LDS_C_ATTRIBUTE_ERROR\*O (\*LDS_E_CONSTRAINT_VIOLATION\*O).
.nL
.ne .8i
.SH "Notes"
See the notes in the relevant reference page for function-specific differences.
.PP
XDS functions check for NULL pointers and will return an error.  The
pointers are only checked at the function interface.  The check is only
for NULL and not for validity.  If NULL pointers are passed,
this may result in an undetermined behavior.
