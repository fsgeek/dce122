...\" COPYRIGHT NOTICE
...\" Copyright (c) 1990-1996 Open Software Foundation, Inc. 
...\" ALL RIGHTS RESERVED (DCE). See the file named COPYRIGHT.DCE in the 
...\" src directory for the full copyright text. 
...\" 
...\" 
...\" HISTORY
...\" $Log: cert_intro.3sec,v $
...\" Revision 1.1.2.5  1996/12/20  21:59:25  weir
...\" 	Final updates
...\" 	[1996/12/20  21:57:57  weir]
...\"
...\" Revision 1.1.2.4  1996/12/17  20:10:51  damon
...\" 	Expanded OSF C O P Y R I G H T   N O T I C E
...\" 	[1996/12/17  20:08:03  damon]
...\" 
...\" Revision 1.1.2.3  1996/11/19  18:55:20  wardr
...\" 	{edit,R1.2.2}
...\" 	Init capped heads and added PDG pointer
...\" 	[1996/11/19  18:48:24  wardr]
...\" 
...\" Revision 1.1.2.2  1996/11/18  19:56:58  weir
...\" 	No change
...\" 	[1996/11/18  19:54:59  weir]
...\" 
...\" Revision 1.1.2.1  1996/10/15  21:10:19  weir
...\" 	Initial submission
...\" 	[1996/10/15  21:09:02  weir]
...\" 
...\" $EndLog$
...\" 
...\" ----------------------------------------------------------------------
...\" 
...\" 
...\" 
.TH pkc_intro 3sec
.SH "Name"
\*Lpkc_intro\*O - Introduction to trust list facilities
...\" 
...\" 
...\" Trustlist data types
...\" 
...\" 
.SH "Description"
.PP
This reference page describes the data types used by the trust list
facility.
...\" 
...\" 
.SS "Overview of the Facility"
...\" 
...\" This is the high-level certificate API.
...\" 
...\" 
...\" 
.PP
Retrieving keys using this API is a three step process.
.PP
The first step involves creating a \*Lpkc\*O structure called a trust list,
which reflects the caller's initial trust. A trust list is a list of
{name, key}  pairs or certificates that are trusted \*Va priori\*O.
.PP
An empty trust list is created through a call to the routine
\*Lpkc_init_trustlist(3sec)\*O, and entries are inserted into a trust
list by a call to \*Lpkc_append_to_trustlist(3sec)\*O.
.PP
Once the trust list is complete, the application should next call
\*Lpkc_init_trustbase(3sec)\*O. This routine takes the trust list and
processes it to produce a structure called a trust base, which reflects
any transitive trust, independent of the name of any desired target.
.PP
Creation of the trust base (and the prerequisite trust list) is
expected to be performed at application startup, although it can be
done any time prior to key retrieval. All processing up to this point
is independent of the name(s) of principals whose keys are to be
retrieved, and the trust base may be used for multiple key retrieval
operations.
.PP
Once a trust base has been obtained, it may be used for key retrieval.
Keys are retrieved for a given target principal using the
\*Lpkc_retrieve_keys(3sec)\*O routine, which takes a trust base and a
name and returns an array of keys.
...\" 
...\" 
...\" -------------------------------------------------------------------
.SS "Data Structures"
.PP
The following data structures are used by the trust list facilities.
...\" 
...\" 
...\" 
...\" 
...\" 
...\" 
.ML
...\" .LI
...\" The \*Ltrustlist_t\*O structure contains a \*Lhandle\*O that points to
...\" a \*Lpkc_trust_list_t\*O item.
...\" 
...\" 
...\" .LI
...\" The \*Lkeyinfo_t\*O structure is returned when \*Lpkc_retrieve_keyinfo(3sec)\*O
...\" is called. It contains information about a set of keys belonging to a single
...\" principal. The user interrogates this handle (using the routines
...\" \*Lpkc_get_key_count(3sec)\*O, \*Lpkc_get_key_data(3sec)\*O,
...\" \*Lpkc_get_key_trust_info(3sec)\*O, \*Lpkc_get_key_certifier_count(3sec)\*O,
...\" and \*Lpkc_get_key_certifier_info(3sec)\*O) for number of keys,
...\" key value(s), certification path (in case of hierarchical policy), and so
...\" on.
...\" .PP
...\" The structure contains a pointer to the \*Ltrustbase_t\*O that was used to
...\" establish the trust from which these keys were derived, and a policy specific
...\" handle that is used for the actual key information.
...\" .PP
...\" The user must ensure that the trust base is not deleted until any and all
...\" dependent \*Lkeyinfo_t\*O objects have been deleted.
...\" .PP
...\" Callers do not need to create objects of this type; \*Lkeyinfo_t\*O objects
...\" are private to the certification API. The structure contains the following
...\" fields:
...\" 
...\" 
...\" .ML
...\" .LI
...\" \*Lbase\*O
...\" .PP
...\" A pointer to \*Ltrustbase_t\*O.
...\" 
...\" .LI
...\" \*Lname\*O
...\" .PP
...\" A string specifying the name of the principal.
...\" 
...\" .LI
...\" \*Lkey_date\*O
...\" .PP
...\" A \*Lutc_t\*O specifying the 
...\" 

...\" .LI
...\" \*Lsel\*O
...\" .PP
...\" A pointer to \*Lselection_t\*O
...\" 
...\" .LI
...\" \*Lhandle\*O
...\" .PP
...\" Points to a policy specific structure.
...\" 
...\" .LE
...\" 
...\" 
.LI
The \*Ltrust_type_t\*O type consists of an enumeration of the different
possible varieties of trust:
...\" 
.ML
.LI
\*LUNTRUSTED\*O
.PP
No trust (e.g., unauthenticated).
...\" 
.LI
\*LDIRECT_TRUST\*O
.PP
Direct trust via third party (e.g., authenticated registry).
...\" 
.LI
\*LCERTIFIED_TRUST\*O
.PP
Trust certified by caller's trust base.
...\" 
.LE
...\" 
...\" 
...\" 
.LI
The \*Lcertification_flags_t\*O structure describes the trust that
can be placed in a returned key. It contains the following fields:
...\" 
.ML
.LI
\*Ltrust_type\*O
.PP
A \*Ltrust_type_t\*O value expressing the style of trust.
...\" 
.LI
\*Lmissing_crls\*O
.PP
A \*Lchar\*O; its value is TRUE (not 0) if one or more CRLs are
missing.
...\" 
.LI
\*Lrevoked\*O
.PP
A \*Lchar\*O whose value is TRUE (not 0) if any certificate has been
revoked (even if it was still valid at the retrieval time).
...\" 
.LE
...\" 
...\" 
...\" 
.LI
The \*Lcert_t\*O structure contains the following fields:
.ML
.LI
\*Lversion\*O
.PP
An \*Lint\*O whose value must be 0.
...\" 
.LI
\*Lcert\*O
.PP
A pointer to an \*Lunsigned char\*O representing the
ASN.1 encoding of a certificate.
...\" 
.LI
\*Lsize\*O
.PP
A \*Lsize_t\*O which represents the size of the encoding.
...\" 
.LE
...\" 
...\" 
...\" typedef struct {
...\"   int version;  /* currently, has to be version 0 */
...\"   unsigned char *cert;  /* ASN.1 encoding of a Certificate */
...\"   size_t size;          /* size of the encoding */
...\" } cert_t;
...\" 
.LI
The \*Ltrusted_key_t\*O structure contains the following fields:
...\" 
.ML
.LI
\*Lversion\*O
.PP
An \*Lint\*O whose value must be 0.
...\" 
.LI
\*Lca\*O
.PP
A pointer to an \*Lunsigned char\*O (\*Lx500 char\*O) string which
represents the name of the Certification Authority
whose key this is. For example, \*L/.../foo_cell/ca\*O or
\*L/.../C=US/O=dec/CN=foo_cell/ca\*O.
...\" 
.LI
\*Lkey\*O
.PP
A pointer to an \*Lunsigned char\*O representing the Certification
Authority's ASN.1 key.
...\" 
.LI
\*Lsize\*O
.PP
A \*Lsize_t\*O representing the size of the CA's ASN.1 key.
...\" 
.LI
\*LstartDate\*O
.PP
A \*Lutc_t\*O representing the time at which the key begins to
be valid.
...\" 
.LI
\*LendDate\*O
.PP
A \*Lutc_t\*O representing the time at which the key ceases to
be valid.
...\" 
.LE
...\" 
...\" typedef struct {
...\"   int version;  /* currently, has to be version 0 */
...\"   unsigned char *ca;  /* x500 char * version of Certification Authority
...\"                        * whose key this is
...\"                        * Name; for eg. /.../foo_cell/ca or
...\"                        * /.../C=US/O=dec/CN=foo_cell/ca
...\"                        */
...\"   unsigned char *key;  /* ca's ASN.1 key */
...\"   size_t size;         /* size of ASN.1 key */
...\"   utc_t startDate, endDate;
...\" } trusted_key_t;
...\" 
...\" 
...\" -------------------------------------------------------------------
.LI
The \*Ltrustitem_t\*O structure holds either a key, or a certificate. It
has the following fields:
...\" 
.ML
.LI
\*Ltype\*O
.PP
An \*Lint\*O whose value specifies either that the structure holds a key
(\*LIS_KEY\*O) or a certificate (\*LIS_CERT\*O).
...\" 
.LI
Depending on the value of \*Ltype\*O, the structure additionally contains
a \*Ltrusted_key_t\*O (if \*LIS_KEY\*O) or a \*Lcert_t\*O (if \*LIS_CERT\*O).
...\" 
.LE
...\" 
...\" typedef struct {
...\"   int type;    /* Possible values of type are:
...\"                   IS_KEY, or IS_CERT, anything else currently
...\"                   is an error */
...\"   union {
...\"     trusted_key_t k;
...\"     cert_t        c;
...\"   } u;
...\" } trustitem_t; 
...\" 
...\" 
...\" ------------------------------------------------------------------- 
.LI
The \*Lselection_t\*O structure is defined for future enhancements that
will enable users to specify usages for the key being retrieved. However,
its contents are currently ignored.
...\" 
...\" typedef struct {
...\"   void *reserved;
...\" } selection_t;
...\" 
...\" 
...\" -------------------------------------------------------------------
...\" .LI
...\" The \*Ltrustbase_t\*O structure holds a trusted base (or an expanded trust
...\" list together with the cross-certificate pair certificates obtained during
...\" lookups). It contains the following fields:
...\" 
...\" .ML
...\" .LI
...\" \*Lpolicy_oid\*O
...\" .PP
...\" A \*Lgss_OID\*O which specifies the policy OID used for computing the trust
...\" base. Computing a trust base is a time-consuming operation; consequently,
...\" once computed, it is cached here\(emspecifically, in the \*Ltrustbase_handle\*O,
...\" where policy specific trust base pointers are kept.
...\" 
...\" 
...\" .LI
...\" \*Ltime\*O
...\" .PP
...\" A \*Lutc_t\*O representing the time at which the public keys are to become
...\" valid.
...\" 
...\" 
...\" .LI
...\" \*Lsel\*O
...\" .PP
...\" At present must be 0. In a future enhancement, will point to a copy of the
...\" \*Lsel_ptr\*O passed in by the user in \*Lpkc_init_trustbase\*O.
...\" 
...\" 
...\" .LI
...\" \*Lcontext\*O
...\" .PP
...\" The pointer that will be returned by the policy \*L->open\*O
...\" routine (see the \*Lpkc_policy_t\*O structure).
...\" 
...\"   void *
...\" 
...\" .LI
...\" \*Ltrustbase_handle\*O
...\" .PP
...\" The last pointer that will be returned by the policy \*L->establish\*O
...\" routine (see the \*Lpkc_policy_t\*O structure). It points to a
...\" \*Lpkc_trust_list_t\*O list.
...\" 
...\" 
...\" 
...\" .LE
...\" 
.LE
...\" 
...\" 
...\" typedef struct {
...\"   gss_OID policy_oid;  /* policy OID used for computing trustbase. 
...\"                         * Computing a trust base is a time-consuming
...\"                         * operation, and hence, we cache this in
...\"                         * this structure -- specifically in 
...\"                         * trusbase_handle, where policy specific
...\"                         * trustbase pointers are kept.  
...\"                         */
...\" 
...\"   utc_t time;          /* time at which you want public keys to be valid
...\"                         */
...\" 
...\"   selection_t *sel;    /* has to be 0; ignored for now; when used, will
...\"                         * point to a copy of the sel ptr passed in by
...\"                         * the user in pkc_init_trustbase
...\"                         */
...\" 
...\"   void *context;  /* this will be the pointer returned by ->open
...\"                    * routine (see pkc_policy_t structure) 
...\"                    */
...\"   void *trustbase_handle; /* this will be the last
...\"                            * pointer returned by ->establish
...\"                            * routine (see pkc_policy_t 
...\"                            * structure). It points to a pkc_trust_list_t
...\"                            * list.
...\"                            */
...\" 
...\" } trustbase_t;
...\" 
...\" 
...\" 
.SH "Related Information"
.PP
.ad l
Functions:
\*Lpkc_append_to_trustlist(3sec)\*O,
\*Lpkc_free(3sec)\*O,
\*Lpkc_free_keyinfo(3sec)\*O,
\*Lpkc_free_trustbase(3sec)\*O,
\*Lpkc_free_trustlist(3sec)\*O,
\*Lpkc_get_key_certifier_count(3sec)\*O,
\*Lpkc_get_key_certifier_info(3sec)\*O,
\*Lpkc_get_key_count(3sec)\*O,
\*Lpkc_get_key_data(3sec)\*O,
\*Lpkc_get_key_trust_info(3sec)\*O,
\*Lpkc_get_registered_policies(3sec)\*O,
\*Lpkc_init_trustbase(3sec)\*O,
\*Lpkc_init_trustlist(3sec)\*O,
\*Lpkc_retrieve_keyinfo(3sec)\*O,
\*Lpkc_retrieve_keylist(3sec)\*O.
.ad b 
...\" 
...\" 
