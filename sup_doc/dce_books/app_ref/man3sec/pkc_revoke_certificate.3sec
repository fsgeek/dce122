...\" COPYRIGHT NOTICE
...\" Copyright (c) 1990-1996 Open Software Foundation, Inc. 
...\" ALL RIGHTS RESERVED (DCE). See the file named COPYRIGHT.DCE in the 
...\" src directory for the full copyright text. 
...\" 
...\" 
...\" HISTORY
...\" $Log: pkc_revoke_certificate.3sec,v $
...\" Revision 1.1.2.5  1996/12/20  22:00:24  weir
...\" 	Final updates
...\" 	[1996/12/20  21:58:55  weir]
...\"
...\" Revision 1.1.2.4  1996/12/17  20:11:54  damon
...\" 	Expanded OSF C O P Y R I G H T   N O T I C E
...\" 	[1996/12/17  20:09:03  damon]
...\" 
...\" Revision 1.1.2.3  1996/11/19  18:57:22  wardr
...\" 	{edit,R1.2.2}
...\" 	Init capped heads and added PDG pointer
...\" 	[1996/11/19  18:50:28  wardr]
...\" 
...\" Revision 1.1.2.2  1996/11/18  19:58:30  weir
...\" 	No change
...\" 	[1996/11/18  19:55:52  weir]
...\" 
...\" Revision 1.1.2.1  1996/10/15  21:11:24  weir
...\" 	Initial submission
...\" 	[1996/10/15  21:09:46  weir]
...\" 
...\" $EndLog$
...\" 
...\" 
...\" 
...\" 
.TH pkc_revoke_certificate 3sec
...\" 
.SH "Name"
\*Lpkc_revoke_certificate\*O - Revokes key and dependents from specified trust list
...\" 
...\" 
.SH "Synopsis"
.sS
\*L#include <pkc_certs.h>\*O
.sp .4v
\*Lunsigned32 pkc_revoke_certificate(\*O
.nL
	\*Lpkc_trust_list_t * \*Vtrust_list\*L,
.nL
	\*Lconst x500name & \*Vissued_by\*L,
.nL
	\*Lconst asn_integer & \*Vserial_no\*L,
.nL
	\*Lutc_t * \*Vinvalidate_from \*L= NULL);
.sE
.nL
...\" 
.ne 1.5i
...\" 
...\" 
...\" 
...\" 
.SH "Parameters"
...\" 
.SS "Input"
...\" 
.VL 1i
.LI "\*Vtrust_list\*O"
Specifies trust list from which to revoke keys.
...\" 
.LI "\*Vissued_by\*O"
Specifies issuer whose keys are to be revoked.
...\" 
.LI "\*Vserial_no\*O"
Specifies serial number of key to revoke.
...\" 
.LI "\*Vinvalidate_from\*O"
Specifies time after which keys will be invalid.
...\" 
.LE
...\" 
...\" 
.nL
.ne 1.5i
...\" 
.SH "Description"
.PP
\*Lpkc_revoke_certificate(3sec)\*O applies the specified revocation to the
specified trust list (i.e. revokes a key and all dependent keys). If
\*Linvalidate_from\*O is NULL, the key is completely revoked; if a valid
UTC time is provided, the key is revoked from that time on. The revocation
is stored within the trust list, and any subsequent attempts to add the
certificate will be rejected.
.VL "\*LNote:\*O"
This routine is a C++ interface. C++ must be used to perform direct certificate
manipulation.
.LE
...\" 
...\" 
.PP
See also the contents of the \*Lasn.h\*O and \*Lx509.h\*O header files,
which define some of the basic types used by the low-level certificate
manipulation routines.
...\" 
...\" 
...\" 
...\" 
.ne 1.5i
.SH "Return Values"
...\" 
.VL 1i
.LI "\*Lpkc_s_success\*O"
Operation successfully completed.
...\" 
.LE
...\" 
...\" 
...\" 
...\" 
.nL 
...\" 
.ne 1.5i
.SH "Errors"
.PP
Refer to the \*VOSF DCE Problem Determination Guide\*O for
complete descriptions of all error messages.
...\" 
...\" 
.SH "Related Information"
.PP
.ad l
Functions:
\*Lpkc_add_trusted_key(3sec)\*O,
\*Lpkc_check_cert_against_trustlist(3sec)\*O,
\*Lpkc_lookup_key_in_trustlist(3sec)\*O,
\*Lpkc_lookup_keys_in_trustlist(3sec)\*O,
\*Lpkc_prune_trustlist(3sec)\*O,
\*Lpkc_revoke_certificates(3sec)\*O.
Classes:
\*Lpkc_ca_key_usage.class(3sec)\*O,
\*Lpkc_constraints.class(3sec)\*O,
\*Lpkc_generic_key_usage.class(3sec)\*O,
\*Lpkc_key_policies.class(3sec)\*O,
\*Lpkc_key_policy.class(3sec)\*O,
\*Lpkc_key_usage.class(3sec)\*O,
\*Lpkc_name_subord_constraint.class(3sec)\*O,
\*Lpkc_name_subord_constraints.class(3sec)\*O,
\*Lpkc_name_subtree_constraint.class(3sec)\*O,
\*Lpkc_name_subtree_constraints.class(3sec)\*O,
\*Lpkc_pending_revocation.class(3sec)\*O,
\*Lpkc_revocation.class(3sec)\*O,
\*Lpkc_revocation_list.class(3sec)\*O,
\*Lpkc_trust_list.class(3sec)\*O,
\*Lpkc_trust_list_element.class(3sec)\*O,
\*Lpkc_trusted_key.class(3sec)\*O.
.ad b 
...\" 
...\" 
...\" 
...\" unsigned32 pkc_revoke_certificate(pkc_trust_list_t * trust_list,
...\"                                   const x500name & issued_by,
...\"                                   const asn_integer & serial_no,
...\"                                   utc_t * invalidate_from = NULL);
...\" // Applies the specified revocation to the specified trustlist (i.e. revokes
...\" // a key and all dependent keys).  If invalidate_from is NULL, the key is
...\" // completely revoked; if a valid UTC-time is provided, the key is revoked from
...\" // that time on.  The revocation is stored within the trustlist, and any 
...\" // subsequent attempts to add the certificate will be rejected.
...\" 
