...\" @OSF_COPYRIGHT@
...\" COPYRIGHT NOTICE
...\" Copyright (c) 1990, 1991, 1992, 1993, 1994 Open Software Foundation, Inc.
...\" ALL RIGHTS RESERVED (DCE).  See the file named COPYRIGHT.DCE for
...\" the full copyright text.
...\" 
...\" HISTORY
...\" $Log: sec_login_become_initiator.3sec,v $
...\" Revision 1.1.4.2  1996/11/19  18:58:42  wardr
...\" 	{edit,R1.2.2}
...\" 	Init capped heads and added PDG pointer
...\" 	[1996/11/19  18:51:52  wardr]
...\"
...\" Revision 1.1.4.1  1996/05/13  19:05:03  wardr
...\" 	{enh,R1.2.2}
...\" 	Removed changebars
...\" 	[1996/05/13  18:58:03  wardr]
...\" 
...\" Revision 1.1.2.4  1995/06/21  13:21:25  buckler
...\" 	1.1 edits and Prentice Hall reformat
...\" 	[1995/06/16  16:46:51  buckler]
...\" 
...\" Revision 1.1.2.3  1994/10/19  20:16:43  neilson
...\" 	CR 10326 - Automatic fix to name of intro ref page
...\" 	[1994/10/19  20:10:55  neilson]
...\" 
...\" Revision 1.1.2.2  1994/06/13  17:15:43  devobj
...\" 	cr10872 - fix copyright
...\" 	[1994/06/13  16:50:38  devobj]
...\" 
...\" Revision 1.1.2.1  1994/05/09  19:02:17  millette
...\" 	(enh, 10514, R1.1)
...\" 	Added for delegation
...\" 	[1994/05/09  19:01:37  millette]
...\" 
...\" $EndLog$
.TH sec_login_become_initiator 3sec
...\" .iX "\*Lsec_login_become_initiator(\|)\*O"
...\" .iX "calls" "\*Lsec_login_become_initiator(\|)\*O"
.SH "Name"
\*Lsec_login_become_initiator\*O - Constructs a new login context 
that enables delegation for the calling client
.SH "Synopsis"
.sS
\*L#include <dce/sec_login.h>
.sp .4v
\*Lsec_login_handle_t sec_login_become_initiator(
.nL
	\*Lsec_login_handle_t \*Vmy_login_context\*L,
.nL	
	\*Lsec_id_delegation_type_t \*Vdelegation_type_permitted\*L,
.nL
	\*Lsec_id_restriction_set_t *\*Vdelegate_restrictions\*L,
.nL
	\*Lsec_id_restriction_set_t *\*Vtarget_restrictions\*L,
.nL
	\*Lsec_id_opt_req_t *\*Voptional_restrictions\*L,
.nL
	\*Lsec_id_opt_req_t *\*Vrequired_restrictions\*L,
.nL
	\*Lsec_id_compatibility_mode_t \*Vcompatibility_mode\*L,	
.nL
	\*Lerror_status_t *\*Vstatus\*L);
.sE
.nL
.ne 1.5i
.SH "Parameters"
.SS "Input"
.VL
.LI "\*Vmy_login_context\*O"
A value of \*Lsec_login_handle_t\*O that provides an 
opaque handle to the identity of the client that is enabling delegation.  
The \*Lsec_\%login_\%handle_t\*O that specifies the client's identity is supplied 
as output of the following calls:
.ad l
.ML
.LI
 \*Lsec_login_get_current_context(\|)\*O if 
the client inherited the identity of the current context
.LI
The \*Lsec_login_setup_identity(\|)\*O and the
\*Lsec_\%login_\%validate_\%identity(\|)\*O pair that together 
establish an authentiated identity if a new identity was 
established
.LE
.ad b
.LI "\*Vdelegation_type_permitted\*O"
A value of \*Lsec_id_delegation_type_t\*O that specifies the type of 
delegation to be enabled.  The types available are as follows:
.VL
.LI "\*Lsec_id_deleg_type_none\*O"
No delegation.
.LI "\*Lsec_id_deleg_type_traced\*O"
Traced delegation.
.LI "\*Lsec_id_deleg_type_impersonation\*O"
Simple (impersonation) delegation.
.LE
.P
Note each subsequent intermediate delegate of the delegation chain 
started by the initiating client must set the delegation type to 
traced if the initiating client set it to traced or to simple 
if the initiating client set it to simple.  Intermediate 
delegates, however, can set the delegation type to 
no delegation to indicate that the 
delegation chain can proceed no further.
.LI "\*Vdelegate_restrictions\*O" 
A pointer to a \*Lsec_id_restriction_set_t\*O that supplies a list of 
servers that can act as delegates for the client initiating 
delegation.
.LI "\*Vtarget_restrictions\*O"
A pointer to a \*Lsec_id_restriction_set_t\*O that supplies a list of 
servers that can act as targets for the client initiating 
delegation.
.LI "\*Voptional_restrictions\*O"
A pointer to a \*Lsec_id_opt_req_t\*O that supplies a list of 
application-defined optional restrictions that apply to the client initiating 
delegation.   
.LI "\*Vrequired_restrictions\*O"
A pointer to a \*Lsec_id_opt_req_t\*O that supplies a list of 
application-defined required restrictions that apply to the client initiating 
delegation.  
.LI  "\*Vcompatibility_mode\*O"	
A value of \*Lsec_id_compatibility_mode_t\*O that specifies the compatibility 
mode to be used when the initiating client interacts with pre-1.1 servers.
The modes available are as follows:
.VL
.LI "\*Lsec_id_compat_mode_none\*O"
Compatibility mode is off.
.LI "\*Lsec_id_compat_mode_initiator\*O"
Compatibility mode is on.  The pre-1.1 PAC data is extracted from the EPAC 
of the initiating client.
.LI "\*Lsec_id_compat_mode_caller\*O"
Compatibility mode is on.  The pre-1.1 PAC data extracted from the 
EPAC of the last 
client in the delegation chain. 
.LE 
.LE
.SS "Output"
.VL
.LI "\*Vstatus\*O"
A pointer to the completion status.  On successful completion,
\*Vstatus\*O is assigned \*Lerror_status_ok\*O.
Otherwise, it returns an error.
.LE
.nL
.ne 1.5i
.SH "Description"
.PP
The \*Lsec_login_become_initiator(\|)\*O enables delegation 
for the calling client by constructing a new login context 
(in a \*Lsec_login_handle_t\*O) that 
carries delegation information.  This information includes the 
delegation type, delegate, and target restrictions, and 
any application-defined optional and required restrictions.  
.PP
The new login context is then used to to set up 
authenticated rpc with an intermediate server using 
the \*Lrpc_binding_set_auth_info(\|)\*O call. 
The intermediary can continue the delegation 
chain by calling \*Lsec_login_become_delegate\*O 
(if the delegation type is \*Lsec_id_deleg_type_traced\*O) or 
\*Lsec_\%login_\%become_\%impersonator\*O (if the delegation type is 
\*Lsec_\%id_\%deleg_\%type_\%impersonation\*O). 
...\" .SS "Permissions Required"
...\" .PP
...\" TBS
...\" .PP
.nL
.ne 1.5i
.SH "Files"
.VL
.LI \*L/usr/include/dce/sec_login.idl\*O
The \*Lidl\*O file from which \*Ldce/sec_login.h\*O was derived.
.LE
.nL
.ne 1.5i
.SH "Errors"
.PP
The following describes a partial list of errors that might be returned.
Refer to the \*(Tg for complete descriptions of all error
messages.
.VL
.LI "\*Lerr_sec_login_invalid_delegate_restriction\*O"
.LI "\*Lerr_sec_login_invalid_target_restriction\*O"
.LI "\*Lerr_sec_login_invalid_opt_restriction\*O"
.LI "\*Lerr_sec_login_invalid_req_restriction\*O"
.LI "\*Lerror_status_ok\*O"
.LI "\*Lsec_login_s_invalid_compat_mode\*O" 
.LI "\*Lsec_login_s_invalid_context\*O"
.LI "\*Lsec_login_s_invalid_deleg_type\*O"
.LE
.nL
.ne 1.5i
...\" .SH "EXAMPLES"
...\" .PP
...\" ANY EXAMPLES??
.SH "Related Information"
.PP
.ad l
Functions:
\*Lsec_intro(3sec)\*O,
\*Lsec_login_become_delegate(3sec)\*O,
\*Lsec_login_become_impersonator(3sec)\*O, 
\*Lsec_login_get_current_context(3sec)\*O, 
\*Lsec_login_setup_identity(3sec)\*O, 
\*Lsec_login_validate_identity(\|)\*O.
.ad b
