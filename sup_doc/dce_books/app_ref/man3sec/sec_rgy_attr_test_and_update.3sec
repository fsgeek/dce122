...\" @OSF_COPYRIGHT@
...\" COPYRIGHT NOTICE
...\" Copyright (c) 1990, 1991, 1992, 1993, 1994 Open Software Foundation, Inc.
...\" ALL RIGHTS RESERVED (DCE).  See the file named COPYRIGHT.DCE for
...\" the full copyright text.
...\" 
...\" HISTORY
...\" $Log: sec_rgy_attr_test_and_update.3sec,v $
...\" Revision 1.1.6.2  1996/11/19  19:00:00  wardr
...\" 	{edit,R1.2.2}
...\" 	Init capped heads and added PDG pointer
...\" 	[1996/11/19  18:53:04  wardr]
...\"
...\" Revision 1.1.6.1  1996/05/13  19:06:28  wardr
...\" 	{enh,R1.2.2}
...\" 	Removed changebars
...\" 	[1996/05/13  18:59:01  wardr]
...\" 
...\" Revision 1.1.4.1  1996/03/15  16:38:46  weir
...\" 	CR 12716: unimplemented function
...\" 	[1996/03/15  16:38:10  weir]
...\" 
...\" Revision 1.1.2.5  1995/06/21  13:22:24  buckler
...\" 	1.1 edits and Prentice Hall reformat
...\" 	[1995/06/19  14:59:09  buckler]
...\" 
...\" Revision 1.1.2.4  1994/10/14  20:43:48  millette
...\" 	(enh, 10056, R1.1)
...\" 	HP edits
...\" 	[1994/10/14  20:43:18  millette]
...\" 
...\" Revision 1.1.2.3  1994/08/15  16:30:37  millette
...\" 	 (enh, 10056, R1.1)
...\" 	Updated for spec changes
...\" 	[1994/08/15  16:30:14  millette]
...\" 
...\" Revision 1.1.2.2  1994/06/13  17:16:01  devobj
...\" 	cr10872 - fix copyright
...\" 	[1994/06/13  16:49:11  devobj]
...\" 
...\" Revision 1.1.2.1  1994/03/29  19:39:03  millette
...\" 	(enh, 10056, R1.1)
...\" 	Created for ERA
...\" 	[1994/03/29  19:38:39  millette]
...\" 
...\" $EndLog$
.TH sec_rgy_attr_test_and_update 3sec
...\" .iX "\*Lsec_rgy_attr_test_and_update(\|)\*O"
...\" .iX "calls" "\*Lsec_rgy_attr_test_and_update(\|)\*O"
.nS Note
This function is not implemented in DCE 1.2.1.
.nE
.SH "Name"
\*Lsec_rgy_attr_test_and_update\*O - Updates specified attribute instances 
for a 
specified object only if 
a set of control attribute instances match the object's existing attribute 
instances  
.SH "Synopsis"
.sS
\*L#include <dce/sec_rgy_attr.h>
.sp .4v
void sec_rgy_attr_test_and_update (
.nL
	\*Lsec_rgy_handle_t \*Vcontext\*L,
.nL
	\*Lsec_rgy_domain_t \*Vname_domain\*L,
.nL
	\*Lsec_rgy_name_t \*Vname\*L,
.nL
	\*Lunsigned32 \*Vnum_to_test\*L,
.nL	
	\*Lsec_attr_t \*Vtest_attrs\*O[\|]\*L,
.nL
	\*Lunsigned32 \*Vnum_to_write\*L,
.nL
	\*Lsec_attr_t \*Vupdate_attrs\*O[\|]\*L,
.nL
	\*Lsigned32 *\*Vfailure_index\*L,
.nL
	\*Lerror_status_t *\*Vstatus\*L);	
.sE
.nL
.ne 1.5i
.SH "Parameters"
.SS "Input"
.VL
.LI "\*Vcontext\*O"
An opaque handle bound to a registry server.  Use
\*Lsec_\%rgy_\%site_\%open(\|)\*O to acquire a bound handle.
.LI "\*Vname_domain\*O"
A value of type \*Lsec_rgy_domain_t\*O that identifies the registry domain in 
which the object specified 
by \*Vname\*O resides. 
The valid values are as follows:
.VL
.LI "\*Lsec_rgy_domain_person\*O"
The name identifies a principal.
.LI "\*Lsec_rgy_domain_group\*O"
The name identifies a group.
.LI "\*Lsec_rgy_domain_org\*O"
The name identifies an organization.
.LE
.PP
This parameter is ignored if \*Vname\*O is \*Lpolicy\*O or \*Lreplist\*O.
.LI "\*Vname\*O"
A character string of type \*Lsec_rgy_name_t\*O
specifying the name
of the person, group, or organization to which the attribute is attached.
.nL
.ne 8
.LI "\*Vnum_to_test\*O"
An unsigned 32-bit integer that specifies the number of elements in 
the \*Vtest_attrs\*O[\|]\*O array.  This integer must be greater than 0 (zero).
.LI "\*Vtest_attrs\*O[\|]\*O"
An array of values of type \*Lsec_attr_t\*O that specifies the 
control attributes.  The update takes place only if the types and 
values of the control attributes exactly match those of the attribute 
instances on the named registry object.    
The size of the array is determined by 
\*Vnum_to_test\*O.
.LI "\*Vnum_to_write\*O"
A 32-bit integer that specifies the number of attribute instances 
returned in the \*Vupdate_attrs\*O[\|]\*O array.
.LI "\*Vupdate_attrs\*O"
An array of values of type \*Lsec_attr_t\*O that specifies the 
attribute instances to be updated.  The size of the array is determined by 
\*Vnum_to_write\*O.
.LE 
.SS "Output"
.VL
.LI "\*Vfailure_index\*O"
In the event of an error, \*Vfailure_index\*O is a pointer to 
the element in the \*Lupdate_attrs\*O[\|]\*O array that caused the update to 
fail.  If the failure cannot be attributed to 
a specific attribute, the value of \*Vfailure_index\*O is \*L-1\*O.
.LI "\*Vstatus\*O"
A pointer to the completion status.  On successful completion,
the routine returns \*Lerror_status_ok\*O.
Otherwise, it returns an error.
.LE
.ne 1.5i
.SH "Description"
The \*Lsec_rgy_attr_test_and_update(\|)\*O routine updates an attribute only if 
the set of control attributes specified in the \*Vtest_attrs\*O[\|]\*O match attributes 
that already exist for the object.  
.PP 
This update is an atomic operation: if any of the control attributes do not 
match existing attributes, none of the updates are performed, and if an update 
should be 
performed, but the write cannot occur for whatever reason to any member of the 
\*Vupdate_attrs\*O[\|]\*O array, all updates are aborted.  
The attribute causing the update to fail is identified in 
\*Vfailure_index\*O.  If the failure cannot be attributed to a given attribute, 
\*Vfailure_index\*O contains \*L-1\*O.
.PP
If an attribute instance already exists which is identical 
in both \*Lattr_id\*O and \*Lattr_value\*O to an attribute 
specified in \*Vin_attrs\*O[\|]\*O, the existing attribute information is 
overwritten by the new information.  For multivalued attributes, 
every instance with the same \*Lattr_id\*O is overwritten with the supplied 
values.  
.PP
If an attribute instance does not exist, it is created.
.PP
.ne 8
If you specify an attribute set for updating, the update 
applies to the set instance, the set itself, not the members of the 
set.  To update a member of an attribute set, supply the UUID of the 
set member. 
.PP
If an input attribute is associated with an update attribute trigger server, 
the attribute trigger server is invoked (by the \*Lsec_attr_trig_update(\|)\*O function) 
and the \*Vin_attr\*O[\|]\*O array is supplied as input.  
The output attributes from the update attribute trigger server are stored 
in the registry database and returned in the \*Vout_attrs\*O[\|]\*O array.  
Note that the update attribute trigger server may modify the values before they are 
used to update the registry database.  This is the only circumstance under 
which the values in the \*Vout_attrs\*O[\|]\*O array differ from the values in the 
\*Vin_attrs\*O[\|]\*O array.
.SS "Permissions Required"
.PP
The \*Lsec_rgy_attr_test_and_update(\|)\*O routine 
routine requires the test permission and the update permission set
set for each attribute type identified in the \*Vtest_attrs\*O[\|]\*O array. 
These permissions are defined as part of the ACL manager set in the 
schema entry of each attribute type. 
...\" .ne 1.5i
...\" .SH "NOTES"
...\" .PP
...\" .br
...\" .ne 1.5i
.nL
.ne 1.5i
.SH "Files"
.VL
.LI "\*L/usr/include/dce/sec_rgy_attr.idl\*O"
The \*Lidl\*O file from which \*Ldce/sec_rgy_attr.h\*O was derived.
.LE
...\" .SH "EXAMPLES"
...\" .PP
...\" CAN WE SUPPLY EXAMPLE?????
.nL
.ne 1.5i
.SH "Errors"
.PP
The following describes a partial list of errors that might be returned.
Refer to the \*(Tg for complete descriptions of all error
messages.
.VL
.LI "\*Lcontrol attribute has changed\*O
.LI "\*Ldatabase read only\*O"
.LI "\*Linvalid encoding type\*O"
.LI "\*Linvalid/unsupported attribute type\*O"
.LI "\*Lserver unavailable\*O"
.LI "\*Lsite read only\*O"
.LI "\*Ltrigger server unavailable\*O"
.LI "\*Lunauthorized\*O"
.LI "\*Lvalue not unique\*O"
.LI "\*Lerror_status_ok\*O"
.LE
.SH "Related Information"
.PP
.ad l
Functions:
\*Lsec_intro(3sec)\*O,
\*Lsec_rgy_attr_delete(3sec)\*O,
\*Lsec_rgy_attr_update(3sec)\*O. 
.ad b
