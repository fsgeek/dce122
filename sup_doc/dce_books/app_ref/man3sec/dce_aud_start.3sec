...\" @OSF_COPYRIGHT@
...\" COPYRIGHT NOTICE
...\" Copyright (c) 1990, 1991, 1992, 1993, 1994 Open Software Foundation, Inc.
...\" ALL RIGHTS RESERVED (DCE).  See the file named COPYRIGHT.DCE for
...\" the full copyright text.
...\" 
...\" HISTORY
...\" $Log: dce_aud_start.3sec,v $
...\" Revision 1.1.4.2  1996/11/19  18:55:59  wardr
...\" 	{edit,R1.2.2}
...\" 	Init capped heads and added PDG pointer
...\" 	[1996/11/19  18:49:04  wardr]
...\"
...\" Revision 1.1.4.1  1996/05/13  19:02:41  wardr
...\" 	{enh,R1.2.2}
...\" 	Removed changebars
...\" 	[1996/05/13  18:56:23  wardr]
...\" 
...\" Revision 1.1.2.9  1995/06/15  19:27:11  buckler
...\" 	1.1 edits and Prentice Hall reformat
...\" 	[1995/06/15  15:40:58  buckler]
...\" 
...\" Revision 1.1.2.8  1994/10/20  03:19:30  cruz
...\" 	final editorial changes, added status codes.
...\" 	[1994/10/20  03:19:07  cruz]
...\" 
...\" Revision 1.1.2.7  1994/09/14  13:36:42  cruz
...\" 	Added new outcome, recovered from technical comments.
...\" 	[1994/09/14  13:36:25  cruz]
...\" 
...\" Revision 1.1.2.6  1994/06/13  17:14:56  devobj
...\" 	cr10872 - fix copyright
...\" 	[1994/06/13  16:49:29  devobj]
...\" 
...\" Revision 1.1.2.5  1994/05/21  16:38:36  cruz
...\" 	Incorporated technical comments
...\" 	[1994/05/21  16:38:17  cruz]
...\" 
...\" Revision 1.1.2.4  1994/05/16  23:27:55  cruz
...\" 	Minor edits
...\" 	[1994/05/16  23:27:25  cruz]
...\" 
...\" Revision 1.1.2.3  1994/05/13  14:29:11  cruz
...\" 	Added index entries
...\" 	[1994/05/13  14:21:16  cruz]
...\" 
...\" Revision 1.1.2.2  1994/05/11  14:29:36  cruz
...\" 	Added revision bars
...\" 	[1994/05/11  14:29:11  cruz]
...\" 
...\" Revision 1.1.2.1  1994/05/09  20:42:11  cruz
...\" 	Renamed file to dce_aud_start.3sec
...\" 	[1994/05/09  20:41:50  cruz]
...\" 
...\" Revision 1.1.2.1  1994/05/03  14:55:39  cruz
...\" 	Audit app ref doc
...\" 	[1994/05/03  14:51:39  cruz]
...\" 
...\" $EndLog$
.TH dce_aud_start 3sec
.SH "Name"
\*Ldce_aud_start\*O -  Determines whether a specified event
should be audited given the client binding information and the event outcome
.iX "\*Ldce_aud_start(\|)\*O"
.PP
Used by client/server applications
.SH "Synopsis"
.sS
\*L#include <dce/audit.h>\*O
.sp .4v
\*Lvoid dce_aud_start(\*O
.nL
	\*Lunsigned32\*O \*Vevent\*L,
.nL
	\*Lrpc_binding_handle_t\*O \*Vbinding\*L,
.nL
	\*Lunsigned32\*O \*Voptions\*L,
.nL
	\*Lunsigned32\*O \*Voutcome\*L,
.nL
	\*Ldce_aud_rec_t *\*O\*Vard\*L,
.nL
	\*Lunsigned32 *\*O\*Vstatus\*O\*L);\*O
.sE
.nL
.ne 1.5i
.SH "Parameters"
.SS "Input"
.VL
.LI "\*Vevent\*O"
Specifies the event to be audited.  This is a 32-bit event number.  
The \*Levent\*O field in the audit record header will be set
to this number.
.LI "\*Vbinding\*O"
Specifies the client's RPC binding handle from which the client identification
information is retrieved to set the \*Lclient\*O, \*Lcell\*O,
\*Lnum_groups\*O, \*Lgroups\*O, and \*Laddr\*O fields in the audit record header.
.LI "\*Voptions\*O"
Specifies the optional header information desired
(\*Laud_c_evt_all_info\*O, \*Laud_c_evt_group_info\*O,
or \*Laud_\%c_\%evt_\%address_\%info\*O).
.P
It can also be used to specify whether the 
audit records are always logged (\*Laud_c_evt_always_log\*O) or 
that an alarm message is always sent to the standard output
(\*Laud_c_evt_always_alarm\*O).  If any of these two
options is selected, the filter is bypassed.
.P
The value of the \*Loptions\*O parameter is the bitwise OR of any
selected combination of the following option values:
.VL
.LI "\*Laud_c_evt_all_info\*O"
Includes all optional information (groups and address) in the audit record 
header.
.LI "\*Laud_c_evt_groups_info\*O"
Includes the groups information in the audit record header.
.LI "\*Laud_c_evt_address_info\*O"
Includes the client address information in the audit record header.
.LI "\*Laud_c_evt_always_log\*O"
Bypasses the filter mechanism and indicates that the event must be logged.
.LI "\*Laud_c_evt_always_alarm\*O"
Bypasses the filter mechanism and indicates that an alarm message must be 
sent to the system console for the event.
.LE
.LI "\*Voutcome\*O"
The event outcome to be stored in the header.  The following event outcome
values are defined:
.PP
.VL
.LI "\*Laud_c_esl_cond_success\*O" 
The event was completed successfully.
.LI "\*Laud_c_esl_cond_denial\*O" 
The event failed because of access denial.
.LI "\*Laud_c_esl_cond_failure\*O" 
The event failed because of reasons other than access denial.
.LI "\*Laud_c_esl_cond_pending\*O"
The event is in an intermediate state, and the outcome is pending, being one
in a series of connected events, where the application desires to record
the real outcome only after the last event.
.LI "\*Laud_c_esl_cond_unknown\*O"
The event outcome (denial, failure, pending, or success) is still unknown.
This outcome exists only between a \*Ldce_aud_start(\|)\*O 
(all varieties of this routine) call
and the next \*Ldce_aud_commit(\|)\*O call.
You can also use \*L0\*O to specify this outcome.
.LE
.LE
.SS "Output"
.VL
.LI "\*Vard\*O"
Returns a pointer to an audit record buffer.  If the event does not need to
be audited because it is not selected by the filters,
or if the environment variable \*LDCEAUDITOFF\*O has been
set, a NULL pointer is returned.  If the function is called with
\*Voutcome\*O set to \*Laud_c_esl_cond_unknown\*O, it is
possible that the function cannot determine whether the event should be
audited.
In this case, the audit record descriptor is still allocated and its 
address is returned to the caller.
An \*Voutcome\*O other than \*Laud_c_esl_cond_unknown\*O must be provided when
calling the \*Ldce_aud_commit(\|)\*O function.
.LI "\*Vstatus\*O"
The status code returned by this function.
This status code
indicates whether the routine was completed successfully or not.
If the routine was not completed successfully, the reason for the failure is
given.
.LE
.nL
.ne 1.5i
.SH "Description"
.PP
The \*Ldce_aud_start(\|)\*O function determines if an audit record should
be generated for the specified event.  The decision is based on the event
filters, an environment variable
(\*LDCEAUDITOFF\*O), the client's identity provided in the
\*Lbinding\*O parameter, and the event outcome (if it is provided in
the \*Loutcome\*O parameter).  If this event needs to be audited,
the function allocates an audit record descriptor and returns a pointer to
it, (that is, \*Vard\*O).  If the event does not need to be audited,
a NULL \*Vard\*O is returned.
If an internal error(s) has occurred,
a NULL pointer is returned in \*Vard\*O.
If the \*Laud_c_evt_always_log\*O or \*Laud_c_evt_always_alarm\*O
option is selected, an audit record descriptor will always be
created and returned.
.PP
The \*Ldce_aud_start(\|)\*O function is designed to be used by RPC applications.
Non-RPC applications that use the DCE authorization model 
(that is, DCE ACL and PAC) must use
\*Ldce_aud_start_with_pac(\|)\*O.  Non-RPC applications that do not use the
DCE authorization model must use \*Ldce_aud_start_with_name(\|)\*O.
.PP
This function obtains the client identity information from the RPC binding
handle and records it in the newly-created audit record descriptor.
.PP
Event-specific information can be added to the record by calling the
\*Ldce_aud_put_ev_info(\|)\*O function.  This function can be called
multiple times after calling \*Ldce_aud_start(\|)\*O and before calling
\*Ldce_aud_commit(\|)\*O.  A completed audit record will be appended
to an audit trail file or sent to the audit daemon 
(depending on the value of the \*Ldescription\*O parameter used in 
the previous call to \*Ldce_aud_open\*O) by
calling \*Ldce_aud_commit(\|)\*O.
.P
.ne 8
This function searches for all relevant filters (for the specified
subject and outcome, if these are specified), summarizes the actions
for each possible event outcome, and records an outcome-action
table with \*Vard\*O.
If the outcome is specified when calling this function and the outcome
does not require any action according to filters, then this function
returns a NULL \*Vard\*O.
.P
If the \*Voutcome\*O is not specified in the 
\*Ldce_aud_start(\|)\*O call, \*Ldce_aud_start(\|)\*O returns a NULL
\*Vard\*O if no action is required for all possible outcomes.
.P
The caller should not change the outcome between the
\*Ldce_aud_start(\|)\*O and \*Ldce_aud_commit(\|)\*O calls arbitrarily.
In this case, the outcome can be made more specific, for example,
from \*Laud_c_esl_cond_unknown\*O to \*Laud_\%c_\%esl_\%cond_\%success\*O 
or from \*Laud_\%c_\%esl_\%cond_\%pending\*O to \*Laud_\%c_\%esl_\%cond_\%success\*O.
.P
An outcome change from \*Laud_c_esl_cond_success\*O to
\*Laud_c_esl_cond_denial\*O is not logically correct because
the outcome \*Laud_c_esl_cond_success\*O may have caused a NULL
\*Vard\*O to be returned in this function.
If the final outcome can be \*Laud_c_esl_cond_success\*O, then it should
be specified in this function, or use \*Laud_c_esl_cond_unknown\*O. 		
.P
This function can be called with the \*Voutcome\*O parameter taking a value
of zero or the union (logical OR) of selected values from the set of
constants \*Laud_c_esl_cond_success\*O, \*Laud_c_esl_cond_failure\*O,
\*Laud_c_esl_cond_denial\*O, and \*Laud_c_esl_cond_pending\*O.
The \*Voutcome\*O parameter used in the \*Ldce_aud_commit(\|)\*O function
should take one value from the same set of constants.
.P
If \*Ldce_aud_start(\|)\*O used a nonzero value for \*Voutcome\*O, then the
constant used for \*Voutcome\*O in the \*Ldce_aud_commit(\|)\*O call should
have been selected in the \*Ldce_aud_start(\|)\*O call.
.nL
.ne 1.5i
.SH "Return Values"
.PP
No value is returned.
.nL
.ne 1.5i
.SH "Errors"
.PP
The following describes a partial list of errors that might be returned.
Refer to the \*(Tg for complete descriptions of all error
messages.
.VL
.LI "\*Laud_s_ok\*O" 
The call was successful.
.LI "Status codes passed from \*Lrpc_binding_to_string_binding(\|)\*O"
.LI "Status codes passed from \*Lrpc_string_free(\|)\*O"
.LI "Status codes passed from \*Ldce_aud_start_with_name(\|)\*O"
.LI "Status codes passed from \*Lsec_cred_get_initiator(\|)\*O"
.LI "Status codes passed from \*Lsec_cred_get_v1_pac(\|)\*O"
.nL
.ne 8
.LI "Status codes passed from \*Ldce_aud_start_with_pac(\|)\*O"
.LI "Status codes passed from \*Lsec_cred_get_delegate(\|)\*O"
.LE
.SH "Related Information"
.PP
.ad l
Functions:
\*Ldce_aud_commit(3sec)\*O,
\*Ldce_aud_open(3sec)\*O,
\*Ldce_aud_put_ev_info(3sec)\*O,
\*Ldce_aud_start_with_name(3sec)\*O,
\*Ldce_aud_start_with_pac(3sec)\*O,
\*Ldce_aud_start_with_server_binding(3sec)\*O.
.ad b
