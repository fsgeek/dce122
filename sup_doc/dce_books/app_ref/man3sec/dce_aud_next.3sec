...\" @OSF_COPYRIGHT@
...\" COPYRIGHT NOTICE
...\" Copyright (c) 1990, 1991, 1992, 1993, 1994 Open Software Foundation, Inc.
...\" ALL RIGHTS RESERVED (DCE).  See the file named COPYRIGHT.DCE for
...\" the full copyright text.
...\" 
...\" HISTORY
...\" $Log: dce_aud_next.3sec,v $
...\" Revision 1.1.6.3  1996/11/19  18:55:50  wardr
...\" 	{edit,R1.2.2}
...\" 	Init capped heads and added PDG pointer
...\" 	[1996/11/19  18:48:55  wardr]
...\"
...\" Revision 1.1.6.2  1996/05/30  20:16:57  weir
...\" 	CR 13390: various corrections
...\" 	[1996/05/30  20:16:23  weir]
...\" 
...\" Revision 1.1.6.1  1996/05/13  19:02:32  wardr
...\" 	{enh,R1.2.2}
...\" 	Removed changebars
...\" 	[1996/05/13  18:56:16  wardr]
...\" 
...\" Revision 1.1.4.1  1996/03/11  18:51:12  weir
...\" 	CR 13335: add PENDING (attribute value) and remove FORMAT (attribute name) from parameters
...\" 	[1996/03/11  18:44:28  weir]
...\" 
...\" Revision 1.1.2.10  1995/06/21  18:24:17  buckler
...\" 	More 1.1 edits.
...\" 	[1995/06/21  17:55:54  buckler]
...\" 
...\" Revision 1.1.2.9  1995/06/15  19:27:06  buckler
...\" 	1.1 edits and Prentice Hall reformat
...\" 	[1995/06/15  15:40:53  buckler]
...\" 
...\" Revision 1.1.2.8  1994/10/20  03:22:09  cruz
...\" 	final editorial changes, added status codes.
...\" 	[1994/10/20  03:21:41  cruz]
...\" 
...\" Revision 1.1.2.7  1994/10/17  23:54:31  cruz
...\" 	Added missing format parameter. (CR 12560)
...\" 	[1994/10/17  23:53:48  cruz]
...\" 
...\" Revision 1.1.2.6  1994/09/14  13:34:15  cruz
...\" 	Recovered from technical comments.
...\" 	[1994/09/14  13:33:59  cruz]
...\" 
...\" Revision 1.1.2.5  1994/06/13  17:14:54  devobj
...\" 	cr10872 - fix copyright
...\" 	[1994/06/13  16:49:27  devobj]
...\" 
...\" Revision 1.1.2.4  1994/05/21  16:35:17  cruz
...\" 	Incorporated technical comments
...\" 	[1994/05/21  16:34:57  cruz]
...\" 
...\" Revision 1.1.2.3  1994/05/13  14:27:41  cruz
...\" 	Added index entries
...\" 	[1994/05/13  14:20:03  cruz]
...\" 
...\" Revision 1.1.2.2  1994/05/11  14:16:54  cruz
...\" 	Added revision bars
...\" 	[1994/05/11  14:14:02  cruz]
...\" 
...\" Revision 1.1.2.1  1994/05/09  20:19:49  cruz
...\" 	Renamed file to dce_aud_next.3sec
...\" 	[1994/05/09  20:19:26  cruz]
...\" 
...\" Revision 1.1.2.1  1994/05/03  13:55:11  cruz
...\" 	Audit app ref doc
...\" 	[1994/05/03  13:54:07  cruz]
...\" 
...\" $EndLog$
.TH dce_aud_next 3sec
.SH "Name"
\*Ldce_aud_next\*O -  Reads the next audit record from a specified audit trail
file into a buffer
.iX "\*Ldce_aud_next(\|)\*O"
.PP
Used by the trail analysis and examination tools
.SH "Synopsis"
.sS
\*L#include <dce/audit.h>\*O
.sp .4v
\*Lvoid dce_aud_next(\*O
.nL
	\*Ldce_aud_trail_t *\*Vat\*L,
.nL
	\*Lchar *\*O\*Vpredicate\*L,
.nL
	\*Lunsigned16\*O \*Vformat\*L,
.nL
	\*Ldce_aud_rec_t *\*O\*Vard\*L,
.nL
	\*Lunsigned32 *\*O\*Vstatus\*L);\*O
.sE
.nL
.ne 1.5i
.SH "Parameters"
.SS "Input"
.VL
.zA "def,13390,R1.2.2,added corrections"
.LI "\*Vat\*O"
A pointer to the descriptor of an audit trail file previously opened for
reading by the function \*Ldce_aud_open(\|)\*O.
.LI "\*Vpredicate\*O"
Criteria for selecting the audit records that are to be read from the audit
trail file. A predicate statement consists of an attribute and its value, separated
by any of the following operators: \*L=\*O (equal to), \*L<\*O (less than),
\*L<=\*O (less than or equal to), \*L>\*O (greater than),
and \*L>=\*O (greater than or equal to):
...\" 
.ad l
.ML
.LI
\*Vattribute\*O\*L=\*O\*Vvalue\*O
.LI
\*Vattribute\*O\*L>\*O\*Vvalue\*O
.LI
\*Vattribute\*O\*L>=\*O\*Vvalue\*O
.LI
\*Vattribute\*O\*L<\*O\*Vvalue\*O
.LI
\*Vattribute\*O\*L<=\*O\*Vvalue\*O
.zZ "def,13390,R1.2.2,added corrections"
.LE
.ad b
Attribute names are case sensitive, and no space is allowed within
a predicate expression. Multiple predicates are delimited by a comma,
in the following form:
...\" 
.sS
\*Vattribute1\*L=\*Vvalue1\*L,\*Vattribute2\*L>\*Vvalue2\*L,\*O \&.\&.\&.
.sE
...\" 
.PP
No space is allowed between predicates. Note that when multiple predicates
are defined, the values are logically ANDed together.
.PP
The possible attribute names, their values, and allowable operators are as
follows:
...\" 
.zA "def,13390,R1.2.2,added corrections"
.VL
.LI "\*LSERVER\*O"
The UUID of the server principal that generated the record. The
attribute value must be a UUID string. Operator allowed: \*L=\*O (equal to).
.LI "\*LEVENT\*O"
The audit event number. The attribute value must be a hexadecimal number.
Operator allowed: \*L=\*O (equal to).
.LI "\*LOUTCOME\*O"
The event outcome of the record. The possible attribute values are
\*LSUCCESS\*O, \*LFAILURE\*O, \*LPENDING\*O, or \*LDENIAL\*O.
Operator allowed: \*L=\*O (equal to).
.LI "\*LSTATUS\*O"
The authorization status of the client. The possible attribute values are
\*LDCE\*O for DCE authorization (PAC based), and \*LNAME\*O for name-based
authorization. Operator allowed: \*L=\*O (equal to).
.LI "\*LCLIENT\*O"
The UUID of the client principal. The attribute value must be a UUID string.
Operator allowed: \*L=\*O (equal to).
.LI "\*LTIME\*O"
The time the record was generated. The attribute value must be a
null-terminated string that expresses an absolute time. Operators allowed:
\*L<=\*O (less than or equal to), \*L<\*O (less than), \*L>=\*O (greater
than or equal to), and \*L>\*O (greater than).
.LI "\*LCELL\*O"
The UUID of the client's cell. The attribute value must be a UUID string.
Operator allowed: \*L=\*O (equal to).
.LI "\*LGROUP\*O"
The UUID of one of the client's group(s). The attribute value must be a
UUID string. Operator allowed: \*L=\*O (equal to).
.LI "\*LADDR\*O"
The address of the client. The attribute is typically the string
representation of an RPC binding handle. Operator allowed: \*L=\*O (equal
to).
...\" 
.LI "\*LFORMAT\*O"
The format version number of the audit event record. The attribute value
must be an integer. Operators allowed: \*L=\*O (equal to), \*L<\*O (less
than), and \*L>\*O (greater than).
...\" 
.LE
.zZ "def,13390,R1.2.2,added corrections"
...\" 
...\" .PP
...\" If the \*Lpredicate\*O parameter is a NULL pointer, the next record in
...\" the audit trail file is returned.
...\" 
.LI "\*Vformat\*O"
Event's tail format used for the event-specific information. This format can be
configured by the user. With this format version number, the servers and audit
analysis tools can accomodate changes in the formats of the event specification
information, or use different formats dynamically.
.LE
...\" 
...\" 
.SS "Output"
.VL
.LI "\*Vard\*O"
A pointer to the audit record descriptor containing the returned record.
...\" 
.LI "\*Vstatus\*O"
The status code returned by this routine. This status code indicates whether
the routine was completed successfully or not. If the routine was not completed
successfully, the reason for the failure is given. See ``ERRORS'' for a list of
the possible status codes and their meanings.
.LE
...\" 
...\" 
.nL
.ne 1.5i
.SH "Description"
.PP
The \*Ldce_aud_next(\|)\*O function attempts to read the next record from the
audit trail file specified by the audit trail descriptor, \*Vat\*O. This function
also defines the predicate to be used to search for the next record and returns a
matching record if one exists. The \*Ldce_aud_next(\|)\*O function can be used to
search for successive records in the trail that match the defined predicate. By
default, if no predicate is explicitly defined, the function returns the next
record from the audit trail.
.PP
If no record satisfies the predicate specified for the call, a value of zero
(\*LNULL\*O) is returned through \*Vard\*O.
.PP
The value returned through \*Lard\*O can be supplied as an input parameter to
the functions \*Ldce_aud_get_header(\|)\*O, \*Ldce_aud_length(\|)\*O, 
\*Ldce_aud_discard(\|)\*O, \*Ldce_aud_print(\|)\*O, \*Ldce_aud_get_event(\|)\*O,
and \*Ldce_aud_get_ev_info(\|)\*O.
.PP
Storage allocated by this function must be explicitly freed by a call
to \*Ldce_aud_discard(\|)\*O with \*Vard\*O as the input parameter.
.PP
If the function successfully reads an audit trail record, the cursor
associated with the audit trail descriptor \*Vat\*O will be advanced to
the next record in the audit trail. The calling routine does not need to
set or move the cursor explicitly.
.PP
If no appropriate record can be found in the audit trail, an \*Vard\*O value of
\*LNULL\*O is returned and the cursor is advanced to the end of the audit trail.
If a call is unsuccessful, the position of the cursor does not change.
.nL
.ne 1.5i
.SH "Return Values"
.PP
No value is returned.
.nL
.ne 1.5i
.SH "Errors"
.PP
The following describes a partial list of errors that might be returned.
Refer to the \*(Tg for complete descriptions of all error
messages.
.VL
.LI "\*Laud_s_ok\*O"
The call was successfully completed.
.LI "\*Laud_s_invalid_trail_descriptor\*O"
The audit trail descriptor is invalid.
.LI "\*Laud_s_trail_file_corrupted\*O"
The trail file is corrupted.
.LI "\*Laud_s_index_file_corrupted\*O"
The index trail file is corrupted.
.LI "\*Laud_s_cannot_allocate_memory\*O"
The \*Lmalloc(\|)\*O call failed.
.LI "Status codes passed from \*Lidl_es_decode_buffer(\|)\*O"
.LI "Status codes passed from \*Lidl_es_handle_free(\|)\*O"
.LI "Status codes passed from \*Laudit_pickle_dencode_ev_info(\|)\*O"
(RPC IDL compiler)
.LE
.SH "Related Information"
.PP
.ad l
Functions:
\*Ldce_aud_next(3sec)\*O,
\*Ldce_aud_get_header(3sec)\*O,
\*Ldce_aud_length(3sec)\*O,
\*Ldce_aud_get_ev_info(3sec)\*O,
\*Ldce_aud_open(3sec)\*O,
\*Ldce_aud_discard(3sec)\*O,
\*Ldce_aud_print(3sec)\*O,
\*Ldce_aud_get_event(3sec)\*O.
.ad b
