...\" COPYRIGHT NOTICE
...\" Copyright (c) 1990-1996 Open Software Foundation, Inc. 
...\" ALL RIGHTS RESERVED (DCE). See the file named COPYRIGHT.DCE in the 
...\" src directory for the full copyright text. 
...\" 
...\" 
...\" HISTORY
...\" $Log: pkc_trust_list.class.3sec,v $
...\" Revision 1.1.2.5  1996/12/20  22:00:27  weir
...\" 	Final updates
...\" 	[1996/12/20  21:58:57  weir]
...\"
...\" Revision 1.1.2.4  1996/12/17  20:11:56  damon
...\" 	Expanded OSF C O P Y R I G H T   N O T I C E
...\" 	[1996/12/17  20:09:05  damon]
...\" 
...\" Revision 1.1.2.3  1996/11/19  18:57:24  wardr
...\" 	{edit,R1.2.2}
...\" 	Init capped heads and added PDG pointer
...\" 	[1996/11/19  18:50:30  wardr]
...\" 
...\" Revision 1.1.2.2  1996/11/18  19:58:33  weir
...\" 	No change
...\" 	[1996/11/18  19:55:54  weir]
...\" 
...\" Revision 1.1.2.1  1996/10/15  21:11:27  weir
...\" 	Initial submission
...\" 	[1996/10/15  21:09:48  weir]
...\" 
...\" $EndLog$
...\" 
...\" 
...\" 
...\" 
.TH pkc_trust_list.class 3sec
...\" 
.SH "Name"
\*Lpkc_trust_list_t\*O - A class that expresses certificate trust list operations
...\" 
...\" 
...\" 
.nL
...\" 
.ne 1.5i
...\" 
...\" 
.SH "Member Data"
...\" 
.SS "Public"
.ML
.LI
\*Lpkc_trust_list_element_t * first\*O
.LI
\*Lpkc_trust_list_element_t * last\*O
.LI
\*Lpkc_revocation_list_t revocation_list\*O
.PP
List of revocations
.LE
...\" 
...\" .SS "Private"
...\" .ML
...\" .LI
...\" \*L\*O
...\" .PP
...\" 
...\" .LE
...\" 
...\" 
...\" 
.SH "Member Functions"
...\" 
.SS "Public"
...\" 
.ML
.LI
\*Lpkc_trust_list_t(void)\*O
...\" 
.LI
\*Lvoid empty(void)\*O
...\" 
.LI
\*Lvirtual ~pkc_trust_list_t(\|)\*O
...\" 
.LI
\*Lpkc_trust_list_t & operator = (const pkc_trust_list_t & o)\*O
...\" 
.LI
\*Lunsigned32 fixup_links(void)\*O
...\" 
.LI
\*Lunsigned32 find_certified_key(\|)\*O
.PP
Returns the first key entry that was created from the specified certificate.
Call \*Lfind_next_certified_key(\|)\*O to return the next such key. Takes
the following arguments:
.ML
.LI
\*Lconst x500name & certifier\*O
.LI
\*Lconst asn_integer & certifying_serial_no\*O
.LI
\*Lpkc_trust_list_element_t ** key\*O
.LE
...\" 
...\" 
.LI
\*Lunsigned32 find_next_certified_key(\|)\*O
.PP
Returns the next key entry that was created from the same certificate as
the current entry. \*Vkey\*O is both an input and an output. Takes the
following argument:
.ML
.LI
\*Lpkc_trust_list_element_t ** key\*O
.LE
...\" 
.LI
\*Lunsigned32 find_certified_key_by_id(\|)\*O
.PP
Returns the first key entry that was certified by the specified key id.
Call \*Lfind_next_certified_key_by_id(\|)\*O to return the next such key.
Takes the following arguments:
.ML
.LI
\*Lunsigned long \*Vca_key_id\*O
.LI
\*Lpkc_trust_list_element_t ** key\*O
.LE
...\" 
...\" 
.LI
\*Lunsigned32 find_next_certified_key_by_id(\|)\*O
.PP
Returns the next key entry that was certified by the same key as
the current entry. \*Vkey\*O is both an input and an output.
Takes the following argument:
.ML
.LI
\*Lpkc_trust_list_element_t ** key\*O
.LE
...\" 
.LE
...\" 
...\" 
.nL
.ne 1.5i
...\" 
.SH "Description"
.PP
\*Lpkc_trust_list_t\*O embodies rules and operations for a certificate
trust list. This class has the \*Lfriend\*O class \*Lpkc_trust_list_element_t\*O.
.VL "\*LNote:\*O"
The certificate manipulation routines are a C++ interface. C++ must be
used to perform direct certificate manipulation.
.LE
...\" 
.ne 1.5i
...\" 
.SH "Related Information"
.PP
.ad l
Classes:
\*Lpkc_ca_key_usage.class(3sec)\*O,
\*Lpkc_constraints.class(3sec)\*O,
\*Lpkc_generic_key_usage.class(3sec)\*O,
\*Lpkc_key_policies.class(3sec)\*O,
\*Lpkc_key_policy.class(3sec)\*O,
\*Lpkc_key_usage.class(3sec)\*O,
\*Lpkc_name_subord_constraint.class(3sec)\*O,
\*Lpkc_name_subord_constraints.class(3sec)\*O,
\*Lpkc_name_subtree_constraint.class(3sec)\*O,
\*Lpkc_name_subtree_constraints.class(3sec)\*O,
\*Lpkc_pending_revocation.class(3sec)\*O,
\*Lpkc_revocation.class(3sec)\*O,
\*Lpkc_revocation_list.class(3sec)\*O,
\*Lpkc_trust_list_element.class(3sec)\*O,
\*Lpkc_trusted_key.class(3sec)\*O.
.ad b 
...\" 
...\" 
...\" 
...\" class pkc_trust_list_t {
...\" friend class pkc_trust_list_element_t;
...\" public:
...\" 
...\"     pkc_revocation_list_t revocation_list;  // List of revocations
...\" 
...\"     pkc_trust_list_element_t * first;
...\"     pkc_trust_list_element_t * last;
...\"     pkc_trust_list_t(void);
...\"     void empty(void);
...\"     virtual ~pkc_trust_list_t();
...\"     pkc_trust_list_t & operator = (const pkc_trust_list_t & o);
...\"     unsigned32 fixup_links(void);
...\"     unsigned32 find_certified_key(const x500name & certifier,
...\"                                   const asn_integer & certifying_serial_no,
...\"                                   pkc_trust_list_element_t ** key);
...\" // Returns the first key entry that was created from the specified certificate.
...\" // Call find_next_certified_key() to return the next such key.
...\" 
...\"     unsigned32 find_next_certified_key(pkc_trust_list_element_t ** key);
...\" // Returns the next key entry that was created from the same certificate as
...\" // the current entry.  "key" is both an input and an output.
...\" 
...\"     unsigned32 find_certified_key_by_id(unsigned long ca_key_id,
...\"                                         pkc_trust_list_element_t ** key);
...\" // Returns the first key entry that was certified by the specified key-id
...\" // Call find_next_certified_key_by_id() to return the next such key.
...\" 
...\"     unsigned32 find_next_certified_key_by_id(pkc_trust_list_element_t ** key);
...\" // Returns the next key entry that was certified by the same key as
...\" // the current entry.  "key" is both an input and an output.
...\" };
...\" 
...\" 
...\" 
