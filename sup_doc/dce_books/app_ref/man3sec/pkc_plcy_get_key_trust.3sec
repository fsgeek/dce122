...\" COPYRIGHT NOTICE
...\" Copyright (c) 1990-1996 Open Software Foundation, Inc. 
...\" ALL RIGHTS RESERVED (DCE). See the file named COPYRIGHT.DCE in the 
...\" src directory for the full copyright text. 
...\" 
...\" 
...\" HISTORY
...\" $Log: pkc_plcy_get_key_trust.3sec,v $
...\" Revision 1.1.2.5  1996/12/20  22:00:14  weir
...\" 	Final updates
...\" 	[1996/12/20  21:58:45  weir]
...\"
...\" Revision 1.1.2.4  1996/12/17  20:11:44  damon
...\" 	Expanded OSF C O P Y R I G H T   N O T I C E
...\" 	[1996/12/17  20:08:53  damon]
...\" 
...\" Revision 1.1.2.3  1996/11/19  18:57:12  wardr
...\" 	{edit,R1.2.2}
...\" 	Init capped heads and added PDG pointer
...\" 	[1996/11/19  18:50:19  wardr]
...\" 
...\" Revision 1.1.2.2  1996/11/18  19:58:13  weir
...\" 	No change
...\" 	[1996/11/18  19:55:42  weir]
...\" 
...\" Revision 1.1.2.1  1996/10/15  21:11:14  weir
...\" 	Initial submission
...\" 	[1996/10/15  21:09:38  weir]
...\" 
...\" $EndLog$
...\" 
...\" 
...\" 
...\" 
.TH pkc_plcy_get_key_trust 3sec
...\" 
.SH "Name"
\*Lpkc_plcy_get_key_trust\*O - Returns information about trust in a key
...\" 
...\" 
.SH "Synopsis"
.sS
\*L#include <pkc_plcy.h>\*O
.sp .4v
\*Lunsigned32 pkc_plcy_get_key_trust(\*O
.nL
	\*Lgss_OID \*Vpolicy\*L,
.nL
	\*Lvoid * \*Vkeys_handle\*L,
.nL
	\*Lunsigned \*Vkey_index\*L,
.nL
	\*Lcertification_flags_t * \*Vflags\*L,
.nL
	\*Luuid_t * \*Vkey_domain\*L,
.nL
	\*Lunsigned long * \*Vkey_usages\*L);
.sE
.nL
...\" 
.ne 1.5i
...\" 
...\" 
...\" 
...\" 
.SH "Parameters"
...\" 
.SS "Input"
...\" 
.VL
.LI "\*Vpolicy\*O"
Specifies policy.
...\" 
.LI "\*Vkeys_handle\*O"
A policy specific structure, obtained from a call to
\*Lpkc_plcy_retrieve_keyinfo(3sec)\*O.
...\" 
.LI "\*Vkey_index\*O"
Specifies key about which trust information is requested.
...\" 
.LE
...\" 
.SS "Output"
...\" 
.VL
.LI "\*Vflags\*O"
Information about the trust that can be placed in the key (see below).
...\" 
.LI "\*Vkey_domain\*O"
Indicates domain of retrieved key. A value of
\*Lsec_pk_domain_unspecified\*O or \*LNULL\*O
means that the policy does not distinguish keys by domain.
...\" 
.LI "\*Vkey_usages\*O"
Indicates usage key is intended for.
...\" 
.LE
...\" 
.nL
.ne 1.5i
...\" 
.SH "Description"
.PP
\*Lpkc_plcy_get_key_trust(3sec)\*O searches the list of registered
policies for implementations of the specified policy. If found, the
implementation is opened, if necessary, and its \*L(*get_key_data)(\|)\*O
function is invoked. Necessary mutex protection around non-thread
safe policy implementations is provided.
...\" 
.PP
The returned \*Lcertification_flags_t\*O structure describes the trust that
can be placed in the key. It contains the following fields:
...\" 
.ML
.LI
\*Ltrust_type\*O
.PP
A \*Ltrust_type_t\*O value, which will be one of the following:
...\" 
.ML
.LI
\*LUNTRUSTED\*O
.PP
No trust (e.g., unauthenticated).
...\" 
.LI
\*LDIRECT_TRUST\*O
.PP
Direct trust via third party (e.g., authenticated registry).
...\" 
.LI
\*LCERTIFIED_TRUST\*O
.PP
Trust certified by caller's trust base.
...\" 
.LE
...\" 
.LE
...\" 
...\" 
...\" 
.PP
If \*Vkey_domain\*O and \*Vkey_usages\*O are
passed as non-\*LNULL\*O pointers, upon successful return these
parameters will describe the domain and permitted usage(s) of the specified
key. Policies that do not distinguish keys according to domain will indicate a
domain of \*Lsec_pk_domain_unspecified\*O; policies that do not
distinguish keys according to usage will indicate all usages are permitted.
.PP
The returned \*Vkey_usages\*O is a bit mask which describes
the usage(s), if any, which the key is restricted to. The value is
formed by AND-ing together one or more of the following constants:
...\" 
...\" 
.VL 2.5i
.LI "\*LPKC_KEY_USAGE_AUTHENTICATION\*O"
The key can be used to authenticate a user
...\" 
.LI "\*LPKC_KEY_USAGE_INTEGRITY\*O"
The key can be used to provide integrity protection
...\" 
.LI "\*LPKC_KEY_USAGE_KEY_ENCIPHERMENT\*O"
The key can be used to encrypt user keys
...\" 
.LI "\*LPKC_KEY_USAGE_DATA_ENCIPHERMENT\*O"
The key can be used to encrypt user data
...\" 
.LI "\*LPKC_KEY_USAGE_KEY_AGREEMENT\*O"
The key can be used for key-exchange
...\" 
.LI "\*LPKC_KEY_USAGE_NONREPUDIATION\*O"
The key can be used for non-repudiation
...\" 
.LI "\*LPKC_CAKEY_USAGE_KEY_CERT_SIGN\*O"
The key can be used to sign key certificates
...\" 
.LI "\*LPKC_CAKEY_USAGE_OFFLINE_CRL_SIGN\*O"
The key can be used to sign CRLs
...\" 
.LI "\*LPKC_CAKEY_USAGE_TRANSACTION_SIGN\*O"
The key can be used to sign transactions
...\" 
.LE
...\" 
.PP
A returned \*Vkey_usages\*O value of \*LNULL\*O
(or a value with all bits set) means that the key is suitable for any
usage.
...\" 
...\" 
.ne 1.5i
.SH "Return Values"
.VL 1i
.LI "\*Lpkc_s_success\*O"
Operation successfully completed.
...\" 
.LE
...\" 
...\" 
...\" 
...\" 
...\" 
.nL 
...\" 
.ne 1.5i
.SH "Errors"
.PP
Refer to the \*EOSF DCE Problem Determination Guide\*O for
complete descriptions of all error messages.
...\" 
...\" 
.SH "Related Information"
.PP
.ad l
Functions:
\*Lpkc_plcy_intro(3sec)\*O,
\*Lpkc_plcy_delete_keyinfo(3sec)\*O,
\*Lpkc_plcy_delete_trustbase(3sec)\*O,
\*Lpkc_plcy_establish_trustbase(3sec)\*O,
\*Lpkc_plcy_get_key_certifier_count(3sec)\*O,
\*Lpkc_plcy_get_key_certifier_info(3sec)\*O,
\*Lpkc_plcy_get_key_count(3sec)\*O,
\*Lpkc_plcy_get_key_data(3sec)\*O,
\*Lpkc_plcy_get_registered_policies(3sec)\*O,
\*Lpkc_plcy_lookup_policy(3sec)\*O,
\*Lpkc_plcy_retrieve_key(3sec)\*O,
\*Lpkc_plcy_retrieve_keyinfo(3sec)\*O,
\*Lpkc_register_policy(3sec)\*O.
.ad b 
...\" 
...\" 
...\" 
...\" extern "C" unsigned32 pkc_plcy_get_key_trust (gss_OID policy,
...\"                                               void * keys_handle,
...\"                                               unsigned key_index,
...\"                                               certification_flags_t * flags);
...\" 
...\" 
...\"     /* The above functions search the list of registered policies   */
...\"     /* for implementations of the specified policy. If found, the   */
...\"     /* implementation will be opened if necessary and its           */
...\"     /* corresponding member function will be invoked.  These        */
...\"     /* routines provide the necessary mutex protection around       */
...\"     /* non-threadsafe policy implementations.                       */
...\" 
...\" 
