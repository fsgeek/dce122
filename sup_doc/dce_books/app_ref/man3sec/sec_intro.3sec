...\" @OSF_COPYRIGHT@
...\" COPYRIGHT NOTICE
...\" Copyright (c) 1990, 1991, 1992, 1993, 1994 Open Software Foundation, Inc.
...\" ALL RIGHTS RESERVED (DCE).  See the file named COPYRIGHT.DCE for
...\" the full copyright text.
...\" 
...\" 
...\" HISTORY
...\" $Log: sec_intro.3sec,v $
...\" Revision 1.1.4.6  1996/11/19  18:58:24  wardr
...\" 	{edit,R1.2.2}
...\" 	Init capped heads and added PDG pointer
...\" 	[1996/11/19  18:51:32  wardr]
...\"
...\" Revision 1.1.4.5  1996/10/02  15:29:20  millett
...\" 	{edt,R1.2.2}
...\" 	OSF edits
...\" 	[1996/10/02  15:28:48  millett]
...\" 
...\" Revision 1.1.4.4  1996/09/17  19:46:49  millett
...\" 	{edt,R1.2.2}
...\" 	Type fix.
...\" 	[1996/09/17  19:46:24  millett]
...\" 
...\" Revision 1.1.4.3  1996/09/11  16:54:49  millett
...\" 	{enh,13592,R1.2.2}
...\" 	 added public key data types
...\" 	[1996/09/11  16:54:05  millett]
...\" 
...\" Revision 1.1.4.2  1996/07/18  18:44:49  millett
...\" 	{def,13530,R1.2.2}
...\" 	Add sec_rgy_acct_auth_user_to_user flag to sec_rgy_auth_flags_t
...\" 	[1996/07/18  18:42:56  millett]
...\" 
...\" Revision 1.1.4.1  1996/05/13  19:04:39  wardr
...\" 	{enh,R1.2.2}
...\" 	Removed changebars
...\" 	[1996/05/13  18:57:46  wardr]
...\" 
...\" Revision 1.1.2.19  1995/06/21  18:24:23  buckler
...\" 	More 1.1 edits.
...\" 	[1995/06/21  17:28:09  buckler]
...\" 
...\" Revision 1.1.2.18  1995/06/21  13:21:09  buckler
...\" 	More 1.1 edits.
...\" 	[1995/06/21  13:15:07  buckler]
...\" 
...\" 	1.1 edits and Prentice Hall reformat
...\" 	[1995/06/15  15:38:59  buckler]
...\" 
...\" Revision 1.1.2.17  1994/10/20  19:21:26  zahn
...\" 	{edt,????,R1.1}
...\" 
...\" 	Removed note to reviewer as part of post-freeze
...\" 	cleanup.
...\" 	[1994/10/20  19:21:11  zahn]
...\" 
...\" Revision 1.1.2.16  1994/10/19  20:31:57  millette
...\" 	{enh, 10549, R1.1}
...\" 	Clarify passwd_rec_t
...\" 	{enh,10056,R1.1}
...\" 	 HP review comments
...\" 	[1994/10/19  20:31:25  millette]
...\" 
...\" Revision 1.1.2.15  1994/10/14  20:31:31  norb
...\" 	changes for pwd mgmt
...\" 	[1994/10/14  20:30:55  norb]
...\" 
...\" 	changes for pwd mgmt
...\" 
...\" Revision 1.1.2.14  1994/10/13  21:17:48  millette
...\" 	{def,12605, R1.1}
...\" 	changes to sec_rgy_acct_user_t and sec_rgy_acct_admin_t
...\" 	{enh,10514,R1.1}
...\" 	HP review comments
...\" 	[1994/10/13  21:15:19  millette]
...\" 
...\" Revision 1.1.2.13  1994/10/06  19:28:22  buckler
...\" 	{def, 10898, R1.1}
...\" 	Removed all status codes -- these sections made obsolete
...\" 	by Problem Determination Guide.
...\" 	[1994/10/06  19:27:56  buckler]
...\" 
...\" Revision 1.1.2.12  1994/09/19  19:45:53  neilson
...\" 	CR 8399 - Removed references to sec_acl_mgr* calls.
...\" 	[1994/09/19  19:45:30  neilson]
...\" 
...\" Revision 1.1.2.11  1994/09/01  17:02:41  millette
...\" 	(def,11491,R1.1)
...\" 	Add sec_rgy_bind_auth_info_t and sec_rgy_bind_auth_info_type_t
...\" 	[1994/09/01  17:02:03  millette]
...\" 
...\" Revision 1.1.2.10  1994/08/31  22:06:11  millette
...\" 	(def,10046,R1.1)
...\" 	Add sec_acl_posix_semantics_t
...\" 	[1994/08/31  22:05:40  millette]
...\" 
...\" Revision 1.1.2.9  1994/08/26  20:39:54  millette
...\" 	(enh,10056,R1.1)
...\" 	Update for ERA
...\" 	[1994/08/26  20:39:27  millette]
...\" 
...\" Revision 1.1.2.8  1994/07/13  19:36:16  jshirley
...\" 	{def,10220,R1.1} Remove reference to rpcd and sec_clientd
...\" 	[1994/07/13  19:35:27  jshirley]
...\" 
...\" Revision 1.1.2.7  1994/06/16  21:25:36  millette
...\" 	(def,9376,R1.1)
...\" 	added sec_id_pac_t, sec_id_pac_format_t, and minor fixes to sec_id_pa_t
...\" 	[1994/06/16  21:24:03  millette]
...\" 
...\" Revision 1.1.2.6  1994/06/13  17:04:15  devobj
...\" 	cr10872 - fix copyright
...\" 	[1994/06/13  16:48:18  devobj]
...\" 
...\" Revision 1.1.2.5  1994/05/18  15:02:13  willie
...\" 	{edit, R1.1}
...\" 	SGML conversion problem.
...\" 	[1994/05/18  15:01:54  willie]
...\" 
...\" Revision 1.1.2.4  1994/05/17  20:14:11  willie
...\" 	{edit, R1.1}
...\" 	Cleaned up lists again for SGML conversion.
...\" 	[1994/05/17  20:13:54  willie]
...\" 
...\" Revision 1.1.2.3  1994/05/16  17:49:35  willie
...\" 	{edit, R1.1}
...\" 	Changed list markup around tables to include the tables
...\" 	broke the SGML conversion.
...\" 	[1994/05/16  17:46:37  willie]
...\" 
...\" Revision 1.1.2.2  1994/05/10  18:05:42  millette
...\" 	{enh, 10514, R1.1}
...\" 	Update for delegation
...\" 	[1994/05/10  18:05:13  millette]
...\" 
...\" Revision 1.1.2.1  1994/04/11  20:37:08  rom
...\" 	{def, 10326, R1.1}
...\" 	Rename intro.3sec to sec_intro.3sec.
...\" 	[1994/04/11  19:53:22  rom]
...\" 
...\" $EndLog$
...\" 
...\" (c) Copyright 1991, Open Software Foundation, Inc.  ALL RIGHTS RESERVED
...\" Copyright Hewlett-Packard Company 1991
...\"
...\" All Rights Reserved.  Reproduction, adaptation,
...\" or translation without prior written permission
...\" is prohibited, except as allowed under the
...\" copyright laws.
...\" 
.TH sec_intro "3sec" "" "" ""
.SH "Name"
\*Lsec_intro\*O - Application program interface to the DCE Security Service
.SH "Description"
The DCE Security Service application
program interface (API) allows developers to create network services with
complete access to all the authentication and authorization capabilities
of DCE Security Service and facilities.
.PP
The transaction of a network service generally consists of a client process
requesting some action from a server process.  The client may itself be a
server, or a user, and the server may also be a client of other servers.
Before the targeted server executes the specified action, it must be sure
of the client's identity, and it must know whether the client is authorized
to request the service.
.PP
The security service API consists of the following
sets of remote procedure calls
(RPCs) used to communicate with various security-related services and
facilities:
.VL
.LI "\*Lrgy\*O"
Maintains the network registry of principal identities.
.LI "\*Lera\*O"
Maintains extended registry attributes.
.LI "\*Llogin\*O"
Validates a principal's network identity and establish 
delegated identities.
.LI "\*Lepa\*O"
Extracts privilege attributes from an opaque binding handle.
.LI "\*Lacl\*O"
Implements an access control list (ACL)
protocol for the authorization of a
principal to network access and services.
.LI "\*Lkey\*O"
Provides facilities for the maintenance of account keys for daemon
principals.
.LI "\*Lid\*O"
Maps file system names to universal unique IDs (UUIDs).
.LI "\*Lpwd_mgmt\*O"
Provides facilities for password management.
.zA "enh,13592,R1.2.2,add public key"
.LI "\*Lpk\*O"
Provides facilities for public key authentication.
.zZ "enh,13592,R1.2.2,add public key"
.LE
.PP
All the calls in this API have names beginning with the \*Lsec_\*O prefix.
These are the same calls used by various user-level tools provided as part
of the DCE. For example, the \*Lsec_create_db(1)\*O tool is written with
\*Lsec_rgy\*O calls, \*Lacl_edit(1)\*O is written with \*Lsec_acl\*O
calls, and the \*Llogin(1)\*O program, with which a user logs in to a DCE
system, is written using \*Lsec_login\*O calls.  Most sites will find the
user-level tools adequate for their needs, and only must use the security
service API to customize or replace the functionality of these tools.
.PP
Though most of the calls in the security service
API represent RPC transactions,
code has been provided on the client side to handle much of the overhead
involved with making remote calls.  These \*Estubs\*O handle binding to the
requested security server site, the marshalling of data into whatever form
is needed for transmission, and other bookkeeping involved with these
remote calls.  An application programmer can use the security service
interfaces as if they were composed of simple C functions.
.PP
This reference page introduces each of the following APIs:
.ML
.LI
Registry APIs
.LI
Login APIs
.LI
Extended privilege attributes APIs
.LI
Extended registry attributes APIs
.LI
ACL APIs
.LI
Key management APIs
.LI
ID mapping APIs
.LI
Password management APIs
.zA "enh,13592,R1.2.2,add public key"
.LI
Public Key APIs
.zZ "enh,13592,R1.2.2,add public key"
.LE
.PP
The section for each API is organized as follows:
.ML
.LI
Synopsis
.LI
Data Types
.LI
Constants
.LI
Files
.LE
.nL
.ne 1.5i
.SH "Registry API Data Types"
.SH "Synopsis"
.PP
.sS
\*L#include <dce/rgybase.h>\*O
.sE
.nL
.ne 1.5i
.SH "Data Types"
.PP
The following data types are used in \*Lsec_rgy_\*V*\*O calls:
.VL
.LI "\*Lsec_rgy_handle_t\*O"
A pointer to the registry server handle.  The registry server is bound to a
handle with the \*Lsec_rgy_site_open(\|)\*O routine.
.LI "\*Lsec_rgy_bind_auth_info_type_t\*O"
A enumeration that defines whether or not the 
binding is authenticated.  This data type is used 
in conjunction with the \*Lsec_rgy_bind_auth_info_t\*O 
data type to set up the authorization 
method and parameters for a binding.  
The \*Lsec_\%rgy_\%bind_\%auth_\%info_\%type_\%t\*O type 
consists of the following elements:
.VL
.LI "\*Lsec_rgy_bind_auth_none\*O"
The binding is not authenticated.
.LI "\*Lsec_rgy_bind_auth_dce\*O"
The binding uses DCE shared-secret key authentication.
.LE
.LI "\*Lsec_rgy_bind_auth_info_t\*O"
A discriminated union that defines authorization and authentication parameters 
for a binding.  This data type is used 
in conjunction with the \*Lsec_rgy_bind_auth_info_type_t\*O 
data type to set up the authorization 
method and parameters for a binding. 
The \*Lsec_rgy_bind_auth_info_t\*O data type consists of the 
following elements:
.VL
.LI "\*Linfo_type\*O"
A \*Lsec_rgy_bind_auth_info_type_t\*O data type that specifies whether or 
not the binding is authenticated.  
The contents 
of the union depend on the value of 
\*Lsec_rgy_bind_auth_info_type_t\*O.  
.PP
For unauthenticated bindings (\*Lsec_\%rgy_\%bind_\%auth_\%info_\%type_\%t\*O = 
\*Lsec_\%rgy_\%bind_\%auth_\%none\*O), no parameters are supplied.  
.PP
For authenticated bindings 
(\*Lsec_\%rgy_\%bind_\%auth_\%info_\%type_\%t\*O = 
\*Lsec_\%rgy_\%bind_\%auth_\%dce\*O), the \*Ldce_info\*O structure is supplied.
.LI "\*Ldce_info\*O
A structure that consists of the following elements:
.VL
.LI "\*Lauthn_level\*O"
An unsigned 32 bit integer indicating the protection level for RPC 
calls made using the server binding handle.  The protection level
determines the degree to which authenticated communications
between the client and the server are protected
by the authentication service specified by \*Lauthn_svc\*O.
.PP
If the RPC runtime or the RPC protocol in the bound protocol sequence
does not support a specified level, the level is
automatically upgraded to the next higher supported level.
The possible protection levels are as follows:
.LE
.PP
.ne 5i
.ps 11
.vs 12
.in -2.0i
.TS
center allbox tab(@);
lb | lb
lb | lw(3.1i).
Protection Level@Description
=
\*Lrpc_c_protect_level_default\*O@T{
Uses the default protection 
level for the specified
authentication service.
The default protection level for 
DCE shared-secret key authentication
is \*Lrpc_\%c_\%protect_\%level_\%pkt_\%value\*O.
T}
_
\*Lrpc_c_protect_level_none\*O@T{
Performs no authentication:
tickets are not exchanged, session keys are not estab\%lished, client
PACs or names are not certified,
and transmissions are in the clear.
Note that although uncertified PACs should not be trusted,
they may be useful for
debugging, tracing, and measure\%ment purposes.
T}
_
\*Lrpc_c_protect_level_connect\*O@T{
Authenticates only when the client estab\%lishes a
relationship with the server.
T}
_
\*Lrpc_c_protect_level_call\*O@T{
Authenticates only at the beginning of each remote procedure
call when the server receives the request.
.PP
This level does not apply to remote procedure calls made over a
connection-based protocol se\%quence (that is,
\*Lncacn_\%ip_\%tcp\*O).  If this level is specified and the binding
handle uses a connection-based pro\%to\%col sequence,
the routine uses
the \*Lrpc_\%c_\%protect_\%level_\%pkt\*O level instead.
T}
_
\*Lrpc_c_protect_level_pkt\*O@T{
Ensures that all data received 
is from the expected client.
T}
.TE
.nL
.ne 8
.TS
center allbox tab(@);
lb | lb
lb | lw(3.1i).
Protection Level@Description
=
\*Lrpc_c_protect_level_pkt_integ\*O@T{
Ensures and verifies that none 
of the data transferred between
client and server has been modified.
This is the highest protection level that is guaranteed to be
present in the RPC runtime.
T}
_
\*Lrpc_c_protect_level_pkt_privacy\*O@T{
Authenticates as spe\%cified 
by all of the previous levels and
also encrypts each RPC argument value.
This is the highest pro\%tection level, but is not guaranteed to be
present in the RPC runtime.
T}
.TE
.in
.ps 12
.vs 14
.PP
.VL
.LI "\*Lauthn_svc\*O"
Specifies the authentication service to use.
The exact level of protection provided by the
authentication service is specified by \*Lprotect_level\*O.
The supported
authentication services are as follows:
.LE
.PP
.ps 11
.vs 12
.in -2.0i
.TS
center allbox tab(@);
lb | lb
lb | lw(3.1i).
Authentication Service@Description
=
\*Lrpc_c_authn_none\*O@T{
No authentication:  no tickets
are exchanged, no session keys established, client PACs or names
are not transmitted, and trans\%missions are in the clear.
Specify \*Lrpc_\%c_\%authn_\%none\*O to turn authentication off for
remote procedure calls made using this binding.
T}
_
\*Lrpc_c_authn_dce_secret\*O@T{
DCE shared-secret key authentication.
T}
_
\*Lrpc_c_authn_default\*O@T{
Default authentication service.
The current default authentication service is DCE shared-secret key; therefore,
specifying \*Lrpc_\%c_\%authn_\%default\*O is e\%quiv\%alent to speci\%fying
\*Lrpc_\%c_\%authn_\%dce_\%secret\*O.
T}
_
\*Lrpc_c_authn_dce_public\*O@T{
DCE public key 
authentication (re\%served for future use).
T}
.TE
.in
.ps 12
.vs 14
.sp .5
.VL
.LI "\*Lauthz_svc\*O"
Specifies the authorization service implemented by the server for the
interface.  The validity and trustworthiness of
authorization data, like any application data, is dependent on the
authentication service and protection level specified.  The
supported authorization services are as follows:
.LE
.PP
.ps 11
.vs 12
.in -2.0i
.TS
center allbox tab(@);
lb | lb
lb | lw(3.1i).
Authentication Service@Description
=
\*Lrpc_c_authz_none\*O@T{
Server performs no authorization.  
This is valid only if
\*Lauthn_svc\*O is set to \*Lrpc_\%c_\%authn_\%none\*O, specifying that
no authentication is being performed.
T}
_
\*Lrpc_c_authz_name\*O@T{
Server performs auth\%orization based 
on the client principal name.
This value cannot be used if \*Lauthn_svc\*O is
\*Lrpc_\%c_\%authn_\%none\*O.
T}
_
\*Lrpc_c_authz_dce\*O@T{
Server performs auth\%orization using the client's DCE privilege
attribute certificate (PAC) sent to the server with each
remote procedure call made with this binding.  Generally,
access is checked against DCE access control lists
(ACLs).
T}
.TE
.in
.ps 12
.vs 14
.PP
.VL
.LI "\*Lidentity\*O"
A value of type \*Lsec_login_handle_t\*O that represents 
a complete login
context.
.LE
.LE    
.LI "\*Lsec_timeval_sec_t\*O"
A 32-bit integer containing the seconds portion of a UNIX \*Ltimeval_t\*O,
to be used when expressing absolute dates.
.LI "\*Lsec_timeval_t\*O"
A structure containing the full UNIX time.  The structure contains
two 32-bit integers that indicate seconds (\*Lsec\*O) and microseconds
(\*Lusec\*O) since 0:00, January 1, 1970.
.LI "\*Lsec_timeval_period_t\*O"
A 32-bit integer expressing seconds relative to some well-known time.
.LI "\*Lsec_rgy_acct_key_t\*O"
Specifies how many parts (person, group, organization) of an account login
name will be enough to specify a unique abbreviation for that account.
.LI "\*Lsec_rgy_cursor_t\*O"
A structure providing a pointer into a registry database.  This type is
used for iterative operations on the registry information.  For example,
a call to \*Lsec_rgy_pgo_get_members(\|)\*O might return the 10 account names
following the input \*Lsec_rgy_cursor_t\*O position.  Upon return, the cursor
position will have been updated, so the next call to that routine will
return the next 10 names.  The components of this structure are not
used by application programs.
.LI "\*Lsec_rgy_pname_t\*O"
A character string of length \*Lsec_rgy_pname_t_size\*O.
.LI "\*Lsec_rgy_name_t\*O"
A character string of length \*Lsec_rgy_name_t_size\*O.
.LI "\*Lsec_rgy_login_name_t\*O"
A structure representing an account login name.  It contains three strings of
type \*Lsec_rgy_name_t\*O:
.VL
.LI "\*Lpname\*O"
The person name for the account.
.LI "\*Lgname\*O"
The group name for the account.
.LI "\*Loname\*O"
The organization name for the account.
.LE
.LI "\*Lsec_rgy_member_t\*O"
A character string of length \*Lsec_rgy_name_t_size\*O.
.LI "\*Lsec_rgy_foreign_id_t\*O"
The representation of a foreign ID.  This structure contains two
components:
.VL
.LI "\*Lcell\*O"
A string of type \*Luuid_t\*O representing the UUID of the foreign cell.
.LI "\*Lprincipal\*O"
A string of type \*Luuid_t\*O representing the UUID of the
principal.
.LE
.LI "\*Lsec_rgy_sid_t\*O"
A structure identifying an account.  It contains three fields:
.VL
.LI "\*Lperson\*O"
The UUID of the person part of the account.
.LI "\*Lgroup\*O"
The UUID of the group part of the account.
.LI "\*Lorg\*O"
The UUID of the organization part of the account.
.LE
.LI "\*Lsec_rgy_unix_sid_t\*O"
A structure identifying an account with UNIX ID numbers.  It contains
three fields:
.VL
.LI "\*Lperson\*O"
The UNIX ID of the person part of the account.
.LI "\*Lgroup\*O"
The UNIX ID of the group part of the account.
.LI "\*Lorg\*O"
The UNIX ID of the organization part of the account.
.LE
.LI "\*Lsec_rgy_domain_t\*O"
This 32-bit integer specifies which naming domain a character
string refers to: person, group, or organization.
.LI "\*Lsec_rgy_pgo_flags_t\*O"
A 32-bit bitset containing flags pertaining to registry entries.  This
type contains the following three flags:
.VL
.LI "\*Lsec_rgy_pgo_is_an_alias\*O"
If set, indicates the registry entry is an alias of another entry.
.LI "\*Lsec_rgy_pgo_is_required\*O"
If set, the registry item is required and cannot be deleted.  An example
of a required account is the one for the registry server itself.
...\"CK Is the registry server account required to be in the registry?
.LI "\*Lsec_rgy_pgo_projlist_ok\*O"
If the accompanying item is a person entry, this flag indicates the person
may have concurrent group sets.  If the item is a group entry, the flag
means this group can appear in a concurrent group set.  The flag is
undefined for organization items.
.LE
.LI "\*Lsec_rgy_pgo_item_t\*O"
The structure identifying a registry item.  It contains five components:
.VL
.LI "\*Lid\*O"
The UUID of the registry item, in \*Luuid_t\*O form.
.LI "\*Lunix_num\*O"
A 32-bit integer containing the UNIX ID number of the registry item.
.LI "\*Lquota\*O"
A 32-bit integer representing the maximum number of user-defined groups
the account owner can create.
.LI "\*Lflags\*O"
A \*Lsec_rgy_pgo_flags_t\*O bitset containing information about the entry.
.LI "\*Lfullname\*O"
A \*Lsec_rgy_pname_t\*O character string containing a full name for the
registry entry.  For a person entry, this field might contain the real
name of the account owner.  For a group, it might contain a description
of the group.  This is just a data field, and registry queries cannot
search on the \*Lfullname\*O entry.
.LE
.LI "\*Lsec_rgy_acct_admin_flags_t\*O"
A 32-bit bitset containing administration flags used as
part of the administrator's information for any registry account.
The set contains three flags:
.VL
.LI "\*Lsec_rgy_acct_admin_valid\*O"
Specifies that the account is valid for login.
.LI "\*Lsec_rgy_acct_admin_server\*O"
If set, the account's name can be used as a server name in a ticket-granting ticket.
.LI "\*Lsec_rgy_acct_admin_client\*O"
If set, the account's name can be used as a client name in a ticket-granting ticket.
.LE
Note that you can prevent the principal from being authenticated,
by turning off both the \*Lsec_rgy_acct_admin_server\*O and
the \*Lsec_rgy_acct_admin_client flags\*O.
.LI "\*Lsec_rgy_acct_auth_flags_t\*O"
A 32-bit bitset containing account authorization flags used to implement
authentication policy as defined by the Kerberos Version 5 protocol.  The
set contains the following flags:
.zA "def,13530,R1.2.2, add sec_rgy_acct_auth_user_to_user"
.VL
.LI "\*Lsec_rgy_acct_auth_user_to_user\*O"
Forces the use of user-to-user server authentication on a server principal.
.LI "\*Lsec_rgy_acct_auth_post_dated\*O"
Allows issuance of post-dated certificates.
.LI "\*Lsec_rgy_acct_auth_forwardable\*O"
Allows issuance of forwardable certificates.
.LI "\*Lsec_rgy_acct_auth_tgt\*O"
Allows issuance of certificates based on ticket-granting
ticket (TGT) authentication.  If this flag is
not set, a client requesting a service may have to supply a password
directly to the server.
.LI "\*Lsec_rgy_acct_auth_renewable\*O"
Allows issuance of renewable certificates.
.LI "\*Lsec_rgy_acct_auth_proxiable\*O"
Allows issuance of proxiable certificates.
.LI "\*Lsec_rgy_acct_auth_dup_session_key\*O"
Allows issuance of duplicate session keys.
.LE
.zZ "def,13530,R1.2.2, add sec_rgy_acct_auth_user_to_user"
.nL
.ne 6
.LI "\*Lsec_rgy_acct_admin_t\*O"
The portion of a registry account item containing components relevant 
to administrators.  This structure consists of the fields listed below.  
Note that only \*Lexpiration_date\*O, \*Lgood_since_date\*O, 
\*Lflags\*O, and
\*Lauthentication_flags\*O can be modified by an administrator;   
the remaining fields are set by the security server.
.VL
.LI "\*Lcreator\*O"
This field, in \*Lforeign_id_t format\*O, identifies the administrator who created the
registry account.
.LI "\*Lcreation_date\*O"
Specifies the creation date of the account, in \*Lsec_timeval_sec_t\*O format.
.LI "\*Llast_changer\*O"
Identifies the last person to change any of the account information, in
\*Lforeign_id_t\*O format.
.LI "\*Lchange_date\*O"
Specifies the date of the last modification of the account information, in
\*Lsec_timeval_sec_t\*O format.
.LI "\*Lexpiration_date\*O"
The date after which the account will no longer be valid.  In
\*Lsec_timeval_sec_t\*O format.
.LI "\*Lgood_since_date\*O"
The Kerberos Version 5 TGT revocation date.  TGTs issued before this date
will not be honored.  In \*Lsec_timeval_sec_t\*O format.
.LI "\*Lflags\*O"
Administrative flags in \*Lsec_rgy_acct_admin_flags_t\*O format.
.LI "\*Lauthentication_flags\*O"
Authentication flags in \*Lsec_rgy_acct_auth_flags_t\*O format.
.LE
.LI "\*Lsec_rgy_acct_user_flags_t\*O"
A 32-bit bitset containing flags controlling user-modifiable information.
There is only one flag currently implemented.
If \*Lsec_rgy_acct_user_passwd_valid\*O is set, it
indicates the user password is valid.  If it is
not set, this flag prompts the user to change the password on the
next login attempt.
.nL
.ne 7
.LI "\*Lsec_rgy_acct_user_t\*O"
A structure containing registry account information.  
The structure consists of the fields listed below.
Note that only the \*Lgecos\*O, \*Lhomedir\*O, 
\*Lshell\*O, and \*Lflags\*O fields can be modified 
by the account owner or other authorized user; the remaining fields 
are set by the security server. 
.VL
.LI "\*Lgecos\*O"
This is a character string (in \*Lsec_rgy_pname_t\*O format) containing
information about the account user.  It generally consists of everything
after the full name in the UNIX \*Lgecos\*O format.
.LI "\*Lhomedir\*O"
The login directory for the account user, in \*Lsec_rgy_pname_t\*O format.
.LI "\*Lshell\*O"
The default shell for the account user, in \*Lsec_rgy_pname_t\*O format.
.LI "\*Lpasswd_version_number\*O"
An unsigned 32-bit integer, indicating the password version number.  
This value is used as output only.
.LI "\*Lpasswd\*O"
The UNIX encrypted account password, in \*Lsec_rgy_unix_passwd_buf_t\*O format.  
This value is used as output only.
.LI "\*Lpasswd_dtm\*O"
The date the password was established, in \*Lsec_timeval_sec_t\*O format.
.LI "\*Lflags\*O"
Account user flags, in \*Lsec_rgy_acct_user_flags_t\*O format.
.LE
.LI "\*Lsec_rgy_plcy_pwd_flags_t\*O"
A 32-bit bitset containing two flags about password policy:
.VL
.LI "\*Lsec_rgy_plcy_pwd_no_spaces\*O"
If set, will not allow spaces in a password.
.LI "\*Lsec_rgy_plcy_pwd_non_alpha\*O"
If set, requires at least one nonalphanumeric character in the password.
.LE
.nL
.ne 6
.LI "\*Lsec_rgy_plcy_t\*O"
A structure defining aspects of registry account policy.  It contains five
components:
.VL
.LI "\*Lpasswd_min_len\*O"
A 32-bit integer describing the minimum number of characters in the
account password.
.LI "\*Lpasswd_lifetime\*O"
The number of seconds after a password's creation until it expires,
in \*Lsec_timeval_period_t\*O format.
.LI "\*Lpasswd_exp_date\*O"
The expiration date of the account password, in \*Lsec_timeval_sec_t\*O
format.
...\"CK the passwd_exp_date of the registry policy is unclear.
.LI "\*Lacct_lifespan\*O"
The number of seconds after the creation of an account before it
expires, in \*Lsec_timeval_period_t\*O format.
.LI "\*Lpasswd_flags\*O"
Account password policy flags, in \*Lsec_\%rgy_\%plcy_\%pwd_\%flags_\%t\*O format.
.LE
.LI "\*Lsec_rgy_plcy_auth_t\*O"
This type describes authentication policy.  It is a structure containing
two time periods, in \*Lsec_timeval_period_t\*O format.  One,
\*Lmax_ticket_lifetime\*O, specifies the maximum length of the period
during which a ticket-granting ticket (TGT) will be valid.  The other,
\*Lmax_renewable_lifetime\*O, specifies the maximum length of time for
which such a ticket may be renewed.  This authentication policy applies
both to the registry as a whole as well as individual accounts.  The
effective policy for a given account is defined to be the more restrictive
of the site and principal authentication policy.
.LI "\*Lsec_rgy_properties_t\*O"
A structure describing some registry properties.  It contains
the following:
.VL
.LI "\*Lread_version\*O"
A 32-bit integer describing the earliest version of the \*Lsecd\*O software
that can read this registry.
.LI "\*Lwrite_version\*O"
A 32-bit integer describing the version of the \*Lsecd\*O software
that wrote this registry.
.nL
.ne 6
.LI "\*Lminimum_ticket_lifetime\*O"
The minimum lifetime of an authentication certificate, in
\*Lsec_timeval_period_t\*O format.
.LI "\*Ldefault_certificate_lifetime\*O"
The normal lifetime  of an an authentication certificate (ticket-granting
ticket in Kerberos parlance), in \*Lsec_timeval_period_t\*O format.
Processes may request authentication certificates with longer lifetimes up
to, but not in excess of, the maximum allowable lifetime as determined by
the effective policy for the account.
.LI "\*Llow_unix_id_person\*O"
The lowest UNIX number permissible for a person item in the registry.
.LI "\*Llow_unix_id_group\*O"
The lowest UNIX number permissible for a group item in the registry.
.LI "\*Llow_unix_id_org\*O"
The lowest UNIX number permissible for an organization item in the
registry.
.LI "\*Lmax_unix_id\*O"
The largest UNIX number permissible for any registry entry.
.LI "\*Lflags\*O"
Property flags, in \*Lsec_rgy_properties_flags_t\*O format.
.LI "\*Lrealm\*O"
The name of the cell, in \*Lsec_rgy_name_t\*O form, for which this registry
is the authentication service.
.LI "\*Lrealm_uuid\*O"
The UUID of the same cell.
.LE
.LI "\*Lsec_rgy_properties_flags_t\*O"
A 32-bit bitset, containing flags concerning registry properties:
.VL
.LI "\*Lsec_rgy_prop_readonly\*O"
If set (TRUE), indicates that this registry is a query site.
.LI "\*Lsec_rgy_prop_auth_cert_unbound\*O"
If set (TRUE), the registry server will accept requests from any site.
.LI "\*Lsec_rgy_prop_shadow_passwd\*O"
If the shadow password flag is set (TRUE), the registry server will not
include the account password when responding to a request for the user data
from a specified account.  This helps minimize the risk of an account
password being intercepted while traveling over the network.
.LI "\*Lsec_rgy_prop_embedded_unix_id\*O"
Indicates that all UUIDs in this registry contain a UNIX number embedded.
This implies that the UNIX numbers of objects in the registry cannot be
changed, since UUIDs are immutable.
.LE
.LI "\*Lsec_rgy_override_t\*O"
A 32-bit integer used as a flag for registry override mode. 
Possible values are the constants \*Lsec_\%rgy_\%no_\%override\*O and
\*Lsec_rgy_override\*O.  When this mode is enabled, override data supplied by
the node administrator will replace some of the data gotten from the
registry for a given person/account under certain conditions.  These
conditions are as follows:
.AL
.LI
The registry permits the requested overrides to be set for
this machine.
.LI
The override data is intended for person/account at hand.
.LE
.PP
When the mode is override off, data from the registry is
returned to the end user or the application remains untouched.
.LI "\*Lsec_rgy_mode_resolve_t\*O"
A 32-bit integer used as a flag for resolve mode.  Possible
values are the constants \*Lsec_rgy_no_resolve_pname\*O and
\*Lsec_rgy_resolve_pname\*O.  When the mode is enabled, pathnames
containing leading \*L//\*O (slashes) will be translated into a form
understandable by the local machine's NFS.
.LI "\*Lsec_rgy_unix_passwd_buf_t\*O"
A character array of UNIX password strings.
.LE
.nL
.ne 1.5i
.SH "Constants"
...\" For draft look output, this title should be changed to all uppercase
.PP
The following constants are used in \*Lsec_rgy_\*O calls:
.VL
.LI "\*Lsec_rgy_default_handle\*O"
The value of an unbound registry server handle.
.LI "\*Lsec_rgy_acct_key_t\*O" 
The following 32-bit integer constants are used with the
\*Lsec_rgy_acct_key_t\*O data type:
.VL
.LI "\*Lsec_rgy_acct_key_none\*O"
Invalid key.
.LI "\*Lsec_rgy_acct_key_person\*O"
The person name alone is enough.
.LI "\*Lsec_rgy_acct_key_group\*O"
The person and group names are both necessary for the account abbreviation.
.LI "\*Lsec_rgy_acct_key_org\*O"
The person, group, and organization names are all necessary.
.LI "\*Lsec_rgy_acct_key_last\*O"
Key values must be less than this constant.
.LE
.LI "\*Lsec_rgy_pname_t_size\*O"
The maximum number of characters in a \*Lsec_rgy_pname_t\*O.
.LI "\*Lsec_rgy_name_t_size\*O"
The maximum number of characters in a \*Lsec_rgy_name_t\*O.
.LI "\*Lsec_rgy_domain_t\*O"
The following 32-bit integer constants are the possible values of
the \*Lsec_rgy_domain_t\*O data type:
.VL
.LI "\*Lsec_rgy_domain_person\*O"
The name in question refers to a person.
.LI "\*Lsec_rgy_domain_group\*O"
The name in question refers to a group.
.LI "\*Lsec_rgy_domain_org\*O"
The name in question refers to an organization.
.LE
.LI "\*Lsec_rgy_pgo_flags_t\*O"
A 32-bit constant equal to a variable of type \*Lsec_rgy_pgo_flags_t\*O with
no flags set.
.LI "\*Lsec_rgy_quota_unlimited\*O"
A 32-bit integer.  Set the \*Lquota\*O field of the \*Lsec_rgy_pgo_item_t\*O
type to this constant to override the registry quota limitation.
.LI "\*Lsec_rgy_acct_admin_flags_t\*O"
A 32-bit integer.  This is the value of the \*Lsec_\%rgy_\%acct_\%admin_\%flags_\%t\*O
bitset when none of its flags are set.
.LI "\*Lsec_rgy_acct_auth_flags_none\*O"
A 32-bit integer.  This is the value of the \*Lsec_\%rgy_\%acct_\%auth_\%flags_\%t\*O
bitset when none of its flags are set.
.LI "\*Lsec_rgy_acct_user_flags_t\*O"
A 16-bit integer.  This is the value of the \*Lsec_\%rgy_\%acct_\%user_\%flags_\%t\*O
bitset when none of its flags are set.
.LI "\*Lsec_rgy_plcy_pwd_flags_t\*O"
A 16-bit integer.  This is the value of the \*Lsec_\%rgy_\%policy_\%pwd_\%flags_\%t\*O
bitset when none of its flags are set.
.LI "\*Lsec_rgy_properties_flags_t\*O"
A 16-bit integer.  This is the value of the \*Lsec_\%rgy_\%properties_\%flags_\%t\*O
bitset when none of its flags are set.
.LI "\*Lsec_rgy_override\*O"
A 32-bit integer, which turns registry override mode on.  When this mode is
enabled, override data supplied by the node administrator will replace some
of the data gotten from the registry for a given person/account under
certain conditions.
.LI "\*Lsec_rgy_no_override\*O"
A 32-bit integer, which turns off registry override mode.
.LI "\*Lsec_rgy_resolve_pname\*O"
A 32-bit integer, which turns on registry resolve mode.  When the mode is
enabled, pathnames containing leading \*L//\*O
(slashes) will be translated
into a form understandable by the local machine's NFS.
.LI "\*Lsec_rgy_no_resolve_pname\*O"
A 32-bit integer, which turns off registry resolve mode.
.LE
.nL
.ne 1.5i
.SH "Files"
.VL
.LI "\*L/usr/include/dce/rgybase.idl\*O"
The \*Lidl\*O file from which \*Lrgybase.h\*O was derived.
.LE
.SH "Extended Registry Attribute Data Types"
.SH "Synopsis"
.sS
\*L#include <dce/sec_attr_base.h>\*O
.sE
.SH "Data Types"
The following data types are used in \*Lsec_rgy_attr\*O calls:
.VL
.LI "\*Lsec_attr_twr_ref_t\*O"
A pointer to a tower.
This data 
type is used with the \*Lsec_attr_twr_set_t\*O data type 
to allow a client to pass an unallocated array of 
towers, which the server must allocate.  
Both data types are used in conjunction with the 
\*Lsec_attr_bind_type_t\*O data type.
.LI "\*Lsec_attr_twr_set_t\*O"
A structure that defines an array of towers.  This data 
type is used with the \*Lsec_attr_twr_ref_t\*O data type 
to allow a client to pass an unallocated array of 
towers, which the server must allocate.
Both data types are used in conjunction with the 
\*Lsec_attr_bind_type_t\*O data type. 
The \*Lsec_attr_twr_set_t\*O structure consists of the following elements:
.VL
.LI "\*Lcount\*O"
An unsigned 32-bit integer specifying the number of towers in the array.
.LI "\*Ltowers\*O[\|]"
An array of pointers (of type \*Lsec_attr_twr_ref_t\*O) to towers.
.LE
.LI "\*Lsec_attr_bind_type_t\*O"
A 32-bit integer that specifies the type of binding 
used by an attribute interface.  The data type (which is 
used in conjunction with the \*Lsec_attr_binding_t\*O data 
type) uses the following constants:
.VL
.LI "\*Lsec_attr_bind_type_string\*O"
An RPC string binding.
.LI "\*Lsec_attr_bind_type_twrs\*O"
A DCE protocol tower representation of a bindings.
.nL
.ne 6
.LI "\*Lsec_attr_bind_type_svrname\*O"
A name in \*Lrpc_c_ns_syntax\*O format that identifies 
a CDS entry containing the server's binding information. 
This constant has the following structure:
.VL
.LI "\*Lname_syntax\*O"
.nL
Must be \*Lrpc_c_ns_syntax_dce\*O to specify 
that DCE naming rules are used to specify \*Lname\*O.
.LI "\*Lname\*O
A pointer to a name of a CDS entry in \*Lrpc_c_ns_syntax_dce\*O 
syntax.
.LE
.LE
.LI "\*Lsec_attr_binding_t\*O"
A discriminated union that supplies information to generate a binding handle for 
a attribute trigger.  This data 
type, which is used in conjunction with the \*Lsec_attr_bind_info_t\*O 
data type, is composed of the following elements:
.VL
.LI "\*Lbind_type\*O"
A value of type \*Lsec_attr_bind_type_t\*O that defines the 
type of binding used by an attribute interface.  
The contents 
of \*Ltagged union\*O (see table) depend on the value of \*Lsec_attr_bind_type_t\*O.
.LI "\*Ltagged_union\*O"
A tagged union specifying the binding handle.  The contents 
of the tagged union depend on the value of \*Lbind_type\*O 
as follows:
.LE
...\" .LE
.P
.ad l
.in -.5i
.TS 
center allbox tab(@);
lb | lb
l | lw(2.8i).
If bind_type is...@Then tagged_union is...
=
\*Lsec_attr_bind_type_string\*O@T{
A pointer to an unsigned 32-bit character string 
specifying an attribute's RPC string binding.
T}
_
\*Lsec_attr_bind type_twrs\*O@T{
An attribute's tower binding representation of type 
\*Lsec_attr_twr_set_t\*O.
T}
_
\*Lsec_attr_bind_svrname\*O@T{
A pointer to a name of type \*Lsec_attr_bind_type_t\*O 
that specifies a Cell Directory Service entry containing 
a attribute trigger's binding information.
T}
.TE
.in
.ad b
...\" .VL
.LI "\*Lsec_attr_binding_p_t\*O"
A pointer to a \*Lsec_attr_binding_t\*O union.
.nL
.ne 10
.LI "\*Lsec_attr_bind_auth_info_type_t\*O"
An enumeration that defines whether or not the 
binding is authenticated.  This data type is used 
in conjunction with the \*Lsec_attr_bind_auth_info_t\*O 
data type to set up the authorization 
method and parameters for an RPC binding.  
The \*Lsec_\%attr_\%bind_\%auth_\%info_\%type_t\*O type 
consists of the following elements:
.VL
.LI "\*Lsec_attr_bind_auth_none\*O"
The binding is not authenticated.
.LI "\*Lsec_attr_bind_auth_dce\*O"
The binding uses DCE shared-secret key authentication.
.LE
.LI "\*Lsec_attr_bind_auth_info_t\*O"
A discriminated union that defines authorization and authentication parameters 
for a binding.  This data type is used 
in conjunction with the \*Lsec_attr_bind_auth_info_type_t\*O 
data type to set up the authorization 
method and parameters for an RPC binding. 
The \*Lsec_attr_bind_auth_info_t\*O data type consists of the 
following elements:
.VL
.LI "\*Linfo_type\*O"
A \*Lsec_attr_bind_auth_info_type_t\*O data type that specifies whether or 
not the binding is authenticated.  
The contents 
of \*Ltagged union\*O (below) depend on the value of 
\*Lsec_attr_bind_auth_info_type_t\*O.  
.LI "\*Ltagged_union\*O" 
A tagged union specifying the method of authorization and the 
authorization parameters.    
For unauthenticated bindings (\*Lsec_\%attr_\%bind_\%auth_\%info_\%type_\%t\*O = 
\*Lsec_\%attr_\%bind_\%auth_\%none\*O), no parameters are supplied.  
For authenticated bindings 
(\*Lsec_\%attr_\%bind_\%auth_\%info_\%type_\%t\*O = 
\*Lsec_\%attr_\%bind_\%auth_\%dce\*O), the following union is supplied:
.VL
.LI "\*Lsvr_princ_name\*O"
A pointer to a character string that specifies the principal name of the server referenced by
the binding handle.  
.nL
.ne 8
.LI "\*Lprotect_level\*O"
An unsigned 32 bit integer indicating the protection level for RPC 
calls made using the server binding handle.  The protection level
determines the degree to which authenticated communications
between the client and the server are protected
by the authentication service specified by \*Lauthn_svc\*O.
.PP
If the RPC runtime or the RPC protocol in the bound protocol sequence
does not support a specified level, the level is
automatically upgraded to the next higher supported level.
The possible protection levels are as follows:
.LE
.PP
.ne 5i
.ps 11
.vs 12
.in -2.0i
.TS
center allbox tab(@);
lb | lb
lb | lw(3.1i).
Protection Level@Description
=
\*Lrpc_c_protect_level_default\*O@T{
Uses the default protection 
level for the specified
authentication service.
The default protection level for 
DCE shared-secret key authentication
is \*Lrpc_\%c_\%protect_\%level_\%pkt_\%value\*O
T}
_
\*Lrpc_c_protect_level_none\*O@T{
Performs no auth\%entication:
tickets are not exchanged, session keys are not est\%ablished, client
PACs or names are not certified,
and trans\%missions are in the clear.
Note that although uncertified PACs should not be trusted,
they may be useful for
debugging, tracing, and measure\%ment purposes.
T}
_
\*Lrpc_c_protect_level_connect\*O@T{
Authenticates only when the client est\%ablishes a
relationship with the server.
T}
_
\*Lrpc_c_protect_level_call\*O@T{
Authenticates only at the beginning of each remote procedure
call when the server receives the request.
.PP
This level does not apply to remote procedure calls made over a
connection-based protocol se\%quence (that is,
\*Lncacn_\%ip_\%tcp\*O).  If this level is specified and the binding
handle uses a connection-based protocol sequence,
the routine uses
the \*Lrpc_\%c_\%protect_\%level_\%pkt\*O level instead.
T}
_
\*Lrpc_c_protect_level_pkt\*O@T{
Ensures that all data received 
is from the expected client.
T}
.TE
.nL
.ne 8
.TS
center allbox tab(@);
lb | lb
lb | lw(3.1i).
Protection Level@Description
=
\*Lrpc_c_protect_level_pkt_integ\*O@T{
Ensures and verifies that none 
of the data transferred between
client and server has been modified.
This is the highest protection level that is guaranteed to be
present in the RPC runtime.
T}
_
\*Lrpc_c_protect_level_pkt_privacy\*O@T{
Authenticates as spe\%cified by all of the previous levels and
also encrypts each RPC argument value.
This is the highest pro\%tection level, but is not guaranteed to be
present in the RPC runtime.
T}
.TE
.in
.ps 12
.vs 14
.PP
.VL
.LI "\*Lauthn_svc\*O"
Specifies the authentication service to use.
The exact level of protection provided by the
authentication service is specified by \*Lprotect_level\*O.
The supported
authentication services are as follows:
.LE
.PP
.ne 5i
.ps 11
.vs 12
.in -2.0i
.TS
center allbox tab(@);
lb | lb
lb | lw(3.1i).
Authentication Service@Description
=
\*Lrpc_c_authn_none\*O@T{
No authentication:  no tickets
are exchanged, no session keys established, client PACs or names
are not transmitted, and trans\%missions are in the clear.
Specify \*Lrpc_\%c_\%authn_\%none\*O to turn authentication off for
remote procedure calls made using this binding.
T}
_
\*Lrpc_c_authn_dce_secret\*O@T{
DCE shared-secret key authentication.
T}
_
\*Lrpc_c_authn_default\*O@T{
Default authentication service.
The current default authentication service is DCE shared-secret key; therefore,
specifying \*Lrpc_\%c_\%authn_\%default\*O is e\%quivalent to specifying
\*Lrpc_\%c_\%authn_\%dce_\%secret\*O.
T}
_
\*Lrpc_c_authn_dce_public\*O@T{
DCE public key 
authentication (re\%served for future use).
T}
.TE
.in
.ps 12
.vs 14
.PP
.VL
.LI "\*Lauthz_svc\*O"
Specifies the authorization service implemented by the server for the
interface.  The validity and trustworthiness of
authorization data, like any application data, is dependent on the
authentication service and protection level specified.  The
supported authorization services are as follows:
.LE
.LE
.LE
.PP
.ne 5i
.ps 11
.vs 12
.TS
center allbox tab(@);
lb | lb
lb | lw(3.1i).
Authentication Service@Description
=
\*Lrpc_c_authz_none\*O@T{
Server performs no authorization.  
This is valid only if
\*Lauthn_svc\*O is set to \*Lrpc_\%c_\%authn_\%none\*O, specifying that
no authentication is being performed.
T}
_
\*Lrpc_c_authz_name\*O@T{
Server performs auth\%orization based 
on the client principal name.
This value cannot be used if \*Lauthn_svc\*O is
\*Lrpc_\%c_\%authn_\%none\*O.
T}
_
\*Lrpc_c_authz_dce\*O@T{
Server performs auth\%orization using the client's DCE privilege
attribute certificate (PAC) sent to the server with each
remote procedure call made with this binding.  Generally,
access is checked against DCE ACLs.
T}
.TE
.in
.ps 12
.vs 14
.PP
.VL
.LI "\*Lsec_attr_bind_info_t\*O"
A structure that specifies attribute trigger binding information.  
This data type, which is used in conjunction with the 
\*Lsec_attr_schema_entry_t\*O data type, contains of the following elements:
.VL
.LI "\*Lauth_info\*O"
The binding authorization information of type 
\*Lsec_attr_bind_auth_info_t\*O.
.LI "\*Lnum_bindings\*O"
An unsigned 32-bit integer specifying the number of binding handles in \*Lbindings\*O.
.LI "\*Lbindings\*O 
An array of \*Lsec_attr_binding_t\*O data types that specify binding handles.
.LE
.LI "\*Lsec_attr_bind_info_p_t\*O"
A pointer to a \*Lsec_attr_bind_info_t\*O union.
.LI "\*Lsec_attr_encoding_t\*O
An enumerator that contains attribute encoding tags used to  
define the legal encodings for attribute values. 
The data type, which is used in conjunction with the \*Lsec_attr_value_t\*O and 
\*Lsec_\%attr_\%schema_\%entry_\%t\*O data types, consists of the 
following elements:
.VL
.LI "\*Lsec_attr_enc_any\*O"
The attribute value can be of any legal encoding type.  
This encoding tag is legal only in a schema entry.  
An attribute entry must contain a concrete encoding type.
.nL
.ne 6
.LI "\*Lsec_attr_enc_void\*O"
The attribute has no value.  It is simple a marker that is 
either present or absent.
.LI "\*Lsec_attr_enc_printstring\*O"
The attribute value is a printable IDL string in DCE portable character set.
.LI "\*Lsec_attr_enc_printstring_array\*O"
The attribute value is an array of printstrings.
.LI "\*Lsec_attr_enc_integer\*O"
The attribute value is a signed 32-bit integer.
.LI "\*Lsec_attr_enc_bytes\*O"
The attribute value is a string of bytes.  The string is assumed to be 
a pickle or some other self describing type.  (See also the \*Lsec_attr_enc_bytes_t\*O 
data type.)
.LI "\*Lsec_attr_enc_confidential_bytes\*O"
The attribute value is a string of bytes 
that have been encrypted in 
the key of the principal object to which the attribute is attached.  
The string is assumed to be a pickle or some other 
self describing type.  This encoding type is useful only when attached 
to a principal object, where it is decrypted and encrypted each time 
the principal's password changes.  (See also the \*Lsec_attr_enc_bytes_t\*O 
data type.)
.LI "\*Lsec_attr_enc_i18n_data\*O"
The attribute value is an internationalized string of bytes with a tag identifying 
the OSF registered codeset used to encode the data.  (See also the 
\*Lsec_attr_i18n_data_t\*O data type.) 
.LI "\*Lsec_attr_enc_uuid\*O"
The attribute is a value of type \*Luuid_t\*O, a DCE UUID.
.LI "\*Lsec_attr_enc_attr_set\*O
The attribute value is an attribute set, a vector of attribute UUIDs used to 
associate multiple related 
attribute instances which are members of the set.  (See also the 
\*Lsec_attr_enc_attr_set_t\*O data type.)
.nL
.ne 6
.LI "\*Lsec_attr_enc_binding\*O"
The attribute value is a \*Lsec_attr_bind_info_t\*O data type that specifies 
DCE server binding information.
.LI "\*Lsec_attr_enc_trig_binding\*O"
This encoding type is returned by \*Lrs_attr_lookup\*O call.  
It informs the client agent of the trigger binding information of an attribute with 
a query trigger.
.LE
.PP
Unless \*Lsec_attr_enc_void\*O or \*Lsec_attr_enc_any\*O is specified,  
the attribute values must conform to the attribute's encoding type.   
.LI "\*Lsec_attr_enc_bytes_t\*O"
A structure that defines the  
length of attribute encoding values for 
attributes encoded as 
\*Lsec_attr_enc_bytes\*O and \*Lsec_\%attr_\%enc_\%confidential_\%bytes\*O.  
The structure, which is used in conjunction with the \*Lsec_attr_value_t\*O data type,
consists of
.VL
.LI \*Llength\*O 
An unsigned 32-bit integer that defines the data length.
.LI "\*Ldata\*O[\|]"
An array of bytes specifying the length of attribute encoding data.
.LE
.LI "\*Lsec_attr_i18n_data_t\*O"
A structure that defines the codeset used for 
attributes encoded as 
\*Lsec_attr_enc_il8n_data\*O and the 
length of the attribute encoding values.
The structure, which is used in conjunction with the \*Lsec_attr_value_t\*O data type, 
consists of
.VL
.LI \*Lcodeset\*O
An unsigned 32-bit identifier of a codeset registered with the Open Software Foundation. 
.LI \*Llength\*O 
An unsigned 32-bit integer that defines the data length.
.LI "\*Ldata\*O[\|]"
An array of bytes specifying the length of attribute encoding data.
.LE
.LI "\*Lsec_attr_enc_attr_set_t\*O"
A structure that that supplies the UUIDs of each member of an 
attribute set.  The structure, which is used in conjunction with 
the \*Lsec_attr_value_t\*O data type, consists of
.VL
.LI "\*Lnum_members\*O" 
An unsigned 32-bit integer specifying the total number of 
attribute's in the set.
.LI "\*Lmembers\*O[\|]" 
An array containing values of type \*Luuid_t\*O, 
the UUID of each member in the set.
.LE
.LI "\*Lsec_attr_enc_printstring_t\*O"
A structure that contains a printstring.
.LI "\*Lsec_attr_enc_printstring_p_t\*O"
A pointer to a \*Lsec_attr_enc_printstring_t\*O structure.
.LI "\*Lsec_attr_enc_str_array_t\*O"
A structure that defines a printstring array.  It consists of
.VL
.LI "\*Lnum_strings\*O"
An unsigned 32-bit integer specifying the number of strings in the array.
.LI "\*Lstrings\*O[\|]"
An array of pointers (of type \*Lsec_\%attr_\%enc_\%print_\%string_\%p_t\*O) to 
printstrings.
.LE
.LI "\*Lsec_attr_value_t\*O"
A discriminated union that defines attribute values.  The 
union, which is used in conjunction with the \*Lsec_attr_t\*O data type, 
consists of the following elements:
.VL
.LI "\*Lattr_encoding\*O"
A \*Lsec_attr_encoding_t\*O data type that defines 
attribute encoding.  
The contents 
of \*Ltagged union\*O depend on the value of \*Lsec_\%attr_\%encoding_\%t\*O.
.LI "\*Ltagged_union\*O"
A tagged union whose contents depend on \*Lattr_encoding\*O
as follows:
.LE
.LE
.PP
.ne 4i
.TS 
center allbox tab(@);
lb | lb
l | l.
If attr_encoding is...@Then tagged_union is...
=
\*Lsec_attr_enc_void@NULL
\*Lsec_attr_enc_printstring\*O@T{
A pointer to \*Lprintstring\*O
T}
_
\*Lsec_attr_enc_printstring_array\*O@T{
A pointer to an array of 
\*Lprintstring\*Os
T}
_
\*Lsec_attr_enc_integer\*O@T{
\*Lsigned_int\*O, a 32-bit signed integer
T}
_
\*Lsec_attr_enc_bytes\*O@T{
\*Lbytes\*O, a pointer to a structure of 
type \*Lsec_attr_enc_bytes_t\*O
T}
_
\*Lsec_attr_enc_confidential_bytes\*O@T{
\*Lbytes\*O, a pointer to a structure of 
type \*Lsec_attr_enc_bytes_t\*O
T}
_
\*Lsec_attr_enc_i18n_data\*O@T{
\*Lidata\*O, a pointer to a structure of 
type \*Lsec_attr_i18n_data_t\*O
T}
_
\*Lsec_attr_end_uuid\*O@T{
\*Luuid\*O, a value of type \*Luuid_t\*O
T}
_
\*Lsec_attr_enc_attr_set\*O@T{
\*Lattr_set\*O, a pointer to a structure of 
type \*Lsec_attr_enc_attr_set_t\*O
T}
_
\*Lsec_attr_enc_binding\*O@T{
\*Lbinding\*O, a pointer to a structure of 
type \*Lsec_attr_binding_info_t\*O
T}
.TE
.VL
.LI "\*Lsec_attr_t\*O"
.nL
A structure that defines an attribute.  The structure consists of
.VL
.LI "\*Lattr_id\*O"
A value of type \*Luuid_t\*O, the UUID of the attribute.
.LI "\*Lattr_value\*O"
A value of type \*Lsec_attr_value_t\*O.
.LE
.LI "\*Lsec_attr_acl_mgr_info_t\*O"
A structure that contains the access control information defined in 
a schema entry for an attribute.  The structure, which is used in conjunction 
with the \*Lsec_attr_schema_entry_t\*O data type, consists of the 
following elements: 
.VL
.LI "\*Lacl_mgr_type\*O"
The value of type \*Luuid_t\*O that specifies the 
UUID of the ACL manager type that supports the object type to which the attribute can be 
attached.  This field provides a well-defined context for evaluating
the permission bits needed to operate on the attribute.  
The following table lists the ACL manager types for registry objects.
.LE
...\" .LE
.nL
.ne 2.5i
.in -1i
.TS
center allbox tab(@);
lB | lB | lB 
lB | lB | lB 
l | l | l.
Registry Object@ACL manager Type@Valid
Type@@Permissions
=
principal@06ab9320-0191-11ca-a9e8-08001e039d7d@rcDnfmaug
_
group@06ab9640-0191-11ca-a9e8-08001e039d7d@rctDnfmM
_
organization@06ab9960-0191-11ca-a9e8-08001e039d7d@rctDnfmM
_
directory@06ab9c80-0191-11ca-a9e8-08001e039d7d@rcidDn
_
policy@06ab8f10-0191-11ca-a9e8-08001e039d7d@rcma
_
replist@2ac24970-60c3-11cb-b261-08001e039d7d@cidmAI
.TE
.in
...\" .VL
.PP
.VL
.LI "\*Lquery_permset\*O"
Data of type \*Lsec_acl_permset_t\*O that defines the permission bits 
needed to access the attribute's value.
.LI "\*Lupdate_permset\*O"
Data of type \*Lsec_acl_permset_t\*O that defines 
the permission bits needed to update the attribute's value.
.LI "\*Ltest_permset\*O"
Data of type \*Lsec_acl_permset_t\*O that defines 
the permission bits needed to test the attribute's value.
.LI "\*Ldelete_permset\*O"
Data of type \*Lsec_acl_permset_t\*O that defines 
the permission bits needed to delete an attribute instance.
.LE
.LI "\*Lsec_attr_acl_mgr_info_p_t\*O"
A pointer to a \*Lsec_attr_acl_mgr_info_t\*O structure.
.LI "\*Lsec_attr_acl_mgr_info_set_t\*O"
A structure that defines an attribute's ACL manager set.  
The structure consists of the following elements:
.VL
.LI "\*Lnum_acl_mgrs\*O"
An unsigned 32-bit integer that specifies the number of ACL managers in the 
ACL manager set.
.LI "\*Lmgr_info\*O[\|]"
An array of pointers of type \*Lsec_attr_mgr_info_p_t\*O that define 
the ACL manager types in the ACL manager set and the permission sets 
associated with the ACL manager type.
.LE
.nL
.ne 12
.LI "\*Lsec_attr_intercell_action_t\*O"
An enumerator that specifies the action that should be taken by 
the privilege service when 
it reads acceptable attributes from a foreign cell.  A foreign attribute is 
acceptable only if there is either a schema entry for the foreign 
cell or if \*Lsec_\%attr_\%intercell_\%act_\%accept\*O is set to \*Ltrue\*O.
.PP
This enumerator, which is used in conjunction with the 
\*Lsec_attr_schema_entry_t\*O data type, is composed 
of the following elements:
.VL
.LI "\*Lsec_attr_intercell_act_accept\*O"
If the \*Lunique\*O flag in the \*Lsec_attr_schema_entry_t\*O data type is not 
set on, retain the attribute.  
If the \*Lunique\*O flag is set on,
retain the attribute only if its value is
unique among all attribute instances of the same
attribute type within the cell.
.LI "\*Lsec_attr_intercell_act_reject\*O"
Discard the input attribute.
.LI "\*Lsec_attr_intercell_act_evaluate\*O"
Use the binding
information in the \*Ltrig_binding\*O field of this \*Lsec_attr_schema_entry_t\*O 
data type to make a \*Lsec_attr_trig_query\*O call 
to a trigger server.  That server determines 
whether to retain the attribute value, discard the attribute value, 
or map the attribute to another value(s). 
.LE 
.LI "\*Lsec_attr_trig_type_t\*O"
Specifies the trigger type, a flag that determines whether an attribute trigger 
should be invoked for query operations.  The data type, which is used in conjunction 
with the \*Lsec_attr_schema_entry_t\*O data type, uses the following constants:
.VL
.LI \*Lsec_attr_trig_type_query\*O
The attribute trigger server is invoked for query operations.
.LI "\*Lsec_attr_trig_type_query\*O"
The attribute trigger server is invoked for update operations. 
.LE 
.nL
.ne 7
.LI "\*Lsec_attr_schema_entry_t\*O"
A structure that defines a complete attribute entry for the schema catalog.  
The entry is identified by both a unique string name and a unique 
attribute UUID.  Although either can either can be used as a retrieval key, 
the string name should be used for interactive access to the attribute and the 
UUID for programmatic access.  
The attribute UUID is used to identify the semantics defined for the attribute type 
in the schema.
.PP
The \*Lsec_attr_schema_entry_t\*O data type consists of the following elements:
.VL
.LI "\*Lattr_name\*O"
A pointer to the attribute name.  
.LI "\*Lattr_id\*O"
A value of type \*Luuid_t\*O that identifies the 
attribute type.  
.LI "\*Lattr_encoding\*O"
An enumerator of type \*Lsec_attr_encoding_t\*O 
that specifies the attribute's encoding.
.LI "\*Lacl_mgr_set\*O"
A structure of type \*Lsec_attr_acl_mgr_info_set_t\*O that specifies
the ACL manager types that support the objects 
on which attributes of this type can be created and the permission
bits supported by that ACL manager type. 
.LI "\*Lschema_entry_flags\*O"
An unsigned integer of type \*Lsec_\%attr_\%sch_\%entry_\%flags_t\*O that 
defines bitsets for the following flags:
.VL
.LI "\*Lunique\*O" 
When set on, this flag indicates that each instance of this 
attribute type must have a unique value within the cell 
for the object type implied by the ACL manager type. 
If this flag is not set on, uniqueness checks are not performed for attribute writes.
.nL
.ne 10
.LI "\*Lmulti_valued\*O"
When set on, this flag indicates that this attribute type may be multivalued;  
in other words, multiple instances of the same attribute type can be attached 
to a single registry object.   
If this flag is not set on, only one instance of this attribute 
type can be attached to an object.
.LI "\*Lreserved\*O"
When set on, this flag prevents the schema entry from being deleted 
through any interface or by any user.  If this flag is not set on,  
the entry can be deleted by any authorized principal.
.LI "\*Luse_defaults\*O"
When set on, the system-defined default attribute value will 
be returned on a client query if an instance 
of this attribute does not exist on the 
queried object.  If this flag is not set on, 
system defaults are not used.
.LE
.LI "\*Lintercell_action\*O"
An enumerator of type \*Lsec_attr_intercell_action_t\*O that specifies 
how the privilege service will handle attributes from a foreign cell.
.LI "\*Ltrig_types\*O"
A flag of type \*Lsec_attr_trig_type_t\*O that 
specifies whether whether a trigger 
can perform update or query operations.  
.LI "\*Ltrig_binding\*O" 
A pointer to a structure of type \*Lsec_attr_bind_info_t\*O that 
supplies the attribute trigger binding handle.
.LI "\*Lscope\*O"
A pointer to a string that defines the objects to which the attribute can be 
attached.  
.LI "\*Lcomment\*O"
A pointer to a string that contains general comments about the 
attribute.  
.LE 
.LI "\*Lsec_attr_schema_entry_parts_t\*O"
A 32-bit bitset containing flags that specify the schema 
entry fields that can be modified
on a schema entry update operation.  This data
type contains the following flags:
.VL
.LI "\*Lsec_attr_schema_part_name\*O"
If set, indicates that the attribute name (\*Lattr_name\*O) can be changed.
...\" .cS
...\" **********************
...\" NOT FUNCTIONAL FOR 1.1
...\" .LI "\*Lsec_attr_schema_part_acl_mgrs\*O"
...\" If set, indicates that the ACL manager types that support the objects 
...\" on which attributes of this type can be created can be changed.  
...\" This flag is not supported for update operations.
...\" .PP 
...\" .LI
...\" \*Lsec_attr_schema_part_unique\*O
...\" If set, indicates that the attribute name can be changed.
...\" **************************
...\" .cE
.LI "\*Lsec_attr_schema_part_reserved\*O"
If set, indicates that the setting of the flag that determines whether or 
not the schema entry can be deleted (\*Lreserved\*O) can be changed.
.LI "\*Lsec_attr_schema_part_defaults\*O"
If set, indicates that the flag that 
determines whether or not 
a query for 
a nonexistent attribute will not 
result in a search for a system default 
(\*Lapply_default\*O) can be changed.
...\" .cS
...\" ********************
...\" NOT FUNCTIONAL FOR 1.1
...\" .LI
...\" \*Lsec_attr_schema_part_intercell\*O
...\" If set, indicates that flag that determines 
...\" the action to be taken when 
...\" evaluating attributes created by 
...\" foreign cells can be changed.
...\" This flag is not supported for update operations.
...\" .LI
...\" \*Lsec_attr_schema_part_trig_types\*O
...\" If set, indicates that the flag that determines 
...\" whether a trigger 
...\" can perform update or query operations can be changed. 
...\" *********************
...\" .cE
.LI "\*Lsec_attr_schema_part_trig_bind\*O"
If set, indicates that the trigger's binding 
information (\*Ltrig_binding\*O) can be changed.
.LI "\*Lsec_attr_schema_part_comment\*O"
If set, indicates whether or not comments associated with 
the schema entry (\*Lcomment\*O) can be changed.
.LE
.LI "\*Lsec_attr_component_name_t\*O"
A pointer to a character string used to further 
specify the object to which the attribute is attached.  
(Note that this data type is analogous to the 
\*Lsec_acl_component_name_t\*O data type in the ACL 
interface.)
.LI "\*Lsec_attr_cursor_t\*O"
A structure that provides a pointer into a registry database and is used for 
multiple database operations.  
.P
This cursor must minimally 
represent the object indicated by \*Lxattrschema\*O in the schema interfaces, 
or \*Vcomponent_name\*O in the attribute interfaces.  The cursor may additionally 
represent an entry within that schema or an attribute instance on that component.
.LI "\*Lsec_attr_srch_cursor_t\*O"
A structure that provides a pointer into a registry database and is used for 
multiple database operations.  The cursor must minimally represent 
the list of all objects managed by this server that possess the search 
attributes specified in the \*Lsec_attr_srch_cursor_init\*O routine.  
It may additionally represent a given object within this list as well as 
attribute instance(s) possessed by that object.
.nL
.ne 8
.LI "\*Lsec_attr_trig_cursor_t\*O"
A structure that provides an attribute trigger cursor for interactive operations.
The structure consists of the following elements:
.VL
.LI "\*Lsource\*O"
A value of type \*Luuid_t\*O that provides a UUID to identify the server that initialized the cursor.
.LI "\*Lobject_handle\*O"
A signed 32 bit integer that identifies the object (specified by 
\*Lxattrschema\*O in the schema interface or \*Vcomponent_name\*O 
in the attribute interface) upon which the operation is being performed.
.LI "\*Lentry_handle\*O"
A signed 32 bit integer that identifies the current entry 
(\*Vschema_entry\*O in the schema interface or \*Vattribute instance\*O 
in the attribute interface) for the operation.
.LI "\*Lvalid\*O"
A boolean field with the following values:
.VL
.LI "\*Ltrue\*O (1)"
Indicates an initialized cursor.
.LI "\*Lfalse\*O (0)"
Indicates an uninitialized cursor.
.LE
.LE
.LI "\*Lsec_attr_trig_timeval_sec_t\*O"
A 32-bit integer containing the seconds portion of a UNIX \*Ltimeval_t\*O,
to be used when expressing absolute dates.
.LE
.SH "Files"
.VL
.LI "\*L/usr/include/dce/sec_attr_base.idl\*O"
The \*Lidl\*O file from which \*Lsec_attr_base.h\*O was derived.
.LE 
.SH "Constants"
...\" For draft look output, this title should be changed to all uppercase
.PP
The following constants are used in \*Lsec_attr\*O calls:
.VL
.LI "\*Lsec_attr_bind_auth_dce\*O"
The binding uses DCE shared-secret key authentication.
.LI "\*Lsec_attr_bind_auth_none\*O"
The binding is not authenticated.
.LI "\*Lsec_attr_bind_type_string\*O"
The attribute uses an rpc string binding.
.nL
.ne 6
.LI "\*Lsec_attr_bind_type_svrname\*O"
The attribute uses a name in \*Lrpc_c_ns_syntax\*O 
format that identifies 
a CDS entry containing the server's binding information. 
This constant has the following structure:
.VL
.LI "\*Lname_syntax\*O"
.nL
Must be \*Lrpc_c_ns_syntax_dce\*O to specify 
that DCE naming rules are used to specify \*Lname\*O.
.LI "\*Lname\*O
A pointer to a name of a CDS entry in \*Lrpc_\%c_\%ns_\%syntax_\%dce\*O 
syntax.
.LE
.LI "\*Lsec_attr_bind_type_twr\*O"
The attribute uses a DCE protocol tower binding representation. 
.LI "\*Lsec_attr_trig_type_t\*O"
The following 32-bit constants are used with the 
\*Lsec_\%attr_\%trig_\%type_t\*O data type: 
.VL
.LI
\*Lsec_attr_trig_type_query\*O
The trigger server can perform only query operations.
.LI 
\*Lsec_attr_trig_type_update\*O
The trigger server can perform only update operations. 
.LE
.LI "\*Lsec_attr_intercell_action_t\*O"
The following constants are used with the \*Lsec_\%attr_\%intercell_\%action_t\*O 
data type:
.VL
.LI "\*Lsec_attr_intercell_act_accept\*O"
If the \*Lunique\*O flag in the \*Lsec_attr_schema_entry_t\*O 
data type is not set on, retain attributes from a foreign cell.  
If the \*Lunique\*O flag is set on,
retain the foreign attribute only if its value is
unique among all attribute instances of the same
attribute type within the cell.
.LI "\*Lsec_attr_intercell_act_reject\*O"
Discard attributes from a foreign cell.
.LI "\*Lsec_attr_intercell_act_evaluate\*O"
A trigger server determines
whether to retain foreign attributes, discard foreign attributes, 
or map foreign attribute to another value(s). 
.LE
.nL
.ne 6
.LI "\*Lsec_attr_schema_entry_parts_t\*O"
The following constants are used with the \*Lsec_\%attr_\%schema_\%entry_\%parts_t\*O 
data type:
.VL
.LI "\*Lsec_attr_schema_part_name\*O"
Indicates that the attribute name can be changed in an schema 
update operation.
.LI "\*Lsec_attr_schema_part_reserved\*O"
Indicates that the setting of the \*Lreserved\*O flag 
can be changed in a 
schema entry update.
.LI "\*Lsec_attr_schema_part_defaults\*O"
Indicates that the \*Lapply_default\*O flag 
can be changed in a schema entry update operation.
.LI "\*Lsec_attr_schema_part_trig_bind\*O"
Indicates that trigger binding 
information can be changed in a schema entry 
update operation.
.LI "\*Lsec_attr_schema_part_comment\*O"
Indicates that comments associated with 
the schema entry can be changed in a schema entry update.
.LE
.LE
.SH "Login API Data Types"
.SH "Synopsis"
.sS
\*L#include <dce/sec_login.h>\*O
.sE
.SH "Data Types"
...\" For draft look output, this title should be changed to all uppercase
.PP
The following data types are used in \*Lsec_login_\*O calls:
.VL
.LI "\*Lsec_login_handle_t\*O"
This is an opaque pointer to a data structure representing a complete login
context.  The context includes a principal's network credentials, as well as
other account information.  The network credentials are also referred to
as the principal's ticket-granting ticket.
.LI "\*Lsec_login_flags_t\*O"
A 32-bit set of flags describing restrictions on the use of a principal's
validated network credentials.  Currently, only one flag is implemented.  
Possible values are:
.VL
.LI "\*Lsec_login_no_flags\*O"
No special flags are set.
.LI "\*Lsec_login_credentials_private\*O"
Restricts the validated network credentials to the current process.  If this
flag is not set, it
is permissible to share credentials with descendents of
current process.
.LE
.LI "\*Lsec_login_auth_src_t\*O"
An enumerated set describing how the login context was authorized.  The
possible values are:
.VL
.LI "\*Lsec_login_auth_src_network\*O"
Authentication accomplished through the normal network authority.  A login
context authenticated this way will have all the network credentials it
ought to have.
.LI "\*Lsec_login_auth_src_local\*O"
Authentication accomplished via local data.  Authentication occurs locally
if a principal's account is tailored for the local machine, or if the
network authority is unavailable.  Since login contexts authenticated
locally have no network credentials, they may not be used for network
operations. 
.LI "\*Lsec_login_auth_src_overridden\*O"
Authentication accomplished via the override facility. 
.LE
.LI "\*Lsec_login_passwd_t\*O"
The \*Lsec_login_get_pwent(\|)\*O call will return a pointer to a
password structure, which depends on the underlying registry structure.  
.PP
.ne 14
In most cases, the structure will look like that supported by
Berkeley 4.4BSD and
OSF/1, which looks like this:
...\" The following system output, not user input
.ta 5 10 15 20 25
.iS
struct passwd {
 char	*pw_name;		* user name *
 char	*pw_passwd;	* encrypted password *
 int	pw_uid;		* user uid *
 int	pw_gid;		* user gid *
 time_t	pw_change;		* password change time *
 char	*pw_class;		* user access class *
 char	*pw_gecos;		* Honeywell login info *
 char	*pw_dir;		* home directory *
 char	*pw_shell;		* default shell *
 time_t	pw_expire;		* account expiration *
};
.iE
.LI "\*Lsec_passwd_rec_t\*O"
A structure containing either
a plaintext password or a preencrypted buffer of password data.
The \*Lsec_passwd_rec_t\*O structure consists of three components:
.VL
.LI "\*Lversion_number\*O"
The version number of the password.
.LI "\*Lpepper\*L
A character string combined with the password before an encryption key is derived
from the password.
.LI "\*Lkey\*O"
A structure consists of the following components:
.VL
.LI "\*Lkey_type\*O"
The key type can be the following:
.VL
.LI "\*Lsec_passwd_plain\*O"
Indicates that a printable string of data is stored in \*Lplain\*O.
.LI "\*Lsec_passwd_des\*O"
Indicates that an array of data is stored in \*Ldes_key\*L.
.LE
.nL
.ne 7
.LI "\*Ltagged_union\*O"
A structure specifying the password.  The value of the structure depends on 
\*Lkey_type\*O.  If \*Lkey_type\*O is \*Lsec_\%passwd_\%plain\*O, structure contains  
\*Lplain\*O, a character string.  If \*Lkey_type\*O is \*Lsec_passwd_des\*O,
the structure contains \*Ldes_key\*O, a DES key of type \*Lsec_passwd_des_key_t\*O. 
.LE
.LE
.LE
.SH "Constants"
...\" For draft look output, this title should be changed to all uppercase
.PP
The following constants are used in \*Lsec_login_\*O calls:
.VL
.LI "\*Lsec_login_default_handle\*O"
The value of a login context handle before setup or validation.
.LI "\*Lsec_login_flags_t\*O" 
.PP
The following two constants are used with the \*Lsec_login_flags_t\*O type:
.VL
.LI "\*Lsec_login_no_flags\*O"
No special flags are set.
.LI "\*Lsec_login_credentials_private\*O"
Restricts the validated network credentials to the current process.  If this
flag is not set, it
is permissible to share credentials with descendents of
current process.
.LE
.LI "\*Lsec_login_remote_uid\*O"
Used in the \*Lsec_login_passwd_t\*O structure for
users from remote cells.
.LI "\*Lsec_login_remote_gid\*O"
Used in the \*Lsec_login_passwd_t\*O structure for
users from remote cells.
.LE  
.SH "Files"
.VL
.LI "\*L/usr/include/dce/sec_login.idl\*O"
The \*Lidl\*O file from which \*Lsec_login.h\*O was derived.
.LE
.nL
.ne 8
.SH "Extended Privilege Attribute API Data Types"
.SH "Synopsis"
.sS
\*L#include <dce/id_epac.h>\*O
.sp .4v
\*L#include <dce/nbase.h>\*O
.sE
.SH "Data Types"
The following data types are used in extended privilege attribute calls and 
in the \*Lsec_login_cred\*O calls that implement extended privilege 
attributes.
.VL
.LI "\*Lsec_cred_cursor_t\*O"
A structure that provides an input/output cursor used to 
iterate through a set of delegates in the \*Lsec_cred_get_delegate(\|)\*O 
or \*Lsec_login_cred_get_delegate(\|)\*O calls.  This cursor is 
initialized by the \*Lsec_cred_initialize_cursor(\|)\*O or 
\*Lsec_login_cred_init_cursor(\|)\*O call.
.LI "\*Lsec_cred_attr_cursor_t\*O"
A structure that provides an input/output cursor used to iterate 
through a set of extended attributes in the 
\*Lsec_\%cred_\%get_\%extended_\%attributes(\|)\*O call.  This cursor is 
initialized by the \*Lsec_cred_initialize_attr_cursor(\|)\*O call.
.LI "\*Lsec_id_opt_req_t\*O"
A structure that specifies application-defined optional restrictions.   
The \*Lsec_id_opt_req_t\*O data type is composed of the following elements:
.VL
.LI "\*Lrestriction_len\*O"
An unsigned 16-bit integer that defines the size of the 
restriction data.
.LI "\*Lrestrictions\*O"
A pointer to a \*Lbyte_t\*O that contains the restriction data.
.LE
.LI "\*Lsec_rstr_entry_type_t\*O"
An enumerator that specifies the entry types for 
delegate and target restrictions. 
This data type is used in conjunction with the \*Lsec_id_restriction_t\*O 
data type where the specific UUID(s), if appropriate, are supplied.  
It consists of the following components:
.nL
.ne 7
.VL
.LI "\*Lsec_rstr_e_type_user\*O"
The target is a local principal identified by UUID.  
This type conforms with the POSIX 1003.6 standard.
.LI "\*Lsec_rstr_e_type_group\*O"
The target is a local group identified by UUID.  
This type conforms with the POSIX 1003.6 standard.
.LI "\*Lsec_rstr_e_type_foreign_user\*O"
The target is a foreign principal identified by principal and cell UUID.
.LI "\*Lsec_rstr_e_type_foreign_group\*O"
The target is a foreign group identified by group and cell UUID.
.LI "\*Lsec_rstr_e_type_foreign_other\*O"
The target is any principal that can authenticate to the foreign cell  
identified by UUID. 
.LI "\*Lsec_rstr_e_type_any_other\*O"
The target is any principal that can authenticate 
to any cell, but is not identified in any other
type entry.
.LI "\*Lsec_rstr_e_type_no_other\*O"
No pincipal can act as a target or delegate.
.LE
.LI "\*Lsec_id_restriction_t\*O"
A discriminated union that defines delegate and target restrictions.  
The union, which is used in conjunction with the \*Lsec_restriction_set_t\*O 
data type, consists of the following elements:
.VL
.LI "\*Lentry_type\*O"
A \*Lsec_rstr_entry_type_t\*O that defines the ACL entry types 
for delegate and target restrictions.  
The value of \*Ltagged_union\*O depends
on the value of \*Lentry_type\*O.
.LI "\*Ltagged_union\*O"
A tagged union whose contents depend on \*Lentry_type\*O as follows:
.LE
.PP
.ne 7
.in -1i
.TS 
center allbox tab(@);
lb | lb
l | l.
If entry_type is...@Then tagged_union is...
=
\*Lsec_rstr_e_type_any_other\*O@NULL
_
\*Lsec_rstr_e_type_foreign_other\*O@T{
\*Lforeign_id\*O that identifies
the foreign cell.
T}
_
\*Lsec_rstr_e_type_user\*O@\*Lid\*O, a \*Lsec_id_t\*O that identifies
\*Lsec_rstr_e_type_group\*O@the user or group. 
_
\*Lsec_rstr_e_type_foreign_user\*O@\*Lforeign_id\*O, a \*Lsec_id_foreign_t\*O 
\*Lsec_rstr_e_type_foreign_group\*O@that identifies the foreign user or group.  
.TE
.in
.sp .5
.LI "\*Lsec_id_restriction_set_t\*O"
A structure that that supplies delegate and target restrictions.   
The structure consists of
.VL
.LI "\*Lnum_restrictions\*O"
A 16-bit unsigned integer that defines the number of restrictions 
in \*Lrestrictions\*O.
.LI "\*Lrestrictions\*O"
A pointer to a \*Lsec_id_restriction_t\*O that contains the 
restrictions.
.LE
.LI "\*Lsec_id_compatibility_mode_t\*O"
A unsigned 16 bit integer that defines the compatibility between
current and pre-1.1 servers. 
The data type uses the following constants:
.VL
.LI "\*Lsec_id_compat_mode_none\*O"
Compatibility mode is off.
.LI "\*Lsec_id_compat_mode_initiator\*O"
Compatibility mode is on.  The 1.0 PAC data extracted from the EPAC 
of the chain initiator.
.LI "\*Lsec_id_compat_mode_caller\*O"
Compatibility mode is on.  The 1.0 PAC data extracted from the last 
delegate in the delegation chain. 
.LE
.LI "\*Lsec_id_delegation_type_t\*O
An unsigned 16 bit integer that defines the delegation type.  
The data type uses the following constants:
.VL
.LI "\*Lsec_id_deleg_type_none\*O"
Delegation is not allowed.
.LI "\*Lsec_id_deleg_type_traced\*O"
Traced delegation is allowed.
.LI "\*Lsec_id_deleg_type_impersonation\*O"
Simple (impersonation) delegation is allowed.
.LE
.LI "\*Lsec_id_pa_t\*O"
An structure that contains pre-1.1 PAC data extracted from an EPAC 
of a current version server.  This data 
type, which is used for compatibility with pre-1.1 servers, consists of 
the following elements:
.VL
.LI "\*Lrealm\*O"
A value of type \*Lsec_id_t\*O that contains the 
UUID that identifies the cell in which the principal 
associated with the PAC exists.
.LI "\*Lprincipal\*O"
A value of type \*Lsec_id_t\*O that contains the 
UUID of the principal.
.LI "\*Lgroup\*O"
A value of type \*Lsec_id_t\*O that contains the 
UUID of the principal's primary group.
.LI "\*Lnum_groups\*O"
An unsigned 16-bit integer that specifies the number of 
groups in the principal's groupset.
.LI "\*Lgroups\*O"
An array of  pointers to \*Lsec_id_t\*Os that contain the 
UUIDs of the each group in the principal's groupset.
.LI "\*Lnum_foreign_groupsets\*O"
An unsigned 16-bit integer that 
specifies the number of foreign groups for the principal's groupset.
.LI "\*Lforeign_groupsets\*O"
An array of pointers to \*Lsec_id_t\*Os that contain the 
UUIDs of the each group in the  principal's groupset.
.LE
.LI "\*Lsec_id_pac_t\*O"
An structure that contains a pre-1.1 PAC.  This data 
type, which is used as output of the \*Lsec_cred_get_v1_pac\*O call, 
consists of the following elements:
.VL
.LI "\*Lpac_type\*O"
A value of type \*Lsec_id_pac_format_t\*O that can be 
used to describe the PAC format.
.nL
.ne 8
.LI "\*Lauthenticated\*O"
A boolean field that indicates whether or not the PAC is authenticated 
(obtained from an authenticated source).  
FALSE\ indicates that the PAC is not authenticated.  No authentication 
protocol was used in the rpc that transmitted the identity of the caller.  
TRUE indicates that the PAC is authenticated. 
.LI "\*Lrealm\*O"
A value of type \*Lsec_id_t\*O that contains the 
UUID that identifies the cell in which the principal 
associated with the PAC exists.
.LI "\*Lprincipal\*O"
A value of type \*Lsec_id_t\*O that contains the 
UUID of the principal.
.LI "\*Lgroup\*O"
For local principals, a value of type \*Lsec_id_t\*O that contains the 
UUID of the principal's primary group.
.LI "\*Lnum_groups\*O"
An unsigned 16-bit integer that specifies the number of 
groups in the principal's groupset.
.LI "\*Lgroups\*O"
An array of pointers to \*Lsec_id_t\*Os that contain the 
UUIDs of the each group in the  principal's groupset.
.LI "\*Lnum_foreign_groups\*O"
An unsigned 16-bit integer that 
specifies the number of foreign groups in the principal's groupset.
.LI "\*Lforeign_groups\*O
An array of pointers to \*Lsec_id_t\*Os that contain the 
UUIDs of the each foreign group in the principal's groupset.
.LE
.LI "\*Lsec_id_pac_format_t\*O"
An enumerator that can be used to describe the PAC format.
.LI "\*Lsec_id_t\*O"
A structure that contains UUIDs for principals, groups, or organizations and 
an optional printstring name. 
Since a UUID is an handle for the object's identity, the 
\*Lsec_id_t\*O data type is the basic unit for identifying 
principals, groups, and organizations.  
.P
Because the printstring name is dynamically allocated, this 
datatype requires a destructor function.  
Generally, however, the \*Lsec_id_t\*O is embedded in other data types 
(ACLs, for example), and these datatypes have a destructor function to 
release the printstring storage.
.P
The \*Lsec_id_t\*O data type is composed of the following elements:
.VL
.LI "\*Luuid\*O"
A value of type \*Luuid_t\*O, the UUID of the principal, group, or 
organization.
.LI "\*Lname\*O
A pointer to a character string containing the name of the principal, 
group, or organization.
.LE
.LI "\*Lsec_id_foreign_t\*O"
A structure that contains UUIDs for principals, groups, or organizations for 
objects in a foreign cell and the UUID that identifies the 
foreign cell.  
The \*Lsec_id_foreign_t\*O data type is composed of the following elements:
.VL
.LI "\*Lid\*O"
A value of type \*Lsec_id_t\*O that contains the UUIDs of the 
objects from the foreign cell.
.LI "\*Lrealm\*O"
A value of type \*Lsec_id_t\*O that contains the UUID of the 
foreign cell.
.LE
.LI "\*Lsec_id_foreign_groupset_t\*O"
A structure that contains UUIDs for set of groups in a foreign cell
and the UUID that identifies the foreign cell.
The \*Lsec_id_foreign_groupset_t\*O data type is composed of the following elements:
.VL
.LI "\*Lrealm\*O"
A value of type \*Lsec_id_t\*O that contain the UUID of the 
foreign cell.
.LI "\*Lnum_groups\*O"
An unsigned 16-bit integer specifying the number of group UUIDs in 
\*Lgroups\*O.
.LI "\*Lgroups\*O"
A printer to a \*Lsec_id_t\*O that contains the UUIDs of the 
groupset from the foreign cell.
.LE
.LE
.SH "Constants"
The following constants are used in the extended privilege attribute calls and 
in the the \*Lsec_login\*O calls that implement extended privilege attributes:
.VL
.LI "\*Lsec_id_compat_mode_none\*O"
Compatibility mode is off.
.LI "\*Lsec_id_compat_mode_initiator\*O"
Compatibility mode is on.  The 1.0 PAC data extracted from the EPAC 
of the chain initiator.
.LI "\*Lsec_id_compat_mode_caller\*O"
Compatibility mode is on.  The 1.0 PAC data extracted from the last 
delegate in the delegation chain. 
.LI "\*Lsec_id_deleg_type_none\*O"
Delegation is not allowed.
.LI "\*Lsec_id_deleg_type_traced\*O"
Traced delegation is allowed.
.LI "\*Lsec_id_deleg_type_impersonation\*O"
Simple (impersonation) delegation is allowed.
.LI "\*Lsec_rstr_e_type_user\*O"
The delegation target is a local principal identified by UUID.  
This type conforms with the POSIX 1003.6 standard.
.LI "\*Lsec_rstr_e_type_group\*O"
The delegation target is a local group identified by UUID.  
This type conforms with the POSIX 1003.6 standard.
.LI "\*Lsec_rstr_e_type_foreign_user\*O"
The delegation target is a foreign principal identified by principal and cell UUID.
.LI "\*Lsec_rstr_e_type_foreign_group\*O"
The delegation target is a foreign group identified by group and cell UUID.
.LI "\*Lsec_rstr_e_type_foreign_other\*O"
The delegation target is any principal that can authenticate to the foreign cell  
identified by UUID. 
.LI "\*Lsec_rstr_e_type_any_other\*O"
The delegation target is any principal that can authenticate 
to any cell, but is not identified in any other
type entry. 
.LI "\*Lsec_rstr_e_type_no_other\*O"
No pincipal can act as a target or delegate.
.LE
.SH "Files"
.VL
.LI "\*L/usr/include/dce/sec_cred.idl\*O"
The \*Lidl\*O file from which \*Lsec_cred.h\*O was derived.
.LI "\*L/usr/include/dce/sec_epac.idl\*O"
The \*Lidl\*O file from which \*Lsec_epac.h\*O was derived.
.LI "\*L/usr/include/dce/sec_nbase.idl\*O"
The \*Lidl\*O file from which \*Lsec_nbase.h\*O was derived.
.LE
.SH "ACL API Data Types"
.SH "Synopsis"
.sS
\*L#include <dce/aclbase.h>\*O
.sE
.SH "Data Types"
...\" For draft look output, this title should be changed to all uppercase
.PP
The following data types are used in \*Lsec_acl_\*O calls:
.VL
.LI "\*Lsec_acl_handle_t\*O"
A pointer to an opaque handle bound to an ACL that is the subject
of a test or examination.  The handle is bound to the ACL with
\*Lsec_acl_bind(\|)\*O.  An unbound handle has the value
\*Lsec_\%acl_\%default_\%handle\*O.
.LI "\*Lsec_acl_posix_semantics_t\*O"
A flag that indicates which, if any, POSIX ACL semantics 
an ACL manager supports.  The following constants are defined for use with the
\*Lsec_acl_posix_semantics_t\*O data type:
.VL
.LI "\*Lsec_acl_posix_no_semantics\*O"
The manager type does not support POSIX semantics.
.LI "\*Lsec_acl_posix_mask_obj\*O"
The manager type supports the \*Lmask_obj\*O entry type and POSIX 1003.6 Draft 12 
ACL mask entry semantics.
.LE
.LI "\*Lsec_acl_t\*O"
This data type is the fundamental type for the ACL manager interfaces.  The
\*Lsec_acl_t\*O type contains a complete access control list, made up of
a list of entry fields (type \*Lsec_acl_entry_t\*O).  The default cell
identifies the authentication authority for simple ACL entries (foreign
entries identify their own foreign cells).  The \*Lsec_acl_manager_type\*O
identifies the manager to interpret this ACL.
...\"CK  (It is probably a bad idea to allow one manager to create a
...\"sec_acl to be interpreted by an independent (disinterested) manager).
.PP
The \*Lsec_acl_t\*O type is a structure containing the following fields:
.VL
.LI "\*Ldefault_realm\*O"
A structure of type \*Lsec_acl_id_t\*O, this identifies the UUID and
(optionally) the name of the default cell.
.LI "\*Lsec_acl_manager_type\*O"
Contains the UUID of the ACL manager type.
.LI "\*Lnum_entries\*O"
An unsigned 32-bit integer containing the number of ACL entries in this ACL.
.LI "\*Lsec_acl_entries\*O"
An array containing \*Lnum_entries\*O pointers to different ACL entries,
each of type \*Lsec_acl_entry_t\*O.
.LE
.LI "\*Lsec_acl_p_t\*O"
This data type, simply a pointer to a \*Lsec_acl_t\*O, is for use with the
\*Lsec_acl_list_t\*O data type.
.LI "\*Lsec_acl_list_t\*O"
This data type is a structure containing an unsigned 32-bit integer
\*Lnum_acls\*O that describes the number of ACLs indicated by its companion
array of pointers, \*Lsec_acls\*O, of type \*Lsec_acl_p_t\*O.
.LI "\*Lsec_acl_entry_t\*O"
...\" A \*Lsec_acl_entry_t\*O contains a set of permissions, and other optional
...\" information.  An ACL is a list of entries.  The optional information in each
...\" entry currently divides into three categories:
...\" .VL
...\" .LI "\*LKeys\*O"
...\" The identifier for the entry (principal or group name or UUID).
...\" .LI "\*LForeign Keys\*O"
...\" Same as "Keys", but also includes the UUID identifying the foreign realm.
...\" .LI "\*LExtended Data\*O"
...\" Additional "pickled" data.  This kind of entry cannot be interpreted, but
...\" can be used by an out-of-date client when copying an ACL from one manager
...\" to another (assuming that the two managers each understand the data).
...\" .LE
...\" .PP
The \*Lsec_acl_entry_t\*O type is a structure made up of the following
components:
.VL
.LI "\*Lperms\*O"
A set of flags of type \*Lsec_acl_permset_t\*O that
describe the permissions
granted for the principals identified by this ACL entry.  Note that if a
principal matches more than one ACL entry, the effective permissions will
be the most restrictive combination of all the entries.
.LI "\*Lentry_info\*O"
A structure containing two members:
.VL
.LI "\*Lentry_type\*O"
A flag of type \*Lsec_acl_entry_type_t\*O, indicating the type of ACL entry.
.LI "\*Ltagged_union\*O"
A tagged union whose contents depend on the type of the entry.
.LE
.LE
The types of entries indicated by \*Lentry_type\*O can be the following:
.VL
.LI "\*Lsec_acl_e_type_user_obj\*O"
The entry contains permissions for the implied user
object.  This type is described in the POSIX 1003.6 standard.
...\"CK Does this entry have implicit 'owner' privileges?
.LI "\*Lsec_acl_e_type_group_obj\*O"
The entry contains permissions for the implied group
object.  This type is described in the POSIX 1003.6 standard.
.nL
.ne 7
.LI "\*Lsec_acl_e_type_other_obj\*O"
The entry contains permissions for principals not otherwise
named through user or group entries.
This type is described in the POSIX 1003.6 standard.
.LI "\*Lsec_acl_e_type_user\*O"
The entry contains a key that identifies a user.
This type is described in the POSIX 1003.6 standard.
.LI "\*Lsec_acl_e_type_group\*O"
The entry contains a key that identifies a group.
This type is described in the POSIX 1003.6 standard.
.LI "\*Lsec_acl_e_type_mask_obj\*O"
The entry contains the maximum permissions for all entries
other than \*Lmask_obj\*O, \*Lunauthenticated\*O, \*Luser_obj\*O, \*Lother_obj\*O.
.LI "\*Lsec_acl_e_type_foreign_user\*O"
The entry contains a key that identifies a user and the foreign realm.
.LI "\*Lsec_acl_e_type_foreign_group\*O"
The entry contains a key that identifies a group and the foreign realm.
.LI "\*Lsec_acl_e_type_foreign_other\*O"
The entry contains a key that identifies a foreign realm.  Any user
that can authenticate to the foreign realm will be allowed access.
.LI "\*Lsec_acl_e_type_any_other\*O
The entry contains permissions to be applied to any accessor who
can authenticate to any realm, but is not identified in any other
entry (except \*Lsec_acl_e_type_unauthenticated\*O).
.LI "\*Lsec_acl_e_type_unauthenticated\*O"
The entry contains permissions to be applied when the accessor
does not pass authentication procedures.  A privilege attribute
certificate will indicate that the caller's identity is not
authenticated.  The identity is used to match against the
standard entries, but the access rights are masked by this mask.
If this mask does not exist in an ACL, the ACL is assumed to grant
no access and all unauthenticated access attempts will be denied.
.PP
Great care should be exercised when allowing unauthenticated access
to an object.  Almost by definition, unauthenticated access is very easy
to spoof.  The presence of this mask on an ACL essentially means that
anyone can get at least as much access as allowed by the mask.
.LI "\*Lsec_acl_e_type_extended\*O"
The entry contains additional pickled data.  This kind of entry cannot be interpreted, but
can be used by an out-of-date client when copying an ACL from one manager
to another (assuming that the two managers each understand the data).
.LE
.PP
The contents of the tagged union depend on the entry type.
.PP
For the following entry types, the union contains a UUID and an optional print string (called
\*Lentry_info.tagged_union.id\*O with type \*Lsec_id_t\*O) for an identified local
principal, or for an identified foreign realm.
.ML
.LI
\*Lsec_acl_e_type_user\*O
.LI
\*Lsec_acl_e_type_group\*O
.LI
\*Lsec_acl_type_foreign_other\*O
.LE
.PP
For the following entry types, the union contains two UUIDs and optional print strings (called
\*Lentry_info.tagged_union.foreign_id\*O with type \*Lsec_id_foreign_t\*O) for an
identified foreign principal and its realm.
.ML
.LI
\*Lsec_acl_e_type_foreign_user\*O
.LI
\*Lsec_acl_e_type_foreign_group\*O
.LE
.PP
For an extended entry (\*Lsec_acl_e_type_extended\*O), the union contains
\*Lentry_info.tagged_union.extended_info\*O, a pointer to an information block of type
\*Lsec_acl_extend_info_t\*O.
.LE
.VL
.LI "\*Lsec_acl_permset_t\*O"
A 32-bit set of permission flags.  The flags currently represent the
conventional file system permissions (read, write, execute) and the
extended DFS permissions (owner, insert, delete).  
.PP
.ne 8
The unused flags
represent permissions that can only be interpreted by the manager for the
object.  For example, \*Lsec_\%acl_\%perm_\%unused_\%00000080\*O
may mean to one ACL manager that withdrawals
are allowed, and to another ACL manager that
rebooting is allowed.
.PP
The following constants are defined for use with the
\*Lsec_acl_permset_t\*O data type:
.VL
.LI "\*Lsec_acl_perm_read\*O"
The ACL allows read access to the protected object.
.LI "\*Lsec_acl_perm_write\*O"
The ACL allows write access to the protected object.
.LI "\*Lsec_acl_perm_execute\*O"
The ACL allows execute access to the protected object.
.LI "\*Lsec_acl_perm_control\*O"
The ACL allows the ACL itself to be modified.
.LI "\*Lsec_acl_perm_insert\*O"
The ACL allows insert access to the protected object.
.LI "\*Lsec_acl_perm_delete\*O"
The ACL allows delete access to the protected object.
.LI "\*Lsec_acl_perm_test\*O"
The ACL allows access to the protected object only to the extent of being
able to test for existence.
.LE
.PP
The bits from 0x00000080 to 0x80000000 are not used by the
conventional ACL permission set.  Constants of the form
\*Lsec_acl_perm_unused_00000080\*O have been defined
so application programs can easily use these bits for extended ACLs.
.LI "\*Lsec_acl_extend_info_t\*O"
This is an extended information block, provided for future extensibility.
Primarily, this allows an out-of-date client to read an ACL from a newer
manager and apply it to another (up-to-date) manager.  The data cannot be
interpreted by the out-of-date client without access to the appropriate
pickling routines (that presumably are unavailable to such a client).
.PP
.ne 8
In general, ACL managers should not accept ACLs that contain entries
the manager does not understand.  The manager clearly cannot perform the
security service requested by an uninterpretable entry, and it is considered
a security breach to lead a client to believe that the manager is
performing a particular class of service if the manager cannot do so.
.PP
The data structure is made up of the following components:
.VL
.LI "\*Lextension_type\*O"
The UUID of the extension type.
.LI "\*Lformat_label\*O"
The format of the label, in \*Lndr_format_t\*O form.
.LI "\*Lnum_bytes\*O"
An unsigned 32-bit integer indicating the number of bytes containing the
pickled data.
.LI "\*Lpickled_data\*O"
The byte array containing the pickled data.
.LE
...\"
...\"The three acl types defined by the sec_acl interfaces are:
...\"
...\"Acl_type            Description
...\"--------            -----------
...\"object              An acl of this type is applied to the node (RGY,
...\"PERSON,
...\"                    GROUP, ORG, or DIR) on which the acl is
...\"referenced.
...\"default_object      An acl of this type is inherited by child object
...\"nodes
...\"                    of the container node on which the acl is
...\"referenced.
...\"                    The child's object acl is copied from the parent's
...\"                    default_object acl.
...\"
...\"default_container   An acl of this type is inherited by child
...\"container
...\"                    nodes of the container node on which the acl is
...\"referenced.
...\"                    The child's object acl and default_container acl
...\"are                     copied from the parent's default_container
...\"acl.
...\"
.LI "\*Lsec_acl_type_t\*O"
The \*Lsec_acl_type_t\*O type differentiates among the various types of
ACLs an object can possess.  Most file system objects will only have one
ACL controlling the access to that object, but objects that control the
creation of other objects (sometimes referred to as \*Econtainers\*O) may have
more.  For example, a directory can have three different ACLs: the
directory ACL, controlling access to the directory; the initial object (or
default object) ACL, which serves as a mask when creating new objects in
the directory; and the initial directory (or default directory) ACL, which
serves as a mask when creating new directories (containers).
.PP
The \*Lsec_acl_type_t\*O is an enumerated set containing one of the
following values:
.VL
.LI "\*Lsec_acl_type_object\*O"
The ACL refers to the specified object.
.LI "\*Lsec_acl_type_default_object\*O"
The ACL is to be used when creating objects in the container.
.LI "\*Lsec_acl_type_default_container\*O"
The ACL is to be used when creating nested containers.
.LE
.nL
.ne 6
The following values are defined but not currently used.  They are
available for application programs that may create an
application-specific ACL definition.
.ad l
.ML
.LI 
\*Lsec_acl_type_unspecified_3\*O
.LI 
\*Lsec_acl_type_unspecified_4\*O
.LI 
\*Lsec_acl_type_unspecified_5\*O
.LI 
\*Lsec_acl_type_unspecified_6\*O
.LI 
\*Lsec_acl_type_unspecified_7\*O
.LE
.ad b
.LI "\*Lsec_acl_printstring_t\*O"
A \*Lsec_acl_printstring_t\*O structure contains a printable representation
for a permission in a \*Lsec_acl_permset_t\*O permission set.  This allows a
generic ACL editing tool to be used for application-specific ACLs.  The
tool need not know the printable representation for each permission bit in
a given permission set.  The \*Lsec_acl_get_printstring(\|)\*O function
will query an ACL
manager for the print strings of the permissions it supports.
The structure consists of three components:
.VL
.LI "\*Lprintstring\*O"
A character string of maximum length \*Lsec_acl_printstring_len\*O
describing the printable representation of a specified permission.
.LI "\*Lhelpstring\*O"
A character string of maximum length \*Lsec_acl_printstring_help_len\*O
containing some text that may be used to describe the specified
permission.
.LI "\*Lpermissions\*O"
A \*Lsec_acl_permset_t\*O permission set describing the permissions that
will be represented with the specified print string.
.LE
.LI "\*Lsec_acl_component_name_t\*O"
This type is a pointer to a character string, to be used to specify the
entity a given ACL is protecting.
.LE
.SH "Constants"
...\" For draft look output, this title should be changed to all uppercase
.PP
The following constants are used in \*Lsec_acl_\*O calls:
.VL
.LI "\*Lsec_acl_default_handle\*O"
The value of an unbound ACL manager handle.
.LI "\*Lsec_rgy_acct_key_t\*O"
The following 32-bit integer constants are used with the
\*Lsec_rgy_acct_key_t\*O data type:
.VL
.LI "\*Lsec_rgy_acct_key_none\*O"
Invalid key.
.LI "\*Lsec_rgy_acct_key_person\*O"
The person name alone is enough.
.LI "\*Lsec_rgy_acct_key_group\*O"
The person and group names are both necessary for the account abbreviation.
.LI "\*Lsec_rgy_acct_key_org\*O"
The person, group, and organization names are all necessary.
.LI "\*Lsec_rgy_acct_key_last\*O"
Key values must be less than this constant.
.LE
.LI "\*Lsec_rgy_pname_t_size\*O"
The maximum number of characters in a \*Lsec_rgy_pname_t\*O.
.LI "\*Lsec_acl_permset_t\*O"
The following constants are defined for use with the
\*Lsec_acl_permset_t\*O data type:
.VL
.LI "\*Lsec_acl_perm_read\*O"
The ACL allows read access to the protected object.
.LI "\*Lsec_acl_perm_write\*O"
The ACL allows write access to the protected object.
.LI "\*Lsec_acl_perm_execute\*O"
The ACL allows execute access to the protected object.
.LI "\*Lsec_acl_perm_owner\*O"
The ACL allows owner-level access to the protected object.
.LI "\*Lsec_acl_perm_insert\*O"
The ACL allows insert access to the protected object.
.LI "\*Lsec_acl_perm_delete\*O"
The ACL allows delete access to the protected object.
.LI "\*Lsec_acl_perm_test\*O"
The ACL allows access to the protected object only to the extent of being
able to test for existence.
.LI "\*Lsec_acl_perm_unused_00000080\*O - \*Lsec_acl_perm_unused_0x80000000\*O"
The bits from 0x00000080 to 0x80000000 are not used by the
conventional ACL permission set.  Constants have been defined so
application programs can easily use these bits for extended ACLs.
.LE
.LI "\*Lsec_acl_printstring_len\*O"
The maximum length of the printable representation of an ACL permission.
(See \*Lsec_acl_printstring_t\*O.)
.LI "\*Lsec_acl_printstring_help_len\*O"
The maximum length of a help message to be associated with a supported ACL
permission. (See \*Lsec_acl_printstring_t\*O.)
.LE  
.SH "Files"
.VL
.LI "\*L/usr/include/dce/aclbase.idl\*O"
The \*Lidl\*O file from which \*Laclbase.h\*O was derived.
.LE
.SH "Key Management API Data Types"
.SH "Notes"
Key management operations that take a keydata argument expect
a pointer to a \*Lsec_passwd_rec_t\*O structure, and those
that take a keytype argument (\*Lvoid *\*O) expect a pointer
to a \*Lsec_passwd_type_t\*O.  Key management operations that
yield a keydata argument as output set the pointer to an array
of \*Lsec_passwd_rec_t\*O.  (The array is terminated by an element with
a key type of \*Lsec_passwd_none\*O.)
.PP
Operations that take a keydata argument expect
a pointer to a \*Lsec_passwd_rec_t\*O structure.  Operations
that yield a keydata argument as output set the pointer to an array
of \*Lsec_passwd_rec_t\*O.  (The array is terminated by an element with
key type \*Lsec_passwd_none\*O.)  Operations that take 
a keytype argument (\*Lvoid *\*O) expect a pointer
to a \*Lsec_passwd_type_t\*O.
.SH "Synopsis"
.sS
\*L#include <dce/keymgmt.h>\*O
.sE
.nL
.ne 8
.SH "Data Types"
...\" For draft look output, this title should be changed to all uppercase
.VL
.LI \*Lsec_passwd_type_t\*O
An enumerated set describing the currently supported key types.  The possible 
values are as follows:
.VL
.LI \*Lsec_passwd_none\*O
Indicates no key types are supported.
.LI \*Lsec_passwd_plain\*O
Indicates that the key is a printable string of data.
.LI \*Lsec_passwd_des\*O
Indicates that the key is DES encrypted data.
.zA "enh,13592,R1.2.2,add types for public key"
.LI \*Lsec_passwd_privkey\*O
Indicates that the key is a private or public key of a public key pair used 
in public key authentication.
.LI \*Lsec_passwd_genprivkey\*O
Indicates the modulus bit size of the private key to be generated for a public key pair used 
in public key authentication.
.LE
.LI "\*Lsec_passwd_rec_t\*O"
A structure containing any of the following: 
a plaintext password, a preencrypted buffer of password data, a public-key-pair generation 
request, or a public or private key.
.zZ "enh,13592,R1.2.2,add types for public key"
The \*Lsec_passwd_rec_t\*O structure consists of three components:
.VL
.LI "\*Lversion_number\*O"
The version number of the password.
.LI "\*Lpepper\*L
A character string combined with the password before an encryption key is derived
from the password.
.LI "\*Lkey\*O"
A structure consists of the following components:
.VL
.LI "\*Lkey_type\*O"
The key type can be the following:
.VL
.LI "\*Lsec_passwd_plain\*O"
Indicates that a printable string of data is stored in \*Lplain\*O.
.LI "\*Lsec_passwd_des\*O"
Indicates that an array of data is stored in \*Ldes_key\*L.
.zA "enh,13592,R1.2.2,add types for public key"
.LI "\*Lsec_passwd_privkey\*O"
Indicates that X.509 ASN.1 DER-encoded data is stored in \*Lpriv_key\*O.
.LI "\*Lsec_passwd_genprivkey\*O"
Indicates that unsigned 32-bit data is stored in \*Lmodulus_size\*O.
.LE
.nL
.ne 8
.LI "\*Ltagged_union\*O"
A structure specifying the password.  The value of the structure depends on 
\*Lkey_type\*O.  
.PP
If \*Lkey_type\*O is \*Lsec_\%passwd_\%plain\*O, the structure contains  
\*Lplain\*O, a character string.  
.PP
If \*Lkey_type\*O is \*Lsec_passwd_des\*O,
the structure contains \*Ldes_key\*O, a DES key of type \*Lsec_passwd_des_key_t\*O.  
.PP
If \*Lkey_type\*O is \*Lsec_passwd_privkey\*O,
the structure contains \*Lpriv_key\*O, a public or private key of type 
\*Lsec_pk_data_t\*O.  
.PP
If \*Lkey_type\*O is \*Lsec_passwd_genprivkey\*O,
the structure contains \*Lmodulus_size\*O, unsigned 32-bit data.
.LE
.LE
.LE
.zZ "enh,13592,R1.2.2,add types for public key"
.VL
.LI "\*Lsec_passwd_version_t\*O"
An unsigned 32-bit integer that defines the password 
version number.  You can supply a version number or 
a 0 for no version number.  If you supply the 
constant \*Lsec_passwd_c_version_none\*O, 
the security service supplies a system-generated version number. 
.LI \*Lsec_key_mgmt_authn_service\*O
A 32-bit unsigned integer whose purpose
is to indicate the authentication service in use, since a server may have
different keys for different levels of security.  The possible values of
this data type and their meanings are as follows:
.VL
.LI "\*Lrpc_c_authn_none\*O"
No authentication.
.LI "\*Lrpc_c_authn_dce_private\*O"
DCE private key authentication (an implementation of the Kerberos system).
.LI "\*Lrpc_c_authn_dce_public\*O"
DCE public key authentication (reserved for future use).
.LE 
.LE
.SH "Constants"
...\" For draft look output, this title should be changed to all uppercase
There are no constants specially defined for use with the key
management API.
.SH "Files"
.VL
.LI "\*L/usr/include/dce/keymgmt.idl\*O"
The \*Lidl\*O file from which \*Lkeymgmt.h\*O was derived.
.LE
.nL
.ne 7
.SH "ID Mapping API Data Types"
.SH "Synopsis"
.sS
\*L#include <dce/secidmap.h>\*O
.sE
.SH "Data Types"
...\" For draft look output, this title should be changed to all uppercase
.PP
No special data types are defined for the ID mapping API.
.SH "Constants"
...\" For draft look output, this title should be changed to all uppercase
.PP
No special constants are defined for the ID mapping API.
.SH "Files"
.VL
.LI "\*L/usr/include/dce/secidmap.idl\*O"
The \*Lidl\*O file from which \*Lsecidmap.h\*O was derived.
.LE
.SH "Password Management API Data Types"
.SH "Synopsis"
.sS
\*L#include <dce/sec_pwd_mgmt.h>\*O
.sE
.SH "Data Types"
The following data types are used in \*Lsec_pwd_mgmt_\*O calls:
.VL
.LI \*Lsec_passwd_mgmt_handle_t\*O
A pointer to an opaque handle consisting of password management information
about a principal.  It is returned by \*Lsec_\%pwd_\%mgmt_\%setup(\|)\*O\*O
.LE
.SH "Constants"
There are no constants specially defined for use with the password
management API.
.SH "Files"
.VL
.LI "\*L/usr/include/dce/sec_pwd_mgmt.idl\*O"
The \*Lidl\*O file from which \*Lsec_pwd_mgmt.h\*O was derived.
.LE
...\"
...\"
.zA "enh,13592,R1.2.2,add public key"
.SH "Public Key API Data Types"
.SH "Synopsis"
.sS
\*L#include <dce/sec_pk.h>\*O
.sE
.SH "Data Types"
The following data types are used in \*Lsec_pk\*O calls:
.VL
.LI "\*Lsec_pk_domain_t\*O" 
A UUID of type \*Luuid_t\*O associated with the application domain 
in which a public or private key is used.  
.LI "\*Lsec_pk_usage_flags_t\*O"
A 32k-bit set of key-usage flags that describe the use of 
a key or key pair.  The flags are:
.VL
.LI "\*Lsec_pk_usage_digitalSignature\*O"
           
.LI "\*Lsec_pk_usage_nonRepudiation\*O"
  
.LI "\*Lsec_pk_usage_keyEncipherment\*O"
            
.LI "\*Lsec_pk_usage_keyAgreement\*O"
   
.LI "\*Lsec_pk_usage_keyCertSign\*O"
  
.LI "\*Lsec_pk_usage_offLineCRLSign\*O"
 
.LE
These flags are described in the X.509 (1993E) AM 1 standard.
.LI "\*Lsec_pk_data_t\*O"
A structure that points to an X.509 or X.511 ASN.1 DER-encoded 
value. The \*Lsec_pk_data_t\*O data type acts as a base for the following data types, which 
are aliases for \*Lsec_pk_data_t\*O:
.VL
.LI \*Lsec_pk_gen_data_t\*O

.LI \*Lsec_pk_pubkey_t\*O

.LI \*Lsec_pk_pvtkey_t

.LI \*Lsec_pk_signed_t

.LI \*Lsec_pk_encrypted_t

.LI \*Lsec_pk_algorithm_id_t

.LE
The alias data types indicate the specific information 
pointed to by \*Lsec_pk_data_t\*O.  Instead of using \*Lsec_pk_data_t\*O directly, 
use the alias data types.
.PP
The \*Lsec_pk_data_t\*O data type consists of the following elements:
.VL 
.LI "\*Llen"
The size of \*Ldata\*O.
.LI "\*Ldata\*O"
A pointer to a character string.
.LE
...\" .LI "\*Lsec_pk_data_p_t\*O       
...\" A pointer to a \*Lsec_pk_data_t\*O that acts as a 
...\" base for the following data types, which 
...\" are aliases for \*Lsec_pk_data_p_t\*O:
...\" .VL
...\" .LI \*Lsec_pk_pubkey_p_t\*O
...\" 
...\" .LI \*Lsec_pk_pvtkey_p_t
...\" 
...\" .LI \*Lsec_pk_signed_p_t
...\" 
...\" .LI \*Lsec_pk_encrypted_p_t
...\" 
...\" .LI \*Lsec_pk_algorithim_id_p_t
...\" 
...\" .LE
...\" .PP
...\" The alias data types point to specific information 
...\" contained in \*Lsec_pk_data_t\*O.  
...\" Instead of using \*Lsec_pk_data_p_t\*O directly, 
...\" use the alias data types.
.LI "\*Lsec_pk_gen_data_t\*O
A structure that acts as an alias to a \*Lsec_pk_data_t\*O that 
contains plain ASCII data.
.LI "\*Lsec_pk_pubkey_t\*O"
A structure that acts as an alias to a \*Lsec_pk_data_t\*O that 
contains an X.509 ASN.1 DER-encoded value of type 
\*LSubjectPublicKeyInfo\*O. 
This data type assumes that the public key infrastructure 
provides functions for generating a public key in this format.
...\" .LI "\*Lsec_pk_pubkey_p_t\*O
...\" A  pointer to a \*Lsec_pk_pubkey_t\*O. 
.LI "\*Lsec_pk_pvtkey_t\*O"
A structure that contains 
an X.509 ASN.1 DER-encoded private key value.  
The key format depends on the public key infrastructure. 
.PP 
This data type assumes that the public key infrastructure 
provides functions for generating a private key in this format.
.PP
...\" .LI "\*Lsec_pk_pvtkey_p_t\*O"
...\" A  pointer to a \*Lsec_pk_pvtkey_t\*O.
.LI "\*Lsec_pk_signed_t\*O"
A structure that contains an X.509 ASN.1 
DER-encoded value of type \*LSIGNED\*O.  
This data type assumes that the public key infrastructure 
provides functions for generating a public key in this format.
...\" .LI "\*Lsec_pk_signed_p_t\*O"
...\" A  pointer to a \*Lsec_pk_signed_t\*O.
.LI "\*Lsec_pk_encrypted_t\*O"
A structure that contains an X.509 
ASN.1 DER-encoded value of type \*LENCRYPTED\*O.
This data type assumes that the public key infrastructure 
provides functions for generating a public key in this format.
...\" .LI "\*Lsec_pk_encrypted_p_t\*O"
...\" A  pointer to a \*Lsec_pk_encrypted_t\*O.
.LI "\*Lsec_pk_algorithm_id_t\*O"
A structure that contains an X.509 
ASN.1 DER-encoded value of type \*LAlgorithmIdentifier\*O.
This data type assumes that the public key infrastructure 
provides functions for generating a public key in this format.
...\" .LI "\*Lsec_pk_algorithm_id_p_t\*O"
...\" A  pointer to a \*Lsec_pk_algorithm_id_t\*O.
.LE
.SH "Constants"
The following constants are used in \*Lsec_pk\*O calls:
.VL
.LI
The following unsigned 32-bit constants, which are 
used with the \*Lsec_pk_usage_flags_t\*O 
data type, correspond to \*LKeyUsage\*O types defined in DAM 1 
(Dec 1995) to X.509 (1993):
.VL
.LI "\*Lsec_pk_usage_digitalSignature\*O"
.LI "\*L sec_pk_usage_nonRepudiation\*O"
.LI "\*Lsec_pk_usage_keyEncipherment\*O"
.LI "\*Lsec_pk_usage_dataEncipherment\*O"
.LI "\*Lsec_pk_usage_keyAgreement\*O"
.LI "\*Lsec_pk_usage_keyCertSign\*O"
.LI "\*Lsec_pk_usage_offLineCRLSign\*O"
.LE
.LE
.SH "Files"
.VL
.LI "\*L/usr/include/dce/sec_pk_base.idl\*O"
The \*Lidl\*O file from which \*Lsec_pk.h\*O was derived.
.LE
.zZ "enh,13592,R1.2.2,add public key"

