...\" COPYRIGHT NOTICE
...\" Copyright (c) 1990-1996 Open Software Foundation, Inc. 
...\" ALL RIGHTS RESERVED (DCE). See the file named COPYRIGHT.DCE in the 
...\" src directory for the full copyright text. 
...\" 
...\" 
...\" HISTORY
...\" $Log: pkc_name_subtree_constraint.class.3sec,v $
...\" Revision 1.1.2.5  1996/12/20  22:00:03  weir
...\" 	Final updates
...\" 	[1996/12/20  21:58:35  weir]
...\"
...\" Revision 1.1.2.4  1996/12/17  20:11:35  damon
...\" 	Expanded OSF C O P Y R I G H T   N O T I C E
...\" 	[1996/12/17  20:08:44  damon]
...\" 
...\" Revision 1.1.2.3  1996/11/19  18:57:03  wardr
...\" 	{edit,R1.2.2}
...\" 	Init capped heads and added PDG pointer
...\" 	[1996/11/19  18:50:10  wardr]
...\" 
...\" Revision 1.1.2.2  1996/11/18  19:57:56  weir
...\" 	No change
...\" 	[1996/11/18  19:55:32  weir]
...\" 
...\" Revision 1.1.2.1  1996/10/15  21:10:58  weir
...\" 	Initial submission
...\" 	[1996/10/15  21:09:30  weir]
...\" 
...\" $EndLog$
...\" 
...\" 
...\" 
...\" 
.TH pkc_name_subtree_constraint.class 3sec
...\" 
.SH "Name"
\*Lpkc_name_subtree_constraint_t\*O - A class that expresses a subtree constraint on a name
...\" 
...\" 
.nL
...\" 
.ne 1.5i
...\" 
...\" 
.SH "Member Data"
...\" 
.SS "Public"
.ML
.LI
\*Lpkc_name_subtree_constraint_t * next\*O
.LI
\*Lpkc_name_subtree_constraint_t * prev\*O
.LI
\*Lx500name * base\*O
.LI
\*Lx500name * chopBefore\*O
.LI
\*Lx500name * chopAfter\*O
.LI
\*Lunsigned minimum\*O
.LI
\*Lunsigned maximum\*O
.LE
...\" 
...\" .SS "Private"
...\" .ML
...\" .LI
...\" \*Lpkc_name_subtree_constraints_t * root\*O
...\" .LE
...\" 
...\" 
...\" 
.SH "Member Functions"
...\" 
.SS "Public"
...\" 
.ML
.LI
\*Lvoid unlink(void)\*O
...\" 
.LI
\*Lvirtual ~pkc_name_subtree_constraint_t(\|)\*O
...\" 
.LI
\*Lpkc_name_subtree_constraint_t(\|)\*O
.PP
Takes the following argument:
.ML
.LI
\*Lpkc_name_subtree_constraints_t * theRoot\*O
.LE
...\" 
.LI
\*Lvoid set_base(\|)\*O
.PP
Takes the following argument:
.ML
.LI
\*Lconst x500name & n\*O
.LE
...\" 
.LI
\*Lvoid set_chopBefore(\|)\*O
.PP
Takes the following argument:
.ML
.LI
\*Lconst x500name & n\*O
.LE
...\" 
.LI
\*Lvoid set_chopAfter(\|)\*O
.PP
Takes the following argument:
.ML
.LI
\*Lconst x500name & n\*O
.LE
...\" 
.LI
\*Lvoid set_minimum(\|)\*O
.PP
Takes the following argument:
.ML
.LI
\*Lunsigned n\*O
.LE
...\" 
.LI
\*Lvoid set_maximum(\|)\*O
.PP
Takes the following argument:
.ML
.LI
\*Lunsigned n\*O
.LE
...\" 
.LI
\*Lchar is_permitted(\|) const\*O
.PP
Takes the following arguments:
.ML
.LI
\*Lconst x500name & issuer_name\*O
.LI
\*Lconst x500name & subject_name\*O
.LE
.PP
Return values have the following meanings:
...\" 
.VL .5i
.LI "1"
Permitted.
.LI "0"
Forbidden.
.LI "-1"
Not relevant.
.LI "-2"
Relevant, but explicit permission is required from
another subtree constraint.
.LE
...\" 
.LI
\*Lvoid get_next_link_constraint(\|) const\*O
.PP
Generates a new name subtree constraint that will be applicable to a
certificate issued by the subject of this constraint. Takes the following
argument:
.ML
.LI
\*Lpkc_name_subtree_constraint_t ** new_constraint\*O
.LE
...\" 
.LE
...\" 
...\" .SS "Private"
...\" 
...\" .ML
...\" .LI
...\" \*Lpkc_name_subtree_constraint_t & operator = (\|) {return *this;}\*O
...\" .PP
...\" Takes the following argument:
...\" .ML
...\" .LI
...\" \*Lconst pkc_name_subtree_constraint_t & o\*O
...\" .LE
...\" 
...\" .LE
...\" 
.nL
.ne 1.5i
...\" 
.SH "Description"
.PP
\*Lpkc_name_subtree_constraint_t\*O embodies a subtree constraint on a name.
.VL "\*LNote:\*O"
The certificate manipulation routines are a C++ interface. C++ must be
used to perform direct certificate manipulation.
.LE
...\" 
.ne 1.5i
...\" 
.SH "Related Information"
.PP
.ad l
Classes:
\*Lpkc_ca_key_usage.class(3sec)\*O,
\*Lpkc_constraints.class(3sec)\*O,
\*Lpkc_generic_key_usage.class(3sec)\*O,
\*Lpkc_key_policies.class(3sec)\*O,
\*Lpkc_key_policy.class(3sec)\*O,
\*Lpkc_key_usage.class(3sec)\*O,
\*Lpkc_name_subord_constraint.class(3sec)\*O,
\*Lpkc_name_subord_constraints.class(3sec)\*O,
\*Lpkc_name_subtree_constraints.class(3sec)\*O,
\*Lpkc_pending_revocation.class(3sec)\*O,
\*Lpkc_revocation.class(3sec)\*O,
\*Lpkc_revocation_list.class(3sec)\*O,
\*Lpkc_trust_list.class(3sec)\*O,
\*Lpkc_trust_list_element.class(3sec)\*O,
\*Lpkc_trusted_key.class(3sec)\*O.
.ad b 
...\" 
...\" 
...\" 
...\" class pkc_name_subtree_constraint_t {
...\" private:
...\"     pkc_name_subtree_constraints_t * root;
...\" private:
...\"     pkc_name_subtree_constraint_t & operator =
...\"                         (const pkc_name_subtree_constraint_t & o) {return *this;};
...\" public:
...\"     pkc_name_subtree_constraint_t * next;
...\"     pkc_name_subtree_constraint_t * prev;
...\" 
...\"     x500name * base;
...\"     x500name * chopBefore;
...\"     x500name * chopAfter;
...\"     unsigned minimum;
...\"     unsigned maximum;
...\" 
...\"     void unlink(void);
...\" 
...\"     virtual ~pkc_name_subtree_constraint_t();
...\"     pkc_name_subtree_constraint_t(pkc_name_subtree_constraints_t * theRoot);
...\"     void set_base(const x500name & n);
...\"     void set_chopBefore(const x500name & n);
...\"     void set_chopAfter(const x500name & n);
...\"     void set_minimum(unsigned n);
...\"     void set_maximum(unsigned n);
...\" 
...\"     char is_permitted(const x500name & issuer_name, 
...\"                       const x500name & subject_name)
...\"        const;
...\" // Return value of 1 means permitted, 0 means forbidden, -1 means not 
...\" // relevant, -2 means not relevant, but explicit permission is required from
...\" // another subtree constraint.
...\" 
...\"     void get_next_link_constraint(
...\"                   pkc_name_subtree_constraint_t ** new_constraint) const;
...\" // Generate a new name-subtree constraint that will be applicable to a 
...\" // certificate issued by the subject of this constraint.
...\" };
...\" 
...\" 
