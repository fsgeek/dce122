...\" @OSF_COPYRIGHT@
...\" COPYRIGHT NOTICE
...\" Copyright (c) 1990, 1991, 1992, 1993, 1994 Open Software Foundation, Inc.
...\" ALL RIGHTS RESERVED (DCE).  See the file named COPYRIGHT.DCE for
...\" the full copyright text.
...\" 
...\" HISTORY
...\" $Log: dce_aud_commit.3sec,v $
...\" Revision 1.1.4.2  1996/11/19  18:55:43  wardr
...\" 	{edit,R1.2.2}
...\" 	Init capped heads and added PDG pointer
...\" 	[1996/11/19  18:48:48  wardr]
...\"
...\" Revision 1.1.4.1  1996/05/13  19:02:23  wardr
...\" 	{enh,R1.2.2}
...\" 	Removed changebars
...\" 	[1996/05/13  18:56:10  wardr]
...\" 
...\" Revision 1.1.2.8  1995/06/15  19:27:00  buckler
...\" 	1.1 edits and Prentice Hall reformat
...\" 	[1995/06/15  15:40:45  buckler]
...\" 
...\" Revision 1.1.2.7  1994/10/20  03:13:44  cruz
...\" 	Final editorial changes, added status codes.
...\" 	[1994/10/20  03:13:25  cruz]
...\" 
...\" Revision 1.1.2.6  1994/09/14  13:30:21  cruz
...\" 	Added new outcome, recovered from technical comments.
...\" 	[1994/09/14  13:29:47  cruz]
...\" 
...\" Revision 1.1.2.5  1994/06/13  17:04:21  devobj
...\" 	cr10872 - fix copyright
...\" 	[1994/06/13  16:48:24  devobj]
...\" 
...\" Revision 1.1.2.4  1994/05/21  16:33:04  cruz
...\" 	Incorporated technical comments
...\" 	[1994/05/21  16:32:43  cruz]
...\" 
...\" Revision 1.1.2.3  1994/05/13  14:24:54  cruz
...\" 	Added index entries
...\" 	[1994/05/13  14:18:13  cruz]
...\" 
...\" Revision 1.1.2.2  1994/05/11  13:59:13  cruz
...\" 	Added revision bars
...\" 	[1994/05/11  13:58:54  cruz]
...\" 
...\" Revision 1.1.2.1  1994/05/09  19:43:31  cruz
...\" 	Renamed file to dce_aud_commit.3sec
...\" 	[1994/05/09  19:43:08  cruz]
...\" 
...\" Revision 1.1.2.1  1994/05/03  13:34:32  cruz
...\" 	Audit app ref doc
...\" 	[1994/05/03  13:34:03  cruz]
...\" 
...\" $EndLog$
.TH dce_aud_commit 3sec
.SH "Name"
\*Ldce_aud_commit\*O - Writes the audit record in the audit trail file
.iX "\*Ldce_aud_commit(\|)\*O"
.PP
Used by client/server applications
.SH "Synopsis"
.sS
\*L#include <dce/audit.h>\*O
.sp .4v
\*Lvoid dce_aud_commit(
.nL
	\*Ldce_aud_trail_t\*O \*Vat\*L,
.nL
	\*Ldce_aud_rec_t\*O \*Vard\*L,
.nL
	\*Lunsigned32\*O \*Voptions\*L,
.nL
	\*Lunsigned16\*O \*Vformat\*L,
.nL
	\*Lunsigned32 \*Voutcome\*L,
.nL
	\*Lunsigned32\*O *\*Vstatus\*L);\*O
.sE
.nL
.ne 1.5i
.SH "Parameters"
.SS "Input"
.VL
.LI "\*Vat\*O"
Designates an audit trail file to which the completed audit record will
be written.  The audit trail file must have been previously opened by
a successful call to the \*Ldce_aud_open(\|)\*O function.
.LI "\*Vard\*O"
Designates an audit record descriptor that was returned by a previously
successful call to one of the \*Ldce_aud_start_\*V*\*L(\|)\*O functions.  The content 
of this record buffer will be appended to the audit trail specified by \*Vat\*O.
.LI "\*Voptions\*O"
Bitwise \*LOR\*O of option values described below.  A
value of 0 (zero) for \*Voptions\*O results in the default operation
(normal writing to the file without flushing to stable storage).
The possible option value is
.VL
.LI "\*Laud_c_evt_commit_sync\*O"
Flushes the audit record to stable storage before the function returns.  
.LI "\*Laud_c_evt_always_log\*O"
Unconditionally logs the audit record to the audit trail.
.LI "\*Laud_c_evt_always_alarm\*O"
Unconditionally displays the audit record on the console.
...\" If the storage or audit logging service is not available 
...\" (for example, when the audit trail file is full), the function will keep
...\" on trying until it is able to 
...\" do a successful write to the stable storage.  
...\" .LI "\*Laud_c_evt_commit_sync_no_wait\*O"
...\" Flush the audit record to stable storage.  Returns an error status if the
...\" storage or audit logging service is not available. 
.LE
.LI "\*Vformat\*O"
Event's tail format used for the event-specific information.  
This format can be configured by the user.
With this format
version number, the servers and audit analysis tools can accommodate changes
in the formats of the event specific information, or use different formats
dynamically.
.LI "\*Voutcome\*O"
The event outcome to be stored in the header.  
The possible event-outcome values are as follows:
.VL
.LI "\*Laud_c_esl_cond_success\*O"
The event completed successfully.
.LI "\*Laud_c_esl_cond_denial\*O"
The event failed because of access denial.
.LI "\*Laud_c_esl_cond_failure\*O"
The event failed because of reasons other than access denial.
.LI "\*Laud_c_esl_cond_pending\*O"
The event is in an intermediate state, and the outcome is pending, being one
in a series of connected events, where the application desires to record
the real outcome only after the last event.
.LI "\*Laud_c_esl_cond_unknown\*O"
The event outcome (denial, failure, pending, or success) is not known.
This outcome exists only between a \*Ldce_aud_start(\|)\*O 
(all varieties of this routine) call
and the next \*Ldce_aud_commit(\|)\*O call.
You can also use \*L0\*O to specify this outcome.
.LE
.LE
.SS "Output"
.VL
.LI "\*Vstatus\*O"
Returns the status code from this routine.  This status code
indicates whether the routine completed successfully 
or not.  
If the routine did not complete successfully, 
the reason for the failure is given.
.LE
.nL
.ne 1.5i
.SH "Description"
.PP
The \*Ldce_aud_commit(\|)\*O function determines whether the event should
be audited given the event outcome.  If it should be audited, the function
completes the audit record identified by \*Lard\*O and writes it to the
audit trail designated by \*Lat\*O.  If any of the
\*Laud_c_evt_always_log\*O or
\*Laud_c_evt_always_alarm\*O options is selected, the event is
always audited (logged or an alarm message is sent to the standard output).
.PP
If the \*Laud_c_evt_commit_sync\*O option is selected, the function
attempts to flush the audit record to stable storage.  
If the stable storage
write cannot be performed, the function either continues
to try until the stable-storage write is completed or returns an error status.
.P
Upon successful completion, \*Ldce_aud_commit(\|)\*O calls 
\*Ldce_aud_discard(\|)\*O internally to release the memory 
of the audit record that is being committed.
.P
The caller should not change the outcome between the
\*Ldce_aud_start(\|)\*O and \*Ldce_aud_commit(\|)\*O calls arbitrarily.
In this case, the outcome can be made more specific, for example,
from \*Laud_\%c_\%esl_\%cond_\%unknown\*O to \*Laud_\%c_\%esl_\%cond_\%success\*O 
or from \*Laud_\%c_\%esl_\%cond_\%pending\*O to \*Laud_\%c_\%esl_\%cond_\%success\*O.
.P
An outcome change from \*Laud_c_esl_cond_success\*O to
\*Laud_c_esl_cond_denial\*O is not logically correct because
the outcome \*Laud_c_esl_cond_success\*O may have caused a NULL
\*Vard\*O to be returned in this function.
If the final outcome can be \*Laud_c_esl_cond_success\*O, then it should
be specified in this function, or use \*Laud_c_esl_cond_unknown\*O. 		
.nL
.ne 1.5i
.SH "Return Values"
.PP
No value is returned.
.nL
.ne 1.5i
.SH "Errors"
.PP
The following describes a partial list of errors that might be returned.
Refer to the \*(Tg for complete descriptions of all error
messages.
.VL
.LI "\*Laud_s_wrong_protection_level\*O"
Client used the wrong protection level. 
.LI "\*Laud_s_dmn_disabled\*O
The daemon is disabled for logging.
.LI "\*Laud_s_log_access_denied\*O"
The client's access to the Audit log was denied.
.LI "\*Laud_s_cannot_gettime\*O"
The audit library cannot backup a trail file due to failure of
the \*Lutc_gettime(\|)\*O call.
.LI "\*Laud_s_cannot_getgmtime\*O"
The audit library cannot backup a trail file due to failure of
the \*Lutc_gmtime(\|)\*O call.
.LI "\*Laud_s_rename_trail_file_rc\*O"
Cannot rename the audit trail file.
.LI "\*Laud_s_cannot_reopen_trail_file_rc\*O"
Internally, the audit trail file was being reopened and the reopening of the
file failed.
.LI "\*Laud_s_rename_trail_index_file_rc\*O"
Internally, the audit trail index file was being renamed 
and the renaming of the file failed.
.LI "\*Laud_s_cannot_reopen_trail_index_file_rc\*O"
Internally, the audit trail index file was being reopened 
and the reopening of the file failed.
.LI "\*Laud_s_invalid_record_descriptor\*O"
The audit record descriptor is invalid.
.LI "\*Laud_s_invalid_outcome\*O"
The event outcome parameter that was provided is invalid.
.LI "\*Laud_s_outcomes_inconsistent\*O"
The event outcome parameter is inconsistent with the outcome parameter provided
in the \*Ldce_aud_start(\|)\*O call.
.LI "\*Laud_s_trl_write_failure\*O"
The audit record cannot be written to stable storage.
...\"  This code is
...\" meaningful only when \*Laud_c_evt_commit_sync_no_wait\*O option
...\" (described below) is selected.
.LI "\*Laud_s_ok\*O"
The call was successful.
.LI "Status codes passed from \*Ldce_aud_discard(\|)\*O"
.LI "Status codes passed from \*Lrpc_binding_inq_auth_caller(\|)\*O"
.LI "Status codes passed from \*Ldce_acl_is_client_authorized(\|)\*O"
.LI "Status codes passed from \*Laudit_pickle_dencode_ev_info(\|)\*O (RPC idl compiler)"
.LE
.SH "Related Information"
.PP
.ad l
Functions:
\*Ldce_aud_open(3sec)\*O,
\*Ldce_aud_put_ev_info(3sec)\*O,
\*Ldce_aud_start(3sec)\*O,
\*Ldce_aud_start_with_name(3sec)\*O,
\*Ldce_aud_start_with_pac(3sec)\*O,
\*Ldce_aud_start_with_server_binding(3sec)\*O.
.ad b
