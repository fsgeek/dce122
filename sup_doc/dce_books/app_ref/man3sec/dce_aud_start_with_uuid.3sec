...\" @OSF_COPYRIGHT@
...\" COPYRIGHT NOTICE
...\" Copyright (c) 1990, 1991, 1992, 1993, 1994 Open Software Foundation, Inc.
...\" ALL RIGHTS RESERVED (DCE).  See the file named COPYRIGHT.DCE for
...\" the full copyright text.
...\" 
...\" HISTORY
...\" $Log: dce_aud_start_with_uuid.3sec,v $
...\" Revision 1.1.4.2  1996/11/19  18:56:03  wardr
...\" 	{edit,R1.2.2}
...\" 	Init capped heads and added PDG pointer
...\" 	[1996/11/19  18:49:09  wardr]
...\"
...\" Revision 1.1.4.1  1996/05/13  19:02:47  wardr
...\" 	{enh,R1.2.2}
...\" 	Removed changebars
...\" 	[1996/05/13  18:56:26  wardr]
...\" 
...\" Revision 1.1.2.5  1995/06/15  19:27:16  buckler
...\" 	1.1 edits and Prentice Hall reformat
...\" 	[1995/06/15  15:41:03  buckler]
...\" 
...\" Revision 1.1.2.4  1994/10/20  03:31:06  cruz
...\" 	added status codes, final edits
...\" 	[1994/10/20  03:30:46  cruz]
...\" 
...\" Revision 1.1.2.3  1994/10/06  20:41:44  rrizzo
...\" 	expand copyright
...\" 	[1994/10/06  20:08:14  rrizzo]
...\" 
...\" Revision 1.1.2.2  1994/09/14  13:41:39  cruz
...\" 	Miscellaneous changes.
...\" 	[1994/09/14  13:41:14  cruz]
...\" 
...\" Revision 1.1.2.1  1994/09/09  20:22:32  cruz
...\" 	New Audit API
...\" 	[1994/09/09  19:57:41  cruz]
...\" 
...\" $EndLog$
.TH dce_aud_start_with_uuid 3sec
.SH "Name"
\*Ldce_aud_start_with_uuid\*O -  Determines whether a specified event
should be audited given the client/server UUID and the event outcome
.iX "\*Ldce_aud_start_with_uuid\*O"
.PP
Used by client/server applications which already know the UUIDs of their clients
and wish to avoid the overhead of the audit library acquiring them
.SH "Synopsis"
.sS
\*L#include <dce/audit.h>\*O
.sp .4v
\*Lvoid dce_aud_start_with_uuid(\*O
.nL
	\*Lunsigned32\*O \*Vevent\*L,
.nL
	\*Luuid_t\*O \*Vserver_uuid\*L,
.nL
	\*Luuid_t\*O \*Vclient_uuid\*L,
.nL
	\*Luuid_t\*O \*Vrealm_uuid\*L,
.nL
	\*Lunsigned_char_t *\*O\*V address\*L,
.nL
	\*Lunsigned32\*O \*Voptions\*L,
.nL
	\*Lunsigned32\*O \*Voutcome\*L,
.nL
	\*Ldce_aud_rec_t\*O \*V* ard\*L,
.nL
	\*Lunsigned32 *\*O\*Vstatus\*O\*L);\*O
.sE
.nL
.ne 1.5i
.SH "Parameters"
.SS "Input"
.VL
.LI "\*Vevent\*O"
Specifies the event to be audited.  This is a 32-bit event number.  
The \*Levent\*O field in the audit record header will be set
to this number.
.LI "\*Vserver_uuid\*O"
Specifies the calling application's principal uuid.
.LI "\*Vclient_uuid\*O"
Specifies the remote client/server's principal uuid.
.LI "\*Vrealm_uuid\*O"
Specifies the remote client/server's cell uuid.
.LI "\*Vaddress\*O"
Specifies the remote client/server's address.  The address could be in any
format of the underlying transport protocol.
.LI "\*Voptions\*O"
Specifies the optional header information desired
(\*Laud_c_evt_all_info\*O, \*Laud_c_evt_group_info\*O,
\*Laud_\%c_\%evt_\%address_\%info\*O).
.P
.ne 8
It can also be used to specify any of two options:
to always log an audit record
(\*Laud_c_evt_always_log\*O) or to always send an alarm message to the
standard output (\*Laud_c_evt_always_alarm\*O).  If any of these two
options is selected, the filter is bypassed.
The value of the \*Loptions\*O parameter is the bitwise OR of any
selected combination of the following option values:
.VL
.LI "\*Laud_c_evt_all_info\*O"
Includes all optional information (groups and address) in the audit record 
header.
.LI "\*Laud_c_evt_groups_info\*O"
Includes the groups information in the audit record header.
.LI "\*Laud_c_evt_address_info\*O"
Includes the client address information in the audit record header.
.LI "\*Laud_c_evt_always_log\*O"
Bypasses the filter mechanism and indicates that the event must be logged.
.LI "\*Laud_c_evt_always_alarm\*O"
Bypasses the filter mechanism and indicates that an alarm message must be 
sent to the system console for the event.
.LE
.LI "\*Voutcome\*O"
The event outcome to be stored in the header.  The following event outcome
values are defined:
.VL
.LI "\*Laud_c_esl_cond_unknown\*O" 
The event outcome (denial, failure, or success) is still unknown.
.LI "\*Laud_c_esl_cond_success\*O" 
The event completed successfully.
.LI "\*Laud_c_esl_cond_denial\*O" 
The event failed due to access denial.
.LI "\*Laud_c_esl_cond_failure\*O" 
The event failed due to reasons other than access denial.
.nL
.ne 6
.LI "\*Laud_c_esl_cond_pending\*O" 
The event outcome is pending, being one in a series of connected events,
where the application desires to record the real outcome only after the 
last event.
.LE
.LE
.SS "Output"
.VL
.LI "\*Vard\*O"
Returns a pointer to an audit record buffer.  If the event does not need to
be audited because it is not selected by the filters,
or if the environment variable \*LDCEAUDITOFF\*O has been
set, a NULL pointer is returned.  If the function is called with
\*Voutcome\*O set to \*Laud_c_esl_cond_unknown\*O, it is
possible that the function cannot determine whether the event should be
audited.
In this case, the audit record descriptor is still allocated and its address
is returned to the caller.
An \*Voutcome\*O, different from \*Lunknown\*O, must be provided prior to logging
the record with the \*Ldce_aud_commit(\|)\*O function.
.LI "\*Vstatus\*O"
The status code returned by this routine.
This status code
indicates whether the routine completed successfully or not.
If the routine did not complete successfully, the reason 
for the failure is given.
.LE
.nL
.ne 1.5i
.SH "Description"
.PP
The \*Ldce_aud_start_with_uuid(\|)\*O function determines if an audit record 
must be generated for the specified event.  The decision is based on the event
filters, an environment variable
(\*LDCEAUDITOFF\*O), the client's identity provided in the
input parameters, and the event outcome (if it is provided in
the \*Loutcome\*O parameter).  If this event needs to be audited,
the function allocates an audit record descriptor and returns a pointer to
it, (that is, \*Lard\*O).  If the event does not need to be audited, 
NULL is returned in the \*Vard\*O parameter.
If either the \*Laud_\%c_\%evt_\%always_\%log\*O or \*Laud_c_evt_always_alarm\*O
option is selected, an audit record descriptor will always be
created and returned.
.PP
The \*Ldce_aud_start_with_uuid(\|)\*O function is designed to be used by
RPC applications that know their client's identity in UUID form.
Otherwise, RPC applications should use \*Ldce_aud_start(\|)\*O.
Non-RPC applications that use the DCE authorization model should use
\*Ldce_aud_start_with_pac(\|)\*O.
The \*Ldce_\%aud_\%start_\%with_\%name(\|)\*O function should be used by non-RPC
applications that do not use the DCE authorization model.
.PP
This function records the input identity parameters 
in the newly-created audit record descriptor.
.PP
.ne 8
Event-specific information can be added to the record by using
the \*Ldce_aud_put_ev_info(\|)\*O function,
which can be called multiple times after calling 
any of the \*Ldce_aud_start_\*V*\*O and before calling
\*Ldce_aud_commit(\|)\*O.  A completed audit record can either be appended
to an audit trail file or sent to the audit daemon by
calling \*Ldce_aud_commit(\|)\*O.
.P
This function searches for all relevant filters (for the specified
subject and outcome, if these are specified), summarizes the actions
for each possible event outcome, and records an outcome-action
table with \*Vard\*O.
If the outcome is specified when calling this function and the outcome
does not require any action according to filters, then this function
returns a NULL \*Vard\*O.
.P
If the \*Voutcome\*O is not specified in the 
\*Ldce_aud_start_with_uuid(\|)\*O call, 
\*Ldce_aud_start_with_uuid(\|)\*O returns a NULL
\*Vard\*O if no action is required for all possible outcomes.
.P
The caller should not change the outcome between the
\*Ldce_\%aud_\%start_\%with_\%uuid(\|)\*O and \*Ldce_aud_commit(\|)\*O calls arbitrarily.
In this case, the outcome can be made more specific, for example,
from \*Laud_\%c_\%esl_\%cond_\%unknown\*O to \*Laud_\%c_\%esl_\%cond_\%success\*O 
or from \*Laud_\%c_\%esl_\%cond_\%pending\*O to \*Laud_\%c_\%esl_\%cond_\%success\*O.
.P
An outcome change from \*Laud_c_esl_cond_success\*O to
\*Laud_c_esl_cond_denial\*O is not logically correct because
the outcome \*Laud_c_esl_cond_success\*O may have caused a NULL
\*Vard\*O to be returned in this function.
If the final outcome can be \*Laud_c_esl_cond_success\*O, then it should
be specified in this function, or use \*Laud_c_esl_cond_unknown\*O. 		
.P
This function can be called with the \*Voutcome\*O parameter taking a value
of zero or the union (logical OR) of selected values from the set of
constants \*Laud_c_esl_cond_success\*O, \*Laud_c_esl_cond_failure\*O,
\*Laud_c_esl_cond_denial\*O, and \*Laud_c_esl_cond_pending\*O.
The \*Voutcome\*O parameter used in the \*Ldce_\%aud_\%commit(\|)\*O function
should take one value from the same set of constants.
.P
If \*Ldce_aud_start_with_uuid(\|)\*O 
used a nonzero value for \*Voutcome\*O, then the
constant used for \*Voutcome\*O in the \*Ldce_aud_commit(\|)\*O call should
have been selected in the \*Ldce_aud_start_with_uuid(\|)\*O call.
.nL
.ne 1.5i
.SH "Return Values"
No value is returned.
.nL
.ne 1.5i
.SH "Errors"
.PP
The following describes a partial list of errors that might be returned.
Refer to the \*(Tg for complete descriptions of all error
messages.
.VL
.LI "\*Laud_s_ok\*O" 
The call was successful.
.LI "Status codes passed from \*Ldce_aud_start_with_pac(\|)\*O"
.LE
.SH "Related Information"
.PP
.ad l
Functions:
\*Ldce_aud_commit(3sec)\*O,
\*Ldce_aud_open(3sec)\*O,
\*Ldce_aud_put_ev_info(3sec)\*O,
\*Ldce_aud_start(3sec)\*O,
\*Ldce_aud_start_with_name(3sec)\*O,
\*Ldce_aud_start_with_pac(3sec)\*O,
\*Ldce_aud_start_with_server_binding(3sec)\*O.
.ad b
