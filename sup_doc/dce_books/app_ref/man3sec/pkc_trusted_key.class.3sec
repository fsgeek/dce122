...\" COPYRIGHT NOTICE
...\" Copyright (c) 1990-1996 Open Software Foundation, Inc. 
...\" ALL RIGHTS RESERVED (DCE). See the file named COPYRIGHT.DCE in the 
...\" src directory for the full copyright text. 
...\" 
...\" 
...\" HISTORY
...\" $Log: pkc_trusted_key.class.3sec,v $
...\" Revision 1.1.2.5  1996/12/20  22:00:29  weir
...\" 	Final updates
...\" 	[1996/12/20  21:58:59  weir]
...\"
...\" Revision 1.1.2.4  1996/12/17  20:11:58  damon
...\" 	Expanded OSF C O P Y R I G H T   N O T I C E
...\" 	[1996/12/17  20:09:07  damon]
...\" 
...\" Revision 1.1.2.3  1996/11/19  18:57:26  wardr
...\" 	{edit,R1.2.2}
...\" 	Init capped heads and added PDG pointer
...\" 	[1996/11/19  18:50:33  wardr]
...\" 
...\" Revision 1.1.2.2  1996/11/18  19:58:36  weir
...\" 	No change
...\" 	[1996/11/18  19:55:56  weir]
...\" 
...\" Revision 1.1.2.1  1996/10/15  21:11:29  weir
...\" 	Initial submission
...\" 	[1996/10/15  21:09:49  weir]
...\" 
...\" $EndLog$
...\" 
...\" 
...\" 
...\" 
.TH  pkc_trusted_key.class 3sec
...\" 
.SH "Name"
\*Lpkc_trusted_key_t\*O - Trusted public key class
...\" 
...\" 
.nL
...\" 
.ne 1.5i
...\" 
...\" 
.SH "Member Data"
...\" 
.SS "Public"
.ML
.LI
\*LSubjectPublicKeyInfo value\*O
.LI
\*Lx500name owner\*O
.LE
...\" 
...\" .SS "Protected"
...\" 
...\" .ML
...\" .LI
...\" Fields from the certificate:
...\" .ML
...\" .LI
...\" \*Lutc_t start_date\*O
...\" .LI
...\" \*Lutc_t end_date\*O
...\" .LI
...\" \*Lpkc_ca_key_usage_t ca_usages\*O
...\" .LI
...\" \*Lpkc_key_usage_t user_usages\*O
...\" .LI
...\" \*Lpkc_key_policies_t policies\*O
...\" .LI
...\" \*Lpkc_constraints_t constraints\*O
...\" .LE
...\" 
...\" 
...\" .LI
...\" Flags:
...\" 
...\" .ML
...\" .LI
...\" \*Lchar trusted\*O
...\" .PP
...\" Is this entry trusted (a-priori)?
...\" 
...\" .LI
...\" \*Lchar certified\*O
...\" .PP
...\" Is it certified by another entry?
...\" 
...\" .LI
...\" \*Lx500name certified_by\*O
...\" .PP
...\" Name of the CA that certified this key.
...\" 
...\" .LI
...\" \*Lasn_integer serial_number\*O
...\" .PP
...\" Serial no of certifying certificate 
...\" 
...\" .LE
...\" 
...\" 
...\" .LI
...\" The following fields are copied from the certifying key entry:
...\" 
...\" .ML
...\" .LI
...\" \*Lutc_t certified_start_date\*O
...\" .LI
...\" \*Lutc_t certified_end_date\*O
...\" .LI
...\" \*Lpkc_ca_key_usage_t certified_usages\*O
...\" .LI
...\" \*Lpkc_key_policies_t certified_policies\*O
...\" .LI
...\" \*Lpkc_constraints_t certified_constraints\*O
...\" .LI
...\" \*Lchar revoked\*O
...\" .PP
...\" Non-zero if the certifying certificate has been revoked
...\" 
...\" .LI
...\" \*Lutc_t revocation_date\*O
...\" .PP
...\" Date from which certifier revocation is effective.
...\" 
...\" .LI
...\" \*Lunsigned long key_id\*O
...\" .PP
...\" An ID identifying this Key entry
...\" 
...\" .LI
...\" \*Lunsigned long ca_key_id\*O
...\" .PP
...\" The ID of the key that certified this one. Value of ``0''
...\" means direct trust.
...\" 
...\" .LI
...\" \*Lunsigned long old_key_id\*O
...\" .PP
...\" Temporary storage for use while copying.
...\" 
...\" .LI
...\" \*Lunsigned long old_ca_key_id\*O
...\" 
...\" 
...\" .LE
...\" 
...\" .LE
...\" 
...\" 
.SH "Member Functions"
...\" 
.SS "Public"
...\" 
.ML
.LI
pkc_trusted_key_t(void)\*O
...\" 
.LI
\*Lpkc_trusted_key_t(\|)\*O
.PP
Takes following arguments:
.ML
.LI
\*Lutc_t startDate\*O
.LI
\*Lutc_t endDate\*O
.LI
\*Lpkc_ca_key_usage_t caUsages\*O
.LI
\*Lpkc_key_usage_t userUsages\*O
.LI
\*Lpkc_key_policies_t keyPolicies\*O
.LI
\*Lpkc_constraints_t keyConstraints\*O
.LE
...\" 
...\" 
.LI
\*Lunsigned32 get_start_date(\|) const\*O
.PP
Takes the following argument:
.ML
.LI
\*Lutc_t * start_date\*O
.LE
...\" 
.LI
\*Lunsigned32 get_end_date(\|) const\*O
.PP
Takes the following argument:
.ML
.LI
\*Lutc_t * end_date\*O
.LE
...\" 
.LI
\*Lunsigned32 get_usages(\|) const\*O
.PP
Takes the following argument:
.ML
.LI
\*Lpkc_key_usage_t * user_usages\*O
.LE
...\" 
.LI
\*Lunsigned32 get_ca_usages(\|) const\*O
.PP
Takes the following argument:
.ML
.LI
\*Lpkc_ca_key_usage_t * ca_usages\*O
.LE
...\" 
.LI
\*Lunsigned32 get_key_policies(\|) const\*O
.PP
Takes the following argument:
.ML
.LI
\*Lpkc_key_policies_t * policies\*O
.LE
...\" 
.LI
\*Lunsigned32 get_constraints(\|) const\*O
.PP
Takes the following argument:
.ML
.LI
\*Lpkc_constraints_t * constraints\*O
.LE
...\" 
.LI
\*Lunsigned32 get_certifier(\|) const\*O
.PP
Takes the following argument:
.ML
.LI
\*Lx500name & name\*O
.LE
...\" 
.LI
\*Lunsigned32 get_certifier(\|) const\*O
.PP
Takes the following argument:
.ML
.LI
\*Lpkc_trusted_key_t ** ca\*O
.LE
...\" 
.LI
\*Lchar valid_at(\|) const\*O
.PP
Takes the following argument:
.ML
.LI
\*Lutc_t * time\*O
.LE
...\" 
.LI
\*Lpkc_trusted_key_t & operator = (const pkc_trusted_key_t & o)\*O
...\" 
.LI
\*Lchar may_certify(\|) const\*O
.PP
Takes the following arguments:
.ML
.LI
\*Lconst x500name & subject\*O
.LI
\*Lunsigned long usage =
.nL
PKC_CAKEY_USAGE_KEY_CERT_SIGN\*O
.LE
...\" 
.LI
\*Lchar may_certify(\|) const\*O
.PP
Takes the following arguments:
.ML
.LI
\*Lconst x500name & subject\*O
.LI
\*Lconst pkc_ca_key_usage_t & usage\*O
.LE
...\" 
.LE
...\" 
...\" 
.LE
...\" 
.nL
.ne 1.5i
...\" 
.SH "Description"
.PP
\*Lpkc_trusted_key_t\*O is a class that expresses trust in a public key.
It is very much like a certificate, but with trust pre-established, rather
than based on a signature.
.PP
This class has the \*Lfriend\*O class \*Lpkc_trust_list_t\*O.
.VL "\*LNote:\*O"
The certificate manipulation routines are a C++ interface. C++ must be
used to perform direct certificate manipulation.
.LE
...\" 
...\" 
...\" 
.ne 1.5i
...\" 
.SH "Related Information"
.PP
.ad l
Classes:
\*Lpkc_ca_key_usage.class(3sec)\*O,
\*Lpkc_constraints.class(3sec)\*O,
\*Lpkc_generic_key_usage.class(3sec)\*O,
\*Lpkc_key_policies.class(3sec)\*O,
\*Lpkc_key_policy.class(3sec)\*O,
\*Lpkc_key_usage.class(3sec)\*O,
\*Lpkc_name_subord_constraint.class(3sec)\*O,
\*Lpkc_name_subord_constraints.class(3sec)\*O,
\*Lpkc_name_subtree_constraint.class(3sec)\*O,
\*Lpkc_name_subtree_constraints.class(3sec)\*O,
\*Lpkc_pending_revocation.class(3sec)\*O,
\*Lpkc_revocation.class(3sec)\*O,
\*Lpkc_revocation_list.class(3sec)\*O,
\*Lpkc_trust_list.class(3sec)\*O,
\*Lpkc_trust_list_element.class(3sec)\*O.
.PP
Functions:
\*Lpkc_add_trusted_key(3sec)\*O,
\*Lpkc_lookup_keys_in_trustlist(3sec)\*O,
\*Lpkc_lookup_key_in_trustlist(3sec)\*O,
\*Lpkc_check_cert_against_trustlist(3sec)\*O,
\*Lpkc_revoke_certificate(3sec)\*O,
\*Lpkc_revoke_certificates(3sec)\*O,
\*Lpkc_prune_trustlist(3sec)\*O,
\*Lpkc_delete_trustlist(3sec)\*O,
\*Lpkc_copy_trustlist(3sec)\*O.
.ad b 
...\" 
...\" 
...\" 
...\" 
...\" class pkc_trusted_key_t {
...\" friend class pkc_trust_list_t;
...\" // A class that expresses trust in a public-key.  Very much like a certificate,
...\" // but with trust pre-established, rather than based on a signature.
...\" 
...\" friend unsigned32 pkc_add_trusted_key(
...\"                          pkc_trust_list_t * trust_list,
...\"                          const pkc_trusted_key_t & key);
...\" // Adds a key to a trustlist.
...\" 
...\" friend unsigned32 pkc_lookup_keys_in_trustlist(
...\"                          pkc_trust_list_t * trust_list,
...\"                          const pkc_trusted_key_t ** key,
...\"                          size_t * key_count,
...\"                          const x500name & owner,
...\"                          utc_t * key_time,
...\"                          const pkc_generic_key_usage_t * usages);
...\" // Retrieves keys for the specified principal for the specified usages 
...\" // that are valid at the specified time.  If usages is NULL, keys for any 
...\" // usage are returned; if key-time is NULL, keys for the current time are 
...\" // returned.
...\" 
...\" friend unsigned32 pkc_lookup_key_in_trustlist(
...\"                          pkc_trust_list_t * trust_list,
...\"                          const pkc_trusted_key_t ** key,
...\" 			 unsigned long key_id);
...\" // Retrieves the specified key by index.
...\" 
...\" friend unsigned32 pkc_check_cert_against_trustlist(
...\"                          pkc_trust_list_t * trust_list,
...\"                          const Certificate * cert,
...\"                          int revoked_certs_permitted);
...\" // Attempt to add a certificate to a trust-list.  The routine will succeed only
...\" // if the trust-list contains a key that can be used to verify the certificate.
...\" // revoked_certs_permitted specifies whether it is permissible to add a 
...\" // certificate that appears on a verified CRL if there is a "window of validity"
...\" // between the verifying key's start-time and its revocation time.
...\" 
...\" //friend unsigned32 pkc_lookup_cert_in_trustlist(
...\" //                         pkc_trust_list_t * trust_list,
...\" //                         const pkc_trusted_key_t ** key,
...\" //                         const x500name & issuer,
...\" //			 const asn_integer & serial_number,
...\" //                         trust_list_);
...\" 
...\" friend unsigned32 pkc_revoke_certificate(pkc_trust_list_t * trust_list,
...\"                                          const x500name & issued_by,
...\"                                          const asn_integer & serial_no,
...\"                                          utc_t * invalidate_from);
...\" // Revoke a single certificate.
...\" 
...\" friend unsigned32 pkc_revoke_certificates(pkc_trust_list_t * trust_list,
...\"                                           const SignedCertificateList * crl);
...\" // Revoke certificates based on a CRL.  If the signature on the CRL can
...\" // be verified, it will be processed immediately.  If not, it will be saved
...\" // and each certificate subsequently added will attempt to verify the
...\" // CRL.  As soon as the CRL can be verified it will be applied.
...\" 
...\" friend unsigned32 pkc_prune_trustlist(pkc_trust_list_t * trust_list,
...\"                          const utc_t * prune_before);
...\" // Remove certificates that have expired at the given date (NULL means now).
...\" 
...\" friend unsigned32 pkc_delete_trustlist(pkc_trust_list_t * trust_list);
...\" // Delete a trust-list.
...\" 
...\" friend unsigned32 pkc_copy_trustlist(
...\"                          const pkc_trust_list_t * input_trust_list,
...\"                          pkc_trust_list_t * output_trust_list);
...\" // Copy a trust-list.
...\" 
...\" 
...\" protected:
...\" // Fields from the certificate:
...\"     utc_t start_date;
...\"     utc_t end_date;
...\"     pkc_ca_key_usage_t ca_usages;
...\"     pkc_key_usage_t user_usages;
...\"     pkc_key_policies_t policies;
...\"     pkc_constraints_t constraints;
...\" 
...\" // Flags.  
...\" // Is this entry trusted (a-priori)?
...\"     char trusted;
...\" // Is it certified by another entry?
...\"     char certified;
...\" 
...\"     x500name certified_by;	// Name of the CA that certified this key.
...\"     asn_integer serial_number;	// Serial no of certifying certificate 
...\" 
...\" // The following fields are copied from the certifying key entry
...\"     utc_t certified_start_date;
...\"     utc_t certified_end_date;
...\" 
...\"     pkc_ca_key_usage_t certified_usages;
...\"     pkc_key_policies_t certified_policies;
...\"     pkc_constraints_t certified_constraints;
...\" 
...\"     char revoked; // non-zero if the certifying certificate 
...\"                   // has been revoked
...\"     utc_t revocation_date; // Date from which certifier revocation 
...\"                            // is effective.
...\" 
...\" 
...\"     unsigned long key_id;	// An ID identifying this Key entry
...\"     unsigned long ca_key_id;    // The ID of the key that certified this one.
...\"                                 // 0 means direct trust.
...\" 
...\"     unsigned long old_key_id;	// Temporary storage for use while copying
...\"     unsigned long old_ca_key_id;    
...\" 
...\" public:
...\" 
...\"     SubjectPublicKeyInfo value;  /* mbg */
...\"     x500name owner;
...\" 
...\"     pkc_trusted_key_t(void);
...\"     pkc_trusted_key_t(utc_t startDate,
...\"                       utc_t endDate,
...\"                       pkc_ca_key_usage_t caUsages,
...\"                       pkc_key_usage_t userUsages,
...\"                       pkc_key_policies_t keyPolicies,
...\"                       pkc_constraints_t keyConstraints);
...\"     unsigned32 get_start_date(utc_t * start_date) const;
...\"     unsigned32 get_end_date(utc_t * start_date) const;
...\"     unsigned32 get_usages(pkc_key_usage_t * user_usages) const;
...\"     unsigned32 get_ca_usages(pkc_ca_key_usage_t * ca_usages) const;
...\"     unsigned32 get_key_policies(pkc_key_policies_t * policies) const;
...\"     unsigned32 get_constraints(pkc_constraints_t * constraints) const;
...\"     unsigned32 get_certifier(x500name & name) const;
...\"     unsigned32 get_certifier(pkc_trusted_key_t ** ca) const;
...\"     char valid_at(utc_t * time) const;
...\" 
...\"     pkc_trusted_key_t & operator = (const pkc_trusted_key_t & o);
...\" 
...\"     char may_certify(
...\"             const x500name & subject, 
...\"             unsigned long usage = PKC_CAKEY_USAGE_KEY_CERT_SIGN) const;
...\" 
...\"     char may_certify(
...\"             const x500name & subject, 
...\"             const pkc_ca_key_usage_t & usage) const;
...\" 
...\" };
...\" 
...\" 
