...\" COPYRIGHT NOTICE
...\" Copyright (c) 1990-1996 Open Software Foundation, Inc. 
...\" ALL RIGHTS RESERVED (DCE). See the file named COPYRIGHT.DCE in the 
...\" src directory for the full copyright text. 
...\" 
...\" 
...\" HISTORY
...\" $Log: pkc_append_to_trustlist.3sec,v $
...\" Revision 1.1.2.5  1996/12/20  21:59:31  weir
...\" 	Final updates
...\" 	[1996/12/20  21:58:04  weir]
...\"
...\" Revision 1.1.2.4  1996/12/17  20:11:03  damon
...\" 	Expanded OSF C O P Y R I G H T   N O T I C E
...\" 	[1996/12/17  20:08:15  damon]
...\" 
...\" Revision 1.1.2.3  1996/11/19  18:56:35  wardr
...\" 	{edit,R1.2.2}
...\" 	Init capped heads and added PDG pointer
...\" 	[1996/11/19  18:49:40  wardr]
...\" 
...\" Revision 1.1.2.2  1996/11/18  19:57:08  weir
...\" 	No change
...\" 	[1996/11/18  19:55:05  weir]
...\" 
...\" Revision 1.1.2.1  1996/10/15  21:10:25  weir
...\" 	Initial submission
...\" 	[1996/10/15  21:09:06  weir]
...\" 
...\" $EndLog$
...\" 
...\" 
...\" 
...\" 
.TH pkc_append_to_trustlist 3sec
...\" 
.SH "Name"
\*Lpkc_append_to_trustlist\*O - Appends one or more items to trust list
...\" 
...\" 
.SH "Synopsis"
.sS
\*L#include <pkc_api.h>\*O
.sp .4v
\*Lunsigned32 pkc_append_to_trustlist(\*O
.nL
	\*Ltrustlist_t ** \*Vtr_list\*L,
.nL
	\*Ltrustitem_t * \*Vtr_item\*L,
.nL
	\*Lsize_t \*Vno_of_tr_items\*L);
.sE
.nL
...\" 
.ne 1.5i
...\" 
...\" 
...\" 
...\" 
.SH "Parameters"
...\" 
.SS "Input"
...\" 
.VL
.LI "\*Vtr_list\*O"
Specifies trust list to which item(s) are to be appended.
...\" 
.LI "\*Vtr_item\*O"
Specifies item(s) to append to trust list.
...\" 
.LI "\*Vno_of_tr_items\*O"
Specifies number of items to append.
...\" 
.LE
...\" 
...\" 
.nL
.ne 1.5i
...\" 
.SH "Description"
.PP
\*Lpkc_append_to_trustlist(3sec)\*O appends one or more items to a trust
list (a \*Lpkc_trust_list_t\*O, pointed to by \*L(*tr_list)->handle\*O).
.PP
If the trust list is invalid, \*Lpkc_s_bad_param\*O
is returned.
...\" 
...\" .PP
...\" If \*Vtr_list\*O is \*Lnil\*O or \*L(*\*Vtr_list\*L)->handle\*O
...\" is \*Lnil\*O, \*Lpkc_s_asn_bad_param\*O is returned.
...\" .PP
...\" If \*L(*\*Vtr_list\*L)->handle\*O is non-\*Lnil\*O, it points to an existing
...\" \*Lpkc_trust_list_t\*O; in this case, in \*L(*\*Vtr_list\*L)->handle\*O
...\" a new trust list is returned containing the old trust list items, plus the
...\" new ones given by \*Vtr_item\*O and \*Vno_of_tr_items\*O.
...\" 
...\" .PP
...\" Any status other than \*Lpkc_s_success\*O indicates the call failed.
...\" 
...\" 
...\" 
.ne 1.5i
.SH "Return Values"
.VL 1i
.LI "\*Lpkc_s_success\*O"
Operation successfully completed.
...\" 
.LE
...\" 
...\" 
...\" 
...\" 
...\" 
.nL 
...\" 
.ne 1.5i
.SH "Errors"
.PP
Refer to the \*EOSF DCE Problem Determination Guide\*O for
complete descriptions of all error messages.
...\" 
...\" 
...\" 
.SH "Related Information"
.PP
.ad l
Functions:
\*Lpkc_intro(3sec)\*O,
\*Lpkc_free(3sec)\*O,
\*Lpkc_free_keyinfo(3sec)\*O,
\*Lpkc_free_trustbase(3sec)\*O,
\*Lpkc_free_trustlist(3sec)\*O,
\*Lpkc_get_key_certifier_count(3sec)\*O,
\*Lpkc_get_key_certifier_info(3sec)\*O,
\*Lpkc_get_key_count(3sec)\*O,
\*Lpkc_get_key_data(3sec)\*O,
\*Lpkc_get_key_trust_info(3sec)\*O,
\*Lpkc_get_registered_policies(3sec)\*O,
\*Lpkc_init_trustbase(3sec)\*O,
\*Lpkc_init_trustlist(3sec)\*O,
\*Lpkc_retrieve_keyinfo(3sec)\*O,
\*Lpkc_retrieve_keylist(3sec)\*O.
.ad b 
...\" 
...\" 
...\" 
...\" /*
...\"  * Function pkc_append_to_trustlist:
...\"  * Appends to pkc_trust_list_t (pointed by (*tr_list)->handle)
...\"  *    1. If tr_list is (nil) or (*tr_list)->handle 
...\"  *       is nil, pkc_s_asn_bad_param is returned.
...\"  *    3. If (*tr_list)->handle is non-nil, it points to an existing
...\"  *       pkc_trust_list_t; in this case, we return in
...\"  *       (*tr_list)->handle a new trust list with the old trust list
...\"  *       items, plust the new ones given by tr_item & no_of_tr_items.
...\"  *       Any other status other than pkc_s_success indicates 
...\"  *       we failed.
...\"  */
...\"  
...\" 
...\" unsigned32 pkc_append_to_trustlist 
...\"   (trustlist_t **tr_list, trustitem_t *tr_item, size_t no_of_tr_items);
...\" 
...\" 
...\" 
