...\" COPYRIGHT NOTICE
...\" Copyright (c) 1990-1996 Open Software Foundation, Inc. 
...\" ALL RIGHTS RESERVED (DCE). See the file named COPYRIGHT.DCE in the 
...\" src directory for the full copyright text. 
...\" 
...\" 
...\" HISTORY
...\" $Log: pkc_trust_list_element.class.3sec,v $
...\" Revision 1.1.2.5  1996/12/20  22:00:28  weir
...\" 	Final updates
...\" 	[1996/12/20  21:58:58  weir]
...\"
...\" Revision 1.1.2.4  1996/12/17  20:11:57  damon
...\" 	Expanded OSF C O P Y R I G H T   N O T I C E
...\" 	[1996/12/17  20:09:06  damon]
...\" 
...\" Revision 1.1.2.3  1996/11/19  18:57:25  wardr
...\" 	{edit,R1.2.2}
...\" 	Init capped heads and added PDG pointer
...\" 	[1996/11/19  18:50:32  wardr]
...\" 
...\" Revision 1.1.2.2  1996/11/18  19:58:34  weir
...\" 	No change
...\" 	[1996/11/18  19:55:55  weir]
...\" 
...\" Revision 1.1.2.1  1996/10/15  21:11:28  weir
...\" 	Initial submission
...\" 	[1996/10/15  21:09:49  weir]
...\" 
...\" $EndLog$
...\" 
...\" 
...\" 
...\" 
.TH pkc_trust_list_element.class 3sec
...\" 
.SH "Name"
\*Lpkc_trust_list_element_t\*O - Public key class
...\" 
...\" 
.nL
...\" 
.ne 1.5i
...\" 
...\" 
.SH "Member Data"
...\" 
.SS "Public"
.ML
.LI
\*Lpkc_trust_list_element_t * next\*O
.LI
\*Lpkc_trust_list_element_t * prev\*O
.LE
...\" 
...\" .SS "Private"
...\" .ML
...\" .LI
...\" \*Lpkc_trust_list_t * root\*O
...\" .LE
...\" 
...\" 
...\" 
.SH "Member Functions"
...\" 
.SS "Public"
...\" 
.ML
.LI
\*Lvoid unlink(void)\*O
...\" 
.LI
\*Lpkc_trust_list_element_t(\|)\*O
.PP
Takes the following argument:
.ML
.LI
\*Lpkc_trust_list_t & the_root\*O
.LE
...\" 
...\" 
.LI
\*Lpkc_trust_list_element_t()\*O
.PP
Takes the following arguments:
.ML
.LI
\*Lpkc_trust_list_t & the_root\*O
.LI
\*Lutc_t startDate\*O
.LI
\*Lutc_t endDate\*O
.LI
\*Lpkc_ca_key_usage_t caUsages\*O
.LI
\*Lpkc_key_usage_t userUsages\*O
.LI
\*Lpkc_key_policies_t keyPolicies\*O
.LI
\*Lpkc_constraints_t keyConstraints\*O
.LE
...\" 
...\" 
.LI
\*Lvirtual ~pkc_trust_list_element_t(\|)\*O
...\" 
.LI
\*Lunsigned32 apply_revocation(\|)\*O
.PP
Apply a revocation to this key, starting at the specified date.
If revocation_date is NULL, the key is completely revoked:
this key, and all keys dependent on it will be revoked. Takes
the following argument:
.ML
.LI
\*Lutc_t * revocation_date\*O
.LE
...\" 
...\" 
.LE
...\" 
...\" .SS "Private"
...\" 
...\" .ML
...\" .LI
...\" \*Lpkc_trust_list_element_t & operator = 
...\" (const pkc_trust_list_element_t & o) {return *this;}\*O
...\" 
...\" 
...\" .LE
...\" 
.nL
.ne 1.5i
...\" 
.SH "Description"
.PP
\*Lpkc_trust_list_element_t\*O defines a key.
.VL "\*LNote:\*O"
The certificate manipulation routines are a C++ interface. C++ must be
used to perform direct certificate manipulation.
.LE
...\" 
...\" 
.SH "Parent Class"
.PP
This class is derived from the \*Lpkc_trusted_key_t\*O class. It has as
\*Lfriend\*O class \*Lpkc_trust_list_t\*O (a list of trusted keys).
...\" 
...\" 
...\" 
.ne 1.5i
...\" 
.SH "Related Information"
.PP
.ad l
Classes:
\*Lpkc_ca_key_usage.class(3sec)\*O,
\*Lpkc_constraints.class(3sec)\*O,
\*Lpkc_generic_key_usage.class(3sec)\*O,
\*Lpkc_key_policies.class(3sec)\*O,
\*Lpkc_key_policy.class(3sec)\*O,
\*Lpkc_key_usage.class(3sec)\*O,
\*Lpkc_name_subord_constraint.class(3sec)\*O,
\*Lpkc_name_subord_constraints.class(3sec)\*O,
\*Lpkc_name_subtree_constraint.class(3sec)\*O,
\*Lpkc_name_subtree_constraints.class(3sec)\*O,
\*Lpkc_pending_revocation.class(3sec)\*O,
\*Lpkc_revocation.class(3sec)\*O,
\*Lpkc_revocation_list.class(3sec)\*O,
\*Lpkc_trust_list.class(3sec)\*O,
\*Lpkc_trusted_key.class(3sec)\*O.
.ad b 
...\" 
...\" 
...\" 
...\" class pkc_trust_list_element_t : public pkc_trusted_key_t {
...\" friend class pkc_trust_list_t;
...\" // A list of trusted keys.
...\" private:
...\"     pkc_trust_list_element_t & operator = 
...\"                       (const pkc_trust_list_element_t & o) {return *this;};
...\" private:
...\"     pkc_trust_list_t * root;
...\" public:
...\"     pkc_trust_list_element_t * next;
...\"     pkc_trust_list_element_t * prev;
...\"     void unlink(void);
...\"     pkc_trust_list_element_t(pkc_trust_list_t & the_root);
...\"     pkc_trust_list_element_t(pkc_trust_list_t & the_root, 
...\"                              utc_t startDate,
...\"                              utc_t endDate,
...\"                              pkc_ca_key_usage_t caUsages,
...\"                              pkc_key_usage_t userUsages,
...\"                              pkc_key_policies_t keyPolicies,
...\"                              pkc_constraints_t keyConstraints);
...\"     virtual ~pkc_trust_list_element_t();
...\"     unsigned32 apply_revocation(utc_t * revocation_date);
...\" // Apply a revocation to this key, starting at the specified date.
...\" // If revocation_date is NULL, the key is completely revoked.
...\" // This key, and all keys dependent on it will be revoked.
...\" };
...\" 
...\" 
...\" 
...\" 
