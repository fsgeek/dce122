...\" @OSF_COPYRIGHT@
...\" COPYRIGHT NOTICE
...\" Copyright (c) 1990, 1991, 1992, 1993, 1994 Open Software Foundation, Inc.
...\" ALL RIGHTS RESERVED (DCE).  See the file named COPYRIGHT.DCE for
...\" the full copyright text.
...\" 
...\" 
...\" HISTORY
...\" $Log: xom_intro.3xom,v $
...\" Revision 1.1.4.2  1996/11/22  16:50:57  wardr
...\" 	{edit,R1.2.2}
...\" 	Fixed bookdef macro
...\" 	[1996/11/22  16:44:15  wardr]
...\"
...\" Revision 1.1.4.1  1996/11/20  19:22:42  wardr
...\" 	{edit,R1.2.2}
...\" 	Init capped heads and added PDG pointer
...\" 	[1996/11/20  19:22:01  wardr]
...\" 
...\" Revision 1.1.2.7  1995/06/21  13:23:27  buckler
...\" 	More 1.1 edits.
...\" 	[1995/06/19  20:34:24  buckler]
...\" 
...\" Revision 1.1.2.6  1995/06/07  22:59:38  buckler
...\" 	1.1 edits and Prentice Hall format
...\" 	[1995/06/07  22:58:59  buckler]
...\" 
...\" Revision 1.1.2.5  1994/09/08  18:17:29  rnollman
...\" 	[rnollman] - updated input/output/return code parms from Dubloiin
...\" 	[1994/09/08  18:09:31  rnollman]
...\" 
...\" Revision 1.1.2.4  1994/08/05  18:01:18  rnollman
...\" 	[rnollman] - checkin after incorporating OSF edits
...\" 	[1994/08/05  18:00:10  rnollman]
...\" 
...\" Revision 1.1.2.3  1994/06/13  17:12:53  devobj
...\" 	cr10872 - fix copyright
...\" 	[1994/06/13  16:51:06  devobj]
...\" 
...\" Revision 1.1.2.2  1994/05/13  17:43:56  rnollman
...\" 	final update for beta
...\" 	[1994/05/13  17:43:43  rnollman]
...\" 
...\" Revision 1.1.2.1  1994/04/11  20:37:16  rom
...\" 	{def, 10326, R1.1}
...\" 	Rename intro.3xom to xom_intro.3xom.
...\" 	[1994/04/11  20:06:41  rom]
...\" 
...\" $EndLog$
...\"
...\" (c) Copyright 1991, Open Software Foundation, Inc.  ALL RIGHTS RESERVED
...\" (c) Copyright 1991, Open Software Foundation, Inc.  ALL RIGHTS RESERVED
...\" /*****************************************************************
...\" *                                                                *
...\" * COPYRIGHT   (C)  SIEMENS NIXDORF INFORMATIONSSYSTEME AG 1994   *
...\" *                  ALL RIGHTS RESERVED                           *
...\" *                                                                *
...\" *****************************************************************/
.TH xom_intro 3xom
.SH "Name"
\*Lxom_intro\*O - Introduction to X/OPEN OSI-Abstract-Data Manipulation
(XOM) functions
.SH "Synopsis"
.sS
\*L#include <xom.h>\*O
.nL
\*L#include <xomext.h>\*O
.sE
.nL
.ne 1.5i
.SH "Description"
This \*Lxom_intro\*O reference page defines the functions of the C interface.
The following table lists the relevant functions.
.PP
.ne 20
.in -.5i
.TS
center,allbox,tab(#);
cb s
lB | lB
lB | l.
Service Interface Functions\(emxom_intro(3xom)
_
Function#Description
_
omX_extract(\|)#Get attribute values from specified object
omX_fill(\|)#Initialize an OM_descriptor structure
omX_fill_oid(\|)#Initialize an OM_descriptor with an OID value
omX_object_to_string(\|)#Convert an OM_object to string format
omX_string_to_object(\|)#Convert a string to OM_object
om_copy(\|)#Copies a private object.
om_copy_value(\|)#Copies a string between private objects.
om_create(\|)#Creates a private object.
om_decode(\|)#This function is not supported by the DCE XOM interface,
#and returns with an \*LOM_FUNCTION_DECLINED\*O error.
om_delete(\|)#Deletes a private or service-generated object.
om_encode(\|)#This function is not supported by the DCE XOM interface,
#and returns with an \*LOM_FUNCTION_DECLINED\*O error.
om_get(\|)#Gets copies of attribute values from a private object.
om_instance(\|)#Tests an object's class.
om_put(\|)#Puts attribute values into a private object.
om_read(\|)#Reads a segment of a string in a private object.
om_remove(\|)#Removes attribute values from a private object.
om_write(\|)#Writes a segment of a string into a private object.
.TE
.in
.nL
.ne 9
.PP
As indicated in the table, the service interface comprises a number
.iX "service interface (xom)"
of functions whose purpose and range of capabilities are summarized as follows:
.PP
.VL
.LI "\*LomX_extract(\|)\*O"
Creates a new public object
that is an exact but independent copy of an existing subobject
in a private object.
This function is similiar to the \*Lom_get(\|)\*O function but includes an
additional parameter \*Vnavigation_path\*O that contains directions
to the required object to be extracted.
.LI "\*LomX_fill(\|)\*O"
Initializes an OM descriptor
structure with user supplied values for its type, syntax and value.
.LI "\*LomX_fill_oid(\|)\*O"
Initializes an OM descriptor
structure with user supplied values for its type and value.  The syntax
of the descriptor is always set to \*LOM_S_OBJECT_IDENTIFIER_STRING\*O.
.LI "\*LomX_object_to_string(\|)\*O"
Converts an OM object into a string format. 
.LI "\*LomX_string_to_object(\|)\*O"
Creates a new private object,
which is build from the \*Vstring\*O and \*Vclass\*O input parameters.
.LI "\*Lom_copy(\|)\*O"
Creates an independent copy of an existing private object
and all its subobjects.
.iX "subobjects"
The copy is placed in the original's workspace,
or in another specified by the XOM application.
.LI "\*Lom_copy_value(\|)\*O"
Replaces an existing attribute value or inserts a new value
in one private object with a copy of an existing attribute value
found in another.
Both values must be strings.
.LI "\*Lom_create(\|)\*O"
Creates a new
private object that is an instance of a particular class.
The object can be initialized with the attribute values specified as
initial in the class definition.
.PP
The service does not permit the
API user to explicitly create instances of all classes,
but rather only those indicated
by a package's definition
as having this property.
.LI "\*Lom_delete(\|)\*O"
Deletes a service-generated public object,
.iX "public object"
or makes a private object inaccessible.
.nL
.ne 6
.LI "\*Lom_get(\|)\*O"
Creates a
new public object that is an
exact but independent copy of an existing private object.
The client can request certain exclusions,
each of which reduces the copy to a part of the original.
The client can also request that values be converted
from one syntax to another before they are returned.
.PP
The copy can exclude: attributes of types other than those specified, values
at positions other than those specified within an attribute,
the values of multivalued attributes,
copies of (not handles for) subobjects,
or all attribute values (revealing only an attribute's presence).
.LI "\*Lom_instance(\|)\*O"
Determines whether an object is an instance of a particular class.
The client can determine an object's class simply by inspection.
This function is useful since it reveals that an object
is an instance of a particular class,
even if the object is an instance of a subclass of that class.
.LI "\*Lom_put(\|)\*O"
Places or replaces in one private object
copies of the attribute values of another
public or private object.
.PP
The source values can be inserted before any existing destination values,
.iX "destination values"
before the value at a specified position in the destination attribute,
or after any existing destination values.
Alternatively,
the source values can be substituted for any existing destination values
or for the values at specified positions in the destination attribute.
.LI "\*Lom_read(\|)\*O"
Reads a segment of a value of an attribute of a private object.
The value must be a string.
The value can first be converted from one syntax to another.
The function enables the client to read an arbitrarily long value
without requiring that the service place a copy of the entire value in memory.
.LI "\*Lom_remove(\|)\*O"
Removes and discards particular values of an attribute of a private object.
The attribute itself is removed if no values remain.
.LI "\*Lom_write(\|)\*O"
Writes a segment of a value of an attribute to a private object.
The value must be a string.
The segment can first be converted from one syntax to another.
The written segment becomes the value's last segment since
any elements beyond it are discarded.
The function enables the client to write an arbitrarily long value
without having to place a copy of the entire value in memory.
.LE
.PP
.ne 6
In the C interface, the functions are realized by macros.
The function prototype in the synopsis of a function's specification
simply shows the client's view of the function.
.PP
The intent of the interface definition is that each function be atomic;
that is, either it carries out its assigned task in full and reports success,
or it fails to carry out even a part of the task and reports an exception.
However,
the service does not guarantee that a task is always carried out in full.
.SH "Errors"
.PP
Refer to the \*(Tg for complete descriptions of all error messages.
The possible error return values are described in the function
reference pages.
.PP
XOM functions check for NULL pointers and return an error, except
for workspace pointers.  Pointers are only checked at the function
interface.  The check is only for NULL and not for validity.  If
NULL or invalid pointers are passed this may result in an
undetermined behaviour.
