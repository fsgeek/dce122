...\" @OSF_COPYRIGHT@
...\" COPYRIGHT NOTICE
...\" Copyright (c) 1990, 1991, 1992, 1993, 1994 Open Software Foundation, Inc.
...\" ALL RIGHTS RESERVED (DCE).  See the file named COPYRIGHT.DCE for
...\" the full copyright text.
...\" 
...\" HISTORY
...\" $Log: omX_extract.3xom,v $
...\" Revision 1.1.4.2  1996/11/22  16:50:44  wardr
...\" 	{edit,R1.2.2}
...\" 	Fixed bookdef macro
...\" 	[1996/11/22  16:43:58  wardr]
...\"
...\" Revision 1.1.4.1  1996/11/20  19:22:23  wardr
...\" 	{edit,R1.2.2}
...\" 	Init capped heads and added PDG pointer
...\" 	[1996/11/20  19:21:47  wardr]
...\" 
...\" Revision 1.1.2.6  1995/06/21  13:23:24  buckler
...\" 	More 1.1 edits.
...\" 	[1995/06/19  20:29:14  buckler]
...\" 
...\" Revision 1.1.2.5  1995/06/07  22:59:25  buckler
...\" 	1.1 edits and Prentice Hall format
...\" 	[1995/06/07  22:58:42  buckler]
...\" 
...\" Revision 1.1.2.4  1994/09/08  18:10:10  rnollman
...\" 	[rnollman] - updated input/output/return code parms from Dubloiin
...\" 	[1994/09/08  18:07:59  rnollman]
...\" 
...\" Revision 1.1.2.3  1994/08/05  18:01:05  rnollman
...\" 	[rnollman] - checkin after incorporating OSF edits
...\" 	[1994/08/05  17:26:30  rnollman]
...\" 
...\" Revision 1.1.2.2  1994/06/13  17:12:49  devobj
...\" 	cr10872 - fix copyright
...\" 	[1994/06/13  16:50:58  devobj]
...\" 
...\" Revision 1.1.2.1  1994/03/20  13:47:05  rnollman
...\" 	new reference page
...\" 	[1994/03/20  13:46:47  rnollman]
...\" 
...\" $EndLog$
...\"
...\" (c) Copyright 1991, Open Software Foundation, Inc.  ALL RIGHTS RESERVED
...\" (c) Copyright 1991, Open Software Foundation, Inc.  ALL RIGHTS RESERVED
'\" /*****************************************************************
'\" *                                                                *
'\" * COPYRIGHT   (C)  SIEMENS NIXDORF INFORMATIONSSYSTEME AG 1994   *
'\" *                  ALL RIGHTS RESERVED                           *
'\" *                                                                *
'\" *****************************************************************/
.TH omX_extract "3xom" "" "" ""
.SH "Name"
\*LomX_extract\*O - Extracts the first occurrence of the requested OM type from
an object
.SH "Synopsis"
.sS
\*L#include <xom.h>\*L
.nL
\*L#include <xomext.h>\*L
.sp .4v
\*LOM_return_code omX_extract\*L(
.nL
	\*LOM_private_object \*Vobject\*L,
.nL
	\*LOM_type_list \*Vnavigation_path\*L,
.nL
	\*LOM_exclusions \*Vexclusions\*L,
.nL
	\*LOM_type_list \*Vincluded_types\*L,
.nL
	\*LOM_boolean \*Vlocal_strings\*L,
.nL
	\*LOM_value_position \*Vinitial_value\*L,
.nL
	\*LOM_value_position \*Vlimiting_value\*L,
.nL
	\*LOM_public_object *\*Vvalues\*L,
.nL
	\*LOM_value_position *\*Vtotal_number\*L);
.sE
.nL
.ne 1.5i
.SH "Parameters"
.SS "Input"
.VL
.LI "\*Vobject\*O"
The object from which data is to be extracted.
.LI "\*Vnavigation_path\*O"
Contains a NULL-terminated list of OM types that lead to the target object
to be extracted.  It does not include the OM type of the target object.
.LI "\*Vexclusions\*O"
Explicit requests for zero or more exclusions, each of which
reduces the copy to a prescribed portion of the original.  The exclusions
apply to the attributes of the target object, but not to those of its 
subobjects.
.PP
Apart from \*LOM_NO_EXCLUSIONS\*O,
each value is chosen from the following list.
When multiple exclusions are specified, each
is applied in the order in which it is displayed in the list with
lower-numbered exclusions having precedence over higher-numbered 
exclusions.  If, after the application of an
exclusion, that portion of the object is not returned,
no further exclusions need be applied to that portion.
.nL
.ne 6
.ML
.LI
\*LOM_EXCLUDE_ALL_BUT_THESE_TYPES\*O
.PP
The copy includes descriptors comprising only attributes of
specified types.
Note that this exclusion provides a means for
determining the values of specified attributes, as
well as the syntaxes of those values.
.LI
\*LOM_EXCLUDE_MULTIPLES\*O
.PP
The copy includes a single
descriptor for each attribute that has
two or more values, rather than one descriptor for
each value.  None of these descriptors contains an
attribute value, and the \*LOM_S_NO_VALUE\*O bit of the syntax component is set.
.PP
If the attribute has values of two or
more syntaxes, the descriptor identifies one of
those syntaxes; however, the syntax identified is not specified.
.PP
Note that this exclusion provides a means for
discerning the presence of multivalued attributes
without simultaneously obtaining their values.
.LI
\*LOM_EXCLUDE_ALL_BUT_THESE_VALUES\*O
.PP
The copy includes descriptors comprising only values at
specified positions within an attribute.
Note that, when this exclusion is used in conjunction with the
\*LOM_\%EXCLUDE_\%ALL_\%BUT_\%THESE_\%TYPES\*O exclusion,
it provides a means for determining the values of a
specified attribute, as well as the syntaxes of
those values, one or more but not all attributes
at a time.
.LI
\*LOM_EXCLUDE_VALUES\*O
.PP
The copy includes a single descriptor for each attribute value, but the
descriptor does not contain the value, and the \*LOM_S_NO_VALUE\*O bit
of the syntax component is set.
.PP
Note that this exclusion provides a means for
determining an object's composition; that is, the type
and syntax of each of its attribute values.
.LI
\*LOM_EXCLUDE_SUBOBJECTS\*O
.PP
The copy includes, for each value whose
syntax is \*LOM_S_OBJECT\*O, a descriptor containing an object handle for
the original private subobject, rather than a public copy of it.
This handle makes that subobject accessible for use
in subsequent function calls.
.PP
Note that this exclusion provides a means for
examining an object one level at a time.
.LI
\*LOM_EXCLUDE_DESCRIPTORS\*O
.PP
When this exclusion is specified, no
descriptors are returned and the copy result is not present.
The \*Vtotal_number\*O parameter reflects the number of descriptors
that would be returned by applying the other
inclusion and exclusion specifications.
.PP
Note that this exclusion provides an attribute analysis capability.
For instance, the total number of values in a multivalued attribute
can be determined by specifying an inclusion of the specific
attribute type, and exclusions of \*LOM_\%EXCLUDE_\%DESCRIPTORS\*O,
\*LOM_\%EXCLUDE_\%SUBOBJECTS\*O, and
\*LOM_\%EXCLUDE_\%ALL_\%BUT_\%THESE_\%TYPES\*O.
.LE
.PP
The \*LOM_EXCLUDE_ALL_BUT_THESE_VALUES\*O exclusion affects the
choice of descriptors, while the \*LOM_\%EXCLUDE_\%VALUES\*O exclusion
affects the composition of descriptors.
.LI "\*Vincluded_types\*O"
This parameter is present if and only if the \*LOM_\%EXCLUDE_\%ALL_\%BUT_\%THESE_\%TYPES\*O
exclusion is requested; it
identifies the types of the attributes to be included in the copy
(provided that they are displayed in the original).
.LI "\*Vlocal_strings\*O"
This Boolean parameter indicates whether conversion to local string format
should be carried out or not.
.LI "\*Vinitial_value\*O"
This parameter is present if and only if the 
\*LOM_\%EXCLUDE_\%ALL_\%BUT_\%THESE_\%VALUES\*O exclusion is
requested; it specifies the position within each attribute of the first value
to be included in the copy.
.PP
If it is \*LOM_ALL_VALUES\*O
or exceeds the number of values present in an attribute,
the parameter is taken to be equal to that number.
.nL
.ne 8
.LI "\*Vlimiting_value\*O"
This parameter is present if and only if the 
\*LOM_\%EXCLUDE_\%ALL_\%BUT_\%THESE_\%VALUES\*O
exclusion is requested; it specifies the position within each attribute one beyond that
of the last value to be included in the copy.
If this parameter is not greater than the \*Vinitial_value\*O parameter,
no values are included (and no descriptors are returned).
.PP
If it is \*LOM_ALL_VALUES\*O
or exceeds the number of values present in an attribute,
the parameter is taken to be equal to that number.
.LE
.SS "Output"
.VL
.LI "\*Vvalues\*O"
The \*Vvalues\*O parameter is only present if the return value from
\*VOM_return_code\*O is \*LOM_SUCCESS\*O and the \*LOM_\%EXCLUDE_\%DESCRIPTORS\*O
exclusion is not specified.  It contains the array of OM descriptors extracted.
.PP
The memory space for \*Vvalues\*O is provided by \*LomX_extract(\|)\*O.  It
is the responsibility of the calling function to subsequently release
this space through a call to \*Lom_delete(\|)\*O.
.LI "\*Vtotal_number\*O"
The number of attribute descriptors
returned in the public object, but not in any of its subobjects,
based on the inclusion and exclusion
parameters specified.  If the \*LOM_EXCLUDE_DESCRIPTORS\*O exclusion is
specified, no \*Vvalues\*O result is returned and the \*Vtotal_number\*O result
reflects the actual number of attribute descriptors that would
be returned based on the remaining inclusion and exclusion
values.
.PP
Note that
the total includes only the attribute descriptors in the
\*Vvalues\*O parameter.  It excludes the special descriptor signaling the
end of a public object.
.LE
.nL
.ne 1.5i
.SH "Description"
The \*LomX_extract(\|)\*O function creates a new public object
that is an exact, but independent, copy of an existing subobject in a
private object.
It is similiar to the \*Lom_get(\|)\*O function but includes an
additional parameter, \*Vnavigation_path\*O which contains directions
to the required object to be extracted.
The client can request certain exclusions,
each of which reduces the copy to a part of the original.
.PP
.ne 8
One exclusion is always requested implicitly.
For each attribute value in the original that is a string whose
length exceeds an implementation-defined number, the \*Vvalues\*O parameter
includes a descriptor that omits the elements (but not the
length) of the string.  The \*Velements\*O component of the \*Vstring\*O
component in the descriptor's \*Vvalue\*O component is
\*LOM_ELEMENTS_UNSPECIFIED\*O, and the \*LOM_S_LONG_STRING\*O bit of the
\*Vsyntax\*O component is set to \*LOM_TRUE\*O.
.PP
The parameters \*Vexclusions\*O, \*Vincluded_types\*O, \*Vlocal_strings\*O,
\*Vinitial_value\*O, and \*Vlimiting_value\*O only apply to the target
object being extracted.
.PP
Note that the client can access
long values by means of \*Lom_read(\|)\*O.
.nL
.ne 1.5i
.SH "Return Values"
The following describes a partial list of messages (or errors) that might
be returned.  Refer to the \*(Tg for complete descriptions of all error
messages.
.PP
.VL
.LI "\*VOM_return_code\*O"
Indicates whether the function succeeded and, if not, why not.  If the 
function is successful, the value of \*VOM_return_code\*O is set 
to \*LOM_SUCCESS\*O; if the function fails, it has one of the error 
values listed in the \*Lxom.h(4xom)\*O reference page.
.LE
.nL
.ne 1.5i
.SH "Errors"
Refer to \*Lxom.h(4xom)\*O for a list of the possible error values that
can be returned in \*VOM_return_code\*O.
Refer to the \*(Tg for complete descriptions of all error messages.