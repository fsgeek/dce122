...\"
...\"  @OSF_COPYRIGHT@
...\"  COPYRIGHT NOTICE
...\"  Copyright (c) 1990, 1991, 1992, 1993 Open Software Foundation, Inc.
...\"  ALL RIGHTS RESERVED (DCE).  See the file named COPYRIGHT.DCE in the
...\"  src directory for the full copyright text.
...\"
...\"
...\" HISTORY
...\" $Log: 1_overview.gpsml,v $
...\" Revision 1.1.8.2  1996/10/14  16:38:58  weir
...\" 	No change
...\" 	[1996/10/14  16:38:12  weir]
...\"
...\" Revision 1.1.8.1  1996/05/14  20:55:33  weir
...\" 	Removed 1.2.1 Change Markers
...\" 	[1996/05/14  20:54:47  weir]
...\" 
...\" Revision 1.1.6.5  1996/03/21  14:48:29  wardr
...\" 	{edit R1.2.1}
...\" 	Release Edits
...\" 	[1996/03/21  14:47:29  wardr]
...\" 
...\" Revision 1.1.6.4  1996/02/28  16:35:14  wardr
...\" 	{enh,CR13375,R1.2.1}
...\" 	Added DFA component information
...\" 	[1996/02/28  16:34:31  wardr]
...\" 
...\" Revision 1.1.6.3  1995/11/01  22:48:46  wardr
...\" 	{enh CR13032 R1.2.1} Added information about distributed objects.
...\" 	[1995/11/01  22:47:43  wardr]
...\" 
...\" Revision 1.1.6.2  1995/09/28  16:51:57  rosenb
...\" 	{edit R1.2.1}
...\" 	test check out/in from Digital
...\" 	[1995/09/28  16:51:27  rosenb]
...\" 
...\" Revision 1.1.6.1  1995/06/14  18:02:28  weir
...\" 	test checkout
...\" 	[1995/06/14  18:02:01  weir]
...\" 
...\" Revision 1.1.4.18  1995/06/02  15:21:33  buckler
...\" 	PRENTICE HALL reformat.
...\" 	[1995/06/01  20:57:31  buckler]
...\" 
...\" 	Incorporated 1.1 edits.
...\" 	[1995/05/05  22:14:13  buckler]
...\" 
...\" Revision 1.1.4.17  1994/10/19  14:19:41  zahn
...\" 	{edt,5284,R1.1}
...\" 
...\" 	Added technical review comments.
...\" 	[1994/10/19  14:17:13  zahn]
...\" 
...\" Revision 1.1.4.16  1994/10/18  17:49:09  zahn
...\" 	{edt,5284,R1.1}
...\" 
...\" 	Fixed typos.
...\" 	[1994/10/18  17:48:56  zahn]
...\" 
...\" Revision 1.1.4.15  1994/10/14  13:56:17  zahn
...\" 	{edt,11873,R1.1}
...\" 
...\" 	Incorporated Howard Melman's comments
...\" 	on cell aliasing/hcells pieces of this
...\" 	chapter.
...\" 	[1994/10/14  13:56:02  zahn]
...\" 
...\" Revision 1.1.4.14  1994/10/10  15:18:59  zahn
...\" 	{enh,5284,R1.1}
...\" 
...\" 	Initial creation of section on DCE Internationalization.
...\" 	[1994/10/10  15:18:41  zahn]
...\" 
...\" Revision 1.1.4.13  1994/09/28  15:06:00  zahn
...\" 	{edt,11783,R1.1}
...\" 
...\" 	Added a definition of "primary cell name".
...\" 	[1994/09/28  15:05:46  zahn]
...\" 
...\" Revision 1.1.4.12  1994/09/26  21:30:05  zahn
...\" 	{enh,11783,R1.1}
...\" 
...\" 	Added cross-references for cell aliasing
...\" 	info to Admin Guides.
...\" 	[1994/09/26  21:29:52  zahn]
...\" 
...\" Revision 1.1.4.11  1994/09/26  21:10:04  zahn
...\" 	{enh,11783,R1.1}
...\" 
...\" 	Added a paragraph about cell name aliasing.
...\" 	[1994/09/26  21:09:48  zahn]
...\" 
...\" Revision 1.1.4.10  1994/09/26  19:56:16  zahn
...\" 	{enh,11783,R1.1}
...\" 
...\" 	In discussion of establishing intercell
...\" 	trust, added cross-reference to cross-cell
...\" 	authentication description in Chapter 3.
...\" 	[1994/09/26  19:56:00  zahn]
...\" 
...\" Revision 1.1.4.9  1994/09/21  17:25:52  zahn
...\" 	{edt,11783,R1.1}
...\" 
...\" 	Made some changes to revised sections.
...\" 	[1994/09/21  17:25:34  zahn]
...\" 
...\" Revision 1.1.4.8  1994/09/21  14:59:42  zahn
...\" 	{edt,11783,R1.1}
...\" 
...\" 	Added a note to the section on the DCE
...\" 	cell about having to establish a trust
...\" 	relationship with another cell in order
...\" 	to communicate with it.
...\" 	[1994/09/21  14:59:26  zahn]
...\" 
...\" Revision 1.1.4.7  1994/09/21  14:33:16  zahn
...\" 	{enh,11783,R1.1}
...\" 
...\" 	Added introductory information about the Audit Service.
...\" 
...\" 	Revised the section "Organization of a Distributed
...\" 	Computing Environment" to provide a new description
...\" 	of a DCE cell in light of hierarchical cells and
...\" 	cell aliasing.  Renamed the section to "The DCE Cell".
...\" 
...\" 	{enh,5248,R1.1}
...\" 
...\" 	Added a section head and placeholder for
...\" 	DCE component internationalization info.
...\" 	[1994/09/21  14:32:57  zahn]
...\" 
...\" Revision 1.1.4.6  1994/04/07  19:57:09  rom
...\" 	{enh, 10306, R1.1}
...\" 	Add missing change bar.
...\" 	[1994/04/07  19:18:40  rom]
...\" 
...\" 	{enh, 10306, R1.1}
...\" 	Remove diskless documentation from the DCE doc set.
...\" 	[1994/04/07  18:12:57  rom]
...\" 
...\" Revision 1.1.4.5  1993/01/29  17:17:29  cjd
...\" 	Embedded copyright notice
...\" 	[1993/01/29  17:00:55  cjd]
...\" 
...\" Revision 1.1.4.4  1992/12/14  17:24:21  steiner
...\" 	CR 6150 remove Release 1.0 reference
...\" 	[1992/12/14  17:06:28  steiner]
...\" 
...\" Revision 1.1.4.3  1992/11/24  15:44:28  steiner
...\" 	Fixed coding to conform to DCE coding conventions (mostly
...\" 	change .B -> \*L, etc.).
...\" 	[1992/11/24  15:23:08  steiner]
...\" 
...\" Revision 1.1.4.2  1992/09/01  15:58:31  weir
...\" 	Moved to 1.0.2 tree
...\" 	[1992/09/01  15:47:29  weir]
...\" 
...\" Revision 1.1.2.2  1992/03/06  16:29:56  steiner
...\" 	Editing updates from Eddie.
...\" 	Added "potential DCE network" figure - fig. 1-1.
...\" 	[1992/03/05  22:56:23  steiner]
...\" 
...\" Revision 1.1  1992/01/29  15:42:49  damon
...\" 	Initial revision
...\" 
...\" $EndLog$
...\"
.H 1 "Overview of DCE"
.iX "-![" "DCE" "overview"
.P
OSF's Distributed Computing Environment (DCE) provides services
and tools
that support the creation, use, and maintenance of distributed
applications in a heterogeneous computing environment.
This chapter provides an overview of DCE, beginning with a
section describing distributed computing and its benefits.
The next section describes three distributed computing
models\*(EMclient/server, remote procedure call (RPC), and data sharing.
The final section gives an overview of DCE itself, describing
its technology components, the organization of a DCE environment, and the
relationship between DCE and the underlying computing system.
.H 2 "Why Distributed Computing?"
.iX "-[" "distributed computing"
.iX "-[" "distributed computing" "motivation for"
.P
By ``distributed computing'' we mean computing that involves the cooperation
of two or more machines communicating
over a network (see Figure 1-1).
The machines participating in the system can range from personal
computers to supercomputers; the network can connect machines in
one building or on different continents.
.PP
.ne 6i
.FG "A Potential DCE Network"
...\" .so intro/pic/1_overview_00.pic
.PS
.in +.5i
scale = 80
line   from 80, 248 \
	to 80, 184 \
	to 88, 192 \
	to 104, 128 \
	to 112, 136 \
	to 128, 64 
"\fH\s10Super-\s0\fP"  at 292, 308
"\fH\s10WAN\s0\fP"  at 80, 152
"\fH\s10LAN\s0\fP"  at 224, 64
line   from 136, 64 \
	to 136, 40 
line   from 56, 64 \
	to 56, 40 
box  wid 56 ht 40 at 36, 20
box  wid 56 ht 40 at 132, 20
"\fH\s10Station\s0\fP"  at 132, 12
"\fH\s10Work-\s0\fP"  at 132, 28
"\fH\s10Computer\s0\fP"  at 36, 12
"\fH\s10Personal\s0\fP"  at 36, 28
"\fH\s10Server\s0\fP"  at 176, 108
"\fH\s10Typesetter\s0\fP"  at 176, 124
box  wid 64 ht 48 at 176, 112
spline   from 200, 200 \
	to 208, 192 \
	to 224, 192 \
	to 232, 200 
box  wid 64 ht 48 at 32, 208
"\fH\s10Server\s0\fP"  at 32, 204
"\fH\s10File\s0\fP"  at 32, 220
spline   from 232, 200 \
	to 240, 192 \
	to 256, 192 \
	to 264, 200 
spline   from 264, 200 \
	to 272, 192 \
	to 288, 192 \
	to 296, 200 
spline   from 208, 176 \
	to 216, 168 \
	to 232, 168 \
	to 240, 176 
spline   from 240, 176 \
	to 248, 168 \
	to 264, 168 \
	to 272, 176 
spline   from 272, 176 \
	to 280, 168 \
	to 296, 168 \
	to 304, 176 
box  wid 64 ht 48 at 400, 184
"\fH\s10Server\s0\fP"  at 400, 180
ellipse wid 64 ht 40 at 92, 268
line   from 132, 304 \
	to 116, 284 
line   from 40, 304 \
	to 68, 284 
line   from 40, 232 \
	to 68, 252 
"\fH\s10LAN\s0\fP"  at 92, 268
"\fH\s10LAN\s0\fP"  at 348, 244
line   from 296, 280 \
	to 324, 260 
line   from 388, 280 \
	to 372, 260 
ellipse wid 64 ht 40 at 348, 244
"\fH\s10Computer\s0\fP"  at 292, 292
"\fH\s10Work-\s0\fP"  at 388, 308
"\fH\s10Station\s0\fP"  at 388, 292
box  wid 56 ht 40 at 388, 300
box  wid 56 ht 40 at 292, 300
line   from 376, 232 \
	to 400, 208 
line   from 120, 256 \
	to 184, 264 \
	to 192, 248 \
	to 252, 264 \
	to 256, 248 \
	to 280, 256 \
	to 316, 236 
"\fH\s10WAN\s0\fP"  at 228, 236
line   from 200, 72 \
	to 200, 56 
line   from 40, 72 \
	to 40, 56 
line   from 40, 64 \
	to 200, 64 
"\fH\s10Personal\s0\fP"  at 36, 332
"\fH\s10Computer\s0\fP"  at 36, 316
"\fH\s10Work-\s0\fP"  at 132, 332
"\fH\s10Station\s0\fP"  at 132, 316
box  wid 56 ht 40 at 132, 324
box  wid 56 ht 40 at 36, 324
line   from 176, 88 \
	to 176, 64 
"\fH\s10Print\s0\fP"  at 400, 196
.in -.5i
.PE
.sp .5
.PP
Why is enabling this type of cooperative computing
important?
One reason is historical: computing resources that used to operate
independently
now need to work together.
For example, consider an office that
acquired personal workstations for individual use.
After a while, there were
many workstations in the office building, and the users recognized that
it would be desirable to share data and resources among the individual
computers.
They accomplished this by connecting the workstations over
a network.
.P
A second reason is functional: if there is special-function hardware or
software available over the network, then that functionality does not
have to be duplicated on every computer system (or \*Enode\*O)
that needs to access the special-purpose resource.
For example, an organization could make a typesetting service
available over the network,
allowing users throughout the organization to submit their jobs to be
typeset.
.P
.ne 6
A third reason is economical: it may be more cost effective to have
many small computers working together than one large computer of
equivalent power.  In addition, having many units connected to a network
is the more flexible configuration, because if more resources are needed,
another unit can be added in place,
rather than bringing the whole system down and replacing
it with an upgraded one.
.P
Finally, a distributed system
can be more reliable and available than a centralized system.  This
is a result of the ability to replicate both data and functionality.
For example, when a given file is copied on two different machines, then
even if one
machine is unavailable, the file can still be accessed on the other
machine.  Likewise, if several printers are attached to a network,
then even if an administrator takes one printer
offline for maintenance, users can
still print their files by using an alternate printer.
.P
Distributed computing inherently brings with it not only
potential advantages, but also new problems.
Examples are keeping multiple copies of data consistent,
and keeping the clocks on different machines in the system synchronized.
A system that provides distributed computing support must address these
new issues.
.H 3 "Why DCE?"
.iX "DCE" "motivation"
.P
Given that, for one of the reasons previously mentioned or some other reason,
an organization decides that it wants to acquire distributed computing
capability,
why is DCE in particular advantageous?
Why would an organization with a network such as the one in Figure 1-1
benefit from using DCE to enable distributed computing?
.PP
DCE's benefits can be categorized into
its support of distributed applications,
the integration of its components with each other,
DCE's relationship to its platforms,
its support for data sharing,
and DCE's interaction with the world
outside of DCE, as described in the following list.
.nL
.ne 11
.ML
.LI
DCE provides tools and services that support distributed applications.
.P
DCE provides
a high-level, coherent environment
for developing and running applications on a distributed system.
The DCE components fall into two categories: tools for developing
distributed applications, and services for running distributed
applications.
The tools, such as DCE RPC and DCE Threads,
assist in the development of an application.
The services, such as the DCE Directory Service, Security Service,
and Distributed Time Service,
provide the support required in a distributed system that is analogous
to the support an operating system provides in a centralized system.
.P
It is
\*Epossible\*O
to develop distributed applications with much less
assistance than what DCE offers.
Programmers can write applications that cooperate across machines by
explicitly writing the code that performs the network communications
between them, but
this requires much time and expertise.
Programmers can also write distributed
applications by using a communications tool, such as
remote procedure call, while explicitly using other necessary technologies,
like standalone name and security services.  However, DCE provides a set
of components necessary for distributed computing that are already
integrated, and that do as much work as possible automatically for the
application programmer, system administrator, and end user.
.LI
DCE's set of services is integrated and comprehensive.
.P
A second benefit is the integration and comprehensiveness of the DCE
components.
Not only does DCE provide all the tools and services needed for
developing and running distributed applications, but the DCE components
themselves are well integrated.
They use one another's services whenever possible, since many of the
DCE components are themselves distributed applications.
In addition to supporting the development of distributed applications,
DCE includes services that address some of the new problems inherent in the
distributed system itself, such as data consistency and clock
synchronization.
Finally, DCE includes management tools for administering all of
the DCE services and many aspects of the distributed environment itself.
.LI
.ne 15
DCE provides interoperability and portability across heterogeneous platforms.
.P
A benefit of DCE is its
orientation toward heterogeneous rather than homogeneous
systems.
One way to implement a distributed system is to
use a single operating system that runs
on all nodes participating in the distributed network.  The DCE architecture,
however, allows for different operating systems and hardware platforms.
Using DCE, a process running on one computer can interoperate with a
process on a second computer, even when the two computers have different
hardware or operating systems.
DCE can therefore
accommodate a wider range of networks\*(EMespecially networks
needing distributed computing for the historical reasons previously
listed\*(EMthan a model that requires the same operating system running on
every node.
Applications that are built using DCE are portable to other
hardware/operating system platforms that run DCE.
.LI
DCE supports data sharing.
.P
Another benefit is DCE's support of data sharing through its directory
service and distributed
file service.
A user anywhere in the distributed system can share data by placing it
in the namespace or in a file, whichever is appropriate for
the application.
The data is then accessible by authorized users throughout the
system.
.LI
DCE participates in a global computing environment.
.P
One final benefit of DCE is the way it interacts with
the outside world.
In addition to supporting cooperation within and between themselves, DCE
systems
can also interoperate with computing environments outside of DCE.
In particular, the DCE Directory Service can interoperate with two
standard, global directory services\*(EMX.500 and Domain Name
Service (DNS)\*(EMallowing users from within DCE
to access information about the outside world.
In this way, DCE participates in a global directory service.
One benefit of such participation can be seen in DCE's distributed file
system: it looks like one global file system, and users anywhere in
the world can address the same file by using the same global name.
.LE
.H 3 "Potential Users of DCE"
.iX "DCE" "potential users"
.P
This section gives some examples of computing environments
that can profit from distributed computing capabilities.
In general, any computing organization wishing to take
advantage of the benefits of a distributed computing environment\*(EMdata
and resource sharing, extensibility, availability, interoperability\*(EMcan
benefit from using DCE.
For example:
.ML
.LI
An office with isolated computing resources can network
the computers together and use DCE for data and resource sharing.
.LI
An organization consisting of multiple computing sites
that are already
interconnected by a network can
use DCE to
tie together
and access resources across the different sites.
The different sites can be in different countries, or even on different
continents.
.LI
Any computing
organization comprising, or expecting to comprise in the future,
more cooperating hosts than can be easily administered
manually (perhaps over a dozen nodes) can benefit greatly from the
administrative
support afforded by a DCE environment.
For example, in DCE the database of
computer users and their associated information (such as passwords) can be
administered centrally, removing the need for an administrator to
update information on every single node in the network each time a
new user is added.
.LI
Organizations that write distributed
applications can use DCE as a platform for their software.
Applications that are written on DCE can be readily ported to
other software and hardware platforms that also support DCE.
.LI
Organizations wishing to use applications that run on DCE
platforms.
.LI
Organizations that wish to participate in networked computing on
a global basis.
Since DCE supports
standard directory services that will be used throughout the world,
a site
that participates in DCE will be able to plug into that worldwide
directory service database,
allowing it to both ``see'' and access information about other
sites and organizations around the world.
In turn, it will be able to add itself
to the directory service, allowing itself to be ``seen''
and accessed, if desired, by other sites worldwide.
.LI
System vendors whose customers are in any
of the preceding categories.
.LI
Organizations that would like to make a service available over the
network on one system (for example, a system running a non-UNIX
operating system), and have it accessible from other
kinds of systems (for example, workstations running UNIX).
.LE
.iX "-]" "distributed computing" "motivation for"
.H 2 "Models of Distributed Computing"
.iX "-[" "distributed computing" "models"
.P

DCE is based on three distributed computing models\*(EMclient/server,
remote procedure call, and data sharing.
The client/server model is a way of organizing a distributed
application.
The remote procedure call model is a way of communicating between parts
of a distributed application.
The data sharing model is a way of handling data in a distributed
system.
.P
...\" .zA "enh,13032,R1.2.1,add xidl information"
.iX "distributed object model"
.iX "object model and DCE"
DCE also supports a distributed object model, 
which is a way of distributing data and functionality together 
in neat application packages known as distributed objects.
...\" .zZ "enh,13032,R1.2.1,add xidl information"
.P
The following subsections briefly describe each model.

.H 3 "The Client/Server Model"
.P
.iX "-![" "client/server" "model"
A useful model for implementing distributed
applications is the \*Eclient/server\*O
model.
In this model, the
distributed application is divided into two parts, one part
residing on each of the two computers that will be communicating
during the distributed computation
(see Figure 1-2).
.PP
.FG "The Client/Server Model"
...\" .so intro/pic/1_overview_01.pic
.PS
.in +.4i
scale = 80
"\fR\s10Server\s0\fP"  at 144, 24
"\fR\s10Client\s0\fP"  at 24, 24
"\fR\s8Response\s0\fP"  at 88, 8
"\fR\s8Request\s0\fP"  at 88, 40
line ->  from 120, 16 \
	to 48, 16 
line ->  from 48, 32 \
	to 120, 32 
circle radius 24 at 144, 24
circle radius 24 at 24, 24
.in -.4i
.PE
.iX "client/server" "model (figure)"
.sp .5
.PP
The
\*Eclient\*O
side of the
application is the part that resides on the node that initiates
the distributed request and receives the benefit of the service
(for example, a workstation that requests
that a file be printed).
The
\*Eserver\*O
side of the application is
the part that resides on the node that receives and executes the
distributed request (for example, the node with the printer).
In this model, two different sets of code are produced\*(EMone
that runs as a client, the other as a server.
.P
.ne 2
Figure 1-3 shows a workstation running the client side of a distributed
print program, and a print server running the server side of the
distributed program.
.PP
.FG "Communication Between the Print Client and Print Server"
...\" .so intro/pic/1_overview_02.pic
.PS
.in +.4i
scale = 80
"\fR\s10Workstation\s0\fP"  at 44, 88
"\fR\s8Print\s0\fP"  at 108, 64
"\fR\s8Request\s0\fP"  at 108, 56
"\fR\s8Response\s0\fP"  at 108, 16
"\fR\s8Print\s0\fP"  at 108, 24
"\fR\s10Print Server\s0\fP"  at 176, 88
box  wid 88 ht 80 at 44, 40
box  wid 88 ht 80 at 172, 40
"\fR\s10Print\s0\fP"  at 168, 48
"\fR\s10Print\s0\fP"  at 48, 48
"\fR\s10Server\s0\fP"  at 168, 32
"\fR\s10Client\s0\fP"  at 48, 32
line ->  from 144, 32 \
	to 72, 32 
line ->  from 72, 48 \
	to 144, 48 
circle radius 24 at 168, 40
circle radius 24 at 48, 40
.in -.4i
.PE
.iX "client/server" "as roles"
.sp .5
.PP
Note that the terms \*Eclient\*O and \*Eserver\*O can be seen as relative
roles rather than as absolutes.  For example, in executing the
print request, the print server may in turn become a client
in a distributed communication; that is, it may ask the file server
to send it a copy of the file to be printed
(see Figure 1-4).
.PP
.FG "The Print Server Acting as a Client of the File Server"
...\" .so intro/pic/1_overview_03.pic
.PS
.in +.5i
scale = 80
ellipse wid 88 ht 48 at 180, 40
circle radius 16 at 208, 40
"\fR\s10Print\s0\fP"  at 160, 48
line ->  from 136, 32 \
	to 72, 32 
line ->  from 296, 32 \
	to 224, 32 
line ->  from 224, 48 \
	to 296, 48 
line ->  from 72, 48 \
	to 136, 48 
"\fR\s10File Server\s0\fP"  at 320, 88
"\fR\s8File\s0\fP"  at 260, 64
"\fR\s8File\s0\fP"  at 260, 24
"\fR\s8Response\s0\fP"  at 260, 16
"\fR\s8Request\s0\fP"  at 260, 56
box  wid 112 ht 80 at 184, 40
"\fR\s8Print\s0\fP"  at 108, 24
"\fR\s8Response\s0\fP"  at 108, 16
"\fR\s8Request\s0\fP"  at 108, 56
"\fR\s8Print\s0\fP"  at 108, 64
"\fR\s10Workstation\s0\fP"  at 44, 88
"\fR\s10Print Server\s0\fP"  at 180, 88
box  wid 88 ht 80 at 44, 40
"\fR\s10Print\s0\fP"  at 48, 48
"\fR\s10Client\s0\fP"  at 48, 32
circle radius 24 at 48, 40
"\fR\s10File\s0\fP"  at 208, 45
"\fR\s10Server\s0\fP"  at 160, 32
"\fR\s10Client\s0\fP"  at 208, 36
box  wid 88 ht 80 at 324, 40
circle radius 24 at 320, 40
"\fR\s10File\s0\fP"  at 320, 45
"\fR\s10Server\s0\fP"  at 320, 32
.in -.5i
.PE
.sp .5
.PP
.iX "client/server" "as nodes"
The terms \*Eclient\*O and \*Eserver\*O are also used to refer to specific
nodes.
This can be confusing since
a given node, or even a given process, can be acting in both the client and
server role.  Nevertheless, it is often
convenient to use the term \*Efile server\*O
when referring to
the node on which the server side of a distributed file
system is running\*(EMprobably a machine that contains a lot
of disk storage.  Likewise, the \*Edirectory server\*O
is a 
node that contains a database with names in it, and answers
requests for access to those names.
When clarification is needed, we use the term \*Emachine\*O
to indicate the node rather than the role.
For example, in Figure 1-4, the print server, which runs on the print
server machine, is acting as a client to the file server.
.P
Note that it is possible for more than one server to run on a given
node.
For example, both a security server and a time server
can run on the same machine.  In this
case, the given node is both the
security server machine
and the
time server machine
(see Figure 1-5).
.PP
.ne 3
.FG "Two Servers Running on One Node"
...\" .so intro/pic/1_overview_04.pic
.PS
.in +.5i
scale = 80
line ->  from 192, 48 \
	to 140, 48 
line ->  from 52, 32 \
	to 0, 32 
line ->  from 0, 48 \
	to 52, 48 
line ->  from 140, 32 \
	to 192, 32 
"\fR\s10Time and Security Servers\s0\fP"  at 100, 88
"\fR\s8Time\s0\fP"  at 20, 24
"\fR\s8Time\s0\fP"  at 20, 64
"\fR\s8Security\s0\fP"  at 172, 24
"\fR\s8Security\s0\fP"  at 172, 64
"\fR\s8Response\s0\fP"  at 172, 16
"\fR\s8Request\s0\fP"  at 172, 56
"\fR\s10Time\s0\fP"  at 70, 44
"\fR\s10Server\s0\fP"  at 72, 32
"\fR\s10Server\s0\fP"  at 120, 32
"\fR\s10Security\s0\fP"  at 120, 42
circle radius 20 at 72, 40
circle radius 20 at 120, 40
box  wid 112 ht 80 at 96, 40
"\fR\s8Response\s0\fP"  at 20, 16
"\fR\s8Request\s0\fP"  at 20, 56
.in -.5i
.PE
.sp .5
.PP
In general, when referring to clients and servers as nodes,
the server nodes are specialized\*(EMthey require software that
is found only on that particular server (for example, the directory server);
whereas client nodes are generalized\*(EMclient machines are typically
configured with the capability to be many types of client
(for example, a directory,
file, and security service client).
See Figure 1-6.
.PP
.FG "A Client is General; Servers are Specialized"
...\" .so intro/pic/1_overview_05.pic
.PS
.in +.3i
scale = 80
line ->  from 32, 128 \
	to 82, 176 
line ->  from 92, 164 \
	to 44, 118 
line ->  from 80, 32 \
	to 32, 80 
line ->  from 44, 92 \
	to 90, 46 
circle radius 24 at 24, 104
line ->  from 120, 96 \
	to 48, 96 
line ->  from 48, 114 \
	to 122, 114 
"\fR\s10Server\s0\fP"  at 104, 16
"\fR\s10Directory\s0\fP"  at 104, 28
"\fR\s10Server\s0\fP"  at 144, 96
"\fR\s10File\s0\fP"  at 144, 112
"\fR\s10Server\s0\fP"  at 104, 176
"\fR\s10Security\s0\fP"  at 104, 192
"\fR\s10Client\s0\fP"  at 24, 104
circle radius 24 at 104, 24
circle radius 24 at 144, 104
circle radius 24 at 104, 184
.in -.3i
.PE
.sp .5
.PP
The reason client nodes are generalized is that the client
code is usually relatively small compared to the code that implements
a server, and typically many nodes need to be able to run the
client side of an application;
whereas only one or two nodes may
be equipped to run the server side of an application.
.P
.ne 5
One final distinction between client and server is that the server is
typically implemented as a continuous process (daemon); whereas the client
is usually implemented as a library.  In other words, the client side of
an application consists of a call to a routine that executes
(sending the request over the network and receiving the result)
and then returns and goes on with whatever else it was doing;
whereas the server side of an application is a dedicated process that
runs continuously\*(EMwaiting for a request, executing it and returning the
answer, then waiting for the next request, and so on.
Figure 1-7 illustrates this distinction.
.PP
.FG "Client as a Library; Server as a Continuous Process"
...\" .so intro/pic/1_overview_06.pic
.PS
.in +.35i
scale = 80
line ->  from 126, 8 \
	to 40, 8 
line ->  from 48, 16 \
	to 122, 16 
"\fR\s8Library\s0\fP"  at 24, 8
"\fR\s8Client\s0\fP"  at 24, 16
line   from 0, 24 \
	to 48, 24 
"\fR\s8Daemon\s0\fP"  at 144, 22
"\fR\s8Server\s0\fP"  at 144, 32
"\fR\s8Application\s0\fP"  at 24, 32
circle radius 24 at 24, 24
circle radius 24 at 144, 24
.in -.35i
.PE
.sp .5
.PP
DCE is based on the client/server model.
The DCE services are themselves examples of distributed programs
with a client and server side.
The basic communications mechanism used in DCE, remote procedure
call, assumes the presence of a client and a server.
Since DCE applications are built using remote procedure call,
they are also based on the client/server model of distributed
computation.
.iX "-]" "client/server" "model"
.H 3 "The Remote Procedure Call Model"
.P
.iX "RPC" "model"
.iX "-: RPC" "remote procedure call"
One way of implementing communications between the client and server
sides of a distributed application is to use the procedure call model.
In this model, the client makes what looks like a procedure call.
The procedure call is translated into network communications by the
underlying RPC mechanism.
The server receives a request and executes the procedure, returning
the results to the client.
One of the DCE technology components, DCE RPC, is an implementation
of this model.
It is used by most of the other DCE technology components for their
network communications.
(See Section 3.2 of this manual for more information on remote procedure
calls and DCE RPC.)
.H 3 "The Data Sharing Model"
.iX "-![" "data sharing" "model"
.P
Some of the DCE services are based on the \*Edata sharing\*O
model, in which data is shared by distributing it throughout the
system.
Like RPC, data sharing assumes the existence of clients and servers.
Data sharing, however, focuses on distributed data rather than
distributed execution.
In RPC, the client's procedure is executed on the server.
In data sharing, the server's data is sent to the client.
For example, if a client wants to access a file,
a copy of the file is sent from the server to
the client.
The client then proceeds to access the file locally.
Data sharing can be built on top of RPC, using RPC as the communications
mechanism between the client and server, and as the means of transferring
data.
.P
Data sharing usually entails having multiple copies of the same data;
for example, a master copy of a file on a file server, and a copy
of the file on one or more client machines.
As a result, copies of data may diverge; that is, a client may make changes
to its copy that make the client's copy inconsistent with the copy on
the server.
Therefore, distributed services based on the data sharing model usually
include mechanisms for keeping copies of data consistent.
.P
In addition, services that implement data sharing must be able to
synchronize multiple access to data.
For example, two clients may each want to modify
a given record in a database.
The server that manages the database must either prevent them from
making conflicting modifications or decide which modification takes
precedence.
.P
.iX "data sharing" "in directory service"
Two DCE services are based on the data sharing model.
The first is the directory service.
Both DCE directory services, CDS and GDS, maintain caches on
the client.
The caches contain copies of data that users on the client have
recently accessed.
Subsequent access to the data can be made locally to the cache,
rather than over the network to the server.
.P
.iX "data sharing" "in DFS"
The DCE Distributed File Service (DFS) is also based on the data sharing
model.
A DFS client maintains a cache of files that have recently been
accessed by a user on the system.
DFS servers distribute and revoke
tokens,
which represent a client's capability to perform operations
on files.
Through careful token management, the DFS server can ensure
that its clients do not perform conflicting operations on shared
files, and that they do not see inconsistent copies of the same
file.
.P
Data sharing, like RPC,
enables users and programmers to communicate transparently
in a distributed system.
.iX "-]" "data sharing" "model"
.iX "-]" "distributed computing" "models"
.iX "-]" "distributed computing"

.H 3 "The Distributed Object Model"
.P
...\" .zA "enh,13032,R1.2.1,add xidl information"
DCE allows for a distributed object model in conjunction with the other 
DCE models to give a flexible way to distribute functionality and data 
for client/server applications.
In addition, a distributed object model \*Vcombines\*O appropriate 
functionality with data, by way of distributed objects, 
in a way that also hides how parts of the distributed application communicates.
.P
Objects are used to model the behavior of all sorts of application entities.  
In object-oriented terminology, an object is simply an instance of its class.  
Each object contains member functions (methods) that are only specified in 
the class as operations.  
In the distributed object model, a DCE interface is a public set of operations, 
but the methods of implementation are separate and application specific. 
(Data types are usually application specific but the interface 
can specify them as well.)   
A DCE interface specifies what is known as an abstract base class 
because the class has a public interface and a hidden implementation.
.P
Object-oriented applications make it easy to hide data and implementation 
details by using hierarchies of classes and other object-oriented features.
Thus object-oriented applications can help minimize the exposure of 
network details and the special DCE mechanisms of distributed computing.  
In DCE, the IDL compiler generates a class hierarchy for applications.
This hierarchy contains an interface class derived from a DCE RPC base class.
The interface class becomes part of an application in such a way
that the network details, mechanisms of data transfer, 
and object location are hidden (encapsulated) in the base class. 
.P
DCE interfaces have code generated in C++ to help implement 
a distributed object model.
This means that developers can write object-oriented applications 
in a more natural way using C++ directly without relying on 
inadequate or cumbersome C-to-C++ wrapper routines for DCE interfaces.
.P
It has already been stated that the terms client and server are relative roles 
that an application plays, and not absolute conditions of any particular 
part of a distributed application.  
This is also true in the distributed object model.
.P
...\" .zZ "enh,13032,R1.2.1,add xidl information"

.H 2 "Architectural Overview of DCE"
.iX "-[" "DCE" "architecture"
.iX "-: DCE" "Distributed Computing Environment"
.P
.iX "DCE" "and related software"
OSF's Distributed Computing Environment is a layer between the
operating system and network on the one hand, and the distributed
application on the other.
DCE provides the services that allow a distributed application
to interact with a collection of possibly heterogeneous computers,
operating systems, and networks as if they were a single system.
Figure 1-8 shows DCE in relation to operating systems,
network communications software, and applications software.
.PP
.FG "Layering of DCE and Related Software"
...\" .so intro/pic/1_overview_07.pic
.PS
.in +.37i
scale = 80
"\fR\s12OS and Network Services\s0\fP"  at 120, 24
"\fR\s12Distributed Applications\s0\fP"  at 120, 128
line   from 0, 56 \
	to 240, 56 
line   from 0, 104 \
	to 240, 104 
box  wid 240 ht 152 at 120, 76
"\fR\s12DCE\s0\fP"  at 120, 80
.in -.37i
.PE
.iX "DCE" "and related software (figure)"
.sp .5
.PP
Several technology components
work together to implement the DCE layer.
Many of these
components provide in a distributed environment what an operating
system provides in a centralized (single-node) environment.
.P
Figure 1-9 shows
the DCE architecture and its technology components, along with their
relationship to applications, underlying system support, and
placeholders for future technologies.
.PP
.ne 30
.FG "DCE Architecture"
...\" .so intro/pic/1_overview_08.pic
.PS
.in +.5i
scale = 80
box dashed wid 400 ht 32 at 200, 16
box dashed wid 80 ht 48 at 296, 176
box dashed wid 272 ht 48 at 200, 312
box dashed wid 400 ht 64 at 200, 384
"\fR\s10M\s0\fP" ljust at 370, 304
"\fR\s10t\s0\fP" ljust at 372, 232
"\fR\s10n\s0\fP" ljust at 372, 240
"\fR\s10e\s0\fP" ljust at 372, 248
"\fR\s10m\s0\fP" ljust at 372, 256
"\fR\s10e\s0\fP" ljust at 372, 264
"\fR\s10g\s0\fP" ljust at 372, 272
"\fR\s10a\s0\fP" ljust at 372, 280
"\fR\s10n\s0\fP" ljust at 372, 288
"\fR\s10a\s0\fP" ljust at 372, 296
"\fR\s10DCE\s0\fP"  at 24, 304
"\fR\s10S\s0\fP" ljust at 28, 288
"\fR\s10S\s0\fP" ljust at 12, 288
"\fR\s10Operating System and Transport Services\s0\fP"  at 196, 16
"\fR\s10DCE Threads\s0\fP"  at 192, 64
"\fR\s10DCE Remote Procedure Call\s0\fP"  at 200, 116
"\fR\s10Applications\s0\fP"  at 196, 384
line   from 64, 136 \
	to 16, 96 \
	to 384, 96 
box  wid 400 ht 32 at 200, 64
line   from 48, 336 \
	to 48, 136 \
	to 0, 96 \
	to 0, 336 \
	to 48, 336 
line   from 336, 136 \
	to 384, 96 
line   from 352, 336 \
	to 400, 336 \
	to 400, 96 \
	to 352, 136 \
	to 352, 336 
line   from 64, 136 \
	to 336, 136 
"\fR\s10Services (Future)\s0\fP"  at 200, 304
"\fR\s10Other Distributed\s0\fP"  at 200, 316
box  wid 272 ht 56 at 200, 244
"\fR\s10(Future)\s0\fP"  at 296, 164
"\fR\s10Services\s0\fP"  at 296, 176
"\fR\s10Other Basic\s0\fP"  at 296, 188
"\fR\s10Service\s0\fP"  at 200, 164
"\fR\s10Directory\s0\fP"  at 200, 176
box  wid 80 ht 48 at 104, 176
"\fR\s10Distributed\s0\fP"  at 104, 176
"\fR\s10DCE\s0\fP"  at 104, 188
"\fR\s10Time Service\s0\fP"  at 104, 164
box  wid 80 ht 48 at 200, 176
"\fR\s10DCE\s0\fP"  at 200, 188
"\fR\s10e\s0\fP" ljust at 28, 240
"\fR\s10c\s0\fP" ljust at 28, 248
"\fR\s10i\s0\fP" ljust at 28, 256
"\fR\s10v\s0\fP" ljust at 28, 264
"\fR\s10r\s0\fP" ljust at 28, 272
"\fR\s10e\s0\fP" ljust at 28, 280
"\fR\s10y\s0\fP" ljust at 12, 232
"\fR\s10t\s0\fP" ljust at 12, 240
"\fR\s10i\s0\fP" ljust at 12, 248
"\fR\s10r\s0\fP" ljust at 12, 256
"\fR\s10u\s0\fP" ljust at 12, 264
"\fR\s10c\s0\fP" ljust at 12, 272
"\fR\s10e\s0\fP" ljust at 12, 280
"\fR\s10DCE Distributed File Service\s0\fP"  at 204, 244
.in -.5i
.PE
.iX "DCE" "architecture (figure)"
.H 3 "Overview of DCE Technology Components"
.iX "-[" "technology components" "overview"
.P
This section gives a short description of each of the DCE technology
components.
A more in-depth description of each of these components is given
in Chapter 3.
.P
.ne 6
DCE Threads
.iX "Threads"
supports the creation, 
management, and synchronization
of multiple threads of control within a single process.
This component is conceptually a part of the operating
system layer, the layer below DCE.
If the host operating system already supports threads, DCE
can use that software and DCE Threads is not necessary.
However, not all operating
systems provide a threads facility, and DCE components require that
threads be present, so this user-level threads package is included in
DCE.
.P
The
DCE Remote Procedure Call
.iX "RPC"
facility consists of both a development
tool and a runtime service.  The development tool consists of a
language (and its compiler) that supports the development of distributed
applications following the client/server model.  It automatically
generates code that transforms procedure calls into network messages.
The runtime service implements the network protocols
by which the client and server sides of an application
communicate.
DCE RPC also includes software for generating unique identifiers, which are
useful in identifying service interfaces and other resources.
.P
The
DCE Directory Service
.iX "directory service"
is a central repository for information about resources in the
distributed system.
Typical resources are users, machines, and RPC-based services.
The information consists of the name of the resource
and its associated attributes.
Typical attributes could include a user's home directory, or the location
of an RPC-based server.
.P
The DCE Directory Service comprises several parts:
the Cell Directory Service (CDS), the Global Directory
Service (GDS), the Global Directory Agent (GDA), and a directory service
programming interface.  CDS
.iX "CDS"
.iX "-: CDS" "Cell Directory Service"
manages a database of information about the resources in a
group of machines called a
\*EDCE cell\*O.
(Cells are described in the next section.)  GDS
.iX "GDS"
.iX "-: GDS" "Global Directory Service"
implements an international standard directory service and
provides a global namespace that connects the local DCE cells
into one worldwide hierarchy.  GDA
.iX "GDA"
.iX "-: GDA" "Global Directory Agent"
acts as a go-between for cell and global directory services.
Both CDS and GDS are accessed using
a single directory service application programming interface, the
X/Open Directory Service (XDS) Advanced Programming Interface (API).
.iX "XDS"
.iX "-: XDS" "X/Open Directory Service"
.P
The
DCE Distributed Time Service (DTS)
.iX "DTS"
.iX "-: DTS" "Distributed Time Service"
provides synchronized time on the computers participating in a
Distributed Computing Environment.
DTS synchronizes a DCE host's time with Coordinated Universal Time
(UTC), an international time standard.
.P
.ne 5
The
DCE Security Service
.iX "security service"
provides secure communications and controlled access to
resources in the distributed system.
There are four aspects to DCE security: authentication,
secure communications, authorization, and auditing.
These aspects are implemented by several services and facilities
that together constitute the DCE Security Service, including
the registry service, the authentication service,
the privilege service, the access control list (ACL) facility,
the login facility, and the audit service.
.P
The identity of a DCE user or service is verified, or authenticated,
by the authentication service.
Communications are protected by the integration of DCE RPC
with the security service so that communication
over the network can be checked for tampering or encrypted for
privacy.
Access to resources is controlled by comparing the credentials
conferred to a user by the privilege service with the rights to the
resource, which are specified in the resource's ACL.
The login facility initializes a user's security environment, and
the registry service manages the information (such as user accounts)
in the DCE security database.
Security-relevant events can be monitored through the audit service.
\*ECode points\*O can be set in DCE servers to record events that
are deemed to be important to the integrity of the system.  For example,
the login facility uses the audit service to record logins
by DCE users and services.
.P
The
DCE Distributed File Service
.iX "DFS"
.iX "-: DFS" "Distributed File Service"
allows users to access and share files stored on a file server anywhere on
the network,
without having to know the physical location of the file.
Files are part of a single, global namespace, so no matter where
in the network a user is, the file can be found by using the same name.
DFS achieves high performance, particularly
through caching of file system data, so that
many users can access files that are located on a given file server without
prohibitive amounts of network traffic and resulting delays.
.P
DCE DFS includes a physical file system, the DCE Local File System (LFS),
.iX "LFS"
.iX "-: LFS" "Local File System"
which supports special features that are useful in a distributed
environment.
They include the ability to replicate data; log file system data,
enabling quick recovery after a crash;
simplify administration by dividing the file system into easily managed
units called \*Efilesets\*O;
and associate ACLs with files and directories.
.P
...\" .zA "enh,13375,1.2.1,Add DCE/File-Access Information"
.ne 5
DCE/File-Access allows users of personal computers running in a Novell
.iX "DFA"
.iX "-: DFA" "DCE/File-Access"
.iX "-: DFA" "File-Access"
NetWare network environment to read and write directories and files on
a DCE DFS file server. Users and DCE/File-Access software have DCE
identities so DFS file usage is subject to the DCE Security Service's
authentication and authorization controls.
...\" .zZ "enh,13375,1.2.1,Add DCE/File-Access Information"
.P
.ne 5
The
Management
.iX "management"
block shown in Figure 1-9 is actually not a single
component but a cross section of the other components.
Each DCE service contains an administrative component so
it can be managed over the network.
In addition, some of the DCE services themselves provide
for management of the distributed system as a whole.
For example, users are registered in the security service, and
servers' network addresses are
registered in the directory service.
.iX "-]" "technology components" "overview"
.H 3 "The DCE Cell"
.iX "-[" "configuration" "overview"
.iX "cell" "definition"
A \*EDCE cell\*O is a collection of machines, users, and
resources managed as a group.
For example, imagine an organization made up of several departments,
each in a different building and operating on its own budget.
Each department in such an organization could have its own DCE cell.
.P
A cell has its own security service, CDS,
and optionally, DFS; these services are
available cell-wide.  The security service for a cell manages
the cell's registry, where user account information is kept.
Each cell has its own namespace; the cell's CDS
manages that namespace and its hierarchy.
If DFS is present in the cell, DFS
allows remote access to files from anywhere in the cell.
Each cell also has its own DTS, which
keeps the clocks on all of the machines in the cell synchronized.
.P
A cell provides a single security domain.  Users log into
accounts in a cell.  ACLs identify
users and groups in the cell (they can also refer to users
and groups in other cells).  A cell also provides a single
naming domain.  Each cell has a name, and all objects in the
cell share that name.
.P
DCE cells can be connected so that they can communicate with each other.
Going back to the example, if the different departments' cells are
connected, then a user in one department's cell may be able to access
resources in another department's cell, although
this access would typically be less frequent and more
restricted than access to resources within the user's own cell.
.P
Cells connect to each other by means of a global directory
service.  A cell's name is registered in a global directory
service, and the cell is then able to contact other cells
registered in that global service.  Note that communication
between DCE cells is not automatic.  Cells that wish to
communicate with each other must first establish a trust
relationship between their cells' security services;
this process is called \*Ecross-cell authentication\*O and
is described in more detail in Chapter 2.
.P
A cell can have more than one name.  In this case, one
of the cell's names is designated its \*Eprimary name\*O
while the other names are the cell's \*Ealias\*O names.
The cell's primary name is the default name for the
cell; that is, it is the name that DCE services
return.
Cell name aliasing permits a cell to be registered
in more than one global namespace.  It also provides
a way to change a cell's name if the need arises;
for example, to respond to organizational changes
within the company.
For more information on how to create cell name aliases
for a cell, see the \*(Ai and the \*(Ac.
.P
A DCE cell can be configured in many ways, depending on its users'
requirements.
A cell consists of a network connecting three kinds of nodes: DCE
user machines, DCE administrator machines, and DCE server machines.
DCE user machines are general-purpose DCE machines.
They contain software that enables them to act as clients to all of the
DCE services.
DCE administrator machines contain software that enables a DCE
administrator to manage DCE system services remotely.
.P
The DCE server machines are equipped with special software enabling them to
provide one or more of the DCE services.
Every cell must have at least
one each of the following servers in order to
function:
.ML
.LI
Cell directory server
.LI
Security server
.LI
Distributed time server
.LE
.P
Other DCE servers may be present in a given DCE cell to provide
additional functionality.  A GDA may be present
to enable the cell's directory server to communicate with other cells'
directory servers; a global directory server may be present to provide
X.500 directory service; and distributed file servers may be present
to provide storage of files and the special functions of DCE LFS. 
(See Chapter 2 for more detailed information on DCE cell configuration.)
.iX "-]" "configuration" "overview"
.H 3 "Integration of the DCE Technology Components"
.iX "integration" "overview"
.P
One of the benefits of OSF's DCE is its coherence.  Although
the components themselves are modular with well-defined interfaces, they
are also well integrated; the
various DCE components each make use of the services of the other components
wherever possible.  For example, the RPC facility uses
the directory service to advertise and look up RPC-based servers and their
characteristics, it uses the security service to ensure message
integrity and privacy, and it uses DCE Threads to handle
concurrent execution of multiple RPCs.  DFS uses threads,
RPC, the directory service, DTS,
and the security service in providing its file
service.
.P
In general, the
DCE components shown higher in the DCE architecture
(see Figure 1-9)
make use of the components shown lower in the architecture.
For example, DCE Threads is used by most
other DCE components, but it does not itself use other components.
This ordering is not strictly hierarchical; often two services
each depend on the other.
For example, the directory service
uses the security service, which in turn uses the directory service.
The interdependence of DCE components is explained in more detail
in Chapter 4.
.H 3 "Relationship of DCE to Network and System Services"
.iX "DCE" "and related software"
.P
As shown in Figure 1-8, DCE is layered on top of local operating system
and networking software.
DCE makes certain assumptions about the services provided by
the underlying network and operating systems.
DCE's requirements for these services are described in the following
subsections.
.H 4 "Network Services"
.iX "DCE" "and related software" "network"
.P
In general, DCE is layered over a transport level service, such as 
User Datagram Protocol (UDP),
Transmission Control Protocol (TCP), 
or ISO TP0-TP4 transport protocols, which is accessed
through a transport
interface, such as sockets or 
X/Open Transport Interface (XTI). 
DCE assumes that all nodes participating in the DCE environment
are physically connected by a highly available network.
The network can be a Local Area Network (LAN),
a Wide Area Network (WAN), or a combination
of both.
.P
The DCE architecture supports
different types of network protocol families.
For example, DCE could be ported to run over
Open Systems Interconnection (OSI) protocols.
(The OSF DCE reference implementation
runs over the Internet Protocol (IP) family.)
However, in order for DCE systems to communicate with
one another, they must have at least one set of network protocols
in common.
For example, DCE is not designed to enable a node running only
IP protocols to communicate with a node running only OSI protocols.
.P
Finally, DCE assumes the ability to identify a node with a unique network
address, and the ability to identify a process
with a network endpoint address (for example, a port or T-selector).
.H 4 "Operating System Services"
.iX "DCE" "and related software" "operating system"
.P
DCE assumes that certain services are available through the underlying
operating system, namely the following:
.ML
.LI
Multitasking
.LI
Timers
.LI
Local interprocess communications
.LI
Basic file system operations (VFS layer)
.LI
Memory management
.LI
Local security mechanisms (if appropriate)
.LI
Threads (or the ability to use DCE Threads)
.LI
General system utility functions
.LE
.H 4 "DCE Reference Implementation Dependencies"
.iX "implementation dependencies"
.P
The previous two subsections listed assumptions made by the DCE architecture.
The OSF DCE reference implementation contains additional dependencies
on the operating system and network, which are specific to the
implementation.
These include the use of IP and socket networking services,
and UNIX operating system facilities.
.H 3 "DCE Internationalization"
DCE internationalization has several aspects:
.ML
.LI
Ensuring character and code set interoperability
.LI
Preserving character data integrity
.LI
Ensuring that user-visible messages are easily localized
.LE
.P
The next sections discuss these aspects in greater detail.
.H 4 "Ensuring Character and Code Set Interoperability"
A \*Echaracter set\*O is a group of characters, such as the English
alphabet, Japanese Kanji, or the European character set.
To enable world-wide connectivity, DCE guarantees that
a minimum group of characters is supported in the DCE.
The DCE RPC communications protocol ensures this guarantee
by requiring that all DCE RPC clients and servers support
the DCE Portable Character Set (PCS).  The set of DCE PCS characters
consists of the following:
.ML
.LI
0 1 2 3 4 5 6 7 8 9
.LI
: ; < = > ? @ [ ] ^ _ ` ' ~ { | } ! " # $ % & ( ) * + - . / <space>
.LI
a b c d e f g h i j k l m n o p q r s t u v w x y z
.LI
A B C D E F G H I J K L M N O P Q R S T U V W X Y Z
.LE
.P
A \*Ecode set\*O is a mapping of the members of a character set to
specific numeric code values.  Examples of code sets include ASCII,
EBCDIC, JIS X0208 (Japanese Kanji), and ISO 8859-1 (also known as
Latin-1.) The DCE RPC communications protocol automatically converts
DCE PCS characters between the ASCII and EBCDIC code sets, if
necessary.  DCE RPC also provides constructs and routines for
character and code set interoperability between non-PCS, or
international characters.  These features permit programmers
to write DCE RPC applications that guarantee character and code
set interoperability between clients and servers in a DCE that
supports a variety of languages and encodings for those languages.
.H 4 "Preserving Character Data Integrity"
The DCE components preserve character data integrity because they
do not use, or ``mask off,'' the eighth bit of a character for any
purpose.  In addition, DCE RPC does not modify user data in any way
when it is passed as \*Lidl_byte\*O context,
unless the application is using the DCE RPC features for automatic
code set conversion of non-PCS characters.
.H 4 "Ensuring Easy Localization of User-Visible Messages"
The DCE components isolate all user-visible messages
into separate message catalogs.  Separating
DCE messages into distinct message catalogues makes it easier for DCE
licensees to localize DCE messages so that DCE users and administrators
can view DCE error messages and prompts in their native language.
.iX "-]" "DCE" "architecture"
.iX "-]" "DCE" "overview"
