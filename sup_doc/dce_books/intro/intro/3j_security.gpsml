...\"  @OSF_COPYRIGHT@
...\"  COPYRIGHT NOTICE
...\"  Copyright (c) 1990, 1991, 1992, 1993 Open Software Foundation, Inc.
...\"  ALL RIGHTS RESERVED (DCE).  See the file named COPYRIGHT.DCE in the
...\"  src directory for the full copyright text.
...\"
...\"
...\" HISTORY
...\" $Log: 3j_security.gpsml,v $
...\" Revision 1.1.8.2  1996/10/16  17:23:15  wardr
...\" 	{enh,R1.2.2}
...\" 	File updated for R1.2.2
...\" 	[1996/10/16  17:23:03  wardr]
...\"
...\" Revision 1.1.8.1  1996/10/14  16:39:15  weir
...\" 	No change
...\" 	[1996/10/14  16:38:26  weir]
...\" 
...\" Revision 1.1.6.1  1996/03/21  14:48:33  wardr
...\" 	{edit R1.2.1}
...\" 	Release Edits
...\" 	[1996/03/21  14:47:33  wardr]
...\" 
...\" Revision 1.1.4.13  1995/06/02  15:25:01  buckler
...\" 	PRENTICE HALL reformat.
...\" 	[1995/06/01  20:59:35  buckler]
...\" 
...\" 	Incorporated 1.1 edits.
...\" 	[1995/05/05  22:16:37  buckler]
...\" 
...\" Revision 1.1.4.12  1994/11/04  00:05:11  neilson
...\" 	Substituted macros for book names in cross refs.
...\" 	[1994/11/03  12:24:19  neilson]
...\" 
...\" Revision 1.1.4.11  1994/10/12  13:41:24  zahn
...\" 	{enh,12210,R1.1}
...\" 
...\" 	Added the cell administrators can administer auditds
...\" 	remotely.
...\" 	[1994/10/12  13:41:11  zahn]
...\" 
...\" Revision 1.1.4.10  1994/09/26  21:24:42  zahn
...\" 	{enh,11783,R1.1}
...\" 
...\" 	Added info from R. Cruz about a cell-wide
...\" 	task of managing event class numbers and
...\" 	event numbers for Audit Service.
...\" 	[1994/09/26  21:24:28  zahn]
...\" 
...\" Revision 1.1.4.9  1994/09/26  20:33:43  zahn
...\" 	{enh,11783,R1.1}
...\" 
...\" 	Miscellaneous edits.
...\" 	[1994/09/26  20:33:29  zahn]
...\" 
...\" Revision 1.1.4.8  1994/09/26  19:18:10  zahn
...\" 	{enh,11783,R1.1}
...\" 
...\" 	Added the following overview info about Audit Service:
...\" 
...\" 	- introductory description of the service and its pieces
...\" 	- how it works in relation to other Security components
...\" 	  and application servers
...\" 	- info about administering auditd
...\" 
...\" 	Also changed old control program references to
...\" 	say "dcecp".
...\" 	[1994/09/26  19:17:50  zahn]
...\" 
...\" Revision 1.1.4.7  1994/09/23  21:01:39  willie
...\" 	{enh, 11783, R1.1}
...\" 	Added GSSAPI section and references.
...\" 	[1994/09/23  21:01:26  willie]
...\" 
...\" Revision 1.1.4.6  1994/09/09  19:27:51  willie
...\" 	{enh, 11783, R1.1}
...\" 	Added Extended Registry Attribute (ERA) and EPAC info.
...\" 	[1994/09/09  19:27:34  willie]
...\" 
...\" Revision 1.1.4.5  1993/01/29  17:18:20  cjd
...\" 	Embedded copyright notice
...\" 	[1993/01/29  17:01:59  cjd]
...\" 
...\" Revision 1.1.4.4  1992/12/14  17:24:28  steiner
...\" 	CR 6150 remove Release 1.0 reference
...\" 	[1992/12/14  17:07:40  steiner]
...\" 
...\" Revision 1.1.4.3  1992/11/24  15:45:09  steiner
...\" 	Fixed coding conventions.
...\" 	[1992/11/24  15:27:29  steiner]
...\" 
...\" Revision 1.1.4.2  1992/09/01  15:59:50  weir
...\" 	Moved to 1.0.2 tree
...\" 	[1992/09/01  15:48:37  weir]
...\" 
...\" Revision 1.1.2.2  1992/03/06  16:31:25  steiner
...\" 	Eddie's edits.
...\" 	[1992/03/06  15:21:04  steiner]
...\" 
...\" Revision 1.1  1992/01/29  15:43:13  damon
...\" 	Initial revision
...\" 
...\" $EndLog$
...\"
.H 2 "DCE Security Service"
.iX "-![" "security service"
.P
A distributed computing environment brings with it new security
requirements beyond those found in a nondistributed system.
In a nondistributed system, the operating system can be trusted
to protect resources from unauthorized access.
This is not the case in open distributed systems, however.
Communications take place over an accessible network,
where messages between machines
can be observed or forged.
A new security system is required in order to control access to
resources in a distributed environment.
In DCE, resource protection is provided by the DCE Security Service
or, alternatively, the Generic Security Service (GSS).
.H 3 "What is the DCE Security Service?"
.iX "security service" "components"
.P
The DCE Security Service comprises several parts, including
the authentication service, the privilege service, the registry service,
the ACL facility, the login facility, and the audit
service.
.ML
.LI
Authentication service
.iX "authentication service"
.P
This service enables two processes on different machines
to be certain of one another's identity, or
\*Eauthenticated\*O.
On a timesharing system, this functionality is provided in part by the
operating system kernel.
However, since a local host's
operating system cannot necessarily be trusted in a distributed
system, an authentication service is necessary in a distributed
computing environment.
.LI
Privilege service
.iX "privilege service"
.P
Once a server has verified the identity of the user who is making
a request,
it still needs to determine whether the user
should be
\*Eauthorized\*O,
or granted the requested access to a resource that the server
controls.  This functionality is provided by the DCE authorization
service called the
privilege service.  It forwards in a secure way the information
that a server needs to know in order to determine what permissions it should
grant to the user.
.P
Both the authentication service
and the privilege service are used in conjunction
with DCE RPC and the login facility,
so the typical application programmer does not interact
with them directly, but instead uses authenticated RPC.
.LI
Registry service
.iX "registry service"
.P
The registry service is
a replicated service that manages the cell's security database.
The security database contains entries for security entities, which are
called
\*Eprincipals\*O.
.iX "principals"
.iX "database" "security"
A principal can be a user or a server, for example.
The database also contains information associated with each principal;
for example, encryption keys, which are used in authentication,
authorization, and encryption of messages.
The registry service enables administrators to access and modify
the database of DCE users.
.P
The extended registry attribute (ERA) interface allows the registry schema
to be modified so that user-defined attributes can be associated with
registry objects.
.iX "extended registry attribute"
.LI
ACL facility
.iX "ACLs" "in security service"
.P
DCE ACLs are lists of users who are authorized
to access a given
resource.  For example, a user can put a colleague on an ACL
for a certain file, thereby granting the colleague permission to read
and write the file.  DCE ACLs are associated with many DCE resources:
files, entries in the directory service, and entries in the security
service.
DCE ACLs are based on the POSIX 1003.6/Draft 3 specification.
An ACL API allows programmers to manipulate ACLs, and 
\*Ldcecp\*O
allows users to modify ACLs associated with resources they own.
.nL
.ne 6
.LI
Login facility
.iX "login facility"
.P
The DCE login facility initializes a user's DCE security environment.
It authenticates the user to the security service by means of the
user's password.  The security service returns security credentials,
which are then used to authenticate the user to distributed services
that are accessed during the user's session, such as DFS or other
applications.  The login facility permits log in using
the following authentication protocols:
.ML
.LI
The \*Epublic key\*O protocol, which provides the highest level of
security
.iX "public key login"
.LI
The \*Ethird-party\*O protocol, which is less secure than public key
protocol
.LI
The \*Etimestamps\*O protocol, which is less secure than the
third-party protocol
.LI
The DCE Version 1.0 protocol, which is the least secure protocol. This
is provided solely for compatibility with DCE Version 1.0 clients.
.LE
.LI
Audit service
.iX "audit service"
.P
The audit service detects and records the execution
of DCE server operations that are relevant to the
maintenance of a secure distributed computing environment.
The audit service records the \*Eevent\*O in a
log file called an \*Eaudit trail file\*O.
DCE application programmers build auditing into
their DCE servers by designating security-relevant
operations as \*Ecode points\*O for which auditing
is required, and using an audit API to establish
auditing of those operations.  The DCE Security
Service and DCE DTS
also use the audit service to track and
record the use of their security-critical operations. 
Administrators can use the audit service \*Eevent class\*O
and \*Efilter\*O mechanisms to organize and tailor 
the recording of events into audit trail files.
...\" .ig ++
...\" .LI
...\" The Key Management Facility
...\" .P
...\" This facility consists of routines that an application programmer
...\" can call to manage the secret key of a nonhuman principal, such
...\" as an application server.
...\" .LI
...\" The Principal ID Mapping Facility
...\" .P
...\" This facility supports the mapping of principal names between
...\" a global representation and a local (cell-relative) representation.
...\" .++
.LE
.H 3 "How DCE Security Works"
.iX "-[" "security service" "how it works"
.P
This section gives an overview of how the DCE security services and
facilities interact to provide a secure distributed computing
environment.
Figure 3-18 shows
this process.
The presentation in this section is a simplified view of the
transactions that actually take place.
.P
.ne 3.0i
.FG "DCE Security Interactions"
...\" .so intro/pic/3j_sec_16.pic
.PS
.in +.5i
scale = 80
"\fB\s8(secd)\s0\fP"  at 270, 208
"\fR\s8Server\s0\fP" rjust at 280, 218
"\fR\s8Server\s0\fP"  at 180, 30
"\fB\s8login\s0\fP"  at 40, 152
"\fB\s8dcecp\s0\fP"  at 40, 204
line   from 240, 160 \
	to 240, 128 \
	to 240, 134 
line   from 272, 160 \
	to 272, 126 
"\fR\s8DB\s0\fP"  at 256, 140
"\fR\s8Security\s0\fP"  at 256, 148
ellipse wid 32 ht 8 at 256, 128
"\fR\s8Privilege\s0\fP"  at 176, 106
"\fR\s8Server\s0\fP"  at 176, 96
"\fR\s8Registry\s0\fP"  at 176, 210
"\fR\s8Server\s0\fP"  at 176, 200
"\fR\s8Application\s0\fP"  at 40, 38
"\fR\s8Client\s0\fP"  at 40, 30
line  dotted from 24, 142 \
	to 24, 52 
line ->  from 148, 92 \
	to 48, 92 \
	to 34, 140 
"\fR\s8EPAC\s0\fP"  at 108, 84
"\fR\s8Ticket\s0\fP"  at 106, 140
"\fR\s8Log Me In\s0\fP"  at 110, 164
"\fR\s8Create User\s0\fP"  at 108, 212
ellipse wid 48 ht 24 at 40, 152
line ->  from 64, 156 \
	to 144, 156 
box dashed wid 76 ht 172 at 38, 86
line ->  from 144, 148 \
	to 64, 148 
line ->  from 44, 140 \
	to 56, 100 \
	to 144, 100 
line ->  from 72, 36 \
	to 148, 36 
line ->  from 64, 204 \
	to 144, 204 
"\fR\s8Administrator\s0\fP" ljust at 4, 224
ellipse wid 64 ht 32 at 40, 36
"\fR\s8User\s0\fP" ljust at 8, 8
ellipse wid 48 ht 24 at 40, 204
box dashed wid 72 ht 44 at 36, 210
"\fR\s8Security\s0\fP" rjust at 284, 228
box dashed wid 156 ht 164 at 214, 154
line ->  from 212, 36 \
	to 232, 36 
"\fR\s8---\s0\fP"  at 244, 16
"\fR\s8---\s0\fP"  at 244, 24
"\fR\s8---\s0\fP"  at 244, 32
"\fR\s8ACL\s0\fP"  at 244, 44
box  wid 24 ht 40 at 244, 32
ellipse wid 64 ht 32 at 180, 36
"\fR\s8Application\s0\fP"  at 180, 40
ellipse wid 64 ht 32 at 176, 152
ellipse wid 64 ht 32 at 176, 100
"\fR\s8Server\s0\fP"  at 176, 148
"\fR\s8Authentication\s0\fP"  at 176, 156
ellipse wid 64 ht 32 at 176, 204
ellipse wid 32 ht 8 at 256, 160
line ->  from 208, 152 \
	to 240, 148 
line ->  from 200, 112 \
	to 240, 136 
line ->  from 204, 196 \
	to 240, 160 
"\fR\s8Authorize Me\s0\fP"  at 108, 116
"\fR\s8(with Ticket)\s0\fP"  at 108, 108
"\fR\s8Authenticated RPC\s0\fP"  at 120, 52
"\fR\s8(with EPAC)\s0\fP"  at 118, 42
.in -.5i
.PE
.sp .5
.P
When a DCE cell is first created,
the DCE security administrator runs a program to
create an initial DCE security database.
The administrator then starts up a DCE security server,
called
\*Lsecd\*O,
on the same machine as the database.
Using \*Ldcecp\*O,
the administrator creates user accounts in the security database.
.P
After the administrator has created an account for a user, the user
can participate in a secure DCE system.
Typically a user logs into the account at the beginning of a session.
The login facility interacts with both the authentication server
and the privilege server.
It sends a request for authentication credentials to the authentication
server.
The authentication server sends back the authentication credentials,
called a
\*Eticket\*O.
The authentication server's reply is
encrypted using the user's password; so, if the user can supply
the right password, the reply can be decrypted and the ticket can
be accessed.
Tickets are used by clients to authenticate themselves to servers;
that is, to prove that clients are really who they say they are.
.P
.ne 9
Next, the login facility sends the ticket to the privilege server.
The privilege server returns authorization credentials, called an
extended privilege attribute certificate (EPAC). 
The EPAC contains authorization information specific to the user,
such as which groups the user belongs to.
EPACs are used to authorize users; that is, to help a server decide
whether users should be granted access to resources that the server
manages.
When the login facility has finished running, the user has a security
environment and can communicate in a secure way with
application servers.
.P
For example, if the user runs an application client, the
application client can use authenticated RPC to communicate with
the application server.
The application server receives the RPC-based request, which includes
the user's EPAC.
The server inspects the user's authorization credentials and
the ACL associated with the resource the
user wants to access.
If, for example, the ACL says that any user in the group
\*Lfriends\*O
can access the resource, and the user's EPAC shows that the user
is in the
\*Lfriends\*O
group, then the server will give the user
access to the resource.
.P
The authentication and authorization information that is sent over
the network is all encrypted so that only the intended recipients are
able to decrypt and read the messages.
If desired, the application data can be encrypted as well.
This prevents any unauthorized user from being able to read data that is
sent over the network.
.P
The encryption used in DCE
is secret key encryption, in which
two parties share a secret\*(EMthe encryption key.
Using that key, they can encrypt and decrypt each other's messages.
(For information on the generation, transfer, and use of encryption
keys in DCE security, see the security chapters of the
\*(Di and \*(Dk.
.P
Finally, although it is not shown in Figure 3-18, all
of the security service events just discussed (creating a user,
logging in, obtaining a ticket, and so on) are recorded
and logged in an audit trail file by the audit service
daemon, \*Lauditd\*O.  In addition, if the application
server has been designed to use the audit service, and
the operation that the application client is requesting
has been designated an audit code point, then the audit service
logs the execution of the server operation on behalf
of the requesting client.
.iX "-]" "security service" "how it works"
.nL
.ne 13
.H 3 "End User's Perspective"
.iX "security service" "end user's perspective"
.P
Much of the DCE security mechanism occurs without the knowledge
of users; for example, secure communications take place without
the user's intervention.
There are several ways, however, in which users do come in contact
with DCE security.
One instance is when users type in their passwords to
authenticate themselves to DCE, usually at login time.
Another case
is when they change access to resources
they own, using 
\*Ldcecp\*O.
Finally, a user notices the security service in action
when he or she is denied unauthorized access to resources.
.H 3 "Programming with DCE Security"
.iX "security service" "programming with"
.P
Typically, a DCE programmer uses DCE RPC to implement a distributed
application.
DCE security is integrated with RPC, so in some cases the programmer
does not need to access security services directly.
However, programming interfaces to the security service are available
to the programmer who needs them.
They include the ACL, audit, login, extended registry attribute, security
credentials, and registry
...\" .ig ++
...\" Key Management, and Principal ID Mapping
...\" .++
APIs, along with the API for authenticated RPC.
This section gives an overview of programming with authenticated RPC
and DCE ACLs.
.H 4 "Authenticated RPC"
.iX "RPC" "authenticated"
DCE RPC and DCE security cooperate to provide
authentication, authorization,
and secure communications.
In order to use authenticated RPC, the client must already have
a security environment, such as that set up by the login facility.
The server side of the application registers its name
and the type of authentication service it supports.
In DCE, two types of authentication service are supported: secret
key authentication, which is based on Kerberos (see Section 3.5.6),
or no authentication.
.P
.ne 12
The client makes a call to indicate which authentication service,
protection level,
and authorization service it wants to use for RPC communications
with a given server.
The
\*Eauthentication service\*O
.iX "authentication service"
can be either secret key authentication
or no authentication.
The
\*Eprotection level\*O
.iX "protection level"
ranges from authentication at the beginning
of an RPC session, to authenticating each message or packet, to
ensuring that a packet has not been modified in transit, to encrypting
all user data.
In general, the more secure the protection level, the higher
the price paid in terms of performance since the security mechanisms
involve encrypting and decrypting data, which take up CPU time.
.P
The
\*Eauthorization service\*O
.iX "authorization service"
chosen by the client can be either
uncertified or certified.
In uncertified authorization, the authorization information
sent to a server consists only of the client's name.
In certified authorization, the authorization information
consists of the UUIDs of the
client's name and groups.
The certified authorization information is in the form of an 
EPAC, which is 
produced by the privilege service.
In both the certified and uncertified authorization service,
the authorization information is sent securely.
.P
The authentication and authorization information about the
client are used by the server to determine whether the client
should be granted the access to the resource that it has requested.
The server knows for certain the identity of the client and
what authorization groups the client belongs to.
The server can therefore compare the client's credentials against
information in ACLs and determine whether a client
should be given the access it is requesting.
.H 4 "ACLs"
.iX "ACLs" "in security service"
If a distributed application uses ACLs to control access to its
resources, then the distributed application programmer needs to
write an ACL manager to handle access to the resources.
The ACL manager is part of the server side of the application.
Typically, there is one ACL associated with
each resource that the server manages.
The ACL contains one or more entries specifying a user or group
and what operations the user or group is permitted to perform
on the resource (for example, read, write, or execute permission).
The ACL manager takes the authorization information supplied
by the application client during an RPC and compares it to the
ACL for the requested resource.
The ACL manager indicates whether the client is or is not allowed
the requested access to the resource.
.P
.ne 7
Figure 3-19 shows a simple DCE ACL.
Every DCE ACL contains a field indicating what type of ACL
it is.
The ACL type in this case is
\*Lsp_data_acl\*O.
Each DCE ACL also contains a field indicating what the default
cell is for the entries in the ACL.
In the example, the default cell is
\*L/.../C=US/O=OSF/OU=DCE\*O.
The rest of the ACL consists of ACL entries.
.P
.ne 2i
.FG "DCE ACL Example"
...\" .so intro/pic/3j_sec_17.pic
.PS
.in +.3i
scale = 80
"\fB\s10foreign_user:zig@/.../cs.univ.edu:r\s0\fP"  at 84, 12
"\fB\s10group:friends:r\s0\fP"  at 40, 36
"\fB\s10user:snowpaws:rw\s0\fP"  at 48, 60
"\fB\s10/.../C=US/O=OSF/OU=DCE\s0\fP"  at 68, 84
"\fB\s10sp_data_acl\s0\fP"  at 32, 108
line   from 0, 24 \
	to 168, 24 
line   from 0, 48 \
	to 168, 48 
line   from 0, 72 \
	to 168, 72 
line   from 0, 96 \
	to 168, 96 
box  wid 168 ht 120 at 84, 60
line ->  from 200, 12 \
	to 168, 12 
line ->  from 200, 36 \
	to 168, 36 
line ->  from 200, 60 \
	to 168, 60 
line ->  from 200, 84 \
	to 168, 84 
line ->  from 200, 108 \
	to 168, 108 
"\fR\s10ACL Type\s0\fP" ljust at 208, 108
"\fR\s10Default Cell\s0\fP" ljust at 208, 84
"\fR\s10ACL Entry\s0\fP" ljust at 208, 12
"\fR\s10ACL Entry\s0\fP" ljust at 208, 36
"\fR\s10ACL Entry\s0\fP" ljust at 208, 60
.in -.3i
.PE
.iX "ACLs" "example (figure)"
.sp .5
.P
ACL entries can be of several types.
The preceding example shows three types of ACL entries:
\*Luser\*O,
\*Lgroup\*O,
and
\*Lforeign_user\*O.
The cell to which the
\*Luser\*O
and
\*Lgroup\*O
entries belongs is the default cell listed in the ACL.
The cell to which the
\*Lforeign_user\*O
entry belongs is specified in the entry.
.P
Each entry includes a list of permissions.
The different possible permissions are determined by
the ACL type (in this example,
\*Lsp_data_acl\*O).
There are two types of permissions in the preceding ACL example:
\*Lr\*O
for read permission, and
\*Lw\*O
for write permission.
.P
Based on this ACL, the 
\*Lsp_data_acl\*O
ACL manager will give the principal
\*Lsnowpaws\*O
in the cell
\*L/.../C=US/O=OSF/OU=DCE\*O
read and write permission to the object,
the members of the
\*Lfriends\*O
group in the
\*L/.../C=US/O=OSF/OU=DCE\*O
cell read permission to the object,
and the principal
\*Lzig\*O
in the foreign cell
\*L/.../cs.univ.edu\*O
read permission.
.nL
.ne 17
.H 3 "DCE Security Service Administration"
.iX "security service" "administration"
.P
There are two types of DCE security administration: local and cellwide.
The administrator of a DCE machine controls the local
\*Lpasswd_override\*O
file.
This file determines some security aspects that are specific
to the local machine, such as which principals may use the machine,
the password for a local account (such as
\*Lroot\*O),
and so forth.
The local security administrator also controls the local file that
contains user and password information, if it exists.
(This file may contain a copy of information from the security
database to be used in case the security server cannot be reached,
or for already existing applications that expect such a local file.)
If the machine runs DCE servers that use the audit service
(application servers, the DTS server, or the security server)
the local security administrator also manages the
audit daemon (\*Lauditd\*O).
.P
The cell-wide security administrator manages the cell's security server(s).
This includes managing the
\*Lsecd\*O
process, which provides security services
on the security server machine, creating and editing the security
database using
\*Ldcecp\*O,
and controlling replication of security data.
The cell-wide security administrator can also carry out
remote administration of the audit daemons running
on hosts in the cell.
The cell-wide security administrator is also responsible
for administering audit service event numbers and event
class numbers to ensure that unique numbers are being
issued.
.P
The cell-wide security administrator is also involved in cross-cell
authentication.
It is possible for clients in one cell to communicate securely with
servers in another cell.
In order for this to happen, the security administrators in the
two cells must register each other's authentication service
in their registry.
This enables clients in one cell to authenticate to servers
in another cell.
In this way, it is possible for
authorized clients in one cell to access services in a foreign cell.
.nL
.ne 12
.H 3 "DCE Security and Kerberos"
.iX "Kerberos"
.iX "DCE" "and related software"
.P
This section contains
a note on the relationship between the DCE Security Service and
Kerberos, for those who are already familiar with Kerberos.
The DCE authentication service is based on MIT Project Athena's Kerberos
Network Authentication Service, Version 5.
The Kerberos Key Distribution Center (KDC) server is a part of
the DCE security server,
\*Lsecd\*O.
The authorization information that is created by the DCE privilege
server is passed in the Kerberos Version 5 ticket's authorization
data field.
.P
The Kerberos user commands
\*Lkinit\*O,
\*Lklist\*O,
and
\*Lkdestroy\*O
are used in DCE security.
The Kerberos API is used internally by DCE security but is not
exposed for use by the application programmer.
Instead, DCE application
programmers use the authenticated RPC API.

.H 3 "Secure Remote Utilities"
.iX "utilities" "secure remote"
.iX "\*Lrlogin\*O"
.iX "\*Lrsh\*O"
.P
Two secure remote utilities provided by DCE are \*Lrlogin\*O and
\*Lrsh\*O.  The \*Lrlogin\*O utility starts a terminal session on a
remote host.  The \*Lrsh\*O utility executes a command on a remote
host.  Both utilities use the Kerberos V5 authentication protocol.
.H 3 "The Generic Security Service API"
.iX "-: GSSAPI" "Generic Security Service"
.iX "GSSAPI"
.P
The Generic Security Service (GSS) provides an alternate way of
securing distributed applications that handle network
communications by themselves.  With the Generic
Security Service API (GSSAPI), applications that 
establish the secure connection are like a DCE RPC client.  
Applications that accept the secure connection are like a DCE RPC server.
.P
The GSS available with DCE includes the standard GSSAPI routines 
(defined in the Internet RFC 1509), as well as OSF DCE extensions to 
the GSSAPI routines.  These extensions are additional routines
that enable an application to use DCE security services.
.P
The GSSAPI combines authentication and authorization under a single
security mechanism type.  The security mechanism provides applications a
choice of either authenticated Kerberos security or authenticated PAC
authorization under DCE security.
.P
.ne 5
Although an application that uses GSSAPI may not make explicit calls to RPC
routines, the GSSAPI implementation itself uses DCE RPC to communicate with
the DCE registry.
.H 3 "The Public Key Certification API"
.iX "security service" "public key certification"
.iX "public key certification"
.P
The DCE Certification Service application programming interface can be
used to store and retrieve public keys on behalf of users and
applications.  DCE permits the use of public keys as part of the
public key authentication protocol that works via public and private
key pairs.  Messages encrypted under one of the keys can be decrypted
using the other (and vice versa); but messages cannot be encrypted and
decrypted by using the same key.  The certification service is used by
a certifying authority to certify the authenticity of distributed
public keys. Two policy modules are provided with DCE release 1.2.2
that can be used by developers to implement a certification authority.
.H 3 "Additional Information on DCE Security"
.iX "security service" "additional information"
.P
For additional information on the DCE Security Service and the GSSAPI,
see the following:
.ML
.LI
The security chapters of the \*(Dk and the \*(Ac (DCE Security Service only)
.LI
The \*L(3sec)\*O reference pages of the \*(Dr
.LI
The
(\*L8sec\*O and \*L5sec\*O) reference pages of the \*(Ar
.LE.
.iX "-]" "security service"
