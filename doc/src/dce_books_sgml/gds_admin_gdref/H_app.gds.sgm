<!--
# COPYRIGHT NOTICE
# Copyright (c) 1990-1996 Open Software Foundation, Inc. 
# ALL RIGHTS RESERVED (DCE). See the file named COPYRIGHT.DCE in the 
# src directory for the full copyright text. 
# 
# 
# HISTORY
# $Log: H_app.gds.sgm,v $
# Revision 1.1.2.6  1996/12/17  19:30:07  damon
# 	Expanded OSF C O P Y R I G H T   N O T I C E
# 	[1996/12/17  19:23:31  damon]
#
# Revision 1.1.2.5  1996/12/16  22:17:54  carrig
# 	{enh,R1.2.2}
# 	JC's Final edits
# 	[1996/12/16  22:14:59  carrig]
# 
# Revision 1.1.2.4  1996/12/15  22:56:54  carrig
# 	{enh,R1.2.2}
# 	Many, many changes
# 	[1996/12/15  22:55:05  carrig]
# 
# Revision 1.1.2.3  1996/10/04  18:25:10  carrig
# 	{enh,R1.2.2}
# 	Fixed Variable Lists
# 	[1996/10/04  18:23:48  carrig]
# 
# 	{enh,R1.2.2}
# 	Fixed Variable Lists
# 	[1996/10/03  17:57:55  carrig]
# 
# Revision 1.1.2.2  1996/09/28  16:00:38  weir
# 	Cleaned up history
# 	[1996/09/28  15:59:30  weir]
# 
# Revision 1.1.2.1  1996/09/24  20:21:13  weir
# 	Initial submission
# 	[1996/09/24  20:19:50  weir]
# 
# $EndLog$
# 
-->
<!---->
<!-- Fragment document type declaration subset:
ArborText, Inc., 1988-1993, v.4001
<!DOCTYPE Book PUBLIC "-//Davenport//DTD DocBook V2.4//EN" [
<!ENTITY OSFGDS.HAPP.pic.1 SYSTEM "eps/psap.eps" NDATA EPS>
]>
-->
<!-- OLD HISTORY-->
<!-- Revision 1.1.2.4  1995/08/15  20:10:14  weir-->
<!-- 	Prentice-Hall edits: second pass-->
<!-- 	[1995/08/15  20:09:18  weir]-->
<!---->
<!-- Revision 1.1.2.2  1994/09/01  16:57:47  rnollman-->
<!-- 	[rnollman] - checkin with edit OSF editorial comments-->
<!-- 	[1994/09/01  16:53:44  rnollman]-->
<!-- -->
<!-- Revision 1.1.2.1  1994/08/04  21:01:07  hal-->
<!-- 	Create DCE GDS Admin Gd & Ref from GDS parts of Adm Gd & Cmd Ref; fix log leaders if needed-->
<!-- 	[1994/08/04  20:08:18  hal]-->
<!-- -->
<!-- 	Creating GDS Admin Gd & Ref from Admin book.extended, Cmd Ref-->
<!-- -->
<!-- Revision 1.1.6.8  1994/05/14  14:31:59  rnollman-->
<!-- 	final final beta submittal-->
<!-- 	[1994/05/14  14:19:11  rnollman]-->
<!-- -->
<!-- Revision 1.1.6.7  1993/11/11  19:22:28  rnollman-->
<!-- 	update SNI copyright-->
<!-- 	[1993/11/11  19:22:11  rnollman]-->
<!-- -->
<!-- Revision 1.1.6.6  1993/11/08  13:23:26  rnollman-->
<!-- 	added new figure-->
<!-- 	[1993/11/08  13:22:59  rnollman]-->
<!-- -->
<!-- Revision 1.1.6.5  1993/10/30  10:54:06  rnollman-->
<!-- 	updates from Dublin-->
<!-- 	[1993/10/30  10:53:45  rnollman]-->
<!-- -->
<!-- Revision 1.1.6.4  1993/09/18  17:52:07  tmw-->
<!-- 	Added index entries for second version of master index.-->
<!-- 	[1993/09/18  17:48:17  tmw]-->
<!-- -->
<!-- Revision 1.1.6.3  1993/08/12  17:18:51  buckler-->
<!-- 	{edit, R1.0.2}-->
<!-- 	Prentice-Hall editorial changes.-->
<!-- 	[1993/08/12  16:24:08  buckler]-->
<!-- -->
<!-- Revision 1.1.6.2  1993/07/01  18:16:28  rnollman-->
<!-- 	incorporated first pass OSF editorial comments-->
<!-- 	[1993/07/01  18:15:49  rnollman]-->
<!-- -->
<!-- Revision 1.1.4.7  1993/03/02  18:43:51  buckler-->
<!-- 	Fixed mismatching .zA and .zZ codes-->
<!-- 	[1993/03/02  18:42:43  buckler]-->
<!-- -->
<!-- Revision 1.1.4.6  1993/02/03  22:32:16  steiner-->
<!-- 	Fixed page breaks (removed .nP's, added .DS/.DE).-->
<!-- 	[1993/02/03  22:31:50  steiner]-->
<!-- -->
<!-- Revision 1.1.4.5  1993/01/28  19:07:49  dbelch-->
<!-- 	Embedding copyright notice-->
<!-- 	[1993/01/28  18:33:50  dbelch]-->
<!-- -->
<!-- Revision 1.1.4.4  1993/01/27  22:44:55  buckler-->
<!-- 	Fixed cross-refs and figure calls for new book org-->
<!-- 	[1993/01/27  22:41:51  buckler]-->
<!-- -->
<!-- Revision 1.1.4.3  1993/01/08  12:44:36  marrek-->
<!-- 	No changes from SSE Dublin.-->
<!-- 	[1993/01/08  12:43:55  marrek]-->
<!-- -->
<!-- Revision 1.1.4.2  1992/08/26  19:51:10  weir-->
<!-- 	Moved-->
<!-- 	[1992/08/26  19:44:26  weir]-->
<!-- -->
<!-- 	Removed change bars-->
<!-- 	[1992/08/26  19:32:06  weir]-->
<!-- -->
<!-- Revision 1.1.2.5  1992/06/15  17:33:48  buckler-->
<!-- 	Re-fixed screen.mac pathname after Dublin drop-->
<!-- 	[1992/06/15  17:32:09  buckler]-->
<!-- -->
<!-- Revision 1.1.2.4  1992/06/10  20:34:05  marty-->
<!-- 	Doc drop from Dublin-->
<!-- 	[1992/06/10  20:30:59  marty]-->
<!-- -->
<!-- Revision 1.1.2.3  1992/05/13  18:03:50  weir-->
<!-- 	Fixed screen.mac path.-->
<!-- 	[1992/05/13  18:03:24  weir]-->
<!-- -->
<!-- Revision 1.1.2.2  1992/05/12  20:34:32  weir-->
<!-- 	New version for DCE1.0.1.-->
<!-- 	[1992/05/12  20:33:56  weir]-->
<!-- -->
<!-- Revision 1.1  1992/01/29  16:17:51  damon-->
<!-- 	Initial revision-->
<!-- -->
<!-- /* * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *-->
<!-- * COPYRIGHT   (C)  SIEMENS NIXDORF INFORMATIONSSYSTEME AG 1993   *-->
<!-- *                  ALL RIGHTS RESERVED                           *-->
<!-- *                                                                *-->
<!-- * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * */-->
<!-- OLD HISTORY-->
<!-- Revision 1.1.2.4  1995/08/15  20:10:14  weir-->
<!-- 	Prentice-Hall edits: second pass-->
<!-- 	[1995/08/15  20:09:18  weir]-->
<!---->
<!-- Revision 1.1.3.2  1995/08/15  20:09:18  weir-->
<!-- 	Prentice-Hall edits: second pass-->
<!---->
<!-- Revision 1.1.2.2  1994/09/01  16:57:47  rnollman-->
<!-- 	[rnollman] - checkin with edit OSF editorial comments-->
<!-- 	[1994/09/01  16:53:44  rnollman]-->
<!---->
<!-- Revision 1.1.3.2  1994/09/01  16:53:44  rnollman-->
<!-- 	[rnollman] - checkin with edit OSF editorial comments-->
<!---->
<!-- Revision 1.1.2.1  1994/08/04  21:01:07  hal-->
<!-- 	Create DCE GDS Admin Gd & Ref from GDS parts of Adm Gd & Cmd Ref; fix log leaders if needed-->
<!-- 	[1994/08/04  20:08:18  hal]-->
<!---->
<!-- 	Creating GDS Admin Gd & Ref from Admin book.extended, Cmd Ref-->
<!---->
<!-- Revision 1.1.1.3  1994/08/04  20:08:18  hal-->
<!-- 	Create DCE GDS Admin Gd & Ref from GDS parts of Adm Gd & Cmd Ref; fix log leaders if needed-->
<!---->
<!-- Revision 1.1.6.8  1994/05/14  14:31:59  rnollman-->
<!-- 	final final beta submittal-->
<!-- 	[1994/05/14  14:19:11  rnollman]-->
<!---->
<!-- Revision 1.1.7.2  1994/05/14  14:19:11  rnollman-->
<!-- 	final final beta submittal-->
<!---->
<!-- Revision 1.1.6.7  1993/11/11  19:22:28  rnollman-->
<!-- 	update SNI copyright-->
<!-- 	[1993/11/11  19:22:11  rnollman]-->
<!---->
<!-- Revision 1.1.7.2  1993/11/11  19:22:11  rnollman-->
<!-- 	update SNI copyright-->
<!---->
<!-- Revision 1.1.6.6  1993/11/08  13:23:26  rnollman-->
<!-- 	added new figure-->
<!-- 	[1993/11/08  13:22:59  rnollman]-->
<!---->
<!-- Revision 1.1.7.2  1993/11/08  13:22:59  rnollman-->
<!-- 	added new figure-->
<!---->
<!-- Revision 1.1.6.5  1993/10/30  10:54:06  rnollman-->
<!-- 	updates from Dublin-->
<!-- 	[1993/10/30  10:53:45  rnollman]-->
<!---->
<!-- Revision 1.1.7.2  1993/10/30  10:53:45  rnollman-->
<!-- 	updates from Dublin-->
<!---->
<!-- Revision 1.1.4.6  1993/02/03  22:32:16  steiner-->
<!--   Fixed page breaks (removed .nP's, added .DS/.DE).-->
<!--   [1993/02/03  22:31:50  steiner]-->
<!---->
<!-- Revision 1.1.4.5  1993/01/28  19:07:49  dbelch-->
<!--   Embedding copyright notice-->
<!--   [1993/01/28  18:33:50  dbelch]-->
<!-- -->
<!-- Revision 1.1.4.4  1993/01/27  22:44:55  buckler-->
<!--   Fixed cross-refs and figure calls for new book org-->
<!--   [1993/01/27  22:41:51  buckler]-->
<!-- -->
<!-- Revision 1.1.4.3  1993/01/08  12:44:36  marrek-->
<!--   No changes from SSE Dublin.-->
<!--   [1993/01/08  12:43:55  marrek]-->
<!-- -->
<!-- Revision 1.1.4.2  1992/08/26  19:51:10  weir-->
<!--   Moved-->
<!--   [1992/08/26  19:44:26  weir]-->
<!-- -->
<!--   Removed change bars-->
<!--   [1992/08/26  19:32:06  weir]-->
<!-- -->
<!-- Revision 1.1.2.5  1992/06/15  17:33:48  buckler-->
<!--   Re-fixed screen.mac pathname after Dublin drop-->
<!--   [1992/06/15  17:32:09  buckler]-->
<!-- -->
<!-- Revision 1.1.2.4  1992/06/10  20:34:05  marty-->
<!--   Doc drop from Dublin-->
<!--   [1992/06/10  20:30:59  marty]-->
<!-- -->
<!-- Revision 1.1.2.3  1992/05/13  18:03:50  weir-->
<!--   Fixed screen.mac path.-->
<!--   [1992/05/13  18:03:24  weir]-->
<!-- -->
<!-- Revision 1.1.2.2  1992/05/12  20:34:32  weir-->
<!--   New version for DCE1.0.1.-->
<!--   [1992/05/12  20:33:56  weir]-->
<!-- -->
<!-- Revision 1.1  1992/01/29  16:17:51  damon-->
<!--   Initial revision-->
<!-- -->
<Appendix Id="OSFGDS.HAPP.div.1">
<Title>PSAP Addresses</Title>
<!-- /* * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *-->
<!-- * COPYRIGHT   (C)  SIEMENS NIXDORF INFORMATIONSSYSTEME AG 1993   *-->
<!-- *                  ALL RIGHTS RESERVED                           *-->
<!-- *                                                                *-->
<!-- * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * */-->
<Para><!--.so gd/screen.mac-->
This appendix provides an administrator with all the necessary information
to enter or display PSAP addresses using the GDS
<IndexTerm Id="OSFGDS.HAPP.indx.1">
<Primary>PSAP</Primary>
<Secondary>Address</Secondary>
</IndexTerm>administration program <Command>gdsditadm</Command>.
The syntaxes of the different components of a PSAP address are described in
<Literal>Backus Naur Form</Literal> (BNF) notation.
</Para>
<Note>
<Para>In order to improve legibility, the keyword ``OR''
is used instead of the character | (pipe) symbol.
</Para>
</Note>
<Sect1 Id="OSFGDS.HAPP.div.2">
<Title>Examples of Entering Client and Server Addresses</Title>
<Para>PSAP addresses are entered in Mask 7a of the administration program
<Command>gdsditadm</Command>.  The following figure shows how a
client address is entered in Mask 7a.
<?sml-new-page><?sml-indent 0></Para>
<Figure>
<Title>Example of a Client Address</Title>
<Screen Remap="sS-sE"><GUILabel Role="lcorner">(Mask 7a)</GUILabel><GUILabel Role="rcorner">operation</GUILabel><ComputerOutput>
    </ComputerOutput>
<Emphasis Remap="underline">P-Selector:</Emphasis> <?sml-space -1>                      &squ;&squ;&squ;&squ;&squ;&squ;&squ;&squ;&squ;&squ;&squ;&squ;&squ;&squ;&squ;&squ;&squ;&squ;&squ;&squ;&squ;&squ;&squ;&squ;&squ;&squ;&squ;&squ;&squ;&squ;&squ;
<!-- .sp-->
    
<Emphasis Remap="underline">S-Selector:</Emphasis> <?sml-space -1>                      &squ;&squ;&squ;&squ;&squ;&squ;&squ;&squ;&squ;&squ;&squ;&squ;&squ;&squ;&squ;&squ;&squ;&squ;&squ;&squ;&squ;&squ;&squ;&squ;&squ;&squ;&squ;&squ;&squ;&squ;&squ;
<!-- .sp-->
    
<Emphasis Remap="underline">T-Selector:</Emphasis> <?sml-space -1>                      <Literal>Client</Literal>
<ComputerOutput>
<!-- .sp-->
    </ComputerOutput>
<Emphasis Remap="underline">NSAP-Address 1:</Emphasis> <?sml-space -1>                      <Literal>TCP/IP!internet=192.35.18.4+port=31010</Literal>
<ComputerOutput>
    </ComputerOutput>
<Emphasis Remap="underline">NSAP-Address 2:</Emphasis> <?sml-space -1>                      <Literal>OSILAN!ethernet=0800148101D3</Literal>
<ComputerOutput>
    </ComputerOutput>
<Emphasis Remap="underline">NSAP-Address 3:</Emphasis> <?sml-space -1>                      &squ;&squ;&squ;&squ;&squ;&squ;&squ;&squ;&squ;&squ;&squ;&squ;&squ;&squ;&squ;&squ;&squ;&squ;&squ;&squ;&squ;&squ;&squ;&squ;&squ;&squ;&squ;&squ;&squ;&squ;&squ;&squ;&squ;&squ;&squ;&squ;&squ;&squ;&squ;&squ;&squ;&squ;&squ;&squ;
<!-- .sp-->
    
<Emphasis Remap="underline">NSAP-Address 4:</Emphasis> <?sml-space -1>                      &squ;&squ;&squ;&squ;&squ;&squ;&squ;&squ;&squ;&squ;&squ;&squ;&squ;&squ;&squ;&squ;&squ;&squ;&squ;&squ;&squ;&squ;&squ;&squ;&squ;&squ;&squ;&squ;&squ;&squ;&squ;&squ;&squ;&squ;&squ;&squ;&squ;&squ;&squ;&squ;&squ;&squ;&squ;&squ;
<!-- .sp-->
    
<Emphasis Remap="underline">NSAP-Address 5:</Emphasis> <?sml-space -1>                      &squ;&squ;&squ;&squ;&squ;&squ;&squ;&squ;&squ;&squ;&squ;&squ;&squ;&squ;&squ;&squ;&squ;&squ;&squ;&squ;&squ;&squ;&squ;&squ;&squ;&squ;&squ;&squ;&squ;&squ;&squ;&squ;&squ;&squ;&squ;&squ;&squ;&squ;&squ;&squ;&squ;&squ;&squ;&squ;


</Screen>
</Figure>
<?sml-indent>
<!-- -->
<!-- -->
<!-- -->
<?sml-space>
<Para>The following figure shows how a server address is entered in Mask 7a:
<?sml-break><?sml-need 20><?sml-indent 0></Para>
<Figure>
<Title>Example of a Server Address</Title>
<Screen Remap="sS-sE"><GUILabel Role="lcorner">(Mask 7a)</GUILabel><GUILabel Role="rcorner">operation</GUILabel><ComputerOutput>
    </ComputerOutput>
<Emphasis Remap="underline">P-Selector:</Emphasis> <?sml-space -1>                      &squ;&squ;&squ;&squ;&squ;&squ;&squ;&squ;&squ;&squ;&squ;&squ;&squ;&squ;&squ;&squ;&squ;&squ;&squ;&squ;&squ;&squ;&squ;&squ;&squ;&squ;&squ;&squ;&squ;&squ;&squ;
<!-- .sp-->
    
<Emphasis Remap="underline">S-Selector:</Emphasis> <?sml-space -1>                      &squ;&squ;&squ;&squ;&squ;&squ;&squ;&squ;&squ;&squ;&squ;&squ;&squ;&squ;&squ;&squ;&squ;&squ;&squ;&squ;&squ;&squ;&squ;&squ;&squ;&squ;&squ;&squ;&squ;&squ;&squ;&squ;&squ;&squ;&squ;
<!-- .sp-->
    
<Emphasis Remap="underline">T-Selector:</Emphasis> <?sml-space -1>                      <Literal>Server</Literal>
<ComputerOutput>
<!-- .sp-->
    </ComputerOutput>
<Emphasis Remap="underline">NSAP-Address 1:</Emphasis> <?sml-space -1>                      <Literal>TCP/IP!internet=192.35.18.2+port=31011</Literal>
<ComputerOutput>
    </ComputerOutput>
<Emphasis Remap="underline">NSAP-Address 2:</Emphasis> <?sml-space -1>                      <Literal>OSILAN!ethernet=080014151475</Literal>
<ComputerOutput>
    </ComputerOutput>
<Emphasis Remap="underline">NSAP-Address 3:</Emphasis> <?sml-space -1>                      &squ;&squ;&squ;&squ;&squ;&squ;&squ;&squ;&squ;&squ;&squ;&squ;&squ;&squ;&squ;&squ;&squ;&squ;&squ;&squ;&squ;&squ;&squ;&squ;&squ;&squ;&squ;&squ;&squ;&squ;&squ;&squ;&squ;&squ;&squ;&squ;&squ;&squ;&squ;&squ;&squ;&squ;&squ;&squ;
<!-- .sp-->
    
<Emphasis Remap="underline">NSAP-Address 4:</Emphasis> <?sml-space -1>                      &squ;&squ;&squ;&squ;&squ;&squ;&squ;&squ;&squ;&squ;&squ;&squ;&squ;&squ;&squ;&squ;&squ;&squ;&squ;&squ;&squ;&squ;&squ;&squ;&squ;&squ;&squ;&squ;&squ;&squ;&squ;&squ;&squ;&squ;&squ;&squ;&squ;&squ;&squ;&squ;&squ;&squ;&squ;&squ;
<!-- .sp-->
    
<Emphasis Remap="underline">NSAP-Address 5:</Emphasis> <?sml-space -1>                      &squ;&squ;&squ;&squ;&squ;&squ;&squ;&squ;&squ;&squ;&squ;&squ;&squ;&squ;&squ;&squ;&squ;&squ;&squ;&squ;&squ;&squ;&squ;&squ;&squ;&squ;&squ;&squ;&squ;&squ;&squ;&squ;&squ;&squ;&squ;&squ;&squ;&squ;&squ;&squ;&squ;&squ;&squ;&squ;


</Screen>
</Figure>
<?sml-indent>
<!-- -->
<!-- -->
<!-- -->
<?sml-break>
<?sml-need 20>
<Para>The NSAP addresses depend on the type of the network. GDS supports TCP/IP
networks using sockets and OSI-LAN/-WAN network using XTI.
</Para>
<Para>GDS simultaneously operates XTI as well as sockets.  If the administrator
wishes to use both network types, the different addresses can be stored in
the DUA cache or DSA for the same object.
</Para>
<Para>If the administrator wishes to specify other address types for XTI, the
<Literal>nsapform.cfg</Literal> file (see 
<!-- the section entitled "OSI-NSAP Address Format-->
<!-- Description Table" in this Appendix) -->
Section D.3.1)
and the <Literal>nsapmacros</Literal> file
(see 
<!-- the section entitled "Macro Facility" in this Appendix) -->
Section D.4)
must be modified for this purpose.
</Para>
<Para>The remainder of this Appendix provides a detailed description of all other
information concerning PSAP addresses.  The actual network types supported
by GDS and the formats of the corresponding NSAP addresses are described
in the <Symbol Role="Variable">OSF DCE Release Notes</Symbol>.
</Para>
</Sect1>
<Sect1 Id="OSFGDS.HAPP.div.3">
<Title>Presentation-/Session-/Transport Selector Syntax</Title>
<Para>This section deals with the presentation, session, and transport selector
syntax.
</Para>
<InformalExample>
<Para><ProgramListing>&lt;selector> ::=
         &lt;anystring>&lt;subset any>
      OR
         &lt;anystring>'
      OR
         x'&lt;hexstring>'    1)
      OR
         t'&lt;anystring>'    2)
</ProgramListing></Para>
</InformalExample>
<Note>
<Para>1) If the syntax of the frame  x'&lt;...>' is specified
incorrectly, then the selector value is interpreted
as <Literal>&lt;anystring></Literal> or <Literal>&lt;anystring>&lt;subset any></Literal>.
<?sml-break>2) This indicates EBCDIC character representation of ASCII-string internally.
The conversion from the internal format will be done in the following order
<?sml-break><?sml-need 30></Para>
<ItemizedList>
<ListItem>
<Para>ASCII
</Para>
</ListItem>
<ListItem>
<Para>EBCDIC
</Para>
</ListItem>
<ListItem>
<Para>Hex-string
</Para>
</ListItem>
</ItemizedList>
</Note>
<InformalExample>
<Para><ProgramListing>&lt;anystring> ::=
         &lt;any>
      OR
         &lt;any>&lt;anystring>
        
        
&lt;any> ::= [printable ASCII-character set (&bsol;040 - &bsol;176)]
        
        
&lt;subset any> ::= [printable ASCII-character set
                         (&bsol;041 - &bsol;053, &bsol;055 - &bsol;176)]
        
        
&lt;hexstring> ::=
         &lt;hexvalue>
      OR
         &lt;hexvalue>&lt;hexstring>
        
        
&lt;hexvalue> ::= [0-9a-fA-F][0-9a-fA-F]
</ProgramListing></Para>
</InformalExample>
<Para>Examples for a T-Selector:
</Para>
<ItemizedList>
<ListItem>
<Para>Server for the T-Selector of a server
</Para>
</ListItem>
<ListItem>
<Para>Client for the T-Selector of a client
</Para>
</ListItem>
</ItemizedList>
<?sml-break>
<?sml-need 30>
</Sect1>
<Sect1 Id="OSFGDS.HAPP.div.4">
<Title>Common NSAP Address Syntax</Title>
<Para>This section shows the common NSAP address syntax.
</Para>
<InformalExample>
<Para><ProgramListing>&lt;NSAP-address> ::=
         &lt;NSAP-address type>+&lt;IDI-value>
      OR
         &lt;NSAP-address type>+&lt;DSP>
      OR
         &lt;NSAP-address type>+&lt;IDI-value>+&lt;DSP>
      OR
          NA+&lt;hexstring>
        

&lt;NSAP-address type> ::=  1)
         X121_D              /* CCITT-X.121 address type
                                     (decimal DSP-syntax) */
      OR
         X121_B              /* CCITT-X.121 address type
                                     (binary DSP-syntax)  */
      OR
         DCC_D               /* ISO-3166-DCC address type
                                     (decimal DSP-syntax) */
      OR
         DCC_B               /* ISO-3166-DCC address type
                                     (binary DSP-syntax)  */
      OR
         TELEX_D             /* CCITT-F.69 address type
                                     (decimal DSP-syntax) */
      OR
         TELEX_B             /* CCITT-F.69 address type
                                     (binary DSP-syntax)  */
      OR
         PSTN_D              /* CCITT-E.163 address type
                                     (decimal DSP-syntax) */
      OR
         PSTN_B              /* CCITT-E.163 address type
                                     (binary DSP-syntax)  */
<?sml-break><?sml-need 20>      OR
         ISDN_D              /* CCITT-E.164 address type
                                     (decimal DSP-syntax) */
      OR
         ISDN_B              /* CCITT-E.164 address type
                                     (binary DSP-syntax)  */
      OR
         ICD_D               /* ISO-6523-ICD address type
                                     (decimal DSP-syntax) */
      OR
         ICD_B               /* ISO-6523-ICD address type
                                     (binary DSP-syntax)  */
      OR
         LOCAL_D             /* local address type
                                     (decimal DSP-syntax) */
      OR
         LOCAL_B             /* local address type
                                     (binary DSP-syntax)  */
      OR
         LOC_ISO             /* local address type
                                     (ISO646 DSP-syntax)  */
      OR
         LOC_NAT             /* local address type
                                     (national DSP-syntax)*/

&lt;IDI-value> ::= &lt;digitstring>
        
        
&lt;DSP> ::=
         &lt;DSP-type>+&lt;decimal DSP-parts>
      OR
         &lt;DSP-type>+&lt;binary DSP-parts>
</ProgramListing></Para>
</InformalExample>
<Para>The total length of &lt;binary DSP-parts> must always be integral numbers
of octets.
</Para>
<InformalExample>
<Para><ProgramListing>&lt;DSP-type> ::=    1)
             &lt;any> /* 1 up to 8 characters */

</ProgramListing></Para>
</InformalExample>
<Note>
<Para>1) The names of DSP types should correspond to the names specified in
the NSAP address format description table (see the <Literal>nsapform.cfg</Literal>
or <Literal>nsapform.xxx</Literal> file in 
<!-- the section entitled "Common NSAP-->
<!-- Address Syntax" in this Appendix).-->
Section D.3.1).
</Para>
</Note>
<InformalExample>
<Para><ProgramListing>&lt;decimal DSP-parts> ::=
         &lt;digitstrings>
      OR
         &lt;digitstrings>+&lt;decimal DSP-parts>
        
        
&lt;binary DSP-parts> ::=
          &lt;hexstrings>
      OR
          &lt;hexstrings>+&lt;binary DSP-parts>

        
        
&lt;digitstrings> ::=
          &lt;digitstring>
      OR
          &lt;dotted digitstring>
      OR
          &lt;special ASCII-string>
      OR
          &lt;slashed digitstring1>
      OR
          &lt;slashed digitstring2>

        
&lt;hexstrings> ::=
          &lt;hexstring>
      OR
          &lt;dotted digitstring>
      OR
          &lt;special ASCII-string>
      OR
          &lt;digitstring>
      OR
          &lt;slashed digitstring1>
      OR
          &lt;slashed digitstring2>

        
        
&lt;digitstring> ::=
          &lt;digit value>
      OR
          &lt;digit value>&lt;digitstring>
        
        
&lt;dotted digitstring> ::=
          .&lt;special digitstring>
      OR
          &lt;special digitstring>&lt;multi dotted digitstring>
</ProgramListing></Para>
</InformalExample>
<InformalExample>
<Para><ProgramListing>&lt;multi dotted digitstring> ::=
          .&lt;special digitstring>
      OR
          v.&lt;special digitstring>&lt;multi dotted digitstring>

&lt;slashed digitstring1> ::=
          /&lt;special slashed string1>
      OR
           &lt;special slashed string1> &lt;multi slashed string1>

&lt;multi slashed string1> ::=
          /&lt;special slashed string1>
      OR
          /&lt;special slashed string1> &lt;multi slashed string1>

&lt;slashed digitstring2> ::=
          /&lt;special slashed string2>
      OR
           &lt;special slashed string2> &lt;multi slashed string2>

&lt;multi slashed string2> ::=
          /&lt;special slashed string2>
      OR
          /&lt;special slashed string2> &lt;multi slashed string2>

&lt;special slashed string1> ::= [0-255]

&lt;special slashed string2> ::= [0-65536]

&lt;special ASCII-string> ::=
        '&lt;subset anystring0>'

&lt;subset anystring0> ::=
         &lt;any0>
      OR
         &lt;any0>&lt;subset anystring0>

&lt;any0> ::= [printable ASCII-character set (&bsol;040 - &bsol;046,
            &bsol;050 - &bsol;052, &bsol;054 - &bsol;176)]
</ProgramListing></Para>
</InformalExample>
<InformalExample>
<Para><ProgramListing>&lt;hexstring> ::=
           &lt;hexvalue>
      OR
           &lt;hexvalue>&lt;hexstring>
        
        
&lt;digit value> ::= [0-9]


&lt;special digitstring> ::= [0 - 255]

&lt;hexvalue> ::= [0-9a-fA-F]

</ProgramListing></Para>
</InformalExample>
<?sml-break>
<?sml-need 30>
<!-- .DS-->
<Figure>
<Title>Common NSAP Address Syntax</Title>
<Graphic Format="EPS" Entityref="OSFGDS.HAPP.pic.1" Scalefit="1" Reprodep="375" Reprowid="375"></Graphic>
</Figure>
<?sml-space>
<!-- .so gd/Pics/psap.pic-->
<!-- -->
<?sml-point-size 12>
<!-- .DE-->
<?sml-new-page>
<Sect2 Id="OSFGDS.HAPP.div.5">
<Title>OSI-NSAP Address Format Description Table</Title>
<Para>The following table describes the different NSAP address types
(with reference to ISO 8348 addendum 2) and in particular the DSP formats
that are supported by the communications software.
For each supported NSAP address type there can be one or more entries.
Each entry consists of:
</Para>
<ItemizedList>
<ListItem>
<Para>The name of the NSAP address type (only predefined names can be used,
see below) or the redirection symbol ``>'' (only if the entry is an
additional entry belonging to the same NSAP address type).
</Para>
<Para>The following values are optional for each entry:
</Para>
</ListItem>
<ListItem>
<Para>An Initial Domain Identifier (IDI) (global NSAP address types only) for
which the following syntaxes are permitted:
<!-- -->
<!-- -->
<!-- -->
</Para>
<Table Frame="all" Orient="Port">
<Title>NSAP Address Types</Title>
<TGroup Cols="2">
<ColSpec Colsep="1" Align="Left" Colwidth="1*" Colname="col1" Colnum="1">
<ColSpec Align="Left" Colwidth="1*" Colname="col2" Colnum="2">
<thead>
<Row>
<Entry rowsep="1"><Literal>SYNTAX</Literal></Entry>
<Entry rowsep="1"><Literal>MEANING</Literal></Entry>
</Row>
</thead>
<tbody>
<Row>
<Entry>&lt;IDI-value></Entry>
<Entry>The DSP format that follows is associated with the given IDI value only.</Entry>
</Row>

<Row>
<Entry>&lt;IDI-value1>-&lt;IDI-value2></Entry>
<Entry>The DSP format that follows is associated with the given range of IDI values.</Entry>
</Row>
<Row>
<Entry><Literal>*</Literal></Entry>
<Entry>The DSP format that follows is
associated with all IDI values.</Entry>
</Row>
<Row>
<Entry>+</Entry>
<Entry>The DSP format that follows is
>associated with all IDI values
left by other syntaxes.</Entry>
</Row>
</TBody>
</TGroup>
</Table>
<!-- -->
<!-- -->
<!-- -->
<!-- -->
<!-- -->
</ListItem>
<ListItem>
<Para>A name in DSP format (up to 8 characters)
</Para>
</ListItem>
<ListItem>
<Para>The number of DSP components (up to <Literal>MAX_DSP_PARTS</Literal>)
</Para>
</ListItem>
<ListItem>
<Para>The DSP part description
</Para>
</ListItem>
<ListItem>
<Para>A DSP part can be described by the following:
<?sml-break><?sml-need 20></Para>
<ItemizedList>
<ListItem>
<Para>DSP part size
</Para>
</ListItem>
<ListItem>
<Para>DSP part unit type
</Para>
</ListItem>
<ListItem>
<Para>DSP structure (Format Identifier) identifier
</Para>
</ListItem>
<ListItem>
<Para>DSP Ranges
</Para>
</ListItem>
<ListItem>
<Para>DSP part of variable size
</Para>
</ListItem>
<ListItem>
<Para>Optional DSP part
</Para>
</ListItem>
<ListItem>
<Para>DSP part padding character
</Para>
</ListItem>
<ListItem>
<Para>DSP part Justification
</Para>
</ListItem>
</ItemizedList>
</ListItem>
<ListItem>
<Para>DSP part size
</Para>
<Para>This indicates the size of the DSP part. The size
of DSP parts is given in terms of units.
The size field consists of two subfields. The
first subfield, if specified, indicates the minimum
number of unit values that must occur in the DSP
part.  The second subfield is mandatory and should
be present for all DSP parts; it indicates the
size of the DSP part and the maximum number
of unit values that can occur for the DSP part.
</Para>
</ListItem>
<ListItem>
<Para>DSP part unit types:
</Para>
<Para>The unit type indicates how the conversion
should take place.  Following are the allowed
unit types:
</Para>
<OrderedList>
<ListItem>
<Para>Decimal digit
</Para>
</ListItem>
<ListItem>
<Para>Octet
</Para>
</ListItem>
<ListItem>
<Para>SemiOctet
</Para>
</ListItem>
<ListItem>
<Para>Dotted decimal string
</Para>
</ListItem>
<ListItem>
<Para>Slashed decimal string
</Para>
</ListItem>
<ListItem>
<Para>ASCII Character
</Para>
</ListItem>
</OrderedList>
<Para>Various flags are described that can be used
for specifying the DSP part unit type.
<?sml-break><?sml-need 20></Para>
</ListItem>
<ListItem>
<Para>DSP structure identifier:
</Para>
<Para>This will allow DSP format identifiers.
It is possible to identify different DSP formats
by having some fixed values in DSP parts.  It is
possible to have multiple format identifiers in a
DSP format description; this allows
the different DSP address formats that will
occur as a result of autonomous subdomains that are
allowed to make their own DSP structures.  All the
format identifiers should be entered complete.
The length of the format identifier will be completed
depending upon the maximum length of the DSP part
specified in the length field, right or left
justification with the padding characters specified
in the description.  It is permissible to specify unit-types
of decimal digits, semioctets, octets, or ASCII
characters with the format identifier.
</Para>
</ListItem>
<ListItem>
<Para>DSP Ranges:
</Para>
<Para>Allows the user to specify the range of
values that can be administered for the specific
DSP part. If the format identifier flag is set then
it is not permissible to specify the ranges with the
specific DSP part.  Each unit type type has a range by
default.  It is possible to further restrict the
default values. In some unit types it is also
possible to define the range on the ``unit type
strings''.
</Para>
<Para>Following are the default values for the unit type ranges:
</Para>
<Para>If decimal digit, then
<?sml-indent +.5>lower range = 0
<?sml-break>upper range = 9
<?sml-indent></Para>
<Para>If semi octet, then
<?sml-indent +.5>lower range = 0
<?sml-break>upper range = F/f
<?sml-indent>If octet, then
<?sml-indent +.5>lower range = 00
<?sml-break>upper range = FF/ff
<?sml-indent></Para>
<Note>
<Para>Only hexadecimal ranges are allowed.
</Para>
</Note>
<Para>For dotted decimal string:
<?sml-indent +.5>lower range = 0
<?sml-break>upper range = 255
<?sml-indent><?sml-break><?sml-need 20></Para>
<Para>For slashed decimal string:
<?sml-indent +.5>lower range = 0
<?sml-break>upper range = 255
<?sml-break>OR
<?sml-break>lower range = 0
<?sml-break>upper range = 65536
<?sml-indent></Para>
<Para>depending upon the unittype in the slashed notation.
It is not permissible to specify the ranges for
unittype ASCII character.
</Para>
<Para>For the following unittypes, it is possible to define
the ``unit type string range'':
<?sml-indent +.5>Decimal digit
<?sml-break>Semi Octet
<?sml-break>Octet
<?sml-indent></Para>
<Para>The default is always that ``unit type range'' and ``unit type
string range'' must be specified explicitly.
</Para>
</ListItem>
<ListItem>
<Para>DSP parts of variable size:
</Para>
<Para>In some DSP structures the length
of the DSP part is given by the prefix.  Each variable
DSP part, if it is not the last part of DSP part
structure, must have its length as prefix to the
DSP part structure.  The prefix type will be
indicated by a special flag.
</Para>
</ListItem>
<ListItem>
<Para>DSP parts which are optional:
</Para>
<Para>This means the DSP part is optional.
A DSP part can be specified as optional if and only
if it is the last part of the DSP structure.  An
optional DSP part can be variable sized or of fixed
size.
</Para>
</ListItem>
<ListItem>
<Para>DSP part padding mechanism:
</Para>
<Para>Different characters can be used as padding characters
in different formats of DSP.
The padding characters will be encoded or decoded
depending upon the unit type.
</Para>
<Para>In most of the unit types the padding
characters can be entered as p&lt;PADCHAR>. In case of
ASCII unit types the printable padding character can
be entered as normal, while nonprintable (and also
printable) ASCII characters can be entered using
``&bsol;'' (backslash) followed by the decimal ASCII value
of the character.
<?sml-break><?sml-need 20></Para>
<Para>The padding character ``-'' (dash) has special meaning,
and can be specified with the parts where it is not
necessary to have padding characters and input is
given as a complete string.
</Para>
</ListItem>
<ListItem>
<Para>Leading/Trailing/Justification:
</Para>
<Para>As explained for ``padding
characters''. It should be possible to say
whether the DSP part is to be right justified
or left justified if it is less than its size;
depending upon the justification, padding
characters should be added.
</Para>
</ListItem>
</ItemizedList>
<Para>NOTE:&nbsp;
</Para>
<OrderedList>
<ListItem>
<Para>If the format identifier is specified then it is the
responsibility of the offline software to expand the
format identifier according to the description entered
by the user in the format description.
The expanded form of the format identifier is unique
in the format description file.
</Para>
</ListItem>
<ListItem>
<Para>DSP Part flags can be specified in any order.
</Para>
</ListItem>
</OrderedList>
<Para>Notation:
</Para>
<OrderedList>
<ListItem>
<Para>The following description of the DSP format of the OSI NSAP
address is given in BNF notation.  All the terminal symbols
are printed as they will appear, and all the non terminal symbols
are enclosed in ``&lt;'' and ``>'' symbols. If one of the symbol
``&lt;'' or ``>'' appears in the input as a terminal symbol, it is
indicated by the ``&bsol;'' symbol; for example, ``&bsol;>'' means ``>'' as
terminal symbol. Comments are given in /* ..... */ , this has
nothing to do with BNF notation and should not be confused with it.
Similarly, some explanations are given in square brackets (``['' ``]'')
preceded by the colon character (``:'') for the better understanding
of BNF notation description.
</Para>
</ListItem>
<ListItem>
<Para>To improve legibility, all the capital non-terminal symbols are expanded
where possible into terminal symbols.
</Para>
</ListItem>
</OrderedList>
<?sml-break>
<?sml-need 20>
<?sml-point-size -2>
<InformalExample>
<Para><ProgramListing>
<?Pub _font TypeSize="8pt">
&lt;OSI_NSAP_Description> ::= &lt;NSAP_Format_Name> 
                           OR
                           &lt;NSAP_Format_Name>&lt;t>&lt;DSP_Desc>

&lt;NSAP_Format_Name>     ::= &lt;AsciiSTR>  /* Values are predefined */

&lt;DSP_Desc>             ::= 
        &lt;DSP_Format_Name>&lt;t>&lt;NUMOFPARTS>&lt;t>&lt;DSP_Parts_Desc>&lt;t>
        >&lt;t>&lt;DSP_Desc> 
        OR
        &lt;DSP_Format_Name>&lt;t>&lt;NUMOFPARTS>&lt;t>&lt;DSP_Parts_Desc> 
        OR
        &lt;idi>&lt;t>&lt;DSP_Format_Name>&lt;t>&lt;NUMOFPARTS>&lt;t>&lt;DSP_Parts_Desc>&lt;t>
        >&lt;t>&lt;DSP_Desc> 
        OR
        &lt;idi>&lt;t>&lt;DSP_Format_Name>&lt;t>&lt;NUMOFPARTS>&lt;t>&lt;DSP_Parts_Desc> 

&lt;idi>   ::= &lt;DigitStr>  /* Depending upon size of IDI */
        OR
        &lt;DigitStr>-&lt;Digitstr>
        OR
        *
        OR
        +

&lt;DSP_Format_name>       ::= &lt;AsciiSTR>  /* Up to max 8 characters */

&lt;NUMOFPARTS>            ::= [1-10]

&lt;DSP_Parts_Desc>        ::= 
        &lt;DSP-part-size> 
   OR
   &lt;DSP-part-size>:&lt;DSP-format-description list>
   OR
   &lt;DSP-part-size>:&lt;DSP-format-description list>&lt;t>&lt;DSP_Parts_Desc>
                
&lt;DSP-part-size>    ::=  &lt;max.  DSP-units>  
                   OR
                   &lt;min.  DSP-units>,&lt;max.  DSP-units>
&lt;max.  DSP-unit size> ::= &lt;DIGIT> 
                   OR
                   &lt;DIGIT>&lt;DIGIT>
                        
&lt;min.  DSP-unit size> ::= &lt;DIGIT> 
                   OR
                   &lt;DIGIT>&lt;DIGIT>
                   :[Max. limit depending upon context
                    but in no case the expanded form of
                    it should exceed the max. allowed
                    DSP size.  Example:
                        "2,4"
                    This means a minimum of two and maximum of
                    four unittypes can occur ]
<?Pub /_font><?Pub Caret>
</ProgramListing></Para>
</InformalExample>
<?sml-point-size +2>
<?sml-point-size -2>
<InformalExample>
<Para><ProgramListing>
<?Pub _font TypeSize="8pt">
&lt;DSP-format-description-list> ::= 
        &lt;DSP-format-unit-description>
        OR 
        &lt;DSP-format-unit-description>,&lt;DSP-format-description-list>

&lt;DSP-format-unit-description> ::= 
        u&lt;type-value> OR r&lt;RangeValue> OR R&lt;RangeUnitString> OR
        I&lt;format-id> OR V OR O OR v OR p&lt;PADCHAR> OR  L
<?Pub /_font><?Pub Caret>
</ProgramListing></Para>
</InformalExample>
<?sml-point-size +2>
<Para>Meaning of terminal symbols defined for &lt;DSP-format-description>:
</Para>
<VariableList>
<VarListEntry>
<Term>u&ensp;:</Term>
<ListItem>
<Para>Indicates the unit type of the DSP part.
</Para>
</ListItem>
</VarListEntry>
<VarListEntry>
<Term>r&ensp;:</Term>
<ListItem>
<Para>The unittype range is default for units and can be further
restricted.
</Para>
</ListItem>
</VarListEntry>
<VarListEntry>
<Term>R&ensp;:</Term>
<ListItem>
<Para>Special unittype string ranges can be specified for some unit
types (``ud'',``uD'',``uh'',``uH'' , the meaning of flags are
explained later in the description).
</Para>
</ListItem>
</VarListEntry>
<VarListEntry>
<Term>I&ensp;:</Term>
<ListItem>
<Para>Indicates that the specific DSP part is format identifier.
</Para>
</ListItem>
</VarListEntry>
<VarListEntry>
<Term>V&ensp;:</Term>
<ListItem>
<Para>Indicates that the specific DSP part is variable sized.
</Para>
</ListItem>
</VarListEntry>
<VarListEntry>
<Term>O&ensp;:</Term>
<ListItem>
<Para>Indicates that the specific DSP part is optional.
</Para>
</ListItem>
</VarListEntry>
<VarListEntry>
<Term>v&ensp;:</Term>
<ListItem>
<Para>Indicates the prefix length is required (this flag has meaning only
if the DSP part is the last part and the user has option to prefix
the length)
</Para>
</ListItem>
</VarListEntry>
<VarListEntry>
<Term>p&ensp;:</Term>
<ListItem>
<Para>Indicates the character that follows should be used as
padding character.
</Para>
</ListItem>
</VarListEntry>
<VarListEntry>
<Term>L&ensp;:</Term>
<ListItem>
<Para>Indicates the DSP part should be left justified (default
is right justification and should not be specified ).
</Para>
</ListItem>
</VarListEntry>
</VariableList>
<InformalExample>
<Para><ProgramListing>
<?Pub _font TypeSize="8pt">
&lt;type-value>  ::= d OR D OR h OR H OR a OR A u OR o OR O
                  OR s1 OR s2 OR S1 OR S2
<?Pub /_font><?Pub Caret>
</ProgramListing></Para>
</InformalExample>
<Para>Meaning of the terminal symbols defined for &lt;type value>
</Para>
<Note>
<Para>There will be two levels of encoding. The first level of encoding
will be done on the basis of unit flags defined. The second level
of encoding will depend upon the DSP syntax. In the description of
each flag a unit is defined which indicates the number of decimal
digits / hex digits. Compatibility between first level
and second level encoding will be taken care of by the software.
</Para>
</Note>
<VariableList>
<VarListEntry>
<Term>d&ensp;:</Term>
<ListItem>
<Para>A unit consists of one input character.
Each unit in the input will be converted into
one decimal digit, and vice versa. Only decimal
digits can be entered as input.
Allowed for both DSP syntaxes.
</Para>
<Para>Example:
"3:ud": "123" ==> "123"
</Para>
</ListItem>
</VarListEntry>
<VarListEntry>
<Term>D&ensp;:</Term>
<ListItem>
<Para>A unit consists of two input character.
Each unit in the input will be converted
into two decimal digits, and vice versa.
Only an even number of decimal digits can be
entered as input.
Binary DSP syntax only.
</Para>
<Para>Example:
"4:uD": "12345678" ==> "12345678"
</Para>
</ListItem>
</VarListEntry>
<VarListEntry>
<Term>h&ensp;:</Term>
<ListItem>
<Para>A unit consists of one input character.
Each unit in the input will be converted
into a hex digit, and vice versa. Only hex digits can
be entered as input.
Binary DSP syntax only.
</Para>
<Para>Example:
"4:uh": "ABCD" ==> "ABCD"
</Para>
</ListItem>
</VarListEntry>
<VarListEntry>
<Term>H&ensp;:</Term>
<ListItem>
<Para>A unit consists of two input character.
Each unit in the input will be converted into
two hex digits, and vice versa. Only an even number
of hex digits can be entered.
Binary DSP syntax only.
</Para>
<Para>Example:
"4:uH": "AB3456EF" ==> "AB3456EF"
</Para>
</ListItem>
</VarListEntry>
<VarListEntry>
<Term>a&ensp;:</Term>
<ListItem>
<Para>A unit consists of one ASCII character.
Each unit in the input will be converted into
three decimal digits, and vice versa.  All
printable ASCII characters can be entered.
Allowed for Decimal and Binary DSP syntax.
</Para>
<Para>Example:
"2:ua": "EF" ==> "069070"
</Para>
</ListItem>
</VarListEntry>
<VarListEntry>
<Term>A&ensp;:</Term>
<ListItem>
<Para>A unit consists of one ASCII character.
Each unit in the input will be converted into two
hex digits, and vice versa. All printable ASCII
characters can be entered.
Binary DSP syntax only.
</Para>
<Para>Example:
"2:uA": "EF" ==> "4546"
</Para>
</ListItem>
</VarListEntry>
<VarListEntry>
<Term>o&ensp;:</Term>
<ListItem>
<Para>A unit consists of one dotted string.
Each unit in the input will be expanded into
three decimal digits, and vice versa.
Allowed for Decimal and Binary DSP syntax.
</Para>
<Para>Example:
"4:uo" : "127.0.0.1" ==>"127000000001"
</Para>
</ListItem>
</VarListEntry>
<VarListEntry>
<Term>O&ensp;:</Term>
<ListItem>
<Para>A unit consists of one dotted string.
Each unit in the input will be converted into
two hex digits, and vice versa.
Binary DSP syntax only.
</Para>
<Para>Example:
"4:uO" : "127.0.0.1" ==>"7F000001"
</Para>
</ListItem>
</VarListEntry>
<VarListEntry>
<Term>s1&ensp;:</Term>
<ListItem>
<Para>A unit consists of one slashed decimal string.
Each unit will be expanded into three
decimal digits, and vice versa.
Allowed for Decimal and Binary DSP syntax.
</Para>
<Para>Example:
"2:us1" : "25/155" ==>"025155"
</Para>
</ListItem>
</VarListEntry>
<VarListEntry>
<Term>s2&ensp;:</Term>
<ListItem>
<Para>A unit consists of one slashed decimal string
Each unit will be expanded into five
decimal  digits, and vice versa.
Allowed for Decimal and Binary DSP syntax.
</Para>
<Para>Example:
"2:us2" : "425/1631" ==>"0042501631"
</Para>
</ListItem>
</VarListEntry>
<VarListEntry>
<Term>S1&ensp;:</Term>
<ListItem>
<Para>A unit consists of one slashed decimal
string.  Each unit will be converted into
two hex digits, and vice versa.
Binary DSP syntax only.
</Para>
<Para>Example:
"2:uS1" : "25/155" ==>"199B"
</Para>
</ListItem>
</VarListEntry>
<VarListEntry>
<Term>S2&ensp;:</Term>
<ListItem>
<Para>A unit consists of one slashed decimal
string.  Each unit will be converted into
four hex digits, and vice versa.
Binary DSP syntax only.
<!-- -->
<!-- ZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZ-->
<!-- -->
</Para>
<Para>Example:
"2:uS2" : "425/1631" ==>"01A9065F"
</Para>
</ListItem>
</VarListEntry>
</VariableList>
<!-- -->
<!-- -->
<!-- -->
<?sml-break>
<?sml-need 20>
<?sml-point-size -2>
<InformalExample>
<Para><ProgramListing>&lt;RangeValue>    ::= &lt;DigitStr>-&lt;DigitStr> OR &lt;HexStr>-&lt;HexStr>

       For example :
               4:uh,r0-FF    ( range for hexadecimal notaion)

               4:uo,r0-125   (unit type range for dotted notat.)

            : [ if the unit type is "uo" or "uO" or "us1" or
                "us2" or "uS1" or "uS2" then only unit type ranges
                will be allowed; that is:

                For "uo" or "uO" ranges between 0-255 are allowed
                For "us1" or "uS1" ranges between 0-255 are
                 allowed
                 For "us2" or "uS2" ranges between 0-65536 are
                 allowed. The defaults are the minimum and maximum
                 allowed in the above specification ]
 
&lt;RangeUnitString>  ::= &lt;DigitStr> /* Constant or Reserved Values */
                   OR
                   &lt;DigitStr>-&lt;DigitStr>
                   OR
                   &lt;HexStr> /* Constant Value or Reserved Values */
                   OR
                   &lt;HexStr>-&lt;HexStr>
        
                    For example : 4:ud,R1234-5432

&lt;format-id>     ::= &lt;string>

                    For example :
                        "1:uD,I08" ==> "08"
                        "1:ua,I8"  ==> "056"
                        "1:uo,I8"  ==>  [ NOT ALLOWED ]

&lt;String>     ::= &lt;DigitStr> OR &lt;HexStr> OR &lt;AsciiStr>


&lt;PADCHAR>    ::= [0-9,'-']   /* if unit flag is 'd' or 'h' or
                                 'o' or 's1' or 's2' */ 
	     ::= [0-9A-Fa-f,'-'] /* if unit flag  'D' or 'H' or
                            'O' or 'S1' or 'S2' */
	     ::= [&numsp;00-127] /* if unit flag is 'a' or 'A' */

:    [ It is possible to produce all printable characters using the
      above values. Nonprintable as well as printable characters can
      be produced with backslash notation. In backslash notation the
      character can be input as a decimal ASCII value. For example:

      "4:ud,p0" : "12" ==> "0012"

      "4:uH,p0" : "EF" ==> "000000EF"
                                        
      "4:uA,p0" : "EF" ==> "30304546"

      "4:uA,p\048: "EF" ==> "30304546"

      "4:uA,p\0" : "EF" ==> "00004546"

      "4:uA,p0" : "0F" ( Not allowed ) ]
</ProgramListing></Para>
</InformalExample>
<?sml-point-size +2>
<Note>
<Para>The character ``-'' has special meaning used in conjunction with the padding
character flag. This character indicates that the field should be input
complete; no padding will be done by software.
</Para>
</Note>
<?sml-point-size -2>
<InformalExample>
<Para><ProgramListing>&lt;DigitStr>      ::= &lt;DIGIT>    OR &lt;DIGIT>&lt;DigitStr>
&lt;HexStr>        ::= &lt;HEXDIGIT> OR &lt;HEXDIGIT>&lt;HexStr>
&lt;DIGIT>         ::= [0-9]
&lt;HEXDIGIT>      ::= [0-9A-Fa-f]
&lt;AsciiStr>      ::= '&lt;AsciiSTR>'
&lt;AsciiSTR>      ::= &lt;CHARACTER> OR &lt;CHARACTER>&lt;AsciiSTR>
&lt;CHARACTER>     ::= /* Any printable Character (0x20-0x7E) */ 

&lt;t> ::=  space(s)or tab character.
</ProgramListing></Para>
</InformalExample>
<?sml-point-size +2>
<Para><!-- .DS-->
Default values for DSP format Description:
</Para>
<ItemizedList>
<ListItem>
<Para>DSP Part size is fixed.
</Para>
</ListItem>
<ListItem>
<Para>DSP Part is mandatory and should always be entered.
</Para>
</ListItem>
<ListItem>
<Para>All values allowed for a particular DSP syntax can be entered;
that is, no ranges and no format identifier.
</Para>
</ListItem>
<ListItem>
<Para>Unit Type is ``ud'' if DSP syntax is decimal; ``uH'' if DSP syntax is binary.
</Para>
</ListItem>
<ListItem>
<Para>DSP Part is right justified.
</Para>
</ListItem>
<ListItem>
<Para>Padding character is ``0''.
</Para>
</ListItem>
</ItemizedList>
<!-- .DE-->
<Para>Following are the contents of the NSAP Description file that comes with the
standard software. They can be customized, if required, to conform with local
environments.
</Para>
<Para>NOTE:
</Para>
<OrderedList>
<ListItem>
<Para>Lines beginning with a # character are treated as comments.
</Para>
</ListItem>
<ListItem>
<Para>In the description of DSP structures ``+'' signs are used
as separators.
</Para>
</ListItem>
</OrderedList>
<?sml-point-size -2>
<InformalExample>
<Para><ProgramListing>
<?Pub _font TypeSize="8pt">
# ---------------------------------------------------------------
# FORMAT=CCITT-X.121;AFI=36,52;IDI-length=14;DSP-syntax=decimal;
#    DSP-length=24
  X121_D    
#
# FORMAT=CCITT-X.121;AFI=37,53;IDI-length=14;DSP-syntax=binary;
#    DSP-length=12
  X121_B
#
# FORMAT=ISO-DCC;AFI=38;IDI-length=3;DSP-syntax=decimal;
#    DSP-length=35
  DCC_D  
#
# FORMAT=ISO-DCC;AFI=39;IDI-length=3;DSP-syntax=binary;DSP-length=17
# The DIN has defined the DSP Structure as follows :
#             DE_FK   ( DE Bereichskennung )
#                |      DE_BK ( DE FormatKennung )
#                |      |         FI  ( Format Identifier )
#                |      |         |        RI ( Regional Identifier )
#                |      |         |        | Reserved
#                |      |         |        |   |   RoutingDomain
#                |      |         |        |   |      |  Area
#                |      |         |        |   |      |  | System
#                |      |         |        |   |      |  |  |  N-Sel
#                |      |         |        |   |      |  |  |  |
DCC_B 276  DIN   9 1:I3,uh 3:I100,uh 1:I01 1 2:R0000  2  2  6  1
#       
# FORMAT=CCITT-F.69;AFI=40,54;IDI-length=8;DSP-syntax=decimal;
#    DSP-length=30
#
#                           Prefix
#                              |     Type
#                              |      |        DTE
#                              |      |         |
 TELEX_D 00728722 INTX25_1 3  2:I1   1:I0       26
#
#                            Prefix
#                              |      Type
#                              |       |       PID
#                              |       |        |      DTE
#                              |       |        |       |
 > 00728722  INTX25_2  4      2:I1   1:I1     4:ua,V  14:ud
#
#                             Prefix
#                              |      Type
#                              |        |       CUDF
#                              |        |        |      DTE
#                              |        |        |       |
  >     00728722  INTX25_3  4 2:I1   1:I2     4:ua,V  14:ud
# As Described above for INTX25
  >         00728722  JANET_1   3     2:I2   1:I0      26 
  >         00728722  JANET_2   4     2:I2   1:I1      4:ua,V  14:ud 
  >         00728722  JANET_3   4     2:I2   1:I2      4:ua,V  14:ud 
# 
#                             Prefix
#                              |      IP Address
#                              |          |      Port
#                              |          |       | Transport-Set
#                              |          |       |     |
  >     00728722 RFC1006  3   2:I3,p0     4:uo    5     5:O
# 
<?sml-break><?sml-need 20># FORMAT=CCITT-F.69;AFI=41,55;IDI-length=8;DSP-syntax=binary;
#    DSP-length=15
#
#                             NetBios
#                              |  Subnet-Id
#                              |     |    MachineName
#                              |     |          |
  TELEX_B  50093994  NETBIOS   2     2          8
#       
# FORMAT=CCITT-E.163;AFI=42,56;IDI-length=12;DSP-syntax=decimal;
#    DSP-length=26
#
  PSTN_D    
#       
# FORMAT=CCITT-E.163;AFI=43,57;IDI-length=12;DSP-syntax=binary;
#    DSP-length=13
#
  PSTN_B    
#       
# FORMAT=CCITT-E.164;AFI=44,58;IDI-length=15;DSP-syntax=decimal;
#    DSP-length=23
#
  ISDN_D    
#       
# FORMAT=CCITT-E.164;AFI=45,59;IDI-length=15;DSP-syntax=binary;
#    DSP-length=11
#
  ISDN_B    
#
# FORMAT=ISO-ICD;AFI=46;IDI-length=4;DSP-syntax=decimal;
#    DSP-length=34
#
# ICD_D     
#
<?sml-break><?sml-need 20># FORMAT=ISO-ICD;AFI=47;IDI-length=4;DSP-syntax=binary;DSP-length=17
#
#                   DFI  (DSP Format Identifier)
#                    |       SFI  (System Format Identifier)
#                    |        |     Country
#                    |        |       |   Reserved
#                    |        |       |      | RoutingDomain
#                    |        |       |      |     |  Area
#                    |        |       |      |     |   |System
#                    |        |       |      |     |   |   |  N-Sel
#                    |        |       |      |     |   |   |    |
ICD_B 0058 OSILAN 8 1:I80    1:I01  2:uA  2:R0000  2   2  6:uD  1
  >        NEA    8 1:I80    1:I02  2:uA  2:R0000  2:uD  2:uD  6:uD,p0 1
  >        TCP/IP 8 1:I80    1:I05  2:uA  2:R0000  2   2  4:uo  1
  >        X.25   8 1:I80    1:I06  2:uA  2:R0000  2   2  6     1
  >        ISDN   8 1:I80    1:I07  2:uA  2:R0000  2   2  6     1
#
# FORMAT=Local;AFI=48;IDI-length=0;DSP-syntax=decimal;DSP-length=38
#
# LOCAL_D   
#
# FORMAT=Local;AFI=49;IDI-length=0;DSP-syntax=binary;DSP-length=19
#
# LOCAL_B
#
# FORMAT=Local;AFI=50;IDI-length=0;DSP-syntax=ISO646;DSP-length=19
#
# LOC_ISO 
#
# FORMAT=Local;AFI=51;IDI-length=0;DSP-syntax=National;DSP-length=19
#
# LOC_NAT 
<?Pub /_font><?Pub Caret>
</ProgramListing></Para>
</InformalExample>
<?sml-point-size +2>
<Para>The preceding table is contained in the ASCII file <Literal>nsapform</Literal>.
The communications software uses a binary representation of this table
contained in the file <Literal>nsapform.cfg</Literal>. For this reason, each time a
change is made in the ASCII file, it must be reconverted into its binary
version <Literal>nsapform.cfg</Literal> by means of the tool <Literal>gdsgennsap</Literal>, which
is invoked as follows:
<!-- -->
</Para>
<InformalExample>
<Para><ProgramListing><UserInput>% <Literal>gdsgennsap </Literal><Symbol Role="Variable">ASCII_file_name  binary_file_name
</Symbol></UserInput></ProgramListing></Para>
</InformalExample>
<Para>Pertinent file locations are as follows:
<!-- -->
</Para>
<ItemizedList>
<ListItem>
<Para><Filename>/opt/dcelocal/var/adm/directory/gds/adm/nsapform</Filename>
</Para>
</ListItem>
<ListItem>
<Para><Filename>/opt/dcelocal/var/adm/directory/gds/conf/nsapform.cfg</Filename>
</Para>
</ListItem>
</ItemizedList>
<!-- -->
<!-- -->
</Sect2>
<Sect2 Id="OSFGDS.HAPP.div.6">
<Title>Concrete DSP Syntaxes</Title>
<Para>This section describes the concrete DSP syntax.
</Para>
<?sml-point-size -2>
<InformalExample>
<Para><ProgramListing>&lt;decimal ECMA-DSP> ::=
         ECMA117+&lt;subnet-id/D>+&lt;subnet-address/D>+&lt;N-selector/D>
        
        
&lt;binary ECMA-DSP> ::=
         ECM117+&lt;subnet-id/B>+&lt;subnet-address/B>+&lt;N-selector/B>
        
        
&lt;decimal RFC1006>::=
         RFC1006+&lt;prefix>+&lt;internet-address>+
                                 &lt;port-number>+&lt;transport-set>
        
        
&lt;binary NETBIOS-DSP>::=
         NETBIOS+&lt;prefix>+&lt;subnet-id/B>+&lt;host name/B>
                   +&lt;unique/group-id>

&lt;subnet-id/D> ::= &lt;digitstring>
        
&lt;subnet-address/D> ::= &lt;digitstring>
        
&lt;N-selector/D> ::= &lt;digitstring>
        
&lt;org-id/B> ::= &lt;hexstring>
        
&lt;subnet-id/B> ::= &lt;hexstring>
        
&lt;subnet-address/B> ::= &lt;hexstring>
        
&lt;N-selector/B> ::= &lt;hexstring>
        
&lt;prefix> ::= &lt;digitstring>
        
&lt;internet-address> ::=
         &lt;triple digitstring>
      OR
         &lt;dotted digitstring>
        
&lt;port-number> ::= &lt;digitstring>
        
&lt;transport-set> ::= &lt;digitstring>

&lt;host name/B> ::= '&lt;special ASCII-string>'
&lt;unique/group -id> ::= &lt;digitstring>
</ProgramListing></Para>
</InformalExample>
<?sml-point-size +2>
<!-- -->
<!-- -->
<!-- -->
</Sect2>
</Sect1>
<Sect1 Id="OSFGDS.HAPP.div.7">
<Title>Macro Facility</Title>
<Para>The facility for defining macros is supported in order to simplify the
task of entering NSAP addresses for the user. There are two different
types of macro; the first must always be defined in the form
<Symbol Role="Variable">&lt;macro name></Symbol><Literal>=</Literal><Symbol Role="Variable">&lt;macro value></Symbol> and the second must always
be defined in the form <Symbol Role="Variable">&lt;macroname>macro value/macro parameter list></Symbol>
(see the following text). Macros are recognized by the administration
program in both directions (screen input/output). Thus, the semantics of the
two macro types is as follows:
<!-- -->
<!-- -->
<!-- -->
</Para>
<InformalExample>
<Para><ProgramListing>    Macro type "&lt;macro name>=&lt;macro value>"
</ProgramListing></Para>
</InformalExample>
<!-- -->
<ItemizedList>
<ListItem>
<Para>Reading NSAP address information from the screen
</Para>
<Para>The specified input string is parsed, and every (sub)string that matches
<Symbol Role="Variable">&lt;macro name></Symbol><Literal>=</Literal> is substituted by the value <Symbol Role="Variable">&lt;macro value></Symbol> of
the macro.
</Para>
</ListItem>
<ListItem>
<Para>Writing NSAP information to the screen
</Para>
<Para>The specified output string is parsed, and every (sub)string that matches
<Symbol Role="Variable">&lt;macro value></Symbol> is substituted by the name <Symbol Role="Variable">&lt;macro name></Symbol><Literal>=</Literal> of this
macro.
</Para>
<Note>
<Para>Macros of this type are substituted recursively:
</Para>
</Note>
</ListItem>
</ItemizedList>
<!-- -->
<!-- -->
<?sml-point-size -2>
<InformalExample>
<Para><ProgramListing><UserInput>         Macro type "&lt;macro name> ! &lt;macro value / macro parameter list>"
</UserInput></ProgramListing></Para>
</InformalExample>
<?sml-point-size +2>
<!-- -->
<!-- -->
<ItemizedList>
<ListItem>
<Para>Reading NSAP address information from the screen
</Para>
<Para>The specified input string is parsed for <Symbol Role="Variable">&lt;macro name></Symbol>. If there is a
macro of this type, then the defined value of this macro
<Symbol Role="Variable">&lt;macro value/macro parameter list></Symbol> is used and every parameter name
contained in the macro parameter list is substituted by the corresponding
macro parameter value from the input string (specified in the format
<Symbol Role="Variable">&lt;macro parameter name></Symbol><Literal>=</Literal><Symbol Role="Variable">&lt;macro parameter value></Symbol>).
</Para>
<Note>
<Para>The macro parameters can be given in the input string in any order.
</Para>
</Note>
</ListItem>
<ListItem>
<Para>Writing NSAP information to the screen
</Para>
<Para>The given output string is parsed, and if it matches any macro value
<Symbol Role="Variable">&lt;macro value/macro parameter list></Symbol> of the defined macros, then
it is substituted by the macro name <Symbol Role="Variable">&lt;macro name></Symbol>, and the macro
parameter or parameters
<Symbol Role="Variable">&lt;macro parameter name></Symbol><Literal>=</Literal><Symbol Role="Variable">&lt;macro parameter value></Symbol>.
</Para>
<Note>
<Para>To avoid problems in this case, macros of this type need to be defined
definitively.
</Para>
<Para>Output strings are first parsed for macros of type 2. They are only
parsed for macros of type 1 if there is no matching.
</Para>
</Note>
<Para>Macros can be defined by writing them (one macro per line) into the
macro file <Literal>nsapmacros</Literal>. The contents of the macro file are loaded
by the administration program on the first selection of a PSAP handling
mask each time the program is called. Both types of macros can be defined
in the macro file simultaneously. However, mixing both macro types is not
recommended because the results are unpredictable. One macro type is not
to be used within a macro of the other type.

</Para>
</ListItem>
</ItemizedList>
<!-- -->
<!-- -->
<!-- -->
<Sect2 Id="OSFGDS.HAPP.div.8">
<Title>NSAP Address Macro Definition Syntax</Title>
<Para>This section describes the NSAP address macro definition syntax.
</Para>
<?sml-point-size -2>
<InformalExample>
<Para><ProgramListing>&lt;NSAP-macro> ::=
         &lt;macro name>=&lt;macro value>
      OR
         &lt;macro name>!&lt;macro parameter list definition>
        
&lt;macro name> ::= &lt;subset anystring1>
        
&lt;macro value> ::= &lt;anystring>
        
&lt;macro parameter list definition> ::=
         &lt;macro parameter name>=
      OR
         &lt;macro parameter name>=+&lt;macro parameter
                                        list definition>
      OR
         &lt;subset anystring2>
      OR
         &lt;subset anystring2>+&lt;macro parameter
                                        list definition>
</ProgramListing></Para>
</InformalExample>
<?sml-point-size +2>
<?sml-point-size -2>
<InformalExample>
<Para><ProgramListing>&lt;macro parameter name> ::= &lt;subset anystring3>
        
&lt;anystring> ::=
         &lt;any>
      OR
         &lt;any>&lt;anystring>
        
&lt;any> ::= [printable ASCII-character set (&bsol;040 - &bsol;176)]
        
&lt;subset anystring1> ::=
         &lt;subset any1>
      OR
         &lt;subset any1>&lt;subset anystring1>
        
&lt;subset any1> ::= [printable ASCII-character set
        (&bsol;040 - &bsol;071, &bsol;073 - &bsol;074, &bsol;076 - &bsol;176)]
        
&lt;subset anystring2> ::=
         &lt;subset any2>
      OR
         &lt;subset any2>&lt;subset anystring2>
        
&lt;subset any2> ::=
         [printable ASCII-character set
         (&bsol;040 - &bsol;042, &bsol;044 - &bsol;074, &bsol;076 - &bsol;077, &bsol;101 - &bsol;176)]
        
&lt;subset anystring3> ::=
         &lt;subset any3>
      OR
         &lt;subset any3>&lt;subset anystring3>
        
&lt;subset any3> ::=
         [printable ASCII-character set
         (&bsol;040 - &bsol;042, &bsol;044 - &bsol;052, &bsol;054 - &bsol;074,
          &bsol;076 - &bsol;077, &bsol;101 - &bsol;176)]
</ProgramListing></Para>
</InformalExample>
<?sml-point-size +2>
<!-- -->
<!-- -->
<!-- -->
</Sect2>
<Sect2 Id="OSFGDS.HAPP.div.9">
<Title>NSAP Address Macro Calling Syntax</Title>
<Para>This section describes the NSAP address macro calling syntax.
</Para>
<?sml-point-size -2>
<InformalExample>
<Para><ProgramListing>&lt;macro call> ::=
         &lt;macro name>=
      OR
         &lt;macro name>!&lt;macro parameter list>
        
&lt;macro parameter list> ::=
         &lt;macro parameter name>=&lt;macro parameter value>
      OR
         &lt;macro parameter name>=&lt;macro parameter value>+
                                     &lt;macro parameter list>
        
         &lt;macro parameter value> ::= &lt;subset anystring3>
</ProgramListing></Para>
</InformalExample>
<?sml-point-size +2>
<!-- -->
<!-- -->
<!-- -->
<?sml-break>
<?sml-need 20>
</Sect2>
</Sect1>
<Sect1 Id="OSFGDS.HAPP.div.10">
<Title>Examples of NSAP Addresses</Title>
<Para>The following are examples of NSAP addresses:
</Para>
<ItemizedList>
<ListItem>
<Para><Literal>CCITT-X.121</Literal> address with no DSP:
<?sml-break></Para>
<InformalExample>
<Para><ProgramListing>X121_D+12345678901234
</ProgramListing></Para>
</InformalExample>
</ListItem>
<ListItem>
<Para><Literal>CCITT-X.121</Literal> address with <Literal>ECMA-117</Literal> structured binary DSP:
<?sml-break></Para>
<InformalExample>
<Para><ProgramListing>X121_B+12345678901234+ECMA117+01+08227619+FE
</ProgramListing></Para>
</InformalExample>
</ListItem>
<ListItem>
<Para><Literal>CCITT-F.69</Literal> address with <Literal>RFC1006</Literal> structured decimal DSP:
<?sml-break></Para>
<InformalExample>
<Para><ProgramListing>TELEX_D+00728722+RFC1006+3+127000000001+4711+1
</ProgramListing></Para>
</InformalExample>
<!-- -->
<!-- -->
<!-- -->
</ListItem>
</ItemizedList>
<Sect2 Id="OSFGDS.HAPP.div.11">
<Title>Examples of Macro Definitions</Title>
<Para>Following are examples of macro definitions.
</Para>
<?sml-point-size -2>
<InformalExample>
<Para><ProgramListing>TCP/IP!TELEX_D+00728722+RFC1006+3+internet=+port=+1
INTX25!TELEX_D+00521090+INTX25+1+dte=+pid=
LAN2!LOCAL_B+ECMA117+1+ethernet=+00
WAN-CONS!X121_B+dte=
ISDN-CONS!ISDN_B+isdn=
# The following NSAP macros are for SNI/Siemens internal use only
ETH-CLNS!ICD_B+58+OSILAN+01+01+'DE'+0000+00+01+ethernet=+FE
WAN-NEA!ICD_B+58+NEA+01+02+'DE'+0000+00+region=+processor=+00
TCP-IP!ICD_B+58+RFC1006+01+05+'DE'+0000+00+01+internet=+00
NETBIOS!TELEX_B+50093994+NETBIOS+01+1+hostname=+u/gid=
TCP/IP!TELEX_D+00728722+RFC1006+3+internet=+port=+1
NETBIOS!TELEX_B+50093994+NETBIOS+01+1 +hostname=u/gid=
X25=X121_D+1234567890
</ProgramListing></Para>
</InformalExample>
<?sml-point-size +2>
<!-- -->
<!-- -->
<!-- -->
</Sect2>
<Sect2 Id="OSFGDS.HAPP.div.12">
<Title>Examples of Macro Calls</Title>
<Para>The input strings are expanded as follows, provided that the macros
defined in 
<!-- the section entitled "Examples of Macro Definitions" in this-->
<!-- Appendix -->
Section D.5.1 are present.
</Para>
<Para><!-- -->
</Para>
<Para>The following macro:
</Para>
<InformalExample>
<Para><ProgramListing>  X25=1234
</ProgramListing></Para>
</InformalExample>
<Para>is expanded into:
<!-- -->
</Para>
<InformalExample>
<Para><ProgramListing>  X121_D+12345678901234
</ProgramListing></Para>
</InformalExample>
<Para>The following macro:
</Para>
<InformalExample>
<Para><ProgramListing>  TCP/IP!internet=127.0.0.1+port=4711
</ProgramListing></Para>
</InformalExample>
<Para>is expanded into:
<!-- -->
</Para>
<InformalExample>
<Para><ProgramListing>  TELEX_D+00728722+RFC1006+3+12700000001+4711+1
</ProgramListing></Para>
</InformalExample>
<Para>The following macro:
</Para>
<InformalExample>
<Para><ProgramListing>  NETBIOS!hostname='machine1'+u/gid=01
</ProgramListing></Para>
</InformalExample>
<Para>is expanded into:
<!-- -->
</Para>
<InformalExample>
<Para><ProgramListing>  TELEX_B+50093994+NETBIOS+01+1+'machine1'+01
</ProgramListing></Para>
</InformalExample>
<!-- -->
<!-- -->
<!-- -->
</Sect2>
</Sect1>
</Appendix>
<!--+ 09/15/96 22:27:15
    | tagMorph:  $Id: H_app.gds.sgm,v 1.1.2.6 1996/12/17 19:30:07 damon Exp $
    | tagMorph library:  $Id: H_app.gds.sgm,v 1.1.2.6 1996/12/17 19:30:07 damon Exp $
    | sml-to-docbook:  1.21
    +-->
