<!--
# @OSF_COPYRIGHT@
# 
# 
# HISTORY
# $Log: manage.sgm,v $
# Revision 1.1.2.6  1996/11/25  18:18:55  carrig
# 	{enh,R1.2.2}
# 	VarListEntry, Figure, Table, Code Examples
# 	[1996/11/25  18:18:11  carrig]
#
# Revision 1.1.2.5  1996/11/23  23:03:01  weir
# 	Removed thinsp entities in parenthesized index entries
# 	[1996/11/23  23:02:03  weir]
# 
# Revision 1.1.2.4  1996/11/21  18:06:51  weir
# 	Shortened some source lines
# 	[1996/11/21  18:05:57  weir]
# 
# Revision 1.1.2.3  1996/11/21  16:52:37  weir
# 	Corrected entity declarations, etc.
# 	[1996/11/21  16:51:46  weir]
# 
# Revision 1.1.2.2  1996/11/20  22:28:03  weir
# 	Added entity declarations
# 	[1996/11/20  22:27:22  weir]
# 
# Revision 1.1.2.1  1996/11/20  21:56:15  weir
# 	Initial submission
# 	[1996/11/20  21:55:15  weir]
# 
# $EndLog$
-->
<!-- Fragment document type declaration subset:
ArborText, Inc., 1988-1993, v.4001
<!DOCTYPE Book PUBLIC "-//Davenport//DTD DocBook V2.4//EN" [
<!ENTITY  ADGISG.MANAG.ent.1  SYSTEM "eps/app_control_client.eps" NDATA eps>
]>
-->
<!-- COPYRIGHT NOTICE-->
<!-- Copyright (c) 1990, 1991, 1992, 1993, 1994 Open Software Foundation, Inc.-->
<!-- ALL RIGHTS RESERVED (DCE).  See the file named COPYRIGHT.DCE for-->
<!-- the full copyright text.-->
<!-- -->
<!-- -->
<!-- OLD HISTORY-->
<!-- Revision 1.1.4.1  1996/10/15  19:20:25  weir-->
<!-- 	No change-->
<!-- 	[1996/10/15  19:20:03  weir]-->
<!---->
<!-- Revision 1.1.2.8  1995/06/27  17:04:14  buckler-->
<!-- 	1.1 edits and Prentice Hall reformat-->
<!-- 	[1995/06/27  17:02:53  buckler]-->
<!-- -->
<!-- Revision 1.1.2.7  1994/11/15  16:25:47  weir-->
<!-- 	No change-->
<!-- 	[1994/11/15  16:25:09  weir]-->
<!-- -->
<!-- Revision 1.1.2.6  1994/10/19  20:48:16  weir-->
<!-- 	Review comments-->
<!-- 	[1994/10/19  20:47:24  weir]-->
<!-- -->
<!-- Revision 1.1.2.5  1994/10/19  16:02:51  weir-->
<!-- 	Review comments and edits-->
<!-- 	[1994/10/19  16:02:05  weir]-->
<!-- -->
<!-- Revision 1.1.2.4  1994/09/22  19:45:18  jshirley-->
<!-- 	Minor changes in preparation for final review.-->
<!-- 	[1994/09/22  19:45:00  jshirley]-->
<!-- -->
<!-- Revision 1.1.2.3  1994/06/29  13:40:49  jshirley-->
<!-- 	Updated for dced information.-->
<!-- 	[1994/06/29  13:38:48  jshirley]-->
<!-- -->
<!-- Revision 1.1.2.2  1994/06/13  18:22:36  devobj-->
<!-- 	cr10872 - fix copyright-->
<!-- 	[1994/06/13  18:20:01  devobj]-->
<!-- -->
<!-- Revision 1.1.2.1  1994/03/11  23:05:08  rom-->
<!-- 	{enh, 10129, R1.1}-->
<!-- 	Initial split of App Dev Guide into three books and creation of-->
<!-- 	Intro and Style Guide.-->
<!-- 	[1994/03/11  23:01:55  rom]-->
<!-- -->
<!---->
<!-- - -->
<Chapter Id="ADGISG.MANAG.div.1">
<Title>Server Management</Title>
<!-- - -->
<!-- -->
<Para><IndexTerm Id="ADGISG.MANAG.indx.1">
<Primary>server</Primary>
<Secondary>management</Secondary>
</IndexTerm>Every DCE server requires some management.  At a minimum, servers need
to be started and stopped.  In addition, servers usually provide generic
server information such as the server principal name and an indication
that the server is listening for remote calls.  Servers may also permit
other kinds of management operations while they are running; it is
perfectly feasible to have a server reinitialize or even unregister
and reregister endpoints while it is running.
</Para>
<Para><IndexTerm Id="ADGISG.MANAG.indx.2">
<Primary>server</Primary>
<Secondary>persistent</Secondary>
</IndexTerm>
<IndexTerm Id="ADGISG.MANAG.indx.3">
<Primary>persistent server</Primary>
</IndexTerm>
<IndexTerm Id="ADGISG.MANAG.indx.4">
<Primary>server</Primary>
<Secondary>on-demand</Secondary>
</IndexTerm>
<IndexTerm Id="ADGISG.MANAG.indx.5">
<Primary>on-demand server</Primary>
</IndexTerm>From the management perspective, servers are thought of as either
<Replaceable>on-demand</Replaceable> or <Replaceable>persistent</Replaceable>.  In the on-demand model, a server
only starts (thus occupying system resources) when it is needed.
When an on-demand server is installed, a startup configuration is also
installed with <Literal>dced</Literal>. 
Such a server would then use the configuration (obtained by a call to
the <Function>dce_server_inq_server(&thinsp;)</Function> routine) when it is auto-started
by <Literal>dced</Literal> on receipt of an RPC request for an interface, 
operation, or object registered for that server.  
<IndexTerm Id="ADGISG.MANAG.indx.6">
<Primary><Function>dce_server_inq_server()</Function></Primary>
</IndexTerm></Para>
<Para><?sml-need 10>A persistent server is one that runs continuously.  
Starting, stopping and otherwise managing such a server are typically
considered priviledged operations.  In general, a robust persistent server
should provide a separate application control program that calls the DCE
management interfaces (APIs for <Literal>dced</Literal>, RPC, and the like) 
and the application's own management interface (if one is provided).
Of course, a server cannot start itself, but an application control
client program can start the server via the <Literal>dced</Literal>.  
The model looks something like that shown in the following figure:
<IndexTerm Id="ADGISG.MANAG.indx.7">
<Primary><Literal>dced</Literal></Primary>
</IndexTerm>
<!-- -->
</Para>
<?sml-need 4i>
<Figure>
<Title>Managing a Server with a Control Client</Title>
<Graphic Entityref="ADGISG.MANAG.ent.1" Scalefit="1" Reprodep="350" Reprowid="350"></Graphic>
</Figure>
<!-- -->
<Para>In addition to starting and stopping the server, 
<Literal>dced</Literal>'s management routines provide other control operations.  
For example, the control program can use
<Function>dced_server_disable_if(&thinsp;)</Function> and
<Function>dced_server_enable_if(&thinsp;)</Function>
to disable and reenable specific interfaces offered by the server.
Application-specific management operations can be used to exert even
finer control than is possible with the DCE-provided services.
<!-- -->
<!-- -->
<!-- -->
<!-- - -->
</Para>
<Sect1 Id="ADGISG.MANAG.div.2">
<Title>Application Support for Server Management</Title>
<!-- - -->
<!-- -->
<Para>Applications can support server management at three levels.  
At a minimum, every server automatically supports the RPC management
API (routines the begin with <Literal>rpc_mgmt_</Literal>).  
By attaching an authorization function to the management interface
(via a call to <Function>rpc_mgmt_set_authorizaton_fn(&thinsp;)</Function>), 
<IndexTerm Id="ADGISG.MANAG.indx.8">
<Primary><Function>rpc_mgmt_set_authorizaton_fn()</Function></Primary>
</IndexTerm>a server can set nondefault access to the generic management functions.
Although these routines give a management program some control of
the server, some of these routines only work locally, so the
controlling client must run on the same host as the server.  
</Para>
<Para>At the second level, all servers should permit themselves to be managed from
remote hosts via the <Literal>dced</Literal>.
The requirements in the server's initialization code are minimal:
<!-- -->
</Para>
<ItemizedList>
<ListItem>
<Para>The server should establish a security state using the
<Function>dce_server_sec_begin(&thinsp;)</Function> call.  This call establishes the
server's identity with the RPC runtime such that clients can make
authenticated remote procedure calls to it.  The call also establishes
with the security service the server's identity so that it can make
authenticated remote procedure calls to other servers. 
<IndexTerm Id="ADGISG.MANAG.indx.9">
<Primary><Function>dce_server_sec_begin()</Function></Primary>
</IndexTerm></Para>
<Para>Server writers should also give the <Literal>dced</Literal> (which runs with the
host's principal identity) permission to control the server.  
Since the default is to disable remote control, the server must
provide a nondefault authorization function that gives the machine
principal access.  An example of such an authorization function is
given in Chapter 3.
<!-- -->
<!-- .p-->
<!-- \*L<<REVIEWERS: DO I HAVE IT RIGHT?>>\*O-->
<!--The server must give the RPCD, which runs with the machine principal-->
<!--identity, permission to call \*Lrpc_mgmt_stop_server_listening(\|)\*O.-->
<!--Since the default is to disable access to this call, the server must-->
<!--provide a nondefault authorization function that gives the machine-->
<!--principal access.  An example of such an authorization function is-->
<!--given in Chapter XXXX [Security].-->
<!-- -->
</Para>
</ListItem>
<ListItem>
<Para>The server must register as a DCE server using the
<Function>dce_server_register(&thinsp;)</Function> call.
This call fulfills the majority of the server initialization tasks including
creating bindings, 
registering interfaces with the RPC runtime,
registering endpoints with <Literal>dced</Literal>'s endpoint mapper service,
and advertising in the name service.
<IndexTerm Id="ADGISG.MANAG.indx.10">
<Primary><Function>dce_server_register()</Function></Primary>
</IndexTerm></Para>
</ListItem>
</ItemizedList>
<!-- -->
<Para>All servers should take these steps to operate correctly in DCE.
</Para>
<Para><?sml-need 10>Finally, applications can provide application-specific server management.  
This would typically be done for a persistant server that provides
access to some shared resource such as a database.  
Such a server can provide a
set of privileged management operations&mdash;such as database
maintainance&mdash;as a seperate application-specific management
interface.  Such an interface can be accessed by an application
management client that can also call the DCE management interfaces.
This type of management client is shown in the previous figure.
<!-- -->
<!-- -->
<!-- -->
<!-- - -->
</Para>
</Sect1>
<Sect1 Id="ADGISG.MANAG.div.3">
<Title>Manager Initialization</Title>
<!-- - -->
<!-- -->
<Para><IndexTerm Id="ADGISG.MANAG.indx.11">
<Primary>server</Primary>
<Secondary>initialization of</Secondary>
</IndexTerm>
<IndexTerm Id="ADGISG.MANAG.indx.12">
<Primary>initialization tasks, server</Primary>
</IndexTerm>Server initialization tasks can typically be divided between
essentially generic initialization&mdash;creating bindings, establishing
security state, exporting to a name service, and listening for calls,
among other things&mdash;and manager-specific initialization.
(Remember that <Replaceable>management</Replaceable> refers to a set of tasks to control
a server while a <Replaceable>manager</Replaceable> is a server's implementation
of a set of operations from one or more interfaces.)
</Para>
<Para>Once the server has called <Function>rpc_server_listen(&thinsp;)</Function>, the manager
operations may be called asynchronously.  The application may,
however, need to perform some initialization before any manager
operations are performed.  For example, the sample storage manager 
(code example <Filename>context_manager.c</Filename>)
needs to initialize its tables before any
storage can be allocated out of them.  An application has three
choices about manager initialization policy:
<IndexTerm Id="ADGISG.MANAG.indx.13">
<Primary><Function>rpc_server_listen()</Function></Primary>
</IndexTerm>
<!-- -->
</Para>
<OrderedList>
<ListItem>
<Para>The server can perform manager initialization before calling
<Function>rpc_server_listen(&thinsp;)</Function>. 
</Para>
</ListItem>
<ListItem>
<Para>The server can have the first instance of a manager operation
thread perform manager initialization, using the
<Function>pthread_once(&thinsp;)</Function>
facility.  Although initilizing everything prior to listening for
remote procedure calls is more straight-forward programming,
some applications might benefit from this threaded approach.
For example, those operations that do not need the initialization
could forgo use of the <Function>pthread_once(&thinsp;)</Function> facility.
This is the approach demonstrated in the sample storage manager. 
<?sml-break><?sml-need 10></Para>
</ListItem>
<ListItem>
<Para>The server can export manager initialization operations as part of
its application-specific management interface, and have a management 
client perform the initialization.
</Para>
</ListItem>
</OrderedList>
<Para>Options 1 and 2 have similar effects and are appropriate for most
servers.  Option 3 might be appropriate for a persistent server where
reinitialization of the running server is a useful operation.  Such an
operation is a perfect candidate for inclusion in an
application-specific management interface for a persistent server.
</Para>
</Sect1>
</Chapter>
<!--+ 11/13/96 22:48:26
    | tagMorph:  $Id: manage.sgm,v 1.1.2.6 1996/11/25 18:18:55 carrig Exp $
    | tagMorph library:  $Id: manage.sgm,v 1.1.2.6 1996/11/25 18:18:55 carrig Exp $
    | sml-to-docbook:  1.24
    +-->
