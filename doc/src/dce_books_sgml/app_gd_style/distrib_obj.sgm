<!--
# COPYRIGHT NOTICE
# Copyright (c) 1990-1996 Open Software Foundation, Inc. 
# ALL RIGHTS RESERVED (DCE). See the file named COPYRIGHT.DCE in the 
# src directory for the full copyright text. 
# 
# 
# HISTORY
# $Log: distrib_obj.sgm,v $
# Revision 1.1.2.7  1996/12/17  19:29:27  damon
# 	Expanded OSF C O P Y R I G H T   N O T I C E
# 	[1996/12/17  19:22:57  damon]
#
# Revision 1.1.2.6  1996/11/25  18:18:50  carrig
# 	{enh,R1.2.2}
# 	VarListEntry, Figure, Table, Code Examples
# 	[1996/11/25  18:18:03  carrig]
# 
# Revision 1.1.2.5  1996/11/23  23:02:57  weir
# 	Removed thinsp entities in parenthesized index entries
# 	[1996/11/23  23:01:58  weir]
# 
# Revision 1.1.2.4  1996/11/21  18:06:45  weir
# 	Shortened some source lines
# 	[1996/11/21  18:05:50  weir]
# 
# Revision 1.1.2.3  1996/11/21  16:52:31  weir
# 	Corrected entity declarations, etc.
# 	[1996/11/21  16:51:39  weir]
# 
# Revision 1.1.2.2  1996/11/20  22:27:58  weir
# 	Added entity declarations
# 	[1996/11/20  22:27:17  weir]
# 
# Revision 1.1.2.1  1996/11/20  21:56:05  weir
# 	Initial submission
# 	[1996/11/20  21:55:09  weir]
# 
# $EndLog$
# 
-->
<!-- Fragment document type declaration subset:
ArborText, Inc., 1988-1993, v.4001
<!DOCTYPE Book PUBLIC "-//Davenport//DTD DocBook V2.4//EN" [
<!ENTITY  ADGISG.DISTO.ent.1  SYSTEM "eps/distrib_obj_01.eps" NDATA eps>
<!ENTITY  ADGISG.DISTO.ent.2  SYSTEM "eps/distrib_obj_02.eps" NDATA eps>
<!ENTITY  ADGISG.DISTO.ent.3  SYSTEM "eps/distrib_obj_03.eps" NDATA eps>
]>
-->
<!-- -->
<!-- -->
<!-- OLD HISTORY-->
<!-- Revision 1.1.5.1  1996/05/10  19:48:28  wardr-->
<!-- 	{edit, R1.2.2}-->
<!-- 	Removed R1.1 changebars-->
<!-- 	[1996/05/10  19:48:03  wardr]-->
<!---->
<!-- Revision 1.1.3.4  1995/11/09  17:00:42  wardr-->
<!-- 	{enh CR13032 R1.2.1} Indexing and touchup pagination.-->
<!-- 	[1995/11/09  16:59:36  wardr]-->
<!-- -->
<!-- Revision 1.1.3.3  1995/11/01  23:10:12  wardr-->
<!-- 	{enh CR13032 R1.2.1} Updated figures and input final edits.-->
<!-- 	[1995/11/01  23:09:35  wardr]-->
<!-- -->
<!-- Revision 1.1.3.2  1995/09/15  20:02:55  wardr-->
<!-- 	{edit R1.2.1}-->
<!-- 	fix figure path names-->
<!-- 	[1995/09/15  20:02:42  wardr]-->
<!-- -->
<!-- Revision 1.1.3.1  1995/09/15  18:14:37  wardr-->
<!-- 	{enh, CR13032 R1.2.1}-->
<!-- 	Add xidl (oorpc) information-->
<!-- 	[1995/09/15  18:14:07  wardr]-->
<!-- -->
<Chapter Id="ADGISG.DISTO.div.1">
<Title>Object-Oriented Applications with Distributed Objects</Title>
<Para><IndexTerm Id="ADGISG.DISTO.indx.1">
<Primary>C++ language</Primary>
</IndexTerm>
<IndexTerm Id="ADGISG.DISTO.indx.2">
<Primary>distributed object</Primary>
</IndexTerm>
<IndexTerm Id="ADGISG.DISTO.indx.3">
<Primary>framework</Primary>
</IndexTerm>
<IndexTerm Id="ADGISG.DISTO.indx.4">
<Primary>object-oriented applications</Primary>
</IndexTerm>The DCE Interface Definition Language (IDL) compiler includes 
support for C++ language syntax features
that provide a distributed object framework.  This chapter describes
some terms and techniques for developing object-oriented DCE
applications.  Before you start developing your applications, read
this chapter and then see the  
<Symbol Role="Variable">OSF DCE Application Development Guide - Core Components</Symbol>
for more information.
</Para>
<Para><IndexTerm Id="ADGISG.DISTO.indx.5">
<Primary>benefit of C++</Primary>
</IndexTerm>
<IndexTerm Id="ADGISG.DISTO.indx.6">
<Primary>C++ language</Primary>
<Secondary>benefits in using</Secondary>
</IndexTerm>In general, using C++ for your DCE applications should be easier than
using C because the DCE mechanisms can be better hidden from the
developer.  The following are some examples:
</Para>
<ItemizedList>
<ListItem>
<Para>The C++ compiler forces the server implementation of all interface
operations. 
Although all DCE applications must do this to work properly, 
there is nothing to prevent you from writing an incomplete
server in C.
An added benefit of C++ is that the IDL compiler automatically generates 
the manager class with all the function signatures defined.
</Para>
</ListItem>
<ListItem>
<Para>The DCE function table known as an entry point vector (EPV) is
generated automatically in object code by a C++ compiler, 
rather than in C code by the IDL compiler.  
In addition, you never have to construct a
manager EPV as you might in your C code.
</Para>
</ListItem>
<ListItem>
<IndexTerm Id="ADGISG.DISTO.indx.7">
<Primary><Function>rpc_object_set_type()</Function></Primary>
</IndexTerm>
<Para>C++ automatically provides a mechanism for grouping objects 
into types with its class data structure. This means it is unnecessary
to use the DCE <Function>rpc_object_set_type()</Function> routine and associated routines.
</Para>
</ListItem>
<ListItem>
<Para>For DCE servers, interfaces are automatically registered with the DCE runtime.
</Para>
</ListItem>
</ItemizedList>
<Para>These and other features make for easier and faster development.
</Para>
<Para><IndexTerm Id="ADGISG.DISTO.indx.8">
<Primary>exception-handling macros and C++</Primary>
</IndexTerm>DCE supplies exception-handling macros to use in distributed
applications.  You should use the DCE macros in your applications,
instead of the standard C++ macros, to be sure exceptions are
propagated correctly from servers to clients.
</Para>
<Para>Distributed applications traditionally use the client/server model,
in which a client application binds to a server and makes a request, to
which the server responds.  In this model, the distinction between a
client and server is strong from both a development and runtime
perspective.  The client/server model is still convenient when
developing and describing distributed, object-oriented applications,
but an application is not distinctly a client or server.  Whether an
application is a client or server is more a condition of its execution
than a characteristic of its development.  It is convenient to say
that a client requests the use of a distributed object and that
objects are maintained by servers.  However, clients also create and
maintain their own objects that may be used by other applications, and
servers may need to use objects maintained by other applications.

</Para>
<Sect1 Id="ADGISG.DISTO.div.2">
<Title>Kinds of Objects</Title>
<Para><IndexTerm Id="ADGISG.DISTO.indx.9">
<Primary>kinds of objects</Primary>
</IndexTerm>
<IndexTerm Id="ADGISG.DISTO.indx.10">
<Primary>objects</Primary>
<Secondary>kinds of</Secondary>
</IndexTerm>In addition to the local objects that servers and clients each have,
there are two major kinds of distributed objects: dynamic objects and
named objects.  Distributed objects exist in the server's
memory space, and clients refer to them via a pointer data structure
known as an <Symbol Role="Variable">object reference</Symbol>.
</Para>
<Para><IndexTerm Id="ADGISG.DISTO.indx.11">
<Primary>dynamic objects</Primary>
</IndexTerm><Symbol Role="Variable">Distributed dynamic objects</Symbol> are created on a server by a client
request for the exclusive use of the invoking client.  These objects
reside on the server, but clients initiate the object's creation using
an object creator function defined in the interface.  In C++, dynamic
objects are simply local objects created at runtime.  In the context
of DCE, we use the term <Symbol Role="Variable">dynamic objects</Symbol> to mean distributed
dynamic objects.  Dynamic objects are typically short-lived; that is,
in the life span of the client rather than that of the server.
</Para>
<Para><IndexTerm Id="ADGISG.DISTO.indx.12">
<Primary>well-known objects</Primary>
</IndexTerm>
<IndexTerm Id="ADGISG.DISTO.indx.13">
<Primary>named objects</Primary>
</IndexTerm><Symbol Role="Variable">Well-known objects</Symbol> represent specific resources supported by one or
more servers and are called <Symbol Role="Variable">named objects</Symbol> when they are
identified by a name stored in a name service.  Each server that
supports the resource creates and maintains its own object
representing the resource.
</Para>
<Para>Clients control dynamic objects and servers control named objects.  
The server can give out a dynamic object reference only to the initiating
client and cannot give out the reference to any other client.
However, the client that initiated the creation of a dynamic object
can become a server to another client and give out a reference to the
dynamic objects it owns.  Servers do not automatically delete dynamic
objects when a client exits (unlike other RPC features such as a
context handle).  This allows clients to pass object references to
other programs to use. This also means that it is the
<Symbol Role="Variable">responsibility of the clients</Symbol> to delete all their dynamic object
references, thereby causing remote procedure calls to delete the
object on the server.  On the other hand, a server may pass object
references for named objects to more than one client, and the server
has control over when a named object is deleted.  Clients delete only
their local reference to named distributed objects; they cannot delete
the actual object on the server.
</Para>
<Para><IndexTerm Id="ADGISG.DISTO.indx.14">
<Primary>persistent objects</Primary>
</IndexTerm><Symbol Role="Variable">Persistent objects</Symbol> are known objects (usually named) whose
characteristics are maintained independently from a specific server, 
usually on disk.

<?sml-need 1.5i></Para>
</Sect1>
<Sect1 Id="ADGISG.DISTO.div.3">
<Title>Reference Counting: How Objects Keep Track of Multiple Clients</Title>
<Para><IndexTerm Id="ADGISG.DISTO.indx.15">
<Primary>reference counting</Primary>
</IndexTerm>
<IndexTerm Id="ADGISG.DISTO.indx.16">
<Primary>objects</Primary>
<Secondary>reference counting</Secondary>
</IndexTerm>
<IndexTerm Id="ADGISG.DISTO.indx.17">
<Primary>objects</Primary>
<Secondary>keeping track of clients</Secondary>
</IndexTerm><Symbol Role="Variable">Reference counting</Symbol> is simply a record that each dynamic object
maintains internally of how many clients have a reference to it.
Dynamic object reference counting on a server is handled for you by
DCE.  Reference counting is maintained so that a server knows when to
finally release the resources of an object.  An object's reference
count increases when the client passes a dynamic object to another
application, and an object's reference count decreases when each
object reference is deleted. This is why we have stressed that it
is the responsibility of clients to delete their object references.
</Para>
<Para>In addition, if one client passes a dynamic object to another and the
original client then exits or dies, the second client's object is
perfectly valid with respect to the server.
</Para>
<Para>With the volatility of a distributed environment, even well-designed
clients could lose a connection or exit unexpectedly, leaving the
reference count in an incorrect state.  Robust servers can delete any
dynamic objects they wish, but they run the risk of causing an
unexpected failure on clients.  Depending on the application, this may
be acceptable.  For example, in a trading system where dynamic objects
may be valid only during a single day, nightly purging of stale
objects makes sense.

</Para>
</Sect1>
<Sect1 Id="ADGISG.DISTO.div.4">
<Title>Using Interface Definitions to Design Classes</Title>
<Para><IndexTerm Id="ADGISG.DISTO.indx.18">
<Primary>classes</Primary>
<Secondary>defining in IDL</Secondary>
</IndexTerm>
<IndexTerm Id="ADGISG.DISTO.indx.19">
<Primary>defining C++ classes</Primary>
</IndexTerm>Since RPC is the mechanism DCE clients and servers use to become
distributed applications, this mechanism must be introduced into C++
applications in an object-oriented way.  When IDL compiles an
interface definition, it generates a class hierarchy for clients and
one for servers that provide the transition from RPCs to
object-oriented applications.
This is shown in the following figure.


<?sml-need 5i>
<IndexTerm Id="ADGISG.DISTO.indx.20">
<Primary>RPC class hierarchy</Primary>
</IndexTerm>
<IndexTerm Id="ADGISG.DISTO.indx.21">
<Primary>hierarchy of RPC classes</Primary>
</IndexTerm>
<IndexTerm Id="ADGISG.DISTO.indx.22">
<Primary>classes</Primary>
<Secondary>RPC hierarchy</Secondary>
</IndexTerm></Para>
<Figure>
<Title>The RPC Class Hierarchy</Title>
<Graphic Entityref="ADGISG.DISTO.ent.1"></Graphic>
</Figure>
<Para><IndexTerm Id="ADGISG.DISTO.indx.23">
<Primary><Literal>rpc_object_reference</Literal> class</Primary>
</IndexTerm>
<IndexTerm Id="ADGISG.DISTO.indx.24">
<Primary>base class for DCE</Primary>
</IndexTerm>
<IndexTerm Id="ADGISG.DISTO.indx.25">
<Primary>classes</Primary>
<Secondary>DCE base class <Literal>rpc_object_reference</Literal></Secondary>
</IndexTerm>At the top of each RPC hierarchy is a DCE-supplied class called
<Literal>rpc_object_reference</Literal>.  This <Symbol Role="Variable">DCE base class</Symbol> encapsulates
the RPC mechanisms and provides a framework for identifying,
distributing, and tracking objects.  It is used by the generated stubs
and not directly by your application code.
</Para>
<Para><IndexTerm Id="ADGISG.DISTO.indx.26">
<Primary>interface class</Primary>
</IndexTerm>
<IndexTerm Id="ADGISG.DISTO.indx.27">
<Primary>classes</Primary>
<Secondary>interface</Secondary>
</IndexTerm>The IDL compiler also generates an <Symbol Role="Variable">interface class</Symbol> derived from
the DCE base class.  The interface class contains the public member
functions specified in the interface definition.  The interface class
provides the link between the RPC mechanisms of the DCE base class and
your application.
</Para>
<Para><IndexTerm Id="ADGISG.DISTO.indx.28">
<Primary>polymorphism</Primary>
</IndexTerm>
<IndexTerm Id="ADGISG.DISTO.indx.29">
<Primary>abstract class</Primary>
</IndexTerm>
<IndexTerm Id="ADGISG.DISTO.indx.30">
<Primary>virtual functions</Primary>
</IndexTerm>Although the interface class is the same for both the client and
server hierarchy, the client and server must implement these functions
quite differently.  The server implements application-specific
functions that operate on the actual object, while the client uses
<Command>idl</Command>-generated functions that provide the distributed mechanisms.
Polymorphism provides the capability to hide the implementation
details of the interface class.  In C++, this flexibility is easily
provided by creating the interface class as an<Symbol Role="Variable"> abstract class</Symbol>
with all<Symbol Role="Variable"> pure virtual functions</Symbol>.  This means that none of the
functions of an interface class are implemented directly, so no
objects of the interface class can be created directly.  This apparent
restriction simply means that to implement the member functions,
another class must be derived from the interface class.
</Para>
<Para><IndexTerm Id="ADGISG.DISTO.indx.31">
<Primary>proxy class</Primary>
</IndexTerm>
<IndexTerm Id="ADGISG.DISTO.indx.32">
<Primary>client proxy class</Primary>
</IndexTerm>
<IndexTerm Id="ADGISG.DISTO.indx.33">
<Primary>classes</Primary>
<Secondary>proxy</Secondary>
</IndexTerm>At this point, the client and server RPC hierarchies diverge.  
In the client, the IDL compiler automatically derives a <Symbol Role="Variable">proxy class</Symbol>
from the interface class.  The proxy class implements in the client
stub all the pure virtual member functions of the interface class.
These functions handle all the underlying RPC code necessary for your
client to access distributed objects.  Thus, when a client calls the
interface class's member functions, the polymorphic behavior of the
C++ class hierarchy causes automatic invocation of the appropriate
proxy class function in the stub.
In the server, the IDL compiler automatically generates a 
<Symbol Role="Variable">manager class</Symbol> with empty function bodies.  
<IndexTerm Id="ADGISG.DISTO.indx.34">
<Primary>manager class</Primary>
</IndexTerm>
<IndexTerm Id="ADGISG.DISTO.indx.35">
<Primary>server manager class</Primary>
</IndexTerm>
<IndexTerm Id="ADGISG.DISTO.indx.36">
<Primary>classes</Primary>
<Secondary>manager</Secondary>
</IndexTerm></Para>
<Para><?sml-need 1.5i>You can choose to implement the server's interface operations in two ways:
</Para>
<ItemizedList>
<ListItem>
<IndexTerm Id="ADGISG.DISTO.indx.37">
<Primary>IDL compiler option</Primary>
<Secondary><Option>no_cxxmgr</Option></Secondary>
</IndexTerm>
<IndexTerm Id="ADGISG.DISTO.indx.38">
<Primary><Option>no_cxxmgr</Option> IDL compiler option</Primary>
</IndexTerm>
<Para>Implement the functions in the generated header file.  
However, be aware that under normal circumstances, a new IDL compilation
of the interface will overwrite the header file with empty functions.
(You can override this IDL compiler behavior with the <Option>no_cxxmgr</Option> option.
</Para>
</ListItem>
<ListItem>
<Para>Derive a new implementation class from the automatically generated manager class.
</Para>
</ListItem>
</ItemizedList>
<Sect2 Id="ADGISG.DISTO.div.5">
<Title>Using Static Functions in Interface Design</Title>
<Para><IndexTerm Id="ADGISG.DISTO.indx.39">
<Primary>static functions</Primary>
</IndexTerm>Your IDL interfaces must be designed to make it clear which functions
are static, because it may not be intuitive to first-time users.  If
something is static it doesn't move or change; it retains its state.
In C++ the term <Replaceable>static</Replaceable> has a little more meaning than this.  
C++ uses the term to restrict the definition of a variable or function to
within a specific scope of a program, and it causes values to be
retained when program execution comes back to that scope. A variable
or function that is static is like a refined global variable or
function.  Both static and global variables give a program a
convenient way for one part to easily communicate with another without
using parameters, but a static variable's scope is confined to a
portion of the program, rather than the scope of the entire program.
A static class member is a data member or member function that is in
the scope of all objects of a particular class, but not in the scope of 
any other class objects or code of the program.  
A class's objects use static
members to share data and functionality in a way that saves storage.
A static data member acts as a class-global variable because there is
only one instance of it, no matter how many instances of the class
exist.
</Para>
<Para>Programs and interfaces can declare a member function as static.
Unlike nonstatic class members, static class members can be accessed
or invoked directly, even if an instance of the class doesn't exist.
For this reason, it is useful to developers if the interface designer
identifies all operations in the interface that are to be static
member functions by doing all of the following:
</Para>
<ItemizedList>
<ListItem>
<Para>Identifying static operations with comments in the IDL file.
</Para>
</ListItem>
<ListItem>
<Para>Grouping static operations together in the IDL file.
</Para>
</ListItem>
<ListItem>
<IndexTerm Id="ADGISG.DISTO.indx.40">
<Primary>IDL <Literal>static</Literal> keyword</Primary>
</IndexTerm>
<IndexTerm Id="ADGISG.DISTO.indx.41">
<Primary><Literal>static</Literal> IDL keyword</Primary>
</IndexTerm>
<Para>Specifying static operations in the interface by using the <Literal>static</Literal>
keyword.  This will self-document the static member functions.
However, this imposes a restriction that requires that the interface be
compiled for C++ only and that servers implement the member
function as static.  If you do not want to impose this in the
<IndexTerm Id="ADGISG.DISTO.indx.42">
<Primary><Literal>cxx_static</Literal> ACF attribute</Primary>
</IndexTerm>
<IndexTerm Id="ADGISG.DISTO.indx.43">
<Primary>ACF attribute <Literal>cxx_static</Literal></Primary>
</IndexTerm>interface definition, use the <Literal>cxx_static</Literal> attribute in an
Attribute Configuration File (ACF) to specify a static member
function.
</Para>
</ListItem>
</ItemizedList>
<Para>
</Para>
</Sect2>
<Sect2 Id="ADGISG.DISTO.div.6">
<Title>Adding an Interface Rather than Changing One</Title>
<Para><IndexTerm Id="ADGISG.DISTO.indx.44">
<Primary>adding an interface</Primary>
</IndexTerm>
<IndexTerm Id="ADGISG.DISTO.indx.45">
<Primary>changing an interface</Primary>
</IndexTerm>
<IndexTerm Id="ADGISG.DISTO.indx.46">
<Primary>interface changes</Primary>
</IndexTerm>An interface can inherit the features of another interface; thus not
only do you have class hierarchies, but you also can have interface
hierarchies as well.  We suggest that you add more interfaces
rather than change an existing one, even though IDL provides for
different interface versions.  Reasons for this include the following:
</Para>
<ItemizedList>
<ListItem>
<Para>Adding an interface will self document new features.  There is no way
for a developer to know which operations are old and which are new
unless they compare the old and new interfaces or the interface
designer has documented where the new operations begin.
</Para>
</ListItem>
<ListItem>
<Para>Adding an interface will not break the interface hierarchy.  Adding
additional operations to a base class can be a problem for
applications.
</Para>
</ListItem>
<ListItem>
<Para>Adding an interface allows you to bypass the tedious procedure for
changing an interface and its version numbers.
</Para>
</ListItem>
</ItemizedList>
</Sect2>
</Sect1>
<Sect1 Id="ADGISG.DISTO.div.7">
<Title>Binding to Distributed Objects Rather than Servers</Title>
<Para><IndexTerm Id="ADGISG.DISTO.indx.47">
<Primary>binding to objects</Primary>
</IndexTerm>
<IndexTerm Id="ADGISG.DISTO.indx.48">
<Primary>objects</Primary>
<Secondary>binding to rather than servers</Secondary>
</IndexTerm>
<IndexTerm Id="ADGISG.DISTO.indx.49">
<Primary>object reference</Primary>
</IndexTerm>
<IndexTerm Id="ADGISG.DISTO.indx.50">
<Primary><Literal>bind()</Literal> function</Primary>
</IndexTerm>When binding to objects, binding information is hidden from the
application by encapsulating it in the<Literal> rpc_object_reference</Literal> base
class that every DCE object inherits.  An application refers to a
distributed object via an<Symbol Role="Variable"> object reference</Symbol>.  An application
initially obtains an object reference by calling an appropriate
operation defined in an interface definition or a special <Function>bind( )</Function>
function generated when the interface definition is compiled.  Once an
object reference is obtained, the application refers to the
distributed object by calling its member functions, which are other
operations defined in the interface definition.  Since the location of
the object (binding information) is already known and completely
hidden, it is not appropriate to use explicit binding handles on these
member functions.
</Para>
<Para>Traditional DCE RPC object models limit what an object represents.  In
these models, objects represent resources on various servers or
multiple servers on individual hosts.  These models do not allow for
objects to represent many different things in a single application.
In addition, these models use a mechanism to group objects into types
so that different sets of manager routines can be implemented, but
this mechanism is unnecessary because it is built in with the C++ 
features of IDL.  
Using the object-oriented model with C++ instead is an elegant
way to accomplish these things.

</Para>
</Sect1>
<Sect1 Id="ADGISG.DISTO.div.8">
<Title>Clients Manipulate Objects Maintained on Servers</Title>
<Para>The following figure simplifies the relationship between an
object-oriented application and a remote procedure call.


<?sml-need 5i>
<IndexTerm Id="ADGISG.DISTO.indx.51">
<Primary>distributed objects and RPCs</Primary>
</IndexTerm>
<IndexTerm Id="ADGISG.DISTO.indx.52">
<Primary>RPCs and distributed objects</Primary>
</IndexTerm></Para>
<Figure>
<Title>Distributed Objects and a Remote Procedure Call</Title>
<Graphic Entityref="ADGISG.DISTO.ent.2" Scalefit="1" Reprodep="350" Reprowid="350"></Graphic>
</Figure>
<Para>A client first obtains an object reference to the remote object (manager object).
An object reference is in the client's address space to act as a proxy
for the remote object in the server's address space.  In fact, an
object reference is an instance of the client's proxy class.
</Para>
<Para>When a member function is called, the function in the client stub
executes to handle the RPC.  The stub of the server managing the
object receives the RPC and dispatches the call to the appropriate
manager object code and its member function implementation.  The
actual object is an instance of the manager class.

</Para>
</Sect1>
<Sect1 Id="ADGISG.DISTO.div.9">
<Title>Naming Objects</Title>
<IndexTerm Id="ADGISG.DISTO.indx.53">
<Primary>naming objects</Primary>
</IndexTerm>
<IndexTerm Id="ADGISG.DISTO.indx.54">
<Primary>object naming</Primary>
</IndexTerm>
<Para>This section discusses the model used to advertise named objects.  
The model stores binding information for the object's hosts in the name
service (for example, the Cell Directory Service, CDS). 
The model also stores the object's server location information in the 
endpoint map of each host that has one of the running servers.
</Para>
<Para>There are many ways to use the name service to store information.
Typical servers create and export information to a name service
entry representing the server itself.  In the named object model, an
additional name service entry is also created for each named object.
Thus, as the following figure shows, if five persistent objects are
supported by two servers, there are a total of seven entries in the
namespace.  These allow clients a choice to bind by way of server
entry names or objects names.
</Para>
<?sml-need 2.5i>
<Figure>
<Title>Server and Object Names in the Name Service</Title>
<Graphic Entityref="ADGISG.DISTO.ent.3" Scalefit="1" Reprodep="350" Reprowid="350"></Graphic>
</Figure>
<Para>The object name is application specific, and each server exports its
binding information to both its server entry and the object entries it
supports.  The name service entries for each object associate the
object name with the combination of interface class ID, binding
information (protocol sequence and host name) for each supported
server, and object identifier (a UUID).  
</Para>
<Para><IndexTerm Id="ADGISG.DISTO.indx.55">
<Primary>CDS object entries</Primary>
</IndexTerm>
<IndexTerm Id="ADGISG.DISTO.indx.56">
<Primary>object entries in CDS</Primary>
</IndexTerm>Object entries are different than server entries.
It is important to understand that object entries represent objects,
not servers.  
A server entry should contain binding information for only one server
because it represents that server.
On the other hand, object entries contain binding information for one 
(or more) servers because multiple servers may support the object.
</Para>
<Para>As the number of named objects for an interface grows, management of
the name service may become necessary.  This could be done in the code
of each server, but a more consistent and practical approach is to
create scripts that use <Literal>dcecp</Literal>, or management applications that
use the name service application programming interface routines.  For
example, the performance of the name service may degrade as the number
of entries in a directory becomes very large.  Place object names in a
directory structure appropriate for the application.
</Para>
<Para>If the application allows all clients to know the object names, the
practical number of objects may be limited.  However, an application
can be designed to name a service object that clients look up, and
pass in the specific object name (or identifying number).  In this
case, the servers can implement (and even later change) the object
name location any way preferred: 
by using CDS, a commercial database, 
or an application-specific database.

</Para>
</Sect1>
</Chapter>
<!--+ 11/13/96 22:48:26
    | tagMorph:  $Id: distrib_obj.sgm,v 1.1.2.7 1996/12/17 19:29:27 damon Exp $
    | tagMorph library:  $Id: distrib_obj.sgm,v 1.1.2.7 1996/12/17 19:29:27 damon Exp $
    | sml-to-docbook:  1.24
    +-->
