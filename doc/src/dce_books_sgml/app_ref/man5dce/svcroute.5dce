<!--
# @OSF_COPYRIGHT@
# 
# 
# HISTORY
# $Log: svcroute.5dce,v $
# Revision 1.1.2.3  1996/12/06  16:17:40  wardr
# 	{edit,R1.2.2}
# 	Fixed initial conversion problems
# 	[1996/12/06  16:16:58  wardr]
#
# Revision 1.1.2.2  1996/12/01  20:35:27  weir
# 	Removed thinsp entities
# 	[1996/12/01  20:35:18  weir]
# 
# Revision 1.1.2.1  1996/11/29  19:08:37  weir
# 	Initial submission
# 	[1996/11/29  19:08:21  weir]
# 
# $EndLog$
-->
<!-- Fragment document type declaration subset:
ArborText, Inc., 1988-1993, v.4001
<!DOCTYPE Book PUBLIC "-//Davenport//DTD DocBook V2.4//EN" [
]>
-->
<RefEntry Id="DCEADR.MAN137.rsml.1">
<RefMeta>
<RefEntryTitle>svcroute</RefEntryTitle>
<ManVolNum>5dce</ManVolNum>
</RefMeta>
<RefNameDiv>
<RefName><Literal>svcroute</Literal></RefName>
<RefPurpose>Routing control file for DCE serviceability messages</RefPurpose>
</RefNameDiv>
<!-- COPYRIGHT NOTICE-->
<!-- Copyright (c) 1990, 1991, 1992, 1993, 1994 Open Software Foundation, Inc.-->
<!-- ALL RIGHTS RESERVED (DCE).  See the file named COPYRIGHT.DCE -->
<!-- for the full copyright text.-->
<!-- OLD HISTORY-->
<!-- Revision 1.1.6.1  1996/11/20  19:49:45  wardr-->
<!-- 	{edit,R1.2.2}-->
<!-- 	Init capped heads-->
<!-- 	[1996/11/20  19:49:34  wardr]-->
<!---->
<!-- Revision 1.1.4.1  1996/03/11  20:53:12  weir-->
<!-- 	Removed incorrect backslash in a synopsis line-->
<!-- 	[1996/03/11  20:52:51  weir]-->
<!-- -->
<!-- Revision 1.1.2.12  1995/06/21  13:23:40  buckler-->
<!-- 	More 1.1 edits.-->
<!-- 	[1995/06/19  20:38:00  buckler]-->
<!-- -->
<!-- Revision 1.1.2.11  1995/06/08  18:40:28  buckler-->
<!-- 	1.1 edits and Prentice Hall reformat.-->
<!-- 	[1995/06/08  18:40:11  buckler]-->
<!-- -->
<!-- Revision 1.1.2.10  1995/05/18  16:39:15  rcb-->
<!-- 	PRENTICE HALL reformat: preliminary fiddling-->
<!-- 	[1995/05/18  16:39:10  rcb]-->
<!-- -->
<!-- Revision 1.1.2.9  1994/10/19  20:57:23  weir-->
<!-- 	A few edits-->
<!-- 	[1994/10/19  20:56:59  weir]-->
<!-- -->
<!-- Revision 1.1.2.8  1994/10/18  23:14:14  buckler-->
<!-- 	{enh, 8441, R1.1}-->
<!-- 	A few last technical comments.-->
<!-- 	[1994/10/18  23:13:58  buckler]-->
<!-- -->
<!-- Revision 1.1.2.7  1994/10/18  19:16:09  weir-->
<!-- 	Added GOESTO spec info-->
<!-- 	[1994/10/18  19:15:26  weir]-->
<!-- -->
<!-- Revision 1.1.2.6  1994/10/17  22:33:14  buckler-->
<!-- 	{enh, 8441, R1.1}-->
<!-- 	Incorporated technical review.-->
<!-- 	[1994/10/17  22:32:57  buckler]-->
<!-- -->
<!-- Revision 1.1.2.5  1994/09/14  14:54:07  weir-->
<!-- 	Update-->
<!-- 	[1994/09/14  14:53:37  weir]-->
<!-- -->
<!-- Revision 1.1.2.4  1994/08/31  21:10:49  weir-->
<!-- 	Many updates-->
<!-- 	[1994/08/31  21:10:15  weir]-->
<!-- -->
<!-- Revision 1.1.2.3  1994/05/10  05:13:46  willie-->
<!-- 	{R1.1, beta}-->
<!-- 	Incorporated beta review.-->
<!-- 	[1994/05/10  05:13:32  willie]-->
<!-- -->
<!-- Revision 1.1.2.2  1993/08/12  20:49:03  buckler-->
<!-- 	{enh, 8441, R1.1}-->
<!-- 	Created new reference page.-->
<!-- 	[1993/08/12  19:41:51  buckler]-->
<!-- -->
<!-- -->
<!-- -->
<RefSect1>
<Title>Description</Title>
<!-- - -->
<Para>The file <Filename>svc/routing</Filename> specifies routing for serviceability messages.
The default location for <Filename>svc/routing</Filename> is the DCE local data directory
(typically <Filename>/opt/dcelocal/var</Filename>).  The environment variable
<Literal>DCE_SVC_ROUTING_FILE</Literal>, if set, specifies a different location for the
file.
</Para>
<Para>The file consists of a series of text lines.  Blank lines and lines that
begin with a <Literal>#</Literal> (number sign) character are ignored when the file's
contents are interpreted.  All other lines must consist of either three or
four fields, each separated by a <Literal>:</Literal> (colon).  Leading whitespace is
ignored.
</Para>
<Para>Lines consisting of three fields specify routing for nondebug serviceability
messages.  Their format is as follows:
</Para>
<Synopsis><Symbol Role="Variable">sev</Symbol><Literal>:</Literal><Symbol Role="Variable">out_form</Symbol><Literal>:</Literal><Symbol Role="Variable">dest</Symbol>[<Literal>;</Literal><Symbol Role="Variable">out_form</Symbol><Literal>:</Literal><Symbol Role="Variable">dest</Symbol> .&ensp;.&ensp;.&ensp;] [<Literal>GOESTO:</Literal>{<Symbol Role="Variable">sev</Symbol> | <Symbol Role="Variable">comp</Symbol>}]
</Synopsis>
<Para>The <Symbol Role="Variable">sev</Symbol> (severity) field specifies one of the following message severities:
</Para>
<VariableList>
<VarListEntry>
<Term><Literal>FATAL</Literal></Term>
<ListItem>
<Para>Fatal error exit: An unrecoverable error (such 
as database corruption) has occurred and will 
probably require manual intervention to be 
corrected.  The program usually terminates 
immediately after such an error.
</Para>
</ListItem>
</VarListEntry>
<VarListEntry>
<Term><Literal>ERROR</Literal></Term>
<ListItem>
<Para>Error detected: An unexpected event that is 
nonterminal (such as a timeout), or is correctable 
by human intervention, has occurred.  The program 
will continue operation, although some functions 
or services may no longer be available.  This 
severity level may also be used to indicate that a 
particular request or action could not be completed.
</Para>
</ListItem>
</VarListEntry>
<VarListEntry>
<Term><Literal>WARNING</Literal></Term>
<ListItem>
<Para>Correctible error: An error occurred that was 
automatically corrected (for example, a configuration 
file was not found, and default values were used 
instead).  This severity level may also be used to 
indicate a condition that <Replaceable>may</Replaceable> be an error 
if the effects are undesirable (for example, removing 
all files as a side-effect of removing a nonempty 
directory).  This severity level may also be used to 
indicate a condition that, if not corrected, will 
eventually result in an error (for example, a 
printer's running low on paper).
</Para>
</ListItem>
</VarListEntry>
<VarListEntry>
<Term><Literal>NOTICE</Literal></Term>
<ListItem>
<Para>Informational notice: A significant routine major 
event has occurred; for example, a server has started.
</Para>
</ListItem>
</VarListEntry>
<VarListEntry role="linebreak">
<Term><Literal>NOTICE_VERBOSE</Literal></Term>
<ListItem>
<Para>Verbose information notice: A significant routine 
event has occurred; for example, a directory 
entry was removed.
</Para>
</ListItem>
</VarListEntry>
</VariableList>
<Para>The <Symbol Role="Variable">out_form</Symbol> (output form) field specifies how the messages of a given
severity level should be processed, and must be one of the following:
</Para>
<VariableList>
<VarListEntry>
<Term><Literal>BINFILE</Literal></Term>
<ListItem>
<Para>Write these messages as a binary log entry to the specified file.
</Para>
</ListItem>
</VarListEntry>
<VarListEntry>
<Term><Literal>TEXTFILE</Literal></Term>
<ListItem>
<Para>Write these messages as human-readable text.
</Para>
</ListItem>
</VarListEntry>
<VarListEntry>
<Term><Literal>FILE</Literal></Term>
<ListItem>
<Para>Equivalent to <Literal>TEXTFILE</Literal>.
<!-- -->
<!-- -->
</Para>
</ListItem>
</VarListEntry>
<VarListEntry>
<Term><Literal>DISCARD</Literal></Term>
<ListItem>
<Para>Do not record messages of this severity level.
<!-- -->
<!-- -->
</Para>
</ListItem>
</VarListEntry>
<VarListEntry>
<Term><Literal>STDOUT</Literal></Term>
<ListItem>
<Para>Write these messages as human-readable text to standard output.
<!-- -->
<!-- -->
</Para>
</ListItem>
</VarListEntry>
<VarListEntry>
<Term><Literal>STDERR</Literal></Term>
<ListItem>
<Para>Write these messages as human-readable text to standard error.
<!-- -->
<!-- -->
</Para>
</ListItem>
</VarListEntry>
</VariableList>
<!-- -->
<!-- -->
<Para>Files written as <Literal>BINFILE</Literal>s can be read and manipulated with a set of
log file functions (for more information, see <Function>dce_svc_log_open()</Function>
and <Function>dce_svc_log_get()</Function>), or by the <Literal>svcdumplog</Literal> command (see
<Filename MoreInfo="RefEntry">svcdumplog(1dce)</Filename>).
</Para>
<Para>The <Symbol Role="Variable">out_form</Symbol> specifier may be followed by a two-number specifier
of the form
<!-- -->
</Para>
<Synopsis><Literal>.</Literal><Symbol Role="Variable">gens</Symbol><Literal>.</Literal><Symbol Role="Variable">count</Symbol>
</Synopsis>
<!-- -->
<Para>where
<!-- -->
</Para>
<VariableList>
<VarListEntry>
<Term><Symbol Role="Variable">gens</Symbol></Term>
<ListItem>
<Para>is an integer that specifies the number of files (that is, generations) that
should be kept
</Para>
</ListItem>
</VarListEntry>
<VarListEntry>
<Term><Symbol Role="Variable">count</Symbol></Term>
<ListItem>
<Para>is an integer specifying how many entries (that is, messages) should be
written to each file
</Para>
</ListItem>
</VarListEntry>
</VariableList>
<!-- -->
<Para>The multiple files are named by appending a dot to the simple specified
name, <Symbol Role="Variable">dest</Symbol>,
followed by the current generation number.  When the number of entries
in a file reaches the maximum specified by <Symbol Role="Variable">count</Symbol>, the file is closed,
the generation number is incremented, and the next file is opened.  When the
maximum generation number files have been created and filled, the generation
number is reset to 1, and a new file with that number is created and written
to (thus overwriting the already-existing file with the same name), and so
on, as long as messages are being written.  Thus the files wrap around to their
beginning, and the total number of log files never exceeds <Symbol Role="Variable">gens</Symbol>, although
messages continue to be written as long as the program continues writing them.
Note that when a program starts, the generation starts at 1.
</Para>
<Para>The <Symbol Role="Variable">dest</Symbol> (destination) field specifies where the message should be sent,
and is a pathname.  The field can be left blank if the <Symbol Role="Variable">out_form</Symbol> specified
is <Literal>DISCARD</Literal>, <Literal>STDOUT</Literal>, or <Literal>STDERR</Literal>.  The field can also contain a
<Command>%ld</Command> string in the filename which, when the file is written, will be
replaced by the process ID of the program that wrote the message(s).  Filenames
may <Symbol Role="Variable">not</Symbol> contain colons or periods.
<!-- -->
<!-- -->
<!-- -->
<!-- -->
</Para>
<Para>Multiple routings for the same severity level can be specified by simply
adding the additional desired routings as semicolon-separated
<Symbol Role="Variable">out_form</Symbol><Literal>:</Literal><Symbol Role="Variable">dest</Symbol> strings.
<!-- -->
</Para>
<Para>For example, the following strings specify that
</Para>
<ItemizedList>
<ListItem>
<Para>Fatal error messages should be sent to the console.
</Para>
</ListItem>
<ListItem>
<Para>Warnings should be discarded.
</Para>
</ListItem>
<ListItem>
<Para>Notices should be written both to standard error and as binary entries in files
located in the <Filename>/tmp</Filename> directory.  No more than 50 files should be written, 
and there should be no more than 100 messages written to each file. 
The files will have names of the form <Filename>/tmp/log</Filename><Symbol Role="Variable">process_id</Symbol><Literal>.</Literal><Symbol Role="Variable">n</Symbol>,
where <Symbol Role="Variable">process_id</Symbol> is the process ID of the program originating the
messages, and <Symbol Role="Variable">n</Symbol> is the generation number of the file (expressed with
only as many digits as needed).
</Para>
</ListItem>
</ItemizedList>
<!-- -->
<InformalExample>
<Para><ProgramListing><UserInput>FATAL:TEXTFILE:/dev/console
WARNING:DISCARD:--
NOTICE:STDERR:-;BINFILE.50.100:/tmp/log%ld
</UserInput></ProgramListing></Para>
</InformalExample>
<!-- -->
<!-- -->
<Para>The <Literal>GOESTO</Literal> specifier allows messages for the severity whose routing
specification it appears in to be routed to the same destination (and in the
same output form) as those for the other, specified, severity level (or
component name).
<!-- -->
<!-- The effect of this routing specifier is that messages for the component (or-->
<!-- level) in question ``go to'' the named component or message. -->
<!-- -->
For example, the following specification
means that <Literal>WARNING</Literal> messges should show up in three places: twice to
<Literal>stderr</Literal>, and then once to the file <Filename>/tmp/foo</Filename>:
<!-- -->
</Para>
<InformalExample>
<Para><ProgramListing><UserInput>WARNING:STDERR:;GOESTO:FATAL
FATAL:STDERR:;FILE:/tmp/foo
</UserInput></ProgramListing></Para>
</InformalExample>
<!-- -->
<Para>Note that a <Literal>GOESTO</Literal> specification should be the last element in a
multidestination route specification.
<!-- -->
<!-- -->
<!-- -->
<!-- -->
<!-- -->
<!-- - -->
</Para>
<RefSect2>
<Title>Routing Serviceability Messages by Environment Variable</Title>
<!-- - -->
<!-- -->
<Para>Serviceability message routing can also be specified by the values of certain
environment variables.  If environment variables are used, the routings they
specify will override any conflicting routes specified by the routing file.
</Para>
<Para><?sml-need 8>The routes are specified on the basis of severity level by putting the desired
routing instructions in their corresponding environment variables:
<!-- -->
<!--no-op:  l-->
</Para>
<ItemizedList>
<ListItem>
<Para><Literal>SVC_FATAL</Literal>
</Para>
</ListItem>
<ListItem>
<Para><Literal>SVC_ERROR</Literal>
</Para>
</ListItem>
<ListItem>
<Para><Literal>SVC_WARNING</Literal>
</Para>
</ListItem>
<ListItem>
<Para><Literal>SVC_NOTICE</Literal>
</Para>
</ListItem>
<ListItem>
<Para><Literal>SVC_NOTICE_VERBOSE</Literal>
</Para>
</ListItem>
</ItemizedList>
<!--no-op:  b-->
<!-- -->
<Para>Each variable should contain a single string in the format
<!-- -->
</Para>
<Synopsis><Symbol Role="Variable">out_form</Symbol><Literal>:</Literal><Symbol Role="Variable">dest</Symbol>[<Literal>;</Literal><Symbol Role="Variable">out_form</Symbol><Literal>:</Literal><Symbol Role="Variable">dest</Symbol> .&ensp;.&ensp;.&ensp;]
</Synopsis>
<!-- -->
<Para>where <Symbol Role="Variable">out_form</Symbol> and <Symbol Role="Variable">dest</Symbol> have the same meanings and
form as in the preceding syntax line.  Multiple routings can 
be specified with semicolon-separated
additional substrings specifying the additional routes, as shown.
<!-- -->
<!-- -->
<!-- -->
<!-- - -->
</Para>
</RefSect2>
<RefSect2>
<Title>Setting Serviceability Debug Message Levels</Title>
<!-- - -->
<!-- -->
<Para>Nine serviceability debug message levels (specified respectively by single digits
from 1 to 9) are available.  The precise meaning of each level varies with the
application or DCE component in question, but the general notion is that ascending
to a higher level (for example, from <Literal>2</Literal> to <Literal>3</Literal>) increases the level of
informational detail in the messages.
</Para>
<Para>Setting debug messaging at a certain level means that all levels up to and
including the specified level are enabled.  For example, if the debug level
is set at <Literal>4</Literal>, then the <Literal>1</Literal>, <Literal>2</Literal>, and <Literal>3</Literal> levels are enabled
as well.
<!-- -->
</Para>
<Para>The general format for the debug level specifier string is
<!-- -->
</Para>
<Synopsis><Symbol Role="Variable">component</Symbol><Literal>:</Literal><Symbol Role="Variable">sub_comp</Symbol><Literal>.</Literal><Symbol Role="Variable">level</Symbol><Literal>,</Literal><Symbol Role="Variable">sub_comp</Symbol><Literal>.</Literal><Symbol Role="Variable">level</Symbol><Literal>,</Literal><Symbol Role="Variable">.&ensp;.&ensp;.</Symbol>
</Synopsis>
<!-- -->
<Para>where
<!-- -->
</Para>
<VariableList>
<VarListEntry>
<Term><Symbol Role="Variable">component</Symbol></Term>
<ListItem>
<Para>is the three-character serviceability component code for the program whose debug
message levels are being specified.
<!-- -->
</Para>
</ListItem>
</VarListEntry>
<VarListEntry role="linebreak">
<Term><Symbol Role="Variable">sub_comp</Symbol><Literal>.</Literal><Symbol Role="Variable">level</Symbol></Term>
<ListItem>
<Para>is a serviceability subcomponent name, followed (after a dot) by a debug level
(expressed as a single digit from 1 to 9).  Note that multiple subcomponent/level
pairs can be specified in the string.
<!-- -->
</Para>
</ListItem>
</VarListEntry>
</VariableList>
<!-- -->
<Para><?sml-need 6>If there are multiple subcomponents and it is desired to set the debug level
to be the same for all of them, then the following form
will do this (where <Literal>*</Literal> specifies all subcomponents):
<!-- -->
</Para>
<Synopsis><Symbol Role="Variable">component</Symbol><Literal>:*.</Literal><Symbol Role="Variable">level</Symbol>
</Synopsis>
<!-- -->
<!-- - -->
</RefSect2>
<RefSect2>
<Title>Routing Serviceability Debug Messages</Title>
<!-- - -->
<!-- -->
<Para>Routing for serviceability debug messages can be specified in either of the
two following ways:
<!-- -->
<!-- -->
</Para>
<ItemizedList>
<ListItem>
<Para>By the contents of the <Literal>SVC_</Literal><Symbol Role="Variable">COMP</Symbol><Literal>_DBG</Literal> environment variable (where
<Symbol Role="Variable">COMP</Symbol> is the code of the component, converted to upper case, whose debug
message routing is to be set).
</Para>
</ListItem>
<ListItem>
<Para>By the contents of the <Filename>/svc/routing</Filename> routing file.
</Para>
</ListItem>
</ItemizedList>
<!-- -->
<Para>The routing is specified by the contents of a specially-formatted string that
is either included in the value of the environment variable or the contents
of the routing file.
</Para>
<Para>The general format for the debug routing specifier string is
<!-- -->
</Para>
<Synopsis><?sml-size -1>
<Symbol Role="Variable">component</Symbol><Literal>:</Literal><Symbol Role="Variable">sub_comp</Symbol><Literal>.</Literal><Symbol Role="Variable">level</Symbol><Literal>,</Literal><Symbol Role="Variable">.&ensp;.&ensp;.</Symbol><Literal>:</Literal><Symbol Role="Variable">out_form</Symbol><Literal>:</Literal><Symbol Role="Variable">dest</Symbol>[<Literal>;</Literal><Symbol Role="Variable">out_form</Symbol><Literal>:</Literal><Symbol Role="Variable">dest</Symbol> .&ensp;.&ensp;.&ensp;] &bsol;
<?sml-break>[<Literal>GOESTO:</Literal>{<Symbol Role="Variable">sev</Symbol> | <Symbol Role="Variable">component</Symbol>}]
<?sml-size +1>
</Synopsis>
<!-- -->
<Para>where <Symbol Role="Variable">component</Symbol>, <Symbol Role="Variable">sub_comp.level</Symbol>, <Symbol Role="Variable">out_form</Symbol>, <Symbol Role="Variable">dest</Symbol>,
and <Symbol Role="Variable">sev</Symbol> have the same meanings as defined earlier in this reference
page.
<!-- -->
</Para>
<Para>For example, consider the following string value:
<!-- -->
</Para>
<InformalExample>
<Para><ProgramListing><UserInput>hel:*.4:STDERR:-;TEXTFILE:/tmp/hel_debug_log_%ld
</UserInput></ProgramListing></Para>
</InformalExample>
<!-- -->
<Para>This value, when assigned to the <Literal>SVC_HEL_DBG</Literal> environment variable,
would set the debug level and routing for all <Literal>hel</Literal> subcomponents.  A
debug level of <Literal>4</Literal> is specified, and all debug messages of that level
or lower will be written both to standard error, and in text form to the
file <Filename>/tmp/hel_debug_log_</Filename><Symbol Role="Variable">process_ID</Symbol>, where <Symbol Role="Variable">process_ID</Symbol> is
the process ID of the program writing the messages.
</Para>
</RefSect2>
</RefSect1>
<!--+ 11/27/96 19:46:25
    | tagMorph:  $Id: svcroute.5dce,v 1.1.2.3 1996/12/06 16:17:40 wardr Exp $
    | tagMorph library:  $Id: svcroute.5dce,v 1.1.2.3 1996/12/06 16:17:40 wardr Exp $
    | sml-to-docbook:  1.25
    +-->
</RefEntry>
