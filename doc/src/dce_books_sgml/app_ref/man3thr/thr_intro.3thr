<!--
# @OSF_COPYRIGHT@
# 
# 
# HISTORY
# $Log: thr_intro.3thr,v $
# Revision 1.1.2.6  1996/12/14  19:05:33  carrig
# 	{enh,R1.2.2}
# 	Synopses font
# 	[1996/12/14  19:02:47  carrig]
#
# Revision 1.1.2.5  1996/12/13  21:14:40  carrig
# 	{enh,R1.2.2}
# 	Synopses
# 	[1996/12/13  21:13:04  carrig]
# 
# Revision 1.1.2.4  1996/12/06  18:59:58  wardr
# 	{edit,R1.2.2}
# 	Fixed initial conversion problems
# 	[1996/12/06  18:51:06  wardr]
# 
# Revision 1.1.2.3  1996/12/05  17:58:26  wardr
# 	{edit,R1.2.2}
# 	Fixed initial conversion problems
# 	[1996/12/05  17:50:48  wardr]
# 
# Revision 1.1.2.2  1996/12/01  20:29:59  weir
# 	Removed thinsp entities
# 	[1996/12/01  20:28:38  weir]
# 
# Revision 1.1.2.1  1996/11/29  18:29:55  weir
# 	Initial submission
# 	[1996/11/29  18:26:15  weir]
# 
# $EndLog$
-->
<!-- Fragment document type declaration subset:
ArborText, Inc., 1988-1993, v.4001
<!DOCTYPE Book PUBLIC "-//Davenport//DTD DocBook V2.4//EN" [
]>
-->
<RefEntry Id="DCEADR.MAN138.rsml.1">
<RefMeta>
<RefEntryTitle>thr_intro</RefEntryTitle>
<ManVolNum>3thr</ManVolNum>
</RefMeta>
<RefNameDiv>
<RefName><Literal>thr_intro</Literal></RefName>
<RefPurpose>Introduction to DCE Threads</RefPurpose>
</RefNameDiv>
<!-- COPYRIGHT NOTICE-->
<!-- Copyright (c) 1990, 1991, 1992, 1993, 1994 Open Software Foundation, Inc.-->
<!-- ALL RIGHTS RESERVED (DCE).  See the file named COPYRIGHT.DCE for-->
<!-- the full copyright text.-->
<!-- -->
<!-- -->
<!-- OLD HISTORY-->
<!-- Revision 1.1.5.1  1996/11/19  20:26:14  wardr-->
<!-- 	{edit,R1.2.2}-->
<!-- 	Init capped heads-->
<!-- 	[1996/11/19  20:24:25  wardr]-->
<!---->
<!-- Revision 1.1.2.6  1995/06/21  13:23:16  buckler-->
<!-- 	More 1.1 edits.-->
<!-- 	[1995/06/19  17:30:47  buckler]-->
<!-- -->
<!-- Revision 1.1.2.5  1995/06/09  16:22:44  buckler-->
<!-- 	1.1 edits and Prentice Hall reformat-->
<!-- 	[1995/06/09  16:18:13  buckler]-->
<!-- -->
<!-- Revision 1.1.2.4  1994/10/21  17:34:11  hileman-->
<!-- 	Fixed problem with table breaks.-->
<!-- 	[1994/10/21  17:33:52  hileman]-->
<!-- -->
<!-- Revision 1.1.2.3  1994/09/30  17:59:41  weir-->
<!-- 	(Defect, 9772, R1.1)-->
<!-- 	Corrected miscellaneous errors-->
<!-- 	[1994/09/30  17:57:24  weir]-->
<!-- -->
<!-- Revision 1.1.2.2  1994/06/13  17:10:38  devobj-->
<!-- 	cr10872 - fix copyright-->
<!-- 	[1994/06/13  16:50:53  devobj]-->
<!-- -->
<!-- Revision 1.1.2.1  1994/04/11  20:37:12  rom-->
<!-- 	{def, 10326, R1.1}-->
<!-- 	Rename intro.3thr to thr_intro.3thr.-->
<!-- 	[1994/04/11  19:56:49  rom]-->
<!-- -->
<!---->
<!-- Copyright 1991, Open Software Foundation, Inc.  ALL RIGHTS RESERVED.-->
<!-- ********************************************************************-->
<!--                                                                    *-->
<!-- COPYRIGHT (c) 1991 BY DIGITAL EQUIPMENT CORPORATION,               *-->
<!-- Maynard, Massachusetts                                             *-->
<!-- All Rights Reserved.                                               *-->
<!--                                                                    *-->
<!-- This document is furnished under a license and may be used and     *-->
<!-- copied only in accordance with the terms of such license and with  *-->
<!-- the inclusion of the above copyright notice.  No title to or        *-->
<!-- ownership of the document is hereby transferred.                   *-->
<!--                                                                    *-->
<!-- The information in this document is subject to change without      *-->
<!-- notice and should not be construed as a commitment by Digital      *-->
<!-- Equipment Corporation.                                             *-->
<!--                                                                    *-->
<!-- ********************************************************************-->
<!--.nr H1 1-->
<RefSect1>
<Title>Description</Title>
<Para>DCE Threads is a set of routines that you can call to create a
multithreaded program.  Multithreading is used to improve the performance of
a program.  Routines implemented by DCE Threads that are not specified
by Draft 4 of the POSIX 1003.4a standard are indicated by an <Literal>_np</Literal>
suffix on the name.  These routines are new primitives.
<IndexTerm Id="DCEADR.MAN138.indx.1">
<Primary>new primitive routines</Primary>
</IndexTerm>
<IndexTerm Id="DCEADR.MAN138.indx.2">
<Primary>non-portable routines</Primary>
</IndexTerm>
<IndexTerm Id="DCEADR.MAN138.indx.3">
<Primary>np suffix</Primary>
</IndexTerm>
<IndexTerm Id="DCEADR.MAN138.indx.4">
<Primary>suffix</Primary>
<Secondary>np</Secondary>
</IndexTerm></Para>
<Para>The threads routines sort alphabetically in the reference pages;
however, the tables in this introduction list the routines in the following
functional groups:
<!--no-op:  l-->
</Para>
<ItemizedList>
<ListItem>
<Para>Threads routines
<!-- -->
</Para>
</ListItem>
<ListItem>
<Para>Routines that implicitly initialize threads package
<!-- -->
</Para>
</ListItem>
<ListItem>
<Para>Attributes object routines
</Para>
</ListItem>
<ListItem>
<Para>Mutex routines
</Para>
</ListItem>
<ListItem>
<Para>Condition variable routines
</Para>
</ListItem>
<ListItem>
<Para>Thread-specific data routines
</Para>
</ListItem>
<ListItem>
<Para>Threads cancellation routines
</Para>
</ListItem>
<ListItem>
<Para>Threads priority and scheduling routines
</Para>
</ListItem>
<ListItem>
<Para>Cleanup routines
</Para>
</ListItem>
<ListItem>
<Para>The <Function>atfork()</Function> routine
<!-- .LI-->
<!-- The \*Lexceptions(\|)\*O Routine-->
</Para>
</ListItem>
<ListItem>
<Para>Signal handling routines
<!-- -->
<!-- .LI-->
<!-- Data Types-->
<!-- -->
</Para>
</ListItem>
</ItemizedList>
<!-- .TB "Threads Routines"-->
<!--no-op:  b-->
<?sml-break>
<?sml-need 4.0i>
<InformalTable Frame="All" Remap="center" Orient="Port">
<TGroup Rowsep="0" Colsep="0" Cols="2">
<ColSpec Rowsep="1" Colsep="1" Align="Left" Colwidth="1*" Colname="col1" Colnum="1">
<ColSpec Rowsep="1" Align="Left" Colwidth="1*" Colname="col2" Colnum="2">
<TBody>
<Row>
<Entry Rowsep="1" Colsep="0" Align="Center" Namest="col1" Nameend="col2"><Literal>Threads Routines</Literal></Entry>
</Row>
<Row>
<Entry Rowsep="1"><Literal>Routine</Literal></Entry>
<Entry Rowsep="1"><Literal>Description</Literal></Entry>
</Row>
<Row>
<Entry><Function>pthread_create()</Function></Entry>
<Entry>Creates a thread
</Entry>
</Row>
<Row>
<Entry><Function>pthread_delay_np()&ensp;</Function></Entry>
<Entry>Causes a thread to wait for a period of time
</Entry>
</Row>
<Row>
<Entry><Function>pthread_detach()&ensp;</Function></Entry>
<Entry>Marks a thread for deletion
</Entry>
</Row>
<Row>
<Entry><Function>pthread_equal()&ensp;</Function></Entry>
<Entry>Compares one thread identifier to another thread identifier
</Entry>
</Row>
<Row>
<Entry><Function>pthread_exit()&ensp;</Function></Entry>
<Entry>Terminates the calling thread
</Entry>
</Row>
<Row>
<Entry><Function>pthread_join()&ensp;</Function></Entry>
<Entry>Causes the calling thread to wait for the termination of a specified thread
</Entry>
</Row>
<Row>
<Entry><Literal>pthread_once()&ensp;</Literal></Entry>
<Entry>Calls an initialization routine to be executed only once
</Entry>
</Row>
<Row>
<Entry><Literal>pthread_self()&ensp;</Literal></Entry>
<Entry>Obtains the identifier of the current thread
</Entry>
</Row>
<Row>
<Entry><Literal>pthread_yield()&ensp;</Literal></Entry>
<Entry>Notifies the scheduler that the current thread
will release its processor to other threads of the same or higher priority
</Entry>
</Row>
</TBody>
</TGroup>
</InformalTable>
<!--no-op:  b-->
<!-- -->
<!-- -->
<!-- -->
<!-- -->
<?sml-space>
<!-- -->
<Para>The following DCE Threads routines will, when called, implicitly perform
any necessary initialization of the threads package.  Thus any application
using DCE Threads should call one of the following routines before calling
any other threads routines, in order to ensure that the package is properly
initialized.
</Para>
<Para><!-- -->
<!-- -->
<!-- .TB "Routines that Cause Initialization"-->
<?sml-need 6.0i></Para>
<InformalTable Frame="All" Remap="center" Orient="Port">
<TGroup Rowsep="0" Colsep="0" Cols="2">
<ColSpec Rowsep="1" Colsep="1" Align="Left" Colwidth="1*" Colname="col1" Colnum="1">
<ColSpec Rowsep="1" Align="Left" Colwidth="1*" Colname="col2" Colnum="2">
<TBody>
<Row>
<Entry Rowsep="1" Colsep="0" Align="Center" Namest="col1" Nameend="col2"><Literal>Routines that Implicitly Perform Threads Initialization</Literal></Entry>
<Entry Rowsep="1"></Entry>
</Row>
<Row>
<Entry Rowsep="1"><Literal>Routine</Literal></Entry>
<Entry Rowsep="1"><Literal>Description</Literal></Entry>
</Row>
<Row>
<Entry><Function>pthread_attr_create()&ensp;</Function></Entry>
<Entry>Creates a thread attributes object
</Entry>
</Row>
<Row>
<Entry><Function>pthread_create()&ensp;</Function></Entry>
<Entry>Creates a thread
</Entry>
</Row>
<Row>
<Entry><Literal>pthread_self()&ensp;</Literal></Entry>
<Entry>Obtains the identifier of the current thread
</Entry>
</Row>
<Row>
<Entry><Literal>pthread_setprio()&ensp;</Literal></Entry>
<Entry>Changes the scheduling priority attribute
</Entry>
</Row>
<Row>
<Entry><Function>pthread_getprio()&ensp;</Function></Entry>
<Entry>Obtains the scheduling priority attribute
</Entry>
</Row>
<Row>
<Entry><Literal>pthread_setscheduler()&ensp;</Literal></Entry>
<Entry>Changes the scheduling policy attribute
</Entry>
</Row>
<Row>
<Entry><Function>pthread_getscheduler()&ensp;</Function></Entry>
<Entry>Obtains the scheduling policy attribute
</Entry>
</Row>
<Row>
<Entry><Literal>pthread_once()&ensp;</Literal></Entry>
<Entry>Calls an initialization routine to be executed only once
</Entry>
</Row>
<Row>
<Entry><Function>pthread_keycreate()&ensp;</Function></Entry>
<Entry>Generates a unique thread-specific data key value
</Entry>
</Row>
<Row>
<Entry><Function>pthread_mutexattr_create()&ensp;</Function></Entry>
<Entry>Creates a mutex attributes object
</Entry>
</Row>
<Row>
<Entry><Function>pthread_mutex_init()&ensp;</Function></Entry>
<Entry>Creates a mutex
</Entry>
</Row>
<Row>
<Entry><Function>pthread_condattr_create()&ensp;</Function></Entry>
<Entry>Creates a condition variable attributes object
</Entry>
</Row>
<Row>
<Entry><Function>pthread_cond_init()&ensp;</Function></Entry>
<Entry>Creates a condition variable
</Entry>
</Row>
<Row>
<Entry><Literal>pthread_testcancel()&ensp;</Literal></Entry>
<Entry>Requests delivery of a pending cancel
</Entry>
</Row>
<Row>
<Entry><Literal>pthread_setcancel()&ensp;</Literal></Entry>
<Entry>Enables or disables the current thread's general cancelability
</Entry>
</Row>
<Row>
<Entry><Literal>pthread_setasynccancel()&ensp;</Literal></Entry>
<Entry>Enables or disables the current thread's asynchronous cancelability
</Entry>
</Row>
<Row>
<Entry><Function>pthread_delay_np()&ensp;</Function></Entry>
<Entry>Causes a thread to wait for a period of time
</Entry>
</Row>
</TBody>
</TGroup>
</InformalTable>
<!--no-op:  b-->
<!-- -->
<!-- -->
<!-- -->
<!-- -->
<!-- -->
<?sml-space>
<?sml-need 4.5i>
<!-- .TB "Attributes Object Routines"-->
<!--no-op:  l-->
<?sml-indent -.5i>
<InformalTable Frame="All" Remap="center" Orient="Port">
<TGroup Rowsep="0" Colsep="0" Cols="2">
<ColSpec Rowsep="1" Colsep="1" Align="Left" Colwidth="1*" Colname="col1" Colnum="1">
<ColSpec Rowsep="1" Align="Left" Colwidth="1*" Colname="col2" Colnum="2">
<TBody>
<Row>
<Entry Rowsep="1" Colsep="0" Align="Center" Namest="col1" Nameend="col2"><Literal>Attributes Object Routines</Literal></Entry>
<Entry Rowsep="1"></Entry>
</Row>
<Row>
<Entry Rowsep="1"><Literal>Routine</Literal></Entry>
<Entry Rowsep="1"><Literal>Description</Literal></Entry>
</Row>
<Row>
<Entry><Function>pthread_attr_create()</Function></Entry>
<Entry>Creates a thread attributes object
</Entry>
</Row>
<Row>
<Entry><Function>pthread_attr_delete()</Function></Entry>
<Entry>Deletes a thread attributes object
</Entry>
</Row>
<Row>
<Entry><Function>pthread_attr_getinheritsched()</Function></Entry>
<Entry>Obtains the inherit scheduling attribute
</Entry>
</Row>
<Row>
<Entry><Function>pthread_attr_getprio()</Function></Entry>
<Entry>Obtains the scheduling priority attribute
</Entry>
</Row>
<Row>
<Entry><Function>pthread_attr_getsched()</Function></Entry>
<Entry>Obtains the scheduling policy attribute
</Entry>
</Row>
<Row>
<Entry><Function>pthread_attr_getstacksize()</Function></Entry>
<Entry>Obtains the stacksize attribute
</Entry>
</Row>
<Row>
<Entry><Function>pthread_attr_setinheritsched()</Function></Entry>
<Entry>Changes the inherit scheduling attribute
</Entry>
</Row>
<Row>
<Entry><Function>pthread_attr_setprio()</Function></Entry>
<Entry>Changes the scheduling priority attribute
</Entry>
</Row>
<Row>
<Entry><Function>pthread_attr_setsched()</Function></Entry>
<Entry>Changes the scheduling policy attribute
</Entry>
</Row>
<Row>
<Entry><Function>pthread_attr_setstacksize()</Function></Entry>
<Entry>Changes the stacksize attribute
</Entry>
</Row>
<Row>
<Entry><Function>pthread_condattr_create()</Function></Entry>
<Entry>Creates a condition variable attributes object</Entry>
</Row>
<Row>
<Entry><Function>pthread_condattr_delete()</Function></Entry>
<Entry>Deletes a condition variable attributes
object
</Entry>
</Row>
<Row>
<Entry><Function>pthread_mutexattr_create()</Function></Entry>
<Entry>Creates a mutex attributes object
</Entry>
</Row>
<Row>
<Entry><Function>pthread_mutexattr_delete()</Function></Entry>
<Entry>Deletes a mutex attributes object
</Entry>
</Row>
<Row>
<Entry><Function>pthread_mutexattr_getkind_np()</Function></Entry>
<Entry>Obtains the mutex type attribute
</Entry>
</Row>
<Row>
<Entry><Function>pthread_mutexattr_setkind_np()</Function></Entry>
<Entry>Changes the mutex type attribute
</Entry>
</Row>
</TBody>
</TGroup>
</InformalTable>
<?sml-indent>
<!--no-op:  b-->
<?sml-space>
<?sml-need 3.5i>
<!-- .TB "Mutex Routines"-->
<!--no-op:  l-->
<InformalTable Frame="All" Remap="center" Orient="Port">
<TGroup Rowsep="0" Colsep="0" Cols="2">
<ColSpec Rowsep="1" Colsep="1" Align="Left" Colwidth="1*" Colname="col1" Colnum="1">
<ColSpec Rowsep="1" Align="Left" Colwidth="1*" Colname="col2" Colnum="2">
<TBody>
<Row>
<Entry Rowsep="1" Colsep="0" Align="Center" Namest="col1" Nameend="col2"><Literal>Mutex Routines</Literal></Entry>
<Entry Rowsep="1"></Entry>
</Row>
<Row>
<Entry Rowsep="1"><Literal>Routine</Literal></Entry>
<Entry Rowsep="1"><Literal>Description</Literal></Entry>
</Row>
<Row>
<Entry><Function>pthread_lock_global_np()&ensp;</Function></Entry>
<Entry>Locks a global mutex</Entry>
</Row>
<Row>
<Entry><Function>pthread_mutex_destroy()&ensp;</Function></Entry>
<Entry>Deletes a mutex</Entry>
</Row>
<Row>
<Entry><Function>pthread_mutex_init()&ensp;</Function></Entry>
<Entry>Creates a mutex</Entry>
</Row>
<Row>
<Entry><Function>pthread_mutex_lock()&ensp;</Function></Entry>
<Entry>Locks a mutex and waits if the mutex is already locked
</Entry>
</Row>
<Row>
<Entry><Function>pthread_mutex_trylock()&ensp;</Function></Entry>
<Entry>Locks a mutex and returns if the mutex is already locked
</Entry>
</Row>
<Row>
<Entry><Function>pthread_mutex_unlock()&ensp;</Function></Entry>
<Entry>Unlocks a mutex</Entry>
</Row>
<Row>
<Entry><Literal>pthread_unlock_global_np()&ensp;</Literal></Entry>
<Entry>Unlocks a global mutex</Entry>
</Row>
</TBody>
</TGroup>
</InformalTable>
<!--no-op:  b-->
<?sml-space 3>
<?sml-need 2i>
<!-- .TB "Condition Variable Routines"-->
<!--no-op:  l-->
<InformalTable Frame="All" Remap="center" Orient="Port">
<TGroup Rowsep="0" Colsep="0" Cols="2">
<ColSpec Rowsep="1" Colsep="1" Align="Left" Colwidth="1*" Colname="col1" Colnum="1">
<ColSpec Rowsep="1" Align="Left" Colwidth="1*" Colname="col2" Colnum="2">
<TBody>
<Row>
<Entry Rowsep="1" Colsep="0" Align="Center" Namest="col1" Nameend="col2"><Literal>Condition Variable Routines</Literal></Entry>
<Entry Rowsep="1"></Entry>
</Row>
<Row>
<Entry Rowsep="1"><Literal>Routine</Literal></Entry>
<Entry Rowsep="1"><Literal>Description</Literal></Entry>
</Row>
<Row>
<Entry><Function>pthread_cond_broadcast()</Function></Entry>
<Entry>Wakes all threads waiting on a condition variable
</Entry>
</Row>
<Row>
<Entry><Function>pthread_cond_destroy()</Function></Entry>
<Entry>Deletes a condition variable</Entry>
</Row>
<Row>
<Entry><Function>pthread_cond_init()</Function></Entry>
<Entry>Creates a condition variable</Entry>
</Row>
<Row>
<Entry><Function>pthread_cond_signal()</Function></Entry>
<Entry>Wakes one thread waiting on a condition variable
</Entry>
</Row>
<Row>
<Entry><Function>pthread_cond_timedwait()</Function></Entry>
<Entry>Causes a thread to wait for a specified period of time for a
condition variable to be signaled or broadcast
</Entry>
</Row>
<Row>
<Entry><Function>pthread_cond_wait()</Function></Entry>
<Entry>Causes a thread to wait for a condition variable to be signaled or
broadcast
</Entry>
</Row>
<Row>
<Entry><Function>pthread_get_expiration_np()</Function></Entry>
<Entry>Obtains a value representing a desired expiration time
</Entry>
</Row>
</TBody>
</TGroup>
</InformalTable>
<!--no-op:  b-->
<?sml-space 2>
<?sml-need 2i>
<!-- .TB "Thread-Specific Data"-->
<!--no-op:  l-->
<InformalTable Frame="All" Remap="center" Orient="Port">
<TGroup Rowsep="0" Colsep="0" Cols="2">
<ColSpec Rowsep="1" Colsep="1" Align="Left" Colwidth="1*" Colname="col1" Colnum="1">
<ColSpec Rowsep="1" Align="Left" Colwidth="1*" Colname="col2" Colnum="2">
<TBody>
<Row>
<Entry Rowsep="1" Colsep="0" Align="Center" Namest="col1" Nameend="col2"><Literal>Thread-Specific Data</Literal></Entry>
<Entry Rowsep="1"></Entry>
</Row>
<Row>
<Entry Rowsep="1"><Literal>Routine</Literal></Entry>
<Entry Rowsep="1"><Literal>Description</Literal></Entry>
</Row>
<Row>
<Entry><Function>pthread_getspecific()</Function></Entry>
<Entry>Obtains the thread-specific data associated with the specified key
</Entry>
</Row>
<Row>
<Entry><Function>pthread_keycreate()</Function></Entry>
<Entry>Generates a unique thread-specific data key value
</Entry>
</Row>
<Row>
<Entry><Function>pthread_setspecific()</Function></Entry>
<Entry>Sets the thread-specific data associated with
the specified key
</Entry>
</Row>
</TBody>
</TGroup>
</InformalTable>
<!--no-op:  b-->
<?sml-space 2>
<?sml-need 3.0i>
<!-- .TB "Threads Cancellation Routines"-->
<!--no-op:  l-->
<InformalTable Frame="All" Remap="center" Orient="Port">
<TGroup Rowsep="0" Colsep="0" Cols="2">
<ColSpec Rowsep="1" Colsep="1" Align="Left" Colwidth="1*" Colname="col1" Colnum="1">
<ColSpec Rowsep="1" Align="Left" Colwidth="1*" Colname="col2" Colnum="2">
<TBody>
<Row>
<Entry Rowsep="1" Colsep="0" Align="Center" Namest="col1" Nameend="col2"><Literal>Threads Cancellation Routines</Literal></Entry>
<Entry Rowsep="1"></Entry>
</Row>
<Row>
<Entry Rowsep="1"><Literal>Routine</Literal></Entry>
<Entry Rowsep="1"><Literal>Description</Literal></Entry>
</Row>
<Row>
<Entry><Function>pthread_cancel()</Function></Entry>
<Entry>Allows a thread to request termination
</Entry>
</Row>
<Row>
<Entry><Function>pthread_setasynccancel()</Function></Entry>
<Entry>Enables or disables the current thread's asynchronous cancelability
</Entry>
</Row>
<Row>
<Entry><Function>pthread_setcancel()</Function></Entry>
<Entry>Enables or disables the current thread's general cancelability
</Entry>
</Row>
<Row>
<Entry><Function>pthread_signal_to_cancel_np()</Function></Entry>
<Entry>Cancels a thread if a signal is received by the process
</Entry>
</Row>
<Row>
<Entry><Function>pthread_testcancel()</Function></Entry>
<Entry>Requests delivery of a pending cancel
</Entry>
</Row>
</TBody>
</TGroup>
</InformalTable>
<!--no-op:  b-->
<?sml-space 2>
<?sml-need 3.5i>
<!-- .TB "Threads Priority and Scheduling Routines"-->
<!--no-op:  l-->
<InformalTable Frame="All" Remap="center" Orient="Port">
<TGroup Rowsep="0" Colsep="0" Cols="2">
<ColSpec Rowsep="1" Colsep="1" Align="Left" Colwidth="1*" Colname="col1" Colnum="1">
<ColSpec Rowsep="1" Align="Left" Colwidth="1*" Colname="col2" Colnum="2">
<TBody>
<Row>
<Entry Rowsep="1" Colsep="0" Align="Center" Namest="col1" Nameend="col2"><Literal>Threads Priority and Scheduling Routines</Literal></Entry>
<Entry Rowsep="1"></Entry>
</Row>
<Row>
<Entry Rowsep="1"><Literal>Routine</Literal></Entry>
<Entry Rowsep="1"><Literal>Description</Literal></Entry>
</Row>
<Row>
<Entry><Function>pthread_getprio()</Function></Entry>
<Entry>Obtains the current priority of a thread
</Entry>
</Row>
<Row>
<Entry><Function>pthread_getscheduler()</Function></Entry>
<Entry>Obtains the current scheduling policy of a thread
</Entry>
</Row>
<Row>
<Entry><Function>pthread_setprio()</Function></Entry>
<Entry>Changes the current priority of a thread
</Entry>
</Row>
<Row>
<Entry><Function>pthread_setscheduler()</Function></Entry>
<Entry>Changes the current scheduling policy and priority of a thread
</Entry>
</Row>
</TBody>
</TGroup>
</InformalTable>
<!--no-op:  b-->
<?sml-space 2>
<?sml-need 1.5i>
<!-- .TB "Cleanup Routines"-->
<!--no-op:  l-->
<InformalTable Frame="All" Remap="center" Orient="Port">
<TGroup Rowsep="0" Colsep="0" Cols="2">
<ColSpec Rowsep="1" Colsep="1" Align="Left" Colwidth="1*" Colname="col1" Colnum="1">
<ColSpec Rowsep="1" Align="Left" Colwidth="1*" Colname="col2" Colnum="2">
<TBody>
<Row>
<Entry Rowsep="1" Colsep="0" Align="Center" Namest="col1" Nameend="col2"><Literal>Cleanup Routines</Literal></Entry>
<Entry Rowsep="1"></Entry>
</Row>
<Row>
<Entry Rowsep="1"><Literal>Routine</Literal></Entry>
<Entry Rowsep="1"><Literal>Description</Literal></Entry>
</Row>
<Row>
<Entry><Function>pthread_cleanup_pop()&ensp;</Function></Entry>
<Entry>Removes a cleanup handler from the stack</Entry>
</Row>
<Row>
<Entry><Function>pthread_cleanup_push()&ensp;</Function></Entry>
<Entry>Establishes a cleanup handler</Entry>
</Row>
</TBody>
</TGroup>
</InformalTable>
<!--no-op:  b-->
<?sml-space 2>
<?sml-need 1.5i>
<!-- .TB "The atfork(\|) Routine"-->
<InformalTable Frame="All" Remap="center" Orient="Port">
<TGroup Rowsep="0" Colsep="0" Cols="2">
<ColSpec Rowsep="1" Colsep="1" Align="Left" Colwidth="1*" Colname="col1" Colnum="1">
<ColSpec Rowsep="1" Align="Left" Colwidth="1*" Colname="col2" Colnum="2">
<TBody>
<Row>
<Entry Rowsep="1" Colsep="0" Align="Center" Namest="col1" Nameend="col2"><Literal>The atfork() Routine</Literal></Entry>
<Entry Rowsep="1"></Entry>
</Row>
<Row>
<Entry Rowsep="1"><Literal>Routine</Literal></Entry>
<Entry Rowsep="1"><Literal>Description</Literal></Entry>
</Row>
</TBody>
</TGroup>
<TGroup Rowsep="0" Colsep="0" Cols="2">
<ColSpec Colname="col1" Colnum="1">
<ColSpec Colname="col2" Colnum="2">
<TBody>
<Row>
<Entry rowsep="1"><Literal>atfork()&ensp;</Literal></Entry>
<Entry>Arranges for fork cleanup handling</Entry>
</Row>

<Row>
<Entry rowsep="0" colsep="0"></entry>
<Entry rowsep="0" colsep="0"></entry>
</Row>

</TBody>
</TGroup>
</InformalTable>
<?sml-space 2>
<?sml-need 1.5i>
<!-- .TB "Exceptions in DCE Threads"-->
<!-- .TS-->
<!-- center tab (@) box;-->
<!-- cB s-->
<!-- lB | lB.-->
<!-- Exceptions in DCE Threads-->
<!-- _-->
<!-- Routine@Description-->
<!-- _-->
<!-- .T&-->
<!-- lB | l.-->
<!-- exceptions(\|)\ @Describes exception handling in DCE Threads-->
<!-- .TE-->
<!-- -->
<!-- -->
<InformalTable Frame="All" Remap="center" Orient="Port">
<TGroup Rowsep="0" Colsep="0" Cols="2">
<ColSpec Rowsep="1" Colsep="1" Align="Left" Colwidth="1*" Colname="col1" Colnum="1">
<ColSpec Rowsep="1" Align="Left" Colwidth="1*" Colname="col2" Colnum="2">
<TBody>
<Row>
<Entry Rowsep="1" Colsep="0" Align="Center" Namest="col1" Nameend="col2"><Literal>Signal Handling Routines</Literal></Entry>
<Entry Rowsep="1"></Entry>
</Row>
<Row>
<Entry Rowsep="1"><Literal>Routine</Literal></Entry>
<Entry Rowsep="1"><Literal>Description</Literal></Entry>
</Row>
<Row>
<Entry><Function>sigaction()&ensp;</Function></Entry>
<Entry>Specifies action to take on receipt of signal</Entry>
</Row>
<Row>
<Entry><Function>sigpending()&ensp;</Function></Entry>
<Entry>Examines pending signals</Entry>
</Row>
<Row>
<Entry><Function>sigprocmask()&ensp;</Function></Entry>
<Entry>Sets the current signal mask</Entry>
</Row>
<Row>
<Entry><Function>sigwait()&ensp;</Function></Entry>
<Entry>Causes thread to wait for asynchronous signal</Entry>
</Row>
</TBody>
</TGroup>
</InformalTable>
</RefSect1>
<!--+ 11/27/96 19:46:25
    | tagMorph:  $Id: thr_intro.3thr,v 1.1.2.6 1996/12/14 19:05:33 carrig Exp $
    | tagMorph library:  $Id: thr_intro.3thr,v 1.1.2.6 1996/12/14 19:05:33 carrig Exp $
    | sml-to-docbook:  1.25
    +-->
</RefEntry>
