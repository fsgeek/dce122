<!--
# COPYRIGHT NOTICE
# Copyright (c) 1990-1996 Open Software Foundation, Inc. 
# ALL RIGHTS RESERVED (DCE). See the file named COPYRIGHT.DCE in the 
# src directory for the full copyright text. 
# 
# 
# HISTORY
# $Log: sigaction.3thr,v $
# Revision 1.1.2.9  1996/12/17  21:07:25  damon
# 	Expanded OSF C O P Y R I G H T   N O T I C E
# 	[1996/12/17  21:04:52  damon]
#
# Revision 1.1.2.8  1996/12/15  17:33:16  carrig
# 	{enh,R1.2.2}
# 	Synopsis
# 	[1996/12/15  17:32:50  carrig]
# 
# Revision 1.1.2.7  1996/12/15  17:26:16  carrig
# 	{enh,R1.2.2}
# 	Fixed parsing
# 	[1996/12/15  17:25:06  carrig]
# 
# Revision 1.1.2.6  1996/12/14  19:05:29  carrig
# 	{enh,R1.2.2}
# 	Synopses font
# 	[1996/12/14  19:02:42  carrig]
# 
# Revision 1.1.2.5  1996/12/13  21:14:36  carrig
# 	{enh,R1.2.2}
# 	Synopses
# 	[1996/12/13  21:12:59  carrig]
# 
# Revision 1.1.2.4  1996/12/06  18:59:54  wardr
# 	{edit,R1.2.2}
# 	Fixed initial conversion problems
# 	[1996/12/06  18:51:02  wardr]
# 
# Revision 1.1.2.3  1996/12/05  17:58:22  wardr
# 	{edit,R1.2.2}
# 	Fixed initial conversion problems
# 	[1996/12/05  17:50:44  wardr]
# 
# Revision 1.1.2.2  1996/12/01  20:29:55  weir
# 	Removed thinsp entities
# 	[1996/12/01  20:28:35  weir]
# 
# Revision 1.1.2.1  1996/11/29  18:29:47  weir
# 	Initial submission
# 	[1996/11/29  18:26:12  weir]
# 
# $EndLog$
# 
-->
<!-- Fragment document type declaration subset:
ArborText, Inc., 1988-1993, v.4001
<!DOCTYPE Book PUBLIC "-//Davenport//DTD DocBook V2.4//EN" [
]>
-->
<RefEntry Id="DCEADR.MAN195.rsml.1">
<RefMeta>
<RefEntryTitle>sigaction</RefEntryTitle>
<ManVolNum>3thr</ManVolNum>
</RefMeta>
<RefNameDiv>
<RefName><Literal>sigaction</Literal></RefName>
<RefPurpose>Examines and changes synchronous signal actions (POSIX software signal facilities)</RefPurpose>
</RefNameDiv>
<!-- -->
<!-- -->
<!-- OLD HISTORY-->
<!-- Revision 1.1.4.1  1996/11/19  20:26:09  wardr-->
<!-- 	{edit,R1.2.2}-->
<!-- 	Init capped heads-->
<!-- 	[1996/11/19  20:24:22  wardr]-->
<!---->
<!-- Revision 1.1.2.3  1995/06/21  13:23:14  buckler-->
<!-- 	More 1.1 edits.-->
<!-- 	[1995/06/20  18:09:08  buckler]-->
<!-- -->
<!-- Revision 1.1.2.2  1995/06/09  16:22:40  buckler-->
<!-- 	1.1 edits and Prentice Hall reformat-->
<!-- 	[1995/06/09  16:18:09  buckler]-->
<!-- -->
<!-- Revision 1.1.2.1  1994/09/30  21:28:48  weir-->
<!-- 	New reference pages-->
<!-- 	[1994/09/30  21:28:21  weir]-->
<!-- -->
<!-- -->
<!-- -->
<!-- -->
<!--*********************************************************************-->
<!---->
<!-- The information in this document is subject to change without-->
<!-- notice and should not be construed as a commitment by Open	-->
<!-- Software Foundation.-->
<!---->
<!-- ********************************************************************-->
<!-- .iX "\*Lsigaction(\|)\*O"-->
<IndexTerm Id="DCEADR.MAN195.indx.1">
<Primary>signal</Primary>
<Secondary>examine and change synchronous</Secondary>
</IndexTerm>
<RefSect1 Remap="not-ANSI">
<Title>Synopsis</Title>
<Para>
<ProgramListing>
<?Pub _font TypeSize="10pt">
<Literal>#include &lt;signal.h></Literal>

<Literal>struct sigaction {</Literal>
        <Literal>void</Literal> <Replaceable>(*sa_handler)</Replaceable><Literal>;</Literal>
        <Literal>sigset_t</Literal> <Replaceable>sa_mask</Replaceable><Literal>;</Literal>
        <Literal>int</Literal> <Replaceable>sa_flags</Replaceable><Literal>;</Literal>
<Literal>};</Literal>

<Literal>int sigaction</Literal><Replaceable>&lpar;sig, act, oact&rpar;</Replaceable>
<Literal>int</Literal> <Replaceable>sig</Replaceable><Literal>;</Literal>
<Literal>const struct sigaction</Literal> <Replaceable>*act</Replaceable><Literal>;</Literal>
<Literal>struct sigaction</Literal> <Replaceable>*oact</Replaceable><Literal>;</Literal>
<?Pub /_font><?Pub Caret>
</ProgramListing>
</Para>

</RefSect1>
<RefSect1>
<Title>Parameters</Title>
<VariableList>
<VarListEntry>
<Term><Symbol Role="Variable">sig</Symbol></Term>
<ListItem>
<Para>Synchronous signal to examine or change.
</Para>
</ListItem>
</VarListEntry>
<VarListEntry>
<Term><Symbol Role="Variable">act</Symbol></Term>
<ListItem>
<Para>Points to a <Literal>sigaction</Literal> structure that describes the action to be taken upon
receipt of the signal indicated by the value of the <Symbol Role="Variable">act</Symbol> parameter.
</Para>
</ListItem>
</VarListEntry>
<VarListEntry>
<Term><Symbol Role="Variable">oact</Symbol></Term>
<ListItem>
<Para>Points to a <Literal>sigaction</Literal> structure in which the signal action data in effect at 
the time of the <Function>sigaction()</Function> function call is returned.
</Para>
</ListItem>
</VarListEntry>
</VariableList>
<?sml-break>
<?sml-need 1.5i>
</RefSect1>
<RefSect1>
<Title>Description</Title>
<Para>The <Literal>sigaction</Literal> POSIX service allows for per-thread handlers to be installed for 
catching synchronous signals.
It is called in a multithreaded process to establish thread specific actions
for such signals.
This call is the POSIX equivalent of the <Function>sigaction()</Function> system call with the 
following exceptions or modifications:
<!--no-op:  l-->
</Para>
<ItemizedList>
<ListItem>
<Para>The <Function>sigaction()</Function> routine only modifies behavior for individual threads.
</Para>
</ListItem>
<ListItem>
<Para>The <Function>sigaction()</Function> routine only works for synchronous signals.  Attempting to set a signal
action for an asynchronous signal is an error.
This is true even in a single-threaded process.
</Para>
<Para><?sml-need 8>Any multithreaded application using DCE Threads will need to use the <Function>sigwait()</Function> function
for dealing with asynchronous signals.
The <Function>sigwait()</Function> function can be used to synchronously wait for delivery of
asynchronously generated signals.
<!--.LI-->
<!--A process can suppress the generation of the \*LSIGCHLD\*O signal when a child stops by-->
<!--setting the \*LSA_NOCLDSTOP\*O bit in \*Vsa_flags\*O.-->
</Para>
</ListItem>
<ListItem>
<Para>The <Literal>SA_RESTART</Literal> flag is always set by the underlying system
in POSIX mode so that interrupted system calls will
fail with return value of &minus;1 and the <Literal>EINTR</Literal> error in <Symbol Role="Variable">errno</Symbol> instead of
getting restarted.
</Para>
<Para>The system's <Literal>SA_RESTART</Literal> flag has the opposite meaning of the 
<Literal>SA_RESTART</Literal> flag in the <Symbol Role="Variable">sa_flags</Symbol> field and is always set 
in the underlying system call
resulting from <Function>sigaction()</Function> regardless of whether 
<Literal>SA_RESTART</Literal> was indicated in <Symbol Role="Variable">sa_flags</Symbol>.
</Para>
</ListItem>
<ListItem>
<Para>The signal mask is manipulated using the POSIX &sect; 3.3.3
<Function>sigsetops()</Function> functions.
They are
<Function>sigemptyset()</Function>,
<Function>sigfillset()</Function>,
<Function>sigaddset()</Function>,
<Function>sigdelset()</Function>,
and <Function>sigismember()</Function>.
</Para>
</ListItem>
</ItemizedList>
<!--no-op:  b-->
<Para>The <Function>sigaction()</Function> function can be used to inquire about the current
handling of a given signal by specifying a null pointer for <Symbol Role="Variable">act</Symbol>, since
the action is unchanged unless this parameter is not a null pointer.
In order for the signal action in effect at the time of the <Function>sigaction()</Function>
call to be returned, the <Symbol Role="Variable">oact</Symbol> parameter must not be a null pointer.
<?sml-break><?sml-need 1.5i></Para>
</RefSect1>
<RefSect1>
<Title>Return Values</Title>
<Para>Possible return values are as follows:
</Para>
<InformalTable Remap="center" Orient="Port">
<TGroup Rowsep="0" Colsep="0" Cols="3">
<ColSpec Colsep="1" Char="." Align="Char" Colwidth="124*" Colname="col1" Colnum="1">
<ColSpec Colsep="1" Align="Left" Colwidth="124*" Colname="col2" Colnum="2">
<ColSpec Align="Left" Colwidth="207*" Colname="col3" Colnum="3">
<TBody>
<Row>
<Entry Rowsep="1" Align="Left"><Literal>Return</Literal></Entry>
<Entry Rowsep="1"><Literal>Error</Literal></Entry>
<Entry Rowsep="1"><Literal>Description</Literal></Entry>
</Row>
<Row>
<Entry>0</Entry>
<Entry></Entry>
<Entry>Successful completion.</Entry>
</Row>
<Row>
<Entry>&minus;1</Entry>
<Entry>[<Literal>EFAULT</Literal>]</Entry>
<Entry>Either <Symbol Role="Variable">act</Symbol> or <Symbol Role="Variable">oact</Symbol> points to memory which is not a valid part 
of the process address space.
</Entry>
</Row>
<Row>
<Entry></Entry>
<Entry></Entry>
<Entry>A new signal handler is not installed.</Entry>
</Row>
<Row>
<Entry>&minus;1</Entry>
<Entry>[<Literal>EINVAL</Literal>]</Entry>
<Entry>The value specified by <Symbol Role="Variable">sig</Symbol> is invalid.
A new signal handler is not installed.
</Entry>
</Row>
<Row>
<Entry>&minus;1</Entry>
<Entry>[<Literal>EINVAL</Literal>]</Entry>
<Entry>An attempt is made to ignore or supply a handler for 
<Literal>SIGKILL</Literal> or <Literal>SIGSTOP</Literal>.
A new signal handler is not installed.
</Entry>
</Row>
</TBody>
</TGroup>
</InformalTable>
<?sml-break>
<?sml-need 1.2i>
</RefSect1>
<RefSect1>
<Title>Related Information</Title>
<Para><!--no-op:  l-->
Functions:
<Filename MoreInfo="RefEntry">setjmp(3)</Filename>,
<Filename MoreInfo="RefEntry">siginterrupt(3)</Filename>,
<Filename MoreInfo="RefEntry">sigpending(3thr)</Filename>,
<Filename MoreInfo="RefEntry">sigprocmask(3thr)</Filename>,
<Filename MoreInfo="RefEntry">sigsetops(3)</Filename>,
<Filename MoreInfo="RefEntry">sigsuspend(3)</Filename>,
<Literal>sigvec(2)</Literal>,
<Literal>tty(4)</Literal>.
<!--no-op:  b-->
</Para>
</RefSect1>
<!--+ 11/27/96 19:46:25
    | tagMorph:  $Id: sigaction.3thr,v 1.1.2.9 1996/12/17 21:07:25 damon Exp $
    | tagMorph library:  $Id: sigaction.3thr,v 1.1.2.9 1996/12/17 21:07:25 damon Exp $
    | sml-to-docbook:  1.25
    +-->
</RefEntry>
