<!--
# COPYRIGHT NOTICE
# Copyright (c) 1990-1996 Open Software Foundation, Inc. 
# ALL RIGHTS RESERVED (DCE). See the file named COPYRIGHT.DCE in the 
# src directory for the full copyright text. 
# 
# 
# HISTORY
# $Log: sigprocmask.3thr,v $
# Revision 1.1.2.7  1996/12/17  21:07:28  damon
# 	Expanded OSF C O P Y R I G H T   N O T I C E
# 	[1996/12/17  21:04:54  damon]
#
# Revision 1.1.2.6  1996/12/14  19:05:31  carrig
# 	{enh,R1.2.2}
# 	Synopses font
# 	[1996/12/14  19:02:45  carrig]
# 
# Revision 1.1.2.5  1996/12/13  21:14:38  carrig
# 	{enh,R1.2.2}
# 	Synopses
# 	[1996/12/13  21:13:02  carrig]
# 
# Revision 1.1.2.4  1996/12/06  18:59:56  wardr
# 	{edit,R1.2.2}
# 	Fixed initial conversion problems
# 	[1996/12/06  18:51:04  wardr]
# 
# Revision 1.1.2.3  1996/12/05  17:58:24  wardr
# 	{edit,R1.2.2}
# 	Fixed initial conversion problems
# 	[1996/12/05  17:50:46  wardr]
# 
# Revision 1.1.2.2  1996/12/01  20:29:57  weir
# 	Removed thinsp entities
# 	[1996/12/01  20:28:37  weir]
# 
# Revision 1.1.2.1  1996/11/29  18:29:51  weir
# 	Initial submission
# 	[1996/11/29  18:26:13  weir]
# 
# $EndLog$
# 
-->
<!-- Fragment document type declaration subset:
ArborText, Inc., 1988-1993, v.4001
<!DOCTYPE Book PUBLIC "-//Davenport//DTD DocBook V2.4//EN" [
]>
-->
<RefEntry Id="DCEADR.MAN197.rsml.1">
<RefMeta>
<RefEntryTitle>sigprocmask</RefEntryTitle>
<ManVolNum>3thr</ManVolNum>
</RefMeta>
<RefNameDiv>
<RefName><Literal>sigprocmask</Literal></RefName>
<RefPurpose>Examines and changes blocked signals (POSIX software signal facilities)</RefPurpose>
</RefNameDiv>
<!-- -->
<!-- -->
<!-- OLD HISTORY-->
<!-- Revision 1.1.4.1  1996/11/19  20:26:12  wardr-->
<!-- 	{edit,R1.2.2}-->
<!-- 	Init capped heads-->
<!-- 	[1996/11/19  20:24:24  wardr]-->
<!---->
<!-- Revision 1.1.2.2  1995/06/09  16:22:41  buckler-->
<!-- 	1.1 edits and Prentice Hall reformat-->
<!-- 	[1995/06/09  16:18:11  buckler]-->
<!-- -->
<!-- Revision 1.1.2.1  1994/09/30  21:28:52  weir-->
<!-- 	New reference pages-->
<!-- 	[1994/09/30  21:28:23  weir]-->
<!-- -->
<!-- -->
<!-- -->
<!-- -->
<!--*********************************************************************-->
<!---->
<!-- The information in this document is subject to change without-->
<!-- notice and should not be construed as a commitment by Open	-->
<!-- Software Foundation.-->
<!---->
<!-- ********************************************************************-->
<!-- .iX "\*Lsigprocmask(\|)\*O"-->
<IndexTerm Id="DCEADR.MAN197.indx.1">
<Primary>signal</Primary>
<Secondary>examine and change blocked</Secondary>
</IndexTerm>
<RefSect1 Remap="ANSI">
<Title>Synopsis</Title>
<Para>
<ProgramListing>
<?Pub _font TypeSize="10pt">
<Literal>#include &lt;signal.h></Literal>

<Literal>int sigprocmask&lpar;int</Literal> <Replaceable>how</Replaceable> <Literal>const sigset_t</Literal> <Replaceable>*set</Replaceable> <Literal>sigset_t</Literal> <Replaceable>*oset</Replaceable><Literal>&rpar;;</Literal>
<?Pub /_font><?Pub Caret>
</ProgramListing>
</Para>

</RefSect1>
<RefSect1>
<Title>Parameters</Title>
<VariableList>
<VarListEntry>
<Term><Symbol Role="Variable">how</Symbol></Term>
<ListItem>
<Para>The manner in which the values in <Symbol Role="Variable">set</Symbol> are changed as defined 
by one of the described argument values.
</Para>
</ListItem>
</VarListEntry>
<VarListEntry>
<Term><Symbol Role="Variable">set</Symbol></Term>
<ListItem>
<Para>A set of signals that will be used to change the current thread's signal mask
according to the value in
the <Symbol Role="Variable">how</Symbol> parameter.
</Para>
</ListItem>
</VarListEntry>
<VarListEntry>
<Term><Symbol Role="Variable">oset</Symbol></Term>
<ListItem>
<Para>Points to a location in which the signal mask in effect at 
the time of the <Function>sigprocmask()</Function> function call is returned.
</Para>
</ListItem>
</VarListEntry>
</VariableList>
<?sml-break>
<?sml-need 1.5i>
</RefSect1>
<RefSect1>
<Title>Description</Title>
<Para>The <Function>sigprocmask()</Function> function is used to examine or change (or both)
the signal mask of the calling process.
If the value of the argument <Symbol Role="Variable">set</Symbol> is not NULL, it points to a set
of signals to be used to change the currently blocked set 
according to the <Symbol Role="Variable">how</Symbol> parameter as follows:
</Para>
<VariableList>
<VarListEntry role="linebreak">
<Term><Literal>SIG_BLOCK</Literal></Term>
<ListItem>
<Para>The resulting signal set is the union of the current set and the
signal set pointed to by the argument <Symbol Role="Variable">set</Symbol>.
</Para>
</ListItem>
</VarListEntry>
<VarListEntry role="linebreak">
<Term><Literal>SIG_UNBLOCK</Literal></Term>
<ListItem>
<Para>The resulting signal set is the intersection of the current set and the
and the complement of the signal set pointed to by the argument <Symbol Role="Variable">set</Symbol>.
</Para>
</ListItem>
</VarListEntry>
<VarListEntry role="linebreak">
<Term><Literal>SIG_SETMASK</Literal></Term>
<ListItem>
<Para>The resulting signal set is the
signal set pointed to by the argument <Symbol Role="Variable">set</Symbol>.
</Para>
</ListItem>
</VarListEntry>
</VariableList>
<Para>If the argument <Symbol Role="Variable">oset</Symbol> is not NULL, the previous mask is stored in the
space pointed to by <Symbol Role="Variable">oset</Symbol>.
</Para>
<Para><?sml-need 10>The <Function>sigprocmask()</Function> function can be used to inquire about the currently
blocked signals
by specifying a null pointer for <Symbol Role="Variable">set</Symbol>, since the value
of the argument <Symbol Role="Variable">how</Symbol> is not significant and
the signal mask of the process is unchanged unless this parameter is not a null
pointer.
In order for the signal mask in effect at the time of the <Function>sigprocmask()</Function>
call to be returned, the <Symbol Role="Variable">oset</Symbol> argument must not be a null pointer.
</Para>
<Para>If there are any pending unblocked signals after  the call to the
<Function>sigprocmask()</Function> function, at least one of those signals shall be
delivered before the <Function>sigprocmask()</Function> function returns.
As a system restriction, the SIGKILL and SIGSTOP signals cannot be blocked.
</Para>
<Para>If the <Function>sigprocmask()</Function> function fails, the signal mask of the process
is not changed by this function call.
<?sml-break><?sml-need 1.5i></Para>
</RefSect1>
<RefSect1>
<Title>Return Values</Title>
<Para>Possible return values are as follows:
</Para>
<InformalTable Remap="center" Orient="Port">
<TGroup Rowsep="0" Colsep="0" Cols="3">
<ColSpec Colsep="1" Char="." Align="Char" Colwidth="103*" Colname="col1" Colnum="1">
<ColSpec Colsep="1" Align="Left" Colwidth="103*" Colname="col2" Colnum="2">
<ColSpec Align="Left" Colwidth="248*" Colname="col3" Colnum="3">
<TBody>
<Row>
<Entry Rowsep="1" Align="Left"><Literal>Return</Literal></Entry>
<Entry Rowsep="1"><Literal>Error</Literal></Entry>
<Entry Rowsep="1"><Literal>Description</Literal></Entry>
</Row>
<Row>
<Entry>0</Entry>
<Entry></Entry>
<Entry>Successful completion.</Entry>
</Row>
<Row>
<Entry>&minus;1</Entry>
<Entry>[<Literal>EINVAL</Literal>]</Entry>
<Entry>The value specified by the <Symbol Role="Variable">how</Symbol> parameter is </Entry>
</Row>
<Row>
<Entry></Entry>
<Entry></Entry>
<Entry>not equal to one of the defined values.</Entry>
</Row>
<Row>
<Entry></Entry>
<Entry></Entry>
<Entry>The signal mask of the process remains unchanged.</Entry>
</Row>
</TBody>
</TGroup>
</InformalTable>
<?sml-break>
<?sml-need 1.2i>
</RefSect1>
<RefSect1>
<Title>Related Information</Title>
<Para><!--no-op:  l-->
Functions:
<Filename MoreInfo="RefEntry">sigaction(3thr)</Filename>,
<Filename MoreInfo="RefEntry">sigpending(3thr)</Filename>,
<Filename MoreInfo="RefEntry">sigsetops(3)</Filename>,
<Filename MoreInfo="RefEntry">sigsuspend(3)</Filename>.
<!--no-op:  b-->
</Para>
</RefSect1>
<!--+ 11/27/96 19:46:25
    | tagMorph:  $Id: sigprocmask.3thr,v 1.1.2.7 1996/12/17 21:07:28 damon Exp $
    | tagMorph library:  $Id: sigprocmask.3thr,v 1.1.2.7 1996/12/17 21:07:28 damon Exp $
    | sml-to-docbook:  1.25
    +-->
</RefEntry>
