<!--
# COPYRIGHT NOTICE
# Copyright (c) 1990-1996 Open Software Foundation, Inc. 
# ALL RIGHTS RESERVED (DCE). See the file named COPYRIGHT.DCE in the 
# src directory for the full copyright text. 
# 
# 
# HISTORY
# $Log: DATA_TYPES.3thr,v $
# Revision 1.1.2.7  1996/12/17  21:07:23  damon
# 	Expanded OSF C O P Y R I G H T   N O T I C E
# 	[1996/12/17  21:04:50  damon]
#
# Revision 1.1.2.6  1996/12/14  19:04:03  carrig
# 	{enh,R1.2.2}
# 	Synopses font
# 	[1996/12/14  19:01:25  carrig]
# 
# Revision 1.1.2.5  1996/12/13  21:13:28  carrig
# 	{enh,R1.2.2}
# 	Synopses
# 	[1996/12/13  21:11:41  carrig]
# 
# Revision 1.1.2.4  1996/12/06  18:58:48  wardr
# 	{edit,R1.2.2}
# 	Fixed initial conversion problems
# 	[1996/12/06  18:50:01  wardr]
# 
# Revision 1.1.2.3  1996/12/05  17:57:16  wardr
# 	{edit,R1.2.2}
# 	Fixed initial conversion problems
# 	[1996/12/05  17:49:43  wardr]
# 
# Revision 1.1.2.2  1996/12/01  20:29:01  weir
# 	Removed thinsp entities
# 	[1996/12/01  20:27:42  weir]
# 
# Revision 1.1.2.1  1996/11/29  18:27:55  weir
# 	Initial submission
# 	[1996/11/29  18:25:25  weir]
# 
# $EndLog$
# 
-->
<!-- Fragment document type declaration subset:
ArborText, Inc., 1988-1993, v.4001
<!DOCTYPE Book PUBLIC "-//Davenport//DTD DocBook V2.4//EN" [
]>
-->
<RefEntry Id="DCEADR.MAN139.rsml.1">
<RefMeta>
<RefEntryTitle>datatypes</RefEntryTitle>
<ManVolNum>3thr</ManVolNum>
</RefMeta>
<RefNameDiv>
<RefName><Function>datatypes</Function></RefName>
<RefPurpose>Data types used by DCE Threads</RefPurpose>
</RefNameDiv>
<!-- -->
<!-- -->
<!-- OLD HISTORY-->
<!-- Revision 1.1.4.1  1996/11/19  20:24:59  wardr-->
<!-- 	{edit,R1.2.2}-->
<!-- 	Init capped heads-->
<!-- 	[1996/11/19  20:23:29  wardr]-->
<!---->
<!-- Revision 1.1.2.4  1995/06/21  13:23:10  buckler-->
<!-- 	More 1.1 edits.-->
<!-- 	[1995/06/20  17:18:09  buckler]-->
<!-- -->
<!-- 	More 1.1 edits.-->
<!-- 	[1995/06/19  17:35:51  buckler]-->
<!-- -->
<!-- Revision 1.1.2.3  1995/06/09  16:21:46  buckler-->
<!-- 	1.1 edits and Prentice Hall reformat-->
<!-- 	[1995/06/09  16:17:04  buckler]-->
<!-- -->
<!-- Revision 1.1.2.2  1994/10/31  21:02:06  buckler-->
<!-- 	{def, 12738, R1.1}-->
<!-- 	Removed .nr H1 3 line that was causing a problem with-->
<!-- 	chapter numbering.-->
<!-- 	[1994/10/31  21:01:47  buckler]-->
<!-- -->
<!-- Revision 1.1.2.1  1994/09/30  21:35:42  weir-->
<!-- 	New reference page-->
<!-- 	[1994/09/30  21:35:18  weir]-->
<!-- -->
<!-- -->
<!-- -->
<!-- -->
<!-- -->
<!-- [23.VII.93]-->
<!-- -->
<!-- -->
<!-- -->
<!-- -->
<!-- - -->
<!--.H 1 "DCE Threads Data Types"-->
<!-- - -->
<!-- -->
<RefSect1>
<Title>Description</Title>
<Para>The DCE Threads data types can be divided into two broad categories: primitive
system and application level.
<!-- -->
<!-- - -->
<!--.H 2 "Primitive System Data Types"-->
<!-- - -->
<!-- -->
</Para>
<RefSect2>
<Title>Primitive System Data Types</Title>
<Para>The first category
consists of types that represent structures used by (and internal to) DCE
Threads.  These types are defined as being primitive system data types.
<!-- -->
<!-- -->
<!--no-op:  l-->
</Para>
<ItemizedList>
<ListItem>
<Para><StructName Role="typedef">pthread_attr_t</StructName>
</Para>
</ListItem>
<ListItem>
<Para><StructName Role="typedef">pthread_cond_t</StructName>
</Para>
</ListItem>
<ListItem>
<Para><StructName Role="typedef">pthread_condattr_t</StructName>
</Para>
</ListItem>
<ListItem>
<Para><StructName Role="typedef">pthread_key_t</StructName>
</Para>
</ListItem>
<ListItem>
<Para><StructName Role="typedef">pthread_mutex_t</StructName>
</Para>
</ListItem>
<ListItem>
<Para><StructName Role="typedef">pthread_mutexattr_t</StructName>
</Para>
</ListItem>
<ListItem>
<Para><StructName Role="typedef">pthread_once_t</StructName>
</Para>
</ListItem>
<ListItem>
<Para><StructName Role="typedef">pthread_t</StructName>
</Para>
</ListItem>
</ItemizedList>
<!--no-op:  b-->
<!-- -->
<!-- -->
<Para>Although applications must know about these types, passing them in and
receiving them from various DCE Threads routines, the structures themselves
are opaque: they cannot be directly modified by applications, and they can
be manipulated only (and only in some cases) through specific DCE Threads
routines. (The <StructName Role="typedef">pthread_key_t</StructName> type is somewhat different from the
others in this list, in that it is essentially a handle to a thread-private
block of memory requested by a call to <Function>pthread_keycreate()</Function>.)
<!-- -->
<!-- -->
<!-- -->
<!-- - -->
<!--.H 2 "Application Level Data Types"-->
<!-- - -->
<!-- -->
</Para>
</RefSect2>
<RefSect2>
<Title>Application Level Data Types</Title>
<Para>The second category of DCE Threads data consists of types used to describe
objects that originate in the application:
<!-- -->
<!-- -->
<!--no-op:  l-->
</Para>
<ItemizedList>
<ListItem>
<Para><StructName Role="typedef">pthread_addr_t</StructName>
</Para>
</ListItem>
<ListItem>
<Para><StructName Role="typedef">pthread_destructor_t</StructName>
</Para>
</ListItem>
<ListItem>
<Para><StructName Role="typedef">pthread_initroutine_t</StructName>
</Para>
</ListItem>
<ListItem>
<Para><StructName Role="typedef">pthread_startroutine_t</StructName>
</Para>
</ListItem>
<ListItem>
<Para><StructName Role="typedef">sigset_t</StructName> 
</Para>
</ListItem>
</ItemizedList>
<!--no-op:  b-->
<!-- -->
<!-- -->
<Para>All of the above types, with the exception of the last, are various kinds
of memory addresses that must be passed by callers of certain DCE Threads
routines.  These types are extensions to POSIX. They permit DCE Threads to be used
on platforms that are not fully ANSI C compliant.  While being extensions to
permit the use of compilers that are not ANSI C compatible, they are
fully portable data types.
</Para>
<Para>The last data type, <StructName Role="typedef">sigset_t</StructName>, exhibits properties of both
primitive system and application level data types.  While objects of this
type originate 
in the application, the data type is opaque.
A set of functions is provided to manipulate objects of this type.
</Para>
<Para>For further information, see the following descriptions, listed in
sorted order.
<!-- -->
<!--   -->
<!-- There is some question about sigset_t; this seems to be some- -->
<!--   thing that the application must fiddle with, but I don't see-->
<!--   any description of it anywhere.-->
<!-- -->
<!-- -->
<!-- - -->
<!--.H 2 "Data Type Descriptions"-->
<!-- - -->
<!-- -->
</Para>
</RefSect2>
</RefSect1>
<RefSect1>
<Title>Data Type Descriptions</Title>
<Para>Following are individual descriptions of each of the DCE Threads data types.
The descriptions include the routines where the data type is modified, such as,
created, changed or deleted/destroyed, but not the routines referencing
or using them that do not change them.
<!-- -->
<!-- -->
<!-- -->
<!--no-op:  l-->
</Para>
<ItemizedList>
<ListItem>
<Para><StructName Role="typedef">pthread_addr_t</StructName>
<!--no-op:  b-->
</Para>
<Para>A miscellaneous data type representing an address value that must be passed
by the caller of various threads routines.  Usually the <StructName Role="typedef">pthread_addr_t</StructName>
value is the address of an area which contains various parameters to be
made accessible to an implicitly called routine.  For example, when the
<Function>pthread_create()</Function> routine is called, one of the parameters passed
is a <StructName Role="typedef">pthread_addr_t</StructName> value that contains an address which will be
passed to the <Symbol Role="Variable">start_routine</Symbol> which the thread is being created to
execute; presumably the routine will extract necessary parameters from
the area referenced by this address.
<!-- -->
<!-- -->
<!-- -->
<!-- -->
<!--no-op:  l-->
</Para>
</ListItem>
<ListItem>
<Para><StructName Role="typedef">pthread_attr_t</StructName>
<!--no-op:  b-->
</Para>
<Para>Threads attribute object, used to specify the attributes of a thread
when it is created by a call to <Function>pthread_create()</Function>.
The object is created by a call to <Function>pthread_attr_create()</Function>,
then modified as desired by calls to
<!--no-op:  l-->
</Para>
<ItemizedList>
<ListItem>
<Para><Function>pthread_attr_setinheritsched()</Function>
</Para>
</ListItem>
<ListItem>
<Para><Function>pthread_attr_setprio()</Function>
</Para>
</ListItem>
<ListItem>
<Para><Function>pthread_attr_setsched()</Function>
</Para>
</ListItem>
<ListItem>
<Para><Function>pthread_attr_setstacksize()</Function>
</Para>
</ListItem>
</ItemizedList>
<!--no-op:  b-->
<Para>(Note that there are <Literal>_get</Literal> versions of these four calls, which can
be used to retrieve the respective values.)
<!-- -->
<!-- -->
<!-- -->
<!-- -->
<!-- -->
<!--no-op:  l-->
</Para>
</ListItem>
<ListItem>
<Para><StructName Role="typedef">pthread_cond_t</StructName>
<!--no-op:  b-->
</Para>
<Para>Data type representing a threads condition variable.  The variable is created 
by a call to <Function>pthread_cond_init()</Function>, and destroyed by a call to
<Function>pthread_cond_destroy()</Function>.
<!-- -->
<!-- -->
<!-- -->
<!-- -->
<!--no-op:  l-->
</Para>
</ListItem>
<ListItem>
<Para><StructName Role="typedef">pthread_condattr_t</StructName>
<!--no-op:  b-->
</Para>
<Para>Data type representing a threads condition variable attributes object.
Created by a call to <Function>pthread_condattr_create()</Function>.  The range of
possible modifications to a condition variable attributes object is
not great: creation (via <Function>pthread_condattr_create()</Function>) and
deletion (via <Function>pthread_condattr_delete()</Function>) are all.  The object
is created with default values.
<!-- -->
<!-- -->
<!-- -->
<!-- -->
<!--no-op:  l-->
</Para>
</ListItem>
<ListItem>
<Para><StructName Role="typedef">pthread_destructor_t</StructName>
<!--no-op:  b-->
</Para>
<Para>Data type, passed in a call to <Function>pthread_keycreate()</Function>,
representing the address of a procedure to be called to destroy
a data value associated with a unique thread-specific data key value
when the thread terminates.
<!-- -->
<!-- -->
<!-- -->
<!-- -->
<!-- -->
<!-- -->
<!--no-op:  l-->
</Para>
</ListItem>
<ListItem>
<Para><StructName Role="typedef">pthread_initroutine_t</StructName>
<!--no-op:  b-->
</Para>
<Para>Data type representing the address of a procedure that performs a
one-time initialization for a thread.  It is passed in a call to <Function>pthread_once()</Function>.
The <Function>pthread_once()</Function> routine, when called, executes the initialization
routine.  The specified routine is <Replaceable>guaranteed to
be executed only once</Replaceable>, even though the <Function>pthread_once()</Function> call
occurs in multithreaded code.
<!-- -->
<!-- -->
<!-- -->
<!-- -->
<!--no-op:  l-->
</Para>
</ListItem>
<ListItem>
<Para><StructName Role="typedef">pthread_key_t</StructName>
<!--no-op:  b-->
</Para>
<Para>Data type representing a thread-specific data key, created by a call to
<Function>pthread_keycreate()</Function>.  The key is an address of memory.  Associating
a static block of memory with a specific thread in this way is an alternative
to using stack memory for the thread.
The key is destroyed by the application-supplied procedure specified by the 
routine specified using the
<StructName Role="typedef">pthread_destructor_t</StructName> data type in the call to <Function>pthread_keycreate()</Function>.
<!-- -->
<!-- -->
<!-- -->
<!-- -->
<!-- -->
<?sml-break><?sml-need 8>
<!--no-op:  l-->
</Para>
</ListItem>
<ListItem>
<Para><StructName Role="typedef">pthread_mutex_t</StructName>
<!--no-op:  b-->
</Para>
<Para>Data type representing a mutex object.  It is created by a call to
<Function>pthread_mutex_init()</Function> and destroyed by a call to
<Function>pthread_mutex_destroy()</Function>.
Care should be taken not to attempt to destroy a locked object.
<!-- -->
<!-- -->
<!-- -->
<!-- -->
<!-- -->
<!--no-op:  l-->
</Para>
</ListItem>
<ListItem>
<Para><StructName Role="typedef">pthread_mutexattr_t</StructName>
<!--no-op:  b-->
</Para>
<Para>Data type representing an attributes object which defines the
characteristics of a mutex.  Created by a call to
<Function>pthread_mutexattr_create()</Function>; modified by calls to
<Function>pthread_mutexattr_setkind_np()</Function> (which allows you to specify
fast, recursive, or nonrecursive mutexes); passed to
<Function>pthread_mutex_init()</Function> to create the mutex with the
specified atttributes.  The only other modification allowed
is to destroy the mutex attributes object, with
<Function>pthread_mutexattr_delete()</Function>.
<!-- -->
<!-- -->
<!-- -->
<!-- -->
<!-- -->
<!--no-op:  l-->
</Para>
</ListItem>
<ListItem>
<Para><StructName Role="typedef">pthread_once_t</StructName>
<!--no-op:  b-->
</Para>
<Para>A data structure that defines the characteristics of the one-time
initialization routine executed by calling <Function>pthread_once()</Function>.  The
structure is opaque to the application, and cannot be modified by it,
but it must be explicitly declared by the client code, and initialized
by a call to <Function>pthread_once_init()</Function>.
The <StructName Role="typedef">pthread_once_t</StructName> type must not be an array.
<!-- -->
<!-- -->
<!-- -->
<!-- -->
<!-- -->
<!--no-op:  l-->
</Para>
</ListItem>
<ListItem>
<Para><StructName Role="typedef">pthread_startroutine_t</StructName>
<!--no-op:  b-->
</Para>
<Para>Data type representing the address of the application routine or other
routine, whatever it is, that a new thread is created to execute as its
start routine.
<!-- -->
<!-- -->
<!-- -->
<!-- -->
<!-- -->
<!--no-op:  l-->
</Para>
</ListItem>
<ListItem>
<Para><StructName Role="typedef">pthread_t</StructName>
<!--no-op:  b-->
</Para>
<Para>Data type representing a thread handle, created by a call to <Function>pthread_create()</Function>.
The thread handle is used thenceforth to identify the thread to calls such as
<Function>pthread_cancel()</Function>, <Function>pthread_detach()</Function>, <Function>pthread_equal()</Function> (to
which two handles are passed for comparison).
<!-- -->
<!-- -->
<!-- -->
<!-- -->
<!--no-op:  l-->
</Para>
</ListItem>
<ListItem>
<!-- in pthread_signal_to_cancel.3thr:-->
<!--    sigwait.3thr -->
<!-- -->
<Para><StructName Role="typedef">sigset_t</StructName>
<!--no-op:  b-->
</Para>
<Para>Data type representing a set of signals.  It is always an integral or
structure type. 
If a structure, it is intended to be a simple structure, such as, a set of
arrays as opposed to a set of pointers.
It is opaque in that a set of functions called the <Literal>sigsetops</Literal> primitives
is  provided to manipulate signal sets.
They operate on signal set data objects addressable by the application,
not on any objects known to the system.
</Para>
<Para><?sml-need 8>The primitives are 
<Function>sigemptyset()</Function> and
<Function>sigfillset()</Function> which initialize the set as either empty or full,
<Function>sigaddset()</Function> and
<Function>sigdelset()</Function> which add or delete signals from the set,
and <Function>sigismember()</Function> which permits the application to check if a object 
(signal) of type <StructName Role="typedef">sigset_t</StructName> is a member of the signal set.
Applications must call at least one of the initialization primitives at least
once for each object of type <StructName Role="typedef">sigset_t</StructName> prior to any other use of that 
object (signal set).
</Para>
<Para>The object, or objects, represented by this data type 
when used by <Function>sigaction()</Function> is (are)
used in conjunction with a <Literal>sigaction</Literal> structure by the <Literal>sigaction</Literal>
function
to describe an action to be taken with (a) specified
<StructName Role="typedef">sigset_t</StructName>-type object(s).
</Para>
</ListItem>
</ItemizedList>
</RefSect1>
<!--+ 11/27/96 19:46:25
    | tagMorph:  $Id: DATA_TYPES.3thr,v 1.1.2.7 1996/12/17 21:07:23 damon Exp $
    | tagMorph library:  $Id: DATA_TYPES.3thr,v 1.1.2.7 1996/12/17 21:07:23 damon Exp $
    | sml-to-docbook:  1.25
    +-->
</RefEntry>
