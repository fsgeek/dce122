<!--
# @OSF_COPYRIGHT@
# 
# 
# HISTORY
# $Log: dce_msg_intro.3dce,v $
# Revision 1.1.2.6  1996/12/10  20:53:31  carrig
# 	{enh,R1.2.2}
# 	Synopses, fonts in PgmListing Listing
# 	[1996/12/09  21:17:11  carrig]
#
# Revision 1.1.2.5  1996/12/04  17:13:20  carrig
# 	{enh,R1.2.2}
# 	VarListEntry
# 	[1996/12/04  17:09:42  carrig]
# 
# Revision 1.1.2.4  1996/12/03  21:14:26  wardr
# 	{edit,R1.2.2}
# 	Fixed some Conversion probs
# 	[1996/12/03  20:58:53  wardr]
# 
# Revision 1.1.2.3  1996/12/01  19:13:21  weir
# 	Removed thinsp entities
# 	[1996/12/01  19:10:29  weir]
# 
# Revision 1.1.2.2  1996/11/29  19:22:56  weir
# 	Added fragmentary FPIs
# 	[1996/11/29  19:19:57  weir]
# 
# Revision 1.1.2.1  1996/11/29  16:25:01  weir
# 	Initial submission
# 	[1996/11/29  16:21:51  weir]
# 
# $EndLog$
-->
<!-- Fragment document type declaration subset:
ArborText, Inc., 1988-1993, v.4001
<!DOCTYPE Book PUBLIC "-//Davenport//DTD DocBook V2.4//EN" [
]>
-->
<RefEntry Id="DCEADR.MAN4.rsml.1">
<RefMeta>
<RefEntryTitle>dce_msg_intro</RefEntryTitle>
<ManVolNum>3dce</ManVolNum>
</RefMeta>
<RefNameDiv>
<RefName><Literal>dce_msg_intro</Literal></RefName>
<RefPurpose>Introduction to the DCE messaging interface</RefPurpose>
</RefNameDiv>
<!-- COPYRIGHT NOTICE-->
<!-- Copyright (c) 1990, 1991, 1992, 1993, 1994 Open Software Foundation, Inc.-->
<!-- ALL RIGHTS RESERVED (DCE).  See the file named COPYRIGHT.DCE for-->
<!-- the full copyright text.-->
<!-- OLD HISTORY-->
<!-- Revision 1.1.4.1  1996/11/18  17:00:01  wardr-->
<!-- 	{edit,R1.2.2}-->
<!-- 	Init capped heads and added PDG pointer-->
<!-- 	[1996/11/18  16:56:42  wardr]-->
<!---->
<!-- Revision 1.1.2.3  1995/05/31  17:05:35  buckler-->
<!-- 	1.1 edits.-->
<!-- 	PRENTICE HALL reformat.-->
<!-- 	[1995/05/30  22:49:58  buckler]-->
<!-- -->
<!-- Revision 1.1.2.2  1994/10/17  23:17:46  buckler-->
<!-- 	{enh, 8440, R1.1}-->
<!-- 	A few minor edits.-->
<!-- 	[1994/10/17  23:17:29  buckler]-->
<!-- -->
<!-- Revision 1.1.2.1  1994/10/14  19:36:17  buckler-->
<!-- 	{enh, 12204, R1.1}-->
<!-- 	Created new intro page.-->
<!-- 	[1994/10/14  19:35:48  buckler]-->
<!-- -->
<RefSect1>
<Title>Description</Title>
<Para>All DCE message texts are assigned a unique message ID. 
This is a 32-bit number, with 
the special value of all-bits-zero reserved to indicate success.
All other numbers are divided into a technology/component
that identifies the message catalog, and an index into the catalog.
</Para>
<Para>All messages for a given component are stored in a single message catalog
generated by the <Literal>sams</Literal> utility when the component is built. (The messages
may also be compiled into the application code, 
rendering the successful retrieval of message text 
independent of whether or not the 
message catalogs were correctly installed.)
</Para>
<Para>In typical use, a message is first retrieved from a message catalog,
allowing localization to occur.  If this fails, the default
message is retrieved from an in-memory table.  If this fails, a
fallback text identifying the message number is generated.
The two most useful routines, <Function>dce_error_inq_text()</Function>
and <Function>dce_msg_get()</Function>, and the DCE <Literal>printf</Literal> routines
follow these rules.  The rest of this API gives direct access
for special needs.
</Para>
<Para>The <Literal>dce_msg_cat_</Literal><Symbol Role="Variable">*</Symbol><Literal>()</Literal> routines 
provide a DCE abstraction to standard message
catalog routines, mapping DCE message IDs to message catalog names.  They offer
a convenient way of opening and accessing a message catalog simply by supplying
the ID of a message contained in it, rather than the name of the catalog itself.
Once opened, the catalog is accessed by means of an opaque handle (the
<StructName Role="typedef">dce_msg_cat_handle_t</StructName> typedef).
</Para>
<RefSect2>
<Title>The DCE Messaging Routines</Title>
<Para>The messaging routines are as follows, listed in alphabetical order:
</Para>
<VariableList>
<VarListEntry role="linebreak">
<Term><Function>dce_error_inq_text()</Function></Term>
<ListItem>
<Para>Retrieves from the installed DCE
component message catalogs the message text associated with an error status
code returned by a DCE library routine.
</Para>
</ListItem>
</VarListEntry>
<VarListEntry role="linebreak">
<Term><Function>dce_fprintf()</Function></Term>
<ListItem>
<Para>Functions much like <Function>dce_printf()</Function>,
except that it prints the message and its arguments on the specified stream. 
</Para>
</ListItem>
</VarListEntry>
<VarListEntry role="linebreak">
<Term><Function>dce_msg_cat_close()</Function></Term>
<ListItem>
<Para>Closes the message catalog (which was opened with <Function>dce_msg_cat_open())</Function>. 
</Para>
</ListItem>
</VarListEntry>
<VarListEntry role="linebreak">
<Term><Function>dce_msg_cat_get_msg()</Function></Term>
<ListItem>
<Para>Retrieves the text for a specified message.
</Para>
</ListItem>
</VarListEntry>
<VarListEntry role="linebreak">
<Term><Function>dce_msg_cat_open()</Function></Term>
<ListItem>
<Para>Opens the message catalog that contains
the specified message, and returns a handle that can be used in
subsequent calls to <Function>dce_msg_cat_get_msg()</Function>. 
</Para>
</ListItem>
</VarListEntry>
<VarListEntry role="linebreak">
<Term><Function>dce_msg_define_msg_table()</Function></Term>
<ListItem>
<Para>Registers an in-memory table containing the messages.
</Para>
</ListItem>
</VarListEntry>
<VarListEntry role="linebreak">
<Term><Function>dce_msg_get()</Function></Term>
<ListItem>
<Para>Retrieves the text for a specified message.
A convenience form of the <Function>dce_msg_get_msg()</Function> routine. 
</Para>
</ListItem>
</VarListEntry>
<VarListEntry role="linebreak">
<Term><Function>dce_msg_get_cat_msg()</Function></Term>
<ListItem>
<Para>A convenience form of the
<Function>dce_msg_cat_get_msg()</Function> routine.  Unlike <Function>dce_msg_cat_get_msg()</Function>,
<Function>dce_msg_get_cat_msg()</Function> does not require
the message catalog to be explicitly opened. 
</Para>
</ListItem>
</VarListEntry>
<VarListEntry role="linebreak">
<Term><Function>dce_msg_get_default_msg()</Function></Term>
<ListItem>
<Para>Retrieves a message from the application's in-memory tables. 
</Para>
</ListItem>
</VarListEntry>
<VarListEntry role="linebreak">
<Term><Function>dce_msg_get_msg()</Function></Term>
<ListItem>
<Para>Retrieves the text for a specified message.
</Para>
</ListItem>
</VarListEntry>
<VarListEntry role="linebreak">
<Term><Function>dce_msg_translate_table()</Function></Term>
<ListItem>
<Para>The <Function>dce_msg_translate_table()</Function> routine overwrites the specified
in-memory message table with the values from the equivalent
message catalogs.
</Para>
</ListItem>
</VarListEntry>
<VarListEntry role="linebreak">
<Term><Function>dce_pgm_fprintf()</Function></Term>
<ListItem>
<Para>Equivalent to <Function>dce_fprintf()</Function>, except that it
prepends the program name and appends a newline. 
</Para>
</ListItem>
</VarListEntry>
<VarListEntry role="linebreak">
<Term><Function>dce_pgm_printf()</Function></Term>
<ListItem>
<Para>Equivalent to <Function>dce_printf()</Function>, except that it
prepends the program name and appends a newline. 
</Para>
</ListItem>
</VarListEntry>
<VarListEntry role="linebreak">
<Term><Function>dce_pgm_sprintf()</Function></Term>
<ListItem>
<Para>Equivalent to <Function>dce_sprintf()</Function>, except that it
prepends the program name and appends a newline. 
</Para>
</ListItem>
</VarListEntry>
<VarListEntry>
<Term><Function>dce_printf()</Function></Term>
<ListItem>
<Para>Retrieves the message text associated with
the specified message ID, and prints the message and its arguments on the
standard output. 
<?sml-break><?sml-need 5></Para>
</ListItem>
</VarListEntry>
<VarListEntry role="linebreak">
<Term><Function>dce_sprintf()</Function></Term>
<ListItem>
<Para>Retrieves the message text associated with the
specified message ID, and prints the message and its arguments into 
an allocated string that is returned. 
</Para>
</ListItem>
</VarListEntry>
</VariableList>
</RefSect2>
<RefSect2>
<Title>Data Types and Structures</Title>
<VariableList>
<VarListEntry role="linebreak">
<Term><StructName Role="typedef">dce_error_string_t</StructName></Term>
<ListItem>
<Para>An array of characters big enough to hold any error text returned
by <Function>dce_error_inq_text()</Function>.
</Para>
</ListItem>
</VarListEntry>
<VarListEntry role="linebreak">
<Term><StructName Role="typedef">dce_msg_cat_handle_t</StructName></Term>
<ListItem>
<Para>An opaque handle to a DCE message catalog.  (Use <Function>dce_msg_cat_open()</Function>
to get a handle.)
</Para>
</ListItem>
</VarListEntry>
</VariableList>
</RefSect2>
</RefSect1>
<RefSect1>
<Title>Files</Title>
<VariableList>
<VarListEntry role="linebreak">
<Term><Filename>dce/dce_msg.h</Filename></Term>
<ListItem>
<Para></Para>
</ListItem>
</VarListEntry>
</VariableList>
</RefSect1>
<RefSect1>
<Title>Related Information</Title>
<Para>Books:
&DCEDg;
</Para>
</RefSect1>
<!--+ 11/27/96 19:46:25
    | tagMorph:  $Id: dce_msg_intro.3dce,v 1.1.2.6 1996/12/10 20:53:31 carrig Exp $
    | tagMorph library:  $Id: dce_msg_intro.3dce,v 1.1.2.6 1996/12/10 20:53:31 carrig Exp $
    | sml-to-docbook:  1.25
    +-->
</RefEntry>
