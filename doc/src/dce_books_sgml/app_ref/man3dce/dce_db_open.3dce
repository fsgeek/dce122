<!--
# @OSF_COPYRIGHT@
# 
# 
# HISTORY
# $Log: dce_db_open.3dce,v $
# Revision 1.1.2.6  1996/12/10  20:53:13  carrig
# 	{enh,R1.2.2}
# 	Synopses, fonts in PgmListing Listing
# 	[1996/12/09  21:16:41  carrig]
#
# Revision 1.1.2.5  1996/12/04  17:12:59  carrig
# 	{enh,R1.2.2}
# 	VarListEntry
# 	[1996/12/04  17:09:22  carrig]
# 
# Revision 1.1.2.4  1996/12/03  21:14:10  wardr
# 	{edit,R1.2.2}
# 	Fixed some Conversion probs
# 	[1996/12/03  20:58:38  wardr]
# 
# Revision 1.1.2.3  1996/12/01  19:13:09  weir
# 	Removed thinsp entities
# 	[1996/12/01  19:10:15  weir]
# 
# Revision 1.1.2.2  1996/11/29  19:22:41  weir
# 	Added fragmentary FPIs
# 	[1996/11/29  19:19:41  weir]
# 
# Revision 1.1.2.1  1996/11/29  16:24:45  weir
# 	Initial submission
# 	[1996/11/29  16:21:37  weir]
# 
# $EndLog$
-->
<!-- Fragment document type declaration subset:
ArborText, Inc., 1988-1993, v.4001
<!DOCTYPE Book PUBLIC "-//Davenport//DTD DocBook V2.4//EN" [
]>
-->
<RefEntry Id="DCEADR.MAN50.rsml.1">
<RefMeta>
<RefEntryTitle>dce_db_open</RefEntryTitle>
<ManVolNum>3dce</ManVolNum>
</RefMeta>
<RefNameDiv>
<RefName><Literal>dce_db_open</Literal></RefName>
<RefPurpose>Opens an existing backing store or creates a new one</RefPurpose>
</RefNameDiv>
<!-- COPYRIGHT NOTICE-->
<!-- Copyright (c) 1990, 1991, 1992, 1993, 1994 Open Software Foundation, Inc.-->
<!-- ALL RIGHTS RESERVED (DCE).  See the file named COPYRIGHT.DCE for-->
<!-- the full copyright text.-->
<!-- -->
<!-- -->
<!-- OLD HISTORY-->
<!-- Revision 1.1.4.1  1996/11/18  16:59:43  wardr-->
<!-- 	{edit,R1.2.2}-->
<!-- 	Init capped heads and added PDG pointer-->
<!-- 	[1996/11/18  16:56:26  wardr]-->
<!---->
<!-- Revision 1.1.2.7  1995/05/31  17:05:21  buckler-->
<!-- 	1.1 edits.-->
<!-- 	PRENTICE HALL reformat.-->
<!-- 	[1995/05/30  22:46:53  buckler]-->
<!-- -->
<!-- Revision 1.1.2.6  1994/06/13  17:01:54  devobj-->
<!-- 	cr10872 - fix copyright-->
<!-- 	[1994/06/13  16:46:19  devobj]-->
<!-- -->
<!-- Revision 1.1.2.5  1994/05/13  17:50:16  neilson-->
<!-- 	Engineering change.-->
<!-- 	[1994/05/13  17:49:45  neilson]-->
<!-- -->
<!-- Revision 1.1.2.4  1994/05/12  15:58:59  neilson-->
<!-- 	Fix typo.-->
<!-- 	[1994/05/12  15:58:04  neilson]-->
<!-- -->
<!-- Revision 1.1.2.3  1994/05/10  04:00:50  neilson-->
<!-- 	Engineering changes and minor corrections.-->
<!-- 	[1994/05/10  03:59:18  neilson]-->
<!-- -->
<!-- Revision 1.1.2.2  1994/05/06  13:32:46  neilson-->
<!-- 	Incorporate first review comments-->
<!-- 	[1994/05/06  13:31:22  neilson]-->
<!-- -->
<!-- Revision 1.1.2.1  1994/02/22  22:18:16  neilson-->
<!-- 	Initial material.-->
<!-- 	[1994/02/22  20:00:35  neilson]-->
<!-- -->
<RefSect1 Remap="ANSI">
<Title>Synopsis</Title>
<FuncSynopsis>
<FuncSynopsisInfo>#include &lt;dce/dce.h>
#include &lt;dce/dbif.h>
</FuncSynopsisInfo>
<FuncDef><Function><Literal>void </Literal>dce_db_open</Function></FuncDef>
<ParamDef>const char *<Parameter>name</Parameter></ParamDef>
<ParamDef>const char *<Parameter>backend_type</Parameter></ParamDef>
<ParamDef>unsigned32 <Parameter>flags</Parameter></ParamDef>
<ParamDef>dce_db_convert_func_t <Parameter>convert</Parameter></ParamDef>
<ParamDef>dce_db_handle_t *<Parameter>handle</Parameter></ParamDef>
<ParamDef>error_status_t *<Parameter>status</Parameter></ParamDef>
</FuncSynopsis>
</RefSect1>
<RefSect1>
<Title>Parameters</Title>
<RefSect2>
<Title>Input</Title>
<VariableList>
<VarListEntry>
<Term><Symbol Role="Variable">name</Symbol></Term>
<ListItem>
<Para>The filename of the backing store to be opened or created.
</Para>
</ListItem>
</VarListEntry>
<VarListEntry role="linebreak">
<Term><Symbol Role="Variable">backend_type</Symbol></Term>
<ListItem>
<Para>Either of the strings, <Literal>bsd4.4-hash</Literal> or <Literal>bsd4.4-btree</Literal>, or a
null pointer, which defaults to hash.
This parameter specifies the backing store backend type for licensees
adding multiple backends.
</Para>
</ListItem>
</VarListEntry>
<VarListEntry>
<Term><Symbol Role="Variable">flags</Symbol></Term>
<ListItem>
<Para>The manner of opening, as specified by any of the following bits:
</Para>
<VariableList>
<VarListEntry role="linebreak">
<Term><Literal>db_c_index_by_name</Literal></Term>
<ListItem>
<Para>The backing store is to be indexed by name.  Either this or
<Literal>db_c_index_by_uuid</Literal>, but not both, must be selected.
</Para>
</ListItem>
</VarListEntry>
<VarListEntry role="linebreak">
<Term><Literal>db_c_index_by_uuid</Literal></Term>
<ListItem>
<Para>The backing store is to be indexed by UUID.  Either this or
<Literal>db_c_index_by_name</Literal>, but not both, must be selected.
</Para>
</ListItem>
</VarListEntry>
<VarListEntry role="linebreak">
<Term><Literal>db_c_std_header</Literal></Term>
<ListItem>
<Para>The first field of each item (which is defined as a union in
<StructName Role="typedef">dce_db_header_t</StructName>) is the standard backing store header,
with the case <Literal>dce_db_header_std</Literal>
selected.  The selection for header cannot have both
<Literal>db_c_std_header</Literal> and <Literal>db_c_acl_uuid_header</Literal>.  If neither header
flag is specified, no header is used.
</Para>
</ListItem>
</VarListEntry>
<VarListEntry role="linebreak">
<Term><Literal>db_c_acl_uuid_header</Literal></Term>
<ListItem>
<Para>The first field of each item (the union) is 
an ACL UUID, with the case <Literal>dce_db_header_acl_uuid</Literal>
selected.  The selection for header cannot have both
<Literal>db_c_std_header</Literal> and <Literal>db_c_acl_uuid_header</Literal>.  If neither header
flag is specified, no header is used.
</Para>
</ListItem>
</VarListEntry>
<VarListEntry role="linebreak">
<Term><Literal>db_c_readonly</Literal></Term>
<ListItem>
<Para>An existing backing store is to be opened in read-only mode.  Read/write is the default.
</Para>
</ListItem>
</VarListEntry>
<VarListEntry role="linebreak">
<Term><Literal>db_c_create</Literal></Term>
<ListItem>
<Para>Creates an empty backing store if one of the given name does not already
exist.  It is an error to try to create an existing backing store.
</Para>
</ListItem>
</VarListEntry>
</VariableList>
</ListItem>
</VarListEntry>
<VarListEntry>
<Term><Symbol Role="Variable">convert</Symbol></Term>
<ListItem>
<Para>The function, generated by the IDL compiler, that is called to
perform serialization.
</Para>
</ListItem>
</VarListEntry>
</VariableList>
</RefSect2>
<RefSect2>
<Title>Output</Title>
<VariableList>
<VarListEntry>
<Term><Symbol Role="Variable">handle</Symbol></Term>
<ListItem>
<Para>A pointer to a handle that identifies the backing store being used.
</Para>
</ListItem>
</VarListEntry>
<VarListEntry>
<Term><Symbol Role="Variable">status</Symbol></Term>
<ListItem>
<Para>A pointer to the completion status.  On successful completion, the
routine returns <Literal>error_status_ok</Literal>.  Otherwise, it returns an error.
</Para>
</ListItem>
</VarListEntry>
</VariableList>
</RefSect2>
</RefSect1>
<RefSect1>
<Title>Description</Title>
<Para>The <Function>dce_db_open()</Function> routine opens the specified backing store.
The <Symbol Role="Variable">flags</Symbol> parameter must specify whether
the backing store is to be indexed by name or by UUID.  If all of a server's
objects have entries in the CDS namespace, then it is probably best to
use a UUID index.  If the server provides a junction or another
name-based lookup operation, then it is probably best to use a name index.
</Para>
<Para>The IDL code in <Filename>/usr/include/dce/database.idl</Filename> defines the backing
store header (selected by the <Symbol Role="Variable">flags</Symbol> parameter) that is placed on
each item, the possible header types, and the form of the function for
serializing headers.
</Para>
</RefSect1>
<RefSect1>
<Title>Notes</Title>
<Para>Backing stores are also called databases.  For instance, the
associated IDL header is <Filename>dce/database.idl</Filename>, and the name of the
backing store routines begin with <Literal>dce_db_</Literal>.  Nevertheless,
backing stores are not databases in the conventional sense,
and have no support for SQL or for any other query system.
<!-- .SH "FILES"-->
<!-- .VL-->
<!-- .LI-->
<!-- .LE-->
<?sml-break><?sml-need 20></Para>
</RefSect1>
<RefSect1>
<Title>Examples</Title>
<Para>Standardized use of the backing store library is encouraged.
The following is the skeleton IDL interface for a server's backing store:
</Para>
<InformalExample>
<Para><ProgramListing>interface XXX_db
{
    import "dce/database.idl";

<?sml-need 7>    typedef XXX_data_s_t {
        dce_db_header_t header;
        /* server-specific data */
    } XXX_data_t;

<?sml-need 7>    void XXX_data_convert(
        [in] handle_t h,
        [in, out] XXX_data_t *data,
        [out] error_status_t *st
    );
}
</ProgramListing></Para>
</InformalExample>
<Para>This interface should be compiled with the following ACF:
</Para>
<InformalExample>
<Para><ProgramListing>interface XXX_db
{
    [encode, decode] XXX_data_convert();
}
</ProgramListing></Para>
</InformalExample>
<Para>A typical call to <Function>dce_db_open()</Function>, using the preceding IDL example, follows:
</Para>
<InformalExample>
<Para><ProgramListing>dce_db_open("XXX_db", NULL,
    db_c_std_header | db_c_index_by_uuid,
    (dce_db_convert_func_t)XXX_data_convert,
    &amp;handle, &amp;st);
</ProgramListing></Para>
</InformalExample>
</RefSect1>
<RefSect1>
<Title>Errors</Title>
<Para>The following describes a partial list of errors that might be returned.
Refer to the &DCETg; for complete descriptions of all error
messages.
</Para>
<VariableList>
<VarListEntry role="linebreak">
<Term><Literal>db_s_bad_index_type</Literal></Term>
<ListItem>
<Para>The index type in <Symbol Role="Variable">flags</Symbol> is specified neither by name nor by
UUID, or else it is specified as both.
</Para>
</ListItem>
</VarListEntry>
<VarListEntry role="linebreak">
<Term><Literal>db_s_bad_header_type</Literal></Term>
<ListItem>
<Para>The header type in <Symbol Role="Variable">flags</Symbol> is specified as both standard header
and ACL header.
</Para>
</ListItem>
</VarListEntry>
<VarListEntry role="linebreak">
<Term><Literal>db_s_index_type_mismatch</Literal></Term>
<ListItem>
<Para>An existing backing store was opened with the wrong index type.
</Para>
</ListItem>
</VarListEntry>
<VarListEntry role="linebreak">
<Term><Literal>db_s_open_already_exists</Literal></Term>
<ListItem>
<Para>The backing store file specified for creation already exists.
</Para>
</ListItem>
</VarListEntry>
<VarListEntry role="linebreak">
<Term><Literal>db_s_no_name_specified</Literal></Term>
<ListItem>
<Para>No filename is specified.
</Para>
</ListItem>
</VarListEntry>
<VarListEntry role="linebreak">
<Term><Literal>db_s_open_failed_eacces</Literal></Term>
<ListItem>
<Para>The server does not have permission to open the backing store file.
</Para>
</ListItem>
</VarListEntry>
<VarListEntry role="linebreak">
<Term><Literal>db_s_open_failed_enoent</Literal></Term>
<ListItem>
<Para>The specified directory or backing store file was not found.
</Para>
</ListItem>
</VarListEntry>
<VarListEntry role="linebreak">
<Term><Literal>db_s_open_failed</Literal></Term>
<ListItem>
<Para>The underlying database-open procedure failed.  The global variable
<Literal>errno</Literal> may provide more specific information.
</Para>
</ListItem>
</VarListEntry>
<VarListEntry role="linebreak">
<Term><Literal>error_status_ok</Literal></Term>
<ListItem>
<Para>The call was successful.
</Para>
</ListItem>
</VarListEntry>
</VariableList>
</RefSect1>
<RefSect1>
<Title>Related Information</Title>
<!--no-op:  l-->
<Para>Functions:
<Filename MoreInfo="RefEntry">dce_db_close(3dce)</Filename>.
<!--no-op:  b-->
</Para>
</RefSect1>
<!--+ 11/27/96 19:46:25
    | tagMorph:  $Id: dce_db_open.3dce,v 1.1.2.6 1996/12/10 20:53:13 carrig Exp $
    | tagMorph library:  $Id: dce_db_open.3dce,v 1.1.2.6 1996/12/10 20:53:13 carrig Exp $
    | sml-to-docbook:  1.25
    +-->
</RefEntry>
