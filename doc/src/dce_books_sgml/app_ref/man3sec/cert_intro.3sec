<!--
# COPYRIGHT NOTICE
# Copyright (c) 1990-1996 Open Software Foundation, Inc. 
# ALL RIGHTS RESERVED (DCE). See the file named COPYRIGHT.DCE in the 
# src directory for the full copyright text. 
# 
# 
# HISTORY
# $Log: cert_intro.3sec,v $
# Revision 1.1.2.7  1996/12/17  20:49:58  damon
# 	Expanded OSF C O P Y R I G H T   N O T I C E
# 	[1996/12/17  20:47:09  damon]
#
# Revision 1.1.2.6  1996/12/12  00:11:37  weir
# 	Editorial corrections
# 	[1996/12/12  00:10:07  weir]
# 
# Revision 1.1.2.5  1996/12/07  22:33:39  weir
# 	Set revision flag
# 	[1996/12/07  22:32:07  weir]
# 
# Revision 1.1.2.4  1996/12/07  20:26:58  carrig
# 	{enh,R1.2.2}
# 	VarLists, Tables
# 	[1996/12/07  20:18:31  carrig]
# 
# Revision 1.1.2.3  1996/12/06  23:45:45  weir
# 	Updates
# 	[1996/12/06  23:44:16  weir]
# 
# Revision 1.1.2.2  1996/12/01  20:18:46  weir
# 	Removed thinsp entities
# 	[1996/12/01  20:12:11  weir]
# 
# Revision 1.1.2.1  1996/11/29  17:54:14  weir
# 	Initial submission
# 	[1996/11/29  17:47:01  weir]
# 
# $EndLog$
# 
-->
<!-- Fragment document type declaration subset:
ArborText, Inc., 1988-1993, v.4001
<!DOCTYPE Book PUBLIC "-//Davenport//DTD DocBook V2.4//EN" [
]>
-->
<RefEntry RevisionFlag="changed" Id="DCEADR.MAN433.rsml.1">
<RefMeta>
<RefEntryTitle>pkc_intro</RefEntryTitle>
<ManVolNum>3sec</ManVolNum>
</RefMeta>
<RefNameDiv>
<RefName><Literal>pkc_intro</Literal></RefName>
<RefPurpose>Introduction to trust list facilities API</RefPurpose>
</RefNameDiv>
<!-- -->
<!-- -->
<!-- OLD HISTORY-->
<!-- Revision 1.1.2.3  1996/11/19  18:55:20  wardr-->
<!-- 	{edit,R1.2.2}-->
<!-- 	Init capped heads and added PDG pointer-->
<!-- 	[1996/11/19  18:48:24  wardr]-->
<!---->
<!-- Revision 1.1.2.2  1996/11/18  19:56:58  weir-->
<!-- 	No change-->
<!-- 	[1996/11/18  19:54:59  weir]-->
<!-- -->
<!-- Revision 1.1.2.1  1996/10/15  21:10:19  weir-->
<!-- 	Initial submission-->
<!-- 	[1996/10/15  21:09:02  weir]-->
<!-- -->
<!-- - -->
<!-- -->
<!-- -->
<!-- -->
<RefSect1>
<Title>Description</Title>
<Para>This reference page describes the data types used by the trust list
facility.
<!-- -->
<!-- -->
</Para>
<RefSect2>
<Title>Overview of the Facility</Title>
<!-- -->
<!-- This is the high-level certificate API.-->
<!-- -->
<!-- -->
<!-- -->
<Para>Retrieving keys using this API is a three step process.
</Para>
<Para>The first step involves creating a <Literal>pkc</Literal> structure
called a trust list, which reflects the caller's initial trust. A trust list
is a list of {name, key}  pairs or certificates that are trusted
<Symbol Role="Variable">a priori</Symbol>.
</Para>
<Para>An empty trust list is created through a call to the routine
<Filename MoreInfo="RefEntry">pkc_init_trustlist(3sec)</Filename>, and
entries are inserted into a trust list by a call to
<Filename MoreInfo="RefEntry">pkc_append_to_trustlist(3sec)</Filename>.
</Para>
<Para>Once the trust list is complete, the application should next call
<Filename MoreInfo="RefEntry">pkc_init_trustbase(3sec)</Filename>. This
routine takes the trust list and processes it to produce a stucture called a
trust base, which reflects any transitive trust, independent of the name of
any desired target.
</Para>
<Para>Creation of the trust base (and the prerequisite trust list) is
expected to be performed at application startup, although it can be
done any time prior to key retrieval. All processing up to this point
is independent of the name(s) of principals whose keys are to be
retrieved, and the trust base may be used for multiple key retrieval
operations.
</Para>
<Para>Once a trust base has been obtained, it may be used for key retrieval.
Keys are retrieved for a given target principal using the
<Filename MoreInfo="RefEntry">pkc_retrieve_keys(3sec)</Filename> routine, which
takes a trust base and a name and returns an array of keys.
<!-- -->
<!-- -->
<!-- - -->
</Para>
</RefSect2>
<RefSect2>
<Title>Data Structures</Title>
<Para>The following data structures are used by the trust list facilities.
<!-- -->
<!-- -->
<!-- -->
<!-- -->
<!-- -->
<!-- -->
</Para>
<ItemizedList>
<!-- -->
<!-- -->
<!-- <ListItem> -->
<!-- <Para>The <StructName Role="typedef">trustlist_t</StructName> structure contains a -->
<!-- <Literal>handle</Literal> that points to a -->
<!-- <StructName Role="typedef">pkc_trust_list_t</StructName> item. -->
<!-- </Para> -->
<!-- </ListItem> -->
<!-- -->
<!-- <ListItem> -->
<!-- <Para>The <StructName Role="typedef">keyinfo_t</StructName> structure is -->
<!-- returned when <Filename MoreInfo="RefEntry">pkc_retrieve_keyinfo(3sec)</Filename> -->
<!-- is called. It contains information about a set of keys belonging to a single -->
<!-- principal. The user interrogates this handle (using the routines -->
<!-- <Filename MoreInfo="RefEntry">pkc_get_key_count(3sec)</Filename>, -->
<!-- <Filename MoreInfo="RefEntry">pkc_get_key_data(3sec)</Filename>, -->
<!-- <Filename MoreInfo="RefEntry">pkc_get_key_trust_info(3sec)</Filename>, -->
<!-- <Filename MoreInfo="RefEntry">pkc_get_key_certifier_count(3sec)</Filename>, -->
<!-- and <Filename MoreInfo="RefEntry">pkc_get_key_certifier_info(3sec)</Filename>) -->
<!-- for number of keys, key value(s), certification path (in case of hierarchical policy), -->
<!-- and so on.</Para> -->
<!-- <Para>The structure contains a pointer to the -->
<!-- <StructName Role="typedef">trustbase_t</StructName> that was used to -->
<!-- establish the trust from which these keys were derived, and a policy specific -->
<!-- handle that is used for the actual key information.</Para> -->
<!-- <Para>The user must ensure that the trust base is not deleted until any and all -->
<!-- dependent <StructName Role="typedef">keyinfo_t</StructName> objects have been -->
<!-- deleted.</Para> -->
<!-- <Para>Callers do not need to create objects of this type; -->
<!-- <StructName Role="typedef">keyinfo_t</StructName> objects are private to the -->
<!-- certification API. The structure contains the following fields:</Para> -->
<!-- -->
<!-- <ItemizedList> -->
<!-- <ListItem> -->
<!-- <Para><Literal>base</Literal> -->
<!-- </Para> -->
<!-- <Para>A pointer to <StructName Role="typedef">trustbase_t</StructName>. -->
<!-- -->
<!-- </Para> -->
<!-- </ListItem> -->
<!-- <ListItem> -->
<!-- <Para><Literal>name</Literal> -->
<!-- </Para> -->
<!-- <Para>A string specifying the name of the principal. -->
<!-- -->
<!-- </Para> -->
<!-- </ListItem> -->
<!-- <ListItem> -->
<!-- <Para><Replaceable>key_date</Replaceable> -->
<!-- </Para> -->
<!-- <Para>A <StructName Role="typedef">utc_t</StructName> specifying the  -->
<!-- -->
<!-- </Para> -->
<!-- </ListItem> -->
<!-- <ListItem> -->
<!-- <Para><Literal>sel</Literal> -->
<!-- </Para> -->
<!-- <Para>A pointer to <StructName Role="typedef">selection_t</StructName> -->
<!-- -->
<!-- </Para> -->
<!-- </ListItem> -->
<!-- <ListItem> -->
<!-- <Para><Literal>handle</Literal> -->
<!-- </Para> -->
<!-- <Para>Points to a policy specific structure. -->
<!-- -->
<!-- </Para> -->
<!-- </ListItem> -->
<!-- </ItemizedList> -->
<!-- -->
<!-- -->
<!-- </ListItem> -->
<!-- -->
<!-- -->
<!-- -->
<ListItem>
<Para>The <StructName Role="typedef">trust_type_t</StructName> type consists of
an enumeration of the different possible varieties of trust:
<!-- -->
</Para>
<ItemizedList>
<ListItem>
<Para><Literal>UNTRUSTED</Literal>
</Para>
<Para>No trust (e.g., unauthenticated).
<!-- -->
</Para>
</ListItem>
<ListItem>
<Para><Literal>DIRECT_TRUST</Literal>
</Para>
<Para>Direct trust via third party (e.g., authenticated registry).
<!-- -->
</Para>
</ListItem>
<ListItem>
<Para><Literal>CERTIFIED_TRUST</Literal>
</Para>
<Para>Trust certified by caller's trust base.
<!-- -->
</Para>
</ListItem>
</ItemizedList>
<!-- -->
<!-- -->
<!-- -->
</ListItem>
<ListItem>
<Para>The <StructName Role="typedef">certification_flags_t</StructName> structure
describes the trust that can be placed in a returned key. It contains the following fields:
<!-- -->
</Para>
<ItemizedList>
<ListItem>
<Para><Literal>trust_type</Literal>
</Para>
<Para>A <StructName Role="typedef">trust_type_t</StructName> value expressing the
style of trust.
<!-- -->
</Para>
</ListItem>
<ListItem>
<Para><Literal>missing_crls</Literal>
</Para>
<Para>A <Literal>char</Literal>; its value is TRUE (not 0) if one or more CRLs are
missing.
<!-- -->
</Para>
</ListItem>
<ListItem>
<Para><Literal>revoked</Literal>
</Para>
<Para>A <Literal>char</Literal> whose value is TRUE (not 0) if any certificate has been
revoked (even if it was still valid at the retrieval time).
<!-- -->
</Para>
</ListItem>
</ItemizedList>
<!-- -->
<!-- -->
<!-- -->
</ListItem>
<ListItem>
<Para>The <StructName Role="typedef">cert_t</StructName> structure contains
the following fields:
</Para>
<ItemizedList>
<ListItem>
<Para><Literal>version</Literal>
</Para>
<Para>An <Literal>int</Literal> whose value must be 0.
<!-- -->
</Para>
</ListItem>
<ListItem>
<Para><Literal>cert</Literal>
</Para>
<Para>A pointer to an <Literal>unsigned char</Literal> representing the
ASN.1 encoding of a certificate.
<!-- -->
</Para>
</ListItem>
<ListItem>
<Para><Literal>size</Literal>
</Para>
<Para>A <StructName Role="typedef">size_t</StructName> which represents the
size of the encoding.
<!-- -->
</Para>
</ListItem>
</ItemizedList>
<!-- -->
<!-- -->
<!-- typedef struct {-->
<!--   int version;  /* currently, has to be version 0 */-->
<!--   unsigned char *cert;  /* ASN.1 encoding of a Certificate */-->
<!--   size_t size;          /* size of the encoding */-->
<!-- } cert_t;-->
<!-- -->
</ListItem>
<ListItem>
<Para>The <StructName Role="typedef">trusted_key_t</StructName> structure contains
the following fields:
<!-- -->
</Para>
<ItemizedList>
<ListItem>
<Para><Literal>version</Literal>
</Para>
<Para>An <Literal>int</Literal> whose value must be 0.
<!-- -->
</Para>
</ListItem>
<ListItem>
<Para><Literal>ca</Literal>
</Para>
<Para>A pointer to an <Literal>unsigned char</Literal> (<Literal>x500 char</Literal>)
string which represents the name of the Certification Authority
whose key this is. For example, <Filename>/.../foo_cell/ca</Filename> or
<Filename>/.../C=US/O=dec/CN=foo_cell/ca</Filename>.
<!-- -->
</Para>
</ListItem>
<ListItem>
<Para><Literal>key</Literal>
</Para>
<Para>A pointer to an <Literal>unsigned char</Literal> representing the
Certification Authority's ASN.1 key.
<!-- -->
</Para>
</ListItem>
<ListItem>
<Para><Literal>size</Literal>
</Para>
<Para>A <StructName Role="typedef">size_t</StructName> representing the size of
the CA's ASN.1 key.
<!-- -->
</Para>
</ListItem>
<ListItem>
<Para><Literal>startDate</Literal>
</Para>
<Para>An <StructName Role="typedef">utc_t</StructName> representing the time at
which the key begins to be valid.
<!-- -->
</Para>
</ListItem>
<ListItem>
<Para><Literal>endDate</Literal>
</Para>
<Para>An <StructName Role="typedef">utc_t</StructName> representing the time at
which the key ceases to be valid.
<!-- -->
</Para>
</ListItem>
</ItemizedList>
<!-- -->
<!-- typedef struct {-->
<!--   int version;  /* currently, has to be version 0 */-->
<!--   unsigned char *ca;  /* x500 char * version of Certification Authority-->
<!--                        * whose key this is-->
<!--                        * Name; for eg. /.../foo_cell/ca or-->
<!--                        * /.../C=US/O=dec/CN=foo_cell/ca-->
<!--                        */-->
<!--   unsigned char *key;  /* ca's ASN.1 key */-->
<!--   size_t size;         /* size of ASN.1 key */-->
<!--   utc_t startDate, endDate;-->
<!-- } trusted_key_t;-->
<!-- -->
<!-- -->
<!-- - -->
</ListItem>
<ListItem>
<Para>The <StructName Role="typedef">trustitem_t</StructName> structure holds
either a key, or a certificate. It has the following fields:
<!-- -->
</Para>
<ItemizedList>
<ListItem>
<Para><Literal>type</Literal>
</Para>
<Para>An <Literal>int</Literal> whose value specifies either that the structure holds
a key (<Literal>IS_KEY</Literal>) or a certificate (<Literal>IS_CERT</Literal>).
<!-- -->
</Para>
</ListItem>
<ListItem>
<Para>Depending on the value of <Literal>type</Literal>, the structure additionally
contains a <StructName Role="typedef">trusted_key_t</StructName> (if <Literal>IS_KEY</Literal>)
or a <StructName Role="typedef">cert_t</StructName> (if <Literal>IS_CERT</Literal>).
<!-- -->
</Para>
</ListItem>
</ItemizedList>
<!-- -->
<!-- typedef struct {-->
<!--   int type;    /* Possible values of type are:-->
<!--                   IS_KEY, or IS_CERT, anything else currently-->
<!--                   is an error */-->
<!--   union {-->
<!--     trusted_key_t k;-->
<!--     cert_t        c;-->
<!--   } u;-->
<!-- } trustitem_t; -->
<!-- -->
<!-- -->
<!-- - -->
</ListItem>
<ListItem>
<Para>The <StructName Role="typedef">selection_t</StructName> structure is
defined for future enhancements that will enable users to specify usages for
the key being retrieved. However, its contents are currently ignored.
<!-- -->
<!-- typedef struct {-->
<!--   void *reserved;-->
<!-- } selection_t;-->
<!-- -->
<!-- -->
<!-- - -->
</Para>
</ListItem>
<!-- -->
<!-- -->
<!-- -->
<!-- <ListItem> -->
<!-- <Para>The <StructName Role="typedef">trustbase_t</StructName> structure -->
<!-- holds a trusted base (or an expanded trust list together with the -->
<!-- cross-certificate pair certificates obtained during lookups). It contains -->
<!-- the following fields: -->
<!-- -->
<!-- </Para> -->
<!-- <ItemizedList> -->
<!-- <ListItem> -->
<!-- <Para><Replaceable>policy_oid</Replaceable> -->
<!-- </Para> -->
<!-- <Para>A <Literal>gss_OID</Literal> which specifies the policy OID used for -->
<!-- computing the trust base. Computing a trust base is a time-consuming operation; -->
<!-- consequently, once computed, it is cached here&mdash;specifically, in the -->
<!-- <Literal>trustbase_handle</Literal>, where policy specific trust base pointers -->
<!-- are kept. -->
<!-- -->
<!-- -->
<!-- </Para> -->
<!-- </ListItem> -->
<!-- <ListItem> -->
<!-- <Para><Literal>time</Literal> -->
<!-- </Para> -->
<!-- <Para>A <StructName Role="typedef">utc_t</StructName> representing the time at -->
<!-- which the public keys are to become valid. -->
<!-- -->
<!-- -->
<!-- </Para> -->
<!-- </ListItem> -->
<!-- <ListItem> -->
<!-- <Para><Literal>sel</Literal> -->
<!-- </Para> -->
<!-- <Para>At present must be 0. In a future enhancement, will point to a copy of the -->
<!-- <Literal>sel_ptr</Literal> passed in by the user in -->
<!-- <Literal>pkc_init_trustbase</Literal>. -->
<!-- -->
<!-- -->
<!-- </Para> -->
<!-- </ListItem> -->
<!-- <ListItem> -->
<!-- <Para><Literal>context</Literal> -->
<!-- </Para> -->
<!-- <Para>The pointer that will be returned by the policy <Literal>->open</Literal> -->
<!-- routine (see the <StructName Role="typedef">pkc_policy_t</StructName> structure). -->
<!-- -->
<!-- -->
<!-- </Para> -->
<!-- </ListItem> -->
<!-- <ListItem> -->
<!-- <Para><Literal>trustbase_handle</Literal> -->
<!-- </Para> -->
<!-- <Para>The last pointer that will be returned by the policy -->
<!-- <Literal>->establish</Literal> routine (see the -->
<!-- <StructName Role="typedef">pkc_policy_t</StructName> structure). -->
<!-- It points to a <StructName Role="typedef">pkc_trust_list_t</StructName> list. -->
<!-- -->
<!-- -->
<!-- -->
<!-- </Para> -->
<!-- </ListItem> -->
<!-- </ItemizedList> -->
<!-- -->
<!-- </ListItem> -->
<!-- -->
<!-- -->
<!-- -->
</ItemizedList>
<!-- -->
<!-- -->
<!-- typedef struct {-->
<!--   gss_OID policy_oid;  /* policy OID used for computing trustbase. -->
<!--                         * Computing a trust base is a time-consuming-->
<!--                         * operation, and hence, we cache this in-->
<!--                         * this structure - specifically in -->
<!--                         * trusbase_handle, where policy specific-->
<!--                         * trustbase pointers are kept.  -->
<!--                         */-->
<!-- -->
<!--   utc_t time;          /* time at which you want public keys to be valid-->
<!--                         */-->
<!-- -->
<!--   selection_t *sel;    /* has to be 0; ignored for now; when used, will-->
<!--                         * point to a copy of the sel ptr passed in by-->
<!--                         * the user in pkc_init_trustbase-->
<!--                         */-->
<!-- -->
<!--   void *context;  /* this will be the pointer returned by ->open-->
<!--                    * routine (see pkc_policy_t structure) -->
<!--                    */-->
<!--   void *trustbase_handle; /* this will be the last-->
<!--                            * pointer returned by ->establish-->
<!--                            * routine (see pkc_policy_t -->
<!--                            * structure). It points to a pkc_trust_list_t-->
<!--                            * list.-->
<!--                            */-->
<!-- -->
<!-- } trustbase_t;-->
<!-- -->
<!-- -->
<!-- -->
</RefSect2>
</RefSect1>
<RefSect1>
<Title>Related Information</Title>
<Para><!--no-op:  l-->
Functions:
<Filename MoreInfo="RefEntry">pkc_append_to_trustlist(3sec)</Filename>,
<Filename MoreInfo="RefEntry">pkc_free(3sec)</Filename>,
<Filename MoreInfo="RefEntry">pkc_free_keyinfo(3sec)</Filename>,
<Filename MoreInfo="RefEntry">pkc_free_trustbase(3sec)</Filename>,
<Filename MoreInfo="RefEntry">pkc_free_trustlist(3sec)</Filename>,
<Filename MoreInfo="RefEntry">pkc_get_key_certifier_count(3sec)</Filename>,
<Filename MoreInfo="RefEntry">pkc_get_key_certifier_info(3sec)</Filename>,
<Filename MoreInfo="RefEntry">pkc_get_key_count(3sec)</Filename>,
<Filename MoreInfo="RefEntry">pkc_get_key_data(3sec)</Filename>,
<Filename MoreInfo="RefEntry">pkc_get_key_trust_info(3sec)</Filename>,
<Filename MoreInfo="RefEntry">pkc_get_registered_policies(3sec)</Filename>,
<Filename MoreInfo="RefEntry">pkc_init_trustbase(3sec)</Filename>,
<Filename MoreInfo="RefEntry">pkc_init_trustlist(3sec)</Filename>,
<Filename MoreInfo="RefEntry">pkc_retrieve_keyinfo(3sec)</Filename>,
<Filename MoreInfo="RefEntry">pkc_retrieve_keylist(3sec)</Filename>.
<!--no-op:  b-->
<!-- -->
<!-- -->
</Para>
</RefSect1>
<!--+ 11/27/96 19:46:25
    | tagMorph:  $Id: cert_intro.3sec,v 1.1.2.7 1996/12/17 20:49:58 damon Exp $
    | tagMorph library:  $Id: cert_intro.3sec,v 1.1.2.7 1996/12/17 20:49:58 damon Exp $
    | sml-to-docbook:  1.25
    +-->
</RefEntry>
