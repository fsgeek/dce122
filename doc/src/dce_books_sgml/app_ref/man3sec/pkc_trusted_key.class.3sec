<!--
# COPYRIGHT NOTICE
# Copyright (c) 1990-1996 Open Software Foundation, Inc. 
# ALL RIGHTS RESERVED (DCE). See the file named COPYRIGHT.DCE in the 
# src directory for the full copyright text. 
# 
# 
# HISTORY
# $Log: pkc_trusted_key.class.3sec,v $
# Revision 1.1.2.8  1996/12/17  21:06:55  damon
# 	Expanded OSF C O P Y R I G H T   N O T I C E
# 	[1996/12/17  21:04:24  damon]
#
# Revision 1.1.2.7  1996/12/15  17:14:50  weir
# 	Various updates etc.
# 	[1996/12/15  17:12:47  weir]
# 
# Revision 1.1.2.6  1996/12/12  00:12:38  weir
# 	Editorial corrections
# 	[1996/12/12  00:11:12  weir]
# 
# Revision 1.1.2.5  1996/12/07  22:34:54  weir
# 	Set revision flag
# 	[1996/12/07  22:33:09  weir]
# 
# Revision 1.1.2.4  1996/12/07  20:29:26  carrig
# 	{enh,R1.2.2}
# 	VarLists, Tables
# 	[1996/12/07  20:21:17  carrig]
# 
# Revision 1.1.2.3  1996/12/06  23:46:54  weir
# 	Updates
# 	[1996/12/06  23:45:10  weir]
# 
# Revision 1.1.2.2  1996/12/01  20:20:30  weir
# 	Removed thinsp entities
# 	[1996/12/01  20:14:12  weir]
# 
# Revision 1.1.2.1  1996/11/29  17:57:11  weir
# 	Initial submission
# 	[1996/11/29  17:48:49  weir]
# 
# $EndLog$
# 
-->
<!-- Fragment document type declaration subset:
ArborText, Inc., 1988-1993, v.4001
<!DOCTYPE Book PUBLIC "-//Davenport//DTD DocBook V2.4//EN" [
]>
-->
<RefEntry RevisionFlag="changed" Id="DCEADR.MAN561.rsml.1">
<RefMeta>
<RefEntryTitle>pkc_trusted_key.class</RefEntryTitle>
<ManVolNum>3sec</ManVolNum>
</RefMeta>
<RefNameDiv>
<RefName><Function>pkc_trusted_key.class</Function></RefName>
<RefPurpose>Trusted public key class</RefPurpose>
</RefNameDiv>
<!-- -->
<!-- -->
<!-- OLD HISTORY-->
<!-- Revision 1.1.2.3  1996/11/19  18:57:26  wardr-->
<!-- 	{edit,R1.2.2}-->
<!-- 	Init capped heads and added PDG pointer-->
<!-- 	[1996/11/19  18:50:33  wardr]-->
<!---->
<!-- Revision 1.1.2.2  1996/11/18  19:58:36  weir-->
<!-- 	No change-->
<!-- 	[1996/11/18  19:55:56  weir]-->
<!-- -->
<!-- Revision 1.1.2.1  1996/10/15  21:11:29  weir-->
<!-- 	Initial submission-->
<!-- 	[1996/10/15  21:09:49  weir]-->
<!-- -->
<!-- -->
<!-- -->
<!-- -->
<!-- -->
<RefSect1>
<Title>Member Data</Title>
<!-- -->
<RefSect2>
<Title>Public</Title>
<ItemizedList>
<ListItem>
<Para><Literal>SubjectPublicKeyInfo value</Literal>
</Para>
</ListItem>
<ListItem>
<Para><Literal>x500name owner</Literal>
</Para>
</ListItem>
</ItemizedList>
<!-- -->
</RefSect2>
<!-- -->
<!-- -->
<!-- -->
<!-- -->
<!-- -->
<!-- -->
</RefSect1>
<RefSect1>
<Title>Member Functions</Title>
<!-- -->
<RefSect2>
<Title>Public</Title>
<!-- -->
<ItemizedList>
<ListItem>
<Para><Literal>pkc_trusted_key_t(void)</Literal>
<!-- -->
</Para>
</ListItem>
<ListItem>
<Para><Literal>pkc_trusted_key_t()</Literal>
</Para>
<Para>Takes following arguments:
</Para>
<ItemizedList>
<ListItem>
<Para><Literal>utc_t</Literal> <Replaceable>startDate</Replaceable>
</Para>
</ListItem>
<ListItem>
<Para><Literal>utc_t</Literal> <Replaceable>endDate</Replaceable>
</Para>
</ListItem>
<ListItem>
<Para><Literal>pkc_ca_key_usage_t</Literal> <Replaceable>caUsages</Replaceable>
</Para>
</ListItem>
<ListItem>
<Para><Literal>pkc_key_usage_t</Literal> <Replaceable>userUsages</Replaceable>
</Para>
</ListItem>
<ListItem>
<Para><Literal>pkc_key_policies_t</Literal> <Replaceable>keyPolicies</Replaceable>
</Para>
</ListItem>
<ListItem>
<Para><Literal>pkc_constraints_t</Literal> <Replaceable>keyConstraints</Replaceable>
</Para>
</ListItem>
</ItemizedList>
<!-- -->
<!-- -->
</ListItem>
<ListItem>
<Para><Function>unsigned32 get_start_date() const</Function>
</Para>
<Para>Takes the following argument:
</Para>
<ItemizedList>
<ListItem>
<Para><Literal>utc_t *</Literal> <Replaceable>start_date</Replaceable>
</Para>
</ListItem>
</ItemizedList>
<!-- -->
</ListItem>
<ListItem>
<Para><Function>unsigned32 get_end_date() const</Function>
</Para>
<Para>Takes the following argument:
</Para>
<ItemizedList>
<ListItem>
<Para><Literal>utc_t *</Literal> <Replaceable>end_date</Replaceable>
</Para>
</ListItem>
</ItemizedList>
<!-- -->
</ListItem>
<ListItem>
<Para><Function>unsigned32 get_usages() const</Function>
</Para>
<Para>Takes the following argument:
</Para>
<ItemizedList>
<ListItem>
<Para><Literal>pkc_key_usage_t *</Literal> <Replaceable>user_usages</Replaceable>
</Para>
</ListItem>
</ItemizedList>
<!-- -->
</ListItem>
<ListItem>
<Para><Function>unsigned32 get_ca_usages() const</Function>
</Para>
<Para>Takes the following argument:
</Para>
<ItemizedList>
<ListItem>
<Para><Literal>pkc_ca_key_usage_t *</Literal> <Replaceable>ca_usages</Replaceable>
</Para>
</ListItem>
</ItemizedList>
<!-- -->
</ListItem>
<ListItem>
<Para><Function>unsigned32 get_key_policies() const</Function>
</Para>
<Para>Takes the following argument:
</Para>
<ItemizedList>
<ListItem>
<Para><Literal>pkc_key_policies_t *</Literal> <Replaceable>policies</Replaceable>
</Para>
</ListItem>
</ItemizedList>
<!-- -->
</ListItem>
<ListItem>
<Para><Function>unsigned32 get_constraints() const</Function>
</Para>
<Para>Takes the following argument:
</Para>
<ItemizedList>
<ListItem>
<Para><Literal>pkc_constraints_t *</Literal> <Replaceable>constraints</Replaceable>
</Para>
</ListItem>
</ItemizedList>
<!-- -->
</ListItem>
<ListItem>
<Para><Function>unsigned32 get_certifier() const</Function>
</Para>
<Para>Takes the following argument:
</Para>
<ItemizedList>
<ListItem>
<Para><Literal>x500name &amp;</Literal> <Replaceable>name</Replaceable>
</Para>
</ListItem>
</ItemizedList>
<!-- -->
</ListItem>
<ListItem>
<Para><Function>unsigned32 get_certifier() const</Function>
</Para>
<Para>Takes the following argument:
</Para>
<ItemizedList>
<ListItem>
<Para><Literal>pkc_trusted_key_t **</Literal> <Replaceable>ca</Replaceable>
</Para>
</ListItem>
</ItemizedList>
<!-- -->
</ListItem>
<ListItem>
<Para><Literal>char valid_at() const</Literal>
</Para>
<Para>Takes the following argument:
</Para>
<ItemizedList>
<ListItem>
<Para><Literal>utc_t *</Literal> <Replaceable>time</Replaceable>
</Para>
</ListItem>
</ItemizedList>
<!-- -->
</ListItem>
<ListItem>
<Para><Literal>pkc_trusted_key_t &amp; operator = (const pkc_trusted_key_t &amp; o)</Literal>
<!-- -->
</Para>
</ListItem>
<ListItem>
<Para><Literal>char may_certify() const</Literal>
</Para>
<Para>Takes the following arguments:
</Para>
<ItemizedList>
<ListItem>
<Para><Literal>const x500name &amp;</Literal> <Replaceable>subject</Replaceable>
</Para>
</ListItem>
<ListItem>
<Para><Literal>unsigned long</Literal> <Replaceable>usage</Replaceable><Literal> =
PKC_CAKEY_USAGE_KEY_CERT_SIGN</Literal>
</Para>
</ListItem>
</ItemizedList>
<!-- -->
</ListItem>
<ListItem>
<Para><Literal>char may_certify() const</Literal>
</Para>
<Para>Takes the following arguments:
</Para>
<ItemizedList>
<ListItem>
<Para><Literal>const x500name &amp; subject</Literal>
</Para>
</ListItem>
<ListItem>
<Para><Literal>const pkc_ca_key_usage_t &amp; usage</Literal>
</Para>
</ListItem>
</ItemizedList>
<!-- -->
</ListItem>
</ItemizedList>
<!-- -->
<!-- -->
<!-- -->
<?sml-break>
<?sml-need 1.5i>
<!-- -->
</RefSect2>
</RefSect1>
<RefSect1>
<Title>Description</Title>
<Para><StructName Role="typedef">pkc_trusted_key_t</StructName> is a class that expresses trust in a public key.
It is very much like a certificate, but with trust pre-established, rather
than based on a signature.
</Para>
<Para>This class has the <Literal>friend</Literal> class <StructName Role="typedef">pkc_trust_list_t</StructName>.
</Para>
<Para>The certificate manipulation routines are a C++ interface. C++ must be
used to perform direct certificate manipulation.
<!-- -->
<!-- -->
<!-- -->
<?sml-need 1.5i>
<!-- -->
</Para>
</RefSect1>
<RefSect1>
<Title>Related Information</Title>
<Para><!--no-op:  l-->
Classes:
<Filename MoreInfo="RefEntry">pkc_ca_key_usage.class(3sec)</Filename>,
<Filename MoreInfo="RefEntry">pkc_constraints.class(3sec)</Filename>,
<Filename MoreInfo="RefEntry">pkc_generic_key_usage.class(3sec)</Filename>,
<Filename MoreInfo="RefEntry">pkc_key_policies.class(3sec)</Filename>,
<Filename MoreInfo="RefEntry">pkc_key_policy.class(3sec)</Filename>,
<Filename MoreInfo="RefEntry">pkc_key_usage.class(3sec)</Filename>,
<Filename MoreInfo="RefEntry">pkc_name_subord_constraint.class(3sec)</Filename>,
<Filename MoreInfo="RefEntry">pkc_name_subord_constraints.class(3sec)</Filename>,
<Filename MoreInfo="RefEntry">pkc_name_subtree_constraint.class(3sec)</Filename>,
<Filename MoreInfo="RefEntry">pkc_name_subtree_constraints.class(3sec)</Filename>,
<Filename MoreInfo="RefEntry">pkc_pending_revocation.class(3sec)</Filename>,
<Filename MoreInfo="RefEntry">pkc_revocation.class(3sec)</Filename>,
<Filename MoreInfo="RefEntry">pkc_revocation_list.class(3sec)</Filename>,
<Filename MoreInfo="RefEntry">pkc_trust_list.class(3sec)</Filename>,
<Filename MoreInfo="RefEntry">pkc_trust_list_element.class(3sec)</Filename>.
</Para>
<Para>Functions:
<Filename MoreInfo="RefEntry">pkc_add_trusted_key(3sec)</Filename>,
<Filename MoreInfo="RefEntry">pkc_lookup_keys_in_trustlist(3sec)</Filename>,
<Filename MoreInfo="RefEntry">pkc_lookup_key_in_trustlist(3sec)</Filename>,
<Filename MoreInfo="RefEntry">pkc_check_cert_against_trustlist(3sec)</Filename>,
<Filename MoreInfo="RefEntry">pkc_revoke_certificate(3sec)</Filename>,
<Filename MoreInfo="RefEntry">pkc_revoke_certificates(3sec)</Filename>,
<!-- <Filename MoreInfo="RefEntry">pkc_prune_trustlist(3sec)</Filename>, -->
<Filename MoreInfo="RefEntry">pkc_delete_trustlist(3sec)</Filename>,
<Filename MoreInfo="RefEntry">pkc_copy_trustlist(3sec)</Filename>.
<!--no-op:  b-->
<!-- -->
<!-- -->
<!-- -->
<!-- -->
<!-- class pkc_trusted_key_t {-->
<!-- friend class pkc_trust_list_t;-->
<!-- // A class that expresses trust in a public-key.  Very much like a certificate,-->
<!-- // but with trust pre-established, rather than based on a signature.-->
<!-- -->
<!-- friend unsigned32 pkc_add_trusted_key(-->
<!--                          pkc_trust_list_t * trust_list,-->
<!--                          const pkc_trusted_key_t & key);-->
<!-- // Adds a key to a trustlist.-->
<!-- -->
<!-- friend unsigned32 pkc_lookup_keys_in_trustlist(-->
<!--                          pkc_trust_list_t * trust_list,-->
<!--                          const pkc_trusted_key_t ** key,-->
<!--                          size_t * key_count,-->
<!--                          const x500name & owner,-->
<!--                          utc_t * key_time,-->
<!--                          const pkc_generic_key_usage_t * usages);-->
<!-- // Retrieves keys for the specified principal for the specified usages -->
<!-- // that are valid at the specified time.  If usages is NULL, keys for any -->
<!-- // usage are returned; if key-time is NULL, keys for the current time are -->
<!-- // returned.-->
<!-- -->
<!-- friend unsigned32 pkc_lookup_key_in_trustlist(-->
<!--                          pkc_trust_list_t * trust_list,-->
<!--                          const pkc_trusted_key_t ** key,-->
<!-- 			 unsigned long key_id);-->
<!-- // Retrieves the specified key by index.-->
<!-- -->
<!-- friend unsigned32 pkc_check_cert_against_trustlist(-->
<!--                          pkc_trust_list_t * trust_list,-->
<!--                          const Certificate * cert,-->
<!--                          int revoked_certs_permitted);-->
<!-- // Attempt to add a certificate to a trust-list.  The routine will succeed only-->
<!-- // if the trust-list contains a key that can be used to verify the certificate.-->
<!-- // revoked_certs_permitted specifies whether it is permissible to add a -->
<!-- // certificate that appears on a verified CRL if there is a "window of validity"-->
<!-- // between the verifying key's start-time and its revocation time.-->
<!-- -->
<!-- //friend unsigned32 pkc_lookup_cert_in_trustlist(-->
<!-- //                         pkc_trust_list_t * trust_list,-->
<!-- //                         const pkc_trusted_key_t ** key,-->
<!-- //                         const x500name & issuer,-->
<!-- //			 const asn_integer & serial_number,-->
<!-- //                         trust_list_);-->
<!-- -->
<!-- friend unsigned32 pkc_revoke_certificate(pkc_trust_list_t * trust_list,-->
<!--                                          const x500name & issued_by,-->
<!--                                          const asn_integer & serial_no,-->
<!--                                          utc_t * invalidate_from);-->
<!-- // Revoke a single certificate.-->
<!-- -->
<!-- friend unsigned32 pkc_revoke_certificates(pkc_trust_list_t * trust_list,-->
<!--                                           const SignedCertificateList * crl);-->
<!-- // Revoke certificates based on a CRL.  If the signature on the CRL can-->
<!-- // be verified, it will be processed immediately.  If not, it will be saved-->
<!-- // and each certificate subsequently added will attempt to verify the-->
<!-- // CRL.  As soon as the CRL can be verified it will be applied.-->
<!-- -->
<!-- friend unsigned32 pkc_prune_trustlist(pkc_trust_list_t * trust_list,-->
<!--                          const utc_t * prune_before);-->
<!-- // Remove certificates that have expired at the given date (NULL means now).-->
<!-- -->
<!-- friend unsigned32 pkc_delete_trustlist(pkc_trust_list_t * trust_list);-->
<!-- // Delete a trust-list.-->
<!-- -->
<!-- friend unsigned32 pkc_copy_trustlist(-->
<!--                          const pkc_trust_list_t * input_trust_list,-->
<!--                          pkc_trust_list_t * output_trust_list);-->
<!-- // Copy a trust-list.-->
<!-- -->
<!-- -->
<!-- protected:-->
<!-- // Fields from the certificate:-->
<!--     utc_t start_date;-->
<!--     utc_t end_date;-->
<!--     pkc_ca_key_usage_t ca_usages;-->
<!--     pkc_key_usage_t user_usages;-->
<!--     pkc_key_policies_t policies;-->
<!--     pkc_constraints_t constraints;-->
<!-- -->
<!-- // Flags.  -->
<!-- // Is this entry trusted (a-priori)?-->
<!--     char trusted;-->
<!-- // Is it certified by another entry?-->
<!--     char certified;-->
<!-- -->
<!--     x500name certified_by;	// Name of the CA that certified this key.-->
<!--     asn_integer serial_number;	// Serial no of certifying certificate -->
<!-- -->
<!-- // The following fields are copied from the certifying key entry-->
<!--     utc_t certified_start_date;-->
<!--     utc_t certified_end_date;-->
<!-- -->
<!--     pkc_ca_key_usage_t certified_usages;-->
<!--     pkc_key_policies_t certified_policies;-->
<!--     pkc_constraints_t certified_constraints;-->
<!-- -->
<!--     char revoked; // non-zero if the certifying certificate -->
<!--                   // has been revoked-->
<!--     utc_t revocation_date; // Date from which certifier revocation -->
<!--                            // is effective.-->
<!-- -->
<!-- -->
<!--     unsigned long key_id;	// An ID identifying this Key entry-->
<!--     unsigned long ca_key_id;    // The ID of the key that certified this one.-->
<!--                                 // 0 means direct trust.-->
<!-- -->
<!--     unsigned long old_key_id;	// Temporary storage for use while copying-->
<!--     unsigned long old_ca_key_id;    -->
<!-- -->
<!-- public:-->
<!-- -->
<!--     SubjectPublicKeyInfo value;  /* mbg */-->
<!--     x500name owner;-->
<!-- -->
<!--     pkc_trusted_key_t(void);-->
<!--     pkc_trusted_key_t(utc_t startDate,-->
<!--                       utc_t endDate,-->
<!--                       pkc_ca_key_usage_t caUsages,-->
<!--                       pkc_key_usage_t userUsages,-->
<!--                       pkc_key_policies_t keyPolicies,-->
<!--                       pkc_constraints_t keyConstraints);-->
<!--     unsigned32 get_start_date(utc_t * start_date) const;-->
<!--     unsigned32 get_end_date(utc_t * start_date) const;-->
<!--     unsigned32 get_usages(pkc_key_usage_t * user_usages) const;-->
<!--     unsigned32 get_ca_usages(pkc_ca_key_usage_t * ca_usages) const;-->
<!--     unsigned32 get_key_policies(pkc_key_policies_t * policies) const;-->
<!--     unsigned32 get_constraints(pkc_constraints_t * constraints) const;-->
<!--     unsigned32 get_certifier(x500name & name) const;-->
<!--     unsigned32 get_certifier(pkc_trusted_key_t ** ca) const;-->
<!--     char valid_at(utc_t * time) const;-->
<!-- -->
<!--     pkc_trusted_key_t & operator = (const pkc_trusted_key_t & o);-->
<!-- -->
<!--     char may_certify(-->
<!--             const x500name & subject, -->
<!--             unsigned long usage = PKC_CAKEY_USAGE_KEY_CERT_SIGN) const;-->
<!-- -->
<!--     char may_certify(-->
<!--             const x500name & subject, -->
<!--             const pkc_ca_key_usage_t & usage) const;-->
<!-- -->
<!-- };-->
<!-- -->
<!-- -->
</Para>
</RefSect1>
<!--+ 11/27/96 19:46:25
    | tagMorph:  $Id: pkc_trusted_key.class.3sec,v 1.1.2.8 1996/12/17 21:06:55 damon Exp $
    | tagMorph library:  $Id: pkc_trusted_key.class.3sec,v 1.1.2.8 1996/12/17 21:06:55 damon Exp $
    | sml-to-docbook:  1.25
    +-->
</RefEntry>
