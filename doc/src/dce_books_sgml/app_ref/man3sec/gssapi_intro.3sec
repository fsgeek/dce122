<!--
# @OSF_COPYRIGHT@
# 
# 
# HISTORY
# $Log: gssapi_intro.3sec,v $
# Revision 1.1.2.7  1996/12/14  23:04:34  carrig
# 	{enh,R1.2.2}
# 	Arrays, Variable Lists
# 	[1996/12/14  22:57:57  carrig]
#
# Revision 1.1.2.6  1996/12/11  15:49:24  carrig
# 	{enh,R1.2.2}
# 	Tables
# 	[1996/12/11  15:49:06  carrig]
# 
# Revision 1.1.2.5  1996/12/10  21:40:55  carrig
# 	{enh,R1.2.2}
# 	Synopses
# 	[1996/12/10  21:40:06  carrig]
# 
# Revision 1.1.2.4  1996/12/07  20:28:12  carrig
# 	{enh,R1.2.2}
# 	VarLists, Tables
# 	[1996/12/07  20:19:57  carrig]
# 
# Revision 1.1.2.3  1996/12/05  22:04:29  wardr
# 	{edit,R1.2.2}
# 	Fixed initial conversion problems
# 	[1996/12/05  21:58:25  wardr]
# 
# Revision 1.1.2.2  1996/12/01  20:19:38  weir
# 	Removed thinsp entities
# 	[1996/12/01  20:13:12  weir]
# 
# Revision 1.1.2.1  1996/11/29  17:55:38  weir
# 	Initial submission
# 	[1996/11/29  17:47:56  weir]
# 
# $EndLog$
-->
<!-- Fragment document type declaration subset:
ArborText, Inc., 1988-1993, v.4001
<!DOCTYPE Book PUBLIC "-//Davenport//DTD DocBook V2.4//EN" [
]>
-->
<RefEntry Id="DCEADR.MAN437.rsml.1">
<RefMeta>
<RefEntryTitle>gssapi_intro</RefEntryTitle>
<ManVolNum>3sec</ManVolNum>
</RefMeta>
<RefNameDiv>
<RefName><Literal>gssapi_intro</Literal></RefName>
<RefPurpose>Generic security service application programming
interface </RefPurpose>
</RefNameDiv>
<!-- COPYRIGHT NOTICE-->
<!-- Copyright (c) 1990, 1991, 1992, 1993, 1994 Open Software Foundation, Inc.-->
<!-- ALL RIGHTS RESERVED (DCE).  See the file named COPYRIGHT.DCE for-->
<!-- the full copyright text.-->
<!---->
<!---->
<!-- OLD HISTORY-->
<!-- Revision 1.1.6.2  1996/11/19  18:56:24  wardr-->
<!-- 	{edit,R1.2.2}-->
<!-- 	Init capped heads and added PDG pointer-->
<!-- 	[1996/11/19  18:49:29  wardr]-->
<!---->
<!-- Revision 1.1.6.1  1996/05/13  19:03:14  wardr-->
<!-- 	{enh,R1.2.2}-->
<!-- 	Removed changebars-->
<!-- 	[1996/05/13  18:56:46  wardr]-->
<!-- -->
<!-- Revision 1.1.4.2  1996/02/07  20:17:57  rcb-->
<!-- 	R1.2.1: editorial pass following HP revision-->
<!-- 	[1996/02/07  20:13:11  rcb]-->
<!-- -->
<!-- Revision 1.1.4.1  1996/01/28  22:16:43  weir-->
<!-- 	CR 13293: miscellaneous HP work-->
<!-- 	[1996/01/28  22:15:41  weir]-->
<!-- -->
<!-- Revision 1.1.2.8  1995/06/21  18:24:19  buckler-->
<!-- 	More 1.1 edits.-->
<!-- 	[1995/06/21  17:39:05  buckler]-->
<!-- -->
<!-- Revision 1.1.2.7  1995/06/21  13:20:59  buckler-->
<!-- 	More 1.1 edits.-->
<!-- 	[1995/06/19  21:20:21  buckler]-->
<!-- -->
<!-- Revision 1.1.2.6  1995/06/15  19:27:37  buckler-->
<!-- 	1.1 edits and Prentice Hall reformat-->
<!-- 	[1995/06/15  16:24:05  buckler]-->
<!-- -->
<!-- 	1.1 edits and Prentice Hall reformat-->
<!-- -->
<!-- Revision 1.1.2.5  1994/11/03  23:47:58  neilson-->
<!-- 	Substituted macros for book names in cross refs.-->
<!-- 	[1994/11/03  01:39:45  neilson]-->
<!-- -->
<!-- Revision 1.1.2.4  1994/09/22  19:42:45  hal-->
<!-- 	{def, 10326, R1.1}-->
<!-- 	Fixed name of reference page to conform to xxxx_intro format.-->
<!-- 	[1994/09/22  19:41:48  hal]-->
<!-- -->
<!-- Revision 1.1.2.3  1994/09/15  17:21:09  pfa-->
<!-- 	added technical review/editorial comments-->
<!-- 	[1994/09/15  17:17:30  pfa]-->
<!-- -->
<!-- 	No changes.-->
<!-- 	[1994/08/26  20:28:25  pfa]-->
<!-- -->
<!-- Revision 1.1.2.2  1994/06/13  17:15:18  devobj-->
<!-- 	cr10872 - fix copyright-->
<!-- 	[1994/06/13  16:50:25  devobj]-->
<!-- -->
<!-- Revision 1.1.2.1  1994/05/16  19:28:30  rjohnson-->
<!-- 	Changes made: Renamed to gssapi_intro.3sec-->
<!-- 	File name: app_ref/man3sec/gssapi_intro.3sec-->
<!-- 	CR#: 10577-->
<!-- 	[1994/05/16  19:27:48  rjohnson]-->
<!-- -->
<!-- Revision 1.1.2.2  1994/05/11  17:14:10  rjohnson-->
<!-- 	Updated to include CR#10577.-->
<!-- 	[1994/05/11  17:13:27  rjohnson]-->
<!-- -->
<!-- Revision 1.1.2.1  1994/05/09  10:57:51  rjohnson-->
<!-- 	Changes made: New intro reference page for GSSAPI, R1.1.-->
<!-- 	File name: app_ref/man3sec/intro_gssapi.3sec-->
<!-- 	[1994/05/03  15:43:57  rjohnson]-->
<!-- -->
<!-- -->
<!-- -->
<!-- HP History:-->
<!--	HP revision /main/HPDCE02/1  1995/09/18  18:03 UTC  millett-->
<!-- 	16388 fixes-->
<!-- -->
<!--	HP revision /main/millett_doc/1  1995/09/18  17:57 UTC  millett-->
<!-- 	16388: rps changes-->
<!-- -->
<!--	HP revision /main/1  1995/04/03  22:21 UTC  arh-->
<!-- 	Add OSF doc sources.-->
<!-- -->
<!-- -->
<!-- -->
<!-- -->
<!-- -->
<!-- .iX "gssapi" "data structures"-->
<RefSect1>
<Title>Description</Title>
<Para>This introduction includes general information about the generic security
service application programming interface (GSSAPI) defined in Internet
RFC 1508, <Symbol Role="Variable">Generic Security Service Application Programming
Interface</Symbol>, and RFC 1509, <Symbol Role="Variable">Generic Security Service API : C-bindings</Symbol>.  
It also includes an overview of error handling, data types,
and calling conventions, including the following:
</Para>
<ItemizedList>
<ListItem>
<Para>Integer types
</Para>
</ListItem>
<ListItem>
<Para>String and similar data
</Para>
</ListItem>
<ListItem>
<Para>Object identifiers (OIDs)
</Para>
</ListItem>
<ListItem>
<Para>Object identifier sets (OID sets)
</Para>
</ListItem>
<ListItem>
<Para>Credentials
</Para>
</ListItem>
<ListItem>
<Para>Contexts
</Para>
</ListItem>
<ListItem>
<Para>Authentication tokens
</Para>
</ListItem>
<ListItem>
<Para>Major status values
</Para>
</ListItem>
<ListItem>
<Para>Minor status values
</Para>
</ListItem>
<ListItem>
<Para>Names
</Para>
</ListItem>
<ListItem>
<Para>Channel bindings
</Para>
</ListItem>
<ListItem>
<Para>Optional parameters
</Para>
</ListItem>
</ItemizedList>
<RefSect2>
<Title>General Information</Title>
<Para>The GSSAPI provides security services to applications using peer-to-peer
communications (instead of DCE-secure RPC).  Using DCE GSSAPI routines,
applications can perform the following operations:
</Para>
<ItemizedList>
<ListItem>
<Para>Enabling an application to determine another application's user
</Para>
</ListItem>
<ListItem>
<Para>Enabling an application to delegate access rights to another application
</Para>
</ListItem>
<ListItem>
<Para>Applying security services, such as confidentiality and integrity, on a
per-message basis
</Para>
</ListItem>
</ItemizedList>
<Para>GSSAPI represents a secure connection between two communicating
applications with a data structure called a <Replaceable>security context</Replaceable>.  The
application that establishes the secure connection is called the <Replaceable>context
indicator</Replaceable> or simply <Replaceable>indicator</Replaceable>.  The context initiator is like a DCE
RPC client.  The application that accepts the secure connection is the
<Replaceable>context acceptor</Replaceable> or simply <Replaceable>acceptor</Replaceable>.  The context acceptor is
like a DCE RPC server.
</Para>
<Para>There are four stages involved in using the GSSAPI, as follows:
</Para>
<OrderedList>
<ListItem>
<Para>The context initiator acquires a credential with which it can
prove its identity to other processes.  Similarly, the context acceptor
cquires a credential to enable it to accept a security context.  Either
application may omit this credential acquistion and use their default
credentials in subsequent stages.  See the
section on credentials for more information.
<?sml-break></Para>
<Para><?sml-need 4>The applications use credentials to establish their global identity.  The
global identity can be, but is not necessarily, related to the local
user name under which the application is running.  Credentials can
contain either of the following:
</Para>
<ItemizedList>
<ListItem>
<Para>Login context
</Para>
<Para>The login context includes a principal's network credentials, as well as
other account information.
</Para>
</ListItem>
<ListItem>
<Para>Principal name and a key
</Para>
<Para>The key corresponding to the principal name must be registered with the
DCE security registration in a key table.  A set of GSSAPI
routines enables applications to register and use principal names.
</Para>
</ListItem>
</ItemizedList>
</ListItem>
<ListItem>
<Para>The communicating applications establish a joint security context
by exchanging authentication tokens.
</Para>
<Para>The security context is a pair of GSSAPI data structures that contain
information that is shared between the communicating applications.  The
information describes the state of each application.  This security
context is required for per-message security services.
</Para>
<Para>To establish a security context, the context initiator
calls the <Function>gss_init_sec_context()</Function> routine to get a <Replaceable>token</Replaceable>.  The
token is cryptographically protected, opaque data.  The
context initiator transfers the token to the
context acceptor, which in turn passes the token to the
<Function>gss_accept_sec_context()</Function> routine to decode and extract the shared
information.
</Para>
<Para>As part of the establishing the the security context, the context initiator
is authenticated to the  context acceptor.  The context initiator can
require the context acceptor to authenticate itself in return.
</Para>
<Para>The context initiator can <Replaceable>delegate</Replaceable> rights to allow the context acceptor to
act as its agent.  Delegation means the context initiator gives the context
acceptor the ability  to initiate additional security contexts as an agent
of the context initiator.  To delegate, the context initiator sets a flag
on the <Function>gss_init_sec_context()</Function> routine indicating that it wants to
delegate and sends the returned token in the normal way to the context
acceptor.  The acceptor passes this token to the <Function>gss_accept_sec_context()</Function> 
routine, which generates a delegated credential.  The context acceptor
can use the credential to initiate additional security contexts.
</Para>
</ListItem>
<ListItem>
<Para>The applications exchange protected messages and data.
</Para>
<Para>The applications can call GSSAPI routines to protect data exchanged in
messages.  The application sends a protected message by calling the
appropriate GSSAPI routine to do the following:
</Para>
<ItemizedList>
<ListItem>
<Para>Apply protection
</Para>
</ListItem>
<ListItem>
<Para>Bind the message to the appropriate security context
</Para>
</ListItem>
</ItemizedList>
<Para>The application can then send the resulting information to the peer
application.
</Para>
<Para>The application that receives the message passes the received data to a
GSSAPI routine, which removes the protection and validates the data.
</Para>
<Para>GSSAPI treats application data as arbitrary octet strings.  The
GSSAPI per-message security services can provide either of the
following:
<?sml-break><?sml-need 3></Para>
<ItemizedList>
<ListItem>
<Para>Integrity and authentication of data origin
</Para>
</ListItem>
<ListItem>
<Para>Confidentiality, integrity, and authentication of data origin
</Para>
</ListItem>
</ItemizedList>
</ListItem>
<ListItem>
<Para>When the applications have finished communicating, either one may instruct
GSSAPI to delete the security context.
</Para>
</ListItem>
</OrderedList>
<Para>There are two sets of GSSAPI routines, as follows:
</Para>
<ItemizedList>
<ListItem>
<Para>Standard GSSAPI routines, which are defined in the Internet RFC 1508,
<Symbol Role="Variable">Generic Security Service Application Programming Interface</Symbol>, and
RFC 1509, <Symbol Role="Variable">Generic Security Service API : C-bindings</Symbol>.
These routines have the prefix <Literal>gss_</Literal>.
</Para>
</ListItem>
<ListItem>
<Para>OSF DCE extensions to the GSSAPI routines.  These are additional routines
that enable an application to use DCE security services.  These routines
have the prefix <Literal>gssdce_</Literal>.
</Para>
</ListItem>
</ItemizedList>
<Para>The following sections provide an overview of the GSSAPI error handling
and data types.
</Para>
</RefSect2>
<RefSect2>
<Title>Error Handling</Title>
<Para>Each GSSAPI routine returns two types of status values:
</Para>
<ItemizedList>
<ListItem>
<Para>Major status values, which are generic API routine errors or calling errors
defined in RFC 1509. 
</Para>
</ListItem>
<ListItem>
<Para>Minor status values, which indicate DCE-specific errors.
</Para>
</ListItem>
</ItemizedList>
<Para>If a routine has output parameters that contain pointers for storage
allocated by the routine, the output parameters will always contain a
valid pointer even if the routine returns an error. 
If no storage was allocated, the routine sets the pointer to
NULL and sets any length fields associated with the pointers (such as
in the <Literal>gss_buffer_desc</Literal> structure) to 0 (zero).
</Para>
<Para>Minor status values usually contain more detailed information about the
error.  They are not, however, portable between GSSAPI implementations. 
When designing portable applications, use major status values for
handling errors.  Use minor status values to debug applications and to
display error and error-recovery information to users.
</Para>
</RefSect2>
<RefSect2>
<Title>GSSAPI Data Types</Title>
<Para>This section provides an overview of the GSSAPI data types and their
definitions.
</Para>
<Para><Literal>Integer Types</Literal>
</Para>
<Para>The GSSAPI defines the following integer data type:
</Para>
<InformalExample>
<Para><ProgramListing>
<UserInput>
OM_uint32	32-bit unsigned integer
</UserInput>
</ProgramListing></Para>
</InformalExample>
<Para>This integer data type is a portable data type that the GSSAPI routine
definitions use for guaranteed minimum bit-counts.   
</Para>
<Para><Literal>String and Similar Data</Literal>
</Para>
<Para>Many of the GSSAPI routines take arguments and return values that
describe contiguous multiple-byte data, such as opaque data and
character strings.  Use the <StructName Role="typedef">gss_buffer_t</StructName> data type, which is a
pointer to the buffer descriptor <Literal>gss_buffer_desc</Literal>, to pass the data
between the GSSAPI routines and applications.
</Para>
<Para>The  <StructName Role="typedef">gss_buffer_t</StructName> data type has the following structure:
</Para>
<InformalExample>
<Para><ProgramListing>typedef struct gss_buffer_desc_struct {
	size_t  length;
	void    *value;
} gss_buffer_desc, *gss_buffer_t;
</ProgramListing></Para>
</InformalExample>
<Para>The <Replaceable>length</Replaceable> field contains the total number of bytes in the data and the
<Replaceable>value</Replaceable> field contains a pointer to the actual data. 
</Para>
<Para>When using the <StructName Role="typedef">gss_buffer_t</StructName> data type, the GSSAPI routine allocates
storage for any data it passes to the
application.  The calling
application must allocate the <Literal>gss_buffer_desc</Literal> object.  It can
initialize unused <Literal>gss_buffer_desc</Literal> objects with the value
<Literal>GSS_C_EMPTY_BUFFER</Literal>.  To free the storage, the application calls
the <Function>gss_release_buffer()</Function> routine.
</Para>
<Para><Literal>Object Identifier</Literal>
</Para>
<Para>Applications use the <Literal>gss_OID</Literal> data type to choose a security
mechanism, either DCE security or Kerberos, and to specify name types.  
Select a security mechanism by using the following two OIDs:
<!--no-op:  l-->
</Para>
<ItemizedList>
<ListItem>
<Para>To use DCE security, specify either 
<Literal>GSSDCE_C_OID_DCE_KRBV5_DES</Literal> or <Literal>GSS_C_NULL_OID</Literal>.
</Para>
</ListItem>
<ListItem>
<Para>To use Kerberos Version 5, specify <Literal>GSSDCE_C_OID_KRBV5_DES</Literal>.
</Para>
</ListItem>
</ItemizedList>
<!--no-op:  b-->
<Para>Use of the default security mechanisms, specified by the constant
<Literal>GSS_C_NULL_OID</Literal>, helps to ensure the portability of
the application.
</Para>
<Para>The  <Literal>gss_OID</Literal> data type contains tree-structured
values defined by ISO and has the following structure:
</Para>
<InformalExample>
<Para><ProgramListing>typedef struct gss_OID_desc_struct {
	OM_uint32 length;
	void      *elements;
}  gss_OID_desc, *gss_OID;
</ProgramListing></Para>
</InformalExample>
<Para>The <Replaceable>elements</Replaceable> field of the structure points to the first byte of an octet
string containing the ASN.1 BER encoding of the value of the
<Literal>gss_OID</Literal> data type.  The <Replaceable>length</Replaceable> field contains the number of bytes
in the value.  
</Para>
<Para>The <Literal>gss_OID_desc</Literal> values returned from the GSSAPI are read-only
values.  The application should not try to deallocate them.
</Para>
<Para><Literal>Object Identifier Sets</Literal>
</Para>
<Para>The <Literal>gss_OID_set</Literal> data type represents one or more object
identifiers.  The values of the <Literal>gss_OID_set</Literal> data type
are used to do the following:
</Para>
<ItemizedList>
<ListItem>
<Para>Report the available mechanisms supported by GSSAPI
</Para>
</ListItem>
<ListItem>
<Para>Request specific mechanisms
</Para>
</ListItem>
<ListItem>
<Para>Indicate which mechanisms a credential supports
</Para>
</ListItem>
</ItemizedList>
<Para>The <Literal>gss_OID_set</Literal> data type has the following structure:
</Para>
<InformalExample>
<Para><ProgramListing>typedef struct gss_OID_set_desc_struct {
	int     count;
	gss_OID	elements;
} gss_OID_set_desc, *gss_OID_set;
</ProgramListing></Para>
</InformalExample>
<Para>The <Replaceable>count</Replaceable> field contains the number of OIDs in the set.  The 
<Replaceable>elements</Replaceable> field is a pointer to an array of <Literal>gss_oid_desc</Literal> objects, 
each describing a single OID.  The application calls the
<Function>gss_release_oid_set()</Function> routine to deallocate storage associated with
the <Literal>gss_OID_set</Literal> values that the GSSAPI routines return to the
application.
</Para>
<Para><?sml-need 6><Literal>Credentials</Literal>
</Para>
<Para>Credentials establish, or prove, the identity of an application or other
principal.
</Para>
<Para>The <StructName Role="typedef">gss_cred_id_t</StructName> data type is an atomic data type that identifies a GSSAPI
credential data structure.
</Para>
<Para><Literal>Contexts</Literal>
</Para>
<Para>The security context is a pair of GSSAPI data structures that contain
information shared between the communicating applications.  The
information describes the cryptographic state of each application.  This
security context is required for per-message security services and is
created by a successful authentication exchange.
</Para>
<Para>The <StructName Role="typedef">gss_ctx_id_t</StructName> data type contains an atomic value that identifies
one end of a GSSAPI security context.  The data type is opaque to the
caller. 
</Para>
<Para><Literal>Authentication Tokens</Literal>
</Para>
<Para>GSSAPI uses tokens to maintain the synchronization between the 
applications sharing a security context.  The token is a cryptographically
protected bit string generated by DCE security at one end of the GSSAPI
security context for use by the peer application at the other end of the
security context.  The data type is opaque to the caller.
</Para>
<Para>The applications use the <StructName Role="typedef">gss_buffer_t</StructName>
data type as tokens to GSSAPI routines.
</Para>
<Para><Literal>Major Status Values</Literal>
</Para>
<Para>GSSAPI routines return GSS status codes as their <Literal>OM_uint32</Literal>
function value.  These codes indicate either generic API routine errors
or calling errors.
</Para>
<Para>A GSS status code can indicate a single, fatal generic API error from the
routine and a single calling error.  Additional status information can
also be contained in the GSS status code.  The errors are encoded into a
32-bit GSS status code, as follows:
</Para>
<InformalExample>
<Para><ProgramListing>MSB						   LSB
+---------------------------------------------------+
| Calling Error | Routine Error | Supplementary Info|
+---------------------------------------------------+
Bit 31	      24 23           16 15                 0
</ProgramListing></Para>
</InformalExample>
<Para>If a GSSAPI routine returns a GSS status code whose upper 16 bits contain
a nonzero value, the call failed.  If the calling error field is
nonzero, the context initiator's use of the routine was in error.  In
addition, the routine can indicate additional information by setting
bits in the supplementary information field of the status code.  The
tables that follow describe the routine errors, calling errors, and
supplementary information status bits and their meanings.
</Para>
<Para><?sml-need 16>The following table lists the GSSAPI routine errors and their meanings:
<?sml-space>
<!--no-op:  l-->
</Para>
<!-- .TB "GSSAPI Routine Errors"-->
<InformalTable Frame="All" Remap="center" Orient="Port" role="page-wide">
<TGroup Rowsep="0" Colsep="0" Cols="3">
<ColSpec Rowsep="1" Colsep="1" Align="Left" Colwidth="3*" Colname="col1" Colnum="1">
<ColSpec Rowsep="1" Colsep="1" Align="Left" Colwidth="1*" Colname="col2" Colnum="2">
<ColSpec Rowsep="1" Align="Left" Colwidth="3*" Colname="col3" Colnum="3">
<thead>
<Row>
<Entry rowsep="1" colsep="1"><Literal>Name</Literal></Entry>
<Entry rowsep="1" colsep="1"><Literal>Field Value</Literal></Entry>
<Entry rowsep="1" colsep="1"><Literal>Meaning</Literal></Entry>
</Row>
</thead>
<tbody>
<Row>
<Entry><Literal>GSS_S_BAD_MECH</Literal></Entry>
<Entry>1</Entry>
<Entry>The required mechanism is unsupported.
</Entry>
</Row>
<Row>
<Entry><Literal>GSS_S_NAME</Literal></Entry>
<Entry>2</Entry>
<Entry>The name passed is invalid.
</Entry>
</Row>
<Row>
<Entry><Literal>GSS_S_NAMETYPE</Literal></Entry>
<Entry>3</Entry>
<Entry>The name passed is unsupported.
</Entry>
</Row>
<Row>
<Entry><Literal>GSS_S_BAD_BINDINGS</Literal></Entry>
<Entry>4</Entry>
<Entry>The channel bindings are incorrect.
</Entry>
</Row>
<Row>
<Entry><Literal>GSS_S_BAD_STATUS</Literal></Entry>
<Entry>5</Entry>
<Entry>A status value was invalid.
</Entry>
</Row>
<Row>
<Entry><Literal>GSS_S_BAD_SIG</Literal></Entry>
<Entry>6</Entry>
<Entry>A token had an invalid signature.
</Entry>
</Row>
<Row>
<Entry><Literal>GSS_S_NO_CRED</Literal></Entry>
<Entry>7</Entry>
<Entry>No credentials were supplied.
</Entry>
</Row>
<Row>
<Entry><Literal>GSS_S_NO_CONTEXT</Literal></Entry>
<Entry>8</Entry>
<Entry>No context has been established.
</Entry>
</Row>
<Row>
<Entry><Literal>GSS_S_DEFECTIVE_TOKEN</Literal></Entry>
<Entry>9</Entry>
<Entry>A token was invalid.
</Entry>
</Row>
<Row>
<Entry><Literal>GSS_S_DEFECTIVE _CREDENTIAL</Literal></Entry>
<Entry>10</Entry>
<Entry>A credential was invalid.
</Entry>
</Row>
<Row>
<Entry><Literal>GSS_S_CREDENTIALS _EXPIRED</Literal></Entry>
<Entry>11</Entry>
<Entry>The referenced credentials expired.
</Entry>
</Row>
<Row>
<Entry><Literal>GSS_S_CONTEXT_EXPIRED</Literal></Entry>
<Entry>12</Entry>
<Entry>The context expired.
</Entry>
</Row>
<Row>
<Entry><Literal>GSS_S_FAILURE</Literal></Entry>
<Entry>13</Entry>
<Entry>The routine failed.  Check minor status codes.
</Entry>
</Row>
</TBody>
</TGroup>
</InformalTable>
<?sml-space>
<Para><?sml-need 12>The following table lists the calling error values and their meanings:
<?sml-space></Para>
<!-- .TB "Calling Errors"-->
<InformalTable Frame="All" Remap="center" Orient="Port" role="page-wide">
<TGroup Rowsep="0" Colsep="0" Cols="3">
<ColSpec Rowsep="1" Colsep="1" Align="Left" Colwidth="3.2*" Colname="col1" Colnum="1">
<ColSpec Rowsep="1" Colsep="1" Align="Left" Colwidth="1*" Colname="col2" Colnum="2">
<ColSpec Rowsep="1" Align="Left" Colwidth="3*" Colname="col3" Colnum="3">
<TBody>
<Row>
<Entry colsep="1" rowsep="1"><Literal>Name</Literal></Entry>
<Entry colsep="1" rowsep="1"><Literal>Field Value</Literal></Entry>
<Entry colsep="1" rowsep="1"><Literal>Meaning</Literal></Entry>
</Row>
<Row>
<Entry Rowsep="1">Name</Entry>
<Entry Rowsep="1">Value</Entry>
<Entry Rowsep="1">Meaning</Entry>
</Row>
<Row>
<Entry><Literal>GSS_S_CALL_INACCESSIBLE _READ</Literal></Entry>
<Entry>1</Entry>
<Entry>Could not read a required input parameter.
</Entry>
</Row>
<Row>
<Entry><Literal>GSS_S_CALL_INACCESSIBLE _WRITE</Literal></Entry>
<Entry>2</Entry>
<Entry>Could not write a required output parameter.
</Entry>
</Row>
<Row>
<Entry><Literal>GSS_S_BAD_STRUCTURE</Literal></Entry>
<Entry>3</Entry>
<Entry>A parameter was incorrectly structured.
</Entry>
</Row>
</TBody>
</TGroup>
</InformalTable>
<?sml-space>
<Para><?sml-need 15>The following table lists the supplementary bits and their meanings.
<?sml-space></Para>
<!-- .TB "Supplementary Information Status Bits"-->
<InformalTable Frame="All" Remap="center" Orient="Port">
<TGroup Rowsep="0" Colsep="0" Cols="3">
<ColSpec Rowsep="1" Colsep="1" Align="Left" Colwidth="1.2*" Colname="col1" Colnum="1">
<ColSpec Rowsep="1" Colsep="1" Align="Left" Colwidth=".5*" Colname="col2" Colnum="2">
<ColSpec Rowsep="1" Align="Left" Colwidth="1*" Colname="col3" Colnum="3">
<TBody>

<Row>
<Entry Rowsep="1"><Literal>Name</Literal></Entry>
<Entry Rowsep="1"><Literal>Bit Number</Literal></Entry>
<Entry Rowsep="1"><Literal>Meaning</Literal></Entry>
</Row>
<Row>
<Entry><Literal>GSS_S_CONTINUE_NEEDED</Literal></Entry>
<Entry>0 (LSB)</Entry>
<Entry>Call the routine again to complete its function.
</Entry>
</Row>
<Row>
<Entry><Literal>GSS_S_DUPLICATE_TOKEN</Literal></Entry>
<Entry>1</Entry>
<Entry>The token was a duplicate of an earlier token.
</Entry>
</Row>
<Row>
<Entry><Literal>GSS_S_OLD_TOKEN</Literal></Entry>
<Entry>2</Entry>
<Entry>The token's validity period expired; the routine cannot verify that
the token is not a duplicate of an earlier token.
</Entry>
</Row>
<Row>
<Entry><Literal>GSS_S_UNSEQ_TOKEN</Literal></Entry>
<Entry>3</Entry>
<Entry>A later token has been processed.
</Entry>
</Row>
</TBody>
</TGroup>
</InformalTable>
<?sml-space>
<Para><!--no-op:  b-->
All <Literal>GSS_S_</Literal> symbols equate to complete <Literal>OM_uint32</Literal> status codes,
rather than to bitfield values.  For example, the actual value of
<Literal>GSS_S_BAD_NAMETYPE</Literal> (value 3 in the routine error field) is 3 &lt;&lt; 16.
</Para>
<Para>The major status code <Literal>GSS_S_FAILURE</Literal> indicates that DCE
security detected an error for which no major status code is available.
Check the minor status code for details about the error.  See the
section on minor status values for more information.
</Para>
<Para>The GSSAPI provides the following three macros:
</Para>
<ItemizedList>
<ListItem>
<Para><Literal>GSS_CALLING_ERROR()</Literal>
</Para>
</ListItem>
<ListItem>
<Para><Function>GSS_ROUTINE_ERROR()</Function>
</Para>
</ListItem>
<ListItem>
<Para><Function>GSS_SUPPLEMENTARY_INFO()</Function>
</Para>
</ListItem>
</ItemizedList>
<Para>Each macro takes a GSS status code and masks all but the relevant
field.  For example, when you use the <Function>GSS_ROUTINE_ERROR()</Function> macro on a
status code, it returns a value.  The value of the macro is arrived at
by using only the routine errors field and zeroing the values of the
calling error and the supplementary information fields.
</Para>
<Para>An additional macro, <Function>GSS_ERROR()</Function>, lets you determine whether the
status code indicated a calling or routine error.  If the status code
indicated a calling or routine error, the macro returns a nonzero value.
If no calling or routine error is indicated, the routine
returns a 0 (zero).
</Para>
<Note>
<Para>At times, a GSSAPI routine that is unable to access data can generate a
platform-specific signal, instead of returning a
<Literal>GSS_S_CALL_INACCESSIBLE_READ</Literal> or 
<Literal>GSS_S_CALL_INACCESSIBLE_WRITE</Literal>
status value.
</Para>
</Note>
<Para><Literal>Minor Status Values</Literal>
</Para>
<Para>The GSSAPI routines return a <Symbol Role="Variable">minor_status</Symbol> parameter to indicate
errors from either DCE security or Kerberos.  The parameter can contain a
single error, indicated by an <Literal>OM_uint32</Literal> value.  The <Literal>OM_uint32</Literal>
data type is equivalent to the DCE data type <Literal>error_status_t</Literal> and can
contain any DCE-defined error.
</Para>
<Para><Literal>Names</Literal>
</Para>
<Para>Names identify principals.  The GSSAPI authenticates the relationship
between a name and the principal claiming the name.
</Para>
<Para>Names are represented in the following two forms:
</Para>
<ItemizedList>
<ListItem>
<Para>A printable form, for presentation to an application
</Para>
</ListItem>
<ListItem>
<Para>An internal, canonical form that is used by the API and is opaque to
applications
</Para>
</ListItem>
</ItemizedList>
<Para>The <Function>gss_import_name()</Function> and <Function>gss_display_name()</Function> routines convert
names between their printable form and their <StructName Role="typedef">gss_name_t</StructName> data type.
GSSAPI supports only DCE principal names, which are identified by the constant
OID, <Literal>GSSCDE_C_OID_DCENAME</Literal>.
</Para>
<Para>The <Function>gss_compare_names()</Function> routine compares internal form names.
</Para>
<Para><Literal>Channel Bindings</Literal>
</Para>
<Para>You can define and use channel bindings to associate the security
context with the communications channel that carries the context.
Channel bindings are communicated to the GSSAPI by using the following
structure:
</Para>
<InformalExample>
<Para><ProgramListing>typedef struct gss_channel_binding_struct {
	OM_uint32       initiator_addrtype;
	gss_buffer_desc	initiator_address;
	OM_uint32       acceptor_addrtype;
	gss_buffer_desc aceptor_address;
	gss_buffer_desc application_data;
} *gss_channel_bindings_t;
</ProgramListing></Para>
</InformalExample>
<Para>Use the <Replaceable>initiator_addrtype</Replaceable> and <Replaceable>acceptor_addrtype</Replaceable> fields to
initiate the type of addresses contained in the <Replaceable>initiator_address</Replaceable>
and <Replaceable>acceptor_address</Replaceable> buffers.  The address types and their 
<Literal>addrtype</Literal> values are as follows:
</Para>
<VariableList>
<VarListEntry>
<Term>Unspecified</Term>
<ListItem>
<Para><Literal>GSS_C_AF_UNSPEC</Literal>
</Para>
</ListItem>
</VarListEntry>
<VarListEntry>
<Term>Host-local</Term>
<ListItem>
<Para><Literal>GSS_C_AF_LOCAL</Literal>
</Para>
</ListItem>
</VarListEntry>
<VarListEntry role="linebreak">
<Term>DARPA Internet</Term>
<ListItem>
<Para><Literal>GSS_C_AF_INET</Literal>
</Para>
</ListItem>
</VarListEntry>
<VarListEntry role="linebreak">
<Term>ARPAnet IMP</Term>
<ListItem>
<Para><Literal>GSS_C_AF_IMPLINK</Literal>
</Para>
</ListItem>
</VarListEntry>
<VarListEntry role="linebreak">
<Term>pup protocols (for example, BSP)</Term>
<ListItem>
<Para><Literal>GSS_C_AF_PUP</Literal>
</Para>
</ListItem>
</VarListEntry>
<VarListEntry role="linebreak">
<Term>MIT CHAOS protocol</Term>
<ListItem>
<Para><Literal>GSS_C_AF_CHAOS</Literal>
</Para>
</ListItem>
</VarListEntry>
<VarListEntry>
<Term>XEROX NS</Term>
<ListItem>
<Para><Literal>GSS_C_AF_NS</Literal>
</Para>
</ListItem>
</VarListEntry>
<VarListEntry>
<Term>nbs</Term>
<ListItem>
<Para><Literal>GSS_C_AF_NBS</Literal>
</Para>
</ListItem>
</VarListEntry>
<VarListEntry>
<Term>ECMA</Term>
<ListItem>
<Para><Literal>GSS_C_AF_ECMA</Literal>
</Para>
</ListItem>
</VarListEntry>
<VarListEntry role="linebreak">
<Term>datakit protocols</Term>
<ListItem>
<Para><Literal>GSS_C_AF_DATAKIT</Literal>
</Para>
</ListItem>
</VarListEntry>
<VarListEntry role="linebreak">
<Term>CCITT protocols (for example, X.25)</Term>
<ListItem>
<Para><Literal>GSS_C_AF_CCITT</Literal>
</Para>
</ListItem>
</VarListEntry>
<VarListEntry>
<Term>IBM SNA</Term>
<ListItem>
<Para><Literal>GSS_C_AF_SNA</Literal>
</Para>
</ListItem>
</VarListEntry>
<VarListEntry role="linebreak">
<Term>Digital DECnet</Term>
<ListItem>
<Para><Literal>GSS_C_AF_DECnet</Literal>
</Para>
</ListItem>
</VarListEntry>
<VarListEntry role="linebreak">
<Term>Direct data link interface</Term>
<ListItem>
<Para><Literal>GSS_C_AF_DLI</Literal>
</Para>
</ListItem>
</VarListEntry>
<VarListEntry>
<Term>LAT</Term>
<ListItem>
<Para><Literal>GSS_C_AF_LAT</Literal>
</Para>
</ListItem>
</VarListEntry>
<VarListEntry role="linebreak">
<Term>NSC Hyperchannel</Term>
<ListItem>
<Para><Literal>GSS_C_AF_HYLINK</Literal>
</Para>
</ListItem>
</VarListEntry>
<VarListEntry>
<Term>AppleTalk</Term>
<ListItem>
<Para><Literal>GSS_C_AF_APPLETALK</Literal>
</Para>
</ListItem>
</VarListEntry>
<VarListEntry role="linebreak">
<Term>BISYNC 2780/3780</Term>
<ListItem>
<Para><Literal>GSS_C_AF_BSC</Literal>
</Para>
</ListItem>
</VarListEntry>
<VarListEntry role="linebreak">
<Term>Distributed system services</Term>
<ListItem>
<Para><Literal>GSS_C_AF_DSS</Literal>
</Para>
</ListItem>
</VarListEntry>
<VarListEntry>
<Term>OSI TP4</Term>
<ListItem>
<Para><Literal>GSS_C_AF_OSI</Literal>
</Para>
</ListItem>
</VarListEntry>
<VarListEntry>
<Term>X25</Term>
<ListItem>
<Para><Literal>GSS_C_AF_X25</Literal>
</Para>
</ListItem>
</VarListEntry>
<VarListEntry role="linebreak">
<Term>No address specified</Term>
<ListItem>
<Para><Literal>GSS_C_AF_NULLADDR</Literal>
</Para>
</ListItem>
</VarListEntry>
</VariableList>
<Para>The tags specify address families rather than addressing formats.
For address families that contain several alternative address forms, the
<Replaceable>initiator_address</Replaceable> and the <Replaceable>acceptor_address</Replaceable> fields should 
contain sufficient information to determine which address form is used.
Format the bytes that contain the addresses in the order in which the
bytes are transmitted across the network. 
</Para>
<Para>The GSSAPI creates an octet string by concatenating all the fields
(<Replaceable>initiator_addrtype</Replaceable>, <Replaceable>initiator_address</Replaceable>, 
<Replaceable>acceptor_addrtype</Replaceable>, <Replaceable>acceptor_address</Replaceable>, and 
<Replaceable>application_data</Replaceable>).  The security mechanism signs the octet string
and binds the signature to the token generated by the
<Function>gss_init_sec_context()</Function> routine.  The context acceptor presents the
same bindings to the <Function>gss_accept_sec_context()</Function> routine, which
evaluates the signature and compares it to the signature in the token.
If the signatures differ, the <Function>gss_accept_sec_context()</Function> routine
returns a <Literal>GSS_S_BAD_BINDINGS</Literal> error, and the context is not
established.
</Para>
<Para>Some security mechanisms check that the <Replaceable>initiator_address</Replaceable> field of
the channel bindings presented to the <Function>gss_init_sec_context()</Function> routine
contains the correct network address of the host system.  Therefore
portable applications should use either the correct address type and value
or the <Literal>GSS_C_AF_NULLADDR</Literal> for the <Replaceable>initiator_addrtype</Replaceable> address
field.  Some security mechanisms include the channel binding data in the
token instead of a signature, so portable applications should not use
confidential data as channel-binding components.  The GSSAPI does not
verify the address or include the plain text bindings information in the
token.
</Para>
<Para><Literal>Optional Parameters</Literal>
</Para>
<Para>In routine descriptions, <Replaceable>optional parameters</Replaceable> allow the application
to request default
behaviors by passing a default value for the parameter.  The following
conventions are used for optional parameters:
</Para>
<Para><?sml-point-size 10>
<!--no-op:  13-->
</Para>
<InformalTable role="page-wide">
<TGroup Rowsep="0" Colsep="0" Cols="3">
<ColSpec Rowsep="1" Colsep="1" Align="Left" Colwidth="1.1*" Colname="col1" Colnum="1">
<ColSpec Rowsep="1" Colsep="1" Align="Left" Colwidth="1.5*" Colname="col2" Colnum="2">
<ColSpec Rowsep="1" Align="Left" Colwidth="1*" Colname="col3" Colnum="3">
<thead>
<Row>
<Entry Rowsep="1"><Literal>Convention</Literal></Entry>
<Entry Rowsep="1"><Literal>Value Default</Literal></Entry>
<Entry Rowsep="1"><Literal>Explanation</Literal></Entry>
</Row>
</thead>
<tbody>
<Row>
<Entry><Literal>gss_buffer_t types</Literal></Entry>
<Entry><Literal>GSS_C_NO_BUFFER</Literal></Entry>
<Entry>For an input parameter, indicates no data is supplied.  For an output
parameter, indicates that the information returned is not required by
the application.
</Entry>
</Row>
<Row>
<Entry>Integer types (input)</Entry>
<Entry></Entry>
<Entry>Refer to the reference pages for default values.
</Entry>
</Row>
<Row>
<Entry>Integer types (output)</Entry>
<Entry>NULL</Entry>
<Entry>Indicates that the application does not require the information.
</Entry>
</Row>
<Row>
<Entry>Pointer types (output)</Entry>
<Entry>NULL</Entry>
<Entry>Indicates that the application does not require the information.
</Entry>
</Row>
<Row>
<Entry>OIDs</Entry>
<Entry><Literal>GSS_C_NULL_OID</Literal></Entry>
<Entry>Indicates the default choice for name type or security mechanism.
</Entry>
</Row>
<Row>
<Entry>OID sets</Entry>
<Entry><Literal>GSS_C_NULL_OID_SET</Literal></Entry>
<Entry>Indicates the default set of security mechanisms, DCE security and
Kerberos.
</Entry>
</Row>
<Row>
<Entry>Credentials</Entry>
<Entry><Literal>GSS_C_NO_CREDENTIAL</Literal></Entry>
<Entry>Indicates that the application should use the default credential handle.
</Entry>
</Row>
<Row>
<Entry>Channel bindings</Entry>
<Entry><Literal>GSS_C_NO_CHANNEL _BINDINGS</Literal></Entry>
<Entry>Indicates that no channel bindings are used.
</Entry>
</Row>
</TBody>
</TGroup>
</InformalTable>
<?sml-point-size 12>
<!--no-op:  14-->
<?sml-space>
</RefSect2>
</RefSect1>
<RefSect1>
<Title>Related Information</Title>
<Para>Books: &DCEDk;.
</Para>
</RefSect1>
<!--+ 11/27/96 19:46:25
    | tagMorph:  $Id: gssapi_intro.3sec,v 1.1.2.7 1996/12/14 23:04:34 carrig Exp $
    | tagMorph library:  $Id: gssapi_intro.3sec,v 1.1.2.7 1996/12/14 23:04:34 carrig Exp $
    | sml-to-docbook:  1.25
    +-->
</RefEntry>
