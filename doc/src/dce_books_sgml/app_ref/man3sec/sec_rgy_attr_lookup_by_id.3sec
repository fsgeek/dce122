<!--
# @OSF_COPYRIGHT@
# 
# 
# HISTORY
# $Log: sec_rgy_attr_lookup_by_id.3sec,v $
# Revision 1.1.2.7  1996/12/14  23:07:16  carrig
# 	{enh,R1.2.2}
# 	Arrays, Variable Lists
# 	[1996/12/14  23:00:58  carrig]
#
# Revision 1.1.2.6  1996/12/10  21:49:19  carrig
# 	{enh,R1.2.2}
# 	Synopses
# 	[1996/12/10  21:44:45  carrig]
# 
# Revision 1.1.2.5  1996/12/08  18:24:57  carrig
# 	{enh,R1.2.2}
# 	Var List Entry
# 	[1996/12/08  18:20:26  carrig]
# 
# Revision 1.1.2.4  1996/12/07  20:32:10  carrig
# 	{enh,R1.2.2}
# 	VarLists, Tables
# 	[1996/12/07  20:24:21  carrig]
# 
# Revision 1.1.2.3  1996/12/05  22:07:11  wardr
# 	{edit,R1.2.2}
# 	Fixed initial conversion problems
# 	[1996/12/05  22:00:58  wardr]
# 
# Revision 1.1.2.2  1996/12/01  20:23:01  weir
# 	Removed thinsp entities
# 	[1996/12/01  20:16:33  weir]
# 
# Revision 1.1.2.1  1996/11/29  18:00:31  weir
# 	Initial submission
# 	[1996/11/29  17:50:47  weir]
# 
# $EndLog$
-->
<!-- Fragment document type declaration subset:
ArborText, Inc., 1988-1993, v.4001
<!DOCTYPE Book PUBLIC "-//Davenport//DTD DocBook V2.4//EN" [
]>
-->
<RefEntry Id="DCEADR.MAN690.rsml.1">
<RefMeta>
<RefEntryTitle>sec_rgy_attr_lookup_by_id</RefEntryTitle>
<ManVolNum>3sec</ManVolNum>
</RefMeta>
<RefNameDiv>
<RefName><Literal>sec_rgy_attr_lookup_by_id</Literal></RefName>
<RefPurpose>Reads a specified 
object's attributes, expanding attribute sets into individual 
member attributes</RefPurpose>
</RefNameDiv>
<!-- COPYRIGHT NOTICE-->
<!-- Copyright (c) 1990, 1991, 1992, 1993, 1994 Open Software Foundation, Inc.-->
<!-- ALL RIGHTS RESERVED (DCE).  See the file named COPYRIGHT.DCE for-->
<!-- the full copyright text.-->
<!-- -->
<!-- OLD HISTORY-->
<!-- Revision 1.1.6.3  1996/11/19  18:59:41  wardr-->
<!-- 	{edit,R1.2.2}-->
<!-- 	Init capped heads and added PDG pointer-->
<!-- 	[1996/11/19  18:52:50  wardr]-->
<!---->
<!-- Revision 1.1.6.2  1996/09/30  19:13:47  millett-->
<!-- 	{def,13229,R1.2.2}-->
<!-- 	clarifying uninitialized cursor-->
<!-- 	[1996/09/30  19:13:18  millett]-->
<!-- -->
<!-- Revision 1.1.6.1  1996/05/13  19:06:09  wardr-->
<!-- 	{enh,R1.2.2}-->
<!-- 	Removed changebars-->
<!-- 	[1996/05/13  18:58:48  wardr]-->
<!-- -->
<!-- Revision 1.1.4.2  1996/02/07  20:18:10  rcb-->
<!-- 	R1.2.1: editorial pass following HP revision-->
<!-- 	[1996/02/07  20:14:10  rcb]-->
<!-- -->
<!-- Revision 1.1.4.1  1996/01/28  22:16:50  weir-->
<!-- 	CR 13293: miscellaneous HP work-->
<!-- 	[1996/01/28  22:15:47  weir]-->
<!-- -->
<!-- Revision 1.1.2.5  1995/06/21  13:22:10  buckler-->
<!-- 	1.1 edits and Prentice Hall reformat-->
<!-- 	[1995/06/19  14:58:53  buckler]-->
<!-- -->
<!-- Revision 1.1.2.4  1994/10/14  20:40:39  millette-->
<!-- 	(enh, 10056, R1.1)-->
<!-- 	HP edits-->
<!-- 	[1994/10/14  20:40:05  millette]-->
<!-- -->
<!-- Revision 1.1.2.3  1994/08/15  16:22:40  millette-->
<!-- 	(enh, 10056, R1.1)-->
<!-- 	Updated with spec changes-->
<!-- 	[1994/08/15  16:22:19  millette]-->
<!-- -->
<!-- Revision 1.1.2.2  1994/06/13  17:15:52  devobj-->
<!-- 	cr10872 - fix copyright-->
<!-- 	[1994/06/13  16:48:56  devobj]-->
<!-- -->
<!-- Revision 1.1.2.1  1994/03/29  19:15:24  millette-->
<!-- 	(enh, 10056, R1.1)-->
<!-- 	Created for ERA-->
<!-- 	[1994/03/29  19:14:39  millette]-->
<!-- -->
<!-- -->
<!-- -->
<!-- HP History:-->
<!--	HP revision /main/HPDCE02/2  1995/07/27  19:37 UTC  millett-->
<!-- 	fixes for 15530-->
<!-- -->
<!--	HP revision /main/HPDCE02/millett_mothra/1  1995/07/26  19:50 UTC  millett-->
<!-- 	CHFts15521: clarifying resource allocation routine description-->
<!-- -->
<!--	HP revision /main/HPDCE02/1  1995/06/15  21:00 UTC  wesfrost-->
<!-- 	Add reference-->
<!-- -->
<!--	HP revision /main/1  1995/04/03  22:28 UTC  arh-->
<!-- 	Add OSF doc sources.-->
<!-- -->
<!-- -->
<!-- -->
<!-- -->
<!-- -->
<!-- -->
<!-- .iX "\*Lsec_rgy_attr_lookup_by_id(\|)\*O"-->
<!-- .iX "calls" "\*Lsec_rgy_attr_lookup_by_id(\|)\*O"-->
<RefSect1 Remap="ANSI">
<Title>Synopsis</Title>
<FuncSynopsis>
<FuncSynopsisInfo>#include &lt;dce/sec_rgy_attr.h>
</FuncSynopsisInfo>
<FuncDef><Function><Literal>void sec_rgy_attr_lookup_by_id </Literal></Function></FuncDef>
<ParamDef>sec_rgy_handle_t <Parameter>context</Parameter></ParamDef>
<ParamDef>sec_rgy_domain_t <Parameter>name_domain</Parameter></ParamDef>
<ParamDef>sec_rgy_name_t <Parameter>name</Parameter></ParamDef>
<ParamDef>sec_attr_cursor_t <Parameter>*cursor</Parameter></ParamDef>
<ParamDef>unsigned32 <Parameter>num_attr_keys</Parameter></ParamDef>
<ParamDef>unsigned32 <Parameter>space_avail</Parameter></ParamDef>
<ParamDef>sec_attr_t <Parameter>attr_keys[&thinsp;]</Parameter></ParamDef>
<ParamDef>unsigned32 <Parameter>*num_returned</Parameter></ParamDef>
<ParamDef>sec_attr_t <Parameter>attrs[&thinsp;]</Parameter></ParamDef>
<ParamDef>unsigned32 <Parameter>*num_left</Parameter></ParamDef>
<ParamDef>error_status_t *<Parameter>status</Parameter></ParamDef>
</FuncSynopsis>
</RefSect1>
<RefSect1>
<Title>Parameters</Title>
<RefSect2>
<Title>Input</Title>
<VariableList>
<VarListEntry>
<Term><Symbol Role="Variable">context</Symbol></Term>
<ListItem>
<Para>An opaque handle bound to a registry server.  Use
<Function>sec_rgy_site_open()</Function> to acquire a bound handle.
</Para>
</ListItem>
</VarListEntry>
<VarListEntry role="linebreak">
<Term><Symbol Role="Variable">name_domain</Symbol></Term>
<ListItem>
<Para>A value of type <StructName Role="typedef">sec_rgy_domain_t</StructName> that identifies the registry domain in 
which the object specified by <Symbol Role="Variable">name</Symbol> resides.  
The valid values are as follows:
</Para>
<VariableList>
<VarListEntry role="linebreak">
<Term><Literal>sec_rgy_domain_person</Literal></Term>
<ListItem>
<Para>The name identifies a principal.
</Para>
</ListItem>
</VarListEntry>
<VarListEntry role="linebreak">
<Term><Literal>sec_rgy_domain_group</Literal></Term>
<ListItem>
<Para>The name identifies a group.
</Para>
</ListItem>
</VarListEntry>
<VarListEntry role="linebreak">
<Term><Literal>sec_rgy_domain_org</Literal></Term>
<ListItem>
<Para>The name identifies an organization.
</Para>
</ListItem>
</VarListEntry>
</VariableList>
<Para>This parameter is ignored if <Symbol Role="Variable">name</Symbol> is <Literal>policy</Literal> or <Literal>replist</Literal>.
</Para>
</ListItem>
</VarListEntry>
<VarListEntry>
<Term><Symbol Role="Variable">name</Symbol></Term>
<ListItem>
<Para>A pointer to a <StructName Role="typedef">sec_rgy_name_t</StructName> character string
containing the name
of the person, group, or organization to which the attribute is attached.
</Para>
</ListItem>
</VarListEntry>
<VarListEntry role="linebreak">
<Term><Symbol Role="Variable">num_attr_keys</Symbol></Term>
<ListItem>
<Para>An unsigned 32-bit integer that specifies the number of elements 
in the <Symbol Role="Variable">attr_keys[&thinsp;]</Symbol> array.  Set this parameter to 0 (zero) to 
return all of the object's attributes that the caller is authorized to see.  
</Para>
</ListItem>
</VarListEntry>
<VarListEntry role="linebreak">
<Term><Symbol Role="Variable">space_avail</Symbol></Term>
<ListItem>
<Para>An unsigned 32-bit integer that specifies the size of the 
<Symbol Role="Variable">attr_keys[&thinsp;]</Symbol> array.
</Para>
</ListItem>
</VarListEntry>
<VarListEntry>
<Term><Symbol Role="Variable">attr_keys[&thinsp;]</Symbol></Term>
<ListItem>
<Para>An array of values of type <StructName Role="typedef">sec_attr_t</StructName> that identify the 
attribute type ID of the attribute instance(s) to be looked up.  
If the attribute type is associated with a query attribute trigger, the 
<StructName Role="typedef">sec_attr_t</StructName> <Replaceable>attr_value</Replaceable> field can be used to pass in optional 
information required by the attribute trigger query.  If no information is
to be passed in the <Replaceable>attr_value</Replaceable> field (whether the type
indicates an attribute trigger query or not), set the attribute's 
encoding type to <Literal>sec_rgy_attr_enc_void</Literal>.
</Para>
<Para>The size of the <Symbol Role="Variable">attr_keys[&thinsp;]</Symbol> array is determined by the 
<Symbol Role="Variable">num_attr_keys</Symbol> parameter.
<!-- -->
<!-- HOW IS IT SIZED IF NUM_ATTR_KEYS IS SET TO 0 TO RETURN ALL ATTRIBUTES??-->
<!-- -->
</Para>
</ListItem>
</VarListEntry>
</VariableList>
<?sml-break>
<?sml-need 6>
</RefSect2>
<RefSect2>
<Title>Input/Output</Title>
<VariableList>
<VarListEntry>
<Term><Symbol Role="Variable">cursor</Symbol></Term>
<ListItem>
<Para>A pointer to a <StructName Role="typedef">sec_attr_cursor_t</StructName>.  
As an input parameter, <Symbol Role="Variable">cursor</Symbol> is a pointer to a <StructName Role="typedef">sec_attr_cursor_t</StructName> 
initialized by a <Literal>sec_rgy_attr_srch_cursor_init</Literal> call.  
As an output parameter, <Symbol Role="Variable">cursor</Symbol> is a pointer to a 
<StructName Role="typedef">sec_attr_cursor_t</StructName> that is positioned past components 
returned in this call.
</Para>
</ListItem>
</VarListEntry>
</VariableList>
</RefSect2>
<RefSect2>
<Title>Output</Title>
<VariableList>
<VarListEntry role="linebreak">
<Term><Symbol Role="Variable">num_returned</Symbol></Term>
<ListItem>
<Para>A pointer to a 32-bit unsigned integer that specifies the number of 
attribute instances returned in the <Symbol Role="Variable">attrs[&thinsp;] array</Symbol>.
</Para>
</ListItem>
</VarListEntry>
<VarListEntry>
<Term><Symbol Role="Variable">attrs[&thinsp;]</Symbol></Term>
<ListItem>
<Para>An array of values of type <StructName Role="typedef">sec_attr_t</StructName> that 
contains the attributes retrieved by Universal Unique Identifier (UUID). 
The size of the array is determined by 
<Symbol Role="Variable">space_avail</Symbol> and the length by <Symbol Role="Variable">num_returned</Symbol>.
</Para>
</ListItem>
</VarListEntry>
<VarListEntry>
<Term><Symbol Role="Variable">num_left</Symbol></Term>
<ListItem>
<Para>A pointer to a 32-bit unsigned integer that supplies the number of attributes 
that were found but could  not be returned because of 
space constraints in the <Symbol Role="Variable">attrs[&thinsp;]</Symbol> buffer.  To ensure that all the 
attributes will be returned, increase the size of the <Symbol Role="Variable">attrs[&thinsp;]</Symbol> 
array by increasing the size of <Symbol Role="Variable">space_avail</Symbol> and <Symbol Role="Variable">num_returned</Symbol>.
</Para>
</ListItem>
</VarListEntry>
<VarListEntry>
<Term><Symbol Role="Variable">status</Symbol></Term>
<ListItem>
<Para>A pointer to the completion status.  On successful completion,
the routine returns <Literal>error_status_ok</Literal>, or, if the requested 
attributes were not available, it returns the message <Literal>not_all_available</Literal>.
Otherwise, it returns an error.
</Para>
</ListItem>
</VarListEntry>
</VariableList>
</RefSect2>
</RefSect1>
<RefSect1>
<Title>Description</Title>
<Para>The <Function>sec_rgy_attr_lookup_by_id()</Function> function reads those attributes specified 
by UUID for an object specified by name.  This routine is similar to the 
<Function>sec_rgy_attr_lookup_no_expand()</Function> routine with one exception:  
for attribute sets, the <Function>sec_rgy_attr_lookup_no_expand()</Function> routine returns 
a <StructName Role="typedef">sec_attr_t</StructName> 
for the set instance only;  
it does not expand the set and return a <StructName Role="typedef">sec_attr_t</StructName>  
for each member in the set.
This call expands attribute sets and returns a <StructName Role="typedef">sec_attr_t</StructName> 
for each member in the set. 
</Para>
<Para>If the <Symbol Role="Variable">num_attr_keys</Symbol> parameter is set to 0 (zero), all 
of the object's attributes that the caller is authorized to see are 
returned.  
This routine is useful for programmatic access.
</Para>
<Para>After a successful call, free the resources allocated by this routine 
for each attribute returned in the <Symbol Role="Variable">attrs[&thinsp;]</Symbol> parameter 
with the <Function>sec_attr_util_inst_free_ptrs()</Function> routine.
</Para>
<Para>For multivalued attributes, the call returns 
a <StructName Role="typedef">sec_attr_t</StructName> for each value as an individual attribute instance.  
For attribute sets, the call returns a <StructName Role="typedef">sec_attr_t</StructName> for each member 
of the set; it does not return the set instance.
</Para>
<Para>The <Symbol Role="Variable">attr_keys[&thinsp;]</Symbol> array, which specifies the attributes to be returned, 
contains values of type <StructName Role="typedef">sec_attr_t</StructName>.  These values consist of
the following:
</Para>
<ItemizedList>
<ListItem>
<Para><Replaceable>attr_id</Replaceable>, a UUID that identifies the attribute type
</Para>
</ListItem>
<ListItem>
<Para><Replaceable>attr_value</Replaceable>, values of <StructName Role="typedef">sec_attr_value_t</StructName> that specify the 
attribute's encoding type and values.
</Para>
</ListItem>
</ItemizedList>
<Para>Use the <Replaceable>attr_id</Replaceable> field of each <Symbol Role="Variable">attr_keys[&thinsp;]</Symbol> array element, 
to specify the UUID that identifies the attribute type to be 
returned. 
</Para>
<Para><?sml-need 4>If the attribute instance to be read is not 
associated with a query trigger or no additional information is
required by the query trigger, an attribute UUID is all that is required.  
For these attribute instances, supply the attribute 
UUID in the input array and 
set the attribute encoding (in <StructName Role="typedef">sec_attr_encoding_t</StructName>)  
to <Literal>sec_attr_enc_void</Literal>.   
</Para>
<Para>If the attribute instance to be read is associated with a query attribute 
trigger that 
requires additional information before it can process the query request, 
use a <StructName Role="typedef">sec_attr_value_t</StructName> to supply the requested information, as
follows:
</Para>
<OrderedList>
<ListItem>
<Para>Set the <StructName Role="typedef">sec_attr_encoding_t</StructName> to an encoding type that is 
compatible with the information required by the query attribute trigger.  
</Para>
</ListItem>
<ListItem>
<Para>Set the <StructName Role="typedef">sec_attr_value_t</StructName> to hold the required information.
</Para>
</ListItem>
</OrderedList>
<Para>Note that if you set <Symbol Role="Variable">num_attr_keys</Symbol> to zero to return all of the 
object's attributes and that attribute is associated with a query attribute 
trigger, the attribute trigger will be called with no input attribute 
information (that would normally have been passed in via the 
<Replaceable>attr_value</Replaceable> field).  
</Para>
<Para RevisionFlag="Changed">The <Symbol Role="Variable">cursor</Symbol> parameter specifies a cursor of type <StructName Role="typedef">sec_attr_cursor_t</StructName> 
initialized to the point 
in the attribute list at which to start 
processing the query.  Use the <Literal>sec_attr_cursor_init</Literal> 
function to initialize <Symbol Role="Variable">cursor</Symbol>.  
<?og-ChangeStart def,13229,R1.2.2,clarify uninit. behavior">If <Symbol Role="Variable">cursor</Symbol> 
is uninitialized, the behavior is undefined. 
<?og-ChangeEnd def,13229,R1.2.2,clarify uninit. behavior" ></Para>
<Para>The <Symbol Role="Variable">num_left</Symbol> parameter contains the number of 
attributes that were found but could not be returned 
because of space constraints in the <Symbol Role="Variable">attrs[&thinsp;]</Symbol> array. 
(Note that this number may be inaccurate if 
the target server allows updates between successive queries.)
To obtain all of the remaining attributes, set the size of the 
<Symbol Role="Variable">attrs[&thinsp;]</Symbol> array so that it is large enough to hold the number of 
attributes listed in <Symbol Role="Variable">num_left</Symbol>.
</Para>
<RefSect2>
<Title>Permissions Required</Title>
<Para>The <Function>sec_rgy_attr_lookup_by_id()</Function> routine requires the <Literal>q</Literal>
(<Literal>query</Literal>) permission 
set for each attribute type identified in the <Symbol Role="Variable">attr_keys[&thinsp;]</Symbol> array. 
These permissions are defined as part of the access control list
(ACL) manager set in the schema entry of each attribute type. 
<!-- .ne 1.5i-->
<!-- .SH "NOTES"-->
<!-- .PP-->
<!-- .br-->
<!-- .ne 1.5i-->
</Para>
</RefSect2>
</RefSect1>
<RefSect1>
<Title>Files</Title>
<VariableList>
<VarListEntry role="linebreak">
<Term><Filename>/usr/include/dce/sec_rgy_attr.idl</Filename></Term>
<ListItem>
<Para>The <Literal>idl</Literal> file from which <Filename>dce/sec_rgy_attr.h</Filename> was derived.
</Para>
</ListItem>
</VarListEntry>
</VariableList>
</RefSect1>
<RefSect1>
<Title>Errors</Title>
<Para>The following describes a partial list of errors that might be returned.
Refer to the &DCETg; for complete descriptions of all error
messages.
</Para>
<VariableList>
<VarListEntry role="linebreak">
<Term><Literal>unauthorized</Literal></Term>
<ListItem>
<Para></Para>
</ListItem>
</VarListEntry>
<VarListEntry role="linebreak">
<Term><Literal>registry server unavailable</Literal></Term>
<ListItem>
<Para></Para>
</ListItem>
</VarListEntry>
<VarListEntry role="linebreak">
<Term><Literal>trigger server unavailable</Literal></Term>
<ListItem>
<Para></Para>
</ListItem>
</VarListEntry>
<VarListEntry role="linebreak">
<Term><Literal>error_status_ok</Literal></Term>
<ListItem>
<Para></Para>
</ListItem>
</VarListEntry>
</VariableList>
</RefSect1>
<RefSect1>
<Title>Related Information</Title>
<Para><!--no-op:  l-->
Functions:
<Filename MoreInfo="RefEntry">sec_intro(3sec)</Filename>,
<Filename MoreInfo="RefEntry">sec_rgy_attr_attr_lookup_by_name(3sec)</Filename>,
<Filename MoreInfo="RefEntry">sec_rgy_attr_lookup_no_expand(3sec)</Filename>.
<!--no-op:  b-->
</Para>
</RefSect1>
<!--+ 11/27/96 19:46:25
    | tagMorph:  $Id: sec_rgy_attr_lookup_by_id.3sec,v 1.1.2.7 1996/12/14 23:07:16 carrig Exp $
    | tagMorph library:  $Id: sec_rgy_attr_lookup_by_id.3sec,v 1.1.2.7 1996/12/14 23:07:16 carrig Exp $
    | sml-to-docbook:  1.25
    +-->
</RefEntry>
