<!--
# @OSF_COPYRIGHT@
# 
# 
# HISTORY
# $Log: sec_rgy_attr_get_effective.3sec,v $
# Revision 1.1.2.7  1996/12/11  16:40:07  carrig
# 	{enh,R1.2.2}
# 	Fixed errors from log
# 	[1996/12/11  16:39:52  carrig]
#
# Revision 1.1.2.6  1996/12/10  21:49:18  carrig
# 	{enh,R1.2.2}
# 	Synopses
# 	[1996/12/10  21:44:43  carrig]
# 
# Revision 1.1.2.5  1996/12/08  18:24:56  carrig
# 	{enh,R1.2.2}
# 	Var List Entry
# 	[1996/12/08  18:20:25  carrig]
# 
# Revision 1.1.2.4  1996/12/07  20:32:09  carrig
# 	{enh,R1.2.2}
# 	VarLists, Tables
# 	[1996/12/07  20:24:19  carrig]
# 
# Revision 1.1.2.3  1996/12/05  22:07:10  wardr
# 	{edit,R1.2.2}
# 	Fixed initial conversion problems
# 	[1996/12/05  22:00:56  wardr]
# 
# Revision 1.1.2.2  1996/12/01  20:22:59  weir
# 	Removed thinsp entities
# 	[1996/12/01  20:16:32  weir]
# 
# Revision 1.1.2.1  1996/11/29  18:00:30  weir
# 	Initial submission
# 	[1996/11/29  17:50:46  weir]
# 
# $EndLog$
-->
<!-- Fragment document type declaration subset:
ArborText, Inc., 1988-1993, v.4001
<!DOCTYPE Book PUBLIC "-//Davenport//DTD DocBook V2.4//EN" [
]>
-->
<RefEntry Id="DCEADR.MAN689.rsml.1">
<RefMeta>
<RefEntryTitle>sec_rgy_attr_get_effective</RefEntryTitle>
<ManVolNum>3sec</ManVolNum>
</RefMeta>
<RefNameDiv>
<RefName><Literal>sec_rgy_attr_get_effective</Literal></RefName>

<RefPurpose> Reads effective attributes by ID</RefPurpose>
</RefNameDiv>

<!-- COPYRIGHT NOTICE-->
<!-- Copyright (c) 1990, 1991, 1992, 1993, 1994 Open Software Foundation, Inc.-->
<!-- ALL RIGHTS RESERVED (DCE).  See the file named COPYRIGHT.DCE for-->
<!-- the full copyright text.-->
<!-- -->
<!-- OLD HISTORY-->
<!-- Revision 1.1.6.2  1996/11/19  18:59:40  wardr-->
<!-- 	{edit,R1.2.2}-->
<!-- 	Init capped heads and added PDG pointer-->
<!-- 	[1996/11/19  18:52:49  wardr]-->
<!---->
<!-- Revision 1.1.6.1  1996/05/13  19:06:08  wardr-->
<!-- 	{enh,R1.2.2}-->
<!-- 	Removed changebars-->
<!-- 	[1996/05/13  18:58:47  wardr]-->
<!-- -->
<!-- Revision 1.1.4.1  1996/03/15  16:38:44  weir-->
<!-- 	CR 12716: unimplemented function-->
<!-- 	[1996/03/15  16:38:09  weir]-->
<!-- -->
<!-- Revision 1.1.2.4  1995/06/21  18:24:28  buckler-->
<!-- 	More 1.1 edits.-->
<!-- 	[1995/06/21  18:14:12  buckler]-->
<!-- -->
<!-- Revision 1.1.2.3  1995/06/21  13:22:09  buckler-->
<!-- 	1.1 edits and Prentice Hall reformat-->
<!-- 	[1995/06/19  14:58:52  buckler]-->
<!-- -->
<!-- Revision 1.1.2.2  1994/10/06  20:41:47  rrizzo-->
<!-- 	expand copyright-->
<!-- 	[1994/10/06  20:08:17  rrizzo]-->
<!-- -->
<!-- Revision 1.1.2.1  1994/08/15  16:21:47  millette-->
<!-- 	(enh, 10056, R1.1)-->
<!-- 	Created for ERA-->
<!-- 	[1994/08/15  16:21:27  millette]-->
<!-- -->
<!-- .iX "\*Lsec_rgy_attr_get_effective(\|)\*O"-->
<!-- .iX "calls" "\*Lsec_rgy_attr_get_effective(\|)\*O"-->

<RefSect1 Remap="ANSI">
<Title>Synopsis</Title>
<FuncSynopsis>
<FuncSynopsisInfo>#include &lt;dce/sec_rgy_attr.h>
</FuncSynopsisInfo>
<FuncDef><Function><Literal>void </Literal>sec_rgy_attr_get_effective</Function></FuncDef>
<ParamDef>sec_rgy_handle_t <Parameter>context</Parameter></ParamDef>
<ParamDef>sec_rgy_domain_t <Parameter>name_domain</Parameter></ParamDef>
<ParamDef>sec_rgy_name_t <Parameter>name</Parameter></ParamDef>
<ParamDef>unsigned32 <Parameter>num_attr_keys</Parameter></ParamDef>
<ParamDef>sec_attr_t <Parameter>attr_keys[&thinsp]</Parameter></ParamDef>
<ParamDef>sec_attr_vec_t *<Parameter>attr_list</Parameter></ParamDef>
<ParamDef>error_status_t <Parameter>status</Parameter></ParamDef>
</FuncSynopsis>
<?sml-break>
<?sml-need 1.5i>
</RefSect1>
<RefSect1>
<Title>Parameters</Title>
<RefSect2>
<Title>Input</Title>
<VariableList>
<VarListEntry>
<Term><Symbol Role="Variable">context</Symbol></Term>
<ListItem>
<Para>An opaque handle bound to a registry server.  Use
<Function>sec_rgy_site_open()</Function> to acquire a bound handle.  
</Para>
</ListItem>
</VarListEntry>
<VarListEntry role="linebreak">
<Term><Symbol Role="Variable">name_domain</Symbol></Term>
<ListItem>
<Para>A value of type <StructName Role="typedef">sec_rgy_domain_t</StructName> that identifies the domain in 
which the named object resides.  The valid values are as follows:
</Para>
<VariableList>
<VarListEntry role="linebreak">
<Term><Literal>sec_rgy_domain_principal</Literal></Term>
<ListItem>
<Para>The <Symbol Role="Variable">name</Symbol> identifies a principal.
</Para>
</ListItem>
</VarListEntry>
<VarListEntry role="linebreak">
<Term><Literal>sec_rgy_domain_group</Literal></Term>
<ListItem>
<Para>The <Symbol Role="Variable">name</Symbol> identifies a group.
</Para>
</ListItem>
</VarListEntry>
<VarListEntry role="linebreak">
<Term><Literal>sec_rgy_domain_org</Literal></Term>
<ListItem>
<Para>The <Symbol Role="Variable">name</Symbol>  identifies an organization.
</Para>
</ListItem>
</VarListEntry>
</VariableList>
<Para>This parameter is ignored if <Symbol Role="Variable">name</Symbol> is <Literal>policy</Literal> or <Literal>replist</Literal>.
</Para>
</ListItem>
</VarListEntry>
<VarListEntry>
<Term><Symbol Role="Variable">name</Symbol></Term>
<ListItem>
<Para>A pointer to a <StructName Role="typedef">sec_rgy_name_t</StructName> character string
containing the name
of the person, group, or organization to which the attribute is attached.
<?sml-break><?sml-need 8></Para>
</ListItem>
</VarListEntry>
<VarListEntry role="linebreak">
<Term><Symbol Role="Variable">num_attr_keys</Symbol></Term>
<ListItem>
<Para>An unsigned 32-bit integer that specifies the number of elements in the 
the <Symbol Role="Variable">attr_keys</Symbol>[&thinsp;] array.  If <Symbol Role="Variable">num_attr_keys</Symbol> is set 
to 0 (zero), all of the effective attributes that the caller is authorized to see 
are returned.
</Para>
</ListItem>
</VarListEntry>
<VarListEntry>
<Term><Symbol Role="Variable">attr_keys</Symbol>[&thinsp;]</Term>
<ListItem>
<Para>An array of values of type <StructName Role="typedef">sec_attr_t</StructName> that specify the UUIDs of the 
attributes to be returned if they are effective.  
If the attribute type is associated with a query attribute trigger, the 
<StructName Role="typedef">sec_attr_t</StructName> <Replaceable>attr_value</Replaceable> field can be used to pass in optional information 
required by the attribute trigger query.  If no information is
to be passed in the <Replaceable>attr_value</Replaceable> field (whether the type
indicates an attribute trigger query or not), set the attribute's 
encoding type to <Literal>sec_rgy_attr_enc_void</Literal>.
The size of the <Symbol Role="Variable">attr_keys</Symbol>[&thinsp;] array is determined by the 
<Symbol Role="Variable">num_attr_keys</Symbol> parameter.
</Para>
</ListItem>
</VarListEntry>
</VariableList>
</RefSect2>
<RefSect2>
<Title>Output</Title>
<VariableList>
<VarListEntry>
<Term><Symbol Role="Variable">attr_list</Symbol></Term>
<ListItem>
<Para>A pointer an attribute vector allocated by the server 
containing all of the effective attributes matching the search criteria 
(defined in <Symbol Role="Variable">num_attr_keys</Symbol> or <Symbol Role="Variable">attr_keys</Symbol>[&thinsp;]&thinsp;).
The server allocates a buffer large enough to return all the
requested attributes so that subsequent calls are
not necessary.
</Para>
</ListItem>
</VarListEntry>
<VarListEntry>
<Term><Symbol Role="Variable">status</Symbol></Term>
<ListItem>
<Para>A pointer to the completion status.  On successful completion,
the routine returns <Literal>error_status_ok</Literal>.
Otherwise, it returns an error.
</Para>
</ListItem>
</VarListEntry>
</VariableList>
<?sml-break>
<?sml-need 1.5i>
</RefSect2>
</RefSect1>
<RefSect1>
<Title>Description</Title>
<Para>The <Function>sec_rgy_attr_get_effective()</Function> routine 
returns the UUIDs of a specified object's effective attributes.  
Effective attributes are determined by setting of the schema entry 
<Literal>apply_defaults</Literal> flag:
<!--no-op:  l-->
</Para>
<ItemizedList>
<ListItem>
<Para>If the flag is set off, only the attributes directly attached to the 
object are effective.  
</Para>
</ListItem>
<ListItem>
<Para>If the flag is set on, the effective attributes are obtained by performing the 
following steps for each attribute identified by UUID in the <Replaceable>attr_keys</Replaceable> array:
</Para>
<ItemizedList>
<ListItem>
<Para>If the object named by <Symbol Role="Variable">name</Symbol> is a principal and if the 
a requested attribute exists on the principal, that attribute is effective 
and is returned.  
If it does not exist, the search continues.  
</Para>
</ListItem>
<ListItem>
<Para>The next step in the search depends on the type of object:
</Para>
<Para>For principals with accounts:
</Para>
<ItemizedList>
<ListItem>
<Para>The organization named in the principal's 
account is examined to 
see if an attribute of the requested type exists.  If it does, it 
is effective and is returned; then the search for that attribute ends.  
If it does not exist, the search for that attribute continues 
to the <Literal>policy</Literal> object as described here. 
</Para>
</ListItem>
<ListItem>
<Para>The registry <Literal>policy</Literal> object is examined to 
see if an attribute of the requested type exits.  
If it does, it is returned.  If it does not, a message indicating the 
no attribute of the type exists for the object is returned.
</Para>
</ListItem>
</ItemizedList>
<!--no-op:  b-->
<Para>For principals without accounts, for groups, and for organizations: 
</Para>
<Para>The registry <Literal>policy</Literal> object is examined to 
see if an attribute of the requested type exits.  
If it does, it is returned.  If it does not, a message indicating the 
no attribute of the type exists for the object is returned.
</Para>
</ListItem>
</ItemizedList>
</ListItem>
</ItemizedList>
<Para>For multivalued attributes, the call returns 
a <StructName Role="typedef">sec_attr_t</StructName> for each value as an individual attribute instance.  
For attribute sets, the call returns a <StructName Role="typedef">sec_attr_t</StructName>  for each member 
of the set; it does not return the set instance.  
</Para>
<Para>If the attribute instance to be read is associated with a query attribute trigger that 
requires additional information before it can process the query request, 
use a <StructName Role="typedef">sec_attr_value_t</StructName> to supply the requested information.  
To do this
<!--no-op:  l-->
</Para>
<ItemizedList>
<ListItem>
<Para>Set the <StructName Role="typedef">sec_attr_encoding_t</StructName> to an encoding type that is 
compatible with the information required by the query attribute trigger.  
</Para>
</ListItem>
<ListItem>
<Para>Set the <StructName Role="typedef">sec_attr_value_t</StructName> to hold the 
required information.
</Para>
</ListItem>
</ItemizedList>
<!--no-op:  b-->
<Para>If the attribute instance to be read is not 
associated with a query trigger or no additional information is
required by the query trigger, an attribute UUID is all that is required.  
For these attribute instances, supply the attribute 
UUID in the input array and 
set the attribute encoding (in <StructName Role="typedef">sec_attr_encoding_t</StructName>)  
to <Literal>sec_attr_enc_void</Literal>.   
</Para>
<Para><?sml-need 8>If the requested attribute type is associated with a query
trigger, the value returned for the attribute will be the
binding (as set in the schema entry) of the trigger server.
The caller must bind to the trigger server and pass the
original input query attribute to the <StructName Role="typedef">sec_attr_trig_query</StructName> call
in order to retrieve the attribute value.
</Para>
</RefSect1>
<RefSect1>
<Title>Files</Title>
<VariableList>
<VarListEntry role="linebreak">
<Term><Filename>/usr/include/dce/sec_rgy_attr.idl</Filename></Term>
<ListItem>
<Para>The <Literal>idl</Literal> file from which <Filename>dce/sec_rgy_attr.h</Filename> was derived.
</Para>
</ListItem>
</VarListEntry>
</VariableList>
<!-- .SH "EXAMPLES"-->
<!-- .PP-->
<!-- EXAMPLES????????-->
<!-- .PP-->
<!--?????-->
<?sml-break>
<?sml-need 1.5i>
</RefSect1>
<RefSect1>
<Title>Errors</Title>
<Para>The following describes a partial list of errors that might be returned.
Refer to the &DCETg; for complete descriptions of all error
messages.
</Para>
<VariableList>
<VarListEntry role="linebreak">
<Term><Literal>error_status_ok</Literal></Term>
<ListItem>
<Para></Para>
</ListItem>
</VarListEntry>
</VariableList>
<?sml-break>
<?sml-need 1.5i>
</RefSect1>
<RefSect1>
<Title>Related Information</Title>
<Para><!--no-op:  l-->
Functions:
<Filename MoreInfo="RefEntry">sec_intro(3sec)</Filename>.
<!--no-op:  b-->
</Para>
</RefSect1>
<!--+ 11/27/96 19:46:25
    | tagMorph:  $Id: sec_rgy_attr_get_effective.3sec,v 1.1.2.7 1996/12/11 16:40:07 carrig Exp $
    | tagMorph library:  $Id: sec_rgy_attr_get_effective.3sec,v 1.1.2.7 1996/12/11 16:40:07 carrig Exp $
    | sml-to-docbook:  1.25
    +-->
</RefEntry>
