<!--
# @OSF_COPYRIGHT@
# 
# 
# HISTORY
# $Log: audit_intro.3sec,v $
# Revision 1.1.2.6  1996/12/14  23:04:07  carrig
# 	{enh,R1.2.2}
# 	Arrays, Variable Lists
# 	[1996/12/14  22:57:31  carrig]
#
# Revision 1.1.2.5  1996/12/10  21:53:20  carrig
# 	{enh,R1.2.2}
# 	Synopses
# 	[1996/12/10  21:52:36  carrig]
# 
# Revision 1.1.2.4  1996/12/07  20:26:56  carrig
# 	{enh,R1.2.2}
# 	VarLists, Tables
# 	[1996/12/07  20:18:29  carrig]
# 
# Revision 1.1.2.3  1996/12/05  22:03:21  wardr
# 	{edit,R1.2.2}
# 	Fixed initial conversion problems
# 	[1996/12/05  21:57:20  wardr]
# 
# Revision 1.1.2.2  1996/12/01  20:18:45  weir
# 	Removed thinsp entities
# 	[1996/12/01  20:12:10  weir]
# 
# Revision 1.1.2.1  1996/11/29  17:54:11  weir
# 	Initial submission
# 	[1996/11/29  17:46:59  weir]
# 
# $EndLog$
-->
<!-- Fragment document type declaration subset:
ArborText, Inc., 1988-1993, v.4001
<!DOCTYPE Book PUBLIC "-//Davenport//DTD DocBook V2.4//EN" [
]>
-->
<RefEntry Id="DCEADR.MAN432.rsml.1">
<RefMeta>
<RefEntryTitle>audit_intro</RefEntryTitle>
<ManVolNum>3sec</ManVolNum>
</RefMeta>
<RefNameDiv>
<RefName><Literal>audit_intro</Literal></RefName>
<RefPurpose>Introduction to the DCE audit API runtime</RefPurpose>
</RefNameDiv>
<!-- COPYRIGHT NOTICE-->
<!-- Copyright (c) 1990, 1991, 1992, 1993, 1994 Open Software Foundation, Inc.-->
<!-- ALL RIGHTS RESERVED (DCE).  See the file named COPYRIGHT.DCE for-->
<!-- the full copyright text.-->
<!-- -->
<!-- OLD HISTORY-->
<!-- Revision 1.1.4.2  1996/11/19  18:55:18  wardr-->
<!-- 	{edit,R1.2.2}-->
<!-- 	Init capped heads and added PDG pointer-->
<!-- 	[1996/11/19  18:48:23  wardr]-->
<!---->
<!-- Revision 1.1.4.1  1996/05/13  19:01:57  wardr-->
<!-- 	{enh,R1.2.2}-->
<!-- 	Removed changebars-->
<!-- 	[1996/05/13  18:55:51  wardr]-->
<!-- -->
<!-- Revision 1.1.2.11  1995/06/21  18:24:14  buckler-->
<!-- 	More 1.1 edits.-->
<!-- 	[1995/06/21  17:33:30  buckler]-->
<!-- -->
<!-- Revision 1.1.2.10  1995/06/21  13:20:56  buckler-->
<!-- 	More 1.1 edits.-->
<!-- 	[1995/06/19  20:44:33  buckler]-->
<!-- -->
<!-- Revision 1.1.2.9  1995/06/15  19:26:36  buckler-->
<!-- 	1.1 edits and Prentice Hall reformat-->
<!-- 	[1995/06/15  15:38:55  buckler]-->
<!-- -->
<!-- Revision 1.1.2.8  1994/11/03  23:47:49  neilson-->
<!-- 	Substituted macros for book names in cross refs.-->
<!-- 	[1994/11/03  01:39:44  neilson]-->
<!-- -->
<!-- Revision 1.1.2.7  1994/10/20  03:11:18  cruz-->
<!-- 	Final changes: editorial.-->
<!-- 	[1994/10/20  03:10:58  cruz]-->
<!-- -->
<!-- Revision 1.1.2.6  1994/10/18  18:37:56  cruz-->
<!-- 	Added 3 new Audit APIs: dce_aud_set_trail_size_limit(),-->
<!-- 	dce_aud_free_ev_info(), and dce_aud_free_header().-->
<!-- 	Also added a new environment variable: DCEAUDITTRAILSIZE.-->
<!-- 	[1994/10/18  18:37:27  cruz]-->
<!-- -->
<!-- Revision 1.1.2.5  1994/09/14  13:42:57  cruz-->
<!-- 	Added new API, dce_aud_start_with_uuid().-->
<!-- 	[1994/09/14  13:42:37  cruz]-->
<!-- -->
<!-- Revision 1.1.2.4  1994/06/13  17:14:31  devobj-->
<!-- 	cr10872 - fix copyright-->
<!-- 	[1994/06/13  16:48:47  devobj]-->
<!-- -->
<!-- Revision 1.1.2.3  1994/05/21  16:32:09  cruz-->
<!-- 	Incorporated technical comments-->
<!-- 	[1994/05/21  16:31:38  cruz]-->
<!-- -->
<!-- Revision 1.1.2.2  1994/05/11  13:53:14  cruz-->
<!-- 	Added revision bars-->
<!-- 	[1994/05/11  13:52:49  cruz]-->
<!-- -->
<!-- Revision 1.1.2.1  1994/05/09  19:28:14  cruz-->
<!-- 	Renamed file to audit_intro.3sec-->
<!-- 	[1994/05/09  19:27:24  cruz]-->
<!-- -->
<!-- Revision 1.1.2.1  1994/05/03  15:30:37  cruz-->
<!-- 	Audit app ref doc-->
<!-- 	[1994/05/03  15:30:17  cruz]-->
<!-- -->
<RefSect1>
<Title>Description</Title>
<Para>This introduction gives general information about the DCE audit application
programming interface (API) and
an overview of the following parts of the DCE audit API runtime:
<IndexTerm Id="DCEADR.MAN432.indx.1">
<Primary>API overview</Primary>
</IndexTerm>
<IndexTerm Id="DCEADR.MAN432.indx.2">
<Primary>Application Programming Interface</Primary>
</IndexTerm>
<IndexTerm Id="DCEADR.MAN432.indx.3">
<Primary>DCE Audit Application Programming Interface</Primary>
</IndexTerm>
<IndexTerm Id="DCEADR.MAN432.indx.4">
<Primary>Audit</Primary>
<Secondary>Application Programming Interface</Secondary>
</IndexTerm>
<!--no-op:  l-->
</Para>
<ItemizedList>
<ListItem>
<Para>Runtime services
</Para>
</ListItem>
<ListItem>
<Para>Environment variables
</Para>
</ListItem>
<ListItem>
<Para>Data types and structures
</Para>
</ListItem>
<ListItem>
<Para>Permissions required
</Para>
</ListItem>
</ItemizedList>
<!--no-op:  b-->
<RefSect2>
<Title>Runtime Services</Title>
<Para>The following is an alphabetical list of the audit API routines.
<IndexTerm Id="DCEADR.MAN432.indx.5">
<Primary>routines</Primary>
<Secondary>Audit API support</Secondary>
</IndexTerm>With each routine name is its description.  The types of application
program that will most likely call the routine are enclosed in parentheses.
</Para>
<VariableList>
<VarListEntry role="linebreak">
<Term><Function>dce_aud_close()</Function></Term>
<ListItem>
<Para>Closes an audit trail (client/server applications, 
audit trail analysis and examination tools).
</Para>
</ListItem>
</VarListEntry>
<VarListEntry role="linebreak">
<Term><Function>dce_aud_commit()</Function></Term>
<ListItem>
<Para>Performs the audit action(s) (client/server applications).
</Para>
</ListItem>
</VarListEntry>
<VarListEntry role="linebreak">
<Term><Function>dce_aud_discard()</Function></Term>
<ListItem>
<Para>Discards an audit record 
which releases the memory (client/server applications, 
audit trail analysis and examination tools).
</Para>
</ListItem>
</VarListEntry>
<VarListEntry role="linebreak">
<Term><Function>dce_aud_free_ev_info()</Function></Term>
<ListItem>
<Para>Frees the memory allocated for an event information structure returned from
calling the <Function>dce_aud_get_ev_info()</Function> function (audit trail analysis and
examination tools).
</Para>
</ListItem>
</VarListEntry>
<VarListEntry role="linebreak">
<Term><Function>dce_aud_free_header()</Function></Term>
<ListItem>
<Para>Frees the memory allocated to a designated audit record header structure
(audit trail analysis and examination tools).
</Para>
</ListItem>
</VarListEntry>
<VarListEntry role="linebreak">
<Term><Function>dce_aud_get_ev_info()</Function></Term>
<ListItem>
<Para>Gets the event-specific information of
a specified audit record (audit trail analysis and examination tools).
</Para>
</ListItem>
</VarListEntry>
<VarListEntry role="linebreak">
<Term><Function>dce_aud_get_header()</Function></Term>
<ListItem>
<Para>Gets the header of a specified audit
record (audit trail analysis and examination tools).
</Para>
</ListItem>
</VarListEntry>
<VarListEntry role="linebreak">
<Term><Function>dce_aud_length()</Function></Term>
<ListItem>
<Para>Gets the length of a specified audit
record (client/server applications, audit trail analysis and examination tools).
</Para>
</ListItem>
</VarListEntry>
<VarListEntry role="linebreak">
<Term><Function>dce_aud_next()</Function></Term>
<ListItem>
<Para>Reads the next audit record from a specified
audit trail into a buffer (audit trail analysis and examination tools).
</Para>
</ListItem>
</VarListEntry>
<VarListEntry role="linebreak">
<Term><Function>dce_aud_open()</Function></Term>
<ListItem>
<Para>Opens a specified audit trail for read or write
(client/server applications, audit trail analysis and examination tools).
</Para>
</ListItem>
</VarListEntry>
<VarListEntry role="linebreak">
<Term><Function>dce_aud_print()</Function></Term>
<ListItem>
<Para>Formats an audit record into a human-readable
form (audit trail analysis and examination tools).
</Para>
</ListItem>
</VarListEntry>
<VarListEntry role="linebreak">
<Term><Function>dce_aud_put_ev_info()</Function></Term>
<ListItem>
<Para>Adds event-specific information to a specified audit record buffer
(client/server applications).
</Para>
</ListItem>
</VarListEntry>
<VarListEntry role="linebreak">
<Term><Literal>dce_aud_set_trail_size_limit()</Literal></Term>
<ListItem>
<Para>Sets a limit to the audit trail size  (client/server applications).
</Para>
</ListItem>
</VarListEntry>
<VarListEntry role="linebreak">
<Term><Function>dce_aud_start()</Function></Term>
<ListItem>
<Para>Determines whether a specified event
should be audited given the client's binding information and the event outcome.
If the event should be audited or if it is not yet known whether the event
should be audited because the event outcome is still unknown, 
memory for the audit
record descriptor is allocated and 
the address of this memory is returned to the caller
(client/server applications). 
</Para>
</ListItem>
</VarListEntry>
<VarListEntry role="linebreak">
<Term><Function>dce_aud_start_with_name()</Function></Term>
<ListItem>
<Para>Determines whether a specified event
should be audited given the client/server name and the event outcome.
If the event should be audited or if it is not yet known whether the event
should be audited because the event outcome is still unknown, 
memory for the audit
record descriptor is allocated and 
the address of this memory is returned to the caller
(client/server applications).
<?sml-break><?sml-need 7></Para>
</ListItem>
</VarListEntry>
<VarListEntry role="linebreak">
<Term><Function>dce_aud_start_with_pac()</Function></Term>
<ListItem>
<Para>Determines whether a specified event
should be audited given the client's privilege attribute certificate (PAC)
and the event outcome.  If the event should be audited or if it is 
not yet known whether the event should be audited because the event outcome is still
unknown, memory for the audit record descriptor is allocated and 
the address of this memory is returned to the caller
(client/server applications).
</Para>
</ListItem>
</VarListEntry>
<VarListEntry role="linebreak">
<Term><Function>dce_aud_start_with_server_binding()</Function></Term>
<ListItem>
<Para>Determines whether a specified event
should be audited given the server's binding information and the event outcome.
If the event should be audited or if it is not yet known whether the event
should be audited because the event outcome is still unknown, 
memory for the audit
record descriptor is allocated and 
the address of this memory is returned to the caller
(client/server applications).
</Para>
</ListItem>
</VarListEntry>
<VarListEntry role="linebreak">
<Term><Function>dce_aud_start_with_uuid()</Function></Term>
<ListItem>
<Para>Determines whether a specified event
should be audited given the client/server UUID and the event outcome.
If the event must be audited, or if the outcome of the event is not
yet known, the memory for the audit record descriptor is allocated and the
address of this structure is returned to the caller
(client/server applications).
</Para>
</ListItem>
</VarListEntry>
</VariableList>
</RefSect2>
<RefSect2>
<Title>Audit Data Types</Title>
<Para>The following subsections list the data types and structures used by
applications to perform auditing and to analyze audit trails.
</Para>
<VariableList>
<VarListEntry role="linebreak">
<Term>Event-Specific Information</Term>
<ListItem>
<Para>The audit APIs allow applications to include 
event-specific information in audit
records.  Event-specific information must be represented as information items
using the following data type.
</Para>
<InformalExample>
<Para><ProgramListing><UserInput>typedef struct {
        unsigned16 format;
        union {
            idl_small_int small_int;
            idl_short_int short_int;
            idl_long_int long_int;
            idl_hyper_int hyper_int;
            idl_usmall_int usmall_int;
            idl_ushort_int ushort_int;
            idl_ulong_int ulong_int;
            idl_uhyper_int uhyper_int;
            idl_short_float short_float;
            idl_long_float long_float;
            idl_boolean boolean;
            uuid_t uuid;
            utc_t utc;
            sec_acl_t * acl;
            idl_byte * byte_string;
            idl_char * char_string;
        } data;
} dce_aud_ev_info_t;
</UserInput></ProgramListing></Para>
</InformalExample>
<IndexTerm Id="DCEADR.MAN432.indx.6">
<Primary>Audit event information types</Primary>
</IndexTerm>
<Para>The <Replaceable>format</Replaceable> field of the above data structure defines formatting
information that is used to determine the type of the data referenced
by the <Replaceable>data</Replaceable> field.
The following table shows possible values of the <Replaceable>format</Replaceable> field, 
their corresponding data types, and their sizes.
</Para>
<Para><!-- .TB "Event Data Format Specifiers\(emintro(3sec)"-->
</Para>
<InformalTable Frame="all" Remap="center" Orient="Port">
<TGroup Rowsep="0" Colsep="0" Cols="3">
<ColSpec Rowsep="1" Colsep="1" Align="Left" Colwidth="2*" Colname="col1" Colnum="1">
<ColSpec Rowsep="1" Colsep="1" Align="Left" Colwidth="1.5*" Colname="col2" Colnum="2">
<ColSpec Rowsep="1" Align="Left" Colwidth="1*" Colname="col3" Colnum="3">
<TBody>
<Row>
<Entry Rowsep="1" Colsep="0" Align="Center" Namest="col1" Nameend="col3"><Literal>Event Data Format Specifiers&mdash;intro(3sec)</Literal></Entry>
</Row>
<Row>
<Entry Rowsep="1"><Literal>Specifier</Literal></Entry>
<Entry Rowsep="1"><Literal>Data Type</Literal></Entry>
<Entry Rowsep="1"><Literal>Size</Literal></Entry>
</Row>
<Row>
<Entry><Literal>aud_c_evt_info_small_int</Literal></Entry>
<Entry><Literal>idl_small_int</Literal></Entry>
<Entry>1 byte</Entry>
</Row>
<Row>
<Entry><Literal>aud_c_evt_info_short_int</Literal></Entry>
<Entry><Literal>idl_short_int</Literal></Entry>
<Entry>2 bytes</Entry>
</Row>
<Row>
<Entry><Literal>aud_c_evt_info_long_int</Literal></Entry>
<Entry><Literal>idl_long_int</Literal></Entry>
<Entry>4 bytes</Entry>
</Row>
<Row>
<Entry><Literal>aud_c_evt_info_hyper_int</Literal></Entry>
<Entry><Literal>idl_hyper_int</Literal></Entry>
<Entry>8 bytes</Entry>
</Row>
<Row>
<Entry><Literal>aud_c_evt_info_usmall_int</Literal></Entry>
<Entry><Literal>idl_usmall_int</Literal></Entry>
<Entry>1 bytes</Entry>
</Row>
<Row>
<Entry><Literal>aud_c_evt_info_ushort_int</Literal></Entry>
<Entry><Literal>idl_ushort_int</Literal></Entry>
<Entry>2 bytes</Entry>
</Row>
<Row>
<Entry><Literal>aud_c_evt_info_ulong_int</Literal></Entry>
<Entry><Literal>idl_ulong_int</Literal></Entry>
<Entry>4 bytes</Entry>
</Row>
<Row>
<Entry><Literal>aud_c_evt_info_uhyper_int</Literal></Entry>
<Entry><Literal>idl_uhyper_int</Literal></Entry>
<Entry>8 bytes</Entry>
</Row>
<Row>
<Entry><Literal>aud_c_evt_info_short_float</Literal></Entry>
<Entry><Literal>idl_short_float</Literal></Entry>
<Entry>4 bytes</Entry>
</Row>
<Row>
<Entry><Literal>aud_c_evt_info_long_float</Literal></Entry>
<Entry><Literal>idl_long_float</Literal></Entry>
<Entry>8 bytes</Entry>
</Row>
<Row>
<Entry><Literal>aud_c_evt_info_boolean</Literal></Entry>
<Entry><Literal>idl_boolean</Literal></Entry>
<Entry>1 byte</Entry>
</Row>
<Row>
<Entry><Literal>aud_c_evt_info_uuid</Literal></Entry>
<Entry><StructName Role="typedef">uuid_t</StructName></Entry>
<Entry>16 bytes</Entry>
</Row>
<Row>
<Entry><Literal>aud_c_evt_info_utc</Literal></Entry>
<Entry><StructName Role="typedef">utc_t</StructName></Entry>
<Entry>16 bytes</Entry>
</Row>
<Row>
<Entry><Literal>aud_c_evt_info_acl</Literal></Entry>
<Entry><Literal>sec_acl_t *</Literal></Entry>
<Entry>variable size </Entry>
</Row>
<Row>
<Entry><Literal>aud_c_evt_info_byte_string</Literal></Entry>
<Entry><Literal>idl_byte *</Literal></Entry>
<Entry>variable size</Entry>
</Row>
<Row>
<Entry><Literal>aud_c_evt_info_char_string</Literal></Entry>
<Entry><Literal>idl_char *</Literal></Entry>
<Entry>variable size</Entry>
</Row>
</TBody>
</TGroup>
</InformalTable>
<Para>Byte strings and character strings are terminated with a 0 (zero) byte.
New data types can be added to this list if they are used frequently.
Servers could use the pickling service of the IDL compiler to encode complex
data types into byte strings that are to be included in an audit record.
</Para>
</ListItem>
</VarListEntry>
<VarListEntry role="linebreak">
<Term>Audit Record Header Data Structure</Term>
<ListItem>
<Para>The following data structure is used to store header
information obtained from an audit record.  This structure is normally
only used by audit trail analysis and examination tools.  That is, it is hidden
from client/server applications.
</Para>
<InformalExample>
<Para><ProgramListing><UserInput>typedef struct {
        unsigned32      format;    
        uuid_t          server;    
        unsigned32      event;     
        unsigned16      outcome;   
        unsigned16      authz_st;  
        uuid_t	client;    
        uuid_t	cell;      
        unsigned16      num_groups;
        utc_t	time;      
        char	*addr;     
        uuid_t	*groups;   
} dce_aud_hdr_t;
</UserInput></ProgramListing></Para>
</InformalExample>
<VariableList>
<VarListEntry>
<Term><Literal>format</Literal></Term>
<ListItem>
<Para>Contains the version number of the tail format of the event
used for the event-specific information.  With this format
version number, the audit analysis tools can accommodate changes in the
formats of the event-specific information.  For
example, the event-specific information of an event may initially
be defined to be a 32-bit integer, and later changed to a character
string.  Format version 0 (zero) is assigned to the initial format for
each event.
</Para>
</ListItem>
</VarListEntry>
<VarListEntry>
<Term><Literal>server</Literal></Term>
<ListItem>
<Para>Contains the UUID of the server that generates the audit record.
</Para>
</ListItem>
</VarListEntry>
<VarListEntry>
<Term><Literal>event</Literal></Term>
<ListItem>
<Para>Contains the event number.  
</Para>
</ListItem>
</VarListEntry>
<VarListEntry>
<Term><Literal>outcome</Literal></Term>
<ListItem>
<Para>Indicates whether the event failed or succeeded.
If the event failed, the reason for the failure is given.
</Para>
</ListItem>
</VarListEntry>
<VarListEntry>
<Term><Literal>authz_st</Literal></Term>
<ListItem>
<Para>Indicates how the client is authorized:
by a name or by a DCE privilege attribute certificate (PAC).
</Para>
</ListItem>
</VarListEntry>
<VarListEntry>
<Term><Literal>client</Literal></Term>
<ListItem>
<Para>Contains the UUID of the client.
</Para>
</ListItem>
</VarListEntry>
<VarListEntry>
<Term><Literal>cell</Literal></Term>
<ListItem>
<Para>Contains the UUID of the client's cell.
</Para>
</ListItem>
</VarListEntry>
<VarListEntry>
<Term><Literal>num_groups</Literal></Term>
<ListItem>
<Para>Contains the number of local group privileges the client used for access.
<?sml-break><?sml-need 8></Para>
</ListItem>
</VarListEntry>
<VarListEntry>
<Term><Literal>groups</Literal></Term>
<ListItem>
<Para>Contains the UUIDs of the local group privileges that are used by the client 
for the access.  
By default, the group information is not be
included in the header (num_groups is set to 0 in this case), to minimize
the size of the audit records.  If the group information is deemed as
important, it can be included.  
</Para>
<Para>Information about foreign groups (global groups that do
not belong to the same cell where the client is registered)
is not included in this version of audit header but may be
included in later versions when global groups are supported.
</Para>
</ListItem>
</VarListEntry>
<VarListEntry>
<Term><Literal>time</Literal></Term>
<ListItem>
<Para>Contains a timestamp of <StructName Role="typedef">utc_t</StructName> type that records the time when
the server committed the audit record 
(that is, after providing the event
information through audit API function calls).  
Recording this time, rather than recording the time when the audit record
is appended to an audit trail, will better maintain the sequence of events.
The implementation of the audit subsystem may
involve communication between the server and a remote audit daemon, incurring
indefinite delays by network problems or intruders.
The inaccuracy in the <StructName Role="typedef">utc_t</StructName> timestamp may be useful for
correlating events.  When searching for events in an audit trail that
occur within a time interval, if the results of the comparisons between
the time of an event and the interval's starting and
ending times is <Literal>maybe</Literal> (because of inaccuracies), then the
event should be returned.
</Para>
</ListItem>
</VarListEntry>
<VarListEntry>
<Term><Literal>addr</Literal></Term>
<ListItem>
<Para>Records the client's address (port address of the caller).  Port addresses are
not authenticated.  A caller can provide a fraudulent
port address to a DCE server.  However, if this unauthenticated
port address is deemed to be useful information, a DCE server
can record this information using this field.
</Para>
</ListItem>
</VarListEntry>
</VariableList>
<Para>The identity of the server cell is not recorded in the header, because of the
assumption that all audit records in an audit trail
are for servers within a single cell, and implicitly, the server
cell is the local cell.
<?sml-break><?sml-need 7></Para>
</ListItem>
</VarListEntry>
<VarListEntry role="linebreak">
<Term>Audit Record Descriptor</Term>
<ListItem>
<Para>An opaque data type, <StructName Role="typedef">dce_aud_rec_t</StructName>, is used to represent an
audit record descriptor.
An audit record descriptor may be created, manipulated, or disposed of
by the following functions: The functions
<Function>dce_aud_start()</Function>, 
<Function>dce_aud_start_with_pac()</Function>, 
<Function>dce_aud_start_with_name()</Function>, 
<Function>dce_aud_start_with_server_binding()</Function>, and
<Function>dce_aud_next()</Function> return a record descriptor. 
The function   
<Function>dce_aud_put_ev_info()</Function> adds event information to an audit record
through a record descriptor. 
The functions <Function>dce_aud_get_header()</Function>,
<Function>dce_aud_get_ev_info()</Function>, and
<Function>dce_aud_length()</Function> get the event and record information through a
record descriptor.  
The function <Function>dce_aud_commit()</Function> commits 
an audit record through its descriptor. 
The function <Function>dce_aud_discard()</Function>
disposes of a record descriptor.
The function <Function>dce_aud_discard()</Function> is necessary only after reading
the record (that is, after invoking <Function>dce_aud_next()</Function>.
</Para>
</ListItem>
</VarListEntry>
<VarListEntry role="linebreak">
<Term>Audit Trail Descriptor</Term>
<ListItem>
<Para>An opaque data type, <StructName Role="typedef">dce_aud_trail_t</StructName>, is used to represent an audit
trail descriptor.  The <Function>dce_aud_open()</Function> function opens an audit trail
and returns a trail descriptor; <Function>dce_aud_next()</Function>
obtains an audit record from this descriptor; and <Function>dce_aud_commit()</Function>
commits an audit record from and to an opened audit trail 
through this descriptor.
The <Function>dce_aud_close()</Function> function disposes of this descriptor.
</Para>
</ListItem>
</VarListEntry>
</VariableList>
</RefSect2>
<RefSect2>
<Title>Environment Variables</Title>
<Para>The audit API routines use the following environment variables:
</Para>
<VariableList>
<VarListEntry role="linebreak">
<Term><SystemItem Class="EnvironVar">DCEAUDITOFF</SystemItem></Term>
<ListItem>
<Para>If this environment variable is defined at the time the
application is started, auditing is turned off. 
</Para>
</ListItem>
</VarListEntry>
<VarListEntry role="linebreak">
<Term><SystemItem Class="EnvironVar">DCEAUDITFILTERON</SystemItem></Term>
<ListItem>
<Para>If this environment variable is defined, filtering is enabled.
</Para>
</ListItem>
</VarListEntry>
<VarListEntry role="linebreak">
<Term><SystemItem Class="EnvironVar">DCEAUDITTRAILSIZE</SystemItem></Term>
<ListItem>
<Para>Sets the limit of the audit trail size.  This variable overrides the limit
set by the <Literal>dce_aud_set_trail_size_limit()</Literal> function.
</Para>
</ListItem>
</VarListEntry>
</VariableList>
</RefSect2>
<RefSect2>
<Title>Permissions Required</Title>
<Para>To use an audit daemon's audit record logging service, you need the log 
(<Literal>l</Literal>) permission to the audit daemon.  
<?sml-break><?sml-need .75i></Para>
</RefSect2>
</RefSect1>
<RefSect1>
<Title>Related Information</Title>
<Para><!--no-op:  l-->
Books:  &DCEAr;,
&DCEDg;.
<!--no-op:  b-->
</Para>
</RefSect1>
<!--+ 11/27/96 19:46:25
    | tagMorph:  $Id: audit_intro.3sec,v 1.1.2.6 1996/12/14 23:04:07 carrig Exp $
    | tagMorph library:  $Id: audit_intro.3sec,v 1.1.2.6 1996/12/14 23:04:07 carrig Exp $
    | sml-to-docbook:  1.25
    +-->
</RefEntry>
