<!--
# @OSF_COPYRIGHT@
# 
# 
# HISTORY
# $Log: sec_rgy_attr_update.3sec,v $
# Revision 1.1.2.7  1996/12/14  23:07:36  carrig
# 	{enh,R1.2.2}
# 	Arrays, Variable Lists
# 	[1996/12/14  23:01:21  carrig]
#
# Revision 1.1.2.6  1996/12/10  21:49:37  carrig
# 	{enh,R1.2.2}
# 	Synopses
# 	[1996/12/10  21:45:04  carrig]
# 
# Revision 1.1.2.5  1996/12/08  18:25:14  carrig
# 	{enh,R1.2.2}
# 	Var List Entry
# 	[1996/12/08  18:20:47  carrig]
# 
# Revision 1.1.2.4  1996/12/07  20:32:29  carrig
# 	{enh,R1.2.2}
# 	VarLists, Tables
# 	[1996/12/07  20:24:43  carrig]
# 
# Revision 1.1.2.3  1996/12/05  22:07:29  wardr
# 	{edit,R1.2.2}
# 	Fixed initial conversion problems
# 	[1996/12/05  22:01:14  wardr]
# 
# Revision 1.1.2.2  1996/12/01  20:23:19  weir
# 	Removed thinsp entities
# 	[1996/12/01  20:16:49  weir]
# 
# Revision 1.1.2.1  1996/11/29  18:00:50  weir
# 	Initial submission
# 	[1996/11/29  17:51:02  weir]
# 
# $EndLog$
-->
<!-- Fragment document type declaration subset:
ArborText, Inc., 1988-1993, v.4001
<!DOCTYPE Book PUBLIC "-//Davenport//DTD DocBook V2.4//EN" [
]>
-->
<RefEntry Id="DCEADR.MAN706.rsml.1">
<RefMeta>
<RefEntryTitle>sec_rgy_attr_update</RefEntryTitle>
<ManVolNum>3sec</ManVolNum>
</RefMeta>
<RefNameDiv>
<RefName><Literal>sec_rgy_attr_update</Literal></RefName>
<RefPurpose>Creates and updates attribute 
instances for a specified object</RefPurpose>
</RefNameDiv>
<!-- COPYRIGHT NOTICE-->
<!-- Copyright (c) 1990, 1991, 1992, 1993, 1994 Open Software Foundation, Inc.-->
<!-- ALL RIGHTS RESERVED (DCE).  See the file named COPYRIGHT.DCE for-->
<!-- the full copyright text.-->
<!-- -->
<!-- OLD HISTORY-->
<!-- Revision 1.1.6.2  1996/11/19  19:00:01  wardr-->
<!-- 	{edit,R1.2.2}-->
<!-- 	Init capped heads and added PDG pointer-->
<!-- 	[1996/11/19  18:53:05  wardr]-->
<!---->
<!-- Revision 1.1.6.1  1996/05/13  19:06:29  wardr-->
<!-- 	{enh,R1.2.2}-->
<!-- 	Removed changebars-->
<!-- 	[1996/05/13  18:59:02  wardr]-->
<!-- -->
<!-- Revision 1.1.4.2  1996/02/07  20:18:14  rcb-->
<!-- 	R1.2.1: editorial pass following HP revision-->
<!-- 	[1996/02/07  20:14:32  rcb]-->
<!-- -->
<!-- Revision 1.1.4.1  1996/01/28  22:16:55  weir-->
<!-- 	CR 13293: miscellaneous HP work-->
<!-- 	[1996/01/28  22:15:51  weir]-->
<!-- -->
<!-- Revision 1.1.2.5  1995/06/21  13:22:25  buckler-->
<!-- 	1.1 edits and Prentice Hall reformat-->
<!-- 	[1995/06/19  14:59:10  buckler]-->
<!-- -->
<!-- Revision 1.1.2.4  1994/10/19  20:17:27  neilson-->
<!-- 	CR 10326 - Automatic fix to name of intro ref page-->
<!-- 	[1994/10/19  20:11:46  neilson]-->
<!-- -->
<!-- Revision 1.1.2.3  1994/10/14  20:46:10  millette-->
<!-- 	(enh, 10056, R1.1)-->
<!-- 	HP edits-->
<!-- 	[1994/10/14  20:45:46  millette]-->
<!-- -->
<!-- Revision 1.1.2.2  1994/06/13  17:16:02  devobj-->
<!-- 	cr10872 - fix copyright-->
<!-- 	[1994/06/13  16:49:12  devobj]-->
<!-- -->
<!-- Revision 1.1.2.1  1994/03/29  19:40:09  millette-->
<!-- 	(enh, 10056, R1.1)-->
<!-- 	Created for ERA-->
<!-- 	[1994/03/29  19:39:49  millette]-->
<!-- -->
<!-- -->
<!-- -->
<!-- HP History:-->
<!--	HP revision /main/HPDCE02/1  1995/10/13  16:17 UTC  millett-->
<!-- 	14502 fixes-->
<!-- -->
<!--	HP revision /main/millett_doc/1  1995/10/13  16:14 UTC  millett-->
<!-- 	14502:  out_attrs array and space_avail reserved for future use.-->
<!-- -->
<!--	HP revision /main/1  1995/04/03  22:30 UTC  arh-->
<!-- 	Add OSF doc sources.-->
<!-- -->
<!-- -->
<!-- -->
<!-- -->
<!-- -->
<!-- -->
<!-- .iX "\*Lsec_rgy_attr_update(\|)\*O"-->
<!-- .iX "calls" "\*Lsec_rgy_attr_update(\|)\*O"-->
<RefSect1 Remap="ANSI">
<Title>Synopsis</Title>
<FuncSynopsis>
<FuncSynopsisInfo>#include &lt;dce/sec_rgy_attr.h>
</FuncSynopsisInfo>
<FuncDef><Function><Literal>void sec_rgy_attr_update </Literal></Function></FuncDef>
<ParamDef>sec_rgy_handle_t <Parameter>context</Parameter></ParamDef>
<ParamDef>sec_rgy_domain_t <Parameter>name_domain</Parameter></ParamDef>
<ParamDef>sec_rgy_name_t <Parameter>name</Parameter></ParamDef>
<ParamDef>unsigned32 <Parameter>num_to_write</Parameter></ParamDef>
<ParamDef>unsigned32 <Parameter>space_avail</Parameter></ParamDef>
<ParamDef>sec_attr_t <Parameter>in_attrs[&thinsp;]</Parameter></ParamDef>
<ParamDef>unsigned32 <Parameter>*num_returned</Parameter></ParamDef>
<ParamDef>sec_attr_t <Parameter>out_attrs[&thinsp;]</Parameter></ParamDef>
<ParamDef>unsigned32 <Parameter>*num_left</Parameter></ParamDef>
<ParamDef>signed32 *<Parameter>failure_index</Parameter></ParamDef>
<ParamDef>error_status_t *<Parameter>status</Parameter></ParamDef>
</FuncSynopsis>
</RefSect1>
<RefSect1>
<Title>Parameters</Title>
<RefSect2>
<Title>Input</Title>
<VariableList>
<VarListEntry>
<Term><Symbol Role="Variable">context</Symbol></Term>
<ListItem>
<Para>An opaque handle bound to a registry server.  Use
<Function>sec_rgy_site_open()</Function> to acquire a bound handle.
</Para>
</ListItem>
</VarListEntry>
<VarListEntry role="linebreak">
<Term><Symbol Role="Variable">name_domain</Symbol></Term>
<ListItem>
<Para>A value of type <StructName Role="typedef">sec_rgy_domain_t</StructName> that identifies the registry domain in 
which the object specified 
by <Symbol Role="Variable">name</Symbol> resides.  
The valid values are as follows:
</Para>
<VariableList>
<VarListEntry role="linebreak">
<Term><Literal>sec_rgy_domain_person</Literal></Term>
<ListItem>
<Para>The name identifies a principal.
</Para>
</ListItem>
</VarListEntry>
<VarListEntry role="linebreak">
<Term><Literal>sec_rgy_domain_group</Literal></Term>
<ListItem>
<Para>The name identifies a group.
</Para>
</ListItem>
</VarListEntry>
<VarListEntry role="linebreak">
<Term><Literal>sec_rgy_domain_org</Literal></Term>
<ListItem>
<Para>The name identifies an organization.
</Para>
</ListItem>
</VarListEntry>
</VariableList>
<Para>This parameter is ignored if <Symbol Role="Variable">name</Symbol> is <Literal>policy</Literal> or <Literal>replist</Literal>.
</Para>
</ListItem>
</VarListEntry>
<VarListEntry>
<Term><Symbol Role="Variable">name</Symbol></Term>
<ListItem>
<Para>A character string of type <StructName Role="typedef">sec_rgy_name_t</StructName>
specifying the name
of the person, group, or organization to which the attribute is attached.
<?sml-break></Para>
</ListItem>
</VarListEntry>
<VarListEntry role="linebreak">
<Term><Symbol Role="Variable">num_to_write</Symbol></Term>
<ListItem>
<Para>A 32-bit unsigned integer that specifies the number of elements in 
the <Symbol Role="Variable">in_attrs[&thinsp;]</Symbol> array.  This integer must be greater than 0 (zero).
</Para>
</ListItem>
</VarListEntry>
<VarListEntry role="linebreak">
<Term><Symbol Role="Variable">space_avail</Symbol></Term>
<ListItem>
<Para>Set this parameter to zero. 
It is a 32-bit unsigned integer that specifies the size 
of the <Symbol Role="Variable">out_attrs[&thinsp;]</Symbol> array.  
Use of this parameter and its associated <Symbol Role="Variable">out_attrs[&thinsp;]</Symbol> array 
is reserved for future use by update trigger servers. 
</Para>
</ListItem>
</VarListEntry>
<VarListEntry>
<Term><Symbol Role="Variable">in_attrs[&thinsp;]</Symbol></Term>
<ListItem>
<Para>An array of values of type <StructName Role="typedef">sec_attr_t</StructName> that specifies the 
attribute instances to be updated.  The size of the array is determined by 
<Symbol Role="Variable">num_to_write</Symbol>.
</Para>
</ListItem>
</VarListEntry>
</VariableList>
</RefSect2>
<RefSect2>
<Title>Output</Title>
<VariableList>
<VarListEntry role="linebreak">
<Term><Symbol Role="Variable">num_returned</Symbol></Term>
<ListItem>
<Para>A pointer to an unsigned 32-bit integer that specifies the number of 
attribute instances returned in the <Symbol Role="Variable">out_attrs[&thinsp;]</Symbol> array.
</Para>
</ListItem>
</VarListEntry>
<VarListEntry>
<Term><Symbol Role="Variable">out_attrs[&thinsp;]</Symbol></Term>
<ListItem>
<Para>Reserved for future use by update trigger servers.
<!-- An array of values of type \*Lsec_attr_t\*O that specifies the updated-->
<!-- attribute instances.  Not that only if these attributes were processed-->
<!-- by an update attribute trigger server will they differ from the attributes -->
<!-- in the \*Vin_attrs[&thinsp;]\*O array.  The size of the array is determined by -->
<!-- \*Vspace_avail\*O and the length by \*Vnum_returned\*O.-->
</Para>
</ListItem>
</VarListEntry>
<VarListEntry>
<Term><Symbol Role="Variable">num_left</Symbol></Term>
<ListItem>
<Para>A pointer to an unsigned 32-bit integer that supplies the number of 
attributes that could not be returned because of 
space constraints in the <Symbol Role="Variable">out_attrs[&thinsp;]</Symbol> buffer.  To ensure that all the 
attributes will be returned, increase the size of the <Symbol Role="Variable">out_attrs[&thinsp;]</Symbol> 
array by increasing the size of <Symbol Role="Variable">space_avail</Symbol> and <Symbol Role="Variable">num_returned</Symbol>.
</Para>
</ListItem>
</VarListEntry>
<VarListEntry role="linebreak">
<Term><Symbol Role="Variable">failure_index</Symbol></Term>
<ListItem>
<Para>In the event of an error, <Symbol Role="Variable">failure_index</Symbol> is a pointer to 
the element in the <Symbol Role="Variable">in_attrs[&thinsp;]</Symbol> array that caused the update to 
fail.  If the failure cannot be attributed to 
a specific attribute, the value of <Symbol Role="Variable">failure_index</Symbol> is <Literal>&minus;1</Literal>.
</Para>
</ListItem>
</VarListEntry>
<VarListEntry>
<Term><Symbol Role="Variable">status</Symbol></Term>
<ListItem>
<Para>A pointer to the completion status.  On successful completion,
the routine returns <Literal>error_status_ok</Literal>.
Otherwise, it returns an error.
</Para>
</ListItem>
</VarListEntry>
</VariableList>
</RefSect2>
</RefSect1>
<RefSect1>
<Title>Description</Title>
<Para>The <Function>sec_rgy_attr_update()</Function> routine creates new attribute instances 
and updates 
existing attribute instances attached to a 
object specified by name and registry domain.  The instances to be created or 
updated are 
passed as an array of <StructName Role="typedef">sec_attr_t</StructName> data types.
This is an atomic operation:  if the creation of any attribute in the 
<Symbol Role="Variable">in_attrs[&thinsp;]</Symbol> 
array fails, all updates are aborted.  The attribute causing the update to 
fail is identified in 
<Symbol Role="Variable">failure_index</Symbol>.  If the failure cannot be attributed to a given attribute, 
<Symbol Role="Variable">failure_index</Symbol> contains <Literal>-1</Literal>.
</Para>
<Para>The <Symbol Role="Variable">in_attrs[&thinsp;]</Symbol> array, which specifies the attributes to be created, 
contains values of type <StructName Role="typedef">sec_attr_t</StructName>.  These values are as follows:
</Para>
<VariableList>
<VarListEntry>
<Term><Replaceable>attr_id</Replaceable></Term>
<ListItem>
<Para>A Universal Unique Identifier (UUID) that identifies the attribute type
</Para>
</ListItem>
</VarListEntry>
<VarListEntry>
<Term><Replaceable>attr_value</Replaceable></Term>
<ListItem>
<Para>Values of <StructName Role="typedef">sec_attr_value_t</StructName> that specify the 
attribute's encoding type and values.
</Para>
</ListItem>
</VarListEntry>
</VariableList>
<Para>If an attribute instance already exists which is identical 
in both <Replaceable>attr_id</Replaceable> and <Replaceable>attr_value</Replaceable> to an attribute 
specified in <Symbol Role="Variable">in_attrs[&thinsp;]</Symbol>, the existing attribute information is 
overwritten by the new information.  For multivalued attributes, 
every instance with the same <Replaceable>attr_id</Replaceable> is overwritten with the supplied 
values.  
</Para>
<Para>If an attribute instance does not exist, it is created.
</Para>
<Para>For multivalued attributes, 
because every instance of the multivalued attribute is 
identified by the same 
UUID, every instance is overwritten with the supplied 
value.  To change only one of the values, you must supply the values 
that should be unchanged as well as the new value. 
</Para>
<Para>To create instances of multivalued attributes, 
create individual <StructName Role="typedef">sec_attr_t</StructName> 
data types to define each multivalued attribute 
instance and then pass all of them in in the 
input array.
<!-- DESCRIBES OUT_ATTRS ARRAY.  PUT BACK IN IF UPDATE TRIGGER -->
<!-- SERVERS ARE IMPLEMENTED.-->
<!-- If an input attribute is associated with an update -->
<!-- attribute trigger server, -->
<!-- the attribute trigger server is invoked (by -->
<!-- the \*Lsec_attr_trig_update(\|)\*O function) -->
<!-- and the \*Vin_attr[&thinsp;]\*O array is supplied as input.  -->
<!-- The output attributes from the update attribute trigger server are stored -->
<!-- in the registry database and returned in the \*Vout_attrs[]\*O array.  -->
<!-- Note that the update attribute trigger server may modify the values -->
<!-- before they are -->
<!-- used to update the registry database.  This is the only circumstance under -->
<!-- which the values in the \*Vout_attrs[]\*O array differ -->
<!-- from the values in the -->
<!-- \*Vin_attrs[]\*O array.-->
</Para>
<RefSect2>
<Title>Permissions Required</Title>
<Para>The <Function>sec_rgy_attr_update()</Function> routine requires
the <Literal>U</Literal> (<Literal>Update</Literal>) permission 
set for each attribute type identified in the <Symbol Role="Variable">in_attrs</Symbol>[&thinsp;] array. 
These permissions are defined as part of the access control list (ACL)
manager set in the schema entry of each attribute type. 
</Para>
</RefSect2>
</RefSect1>
<RefSect1>
<Title>Files</Title>
<VariableList>
<VarListEntry role="linebreak">
<Term><Filename>/usr/include/dce/sec_rgy_attr.idl</Filename></Term>
<ListItem>
<Para>The <Literal>idl</Literal> file from which <Filename>dce/sec_rgy_attr.h</Filename> was derived.
</Para>
</ListItem>
</VarListEntry>
</VariableList>
</RefSect1>
<RefSect1>
<Title>Errors</Title>
<Para>The following describes a partial list of errors that might be returned.
Refer to the &DCETg; for complete descriptions of all error
messages.
</Para>
<VariableList>
<VarListEntry role="linebreak">
<Term><Literal>unauthorized</Literal></Term>
<ListItem>
<Para></Para>
</ListItem>
</VarListEntry>
<VarListEntry role="linebreak">
<Term><Literal>database read only</Literal></Term>
<ListItem>
<Para></Para>
</ListItem>
</VarListEntry>
<VarListEntry role="linebreak">
<Term><Literal>server unavailable</Literal></Term>
<ListItem>
<Para></Para>
</ListItem>
</VarListEntry>
<VarListEntry role="linebreak">
<Term><Literal>invalid/unsupported attribute type</Literal></Term>
<ListItem>
<Para></Para>
</ListItem>
</VarListEntry>
<VarListEntry role="linebreak">
<Term><Literal>invalid encoding type</Literal></Term>
<ListItem>
<Para></Para>
</ListItem>
</VarListEntry>
<VarListEntry role="linebreak">
<Term><Literal>value not unique</Literal></Term>
<ListItem>
<Para></Para>
</ListItem>
</VarListEntry>
<VarListEntry role="linebreak">
<Term><Literal>attribute instance already exists</Literal></Term>
<ListItem>
<Para></Para>
</ListItem>
</VarListEntry>
<VarListEntry role="linebreak">
<Term><Literal>trigger server unavailable</Literal></Term>
<ListItem>
<Para></Para>
</ListItem>
</VarListEntry>
<VarListEntry role="linebreak">
<Term><Literal>site read only</Literal></Term>
<ListItem>
<Para></Para>
</ListItem>
</VarListEntry>
<VarListEntry role="linebreak">
<Term><Literal>error_status_ok</Literal></Term>
<ListItem>
<Para></Para>
</ListItem>
</VarListEntry>
</VariableList>
</RefSect1>
<RefSect1>
<Title>Related Information</Title>
<Para><!--no-op:  l-->
Functions:
<Filename MoreInfo="RefEntry">sec_intro(3sec)</Filename>,
<Filename MoreInfo="RefEntry">sec_rgy_attr_delete(3sec)</Filename>, 
<Filename MoreInfo="RefEntry">sec_rgy_attr_test_and_update(3sec)</Filename>.
<!--no-op:  b-->
</Para>
</RefSect1>
<!--+ 11/27/96 19:46:25
    | tagMorph:  $Id: sec_rgy_attr_update.3sec,v 1.1.2.7 1996/12/14 23:07:36 carrig Exp $
    | tagMorph library:  $Id: sec_rgy_attr_update.3sec,v 1.1.2.7 1996/12/14 23:07:36 carrig Exp $
    | sml-to-docbook:  1.25
    +-->
</RefEntry>
