<!--
# COPYRIGHT NOTICE
# Copyright (c) 1990-1996 Open Software Foundation, Inc. 
# ALL RIGHTS RESERVED (DCE). See the file named COPYRIGHT.DCE in the 
# src directory for the full copyright text. 
# 
# 
# HISTORY
# $Log: pkc_plcy_get_key_trust.3sec,v $
# Revision 1.1.2.7  1996/12/17  20:51:05  damon
# 	Expanded OSF C O P Y R I G H T   N O T I C E
# 	[1996/12/17  20:48:05  damon]
#
# Revision 1.1.2.6  1996/12/12  00:12:24  weir
# 	Editorial corrections
# 	[1996/12/12  00:10:58  weir]
# 
# Revision 1.1.2.5  1996/12/07  22:34:37  weir
# 	Set revision flag
# 	[1996/12/07  22:32:55  weir]
# 
# Revision 1.1.2.4  1996/12/07  20:29:09  carrig
# 	{enh,R1.2.2}
# 	VarLists, Tables
# 	[1996/12/07  20:20:58  carrig]
# 
# Revision 1.1.2.3  1996/12/06  23:46:38  weir
# 	Updates
# 	[1996/12/06  23:44:57  weir]
# 
# Revision 1.1.2.2  1996/12/01  20:20:19  weir
# 	Removed thinsp entities
# 	[1996/12/01  20:13:58  weir]
# 
# Revision 1.1.2.1  1996/11/29  17:56:53  weir
# 	Initial submission
# 	[1996/11/29  17:48:37  weir]
# 
# $EndLog$
# 
-->
<!-- Fragment document type declaration subset:
ArborText, Inc., 1988-1993, v.4001
<!DOCTYPE Book PUBLIC "-//Davenport//DTD DocBook V2.4//EN" [
]>
-->
<RefEntry RevisionFlag="changed" Id="DCEADR.MAN547.rsml.1">
<RefMeta>
<RefEntryTitle>pkc_plcy_get_key_trust</RefEntryTitle>
<ManVolNum>3sec</ManVolNum>
</RefMeta>
<RefNameDiv>
<RefName><Literal>pkc_plcy_get_key_trust</Literal></RefName>
<RefPurpose>Returns information about trust in a key</RefPurpose>
</RefNameDiv>
<!-- -->
<!-- -->
<!-- OLD HISTORY-->
<!-- Revision 1.1.2.3  1996/11/19  18:57:12  wardr-->
<!-- 	{edit,R1.2.2}-->
<!-- 	Init capped heads and added PDG pointer-->
<!-- 	[1996/11/19  18:50:19  wardr]-->
<!---->
<!-- Revision 1.1.2.2  1996/11/18  19:58:13  weir-->
<!-- 	No change-->
<!-- 	[1996/11/18  19:55:42  weir]-->
<!-- -->
<!-- Revision 1.1.2.1  1996/10/15  21:11:14  weir-->
<!-- 	Initial submission-->
<!-- 	[1996/10/15  21:09:38  weir]-->
<!-- -->
<!-- -->
<!-- -->
<!-- -->
<!-- -->
<RefSect1 Remap="ANSI">
<Title>Synopsis</Title>
<FuncSynopsis>
<FuncSynopsisInfo>#include &lt;pkc_plcy.h></FuncSynopsisInfo>
<FuncDef><Function>unsigned32 pkc_plcy_get_key_trust</Function></FuncDef>
<ParamDef>gss_OID <Parameter>policy</Parameter></ParamDef>
<ParamDef>void * <Parameter>keys_handle</Parameter></ParamDef>
<ParamDef>unsigned <Parameter>key_index</Parameter></ParamDef>
<ParamDef>certification_flags_t * <Parameter>flags</Parameter></ParamDef>
<ParamDef>uuid_t * <Parameter>key_domain</Parameter></ParamDef>
<ParamDef>unsigned long * <Parameter>key_usages</Parameter></ParamDef>
</FuncSynopsis>
</RefSect1>
<RefSect1>
<Title>Parameters</Title>
<!-- -->
<RefSect2>
<Title>Input</Title>
<!-- -->
<VariableList>
<VarListEntry>
<Term><Symbol Role="Variable">policy</Symbol></Term>
<ListItem>
<Para>Specifies policy.
<!-- -->
</Para>
</ListItem>
</VarListEntry>
<VarListEntry>
<Term><Symbol Role="Variable">keys_handle</Symbol></Term>
<ListItem>
<Para>A policy specific structure, obtained from a call to
<Filename MoreInfo="RefEntry">pkc_plcy_retrieve_keyinfo(3sec)</Filename>.
<!-- -->
</Para>
</ListItem>
</VarListEntry>
<VarListEntry>
<Term><Symbol Role="Variable">key_index</Symbol></Term>
<ListItem>
<Para>Specifies key about which trust information is requested.
<!-- -->
</Para>
</ListItem>
</VarListEntry>
</VariableList>
<!-- -->
</RefSect2>
<RefSect2>
<Title>Output</Title>
<!-- -->
<VariableList>
<VarListEntry>
<Term><Symbol Role="Variable">flags</Symbol></Term>
<ListItem>
<Para>Information about the trust that can be placed in the key (see below).
<!-- -->
</Para>
</ListItem>
</VarListEntry>
<!-- -->
<!-- -->
<!-- -->
<VarListEntry>
<Term><Symbol Role="Variable">key_domain</Symbol></Term>
<ListItem>
<para>
Indicates domain of retrieved key. A value of
<Literal>sec_pk_domain_unspecified</Literal> or <Literal>NULL</Literal>
means that the policy does not distinguish keys by domain.</para>
</ListItem>
</VarListEntry>
<!-- -->
<!-- -->
<!-- -->
<VarListEntry>
<Term><Symbol Role="Variable">key_usages</Symbol></Term>
<ListItem>
<para>
Indicates usage key is intended for.</para>
<!-- -->
</ListItem>
</VarListEntry>
<!-- -->
<!-- -->
<!-- -->
</VariableList>
<!-- -->
<!-- -->
</RefSect2>
</RefSect1>
<RefSect1>
<Title>Description</Title>
<Para><Filename MoreInfo="RefEntry">pkc_plcy_get_key_trust(3sec)</Filename>
searches the list of registered policies for implementations of the specified
policy. If found, the implementation is opened, if necessary, and its
<Function>(*get_key_data)()</Function> function is invoked. Necessary mutex
protection around non-thread safe policy implementations is provided.
<!-- -->
</Para>
<Para>The returned <StructName Role="typedef">certification_flags_t</StructName>
structure describes the trust that can be placed in the key. It contains the
following fields:
<!-- -->
</Para>
<ItemizedList>
<ListItem>
<Para><Literal>trust_type</Literal>
</Para>
<Para>A <StructName Role="typedef">trust_type_t</StructName> value, which will
be one of the following:
<!-- -->
</Para>
<ItemizedList>
<ListItem>
<Para><Literal>UNTRUSTED</Literal>
</Para>
<Para>No trust (e.g., unauthenticated).
<!-- -->
</Para>
</ListItem>
<ListItem>
<Para><Literal>DIRECT_TRUST</Literal>
</Para>
<Para>Direct trust via third party (e.g., authenticated registry).
<!-- -->
</Para>
</ListItem>
<ListItem>
<Para><Literal>CERTIFIED_TRUST</Literal>
</Para>
<Para>Trust certified by caller's trust base.
<!-- -->
</Para>
</ListItem>
</ItemizedList>
<!-- -->
</ListItem>
</ItemizedList>
<!-- -->
<!-- -->
<!-- ==================================================================== -->
<!-- -->
<para>
If <Literal>key_domain</Literal> and <Literal>key_usages</Literal> are
passed as non-<Literal>NULL</Literal> pointers, upon successful return these
parameters will describe the domain and permitted usage(s) of the specified
key. Policies that do not distinguish keys according to domain will indicate a
domain of <Literal>sec_pk_domain_unspecified</Literal>; policies that do not
distinguish keys according to usage will indicate all usages are permitted.
</para>
<para>
The returned <Literal>key_usages</Literal> is a bit mask which describes
the usage(s), if any, which the key is restricted to. The value is
formed by AND-ing together one or more of the following constants:</para>
<!-- -->
<!-- -->
<VariableList>
<VarListEntry role="linebreak">
<Term><Literal>PKC_KEY_USAGE_AUTHENTICATION</Literal></Term>
<ListItem><para>
The key can be used to authenticate a user</para>
</ListItem>
</VarListEntry>
<!-- -->
<VarListEntry role="linebreak">
<Term><Literal>PKC_KEY_USAGE_INTEGRITY</Literal></Term>
<ListItem><para>
The key can be used to provide integrity protection</para>
</ListItem>
</VarListEntry>
<!-- -->
<VarListEntry role="linebreak">
<Term><Literal>PKC_KEY_USAGE_KEY_ENCIPHERMENT</Literal></Term>
<ListItem><para>
The key can be used to encrypt user keys</para>
</ListItem>
</VarListEntry>
<!-- -->
<VarListEntry role="linebreak">
<Term><Literal>PKC_KEY_USAGE_DATA_ENCIPHERMENT</Literal></Term>
<ListItem><para>
The key can be used to encrypt user data</para>
</ListItem>
</VarListEntry>
<!-- -->
<VarListEntry role="linebreak">
<Term><Literal>PKC_KEY_USAGE_KEY_AGREEMENT</Literal></Term>
<ListItem><para>
The key can be used for key-exchange</para>
</ListItem>
</VarListEntry>
<!-- -->
<VarListEntry role="linebreak">
<Term><Literal>PKC_KEY_USAGE_NONREPUDIATION</Literal></Term>
<ListItem><para>
The key can be used for non-repudiation</para>
</ListItem>
</VarListEntry>
<!-- -->
<VarListEntry role="linebreak">
<Term><Literal>PKC_CAKEY_USAGE_KEY_CERT_SIGN</Literal></Term>
<ListItem><para>
The key can be used to sign key certificates</para>
</ListItem>
</VarListEntry>
<!-- -->
<VarListEntry role="linebreak">
<Term><Literal>PKC_CAKEY_USAGE_OFFLINE_CRL_SIGN</Literal></Term>
<ListItem><para>
The key can be used to sign CRLs</para>
</ListItem>
</VarListEntry>
<!-- -->
<VarListEntry role="linebreak">
<Term><Literal>PKC_CAKEY_USAGE_TRANSACTION_SIGN</Literal></Term>
<ListItem><para>
The key can be used to sign transactions</para>
</ListItem>
</VarListEntry>
</VariableList>
<!-- -->
<!-- -->
<para>
A returned <Literal>key_usages</Literal> value of <Literal>NULL</Literal>
(or a value with all bits set) means that the key is suitable for any
usage.</para>
<!-- -->
<!-- ==================================================================== -->
<!-- -->
<!-- -->
</RefSect1>
<!-- -->
<!-- -->
<RefSect1>
<Title>Return Values</Title>
<VariableList>
<VarListEntry role="linebreak">
<Term><Literal>pkc_s_success</Literal></Term>
<ListItem>
<Para>Operation successfully completed.
<!-- -->
</Para>
</ListItem>
</VarListEntry>
</VariableList>
<!-- -->
<!-- -->
<!-- -->
<!-- -->
<!-- -->
<!-- -->
</RefSect1>
<RefSect1>
<Title>Errors</Title>
<Para>Refer to the &DCETg; for
complete descriptions of all error messages.
<!-- -->
<!-- -->
</Para>
</RefSect1>
<RefSect1>
<Title>Related Information</Title>
<Para>
Functions:
<Filename MoreInfo="RefEntry">pkc_plcy_intro(3sec)</Filename>,
<Filename MoreInfo="RefEntry">pkc_plcy_delete_keyinfo(3sec)</Filename>,
<Filename MoreInfo="RefEntry">pkc_plcy_delete_trustbase(3sec)</Filename>,
<Filename MoreInfo="RefEntry">pkc_plcy_establish_trustbase(3sec)</Filename>,
<Filename MoreInfo="RefEntry">pkc_plcy_get_key_certifier_count(3sec)</Filename>,
<Filename MoreInfo="RefEntry">pkc_plcy_get_key_certifier_info(3sec)</Filename>,
<Filename MoreInfo="RefEntry">pkc_plcy_get_key_count(3sec)</Filename>,
<Filename MoreInfo="RefEntry">pkc_plcy_get_key_data(3sec)</Filename>,
<Filename MoreInfo="RefEntry">pkc_plcy_get_registered_policies(3sec)</Filename>,
<Filename MoreInfo="RefEntry">pkc_plcy_lookup_policy(3sec)</Filename>,
<Filename MoreInfo="RefEntry">pkc_plcy_retrieve_key(3sec)</Filename>,
<Filename MoreInfo="RefEntry">pkc_plcy_retrieve_keyinfo(3sec)</Filename>,
<Filename MoreInfo="RefEntry">pkc_register_policy(3sec)</Filename>.
<!-- -->
<!-- -->
<!-- -->
<!-- -->
<!-- -->
</Para>
</RefSect1>
<!--+ 11/27/96 19:46:25
    | tagMorph:  $Id: pkc_plcy_get_key_trust.3sec,v 1.1.2.7 1996/12/17 20:51:05 damon Exp $
    | tagMorph library:  $Id: pkc_plcy_get_key_trust.3sec,v 1.1.2.7 1996/12/17 20:51:05 damon Exp $
    | sml-to-docbook:  1.25
    +-->
</RefEntry>
