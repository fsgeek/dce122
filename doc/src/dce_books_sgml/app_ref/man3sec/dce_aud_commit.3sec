<!--
# @OSF_COPYRIGHT@
# 
# 
# HISTORY
# $Log: dce_aud_commit.3sec,v $
# Revision 1.1.2.6  1996/12/11  16:37:27  carrig
# 	{enh,R1.2.2}
# 	Fixed errors from log
# 	[1996/12/11  16:36:25  carrig]
#
# Revision 1.1.2.5  1996/12/10  21:56:08  carrig
# 	{enh,R1.2.2}
# 	Synopses
# 	[1996/12/10  21:54:52  carrig]
# 
# Revision 1.1.2.4  1996/12/07  20:27:26  carrig
# 	{enh,R1.2.2}
# 	VarLists, Tables
# 	[1996/12/07  20:19:02  carrig]
# 
# Revision 1.1.2.3  1996/12/05  22:03:44  wardr
# 	{edit,R1.2.2}
# 	Fixed initial conversion problems
# 	[1996/12/05  21:57:42  wardr]
# 
# Revision 1.1.2.2  1996/12/01  20:19:06  weir
# 	Removed thinsp entities
# 	[1996/12/01  20:12:34  weir]
# 
# Revision 1.1.2.1  1996/11/29  17:54:43  weir
# 	Initial submission
# 	[1996/11/29  17:47:22  weir]
# 
# $EndLog$
-->
<!-- Fragment document type declaration subset:
ArborText, Inc., 1988-1993, v.4001
<!DOCTYPE Book PUBLIC "-//Davenport//DTD DocBook V2.4//EN" [
]>
-->
<RefEntry Id="DCEADR.MAN458.rsml.1">
<RefMeta>
<RefEntryTitle>dce_aud_commit</RefEntryTitle>
<ManVolNum>3sec</ManVolNum>
</RefMeta>
<RefNameDiv>
<RefName><Literal>dce_aud_commit</Literal></RefName>
<RefPurpose>Writes the audit record in the audit trail file.  Used by client/server applications.</RefPurpose>
</RefNameDiv>
<IndexTerm Id="DCEADR.MAN458.indx.1">
<Primary><Function>dce_aud_commit()</Function></Primary>
</IndexTerm>
<!-- COPYRIGHT NOTICE-->
<!-- Copyright (c) 1990, 1991, 1992, 1993, 1994 Open Software Foundation, Inc.-->
<!-- ALL RIGHTS RESERVED (DCE).  See the file named COPYRIGHT.DCE for-->
<!-- the full copyright text.-->
<!-- -->
<!-- OLD HISTORY-->
<!-- Revision 1.1.4.2  1996/11/19  18:55:43  wardr-->
<!-- 	{edit,R1.2.2}-->
<!-- 	Init capped heads and added PDG pointer-->
<!-- 	[1996/11/19  18:48:48  wardr]-->
<!---->
<!-- Revision 1.1.4.1  1996/05/13  19:02:23  wardr-->
<!-- 	{enh,R1.2.2}-->
<!-- 	Removed changebars-->
<!-- 	[1996/05/13  18:56:10  wardr]-->
<!-- -->
<!-- Revision 1.1.2.8  1995/06/15  19:27:00  buckler-->
<!-- 	1.1 edits and Prentice Hall reformat-->
<!-- 	[1995/06/15  15:40:45  buckler]-->
<!-- -->
<!-- Revision 1.1.2.7  1994/10/20  03:13:44  cruz-->
<!-- 	Final editorial changes, added status codes.-->
<!-- 	[1994/10/20  03:13:25  cruz]-->
<!-- -->
<!-- Revision 1.1.2.6  1994/09/14  13:30:21  cruz-->
<!-- 	Added new outcome, recovered from technical comments.-->
<!-- 	[1994/09/14  13:29:47  cruz]-->
<!-- -->
<!-- Revision 1.1.2.5  1994/06/13  17:04:21  devobj-->
<!-- 	cr10872 - fix copyright-->
<!-- 	[1994/06/13  16:48:24  devobj]-->
<!-- -->
<!-- Revision 1.1.2.4  1994/05/21  16:33:04  cruz-->
<!-- 	Incorporated technical comments-->
<!-- 	[1994/05/21  16:32:43  cruz]-->
<!-- -->
<!-- Revision 1.1.2.3  1994/05/13  14:24:54  cruz-->
<!-- 	Added index entries-->
<!-- 	[1994/05/13  14:18:13  cruz]-->
<!-- -->
<!-- Revision 1.1.2.2  1994/05/11  13:59:13  cruz-->
<!-- 	Added revision bars-->
<!-- 	[1994/05/11  13:58:54  cruz]-->
<!-- -->
<!-- Revision 1.1.2.1  1994/05/09  19:43:31  cruz-->
<!-- 	Renamed file to dce_aud_commit.3sec-->
<!-- 	[1994/05/09  19:43:08  cruz]-->
<!-- -->
<!-- Revision 1.1.2.1  1994/05/03  13:34:32  cruz-->
<!-- 	Audit app ref doc-->
<!-- 	[1994/05/03  13:34:03  cruz]-->
<!-- -->
<RefSect1 Remap="ANSI">
<Title>Synopsis</Title>
<FuncSynopsis>
<FuncSynopsisInfo>#include &lt;dce/audit.h></FuncSynopsisInfo>
<FuncDef><Function><Literal>void </Literal>dce_aud_commit</Function></FuncDef>
<ParamDef>dce_aud_trail_t <Parameter>at</Parameter></ParamDef>
<ParamDef>dce_aud_rec_t <Parameter>ard</Parameter></ParamDef>
<ParamDef>unsigned32 <Parameter>options</Parameter></ParamDef>
<ParamDef>unsigned16 <Parameter>format</Parameter></ParamDef>
<ParamDef>unsigned32 <Parameter>outcome</Parameter></ParamDef>
<ParamDef>unsigned32* <Parameter>status</Parameter></ParamDef>
</FuncSynopsis>
</RefSect1>
<RefSect1>
<Title>Parameters</Title>
<RefSect2>
<Title>Input</Title>
<VariableList>
<VarListEntry>
<Term><Symbol Role="Variable">at</Symbol></Term>
<ListItem>
<Para>Designates an audit trail file to which the completed audit record will
be written.  The audit trail file must have been previously opened by
a successful call to the <Function>dce_aud_open()</Function> function.
</Para>
</ListItem>
</VarListEntry>
<VarListEntry>
<Term><Symbol Role="Variable">ard</Symbol></Term>
<ListItem>
<Para>Designates an audit record descriptor that was returned by a previously
successful call to one of the <Literal>dce_aud_start_</Literal><Symbol Role="Variable">*</Symbol><Literal>()</Literal> functions.  The content 
of this record buffer will be appended to the audit trail specified by <Symbol Role="Variable">at</Symbol>.
</Para>
</ListItem>
</VarListEntry>
<VarListEntry>
<Term><Symbol Role="Variable">options</Symbol></Term>
<ListItem>
<Para>Bitwise <Literal>OR</Literal> of option values described below.  A
value of 0 (zero) for <Symbol Role="Variable">options</Symbol> results in the default operation
(normal writing to the file without flushing to stable storage).
The possible option value is
</Para>
<VariableList>
<VarListEntry role="linebreak">
<Term><Literal>aud_c_evt_commit_sync</Literal></Term>
<ListItem>
<Para>Flushes the audit record to stable storage before the function returns.  
</Para>
</ListItem>
</VarListEntry>
<VarListEntry role="linebreak">
<Term><Literal>aud_c_evt_always_log</Literal></Term>
<ListItem>
<Para>Unconditionally logs the audit record to the audit trail.
</Para>
</ListItem>
</VarListEntry>
<VarListEntry role="linebreak">
<Term><Literal>aud_c_evt_always_alarm</Literal></Term>
<ListItem>
<Para>Unconditionally displays the audit record on the console.
<!-- If the storage or audit logging service is not available -->
<!-- (for example, when the audit trail file is full), the function will keep-->
<!-- on trying until it is able to -->
<!-- do a successful write to the stable storage.  -->
<!-- .LI "\*Laud_c_evt_commit_sync_no_wait\*O"-->
<!-- Flush the audit record to stable storage.  Returns an error status if the-->
<!-- storage or audit logging service is not available. -->
</Para>
</ListItem>
</VarListEntry>
</VariableList>
</ListItem>
</VarListEntry>
<VarListEntry>
<Term><Symbol Role="Variable">format</Symbol></Term>
<ListItem>
<Para>Event's tail format used for the event-specific information.  
This format can be configured by the user.
With this format
version number, the servers and audit analysis tools can accommodate changes
in the formats of the event specific information, or use different formats
dynamically.
</Para>
</ListItem>
</VarListEntry>
<VarListEntry>
<Term><Symbol Role="Variable">outcome</Symbol></Term>
<ListItem>
<Para>The event outcome to be stored in the header.  
The possible event-outcome values are as follows:
</Para>
<VariableList>
<VarListEntry role="linebreak">
<Term><Literal>aud_c_esl_cond_success</Literal></Term>
<ListItem>
<Para>The event completed successfully.
</Para>
</ListItem>
</VarListEntry>
<VarListEntry role="linebreak">
<Term><Literal>aud_c_esl_cond_denial</Literal></Term>
<ListItem>
<Para>The event failed because of access denial.
</Para>
</ListItem>
</VarListEntry>
<VarListEntry role="linebreak">
<Term><Literal>aud_c_esl_cond_failure</Literal></Term>
<ListItem>
<Para>The event failed because of reasons other than access denial.
</Para>
</ListItem>
</VarListEntry>
<VarListEntry role="linebreak">
<Term><Literal>aud_c_esl_cond_pending</Literal></Term>
<ListItem>
<Para>The event is in an intermediate state, and the outcome is pending, being one
in a series of connected events, where the application desires to record
the real outcome only after the last event.
</Para>
</ListItem>
</VarListEntry>
<VarListEntry role="linebreak">
<Term><Literal>aud_c_esl_cond_unknown</Literal></Term>
<ListItem>
<Para>The event outcome (denial, failure, pending, or success) is not known.
This outcome exists only between a <Function>dce_aud_start()</Function> 
(all varieties of this routine) call
and the next <Function>dce_aud_commit()</Function> call.
You can also use <Literal>0</Literal> to specify this outcome.
</Para>
</ListItem>
</VarListEntry>
</VariableList>
</ListItem>
</VarListEntry>
</VariableList>
</RefSect2>
<RefSect2>
<Title>Output</Title>
<VariableList>
<VarListEntry>
<Term><Symbol Role="Variable">status</Symbol></Term>
<ListItem>
<Para>Returns the status code from this routine.  This status code
indicates whether the routine completed successfully 
or not.  
If the routine did not complete successfully, 
the reason for the failure is given.
</Para>
</ListItem>
</VarListEntry>
</VariableList>
<?sml-break>
<?sml-need 1.5i>
</RefSect2>
</RefSect1>
<RefSect1>
<Title>Description</Title>
<Para>The <Function>dce_aud_commit()</Function> function determines whether the event should
be audited given the event outcome.  If it should be audited, the function
completes the audit record identified by <Literal>ard</Literal> and writes it to the
audit trail designated by <Literal>at</Literal>.  If any of the
<Literal>aud_c_evt_always_log</Literal> or
<Literal>aud_c_evt_always_alarm</Literal> options is selected, the event is
always audited (logged or an alarm message is sent to the standard output).
</Para>
<Para>If the <Literal>aud_c_evt_commit_sync</Literal> option is selected, the function
attempts to flush the audit record to stable storage.  
If the stable storage
write cannot be performed, the function either continues
to try until the stable-storage write is completed or returns an error status.
</Para>
<Para>Upon successful completion, <Function>dce_aud_commit()</Function> calls 
<Function>dce_aud_discard()</Function> internally to release the memory 
of the audit record that is being committed.
</Para>
<Para>The caller should not change the outcome between the
<Function>dce_aud_start()</Function> and <Function>dce_aud_commit()</Function> calls arbitrarily.
In this case, the outcome can be made more specific, for example,
from <Literal>aud_c_esl_cond_unknown</Literal> to <Literal>aud_c_esl_cond_success</Literal> 
or from <Literal>aud_c_esl_cond_pending</Literal> to <Literal>aud_c_esl_cond_success</Literal>.
</Para>
<Para>An outcome change from <Literal>aud_c_esl_cond_success</Literal> to
<Literal>aud_c_esl_cond_denial</Literal> is not logically correct because
the outcome <Literal>aud_c_esl_cond_success</Literal> may have caused a NULL
<Symbol Role="Variable">ard</Symbol> to be returned in this function.
If the final outcome can be <Literal>aud_c_esl_cond_success</Literal>, then it should
be specified in this function, or use <Literal>aud_c_esl_cond_unknown</Literal>. 		
<?sml-break><?sml-need 1.5i></Para>
</RefSect1>
<RefSect1>
<Title>Return Values</Title>
<Para>No value is returned.
<?sml-break><?sml-need 1.5i></Para>
</RefSect1>
<RefSect1>
<Title>Errors</Title>
<Para>The following describes a partial list of errors that might be returned.
Refer to the &DCETg; for complete descriptions of all error
messages.
</Para>
<VariableList>
<VarListEntry role="linebreak">
<Term><Literal>aud_s_wrong_protection_level</Literal></Term>
<ListItem>
<Para>Client used the wrong protection level. 
</Para>
</ListItem>
</VarListEntry>
<VarListEntry role="linebreak">
<Term><Literal>aud_s_dmn_disabled</Literal></Term>
<ListItem>
<Para>The daemon is disabled for logging.
</Para>
</ListItem>
</VarListEntry>
<VarListEntry role="linebreak">
<Term><Literal>aud_s_log_access_denied</Literal></Term>
<ListItem>
<Para>The client's access to the Audit log was denied.
</Para>
</ListItem>
</VarListEntry>
<VarListEntry role="linebreak">
<Term><Literal>aud_s_cannot_gettime</Literal></Term>
<ListItem>
<Para>The audit library cannot backup a trail file due to failure of
the <Function>utc_gettime()</Function> call.
</Para>
</ListItem>
</VarListEntry>
<VarListEntry role="linebreak">
<Term><Literal>aud_s_cannot_getgmtime</Literal></Term>
<ListItem>
<Para>The audit library cannot backup a trail file due to failure of
the <Function>utc_gmtime()</Function> call.
</Para>
</ListItem>
</VarListEntry>
<VarListEntry role="linebreak">
<Term><Literal>aud_s_rename_trail_file_rc</Literal></Term>
<ListItem>
<Para>Cannot rename the audit trail file.
</Para>
</ListItem>
</VarListEntry>
<VarListEntry role="linebreak">
<Term><Literal>aud_s_cannot_reopen_trail_file_rc</Literal></Term>
<ListItem>
<Para>Internally, the audit trail file was being reopened and the reopening of the
file failed.
</Para>
</ListItem>
</VarListEntry>
<VarListEntry role="linebreak">
<Term><Literal>aud_s_rename_trail_index_file_rc</Literal></Term>
<ListItem>
<Para>Internally, the audit trail index file was being renamed 
and the renaming of the file failed.
</Para>
</ListItem>
</VarListEntry>
<VarListEntry role="linebreak">
<Term><Literal>aud_s_cannot_reopen_trail_index_file_rc</Literal></Term>
<ListItem>
<Para>Internally, the audit trail index file was being reopened 
and the reopening of the file failed.
</Para>
</ListItem>
</VarListEntry>
<VarListEntry role="linebreak">
<Term><Literal>aud_s_invalid_record_descriptor</Literal></Term>
<ListItem>
<Para>The audit record descriptor is invalid.
</Para>
</ListItem>
</VarListEntry>
<VarListEntry role="linebreak">
<Term><Literal>aud_s_invalid_outcome</Literal></Term>
<ListItem>
<Para>The event outcome parameter that was provided is invalid.
</Para>
</ListItem>
</VarListEntry>
<VarListEntry role="linebreak">
<Term><Literal>aud_s_outcomes_inconsistent</Literal></Term>
<ListItem>
<Para>The event outcome parameter is inconsistent with the outcome parameter provided
in the <Function>dce_aud_start()</Function> call.
</Para>
</ListItem>
</VarListEntry>
<VarListEntry role="linebreak">
<Term><Literal>aud_s_trl_write_failure</Literal></Term>
<ListItem>
<Para>The audit record cannot be written to stable storage.
<!--  This code is-->
<!-- meaningful only when \*Laud_c_evt_commit_sync_no_wait\*O option-->
<!-- (described below) is selected.-->
</Para>
</ListItem>
</VarListEntry>
<VarListEntry>
<Term><Literal>aud_s_ok</Literal></Term>
<ListItem>
<Para>The call was successful.
</Para>
</ListItem>
</VarListEntry>
<VarListEntry role="linebreak">
<Term>Status codes passed from <Function>dce_aud_discard()</Function></Term>
<ListItem>
<Para></Para>
</ListItem>
</VarListEntry>
<VarListEntry role="linebreak">
<Term>Status codes passed from <Function>rpc_binding_inq_auth_caller()</Function></Term>
<ListItem>
<Para></Para>
</ListItem>
</VarListEntry>
<VarListEntry role="linebreak">
<Term>Status codes passed from <Function>dce_acl_is_client_authorized()</Function></Term>
<ListItem>
<Para></Para>
</ListItem>
</VarListEntry>
<VarListEntry role="linebreak">
<Term>Status codes passed from <Function>audit_pickle_dencode_ev_info()</Function> (RPC idl compiler)</Term>
<ListItem>
<Para></Para>
</ListItem>
</VarListEntry>
</VariableList>
</RefSect1>
<RefSect1>
<Title>Related Information</Title>
<Para><!--no-op:  l-->
Functions:
<Filename MoreInfo="RefEntry">dce_aud_open(3sec)</Filename>,
<Filename MoreInfo="RefEntry">dce_aud_put_ev_info(3sec)</Filename>,
<Filename MoreInfo="RefEntry">dce_aud_start(3sec)</Filename>,
<Filename MoreInfo="RefEntry">dce_aud_start_with_name(3sec)</Filename>,
<Filename MoreInfo="RefEntry">dce_aud_start_with_pac(3sec)</Filename>,
<Filename MoreInfo="RefEntry">dce_aud_start_with_server_binding(3sec)</Filename>.
<!--no-op:  b-->
</Para>
</RefSect1>
<!--+ 11/27/96 19:46:25
    | tagMorph:  $Id: dce_aud_commit.3sec,v 1.1.2.6 1996/12/11 16:37:27 carrig Exp $
    | tagMorph library:  $Id: dce_aud_commit.3sec,v 1.1.2.6 1996/12/11 16:37:27 carrig Exp $
    | sml-to-docbook:  1.25
    +-->
</RefEntry>
