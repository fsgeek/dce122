<!--
# COPYRIGHT NOTICE
# Copyright (c) 1990-1996 Open Software Foundation, Inc. 
# ALL RIGHTS RESERVED (DCE). See the file named COPYRIGHT.DCE in the 
# src directory for the full copyright text. 
# 
# 
# HISTORY
# $Log: pkc_crypto_generate_keypair.3sec,v $
# Revision 1.1.2.7  1996/12/17  20:50:18  damon
# 	Expanded OSF C O P Y R I G H T   N O T I C E
# 	[1996/12/17  20:47:25  damon]
#
# Revision 1.1.2.6  1996/12/12  00:11:47  weir
# 	Editorial corrections
# 	[1996/12/12  00:10:18  weir]
# 
# Revision 1.1.2.5  1996/12/07  22:33:52  weir
# 	Set revision flag
# 	[1996/12/07  22:32:18  weir]
# 
# Revision 1.1.2.4  1996/12/07  20:28:27  carrig
# 	{enh,R1.2.2}
# 	VarLists, Tables
# 	[1996/12/07  20:20:13  carrig]
# 
# Revision 1.1.2.3  1996/12/06  23:45:57  weir
# 	Updates
# 	[1996/12/06  23:44:26  weir]
# 
# Revision 1.1.2.2  1996/12/01  20:19:49  weir
# 	Removed thinsp entities
# 	[1996/12/01  20:13:24  weir]
# 
# Revision 1.1.2.1  1996/11/29  17:56:00  weir
# 	Initial submission
# 	[1996/11/29  17:48:07  weir]
# 
# $EndLog$
# 
-->
<!-- Fragment document type declaration subset:
ArborText, Inc., 1988-1993, v.4001
<!DOCTYPE Book PUBLIC "-//Davenport//DTD DocBook V2.4//EN" [
]>
-->
<RefEntry RevisionFlag="changed" Id="DCEADR.MAN511.rsml.1">
<RefMeta>
<RefEntryTitle>pkc_crypto_generate_keypair</RefEntryTitle>
<ManVolNum>3sec</ManVolNum>
</RefMeta>
<RefNameDiv>
<RefName><Literal>pkc_crypto_generate_keypair</Literal></RefName>
<RefPurpose>Generates a pair of public and private keys</RefPurpose>
</RefNameDiv>
<!-- -->
<!-- -->
<!-- OLD HISTORY-->
<!-- Revision 1.1.2.3  1996/11/19  18:56:38  wardr-->
<!-- 	{edit,R1.2.2}-->
<!-- 	Init capped heads and added PDG pointer-->
<!-- 	[1996/11/19  18:49:43  wardr]-->
<!---->
<!-- Revision 1.1.2.2  1996/11/18  19:57:15  weir-->
<!-- 	No change-->
<!-- 	[1996/11/18  19:55:09  weir]-->
<!-- -->
<!-- Revision 1.1.2.1  1996/10/15  21:10:29  weir-->
<!-- 	Initial submission-->
<!-- 	[1996/10/15  21:09:09  weir]-->
<!-- -->
<!-- -->
<!-- -->
<!-- -->
<!-- -->
<RefSect1 Remap="ANSI">
<Title>Synopsis</Title>
<FuncSynopsis>
<FuncSynopsisInfo>#include &lt;pkc_certs.h></FuncSynopsisInfo>
<FuncDef><Function>unsigned32 pkc_crypto_generate_keypair</Function></FuncDef>
<ParamDef>gss_OID <Parameter>algorithm</Parameter></ParamDef>
<ParamDef>unsigned32 <Parameter>size</Parameter></ParamDef>
<ParamDef>void * <Parameter>alg_info</Parameter></ParamDef>
<ParamDef>sec_pk_data_t * <Parameter>private_key</Parameter></ParamDef>
<ParamDef>sec_pk_data_t * <Parameter>public_key</Parameter></ParamDef>
</FuncSynopsis>
</RefSect1>
<RefSect1>
<Title>Parameters</Title>
<!-- -->
<RefSect2>
<Title>Input</Title>
<!-- -->
<VariableList>
<VarListEntry>
<Term><Symbol Role="Variable">algorithm</Symbol></Term>
<ListItem>
<Para>Specifies the crypto module.
<!-- -->
</Para>
</ListItem>
</VarListEntry>
<VarListEntry>
<Term><Symbol Role="Variable">size</Symbol></Term>
<ListItem>
<Para>Specifies the key size.
<!-- -->
</Para>
</ListItem>
</VarListEntry>
<VarListEntry>
<Term><Symbol Role="Variable">alg_info</Symbol></Term>
<ListItem>
<Para>Specifies algorithm-specific information, if any.
<!-- -->
</Para>
</ListItem>
</VarListEntry>
</VariableList>
<!-- -->
</RefSect2>
<RefSect2>
<Title>Output</Title>
<!-- -->
<VariableList>
<VarListEntry>
<Term><Symbol Role="Variable">private_key</Symbol></Term>
<ListItem>
<Para>The generated private key.
<!-- -->
</Para>
</ListItem>
</VarListEntry>
<VarListEntry>
<Term><Symbol Role="Variable">public_key</Symbol></Term>
<ListItem>
<Para>The generated public key.
<!-- -->
</Para>
</ListItem>
</VarListEntry>
</VariableList>
<!-- -->
<?sml-break>
<?sml-need 1.5i>
<!-- -->
</RefSect2>
</RefSect1>
<RefSect1>
<Title>Description</Title>
<Para><Literal>pkc_crypto_generate_keypair</Literal> generates a pair of public
and private keys. The <Function>(*generate_keypair)()</Function> routine of the
crypto module specified by <Symbol Role="Variable">algorithm</Symbol> is called
to do this (but note that crypto modules are not required to provide a
<Function>(*generate_keypair)()</Function> function).
</Para>
<Para>The <Symbol Role="Variable">size</Symbol> parameter will be used by the routine
to determine the key size in some way defined by the algorithm; for the RSA algorithm,
for example, it should be treated as the number of bits in the key modulus.
The <Symbol Role="Variable">private_key</Symbol> and <Symbol Role="Variable">public_key</Symbol>
parameters should be expected to return BER-encoded <Literal>PrivateKeyInfo</Literal> and
<Literal>SubjectPublicKeyInfo</Literal> data objects respectively.</Para>
<!-- -->
<!-- ?????????????????????????????????????-->
<!-- -->
<Para>The <Symbol Role="Variable">alg_info</Symbol> parameter can be used for
algorithm-specific information to modify the key generation process; NULL can be
specified.</para>
<!-- -->
<!-- -->
<!-- -->
<?sml-need 1.5i>
</RefSect1>
<RefSect1>
<Title>Return Values</Title>
<!-- -->
<VariableList>
<VarListEntry>
<Term><Literal>pkc_s_success</Literal></Term>
<ListItem>
<Para>Operation successfully completed.
<!-- -->
</Para>
</ListItem>
</VarListEntry>
</VariableList>
<!-- -->
<!-- -->
<?sml-break>
<!-- -->
<?sml-need 1.5i>
</RefSect1>
<RefSect1>
<Title>Errors</Title>
<Para>Refer to the <Symbol Role="Variable">OSF DCE Problem Determination Guide</Symbol> for
complete descriptions of all error messages.
<!-- -->
<!-- -->
<!-- -->
</Para>
</RefSect1>
<RefSect1>
<Title>Related Information</Title>
<Para><!--no-op:  l-->
Functions:
<Filename MoreInfo="RefEntry">pkc_crypto_intro(3sec)</Filename>,
<Filename MoreInfo="RefEntry">pkc_crypto_get_registered_algorithms(3sec)</Filename>,
<Filename MoreInfo="RefEntry">pkc_crypto_lookup_algorithm(3sec)</Filename>,
<Filename MoreInfo="RefEntry">pkc_crypto_register_signature_alg(3sec)</Filename>,
<Filename MoreInfo="RefEntry">pkc_crypto_sign(3sec)</Filename>,
<Filename MoreInfo="RefEntry">pkc_crypto_verify_signature(3sec)</Filename>.
<!--no-op:  b-->
<!-- -->
<!-- -->
<!-- -->
<!-- unsigned32 pkc_crypto_generate_keypair (gss_OID algorithm,-->
<!--                                         unsigned32 size,-->
<!--                                         void * alg_info,-->
<!--                                         sec_pk_data_t * private_key,-->
<!--                                         sec_pk_data_t * public_key);-->
<!-- -->
<!--     /* The above functions search the list of registered algorithms */-->
<!--     /* for an implementation of the specified algorithm.  If found, */-->
<!--     /* the implementation will be opened if necessary and its sign  */-->
<!--     /* or verify member function will be invoked.                   */-->
<!-- -->
<!-- -->
</Para>
</RefSect1>
<!--+ 11/27/96 19:46:25
    | tagMorph:  $Id: pkc_crypto_generate_keypair.3sec,v 1.1.2.7 1996/12/17 20:50:18 damon Exp $
    | tagMorph library:  $Id: pkc_crypto_generate_keypair.3sec,v 1.1.2.7 1996/12/17 20:50:18 damon Exp $
    | sml-to-docbook:  1.25
    +-->
</RefEntry>
