<!--
# @OSF_COPYRIGHT@
# 
# 
# HISTORY
# $Log: gss_accept_sec_context.3sec,v $
# Revision 1.1.2.6  1996/12/14  23:04:09  carrig
# 	{enh,R1.2.2}
# 	Arrays, Variable Lists
# 	[1996/12/14  22:57:33  carrig]
#
# Revision 1.1.2.5  1996/12/10  21:40:35  carrig
# 	{enh,R1.2.2}
# 	Synopses
# 	[1996/12/10  21:39:42  carrig]
# 
# Revision 1.1.2.4  1996/12/07  20:27:49  carrig
# 	{enh,R1.2.2}
# 	VarLists, Tables
# 	[1996/12/07  20:19:28  carrig]
# 
# Revision 1.1.2.3  1996/12/05  22:04:07  wardr
# 	{edit,R1.2.2}
# 	Fixed initial conversion problems
# 	[1996/12/05  21:58:04  wardr]
# 
# Revision 1.1.2.2  1996/12/01  20:19:22  weir
# 	Removed thinsp entities
# 	[1996/12/01  20:12:54  weir]
# 
# Revision 1.1.2.1  1996/11/29  17:55:07  weir
# 	Initial submission
# 	[1996/11/29  17:47:39  weir]
# 
# $EndLog$
-->
<!-- Fragment document type declaration subset:
ArborText, Inc., 1988-1993, v.4001
<!DOCTYPE Book PUBLIC "-//Davenport//DTD DocBook V2.4//EN" [
]>
-->
<RefEntry Id="DCEADR.MAN478.rsml.1">
<RefMeta>
<RefEntryTitle>gss_accept_sec_context</RefEntryTitle>
<ManVolNum>3sec</ManVolNum>
</RefMeta>
<RefNameDiv>
<RefName><Literal>gss_accept_sec_context</Literal></RefName>
<RefPurpose>Establishes a security context between the
application and a context acceptor</RefPurpose>
</RefNameDiv>
<!-- COPYRIGHT NOTICE-->
<!-- Copyright (c) 1990, 1991, 1992, 1993, 1994 Open Software Foundation, Inc.-->
<!-- ALL RIGHTS RESERVED (DCE).  See the file named COPYRIGHT.DCE for-->
<!-- the full copyright text.-->
<!---->
<!---->
<!-- OLD HISTORY-->
<!-- Revision 1.1.6.2  1996/11/19  18:56:04  wardr-->
<!-- 	{edit,R1.2.2}-->
<!-- 	Init capped heads and added PDG pointer-->
<!-- 	[1996/11/19  18:49:10  wardr]-->
<!---->
<!-- Revision 1.1.6.1  1996/05/13  19:02:48  wardr-->
<!-- 	{enh,R1.2.2}-->
<!-- 	Removed changebars-->
<!-- 	[1996/05/13  18:56:27  wardr]-->
<!-- -->
<!-- Revision 1.1.4.2  1996/02/07  20:17:51  rcb-->
<!-- 	R1.2.1: editorial pass following HP revision-->
<!-- 	[1996/02/07  20:12:38  rcb]-->
<!-- -->
<!-- Revision 1.1.4.1  1996/01/28  22:16:35  weir-->
<!-- 	CR 13293: miscellaneous HP work-->
<!-- 	[1996/01/28  22:15:33  weir]-->
<!-- -->
<!-- Revision 1.1.2.10  1995/06/21  18:24:18  buckler-->
<!-- 	More 1.1 edits.-->
<!-- 	[1995/06/21  17:59:44  buckler]-->
<!-- -->
<!-- Revision 1.1.2.9  1995/06/21  13:20:57  buckler-->
<!-- 	More 1.1 edits.-->
<!-- 	[1995/06/19  21:17:28  buckler]-->
<!-- -->
<!-- 	More 1.1 edits.-->
<!-- 	[1995/06/19  20:45:58  buckler]-->
<!-- -->
<!-- Revision 1.1.2.8  1995/06/15  19:27:17  buckler-->
<!-- 	1.1 edits and Prentice Hall reformat-->
<!-- 	[1995/06/15  16:23:39  buckler]-->
<!-- -->
<!-- Revision 1.1.2.7  1994/09/15  18:22:08  pfa-->
<!-- 	Changed 3gss to 3sec-->
<!-- 	[1994/09/15  18:20:50  pfa]-->
<!-- -->
<!-- Revision 1.1.2.6  1994/08/25  19:41:28  pfa-->
<!-- 	Added editorial and review comments.-->
<!-- 	[1994/08/25  19:40:36  pfa]-->
<!-- -->
<!-- Revision 1.1.2.5  1994/08/17  17:54:27  rjohnson-->
<!-- 	Changes made: Corrections to formatting problems.-->
<!-- 	[1994/08/17  17:50:01  rjohnson]-->
<!-- -->
<!-- Revision 1.1.2.4  1994/06/13  17:15:00  devobj-->
<!-- 	cr10872 - fix copyright-->
<!-- 	[1994/06/13  16:49:46  devobj]-->
<!-- -->
<!-- Revision 1.1.2.3  1994/05/18  14:55:57  willie-->
<!-- 	{edit, R1.1}-->
<!-- 	Fixed problems that broke SGML conversion.-->
<!-- 	[1994/05/18  14:54:48  willie]-->
<!-- -->
<!-- Revision 1.1.2.2  1994/05/11  17:28:07  rjohnson-->
<!-- 	Updated to include CR#10577.-->
<!-- 	[1994/05/11  17:27:30  rjohnson]-->
<!-- -->
<!-- Revision 1.1.2.1  1994/05/09  11:08:18  rjohnson-->
<!-- 	Changes made: New GSSAPI reference page, R1.1-->
<!-- 	File name: app_ref/man3sec/gss_accept_sec_context.3sec-->
<!-- 	[1994/05/03  18:31:24  rjohnson]-->
<!-- -->
<!-- -->
<!-- -->
<!-- HP History:-->
<!--	HP revision /main/HPDCE02/1  1995/09/18  17:51 UTC  millett-->
<!-- 	16388 fixes-->
<!-- -->
<!--	HP revision /main/millett_doc/1  1995/09/18  17:48 UTC  millett-->
<!-- 	16388: rps changes-->
<!-- -->
<!--	HP revision /main/1  1995/04/03  22:19 UTC  arh-->
<!-- 	Add OSF doc sources.-->
<!-- -->
<!-- -->
<!-- -->
<!-- -->
<!-- -->
<!-- -->
<IndexTerm Id="DCEADR.MAN478.indx.1">
<Primary>gss_accept_sec_context</Primary>
</IndexTerm>
<RefSect1 Remap="ANSI">
<Title>Synopsis</Title>
<FuncSynopsis>
<FuncSynopsisInfo>#include &lt;dce/gssapi.h></FuncSynopsisInfo>
<FuncDef><Function><Literal>OM_uint32  </Literal>gss_accept_sec_context</Function></FuncDef>
<ParamDef>OM_uint32 *<Parameter>minor_status</Parameter></ParamDef>
<ParamDef>gss_ctx_id_t *<Parameter>context_handle</Parameter></ParamDef>
<ParamDef>gss_cred_id_t <Parameter>verifier_cred_handle</Parameter></ParamDef>
<ParamDef>gss_buffer_t <Parameter>input_token_buffer</Parameter></ParamDef>
<ParamDef>gss_channel_bindings_t <Parameter>input_chan_bindings</Parameter></ParamDef>
<ParamDef>gss_name_t *<Parameter>src_name</Parameter></ParamDef>
<ParamDef>gss_OID *<Parameter>actual_mech_type</Parameter></ParamDef>
<ParamDef>gss_buffer_t <Parameter>output_token</Parameter></ParamDef>
<ParamDef>int *<Parameter>ret_flags</Parameter></ParamDef>
<ParamDef>OM_uint32 *<Parameter>time_rec</Parameter></ParamDef>
<ParamDef>gss_cred_id_t *<Parameter>delegated_cred_handle</Parameter></ParamDef>
</FuncSynopsis>
</RefSect1>
<RefSect1>
<Title>Parameters</Title>
<RefSect2>
<Title>Input</Title>
<VariableList>
<VarListEntry role="linebreak">
<Term><Symbol Role="Variable">verifier_cred_handle</Symbol></Term>
<ListItem>
<Para>Specifies the credential handle (the identity) claimed by the context
acceptor.  This is optional information.  The credential must be either
an <Literal>ACCEPT</Literal> type credential or a <Literal>BOTH</Literal> type credential.
If you do not specify a credential handle and specify instead
<Literal>GSS_C_NO_CREDENTIAL</Literal>, the application can accept a context under any
registered identity.  Use the <Function>gssdce_register_acceptor_identity()</Function>
routine to register an identity before specifying 
<Literal>GSS_C_NO_CREDENTIAL</Literal>.
</Para>
</ListItem>
</VarListEntry>
<VarListEntry role="linebreak">
<Term><Symbol Role="Variable">input_token_buffer</Symbol></Term>
<ListItem>
<Para>Specifies the token received from the context acceptor.
</Para>
</ListItem>
</VarListEntry>
<VarListEntry role="linebreak">
<Term><Symbol Role="Variable">input_chan_bindings</Symbol></Term>
<ListItem>
<Para>Specifies bindings supplied by the context initiator.
</Para>
<Para>Allows the context initiator to bind the channel identification
information securely to the security context.
</Para>
</ListItem>
</VarListEntry>
</VariableList>
</RefSect2>
<RefSect2>
<Title>Input/Output</Title>
<VariableList>
<VarListEntry role="linebreak">
<Term><Symbol Role="Variable">context_handle</Symbol></Term>
<ListItem>
<Para>Specifies a context handle for a new context.  The first time the
context initiator uses the routine, specify <Literal>GSS_C_NO_CONTEXT</Literal> to
set up a specific context.  In subsequent calls, use the value returned
by this parameter. 
</Para>
</ListItem>
</VarListEntry>
</VariableList>
</RefSect2>
<RefSect2>
<Title>Output</Title>
<VariableList>
<VarListEntry>
<Term><Symbol Role="Variable">src_name</Symbol></Term>
<ListItem>
<Para>Returns the authenticated name of the context initiator.  This
information is optional.  If the authenticated name is not required,
specify NULL.
</Para>
<Para>To deallocate the authenticated name,  pass it to the
<Function>gss_release_name()</Function> routine.
</Para>
</ListItem>
</VarListEntry>
<VarListEntry role="linebreak">
<Term><Symbol Role="Variable">actual_mech_type</Symbol></Term>
<ListItem>
<Para>Returns the security mechanism with which the
context was established.  The security mechanism will be one of the following:
</Para>
<ItemizedList>
<ListItem>
<Para><Literal>GSSDCE_C_OID_DCE_KRBV5_DES</Literal> (for DCE security)
</Para>
</ListItem>
<ListItem>
<Para><Literal>GSSDCE_C_OID_KRBV5_DES</Literal> (for Kerberos Version 5)
</Para>
</ListItem>
</ItemizedList>
</ListItem>
</VarListEntry>
<VarListEntry>
<Term><Symbol Role="Variable">output_token</Symbol></Term>
<ListItem>
<Para>Returns a token to pass to the context acceptor.  
If no token is to be passed to the context acceptor, the routine
sets the length field of the returned token buffer to 0 (zero). 
</Para>
</ListItem>
</VarListEntry>
<VarListEntry>
<Term><Symbol Role="Variable">ret_flags</Symbol></Term>
<ListItem>
<Para>Returns a bitmask containing six independent flags, each of which
requests that the context support a service option.  The following
symbolic names are provided to correspond to each flag.  The symbolic
names should be logically ANDed with the value of <Symbol Role="Variable">ret_flags</Symbol> to
test whether the context supports the service option. 
</Para>
<VariableList>
<VarListEntry role="linebreak">
<Term><Literal>GSS_C_DELEG_FLAG</Literal></Term>
<ListItem>
<VariableList>
<VarListEntry>
<Term>True</Term>
<ListItem>
<Para>Delegated credentials are available from the <Symbol Role="Variable">delegated_cred_handle</Symbol>
parameter.
</Para>
</ListItem>
</VarListEntry>
<VarListEntry>
<Term>False</Term>
<ListItem>
<Para>No credentials were delegated.
</Para>
</ListItem>
</VarListEntry>
</VariableList>
</ListItem>
</VarListEntry>
<VarListEntry role="linebreak">
<Term><Literal>GSS_C_MUTUAL_FLAG</Literal></Term>
<ListItem>
<VariableList>
<VarListEntry>
<Term>True</Term>
<ListItem>
<Para>The context acceptor requested mutual authentication.
</Para>
</ListItem>
</VarListEntry>
<VarListEntry>
<Term>False</Term>
<ListItem>
<Para>The context acceptor did not request mutual authentication.
</Para>
</ListItem>
</VarListEntry>
</VariableList>
</ListItem>
</VarListEntry>
<VarListEntry role="linebreak">
<Term><Literal>GSS_C_REPLAY_FLAG</Literal></Term>
<ListItem>
<VariableList>
<VarListEntry>
<Term>True</Term>
<ListItem>
<Para>Replayed signed or sealed messages will be detected.
</Para>
</ListItem>
</VarListEntry>
<VarListEntry>
<Term>False</Term>
<ListItem>
<Para>Replayed messages will not be detected.
</Para>
</ListItem>
</VarListEntry>
</VariableList>
</ListItem>
</VarListEntry>
<VarListEntry role="linebreak">
<Term><Literal>GSS_C_SEQUENCE_FLAG</Literal></Term>
<ListItem>
<VariableList>
<VarListEntry>
<Term>True</Term>
<ListItem>
<Para>Out-of-sequence signed or sealed messages will be detected.
</Para>
</ListItem>
</VarListEntry>
<VarListEntry>
<Term>False</Term>
<ListItem>
<Para>Out-of-sequence signed or sealed messages will not be detected.
</Para>
</ListItem>
</VarListEntry>
</VariableList>
</ListItem>
</VarListEntry>
<VarListEntry role="linebreak">
<Term><Literal>GSS_C_CONF_FLAG</Literal></Term>
<ListItem>
<VariableList>
<VarListEntry>
<Term>True</Term>
<ListItem>
<Para>Confidentiality services are available by calling the <Function>gss_seal()</Function>
routine.
</Para>
</ListItem>
</VarListEntry>
<VarListEntry>
<Term>False</Term>
<ListItem>
<Para>Confidentiality services are not available.  However, the application
can call the <Function>gss_seal()</Function> routine to provide message encapsulation,
data-origin authentication, and integrity services.
</Para>
</ListItem>
</VarListEntry>
</VariableList>
</ListItem>
</VarListEntry>
<VarListEntry role="linebreak">
<Term><Literal>GSS_C_INTEG_FLAG</Literal></Term>
<ListItem>
<VariableList>
<VarListEntry>
<Term>True</Term>
<ListItem>
<Para>Integrity services can be invoked by calling either the <Function>gss_sign()</Function> or
<Function>gss_seal()</Function> routine.
</Para>
</ListItem>
</VarListEntry>
<VarListEntry>
<Term>False</Term>
<ListItem>
<Para>Integrity services for individual messages are not available.
</Para>
</ListItem>
</VarListEntry>
</VariableList>
</ListItem>
</VarListEntry>
</VariableList>
</ListItem>
</VarListEntry>
<VarListEntry>
<Term><Symbol Role="Variable">time_rec</Symbol></Term>
<ListItem>
<Para>Returns the number of seconds for which the context 
remains valid.  This is optional information.  If the time is not
required, specify NULL.
<?sml-break></Para>
</ListItem>
</VarListEntry>
<VarListEntry role="linebreak">
<Term><Symbol Role="Variable">delegated_cred_handle</Symbol></Term>
<ListItem>
<Para>Returns the credential handle for credentials received from the context
initiator.  The credential handle is valid only if delegated credentials
are available.  If the <Symbol Role="Variable">ret_flags</Symbol> parameter is true, the flag
<Literal>GSS_C_DELEG_FLAG</Literal> is set, indicating that delegated credentials are
available.
</Para>
</ListItem>
</VarListEntry>
<VarListEntry>
<Term><Symbol Role="Variable">minor_status</Symbol></Term>
<ListItem>
<Para>Returns a status code from the security mechanism.
</Para>
</ListItem>
</VarListEntry>
</VariableList>
</RefSect2>
</RefSect1>
<RefSect1>
<Title>Description</Title>
<Para>The <Function>gss_accept_sec_context()</Function> routine is the second step in
establishing a security context between the context initiator and a
context acceptor.  In the first step, the context initiator calls the
<Function>gss_init_sec_context()</Function> routine.  The
<Function>gss_init_sec_context()</Function> routine generates a token for the security
context and passes it to the context initiator.  The context initiator
sends the token to the context acceptor.
</Para>
<Para>In the second step, the context acceptor accepts the call from the
context initiator and calls the <Function>gss_accept_sec_context()</Function>
routine.  The <Function>gss_accept_sec_context()</Function> routine expects a value for the
<Symbol Role="Variable">input_token</Symbol> parameter.  The value for the <Symbol Role="Variable">input_token</Symbol>
parameter is  generated by the <Function>gss_init_sec_context()</Function> routine and
passed by the initiator to the acceptor.
</Para>
<Para>The <Function>gss_accept_sec_context()</Function> routine can also return a
value for the <Symbol Role="Variable">output_token</Symbol> parameter.  The context acceptor
presents the token to the <Function>gss_init_sec_context()</Function> routine.  If the
acceptor does not need to send a token to the initiator,
<Function>gss_accept_sec_context()</Function>
sets the length field of the <Symbol Role="Variable">output_token</Symbol> parameter to 0 (zero).
</Para>
<Para>To complete establishing the context, the context initiator can
require one or more reply tokens from the context acceptor.  If
the application requires reply tokens, the <Function>gss_accept_sec_context()</Function>
routine returns a status value containing <Literal>GSS_S_CONTINUE_NEEDED</Literal>.  The
application calls the routine again when the reply token is
received from the context acceptor.  The application passes the token to the
<Function>gss_accept_sec_context()</Function> routine via the <Symbol Role="Variable">output_token</Symbol>
parameters.
</Para>
<Para>The <Function>gss_accept_sec_context()</Function> routine must find a key to decrypt the
token.  The token contains the unencrypted principal name of the context
acceptor.  The acceptor's principal name identifies the key that the
context initiator used to encrypt the rest of the token.  The
<Function>gss_accept_sec_context()</Function> routine matches the principal name with
the key in the following way:
</Para>
<ItemizedList>
<ListItem>
<Para>If you specify a credential, the credential and the name in the token
must match.  The acceptor's principal name (contained
in the token) has been registered by a call to the
<Function>gssdec_register_acceptor_identity()</Function> routine.  The
<Function>gss_accept_sec_context()</Function> routine looks in the registered key
table.
</Para>
</ListItem>
<ListItem>
<Para>If you specify <Literal>GSS_C_NO_CRED</Literal> and the principal name in the token is
registered, the <Function>gss_accept_sec_context()</Function> routine, using either the
<Function>rpc_server_register_auth_info()</Function> routine or the
<Function>gssdce_register_acceptor_identity()</Function> routine, looks in the table
specified when you registered the token name.
</Para>
</ListItem>
<ListItem>
<Para>If you specify <Literal>GSS_C_NO_CRED</Literal> and the principal name in the token
is not registered, the <Function>gss_accept_sec_context()</Function> routine fails and
returns the status <Literal>GSS_S_FAILURE</Literal> because the
Generic Security Service Application Programming Interface (GSSAPI)
does not know where
to find the key.
</Para>
</ListItem>
</ItemizedList>
<Para>The following table summarizes how the <Function>gss_accept_sec_context()</Function>
routine determines the key for the credential:
</Para>
<InformalTable Frame="All" role="page-wide" Orient="Port">
<TGroup Rowsep="0" Colsep="0" Cols="3">
<ColSpec Colsep="1" Align="Left" Colwidth="2*" Colname="col1" Colnum="1">
<ColSpec Colsep="1" Align="Left" Colwidth="1*" Colname="col2" Colnum="2">
<ColSpec Align="Left" Colwidth="3*" Colname="col3" Colnum="3">
<thead>
<Row>
<Entry Rowsep="1" Colsep="1"><Literal>You specify ...</Literal></Entry>
<Entry Rowsep="1" Colsep="1"><Literal>Is the principal's name registered?</Literal></Entry>
<Entry Rowsep="1" Colsep="1"><Literal>Then the routine ... </Literal></Entry>
</Row>
</thead>
<tbody>
<Row>
<Entry Rowsep="1">A credential</Entry>
<Entry Rowsep="1">Yes</Entry>
<Entry Rowsep="1">Looks in the key table specified in
<Function>gssdce_register_acceptor_identity()</Function> or the default key table.
</Entry>
</Row>
<Row>
<Entry><Literal>GSS_C_NO_CRED</Literal></Entry>
<Entry>Yes</Entry>
<Entry>Looks in the key table specified in
<Function>gssdce_register_acceptor_identity()</Function>.
</Entry>
</Row>
<?sml-space .5>
<Row>
<Entry></Entry>
<Entry>No</Entry>
<Entry>Fails because the principal is not registered.  It returns the status code <Literal>GSS_S_FAILURE</Literal>.
</Entry>
</Row>
</TBody>
</TGroup>
</InformalTable>
<Para>The values returned using the <Symbol Role="Variable">src_name</Symbol>, <Symbol Role="Variable">ret_flags</Symbol>, 
<Symbol Role="Variable">time_rec</Symbol>, and <Symbol Role="Variable">delegated_cred_handle</Symbol> parameters are not
defined unless the routine returns the status <Literal>GSS_S_COMPLETE</Literal>.
<?sml-break></Para>
</RefSect1>
<RefSect1>
<Title>Status Codes</Title>
<Para>The following describes a partial list of codes (messages)
that might be returned.  Refer to the &DCETg; for complete descriptions
of all messages.
The following status codes can be returned:
</Para>
<VariableList>
<VarListEntry role="linebreak">
<Term><Literal>GSS_S_COMPLETE</Literal></Term>
<ListItem>
<Para>The routine was completed successfully.
</Para>
</ListItem>
</VarListEntry>
<VarListEntry role="linebreak">
<Term><Literal>GSS_S_BAD_BINDINGS</Literal></Term>
<ListItem>
<Para>The <Symbol Role="Variable">input_token</Symbol> parameter contains different channel
bindings from those specified with the <Symbol Role="Variable">input_chan_bindings</Symbol>
parameter.
</Para>
</ListItem>
</VarListEntry>
<VarListEntry role="linebreak">
<Term><Literal>GSS_S_BAD_SIG</Literal></Term>
<ListItem>
<Para>The <Symbol Role="Variable">input_token</Symbol> parameter contains an invalid signature.
</Para>
</ListItem>
</VarListEntry>
<VarListEntry role="linebreak">
<Term><Literal>GSS_S_CONTINUE_NEEDED</Literal></Term>
<ListItem>
<Para>To complete the context, the
<Literal>gss_accept_sec_context( )</Literal> routine must be called again with a token
required from the context acceptor.
</Para>
</ListItem>
</VarListEntry>
<VarListEntry role="linebreak">
<Term><Literal>GSS_S_CREDENTIALS_EXPIRED</Literal></Term>
<ListItem>
<Para>The referenced credentials have expired.
</Para>
</ListItem>
</VarListEntry>
<VarListEntry role="linebreak">
<Term><Literal>GSS_S_DEFECTIVE_CREDENTIAL</Literal></Term>
<ListItem>
<Para>Consistency checks performed on the credential failed.
</Para>
</ListItem>
</VarListEntry>
<VarListEntry role="linebreak">
<Term><Literal>GSS_S_DEFECTIVE_TOKEN</Literal></Term>
<ListItem>
<Para>Consistency checks performed on the <Symbol Role="Variable">input_token</Symbol> parameter failed.
</Para>
</ListItem>
</VarListEntry>
<VarListEntry role="linebreak">
<Term><Literal>GSS_S_DUPLICATE_TOKEN</Literal></Term>
<ListItem>
<Para>The <Symbol Role="Variable">input_token</Symbol> parameter was already processed.  This is a fatal
error that occurs during context establishment.
</Para>
</ListItem>
</VarListEntry>
<VarListEntry role="linebreak">
<Term><Literal>GSS_S_FAILURE</Literal></Term>
<ListItem>
<Para>The routine failed.  See the <Symbol Role="Variable">minor_status</Symbol> parameter return value
for more information.
</Para>
</ListItem>
</VarListEntry>
<VarListEntry role="linebreak">
<Term><Literal>GSS_S_NO_CONTEXT</Literal></Term>
<ListItem>
<Para>The supplied context handle did not refer to a valid context.
</Para>
</ListItem>
</VarListEntry>
<VarListEntry role="linebreak">
<Term><Literal>GSS_S_NO_CRED</Literal></Term>
<ListItem>
<Para>Indicates either the supplied credentials were not valid for context
acceptance or the credential handle did not reference any credentials.
</Para>
</ListItem>
</VarListEntry>
<VarListEntry role="linebreak">
<Term><Literal>GSS_S_OLD_TOKEN</Literal></Term>
<ListItem>
<Para>The <Symbol Role="Variable">input_token</Symbol> parameter was too old.  This is a fatal error that occurs
during context establishment.
</Para>
</ListItem>
</VarListEntry>
</VariableList>
</RefSect1>
<RefSect1>
<Title>Related Information</Title>
<!--no-op:  l-->
<Para>Functions: <Filename MoreInfo="RefEntry">gss_acquire_cred(3sec)</Filename>,
<Filename MoreInfo="RefEntry">gss_delete_sec_context(3sec)</Filename>,
<Filename MoreInfo="RefEntry">gss_init_sec_context(3sec)</Filename>,
<Filename MoreInfo="RefEntry">gssdce_register_acceptor_identity(3sec)</Filename>.
<!--no-op:  b-->
</Para>
</RefSect1>
<!--+ 11/27/96 19:46:25
    | tagMorph:  $Id: gss_accept_sec_context.3sec,v 1.1.2.6 1996/12/14 23:04:09 carrig Exp $
    | tagMorph library:  $Id: gss_accept_sec_context.3sec,v 1.1.2.6 1996/12/14 23:04:09 carrig Exp $
    | sml-to-docbook:  1.25
    +-->
</RefEntry>
