<!--
# @OSF_COPYRIGHT@
# 
# 
# HISTORY
# $Log: sec_login_become_delegate.3sec,v $
# Revision 1.1.2.7  1996/12/11  16:39:18  carrig
# 	{enh,R1.2.2}
# 	Fixed errors from log
# 	[1996/12/11  16:38:57  carrig]
#
# Revision 1.1.2.6  1996/12/10  21:48:10  carrig
# 	{enh,R1.2.2}
# 	Synopses
# 	[1996/12/10  21:43:27  carrig]
# 
# Revision 1.1.2.5  1996/12/08  18:23:45  carrig
# 	{enh,R1.2.2}
# 	Var List Entry
# 	[1996/12/08  18:19:09  carrig]
# 
# Revision 1.1.2.4  1996/12/07  20:31:00  carrig
# 	{enh,R1.2.2}
# 	VarLists, Tables
# 	[1996/12/07  20:22:59  carrig]
# 
# Revision 1.1.2.3  1996/12/05  22:06:04  wardr
# 	{edit,R1.2.2}
# 	Fixed initial conversion problems
# 	[1996/12/05  21:59:55  wardr]
# 
# Revision 1.1.2.2  1996/12/01  20:21:50  weir
# 	Removed thinsp entities
# 	[1996/12/01  20:15:25  weir]
# 
# Revision 1.1.2.1  1996/11/29  17:59:02  weir
# 	Initial submission
# 	[1996/11/29  17:49:55  weir]
# 
# $EndLog$
-->
<!-- Fragment document type declaration subset:
ArborText, Inc., 1988-1993, v.4001
<!DOCTYPE Book PUBLIC "-//Davenport//DTD DocBook V2.4//EN" [
]>
-->
<RefEntry Id="DCEADR.MAN631.rsml.1">
<RefMeta>
<RefEntryTitle>sec_login_become_delegate</RefEntryTitle>
<ManVolNum>3sec</ManVolNum>
</RefMeta>
<RefNameDiv>
<RefName><Literal>sec_login_become_delegate</Literal></RefName>
<RefPurpose>Causes an intermediate server to 
become a delegate in traced delegation chain</RefPurpose>
</RefNameDiv>
<!-- COPYRIGHT NOTICE-->
<!-- Copyright (c) 1990, 1991, 1992, 1993, 1994 Open Software Foundation, Inc.-->
<!-- ALL RIGHTS RESERVED (DCE).  See the file named COPYRIGHT.DCE for-->
<!-- the full copyright text.-->
<!-- -->
<!-- OLD HISTORY-->
<!-- Revision 1.1.5.2  1996/11/19  18:58:40  wardr-->
<!-- 	{edit,R1.2.2}-->
<!-- 	Init capped heads and added PDG pointer-->
<!-- 	[1996/11/19  18:51:50  wardr]-->
<!---->
<!-- Revision 1.1.5.1  1996/05/13  19:05:00  wardr-->
<!-- 	{enh,R1.2.2}-->
<!-- 	Removed changebars-->
<!-- 	[1996/05/13  18:58:00  wardr]-->
<!-- -->
<!-- Revision 1.1.2.3  1995/06/21  13:21:23  buckler-->
<!-- 	1.1 edits and Prentice Hall reformat-->
<!-- 	[1995/06/16  16:46:49  buckler]-->
<!-- -->
<!-- Revision 1.1.2.2  1994/06/13  17:15:41  devobj-->
<!-- 	cr10872 - fix copyright-->
<!-- 	[1994/06/13  16:50:36  devobj]-->
<!-- -->
<!-- Revision 1.1.2.1  1994/05/09  18:57:29  millette-->
<!-- 	(enh, 10514, R1.1)-->
<!-- 	Added for delegation-->
<!-- 	[1994/05/09  18:57:07  millette]-->
<!-- -->
<!-- .iX "\*Lsec_login_become_delegate(\|)\*O"-->
<!-- .iX "calls" "\*Lsec_login_become_delegate(\|)\*O"-->
<RefSect1 Remap="ANSI">
<Title>Synopsis</Title>
<FuncSynopsis>
<FuncSynopsisInfo>#include &lt;dce/sec_login.h>
</FuncSynopsisInfo>
<FuncDef><Function><Literal>sec_login_handle_t </Literal>sec_login_become_delegate</Function></FuncDef>
<ParamDef>rpc_authz_cred_handle_t <Parameter>callers_identity</Parameter></ParamDef>
<ParamDef>sec_login_handle_t <Parameter>my_login_context</Parameter></ParamDef>
<ParamDef>sec_id_delegation_type_t <Parameter>delegation_type_permitted</Parameter></ParamDef>
<ParamDef>sec_id_restriction_set_t *<Parameter>delegate_restrictions</Parameter></ParamDef>
<ParamDef>sec_id_restriction_set_t *<Parameter>target_restrictions</Parameter></ParamDef>
<ParamDef>sec_id_opt_req_t *<Parameter>optional_restrictions</Parameter></ParamDef>
<ParamDef>sec_id_opt_req_t *<Parameter>required_restrictions</Parameter></ParamDef>
<ParamDef>sec_id_compatibility_mode_t <Parameter>compatibility_mode</Parameter></ParamDef>
<ParamDef>error_status_t *<Parameter>status</Parameter></ParamDef>
</FuncSynopsis>
<?sml-break>
<?sml-need 1.5i>
</RefSect1>
<RefSect1>
<Title>Parameters</Title>
<RefSect2>
<Title>Input</Title>
<VariableList>
<VarListEntry role="linebreak">
<Term><Symbol Role="Variable">callers_identity</Symbol></Term>
<ListItem>
<Para>A handle of type <StructName Role="typedef">rpc_authz_cred_handle_t</StructName> to the 
authenticated identity of the previous delegate in the delegation chain.  
The handle is supplied by the <Function>rpc_binding_inq_auth_caller()</Function> call.
</Para>
</ListItem>
</VarListEntry>
<VarListEntry role="linebreak">
<Term><Symbol Role="Variable">my_login_context</Symbol></Term>
<ListItem>
<Para>A value of <StructName Role="typedef">sec_login_handle_t</StructName> that provides an 
opaque handle to the identity of the client that is 
becoming the intermediate delegate.  
The <StructName Role="typedef">sec_login_handle_t</StructName> that specifies the client's identity is supplied 
as output of the following calls:
<!--no-op:  l-->
</Para>
<ItemizedList>
<ListItem>
<Para><Function>sec_login_get_current_context()</Function>, if 
the client inherited the identity of the current context
</Para>
</ListItem>
<ListItem>
<Para>The <Function>sec_login_setup_identity()</Function> and the
<Function>sec_login_validate_identity()</Function> pair that together 
establish an authenticated identity if a new identity was 
established
</Para>
</ListItem>
</ItemizedList>
<!--no-op:  b-->
<Para>Note that this identity specified by <StructName Role="typedef">sec_login_handle_t</StructName> 
must be a simple login context; 
it cannot be a 
compound identity created by a previous 
<Function>sec_login_become_delegate()</Function> call. 
</Para>
</ListItem>
</VarListEntry>
<VarListEntry role="linebreak">
<Term><Symbol Role="Variable">delegation_type_permitted</Symbol></Term>
<ListItem>
<Para>A value of <StructName Role="typedef">sec_id_delegation_type_t</StructName> that specifies the type of 
delegation to be enabled.  The types available are as follows:
</Para>
<VariableList>
<VarListEntry role="linebreak">
<Term><Literal>sec_id_deleg_type_none</Literal></Term>
<ListItem>
<Para>No delegation.
</Para>
</ListItem>
</VarListEntry>
<VarListEntry role="linebreak">
<Term><Literal>sec_id_deleg_type_traced</Literal></Term>
<ListItem>
<Para>Traced delegation.
</Para>
</ListItem>
</VarListEntry>
<VarListEntry role="linebreak">
<Term><Literal>sec_id_deleg_type_impersonation</Literal></Term>
<ListItem>
<Para>Simple (impersonation) delegation.
</Para>
</ListItem>
</VarListEntry>
</VariableList>
<Para>Note that the initiating client sets the type of delegation.  If it 
is set as traced, all delegates must also specify traced delegation; 
they cannot specify simple delegation.  The same is true if the 
initiating client sets the delegation type as simple; all subsequent 
delegates must also specify simple delegation.  The intermediate 
delegates can, however, specify no delegation to indicate that the 
delegation chain can proceed no further.
</Para>
</ListItem>
</VarListEntry>
<VarListEntry role="linebreak">
<Term><Symbol Role="Variable">delegate_restrictions</Symbol></Term>
<ListItem>
<Para>A pointer to a <StructName Role="typedef">sec_id_restriction_set_t</StructName> that supplies a list of 
servers that can act as delegates for the intermediate client 
identified by <Symbol Role="Variable">my_login_context</Symbol>.  These servers are added 
to delegates permitted by the <Symbol Role="Variable">delegate_restrictions</Symbol> parameter 
of the <Literal>sec_login_become_initiator</Literal> call.
</Para>
</ListItem>
</VarListEntry>
<VarListEntry role="linebreak">
<Term><Symbol Role="Variable">target_restrictions</Symbol></Term>
<ListItem>
<Para>A pointer to a <StructName Role="typedef">sec_id_restriction_set_t</StructName> that supplies a list of 
servers that can act as targets for the intermediate client 
identified by <Symbol Role="Variable">my_login_context</Symbol>.  
These servers are added 
to targets specified by the <Symbol Role="Variable">target_restrictions</Symbol> parameter 
of the <Literal>sec_login_become_initiator</Literal> call.
</Para>
</ListItem>
</VarListEntry>
<VarListEntry role="linebreak">
<Term><Symbol Role="Variable">optional_restrictions</Symbol></Term>
<ListItem>
<Para>A pointer to a <StructName Role="typedef">sec_id_opt_req_t</StructName> that supplies a list of 
application-defined optional restrictions that apply to the intermediate 
client identified by <Symbol Role="Variable">my_login_context</Symbol>.   
These restrictions are added 
to the restrictions identified by the <Symbol Role="Variable">optional_restrictions</Symbol> parameter 
of the <Literal>sec_login_become_initiator</Literal> call. 
<?sml-break><?sml-need 8></Para>
</ListItem>
</VarListEntry>
<VarListEntry role="linebreak">
<Term><Symbol Role="Variable">required_restrictions</Symbol></Term>
<ListItem>
<Para>A pointer to a <StructName Role="typedef">sec_id_opt_req_t</StructName> that supplies a list of 
application-defined required restrictions that apply to the 
intermediate client identified by <Symbol Role="Variable">my_login_context</Symbol>. 
These restrictions are added 
to the restrictions identified  <Symbol Role="Variable">required_restrictions</Symbol> parameter 
of the <Literal>sec_login_become_initiator</Literal> call. 
</Para>
</ListItem>
</VarListEntry>
<VarListEntry role="linebreak">
<Term><Symbol Role="Variable">compatibility_mode</Symbol></Term>
<ListItem>
<Para>A value of <StructName Role="typedef">sec_id_compatibility_mode_t</StructName> that specifies the compatibility 
mode to be used when the intermediate client operates on pre-1.1 servers.
The modes available are as follows:
</Para>
<VariableList>
<VarListEntry role="linebreak">
<Term><Literal>sec_id_compat_mode_none</Literal></Term>
<ListItem>
<Para>Compatibility mode is off.
</Para>
</ListItem>
</VarListEntry>
<VarListEntry role="linebreak">
<Term><Literal>sec_id_compat_mode_initiator</Literal></Term>
<ListItem>
<Para>Compatibility mode is on.  The pre-1.1 PAC data is extracted from the EPAC 
of the initiating client.
</Para>
</ListItem>
</VarListEntry>
<VarListEntry role="linebreak">
<Term><Literal>sec_id_compat_mode_caller</Literal></Term>
<ListItem>
<Para>Compatibility mode is on. 
The pre-1.1 PAC data extracted from the EPAC of the last 
client in the delegation chain. 
</Para>
</ListItem>
</VarListEntry>
</VariableList>
</ListItem>
</VarListEntry>
</VariableList>
</RefSect2>
<RefSect2>
<Title>Output</Title>
<VariableList>
<VarListEntry>
<Term><Symbol Role="Variable">status</Symbol></Term>
<ListItem>
<Para>A pointer to the completion status.  On successful completion,
<Symbol Role="Variable">status</Symbol> is assigned <Literal>error_status_ok</Literal>.
Otherwise, it returns an error.
</Para>
</ListItem>
</VarListEntry>
</VariableList>
<?sml-break>
<?sml-need 1.5i>
</RefSect2>
</RefSect1>
<RefSect1>
<Title>Description</Title>
<Para>The <Function>sec_login_become_delegate()</Function> is used by intermediate servers to 
become a delegate for the client identified by <Symbol Role="Variable">callers_identity</Symbol>.  
The routine returns a new login context (of type <StructName Role="typedef">sec_login_handle_t</StructName>) 
that carries delegation information.  This information includes the 
delegation type, delegate and target restrictions, and 
any application-defined optional and required restrictions.   
</Para>
<Para>The new login context created by this call can then used to to set up 
authenticated rpc with an intermediate or target server using 
the <Function>rpc_binding_set_auth_info()</Function> call. 
</Para>
<Para>Any delegate, target, required, or optional restrictions specified 
in this call are added to the restrictions specified by the 
initiating client and any intermediate clients.
</Para>
<Para><?sml-need 8>The <Function>sec_login_become_delegate()</Function> 
call is run only if the initiating client 
enabled traced delegation by setting the <Symbol Role="Variable">delegation_type_permitted</Symbol> 
parameter in the <Literal>sec_login_become_initiator</Literal> call to 
<Literal>sec_id_deleg_type_traced</Literal>.
<!-- .SS Permissions Required-->
<!-- .PP-->
<!-- TBS - MIKE??-->
<?sml-break><?sml-need 1.5i></Para>
</RefSect1>
<RefSect1>
<Title>Files</Title>
<VariableList>
<VarListEntry role="linebreak">
<Term><Filename>/usr/include/dce/sec_login.idl</Filename></Term>
<ListItem>
<Para>The <Literal>idl</Literal> file from which <Filename>dce/sec_login.h</Filename> was derived.
</Para>
</ListItem>
</VarListEntry>
</VariableList>
<?sml-break>
<?sml-need 1.5i>
</RefSect1>
<RefSect1>
<Title>Errors</Title>
<Para>The following describes a partial list of errors that might be returned.
Refer to the &DCETg; for complete descriptions of all error
messages.
</Para>
<VariableList>
<VarListEntry role="linebreak">
<Term><Literal>err_sec_login_invalid_delegate_restriction</Literal></Term>
<ListItem>
<Para></Para>
</ListItem>
</VarListEntry>
<VarListEntry role="linebreak">
<Term><Literal>err_sec_login_invalid_target_restriction</Literal></Term>
<ListItem>
<Para></Para>
</ListItem>
</VarListEntry>
<VarListEntry role="linebreak">
<Term><Literal>err_sec_login_invalid_opt_restriction</Literal></Term>
<ListItem>
<Para></Para>
</ListItem>
</VarListEntry>
<VarListEntry role="linebreak">
<Term><Literal>err_sec_login_invalid_req_restriction</Literal></Term>
<ListItem>
<Para></Para>
</ListItem>
</VarListEntry>
<VarListEntry role="linebreak">
<Term><Literal>sec_login_s_invalid_context</Literal></Term>
<ListItem>
<Para></Para>
</ListItem>
</VarListEntry>
<VarListEntry role="linebreak">
<Term><Literal>sec_login_s_compound_delegate</Literal></Term>
<ListItem>
<Para></Para>
</ListItem>
</VarListEntry>
<VarListEntry role="linebreak">
<Term><Literal>sec_login_s_invalid_deleg_type</Literal></Term>
<ListItem>
<Para></Para>
</ListItem>
</VarListEntry>
<VarListEntry role="linebreak">
<Term><Literal>sec_login_s_invalid_compat_mode</Literal></Term>
<ListItem>
<Para></Para>
</ListItem>
</VarListEntry>
<VarListEntry role="linebreak">
<Term><Literal>sec_login_s_deleg_not_enabled</Literal></Term>
<ListItem>
<Para></Para>
</ListItem>
</VarListEntry>
<VarListEntry role="linebreak">
<Term><Literal>error_status_ok</Literal></Term>
<ListItem>
<Para></Para>
</ListItem>
</VarListEntry>
</VariableList>
<?sml-break>
<?sml-need 1.5i>
<!-- .SH "EXAMPLES"-->
<!-- .PP-->
<!-- ANY EXAMPLES??-->
</RefSect1>
<RefSect1>
<Title>Related Information</Title>
<Para><!--no-op:  l-->
Functions:
<Filename MoreInfo="RefEntry">rpc_binding_inq_auth_caller(3rpc)</Filename>, 
<Filename MoreInfo="RefEntry">sec_intro(3sec)</Filename>,
<Filename MoreInfo="RefEntry">sec_login_become_impersonator(3sec)</Filename>, 
<Filename MoreInfo="RefEntry">sec_login_become_initiator(3sec)</Filename>,
<Filename MoreInfo="RefEntry">sec_login_get_current_context(3sec)</Filename>, 
<Filename MoreInfo="RefEntry">sec_login_setup_identity(3sec)</Filename>, 
<Function>sec_login_validate_identity()</Function>.
<!--no-op:  b-->
</Para>
</RefSect1>
<!--+ 11/27/96 19:46:25
    | tagMorph:  $Id: sec_login_become_delegate.3sec,v 1.1.2.7 1996/12/11 16:39:18 carrig Exp $
    | tagMorph library:  $Id: sec_login_become_delegate.3sec,v 1.1.2.7 1996/12/11 16:39:18 carrig Exp $
    | sml-to-docbook:  1.25
    +-->
</RefEntry>
