<!--
# @OSF_COPYRIGHT@
# 
# 
# HISTORY
# $Log: dce_acl_register_object_type.3sec,v $
# Revision 1.1.2.6  1996/12/11  16:37:24  carrig
# 	{enh,R1.2.2}
# 	Fixed errors from log
# 	[1996/12/11  16:36:20  carrig]
#
# Revision 1.1.2.5  1996/12/10  21:56:04  carrig
# 	{enh,R1.2.2}
# 	Synopses
# 	[1996/12/10  21:54:47  carrig]
# 
# Revision 1.1.2.4  1996/12/07  20:27:22  carrig
# 	{enh,R1.2.2}
# 	VarLists, Tables
# 	[1996/12/07  20:18:57  carrig]
# 
# Revision 1.1.2.3  1996/12/05  22:03:40  wardr
# 	{edit,R1.2.2}
# 	Fixed initial conversion problems
# 	[1996/12/05  21:57:38  wardr]
# 
# Revision 1.1.2.2  1996/12/01  20:19:03  weir
# 	Removed thinsp entities
# 	[1996/12/01  20:12:31  weir]
# 
# Revision 1.1.2.1  1996/11/29  17:54:39  weir
# 	Initial submission
# 	[1996/11/29  17:47:19  weir]
# 
# $EndLog$
-->
<!-- Fragment document type declaration subset:
ArborText, Inc., 1988-1993, v.4001
<!DOCTYPE Book PUBLIC "-//Davenport//DTD DocBook V2.4//EN" [
]>
-->
<RefEntry Id="DCEADR.MAN454.rsml.1">
<RefMeta>
<RefEntryTitle>dce_acl_register_object_type</RefEntryTitle>
<ManVolNum>3sec</ManVolNum>
</RefMeta>
<RefNameDiv>
<RefName><Literal>dce_acl_register_object_type</Literal></RefName>
<RefPurpose>Registers an ACL manager's object type</RefPurpose>
</RefNameDiv>
<!-- COPYRIGHT NOTICE-->
<!-- Copyright (c) 1990, 1991, 1992, 1993, 1994 Open Software Foundation, Inc.-->
<!-- ALL RIGHTS RESERVED (DCE).  See the file named COPYRIGHT.DCE for-->
<!-- the full copyright text.-->
<!-- -->
<!-- -->
<!-- OLD HISTORY-->
<!-- Revision 1.1.4.2  1996/11/19  18:55:39  wardr-->
<!-- 	{edit,R1.2.2}-->
<!-- 	Init capped heads and added PDG pointer-->
<!-- 	[1996/11/19  18:48:45  wardr]-->
<!---->
<!-- Revision 1.1.4.1  1996/05/13  19:02:18  wardr-->
<!-- 	{enh,R1.2.2}-->
<!-- 	Removed changebars-->
<!-- 	[1996/05/13  18:56:07  wardr]-->
<!-- -->
<!-- Revision 1.1.2.8  1995/06/15  19:26:56  buckler-->
<!-- 	1.1 edits and Prentice Hall reformat-->
<!-- 	[1995/06/15  15:40:40  buckler]-->
<!-- -->
<!-- Revision 1.1.2.7  1994/10/13  20:12:41  neilson-->
<!-- 	Engineering changes.-->
<!-- 	[1994/10/13  20:12:24  neilson]-->
<!-- -->
<!-- Revision 1.1.2.6  1994/06/13  17:14:48  devobj-->
<!-- 	cr10872 - fix copyright-->
<!-- 	[1994/06/13  16:48:48  devobj]-->
<!-- -->
<!-- Revision 1.1.2.5  1994/05/17  14:54:52  neilson-->
<!-- 	Engineering changes.-->
<!-- 	[1994/05/17  14:54:25  neilson]-->
<!-- -->
<!-- Revision 1.1.2.4  1994/05/16  18:44:03  neilson-->
<!-- 	Engineering changes.-->
<!-- 	[1994/05/16  18:43:49  neilson]-->
<!-- -->
<!-- Revision 1.1.2.3  1994/05/12  16:01:18  neilson-->
<!-- 	Engineering changes.-->
<!-- 	[1994/05/12  16:00:38  neilson]-->
<!-- -->
<!-- Revision 1.1.2.2  1994/05/06  21:39:37  neilson-->
<!-- 	Incorporate changes from first draft review.-->
<!-- 	[1994/05/06  21:37:30  neilson]-->
<!-- -->
<!-- Revision 1.1.2.1  1994/02/22  22:19:11  neilson-->
<!-- 	Initial material.-->
<!-- 	[1994/02/22  19:59:08  neilson]-->
<!-- -->
<RefSect1 Remap="ANSI">
<Title>Synopsis</Title>
<FuncSynopsis>
<FuncSynopsisInfo>#include &lt;dce/dce.h>
#include &lt;dce/aclif.h>
</FuncSynopsisInfo>
<FuncDef><Function><Literal>void </Literal>dce_acl_register_object_type</Function></FuncDef>
<ParamDef>dce_db_handle_t <Parameter>db</Parameter></ParamDef>
<ParamDef>uuid_t *<Parameter>mgr_type</Parameter></ParamDef>
<ParamDef>unsigned32 <Parameter>printstring_size</Parameter></ParamDef>
<ParamDef>sec_acl_printstring_t *<Parameter>printstring</Parameter></ParamDef>
<ParamDef>sec_acl_printstring_t *<Parameter>mgr_info</Parameter></ParamDef>
<ParamDef>sec_acl_permset_t <Parameter>control_perm</Parameter></ParamDef>
<ParamDef>sec_acl_permset_t <Parameter>test_perm</Parameter></ParamDef>
<ParamDef>dce_acl_resolve_func_t <Parameter>resolver</Parameter></ParamDef>
<ParamDef>void *<Parameter>resolver_arg</Parameter></ParamDef>
<ParamDef>unsigned32 <Parameter>flags</Parameter></ParamDef>
<ParamDef>error_status_t *<Parameter>status</Parameter></ParamDef>
</FuncSynopsis>
</RefSect1>
<RefSect1>
<Title>Parameters</Title>
<RefSect2>
<Title>Input</Title>
<VariableList>
<VarListEntry>
<Term><Symbol Role="Variable">db</Symbol></Term>
<ListItem>
<Para>The <Symbol Role="Variable">db</Symbol> parameter specifies the handle to the backing store
database in which the ACL objects are stored.  It must be indexed by
UUID and not use backing store headers.  The database is obtained
through <Function>dce_db_open()</Function>, which is called prior to this routine.
</Para>
</ListItem>
</VarListEntry>
<VarListEntry>
<Term><Symbol Role="Variable">mgr_type</Symbol></Term>
<ListItem>
<Para>A pointer to the UUID identifying the type of the ACL manager in
question.  There may be more than one type of ACL manager protecting
the object whose ACL is bound to the input handle.  Use this parameter
to distinguish them.
</Para>
</ListItem>
</VarListEntry>
<VarListEntry role="linebreak">
<Term><Symbol Role="Variable">printstring_size</Symbol></Term>
<ListItem>
<Para>The number of items in the <Symbol Role="Variable">printstring</Symbol> array.
</Para>
</ListItem>
</VarListEntry>
<VarListEntry>
<Term><Symbol Role="Variable">printstring</Symbol></Term>
<ListItem>
<Para>An array of <StructName Role="typedef">sec_acl_printstring_t</StructName> structures containing the
printable representation of each specified permission.  These are the
printstrings used by <Literal>dcecp</Literal> or other ACL editors.
</Para>
</ListItem>
</VarListEntry>
<VarListEntry>
<Term><Symbol Role="Variable">mgr_info</Symbol></Term>
<ListItem>
<Para>A single <StructName Role="typedef">sec_acl_printstring_t</StructName> containing the name and short
description for the given ACL manager. 
</Para>
</ListItem>
</VarListEntry>
<VarListEntry>
<Term><Symbol Role="Variable">control_perm</Symbol></Term>
<ListItem>
<Para>The permission set needed to change an ACL, typically
<Literal>sec_acl_perm_control</Literal>.  If the value is 0, then anyone is allowed
to change the ACL.  The permission must be listed in the <Literal>printstring</Literal>.
</Para>
</ListItem>
</VarListEntry>
<VarListEntry>
<Term><Symbol Role="Variable">test_perm</Symbol></Term>
<ListItem>
<Para>The permission set needed to test an ACL, typically
<Literal>sec_acl_perm_test</Literal>.  If the value is 0, then anyone is allowed
to test the ACL.  The permissions must be listed in the <Literal>printstring</Literal>.
</Para>
</ListItem>
</VarListEntry>
<VarListEntry>
<Term><Symbol Role="Variable">resolver</Symbol></Term>
<ListItem>
<Para>The function for finding an ACL's UUID.
</Para>
</ListItem>
</VarListEntry>
<VarListEntry>
<Term><Symbol Role="Variable">resolver_arg</Symbol></Term>
<ListItem>
<Para>The argument to pass to the <Symbol Role="Variable">resolver</Symbol> function.  If using
<Function>dce_acl_resolve_by_name()</Function> or
<Function>dce_acl_resolve_by_uuid()</Function>, then pass the database handle to
the name or UUID backing store database.  The backing store must use
the standard backing store header.  See <Filename MoreInfo="RefEntry">dce_db_open(3dce)</Filename>.
</Para>
</ListItem>
</VarListEntry>
<VarListEntry>
<Term><Symbol Role="Variable">flags</Symbol></Term>
<ListItem>
<Para>A bit mask with the following possible bit values:
</Para>
<VariableList>
<VarListEntry role="linebreak">
<Term><Literal>dce_acl_c_orphans_ok</Literal></Term>
<ListItem>
<Para>If this bit is specified, it is possible to replace an ACL with one
in which no control bits are turned on in any of the ACL entries. 
(Use the <Literal>rdacl_replace</Literal> operation to replace an ACL.)  This is a
write-once operation, and once it has been done, no one can change the
ACL. 
</Para>
</ListItem>
</VarListEntry>
<VarListEntry role="linebreak">
<Term><Literal>dce_acl_c_has_owner</Literal></Term>
<ListItem>
<Para>If this bit is set, then the ACL manager supports the concept of
user owners of objects.  This is required to use ACL entries of type
<Literal>user_obj</Literal> and <Literal>user_obj_deleg</Literal>.
entries such as <Literal>sec_acl_e_type_user_obj</Literal>.
</Para>
</ListItem>
</VarListEntry>
<VarListEntry role="linebreak">
<Term><Literal>dce_acl_c_has_groups</Literal></Term>
<ListItem>
<Para>A similar bit for group owners of objects.
</Para>
</ListItem>
</VarListEntry>
</VariableList>
</ListItem>
</VarListEntry>
</VariableList>
</RefSect2>
<RefSect2>
<Title>Output</Title>
<VariableList>
<VarListEntry>
<Term><Symbol Role="Variable">status</Symbol></Term>
<ListItem>
<Para>A pointer to the completion status.  On successful completion, the
routine returns <Literal>error_status_ok</Literal>.  Otherwise, it returns an error.
</Para>
</ListItem>
</VarListEntry>
</VariableList>
</RefSect2>
</RefSect1>
<RefSect1>
<Title>Description</Title>
<Para>The <Function>dce_acl_register_object_type()</Function> routine registers an ACL
manager's object types with the ACL library.
</Para>
<Para>The <Symbol Role="Variable">resolver</Symbol> function may be the
<Function>dce_acl_resolve_by_name()</Function> or the
<Function>dce_acl_resolve_by_uuid()</Function> routine, if the application uses the
standard header in the backing store database, or it may be some other
user-supplied routine, as appropriate.  A user-supplied routine must
be of type <StructName Role="typedef">dce_acl_resolve_func_t</StructName>.  The <Symbol Role="Variable">resolver</Symbol> function
finds the UUID of the ACL of the given object.  The <Symbol Role="Variable">resolver</Symbol>'s
parameters must match the type <StructName Role="typedef">dce_db_convert_func_t</StructName> defined in
the file <Filename>&lt;dce/aclif.h></Filename>.  Observe the use of the resolver
function <Function>dce_acl_convert_func()</Function> in <Literal>EXAMPLES</Literal>.
</Para>
<Para>Unless the <Literal>dce_acl_c_orphans_ok</Literal> bit is set in the <Symbol Role="Variable">flags</Symbol>
parameter, all ACLs must always have <Replaceable>someone</Replaceable> able to modify the
ACL.
</Para>
<Para>Another way to express this is that if <Literal>dce_acl_c_orphans_ok</Literal> is
cleared in a call to <Function>dce_acl_register_object_type()</Function> where a
<Symbol Role="Variable">control_perm</Symbol> value is specified, then a subsequent ACL
replacement using an ACL that has no control bits set in any
nondelegation entry will fail, resulting in the
<Literal>acl_s_no_control_entries</Literal> error.  If <Literal>dce_acl_c_orphans_ok</Literal>
is set, but no <Symbol Role="Variable">control_perm</Symbol> bits are specified, then
<Literal>dce_acl_c_orphans_ok</Literal> is ignored, and the replacement works in
all cases.
<!-- .SH "NOTES"-->
<!-- .PP-->
</Para>
</RefSect1>
<RefSect1>
<Title>Files</Title>
<VariableList>
<VarListEntry role="linebreak">
<Term><Filename>/usr/include/dce/aclif.h</Filename></Term>
<ListItem>
<Para>Definition of <StructName Role="typedef">dce_acl_resolve_func_t</StructName>.
</Para>
</ListItem>
</VarListEntry>
</VariableList>
</RefSect1>
<RefSect1>
<Title>Examples</Title>
<Para>The <Function>dce_acl_register_object_type()</Function> routine should be called once
for each type of object that the server manages.
A typical call is shown below.
The sample code defines three variables: the manager printstring, the
ACL printstrings, and the ACL database.
Note that the manager printstring does not define any permission bits;
they will be set by the library to be the union of all permissions
in the ACL printstring.
The code also uses the global <Literal>my_uuid</Literal> as the ACL manager type UUID.
The ACL printstring uses the standard <Literal>sec_acl_perm_XXX</Literal> bits.
<?sml-point-size 9>
<!--no-op:  12-->
</Para>
<InformalExample>
<Para><ProgramListing>include &lt;dce/aclif.h>

/* Manager help. */
sec_acl_printstring_t my_acl_help = {
    "me", "My manager"
};

/*
 * ACL permission descriptions; 
 * these are from /usr/include/dce/aclbase.idl
 * This example refrains from redefining any of the 
 * conventionally established bits.
 */
<?sml-break><?sml-need 13>sec_acl_printstring_t my_printstring[] = {
    { "r", "read", sec_acl_perm_read },
    { "f", "foobar", sec_acl_perm_unused_00000080 },
    { "w", "write", sec_acl_perm_write },
    { "d", "delete, sec_acl_perm_delete },
    { "c", "control", sec_acl_perm_control }
};

dce_db_open("my_acldb", NULL,
    dce_db_c_std_header | dce_db_c_index_by_uuid,
    (dce_db_convert_func_t)dce_acl_convert_func,
    &amp;dbh, &amp;st);

<?sml-need 4>dce_acl_register_object_type(dbh, &amp;my_manager_uuid,
    sizeof my_printstring / sizeof my_printstring[0],
    my_printstring, &amp;my_acl_help, sec_acl_perm_control,
    0, xxx_resolve_func, NULL, 0, &amp;st);
</ProgramListing></Para>
</InformalExample>
<?sml-point-size 12>
<!--no-op:  14-->
<Para>If the ACL manager can use the standard collection of ACL bits (that is,
has not defined any special ones), then it can use the global
variable <Literal>dce_acl_g_printstring</Literal>
that predefines a printstring.  Here is an example of its use:
<?sml-point-size 9>
<!--no-op:  12-->
</Para>
<InformalExample>
<Para><ProgramListing>dce_acl_register_object_type(acl_db, &amp;your_mgr_type,
    sizeof dce_acl_g_printstring / sizeof dce_acl_g_printstring[0],
    dce_acl_g_printstring, &amp;your_acl_help,
    dced_perm_control, dced_perm_test, your_resolver, NULL, 0, st);
</ProgramListing></Para>
</InformalExample>
<?sml-point-size 12>
<!--no-op:  14-->
</RefSect1>
<RefSect1>
<Title>Errors</Title>
<Para>The following describes a partial list of errors that might be returned.
Refer to the &DCETg; for complete descriptions of all error
messages.
</Para>
<VariableList>
<VarListEntry role="linebreak">
<Term><Literal>error_status_ok</Literal></Term>
<ListItem>
<Para>The call was successful.
</Para>
</ListItem>
</VarListEntry>
<VarListEntry role="linebreak">
<Term><Literal>acl_s_owner_not_allowed</Literal></Term>
<ListItem>
<Para>In a <Literal>rdacl_replace</Literal> operation an attempt was made to add an
ACL entry of type <Literal>sec_acl_e_type_user_obj</Literal> or
<Literal>sec_acl_e_type_user_obj_deleg</Literal> to a manager that
does not support object users ownership.
</Para>
</ListItem>
</VarListEntry>
<VarListEntry role="linebreak">
<Term><Literal>acl_s_owner_not_allowed</Literal></Term>
<ListItem>
<Para>In a <Literal>rdacl_replace</Literal> operation an attempt was made to add an
ACL entry of type <Literal>sec_acl_e_type_user_obj</Literal> or
<Literal>sec_acl_e_type_user_obj_deleg</Literal> to a manager that
does not support object users ownership.
</Para>
</ListItem>
</VarListEntry>
<VarListEntry role="linebreak">
<Term><Literal>acl_s_group_not_allowed</Literal></Term>
<ListItem>
<Para>In a <Literal>rdacl_replace</Literal> operation an attempt was made to add an
ACL entry of type <Literal>sec_acl_e_type_group_obj</Literal> or
<Literal>sec_acl_e_type_group_obj_deleg</Literal> to a manager that
does not support object group ownership.
</Para>
</ListItem>
</VarListEntry>
<VarListEntry role="linebreak">
<Term><Literal>acl_s_no_control_entries</Literal></Term>
<ListItem>
<Para>In a <Literal>rdacl_replace</Literal> operation an attempt was made to replace
the ACL where no entries have control permission.
</Para>
</ListItem>
</VarListEntry>
<VarListEntry role="linebreak">
<Term><Literal>acl_s_owner_not_allowed</Literal></Term>
<ListItem>
<Para>In a <Literal>rdacl_replace</Literal> operation an attempt was made to add an
ACL entry of type <Literal>sec_acl_e_type_user_obj</Literal> or
<Literal>sec_acl_e_type_user_obj_deleg</Literal> to a manager that
does not support object users ownership.
</Para>
</ListItem>
</VarListEntry>
<VarListEntry role="linebreak">
<Term><Literal>acl_s_group_not_allowed</Literal></Term>
<ListItem>
<Para>In a <Literal>rdacl_replace</Literal> operation an attempt was made to add an
ACL entry of type <Literal>sec_acl_e_type_group_obj</Literal> or
<Literal>sec_acl_e_type_group_obj_deleg</Literal> to a manager that
does not support object group ownership.
</Para>
</ListItem>
</VarListEntry>
<VarListEntry role="linebreak">
<Term><Literal>acl_s_no_control_entries</Literal></Term>
<ListItem>
<Para>In a <Literal>rdacl_replace</Literal> operation an attempt was made to replace
the ACL where no entries have control permission.
CL entry of type <Literal>sec_acl_e_type_group_obj</Literal> or
<Literal>sec_acl_e_type_group_obj_deleg</Literal> to a manager that
does not support object group ownership.
</Para>
</ListItem>
</VarListEntry>
<VarListEntry role="linebreak">
<Term><Literal>acl_s_no_control_entries</Literal></Term>
<ListItem>
<Para>In a <Literal>rdacl_replace</Literal> operation an attempt was made to replace
the ACL where no entries have control permission.
</Para>
</ListItem>
</VarListEntry>
</VariableList>
</RefSect1>
<RefSect1>
<Title>Related Information</Title>
<!--no-op:  l-->
<Para>Functions:
<Filename MoreInfo="RefEntry">dce_acl_resolve_by_name(3sec)</Filename>,
<Filename MoreInfo="RefEntry">dce_acl_resolve_by_uuid(3sec)</Filename>,
<Filename MoreInfo="RefEntry">dce_db_open(3dce)</Filename>.
<!--no-op:  b-->
</Para>
</RefSect1>
<!--+ 11/27/96 19:46:25
    | tagMorph:  $Id: dce_acl_register_object_type.3sec,v 1.1.2.6 1996/12/11 16:37:24 carrig Exp $
    | tagMorph library:  $Id: dce_acl_register_object_type.3sec,v 1.1.2.6 1996/12/11 16:37:24 carrig Exp $
    | sml-to-docbook:  1.25
    +-->
</RefEntry>
