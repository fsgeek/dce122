<!--
# @OSF_COPYRIGHT@
# 
# 
# HISTORY
# $Log: sec_rgy_attr_sch_aclmgr_strings.3sec,v $
# Revision 1.1.2.7  1996/12/14  23:07:21  carrig
# 	{enh,R1.2.2}
# 	Arrays, Variable Lists
# 	[1996/12/14  23:01:03  carrig]
#
# Revision 1.1.2.6  1996/12/10  21:49:23  carrig
# 	{enh,R1.2.2}
# 	Synopses
# 	[1996/12/10  21:44:49  carrig]
# 
# Revision 1.1.2.5  1996/12/08  18:25:00  carrig
# 	{enh,R1.2.2}
# 	Var List Entry
# 	[1996/12/08  18:20:30  carrig]
# 
# Revision 1.1.2.4  1996/12/07  20:32:14  carrig
# 	{enh,R1.2.2}
# 	VarLists, Tables
# 	[1996/12/07  20:24:26  carrig]
# 
# Revision 1.1.2.3  1996/12/05  22:07:15  wardr
# 	{edit,R1.2.2}
# 	Fixed initial conversion problems
# 	[1996/12/05  22:01:02  wardr]
# 
# Revision 1.1.2.2  1996/12/01  20:23:04  weir
# 	Removed thinsp entities
# 	[1996/12/01  20:16:36  weir]
# 
# Revision 1.1.2.1  1996/11/29  18:00:35  weir
# 	Initial submission
# 	[1996/11/29  17:50:51  weir]
# 
# $EndLog$
-->
<!-- Fragment document type declaration subset:
ArborText, Inc., 1988-1993, v.4001
<!DOCTYPE Book PUBLIC "-//Davenport//DTD DocBook V2.4//EN" [
]>
-->
<RefEntry Id="DCEADR.MAN693.rsml.1">
<RefMeta>
<RefEntryTitle>sec_rgy_attr_sch_aclmgr_strings</RefEntryTitle>
<ManVolNum>3sec</ManVolNum>
</RefMeta>
<RefNameDiv>
<RefName><Literal>sec_rgy_attr_sch_aclmgr_strings</Literal></RefName>
<RefPurpose>Returns printable ACL strings associated with an ACL manager protecting a schema object</RefPurpose>
</RefNameDiv>
<!-- COPYRIGHT NOTICE-->
<!-- Copyright (c) 1990, 1991, 1992, 1993, 1994 Open Software Foundation, Inc.-->
<!-- ALL RIGHTS RESERVED (DCE).  See the file named COPYRIGHT.DCE for-->
<!-- the full copyright text.-->
<!---->
<!-- -->
<!-- OLD HISTORY-->
<!-- Revision 1.1.4.2  1996/11/19  18:59:45  wardr-->
<!-- 	{edit,R1.2.2}-->
<!-- 	Init capped heads and added PDG pointer-->
<!-- 	[1996/11/19  18:52:53  wardr]-->
<!---->
<!-- Revision 1.1.4.1  1996/05/13  19:06:13  wardr-->
<!-- 	{enh,R1.2.2}-->
<!-- 	Removed changebars-->
<!-- 	[1996/05/13  18:58:51  wardr]-->
<!-- -->
<!-- Revision 1.1.2.4  1995/06/21  13:22:13  buckler-->
<!-- 	1.1 edits and Prentice Hall reformat-->
<!-- 	[1995/06/19  14:58:56  buckler]-->
<!-- -->
<!-- Revision 1.1.2.3  1994/10/21  21:03:14  hileman-->
<!-- 	Fixed formatting.-->
<!-- 	[1994/10/21  21:02:56  hileman]-->
<!-- -->
<!-- Revision 1.1.2.2  1994/10/20  19:28:49  zahn-->
<!-- 	{edt,????,R1.1}-->
<!-- -->
<!-- 	Commented out note to reviewers as part-->
<!-- 	of post-freeze cleanup.-->
<!-- 	[1994/10/20  19:28:05  zahn]-->
<!-- -->
<!-- Revision 1.1.2.1  1994/08/12  16:46:53  millette-->
<!-- 	(enh, 10056, R1.1)-->
<!-- 	Created for ERA-->
<!-- 	[1994/08/12  16:46:22  millette]-->
<!-- -->
<!-- .iX "\*Lsec_rgy_attr_sch_aclmgr_strings(\|)\*O"-->
<!-- .iX "calls" "\*Lsec_rgy_attr_sch_aclmgr_strings(\|)\*O"-->
<RefSect1 Remap="ANSI">
<Title>Synopsis</Title>
<FuncSynopsis>
<FuncSynopsisInfo>#include  &lt;dce/dce_attr_base.h>
</FuncSynopsisInfo>
<FuncDef><Function><Literal>void </Literal>sec_rgy_attr_sch_aclmgr_strings</Function></FuncDef>
<ParamDef>sec_rgy_handle_t <Parameter>context</Parameter></ParamDef>
<ParamDef>sec_attr_component_name_t <Parameter>schema_name</Parameter></ParamDef>
<ParamDef>uuid_t *<Parameter>acl_mgr_type</Parameter></ParamDef>
<ParamDef>unsigned32 <Parameter>size_avail</Parameter></ParamDef>
<ParamDef>uuid_t *<Parameter>acl_mgr_type_chain</Parameter></ParamDef>
<ParamDef>sec_acl_printstring_t *<Parameter>acl_mgr_info</Parameter></ParamDef>
<ParamDef>boolean32 *<Parameter>tokenize</Parameter></ParamDef>
<ParamDef>unsigned32 *<Parameter>total_num_printstrings</Parameter></ParamDef>
<ParamDef>unsigned32 *<Parameter>size_used</Parameter></ParamDef>
<ParamDef>sec_acl_printstring_t <Parameter>permstrings[&thinsp;]</Parameter></ParamDef>
<ParamDef>error_status_t *<Parameter>status</Parameter></ParamDef>
</FuncSynopsis>
<?sml-break>
<?sml-need 1.5i>
</RefSect1>
<RefSect1>
<Title>Parameters</Title>
<RefSect2>
<Title>Input</Title>
<VariableList>
<VarListEntry>
<Term><Symbol Role="Variable">context</Symbol></Term>
<ListItem>
<Para>An opaque handle bound to a registry server.  Use
<Function>sec_rgy_site_open()</Function> to acquire a bound handle. 
</Para>
</ListItem>
</VarListEntry>
<VarListEntry role="linebreak">
<Term><Symbol Role="Variable">schema_name</Symbol></Term>
<ListItem>
<Para>Reserved for future use.
<!--  A value of type \*Lsec_attr_component_name_t\*O that specifies the -->
<!--  name of the schema object to be created. -->
</Para>
</ListItem>
</VarListEntry>
<VarListEntry role="linebreak">
<Term><Symbol Role="Variable">acl_manager_type</Symbol></Term>
<ListItem>
<Para>A pointer to the UUID identifying the type of the ACL manager in
question.  There may be more than one type of ACL manager
protecting the schema object whose ACL is bound to the input handle.  Use
this parameter to distinguish them.  Use
<Function>sec_rgy_attr_sch_get_acl_mgrs()</Function> to acquire a list of the
manager types protecting a given schema object.
</Para>
</ListItem>
</VarListEntry>
<VarListEntry>
<Term><Symbol Role="Variable">size_avail</Symbol></Term>
<ListItem>
<Para>An unsigned 32-bit integer containing the allocated length of
the <Symbol Role="Variable">permstrings[&thinsp;]</Symbol> array.
</Para>
</ListItem>
</VarListEntry>
</VariableList>
<?sml-break>
<?sml-need 8>
</RefSect2>
<RefSect2>
<Title>Output</Title>
<VariableList>
<VarListEntry role="linebreak">
<Term><Symbol Role="Variable">acl_mgr_type_chain</Symbol></Term>
<ListItem>
<Para>If the target object ACL contains more than 32 permission bits, chains of 
manager types are used:  each manager type holds 
one 32-bit segment of permissions.
The UUID returned in <Symbol Role="Variable">acl_mgr_type_chain</Symbol> refers to the next ACL
manager in the chain.  If there are no more ACL managers in the 
chain,
<Literal>uuid_nil</Literal> is returned.
</Para>
</ListItem>
</VarListEntry>
<VarListEntry role="linebreak">
<Term><Symbol Role="Variable">acl_mgr_info</Symbol></Term>
<ListItem>
<Para>A pointer to a printstring that contains the ACL manager type's name, help information, 
and set of supported of permission bits. 
</Para>
</ListItem>
</VarListEntry>
<VarListEntry>
<Term><Symbol Role="Variable">tokenize</Symbol></Term>
<ListItem>
<Para>A pointer to a variable that specifies whether or not printstrings will 
be passed separately:
<!--no-op:  l-->
</Para>
<ItemizedList>
<ListItem>
<Para>TRUE indicates that the printstrings 
must be printed or passed separately.
</Para>
</ListItem>
<ListItem>
<Para>FALSE indicates that the 
printstrings are unambiguous and can be concatenated when
printed without confusion.  
</Para>
</ListItem>
</ItemizedList>
<!--no-op:  b-->
</ListItem>
</VarListEntry>
<VarListEntry role="linebreak">
<Term><Symbol Role="Variable">total_num_printstrings</Symbol></Term>
<ListItem>
<Para>A pointer to an unsigned 32-bit integer containing the total number of permission
entries supported by this ACL manager type.
</Para>
</ListItem>
</VarListEntry>
<VarListEntry>
<Term><Symbol Role="Variable">size_used</Symbol></Term>
<ListItem>
<Para>A pointer to an unsigned 32-bit integer containing the number of permission entries
returned in the <Symbol Role="Variable">permstrings[&thinsp;]</Symbol> array.
</Para>
</ListItem>
</VarListEntry>
<VarListEntry role="linebreak">
<Term><Symbol Role="Variable">permstrings[&thinsp;]</Symbol></Term>
<ListItem>
<Para>An array of printstrings of type <StructName Role="typedef">sec_acl_printstring_t</StructName>.
Each entry of the array is a structure containing the following
three components:
</Para>
<VariableList>
<VarListEntry>
<Term><Literal>printstring</Literal></Term>
<ListItem>
<Para>A character string of maximum length <Literal>sec_acl_printstring_len</Literal>
describing the printable representation of a specified permission.
</Para>
</ListItem>
</VarListEntry>
<VarListEntry>
<Term><Literal>helpstring</Literal></Term>
<ListItem>
<Para>A character string of maximum length <Literal>sec_acl_printstring_help_len</Literal>
containing some text that can be used to describe the specified
permission.
</Para>
</ListItem>
</VarListEntry>
<VarListEntry>
<Term><Literal>permissions</Literal></Term>
<ListItem>
<Para>A <StructName Role="typedef">sec_acl_permset_t</StructName> permission set describing the permissions that
are represented with the companion printstring.
</Para>
</ListItem>
</VarListEntry>
</VariableList>
<Para>The array consists of one such entry for each permission supported by
the ACL manager identified by <Symbol Role="Variable">acl_mgr_type</Symbol>.
</Para>
</ListItem>
</VarListEntry>
<VarListEntry>
<Term><Symbol Role="Variable">status</Symbol></Term>
<ListItem>
<Para>A pointer to the completion status.  On successful completion,
the routine returns <Literal>error_status_ok</Literal>.
Otherwise, it returns an error.
</Para>
</ListItem>
</VarListEntry>
</VariableList>
<?sml-break>
<?sml-need 1.5i>
</RefSect2>
</RefSect1>
<RefSect1>
<Title>Description</Title>
<Para>The <Function>sec_rgy_attr_sch_aclmgr_strings()</Function> routine returns an array of printable
representations (called <Symbol Role="Variable">printstrings</Symbol>) for each permission bit or
combination of permission bits the specified ACL manager supports.  The
ACL manager type specified by <Replaceable>acl_mgr_type</Replaceable> must be one of the types protecting
the schema object bound to by <Symbol Role="Variable">h</Symbol>.
</Para>
<Para>In addition to returning the printstrings, this routine also returns
instructions about how to print the strings in the <Symbol Role="Variable">tokenize</Symbol>
variable.  If this variable is set to FALSE, the printstrings can 
be concatenated.  If it is set to TRUE, the printstrings cannot 
be concatenated.  For example a printstrings of <Literal>r</Literal> or
<Literal>w</Literal> could be concatenated as <Literal>rw</Literal> without
any confusion.  However, printstrings in a 
form of <Literal>read</Literal> or
<Literal>write</Literal>, should not be concatenated.
</Para>
<Para>ACL managers often define aliases for common permission
combinations.  By convention, simple entries appear at
the beginning of the <Symbol Role="Variable">printstrings</Symbol>[&thinsp;] array, and combinations
appear at the end.
</Para>
<RefSect2>
<Title>Permissions Required</Title>
<Para>The <Function>sec_rgy_attr_sch_scl_mgr_strings()</Function> routine requires 
the <Literal>r</Literal> permission on the <Literal>attr_schema</Literal> object.
<?sml-break><?sml-need 1.5i></Para>
</RefSect2>
</RefSect1>
<RefSect1>
<Title>Files</Title>
<VariableList>
<VarListEntry role="linebreak">
<Term><Filename>/usr/include/dce/sec_rgy_attr_sch.idl</Filename></Term>
<ListItem>
<Para>The <Literal>idl</Literal> file from which <Filename>dce/sec_rgy_attr_sch.h</Filename> was derived.
</Para>
</ListItem>
</VarListEntry>
</VariableList>
<?sml-break>
<?sml-need 1.5i>
</RefSect1>
<RefSect1>
<Title>Errors</Title>
<Para>The following describes a partial list of errors that might be returned.
Refer to the &DCETg; for complete descriptions of all error
messages.
</Para>
<VariableList>
<VarListEntry role="linebreak">
<Term><Literal>sec_attr_no_memory</Literal></Term>
<ListItem>
<Para></Para>
</ListItem>
</VarListEntry>
<VarListEntry role="linebreak">
<Term><Literal>sec_attr_svr_unavailable</Literal></Term>
<ListItem>
<Para></Para>
</ListItem>
</VarListEntry>
<VarListEntry role="linebreak">
<Term><Literal>sec_attr_unauthorized</Literal></Term>
<ListItem>
<Para></Para>
</ListItem>
</VarListEntry>
<VarListEntry role="linebreak">
<Term><Literal>error_status_ok</Literal></Term>
<ListItem>
<Para></Para>
</ListItem>
</VarListEntry>
</VariableList>
</RefSect1>
<RefSect1>
<Title>Related Information</Title>
<Para><!--no-op:  l-->
Functions:
<Filename MoreInfo="RefEntry">sec_intro(3sec)</Filename>,
<Filename MoreInfo="RefEntry">sec_rgy_attr_sch_get_acl_mgrs(3sec)</Filename>.
<!--no-op:  b-->
</Para>
</RefSect1>
<!--+ 11/27/96 19:46:25
    | tagMorph:  $Id: sec_rgy_attr_sch_aclmgr_strings.3sec,v 1.1.2.7 1996/12/14 23:07:21 carrig Exp $
    | tagMorph library:  $Id: sec_rgy_attr_sch_aclmgr_strings.3sec,v 1.1.2.7 1996/12/14 23:07:21 carrig Exp $
    | sml-to-docbook:  1.25
    +-->
</RefEntry>
