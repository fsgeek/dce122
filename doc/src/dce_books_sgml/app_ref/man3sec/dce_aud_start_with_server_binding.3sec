<!--
# @OSF_COPYRIGHT@
# 
# 
# HISTORY
# $Log: dce_aud_start_with_server_binding.3sec,v $
# Revision 1.1.2.6  1996/12/11  16:37:44  carrig
# 	{enh,R1.2.2}
# 	Fixed errors from log
# 	[1996/12/11  16:36:47  carrig]
#
# Revision 1.1.2.5  1996/12/10  21:56:28  carrig
# 	{enh,R1.2.2}
# 	Synopses
# 	[1996/12/10  21:55:15  carrig]
# 
# Revision 1.1.2.4  1996/12/07  20:27:47  carrig
# 	{enh,R1.2.2}
# 	VarLists, Tables
# 	[1996/12/07  20:19:25  carrig]
# 
# Revision 1.1.2.3  1996/12/05  22:04:05  wardr
# 	{edit,R1.2.2}
# 	Fixed initial conversion problems
# 	[1996/12/05  21:58:02  wardr]
# 
# Revision 1.1.2.2  1996/12/01  20:19:20  weir
# 	Removed thinsp entities
# 	[1996/12/01  20:12:51  weir]
# 
# Revision 1.1.2.1  1996/11/29  17:55:05  weir
# 	Initial submission
# 	[1996/11/29  17:47:37  weir]
# 
# $EndLog$
-->
<!-- Fragment document type declaration subset:
ArborText, Inc., 1988-1993, v.4001
<!DOCTYPE Book PUBLIC "-//Davenport//DTD DocBook V2.4//EN" [
]>
-->
<RefEntry Id="DCEADR.MAN476.rsml.1">
<RefMeta>
<RefEntryTitle>dce_aud_start_with_server_binding</RefEntryTitle>
<ManVolNum>3sec</ManVolNum>
</RefMeta>
<RefNameDiv>
<RefName><Literal>dce_aud_start_with_server_binding</Literal></RefName>
<RefPurpose> Determines whether a specified event
must be audited given the server binding information and the event outcome.  Used by client/server applications</RefPurpose>
<IndexTerm Id="DCEADR.MAN476.indx.1">
<Primary><Function>dce_aud_start_with_server_binding()</Function></Primary>
</IndexTerm>
</RefNameDiv>
<!-- COPYRIGHT NOTICE-->
<!-- Copyright (c) 1990, 1991, 1992, 1993, 1994 Open Software Foundation, Inc.-->
<!-- ALL RIGHTS RESERVED (DCE).  See the file named COPYRIGHT.DCE for-->
<!-- the full copyright text.-->
<!-- -->
<!-- OLD HISTORY-->
<!-- Revision 1.1.4.2  1996/11/19  18:56:02  wardr-->
<!-- 	{edit,R1.2.2}-->
<!-- 	Init capped heads and added PDG pointer-->
<!-- 	[1996/11/19  18:49:08  wardr]-->
<!---->
<!-- Revision 1.1.4.1  1996/05/13  19:02:45  wardr-->
<!-- 	{enh,R1.2.2}-->
<!-- 	Removed changebars-->
<!-- 	[1996/05/13  18:56:25  wardr]-->
<!-- -->
<!-- Revision 1.1.2.9  1995/06/15  19:27:15  buckler-->
<!-- 	1.1 edits and Prentice Hall reformat-->
<!-- 	[1995/06/15  15:41:02  buckler]-->
<!-- -->
<!-- Revision 1.1.2.8  1994/10/20  03:29:30  cruz-->
<!-- 	final edits, added status codes-->
<!-- 	[1994/10/20  03:29:04  cruz]-->
<!-- -->
<!-- Revision 1.1.2.7  1994/09/14  13:40:29  cruz-->
<!-- 	Added new outcome, recovered from technical comments.-->
<!-- 	[1994/09/14  13:40:14  cruz]-->
<!-- -->
<!-- Revision 1.1.2.6  1994/06/13  17:14:59  devobj-->
<!-- 	cr10872 - fix copyright-->
<!-- 	[1994/06/13  16:49:34  devobj]-->
<!-- -->
<!-- Revision 1.1.2.5  1994/05/21  16:41:28  cruz-->
<!-- 	Incorporated technical comments-->
<!-- 	[1994/05/21  16:40:59  cruz]-->
<!-- -->
<!-- Revision 1.1.2.4  1994/05/17  00:06:06  cruz-->
<!-- 	Minor edits-->
<!-- 	[1994/05/17  00:05:45  cruz]-->
<!-- -->
<!-- Revision 1.1.2.3  1994/05/13  14:30:18  cruz-->
<!-- 	Added index entries-->
<!-- 	[1994/05/13  14:22:27  cruz]-->
<!-- -->
<!-- Revision 1.1.2.2  1994/05/11  14:37:19  cruz-->
<!-- 	Added revision bars-->
<!-- 	[1994/05/11  14:36:53  cruz]-->
<!-- -->
<!-- Revision 1.1.2.1  1994/05/09  21:05:54  cruz-->
<!-- 	Renamed file to dce_aud_start_with_server_binding.3sec-->
<!-- 	[1994/05/09  21:05:27  cruz]-->
<!-- -->
<!-- Revision 1.1.2.1  1994/05/03  15:28:11  cruz-->
<!-- 	Audit app ref doc-->
<!-- 	[1994/05/03  15:27:51  cruz]-->
<!-- -->
<RefSect1 Remap="ANSI">
<Title>Synopsis</Title>
<FuncSynopsis>
<FuncSynopsisInfo>#include &lt;dce/audit.h></FuncSynopsisInfo>
<FuncDef><Function><Literal>void </Literal>dce_aud_start_with_server_binding</Function></FuncDef>
<ParamDef>unsigned32 <Parameter>event</Parameter></ParamDef>
<ParamDef>rpc_binding_handle_t <Parameter>binding</Parameter></ParamDef>
<ParamDef>unsigned32 <Parameter>options</Parameter></ParamDef>
<ParamDef>unsigned32 <Parameter>outcome</Parameter></ParamDef>
<ParamDef>dce_aud_rec_t *<Parameter>ard</Parameter></ParamDef>
<ParamDef>unsigned32 *<Parameter>status</Parameter></ParamDef>
</FuncSynopsis>
<?sml-break>
<?sml-need 1.5i>
</RefSect1>
<RefSect1>
<Title>Parameters</Title>
<RefSect2>
<Title>Input</Title>
<VariableList>
<VarListEntry>
<Term><Symbol Role="Variable">event</Symbol></Term>
<ListItem>
<Para>Specifies the event to be audited.  This is a 32-bit event number.  
The <Replaceable>event</Replaceable> field in the audit record header will be set
to this number.
</Para>
</ListItem>
</VarListEntry>
<VarListEntry>
<Term><Symbol Role="Variable">binding</Symbol></Term>
<ListItem>
<Para>Specifies the server's RPC binding handle from which the server identification
information is retrieved to set the client, cell, and
addr fields in the audit record header.  Note that when an application client
issues an audit record, the server identity is
represented in the <Replaceable>client</Replaceable> field of the record. 
</Para>
</ListItem>
</VarListEntry>
<VarListEntry>
<Term><Symbol Role="Variable">options</Symbol></Term>
<ListItem>
<Para>This parameter can be used to specify the optional header information desired
(<Literal>aud_c_evt_all_info</Literal>, <Literal>aud_c_evt_group_info</Literal>,
<Literal>aud_c_evt_address_info</Literal>).
It can also be used to specify any of two options: 
to always log an audit record
(<Literal>aud_c_evt_always_log</Literal>) or to always send an alarm message to the
standard output (<Literal>aud_c_evt_always_alarm</Literal>).  If any of these two
options is selected, the filter is bypassed.
</Para>
<Para>The value of the <Literal>options</Literal> parameter is the bitwise OR of any
selected combination of the following option values:
</Para>
<VariableList>
<VarListEntry role="linebreak">
<Term><Literal>aud_c_evt_address_info</Literal></Term>
<ListItem>
<Para>Includes the server address information in the audit record header.
</Para>
</ListItem>
</VarListEntry>
<VarListEntry role="linebreak">
<Term><Literal>aud_c_evt_always_log</Literal></Term>
<ListItem>
<Para>Bypasses the filter and indicates that the event must be logged.
</Para>
</ListItem>
</VarListEntry>
<VarListEntry role="linebreak">
<Term><Literal>aud_c_evt_always_alarm</Literal></Term>
<ListItem>
<Para>Bypasses the filter and indicates that an alarm message must be 
sent to the system console for the event.
</Para>
</ListItem>
</VarListEntry>
</VariableList>
</ListItem>
</VarListEntry>
<VarListEntry>
<Term><Symbol Role="Variable">outcome</Symbol></Term>
<ListItem>
<Para>The event outcome to be stored in the header.  The following event outcome
values are defined:
</Para>
<VariableList>
<VarListEntry role="linebreak">
<Term><Literal>aud_c_esl_cond_success</Literal></Term>
<ListItem>
<Para>The event was completed successfully.
</Para>
</ListItem>
</VarListEntry>
<VarListEntry role="linebreak">
<Term><Literal>aud_c_esl_cond_denial</Literal></Term>
<ListItem>
<Para>The event failed because of access denial.
</Para>
</ListItem>
</VarListEntry>
<VarListEntry role="linebreak">
<Term><Literal>aud_c_esl_cond_failure</Literal></Term>
<ListItem>
<Para>The event failed because of reasons other than access denial.
</Para>
</ListItem>
</VarListEntry>
<VarListEntry role="linebreak">
<Term><Literal>aud_c_esl_cond_pending</Literal></Term>
<ListItem>
<Para>The event is in an intermediate state, and the outcome is pending, being one
in a series of connected events, where the application desires to record
the real outcome only after the last event.
</Para>
</ListItem>
</VarListEntry>
<VarListEntry role="linebreak">
<Term><Literal>aud_c_esl_cond_unknown</Literal></Term>
<ListItem>
<Para>The event outcome (denial, failure, pending, or success) is still unknown.
This outcome exists only between a <Function>dce_aud_start()</Function> 
(all varieties of this routine) call
and the next <Function>dce_aud_commit()</Function> call.
You can also use <Literal>0</Literal> to specify this outcome.
</Para>
</ListItem>
</VarListEntry>
</VariableList>
</ListItem>
</VarListEntry>
</VariableList>
</RefSect2>
<RefSect2>
<Title>Output</Title>
<VariableList>
<VarListEntry>
<Term><Symbol Role="Variable">ard</Symbol></Term>
<ListItem>
<Para>Returns a pointer to an audit record buffer.  If the event does not need to
be audited because it is not selected by the filters,
or if the environment variable <SystemItem Class="EnvironVar">DCEAUDITOFF</SystemItem> has been
set, a NULL pointer is returned.  If the function is called with
<Literal>outcome</Literal> set to <Literal>aud_c_esl_cond_unknown</Literal>, it is
possible that the function cannot determine whether the event should be
audited.
In this case, the audit record descriptor is still allocated and its address
is returned to the caller.
An <Symbol Role="Variable">outcome</Symbol> must be provided prior to logging the record with the 
<Function>dce_aud_commit()</Function> function.
</Para>
</ListItem>
</VarListEntry>
<VarListEntry>
<Term><Symbol Role="Variable">status</Symbol></Term>
<ListItem>
<Para>The status code returned by this routine.
This status code
indicates whether the routine was completed successfully or not.
If the routine was not completed successfully, the reason for the failure is
given.
</Para>
</ListItem>
</VarListEntry>
</VariableList>
<?sml-break>
<?sml-need 1.5i>
</RefSect2>
</RefSect1>
<RefSect1>
<Title>Description</Title>
<Para>The <Function>dce_aud_start_with_server_binding()</Function> 
function determines if an audit record must
be generated for the specified event.  The decision is based on the event
filters, an environment variable
(<SystemItem Class="EnvironVar">DCEAUDITOFF</SystemItem>), the server's identity provided in the
<Literal>binding</Literal> parameter, and the event outcome (if it is provided in
the <Literal>outcome</Literal> parameter).  If this event needs to be audited,
the function allocates an audit record descriptor and returns a pointer to
it (that is, <Literal>ard</Literal>). 
If the event does not need to be audited, NULL is returned in the <Symbol Role="Variable">ard</Symbol>
parameter.
If the <Literal>aud_c_evt_always_log</Literal> or <Literal>aud_c_evt_always_alarm</Literal>
option is selected, an audit record descriptor will always be
created and returned.
</Para>
<Para>The <Function>dce_aud_start_with_server_binding()</Function> function 
is designed to be used by RPC applications.
Non-RPC applications that use the DCE authorization model must use
the <Function>dce_aud_start_with_pac()</Function> function.
Non-RPC applications that do not use the DCE authorization model must 
use the <Function>dce_aud_start_with_name()</Function> function.
</Para>
<Para>This function obtains the server identity information from the RPC binding
handle and records it in the newly created audit record descriptor.
</Para>
<Para>Event-specific information can be added to the record by calling the 
<Function>dce_aud_put_ev_info()</Function> function.  The <Function>dce_aud_put_ev_info()</Function>
function can be called multiple times after calling 
any of the <Literal>dce_aud_start_</Literal><Symbol Role="Variable">*</Symbol> functions and before calling
<Function>dce_aud_commit()</Function>.  A completed audit record can either be appended
to an audit trail file or sent to the audit daemon by
calling <Function>dce_aud_commit()</Function>.
</Para>
<Para>This function searches for all relevant filters (for the specified
subject and outcome, if these are specified), summarizes the actions
for each possible event outcome, and records an outcome-action
table with <Symbol Role="Variable">ard</Symbol>.
If the outcome is specified when calling this function and the outcome
does not require any action according to filters, then this function
returns a NULL <Symbol Role="Variable">ard</Symbol>.
</Para>
<Para>If the <Symbol Role="Variable">outcome</Symbol> is not specified in the 
<Function>dce_aud_start_with_server_binding()</Function> call, 
<Function>dce_aud_start_with_server_binding()</Function> returns a NULL
<Symbol Role="Variable">ard</Symbol> if no action is required for all possible outcomes.
</Para>
<Para><?sml-need 8>The caller should not change the outcome between the
<Function>dce_aud_start_with_server_binding()</Function> and 
<Function>dce_aud_commit()</Function> calls arbitrarily.
In this case, the outcome can be made more specific, for example,
from <Literal>aud_c_esl_cond_unknown</Literal> to <Literal>aud_c_esl_cond_success</Literal> 
or from <Literal>aud_c_esl_cond_pending</Literal> to <Literal>aud_c_esl_cond_success</Literal>.
</Para>
<Para>An outcome change from <Literal>aud_c_esl_cond_success</Literal> to
<Literal>aud_c_esl_cond_denial</Literal> is not logically correct because
the outcome <Literal>aud_c_esl_cond_success</Literal> may have caused a NULL
<Symbol Role="Variable">ard</Symbol> to be returned in this function.
If the final outcome can be <Literal>aud_c_esl_cond_success</Literal>, then it should
be specified in this function, or use <Literal>aud_c_esl_cond_unknown</Literal>. 		
</Para>
<Para>This function can be called with the <Symbol Role="Variable">outcome</Symbol> parameter taking a value
of 0 (zero) or the union (logical OR) of selected values from the set of
constants <Literal>aud_c_esl_cond_success</Literal>, <Literal>aud_c_esl_cond_failure</Literal>,
<Literal>aud_c_esl_cond_denial</Literal>, and <Literal>aud_c_esl_cond_pending</Literal>.
The <Symbol Role="Variable">outcome</Symbol> parameter used in the <Function>dce_aud_commit()</Function> function
should take one value from the same set of constants.
</Para>
<Para>If <Function>dce_aud_start_with_server_binding()</Function> 
used a nonzero value for <Symbol Role="Variable">outcome</Symbol>, then the
constant used for <Symbol Role="Variable">outcome</Symbol> in the <Function>dce_aud_commit()</Function> call should
have been selected in the <Function>dce_aud_start_with_server_binding()</Function> call.
<?sml-break><?sml-need 1.5i></Para>
</RefSect1>
<RefSect1>
<Title>Return Values</Title>
<Para>No value is returned.
<?sml-break><?sml-need 1.5i></Para>
</RefSect1>
<RefSect1>
<Title>Errors</Title>
<Para>The following describes a partial list of errors that might be returned.
Refer to the &DCETg; for complete descriptions of all error
messages.
</Para>
<VariableList>
<VarListEntry>
<Term><Literal>aud_s_ok</Literal></Term>
<ListItem>
<Para>The call was successful.
</Para>
</ListItem>
</VarListEntry>
<VarListEntry role="linebreak">
<Term>Status codes passed from <Function>rpc_binding_inq_auth_info()</Function></Term>
<ListItem>
<Para></Para>
</ListItem>
</VarListEntry>
<VarListEntry role="linebreak">
<Term>Status codes passed from <Function>rpc_binding_to_string_binding()</Function></Term>
<ListItem>
<Para></Para>
</ListItem>
</VarListEntry>
<VarListEntry role="linebreak">
<Term>Status codes passed from <Function>dce_aud_start_with_name()</Function></Term>
<ListItem>
<Para></Para>
</ListItem>
</VarListEntry>
</VariableList>
</RefSect1>
<RefSect1>
<Title>Related Information</Title>
<Para><!--no-op:  l-->
Functions:
<Filename MoreInfo="RefEntry">dce_aud_commit(3sec)</Filename>,
<Filename MoreInfo="RefEntry">dce_aud_open(3sec)</Filename>,
<Filename MoreInfo="RefEntry">dce_aud_put_ev_info(3sec)</Filename>,
<Filename MoreInfo="RefEntry">dce_aud_start(3sec)</Filename>,
<Filename MoreInfo="RefEntry">dce_aud_start_with_name(3sec)</Filename>,
<Filename MoreInfo="RefEntry">dce_aud_start_with_pac(3sec)</Filename>.
<!--no-op:  b-->
</Para>
</RefSect1>
<!--+ 11/27/96 19:46:25
    | tagMorph:  $Id: dce_aud_start_with_server_binding.3sec,v 1.1.2.6 1996/12/11 16:37:44 carrig Exp $
    | tagMorph library:  $Id: dce_aud_start_with_server_binding.3sec,v 1.1.2.6 1996/12/11 16:37:44 carrig Exp $
    | sml-to-docbook:  1.25
    +-->
</RefEntry>
