<!--
# @OSF_COPYRIGHT@
# 
# 
# HISTORY
# $Log: utc_cmpintervaltime.3dts,v $
# Revision 1.1.2.6  1996/12/11  18:29:42  carrig
# 	{enh,R1.2.2}
# 	Program Listings
# 	[1996/12/11  18:28:40  carrig]
#
# Revision 1.1.2.5  1996/12/06  20:05:18  carrig
# 	{enh,R1.2.2}
# 	No changes
# 	[1996/12/06  20:04:16  carrig]
# 
# Revision 1.1.2.4  1996/12/04  20:01:29  carrig
# 	{enh,R1.2.2}
# 	Variable Lists
# 	[1996/12/04  20:00:22  carrig]
# 
# Revision 1.1.2.3  1996/12/04  13:20:59  wardr
# 	{edit,R1.2.2}
# 	Fixed initial conversion problems
# 	[1996/12/04  13:19:53  wardr]
# 
# Revision 1.1.2.2  1996/12/01  19:17:07  weir
# 	Removed thinsp entities
# 	[1996/12/01  19:16:11  weir]
# 
# Revision 1.1.2.1  1996/11/29  16:39:42  weir
# 	Initial submission
# 	[1996/11/29  16:38:50  weir]
# 
# $EndLog$
-->
<!-- Fragment document type declaration subset:
ArborText, Inc., 1988-1993, v.4001
<!DOCTYPE Book PUBLIC "-//Davenport//DTD DocBook V2.4//EN" [
]>
-->
<RefEntry Id="DCEADR.MAN409.rsml.1">
<RefMeta>
<RefEntryTitle>utc_cmpintervaltime</RefEntryTitle>
<ManVolNum>3dts</ManVolNum>
</RefMeta>
<RefNameDiv>
<RefName><Literal>utc_cmpintervaltime</Literal></RefName>
<RefPurpose>Compares two binary timestamps or two relative
binary timestamps</RefPurpose>
</RefNameDiv>
<!---->
<!--  COPYRIGHT NOTICE-->
<!--  Copyright (c) 1990, 1991, 1992, 1993 Open Software Foundation, Inc.-->
<!--  ALL RIGHTS RESERVED (DCE).  See the file named COPYRIGHT.DCE in the-->
<!--  src directory for the full copyright text.-->
<!---->
<!---->
<!-- OLD HISTORY-->
<!-- Revision 1.1.9.1  1996/11/18  20:57:26  wardr-->
<!-- 	{edit,R1.2.2}-->
<!-- 	Init capped section heads-->
<!-- 	[1996/11/18  20:56:26  wardr]-->
<!---->
<!-- Revision 1.1.7.6  1995/06/21  13:19:59  buckler-->
<!-- 	More 1.1 edits.-->
<!-- 	[1995/06/20  15:40:51  buckler]-->
<!-- -->
<!-- 	More 1.1 edits.-->
<!-- 	[1995/06/19  15:39:44  buckler]-->
<!-- -->
<!-- Revision 1.1.7.5  1995/05/31  21:01:09  buckler-->
<!-- 	No change-->
<!-- 	[1995/05/31  20:57:37  buckler]-->
<!-- -->
<!-- 	1.1 edits.-->
<!-- 	PRENTICE HALL reformat.-->
<!-- 	[1995/05/31  20:46:45  buckler]-->
<!-- -->
<!-- Revision 1.1.7.4  1993/01/26  17:48:22  cjd-->
<!-- 	Embedded copyright notice-->
<!-- 	[1993/01/26  17:14:47  cjd]-->
<!-- -->
<!-- Revision 1.1.7.3  1992/12/28  21:19:45  d_kenney-->
<!-- 	Changes made: Delete 'const'-->
<!-- 	Filename: app_ref/man3dts/utc_cmpintervaltime.3dts-->
<!-- 	Change Request Number: 3504-->
<!-- 	[1992/12/28  21:19:10  d_kenney]-->
<!-- -->
<!-- Revision 1.1.7.2  1992/10/01  18:51:42  weir-->
<!-- 	Removed change bars; moved into 1.0.2doc tree-->
<!-- 	[1992/10/01  18:36:00  weir]-->
<!-- -->
<!-- 	For P/H, now and forever!-->
<!-- 	[1992/09/16  14:38:44  oaf]-->
<!-- -->
<!-- Revision 1.1.5.3  1992/09/16  18:25:51  oaf-->
<!-- 	*** empty log message ***-->
<!-- -->
<!-- Revision 1.1.5.2  1992/08/04  15:46:23  lmk-->
<!-- 	Made Prentice-Hall editorial changes only-->
<!-- 	[1992/08/04  15:39:06  lmk]-->
<!-- -->
<!-- Revision 1.1.2.4  1992/06/02  15:36:09  buckler-->
<!-- 	Reinstated change bar codes-->
<!-- 	[1992/06/02  15:25:16  buckler]-->
<!-- -->
<!-- Revision 1.1.2.3  1992/05/20  17:32:41  buckler-->
<!-- 	Editorial review-->
<!-- 	[1992/05/20  17:25:35  buckler]-->
<!-- -->
<!-- Revision 1.1.2.2  1992/05/08  12:32:12  h_hoff-->
<!-- 	<<<-->
<!-- 	<<< CR2839 - Add sentence about NULL argument >>>-->
<!-- 	<<< CR2839 - EXAMPLE, internationalize time reference, 4 places >>>-->
<!-- 	[1992/05/08  12:31:12  h_hoff]-->
<!-- -->
<!-- Revision 1.1  1992/01/29  15:22:11  damon-->
<!-- 	Initial revision-->
<!-- -->
<!---->
<!-- (c) Copyright 1991, Open Software Foundation, Inc.  ALL RIGHTS RESERVED-->
<!--   HISTORY COMMENTS:-->
<!---->
<!--   DATE:                            COMMENT:-->
<!---->
<!--	Fri Oct 25, 1991                 Initial File Submission for final-->
<!--                                    integration at IBM-->
<!---->
<!-- ********************************************************************-->
<!--                                                                    *-->
<!-- COPYRIGHT (c) 1991 BY DIGITAL EQUIPMENT CORPORATION,               *-->
<!-- Maynard, Mass.                                                     *-->
<!--                                                                    *-->
<!-- This document is furnished under a license and may be used and     *-->
<!-- copied only in accordance with the terms of such license and with  *-->
<!-- the inclusion of the above copyright notice.  No title to or       *-->
<!-- ownership of the document is hereby transferred.                   *-->
<!--                                                                    *-->
<!-- The information in this document is subject to change without      *-->
<!-- notice and should not be construed as a commitment by Digital      *-->
<!-- Equipment Corporation.                                             *-->
<!--                                                                    *-->
<!-- ********************************************************************-->
<!-- .iX "\*Lutc_cmpintervaltime(\|)\*O"-->
<IndexTerm Id="DCEADR.MAN409.indx.1">
<Primary><Literal>Compare Interval Time</Literal></Primary>
</IndexTerm>
<RefSect1 Remap="ANSI">
<Title>Synopsis</Title>
<FuncSynopsis>
<FuncSynopsisInfo>#include &lt;dce/utc.h>
</FuncSynopsisInfo>
<FuncDef><Function><Literal>int </Literal>utc_cmpintervaltime</Function></FuncDef>
<ParamDef>enum utc_cmptype *<Parameter>relation</Parameter></ParamDef>
<ParamDef>utc_t *<Parameter>utc1</Parameter></ParamDef>
<ParamDef>utc_t *<Parameter>utc2</Parameter></ParamDef>
</FuncSynopsis>
<?sml-break>
<?sml-need 1.5i>
</RefSect1>
<RefSect1>
<Title>Parameters</Title>
<RefSect2>
<Title>Input</Title>
<VariableList>
<VarListEntry>
<Term><Symbol Role="Variable">utc1</Symbol></Term>
<ListItem>
<Para>Binary timestamp or relative binary timestamp.  Use NULL if you want this
routine to use the current time for this parameter.
</Para>
</ListItem>
</VarListEntry>
<VarListEntry>
<Term><Symbol Role="Variable">utc2</Symbol></Term>
<ListItem>
<Para>Binary timestamp or relative binary timestamp.  Use NULL if you want this
routine to use the current time for this parameter.
</Para>
</ListItem>
</VarListEntry>
</VariableList>
</RefSect2>
<RefSect2>
<Title>Output</Title>
<VariableList>
<VarListEntry>
<Term><Symbol Role="Variable">relation</Symbol></Term>
<ListItem>
<Para>Receives the result of the comparison of <Symbol Role="Variable">utc1</Symbol>:<Symbol Role="Variable">utc2</Symbol> where the result
is an enumerated type with one of the following values:
<!--no-op:  l-->
</Para>
<ItemizedList>
<ListItem>
<Para><Literal>utc_equalTo</Literal>
</Para>
</ListItem>
<ListItem>
<Para><Literal>utc_lessThan</Literal>
</Para>
</ListItem>
<ListItem>
<Para><Literal>utc_greaterThan</Literal>
</Para>
</ListItem>
<ListItem>
<Para><Literal>utc_indeterminate</Literal>
</Para>
</ListItem>
</ItemizedList>
<!--no-op:  b-->
</ListItem>
</VarListEntry>
</VariableList>
<?sml-break>
<?sml-need 1.5i>
</RefSect2>
</RefSect1>
<RefSect1>
<Title>Description</Title>
<Para>The <Function>utc_cmpintervaltime()</Function> routine compares two binary timestamps and
returns a flag indicating that the first time is greater than, less than,
equal to, or overlapping with the second time.  Two times overlap if the
intervals (<Symbol Role="Variable">time</Symbol> &minus; <Symbol Role="Variable">inaccuracy</Symbol>, <Symbol Role="Variable">time</Symbol> &plus; <Symbol Role="Variable">inaccuracy</Symbol>) of the two times
intersect.
</Para>
<Para>The input binary timestamps express two absolute or
two relative times.  Do <Symbol Role="Variable">not</Symbol>
compare relative binary timestamps to absolute binary timestamps.  If you do,
no meaningful results and no errors are returned.
</Para>
<Para>The following routine does a temporal ordering of the time intervals.
</Para>
<InformalExample>
<Para><ProgramListing>utc1 is utc_lessThan utc2 iff
        utc1.time + utc1.inacc &lt; utc2.time - utc2.inacc

utc1 is utc_greaterThan utc2 iff
        utc1.time - utc1.inacc > utc2.time + utc2.inacc

utc1 utc_equalTo utc2 iff
        utc1.time == utc2.time and
        utc1.inacc == 0 and
        utc2.inacc == 0

</ProgramListing></Para>
</InformalExample>
<Para><Literal>utc1</Literal> is <Literal>utc_indeterminate</Literal> with respect to <Literal>utc2</Literal> if the intervals
overlap.
<?sml-break><?sml-need 1.5i></Para>
</RefSect1>
<RefSect1>
<Title>Return Values</Title>
<VariableList>
<VarListEntry>
<Term>&numsp;0</Term>
<ListItem>
<Para>Indicates that the routine executed successfully.
</Para>
</ListItem>
</VarListEntry>
<VarListEntry>
<Term>&thinsp;&minus;1</Term>
<ListItem>
<Para>Indicates an invalid time argument.
</Para>
</ListItem>
</VarListEntry>
</VariableList>
<?sml-break>
<?sml-need 1.5i>
</RefSect1>
<RefSect1>
<Title>Examples</Title>
<Para>The following example checks to see if the current time is definitely after
13:00 local time.
<?sml-space .5><?sml-point-size 11>
<!--no-op:  13-->
</Para>
<InformalExample>
<Para><ProgramListing>
<?Pub _font TypeSize="8pt">
struct tm           tmtime, tmzero;
enum utc_cmptype    relation;
utc_t               testtime;

/*   Zero the tm structure for inaccuracy...
 */
memset(&amp;tmzero, 0, sizeof(tmzero));

/*  Get the current time, mapped to a tm structure...
 *
 *        NOTE: The NULL argument is used to get the current time.
 */
utc_gmtime(&amp;tmtime,         /* Out: Current GMT time in tm struct   */
           (long *)0,       /* Out: Nanoseconds of time             */
           (struct tm *)0,  /* Out: Current inaccuracy in tm struct */
           (long *)0,       /* Out: Nanoseconds of inaccuracy       */
           (utc_t *)0);     /* In:  Current timestamp               */

/*   Alter the tm structure to correspond to 13:00 local time       */
 */

tmtime.tm_hour = 13;
tmtime.tm_min = 0;
tmtime.tm_sec = 0;

/*  Convert to a binary timestamp...
 */
utc_mkgmtime(&amp;testtime,     /* Out: Binary timestamp of 13:00       */
             &amp;tmtime,       /* In:  1:00 PM in tm struct            */
             0,             /* In:  Nanoseconds of time             */
             &amp;tmzero,       /* In:  Zero inaccuracy in tm struct    */
             0);            /* In:  Nanoseconds of inaccuracy       */

/*   Compare to the current time. Note the use of the NULL argument */
 */
utc_cmpintervaltime(&amp;relation,    /* Out: Comparison relation       */
                    (utc_t *)0,   /* In:  Current timestamp         */
                    &amp;testtime);   /* In:  13:00 PM timestamp        */

/*   If it is not later - wait, print a message, etc.
 */

if (relation != utc_greaterThan) {

/*
 *     Note: It could be earlier than 13:00 local time or it could be
 *           indeterminate.  If indeterminate, for some applications
 *           it might be worth waiting.
 */
}
<?Pub /_font><?Pub Caret>
</ProgramListing></Para>
</InformalExample>
<?sml-point-size 12>
<!--no-op:  13-->
<?sml-break>
<?sml-need .8i>
</RefSect1>
<RefSect1>
<Title>Related Information</Title>
<!--no-op:  l-->
<Para>Functions: <Filename MoreInfo="RefEntry">utc_cmpmidtime(3dts)</Filename>.
<!--no-op:  b-->
</Para>
</RefSect1>
<!--+ 11/27/96 19:46:25
    | tagMorph:  $Id: utc_cmpintervaltime.3dts,v 1.1.2.6 1996/12/11 18:29:42 carrig Exp $
    | tagMorph library:  $Id: utc_cmpintervaltime.3dts,v 1.1.2.6 1996/12/11 18:29:42 carrig Exp $
    | sml-to-docbook:  1.25
    +-->
</RefEntry>
