<!--
# @OSF_COPYRIGHT@
# 
# 
# HISTORY
# $Log: idl_es_encode_incremental.3rpc,v $
# Revision 1.1.2.9  1996/12/15  16:17:42  carrig
# 	{enh,R1.2.2}
# 	Final edits
# 	[1996/12/15  16:11:10  carrig]
#
# Revision 1.1.2.8  1996/12/12  16:16:42  wardr
# 	{edit,R1.2.2}
# 	fixed coding problem
# 	[1996/12/12  16:16:13  wardr]
# 
# Revision 1.1.2.7  1996/12/11  20:39:16  wardr
# 	{edit,R1.2.2}
# 	fixed parsing problems
# 	[1996/12/11  20:35:36  wardr]
# 
# Revision 1.1.2.6  1996/12/10  22:38:31  wardr
# 	{edit,R1.2.2}
# 	Fixing sgml
# 	[1996/12/10  22:34:42  wardr]
# 
# Revision 1.1.2.5  1996/12/09  22:23:04  wardr
# 	{edit,R1.2.2}
# 	Fixed conversion problems
# 	[1996/12/09  22:05:35  wardr]
# 
# Revision 1.1.2.4  1996/12/04  21:39:39  wardr
# 	{edit,R1.2.2}
# 	Fixed initial conversion problems
# 	[1996/12/04  21:35:29  wardr]
# 
# Revision 1.1.2.3  1996/12/02  20:59:57  carrig
# 	{enh,R1.2.2}
# 	VarListEntry
# 	[1996/12/02  20:56:06  carrig]
# 
# Revision 1.1.2.2  1996/12/01  19:22:10  weir
# 	Removed thinsp entities
# 	[1996/12/01  19:19:02  weir]
# 
# Revision 1.1.2.1  1996/11/29  17:14:34  weir
# 	Initial submission
# 	[1996/11/29  17:11:13  weir]
# 
# $EndLog$
-->
<!-- Fragment document type declaration subset:
ArborText, Inc., 1988-1993, v.4001
<!DOCTYPE Book PUBLIC "-//Davenport//DTD DocBook V2.4//EN" [
]>
-->
<RefEntry Id="DCEADR.MAN210.rsml.1">
<RefMeta>
<RefEntryTitle>idl_es_encode_incremental</RefEntryTitle>
<ManVolNum>3rpc</ManVolNum>
</RefMeta>
<RefNameDiv>
<RefName><Literal>idl_es_encode_incremental</Literal></RefName>
<RefPurpose>Returns an
incremental encoding handle to the IDL encoding services; used by client and server applications</RefPurpose>
</RefNameDiv>
<!-- COPYRIGHT NOTICE-->
<!-- Copyright (c) 1990, 1991, 1992, 1993, 1994 Open Software Foundation, Inc.-->
<!-- ALL RIGHTS RESERVED (DCE).  See the file named COPYRIGHT.DCE for-->
<!-- the full copyright text.-->
<!---->
<!---->
<!-- OLD HISTORY-->
<!-- Revision 1.1.4.1  1996/11/18  19:56:17  wardr-->
<!-- 	{edit,R1.2.2}-->
<!-- 	Init capped heads and added PDG pointer-->
<!-- 	[1996/11/18  19:33:48  wardr]-->
<!---->
<!-- Revision 1.1.2.10  1995/06/07  20:10:34  buckler-->
<!-- 	1.1 edits  Prentice Hall reformat-->
<!-- 	[1995/06/07  20:05:34  buckler]-->
<!-- -->
<!-- Revision 1.1.2.8  1994/07/25  15:47:33  zahn-->
<!-- 	{review,9601,R1.1}-->
<!-- -->
<!-- 	Added that routine prototypes should return an exception,-->
<!-- 	per review comment from T. Jordahl.-->
<!-- 	[1994/07/25  15:47:05  zahn]-->
<!-- -->
<!-- Revision 1.1.2.7  1994/06/13  17:03:54  devobj-->
<!-- 	cr10872 - fix copyright-->
<!-- 	[1994/06/13  16:47:43  devobj]-->
<!-- -->
<!-- Revision 1.1.2.6  1994/05/05  19:06:23  zahn-->
<!-- 	Removed include line from Synopsis.  Replacing-->
<!-- 	with information about including in rpc_intro.3rpc.-->
<!-- 	[1994/05/05  19:06:06  zahn]-->
<!-- -->
<!-- Revision 1.1.2.5  1994/04/29  18:25:53  zahn-->
<!-- 	Fixed some typos.-->
<!-- 	[1994/04/29  18:25:39  zahn]-->
<!-- -->
<!-- Revision 1.1.2.4  1994/04/29  17:50:22  zahn-->
<!-- 	Miscellaneous cleanup.-->
<!-- 	[1994/04/29  17:50:02  zahn]-->
<!-- -->
<!-- Revision 1.1.2.3  1994/04/27  18:33:38  zahn-->
<!-- 	Added note about user-provided routines returning exceptions.-->
<!-- 	[1994/04/27  18:33:21  zahn]-->
<!-- -->
<!-- Revision 1.1.2.2  1994/04/26  19:21:20  zahn-->
<!-- 	{enh,9601,R1.1}-->
<!-- -->
<!-- 	Merged reference pages for user-provided prototypes-->
<!-- 	(idl_es_allocate_ftn_t and idl_es_write_ftn_t)-->
<!-- 	into this reference page to conform to documentation-->
<!-- 	conventions used by other routines that require prototypes.-->
<!-- 	See rpc_server_register_auth_info.3rpc for an example.-->
<!-- 	Added include line for idl_es.h to Synopsis section.-->
<!-- 	Added some information to Description section.-->
<!-- 	[1994/04/26  19:19:53  zahn]-->
<!-- -->
<!-- Revision 1.1.2.1  1994/03/21  16:33:46  rjohnson-->
<!-- 	Changes made: New IDL reference page for Version 1.1.-->
<!-- 	File name: app_ref/man3rpc/idl_es_encode_incremental.3rpc-->
<!-- 	Change Request: 9601-->
<!-- 	[1994/03/21  16:25:56  rjohnson]-->
<!-- -->
<RefSect1 Remap="ANSI">
<Title>Synopsis</Title>
<FuncSynopsis>
<FuncDef><Function><Literal>void </Literal>idl_es_encode_incremental</Function></FuncDef>
<ParamDef>idl_void_p_t <Parameter>state</Parameter></ParamDef>
<ParamDef>idl_es_allocate_fn_t <Parameter>allocate_fn</Parameter></ParamDef>
<ParamDef>idl_es_write_fn_t <Parameter>write_fn</Parameter></ParamDef>
<ParamDef>idl_es_handle_t *<Parameter>es_handle</Parameter></ParamDef>
<ParamDef>error_status_t *<Parameter>status</Parameter></ParamDef>
</FuncSynopsis>
<?sml-break>
<?sml-need 1.5i>
</RefSect1>
<RefSect1>
<Title>Parameters</Title>
<RefSect2>
<Title>Input/Output</Title>
<VariableList>
<VarListEntry>
<Term><Symbol Role="Variable">state</Symbol></Term>
<ListItem>
<Para>Specifies the address of an application-provided data structure that
coordinates the actions of the <Symbol Role="Variable">allocate_fn</Symbol> and <Symbol Role="Variable">write_fn</Symbol> routines.
The <Symbol Role="Variable">state</Symbol> data structure acts as a communications channel between
the application and the <Symbol Role="Variable">allocate_fn</Symbol> and <Symbol Role="Variable">write_fn</Symbol> routines.
</Para>
</ListItem>
</VarListEntry>
</VariableList>
</RefSect2>
<RefSect2>
<Title>Input</Title>
<VariableList>
<VarListEntry>
<Term><Symbol Role="Variable">allocate_fn</Symbol></Term>
<ListItem>
<Para>Specifies the address of a user-provided routine that
allocates an empty buffer.
The encoding stub uses the allocated buffer to store encoded data.
</Para>
<Para>The following C definition for <StructName Role="typedef">idl_es_allocate_fn_t</StructName>
illustrates the prototype for the buffer allocation routine:
<?sml-break><?sml-need 1.5i></Para>
<?Pub _newpage>
<InformalExample>
<Para><ProgramListing><UserInput>typedef void (*idl_es_allocate_fn_t)
 (
  idl_void_p_t    state,            /* in/out */
  idl_byte        **buffer,         /* out */
  idl_ulong_int   *size,            /* in/out */
 );
</UserInput></ProgramListing></Para>
</InformalExample>
<Para><?sml-need 10>The <Function>idl_es_encode_incremental()</Function> routine passes the specified
<Symbol Role="Variable">state</Symbol> parameter value as input to the <Symbol Role="Variable">allocate_fn</Symbol> buffer
allocation routine.  When the IDL encoding services call
the <Symbol Role="Variable">allocate_fn</Symbol> routine, the value at the address
indicated by <Symbol Role="Variable">size</Symbol> represents the buffer size that
the IDL encoding services have requested the routine
to allocate.  When the <Symbol Role="Variable">allocate_fn</Symbol> buffer allocation
routine allocates the buffer, it writes the actual size of the allocated
buffer to this parameter; the value must be a multiple of eight bytes.
The <Symbol Role="Variable">buffer</Symbol> parameter specifies the address of
the allocated buffer; this address must be 8-byte aligned.
</Para>
<Para>The <Symbol Role="Variable">allocate_fn</Symbol> routine should return an exception on error.
</Para>
</ListItem>
</VarListEntry>
<VarListEntry>
<Term><Symbol Role="Variable">write_fn</Symbol></Term>
<ListItem>
<Para>Specifies the address of a user-provided routine that writes
the contents of a buffer that contains data that has been
encoded by the IDL encoding services.  The IDL encoding services
will call this routine when the buffer allocated by
<Symbol Role="Variable">allocate_fn</Symbol> is full, or when all of the application's
encoding operation parameters have been encoded.
</Para>
<Para>The following C definition for <StructName Role="typedef">idl_es_write_fn_t</StructName>
illustrates the prototype for the <Symbol Role="Variable">write_fn</Symbol> routine:
<?sml-break><?sml-need 1.5i></Para>
<InformalExample>
<Para><ProgramListing><UserInput>typedef void (*idl_es_write_fn_t)
 (
  idl_void_p_t    state,            /* in/out */
  idl_byte        *buffer,          /* in */
  idl_ulong_int   size,             /* in */
 );
</UserInput></ProgramListing></Para>
</InformalExample>
<Para>The <Function>idl_es_encode_incremental()</Function> routine passes the
specified <Symbol Role="Variable">state</Symbol> parameter value as input to
the <Symbol Role="Variable">write_fn</Symbol> routine.  The <Symbol Role="Variable">buffer</Symbol> parameter value
is the address of the data that the IDL encoding services have
encoded.  The <Symbol Role="Variable">size</Symbol> parameter value is the size, in bytes, of the
encoded data.
</Para>
<Para>The <Symbol Role="Variable">write_fn</Symbol> routine should return an exception on error.
</Para>
</ListItem>
</VarListEntry>
</VariableList>
</RefSect2>
<RefSect2>
<Title>Output</Title>
<VariableList>
<VarListEntry>
<Term><Symbol Role="Variable">es_handle</Symbol></Term>
<ListItem>
<Para>Returns the address of an IDL encoding services handle for use
by a client or server encoding operation.
</Para>
</ListItem>
</VarListEntry>
<VarListEntry>
<Term><Symbol Role="Variable">status</Symbol></Term>
<ListItem>
<Para>Returns the status code from this routine.  This status code indicates
whether the routine completed successfully or, if not, why not.
</Para>
</ListItem>
</VarListEntry>
</VariableList>
</RefSect2>
</RefSect1>
<RefSect1>
<Title>Description</Title>
<Para>The IDL encoding services provide client and server
RPC applications with a method for encoding data types
in input parameters into a byte stream and decoding data types
in output parameters from a byte stream without invoking
the RPC runtime.  Encoding and decoding operations are
analogous to marshalling and unmarshalling, except that
the data is stored locally, and is not transmitted over
the network.  Client and server applications can use the
IDL encoding services to create persistent storage for
their data.  Encoding flattens complex data types into
a byte stream for storage on disk, while decoding restores
the flattened data to complex form.
</Para>
<Para>The <Function>idl_es_encode_incremental()</Function> routine belongs
to a set of routines that return handles to the IDL
encoding services for use by client and server encoding
and decoding operations.  The information in the handle
controls the way in which the IDL encoding services
manage memory when encoding or decoding data.
</Para>
<Para>The <Function>idl_es_encode_incremental()</Function> routine returns an
incremental encoding handle, which directs the IDL encoding
services to encode data into a chain of small buffers that
the user-provided <Symbol Role="Variable">allocate_fn</Symbol> routine manages.
The user-provided <Symbol Role="Variable">write_fn</Symbol> routine writes the
encoded data in these buffers back for access by
the application.
</Para>
<Para>The <Symbol Role="Variable">state</Symbol> data structure is the communications path between
the application and the <Symbol Role="Variable">allocate_fn</Symbol> and <Symbol Role="Variable">write_fn</Symbol> routines.
For example, the application can build a cache of pre-allocated memory
to store encoded data, and store pointers to that pre-allocated memory
in the <Symbol Role="Variable">state</Symbol> data structure.  When invoked by the IDL encoding services
to allocate a buffer, the <Symbol Role="Variable">allocate_fn</Symbol> routine can search
the <Symbol Role="Variable">state</Symbol> data structure for a free memory location to use.
<?sml-break><?sml-need 1.5i></Para>
</RefSect1>
<RefSect1>
<Title>Return Values</Title>
<Para>None.
<?sml-break><?sml-need 1.5i></Para>
</RefSect1>
<RefSect1>
<Title>Errors</Title>
<Para>The following describes a partial list of errors that might be returned.
Refer to the &DCETg; for complete descriptions of all error
messages.
</Para>
<VariableList>
<VarListEntry>
<Term><Literal>rpc_s_ok</Literal></Term>
<ListItem>
<Para>Success.
</Para>
</ListItem>
</VarListEntry>
<VarListEntry role="linebreak">
<Term><Literal>rpc_s_no_memory</Literal></Term>
<ListItem>
<Para>Insufficient memory available to complete operation.
</Para>
</ListItem>
</VarListEntry>
</VariableList>
</RefSect1>
<RefSect1>
<Title>Related Information</Title>
<!--no-op:  l-->
<Para>Functions: <Filename MoreInfo="RefEntry">idl_es_decode_incremental(3rpc)</Filename>,
<Filename MoreInfo="RefEntry">idl_es_encode_dyn_buffer(3rpc)</Filename>,
<Filename MoreInfo="RefEntry">idl_es_encode_fixed_buffer(3rpc)</Filename>.
<!--no-op:  b-->
</Para>
</RefSect1>
<!--+ 11/27/96 19:46:25
    | tagMorph:  $Id: idl_es_encode_incremental.3rpc,v 1.1.2.9 1996/12/15 16:17:42 carrig Exp $
    | tagMorph library:  $Id: idl_es_encode_incremental.3rpc,v 1.1.2.9 1996/12/15 16:17:42 carrig Exp $
    | sml-to-docbook:  1.25
    +-->
</RefEntry>
