<!--
# @OSF_COPYRIGHT@
# 
# 
# HISTORY
# $Log: rpc_server_listen.3rpc,v $
# Revision 1.1.2.8  1996/12/15  16:33:37  carrig
# 	{enh,R1.2.2}
# 	Final edits
# 	[1996/12/15  16:14:01  carrig]
#
# Revision 1.1.2.7  1996/12/11  20:41:16  wardr
# 	{edit,R1.2.2}
# 	fixed parsing problems
# 	[1996/12/11  20:37:20  wardr]
# 
# Revision 1.1.2.6  1996/12/10  22:40:29  wardr
# 	{edit,R1.2.2}
# 	Fixing sgml
# 	[1996/12/10  22:36:30  wardr]
# 
# Revision 1.1.2.5  1996/12/09  22:25:14  wardr
# 	{edit,R1.2.2}
# 	Fixed conversion problems
# 	[1996/12/09  22:07:29  wardr]
# 
# Revision 1.1.2.4  1996/12/04  21:41:40  wardr
# 	{edit,R1.2.2}
# 	Fixed initial conversion problems
# 	[1996/12/04  21:37:18  wardr]
# 
# Revision 1.1.2.3  1996/12/02  21:01:38  carrig
# 	{enh,R1.2.2}
# 	VarListEntry
# 	[1996/12/02  20:58:15  carrig]
# 
# Revision 1.1.2.2  1996/12/01  19:23:29  weir
# 	Removed thinsp entities
# 	[1996/12/01  19:20:35  weir]
# 
# Revision 1.1.2.1  1996/11/29  17:17:04  weir
# 	Initial submission
# 	[1996/11/29  17:12:37  weir]
# 
# $EndLog$
-->
<!-- Fragment document type declaration subset:
ArborText, Inc., 1988-1993, v.4001
<!DOCTYPE Book PUBLIC "-//Davenport//DTD DocBook V2.4//EN" [
]>
-->
<RefEntry Id="DCEADR.MAN302.rsml.1">
<RefMeta>
<RefEntryTitle>rpc_server_listen</RefEntryTitle>
<ManVolNum>3rpc</ManVolNum>
</RefMeta>
<RefNameDiv>
<RefName><Literal>rpc_server_listen</Literal></RefName>
<RefPurpose>Tells the RPC runtime to listen for remote procedure calls;  used by server applications </RefPurpose>
</RefNameDiv>
<!---->
<!--  COPYRIGHT NOTICE-->
<!--  Copyright (c) 1990, 1991, 1992, 1993 Open Software Foundation, Inc.-->
<!--  ALL RIGHTS RESERVED (DCE).  See the file named COPYRIGHT.DCE in the-->
<!--  src directory for the full copyright text.-->
<!---->
<!---->
<!-- OLD HISTORY-->
<!-- Revision 1.1.8.1  1996/11/18  19:59:33  wardr-->
<!-- 	{edit,R1.2.2}-->
<!-- 	Init capped heads and added PDG pointer-->
<!-- 	[1996/11/18  19:35:24  wardr]-->
<!---->
<!-- Revision 1.1.6.8  1995/06/21  13:20:51  buckler-->
<!-- 	More 1.1 edits.-->
<!-- 	[1995/06/20  21:03:38  buckler]-->
<!-- -->
<!-- Revision 1.1.6.7  1995/06/07  20:12:08  buckler-->
<!-- 	1.1 edits  Prentice Hall reformat-->
<!-- 	[1995/06/07  20:07:27  buckler]-->
<!-- -->
<!-- Revision 1.1.6.5  1994/11/03  23:46:26  neilson-->
<!-- 	Substituted macros for book names in cross refs.-->
<!-- 	[1994/11/03  01:39:36  neilson]-->
<!-- -->
<!-- Revision 1.1.6.4  1993/01/27  16:55:24  cjd-->
<!-- 	Embedded copyright notice-->
<!-- 	[1993/01/26  18:34:11  cjd]-->
<!-- -->
<!-- Revision 1.1.6.3  1993/01/26  19:05:52  cjd-->
<!-- 	Embedded copyright notice-->
<!-- 	[1993/01/26  18:34:11  cjd]-->
<!-- -->
<!-- Revision 1.1.6.2  1992/10/01  20:57:09  weir-->
<!-- 	Removed change bars; moved into 1.0.2doc tree-->
<!-- 	[1992/10/01  20:09:33  weir]-->
<!-- -->
<!-- 	For P/H, now and forever!-->
<!-- 	[1992/09/16  14:52:56  oaf]-->
<!-- -->
<!-- Revision 1.1.4.3  1992/09/16  18:31:57  oaf-->
<!-- 	*** empty log message ***-->
<!-- -->
<!-- Revision 1.1.4.2  1992/08/14  17:54:35  oaf-->
<!-- 	2nd edits, PURPOSE fix, .ad l on related functions (& restore)-->
<!-- 	[1992/08/14  17:02:15  oaf]-->
<!-- -->
<!-- Revision 1.1.2.2  1992/05/19  15:50:41  buckler-->
<!-- 	Editorial review-->
<!-- 	[1992/05/19  15:42:46  buckler]-->
<!-- -->
<!-- Revision 1.1  1992/01/29  15:38:22  damon-->
<!-- 	Initial revision-->
<!-- -->
<!---->
<!-- (c) Copyright 1991, Open Software Foundation, Inc.  ALL RIGHTS RESERVED-->
<!--   HISTORY COMMENTS:-->
<!---->
<!--   DATE:                            COMMENT:-->
<!---->
<!--	Mon Nov 11, 1991                 Initial file submission to HP-->
<!--                                    for final integration at IBM.-->
<!---->
<!---->
<!-- ********************************************************************-->
<!-- Copyright (c) 1991 Hewlett-Packard Co. and Digital Equipment Corp. *-->
<!-- All rights reserved.                                               *-->
<!-- ********************************************************************-->
<!-- .iX "\*Lrpc_server_listen(\|)\*O"-->
<RefSect1 Remap="ANSI">
<Title>Synopsis</Title>
<FuncSynopsis>
<FuncSynopsisInfo>#include &lt;dce/rpc.h></FuncSynopsisInfo>
<FuncDef><Function>void rpc_server_listen</Function></FuncDef>
<ParamDef>unsigned32 <Parameter>max_calls_exec</Parameter></ParamDef>
<ParamDef>unsigned32 *<Parameter>status</Parameter></ParamDef>
</FuncSynopsis>
<?sml-break>
<?sml-need 1.5i>
</RefSect1>
<RefSect1>
<Title>Parameters</Title>
<RefSect2>
<Title>Input</Title>
<VariableList>
<VarListEntry role="linebreak">
<Term><Symbol Role="Variable">max_calls_exec</Symbol></Term>
<ListItem>
<Para>Specifies the maximum number of concurrent executing remote procedure calls.
</Para>
<Para>Use the value <Literal>rpc_c_listen_max_calls_default</Literal> to specify the
default value.
</Para>
<Para>Also, the five <Literal>rpc_server_use_</Literal><Symbol Role="Variable">*</Symbol><Literal>_protseq</Literal><Symbol Role="Variable">*</Symbol><Literal>()</Literal> routines limit (according to
their <Symbol Role="Variable">max_call_requests</Symbol> parameter) the number of concurrent remote
procedure call requests that a server can accept.
</Para>
</ListItem>
</VarListEntry>
</VariableList>
</RefSect2>
<RefSect2>
<Title>Output</Title>
<VariableList>
<VarListEntry>
<Term><Symbol Role="Variable">status</Symbol></Term>
<ListItem>
<Para>Returns the status code from this routine.  This status code
indicates whether the routine completed successfully or, if not, why not.
</Para>
</ListItem>
</VarListEntry>
</VariableList>
<?sml-break>
<?sml-need 1.5i>
</RefSect2>
</RefSect1>
<RefSect1>
<Title>Description</Title>
<Para>The <Function>rpc_server_listen()</Function> routine makes a server listen for
remote procedure calls.  DCE RPC allows a server to
simultaneously process multiple calls.  The <Symbol Role="Variable">max_calls_exec</Symbol> parameter
specifies the maximum number of concurrent remote procedure calls the server
executes.  Each remote procedure call executes in
a call execution thread.  The implementation of
the RPC architecture determines whether
it reuses call execution threads for the execution of
subsequent remote procedure calls or, instead, it creates a new thread for
each execution of a subsequent remote procedure call.
</Para>
<Para>The following conditions affect the number of
concurrent remote procedure calls that a server can process:
</Para>
<ItemizedList>
<ListItem>
<Para>Sufficient network resources must be available to accept simultaneous
call requests arriving over a particular protocol sequence.
The value of <Symbol Role="Variable">max_call_requests</Symbol> in the
five <Literal>rpc_server_use_</Literal><Symbol Role="Variable">*</Symbol><Literal>_protseq*</Literal><Literal>()</Literal> routines advises
the RPC runtime about the runtime's request of network resources.
</Para>
</ListItem>
<ListItem>
<Para>Enough call threads must be available to execute the simultaneous
call requests once they have been accepted.  The value of
<Symbol Role="Variable">max_calls_exec</Symbol> in <Function>rpc_server_listen()</Function>
specifies the number of call threads.
</Para>
</ListItem>
</ItemizedList>
<Para>These conditions are independent of each other.
</Para>
<Para>A server application that specifies a value for <Symbol Role="Variable">max_calls_exec</Symbol>
greater than 1 is responsible for concurrency control
among the remote procedures since each executes in a separate
thread.
</Para>
<Para>If the server receives more remote procedure calls than it can execute
(more calls than the value of <Symbol Role="Variable">max_calls_exec</Symbol>), the
RPC runtime accepts and queues additional remote procedure calls until
a call execution thread is available.  From the client's perspective,
a queued remote procedure call appears the same as one that the
server is actively executing.  A client call remains blocked and in the
queue until any one of the following events occurs:
<!--no-op:  l-->
</Para>
<ItemizedList>
<ListItem>
<Para>The remote procedure call is assigned to an available call execution thread
and the call runs to completion.
</Para>
</ListItem>
<ListItem>
<Para>The client no longer can communicate with the server.
</Para>
</ListItem>
<ListItem>
<Para>The client thread is canceled and the remote procedure call does not
complete within the cancel timeout limits.
</Para>
</ListItem>
</ItemizedList>
<!--no-op:  b-->
<Para>The implementation of the RPC architecture determines the amount of
queuing it provides.
</Para>
<Para>The RPC runtime continues listening for remote procedure calls (that is, the
routine does not return to the server) until one of the following events
occurs:
<!--no-op:  l-->
</Para>
<ItemizedList>
<ListItem>
<Para>One of the server application's manager routines calls
<Function>rpc_mgmt_stop_server_listening()</Function>.
</Para>
</ListItem>
<ListItem>
<Para>A client is allowed to, and makes,
a remote <Function>rpc_mgmt_stop_server_listening()</Function>
call to the server.
</Para>
</ListItem>
</ItemizedList>
<!--no-op:  b-->
<Para>On receiving a request to stop listening, the RPC runtime stops accepting new
remote procedure calls for all registered
interfaces.  Executing calls and existing queued calls
are allowed to complete.
</Para>
<Para>After all calls complete, <Function>rpc_server_listen()</Function> returns
to the caller, which is a server application.
</Para>
<Para>For more information about a server's listening for and
handling incoming remote procedure calls, refer to the
&DCEDk;.
It also contains information about canceled threads.
<?sml-break><?sml-need .8i></Para>
</RefSect1>
<RefSect1>
<Title>Return Values</Title>
<Para>No value is returned.
<?sml-break><?sml-need 1.5i></Para>
</RefSect1>
<RefSect1>
<Title>Errors</Title>
<Para>The following describes a partial list of errors that might be returned.
Refer to the &DCETg; for complete descriptions of all error
messages.
</Para>
<VariableList>
<VarListEntry>
<Term><Literal>rpc_s_ok</Literal></Term>
<ListItem>
<Para>Success.
</Para>
</ListItem>
</VarListEntry>
<VarListEntry role="linebreak">
<Term><Literal>rpc_s_already_listening</Literal></Term>
<ListItem>
<Para>Server already listening.
</Para>
</ListItem>
</VarListEntry>
<VarListEntry role="linebreak">
<Term><Literal>rpc_s_max_calls_too_small</Literal></Term>
<ListItem>
<Para>Maximum calls value too small.
</Para>
</ListItem>
</VarListEntry>
<VarListEntry role="linebreak">
<Term><Literal>rpc_s_no_protseqs_registered</Literal></Term>
<ListItem>
<Para>No protocol sequences registered.
</Para>
</ListItem>
</VarListEntry>
</VariableList>
</RefSect1>
<RefSect1>
<Title>Related Information</Title>
<Para><!--no-op:  l-->
Functions:
<Filename MoreInfo="RefEntry">rpc_mgmt_server_stop_listening(3rpc)</Filename>,
<Filename MoreInfo="RefEntry">rpc_server_register_if(3rpc)</Filename>,
<Filename MoreInfo="RefEntry">rpc_server_use_all_protseqs(3rpc)</Filename>,
<Filename MoreInfo="RefEntry">rpc_server_use_all_protseqs_if(3rpc)</Filename>,
<Filename MoreInfo="RefEntry">rpc_server_use_protseq(3rpc)</Filename>,
<Filename MoreInfo="RefEntry">rpc_server_use_protseq_ep(3rpc)</Filename>,
<Filename MoreInfo="RefEntry">rpc_server_use_protseq_if(3rpc)</Filename>.
</Para>
<Para>Books:
&DCEDk;.
<!--no-op:  b-->
</Para>
</RefSect1>
<!--+ 11/27/96 19:46:25
    | tagMorph:  $Id: rpc_server_listen.3rpc,v 1.1.2.8 1996/12/15 16:33:37 carrig Exp $
    | tagMorph library:  $Id: rpc_server_listen.3rpc,v 1.1.2.8 1996/12/15 16:33:37 carrig Exp $
    | sml-to-docbook:  1.25
    +-->
</RefEntry>
