<!--
# @OSF_COPYRIGHT@
# 
# 
# HISTORY
# $Log: rpc_ns_entry_inq_resolution.3rpc,v $
# Revision 1.1.2.8  1996/12/15  16:34:58  carrig
# 	{enh,R1.2.2}
# 	Final edits
# 	[1996/12/15  16:12:28  carrig]
#
# Revision 1.1.2.7  1996/12/11  20:40:28  wardr
# 	{edit,R1.2.2}
# 	fixed parsing problems
# 	[1996/12/11  20:36:42  wardr]
# 
# Revision 1.1.2.6  1996/12/10  22:39:44  wardr
# 	{edit,R1.2.2}
# 	Fixing sgml
# 	[1996/12/10  22:35:50  wardr]
# 
# Revision 1.1.2.5  1996/12/09  22:24:26  wardr
# 	{edit,R1.2.2}
# 	Fixed conversion problems
# 	[1996/12/09  22:06:47  wardr]
# 
# Revision 1.1.2.4  1996/12/04  21:40:48  wardr
# 	{edit,R1.2.2}
# 	Fixed initial conversion problems
# 	[1996/12/04  21:36:37  wardr]
# 
# Revision 1.1.2.3  1996/12/02  21:01:03  carrig
# 	{enh,R1.2.2}
# 	VarListEntry
# 	[1996/12/02  20:57:25  carrig]
# 
# Revision 1.1.2.2  1996/12/01  19:22:59  weir
# 	Removed thinsp entities
# 	[1996/12/01  19:20:00  weir]
# 
# Revision 1.1.2.1  1996/11/29  17:16:10  weir
# 	Initial submission
# 	[1996/11/29  17:12:06  weir]
# 
# $EndLog$
-->
<!-- Fragment document type declaration subset:
ArborText, Inc., 1988-1993, v.4001
<!DOCTYPE Book PUBLIC "-//Davenport//DTD DocBook V2.4//EN" [
]>
-->
<RefEntry Id="DCEADR.MAN266.rsml.1">
<RefMeta>
<RefEntryTitle>rpc_ns_entry_inq_resolution</RefEntryTitle>
<ManVolNum></ManVolNum>
</RefMeta>
<RefNameDiv>
<RefName><Literal>rpc_ns_entry_inq_resolution</Literal></RefName>
<RefPurpose>Resolves the cell namespace components
of a name and returns partial results.</RefPurpose>
</RefNameDiv>
<!-- COPYRIGHT NOTICE-->
<!-- Copyright (c) 1990, 1991, 1992, 1993 Open Software Foundation, Inc.-->
<!-- ALL RIGHTS RESERVED (DCE).  See the file named COPYRIGHT.DCE in the-->
<!-- src directory for the full copyright text.-->
<!-- OLD HISTORY-->
<!-- Revision 1.1.4.1  1996/11/18  19:58:26  wardr-->
<!-- 	{edit,R1.2.2}-->
<!-- 	Init capped heads and added PDG pointer-->
<!-- 	[1996/11/18  19:34:49  wardr]-->
<!---->
<!-- Revision 1.1.2.4  1995/06/21  13:20:38  buckler-->
<!-- 	More 1.1 edits.-->
<!-- 	[1995/06/20  20:25:34  buckler]-->
<!-- -->
<!-- Revision 1.1.2.3  1995/06/07  20:11:32  buckler-->
<!-- 	1.1 edits  Prentice Hall reformat-->
<!-- 	[1995/06/07  20:06:44  buckler]-->
<!-- -->
<!-- Revision 1.1.2.1  1994/09/01  14:15:13  buckler-->
<!-- 	Fix spacing in comment leader-->
<!-- 	[1994/09/01  14:12:41  buckler]-->
<!-- -->
<!-- 	{def, 8505, R1.1}-->
<!-- 	New reference page based on AES corresponding text.-->
<!-- -->
<!-- -->
<RefSect1>
<Title>Synopsis</Title>
<FuncSynopsis>
<FuncSynopsisInfo>#include &lt;dce/rpc.h></FuncSynopsisInfo>
<FuncDef><Function>void rpc_ns_entry_inq_resolution</Function></FuncDef>
<ParamDef>unsigned32 <Parameter>entry_name_syntax</Parameter></ParamDef>
<ParamDef>unsigned_char_t *<Parameter>entry_name</Parameter></ParamDef>
<ParamDef>unsigned_char_t **<Parameter>resolved_name</Parameter></ParamDef>
<ParamDef>unsigned_char_t **<Parameter>unresolved_name</Parameter></ParamDef>
<ParamDef>unsigned32 *<Parameter>status</Parameter></ParamDef>
</FuncSynopsis>
</RefSect1>
<RefSect1>
<Title>Parameters</Title>
<RefSect2>
<Title>Input</Title>
<VariableList>
<VarListEntry role="linebreak">
<Term><Symbol Role="Variable">entry_name_syntax</Symbol></Term>
<ListItem>
<Para>An integer value that specifies the syntax of the argument <Symbol Role="Variable">entry_name</Symbol>.
To use the syntax that is specified in the
<Literal>RPC_DEFAULT_ENTRY_SYNTAX</Literal> environment variable, supply a value of
<Literal>rpc_c_ns_syntax_default</Literal>.
<!-- (See Appendix C of the \*VAES/DC RPC\*O document for the possible values of-->
<!-- this argument.)-->
<!-- .PP-->
<!-- The value \*Lrpc_c_ns_syntax_default\*O specifies the syntax specified by-->
<!-- the \*LRPC_DEFAULT_ENTRY_SYNTAX\*O environment variable.  The value-->
<!-- \*Lrpc_c_ns_syntax_dce\*O corresponds to the name syntax specified in Part 1-->
<!-- of this document.-->
</Para>
</ListItem>
</VarListEntry>
<VarListEntry>
<Term><Symbol Role="Variable">entry_name</Symbol></Term>
<ListItem>
<Para>The entry name on which the attempted name resolution is to be done.  The name can
be specified in either cell-relative or global from.
</Para>
</ListItem>
</VarListEntry>
</VariableList>
</RefSect2>
<RefSect2>
<Title>Input/Output</Title>
<VariableList>
<VarListEntry role="linebreak">
<Term><Symbol Role="Variable">resolved_name</Symbol></Term>
<ListItem>
<Para>Returns a pointer to the resolved portion of the entry name.  The <Symbol Role="Variable">resolved_name</Symbol>
string returned will be null terminated and will not contain trailing component
separators (that is, no trailing <Literal>/</Literal> (slash) characters).
</Para>
<Para>If NULL is specified on input for this parameter, nothing will be returned.
</Para>
</ListItem>
</VarListEntry>
<VarListEntry role="linebreak">
<Term><Symbol Role="Variable">unresolved_name</Symbol></Term>
<ListItem>
<Para>Returns a pointer to the unresolved portion of the entry name.  The <Symbol Role="Variable">unresolved_name</Symbol>
string returned will be a relative name, containing no leading component separators (that
is, it will contain no leading <Literal>/</Literal> (slash) characters).
</Para>
<Para>If NULL is specified on input for this parameter, nothing will be returned.
</Para>
</ListItem>
</VarListEntry>
</VariableList>
</RefSect2>
<RefSect2>
<Title>Output</Title>
<VariableList>
<VarListEntry>
<Term><Symbol Role="Variable">status</Symbol></Term>
<ListItem>
<Para>Returns the status code from this routine.  The status code indicates whether the
routine completed successfully, or if not, why not.
</Para>
</ListItem>
</VarListEntry>
</VariableList>
<?sml-break>
<?sml-need 3>
</RefSect2>
</RefSect1>
<RefSect1>
<Title>Description</Title>
<Para>The <Function>rpc_ns_entry_inq_resolution()</Function> routine attempts to read an
entry in the cell namespace.  If the entire entry name as specified is
successfully read, the full resolution of the entry name (that is, the
originally-specified <Symbol Role="Variable">entry_name</Symbol>) is returned in <Symbol Role="Variable">resolved_name</Symbol>
and the status is set to <Literal>rpc_s_ok</Literal>.
</Para>
<Para>If the read was unsuccessful because the full entry was not found in the cell
namespace, then the status code will be set to <Literal>rpc_s_partial_results</Literal>,
and the following will occur:
<!--no-op:  l-->
</Para>
<ItemizedList>
<ListItem>
<Para>The part of the name successfully read will be returned in <Symbol Role="Variable">resolved_name</Symbol>
</Para>
</ListItem>
<ListItem>
<Para>The remaining (unresolved) part of the name will be returned in
<Symbol Role="Variable">unresolved_name</Symbol>
</Para>
</ListItem>
</ItemizedList>
<!--no-op:  b-->
<Para>Thus, if the status code is <Literal>rpc_s_partial_results</Literal> and the (nonempty)
return parameter <Symbol Role="Variable">resolved_name</Symbol> specifies a leaf (not a directory) entry,
the contents of <Symbol Role="Variable">resolved_name</Symbol> can be used in subsequent calls to the NSI
interface to obtain a binding handle for the server that exported to the entry.
This behavior allows applications to implement namespace junctions to
their own internally-implemented namespaces.  Using this routine, clients can
attempt to bind to overqualified name entries whose <Symbol Role="Variable">resolved_name</Symbol> part is
the name of the server entry, and whose 
<Symbol Role="Variable">unresolved_name</Symbol> part is the pathname
(meaningful to the server) of some object that is managed by the application.  Calling
<Function>rpc_ns_entry_inq_resolution()</Function> with the full name allows the client to
learn what part of the name denotes the server entry it must import 
bindings from; it can then bind to the server, 
passing the rest of the name, which the server
interprets as appropriate.  The <Function>sec_acl_bind()</Function> routine, for
example, works this way.
</Para>
<Para>The RPC runtime allocates memory for the returned <Symbol Role="Variable">resolved_name</Symbol>
and <Symbol Role="Variable">unresolved_name</Symbol> parameters.  The application is responsible
for calling <Function>rpc_string_free()</Function> to free the allocated memory.
</Para>
<Para>The application requires read permission for the name entries that are resolved
within the cell namespace.
<?sml-break><?sml-need 3></Para>
</RefSect1>
<RefSect1>
<Title>Return Values</Title>
<Para>None. 
<?sml-break><?sml-need 3></Para>
</RefSect1>
<RefSect1>
<Title>Errors</Title>
<Para>The following describes a partial list of errors that might be returned.
Refer to the &DCETg; for complete descriptions of all error
messages.
</Para>
<VariableList>
<VarListEntry>
<Term><Literal>rpc_s_ok</Literal></Term>
<ListItem>
<Para>Success.
</Para>
</ListItem>
</VarListEntry>
<VarListEntry role="linebreak">
<Term><Literal>rpc_s_partial_results</Literal></Term>
<ListItem>
<Para>The entry name was only partially resolved within the cell namespace
and the value of <Symbol Role="Variable">unresolved_name</Symbol> points to the residual of the name.
</Para>
</ListItem>
</VarListEntry>
<VarListEntry role="linebreak">
<Term><Literal>rpc_s_invalid_name_syntax</Literal></Term>
<ListItem>
<Para>The requested name syntax is invalid.
</Para>
</ListItem>
</VarListEntry>
<VarListEntry role="linebreak">
<Term><Literal>rpc_s_unsupported_name_syntax</Literal></Term>
<ListItem>
<Para>The requested name syntax is not supported.
</Para>
</ListItem>
</VarListEntry>
</VariableList>
</RefSect1>
<RefSect1>
<Title>Related Information</Title>
<Para><!--no-op:  l-->
Functions: 
<Literal>rpc_ns_binding_</Literal><Symbol Role="Variable">*</Symbol><Literal>()</Literal> routines.
<!--no-op:  b-->
</Para>
</RefSect1>
<!--+ 11/27/96 19:46:25
    | tagMorph:  $Id: rpc_ns_entry_inq_resolution.3rpc,v 1.1.2.8 1996/12/15 16:34:58 carrig Exp $
    | tagMorph library:  $Id: rpc_ns_entry_inq_resolution.3rpc,v 1.1.2.8 1996/12/15 16:34:58 carrig Exp $
    | sml-to-docbook:  1.25
    +-->
</RefEntry>
