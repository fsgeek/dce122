<!--
# @OSF_COPYRIGHT@
# 
# 
# HISTORY
# $Log: rpc_cs_get_tags.3rpc,v $
# Revision 1.1.2.8  1996/12/15  16:42:39  carrig
# 	{enh,R1.2.2}
# 	Final edits
# 	[1996/12/15  16:11:36  carrig]
#
# Revision 1.1.2.7  1996/12/11  20:39:39  wardr
# 	{edit,R1.2.2}
# 	fixed parsing problems
# 	[1996/12/11  20:35:58  wardr]
# 
# Revision 1.1.2.6  1996/12/10  22:38:55  wardr
# 	{edit,R1.2.2}
# 	Fixing sgml
# 	[1996/12/10  22:35:04  wardr]
# 
# Revision 1.1.2.5  1996/12/09  22:23:32  wardr
# 	{edit,R1.2.2}
# 	Fixed conversion problems
# 	[1996/12/09  22:05:59  wardr]
# 
# Revision 1.1.2.4  1996/12/04  21:40:02  wardr
# 	{edit,R1.2.2}
# 	Fixed initial conversion problems
# 	[1996/12/04  21:35:51  wardr]
# 
# Revision 1.1.2.3  1996/12/02  21:00:18  carrig
# 	{enh,R1.2.2}
# 	VarListEntry
# 	[1996/12/02  20:56:30  carrig]
# 
# Revision 1.1.2.2  1996/12/01  19:22:26  weir
# 	Removed thinsp entities
# 	[1996/12/01  19:19:20  weir]
# 
# Revision 1.1.2.1  1996/11/29  17:15:05  weir
# 	Initial submission
# 	[1996/11/29  17:11:30  weir]
# 
# $EndLog$
-->
<!-- Fragment document type declaration subset:
ArborText, Inc., 1988-1993, v.4001
<!DOCTYPE Book PUBLIC "-//Davenport//DTD DocBook V2.4//EN" [
]>
-->
<RefEntry Id="DCEADR.MAN230.rsml.1">
<RefMeta>
<RefEntryTitle>rpc_cs_get_tags</RefEntryTitle>
<ManVolNum>3rpc</ManVolNum>
</RefMeta>
<RefNameDiv>
<RefName><Literal>rpc_cs_get_tags</Literal></RefName>
<RefPurpose>Retrieves code set tags from a binding handle;  used by client and server applications</RefPurpose>
</RefNameDiv>
<!-- COPYRIGHT NOTICE-->
<!-- Copyright (c) 1990, 1991, 1992, 1993, 1994 Open Software Foundation, Inc.-->
<!-- ALL RIGHTS RESERVED (DCE).  See the file named COPYRIGHT.DCE for-->
<!-- the full copyright text.-->
<!-- -->
<!-- -->
<!-- OLD HISTORY-->
<!-- Revision 1.1.4.2  1996/11/18  19:56:53  wardr-->
<!-- 	{edit,R1.2.2}-->
<!-- 	Init capped heads and added PDG pointer-->
<!-- 	[1996/11/18  19:34:09  wardr]-->
<!---->
<!-- Revision 1.1.4.1  1996/10/30  12:48:31  wardr-->
<!-- 	{def,CR13630,R1.2.2}-->
<!-- 	misc corrections from developer Mariko Romagna-->
<!-- 	[1996/10/30  12:47:31  wardr]-->
<!-- -->
<!-- Revision 1.1.2.9  1995/06/07  20:10:51  buckler-->
<!-- 	1.1 edits  Prentice Hall reformat-->
<!-- 	[1995/06/07  20:05:59  buckler]-->
<!-- -->
<!-- Revision 1.1.2.7  1994/10/18  19:31:32  zahn-->
<!-- 	{edt,5284,R1.1}-->
<!-- -->
<!-- 	Added second technical review comments.-->
<!-- 	[1994/10/18  19:31:02  zahn]-->
<!-- -->
<!-- Revision 1.1.2.6  1994/10/05  12:01:04  zahn-->
<!-- 	{edt,5284,R1.1}-->
<!-- -->
<!-- 	Miscellaneous edits.-->
<!-- 	[1994/10/05  12:00:48  zahn]-->
<!-- -->
<!-- Revision 1.1.2.5  1994/08/12  14:53:41  zahn-->
<!-- 	{edt,5284,R1.1}-->
<!-- -->
<!-- 	Added rest of Mariko's corrections.-->
<!-- 	[1994/08/12  14:53:24  zahn]-->
<!-- -->
<!-- Revision 1.1.2.4  1994/07/28  18:30:18  zahn-->
<!-- 	{edt,5284,R1.1}-->
<!-- -->
<!-- 	Incorporated M. Romagna's review comments.-->
<!-- 	[1994/07/28  18:30:02  zahn]-->
<!-- -->
<!-- Revision 1.1.2.3  1994/06/13  17:04:05  devobj-->
<!-- 	cr10872 - fix copyright-->
<!-- 	[1994/06/13  16:48:05  devobj]-->
<!-- -->
<!-- Revision 1.1.2.2  1994/04/29  18:53:49  zahn-->
<!-- 	Removed pointer from binding param in synopsis.-->
<!-- 	[1994/04/29  18:53:32  zahn]-->
<!-- -->
<!-- Revision 1.1.2.1  1994/04/01  22:14:55  zahn-->
<!-- 	{enh,5284,R1.1}-->
<!-- -->
<!-- 	Add reference pages for character/code set interoperability-->
<!-- 	features for DCE 1.1.-->
<!-- 	[1994/04/01  22:14:32  zahn]-->
<!-- -->
<!-- .iX "\*Lrpc_cs_get_tags(\|)\*O"-->
<RefSect1 Remap="ANSI">
<Title>Synopsis</Title>
<FuncSynopsis>
<FuncSynopsisInfo>#include &lt;dce/codesets_stub.h></FuncSynopsisInfo>
<FuncDef><Function>void rpc_cs_get_tags</Function></FuncDef>
<ParamDef>rpc_binding_handle_t <Parameter>binding</Parameter></ParamDef>
<ParamDef>boolean32 <Parameter>server_side</Parameter></ParamDef>
<ParamDef>unsigned32 *<Parameter>sending_tag</Parameter></ParamDef>
<ParamDef>unsigned32 *<Parameter>desired_receiving_tag</Parameter></ParamDef>
<ParamDef>unsigned32 *<Parameter>receiving_tag</Parameter></ParamDef>
<ParamDef>error_status_t *<Parameter>status</Parameter></ParamDef>
</FuncSynopsis>
<?sml-break>
<?sml-need 1.5i>
</RefSect1>
<RefSect1>
<Title>Parameters</Title>
<RefSect2>
<Title>Input</Title>
<VariableList>
<VarListEntry>
<Term><Symbol Role="Variable">binding</Symbol></Term>
<ListItem>
<Para RevisionFlag="Changed">Specifies the target binding handle from which to obtain the
code set tag information.  When called from the client stub,
this value is the binding handle of a compatible server returned
by the <Function>rpc_ns_binding_import_next()</Function> or
<Function>rpc_ns_binding_select()</Function> routines.  
<?og-ChangeStart defect, 13630, 1.2.2, misc corrections from developer Mariko Romagna"><?og-ChangeEnd defect, 13630, 1.2.2, misc corrections from developer Mariko Romagna"></Para>
</ListItem>
</VarListEntry>
<VarListEntry>
<Term><Symbol Role="Variable">server_side</Symbol></Term>
<ListItem>
<Para>Indicates whether a client stub or a server stub is calling the routine.
</Para>
</ListItem>
</VarListEntry>
<VarListEntry role="linebreak">
<Term><Symbol Role="Variable">desired_receiving_tag</Symbol></Term>
<ListItem>
<Para>(Server stub only) Specifies the code set value for the code set in which
the client prefers data to be encoded when sent back from
the server.  The client stub passes this value in the RPC call.
If the routine is retrieving code set tags for an operation that does
not specify a desired receiving tag parameter (the <Literal>cs_drtag</Literal>
ACF parameter attribute has not been applied to one
of the operation's parameters), this value is NULL.
</Para>
</ListItem>
</VarListEntry>
</VariableList>
<?sml-break>
<?sml-need 8>
</RefSect2>
<RefSect2>
<Title>Output</Title>
<VariableList>
<VarListEntry>
<Term><Symbol Role="Variable">sending_tag</Symbol></Term>
<ListItem>
<Para>(Client stub only) Specifies the code set value
for the code set in which client data to
be sent to the server is to be encoded.
If the routine is retrieving code set tags for an
operation that does not specify a sending tag parameter
(the <Literal>cs_stag</Literal> ACF parameter attribute has not been
applied to one of the operation's parameters), this value is NULL.
</Para>
</ListItem>
</VarListEntry>
<VarListEntry role="linebreak">
<Term><Symbol Role="Variable">desired_receving_tag</Symbol></Term>
<ListItem>
<Para>(Client stub only) Specifies the code set value for
the code set in which the client prefers to receive data
sent back to it from the server.  If the routine is
retrieving code set tags for an operation that does
not specify a desired receiving tag parameter (the <Literal>cs_drtag</Literal>
ACF parameter attribute has not been applied to one
of the operation's parameters), this value is NULL.
</Para>
</ListItem>
</VarListEntry>
<VarListEntry role="linebreak">
<Term><Symbol Role="Variable">receiving_tag</Symbol></Term>
<ListItem>
<Para>(Server stub only) Specifies the code set value for
the code set in which the server is to encode data
to be sent back to the client.  If the routine is
retrieving code set tags for an operation that does
not specify a receiving tag parameter (the <Literal>cs_rtag</Literal>
ACF parameter attribute has not been applied to one
of the operation's parameters), this value is NULL.
</Para>
</ListItem>
</VarListEntry>
<VarListEntry>
<Term><Symbol Role="Variable">status</Symbol></Term>
<ListItem>
<Para>Returns the status code from this routine.  This status code
indicates whether the routine completed successfully or, if not, why not.
If code set compatibility evaluation is performed, error values can
also be returned from the following routines: 
<!--no-op:  l-->
</Para>
<ItemizedList>
<ListItem>
<Para><Function>rpc_rgy_get_codesets()</Function>
</Para>
</ListItem>
<ListItem>
<Para><Function>rpc_ns_binding_inq_entry_name()</Function>
</Para>
</ListItem>
<ListItem>
<Para><Function>rpc_ns_mgmt_read_codesets()</Function>.
</Para>
</ListItem>
</ItemizedList>
<!--no-op:  b-->
</ListItem>
</VarListEntry>
</VariableList>
<?sml-break>
<?sml-need 1.5i>
</RefSect2>
</RefSect1>
<RefSect1>
<Title>Description</Title>
<Para>The <Function>rpc_cs_get_tags()</Function> routine belongs to a set of
DCE RPC routines for use by client and server applications
that are transferring international character data in a
heterogeneous character set and code sets environment.
</Para>
<Para><?sml-need 8>The <Function>rpc_cs_get_tags()</Function> routine is a DCE RPC
routine that RPC stubs can use to retrieve the code
set values to be used to tag international character data
to be sent over the network.  In general, the code set values
to be used as tags are determined by a character and code sets
evaluation routine, which is invoked from the client application
code.  However, application programmers can use other methods to
establish values for code set tags.
</Para>
<Para>RPC stubs call the <Function>rpc_cs_get_tags()</Function> routine before
they call the buffer sizing routines <Symbol Role="Variable">*</Symbol><Literal>_net_size()</Literal>
and the code set conversion routines <Symbol Role="Variable">*</Symbol><Literal>_netcs()</Literal>.
The <Function>rpc_cs_get_tags()</Function> routine provides the stubs
with code set values to use as input to the buffer sizing
routines (to determine whether or not buffer storage needs
to be allocated for conversion) and as input to the code set
conversion routines (to determine whether conversion is
necessary, and if so, which host code set converter to invoke).
</Para>
<Para>Client and server stubs call the <Function>rpc_cs_get_tags()</Function> routine
before they marshall any data.  When called from the client stub,
the boolean value <Symbol Role="Variable">server_side</Symbol> is set to FALSE
to indicate that the client stub has invoked the routine.
The binding handle is the handle to a compatible server that is returned
by the routines <Function>rpc_ns_binding_import_next()</Function> or
<Function>rpc_ns_binding_select()</Function>.
If the client has added a code sets evaluation routine
to the binding import procedure (by calling the routine
<Function>rpc_ns_import_ctx_add_eval()</Function>), the binding
handle will contain the conversion method
and the code set values to set for the
client's sending tag and desired receiving tag.
If the binding handle does not contain the results
of an evaluation, the <Function>rpc_cs_get_tags()</Function> routine
will perform the character/code sets evaluation within the
client stub and set the client code set tag values itself.
</Para>
<Para>On the client side, the output of the routine is the
code set value that represents the client's sending tag
and the code set value that represents the client's desired
receiving tag.  If the conversion method is ``client makes it
right'' (CMIR), the sending tag and desired receiving tags will
be set to the code set value of the server's local code set.
If the conversion method is ``server makes it right'' (SMIR),
the sending tag and desired receiving tag will
be set to the client's local code set value.  If the conversion
method is ``receiver makes it right'' (RMIR), the sending
tag is the client's code set, and the desired receiving
tag is the server's code set.
</Para>
<Para RevisionFlag="Changed">When called from the server stub, the boolean
value <Symbol Role="Variable">server_side</Symbol> is set to TRUE
to indicate that the server stub has invoked the routine.
<?og-ChangeStart defect, 13630, 1.2.2, misc corrections from developer Mariko Romagna"><?og-ChangeEnd defect, 13630, 1.2.2, misc corrections from developer Mariko Romagna"></Para>
<Para>The server stub specifies the code set value given in
the client's desired receiving tag as input to the routine.
The <Function>rpc_cs_get_tags()</Function> routine
sets the code set value in <Symbol Role="Variable">desired_receiving_tag</Symbol> to
<Symbol Role="Variable">receiving_tag</Symbol> and returns
this value as output to the server stub.  The server stub will then
use the code set value in <Symbol Role="Variable">receiving_tag</Symbol> as the code set
to use for data it sends back to the client.
</Para>
<Para>Application programmers who want their applications to
use the <Function>rpc_cs_get_tags()</Function> routine to retrieve
code set tag information as part of the automatic code set
conversion process specify the routine name as the argument
to the ACF attribute <Literal>cs_tag_rtn</Literal> when developing their
internationalized RPC application.
</Para>
<Para RevisionFlag="Changed"><?og-ChangeStart defect, 13630, 1.2.2, misc corrections from developer Mariko Romagna">Application programmers can also write their own code set
tags retrieval routine that RPC stubs can call;
in this case, they specify the name of this routine as the
argument to the ACF attribute <Literal>cs_tag_rtn</Literal> instead of 
specifying the DCE RPC
routine <Function>rpc_cs_get_tags()</Function>.  Application programmers can
also use the automatic code conversion mechanism, but design their
applications so that the code set tags are set explicitly
in the application instead of in the stubs.
<?og-ChangeEnd defect, 13630, 1.2.2, misc corrections from developer Mariko Romagna"></Para>
<RefSect2>
<Title>Permissions Required</Title>
<Para>No permissions are required.
<?sml-break><?sml-need 1.5i></Para>
</RefSect2>
</RefSect1>
<RefSect1>
<Title>Return Values</Title>
<Para>No value is returned.
<?sml-break><?sml-need 1.5i></Para>
</RefSect1>
<RefSect1>
<Title>Errors</Title>
<Para>The following describes a partial list of errors that might be returned.
Refer to the &DCETg; for complete descriptions of all error
messages.
</Para>
<VariableList>
<VarListEntry>
<Term><Literal>rpc_s_ok</Literal></Term>
<ListItem>
<Para RevisionFlag="Changed">Success.
<?og-ChangeStart defect, 13630, 1.2.2, misc corrections from developer Mariko Romagna"><?og-ChangeEnd defect, 13630, 1.2.2, misc corrections from developer Mariko Romagna"></Para>
</ListItem>
</VarListEntry>
<VarListEntry role="linebreak">
<Term><Literal>rpc_s_ss_invalid_codeset_tag</Literal></Term>
<ListItem>
<Para>The result of the client-side evaluation used an invalid code set tag.
</Para>
</ListItem>
</VarListEntry>
</VariableList>
</RefSect1>
<RefSect1>
<Title>Related Information</Title>
<!--no-op:  l-->
<Para>Functions:
<Filename MoreInfo="RefEntry">cs_byte_from_netcs(3rpc)</Filename>,
<Filename MoreInfo="RefEntry">cs_byte_local_size(3rpc)</Filename>,
<Filename MoreInfo="RefEntry">cs_byte_net_size(3rpc)</Filename>,
<Filename MoreInfo="RefEntry">cs_byte_to_netcs(3rpc)</Filename>,
<Filename MoreInfo="RefEntry">wchar_t_from_netcs(3rpc)</Filename>,
<Filename MoreInfo="RefEntry">wchar_t_local_size(3rpc)</Filename>,
<Filename MoreInfo="RefEntry">wchar_t_net_size(3rpc)</Filename>,
<Filename MoreInfo="RefEntry">wchar_t_to_netcs(3rpc)</Filename>.
</Para>
<Para>Books:
&DCEDk;.
<!--no-op:  b-->
</Para>
</RefSect1>
<!--+ 11/27/96 19:46:25
    | tagMorph:  $Id: rpc_cs_get_tags.3rpc,v 1.1.2.8 1996/12/15 16:42:39 carrig Exp $
    | tagMorph library:  $Id: rpc_cs_get_tags.3rpc,v 1.1.2.8 1996/12/15 16:42:39 carrig Exp $
    | sml-to-docbook:  1.25
    +-->
</RefEntry>
