<!--
# @OSF_COPYRIGHT@
# 
# 
# HISTORY
# $Log: rpc_cs_binding_set_tags.3rpc,v $
# Revision 1.1.2.8  1996/12/15  16:42:35  carrig
# 	{enh,R1.2.2}
# 	Final edits
# 	[1996/12/15  16:11:31  carrig]
#
# Revision 1.1.2.7  1996/12/11  20:39:35  wardr
# 	{edit,R1.2.2}
# 	fixed parsing problems
# 	[1996/12/11  20:35:54  wardr]
# 
# Revision 1.1.2.6  1996/12/10  22:38:50  wardr
# 	{edit,R1.2.2}
# 	Fixing sgml
# 	[1996/12/10  22:35:00  wardr]
# 
# Revision 1.1.2.5  1996/12/09  22:23:27  wardr
# 	{edit,R1.2.2}
# 	Fixed conversion problems
# 	[1996/12/09  22:05:54  wardr]
# 
# Revision 1.1.2.4  1996/12/04  21:39:57  wardr
# 	{edit,R1.2.2}
# 	Fixed initial conversion problems
# 	[1996/12/04  21:35:46  wardr]
# 
# Revision 1.1.2.3  1996/12/02  21:00:14  carrig
# 	{enh,R1.2.2}
# 	VarListEntry
# 	[1996/12/02  20:56:26  carrig]
# 
# Revision 1.1.2.2  1996/12/01  19:22:23  weir
# 	Removed thinsp entities
# 	[1996/12/01  19:19:17  weir]
# 
# Revision 1.1.2.1  1996/11/29  17:14:57  weir
# 	Initial submission
# 	[1996/11/29  17:11:26  weir]
# 
# $EndLog$
-->
<!-- Fragment document type declaration subset:
ArborText, Inc., 1988-1993, v.4001
<!DOCTYPE Book PUBLIC "-//Davenport//DTD DocBook V2.4//EN" [
]>
-->
<RefEntry Id="DCEADR.MAN226.rsml.1">
<RefMeta>
<RefEntryTitle>rpc_cs_binding_set_tags</RefEntryTitle>
<ManVolNum>3rpc</ManVolNum>
</RefMeta>
<RefNameDiv>
<RefName><Literal>rpc_cs_binding_set_tags</Literal></RefName>
<RefPurpose>Places code set tags into a server binding handle;  used by client applications</RefPurpose>
</RefNameDiv>
<!-- COPYRIGHT NOTICE-->
<!-- Copyright (c) 1990, 1991, 1992, 1993, 1994 Open Software Foundation, Inc.-->
<!-- ALL RIGHTS RESERVED (DCE).  See the file named COPYRIGHT.DCE for-->
<!-- the full copyright text.-->
<!-- -->
<!-- -->
<!-- HISTORY-->
<!-- Revision 1.1.4.1  1996/11/18  19:56:43  wardr-->
<!-- 	{edit,R1.2.2}-->
<!-- 	Init capped heads and added PDG pointer-->
<!-- 	[1996/11/18  19:34:05  wardr]-->
<!---->
<!-- Revision 1.1.2.10  1995/06/21  13:20:20  buckler-->
<!-- 	More 1.1 edits.-->
<!-- 	[1995/06/20  19:42:03  buckler]-->
<!-- -->
<!-- Revision 1.1.2.9  1995/06/07  20:10:48  buckler-->
<!-- 	1.1 edits  Prentice Hall reformat-->
<!-- 	[1995/06/07  20:05:52  buckler]-->
<!-- -->
<!-- Revision 1.1.2.7  1994/10/18  19:19:35  zahn-->
<!-- 	{edt,5284,R1.1}-->
<!-- -->
<!-- 	Added technical review comments.-->
<!-- 	[1994/10/18  19:19:15  zahn]-->
<!-- -->
<!-- Revision 1.1.2.6  1994/10/05  11:54:43  zahn-->
<!-- 	{edt,5284,R1.1}-->
<!-- -->
<!-- 	Fixed a typo and added rpc_ns_binding_select().-->
<!-- 	[1994/10/05  11:54:27  zahn]-->
<!-- -->
<!-- Revision 1.1.2.5  1994/10/04  20:19:38  zahn-->
<!-- 	{edt,5284,R1.1}-->
<!-- -->
<!-- 	Add rpc_cs_eval_with_universal() back.-->
<!-- 	[1994/10/04  20:19:21  zahn]-->
<!-- -->
<!-- Revision 1.1.2.4  1994/08/18  20:09:34  zahn-->
<!-- 	{edt,5284,R1.1}-->
<!-- -->
<!-- 	Made doc changes due to functionality changes.-->
<!-- 	[1994/08/18  20:09:07  zahn]-->
<!-- -->
<!-- Revision 1.1.2.3  1994/06/13  17:03:55  devobj-->
<!-- 	cr10872 - fix copyright-->
<!-- 	[1994/06/13  16:47:45  devobj]-->
<!-- -->
<!-- Revision 1.1.2.2  1994/04/29  18:51:25  zahn-->
<!-- 	Removed pointer from binding handle in synopsis.-->
<!-- 	[1994/04/29  18:51:09  zahn]-->
<!-- -->
<!-- Revision 1.1.2.1  1994/04/13  22:22:49  zahn-->
<!-- 	{enh,5284,R1.1}-->
<!-- -->
<!-- 	Add documentation for character/code set interoperability functions.-->
<!-- 	[1994/04/13  22:22:09  zahn]-->
<!-- -->
<!-- .iX "\*Lrpc_cs_binding_set_tags(\|)\*O"-->
<RefSect1 Remap="ANSI">
<Title>Synopsis</Title>
<FuncSynopsis>
<FuncSynopsisInfo>#include &lt;dce/rpc.h></FuncSynopsisInfo>
<FuncDef><Function>void rpc_cs_binding_set_tags</Function></FuncDef>
<ParamDef>rpc_binding_handle_t *<Parameter>binding</Parameter></ParamDef>
<ParamDef>unsigned32 <Parameter>sending_tag</Parameter></ParamDef>
<ParamDef>unsigned32 <Parameter>desired_receiving_tag</Parameter></ParamDef>
<ParamDef>unsigned16 <Parameter>sending_tag_max_bytes</Parameter></ParamDef>
<ParamDef>error_status_t *<Parameter>status</Parameter></ParamDef>
</FuncSynopsis>
<?sml-break>
<?sml-need 1.5i>
</RefSect1>
<RefSect1>
<Title>Parameters</Title>
<RefSect2>
<Title>Input/Output</Title>
<VariableList>
<VarListEntry>
<Term><Symbol Role="Variable">binding</Symbol></Term>
<ListItem>
<Para>On input, specifies the server binding handle to modify with tag information.
This handle is the binding handle returned by the
<Function>rpc_ns_binding_import_next()</Function> or <Function>rpc_ns_binding_select()</Function>
routine.
On output, returns the server binding handle modified with code set
tag information.  The server stub retrieves the tag information
from the binding handle and uses it to invoke the appropriate
buffer sizing and code set conversion routines.
</Para>
</ListItem>
</VarListEntry>
</VariableList>
</RefSect2>
<RefSect2>
<Title>Input</Title>
<VariableList>
<VarListEntry>
<Term><Symbol Role="Variable">sending_tag</Symbol></Term>
<ListItem>
<Para>Specifies the code set value for the code set in which client data to
be sent to the server is to be encoded.  If the client
is not sending any data, set this value to the client's current code set.
This step prevents the code set conversion routine from being invoked.
</Para>
</ListItem>
</VarListEntry>
<VarListEntry role="linebreak">
<Term><Symbol Role="Variable">desired_receiving_tag</Symbol></Term>
<ListItem>
<Para>Specifies the code set value for the code set in which the
client prefers data to be encoded when sent back from the server.
If the client is not planning to receive any data from the server,
set this value to the server's current code set.
This step prevents the code set conversion routine from being invoked.
<?sml-break><?sml-need 6></Para>
</ListItem>
</VarListEntry>
<VarListEntry role="linebreak">
<Term><Symbol Role="Variable">sending_tag_max_bytes</Symbol></Term>
<ListItem>
<Para>Specifies the maximum number of bytes that a code set
requires to encode one character.  The value is the <Symbol Role="Variable">c_max_bytes</Symbol>
value associated with the code set value (<Symbol Role="Variable">c_set</Symbol>) used
as the <Symbol Role="Variable">sending_tag</Symbol> value.
</Para>
</ListItem>
</VarListEntry>
</VariableList>
</RefSect2>
<RefSect2>
<Title>Output</Title>
<VariableList>
<VarListEntry>
<Term><Symbol Role="Variable">status</Symbol></Term>
<ListItem>
<Para>Returns the status code from this routine.  This status code
indicates whether the routine completed successfully or, if not, why not.
The routine can also return status codes generated by
the <Function>rpc_rgy_get_codesets()</Function> routine.
</Para>
</ListItem>
</VarListEntry>
</VariableList>
<?sml-break>
<?sml-need 1.5i>
</RefSect2>
</RefSect1>
<RefSect1>
<Title>Description</Title>
<Para>The <Function>rpc_cs_binding_set_tags()</Function> routine belongs to a set of
DCE RPC routines for use by client and server applications
that are transferring international character data in a
heterogeneous character set and code sets environment.
These routines are used to enable automatic code set
conversion between client and server for character
representations that are not part of the DCE portable character set.
</Para>
<Para>Client applications use the <Function>rpc_cs_binding_set_tags()</Function> routine
to add code sets tag information to the binding handle of a compatible
server.  The tag information specified in the routine is usually obtained
from a character and code sets evaluation routine (which is typically
a user-written routine).
</Para>
<Para>The <Symbol Role="Variable">sending_tag</Symbol> value identifies the code set encoding
that the client is using to send international character data to the server.
The <Symbol Role="Variable">desired_receiving_tag</Symbol> value indicates to the server the code set
that the client prefers the server to use when sending return international
character data.  The <Symbol Role="Variable">sending_tag_max_bytes</Symbol> value is the number
of bytes the sending code set uses to encode one character.
</Para>
<Para>Client applications that use the
<Function>rpc_cs_eval_with_universal()</Function>
or <Function>rpc_cs_eval_without_universal()</Function> routines
do not need to call this routine because these routines
set tag information in the server binding handle as part
of their operation.  Application developers who are writing
their own character and code sets evaluation routines need to include
code that sets tags in a server binding handle. 
</Para>
<Para><?sml-need 7>The <Function>rpc_cs_binding_set_tags()</Function> routine provides this
function and can be used in user-written evaluation routines,
or alone if the application does not need to perform evaluation.
In this case, the routine provides a short cut for application
programmers whose applications do not need to evaluate for
character and code set compatibility.
</Para>
<RefSect2>
<Title>Permissions Required</Title>
<Para>No permissions are required.
<?sml-break><?sml-need 1.5i></Para>
</RefSect2>
</RefSect1>
<RefSect1>
<Title>Return Values</Title>
<Para>No value is returned.
<?sml-break><?sml-need 1.5i></Para>
</RefSect1>
<RefSect1>
<Title>Errors</Title>
<Para>The following describes a partial list of errors that might be returned.
Refer to the &DCETg; for complete descriptions of all error
messages.
</Para>
<VariableList>
<VarListEntry>
<Term><Literal>rpc_s_ok</Literal></Term>
<ListItem>
<Para></Para>
</ListItem>
</VarListEntry>
<VarListEntry role="linebreak">
<Term><Literal>rpc_s_no_memory</Literal></Term>
<ListItem>
<Para></Para>
</ListItem>
</VarListEntry>
</VariableList>
</RefSect1>
<RefSect1>
<Title>Related Information</Title>
<Para><!--no-op:  l-->
Functions:
<Filename MoreInfo="RefEntry">rpc_cs_eval_with_universal(3rpc)</Filename>,
<Filename MoreInfo="RefEntry">rpc_cs_eval_without_universal(3rpc)</Filename>,
<Filename MoreInfo="RefEntry">rpc_cs_get_tags(3rpc)</Filename>.
<!--no-op:  b-->
</Para>
</RefSect1>
<!--+ 11/27/96 19:46:25
    | tagMorph:  $Id: rpc_cs_binding_set_tags.3rpc,v 1.1.2.8 1996/12/15 16:42:35 carrig Exp $
    | tagMorph library:  $Id: rpc_cs_binding_set_tags.3rpc,v 1.1.2.8 1996/12/15 16:42:35 carrig Exp $
    | sml-to-docbook:  1.25
    +-->
</RefEntry>
