<!--
# @OSF_COPYRIGHT@
# 
# 
# HISTORY
# $Log: rpc_binding_server_from_client.3rpc,v $
# Revision 1.1.2.8  1996/12/15  16:22:36  carrig
# 	{enh,R1.2.2}
# 	Final edits
# 	[1996/12/15  16:11:24  carrig]
#
# Revision 1.1.2.7  1996/12/11  20:39:29  wardr
# 	{edit,R1.2.2}
# 	fixed parsing problems
# 	[1996/12/11  20:35:48  wardr]
# 
# Revision 1.1.2.6  1996/12/10  22:38:44  wardr
# 	{edit,R1.2.2}
# 	Fixing sgml
# 	[1996/12/10  22:34:54  wardr]
# 
# Revision 1.1.2.5  1996/12/09  22:23:19  wardr
# 	{edit,R1.2.2}
# 	Fixed conversion problems
# 	[1996/12/09  22:05:49  wardr]
# 
# Revision 1.1.2.4  1996/12/04  21:39:52  wardr
# 	{edit,R1.2.2}
# 	Fixed initial conversion problems
# 	[1996/12/04  21:35:41  wardr]
# 
# Revision 1.1.2.3  1996/12/02  21:00:09  carrig
# 	{enh,R1.2.2}
# 	VarListEntry
# 	[1996/12/02  20:56:20  carrig]
# 
# Revision 1.1.2.2  1996/12/01  19:22:19  weir
# 	Removed thinsp entities
# 	[1996/12/01  19:19:12  weir]
# 
# Revision 1.1.2.1  1996/11/29  17:14:50  weir
# 	Initial submission
# 	[1996/11/29  17:11:22  weir]
# 
# $EndLog$
-->
<!-- Fragment document type declaration subset:
ArborText, Inc., 1988-1993, v.4001
<!DOCTYPE Book PUBLIC "-//Davenport//DTD DocBook V2.4//EN" [
]>
-->
<RefEntry Id="DCEADR.MAN221.rsml.1">
<RefMeta>
<RefEntryTitle>rpc_binding_server_from_client</RefEntryTitle>
<ManVolNum>3rpc</ManVolNum>
</RefMeta>
<RefNameDiv>
<RefName><Literal>rpc_binding_server_from_client</Literal></RefName>
<RefPurpose>Converts a client binding handle
to a server binding handle;  used by server applications</RefPurpose>
</RefNameDiv>
<!---->
<!--  COPYRIGHT NOTICE-->
<!--  Copyright (c) 1990, 1991, 1992, 1993 Open Software Foundation, Inc.-->
<!--  ALL RIGHTS RESERVED (DCE).  See the file named COPYRIGHT.DCE in the-->
<!--  src directory for the full copyright text.-->
<!---->
<!---->
<!-- OLD HISTORY-->
<!-- Revision 1.1.8.1  1996/11/18  19:56:32  wardr-->
<!-- 	{edit,R1.2.2}-->
<!-- 	Init capped heads and added PDG pointer-->
<!-- 	[1996/11/18  19:33:59  wardr]-->
<!---->
<!-- Revision 1.1.6.10  1995/06/21  13:20:17  buckler-->
<!-- 	More 1.1 edits.-->
<!-- 	[1995/06/20  19:37:56  buckler]-->
<!-- -->
<!-- Revision 1.1.6.9  1995/06/07  20:10:43  buckler-->
<!-- 	1.1 edits  Prentice Hall reformat-->
<!-- 	[1995/06/07  20:05:47  buckler]-->
<!-- -->
<!-- Revision 1.1.6.7  1994/11/03  23:45:25  neilson-->
<!-- 	Substituted macros for book names in cross refs.-->
<!-- 	[1994/11/03  01:39:28  neilson]-->
<!-- -->
<!-- Revision 1.1.6.6  1994/07/14  19:04:20  jshirley-->
<!-- 	(def,10220,R1.1}-->
<!-- 	Remove references to rpcd and sec_clientd.-->
<!-- 	[1994/07/14  18:43:36  jshirley]-->
<!-- -->
<!-- Revision 1.1.6.5  1993/01/26  17:50:00  cjd-->
<!-- 	Embedded copyright notice-->
<!-- 	[1993/01/26  17:18:21  cjd]-->
<!-- -->
<!-- Revision 1.1.6.4  1992/11/30  20:04:52  mcdonald-->
<!-- 	Changes made:          Replace incorrect .z{A,Z} change mark indicators-->
<!-- 	File name:             /src/app_ref/man3rpc/rpc_binding_server_from_client.3rpc-->
<!-- 	Change Request Number: 6141 (Second change for this number)-->
<!-- 	[1992/11/30  19:57:49  mcdonald]-->
<!-- -->
<!-- Revision 1.1.6.3  1992/11/18  20:37:33  mcdonald-->
<!-- 	Changes made:           Add two status codes-->
<!-- 	File name:              src/app_ref/man3rpc/rpc_binding_server_from_client.3rpc-->
<!-- 	Change Request Number:  6141-->
<!-- 	[1992/11/18  20:30:32  mcdonald]-->
<!-- -->
<!-- Revision 1.1.6.2  1992/10/01  20:43:25  weir-->
<!-- 	Removed change bars; moved into 1.0.2doc tree-->
<!-- 	[1992/10/01  19:54:20  weir]-->
<!-- -->
<!-- 	For P/H, now and forever!-->
<!-- 	[1992/09/16  14:42:52  oaf]-->
<!-- -->
<!-- Revision 1.1.4.3  1992/09/16  18:27:48  oaf-->
<!-- 	*** empty log message ***-->
<!-- -->
<!-- Revision 1.1.4.2  1992/08/14  17:43:00  oaf-->
<!-- 	2nd edits, PURPOSE fix, .ad l on related functions (& restore)-->
<!-- 	[1992/08/14  16:45:27  oaf]-->
<!-- -->
<!-- Revision 1.1.2.3  1992/06/29  19:37:11  mcdonald-->
<!-- 	Changes made:          Added "the" before "original server/client"-->
<!-- 	File name:             src/app_ref/man3rpc/rpc_binding_server_from_client.3rpc-->
<!-- 	Change Request Number: 2984-->
<!-- 	[1992/06/29  19:33:15  mcdonald]-->
<!-- -->
<!-- Revision 1.1.2.2  1992/05/15  18:39:10  buckler-->
<!-- 	Editorial review-->
<!-- 	[1992/05/15  18:37:08  buckler]-->
<!-- -->
<!-- Revision 1.1  1992/01/29  15:35:43  damon-->
<!-- 	Initial revision-->
<!-- -->
<!---->
<!-- (c) Copyright 1991, Open Software Foundation, Inc.  ALL RIGHTS RESERVED-->
<!--   HISTORY COMMENTS:-->
<!---->
<!--   DATE:                            COMMENT:-->
<!---->
<!--	Mon Nov 11, 1991                 Initial file submission to HP-->
<!--                                    for final integration at IBM.-->
<!--                                   -->
<!---->
<!-- ********************************************************************-->
<!-- Copyright (c) 1991 Hewlett-Packard Co. and Digital Equipment Corp. *-->
<!-- All rights reserved.                                               *-->
<!-- ********************************************************************-->
<!-- .iX "\*Lrpc_binding_server_from_client(\|)\*O"-->
<RefSect1 Remap="ANSI">
<Title>Synopsis</Title>
<FuncSynopsis>
<FuncSynopsisInfo>#include &lt;dce/rpc.h></FuncSynopsisInfo>
<FuncDef><Function>void rpc_binding_server_from_client</Function></FuncDef>
<ParamDef>rpc_binding_handle_t <Parameter>client_binding</Parameter></ParamDef>
<ParamDef>rpc_binding_handle_t *<Parameter>server_binding</Parameter></ParamDef>
<ParamDef>unsigned32 *<Parameter>status</Parameter></ParamDef>
</FuncSynopsis>
<?sml-break>
<?sml-need 1.5i>
</RefSect1>
<RefSect1>
<Title>Parameters</Title>
<RefSect2>
<Title>Input</Title>
<VariableList>
<VarListEntry role="linebreak">
<Term><Symbol Role="Variable">client_binding</Symbol></Term>
<ListItem>
<Para>Specifies the client binding handle to convert to a server binding handle.
</Para>
</ListItem>
</VarListEntry>
</VariableList>
</RefSect2>
<RefSect2>
<Title>Output</Title>
<VariableList>
<VarListEntry role="linebreak">
<Term><Symbol Role="Variable">server_binding</Symbol></Term>
<ListItem>
<Para>Returns a server binding handle.
</Para>
</ListItem>
</VarListEntry>
<VarListEntry>
<Term><Symbol Role="Variable">status</Symbol></Term>
<ListItem>
<Para>Returns the status code from this routine.  This status code
indicates whether the routine completed successfully or, if not, why not.
</Para>
</ListItem>
</VarListEntry>
</VariableList>
<?sml-break>
<?sml-need 1.5i>
</RefSect2>
</RefSect1>
<RefSect1>
<Title>Description</Title>
<Para>When a remote procedure call arrives at a server, the RPC runtime
creates a client binding handle to refer to information about the calling
client (client binding information).
The RPC runtime passes the client binding handle to the
called remote procedure as the first input argument (which uses the <StructName Role="typedef">handle_t</StructName> type).
</Para>
<Para>The <Function>rpc_binding_server_from_client()</Function> routine converts client binding
information into server binding information corresponding to the client's
system.
When calling this routine, the called remote procedure specifies the client
binding handle, and the routine returns a partially bound server binding handle
(that is, the newly constructed server binding information contains a network
address for the client's system, but lacks an endpoint).
</Para>
<Para><?sml-need 5>The server binding information also lacks authentication information, but the
called procedure can add it
by calling <Function>rpc_binding_set_auth_info()</Function>.
The object UUID from the client binding information remains.
</Para>
<Para>The <Function>rpc_binding_server_from_client()</Function> routine is relevant when
a called remote procedure (the first remote procedure) needs to make its own
remote procedure call (a nested procedure call) to a second remote
procedure offered by a server on the system of the client that called the first
remote procedure (that is, the original client).
The partially bound server binding handle returned by the
<Function>rpc_binding_server_from_client()</Function> routine ensures that a nested call
requests the second remote procedure on the original client's system.
</Para>
<Para>In a multithreaded RPC
application, the second remote procedure can belong to a server that shares the
original client's address space (that is, the server and client can operate
jointly as a server/client instance).  If the original client belongs to a
server/client instance and the application requires the nested call to execute
in that instance, the application must guarantee that the nested remote
procedure call uses one of the instances' endpoints.
</Para>
<Para>An application can provide this
guarantee by meeting any of the following conditions:
</Para>
<ItemizedList>
<ListItem>
<Para>The interface possesses its own well-known endpoints, and
the server elects to use these interface-specific endpoints
(by calling the routine <Function>rpc_server_use_protseq_if()</Function>
or <Function>rpc_server_use_all_protseqs_if()</Function>).
</Para>
</ListItem>
<ListItem>
<Para>The server uses server-specific endpoints, and
the interface is offered by only one server/client instance per system.
</Para>
<Para>To use server-specific endpoints, a server either requests dynamic endpoints
(by calling <Function>rpc_server_use_protseq()</Function> or
<Function>rpc_server_use_all_protseqs()</Function>)
or specifies its own well-known endpoints
(by calling the routine <Function>rpc_server_use_protseq_ep()</Function>).
The server must also register its server-specific endpoints in the local
endpoint map (by calling <Function>rpc_ep_register()</Function>).
</Para>
</ListItem>
<ListItem>
<Para>The original client sets an object UUID
into the server binding information of the first call
(by calling <Function>rpc_binding_set_object()</Function>);
the object UUID identifies the server/client instance.
</Para>
<Para>The client can obtain the object UUID from the list of object UUIDs used to
register the endpoints of the server/client instance.  The client must
select an object UUID that belongs exclusively to its instance.
</Para>
<Para><?sml-need 7>Server binding information containing an object UUID
impacts the selection of a manager for a remote procedure call;
see the &DCEDk; 
for a description of manager selection.
The object UUID can either identify a particular resource offered by the
companion server or, used as an instance UUID,
the object UUID can identify the original client's server/client instance.
</Para>
<Para>The object UUID is passed in the first remote procedure call as part of the
client binding information and is retained in the server binding
information.  This server binding information is newly constructed
by the <Function>rpc_binding_server_from_client()</Function> routine.
When the second remote procedure call arrives at
the original client's system, the DCE host daemon uses the object UUID to
look for associated endpoints in the local endpoint map.
To ensure that the object UUID is associated with the endpoints
of the original server/client instance,
the server must complete the following steps:
</Para>
<OrderedList>
<ListItem>
<Para>Obtain the UUID
(for example, by calling <Function>uuid_create()</Function>).
</Para>
</ListItem>
<ListItem>
<Para>Specify the UUID as part of registering endpoints for the interface
of the second remote procedure
(by calling <Function>rpc_ep_register()</Function>
or <Function>rpc_ep_register_no_replace()</Function>).
<!-- .AL (numbered) list-->
</Para>
<Para>If the second remote procedure call will be routed to a manager of a
nonnil type, then the server must also do the following:
</Para>
<ItemizedList>
<ListItem>
<Para>Specify the type for the manager that implements that interface (by calling
<Function>rpc_server_register_if()</Function>).
</Para>
</ListItem>
<ListItem>
<Para>Set the object UUID to the same type as the manager
(by calling <Function>rpc_object_set_type()</Function>).
</Para>
</ListItem>
</ItemizedList>
</ListItem>
</OrderedList>
<!-- .AL (numbered) list-->
</ListItem>
<ListItem>
<Para>The first remote procedure call contains a distinct call argument used by the
original client to pass server information that identifies its server/client
instance.
</Para>
<Para><?sml-need 1.5i>The first remote procedure call uses this information to route
the second remote procedure call to the original server/client instance.
For example, server information can be as follows:
<!--no-op:  l-->
</Para>
<ItemizedList>
<ListItem>
<Para>A fully bound string binding that identifies the client's
server/client instance.
</Para>
<Para><?sml-need 7>If the first remote procedure receives this string binding, calling the
<Literal>rpc_binding_server_from_client</Literal> routine is unnecessary.
Instead, the first remote procedure requests a server binding handle
for the string binding (by calling
<Function>rpc_binding_from_string_binding()</Function>).
</Para>
</ListItem>
<ListItem>
<Para>An object UUID that is associated in the endpoint map with one or more
endpoints of the original server/client instance.
</Para>
<Para>The client can obtain the object UUID from the list of object UUIDs used
to register the endpoints of the server/client instance.
The client must select an object UUID that belongs exclusively to its instance,
and pass that UUID as a call argument.
</Para>
<Para>After calling
the <Function>rpc_binding_server_from_client()</Function> routine,
add the object UUID from the call argument to the newly constructed
server binding information (by calling <Function>rpc_binding_set_object()</Function>).
</Para>
</ListItem>
</ItemizedList>
<!-- inner list-->
</ListItem>
</ItemizedList>
<!-- outer bulleted list-->
<?sml-break>
<?sml-need 1.5i>
</RefSect1>
<RefSect1>
<Title>Return Values</Title>
<Para>No value is returned.
<?sml-break><?sml-need 1.2i></Para>
</RefSect1>
<RefSect1>
<Title>Errors</Title>
<Para>The following describes a partial list of errors that might be returned.
Refer to the &DCETg; for complete descriptions of all error
messages.
</Para>
<VariableList>
<VarListEntry>
<Term><Literal>rpc_s_ok</Literal></Term>
<ListItem>
<Para>Success.
</Para>
</ListItem>
</VarListEntry>
<VarListEntry role="linebreak">
<Term><Literal>rpc_s_cant_getpeername</Literal></Term>
<ListItem>
<Para>Cannot get peer name.
</Para>
</ListItem>
</VarListEntry>
<VarListEntry role="linebreak">
<Term><Literal>rpc_s_connection_closed</Literal></Term>
<ListItem>
<Para>Connection closed.
</Para>
</ListItem>
</VarListEntry>
<VarListEntry role="linebreak">
<Term><Literal>rpc_s_invalid_binding</Literal></Term>
<ListItem>
<Para>Invalid binding handle.
</Para>
</ListItem>
</VarListEntry>
<VarListEntry role="linebreak">
<Term><Literal>rpc_s_wrong_kind_of_binding</Literal></Term>
<ListItem>
<Para>Wrong kind of binding.
</Para>
</ListItem>
</VarListEntry>
</VariableList>
</RefSect1>
<RefSect1>
<Title>Related Information</Title>
<Para><!--no-op:  l-->
Functions:
<Filename MoreInfo="RefEntry">rpc_binding_free(3rpc)</Filename>,
<Filename MoreInfo="RefEntry">rpc_binding_set_object(3rpc)</Filename>,
<Filename MoreInfo="RefEntry">rpc_ep_register(3rpc)</Filename>,
<Filename MoreInfo="RefEntry">rpc_ep_register_no_replace(3rpc)</Filename>.
</Para>
<Para>Books:
&DCEDk;.
<!--no-op:  b-->
</Para>
</RefSect1>
<!--+ 11/27/96 19:46:25
    | tagMorph:  $Id: rpc_binding_server_from_client.3rpc,v 1.1.2.8 1996/12/15 16:22:36 carrig Exp $
    | tagMorph library:  $Id: rpc_binding_server_from_client.3rpc,v 1.1.2.8 1996/12/15 16:22:36 carrig Exp $
    | sml-to-docbook:  1.25
    +-->
</RefEntry>
