<!--
# @OSF_COPYRIGHT@
# 
# 
# HISTORY
# $Log: rpc_sm_get_thread_handle.3rpc,v $
# Revision 1.1.2.7  1996/12/11  20:41:35  wardr
# 	{edit,R1.2.2}
# 	fixed parsing problems
# 	[1996/12/11  20:37:38  wardr]
#
# Revision 1.1.2.6  1996/12/10  22:40:52  wardr
# 	{edit,R1.2.2}
# 	Fixing sgml
# 	[1996/12/10  22:36:48  wardr]
# 
# Revision 1.1.2.5  1996/12/09  22:25:36  wardr
# 	{edit,R1.2.2}
# 	Fixed conversion problems
# 	[1996/12/09  22:07:50  wardr]
# 
# Revision 1.1.2.4  1996/12/04  21:41:59  wardr
# 	{edit,R1.2.2}
# 	Fixed initial conversion problems
# 	[1996/12/04  21:37:37  wardr]
# 
# Revision 1.1.2.3  1996/12/02  21:01:54  carrig
# 	{enh,R1.2.2}
# 	VarListEntry
# 	[1996/12/02  20:58:35  carrig]
# 
# Revision 1.1.2.2  1996/12/01  19:23:43  weir
# 	Removed thinsp entities
# 	[1996/12/01  19:20:50  weir]
# 
# Revision 1.1.2.1  1996/11/29  17:17:28  weir
# 	Initial submission
# 	[1996/11/29  17:12:53  weir]
# 
# $EndLog$
-->
<!-- Fragment document type declaration subset:
ArborText, Inc., 1988-1993, v.4001
<!DOCTYPE Book PUBLIC "-//Davenport//DTD DocBook V2.4//EN" [
]>
-->
<RefEntry Id="DCEADR.MAN318.rsml.1">
<RefMeta>
<RefEntryTitle>rpc_sm_get_thread_handle</RefEntryTitle>
<ManVolNum>3rpc</ManVolNum>
</RefMeta>
<RefNameDiv>
<RefName><Literal>rpc_sm_get_thread_handle</Literal></RefName>
<RefPurpose>Gets a thread handle for the stub
memory management environment</RefPurpose>
</RefNameDiv>
<!-- COPYRIGHT NOTICE-->
<!-- Copyright (c) 1990, 1991, 1992, 1993 Open Software Foundation, Inc.-->
<!-- ALL RIGHTS RESERVED (DCE).  See the file named COPYRIGHT.DCE in the-->
<!-- src directory for the full copyright text.-->
<!-- -->
<!-- OLD HISTORY-->
<!-- Revision 1.1.6.2  1996/11/18  19:59:52  wardr-->
<!-- 	{edit,R1.2.2}-->
<!-- 	Init capped heads and added PDG pointer-->
<!-- 	[1996/11/18  19:35:40  wardr]-->
<!---->
<!-- Revision 1.1.6.1  1996/05/13  18:07:25  wardr-->
<!-- 	{enh,R1.2.2}-->
<!-- 	Removed changebars-->
<!-- 	[1996/05/13  18:03:56  wardr]-->
<!-- -->
<!-- Revision 1.1.4.1  1996/03/12  16:57:55  weir-->
<!-- 	CR 12748: corrected rpc_ss_thread_handle_t type typo-->
<!-- 	[1996/03/12  16:57:10  weir]-->
<!-- -->
<!-- Revision 1.1.2.5  1995/06/07  20:12:21  buckler-->
<!-- 	1.1 edits  Prentice Hall reformat-->
<!-- 	[1995/06/07  20:07:44  buckler]-->
<!-- -->
<!-- Revision 1.1.2.3  1993/02/25  16:34:15  cjd-->
<!-- 	Embedded copyright notice-->
<!-- 	[1993/02/25  16:28:16  cjd]-->
<!-- -->
<!-- Revision 1.1.2.2  1993/02/10  16:54:09  hodgman-->
<!-- 	File Name: app_ref/man3rpc/rpc_sm_get_thread_handle.3rpc-->
<!-- 	Change Request Number: 7157-->
<!-- 	Changes Made: Added new RPC API routine reference page-->
<!-- 	[1993/02/10  15:40:19  hodgman]-->
<!-- -->
<!-- 	File Name: app_ref/man3rpc/rpc_sm_get_thread_handle.3rpc-->
<!-- 	Change Request Number: 7157-->
<!-- 	Changes Made: Added new RPC API routine reference page-->
<!-- 	[1993/02/09  17:50:20  hodgman]-->
<!-- -->
<!---->
<!---->
<!--   HISTORY COMMENTS:-->
<!---->
<!--   DATE:                   COMMENT:-->
<!---->
<!--   7/20/92			Original derived from DCE Prog.  Ref src.-->
<!--     -->
<!--     -->
<!---->
<!-- ********************************************************************-->
<!-- Copyright (c) 1991 Hewlett-Packard Co. and Digital Equipment Corp. *-->
<!-- All rights reserved.                                               *-->
<!-- ********************************************************************-->
<RefSect1 Remap="ANSI">
<Title>Synopsis</Title>
<FuncSynopsis>
<FuncSynopsisInfo>#include &lt;rpc.h></FuncSynopsisInfo>
<FuncDef><Function>rpc_ss_thread_handle_t rpc_sm_get_thread_handle</Function></FuncDef>
<ParamDef>unsigned32 *<Parameter>status</Parameter></ParamDef>
</FuncSynopsis>
<IndexTerm Id="DCEADR.MAN318.indx.1">
<Primary>memory</Primary>
<Secondary>management</Secondary>
</IndexTerm>
<IndexTerm Id="DCEADR.MAN318.indx.2">
<Primary>server threads</Primary>
<Secondary>memory management</Secondary>
</IndexTerm>
<IndexTerm Id="DCEADR.MAN318.indx.3">
<Primary>memory</Primary>
<Secondary><Literal>rpc_sm_get_thread_handle</Literal> routine</Secondary>
</IndexTerm>
<IndexTerm Id="DCEADR.MAN318.indx.4">
<Primary><Literal>rpc_sm_get_thread_handle</Literal> routine</Primary>
</IndexTerm>
<IndexTerm Id="DCEADR.MAN318.indx.5">
<Primary>threads</Primary>
<Secondary>memory management</Secondary>
</IndexTerm>
</RefSect1>
<RefSect1>
<Title>Parameters</Title>
<RefSect2>
<Title>Output</Title>
<VariableList>
<VarListEntry>
<Term><Symbol Role="Variable">status</Symbol></Term>
<ListItem>
<Para>Returns the status code from this routine.  This status code
indicates whether the routine completed successfully or, if not, why not.
</Para>
</ListItem>
</VarListEntry>
</VariableList>
</RefSect2>
</RefSect1>
<RefSect1>
<Title>Description</Title>
<Para>Applications call <Function>rpc_sm_get_thread_handle()</Function> to get a thread
handle for the current stub memory management environment.    
A thread that is managing memory within the stub memory
managment scheme calls pc_sm_get_thread_handle() to get a
thread handle for its current stub memory management environment.
A thread that calls <Function>rpc_sm_set_thread_handle()</Function> with this handle,
is able to use the same memory management environment.
</Para>
<Para>When multiple threads call <Function>rpc_sm_allocate()</Function> and <Function>rpc_sm_free()</Function>
to manage the same memory, they must share the same thread handle.
The thread that established the stub memory management environment
calls <Function>rpc_sm_get_thread_handle()</Function> to get a thread handle before
spawning new threads that will manage the same memory.  The spawned
threads then call <Function>rpc_sm_set_thread_handle()</Function> with the handle
provided by the parent thread.
</Para>
<Note>
<Para>Typically, <Function>rpc_sm_get_thread_handle()</Function> is called by a server
manager routine before it spawns additional threads.  Normally the
stub sets up the memory management environment for the manager
routine.  The manager calls <Function>rpc_sm_get_thread_handle()</Function> to make
this environment available to the spawned threads.
</Para>
<Para>A thread may also use <Function>rpc_sm_get_thread_handle()</Function> and
<Function>rpc_sm_set_thread_handle()</Function> to save and restore its memory
management environment.
</Para>
</Note>
</RefSect1>
<RefSect1>
<Title>Return Values</Title>
<Para>A thread handle.
</Para>
</RefSect1>
<RefSect1>
<Title>Errors</Title>
<Para>The following describes a partial list of errors that might be returned.
Refer to the &DCETg; for complete descriptions of all error
messages.
</Para>
<VariableList>
<VarListEntry>
<Term><Literal>rpc_s_ok</Literal></Term>
<ListItem>
<Para>Success.
</Para>
</ListItem>
</VarListEntry>
</VariableList>
</RefSect1>
<RefSect1>
<Title>Related Information</Title>
<!--no-op:  l-->
<Para>Functions: <Filename MoreInfo="RefEntry">rpc_sm_allocate(3rpc)</Filename>, 
<Filename MoreInfo="RefEntry">rpc_sm_free(3rpc)</Filename>, 
<Filename MoreInfo="RefEntry">rpc_sm_set_thread_handle(3rpc</Filename>.
<!--no-op:  b-->
</Para>
</RefSect1>
<!--+ 11/27/96 19:46:25
    | tagMorph:  $Id: rpc_sm_get_thread_handle.3rpc,v 1.1.2.7 1996/12/11 20:41:35 wardr Exp $
    | tagMorph library:  $Id: rpc_sm_get_thread_handle.3rpc,v 1.1.2.7 1996/12/11 20:41:35 wardr Exp $
    | sml-to-docbook:  1.25
    +-->
</RefEntry>
