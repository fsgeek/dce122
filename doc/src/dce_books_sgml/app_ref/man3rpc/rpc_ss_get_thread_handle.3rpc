<!--
# @OSF_COPYRIGHT@
# 
# 
# HISTORY
# $Log: rpc_ss_get_thread_handle.3rpc,v $
# Revision 1.1.2.8  1996/12/15  16:29:33  carrig
# 	{enh,R1.2.2}
# 	Final edits
# 	[1996/12/15  16:14:33  carrig]
#
# Revision 1.1.2.7  1996/12/11  20:41:47  wardr
# 	{edit,R1.2.2}
# 	fixed parsing problems
# 	[1996/12/11  20:37:50  wardr]
# 
# Revision 1.1.2.6  1996/12/10  22:41:03  wardr
# 	{edit,R1.2.2}
# 	Fixing sgml
# 	[1996/12/10  22:37:00  wardr]
# 
# Revision 1.1.2.5  1996/12/09  22:25:49  wardr
# 	{edit,R1.2.2}
# 	Fixed conversion problems
# 	[1996/12/09  22:08:01  wardr]
# 
# Revision 1.1.2.4  1996/12/04  21:42:11  wardr
# 	{edit,R1.2.2}
# 	Fixed initial conversion problems
# 	[1996/12/04  21:37:49  wardr]
# 
# Revision 1.1.2.3  1996/12/02  21:02:04  carrig
# 	{enh,R1.2.2}
# 	VarListEntry
# 	[1996/12/02  20:58:47  carrig]
# 
# Revision 1.1.2.2  1996/12/01  19:23:51  weir
# 	Removed thinsp entities
# 	[1996/12/01  19:21:01  weir]
# 
# Revision 1.1.2.1  1996/11/29  17:17:46  weir
# 	Initial submission
# 	[1996/11/29  17:13:01  weir]
# 
# $EndLog$
-->
<!-- Fragment document type declaration subset:
ArborText, Inc., 1988-1993, v.4001
<!DOCTYPE Book PUBLIC "-//Davenport//DTD DocBook V2.4//EN" [
]>
-->
<RefEntry Id="DCEADR.MAN329.rsml.1">
<RefMeta>
<RefEntryTitle>rpc_ss_get_thread_handle</RefEntryTitle>
<ManVolNum>3rpc</ManVolNum>
</RefMeta>
<RefNameDiv>
<RefName><Literal>rpc_ss_get_thread_handle</Literal></RefName>
<RefPurpose>Gets a thread handle for the manager code
before it spawns additional threads, or for the client code when it becomes
a server;  used by server or possibly by client applications </RefPurpose>
</RefNameDiv>
<!---->
<!--  COPYRIGHT NOTICE-->
<!--  Copyright (c) 1990, 1991, 1992, 1993 Open Software Foundation, Inc.-->
<!--  ALL RIGHTS RESERVED (DCE).  See the file named COPYRIGHT.DCE in the-->
<!--  src directory for the full copyright text.-->
<!---->
<!---->
<!-- OLD HISTORY-->
<!-- Revision 1.1.8.1  1996/11/18  20:00:05  wardr-->
<!-- 	{edit,R1.2.2}-->
<!-- 	Init capped heads and added PDG pointer-->
<!-- 	[1996/11/18  19:35:51  wardr]-->
<!---->
<!-- Revision 1.1.6.6  1995/06/07  20:12:29  buckler-->
<!-- 	1.1 edits  Prentice Hall reformat-->
<!-- 	[1995/06/07  20:07:57  buckler]-->
<!-- -->
<!-- Revision 1.1.6.4  1993/01/27  16:57:02  cjd-->
<!-- 	Embedded copyright notice-->
<!-- 	[1993/01/26  18:36:03  cjd]-->
<!-- -->
<!-- Revision 1.1.6.3  1993/01/26  19:06:50  cjd-->
<!-- 	Embedded copyright notice-->
<!-- 	[1993/01/26  18:36:03  cjd]-->
<!-- -->
<!-- Revision 1.1.6.2  1992/10/01  20:58:49  weir-->
<!-- 	Removed change bars; moved into 1.0.2doc tree-->
<!-- 	[1992/10/01  20:17:12  weir]-->
<!-- -->
<!-- 	For P/H, now and forever!-->
<!-- 	[1992/09/16  14:55:20  oaf]-->
<!-- -->
<!-- Revision 1.1.4.3  1992/09/16  18:32:49  oaf-->
<!-- 	*** empty log message ***-->
<!-- -->
<!-- Revision 1.1.4.2  1992/08/14  17:57:57  oaf-->
<!-- 	2nd edits, PURPOSE fix, .ad l on related functions (& restore)-->
<!-- 	[1992/08/14  17:03:57  oaf]-->
<!-- -->
<!-- Revision 1.1.2.2  1992/05/19  15:52:50  buckler-->
<!-- 	Editorial review-->
<!-- 	[1992/05/19  15:45:35  buckler]-->
<!-- -->
<!-- Revision 1.1  1992/01/29  15:38:51  damon-->
<!-- 	Initial revision-->
<!-- -->
<!---->
<!-- (c) Copyright 1991, Open Software Foundation, Inc.  ALL RIGHTS RESERVED-->
<!--   HISTORY COMMENTS:-->
<!---->
<!--   DATE:                            COMMENT:-->
<!---->
<!--	Fri Nov 8, 1991                 Initial file submission to HP-->
<!--                                   for final integration at IBM.-->
<!--                                   -->
<!---->
<!-- ********************************************************************-->
<!--                                                                    *-->
<!-- HP/DIGITAL CONFIDENTIAL-->
<!-- Copyright (c) 1991 Hewlett-Packard Co. and Digital Equipment Corp.-->
<!-- All rights reserved.-->
<!--                                                                    *-->
<!-- ********************************************************************-->
<!-- .wH "<routine_section>"-->
<IndexTerm Id="DCEADR.MAN329.indx.1">
<Primary>memory</Primary>
<Secondary>management</Secondary>
</IndexTerm>
<IndexTerm Id="DCEADR.MAN329.indx.2">
<Primary>server threads</Primary>
<Secondary>memory management</Secondary>
</IndexTerm>
<!-- .iX "memory" "\*Lrpc_ss_get_thread_handle(\|)\*O"-->
<!-- .iX "\*Lrpc_ss_get_thread_handle(\|)\*O"-->
<IndexTerm Id="DCEADR.MAN329.indx.3">
<Primary>threads</Primary>
<Secondary>memory management</Secondary>
</IndexTerm>
<RefSect1 Remap="ANSI">
<Title>Synopsis</Title>
<FuncSynopsis>
<FuncSynopsisInfo>#include &lt;dce/rpc.h></FuncSynopsisInfo>
<FuncDef><Function>rpc_ss_thread_handle_t rpc_ss_get_thread_handle</Function></FuncDef>
<ParamDef>void</ParamDef>
<?sml-break>
<?sml-need 1.5i>
</FuncSynopsis>
</RefSect1>
<RefSect1>
<Title>Description</Title>
<Para>The <Function>rpc_ss_get_thread_handle()</Function> routine is used by
a server manager thread when it spawns additional threads.
To spawn additional threads that are able to perform memory management,
the server manager code calls <Function>rpc_ss_get_thread_handle()</Function>
and passes the thread handle to each spawned thread.
Each spawned thread that uses <Function>rpc_ss_allocate()</Function> and
<Function>rpc_ss_free()</Function> for memory management must first call
<Function>rpc_ss_set_thread_handle()</Function>, using the handle
obtained by the original manager thread.
</Para>
<Para>The <Function>rpc_ss_get_thread_handle()</Function> routine can also be used when a
program changes from being a client to being a server.
The program gets a handle on its environment as a client by calling
<Function>rpc_ss_get_thread_handle()</Function>.
When the program reverts to being a client it re&minus;establishes the client
environment by calling <Function>rpc_ss_set_thread_handle()</Function>,
supplying the previously obtained handle as a parameter.
<?sml-break><?sml-need 1.5i></Para>
</RefSect1>
<RefSect1>
<Title>Return Values</Title>
<Para>A thread handle.
<?sml-break><?sml-need 1.5i ></Para>
</RefSect1>
<RefSect1>
<Title>Examples</Title>
<Para>This function determines the thread handle, creates a thread,
and passes the thread handle to the thread so it can share the
memory management environment of the calling thread.
</Para>
<InformalExample>
<Para><ProgramListing>#include &lt;pthread.h>
#include &lt;idlbase.h>

pthread_t Launch_thread(
    int (*routine_to_launch)(
       pthread_addr_t th
       )
    )
{
    rpc_ss_thread_handle_t th = rpc_ss_get_thread_handle();
    pthread_t t;

    /*
     * Create the thread and pass to it the thread handle
     * so it can use rpc_ss_set_thread_handle.
     */
    pthread_create (&amp;t, pthread_attr_default,
        (pthread_startroutine_t)routine_to_launch,
        (pthread_addr_t)th);

    return t;
}
</ProgramListing></Para>
</InformalExample>
<?sml-break>
<?sml-need 1.5i>
</RefSect1>
<RefSect1>
<Title>Errors</Title>
<Para>A representative list of errors that might be returned is not shown
here.  Refer to the &DCETg; for complete descriptions of all error
messages.
<?sml-need 1.5i></Para>
</RefSect1>
<RefSect1>
<Title>Related Information</Title>
<!--no-op:  l-->
<Para>Functions:
<Filename MoreInfo="RefEntry">rpc_ss_allocate(3rpc)</Filename>,
<Filename MoreInfo="RefEntry">rpc_ss_free(3rpc)</Filename>,
<Filename MoreInfo="RefEntry">rpc_ss_set_thread_handle(3rpc)</Filename>.
<!--no-op:  b-->
</Para>
</RefSect1>
<!--+ 11/27/96 19:46:25
    | tagMorph:  $Id: rpc_ss_get_thread_handle.3rpc,v 1.1.2.8 1996/12/15 16:29:33 carrig Exp $
    | tagMorph library:  $Id: rpc_ss_get_thread_handle.3rpc,v 1.1.2.8 1996/12/15 16:29:33 carrig Exp $
    | sml-to-docbook:  1.25
    +-->
</RefEntry>
