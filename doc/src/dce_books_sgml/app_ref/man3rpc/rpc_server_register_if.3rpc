<!--
# @OSF_COPYRIGHT@
# 
# 
# HISTORY
# $Log: rpc_server_register_if.3rpc,v $
# Revision 1.1.2.9  1996/12/15  16:33:40  carrig
# 	{enh,R1.2.2}
# 	Final edits
# 	[1996/12/15  16:14:05  carrig]
#
# Revision 1.1.2.8  1996/12/11  20:41:20  wardr
# 	{edit,R1.2.2}
# 	fixed parsing problems
# 	[1996/12/11  20:37:24  wardr]
# 
# Revision 1.1.2.7  1996/12/10  22:40:33  wardr
# 	{edit,R1.2.2}
# 	Fixing sgml
# 	[1996/12/10  22:36:34  wardr]
# 
# Revision 1.1.2.6  1996/12/09  22:25:19  wardr
# 	{edit,R1.2.2}
# 	Fixed conversion problems
# 	[1996/12/09  22:07:33  wardr]
# 
# Revision 1.1.2.5  1996/12/07  17:56:26  carrig
# 	{enh,R1.2.2}
# 	Tables, Var List Entry
# 	[1996/12/07  17:56:01  carrig]
# 
# Revision 1.1.2.4  1996/12/04  21:41:44  wardr
# 	{edit,R1.2.2}
# 	Fixed initial conversion problems
# 	[1996/12/04  21:37:22  wardr]
# 
# Revision 1.1.2.3  1996/12/02  21:01:41  carrig
# 	{enh,R1.2.2}
# 	VarListEntry
# 	[1996/12/02  20:58:19  carrig]
# 
# Revision 1.1.2.2  1996/12/01  19:23:32  weir
# 	Removed thinsp entities
# 	[1996/12/01  19:20:38  weir]
# 
# Revision 1.1.2.1  1996/11/29  17:17:08  weir
# 	Initial submission
# 	[1996/11/29  17:12:40  weir]
# 
# $EndLog$
-->
<!-- Fragment document type declaration subset:
ArborText, Inc., 1988-1993, v.4001
<!DOCTYPE Book PUBLIC "-//Davenport//DTD DocBook V2.4//EN" [
]>
-->
<RefEntry Id="DCEADR.MAN305.rsml.1">
<RefMeta>
<RefEntryTitle>rpc_server_register_if</RefEntryTitle>
<ManVolNum>3rpc</ManVolNum>
</RefMeta>
<RefNameDiv>
<RefName><Literal>rpc_server_register_if</Literal></RefName>
<RefPurpose>Registers an interface with the RPC runtime;  used by server applications </RefPurpose>
</RefNameDiv>
<!---->
<!--  COPYRIGHT NOTICE-->
<!--  Copyright (c) 1990, 1991, 1992, 1993 Open Software Foundation, Inc.-->
<!--  ALL RIGHTS RESERVED (DCE).  See the file named COPYRIGHT.DCE in the-->
<!--  src directory for the full copyright text.-->
<!---->
<!---->
<!-- OLD HISTORY-->
<!-- Revision 1.1.8.1  1996/11/18  19:59:36  wardr-->
<!-- 	{edit,R1.2.2}-->
<!-- 	Init capped heads and added PDG pointer-->
<!-- 	[1996/11/18  19:35:28  wardr]-->
<!---->
<!-- Revision 1.1.6.8  1995/06/21  13:20:53  buckler-->
<!-- 	More 1.1 edits.-->
<!-- 	[1995/06/20  21:18:43  buckler]-->
<!-- -->
<!-- 	More 1.1 edits.-->
<!-- 	[1995/06/19  16:39:35  buckler]-->
<!-- -->
<!-- Revision 1.1.6.7  1995/06/07  20:12:10  buckler-->
<!-- 	1.1 edits  Prentice Hall reformat-->
<!-- 	[1995/06/07  20:07:30  buckler]-->
<!-- -->
<!-- Revision 1.1.6.5  1994/11/03  23:46:35  neilson-->
<!-- 	Substituted macros for book names in cross refs.-->
<!-- 	[1994/11/03  01:39:37  neilson]-->
<!-- -->
<!-- Revision 1.1.6.4  1993/01/27  16:55:37  cjd-->
<!-- 	Embedded copyright notice-->
<!-- 	[1993/01/26  18:34:29  cjd]-->
<!-- -->
<!-- Revision 1.1.6.3  1993/01/26  19:06:00  cjd-->
<!-- 	Embedded copyright notice-->
<!-- 	[1993/01/26  18:34:29  cjd]-->
<!-- -->
<!-- Revision 1.1.6.2  1992/10/01  20:57:25  weir-->
<!-- 	Removed change bars; moved into 1.0.2doc tree-->
<!-- 	[1992/10/01  20:09:45  weir]-->
<!-- -->
<!-- 	For P/H, now and forever!-->
<!-- 	[1992/09/16  14:53:14  oaf]-->
<!-- -->
<!-- Revision 1.1.4.3  1992/09/16  18:32:03  oaf-->
<!-- 	*** empty log message ***-->
<!-- -->
<!-- Revision 1.1.4.2  1992/08/14  17:54:49  oaf-->
<!-- 	2nd edits, PURPOSE fix, .ad l on related functions (& restore)-->
<!-- 	[1992/08/14  17:02:27  oaf]-->
<!-- -->
<!-- Revision 1.1.2.3  1992/06/04  18:48:24  mcdonald-->
<!-- 	Changes Made:            Delete status code rpc_s_invalid_if_handle-->
<!-- 	File name:               src/app_ref/man3rpc/rpc_server_register_if.3rpc-->
<!-- 	Change Request Number:   3562-->
<!-- 	[1992/06/04  18:44:11  mcdonald]-->
<!-- -->
<!-- Revision 1.1.2.2  1992/05/19  15:51:01  buckler-->
<!-- 	Editorial review-->
<!-- 	[1992/05/19  15:43:04  buckler]-->
<!-- -->
<!-- Revision 1.1  1992/01/29  15:38:26  damon-->
<!-- 	Initial revision-->
<!-- -->
<!---->
<!-- (c) Copyright 1991, Open Software Foundation, Inc.  ALL RIGHTS RESERVED-->
<!--   HISTORY COMMENTS:-->
<!---->
<!--   DATE:                            COMMENT:-->
<!---->
<!--	Mon Nov 11, 1991                 Initial file submission to HP-->
<!--                                    for final integration at IBM.-->
<!---->
<!---->
<!-- ********************************************************************-->
<!-- Copyright (c) 1991 Hewlett-Packard Co. and Digital Equipment Corp. *-->
<!-- All rights reserved.                                               *-->
<!-- ********************************************************************-->
<!-- .iX "\*Lrpc_server_register_if(\|)\*O"-->
<RefSect1 Remap="ANSI">
<Title>Synopsis</Title>
<FuncSynopsis>
<FuncSynopsisInfo>#include &lt;dce/rpc.h></FuncSynopsisInfo>
<FuncDef><Function><Literal>void </Literal>rpc_server_register_if</Function></FuncDef>
<ParamDef>rpc_if_handle_t <Parameter>if_handle</Parameter></ParamDef>
<ParamDef>uuid_t *<Parameter>mgr_type_uuid</Parameter></ParamDef>
<ParamDef>rpc_mgr_epv_t <Parameter>mgr_epv</Parameter></ParamDef>
<ParamDef>unsigned32 *<Parameter>status</Parameter></ParamDef>
</FuncSynopsis>
<?sml-break>
<?sml-need 1.5i>
</RefSect1>
<RefSect1>
<Title>Parameters</Title>
<RefSect2>
<Title>Input</Title>
<VariableList>
<VarListEntry>
<Term><Symbol Role="Variable">if_handle</Symbol></Term>
<ListItem>
<Para>An IDL-generated data structure specifying the interface to register.
</Para>
</ListItem>
</VarListEntry>
<VarListEntry role="linebreak">
<Term><Symbol Role="Variable">mgr_type_uuid</Symbol></Term>
<ListItem>
<Para>Specifies a type UUID to associate with the <Symbol Role="Variable">mgr_epv</Symbol> parameter.
Specifying the value NULL (or a nil UUID) registers the
<Symbol Role="Variable">if_handle</Symbol> with a nil type UUID.
</Para>
</ListItem>
</VarListEntry>
<VarListEntry>
<Term><Symbol Role="Variable">mgr_epv</Symbol></Term>
<ListItem>
<Para>Specifies the manager routines' entry point vector.
To use the IDL-generated default entry point vector, specify NULL.
</Para>
</ListItem>
</VarListEntry>
</VariableList>
</RefSect2>
<RefSect2>
<Title>Output</Title>
<VariableList>
<VarListEntry>
<Term><Symbol Role="Variable">status</Symbol></Term>
<ListItem>
<Para>Returns the status code from this routine.  This status code
indicates whether the routine completed successfully or, if not, why not.
</Para>
</ListItem>
</VarListEntry>
</VariableList>
<?sml-break>
<?sml-need 1.5i>
</RefSect2>
</RefSect1>
<RefSect1>
<Title>Description</Title>
<Para>The <Function>rpc_server_register_if()</Function> routine registers
a server interface with the RPC runtime.  A server can register an
unlimited number of interfaces.
Once registered, an interface is available to clients through any
binding handle of the server, provided that
the binding handle is compatible for the client.
</Para>
<Para><?sml-need 6>A server must provide the following information to register an interface:
<!--no-op:  l-->
</Para>
<ItemizedList>
<ListItem>
<Para>An interface specification, which is a
data structure generated by the IDL compiler.  The server
specifies the
interface specification of the interface using the <Symbol Role="Variable">if_handle</Symbol> parameter.
</Para>
</ListItem>
<ListItem>
<Para>A type UUID
and manager entry point vector (EPV), a data pair that
determines which manager routine executes when a server
receives a remote procedure call request from a client.
</Para>
<Para>The server specifies the type UUID and EPV using the
<Symbol Role="Variable">mgr_type_uuid</Symbol> and <Symbol Role="Variable">mgr_epv</Symbol> parameters, respectively.
Note that when a nonnil type UUID is specified, the server must also
call the <Function>rpc_object_set_type()</Function> routine to register objects of this
nonnil type.
</Para>
</ListItem>
</ItemizedList>
<!--no-op:  b-->
<Para>A server that only offers a single manager for an interface
calls <Function>rpc_server_register_if()</Function> once for that interface.
In the simple case where the single manager's entry point names are
the same as the operation names in the IDL interface definition, the
IDL-generated default manager EPV for the interface may be used.
The value NULL in <Symbol Role="Variable">mgr_epv</Symbol> specifies the
default manager EPV.
</Para>
<Para>Note that if a server offers multiple implementations of
an interface, the server code must register a separate manager entry
point vector for each interface implementation.
</Para>
<RefSect2>
<Title>Rules for Invoking Manager Routines</Title>
<Para>The RPC runtime dispatches an incoming remote procedure call to a manager
that offers the requested RPC interface.  When multiple managers are
registered for an interface, the RPC runtime must select one of them.  To
select a manager, the RPC runtime uses the object UUID specified by the
call's binding handle.
The following table summarizes the rules applied for invoking manager routines.
<!-- .TB "Rules for Invoking Manager Routines"-->
</Para>
<Para><?sml-need 3.5i><?sml-indent -1i>
<!--no-op:  l-->
</Para>
<InformalTable Frame="all" Orient="Port" role="page-wide">
<TGroup Rowsep="0" Colsep="0" Cols="4">
<ColSpec Colsep="1" Align="Center" Colwidth="1*" Colname="col1" Colnum="1">
<ColSpec Colsep="1" Align="Center" Colwidth="1*" Colname="col2" Colnum="2">
<ColSpec Colsep="1" Align="Center" Colwidth="1*" Colname="col3" Colnum="3">
<ColSpec Align="Left" Colwidth="1.5*" Colname="col4" Colnum="4">
<thead>
<Row>
<Entry Rowsep="1" Colsep="0" Namest="col1" Nameend="col4"><Literal>Rules for Invoking Manager Routines</Literal></Entry>
</Row>
<Row>
<Entry  rowsep="1" Align="Left"><Literal>Object UUID of Call</Literal><Superscript><?sml-size -2>1</Superscript><?sml-size 0></Entry>
<Entry Colsep="1" rowsep="1"><Literal>Has Server Set Type of Object UUID?</Literal><Superscript><?sml-size -2>2</Superscript></Entry>
<Entry Colsep="1" rowsep="1"><Literal>Has Server Set Type for Manager EPV?</Literal><Superscript><?sml-size -2>3</Superscript><?sml-size 0></Entry>
<Entry Colsep="1" Rowsep="1"><Literal>Dispatching Action</Literal></Entry>
</Row>
</thead>
<tbody>
<Row>
<Entry Rowsep="1">Nil</Entry>
<Entry Rowsep="1">Not applicable<Superscript><?sml-size -2>4</Superscript><?sml-size 0></Entry>
<Entry Rowsep="1">Yes</Entry>
<Entry Rowsep="1">Uses the manager with the nil type UUID.</Entry>
</Row>
<Row>
<Entry>Nil</Entry>
<Entry>Not applicable<Superscript><?sml-size -2>4</Superscript><?sml-size 0></Entry>
<Entry>No</Entry>
<Entry>The RPC error (<Literal>rpc_s_unknown_mgr_type</Literal>).  Rejects the remote procedure call.
</Entry>
</Row>
<Row>
<Entry>Non-nil</Entry>
<Entry>Yes</Entry>
<Entry>Yes</Entry>
<Entry>Uses the manager with the same type UUID.
</Entry>
</Row>
</TBody>
</TGroup>
</InformalTable>
<?sml-indent>
<!--no-op:  b-->
<?sml-space>
<?sml-break>
<?sml-need 8>
<!--no-op:  l-->
<?sml-indent -1i>
<InformalTable Frame="All" Remap="center" Orient="Port" role="page-wide">
<TGroup Rowsep="0" Colsep="0" Cols="4">
<ColSpec Colsep="1" Align="Center" Colwidth="1*" Colname="col1" Colnum="1">
<ColSpec Colsep="1" Align="Center" Colwidth="1*" Colname="col2" Colnum="2">
<ColSpec Colsep="1" Align="Center" Colwidth="1*" Colname="col3" Colnum="3">
<ColSpec Align="Left" Colwidth="1.5*" Colname="col4" Colnum="4">
<thead>
<Row>
<Entry Rowsep="1" Colsep="0" Namest="col1" Nameend="col4"><Literal>Rules for Invoking Manager Routines</Literal></Entry>
</Row>

<Row>
<Entry Rowsep="1" Align="Left"><Literal>Object UUID of Call</Literal><Superscript><?sml-size -2>1</Superscript><?sml-size 0></Entry>
<Entry Rowsep="1" Align="Left"><Literal>Has Server Set Type of Object UUID?</Literal><Superscript><?sml-size -2>2</Superscript><?sml-size 0></Entry>
<Entry Rowsep="1" Align="Left"><Literal>Has Server Registered Type for Manager EPV?</Literal><Superscript><?sml-size -2>3</Superscript><?sml-size 0></Entry>
<Entry Rowsep="1"><Literal>Dispatching Action</Literal></Entry>
</Row>
</thead>
<tbody>

<Row>
<Entry Rowsep="1">Non-nil</Entry>
<Entry Rowsep="1">No</Entry>
<Entry Rowsep="1">Ignored</Entry>
<Entry Rowsep="1">Uses the manager with the nil type UUID. If no manager with the nil type UUID,
<Literal>rpc_s_unknown_mgr_type</Literal>.  Rejects the remote procedure call.
</Entry>
</Row>
<Row>
<Entry>Non-nil</Entry>
<Entry>Yes</Entry>
<Entry>No</Entry>
<Entry>The error (<Literal>rpc_s_unknown_mgr_type</Literal>).  Rejects the remote procedure call.
</Entry>
</Row>
</TBody>
</TGroup>
</InformalTable>
<?sml-indent>
<!--no-op:  b-->
<VariableList>
<VarListEntry>
<Term><Superscript><?sml-size -2>1</Superscript><?sml-size 0></Term>
<ListItem>
<Para>This is the object UUID found in a binding handle for a remote
procedure.
</Para>
</ListItem>
</VarListEntry>
<VarListEntry>
<Term><Superscript><?sml-size -2>2</Superscript><?sml-size 0></Term>
<ListItem>
<Para>By calling <Function>rpc_object_set_type()</Function> to specify the type
UUID for an object.
</Para>
</ListItem>
</VarListEntry>
<VarListEntry>
<Term><Superscript><?sml-size -2>3</Superscript><?sml-size 0></Term>
<ListItem>
<Para>By calling <Function>rpc_server_register_if()</Function> using the same
type UUID.
</Para>
</ListItem>
</VarListEntry>
<VarListEntry>
<Term><Superscript><?sml-size -2>4</Superscript><?sml-size 0></Term>
<ListItem>
<Para>The nil object UUID is always automatically assigned the nil
type UUID. It is illegal to specify a nil object UUID in
<Function>rpc_object_set_type()</Function>.
</Para>
</ListItem>
</VarListEntry>
</VariableList>
<Para>For more information about registering server interfaces and
invoking manager routines, refer to the &DCEDk;.
<?sml-break><?sml-need 1.5i></Para>
</RefSect2>
</RefSect1>
<RefSect1>
<Title>Return Values</Title>
<Para>No value is returned.
<?sml-break><?sml-need 1.5i></Para>
</RefSect1>
<RefSect1>
<Title>Errors</Title>
<Para>The following describes a partial list of errors that might be returned.
Refer to the &DCETg; for complete descriptions of all error
messages.
</Para>
<VariableList>
<VarListEntry>
<Term><Literal>rpc_s_ok</Literal></Term>
<ListItem>
<Para>Success.
</Para>
</ListItem>
</VarListEntry>
<VarListEntry role="linebreak">
<Term><Literal>rpc_s_type_already_registered</Literal></Term>
<ListItem>
<Para>An interface with the given type of UUID is already registered.
</Para>
</ListItem>
</VarListEntry>
</VariableList>
</RefSect1>
<RefSect1>
<Title>Related Information</Title>
<Para><!--no-op:  l-->
Functions:
<Filename MoreInfo="RefEntry">rpc_binding_set_object(3rpc)</Filename>,
<Filename MoreInfo="RefEntry">rpc_ep_register(3rpc)</Filename>,
<Filename MoreInfo="RefEntry">rpc_ep_register_no_replace(3rpc)</Filename>,
<Filename MoreInfo="RefEntry">rpc_ns_binding_export(3rpc)</Filename>,
<Filename MoreInfo="RefEntry">rpc_object_set_type(3rpc)</Filename>,
<Filename MoreInfo="RefEntry">rpc_server_unregister_if(3rpc)</Filename>.
</Para>
<Para>Books:
&DCEDk;.
<!--no-op:  b-->
</Para>
</RefSect1>
<!--+ 11/27/96 19:46:25
    | tagMorph:  $Id: rpc_server_register_if.3rpc,v 1.1.2.9 1996/12/15 16:33:40 carrig Exp $
    | tagMorph library:  $Id: rpc_server_register_if.3rpc,v 1.1.2.9 1996/12/15 16:33:40 carrig Exp $
    | sml-to-docbook:  1.25
    +-->
</RefEntry>
