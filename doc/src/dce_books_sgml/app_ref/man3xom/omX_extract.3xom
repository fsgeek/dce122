<!--
# @OSF_COPYRIGHT@
# 
# 
# HISTORY
# $Log: omX_extract.3xom,v $
# Revision 1.1.2.4  1996/12/11  18:02:33  carrig
# 	{enh,R1.2.2}
# 	Index entry
# 	[1996/12/11  18:01:53  carrig]
#
# Revision 1.1.2.3  1996/12/06  16:13:51  wardr
# 	{edit,R1.2.2}
# 	Fixed initial conversion problems
# 	[1996/12/06  16:12:34  wardr]
# 
# Revision 1.1.2.2  1996/12/01  20:32:48  weir
# 	Removed thinsp entities
# 	[1996/12/01  20:32:23  weir]
# 
# Revision 1.1.2.1  1996/11/29  18:56:12  weir
# 	Initial submission
# 	[1996/11/29  18:55:42  weir]
# 
# $EndLog$
-->
<!-- Fragment document type declaration subset:
ArborText, Inc., 1988-1993, v.4001
<!DOCTYPE Book PUBLIC "-//Davenport//DTD DocBook V2.4//EN" [
]>
-->
<RefEntry Id="DCEADR.MAN381.rsml.1">
<RefMeta>
<RefEntryTitle>omX_extract</RefEntryTitle>
<ManVolNum>3xom</ManVolNum>
</RefMeta>
<RefNameDiv>
<RefName><Literal>omX_extract</Literal></RefName>
<RefPurpose>Extracts the first occurrence of the requested OM type from
an object</RefPurpose>
</RefNameDiv>
<!-- COPYRIGHT NOTICE-->
<!-- Copyright (c) 1990, 1991, 1992, 1993, 1994 Open Software Foundation, Inc.-->
<!-- ALL RIGHTS RESERVED (DCE).  See the file named COPYRIGHT.DCE for-->
<!-- the full copyright text.-->
<!-- -->
<!-- OLD HISTORY-->
<!-- Revision 1.1.4.2  1996/11/22  16:50:44  wardr-->
<!-- 	{edit,R1.2.2}-->
<!-- 	Fixed bookdef macro-->
<!-- 	[1996/11/22  16:43:58  wardr]-->
<!---->
<!-- Revision 1.1.4.1  1996/11/20  19:22:23  wardr-->
<!-- 	{edit,R1.2.2}-->
<!-- 	Init capped heads and added PDG pointer-->
<!-- 	[1996/11/20  19:21:47  wardr]-->
<!-- -->
<!-- Revision 1.1.2.6  1995/06/21  13:23:24  buckler-->
<!-- 	More 1.1 edits.-->
<!-- 	[1995/06/19  20:29:14  buckler]-->
<!-- -->
<!-- Revision 1.1.2.5  1995/06/07  22:59:25  buckler-->
<!-- 	1.1 edits and Prentice Hall format-->
<!-- 	[1995/06/07  22:58:42  buckler]-->
<!-- -->
<!-- Revision 1.1.2.4  1994/09/08  18:10:10  rnollman-->
<!-- 	[rnollman] - updated input/output/return code parms from Dubloin-->
<!-- 	[1994/09/08  18:07:59  rnollman]-->
<!-- -->
<!-- Revision 1.1.2.3  1994/08/05  18:01:05  rnollman-->
<!-- 	[rnollman] - checkin after incorporating OSF edits-->
<!-- 	[1994/08/05  17:26:30  rnollman]-->
<!-- -->
<!-- Revision 1.1.2.2  1994/06/13  17:12:49  devobj-->
<!-- 	cr10872 - fix copyright-->
<!-- 	[1994/06/13  16:50:58  devobj]-->
<!-- -->
<!-- Revision 1.1.2.1  1994/03/20  13:47:05  rnollman-->
<!-- 	new reference page-->
<!-- 	[1994/03/20  13:46:47  rnollman]-->
<!-- -->
<!---->
<!-- (c) Copyright 1991, Open Software Foundation, Inc.  ALL RIGHTS RESERVED-->
<!-- (c) Copyright 1991, Open Software Foundation, Inc.  ALL RIGHTS RESERVED-->
<!-- /*****************************************************************-->
<!-- *                                                                *-->
<!-- * COPYRIGHT   (C)  SIEMENS NIXDORF INFORMATIONSSYSTEME AG 1994   *-->
<!-- *                  ALL RIGHTS RESERVED                           *-->
<!-- *                                                                *-->
<!-- *****************************************************************/-->
<RefSect1 Remap="ANSI">
<Title>Synopsis</Title>
<FuncSynopsis>
<FuncSynopsisInfo>
#include &lt;xom.h>
#include &lt;xomext.h></FuncSynopsisInfo>
<FuncDef><Function><Literal>OM_return_code </Literal>omX_extract</Function></FuncDef>
<ParamDef>OM_private_object <Parameter>object</Parameter></ParamDef>
<ParamDef>OM_type_list <Parameter>navigation_path</Parameter></ParamDef>
<ParamDef>OM_exclusions <Parameter>exclusions</Parameter></ParamDef>
<ParamDef>OM_type_list <Parameter>included_types</Parameter></ParamDef>
<ParamDef>OM_boolean <Parameter>local_strings</Parameter></ParamDef>
<ParamDef>OM_value_position <Parameter>initial_value</Parameter></ParamDef>
<ParamDef>OM_value_position <Parameter>limiting_value</Parameter></ParamDef>
<ParamDef>OM_public_object *<Parameter>values</Parameter></ParamDef>
<ParamDef>OM_value_position *<Parameter>total_number</Parameter></ParamDef>
</FuncSynopsis>
<?sml-break>
<?sml-need 1.5i>
</RefSect1>
<RefSect1>
<Title>Parameters</Title>
<RefSect2>
<Title>Input</Title>
<VariableList>
<VarListEntry>
<Term><Symbol Role="Variable">object</Symbol></Term>
<ListItem>
<Para>The object from which data is to be extracted.
</Para>
</ListItem>
</VarListEntry>
<VarListEntry role="linebreak">
<Term><Symbol Role="Variable">navigation_path</Symbol></Term>
<ListItem>
<Para>Contains a NULL-terminated list of OM types that lead to the target object
to be extracted.  It does not include the OM type of the target object.
</Para>
</ListItem>
</VarListEntry>
<VarListEntry>
<Term><Symbol Role="Variable">exclusions</Symbol></Term>
<ListItem>
<Para>Explicit requests for zero or more exclusions, each of which
reduces the copy to a prescribed portion of the original.  The exclusions
apply to the attributes of the target object, but not to those of its 
subobjects.
</Para>
<Para>Apart from <Literal>OM_NO_EXCLUSIONS</Literal>,
each value is chosen from the following list.
When multiple exclusions are specified, each
is applied in the order in which it is displayed in the list with
lower-numbered exclusions having precedence over higher-numbered 
exclusions.  If, after the application of an
exclusion, that portion of the object is not returned,
no further exclusions need be applied to that portion.
<?sml-break><?sml-need 6></Para>
<ItemizedList>
<ListItem>
<Para><Literal>OM_EXCLUDE_ALL_BUT_THESE_TYPES</Literal>
</Para>
<Para>The copy includes descriptors comprising only attributes of
specified types.
Note that this exclusion provides a means for
determining the values of specified attributes, as
well as the syntaxes of those values.
</Para>
</ListItem>
<ListItem>
<Para><Literal>OM_EXCLUDE_MULTIPLES</Literal>
</Para>
<Para>The copy includes a single
descriptor for each attribute that has
two or more values, rather than one descriptor for
each value.  None of these descriptors contains an
attribute value, and the <Literal>OM_S_NO_VALUE</Literal> bit of the syntax component is set.
</Para>
<Para>If the attribute has values of two or
more syntaxes, the descriptor identifies one of
those syntaxes; however, the syntax identified is not specified.
</Para>
<Para>Note that this exclusion provides a means for
discerning the presence of multivalued attributes
without simultaneously obtaining their values.
</Para>
</ListItem>
<ListItem>
<Para><Literal>OM_EXCLUDE_ALL_BUT_THESE_VALUES</Literal>
</Para>
<Para>The copy includes descriptors comprising only values at
specified positions within an attribute.
Note that, when this exclusion is used in conjunction with the
<Literal>OM_EXCLUDE_ALL_BUT_THESE_TYPES</Literal> exclusion,
it provides a means for determining the values of a
specified attribute, as well as the syntaxes of
those values, one or more but not all attributes
at a time.
</Para>
</ListItem>
<ListItem>
<Para><Literal>OM_EXCLUDE_VALUES</Literal>
</Para>
<Para>The copy includes a single descriptor for each attribute value, but the
descriptor does not contain the value, and the <Literal>OM_S_NO_VALUE</Literal> bit
of the syntax component is set.
</Para>
<Para>Note that this exclusion provides a means for
determining an object's composition; that is, the type
and syntax of each of its attribute values.
</Para>
</ListItem>
<ListItem>
<Para><Literal>OM_EXCLUDE_SUBOBJECTS</Literal>
</Para>
<Para>The copy includes, for each value whose
syntax is <Literal>OM_S_OBJECT</Literal>, a descriptor containing an object handle for
the original private subobject, rather than a public copy of it.
This handle makes that subobject accessible for use
in subsequent function calls.
</Para>
<Para>Note that this exclusion provides a means for
examining an object one level at a time.
</Para>
</ListItem>
<ListItem>
<Para><Literal>OM_EXCLUDE_DESCRIPTORS</Literal>
</Para>
<Para>When this exclusion is specified, no
descriptors are returned and the copy result is not present.
The <Symbol Role="Variable">total_number</Symbol> parameter reflects the number of descriptors
that would be returned by applying the other
inclusion and exclusion specifications.
</Para>
<Para>Note that this exclusion provides an attribute analysis capability.
For instance, the total number of values in a multivalued attribute
can be determined by specifying an inclusion of the specific
attribute type, and exclusions of <Literal>OM_EXCLUDE_DESCRIPTORS</Literal>,
<Literal>OM_EXCLUDE_SUBOBJECTS</Literal>, and
<Literal>OM_EXCLUDE_ALL_BUT_THESE_TYPES</Literal>.
</Para>
</ListItem>
</ItemizedList>
<Para>The <Literal>OM_EXCLUDE_ALL_BUT_THESE_VALUES</Literal> exclusion affects the
choice of descriptors, while the <Literal>OM_EXCLUDE_VALUES</Literal> exclusion
affects the composition of descriptors.
</Para>
</ListItem>
</VarListEntry>
<VarListEntry role="linebreak">
<Term><Symbol Role="Variable">included_types</Symbol></Term>
<ListItem>
<Para>This parameter is present if and only if the <Literal>OM_EXCLUDE_ALL_BUT_THESE_TYPES</Literal>
exclusion is requested; it
identifies the types of the attributes to be included in the copy
(provided that they are displayed in the original).
</Para>
</ListItem>
</VarListEntry>
<VarListEntry>
<Term><Symbol Role="Variable">local_strings</Symbol></Term>
<ListItem>
<Para>This Boolean parameter indicates whether conversion to local string format
should be carried out or not.
</Para>
</ListItem>
</VarListEntry>
<VarListEntry>
<Term><Symbol Role="Variable">initial_value</Symbol></Term>
<ListItem>
<Para>This parameter is present if and only if the 
<Literal>OM_EXCLUDE_ALL_BUT_THESE_VALUES</Literal> exclusion is
requested; it specifies the position within each attribute of the first value
to be included in the copy.
</Para>
<Para>If it is <Literal>OM_ALL_VALUES</Literal>
or exceeds the number of values present in an attribute,
the parameter is taken to be equal to that number.
<?sml-break><?sml-need 8></Para>
</ListItem>
</VarListEntry>
<VarListEntry role="linebreak">
<Term><Symbol Role="Variable">limiting_value</Symbol></Term>
<ListItem>
<Para>This parameter is present if and only if the 
<Literal>OM_EXCLUDE_ALL_BUT_THESE_VALUES</Literal>
exclusion is requested; it specifies the position within each attribute one beyond that
of the last value to be included in the copy.
If this parameter is not greater than the <Symbol Role="Variable">initial_value</Symbol> parameter,
no values are included (and no descriptors are returned).
</Para>
<Para>If it is <Literal>OM_ALL_VALUES</Literal>
or exceeds the number of values present in an attribute,
the parameter is taken to be equal to that number.
</Para>
</ListItem>
</VarListEntry>
</VariableList>
</RefSect2>
<RefSect2>
<Title>Output</Title>
<VariableList>
<VarListEntry>
<Term><Symbol Role="Variable">values</Symbol></Term>
<ListItem>
<Para>The <Symbol Role="Variable">values</Symbol> parameter is only present if the return value from
<Symbol Role="Variable">OM_return_code</Symbol> is <Literal>OM_SUCCESS</Literal> and the <Literal>OM_EXCLUDE_DESCRIPTORS</Literal>
exclusion is not specified.  It contains the array of OM descriptors extracted.
</Para>
<Para>The memory space for <Symbol Role="Variable">values</Symbol> is provided by <Function>omX_extract()</Function>.  It
is the responsibility of the calling function to subsequently release
this space through a call to <Function>om_delete()</Function>.
</Para>
</ListItem>
</VarListEntry>
<VarListEntry>
<Term><Symbol Role="Variable">total_number</Symbol></Term>
<ListItem>
<Para>The number of attribute descriptors
returned in the public object, but not in any of its subobjects,
based on the inclusion and exclusion
parameters specified.  If the <Literal>OM_EXCLUDE_DESCRIPTORS</Literal> exclusion is
specified, no <Symbol Role="Variable">values</Symbol> result is returned and the <Symbol Role="Variable">total_number</Symbol> result
reflects the actual number of attribute descriptors that would
be returned based on the remaining inclusion and exclusion
values.
</Para>
<Para>Note that
the total includes only the attribute descriptors in the
<Symbol Role="Variable">values</Symbol> parameter.  It excludes the special descriptor signaling the
end of a public object.
</Para>
</ListItem>
</VarListEntry>
</VariableList>
<?sml-break>
<?sml-need 1.5i>
</RefSect2>
</RefSect1>
<RefSect1>
<Title>Description</Title>
<Para>The <Function>omX_extract()</Function> function creates a new public object
that is an exact, but independent, copy of an existing subobject in a
private object.
It is similiar to the <Function>om_get()</Function> function but includes an
additional parameter, <Symbol Role="Variable">navigation_path</Symbol> which contains directions
to the required object to be extracted.
The client can request certain exclusions,
each of which reduces the copy to a part of the original.
</Para>
<Para><?sml-need 8>One exclusion is always requested implicitly.
For each attribute value in the original that is a string whose
length exceeds an implementation-defined number, the <Symbol Role="Variable">values</Symbol> parameter
includes a descriptor that omits the elements (but not the
length) of the string.  The <Symbol Role="Variable">elements</Symbol> component of the <Symbol Role="Variable">string</Symbol>
component in the descriptor's <Symbol Role="Variable">value</Symbol> component is
<Literal>OM_ELEMENTS_UNSPECIFIED</Literal>, and the <Literal>OM_S_LONG_STRING</Literal> bit of the
<Symbol Role="Variable">syntax</Symbol> component is set to <Literal>OM_TRUE</Literal>.
</Para>
<Para>The parameters <Symbol Role="Variable">exclusions</Symbol>, <Symbol Role="Variable">included_types</Symbol>, <Symbol Role="Variable">local_strings</Symbol>,
<Symbol Role="Variable">initial_value</Symbol>, and <Symbol Role="Variable">limiting_value</Symbol> only apply to the target
object being extracted.
</Para>
<Para>Note that the client can access
long values by means of <Function>om_read()</Function>.
<?sml-break><?sml-need 1.5i></Para>
</RefSect1>
<RefSect1>
<Title>Return Values</Title>
<Para>The following describes a partial list of messages (or errors) that might
be returned.  Refer to the &DCETg; for complete descriptions of all error
messages.
</Para>
<VariableList>
<VarListEntry role="linebreak">
<Term><Symbol Role="Variable">OM_return_code</Symbol></Term>
<ListItem>
<Para>Indicates whether the function succeeded and, if not, why not.  If the 
function is successful, the value of <Symbol Role="Variable">OM_return_code</Symbol> is set 
to <Literal>OM_SUCCESS</Literal>; if the function fails, it has one of the error 
values listed in the <Filename MoreInfo="RefEntry">xom.h(4xom)</Filename> reference page.
</Para>
</ListItem>
</VarListEntry>
</VariableList>
<?sml-break>
<?sml-need 1.5i>
</RefSect1>
<RefSect1>
<Title>Errors</Title>
<Para>Refer to <Filename MoreInfo="RefEntry">xom.h(4xom)</Filename> for a list of the possible error values that
can be returned in <Symbol Role="Variable">OM_return_code</Symbol>.
Refer to the &DCETg; for complete descriptions of all error messages.</Para>
</RefSect1>
<!--+ 11/27/96 19:46:25
    | tagMorph:  $Id: omX_extract.3xom,v 1.1.2.4 1996/12/11 18:02:33 carrig Exp $
    | tagMorph library:  $Id: omX_extract.3xom,v 1.1.2.4 1996/12/11 18:02:33 carrig Exp $
    | sml-to-docbook:  1.25
    +-->
</RefEntry>
