<!--
# @OSF_COPYRIGHT@
# 
# 
# HISTORY
# $Log: om_write.3xom,v $
# Revision 1.1.2.4  1996/12/11  18:02:50  carrig
# 	{enh,R1.2.2}
# 	Index entry
# 	[1996/12/11  18:02:12  carrig]
#
# Revision 1.1.2.3  1996/12/06  16:14:05  wardr
# 	{edit,R1.2.2}
# 	Fixed initial conversion problems
# 	[1996/12/06  16:12:47  wardr]
# 
# Revision 1.1.2.2  1996/12/01  20:33:00  weir
# 	Removed thinsp entities
# 	[1996/12/01  20:32:36  weir]
# 
# Revision 1.1.2.1  1996/11/29  18:56:29  weir
# 	Initial submission
# 	[1996/11/29  18:55:53  weir]
# 
# $EndLog$
-->
<!-- Fragment document type declaration subset:
ArborText, Inc., 1988-1993, v.4001
<!DOCTYPE Book PUBLIC "-//Davenport//DTD DocBook V2.4//EN" [
]>
-->
<RefEntry Id="DCEADR.MAN395.rsml.1">
<RefMeta>
<RefEntryTitle>om_write</RefEntryTitle>
<ManVolNum>3xom</ManVolNum>
</RefMeta>
<RefNameDiv>
<RefName><Literal>om_write</Literal></RefName>
<RefPurpose>Writes a segment of a string into a private object</RefPurpose>
</RefNameDiv>
<!---->
<!--  COPYRIGHT NOTICE-->
<!--  Copyright (c) 1990, 1991, 1992, 1993 Open Software Foundation, Inc.-->
<!--  ALL RIGHTS RESERVED (DCE).  See the file named COPYRIGHT.DCE in the-->
<!--  src directory for the full copyright text.-->
<!---->
<!---->
<!-- OLD HISTORY-->
<!-- Revision 1.1.10.2  1996/11/22  16:50:56  wardr-->
<!-- 	{edit,R1.2.2}-->
<!-- 	Fixed bookdef macro-->
<!-- 	[1996/11/22  16:44:14  wardr]-->
<!---->
<!-- Revision 1.1.10.1  1996/11/20  19:22:41  wardr-->
<!-- 	{edit,R1.2.2}-->
<!-- 	Init capped heads and added PDG pointer-->
<!-- 	[1996/11/20  19:22:00  wardr]-->
<!-- -->
<!-- Revision 1.1.8.5  1995/06/07  22:59:37  buckler-->
<!-- 	1.1 edits and Prentice Hall format-->
<!-- 	[1995/06/07  22:58:57  buckler]-->
<!-- -->
<!-- Revision 1.1.8.4  1994/09/08  18:17:06  rnollman-->
<!-- 	[rnollman] - updated input/output/return code parms from Dubloiin-->
<!-- 	[1994/09/08  18:09:26  rnollman]-->
<!-- -->
<!-- Revision 1.1.8.3  1994/08/05  18:01:18  rnollman-->
<!-- 	[rnollman] - checkin after incorporating OSF edits-->
<!-- 	[1994/08/05  18:00:05  rnollman]-->
<!-- -->
<!-- Revision 1.1.8.2  1994/03/20  13:37:17  rnollman-->
<!-- 	changed for R1.1-->
<!-- 	[1994/03/20  13:37:01  rnollman]-->
<!-- -->
<!-- Revision 1.1.8.1  1993/11/12  14:26:58  rnollman-->
<!-- 	updated SNI copyright-->
<!-- 	[1993/11/12  14:26:42  rnollman]-->
<!-- -->
<!-- Revision 1.1.6.4  1993/01/27  20:29:22  cjd-->
<!-- 	Fixing backing build problem-->
<!-- 	[1993/01/27  19:57:58  cjd]-->
<!-- -->
<!-- Revision 1.1.6.3  1993/01/26  23:22:19  cjd-->
<!-- 	Embedded copyright notice-->
<!-- 	[1993/01/26  22:27:22  cjd]-->
<!-- -->
<!-- 	Embedded copyright notice-->
<!-- 	[1993/01/26  20:58:35  cjd]-->
<!-- -->
<!-- Revision 1.1.6.2  1992/10/02  20:49:30  weir-->
<!-- 	Removed change bars; moved into 1.0.2doc tree-->
<!-- 	[1992/10/02  20:45:18  weir]-->
<!-- -->
<!-- Revision 1.1.4.2  1992/09/16  18:48:47  oaf-->
<!-- 	*** empty log message ***-->
<!-- -->
<!-- Revision 1.1.3.2  1992/09/16  15:31:09  oaf-->
<!-- 	For P/H, now and forever!-->
<!-- -->
<!-- Revision 1.1.2.4  1992/06/15  16:32:27  buckler-->
<!-- 	Incorporated changes from Brian Keane (Dublin)-->
<!-- 	[1992/06/15  16:31:52  buckler]-->
<!-- -->
<!-- Revision 1.1.2.3  1992/05/20  13:53:16  buckler-->
<!-- 	Editorial review-->
<!-- 	[1992/05/20  13:51:23  buckler]-->
<!-- -->
<!-- Revision 1.1.2.2  1992/05/13  13:23:20  weir-->
<!-- 	New version for DCE1.0.1.-->
<!-- 	[1992/05/13  13:23:02  weir]-->
<!-- -->
<!-- Revision 1.1  1992/01/29  15:34:52  damon-->
<!-- 	Initial revision-->
<!-- -->
<!---->
<!-- (c) Copyright 1991, Open Software Foundation, Inc.  ALL RIGHTS RESERVED-->
<!-- (c) Copyright 1991, Open Software Foundation, Inc.  ALL RIGHTS RESERVED-->
<!-- /*****************************************************************-->
<!-- *                                                                *-->
<!-- * COPYRIGHT   (C)  SIEMENS NIXDORF INFORMATIONSSYSTEME AG 1994   *-->
<!-- *                  ALL RIGHTS RESERVED                           *-->
<!-- *                                                                *-->
<!-- *****************************************************************/-->
<IndexTerm Id="DCEADR.MAN395.indx.1">
<Primary>private object</Primary>
</IndexTerm>
<RefSect1 Remap="ANSI">
<Title>Synopsis</Title>
<FuncSynopsis>
<FuncSynopsisInfo>#include &lt;xom.h></FuncSynopsisInfo>
<FuncDef><Function><Literal>OM_return_code </Literal>om_write</Function></FuncDef>
<ParamDef>OM_private_object <Parameter>subject</Parameter></ParamDef>
<ParamDef>OM_type <Parameter>type</Parameter></ParamDef>
<ParamDef>OM_value_position <Parameter>value_position</Parameter></ParamDef>
<ParamDef>OM_syntax <Parameter>syntax</Parameter></ParamDef>
<ParamDef>OM_string_length *<Parameter>string_offset</Parameter></ParamDef>
<ParamDef>OM_string <Parameter>elements</Parameter></ParamDef>
</FuncSynopsis>
<?sml-break>
<?sml-need 1.5i>
</RefSect1>
<RefSect1>
<Title>Parameters</Title>
<RefSect2>
<Title>Input</Title>
<VariableList>
<VarListEntry>
<Term><Symbol Role="Variable">subject</Symbol></Term>
<ListItem>
<Para>The subject that remains accessible.
</Para>
</ListItem>
</VarListEntry>
<VarListEntry>
<Term><Symbol Role="Variable">type</Symbol></Term>
<ListItem>
<Para>Identifies the type of the attribute, one of whose values is
written.
</Para>
</ListItem>
</VarListEntry>
<VarListEntry role="linebreak">
<Term><Symbol Role="Variable">value_position</Symbol></Term>
<ListItem>
<Para>The position within the above attribute of the value to be
written.  The value position can neither be negative
<IndexTerm Id="DCEADR.MAN395.indx.2">
<Primary>value position</Primary>
</IndexTerm>nor exceed the number of values present.  If
it equals the number of values present, the
segment is inserted into the attribute as a new value.
</Para>
</ListItem>
</VarListEntry>
<VarListEntry>
<Term><Symbol Role="Variable">syntax</Symbol></Term>
<ListItem>
<Para>If the value being written is not already present in the subject,
this identifies the syntax that the value has.  It must be a
permissible syntax for the attribute of which this is a value.
If the value being written is already present in the subject,
then that value's syntax is preserved and this parameter is
ignored.
</Para>
</ListItem>
</VarListEntry>
<VarListEntry>
<Term><Symbol Role="Variable">elements</Symbol></Term>
<ListItem>
<Para>The string segment to be written.  A copy of this segment occupies a position
within the string value being written, starting at the offset given by
the <Symbol Role="Variable">string_offset</Symbol> input parameter.  Any values already at or beyond
this offset are discarded.
</Para>
</ListItem>
</VarListEntry>
</VariableList>
<?sml-break>
<?sml-need 10>
</RefSect2>
<RefSect2>
<Title>Input/Output</Title>
<VariableList>
<VarListEntry>
<Term><Symbol Role="Variable">string_offset</Symbol></Term>
<ListItem>
<Para>On input this parameter contains the offset, in octets, of the start of the 
string segment to be written.  If it exceeds the current length of the string 
value being written, the parameter is taken to be equal to that current length.
</Para>
<Para>On output it contains the offset, in octets, after the last string segment written.  This result
is present if, and only if, the <Symbol Role="Variable">OM_return_code</Symbol> result is <Literal>OM_SUCCESS</Literal>.
The value returned in <Symbol Role="Variable">string_offset</Symbol> can be used as the input
<Symbol Role="Variable">string_offset</Symbol> parameter the next time this function is called.  This
enables sequential writing of the value of a long string.
</Para>
</ListItem>
</VarListEntry>
</VariableList>
<?sml-break>
<?sml-need 1.5i>
</RefSect2>
</RefSect1>
<RefSect1>
<Title>Description</Title>
<Para>The <Function>om_write()</Function> function writes
a segment of an attribute value in a private object,
<IndexTerm Id="DCEADR.MAN395.indx.3">
<Primary>attribute</Primary>
<Secondary>value</Secondary>
</IndexTerm>the <Symbol Role="Variable">subject</Symbol> parameter.
</Para>
<Para>The segment supplied is a segment of the string value that is supplied
if the complete value is written in a single call.
</Para>
<Para>The written segment is made the value's last.
The function discards any values whose offset equals
or exceeds the <Symbol Role="Variable">string_offset</Symbol> result.
If the value being written is in the local representation, it is
<IndexTerm Id="DCEADR.MAN395.indx.4">
<Primary>local representation</Primary>
</IndexTerm>converted to the nonlocal representation
<IndexTerm Id="DCEADR.MAN395.indx.5">
<Primary>nonlocal representation</Primary>
</IndexTerm>(which may entail the loss of information and which may yield a
different number of elements than that provided).
</Para>
<Para>Note that this function enables
the client to write an arbitrarily long value
without having to place a copy of the entire value in memory.
<?sml-break><?sml-need 1.5i></Para>
</RefSect1>
<RefSect1>
<Title>Return Values</Title>
<Para>The following describes a partial list of messages (or errors) that might
be returned.  Refer to the &DCETg; for complete descriptions of all error
messages.
</Para>
<VariableList>
<VarListEntry role="linebreak">
<Term><Symbol Role="Variable">OM_return_code</Symbol></Term>
<ListItem>
<Para>Indicates whether the function succeeded
and, if not, why not.  If the function is
successful, the value of <Symbol Role="Variable">OM_return_code</Symbol> is set to
<Literal>OM_SUCCESS</Literal>; whereas, if the function fails,
it has one of the values listed under <Literal>ERRORS</Literal>.
</Para>
<Para>The exact constants for <Symbol Role="Variable">OM_return_code</Symbol> are defined in the <Filename>xom.h</Filename>
header file (see the <Filename MoreInfo="RefEntry">xom.h(4xom)</Filename> reference page later
in this chapter).
</Para>
</ListItem>
</VarListEntry>
</VariableList>
<?sml-break>
<?sml-need 1.5i>
</RefSect1>
<RefSect1>
<Title>Errors</Title>
<Para>The following describes a partial list of errors that might be returned.
Refer to the &DCETg; for complete descriptions of all error messages.
<!--no-op:  l-->
</Para>
<ItemizedList>
<ListItem>
<Para><Literal>OM_FUNCTION_DECLINED</Literal>
</Para>
</ListItem>
<ListItem>
<Para><Literal>OM_FUNCTION_INTERRUPTED</Literal>
</Para>
</ListItem>
<ListItem>
<Para><Literal>OM_MEMORY_INSUFFICIENT</Literal>
</Para>
</ListItem>
<ListItem>
<Para><Literal>OM_NETWORK_ERROR</Literal>
</Para>
</ListItem>
<ListItem>
<Para><Literal>OM_NO_SUCH_OBJECT</Literal>
</Para>
</ListItem>
<ListItem>
<Para><Literal>OM_NO_SUCH_SYNTAX</Literal>
</Para>
</ListItem>
<ListItem>
<Para><Literal>OM_NO_SUCH_TYPE</Literal>
</Para>
</ListItem>
<ListItem>
<Para><Literal>OM_NOT_PRESENT</Literal>
</Para>
</ListItem>
<ListItem>
<Para><Literal>OM_NOT_PRIVATE</Literal>
</Para>
</ListItem>
<ListItem>
<Para><Literal>OM_PERMANENT_ERROR</Literal>
</Para>
</ListItem>
<ListItem>
<Para><Literal>OM_POINTER_INVALID</Literal>
</Para>
</ListItem>
<ListItem>
<Para><Literal>OM_SYSTEM_ERROR</Literal>
</Para>
</ListItem>
<ListItem>
<Para><Literal>OM_TEMPORARY_ERROR</Literal>
</Para>
</ListItem>
<ListItem>
<Para><Literal>OM_WRONG_VALUE_LENGTH</Literal>
</Para>
</ListItem>
<ListItem>
<Para><Literal>OM_WRONG_VALUE_MAKEUP</Literal>
</Para>
</ListItem>
<ListItem>
<Para><Literal>OM_WRONG_VALUE_POSITION</Literal>
</Para>
</ListItem>
<ListItem>
<Para><Literal>OM_WRONG_VALUE_SYNTAX</Literal>
</Para>
</ListItem>
</ItemizedList>
<!--no-op:  b-->
</RefSect1>
<!--+ 11/27/96 19:46:25
    | tagMorph:  $Id: om_write.3xom,v 1.1.2.4 1996/12/11 18:02:50 carrig Exp $
    | tagMorph library:  $Id: om_write.3xom,v 1.1.2.4 1996/12/11 18:02:50 carrig Exp $
    | sml-to-docbook:  1.25
    +-->
</RefEntry>
