<!--
# @OSF_COPYRIGHT@
# 
# 
# HISTORY
# $Log: dcecp.8dce,v $
# Revision 1.1.2.9  1996/12/14  17:29:25  carrig
# 	{enh,R1.2.2}
# 	Final edits
# 	[1996/12/14  17:27:12  carrig]
#
# Revision 1.1.2.8  1996/12/13  18:18:36  carrig
# 	{enh,R1.2.2}
# 	Corrections to Synopses
# 	[1996/12/13  18:16:55  carrig]
# 
# Revision 1.1.2.7  1996/12/11  21:42:00  carrig
# 	{enh,R1.2.2}
# 	Commands
# 	[1996/12/11  21:40:21  carrig]
# 
# Revision 1.1.2.6  1996/12/01  20:02:33  carrig
# 	{enh,R1.2.2}
# 	Ward's comments
# 	[1996/12/01  20:01:01  carrig]
# 
# Revision 1.1.2.5  1996/11/22  21:17:14  carrig
# 	{enh,R1.2.2}
# 	Ready for editor
# 	[1996/11/22  21:15:39  carrig]
# 
# Revision 1.1.2.4  1996/11/22  15:16:44  wardr
# 	{edit,R1.2.2}
# 	Init capped heads
# 	[1996/11/22  15:14:58  wardr]
# 
# Revision 1.1.2.3  1996/11/21  20:33:28  carrig
# 	{enh,R1.2.2}
# 	VarListEntry
# 	[1996/11/21  20:31:42  carrig]
# 
# Revision 1.1.2.2  1996/11/20  20:12:29  carrig
# 	{enh,R1.2.2}
# 	No changes
# 	[1996/11/20  20:10:39  carrig]
# 
# Revision 1.1.2.1  1996/11/11  23:21:20  wardr
# 	{edit,R1.2.2}
# 	Initial checkin after sgml conversion
# 	[1996/11/11  23:16:25  wardr]
# 
# $EndLog$
-->
<!---->
<!-- Fragment document type declaration subset:
ArborText, Inc., 1988-1993, v.4001
<!DOCTYPE Book PUBLIC "-//Davenport//DTD DocBook V2.4//EN" [
]>
-->
<RefEntry Id="DCECR.MAN20.rsml.1">
<RefMeta>
<RefEntryTitle>dcecp</RefEntryTitle>
<ManVolNum>8dce</ManVolNum>
</RefMeta>
<RefNameDiv>
<RefName><Command>dcecp</Command></RefName>
<RefPurpose>Administrative interface for DCE management tasks 
</RefPurpose>
</RefNameDiv>
<!-- COPYRIGHT NOTICE-->
<!-- Copyright (c) 1990, 1991, 1992, 1993, 1994 Open Software Foundation, Inc.-->
<!-- ALL RIGHTS RESERVED (DCE).  See the file named COPYRIGHT.DCE for-->
<!-- the full copyright text.-->
<!-- -->
<!-- -->
<!-- HISTORY-->
<!-- Revision 1.1.7.7  1996/10/28  14:56:14  wardr-->
<!-- 	{def,13588,R1.2.2}-->
<!-- 	Add Pointer to Problem Determination Guide-->
<!-- 	[1996/10/28  14:54:30  wardr]-->
<!---->
<!-- Revision 1.1.7.6  1996/06/28  19:22:30  millett-->
<!-- 	{edt,R1.2.2}-->
<!-- 	OSF edit pass-->
<!-- 	[1996/06/28  19:22:06  millett]-->
<!-- -->
<!-- Revision 1.1.7.5  1996/06/21  18:07:33  millett-->
<!-- 	{def,13517,R1.2.2}-->
<!-- 	Fixing typo missed before last submission-->
<!-- 	[1996/06/21  18:06:52  millett]-->
<!-- -->
<!-- Revision 1.1.7.4  1996/06/20  19:19:31  millett-->
<!-- 	{def,13517,R1.2.2}-->
<!-- 	Clarifying incoherent wording and other misc. consistency-->
<!-- 	corrections.-->
<!-- 	[1996/06/20  19:19:03  millett]-->
<!-- -->
<!-- Revision 1.1.7.3  1996/06/04  14:13:37  weir-->
<!-- 	Added index close range macro-->
<!-- 	[1996/06/04  14:13:05  weir]-->
<!-- -->
<!-- Revision 1.1.7.2  1996/06/03  19:22:41  millett-->
<!-- 	{def,CR13377,R1.2.2}-->
<!-- 	HP review edits-->
<!-- 	[1996/06/03  19:22:22  millett]-->
<!-- -->
<!-- Revision 1.1.7.1  1996/05/13  15:48:13  wardr-->
<!-- 	{enh,R1.2.2}-->
<!-- 	Removed changebars-->
<!-- 	[1996/05/13  15:46:41  wardr]-->
<!-- -->
<!-- Revision 1.1.5.9  1996/04/04  23:06:27  weir-->
<!-- 	Corrected one change marker-->
<!-- 	[1996/04/04  23:06:04  weir]-->
<!-- -->
<!-- Revision 1.1.5.8  1996/04/04  21:26:21  weir-->
<!-- 	CR 13293: added new objects to list-->
<!-- 	[1996/04/04  21:25:49  weir]-->
<!-- -->
<!-- Revision 1.1.5.7  1996/03/27  19:03:37  weir-->
<!-- 	Updated change markers-->
<!-- 	[1996/03/27  19:02:14  weir]-->
<!-- -->
<!-- Revision 1.1.5.6  1996/03/20  19:28:10  wardr-->
<!-- 	{edit R1.2.1}-->
<!-- 	Release Edits-->
<!-- 	[1996/03/20  19:23:05  wardr]-->
<!-- -->
<!-- Revision 1.1.5.5  1996/03/08  22:19:49  weir-->
<!-- 	Removed troublesome tbl publish format coding-->
<!-- 	[1996/03/08  22:19:23  weir]-->
<!-- -->
<!-- Revision 1.1.5.4  1996/02/02  19:58:09  weir-->
<!-- 	checking in for HP-->
<!-- 	[1996/02/02  19:56:03  weir]-->
<!-- -->
<!-- Revision 1.1.5.3  1995/12/29  19:38:59  weir-->
<!-- 	Temporarily checked back in for HP-->
<!-- 	[1995/12/29  19:37:21  weir]-->
<!-- -->
<!-- Revision 1.1.5.2  1995/12/14  17:52:45  weir-->
<!-- 	1.2.1 additions/changes added-->
<!-- 	[1995/12/14  17:51:26  weir]-->
<!-- -->
<!-- Revision 1.1.5.1  1995/12/14  15:06:11  weir-->
<!-- 	Initial check-in to secure dcecp manpages in 1.2. tree-->
<!-- 	[1995/12/14  15:04:30  weir]-->
<!-- -->
<!-- Revision 1.1.2.9  1995/12/12  14:00:45  rcb-->
<!-- 	1.1, 1.2 tech changes by weir; editorial backfill by rcb; ready for 1.2 checkout-->
<!-- 	[1995/12/12  13:55:19  rcb]-->
<!-- -->
<!-- Revision 1.1.2.8  1995/10/06  20:46:29  rcb-->
<!-- 	1.1PH: editorial pass including outstanding 1.1 edits-->
<!-- 	[1995/10/06  20:38:01  rcb]-->
<!-- -->
<!-- Revision 1.1.2.7  1995/09/22  18:38:23  rcb-->
<!-- 	preliminary editing (including outstanding 1.1 edits) for 1.1PH, 1.2-->
<!-- 	[1995/09/22  18:26:25  rcb]-->
<!-- -->
<!-- Revision 1.1.2.6  1994/11/03  23:56:38  neilson-->
<!-- 	Substituted macros for book names in cross refs.-->
<!-- 	[1994/11/03  02:42:31  neilson]-->
<!-- -->
<!-- Revision 1.1.2.5  1994/10/19  23:15:35  hileman-->
<!-- 	Incorporated review corrections.-->
<!-- 	[1994/10/19  23:15:09  hileman]-->
<!-- -->
<!-- Revision 1.1.2.4  1994/06/13  18:41:11  devobj-->
<!-- 	cr10872 - fix copyright-->
<!-- 	[1994/06/13  18:38:45  devobj]-->
<!-- -->
<!-- Revision 1.1.2.3  1994/06/09  21:52:45  willie-->
<!-- 	{reorg, beta}-->
<!-- 	Took duplicate files that Rico Cruz of IBM had put-->
<!-- 	in the /man8sec directory, and appended each to its-->
<!-- 	appropriate file in the /man8dce directory.  After beta-->
<!-- 	these appendages will be merged into the files themselves.-->
<!-- 	(Currently they are commented out with .ig ++/.++).-->
<!-- 	[1994/06/09  21:52:09  willie]-->
<!-- -->
<!-- Revision 1.1.2.2  1994/05/06  19:00:53  wardr-->
<!-- 	{enh, CR10014, R1.1}-->
<!-- 	updating reference pages-->
<!-- 	[1994/05/06  18:58:41  wardr]-->
<!-- -->
<!-- Revision 1.1.2.1  1994/04/27  19:11:55  wardr-->
<!-- 	{enh,CR10014,R1.1}-->
<!-- 	creating new reference page-->
<!-- 	[1994/04/27  19:11:01  wardr]-->
<!-- -->
<IndexTerm Id="DCECR.MAN20.indx.1">
<Primary>DCE Control Program commands</Primary>
<Secondary>dcecp</Secondary>
</IndexTerm>
<RefSynopsisDiv>
<CmdSynopsis>
<Command>dcecp</Command>
<Arg Choice="opt"><Option>s</Option></Arg>
<Arg Choice="opt"><Option>local</Option></Arg>
<Group>
<Arg Choice="plain"><Replaceable>script_name</Replaceable></Arg>
<Arg Choice="plain"><Option>c</Option><Replaceable>command</Replaceable></Arg>
</Group>
</CmdSynopsis>
<?og-ChangeEnd def,13377,R1.2.2, clarified syntax" >
</RefSynopsisDiv>
<RefSect1>
<Title>Options</Title>
<VariableList>
<VarListEntry role="linebreak">
<Term><Option>c</Option> <Symbol Role="Variable">command</Symbol></Term>
<ListItem>
<Para>A list containing one or more valid <Command>dcecp</Command> commands.  For a description of  
the <Command>dcecp</Command> command format, see <Literal>Administration Objects</Literal>.  
</Para>
</ListItem>
</VarListEntry>
<VarListEntry>
<Term><Option>s</Option></Term>
<ListItem>
<Para>Turns off inheritance of the login context. 
The default is to inherit the current login context of the  
principal that invokes <Command>dcecp</Command>. 
</Para>
</ListItem>
</VarListEntry>
<VarListEntry>
<Term><Option>local</Option> </Term>
<ListItem>
<Para>The <Option>local</Option> option specifies that the <Command>dcecp</Command> session should operate 
on the local <Command>dced</Command> object while the <Command>dced</Command> object 
is in a partial-service state. 
</Para>
</ListItem>
</VarListEntry>
</VariableList>
</RefSect1>
<RefSect1>
<Title>Arguments</Title>
<VariableList>
<VarListEntry>
<Term><Symbol Role="Variable">script_name</Symbol></Term>
<ListItem>
<Para>Filename of a user-defined script containing <Command>dcecp</Command> commands. 
</Para>
</ListItem>
</VarListEntry>
</VariableList>
</RefSect1>
<RefSect1>
<Title>Description</Title>
<Para>The DCE control program, <Command>dcecp</Command>, is the primary DCE administration 
interface, providing local and remote access to routine DCE administrative 
functions from any DCE Version 1.1 and later platform.   
</Para>
<Para>The DCE control program is built on a portable command 
language called the tool command language (Tcl).  Tcl allows the use of 
variables, if statements, list processing functions, loop functions 
and many other features commonly found in command languages.  The 
control program extends these features, providing a set of commands for 
manipulating specific DCE objects.  The control program also includes 
task scripts to help administrators perform some routine DCE 
management functions.  
Refer to the &DCEAc; for information about the basic concepts and features of <Command>dcecp</Command>.  
<!-- Refer to the \*VOSF DCE Administration Guide Core Volume\*O for information about the basic concepts and features of \*Ldcecp\*O. -->
All of Tcl is  
included in the <Command>dcecp</Command> language. 
</Para>
<RefSect2>
<Title>Invoking and Terminating dcecp</Title>
<Para>The DCE control program allows you to invoke <Command>dcecp</Command> 
commands in the following modes: 
</Para>
<ItemizedList>
<ListItem>
<Para>Interactive mode 
</Para>
</ListItem>
<ListItem>
<Para>Command-line mode 
</Para>
</ListItem>
</ItemizedList>
<VariableList>
<VarListEntry role="linebreak">
<Term><Literal>Interactive Mode</Literal></Term>
<ListItem>
<Para>Activate interactive mode by entering the <Command>dcecp</Command> command without 
any arguments.  At the <Command>dcecp</Command> prompt, enter a <Command>dcecp</Command> or Tcl command;  
<Command>dcecp</Command> executes the command, displays the result, and 
is ready to accept another command. 
</Para>
<InformalExample>
<Para><ProgramListing>% <Literal>dcecp</Literal> 
dcecp> <Literal>directory list /.: -directories</Literal> 
/.:/hosts /.:/subsys 
dcecp>
</ProgramListing></Para>
</InformalExample>
</ListItem>
</VarListEntry>
<VarListEntry role="linebreak">
<Term><Literal>Command-Line Mode</Literal></Term>
<ListItem>
<Para>Activate command-line mode from the system 
prompt by using one of the following methods:   
</Para>
<ItemizedList>
<ListItem>
<Para>Enter the <Command>dcecp</Command> command with a filename of a script containing 
<Command>dcecp</Command> commands, other valid Tcl commands, or both, as follows:   
</Para>
<InformalExample>
<Para><ProgramListing>
% <Literal>dcecp myown.Tcl  
</Literal></ProgramListing></Para>
</InformalExample>
</ListItem>
<ListItem>
<Para>Enter the <Command>dcecp</Command> command with the <Option>c</Option> option followed by 
a list containing one or more <Command>dcecp</Command> commands, as follows:  
</Para>
<InformalExample>
<Para><ProgramListing>% <Literal>dcecp -c directory create /.:/admin/printers 
</Literal></ProgramListing></Para>
</InformalExample>
<Para>Enter multiple <Command>dcecp</Command> commands by separating them with a 
<Literal>;</Literal> (semicolon) and enclosing the commands in <Literal>""</Literal> (quotation marks).  
Remember to escape shell metacharacters (for example by enclosing  
them in quotation marks).  Multiple commands must be on a single  
line, as follows:   
</Para>
<InformalExample>
<Para><ProgramListing>
% <Literal>dcecp -c "directory create /.:/admin/printers; \ </Literal>
  <Literal>directory show /.:/admin/printers" 
</Literal></ProgramListing></Para>
</InformalExample>
<Para>When you use the <Option>c</Option> option, operation results return to the  
interpreter, not to the shell.  If you enter multiple operations, the output of only the last  
operation is returned to the shell.  
This problem can be overcome by using the following ugly, but  
serviceable workaround: 
</Para>
<InformalExample>
<Para><ProgramListing>% <Literal>dcecp -c "puts [dir help]; puts [principal help]"</Literal> 
</ProgramListing></Para>
</InformalExample>
</ListItem>
</ItemizedList>
</ListItem>
</VarListEntry>
</VariableList>
<Para>Terminate an interactive <Command>dcecp</Command> session by using the <Command>exit</Command> and 
<Command>quit</Command> commands.  Use the following command syntax: 
</Para>
<InformalExample>
<Para><ProgramListing><UserInput>exit <Symbol Role="Variable">n</Symbol><Literal> 
 
quit </Literal><Symbol Role="Variable">n 
</Symbol></UserInput></ProgramListing></Para>
</InformalExample>
<Para>Use the <Symbol Role="Variable">n</Symbol> argument to specify the exit value returned to the 
shell.  The following example 
terminates a session and returns an exit value of 56 to the shell: 
</Para>
<InformalExample>
<Para><ProgramListing><UserInput>exit 56 
</UserInput></ProgramListing></Para>
</InformalExample>
<Para>By default, <Command>dcecp</Command> returns <Literal>0</Literal> (zero) on success and <Literal>1</Literal> (one) if a command fails. 
</Para>
</RefSect2>
<RefSect2>
<Title>Startup Scripts</Title>
<Para>When you invoke <Command>dcecp</Command>, the following script files are executed in the 
order shown:   
</Para>
<VariableList>
<VarListEntry role="linebreak">
<Term><Filename>[info library]/init.tcl</Filename></Term>
<ListItem>
<Para>Contains the standard Tcl initialization scripts with definitions for 
the <Literal>unknown</Literal>&ensp;command and the <Literal>auto_load</Literal> facility. 
</Para>
</ListItem>
</VarListEntry>
<VarListEntry role="linebreak">
<Term><Filename>$dcecp_library/init.dcecp</Filename></Term>
<ListItem>
<Para>Contains the initialization scripts implementing the <Command>dcecp</Command> 
commands and tasks.  The implementation sets the Tcl variable 
<Filename>dcecp_library</Filename> to <Symbol Role="Variable">dceshared</Symbol><Filename>/dcecp</Filename> by default. 
</Para>
</ListItem>
</VarListEntry>
<VarListEntry role="linebreak">
<Term><Filename>$HOME/.dcecprc</Filename></Term>
<ListItem>
<Para>Contains user customizations.   
</Para>
</ListItem>
</VarListEntry>
</VariableList>
</RefSect2>
<RefSect2>
<Title>Administration Objects</Title>
<Para RevisionFlag="Changed">A <Command>dcecp</Command> command has the following syntax: 
<?og-ChangeStart def,13377,R1.2.2,clarify syntax" ></Para>
<Synopsis><Symbol Role="Variable" RevisionFlag="Changed">object operation </Symbol>[<Symbol Role="Variable" RevisionFlag="Changed">argument</Symbol>] [<Symbol Role="Variable" RevisionFlag="Changed">-option</Symbol> [<Symbol Role="Variable" RevisionFlag="Changed">opt_arg</Symbol>]]<Symbol Role="Variable" RevisionFlag="Changed"> ... 
</Symbol></Synopsis>
<?og-ChangeEnd def,13377,R1.2.2,clarify syntax" >
<Para>where: 
</Para>
<VariableList>
<VarListEntry>
<Term><Symbol Role="Variable">object</Symbol></Term>
<ListItem>
<Para>Specifies the name of a <Command>dcecp</Command> administration object. 
Examples of administration objects are Cell Directory Service (CDS) 
directories, access control lists (ACLs), Distributed Time Service (DTS)  
servers, server control objects, and so on.  
Each administration object is briefly described below. 
</Para>
</ListItem>
</VarListEntry>
<VarListEntry>
<Term><Symbol Role="Variable">operation</Symbol></Term>
<ListItem>
<Para>Specifies the name of an action such as <Command>create</Command>, 
<Command>show</Command>, or <Literal>remove</Literal>, that is to be performed on an 
administration object.  For complete descriptions of operations 
supported by each <Command>dcecp</Command> object, refer to individual object 
reference pages.  Common operations are briefly described below. 
</Para>
</ListItem>
</VarListEntry>
<VarListEntry>
<Term><Symbol Role="Variable">argument</Symbol></Term>
<ListItem>
<Para>Specifies the name of one or more specific objects to operate on. 
Most, but not all, <Command>dcecp</Command> objects take an argument.  Refer to the 
individual reference pages for descriptions of the arguments supported by 
various objects. 
</Para>
</ListItem>
</VarListEntry>
<VarListEntry>
<Term><Symbol Role="Variable">-option</Symbol></Term>
<ListItem>
<Para>Specifies a qualifier that controls the precise behavior 
of a <Command>dcecp</Command> command.  Most, but not all, <Command>dcecp</Command> commands 
take options.  Specify options by preceding the option name with a 
dash as in <Option>replica</Option>.  Some options take an argument, 
<Symbol Role="Variable">opt_arg</Symbol>, that can be a name or a value.  
The following command shows a <Option>clearinghouse</Option> 
option and its argument, which is the name of a CDS clearinghouse: 
</Para>
<InformalExample>
<Para><ProgramListing><UserInput>directory create /.:/admin -clearinghouse /.:/boston_ch 
</UserInput></ProgramListing></Para>
</InformalExample>
</ListItem>
</VarListEntry>
</VariableList>
<Para>The DCE control program supports the following <Command>dcecp</Command> 
administration objects.  For complete descriptions of the  
administration objects, refer to the individual object  
reference pages.  
</Para>
<VariableList>
<VarListEntry>
<Term><Command>account</Command></Term>
<ListItem>
<Para>Manages an account in the DCE Security Service registry. 
</Para>
</ListItem>
</VarListEntry>
<VarListEntry>
<Term><Command>acl</Command></Term>
<ListItem>
<Para>Manages DCE ACLs. 
</Para>
</ListItem>
</VarListEntry>
<VarListEntry>
<Term><Command>attrlist</Command></Term>
<ListItem>
<Para>Manipulates attribute lists in scripts. 
</Para>
</ListItem>
</VarListEntry>
<VarListEntry>
<Term><Command>aud</Command></Term>
<ListItem>
<Para>Manages the audit daemon on any DCE host. 
</Para>
</ListItem>
</VarListEntry>
<VarListEntry>
<Term><Command>audevents</Command></Term>
<ListItem>
<Para>Displays the audit event classes on any DCE host. 
</Para>
</ListItem>
</VarListEntry>
<VarListEntry>
<Term><Command>audfilter</Command></Term>
<ListItem>
<Para>Manages audit event filters on any DCE host. 
</Para>
</ListItem>
</VarListEntry>
<VarListEntry>
<Term><Command>audtrail</Command></Term>
<ListItem>
<Para>Displays audit trail files on the local host. 
</Para>
</ListItem>
</VarListEntry>
<VarListEntry>
<Term><Command>cds</Command></Term>
<ListItem>
<Para>Manages the CDS server daemon on any DCE host. 
</Para>
</ListItem>
</VarListEntry>
<VarListEntry>
<Term><Command>cdsalias</Command></Term>
<ListItem>
<Para>Manages cell names known to CDS. 
</Para>
</ListItem>
</VarListEntry>
<VarListEntry>
<Term><Command>cdscache</Command></Term>
<ListItem>
<Para>Manages the CDS clerk cache on any DCE host. 
</Para>
</ListItem>
</VarListEntry>
<VarListEntry>
<Term><Command>cdsclient</Command></Term>
<ListItem>
<Para>Manages the CDS client daemon on any DCE host. 
</Para>
</ListItem>
</VarListEntry>
<VarListEntry>
<Term><Command>cell</Command></Term>
<ListItem>
<Para>Performs cellwide tasks. 
</Para>
</ListItem>
</VarListEntry>
<VarListEntry>
<Term><Command>cellalias</Command></Term>
<ListItem>
<Para>Performs cell aliasing and connection tasks. 
</Para>
</ListItem>
</VarListEntry>
<VarListEntry role="linebreak">
<Term><Command>clearinghouse</Command></Term>
<ListItem>
<Para>Manages CDS clearinghouses on the local host. 
</Para>
</ListItem>
</VarListEntry>
<VarListEntry>
<Term><Command>clock</Command></Term>
<ListItem>
<Para>Manages the clock on any DCE host. 
</Para>
</ListItem>
</VarListEntry>
<VarListEntry>
<Term><Command>directory</Command></Term>
<ListItem>
<Para>Manages directory entries in the CDS namespace. 
</Para>
</ListItem>
</VarListEntry>
<VarListEntry>
<Term><Command>dts</Command></Term>
<ListItem>
<Para>Manages DTS on any host. 
</Para>
</ListItem>
</VarListEntry>
<VarListEntry>
<Term><Command>endpoint</Command></Term>
<ListItem>
<Para>Displays remote endpoints, manages local endpoints. 
</Para>
</ListItem>
</VarListEntry>
<VarListEntry>
<Term><Command>group</Command></Term>
<ListItem>
<Para>Manages DCE groups in the security service. 
</Para>
</ListItem>
</VarListEntry>
<VarListEntry>
<Term><Command>host</Command></Term>
<ListItem>
<Para>Performs tasks involving a host in a DCE cell. 
</Para>
</ListItem>
</VarListEntry>
<VarListEntry>
<Term><Command>hostdata</Command></Term>
<ListItem>
<Para>Manages host-specific information on any DCE host. 
</Para>
</ListItem>
</VarListEntry>
<VarListEntry>
<Term><Command>hostvar</Command></Term>
<ListItem>
<Para>Manages host-specific variables on the local DCE host. 
</Para>
</ListItem>
</VarListEntry>
<VarListEntry>
<Term><Command>keytab</Command></Term>
<ListItem>
<Para>Manages server key tables on any DCE host. 
</Para>
</ListItem>
</VarListEntry>
<VarListEntry>
<Term><Command>link</Command></Term>
<ListItem>
<Para>Manages softlinks in CDS. 
</Para>
</ListItem>
</VarListEntry>
<VarListEntry>
<Term><Command>log</Command></Term>
<ListItem>
<Para>Manages routing for DCE serviceability messages. 
</Para>
</ListItem>
</VarListEntry>
<VarListEntry>
<Term><Command>name</Command></Term>
<ListItem>
<Para>Manages CDS name translation. 
</Para>
</ListItem>
</VarListEntry>
<VarListEntry>
<Term><Command>object</Command></Term>
<ListItem>
<Para>Manages object entries in CDS. 
</Para>
</ListItem>
</VarListEntry>
<VarListEntry>
<Term><Command>organization</Command></Term>
<ListItem>
<Para>Manages DCE organizations in the Security Service. 
</Para>
</ListItem>
</VarListEntry>
<VarListEntry>
<Term><Command>principal</Command></Term>
<ListItem>
<Para>Manages DCE principals in the Security Service. 
</Para>
</ListItem>
</VarListEntry>
<VarListEntry>
<Term><Command>registry</Command></Term>
<ListItem>
<Para>Manages DCE security replicas and registry-wide information. 
</Para>
</ListItem>
</VarListEntry>
<VarListEntry>
<Term><Command>rpcentry</Command></Term>
<ListItem>
<Para>Manages a server entry in CDS. 
</Para>
</ListItem>
</VarListEntry>
<VarListEntry>
<Term><Command>rpcgroup</Command></Term>
<ListItem>
<Para>Manages a group entry in CDS. 
</Para>
</ListItem>
</VarListEntry>
<VarListEntry>
<Term><Command>rpcprofile</Command></Term>
<ListItem>
<Para>Manages a profile entry in CDS. 
</Para>
</ListItem>
</VarListEntry>
<VarListEntry>
<Term><Command>secval</Command></Term>
<ListItem>
<Para>Manages the security validation service on any DCE host. 
</Para>
</ListItem>
</VarListEntry>
<VarListEntry>
<Term><Command>server</Command></Term>
<ListItem>
<Para>Manages DCE servers on any DCE host. 
</Para>
</ListItem>
</VarListEntry>
<VarListEntry>
<Term><Command>user</Command></Term>
<ListItem>
<Para>Performs tasks involving individual user information. 
</Para>
</ListItem>
</VarListEntry>
<VarListEntry>
<Term><Command>utc</Command></Term>
<ListItem>
<Para>Manipulates Universal Time Coordinated (UTC) timestamps. 
</Para>
</ListItem>
</VarListEntry>
<VarListEntry>
<Term><Command>uuid</Command></Term>
<ListItem>
<Para>Manipulates (generates or compares) Universal Unique Identifiers (UUIDs). 
</Para>
</ListItem>
</VarListEntry>
<VarListEntry>
<Term><Command>xattrschema</Command></Term>
<ListItem>
<Para>Manages schemas for extended registry attributes (ERAs). 
</Para>
</ListItem>
</VarListEntry>
</VariableList>
</RefSect2>
<RefSect2>
<Title>Common Operations</Title>
<Para>This section describes operations common to more 
than one object.  Some operations presented here are implemented in 
all objects, some in only a few, and some only for specific types of 
objects such as containers (for instance, CDS directories). 
</Para>
<VariableList>
<VarListEntry>
<Term><Literal>add</Literal></Term>
<ListItem>
<Para>Adds an object to a container.  It is implemented for all objects that 
represent containers. The argument 
is a list of names of containers.  The required <Option>member</Option> option is 
used to specify the name of the member to be added to the 
containers.  Its value is a list of members to be added.  If lists are 
specified for both the <Option>member</Option> option and as the argument, then 
each member name is added to each container. 
For example, it is used to add a member to a remote procedure call (RPC) 
group and is used to add an element to an RPC profile.  This operation  
returns an empty string on success. 
</Para>
</ListItem>
</VarListEntry>
<VarListEntry>
<Term><Command>catalog</Command></Term>
<ListItem>
<Para>Returns the names of all instances of an object.  It usually takes  
no argument.  In some cases, though, an argument specifying a scope,  
such as a cell name, is optional.  
For example, the <Command>principal catalog</Command> command returns a list of all 
principals in the registry.  By default, full names are returned.  Some objects  
support a <Option>simplename</Option> option, which returns names in a shorter 
form (either relative or not fully qualified).  The order of the returned 
list depends on the object. 
</Para>
</ListItem>
</VarListEntry>
<VarListEntry>
<Term><Command>create</Command></Term>
<ListItem>
<Para>Creates a new instance of an object.  It takes one argument, a list of 
names of instances to be created.  This operation 
returns an empty string on success. 
Returns an error if the object already exists.  For some objects this 
command takes a <Option>attribute</Option> option or a set of attribute options 
to specify attributes on the new object. 
</Para>
</ListItem>
</VarListEntry>
<VarListEntry>
<Term><Command>delete</Command></Term>
<ListItem>
<Para>Destroys an instance of the object.  It takes one argument, a list of 
names of instances to be deleted.  This operation 
returns an empty string on success. 
If the object does not exist, an error is returned. 
</Para>
</ListItem>
</VarListEntry>
<VarListEntry>
<Term><Command>help</Command></Term>
<ListItem>
<Para>Returns help information on the object as described in the <Literal>Help</Literal> 
section.  It takes an argument, which may be an operation supported 
by the object or the <Option>verbose</Option> option to return more information. 
</Para>
</ListItem>
</VarListEntry>
<VarListEntry>
<Term><Command>list</Command></Term>
<ListItem>
<Para>Returns a list of the names of all the members of a container.  This 
operation returns names only and not any other information about the members.
It is implemented on all objects 
that represent containers.  The argument is a list of names of containers 
for which to return members.  The order of the returned list depends on 
the object.  If more than one container name is given, all 
member names are returned in one list.   
</Para>
</ListItem>
</VarListEntry>
<VarListEntry>
<Term><Literal>modify</Literal></Term>
<ListItem>
<Para>This operation is used to modify attributes, policies, counters, or any 
other information in an object.  Therefore, all attributes, 
policies, counters, and so forth must have unique names.  This operation is not 
available to all objects. The 
argument is a list of names of objects to modify.  
</Para>
<Para>The specific modification to be made to an object 
is described by one or more of the 
<Option>add</Option>, <Option>remove</Option>, or  
<Option>change</Option> options.  If more than one is used, the entire <Literal>modify</Literal> 
operation is treated atomically in that either it all will work or none of 
it will.  The order of the options does not matter.  Each option can be used only 
once per command invocation.   
This operation 
returns an empty string on success. 
</Para>
<VariableList>
<VarListEntry>
<Term><Option>add</Option></Term>
<ListItem>
<Para>Used to add an attribute to an object or merely to add values to an 
existing attribute.  The value of this option is an attribute list. 
</Para>
</ListItem>
</VarListEntry>
<VarListEntry>
<Term><Option>remove</Option></Term>
<ListItem>
<Para>Used to remove an entire attribute or merely some values from an 
attribute.  The value of this option is an attribute list. 
</Para>
</ListItem>
</VarListEntry>
<VarListEntry>
<Term><Option>change</Option></Term>
<ListItem>
<Para>Used to change one attribute value to another.  The value of this 
option is an attribute list.   
</Para>
</ListItem>
</VarListEntry>
</VariableList>
</ListItem>
</VarListEntry>
<VarListEntry>
<Term><Literal>operations</Literal></Term>
<ListItem>
<Para>Returns a list of the operations supported by the object.  It takes no 
arguments, and always returns a Tcl list suitable for use in a 
<Command>foreach</Command> statement.  The operations in the list are in alphabetical order  
with the exception of <Command>help</Command> and <Literal>operations</Literal>, which are listed 
last.  To return the elements fully sorted, use the following command: 
</Para>
<InformalExample>
<Para><ProgramListing><UserInput>lsort [<Symbol Role="Variable">object</Symbol><Literal> operations] 
</Literal></UserInput></ProgramListing></Para>
</InformalExample>
</ListItem>
</VarListEntry>
<VarListEntry>
<Term><Literal>remove</Literal></Term>
<ListItem>
<Para>Removes an object from a container.  It is implemented for all objects 
that represent containers.  The argument is a list of names of 
containers.  The <Literal>remove</Literal> operation requires one option, 
<Option>member</Option>, which is used to specify the name of the member to be 
removed from the container.  The value is a list of names of members 
of the containers.  If the value of this option and the argument to 
the command are both lists, then each listed member is removed from 
each specified container.  If the members do not exist an error is 
returned.  This operation returns an empty string on success. 
</Para>
</ListItem>
</VarListEntry>
<VarListEntry>
<Term><Literal>rename</Literal></Term>
<ListItem>
<Para>This operation changes the name of a specified object.  The argument is a 
single name of an object to be renamed, that is, it cannot be a list.  Takes a 
required <Option>to</Option> option with a value of the new name.  The value may 
not be a list.  This operation 
returns an empty string on success. 
</Para>
</ListItem>
</VarListEntry>
<VarListEntry>
<Term><Command>show</Command></Term>
<ListItem>
<Para>Returns information about an object instance.  Objects can have 
various types of information such as attributes, counters, policies, 
and so on.  The <Command>show</Command> operation is used to return any of this 
information.  Options are passed to the command to specify what 
information is to be returned.  Most of the options used for this 
purpose are in the plural form such as <Option>all</Option>, <Option>attributes</Option>, 
<Option>counters</Option>, and <Option>members</Option>. 
</Para>
<Para>Unlike the <Command>list</Command> operation, which returns information about the 
members of a container, the <Command>show</Command> operation looks only at the named 
object instance.  If the object is a container, 
the <Command>show</Command> operation does <Literal>not</Literal> return 
information about the members, only the container itself.   
</Para>
<Para RevisionFlag="Changed">This operation takes one argument which is a list of names of instances 
to be shown. 
<?og-ChangeStart def,13517,R1.2.2,clarify wording" ></Para>
</ListItem>
</VarListEntry>
<VarListEntry>
<Term><Command RevisionFlag="Changed">synchronize</Command></Term>
<ListItem>
<Para RevisionFlag="Changed">Tells the instance to synchronize with any replicas of itself.  In CDS 
terminology, this operations performs a skulk on a directory; in DTS, it 
causes a server to synchronize.  This operation is implemented for all 
objects that support replication. 
The argument is a list of instance names to synchronize.  If more than 
one instance name is given, each instance synchronizes with all of its 
replicas.  Pairwise synchronization is not supported. This operation 
returns an empty string on success. 
<?og-ChangeEnd def,13517,R1.2.2,clarify wording" ></Para>
</ListItem>
</VarListEntry>
</VariableList>
</RefSect2>
<RefSect2>
<Title>Miscellaneous Commands</Title>
<Para>The DCE control program includes a set of commands for  
miscellaneous operations.  
</Para>
<VariableList>
<VarListEntry role="linebreak">
<Term><Filename>dcecp_initInterp</Filename></Term>
<ListItem>
<Para>Initializes a base Tcl interpreter with all the <Command>dcecp</Command> commands. 
</Para>
</ListItem>
</VarListEntry>
<VarListEntry>
<Term><Command>echo</Command></Term>
<ListItem>
<Para>Displays the supplied string as output. 
</Para>
</ListItem>
</VarListEntry>
<VarListEntry>
<Term><Literal>errtext</Literal></Term>
<ListItem>
<Para>Takes a DCE status code as an argument and returns the text of the 
associated message as found in the message catalogs.  The argument can be 
in decimal, octal (leading <Literal>0</Literal>), or hexadecimal (leading 
<Literal>0x</Literal>) notation. 
</Para>
</ListItem>
</VarListEntry>
<VarListEntry>
<Term><Command>login</Command></Term>
<ListItem>
<Para>Creates a new login context, which persists until the end of the  
<Command>dcecp</Command> session or until destroyed by <Command>logout</Command>.   
The <Command>login</Command> comand also sets the <Literal>_c</Literal> convenience variable to the  
name of the cell logged in to and the <Literal>_u</Literal> convenience variable  
to the name of the principal that issued the <Command>login</Command> 
command.  Convenience variables are discussed in a separate section of 
this reference page.  Login contexts are stacked.  Takes an account 
name as an argument.  The password is prompted for and not echoed to 
the screen.  Also takes the <Option>password</Option> option to enter a 
password. 
</Para>
</ListItem>
</VarListEntry>
<VarListEntry>
<Term><Command>logout</Command></Term>
<ListItem>
<Para>Logs you out of the current login context as established with a previous 
<Command>login</Command> command. 
You can only log out of contexts that were created with the <Command>dcecp</Command> 
<Command>login</Command>. Trying to log out of an inherited 
context results in an error.  Leaving <Command>dcecp</Command> logs out 
all contexts created in the session. 
</Para>
</ListItem>
</VarListEntry>
<VarListEntry>
<Term><Command>quit</Command></Term>
<ListItem>
<Para>Exits from <Command>dcecp</Command>.  A synonym of the Tcl built-in command 
<Command>exit</Command>. 
</Para>
</ListItem>
</VarListEntry>
<VarListEntry>
<Term><Literal>resolve</Literal></Term>
<ListItem>
<Para>Takes a partial string binding and returns a fully bound string binding. 
Takes a required <Option>interface</Option> option and an optional <Option>object</Option>  
option with an interface identifier as an 
argument to provide enough information for the mapping to occur. 
</Para>
</ListItem>
</VarListEntry>
<VarListEntry>
<Term><Literal>shell</Literal></Term>
<ListItem>
<Para>Spawns a command shell for the user.  The value of the <Literal>SHELL</Literal> 
environment variable is used to obtain the name of the shell to spawn. 
When the command shell terminates, control is returned to <Command>dcecp</Command>. 
If the shell is called with arguments, they are passed to the shell and executed. 
Control is returned upon completion.  Always returns an empty string, 
though an error exception is generated if the shell exits abnormally. 
</Para>
</ListItem>
</VarListEntry>
</VariableList>
</RefSect2>
<RefSect2>
<Title>Command Processing</Title>
<Para>The DCE control program supports the Tcl built-in commands as 
well as its own commands.  If a command name is unknown to <Command>dcecp</Command>, 
it is passed to the <Literal>unknown</Literal> procedure and <Command>dcecp</Command> evaluates 
it using the following algorithm: 
</Para>
<ItemizedList>
<ListItem>
<Para>If the command is found in a <Command>dcecp</Command> script file, <Command>dcecp</Command> executes the 
command. 
</Para>
</ListItem>
<ListItem>
<Para>If the command exists as an executable UNIX program, <Command>dcecp</Command> 
executes the command.  Therefore, you can invoke any UNIX command from 
the <Command>dcecp</Command> prompt (for example, <Literal>ls -l</Literal>).  Because you do not 
leave <Command>dcecp</Command>, you don not lose any context you have established.  
</Para>
</ListItem>
<ListItem>
<Para>If you have invoked the command at the top level of the <Command>dcecp</Command> shell and 
the command requests C-shell-like history substitution (such as <Literal>!!</Literal>, 
<Literal>!</Literal><Symbol Role="Variable">number</Symbol> or <Literal>&caret;</Literal><Symbol Role="Variable">old</Symbol><Literal>&caret;</Literal><Symbol Role="Variable">new</Symbol>), <Command>dcecp</Command> emulates the 
C shell's history substitution. 
</Para>
</ListItem>
<ListItem>
<Para>If you have invoked the command at the top level of the <Command>dcecp</Command> shell and 
the command is a unique abbreviation for another command, <Command>dcecp</Command> 
invokes the command. 
</Para>
</ListItem>
</ItemizedList>
</RefSect2>
<RefSect2>
<Title>Abbreviations</Title>
<Para>The <Command>dcecp</Command> command makes use of two mechanisms to allow all object names, 
operation names, and options to be abbreviated to the shortest unique 
string in interactive commands.  
</Para>
<Para>The first mechanism relies on the <Literal>unknown</Literal> command whose 
behavior is described in the <Literal>Command Processing</Literal> 
section of this reference page. 
</Para>
<Para>The second mechanism is built in to the 
individual <Command>dcecp</Command> commands themselves.  This mechanism allows the operation 
name to be abbreviated to the shortest unique operation string supported by
the object, and the option names to be abbreviated to the shortest unique 
string representing an option supported by an object and operation. 
</Para>
<Para>For example, consider the following <Command>directory create</Command> command: 
</Para>
<InformalExample>
<Para><ProgramListing role="page-wide"><UserInput>directory create /.:/admin/printers/ascii -replica -clearinghouse /.:/SFO_CH 
</UserInput></ProgramListing></Para>
</InformalExample>
<Para>In the abbreviated form, the same command can be entered as follows: 
</Para>
<InformalExample>
<Para><ProgramListing><UserInput>dir cre /.:/admin/printers/ascii -r -c /.:/SFO_CH 
</UserInput></ProgramListing></Para>
</InformalExample>
<Para>Although abbreviating commands is a good way to save keystrokes in typing  
interactive commands, abbreviations are not recommended for use in 
scripts.  New procedures in scripts can cause abbreviations to become 
ambiguous.  Furthermore, abbreviations are not always portable.  When 
scripts move to other machines, some definitions may be left behind so PAM
scripts will not work correctly.  Always spell out complete names in 
scripts. 
</Para>
</RefSect2>
<RefSect2>
<Title>Syntax</Title>
<Para>The <Command>dcecp</Command> commands have a default word order, which is <Symbol Role="Variable">object 
operation</Symbol>.  This order facilitates adding new objects because new 
objects can simply be added along with their operations.  
</Para>
<Para>You can configure <Command>dcecp</Command> to accept commands ordered as 
<Symbol Role="Variable">operation object</Symbol> by loading a script called 
<Filename>verb-object.dcecp</Filename>.  Users who have access to the <Symbol Role="Variable">operation 
object</Symbol> order continue to have access to the <Command>object operation</Command> 
order.  You can load the script for all users on a host by including 
the following line in the system's <Filename>init.dcecp</Filename> file: 
</Para>
<InformalExample>
<Para><ProgramListing><UserInput>source verb-object.dcecp 
</UserInput></ProgramListing></Para>
</InformalExample>
<Para>You can configure <Symbol Role="Variable">operation object</Symbol> for individual users by 
including the line in that user's <Literal>.dcecprc</Literal> file.  
</Para>
</RefSect2>
<RefSect2>
<Title>Attribute Lists</Title>
<Para>Many commands need to specify attributes to operate upon.  For 
example, the <Literal>modify</Literal> operation allows attributes to be changed and 
the <Command>create</Command> operation often allows attributes to be created along 
with the object.  In all cases, you can use an attribute 
list to specify the attributes and their values.  Doing so makes 
passing information from one command to another very easy.  For example, an 
ACL copy operation could be written as follows: 
</Para>
<InformalExample>
<Para><ProgramListing># copy acl name1 to acl name2 
# no error checking 
proc acl_copy {name1 name2} { 
  acl replace $name2 -acl [acl show $name1] 
} 
</ProgramListing></Para>
</InformalExample>
</RefSect2>
<RefSect2>
<Title>Attribute Options</Title>
<Para>While attribute lists are useful for writing scripts, they are often not 
user friendly.  For those objects that have a fixed list of attributes 
(for instance, <Command>principal</Command> and <Command>dts</Command>, but not <Command>object</Command>), 
wherever an attribute list is allowed, options for each attribute that 
have the same name as the attribute are allowed followed by their values.  For 
example, the following are equivalent: 
</Para>
<InformalExample>
<Para><ProgramListing><UserInput>principal create smith -attribute {{quota 5} {uid 123}} 
 
principal create melman -quota 5 -uid 123 
</UserInput></ProgramListing></Para>
</InformalExample>
</RefSect2>
<RefSect2>
<Title>Lists of Lists</Title>
<Para>The DCE control program interpreter relies on list structures 
to parse command input and return command output.   
For instance, the following sample command removes the <Command>user</Command> ACL entry for 
the principal <Literal>melman</Literal> from an 
object called <Literal>/.:/foo</Literal>. 
</Para>
<InformalExample>
<Para><ProgramListing><UserInput>acl modify /.:/foo -remove {user melman} 
</UserInput></ProgramListing></Para>
</InformalExample>
<Para>Because the <Option>remove</Option> option   
uses a list structure to group attributes and values in the option 
argument, it can take a list of ACL entries as in the following 
example, which removes the <Command>user</Command> ACL entry for 
the principals <Literal>melman</Literal> and <Literal>salamone</Literal>:
</Para>
<InformalExample>
<Para><ProgramListing><UserInput>acl modify /.:/foo -remove {{user melman} {user salamone}} 
</UserInput></ProgramListing></Para>
</InformalExample>
<Para>Lists of one value that do not contain spaces do not require braces.  
The string syntax of 
an ACL entry allows the type and key to be separated by a <Literal>:</Literal> (colon), so 
the following are valid: 
</Para>
<InformalExample>
<Para><ProgramListing><UserInput>acl modify /.:/foo -remove user:melman 
 
acl modify /.:/foo -remove {user:melman user:salamone} 
</UserInput></ProgramListing></Para>
</InformalExample>
<Para>If only one ACL entry given, that is, the 
<Option>remove</Option> option's value has only one element (and that element 
does not contain spaces), then braces are not needed to delimit the list. 
The following are all valid, but all are examples with unnecessary braces: 
</Para>
<InformalExample>
<Para><ProgramListing><UserInput>acl modify /.:/foo -remove {{user melman}} 
 
acl modify /.:/foo -remove {{{user melman}}} 
 
acl modify /.:/foo -remove {user:melman} 
 
acl modify /.:/foo -remove {{user:melman} {user:salamone}} 
</UserInput></ProgramListing></Para>
</InformalExample>
</RefSect2>
<RefSect2>
<Title>Convenience Variables </Title>
<Para>All <Command>dcecp</Command> commands set several variables on execution.  The 
variables contain the name of the object operated on, the return 
value of the last command, the cell name of the last object operated 
on, and so on.  To avoid unnecessary typing, 
you can substitute the value of these variables into 
the next command. 
</Para>
<Para>Convenience variables behave just like other variables in <Command>dcecp</Command>. 
Thus, you can trigger variable substitution by prepending a <Literal>$</Literal> 
(dollar sign) before the name of the variable.  Alternatively, you can 
trigger substitution by using <Command>set</Command>.  The convenience variables 
can be set only by using the DCE control program. 
</Para>
<Para>The following variables are defined by <Command>dcecp</Command>: 
</Para>
<VariableList>
<VarListEntry>
<Term><Literal>_b</Literal></Term>
<ListItem>
<Para>Holds the name of the server bound to by the last 
command.  This variable is actually a Tcl array where the indexes are 
used to identify the service.  Currently there is only one 
index is defined: <Literal>sec</Literal>.  Refer to the variable as <Literal>_b(sec)</Literal>. 
</Para>
<Para>The value specifies the name of a server in whatever manner the 
service finds useful.  This value could be the name of an RPC server 
entry in the namespace, a string binding, or the name of a 
cell.  This variable cannot be set by the user. 
</Para>
</ListItem>
</VarListEntry>
<VarListEntry>
<Term><Literal>_c</Literal></Term>
<ListItem>
<Para>Holds the cell name of the current principal.  The <Command>login</Command> command 
sets the cell name (<Literal>_c</Literal>) and principal name (<Literal>_u</Literal>)  
convenience variables at login (see the <Command>login</Command> command).   
This variable cannot be set by the user.  
</Para>
</ListItem>
</VarListEntry>
<VarListEntry>
<Term><Literal>_conf</Literal></Term>
<ListItem>
<Para>This variable alters the behavior of most commands that operate on a CDS object.   
It indicates the confidence you have in the local CDS daemon to fulfill requests.  The  
legal values are <Literal>low</Literal>, <Literal>medium</Literal>, and <Literal>high</Literal>.   
</Para>
</ListItem>
</VarListEntry>
<VarListEntry>
<Term><Literal>_e</Literal></Term>
<ListItem>
<Para>Holds the last DCE error code encountered.  This variable has meaning only if <Command>dcecp</Command> is able to  
determine what the error code is.  The value <Option>l</Option> (negative one) is used when an actual error code is unavailable.  This  
variable cannot be set by the user. 
</Para>
</ListItem>
</VarListEntry>
<VarListEntry>
<Term><Literal>_h</Literal></Term>
<ListItem>
<Para>Holds the hostname the current user is operating on.  This  
variable cannot be set by the user. 
</Para>
</ListItem>
</VarListEntry>
<VarListEntry>
<Term><Literal>_local</Literal></Term>
<ListItem>
<Para>Holds a flag that indicates the mode in which the <Command>dcecp</Command> session is operating.  This  
variable is set to <Literal>true</Literal> if the <Command>dcecp</Command> session was  
started with the <Option>local</Option> option. 
</Para>
</ListItem>
</VarListEntry>
<VarListEntry>
<Term><Literal>_n</Literal></Term>
<ListItem>
<Para>Holds a list of the names entered in the last 
command.  These names are the names that the command operated  
on, typically entered as the third argument.  
</Para>
<Para>For example, the following command lists the 
simplenames of the directories in the <Literal>.:</Literal> directory: 
</Para>
<InformalExample>
<Para><ProgramListing>dcecp> <Literal>dir list /.: -simplename</Literal> 
hosts subsys absolut_ch cell-profile fs lan-profile 
sec sec-v1 
dcecp>
</ProgramListing></Para>
</InformalExample>
<Para>The <Literal>_n</Literal> variable then contains the following name:
</Para>
<InformalExample>
<Para><ProgramListing>dcecp> <Literal>echo $_n</Literal> 
/.: 
dcecp>
</ProgramListing></Para>
</InformalExample>
<Para>The following command creates the <Literal>/.:/x</Literal> and <Literal>/.:/y</Literal> 
directories:
</Para>
<InformalExample>
<Para><ProgramListing>dcecp> <Literal>dir create {/.:/x /.:/y}</Literal> 
dcecp>
</ProgramListing></Para>
</InformalExample>
<Para>The <Literal>_n</Literal> variable then contains the following names:
</Para>
<InformalExample>
<Para><ProgramListing>dcecp> <Literal>echo $_n</Literal> 
/.:/x /.:/y 
dcecp>
</ProgramListing></Para>
</InformalExample>
</ListItem>
</VarListEntry>
<VarListEntry>
<Term><Literal>_o</Literal></Term>
<ListItem>
<Para>Holds the object used in the last operation.  For 
example, if the last command was <Literal>dir show /.:</Literal>, then <Literal>_o</Literal> 
is <Command>directory</Command>.  This variable cannot be set by the user. 
</Para>
</ListItem>
</VarListEntry>
<VarListEntry>
<Term><Literal>_p</Literal></Term>
<ListItem>
<Para>Holds the parent of the object named in the <Literal>_n</Literal> variable.  
If the <Literal>_n</Literal> variable is a 
list, the <Literal>*L_p</Literal> variable is a list of the same length, 
where each element is the 
parent of the corresponding element in <Literal>_n</Literal>.  If  
an object in <Literal>_n</Literal> has no parent, the value of <Literal>_p</Literal> is the empty string.   
This variable cannot be set by the user.  
</Para>
<Para>The following exmaple creates the directories named 
<Literal>/.:/gumby</Literal> and <Literal>/.:/pokey</Literal>.  
When the command completes the <Literal>_n</Literal> variable 
contains the names <Literal>gumby</Literal> and <Literal>pokey</Literal>. 
</Para>
<InformalExample>
<Para><ProgramListing>dcecp> <Literal>dir create {/.:/gumby /.:/pokey}</Literal> 
dcecp>
</ProgramListing></Para>
</InformalExample>
<Para>The <Literal>_p</Literal> variable contains the names of the parents of 
the <Literal>gumby</Literal> and <Literal>pokey</Literal> directories.
</Para>
<InformalExample>
<Para><ProgramListing>dcecp> <Literal>echo $_p</Literal> 
/.: /.: 
dcecp>
</ProgramListing></Para>
</InformalExample>
</ListItem>
</VarListEntry>
<VarListEntry>
<Term><Literal>_r</Literal></Term>
<ListItem>
<Para>Holds the return value of the last executed command.   
This variable cannot be set by the user. 
</Para>
</ListItem>
</VarListEntry>
<VarListEntry>
<Term><Literal>_s</Literal></Term>
<ListItem>
<Para>Holds the name of the server bound to by the last 
command.  This variable is actually a Tcl array where the indexes are used to 
identify the service.  The currently defined indexes are <Literal>sec</Literal>, 
<Command>cds</Command>, <Command>dts</Command>, and <Command>aud</Command>. 
</Para>
<Para>The value specifies the name of a server in whatever manner the 
service finds useful.  This value could be the name of an RPC server entry 
in the namespace, a string binding, or the name of a cell.  Users 
can set this variable by issuing the <Command>set</Command> command to select the 
server to use. 
</Para>
<Para>Each service treats the values of this variable (array) differently.
For example, the Security Service uses this variable to 
select the registry to bind to for the next command, and as a 
default for the next registry operation.  If bound to a read-only 
replica and an update is requested, <Command>dcecp</Command> tries to bind to 
the master registry to perform the change.  CDS  
attempts to communicate only with the CDS server named by the variable.  If 
the named CDS server cannot satisfy a request for any reason, the 
request fails.  The auditing service and DTS uses its variable in a 
manner similar to the CDS server.  To contact an audit daemon or DTS 
server on another host, set this variable to identify that server. 
</Para>
<Para>For information about an object's use of this variable, see the object's 
reference page or use the object's <Literal>help -verbose</Literal> operation. 
</Para>
</ListItem>
</VarListEntry>
<VarListEntry>
<Term><Literal>_u</Literal></Term>
<ListItem>
<Para>Holds the current principal name.  The <Command>login</Command> command 
sets the cell name (<Literal>_c</Literal>) and principal name (<Literal>_u</Literal>) convenience variables 
at login (see the <Command>login</Command> command).   
This variable cannot be set by the user. 
</Para>
</ListItem>
</VarListEntry>
</VariableList>
</RefSect2>
<RefSect2>
<Title>Error Handling</Title>
<Para>All <Command>dcecp</Command> operations return either a list of some information 
or an empty string on success.  If an error occurs, <Command>dcecp</Command> 
returns an error message.  The DCE control program also provides a 
<Command>catch</Command> command to help scripts catch errors and invoke error 
handlers. 
</Para>
<Para>The DCE control program provides two global variables that store error 
information returned from commands.  The <Literal>errorInfo</Literal> variable 
contains the stack-trace of the error messages.  When errors occur,  
<Command>dcecp</Command> commands return one line error 
messages by default.  If the variable 
<Filename>dcecp_verbose_errors</Filename> is set to <Literal>1</Literal>, then a stack 
trace as it would appear in <Literal>errorInfo</Literal> is output as well. 
</Para>
<Para RevisionFlag="Changed">When a <Command>dcecp</Command> command argument is a list of objects, the command 
operates on multiple objects.  These operations are usually performed 
iteratively.  If an error occurs, the command aborts at the time of 
error, producing an exception.  Some operations will have finished and 
others will not have.  These operations are always performed in the 
order listed, and the error message should make it clear on which 
object the command failed. 
<?og-ChangeStart def,13588,R1.2.2,Add Pointer to Problem Detmination Guide"></Para>
<Para RevisionFlag="Changed">Refer to the &DCETg; for complete descriptions of all error
messages.
<?og-ChangeEnd def,13588,R1.2.2,Add Pointer to Problem Detmination Guide"></Para>
</RefSect2>
<RefSect2 RevisionFlag="Changed">
<Title>Help</Title>
<Para>The DCE control program provides several kinds of help.  All returned  
help strings are obtained from appropriate message catalogs. 
</Para>
<Para>To see which operations an object supports, use the  
<Literal>operations</Literal> command.  An example follows: 
</Para>
<InformalExample>
<Para><ProgramListing>dcecp> <Literal>principal operations</Literal> 
catalog create delete modify rename show help operations 
dcecp>
</ProgramListing></Para>
</InformalExample>
<Para>This command provides simple help similar to usage messages found on many 
systems.  Users unsure of an operation name or of whether an operation is 
supported by an object can use this command to find the answer.  The 
output is a <Command>dcecp</Command> list that can be used by other <Command>dcecp</Command> 
commands. 
</Para>
<Para>To see other information about an object, use an object's <Command>help</Command> 
operation.  All <Command>dcecp</Command> objects have a <Command>help</Command> operation that 
offers three kinds of information. 
</Para>
<ItemizedList>
<ListItem>
<Para>View brief information about an object's operations by using <Command>help</Command> 
without arguments or options.  Operations are listed in alphabetical 
order with the <Literal>operations</Literal> and <Command>help</Command> operations listed last 
because all objects support these operations.  An example is as follows: 
</Para>
<InformalExample>
<Para><ProgramListing role="page-wide">dcecp> <Literal>principal help</Literal> 
catalog             Returns all the names of principals in the registry.
create              Creates a DCE principal.
delete              Deletes a principal from the registry.
modify              Changes the information about a principal.
rename              Renames the specified principal.
show                Returns the attributes of a principal.
help                Prints a summary of command-line options.
operations          Returns a list of the valid operations for this command.
dcecp> 
</ProgramListing></Para>
</InformalExample>
</ListItem>
<ListItem>
<Para>View brief information about the options an operation supports by using 
<Command>help</Command> with one argument&mdash;the name of the operation.  This 
operation returns attribute options in alphabetical order.  If no options are 
supported, an empty string is returned.  An example follows: 
</Para>
<InformalExample>
<Para><ProgramListing role="page-wide">dcecp> <Literal>principal help create</Literal> 
-alias              Add principal named as an alias of specified uid.
-attribute          Attribute list to be assigned to the new principal.
-fullname           Fullname of the new principal.
-quota              Quota of the new principal.
-uid                User Identifier of the new principal.
-uuid               Orphaned UUID to be adopted by the specified principal.
dcecp> 
</ProgramListing></Para>
</InformalExample>
</ListItem>
<ListItem>
<Para>View a short description of a <Command>dcecp</Command> object by using the <Command>help</Command> 
operation with the <Option>verbose</Option> option.  This operation returns text 
explaining what the object represents and how to use it.  An example 
follows:  
</Para>
<InformalExample>
<Para><ProgramListing role="page-wide">dcecp> <Literal>principal help -verbose</Literal> 
This object allows manipulation of principal information stored
in the DCE registry.  The argument is a list of either relative or
fully-qualified principal names.  Specify fixed attributes using
attribute options or an attribute list.  Specify any extended attributes
using an attribute list.  Principal operations connect to a registry that
can service the request.  Specify a particular registry by setting the
_s(sec) convenience variable to be a cell-relative or global replica
name, or the binding of the host where the replica exists.  The
completed operation sets the _b(sec) convenience variable to the name
of the registry contacted.
dcecp>
</ProgramListing></Para>
</InformalExample>
</ListItem>
</ItemizedList>
<?og-ChangeStart Def,13377,R1.2.2,add util lib">
</RefSect2>
<RefSect2>
<Title RevisionFlag="Changed">Utility Library</Title>
<Para RevisionFlag="Changed">The file <Filename>opt/dcelocal/dcecp/utility.dcp</Filename> contains Tcl functions useful for 
DCE administration.  The functions, which can vary from release to release, 
are fully commented to document their use. 
<?og-ChangeEnd Def,13377,R1.2.2,add util lib"></Para>
<Para><!-- OSF SPECIAL-->
<!-- PUT FOLLOWING IN FOR OSF VERSION AND TAKE FROM "REF PAGES" TO HERE OUT-->
</Para>
</RefSect2>
<RefSect2>
<Title>Reference Pages</Title>
<!-- OSF VERSION -->
<Para>Users can use the <Command>man</Command> command on [POSIX.2] systems to view the 
reference page for any <Command>dcecp</Command> object without exiting <Command>dcecp</Command>. 
This capability helps users avoid losing any context that has been 
established in the current <Command>dcecp</Command> session. 
For example, the user can get detailed help on the 
<Command>principal</Command> command by entering the following: 
</Para>
<InformalExample>
<Para><ProgramListing>dcecp> <Literal>man principal 
</Literal></ProgramListing></Para>
</InformalExample>
<!-- HP SPECIAL-->
<!-- PUT FOLLOWING IN FOR HP VERSION AND TAKE FROM "REF PAGES" TO HERE OUT-->
<!-- .SS "Reference Pages"-->
<!-- HP VERSION -->
<!-- To display a reference page for a \*Ldcecp\*O administration object,  -->
<!-- use the \*Lman\*O command and preface the object name with \*Ldcecp_\*O.   -->
<!-- For example to display the \*Lregistry\*O reference page, enter: -->
<!-- .iS -->
<!-- man dcecp_registry -->
<!-- .iE  -->
<!-- Users with [POSIX.2] systems can view \*Ldcecp\*O administration  -->
<!-- object reference pages without exiting \*Ldcecp\*O.-->
</RefSect2>
<RefSect2>
<Title>Command-Line Editing</Title>
<Para>You can edit a line before it is sent to <Command>dcecp</Command> by typing certain 
control characters and escape sequences.  To enter a control character, 
hold down the <Literal>&lt;Control></Literal> key and press the appropriate character 
key. (Control characters are indicated in DCE documentation by the  
notation <Literal>&lt;Ctrl-</Literal><Symbol Role="Variable">x</Symbol><Literal>></Literal>, where <Symbol Role="Variable">x</Symbol> is the second key.)  To enter  
an escape sequence, press <Literal>&lt;Escape></Literal> then press one or more  
character keys.  (Escape sequences are indicated in DCE documentation by  
the notation <Literal>&lt;ESC&ensp;</Literal><Symbol Role="Variable">x</Symbol><Literal>></Literal>, where <Symbol Role="Variable">x</Symbol> is the second key.) 
Escape sequences are case-sensitive; control characters are not. 
</Para>
<Para>You can enter an editing command anywhere on a line.  In addition, you 
can enter <Literal>&lt;Return></Literal> anywhere on the line. 
</Para>
<Para>You can specify a number [<Symbol Role="Variable">n</Symbol>] as a repeat count.  To enter a 
repeat count, press <Literal>&lt;Escape></Literal>, a number, and the command you 
want to execute. 
</Para>
<Para>For example, <Literal>&lt;ESC&ensp;4>&lt;Ctrl-D></Literal> deletes the next four characters on a line. 
</Para>
<Para>Use the following control characters and escape sequences for line editing: 
</Para>
<VariableList>
<VarListEntry role="linebreak">
<Term><Literal>Control Sequence</Literal></Term>
<ListItem>
<Para><Literal>Action Performed</Literal> 
</Para>
</ListItem>
</VarListEntry>
<VarListEntry>
<Term><Literal>&lt;Ctrl-A></Literal></Term>
<ListItem>
<Para>Move to the beginning of the line 
</Para>
</ListItem>
</VarListEntry>
<VarListEntry>
<Term><Literal>&lt;Ctrl-B></Literal></Term>
<ListItem>
<Para>Move left (backward) [<Symbol Role="Variable">n</Symbol>] 
</Para>
</ListItem>
</VarListEntry>
<VarListEntry>
<Term><Literal>&lt;Ctrl-D></Literal></Term>
<ListItem>
<Para>Delete the next character [<Symbol Role="Variable">n</Symbol>] 
</Para>
</ListItem>
</VarListEntry>
<VarListEntry>
<Term><Literal>&lt;Ctrl-E></Literal></Term>
<ListItem>
<Para>Move to the end of the line 
</Para>
</ListItem>
</VarListEntry>
<VarListEntry>
<Term><Literal>&lt;Ctrl-F></Literal></Term>
<ListItem>
<Para>Move right (forward) [<Symbol Role="Variable">n</Symbol>] 
</Para>
</ListItem>
</VarListEntry>
<VarListEntry>
<Term><Literal>&lt;Ctrl-G></Literal></Term>
<ListItem>
<Para>Ring the bell 
</Para>
</ListItem>
</VarListEntry>
<VarListEntry>
<Term><Literal>&lt;Ctrl-H></Literal></Term>
<ListItem>
<Para>Delete the character before the cursor [<Symbol Role="Variable">n</Symbol>] 
</Para>
</ListItem>
</VarListEntry>
<VarListEntry>
<Term><Literal>&lt;Ctrl-I></Literal></Term>
<ListItem>
<Para>Complete the filename (<Literal>&lt;Tab></Literal>) 
</Para>
</ListItem>
</VarListEntry>
<VarListEntry>
<Term><Literal>&lt;Ctrl-J></Literal></Term>
<ListItem>
<Para>Done with the line (<Literal>&lt;Return></Literal>) 
</Para>
</ListItem>
</VarListEntry>
<VarListEntry>
<Term><Literal>&lt;Ctrl-K></Literal></Term>
<ListItem>
<Para>Kill to the end of the line (or column [<Symbol Role="Variable">n</Symbol>])
</Para>
</ListItem>
</VarListEntry>
<VarListEntry>
<Term><Literal>&lt;Ctrl-L></Literal></Term>
<ListItem>
<Para>Redisplay the line 
</Para>
</ListItem>
</VarListEntry>
<VarListEntry>
<Term><Literal>&lt;Ctrl-M></Literal></Term>
<ListItem>
<Para>Done with the line (alternate <Literal>&lt;Return></Literal>) 
</Para>
</ListItem>
</VarListEntry>
<VarListEntry>
<Term><Literal>&lt;Ctrl-N></Literal></Term>
<ListItem>
<Para>Get the next line from history [<Symbol Role="Variable">n</Symbol>] 
</Para>
</ListItem>
</VarListEntry>
<VarListEntry>
<Term><Literal>&lt;Ctrl-P></Literal></Term>
<ListItem>
<Para>Get the previous line from history [<Symbol Role="Variable">n</Symbol>] 
</Para>
</ListItem>
</VarListEntry>
<VarListEntry>
<Term><Literal>&lt;Ctrl-R></Literal></Term>
<ListItem>
<Para>Search backward (or forward if [<Symbol Role="Variable">n</Symbol>]) through history for the text;  
start the line if the text begins with an up arrow 
</Para>
</ListItem>
</VarListEntry>
<VarListEntry>
<Term><Literal>&lt;Ctrl-T></Literal></Term>
<ListItem>
<Para>Transpose the characters 
</Para>
</ListItem>
</VarListEntry>
<VarListEntry>
<Term><Literal>&lt;Ctrl-V></Literal></Term>
<ListItem>
<Para>Insert the next character even if it is an edit command 
</Para>
</ListItem>
</VarListEntry>
<VarListEntry>
<Term><Literal>&lt;Ctrl-W></Literal></Term>
<ListItem>
<Para>Wipe to the mark 
</Para>
</ListItem>
</VarListEntry>
<VarListEntry role="linebreak">
<Term><Literal>&lt;Ctrl-X>&lt;Ctrl-X></Literal></Term>
<ListItem>
<Para>Exchange the current location and mark 
</Para>
</ListItem>
</VarListEntry>
<VarListEntry>
<Term><Literal>&lt;Ctrl-Y></Literal></Term>
<ListItem>
<Para>Yank back the last killed test 
</Para>
</ListItem>
</VarListEntry>
<VarListEntry>
<Term><Literal>&lt;Ctrl-[></Literal></Term>
<ListItem>
<Para>Start an escape sequence (<Literal>&lt;Escape></Literal>) 
</Para>
</ListItem>
</VarListEntry>
<VarListEntry>
<Term><Literal>&lt;Ctrl-]></Literal></Term>
<ListItem>
<Para>Move forward to the next character <Symbol Role="Variable">c</Symbol> 
</Para>
</ListItem>
</VarListEntry>
<VarListEntry>
<Term><Literal>&lt;Ctrl-?></Literal></Term>
<ListItem>
<Para>Delete the character before the cursor [<Symbol Role="Variable">n</Symbol>] 
</Para>
</ListItem>
</VarListEntry>
<VarListEntry role="linebreak">
<Term><Literal>Escape Sequence</Literal></Term>
<ListItem>
<Para><Literal>Action Performed</Literal> 
</Para>
</ListItem>
</VarListEntry>
<VarListEntry role="linebreak">
<Term><Literal>&lt;ESC>&lt;Ctrl-H></Literal></Term>
<ListItem>
<Para>Delete the previous word (<Literal>&lt;Backspace></Literal>) [<Symbol Role="Variable">n</Symbol>] 
</Para>
</ListItem>
</VarListEntry>
<VarListEntry role="linebreak">
<Term><Literal>&lt;ESC>&lt;Delete></Literal></Term>
<ListItem>
<Para>Delete the previous word (<Literal>&lt;Delete></Literal>) [<Symbol Role="Variable">n</Symbol>] 
</Para>
</ListItem>
</VarListEntry>
<VarListEntry role="linebreak">
<Term><Literal>&lt;ESC>&lt;Space></Literal></Term>
<ListItem>
<Para>Set the mark (<Literal>&lt;Space></Literal>); refer to the <Literal>&lt;Ctrl-X>&lt;Ctrl-X></Literal> and  
<Literal>&lt;Ctrl-Y></Literal> control 
characters 
</Para>
</ListItem>
</VarListEntry>
<VarListEntry>
<Term><Literal>&lt;ESC&ensp;.></Literal></Term>
<ListItem>
<Para>Get the last (or [<Symbol Role="Variable">n</Symbol>]th) word from the previous line 
</Para>
</ListItem>
</VarListEntry>
<VarListEntry>
<Term><Literal>&lt;ESC&ensp;?></Literal></Term>
<ListItem>
<Para>Show the possible completions 
</Para>
</ListItem>
</VarListEntry>
<VarListEntry>
<Term><Literal>&lt;ESC&ensp;&lt;></Literal></Term>
<ListItem>
<Para>Move to the start of history 
</Para>
</ListItem>
</VarListEntry>
<VarListEntry>
<Term><Literal>&lt;ESC&ensp;>></Literal></Term>
<ListItem>
<Para>Move to the end of history 
</Para>
</ListItem>
</VarListEntry>
<VarListEntry>
<Term><Literal>&lt;ESC&ensp;b></Literal></Term>
<ListItem>
<Para>Move backward one word [<Symbol Role="Variable">n</Symbol>] 
</Para>
</ListItem>
</VarListEntry>
<VarListEntry>
<Term><Literal>&lt;ESC&ensp;d></Literal></Term>
<ListItem>
<Para>Delete the word under the cursor [<Symbol Role="Variable">n</Symbol>] 
</Para>
</ListItem>
</VarListEntry>
<VarListEntry>
<Term><Literal>&lt;ESC&ensp;f></Literal></Term>
<ListItem>
<Para>Move forward one word [<Symbol Role="Variable">n</Symbol>] 
</Para>
</ListItem>
</VarListEntry>
<VarListEntry>
<Term><Literal>&lt;ESC&ensp;l></Literal></Term>
<ListItem>
<Para>Make the word lowercase [<Symbol Role="Variable">n</Symbol>] 
</Para>
</ListItem>
</VarListEntry>
<VarListEntry>
<Term><Literal>&lt;ESC&ensp;u></Literal></Term>
<ListItem>
<Para>Make the word uppercase [<Symbol Role="Variable">n</Symbol>] 
</Para>
</ListItem>
</VarListEntry>
<VarListEntry>
<Term><Literal>&lt;ESC&ensp;y></Literal></Term>
<ListItem>
<Para>Yank back the last killed text 
</Para>
</ListItem>
</VarListEntry>
<VarListEntry>
<Term><Literal>&lt;ESC&ensp;w></Literal></Term>
<ListItem>
<Para>Make area up to mark yankable 
</Para>
</ListItem>
</VarListEntry>
<VarListEntry>
<Term><Literal>&lt;ESC&ensp;</Literal><Symbol Role="Variable">nn</Symbol><Literal>></Literal></Term>
<ListItem>
<Para>Set repeat count to the number <Symbol Role="Variable">nn</Symbol> 
</Para>
</ListItem>
</VarListEntry>
</VariableList>
<Para>The DCE control program also supports filename completion.  For 
example, suppose the root directory has the following files in it: 
<Filename>vmunix</Filename>, <Literal>core</Literal>, <Filename>vmunix.old</Filename>.
</Para>
<Para>If you type <Command>rm /v</Command> and then press <Literal>&lt;Tab></Literal>, <Command>dcecp</Command> 
finishes off as much of the name as possible by adding <Literal>munix</Literal>. 
If the name is not unique, the terminal alarm sounds.  If 
you enter <Literal>&lt;ESC&ensp;?></Literal>, <Command>dcecp</Command>  
displays the two possible complete filenames: <Filename>vmunix</Filename> and 
<Filename>vmunix.old</Filename>.  If you respond by entering a <Literal>.</Literal> (period) and by 
entering <Literal>&lt;Tab></Literal>, <Command>dcecp</Command> completes the filename for you. 
</Para>
</RefSect2>
<RefSect2>
<Title>Command History and Command-Line Recall</Title>
<Para>The DCE control program includes a history facility that stores 
previously entered commands.  View the stored commands using the 
<Command>history</Command> command. 
</Para>
<Para>By default, the history facility stores the 20 most recent commands, 
but you can use a <Literal>history keep</Literal> command to change this as follows:
</Para>
<InformalExample>
<Para><ProgramListing>dcecp> <Literal>history keep 50 </Literal> 
dcecp>
</ProgramListing></Para>
</InformalExample>
<Para>Each stored command is numbered so you can recall it by using a 
<Literal>!</Literal> (exclamation point) followed by the event number, as follows: 
</Para>
<InformalExample>
<Para><ProgramListing>dcecp> <Literal>!7</Literal> 
[<Replaceable>execution of event 7</Replaceable>] 
dcecp> 
</ProgramListing></Para>
</InformalExample>
<Para>Recall a specific command using an <Literal>!</Literal> (exclamation point) followed by the  
first unique characters of a previously entered command, as follows: 
</Para>
<InformalExample>
<Para><ProgramListing>dcecp> <Literal>!dir</Literal> 
[<Replaceable>execution of last event beginning with</Replaceable> <Literal>dir</Literal>]  
dcecp>
</ProgramListing></Para>
</InformalExample>
<Para>You can also recall and revise the most recent command using the 
<Literal>&caret;</Literal><Symbol Role="Variable">old</Symbol><Literal>&caret;</Literal><Symbol Role="Variable">new</Symbol> syntax familiar to UNIX users, as follows: 
</Para>
<InformalExample>
<Para><ProgramListing>dcecp> <Literal>directory create /.:/admin/printers</Literal> 
[error message]  
dcecp>
dcecp> <Literal>&caret;vreate&caret;create</Literal> 
<Replaceable>[command output] </Replaceable> 
dcecp>
</ProgramListing></Para>
</InformalExample>
</RefSect2>
</RefSect1>
<RefSect1>
<Title>Examples</Title>
<RefSect2>
<Title>Invocations</Title>
<Para>The following examples show some ways to issue <Command>dcecp</Command> commands: 
</Para>
<OrderedList>
<ListItem>
<Para>Invoke <Command>dcecp</Command> for interactive use: 
</Para>
<InformalExample>
<Para><ProgramListing>% <Literal>dcecp</Literal>
dcecp> 
</ProgramListing></Para>
</InformalExample>
</ListItem>
<ListItem>
<Para>Invoke <Command>dcecp</Command> for a single command: 
</Para>
<InformalExample>
<Para><ProgramListing>% <Literal>dcecp -c clock show</Literal> 
1994-04-21-19:12:42.203+00:00I----- 
% 
</ProgramListing></Para>
</InformalExample>
</ListItem>
<ListItem>
<Para>Invoke <Command>dcecp</Command> and run a script: 
</Para>
<InformalExample>
<Para><ProgramListing>% <Literal>dcecp get_users.Tcl</Literal> 
% 
</ProgramListing></Para>
</InformalExample>
</ListItem>
</OrderedList>
</RefSect2>
<RefSect2>
<Title>Simple Object Commands</Title>
<InformalExample>
<Para><ProgramListing>dcecp> <Literal>acl show -ic /.:</Literal> 
{unauthenticated r--t---} 
{group subsys/dce/cds-admin rwdtcia} 
{group subsys/dce/cds-server rwdtcia} 
{any_other r--t---} 
dcecp>

% <Literal>dcecp -c directory show /.:/subsys</Literal> 
{RPC_ClassVersion {01 00}} 
{CDS_CTS 1995-10-11-14:06:47.884826100/08-00-09-85-b5-a6} 
{CDS_UTS 1995-10-23-03:06:43.209673100/08-00-09-85-b5-a6} 
{CDS_ObjectUUID 0c27c0ac-03d6-11cf-ad88-08000985b5a6} 
{CDS_Replicas 
 {{CH_UUID 03ccab5c-03d6-11cf-ad88-08000985b5a6} 
  {CH_Name /.../gumby1/blech_ch} 
  {Replica_Type Master} 
  {Tower {ncadg_ip_udp 15.22.50.213}} 
  {Tower {ncacn_ip_tcp 15.22.50.213}}}} 
{CDS_AllUpTo 1995-10-23-13:06:43.560848100/08-00-09-85-b5-a6} 
{CDS_Convergence medium} 
{CDS_ParentPointer 
 {{Parent_UUID 044a2a14-03d6-11cf-ad88-08000985b5a6} 
  {Timeout 
    {expiration 1994-04-19-16:39:58.049} 
    {extension +1-00:00:00.000I0.000}} 
    {myname /.../brain_cell.osf.org/subsys}} 
{CDS_DirectoryVersion 3.0} 
{CDS_ReplicaState on} 
{CDS_ReplicaType Master} 
{CDS_LastSkulk 1995-10-23-13:06:43.560848100/08-00-09-85-b5-a6} 
{CDS_LastUpdate 1995-10-23-03:06:43.209673100/08-00-09-85-b5-a6} 
{CDS_Epoch 0c3512fc-03d6-11cf-ad88-08000985b5a6} 
{CDS_ReplicaVersion 3.0} 
%
</ProgramListing></Para>
</InformalExample>
</RefSect2>
<RefSect2>
<Title>The foreach Loop</Title>
<InformalExample>
<Para><ProgramListing>dcecp> <Literal>foreach i [group list temps] { 
       account modify $i temps research -expdate 6/30/95} 
</Literal></ProgramListing></Para>
</InformalExample>
</RefSect2>
</RefSect1>
<RefSect1 RevisionFlag="Changed">
<Title>Related Information</Title>
<?og-ChangeStart def,13517,R1.2.2,add related info">
<Para>Commands: 
<!-- SAME FOR OSF AND HP-->
<!--no-op:  1-->
<Filename MoreInfo="RefEntry">cds_intro(8cds)</Filename>, 
<Filename MoreInfo="RefEntry">dce_intro(8dce)</Filename>,  
<Filename MoreInfo="RefEntry">dts_intro(8dts)</Filename>,  
<Filename MoreInfo="RefEntry">sec_intro(8sec)</Filename>. 
<!--no-op:  b-->
<?og-ChangeEnd def,13517,R1.2.2,add related info"><IndexTerm Id="DCECR.MAN20.indx.2" SpanEnd="DCECR.MAN20.indx.1"></Para>
</RefSect1>
<!--+ 11/07/96 22:10:27
    | tagMorph:  $Id: dcecp.8dce,v 1.1.2.9 1996/12/14 17:29:25 carrig Exp $
    | tagMorph library:  $Id: dcecp.8dce,v 1.1.2.9 1996/12/14 17:29:25 carrig Exp $
    | sml-to-docbook:  1.24
    +-->
</RefEntry>
