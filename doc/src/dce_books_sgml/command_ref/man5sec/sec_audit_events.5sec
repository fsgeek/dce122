<!--
# @OSF_COPYRIGHT@
# 
# 
# HISTORY
# $Log: sec_audit_events.5sec,v $
# Revision 1.1.2.11  1996/12/14  17:18:08  carrig
# 	{enh,R1.2.2}
# 	Final edits
# 	[1996/12/14  17:17:45  carrig]
#
# Revision 1.1.2.10  1996/12/13  14:35:22  carrig
# 	{enh,R1.2.2}
# 	Minor edits
# 	[1996/12/13  14:34:40  carrig]
# 
# Revision 1.1.2.8  1996/12/12  22:10:56  carrig
# 	{enh,R1.2.2}
# 	Synopses
# 	[1996/12/12  22:10:29  carrig]
# 
# Revision 1.1.2.7  1996/12/01  20:53:01  carrig
# 	{enh,R1.2.2}
# 	Ward's comments
# 	[1996/12/01  20:52:35  carrig]
# 
# Revision 1.1.2.6  1996/11/26  17:04:27  weir
# 	Changed RefName tagging for TOC
# 	[1996/11/26  17:03:43  weir]
# 
# Revision 1.1.2.5  1996/11/23  22:40:29  weir
# 	Removed thinsp entities in parenthesized index strings
# 	[1996/11/23  22:40:10  weir]
# 
# Revision 1.1.2.4  1996/11/22  21:12:50  carrig
# 	{enh,R1.2.2}
# 	Ready for editor
# 	[1996/11/22  21:12:27  carrig]
# 
# Revision 1.1.2.3  1996/11/21  19:07:35  wardr
# 	{edit,R1.2.2}
# 	Init capped heads
# 	[1996/11/21  19:07:15  wardr]
# 
# Revision 1.1.2.2  1996/11/20  20:05:55  carrig
# 	{enh,R1.2.2}
# 	VarListEntry
# 	[1996/11/20  20:05:19  carrig]
# 
# Revision 1.1.2.1  1996/11/11  23:19:16  wardr
# 	{edit,R1.2.2}
# 	Initial checkin after sgml conversion
# 	[1996/11/11  23:15:18  wardr]
# 
# $EndLog$
-->
<!---->
<!-- Fragment document type declaration subset:
ArborText, Inc., 1988-1993, v.4001
<!DOCTYPE Book PUBLIC "-//Davenport//DTD DocBook V2.4//EN" [
]>
-->
<RefEntry Id="DCECR.MAN152.rsml.1">
<RefMeta>
<RefEntryTitle>sec_audit_events</RefEntryTitle>
<ManVolNum>5sec</ManVolNum>
</RefMeta>
<RefNameDiv>
<RefName><Command>sec_audit_events</Command></RefName>
<RefPurpose>Auditable events for the security services
</RefPurpose>
</RefNameDiv>
<!-- COPYRIGHT NOTICE-->
<!-- Copyright (c) 1990, 1991, 1992, 1993, 1994 Open Software Foundation, Inc.-->
<!-- ALL RIGHTS RESERVED (DCE).  See the file named COPYRIGHT.DCE for-->
<!-- the full copyright text.-->
<!-- -->
<!-- -->
<!-- HISTORY-->
<!-- Revision 1.1.6.4  1996/08/15  17:10:24  weir-->
<!-- 	CR 13393: corrected format error-->
<!-- 	[1996/08/15  17:10:04  weir]-->
<!---->
<!-- Revision 1.1.6.3  1996/08/15  16:59:28  weir-->
<!-- 	CR 13393: add REPADMIN_SetSwRev audit event-->
<!-- 	[1996/08/15  16:58:29  weir]-->
<!-- -->
<!-- Revision 1.1.6.2  1996/07/26  21:32:32  millett-->
<!-- 	{def,13338,R1.2.2}-->
<!-- 	Changing 0x12G to 0x130 for LookupByName-->
<!-- 	[1996/07/26  21:31:52  millett]-->
<!-- -->
<!-- Revision 1.1.6.1  1996/05/13  15:10:29  wardr-->
<!-- 	{enh,R1.2.2}-->
<!-- 	Removed changebars-->
<!-- 	[1996/05/13  15:10:12  wardr]-->
<!-- -->
<!-- Revision 1.1.4.2  1996/02/07  20:18:26  rcb-->
<!-- 	R1.2.1: editorial pass following HP revision-->
<!-- 	[1996/02/07  20:15:27  rcb]-->
<!-- -->
<!-- Revision 1.1.4.1  1996/02/02  19:49:20  weir-->
<!-- 	CR 13293: miscellaneous HP revisions-->
<!-- 	[1996/02/02  19:48:49  weir]-->
<!-- -->
<!-- Revision 1.1.2.10  1995/12/18  17:23:28  rcb-->
<!-- 	PH1.1: final fixes-->
<!-- 	[1995/12/18  13:36:31  rcb]-->
<!-- -->
<!-- Revision 1.1.2.9  1995/10/18  13:51:01  rcb-->
<!-- 	PH1.1: editorial improvement and Prentice-Hall publish formatting-->
<!-- 	[1995/10/17  19:02:49  rcb]-->
<!-- -->
<!-- Revision 1.1.2.8  1995/09/22  18:37:18  rcb-->
<!-- 	preliminary editing (including outstanding 1.1 edits) for 1.1PH, 1.2-->
<!-- 	[1995/09/22  18:21:00  rcb]-->
<!-- -->
<!-- Revision 1.1.2.7  1994/10/19  14:16:09  willie-->
<!-- 	{enh, 10234, R1.1}-->
<!-- 	Incorporated edit pass.-->
<!-- 	[1994/10/19  14:15:41  willie]-->
<!-- -->
<!-- Revision 1.1.2.6  1994/10/18  15:42:26  willie-->
<!-- 	{enh, 10234.  R1.1}-->
<!-- 	Incorporated ERA and deleagion input.-->
<!-- 	[1994/10/18  15:41:30  willie]-->
<!-- -->
<!-- Revision 1.1.2.5  1994/10/11  21:02:42  willie-->
<!-- 	{enh, 10234, R1.1}-->
<!-- 	[DIncorporatefinal review comments.-->
<!-- 	[1994/10/11  21:02:18  willie]-->
<!-- -->
<!-- Revision 1.1.2.4  1994/09/16  20:34:15  hal-->
<!-- 	Corrected cross references to audit files.-->
<!-- 	Added change bars to indicate page is new for 1.1.-->
<!-- 	{1.1,10234,enh}-->
<!-- 	[1994/09/16  20:33:59  hal]-->
<!-- -->
<!-- Revision 1.1.2.3  1994/08/29  20:50:26  bmoy-->
<!-- 	Added index entries.-->
<!-- 	[1994/08/29  20:50:15  bmoy]-->
<!-- -->
<!-- Revision 1.1.2.2  1994/06/13  18:39:42  devobj-->
<!-- 	cr10872 - fix copyright-->
<!-- 	[1994/06/13  18:37:50  devobj]-->
<!-- -->
<!-- Revision 1.1.2.1  1994/05/10  01:32:39  willie-->
<!-- 	{enh, R1.1}-->
<!-- 	New refpage.  Unreviewed.-->
<!-- 	[1994/05/10  01:32:10  willie]-->
<!-- -->
<!-- -->
<!-- -->
<!-- -->
<!-- -->
<!-- HP History:-->
<!--	HP revision /main/HPDCE02/1  1995/10/20  15:28 UTC  millett-->
<!-- 	16662 fixes-->
<!-- -->
<!-- 16662: audit event changes-->
<!-- [1995/10/20  15:26 UTC  millett  /main/millett_doc/1]-->
<!--	HP revision /main/1  1995/03/08  02:07 UTC  arh-->
<!-- 	Add OSF doc sources.-->
<!-- -->
<!-- -->
<!-- -->
<!-- -->
<!-- -->
<IndexTerm Id="DCECR.MAN152.indx.1">
<Primary>events</Primary>
<Secondary>auditable</Secondary>
</IndexTerm>
<IndexTerm Id="DCECR.MAN152.indx.2">
<Primary>events</Primary>
<Secondary>security services</Secondary>
</IndexTerm>
<IndexTerm Id="DCECR.MAN152.indx.3">
<Primary>security services</Primary>
<Secondary>auditable events</Secondary>
</IndexTerm>
<IndexTerm Id="DCECR.MAN152.indx.4">
<Primary>auditable events</Primary>
<Secondary>security services</Secondary>
</IndexTerm>
<IndexTerm Id="DCECR.MAN152.indx.5">
<Primary><Literal>sec_audit_events</Literal> command</Primary>
</IndexTerm>
<RefSect1>
<Title>Description</Title>
<Para><!-- The DCE Security Service supports the auditing of-->
<!-- security-significant events in the-->
<!-- security server.  Among these events are the following:-->
Code is in place for auditing security-significant events in the
security server.  Among these events are the following:
<IndexTerm Id="DCECR.MAN152.indx.6">
<Primary>events</Primary>
<Secondary>security service operations</Secondary>
</IndexTerm>
<!--no-op:  l-->
</Para>
<ItemizedList>
<ListItem>
<Para>Attempts to invoke authentication server/ticket-granting
server/privilege server (AS/TGS/PS) operations.
</Para>
</ListItem>
<ListItem>
<Para>Deletion of security server objects, including the following:
</Para>
<ItemizedList>
<ListItem>
<Para>access control lists (ACLs)
</Para>
</ListItem>
<ListItem>
<Para>accounts
</Para>
</ListItem>
<ListItem>
<Para>pgo items
</Para>
</ListItem>
<ListItem>
<Para>registry properties
</Para>
</ListItem>
<ListItem>
<Para>registry/organization policies
</Para>
</ListItem>
<ListItem>
<Para>registry master key
</Para>
</ListItem>
</ItemizedList>
</ListItem>
<ListItem>
<Para>Attempts to invoke an operation that modifies security server
objects or updates an ACL.
</Para>
</ListItem>
<ListItem>
<Para>Attempts to invoke operations that involve access control.
</Para>
</ListItem>
<ListItem>
<Para>Failed client responses to the server's challenge, detected replays
and invalid ticket requests.
</Para>
</ListItem>
<ListItem>
<Para>The use of cryptographic keys in the remote procedure call 
(RPC) runtime.
</Para>
</ListItem>
<ListItem>
<Para>Attempts to change the maintenance/operation states of the
registry server.
</Para>
</ListItem>
</ItemizedList>
<!--no-op:  b-->
<Para><IndexTerm Id="DCECR.MAN152.indx.7">
<Primary>event class</Primary>
<Secondary>definitions</Secondary>
</IndexTerm>Event class definitions, together with filters, control the auditing
execution at these code points.  Filters can be updated dynamically.
Filter files are maintained by a per-host audit daemon, and are
shared among all the audit clients on the same host.   The
DCE control program, <Command>dcecp</Command>, is used to maintain the
<IndexTerm Id="DCECR.MAN152.indx.8">
<Primary><Command>dcecp</Command> command</Primary>
</IndexTerm>filters.  (See the <Filename MoreInfo="RefEntry">dcecp(8dce)</Filename> reference page.)
The <Command>dcecp</Command> command is executable by all users and system
administrators.  The ability to modify filters
is controlled through the audit daemon's ACL,
which maintains the filters.
</Para>
<Para><IndexTerm Id="DCECR.MAN152.indx.9">
<Primary>security server</Primary>
<Secondary>interfaces</Secondary>
<Tertiary><Literal>krb5rpc</Literal></Tertiary>
</IndexTerm>
<IndexTerm Id="DCECR.MAN152.indx.10">
<Primary>security server</Primary>
<Secondary>interfaces</Secondary>
<Tertiary><Literal>rdaclif</Literal></Tertiary>
</IndexTerm>
<IndexTerm Id="DCECR.MAN152.indx.11">
<Primary>security server</Primary>
<Secondary>interfaces</Secondary>
<Tertiary><Literal>rdacliftmp</Literal></Tertiary>
</IndexTerm>
<IndexTerm Id="DCECR.MAN152.indx.12">
<Primary>security server</Primary>
<Secondary>interfaces</Secondary>
<Tertiary><Literal>rpriv</Literal></Tertiary>
</IndexTerm>
<IndexTerm Id="DCECR.MAN152.indx.13">
<Primary>security server</Primary>
<Secondary>interfaces</Secondary>
<Tertiary><Literal>rs_acct</Literal></Tertiary>
</IndexTerm>
<IndexTerm Id="DCECR.MAN152.indx.14">
<Primary>security server</Primary>
<Secondary>interfaces</Secondary>
<Tertiary><Literal>rs_query</Literal></Tertiary>
</IndexTerm>
<IndexTerm Id="DCECR.MAN152.indx.15">
<Primary>security server</Primary>
<Secondary>interfaces</Secondary>
<Tertiary><Literal>rs_rpladmn</Literal></Tertiary>
</IndexTerm>
<IndexTerm Id="DCECR.MAN152.indx.16">
<Primary>security server</Primary>
<Secondary>interfaces</Secondary>
<Tertiary><Literal>rs_update</Literal></Tertiary>
</IndexTerm>
<IndexTerm Id="DCECR.MAN152.indx.17">
<Primary>security server</Primary>
<Secondary>interfaces</Secondary>
<Tertiary><Literal>rsec_cert</Literal></Tertiary>
</IndexTerm>
<!-- .iX "security server" "interfaces" "\*Lsecidmap\*O"-->
<IndexTerm Id="DCECR.MAN152.indx.18">
<Primary><Literal>krb5rpc</Literal> interface</Primary>
</IndexTerm>
<IndexTerm Id="DCECR.MAN152.indx.19">
<Primary><Literal>rdaclif</Literal> interface</Primary>
</IndexTerm>
<IndexTerm Id="DCECR.MAN152.indx.20">
<Primary><Literal>rdacliftmp</Literal> interface</Primary>
</IndexTerm>
<IndexTerm Id="DCECR.MAN152.indx.21">
<Primary><Literal>rpriv</Literal> interface</Primary>
</IndexTerm>
<IndexTerm Id="DCECR.MAN152.indx.22">
<Primary><Literal>rs_acct</Literal> interface</Primary>
</IndexTerm>
<IndexTerm Id="DCECR.MAN152.indx.23">
<Primary><Literal>rs_query</Literal> interface</Primary>
</IndexTerm>
<IndexTerm Id="DCECR.MAN152.indx.24">
<Primary><Literal>rs_rpladmn</Literal> interface</Primary>
</IndexTerm>
<IndexTerm Id="DCECR.MAN152.indx.25">
<Primary><Literal>rs_update</Literal> interface</Primary>
</IndexTerm>
<IndexTerm Id="DCECR.MAN152.indx.26">
<Primary><Literal>rsec_cert</Literal> interface</Primary>
</IndexTerm>
<IndexTerm Id="DCECR.MAN152.indx.27">
<Primary><Literal>secidmap</Literal> interface</Primary>
</IndexTerm>Security server RPC interfaces include <Literal>krb5rpc</Literal>, <Literal>rdaclif</Literal>,
<Literal>rdacliftmp</Literal>, <Literal>rpriv</Literal>, <Literal>rs_acct</Literal>,
<Literal>rs_query</Literal>, <Literal>rs_rpladmn</Literal>, <Literal>rs_update</Literal>, and 
<Literal>rsec_cert</Literal>.  All the RPC interfaces
<IndexTerm Id="DCECR.MAN152.indx.28">
<Primary>authentication services</Primary>
<Secondary><Function>rpc_c_authn_dce_secret</Function></Secondary>
</IndexTerm>
<IndexTerm Id="DCECR.MAN152.indx.29">
<Primary><Function>rpc_c_authn_dce_secret</Function> authentication service</Primary>
</IndexTerm>are offered using the <Function>rpc_c_authn_dce_secret</Function> authentication
service.  The security server's RPC runtime uses <Literal>dce-rgy</Literal> as its
authentication identity.  Within the same process, the security
server's UDP/IP interface provides Kerberos AS/TGS functions, with
<Literal>krbtgt/cell_name</Literal> as its authentication identity.
</Para>
<Para>The following are the audit code points in these security service
interfaces.  Each entry shows the event type, followed by the
event number and event classes, and then any
event-specific information.
</Para>
<RefSect2>
<Title>Authentication Interface (krb5rpc) Operations</Title>
<Para><IndexTerm Id="DCECR.MAN152.indx.30">
<Primary>functions</Primary>
<Secondary><Function>rsec_krb5rpc_sendto_kdc()</Function></Secondary>
</IndexTerm>
<IndexTerm Id="DCECR.MAN152.indx.31">
<Primary><Function>rsec_krb5rpc_sendto_kdc()</Function> function</Primary>
</IndexTerm>The <Function>rsec_krb5rpc_sendto_kdc(&thinsp;)</Function> function is an RPC interface
operation for accessing Kerberos AS/TGS
services.  Ticket-granting tickets and application tickets are
requested and returned.  There is no access control on this
interface other than what is within the Kerberos ticket-granting
mechanism itself; that is, the TGS request verification.
<?sml-break><?sml-need 4></Para>
<VariableList>
<VarListEntry role="linebreak">
<Term>Event Type (Event Number, Event Classes)</Term>
<ListItem>
<Para><Literal>AS_Request (0x101, dce_sec_authent)</Literal>
</Para>
<VariableList>
<VarListEntry role="linebreak">
<Term>Event-Specific Information</Term>
<ListItem>
<Para>None
</Para>
</ListItem>
</VarListEntry>
</VariableList>
</ListItem>
</VarListEntry>
<VarListEntry role="linebreak">
<Term>Event Type (Event Number, Event Classes)</Term>
<ListItem>
<Para><Literal>TGS_TicketReq (0x102, dce_sec_authent)</Literal>
</Para>
<VariableList>
<VarListEntry role="linebreak">
<Term>Event-Specific Information</Term>
<ListItem>
<Para>None
</Para>
</ListItem>
</VarListEntry>
</VariableList>
</ListItem>
</VarListEntry>
<VarListEntry role="linebreak">
<Term>Event Type (Event Number, Event Classes)</Term>
<ListItem>
<Para><Literal>TGS_RenewReq (0x103, dce_sec_authent)</Literal>
</Para>
<VariableList>
<VarListEntry role="linebreak">
<Term>Event-Specific Information</Term>
<ListItem>
<Para>None
</Para>
</ListItem>
</VarListEntry>
</VariableList>
</ListItem>
</VarListEntry>
<VarListEntry role="linebreak">
<Term>Event Type (Event Number, Event Classes)</Term>
<ListItem>
<Para><Literal>TGS_ValidateReq (0x104, dce_sec_authent)</Literal>
</Para>
<VariableList>
<VarListEntry role="linebreak">
<Term>Event-Specific Information</Term>
<ListItem>
<Para>None
</Para>
</ListItem>
</VarListEntry>
</VariableList>
</ListItem>
</VarListEntry>
</VariableList>
</RefSect2>
<RefSect2>
<Title>DACL Management Interface (rdaclif) Operations</Title>
<IndexTerm Id="DCECR.MAN152.indx.32">
<Primary>DACL Management</Primary>
<Secondary>interfaces</Secondary>
</IndexTerm>
<IndexTerm Id="DCECR.MAN152.indx.33">
<Primary>DACL Management</Primary>
<Secondary><Literal>rdaclif</Literal></Secondary>
</IndexTerm>
<IndexTerm Id="DCECR.MAN152.indx.34">
<Primary><Literal>rdaclif</Literal> operations</Primary>
</IndexTerm>
<IndexTerm Id="DCECR.MAN152.indx.35">
<Primary>functions</Primary>
<Secondary><Literal>rdacl_lookup()</Literal></Secondary>
</IndexTerm>
<IndexTerm Id="DCECR.MAN152.indx.36">
<Primary><Literal>rdacl_lookup()</Literal> function</Primary>
</IndexTerm>
<Para>The <Literal>rdacl_lookup(&thinsp;)</Literal> operation
retrieves an ACL of an object in the security server.  Review of ACL
associated with an object in security server is allowed if the caller
has any access to the object.
</Para>
<VariableList>
<VarListEntry role="linebreak">
<Term>Event Type (Event Number, Event Classes)</Term>
<ListItem>
<Para><Literal>ACL_Lookup (0x105, dce_sec_control, dce_sec_query)</Literal>
</Para>
<VariableList>
<VarListEntry role="linebreak">
<Term>Event-Specific Information</Term>
<ListItem>
<ProgramListing>
<UserInput>
char            *component_name
uuid_t          manager_type
sec_acl_type_t  acl_type
</UserInput>
</ProgramListing>
</ListItem>
</VarListEntry>
</VariableList>
</ListItem>
</VarListEntry>
</VariableList>
<Para><?sml-need 12>
<IndexTerm Id="DCECR.MAN152.indx.37">
<Primary>functions</Primary>
<Secondary><Literal>rdacl_replace()</Literal></Secondary>
</IndexTerm>
<IndexTerm Id="DCECR.MAN152.indx.38">
<Primary><Literal>rdacl_replace()</Literal> function</Primary>
</IndexTerm>The <Literal>rdacl_replace(&thinsp;)</Literal> operation
replaces the ACL of an object in the security server.  The client must
have the <Literal>sec_acl_perm_owner</Literal> permission for the update to be
carried out.
</Para>
<VariableList>
<VarListEntry role="linebreak">
<Term>Event Type (Event Number, Event Classes)</Term>
<ListItem>
<Para><Literal>ACL_Replace (0x106, dce_sec_control, dce_sec_modify)</Literal>
</Para>
<VariableList>
<VarListEntry role="linebreak">
<Term>Event-Specific Information</Term>
<ListItem>
<ProgramListing>
<UserInput>
char                *component_name
uuid_t              manager_type
sec_acl_type_t      acl_type
sec_acl_list_t      old_acl_list
sec_acl_list_t      new_acl_list
</UserInput>
</ProgramListing>

</ListItem>
</VarListEntry>
</VariableList>
</ListItem>
</VarListEntry>
</VariableList>
<Para><IndexTerm Id="DCECR.MAN152.indx.39">
<Primary>functions</Primary>
<Secondary><Literal>rdacl_get_access()</Literal></Secondary>
</IndexTerm>
<IndexTerm Id="DCECR.MAN152.indx.40">
<Primary><Literal>rdacl_get_access()</Literal> function</Primary>
</IndexTerm>The <Literal>rdacl_get_access(&thinsp;)</Literal> operation determines the caller's 
access to a specified object.  This call is authorized if the 
caller has any access to the object.
<?sml-break><?sml-need 8></Para>
<VariableList>
<VarListEntry role="linebreak">
<Term>Event Type (Event Number, Event Classes)</Term>
<ListItem>
<Para><Literal>ACL_GetAccess (0x107, dce_sec_control, dce_sec_query)</Literal>
</Para>
<VariableList>
<VarListEntry role="linebreak">
<Term>Event-Specific Information</Term>
<ListItem>
<ProgramListing>
<UserInput>
char                  *component_name
uuid_t                manager_type
sec_acl_permset_t     net_rights
</UserInput>
</ProgramListing>

</ListItem>
</VarListEntry>
</VariableList>
</ListItem>
</VarListEntry>
</VariableList>
<Para><IndexTerm Id="DCECR.MAN152.indx.41">
<Primary>functions</Primary>
<Secondary><Literal>rdacl_test_access()</Literal></Secondary>
</IndexTerm>
<IndexTerm Id="DCECR.MAN152.indx.42">
<Primary><Literal>rdacl_test_access()</Literal> function</Primary>
</IndexTerm>The <Literal>rdacl_test_access(&thinsp;)</Literal> operation
determines if the caller has the requested access.  The return
value of the call indicates whether the caller has the requested
access to the object.
</Para>
<VariableList>
<VarListEntry role="linebreak">
<Term>Event Type (Event Number, Event Classes)</Term>
<ListItem>
<Para><Literal>ACL_TestAccess (0x108, dce_sec_control, dce_sec_query)</Literal>
</Para>
<VariableList>
<VarListEntry role="linebreak">
<Term>Event-Specific Information</Term>
<ListItem>
<ProgramListing>
<UserInput>
char                    *component_name
uuid_t	q               manager_type
sec_acl_permset_t       desired_permset
</UserInput>
</ProgramListing>
</ListItem>
</VarListEntry>
</VariableList>
</ListItem>
</VarListEntry>
</VariableList>
<Para><IndexTerm Id="DCECR.MAN152.indx.43">
<Primary>functions</Primary>
<Secondary><Literal>rdacl_get_manager_types()</Literal></Secondary>
</IndexTerm>
<IndexTerm Id="DCECR.MAN152.indx.44">
<Primary><Literal>rdacl_get_manager_types()</Literal> function</Primary>
</IndexTerm>The <Literal>rdacl_get_manager_types(&thinsp;)</Literal> operation
lists the types (UUIDs) of ACLs protecting an object.  The caller
must have some permissions on the object for each of the manager
types that is defined for the object.  Otherwise, no manager
type is returned.
</Para>
<VariableList>
<VarListEntry role="linebreak">
<Term>Event Type (Event Number, Event Classes)</Term>
<ListItem>
<Para><Literal>ACL_GetMgrTypes (0x10A, dce_sec_control, dce_sec_query)</Literal>
</Para>
<VariableList>
<VarListEntry role="linebreak">
<Term>Event-Specific Information</Term>
<ListItem>
<ProgramListing>
<UserInput>
char            *component_name
sec_acl_type_t  acl_type
</UserInput>
</ProgramListing>

</ListItem>
</VarListEntry>
</VariableList>
</ListItem>
</VarListEntry>
</VariableList>
<Para><?sml-need 13>
<IndexTerm Id="DCECR.MAN152.indx.45">
<Primary>functions</Primary>
<Secondary><Literal>rdacl_get_referral()</Literal></Secondary>
</IndexTerm>
<IndexTerm Id="DCECR.MAN152.indx.46">
<Primary><Literal>rdacl_get_referral()</Literal> function</Primary>
</IndexTerm>The <Literal>rdacl_get_referral(&thinsp;)</Literal> operation
obtains a referral to an ACL update site.   This function is used
when the current ACL site yields a <Literal>sec_acl_site_readonly</Literal> error.
Some replication managers will require all updates for a given
object to be directed to a given replica.  Clients of the generic
ACL interface may know they are dealing with an object that is
replicated in this way.  This function allows them to recover from
this problem and rebind to the proper update site.  The client is
required to have execute access on the parent of the object
named by <Replaceable>component_name</Replaceable>.
</Para>
<VariableList>
<VarListEntry role="linebreak">
<Term>Event Type (Event Number, Event Classes)</Term>
<ListItem>
<Para><Literal>ACL_GetReferral (0x10B, dce_sec_control, dce_sec_query)</Literal>
</Para>
<VariableList>
<VarListEntry role="linebreak">
<Term>Event-Specific Information</Term>
<ListItem>
<ProgramListing>
<UserInput>
char            *component_name
uuid_t           manager_type
sec_acl_type_t   sec_acl_type
</UserInput>
</ProgramListing>

</ListItem>
</VarListEntry>
</VariableList>
</ListItem>
</VarListEntry>
</VariableList>
</RefSect2>
<RefSect2>
<Title>Privilege Server Interface (rpriv) Operations</Title>
<IndexTerm Id="DCECR.MAN152.indx.47">
<Primary>privilege server</Primary>
<Secondary>interfaces</Secondary>
</IndexTerm>
<IndexTerm Id="DCECR.MAN152.indx.48">
<Primary>privilege server</Primary>
<Secondary><Literal>rpriv</Literal></Secondary>
</IndexTerm>
<IndexTerm Id="DCECR.MAN152.indx.49">
<Primary><Literal>rpriv</Literal> operations</Primary>
</IndexTerm>
<Para><IndexTerm Id="DCECR.MAN152.indx.50">
<Primary>functions</Primary>
<Secondary><Function>rpriv_get_ptgt()</Function></Secondary>
</IndexTerm>
<IndexTerm Id="DCECR.MAN152.indx.51">
<Primary><Function>rpriv_get_ptgt()</Function> function</Primary>
</IndexTerm>The <Function>rpriv_get_ptgt(&thinsp;)</Function> operation returns a privilege certificate
to the ticket-granting service.
The caller supplies the group set, and the privilege server
seals the group set in the authorization portion of a privilege
ticket-granting ticket (TGT), after first rejecting any groups that
are not legitimately part of the caller credentials.  A group
will be rejected if the caller is not a member of the group,
or the group is not allowed on project lists (the <Literal>projlist_ok</Literal>
flag is not set).
</Para>
<Para><?sml-need 3>There is no access control on this interface other than what
was within the Kerberos ticket-granting mechanism itself; that is,
the TGS request verification.  This call may result in growth
of potential access set.  Note that this is a pre-DCE Version
1.1 routine.
</Para>
<VariableList>
<VarListEntry role="linebreak">
<Term>Event Type (Event Number, Event Classes)</Term>
<ListItem>
<Para><Literal>PRIV_GetPtgt (0x10C, dce_sec_authent, dce_sec_control)</Literal>
</Para>
<VariableList>
<VarListEntry role="linebreak">
<Term>Event-Specific Information</Term>
</VarListEntry>
</VariableList>

<ProgramListing>
<UserInput>
char		*string client_address
unsigned16      num_groups	/* Number of local groups in PAC */
uuid_t          groups		/* num_groups local groups in PAC */
</UserInput>
</ProgramListing>
</ListItem>
</VarListEntry>
</VariableList>

</RefSect2>
<RefSect2>
<Title>Registry Server Account Interface (rs_acct) Operations</Title>
<IndexTerm Id="DCECR.MAN152.indx.52">
<Primary>registry server</Primary>
<Secondary>interfaces</Secondary>
</IndexTerm>
<IndexTerm Id="DCECR.MAN152.indx.53">
<Primary>registry server</Primary>
<Secondary><Literal>rs_acct</Literal></Secondary>
</IndexTerm>
<IndexTerm Id="DCECR.MAN152.indx.54">
<Primary><Literal>rs_acct</Literal> operations</Primary>
</IndexTerm>
<Para><IndexTerm Id="DCECR.MAN152.indx.55">
<Primary>functions</Primary>
<Secondary><Function>rs_acct_add()</Function></Secondary>
</IndexTerm>
<IndexTerm Id="DCECR.MAN152.indx.56">
<Primary><Function>rs_acct_add()</Function> function</Primary>
</IndexTerm>The <Function>rs_acct_add(&thinsp;)</Function> operation adds an account with a
specified login name.  The caller needs 
<Literal>m</Literal>, <Literal>a</Literal>, and <Literal>u</Literal> (<Literal>mgmt_info</Literal>, <Literal>auth_info</Literal>, and
<Literal>user_info</Literal>) permissions on the principal of the account that is
to be added.  The constituent principal, group, and organization (PGO)
items for an account must be added before the account can be created.
Also, the principal must have been added as a member of the specified
group and organization.
</Para>
<VariableList>
<VarListEntry role="linebreak">
<Term>Event Type (Event Number, Event Classes)</Term>
<ListItem>
<Para><Literal>ACCT_Add (0x10D, dce_sec_control, dce_sec_modify)</Literal>
</Para>
<VariableList>
<VarListEntry role="linebreak">
<Term>Event-Specific Information</Term>
<ListItem>
<ProgramListing>
<UserInput>
char                    *login_name
sec_rgy_acct_key_t      key_parts
</UserInput>
</ProgramListing>

</ListItem>
</VarListEntry>
</VariableList>
</ListItem>
</VarListEntry>
</VariableList>
<Para><IndexTerm Id="DCECR.MAN152.indx.57">
<Primary>functions</Primary>
<Secondary><Function>rs_acct_delete()</Function></Secondary>
</IndexTerm>
<IndexTerm Id="DCECR.MAN152.indx.58">
<Primary><Function>rs_acct_delete()</Function> function</Primary>
</IndexTerm>The <Function>rs_acct_delete(&thinsp;)</Function> operation deletes an account with a
specified login name.  The caller must
have <Literal>m</Literal>, <Literal>a</Literal>, and <Literal>u</Literal> (<Literal>mgmt_info</Literal>, <Literal>auth_info</Literal>, and
<Literal>user_info</Literal>) permissions on the principal of the account that is
to be deleted.
</Para>
<VariableList>
<VarListEntry role="linebreak">
<Term>Event Type (Event Number, Event Classes)</Term>
<ListItem>
<Para><Literal>ACCT_Delete (0x10E, dce_sec_control, dce_sec_modify)</Literal>
</Para>
<VariableList>
<VarListEntry role="linebreak">
<Term>Event-Specific Information</Term>
<ListItem>
<ProgramListing>
<UserInput>
char     *login_name
</UserInput>
</ProgramListing>

</ListItem>
</VarListEntry>
</VariableList>
</ListItem>
</VarListEntry>
</VariableList>
<Para><IndexTerm Id="DCECR.MAN152.indx.59">
<Primary>functions</Primary>
<Secondary><Function>rs_acct_add()</Function></Secondary>
</IndexTerm>
<IndexTerm Id="DCECR.MAN152.indx.60">
<Primary><Function>rs_acct_add()</Function> function</Primary>
</IndexTerm>The <Function>rs_acct_rename(&thinsp;)</Function> operation
changes the account login name.  The caller has to have
the <Literal>m</Literal> (<Literal>mgmt_info</Literal>) permission on the account's principal to
be renamed (<Literal>old_login_name.pname</Literal>).
</Para>
<VariableList>
<VarListEntry role="linebreak">
<Term>Event Type (Event Number, Event Classes)</Term>
<ListItem>
<Para><Literal>ACCT_Rename (0x10F, dce_sec_control, dce_sec_modify)</Literal>
</Para>
<VariableList>
<VarListEntry role="linebreak">
<Term>Event-Specific Information</Term>
<ListItem>
<ProgramListing>
<UserInput>
char    *old_login_name
char    *new_login_name
</UserInput>
</ProgramListing>

</ListItem>
</VarListEntry>
</VariableList>
</ListItem>
</VarListEntry>
</VariableList>
<Para><IndexTerm Id="DCECR.MAN152.indx.61">
<Primary>functions</Primary>
<Secondary><Function>rs_acct_lookup()</Function></Secondary>
</IndexTerm>
<IndexTerm Id="DCECR.MAN152.indx.62">
<Primary><Function>rs_acct_lookup()</Function> function</Primary>
</IndexTerm>The <Function>rs_acct_lookup(&thinsp;)</Function> operation
returns data for a specified account.  The caller must have the
<Literal>r</Literal> (<Literal>read</Literal>) permission according to the ACL of the account's
principal in order to be viewed.
<?sml-break><?sml-need 5></Para>
<VariableList>
<VarListEntry role="linebreak">
<Term>Event Type (Event Number, Event Classes)</Term>
<ListItem>
<Para><Literal>ACCT_Lookup (0x110, dce_sec_control, dce_sec_query)</Literal>
</Para>
<VariableList>
<VarListEntry role="linebreak">
<Term>Event-Specific Information</Term>
<ListItem>
<ProgramListing>
<UserInput>
char    *login_name
</UserInput>
</ProgramListing>

</ListItem>
</VarListEntry>
</VariableList>
</ListItem>
</VarListEntry>
</VariableList>
<Para><?sml-need 12>
<IndexTerm Id="DCECR.MAN152.indx.63">
<Primary>functions</Primary>
<Secondary><Function>rs_acct_replace()</Function></Secondary>
</IndexTerm>
<IndexTerm Id="DCECR.MAN152.indx.64">
<Primary><Function>rs_acct_replace()</Function> function</Primary>
</IndexTerm>The <Function>rs_acct_replace(&thinsp;)</Function> operation
replaces both the user and administrative information in the account
record specified by the input login name.  The administrative
information contains limitations on the account's use and privileges.
The user information contains such information as the account home
directory and default shell.  The administrative information can only
be modified by a caller with the <Literal>a</Literal> (<Literal>auth_info</Literal>) privilege
for the account's principal.  The user information can be
modified by a caller with the <Literal>u</Literal> (<Literal>user_info</Literal>) privileges
for the account's principal.
</Para>
<VariableList>
<VarListEntry role="linebreak">
<Term>Event Type (Event Number, Event Classes)</Term>
<ListItem>
<Para><Literal>ACCT_Replace (0x111, dce_sec_control, dce_sec_modify)</Literal>
</Para>
<VariableList>
<VarListEntry role="linebreak">
<Term>Event-Specific Information</Term>
<ListItem>
<ProgramListing>
<UserInput>
char            *login_name
unsigned32      key_parts
</UserInput>
</ProgramListing>

</ListItem>
</VarListEntry>
</VariableList>
</ListItem>
</VarListEntry>
</VariableList>
<Para><?sml-need 8>
<IndexTerm Id="DCECR.MAN152.indx.65">
<Primary>functions</Primary>
<Secondary><Function>rs_acct_get_projlist()</Function></Secondary>
</IndexTerm>
<IndexTerm Id="DCECR.MAN152.indx.66">
<Primary><Function>rs_acct_get_projlist()</Function> function</Primary>
</IndexTerm>The <Function>rs_acct_get_projlist(&thinsp;)</Function> operation
returns members of the project list for the specified account.
This operation requires the caller to have the <Literal>r</Literal> (<Literal>read</Literal>) permission
on the account principal for which the project list data is to
be returned.
</Para>
<VariableList>
<VarListEntry role="linebreak">
<Term>Event Type (Event Number, Event Classes)</Term>
<ListItem>
<Para><Literal>ACCT_GetProjlist (0x112, dce_sec_control, dce_sec_query)</Literal>
</Para>
<VariableList>
<VarListEntry role="linebreak">
<Term>Event-Specific Information</Term>
<ListItem>
<ProgramListing>
<UserInput>
char     login_name
</UserInput>
</ProgramListing>

</ListItem>
</VarListEntry>
</VariableList>
</ListItem>
</VarListEntry>
</VariableList>
</RefSect2>
<RefSect2>
<Title>Registry Miscellaneous Operation Interface (rs_misc) Operations</Title>
<IndexTerm Id="DCECR.MAN152.indx.67">
<Primary>registry miscellaneous operations</Primary>
<Secondary>interfaces</Secondary>
</IndexTerm>
<IndexTerm Id="DCECR.MAN152.indx.68">
<Primary>registry miscellaneous operations</Primary>
<Secondary><Literal>rs_misc</Literal></Secondary>
</IndexTerm>
<IndexTerm Id="DCECR.MAN152.indx.69">
<Primary><Literal>rs_misc</Literal> operations</Primary>
</IndexTerm>
<Para><IndexTerm Id="DCECR.MAN152.indx.70">
<Primary>functions</Primary>
<Secondary><Function>rs_login_get_info()</Function></Secondary>
</IndexTerm>
<IndexTerm Id="DCECR.MAN152.indx.71">
<Primary><Function>rs_login_get_info()</Function> function</Primary>
</IndexTerm>The <Function>rs_login_get_info(&thinsp;)</Function> operation
returns login information for the specified account.  This
information is extracted from the account's entry in the registry
database.  This operation requires the caller to have the <Literal>r</Literal> (<Literal>read</Literal>)
permission on the account's principal from which the data is to
be returned.
</Para>
<VariableList>
<VarListEntry role="linebreak">
<Term>Event Type (Event Number, Event Classes)</Term>
<ListItem>
<Para><Literal>LOGIN_GetInfo (0x113, dce_sec_control, dce_sec_query)</Literal>
</Para>
<VariableList>
<VarListEntry role="linebreak">
<Term>Event-Specific Information</Term>
<ListItem>
<ProgramListing>
<UserInput>
char      *login_name
</UserInput>
</ProgramListing>

</ListItem>
</VarListEntry>
</VariableList>
</ListItem>
</VarListEntry>
</VariableList>
</RefSect2>
<RefSect2>
<Title>Registry PGO Interface (rs_pgo) Operations</Title>
<IndexTerm Id="DCECR.MAN152.indx.72">
<Primary>registry PGO</Primary>
<Secondary>interfaces</Secondary>
</IndexTerm>
<IndexTerm Id="DCECR.MAN152.indx.73">
<Primary>registry PGO</Primary>
<Secondary><Literal>rs_pgo</Literal></Secondary>
</IndexTerm>
<IndexTerm Id="DCECR.MAN152.indx.74">
<Primary><Literal>rs_pgo</Literal> operations</Primary>
</IndexTerm>
<Para><IndexTerm Id="DCECR.MAN152.indx.75">
<Primary>functions</Primary>
<Secondary><Function>rs_pgo_add()</Function></Secondary>
</IndexTerm>
<IndexTerm Id="DCECR.MAN152.indx.76">
<Primary><Function>rs_pgo_add()</Function> function</Primary>
</IndexTerm>The <Function>rs_pgo_add(&thinsp;)</Function> operation
adds a PGO item to the registry database.  This operation requires
the caller to have the <Literal>i</Literal> (<Literal>insert</Literal>) permission on the parent
directory in which the PGO item is to be created.
</Para>
<VariableList>
<VarListEntry role="linebreak">
<Term>Event Type (Event Number, Event Classes)</Term>
<ListItem>
<Para><Literal>PGO_Add (0x114, dce_sec_control, dce_sec_modify)</Literal>
</Para>
<VariableList>
<VarListEntry role="linebreak">
<Term>Event-Specific Information</Term>
<ListItem>
<ProgramListing>
<UserInput>
sec_rgy_domain_t       name_domain
char                   *pgo_name
</UserInput>
</ProgramListing>

</ListItem>
</VarListEntry>
</VariableList>
</ListItem>
</VarListEntry>
</VariableList>
<Para><?sml-need 12>
<IndexTerm Id="DCECR.MAN152.indx.77">
<Primary>functions</Primary>
<Secondary><Function>rs_pgo_delete()</Function></Secondary>
</IndexTerm>
<IndexTerm Id="DCECR.MAN152.indx.78">
<Primary><Function>rs_pgo_delete()</Function> function</Primary>
</IndexTerm>The <Function>rs_pgo_delete(&thinsp;)</Function> operation
deletes a PGO item from registry database.  Any account depending
on the deleted PGO item is also deleted.  The deletion operation
requires the caller to have <Literal>d</Literal> (<Command>delete</Command>) permission on the
parent directory that contains the PGO item to be deleted and the 
<Literal>D</Literal> (<Literal>Delete_object</Literal>) permission on the PGO item itself.
</Para>
<VariableList>
<VarListEntry role="linebreak">
<Term>Event Type (Event Number, Event Classes)</Term>
<ListItem>
<Para><Literal>PGO_Delete (0x115, dce_sec_control, dce_sec_modify)</Literal>
</Para>
<VariableList>
<VarListEntry role="linebreak">
<Term>Event-Specific Information</Term>
<ListItem>
<ProgramListing>
<UserInput>
sec_rgy_domain_t        name_domain
char                    *pgo_name
</UserInput>
</ProgramListing>


</ListItem>
</VarListEntry>
</VariableList>
</ListItem>
</VarListEntry>
</VariableList>
<Para><IndexTerm Id="DCECR.MAN152.indx.79">
<Primary>functions</Primary>
<Secondary><Function>rs_pgo_replace()</Function></Secondary>
</IndexTerm>
<IndexTerm Id="DCECR.MAN152.indx.80">
<Primary><Function>rs_pgo_replace()</Function> function</Primary>
</IndexTerm>The <Function>rs_pgo_replace(&thinsp;)</Function> operation
replaces the data associated with a PGO item in the registry
database.  The caller needs to have the <Literal>m</Literal> (<Literal>mgmt_info</Literal>)
permission on the PGO item, if <Literal>quota</Literal>, <Literal>flags</Literal>,
or <Literal>unix_num</Literal> is being set.  (Only a cell principal's
<Literal>unix_num</Literal> is modifiable.) The caller needs to have the
<Literal>f</Literal> (full name) permission to modify the full name of the PGO item.
</Para>
<VariableList>
<VarListEntry role="linebreak">
<Term>Event Type (Event Number, Event Classes)</Term>
<ListItem>
<Para><Literal>PGO_Replace (0x116, dce_sec_control, dce_sec_modify)</Literal>
</Para>
<VariableList>
<VarListEntry role="linebreak">
<Term>Event-Specific Information</Term>
<ListItem>
<ProgramListing>
<UserInput>
sec_rgy_domain_t        name_domain
char                    *pgo_name
</UserInput>
</ProgramListing>

</ListItem>
</VarListEntry>
</VariableList>
</ListItem>
</VarListEntry>
</VariableList>
<Para><IndexTerm Id="DCECR.MAN152.indx.81">
<Primary>functions</Primary>
<Secondary><Function>rs_pgo_rename()</Function></Secondary>
</IndexTerm>
<IndexTerm Id="DCECR.MAN152.indx.82">
<Primary><Function>rs_pgo_rename()</Function> function</Primary>
</IndexTerm>The <Function>rs_pgo_rename(&thinsp;)</Function> operation renames a PGO item in the
registry database.  The caller needs to have the <Literal>n</Literal> (<Command>name</Command>)
permission on the old name of the PGO item, if performing
a rename within a directory.  In order to move a PGO item
between directories, the caller needs to have the <Literal>n</Literal> (<Command>name</Command>) 
permission on the old name of the PGO item as well as the 
<Literal>d</Literal> (<Command>delete</Command>) permission on the old parent directory and
the <Literal>i</Literal> (<Literal>insert</Literal>) permission on the new parent directory in
which the PGO item is being added under the new name.
</Para>
<VariableList>
<VarListEntry role="linebreak">
<Term>Event Type (Event Classes)</Term>
<ListItem>
<Para><Literal>PGO_Rename (0x117, dce_sec_control, dce_sec_modify)</Literal>
</Para>
<ProgramListing>
<UserInput>
sec_rgy_domain_t        name_domain
char                    *old_name
char                    *new_name
</UserInput>
</ProgramListing>

</ListItem>
</VarListEntry>
</VariableList>
<Para><?sml-need 18>
<IndexTerm Id="DCECR.MAN152.indx.83">
<Primary>functions</Primary>
<Secondary><Function>rs_pgo_get()</Function></Secondary>
</IndexTerm>
<IndexTerm Id="DCECR.MAN152.indx.84">
<Primary><Function>rs_pgo_get()</Function> function</Primary>
</IndexTerm>The <Function>rs_pgo_get(&thinsp;)</Function> operation
returns the name and data for a PGO item.  The desired item is
identified by a query key, which can be a <Command>name</Command>, a <Command>uuid</Command>, a
<Literal>unix_num</Literal>, or a <Literal>sequential-search</Literal> flag.  The caller
needs to have the <Literal>r</Literal> (<Literal>read</Literal>) permission on the PGO item to be
viewed.
</Para>
<VariableList>
<VarListEntry role="linebreak">
<Term>Event Type (Event Number, Event Classes)</Term>
<ListItem>
<Para><Literal>PGO_Get (0x118, dce_sec_control, dce_sec_query)</Literal>
</Para>
<VariableList>
<VarListEntry role="linebreak">
<Term>Event-Specific Information</Term>

</VarListEntry>
</VariableList>
</ListItem>
</VarListEntry>
</VariableList>

<ProgramListing>
<UserInput>
sec_rgy_domain_t  	name_domain
rs_pgo_query_key_t	key     /* The query key and one of the    */
                                /* following depending on the      */
                                /* query key specified:            */
  case (key == rs_pgo_query_name)
        char *name              /* Name of the item being searched */
  case (key == rs_pgo_query_id)
        uuid_t id_key           /* uuid of the item being searched */
  case (key == rs_pgo_query_unix_num)
        unsigned32 unix_num     /* unix_num of item being searched */
  case (key == rs_pgo_query_nex)
        char *scope             /* Scope of item being searched    */
</UserInput>
</ProgramListing>


<Para><IndexTerm Id="DCECR.MAN152.indx.85">
<Primary>functions</Primary>
<Secondary><Function>rs_pgo_key_transfer()</Function></Secondary>
</IndexTerm>
<IndexTerm Id="DCECR.MAN152.indx.86">
<Primary><Function>rs_pgo_key_transfer()</Function> function</Primary>
</IndexTerm>The <Function>rs_pgo_key_transfer(&thinsp;)</Function> operation
performs a specified key transfer between the <Command>uuid</Command>,
<Literal>unix_num</Literal>, and <Command>name</Command> of a PGO item.  The caller
needs to have some permission on the PGO item for <Literal>id->name</Literal>
and <Literal>unix_num->name</Literal> transfers.
</Para>
<VariableList>
<VarListEntry role="linebreak">
<Term>Event Type (Event Number, Event Classes)</Term>
<ListItem>
<Para><Literal>PGO_KeyTransfer (0x119, dce_sec_control)</Literal>
</Para>
<VariableList>
<VarListEntry role="linebreak">
<Term>Event-Specific Information</Term>

</VarListEntry>
</VariableList>
</ListItem>
</VarListEntry>
</VariableList>

<ProgramListing>
<UserInput>
sec_rgy_domain_t	name_domain
rs_pgo_query_key_t  	key     /* The query key                    */
                                /* One of the following, depending  */
                                /* on the query key specified:      */
  case (key == rs_pgo_query_name)
      char *name                /* Name of the item being searched  */
  case (key == rs_pgo_query_id)
      uuid_t id_key		/* uuid of the item being searched  */
  case (key == rs_pgo_query_unix_num)
      unsigned32 unix_num	/* unix_num of item  being searched */
      unsigned32  requested_result_type
</UserInput>
</ProgramListing>


<Para><?sml-need 14>
<IndexTerm Id="DCECR.MAN152.indx.87">
<Primary>functions</Primary>
<Secondary><Function>rs_pgo_add_member()</Function></Secondary>
</IndexTerm>
<IndexTerm Id="DCECR.MAN152.indx.88">
<Primary><Function>rs_pgo_add_member()</Function> function</Primary>
</IndexTerm>The <Function>rs_pgo_add_member(&thinsp;)</Function> operation
adds a member to a group or an organization.  The caller must have
the <Literal>M</Literal> (<Literal>Member_list</Literal>) permission on the group or
organization.  Additionally, if this call is for adding a group
member, the caller must have the <Literal>g</Literal> (<Literal>groups</Literal>) permission on
the principal to be added.
</Para>
<VariableList>
<VarListEntry role="linebreak">
<Term>Event Type (Event Number, Event Classes)</Term>
<ListItem>
<Para><Literal>PGO_AddMember (0x11A, dce_sec_control, dce_sec_modify)</Literal>
</Para>
<VariableList>
<VarListEntry role="linebreak">
<Term>Event-Specific Information</Term>
<ListItem>
<ProgramListing>
<UserInput>
sec_rgy_domain_t	name_domain
char 			*person_name	/* Principal's name */
char 			*go_name    	/* Group or org's name */
</UserInput>
</ProgramListing>

</ListItem>
</VarListEntry>
</VariableList>
</ListItem>
</VarListEntry>
</VariableList>
<Para><IndexTerm Id="DCECR.MAN152.indx.89">
<Primary>functions</Primary>
<Secondary><Function>rs_pgo_delete_member()</Function></Secondary>
</IndexTerm>
<IndexTerm Id="DCECR.MAN152.indx.90">
<Primary><Function>rs_pgo_delete_member()</Function> function</Primary>
</IndexTerm>The <Function>rs_pgo_delete_member(&thinsp;)</Function> operation
deletes a principal from a group or an organization in the registry
database.  The caller must have the <Literal>M</Literal> (<Literal>Member_list</Literal>)
permission on the group or organization.  Note that the caller does
not need to have the <Literal>g</Literal> (<Literal>groups</Literal>) permission when deleting 
the principal from a group.
</Para>
<VariableList>
<VarListEntry role="linebreak">
<Term>Event Type (Event Number, Event Classes)</Term>
<ListItem>
<Para><Literal>PGO_DeleteMember (0x11B, dce_sec_control, dce_sec_modify)</Literal>
</Para>
<VariableList>
<VarListEntry role="linebreak">
<Term>Event-Specific Information</Term>
<ListItem>
<ProgramListing>
<UserInput>
sec_rgy_domain_t	name_domain
char 			*person_name	/* Principal's name */
char 			*go_name	/* Group or org's name */
</UserInput>
</ProgramListing>

</ListItem>
</VarListEntry>
</VariableList>
</ListItem>
</VarListEntry>
</VariableList>
<Para><IndexTerm Id="DCECR.MAN152.indx.91">
<Primary>functions</Primary>
<Secondary><Function>rs_pgo_is_member()</Function></Secondary>
</IndexTerm>
<IndexTerm Id="DCECR.MAN152.indx.92">
<Primary><Function>rs_pgo_is_member()</Function> function</Primary>
</IndexTerm>The <Function>rs_pgo_is_member(&thinsp;)</Function> operation
tests whether a specified principal is a member of a specified group
or organization.  The caller must have <Literal>t</Literal> (<Literal>test</Literal>) 
permission on the group or organization.
</Para>
<VariableList>
<VarListEntry role="linebreak">
<Term>Event Type (Event Number, Event Classes)</Term>
<ListItem>
<Para><Literal>PGO_IsMember (0x11C, dce_sec_control, dce_sec_query)</Literal>
</Para>
<VariableList>
<VarListEntry role="linebreak">
<Term>Event-Specific Information</Term>
<ListItem>
<ProgramListing>
<UserInput>
sec_rgy_domain_t	name_domain
char 			*person_name	/* Principal's name */
char 			*go_name	/* Group or org's name */
</UserInput>
</ProgramListing>
</ListItem>
</VarListEntry>
</VariableList>
</ListItem>
</VarListEntry>
</VariableList>
<Para><IndexTerm Id="DCECR.MAN152.indx.93">
<Primary>functions</Primary>
<Secondary><Function>rs_pgo_get_members()</Function></Secondary>
</IndexTerm>
<IndexTerm Id="DCECR.MAN152.indx.94">
<Primary><Function>rs_pgo_get_members()</Function> function</Primary>
</IndexTerm>The <Function>rs_pgo_get_members(&thinsp;)</Function> operation,
if the specified domain is group or organization, lists the members
of a specified group or organization.  If the domain is principal,
list the groups in which the principal is a member.  The caller
must have the <Literal>r</Literal> (<Literal>read</Literal>) permission on the principal, group,
or organization.
</Para>
<VariableList>
<VarListEntry role="linebreak">
<Term>Event Type (Event Number, Event Classes)</Term>
<ListItem>
<Para><Literal>PGO_GetMembers (0x11D, dce_sec_control, dce_sec_query)</Literal>
</Para>
<VariableList>
<VarListEntry role="linebreak">
<Term>Event-Specific Information</Term>
<ListItem>
<ProgramListing>
<UserInput>
sec_rgy_domain_t	name_domain
<?sml-break>char 			*go_name	/* PGO's uuid */
</UserInput>
</ProgramListing>

</ListItem>
</VarListEntry>
</VariableList>
</ListItem>
</VarListEntry>
</VariableList>
</RefSect2>
<RefSect2>
<Title>Registry Policy Interface (rs_policy) Operations</Title>
<IndexTerm Id="DCECR.MAN152.indx.95">
<Primary>registry policy</Primary>
<Secondary>interfaces</Secondary>
</IndexTerm>
<IndexTerm Id="DCECR.MAN152.indx.96">
<Primary>registry policy</Primary>
<Secondary><Literal>rs_policy</Literal></Secondary>
</IndexTerm>
<IndexTerm Id="DCECR.MAN152.indx.97">
<Primary><Literal>rs_policy</Literal> operations</Primary>
</IndexTerm>
<Para><IndexTerm Id="DCECR.MAN152.indx.98">
<Primary>functions</Primary>
<Secondary><Function>rs_properties_get_info()</Function></Secondary>
</IndexTerm>
<IndexTerm Id="DCECR.MAN152.indx.99">
<Primary><Function>rs_properties_get_info()</Function> function</Primary>
</IndexTerm>The <Function>rs_properties_get_info(&thinsp;)</Function> operation
returns a list of registry properties.  The caller must have the
<Literal>r</Literal> (<Literal>read</Literal>) permission on the policy object from which the
property information is to be returned.
</Para>
<VariableList>
<VarListEntry role="linebreak">
<Term>Event Type (Event Number, Event Classes)</Term>
<ListItem>
<Para><Literal>PROP_GetInfo (0x11E, dce_sec_control, dce_sec_query)</Literal>
</Para>
<VariableList>
<VarListEntry role="linebreak">
<Term>Event-Specific Information</Term>
<ListItem>
<Para>None
</Para>
</ListItem>
</VarListEntry>
</VariableList>
</ListItem>
</VarListEntry>
</VariableList>
<Para><IndexTerm Id="DCECR.MAN152.indx.100">
<Primary>functions</Primary>
<Secondary><Function>rs_properties_set_info()</Function></Secondary>
</IndexTerm>
<IndexTerm Id="DCECR.MAN152.indx.101">
<Primary><Function>rs_properties_set_info()</Function> function</Primary>
</IndexTerm>The <Function>rs_properties_set_info(&thinsp;)</Function> operation
sets the registry properties.  The caller must have the <Literal>m</Literal>
(<Literal>mgmt_info</Literal>) permission on the policy object for which the
property information is to be set.
</Para>
<VariableList>
<VarListEntry role="linebreak">
<Term>Event Type (Event Number, Event Classes)</Term>
<ListItem>
<Para><Literal>PROP_SetInfo (0x11F, dce_sec_control, dce_sec_modify)</Literal>
</Para>
<VariableList>
<VarListEntry role="linebreak">
<Term>Event-Specific Information</Term>
<ListItem>
<Para>None
</Para>
</ListItem>
</VarListEntry>
</VariableList>
</ListItem>
</VarListEntry>
</VariableList>
<Para><IndexTerm Id="DCECR.MAN152.indx.102">
<Primary>functions</Primary>
<Secondary><Function>rs_policy_get_info()</Function></Secondary>
</IndexTerm>
<IndexTerm Id="DCECR.MAN152.indx.103">
<Primary><Function>rs_policy_get_info()</Function> function</Primary>
</IndexTerm>The <Function>rs_policy_get_info(&thinsp;)</Function> operation
returns the policy for a specified organization or the registry
(if no organization name is specified).  The caller must have
the <Literal>r</Literal> (<Literal>read</Literal>) permission on the policy object or organization
item from which the data is to be returned.  Note that the
<Function>rs_policy_get_effective(&thinsp;)</Function> operation uses the same audit 
event (<Literal>POLICY_GetInfo</Literal>) as the <Function>rs_policy_get_info(&thinsp;)</Function> 
operation.
</Para>
<VariableList>
<VarListEntry role="linebreak">
<Term>Event Type (Event Number, Event Classes)</Term>
<ListItem>
<Para><Literal>POLICY_GetInfo (0x120, dce_sec_control, dce_sec_query)</Literal>
</Para>
<VariableList>
<VarListEntry role="linebreak">
<Term>Event-Specific Information</Term>
<ListItem>
<ProgramListing>
<UserInput>
char	*organization
</UserInput>
</ProgramListing>

</ListItem>
</VarListEntry>
</VariableList>
</ListItem>
</VarListEntry>
</VariableList>
<Para><IndexTerm Id="DCECR.MAN152.indx.104">
<Primary>functions</Primary>
<Secondary><Function>rs_policy_set_info()</Function></Secondary>
</IndexTerm>
<IndexTerm Id="DCECR.MAN152.indx.105">
<Primary><Function>rs_policy_set_info()</Function> function</Primary>
</IndexTerm>The <Function>rs_policy_set_info(&thinsp;)</Function> operation
sets the policy for a specified organization or the registry
(if no organization name is specified).  The caller must have the 
<Literal>m</Literal> (<Literal>mgmt_info</Literal>) permission on the policy object or 
organization item for which the data is to be set.
</Para>
<VariableList>
<VarListEntry role="linebreak">
<Term>Event Type (Event Number, Event Classes)</Term>
<ListItem>
<Para><Literal>POLICY_SetInfo (0x121, dce_sec_control, dce_sec_modify)</Literal>
</Para>
<VariableList>
<VarListEntry role="linebreak">
<Term>Event-Specific Information</Term>
<ListItem>
<ProgramListing>
<UserInput>
char *organization
</UserInput>
</ProgramListing>

</ListItem>
</VarListEntry>
</VariableList>
</ListItem>
</VarListEntry>
</VariableList>
<Para><IndexTerm Id="DCECR.MAN152.indx.106">
<Primary>functions</Primary>
<Secondary><Function>rs_auth_policy_get_info()</Function></Secondary>
</IndexTerm>
<IndexTerm Id="DCECR.MAN152.indx.107">
<Primary><Function>rs_auth_policy_get_info()</Function> function</Primary>
</IndexTerm>The <Function>rs_auth_policy_get_info(&thinsp;)</Function> operation
returns the authentication policy for a specified account or the
registry (if no account is specified).  The caller must have the
<Literal>r</Literal> (<Literal>read</Literal>) permission on the policy object or account's
principal from which the data is to be returned.
</Para>
<VariableList>
<VarListEntry role="linebreak">
<Term>Event Type (Event Number, Event Classes)</Term>
<ListItem>
<Para><Literal>AUTHPOLICY_GetInfo (0x122, dce_sec_control, dce_sec_query)</Literal>
</Para>
<VariableList>
<VarListEntry role="linebreak">
<Term>Event-Specific Information</Term>
<ListItem>
<ProgramListing>
<UserInput>
char *account
</UserInput>
</ProgramListing>

</ListItem>
</VarListEntry>
</VariableList>
</ListItem>
</VarListEntry>
</VariableList>
<Para><IndexTerm Id="DCECR.MAN152.indx.108">
<Primary>functions</Primary>
<Secondary><Function>rs_auth_policy_get_effective()</Function></Secondary>
</IndexTerm>
<IndexTerm Id="DCECR.MAN152.indx.109">
<Primary><Function>rs_auth_policy_get_effective()</Function> function</Primary>
</IndexTerm>The <Function>rs_auth_policy_get_effective(&thinsp;)</Function> operation
returns the effective authentication policy for an account.
If no account is specified, the authentication policy for
the registry is returned.  The caller must have <Literal>r</Literal> (<Literal>read</Literal>)
permission on the policy object of the registry.  If an account
is specified, the caller must also have <Literal>r</Literal> (<Literal>read</Literal>) 
permission on the account's principal.
</Para>
<VariableList>
<VarListEntry role="linebreak">
<Term>Event Type (Event Number, Event Classes)</Term>
<ListItem>
<Para>No new event is defined for this operation.  <Literal>AUTHPOLICY_GetInfo</Literal> is
used here.
</Para>
</ListItem>
</VarListEntry>
</VariableList>
<Para><IndexTerm Id="DCECR.MAN152.indx.110">
<Primary>functions</Primary>
<Secondary><Function>rs_auth_policy_set_info()</Function></Secondary>
</IndexTerm>
<IndexTerm Id="DCECR.MAN152.indx.111">
<Primary><Function>rs_auth_policy_set_info()</Function> function</Primary>
</IndexTerm>The <Function>rs_auth_policy_set_info(&thinsp;)</Function> operation
sets the authentication policy for an account or the registry (if
no account is specified).  The caller must have 
<Literal>a</Literal> (<Literal>auth_info</Literal>) permission on the account's
principal or policy object of the registry.
</Para>
<VariableList>
<VarListEntry role="linebreak">
<Term>Event Type (Event Number, Event Classes)</Term>
<ListItem>
<Para><Literal>AUTHPOLICY_SetInfo (0x123, dce_sec_control, dce_sec_modify)</Literal>
</Para>
<VariableList>
<VarListEntry role="linebreak">
<Term>Event-Specific Information</Term>
<ListItem>
<ProgramListing>
<UserInput>
char *account
</UserInput>
</ProgramListing>

</ListItem>
</VarListEntry>
</VariableList>
</ListItem>
</VarListEntry>
</VariableList>
</RefSect2>
<RefSect2 RevisionFlag="Changed">
<Title>Registry Administration Interface Operations</Title>
<Para><IndexTerm Id="DCECR.MAN152.indx.112">
<Primary>registry administration</Primary>
<Secondary>interfaces</Secondary>
</IndexTerm>
<IndexTerm Id="DCECR.MAN152.indx.113">
<Primary>registry administration</Primary>
</IndexTerm>The <Function>rs_rep_admin_stop(&thinsp;)</Function> operation
directs the registry server to stop servicing remote procedure calls.
The caller must have <Literal>A</Literal> (<Literal>Admin</Literal>) permission on the
registry policy object.
</Para>
<VariableList>
<VarListEntry role="linebreak">
<Term>Event Type (Event Number, Event Classes)</Term>
<ListItem>
<Para><Literal>REPADMIN_Stop (0x124, dce_sec_control, dce_sec_server)</Literal>
</Para>
<VariableList>
<VarListEntry role="linebreak">
<Term>Event-Specific Information</Term>
<ListItem>
<Para>None
</Para>
</ListItem>
</VarListEntry>
</VariableList>
</ListItem>
</VarListEntry>
</VariableList>
<Para><IndexTerm Id="DCECR.MAN152.indx.114">
<Primary>functions</Primary>
<Secondary><Function>rs_rep_admin_maint()</Function></Secondary>
</IndexTerm>
<IndexTerm Id="DCECR.MAN152.indx.115">
<Primary><Function>rs_rep_admin_maint()</Function> function</Primary>
</IndexTerm>The <Function>rs_rep_admin_maint(&thinsp;)</Function> operation
directs the registry server into (checkpoint the database, close files,
and so on) or out of maintenance state.  The caller must have
<Literal>A</Literal> (<Literal>Admin</Literal>) permission on the registry policy object.
</Para>
<VariableList>
<VarListEntry role="linebreak">
<Term>Event Type (Event Number, Event Classes)</Term>
<ListItem>
<Para><Literal>REPADMIN_Maint (0x125, dce_sec_control, dce_sec_server)</Literal>
</Para>
<VariableList>
<VarListEntry role="linebreak">
<Term>Event-Specific Information</Term>
<ListItem>
<ProgramListing>
<UserInput>
boolean in_maintenance
</UserInput>
</ProgramListing>

</ListItem>
</VarListEntry>
</VariableList>
</ListItem>
</VarListEntry>
</VariableList>
<Para><IndexTerm Id="DCECR.MAN152.indx.116">
<Primary>functions</Primary>
<Secondary><Function>rs_rep_admin_mkey()</Function></Secondary>
</IndexTerm>
<IndexTerm Id="DCECR.MAN152.indx.117">
<Primary><Function>rs_rep_admin_mkey()</Function> function</Primary>
</IndexTerm>The <Function>rs_rep_admin_mkey(&thinsp;)</Function> operation
directs the registry to change its master key and reencrypt
account keys using the new master key.  The caller must have <Literal>A</Literal>
(<Literal>Admin</Literal>) permission on the registry policy object.
</Para>
<VariableList>
<VarListEntry role="linebreak">
<Term>Event Type (Event Number, Event Classes)</Term>
<ListItem>
<Para><Literal>REPADMIN_Mkey (0x126, dce_sec_control, dce_sec_server)</Literal>
</Para>
<VariableList>
<VarListEntry role="linebreak">
<Term>Event-Specific Information</Term>
<ListItem>
<Para>None
</Para>
</ListItem>
</VarListEntry>
</VariableList>
</ListItem>
</VarListEntry>
</VariableList>
<Para>The <Function>rs_rep_admin_destroy(&thinsp;)</Function> operation directs the registry
server replica to destroy its database and exit.  The caller
must have <Literal>A</Literal> (<Literal>Admin</Literal>) permission on the registry policy object.
</Para>
<VariableList>
<VarListEntry role="linebreak">
<Term>Event Type (Event Classes)</Term>
<ListItem>
<Para><Literal>REPADMIN_Destroy (0x127, dce_sec_control, dce_sec_server)</Literal>
</Para>
<VariableList>
<VarListEntry role="linebreak">
<Term>Event-Specific Information</Term>
<ListItem>
<Para>None
</Para>
</ListItem>
</VarListEntry>
</VariableList>
</ListItem>
</VarListEntry>
</VariableList>
<Para>The <Function>rs_rep_admin_init_replica(&thinsp;)</Function> operation directs the registry
server to (re)initialize the slave identified by <Symbol Role="Variable">rep_id</Symbol>.
This is a master server only operation.  The caller must have <Literal>A</Literal>
(<Literal>Admin</Literal>) permission on the registry policy object.
</Para>
<VariableList>
<VarListEntry role="linebreak">
<Term>Event Type (Event Classes)</Term>
<ListItem>
<Para><Literal>REPADMIN_Init (0x128, dce_sec_control, dce_sec_server)</Literal>
</Para>
<VariableList>
<VarListEntry role="linebreak">
<Term>Event-Specific Information</Term>
<ListItem>
<ProgramListing>
<UserInput>
char  *rep_id_str
</UserInput>
</ProgramListing>

</ListItem>
</VarListEntry>
</VariableList>
</ListItem>
</VarListEntry>
</VariableList>
<!-- -->
<!-- -->
<!-- -->
<?og-ChangeStart def,13393,R1.2.2,add REPADMIN_SetSwRev">
<Para>The <Function>rs_rep_admin_set_sw_rev(&thinsp;)</Function> operation directs the registry server
to change its software version. The caller must have <Literal>A</Literal> (<Literal>Admin</Literal>)
permission on the registry policy object.
</Para>
<VariableList>
<VarListEntry role="linebreak">
<Term>Event Type (Event Number, Event Classes)</Term>
<ListItem>
<Para><Literal>REPADMIN_SetSwRev(0x013A, dce_sec_control, dce_sec_server)</Literal>
</Para>
<VariableList>
<VarListEntry role="linebreak">
<Term>Event-Specific Information</Term>
<ListItem>
<ProgramListing>
<UserInput>
unsigned32 sw_rev
</UserInput>
</ProgramListing>

</ListItem>
</VarListEntry>
</VariableList>
</ListItem>
</VarListEntry>
</VariableList>
<?og-ChangeEnd def,13393,R1.2.2,add REPADMIN_SetSwRev">
<!-- -->
<!-- -->
<!-- -->
<!-- .SS "Identifier Mapping Interface (secidmap) Operations"-->
<!-- .iX "identifier Mapping" interfaces"-->
<!-- .iX "Identifier Mapping" "\*Lsecidmap\*O"-->
<!-- .iX "\*Lsecidmap\*O operations"-->
<!-- .PP-->
<!-- .iX "functions" "\*Lrsec_id_parse_name(\|)\*O"-->
<!-- .iX "\*Lrsec_id_parse_name(\|)\*O function"-->
<!-- The \*Lrsec_id_parse_name(\|)\*O operation-->
<!-- translates a global name into principal and cell names and UUIDs.-->
<!-- If the principal's UUID is requested, the caller must have at-->
<!-- least one permission of any kind on the principal item.-->
<!-- .VL-->
<!-- .LI "Event Type (Event Number, Event Classes)"-->
<!-- \*LSECID_ParseName (0x129, dce_sec_control)\*O-->
<!-- .VL-->
<!-- .LI "Event-Specific Information"-->
<!-- .iS-->
<!-- char    global_namep-->
<!-- .iE-->
<!-- .LE-->
<!-- .LE-->
<!-- .PP-->
<!-- .iX "functions" "\*Lrsec_id_gen_name(\|)\*O"-->
<!-- .iX "\*Lrsec_id_gen_name(\|)\*O function"-->
<!-- The \*Lrsec_id_gen_name(\|)\*O operation-->
<!-- generates a global name from cell and principal UUIDs.  The-->
<!-- caller must have at least one permission of any kind on the-->
<!-- specified principal.-->
<!-- .VL-->
<!-- .LI "Event Type (Event Number, Event Classes)"-->
<!-- \*LSECID_GenName (0x12A, dce_sec_control)\*O-->
<!-- .LI "Event-Specific Information"-->
<!-- .VL-->
<!-- .LI "Event-Specific Information"-->
<!-- .iS-->
<!-- char    global_namep-->
<!-- .iE-->
<!-- .LE-->
<!-- .LE-->
</RefSect2>
<RefSect2>
<Title>Registry Server Attributes Manipulation Interface (rs_attr) Operations</Title>
<IndexTerm Id="DCECR.MAN152.indx.118">
<Primary>extended registry attributes (ERAs)</Primary>
</IndexTerm>
<IndexTerm Id="DCECR.MAN152.indx.119">
<Primary>delegation</Primary>
</IndexTerm>
<IndexTerm Id="DCECR.MAN152.indx.120">
<Primary>registry server attributes</Primary>
</IndexTerm>
<Para>The <Function>rs_attr_update(&thinsp;)</Function> operation updates (writes/creates) 
an attribute.  The caller must have, for each attribute defined 
in <Literal>attr_keys</Literal>, the <Literal>q</Literal> (<Literal>query_permset</Literal>) permission on the 
registry object specified.
</Para>
<VariableList>
<VarListEntry role="linebreak">
<Term>Event Type (Event Classes)</Term>
<ListItem>
<Para><Literal>ERA_Update (0x12B, dce_sec_control, dce_sec_modify)</Literal>
</Para>
<VariableList>
<VarListEntry role="linebreak">
<Term>Event-Specific Information</Term>
<ListItem>
<ProgramListing>
<UserInput>
char		* component_name
unsigned32	int num_to_write
uuid 		in_attrs[num_to_write].attr_id
</UserInput>
</ProgramListing>

</ListItem>
</VarListEntry>
</VariableList>
</ListItem>
</VarListEntry>
</VariableList>
<Para><?sml-need 9>The <Function>rs_attr_delete(&thinsp;)</Function> operation deletes a specified attribute(s).
The caller must have <Literal>delete_permset</Literal> permission for each attribute 
specified.
</Para>
<VariableList>
<VarListEntry role="linebreak">
<Term>Event Type (Event Classes)</Term>
<ListItem>
<Para><Literal>ERA_Delete (0x12C, dce_sec_control, dce_sec_modify)</Literal>
</Para>
<VariableList>
<VarListEntry role="linebreak">
<Term>Event-Specific Information</Term>
<ListItem>
<ProgramListing>
<UserInput>
char		* component_name
<?sml-break>unsigned32 	num_to_delete
<?sml-break>uuid 		attrs[num_to_delete].attr_id
</UserInput>
</ProgramListing>
</ListItem>
</VarListEntry>
</VariableList>
</ListItem>
</VarListEntry>
</VariableList>
<Para>The <Function>rs_attr_lookup_by_id(&thinsp;)</Function> operation performs a lookup of the 
attributes by attribute type ID.  If the number of query attribute keys
is 0, this operation will return all attributes that the caller
is authorized to use.  The caller must have, for each attribute
specified, the <Literal>q</Literal> (<Literal>query_permset</Literal>) permission on the registry 
object specified.
</Para>
<VariableList>
<VarListEntry role="linebreak">
<Term>Event Type (Event Classes)</Term>
<ListItem>
<Para><Literal>ERA_LookupById (0x12E, dce_sec_control)</Literal>
</Para>
<VariableList>
<VarListEntry role="linebreak">
<Term>Event-Specific Information</Term>
<ListItem>
<ProgramListing>
<UserInput>
char		* component_name
<?sml-break>unsigned32 	int num_attr_keys
<?sml-break>uuid 		attr_keys[num_attr_keys].attr_id
</UserInput>
</ProgramListing>

</ListItem>
</VarListEntry>
</VariableList>
</ListItem>
</VarListEntry>
</VariableList>
<Para>The <Function>rs_attr_lookup_no_expand(&thinsp;)</Function> operation performs a lookup of the
attributes by attribute type ID without expanding attribute sets to
their constituent member attributes.  If the number of query attribute 
keys is 0, this operation will return all attributes that the caller
is authorized to use.  The caller must have, for each attribute
specified, <Literal>q</Literal> (<Literal>query_permset</Literal>) permission on the registry object
specified.
</Para>
<VariableList>
<VarListEntry role="linebreak">
<Term>Event Type (Event Classes)</Term>
<ListItem>
<Para><Literal>ERA_LookupNoExpand (0x12F, dce_sec_control)</Literal>
</Para>
<VariableList>
<VarListEntry role="linebreak">
<Term>Event-Specific Information</Term>
<ListItem>
<ProgramListing>
<UserInput>
char		* component_name
<?sml-break>unsigned32 	int num_attr_keys
<?sml-break>uuid 		attr_keys[num_attr_keys].attr_id
</UserInput>
</ProgramListing>

</ListItem>
</VarListEntry>
</VariableList>
</ListItem>
</VarListEntry>
</VariableList>
<Para>The <Function>rs_attr_lookup_by_name(&thinsp;)</Function> operation performs a lookup of
an attribute by name.  The caller must have, for the attribute
specified, <Literal>q</Literal> (<Literal>query_permset</Literal>)
permission on the registry object specified.
</Para>
<VariableList RevisionFlag="Changed">
<?og-ChangeStart def,13338,R1.2.2,0x12G to 0x130">
<VarListEntry role="linebreak">
<Term>Event Type (Event Classes)</Term>
<ListItem>
<Para><Literal>ERA_LookupByName (0x130, dce_sec_control)</Literal>
<?og-ChangeEnd def,13338,R1.2.2,0x12G to 0x130"></Para>
<VariableList>
<VarListEntry role="linebreak">
<Term>Event-Specific Information</Term>
<ListItem>
<ProgramListing>
<UserInput>
char	* component_name
<?sml-break>char	* attr_name
</UserInput>
</ProgramListing>

</ListItem>
</VarListEntry>
</VariableList>
</ListItem>
</VarListEntry>
</VariableList>
<?sml-break>
</RefSect2>
<RefSect2>
<Title>Registry Server Attributes Schema Manipulation Interface (rs_attr_schema) Operations</Title>
<Para>The <Function>rs_attr_schema_create_entry(&thinsp;)</Function> operation creates a new schema entry.
The caller must be authorized to add entries to the specified schema.
</Para>
<VariableList>
<VarListEntry role="linebreak">
<Term>Event Type (Event Classes)</Term>
<ListItem>
<Para><Literal>ERA_SchemaCreate (0x131, dce_sec_control, dce_sec_modify)</Literal>
</Para>
<VariableList>
<VarListEntry role="linebreak">
<Term>Event-Specific Information</Term>
<ListItem>
<ProgramListing>
<UserInput>
char	* schema_name
<?sml-break>char 	* schema_entry->attr_name
<?sml-break>uuid	schema_entry->attr_id
</UserInput>
</ProgramListing>

</ListItem>
</VarListEntry>
</VariableList>
</ListItem>
</VarListEntry>
</VariableList>
<Para>The <Function>rs_attr_schema_delete_entry(&thinsp;)</Function> operation deletes a schema entry.
The caller must be authorized to delete schema entries.
</Para>
<VariableList>
<VarListEntry role="linebreak">
<Term>Event Type (Event Classes)</Term>
<ListItem>
<Para><Literal>ERA_SchemaDelete (0x132, dce_sec_control, dce_sec_modify)</Literal>
</Para>
<VariableList>
<VarListEntry role="linebreak">
<Term>Event-Specific Information</Term>
<ListItem>
<ProgramListing>
<UserInput>
char	*schema_name
<?sml-break>uuid	attr_id
</UserInput>
</ProgramListing>

</ListItem>
</VarListEntry>
</VariableList>
</ListItem>
</VarListEntry>
</VariableList>
<Para>The <Function>rs_attr_schema_update_entry(&thinsp;)</Function> operation updates the 
modifiable fields of a schema entry.  The caller needs to have 
<Literal>m (mgmt_info)</Literal> permissions on the schema entry that is to be modified.
</Para>
<VariableList>
<VarListEntry role="linebreak">
<Term>Event Type (Event Classes)</Term>
<ListItem>
<Para><Literal>ERA_SchemaUpdate (0x133, dce_sec_control, dce_sec_modify)</Literal>
</Para>
<VariableList>
<VarListEntry role="linebreak">
<Term>Event-Specific Information</Term>
<ListItem>
<ProgramListing>
<UserInput>
char	* schema_name
<?sml-break>uuid	schema_entry->attr_id
</UserInput>
</ProgramListing>
</ListItem>
</VarListEntry>
</VariableList>
</ListItem>
</VarListEntry>
</VariableList>
<Para>The <Function>rs_attr_schema_lookup_by_id(&thinsp;)</Function> operation retrieves the 
schema entry identified by the attribute type <Command>uuid</Command>.  The caller must have
<Literal>r (read)</Literal> permissions on the schema entry specified.
</Para>
<VariableList>
<VarListEntry role="linebreak">
<Term>Event Type (Event Classes)</Term>
<ListItem>
<Para><Literal>ERA_SchemaLookupId (0x134, dce_sec_control)</Literal>
</Para>
<VariableList>
<VarListEntry role="linebreak">
<Term>Event-Specific Information</Term>
<ListItem>
<ProgramListing>
<UserInput>
char	* schema_name
<?sml-break>uuid 	attr_id
</UserInput>
</ProgramListing>

</ListItem>
</VarListEntry>
</VariableList>
</ListItem>
</VarListEntry>
</VariableList>
<Para><?sml-need 9>The <Function>rs_attr_schema_lookup_by_name(&thinsp;)</Function> operation retrieves the schema entry
identified by the attribute name.  The caller must have 
<Literal>r (read)</Literal> permissions on the schema entry specified.
</Para>
<VariableList>
<VarListEntry role="linebreak">
<Term>Event Type (Event Classes)</Term>
<ListItem>
<Para><Literal>ERA_SchemaLookupName (0x135, dce_sec_control)</Literal>
</Para>
<VariableList>
<VarListEntry role="linebreak">
<Term>Event-Specific Information</Term>
<ListItem>
<ProgramListing>
<UserInput>
char	* schema_name
<?sml-break>char	* attr_name
</UserInput>
</ProgramListing>

</ListItem>
</VarListEntry>
</VariableList>
</ListItem>
</VarListEntry>
</VariableList>
</RefSect2>
<RefSect2>
<Title>Version 1.1 Privilege Server Manager Interface (rpriv_v1_1) Operations</Title>
<Para>The <Function>rpriv_get_eptgt(&thinsp;)</Function> operation constructs and returns an extended
privilege certificate to the ticket_granting service.  The caller
supplies the extended privilege attributes in the form of an encoded 
extended privilege attribute certificate (EPAC).  The procedure
by which the requested privilege attributes are verified depends
on how the call is authenticated and whether the request is <Replaceable>local</Replaceable>
(that is, is a request from a client in this privilege server's cell)
or is <FirstTerm>intercell</FirstTerm> (that is, is from a foreign privilege service).
</Para>
<Para>If the request is local, then the ticket to the privilege server
is based on a Kerberos V5 TGT and the <Literal>requested_privs</Literal> consists
of a single encoded EPAC.  The privilege server decodes the 
<Literal>requested_privs</Literal> and verifies that the requested privileges are
valid by performing the necessary database queries.
</Para>
<Para>If the request is foreign, then the ticket to the privilege service
is based on a DCE extended privilege TGT and the privilege server 
retrieves the EPAC 
seal from the DCE authorization data contained in the ticket, and 
uses it to verify that the requested privileges are valid.
</Para>
<VariableList>
<VarListEntry role="linebreak">
<Term>Event Type (Event Classes)</Term>
<ListItem>
<Para><Literal>PRIV_GetEptgt (0x136, dce_sec_control, dce_sec_authent)</Literal>
</Para>
<VariableList>
<VarListEntry role="linebreak">
<Term>Event-Specific Information</Term>
</VarListEntry>
</VariableList>

</ListItem>
</VarListEntry>
</VariableList>
<Para>
<InformalExample>
<Para>
<ProgramListing>
<UserInput>
char * request_location		/* "LOCAL" or "INTERCELL" */

if "LOCAL" request:
uuid req_princ_id->uuid;	/* requested local principal uuid */
uuid req_group_id->uuid;	/* requested local primary group uuid */
unsigned short int num_groups	/* number of valid local groups */
uuid = groups[num_groups].uuid	/* valid local groups' uuids */

if "INTERCELL" request:
unsigned short int num_epacs	/* number of epacs in delegation chain */
uuid [num_epacs].pa.realm.uuid	/* privilege attribute realm uuid */
uuid [num_epacs].pa.principal.uuid	/* privilege attribute principal uuid */
uuid [num_epacs].pa.num_groups	/* number of groups in privilege attribute */
uuid [num_epacs].pa.groups[([epac_set.num_epacs].pa.num_groups)].uuid
				/* uuids for groups in privilege attribute */
<?sml-indent>
</UserInput></ProgramListing></Para>
</InformalExample>
</Para>

<Para><?sml-need 18>The <Function>rpriv_become_delegate(&thinsp;)</Function> operation permits an intermediate server 
to become a delegate for its caller.  The caller supplies extended 
privilege attributes in the form of an encoded EPAC.  
The privilege server verifies that 
the delegation token for this EPAC chain is correct and then creates 
a new chain from the existing one with the intermediary's EPAC as a 
new delegate.
</Para>
<VariableList>
<VarListEntry role="linebreak">
<Term>Event Type (Event Classes)</Term>
<ListItem>
<Para><Literal>PRIV_BecomeDelegate (0x138, dce_sec_control, dce_sec_authent)</Literal>
</Para>
<VariableList>
<VarListEntry role="linebreak">
<Term>Event-Specific Information</Term>
</VarListEntry>
</VariableList>
</ListItem>
</VarListEntry>
</VariableList>
<Para>
<InformalExample>
<Para><ProgramListing><UserInput><?sml-indent -.5i>uuid req_princ_id->uuid;		/* requested local principal uuid */
uuid req_group_id->uuid;		/* requested local primary group uuid */
unsigned short int num_groups	/* number of valid local groups */
uuid = groups[num_groups].uuid	/* valid local groups' uuids */
unsigned short int num_epacs	/* number of epacs in delegation chain */
uuid [num_epacs].pa.realm.uuid	/* privilege attribute realm uuid */
uuid [num_epacs].pa.principal.uuid	/* privilege attribute principal uuid */
uuid [num_epacs].pa.num_groups	/* number of groups in privilege attribute */
uuid [num_epacs].pa.groups[([epac_set.num_epacs].pa.num_groups)].uuid
				/* uuids for groups in privilege attribute */
<?sml-indent></UserInput></ProgramListing></Para>
</InformalExample>
</Para>


<Para>The <Function>rpriv_become_impersonator(&thinsp;)</Function> operation permits an 
intermediate server 
to become an impersonator for its caller.  The caller supplies extended 
privilege attributes in the form of an encoded 
EPAC.  The privilege server verifies that 
the delegation token for the initator's EPAC is correct and also that the
intermediary is allowed to impersonate the initiator.
</Para>
<VariableList>
<VarListEntry role="linebreak">
<Term>Event Type (Event Classes)</Term>
<ListItem>
<Para><Literal>PRIV_BecomeImpersonator (0x139, dce_sec_control, dce_sec_authent)</Literal>
</Para>
<VariableList>
<VarListEntry role="linebreak">
<Term>Event-Specific Information</Term>
</VarListEntry>
</VariableList>
</ListItem>
</VarListEntry>
</VariableList>
<Para>
<InformalExample>
<Para><ProgramListing><UserInput><?sml-indent -.5i>uuid req_princ_id->uuid;		/* requested local principal uuid */
uuid req_group_id->uuid;	/* requested local primary group uuid */
unsigned short int num_groups	/* number of valid local groups */
uuid = groups[num_groups].uuid	/* valid local groups' uuids */
unsigned short int num_epacs	/* number of epacs in delegation chain */
uuid [num_epacs].pa.realm.uuid	/* privilege attribute realm uuid */
uuid [num_epacs].pa.principal.uuid /* privilege attribute principal uuid */
uuid [num_epacs].pa.num_groups	/* number of groups in privilege attribute */
uuid [num_epacs].pa.groups[([epac_set.num_epacs].pa.num_groups)].uuid
				/* uuids for groups in privilege attribute */
<?sml-indent>
</UserInput></ProgramListing></Para>
</InformalExample>
</Para>

</RefSect2>
</RefSect1>
<RefSect1>
<Title>Related Information</Title>
<Para><!--no-op:  l-->
Commands:
<Filename MoreInfo="RefEntry">dcecp(8dce)</Filename>.
</Para>
<Para>Files:
<Filename MoreInfo="RefEntry">dts_audit_events(5sec)</Filename>,
<Filename MoreInfo="RefEntry">event_class.5sec</Filename>.
<!--no-op:  b-->
</Para>
</RefSect1>
<!--+ 11/07/96 22:10:27
    | tagMorph:  $Id: sec_audit_events.5sec,v 1.1.2.11 1996/12/14 17:18:08 carrig Exp $
    | tagMorph library:  $Id: sec_audit_events.5sec,v 1.1.2.11 1996/12/14 17:18:08 carrig Exp $
    | sml-to-docbook:  1.24
    +-->
</RefEntry>
