<!--
# COPYRIGHT NOTICE
# Copyright (c) 1990-1996 Open Software Foundation, Inc. 
# ALL RIGHTS RESERVED (DCE). See the file named COPYRIGHT.DCE in the 
# src directory for the full copyright text. 
# 
# 
# HISTORY
# $Log: 1_de.xds.sgm,v $
# Revision 1.1.2.11  1996/12/17  19:28:36  damon
# 	Expanded OSF C O P Y R I G H T   N O T I C E
# 	[1996/12/17  19:22:15  damon]
#
# Revision 1.1.2.10  1996/12/09  21:12:44  carrig
# 	{enh,R1.2.2}
# 	Wide Pgm Listing
# 	[1996/12/09  21:10:42  carrig]
# 
# Revision 1.1.2.9  1996/12/09  00:06:57  carrig
# 	{enh,R1.2.2}
# 	Put in editor's comments
# 	[1996/12/09  00:05:14  carrig]
# 
# Revision 1.1.2.8  1996/10/23  18:48:17  carrig
# 	{enh,R1.2.2}
# 	Ready for editor (2)
# 	[1996/10/23  18:46:28  carrig]
# 
# Revision 1.1.2.7  1996/10/22  21:05:28  carrig
# 	{enh,R1.2.2}
# 	Fixed tables
# 	[1996/10/22  21:04:06  carrig]
# 
# Revision 1.1.2.6  1996/10/21  20:33:57  carrig
# 	{enh,R1.2.2}
# 	Worked on tables
# 	[1996/10/21  20:32:12  carrig]
# 
# Revision 1.1.2.5  1996/10/17  21:08:28  carrig
# 	{enh,R1.2.2}
# 	Worked on tables
# 	[1996/10/17  21:06:45  carrig]
# 
# 	{enh,R1.2.2}
# 	Worked on tables
# 	[1996/10/17  20:53:55  carrig]
# 
# Revision 1.1.2.4  1996/10/16  21:33:07  carrig
# 	{enh,R1.2.2}
# 	First pass at tables
# 	[1996/10/16  21:31:01  carrig]
# 
# Revision 1.1.2.3  1996/10/07  17:31:38  wardr
# 	{enh,R1.2.2}
# 	Update for sgml conversion
# 	[1996/10/07  17:31:18  wardr]
# 
# Revision 1.1.2.2  1996/09/28  15:21:09  weir
# 	Cleaned up old history
# 	[1996/09/28  15:19:30  weir]
# 
# Revision 1.1.2.1  1996/09/25  20:27:28  weir
# 	Initial submission
# 	[1996/09/25  20:26:10  weir]
# 
# $EndLog$
# 
-->
<!---->
<!-- Fragment document type declaration subset:
ArborText, Inc., 1988-1993, v.4001
<!DOCTYPE Book PUBLIC "-//Davenport//DTD DocBook V2.4//EN" [
]>
-->
<!---->
<!---->
<!-- OLD HISTORY-->
<!-- Revision 1.1.9.14  1995/06/15  16:25:35  rcb-->
<!-- 	edited 1.1 version, PRENTICE HALL reformat-->
<!-- 	[1995/06/13  19:35:58  rcb]-->
<!---->
<!-- 	edited 1.1 version, PRENTICE HALL reformat-->
<!-- 	[1995/06/08  19:51:25  rcb]-->
<!---->
<!-- Revision 1.1.9.13  1994/11/03  23:31:36  neilson-->
<!-- 	Substituted macros for book names in cross refs.-->
<!-- 	[1994/11/03  01:38:21  neilson]-->
<!-- -->
<!-- 	Substituted macros for book names in cross refs.-->
<!-- -->
<!-- Revision 1.1.9.12  1994/10/20  19:01:47  weir-->
<!-- 	{def,10389,R1.1}-->
<!-- 	Corrected references to intro reference page.-->
<!-- 	[1994/10/20  19:01:20  weir]-->
<!-- -->
<!-- Revision 1.1.9.11  1994/10/20  17:09:04  rnollman-->
<!-- 	last checkin to be safe-->
<!-- 	[1994/10/20  17:08:48  rnollman]-->
<!-- -->
<!-- Revision 1.1.9.10  1994/10/19  15:59:14  rnollman-->
<!-- 	fixed formatting errors-->
<!-- 	[1994/10/19  15:59:03  rnollman]-->
<!-- -->
<!-- Revision 1.1.9.9  1994/10/18  17:27:19  rnollman-->
<!-- 	editorial changes from Dublin-->
<!-- 	[1994/10/18  17:27:08  rnollman]-->
<!-- -->
<!-- Revision 1.1.9.8  1994/10/17  21:14:07  rnollman-->
<!-- 	incorporated editorial changes from Dublin-->
<!-- 	[1994/10/17  21:13:54  rnollman]-->
<!-- -->
<!-- Revision 1.1.9.7  1994/08/05  15:41:54  rnollman-->
<!-- 	[rnollman] - Checkin after OSF edits-->
<!-- 	[1994/08/05  15:41:03  rnollman]-->
<!-- -->
<!-- 	[rnollman] - checkin afaterafter incorporating OSF edits-->
<!-- -->
<!-- Revision 1.1.9.4  1994/05/14  22:40:51  rnollman-->
<!-- 	last beta submittal-->
<!-- 	[1994/05/14  22:35:28  rnollman]-->
<!-- -->
<!-- Revision 1.1.9.3  1994/05/10  21:13:45  rnollman-->
<!-- 	final update for beta-->
<!-- 	[1994/05/10  21:13:29  rnollman]-->
<!-- -->
<!-- Revision 1.1.9.2  1993/11/11  21:35:14  rnollman-->
<!-- 	updated SNI copyright-->
<!-- 	[1993/11/11  21:34:58  rnollman]-->
<!-- -->
<!-- Revision 1.1.9.1  1993/10/27  14:58:30  rnollman-->
<!-- 	[rnollman] - Adding revision of Chapter from Dublin-->
<!-- 	[1993/10/27  14:58:01  rnollman]-->
<!-- -->
<!-- 	new version of chapter from Dublin-->
<!-- -->
<!-- 	ready to add new chapters from Dublin-->
<!-- 	[1993/10/27  14:38:21  rnollman]-->
<!-- -->
<!-- Revision 1.1.7.3  93/01/28  18:38:54  cjd-->
<!-- 	Embedded copyright notice-->
<!-- 	[1993/01/28  17:58:00  cjd]-->
<!-- -->
<!-- Revision 1.1.7.2  1992/11/19  21:52:36  weir-->
<!-- 	Moved into 1.0.2doc tree-->
<!-- 	[1992/11/19  21:46:26  weir]-->
<!-- -->
<!-- Revision 1.1.5.7  1992/11/11  23:41:05  buckler-->
<!-- 	Corrected index entries-->
<!-- 	[1992/11/11  22:44:28  buckler]-->
<!-- -->
<!-- Revision 1.1.5.6  1992/10/29  20:41:20  lmk-->
<!-- 	Prentice-Hall index edits only-->
<!-- 	[1992/10/29  20:37:07  lmk]-->
<!-- -->
<!-- Revision 1.1.5.5  1992/10/26  19:22:47  steiner-->
<!-- 	A few more P-H edits.-->
<!-- 	[1992/10/26  19:22:23  steiner]-->
<!-- -->
<!-- Revision 1.1.5.4  1992/10/19  14:44:09  steiner-->
<!-- 	Questions from Julie B.-->
<!-- 	(Changed package names, reference.)-->
<!-- 	[1992/10/19  14:43:35  steiner]-->
<!-- -->
<!-- Revision 1.1.5.3  1992/10/15  21:52:27  buckler-->
<!-- 	Pre-Prentice-Hall editorial review-->
<!-- 	[1992/10/15  21:50:13  buckler]-->
<!-- -->
<!-- Revision 1.1.5.2  1992/09/25  17:21:33  steiner-->
<!-- 	First P-H editing pass (edits from Eddie Doyle).-->
<!-- 	[1992/09/25  17:21:07  steiner]-->
<!-- -->
<!-- Revision 1.1.2.4  1992/06/15  15:19:56  buckler-->
<!-- 	Fixed various formatting problems-->
<!-- 	[1992/06/15  15:15:56  buckler]-->
<!-- -->
<!-- Revision 1.1.2.3  1992/06/12  20:27:42  buckler-->
<!-- 	Incorporated changes from Brian Keane (Dublin) markup-->
<!-- 	[1992/06/12  20:25:51  buckler]-->
<!-- -->
<!-- Revision 1.1.2.2  1992/06/10  21:17:58  marty-->
<!-- 	Doc drop from Dublin-->
<!-- 	[1992/06/10  21:14:30  marty]-->
<!-- -->
<!---->
<Chapter Id="DCEADG.REFDE.div.1">
<Title>XDS Interface Description</Title>
<Para><!-- /* * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *-->
<!-- * COPYRIGHT   (C)  SIEMENS NIXDORF INFORMATIONSSYSTEME AG 1994   *-->
<!-- *                  ALL RIGHTS RESERVED                           *-->
<!-- *                                                                *-->
<!-- * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * */-->
The XDS interface comprises a number of functions,
together with many OM classes of OM objects, which are
used as the parameters and results of the functions.
Both the functions and the OM objects are based closely on the
abstract service
<IndexTerm Id="DCEADG.REFDE.indx.1">
<Primary>abstract service</Primary>
</IndexTerm>that is specified in the standards (see <Replaceable>The Directory:
<IndexTerm Id="DCEADG.REFDE.indx.2">
<Primary>standards</Primary>
</IndexTerm>Abstract Service Definition</Replaceable>, ISO 9594-3, CCITT X.511).
</Para>
<Para>The interface models the directory interactions as service requests
made through a number of interface
functions,
which take a number of input
parameters.
Each valid request causes an
operation
<IndexTerm Id="DCEADG.REFDE.indx.3">
<Primary>operation</Primary>
<Secondary>directory service</Secondary>
</IndexTerm>within the directory service, which eventually returns a
status
and any
result
of the operation.
</Para>
<Para>All interactions between the user and the directory service belong to a
session,
<IndexTerm Id="DCEADG.REFDE.indx.4">
<Primary>session</Primary>
</IndexTerm>which is represented by an OM object
passed as the first parameter to most interface functions.
</Para>
<Para>The other parameters to the functions include a
context
<IndexTerm Id="DCEADG.REFDE.indx.5">
<Primary>context</Primary>
</IndexTerm>and various service-specific parameters.
The context includes a number of parameters that
are common to many functions, and that seldom change
from operation to operation.
</Para>
<Para>Each of the components of this model are described in the following
sections in this chapter along with other features of the interface,
such as security.
</Para>
<Sect1 Id="DCEADG.REFDE.div.2">
<Title>XDS Conformance to Standards</Title>
<Para>The XDS interface defines an API
that application programs can use to access the functionality of
the underlying directory service.
The DCE XDS API conforms to the
<Replaceable>X/Open CAE Specification,
API to directory services (XDS)</Replaceable> (November 1991).
</Para>
<Para>The DCE XDS implementation supports the following features:
</Para>
<ItemizedList>
<ListItem>
<Para>A synchronous interface.  Asynchronous functionality can be achieved by
using threads as described in Chapter 8.
</Para>
</ListItem>
<ListItem>
<Para>All synchronous interface functions are supported.  The two asynchronous-specific
functions are handled as follows:
</Para>
<ItemizedList>
<ListItem>
<Para><Function>ds_abandon(&thinsp;)</Function>
<!-- DCE 1.2 WRITERS: as DCT points out in a review comment, it says in-->
<!-- chapter 6, "The \*Lds_abandon(\|)\*O function is not supported in-->
<!-- this release."-->
</Para>
<Para>This call does not issue a directory service
abandon operation.  It returns with a
<Literal>DS_C_ABANDON_FAILED</Literal> (<Literal>DS_E_TOO_LATE</Literal>) error.  For details on 
abandoning operations see Section 10.10.3.
</Para>
</ListItem>
<ListItem>
<Para><Function>ds_receive_result(&thinsp;)</Function>
</Para>
<Para>If there are any outstanding operations (when multiple threads issue
XDS calls in parallel), this function returns <Literal>DS_SUCCESS</Literal> with the
<Symbol Role="Variable">completion_flag_return</Symbol> parameter
set to <Literal>DS_OUTSTANDING_OPERATIONS</Literal>.
If no XDS calls are outstanding, this function returns <Literal>DS_SUCCESS</Literal> 
with the <Symbol Role="Variable">completion_flag_return</Symbol> parameter
set to <Literal>DS_NO_OUTSTANDING_OPERATION</Literal>.
</Para>
</ListItem>
</ItemizedList>
</ListItem>
<ListItem>
<Para>Automatic connection management is not provided.  The <Function>ds_bind(&thinsp;)</Function> and
<Function>ds_unbind(&thinsp;)</Function> functions always try, respectively,
to set up and release directory service
connections immediately.
</Para>
</ListItem>
<ListItem>
<Para>The <Literal>DS_FILE_DESCRIPTOR</Literal> attribute of the <Literal>DS_C_SESSION</Literal> object is
not used.
</Para>
</ListItem>
<ListItem>
<Para>The default values for OM attributes in the <Literal>DS_C_CONTEXT</Literal> and
<Literal>DS_C_SESSION</Literal> objects are described in Chapter 11.
</Para>
</ListItem>
<ListItem>
<Para>Support for local strings.  XDS supports the mapping from/to local string
formats.  The programmer can request this feature when using the 
following XDS/XOM functions:
</Para>
<ItemizedList>
<?sml-need 5>
<ListItem>
<Para><Function>dsX_extract_attr_values(&thinsp;)</Function>
</Para>
</ListItem>
<ListItem>
<Para><Function>omX_extract(&thinsp;)</Function>
</Para>
</ListItem>
<ListItem>
<Para><Function>omX_object_to_string(&thinsp;)</Function>
</Para>
</ListItem>
<ListItem>
<Para><Function>omX_string_to_object(&thinsp;)</Function>
</Para>
</ListItem>
<ListItem>
<Para><Function>om_get(&thinsp;)</Function>
</Para>
</ListItem>
<ListItem>
<Para><Function>om_read(&thinsp;)</Function>
</Para>
</ListItem>
</ItemizedList>
<Para>The programmer controls this mapping through the <Symbol Role="Variable">local_strings</Symbol> Boolean
parameter.  To request conversion, set this parameter to <Literal>OM_TRUE</Literal>.  The
mappings currently suported are as follows:
</Para>
<ItemizedList>
<ListItem>
<Para>T.61 String to/from ISO 8859-1 (that is, LATIN-1)
</Para>
</ListItem>
</ItemizedList>
<Para>For details on these mappings, refer to the &DCEAx;.
</Para>
<Para>On input, when requesting conversion of LATIN-1 characters to T.61 format,
you should only use the T.61 subset; otherwise, an error is returned.
</Para>
</ListItem>
</ItemizedList>
<Para>DCE XDS supports five packages, of which one is mandatory and
four are optional.
Use of the optional packages is negotiated by using
<IndexTerm Id="DCEADG.REFDE.indx.6">
<Primary>package</Primary>
<Secondary>XDS</Secondary>
</IndexTerm><Function>ds_version(&thinsp;)</Function>.
The packages are as follows:
</Para>
<ItemizedList>
<ListItem>
<Para>The directory service package (as defined in Chapter 11),
which also includes the errors.
This package is mandatory.
</Para>
</ListItem>
<ListItem>
<Para>The basic directory contents package (as defined in Chapter 12).
This package is optional.
</Para>
</ListItem>
<ListItem>
<Para>The strong authentication package (as defined in Chapter 13).
This package is optional.
</Para>
</ListItem>
<ListItem>
<Para>The message handling system directory user package (as defined in Chapter 14).  This package is optional.
</Para>
</ListItem>
<ListItem>
<Para>The GDS package (as defined in Chapter 15).  This package is optional.
</Para>
</ListItem>
</ItemizedList>
<Para>None of the OM classes defined in these five packages are encodable.
Thus, DCE XDS application programmers do not require the
use of the XOM functions
<Function>om_encode(&thinsp;)</Function> and <Function>om_decode(&thinsp;)</Function>, which are not supported by the
DCE XOM API.
</Para>
</Sect1>
<Sect1 Id="DCEADG.REFDE.div.3">
<Title>The XDS Functions</Title>
<Para>As mentioned already, the standards
define abstract services that requestors use to interact with the directory.
Each of these abstract services maps to a single function call,
and the detailed specifications are given in the XDS reference pages.
The services and the function calls to which they map are as follows:
</Para>
<VariableList>
<VarListEntry role="linebreak">
<Term><Literal>DirectoryBind</Literal></Term>
<ListItem>
<Para>Maps to <Function>ds_bind(&thinsp;)</Function>
</Para>
</ListItem>
</VarListEntry>
<VarListEntry role="linebreak">
<Term><Literal>DirectoryUnbind</Literal></Term>
<ListItem>
<Para>Maps to <Function>ds_unbind(&thinsp;)</Function>
</Para>
</ListItem>
</VarListEntry>
<VarListEntry>
<Term><Literal>Read</Literal></Term>
<ListItem>
<Para>Maps to <Function>ds_read(&thinsp;)</Function>
</Para>
</ListItem>
</VarListEntry>
<VarListEntry>
<Term><Literal>Compare</Literal></Term>
<ListItem>
<Para>Maps to <Function>ds_compare(&thinsp;)</Function>
</Para>
</ListItem>
</VarListEntry>
<VarListEntry>
<Term><Literal>Abandon</Literal></Term>
<ListItem>
<Para>Maps to <Function>ds_abandon(&thinsp;)</Function>
</Para>
</ListItem>
</VarListEntry>
<VarListEntry>
<Term><Literal>List</Literal></Term>
<ListItem>
<Para>Maps to <Function>ds_list(&thinsp;)</Function>
</Para>
</ListItem>
</VarListEntry>
<VarListEntry>
<Term><Literal>Search</Literal></Term>
<ListItem>
<Para>Maps to <Function>ds_search(&thinsp;)</Function>
</Para>
</ListItem>
</VarListEntry>
<VarListEntry>
<Term><Literal>AddEntry</Literal></Term>
<ListItem>
<Para>Maps to <Function>ds_add_entry(&thinsp;)</Function>
</Para>
</ListItem>
</VarListEntry>
<VarListEntry role="linebreak">
<Term><Literal>RemoveEntry</Literal></Term>
<ListItem>
<Para>Maps to <Function>ds_remove_entry(&thinsp;)</Function>
</Para>
</ListItem>
</VarListEntry>
<VarListEntry>
<Term><Literal>ModifyEntry</Literal></Term>
<ListItem>
<Para>Maps to <Function>ds_modify_entry(&thinsp;)</Function>
</Para>
</ListItem>
</VarListEntry>
<VarListEntry>
<Term><Literal>ModifyRDN</Literal></Term>
<ListItem>
<Para>Maps to <Function>ds_modify_rdn(&thinsp;)</Function>
</Para>
</ListItem>
</VarListEntry>
</VariableList>
<Para>There is a function called
<Function>ds_receive_result(&thinsp;)</Function>,
which has no counterpart in the abstract service.
It is used with asynchronous operations. 
(See the <Filename MoreInfo="RefEntry">xds_intro(3xds)</Filename> 
reference page for information on how the asynchronous
functions <Function>ds_abandon(&thinsp;)</Function> and <Function>ds_receive_result(&thinsp;)</Function> are handled
by the DCE XDS API.)
<IndexTerm Id="DCEADG.REFDE.indx.7">
<Primary>API</Primary>
</IndexTerm></Para>
<Para>The <Function>ds_initialize(&thinsp;)</Function>,
<Function>ds_shutdown(&thinsp;)</Function>, and
<Function>ds_version(&thinsp;)</Function> functions
are used to control the XDS API and do not initiate any directory
operations.
</Para>
<Para>The interface functions are summarized in Table 10-1.
</Para>
<?sml-need 35>
<Table Frame="all" Remap="center" Orient="Port">
<Title>The XDS Interface Functions</Title>
<TGroup Cols="2">
<ColSpec Colsep="1" Align="Left" Colwidth="1*" Colname="col1" Colnum="1">
<ColSpec Align="Left" Colwidth="1.5*" Colname="col2" Colnum="2">
<THead>
<Row>
<Entry rowsep="1"><Literal>Name</Literal></Entry>
<Entry rowsep="1"><Literal>Description</Literal></Entry>
</Row>
</THead>
<TBody>
<Row>
<Entry Rowsep="1"><Function>ds_abandon(&thinsp;)</Function></Entry>
<Entry Rowsep="1">
Abandons the result of a pending
asynchronous operation.
This function is not supported.  See <Filename MoreInfo="RefEntry">xds_intro(3xds)</Filename>.
</Entry>
</Row>
<Row>
<Entry Rowsep="1"><Function>ds_add_entry(&thinsp;)</Function></Entry>
<Entry Rowsep="1">
Adds a leaf entry to the DIT.
</Entry>
</Row>
<Row>
<Entry Rowsep="1"><Function>ds_bind(&thinsp;)</Function></Entry>
<Entry Rowsep="1">
Opens a session with a DUA (Directory User Agent), which in
turn connects to a DSA.
</Entry>
</Row>
<Row>
<Entry Rowsep="1"><Function>ds_compare(&thinsp;)</Function></Entry>
<Entry Rowsep="1">
Compares a purported attribute value
with the attribute value stored in the DIB
for a particular entry.
</Entry>
</Row>
<Row>
<Entry Rowsep="1"><Function>ds_initialize(&thinsp;)</Function></Entry>
<Entry Rowsep="1">
Initializes the XDS interface.
</Entry>
</Row>
<Row>
<Entry Rowsep="1"><Function>ds_list(&thinsp;)</Function></Entry>
<Entry Rowsep="1">
Enumerates the names of the immediate
subordinates of a particular directory entry.
</Entry>
</Row>
<Row>
<Entry Rowsep="1"><Function>ds_modify_entry(&thinsp;)</Function></Entry>
<Entry Rowsep="1">
Atomically performs modification to a
directory entry.
</Entry>
</Row>
<Row>
<Entry Rowsep="1"><Function>ds_modify_rdn(&thinsp;)</Function></Entry>
<Entry Rowsep="1">
Changes the RDN of a leaf entry.
</Entry>
</Row>
<Row>
<Entry Rowsep="1"><Function>ds_read(&thinsp;)</Function></Entry>
<Entry Rowsep="1">
Queries information on a particular directory
entry by name.
</Entry>
</Row>
<Row>
<Entry Rowsep="1"><Function>ds_receive_result(&thinsp;)</Function></Entry>
<Entry Rowsep="1">
Retrieves the result of an asynchronously
executed function.  See
<Filename MoreInfo="RefEntry">xds_intro(3xds)</Filename>. 
</Entry>
</Row>
<Row>
<Entry Rowsep="1"><Function>ds_remove_entry(&thinsp;)</Function></Entry>
<Entry Rowsep="1">
Removes a leaf entry from the DIT.
</Entry>
</Row>
<Row>
<Entry Rowsep="1"><Function>ds_search(&thinsp;)</Function></Entry>
<Entry Rowsep="1">
Finds entries of interest in a portion
of the DIT.
</Entry>
</Row>
<Row>
<Entry Rowsep="1"><Function>ds_shutdown(&thinsp;)</Function></Entry>
<Entry Rowsep="1">
Discards a workspace.
</Entry>
</Row>
<Row>
<Entry Rowsep="1"><Function>ds_unbind(&thinsp;)</Function></Entry>
<Entry Rowsep="1">
Unbinds from a directory session.
</Entry>
</Row>
<Row>
<Entry><Function>ds_version(&thinsp;)</Function></Entry>
<Entry>
Negotiates features of the interface
and service.
</Entry>
</Row>
</TBody>
</TGroup>
</Table>
</Sect1>
<Sect1 Id="DCEADG.REFDE.div.4">
<Title>The XDS Negotiation Sequence</Title>
<Para>The interface has an initialization and shutdown sequence that permits
the negotiation of optional features.
This involves the
<Function>ds_initialize(&thinsp;)</Function>, <Function>ds_version(&thinsp;)</Function>, and
<Function>ds_shutdown(&thinsp;)</Function> functions.
</Para>
<Para>Every application program must first call
<Function>ds_initialize(&thinsp;)</Function>,
which returns a workspace.
This workspace supports the standard directory service package
(see Chapter 11).
</Para>
<Para>The workspace can be extended to support the optional
basic directory contents package (see Chapter 12),
the strong authentication package (see Chapter 13),
the GDS package
(see Chapter 15),
or the MHS directory user package (see Chapter 14).
These packages are identified by means of
OSI object identifiers, and these object identifiers are supplied to
<Function>ds_version(&thinsp;)</Function>
to incorporate the extensions into the workspace.
</Para>
<Para>After a workspace with the required features is negotiated in this way,
the application can use the workspace as required.
It can create and manipulate OM objects by using the OM functions,
and it can start one or more directory sessions by using
<Function>ds_bind(&thinsp;)</Function>.
</Para>
<Para>After completing its tasks,
terminating all its directory sessions by using
<Function>ds_unbind(&thinsp;)</Function>,
and releasing all its OM objects by using
<Function>om_delete(&thinsp;)</Function>,
the application needs to ensure that resources associated with the interface
are freed by calling
<Function>ds_shutdown(&thinsp;)</Function>.
</Para>
<Para>It is possible to retain access to service-generated public objects after
<Function>ds_shutdown(&thinsp;)</Function>
is called,
or to start another cycle by calling
<Function>ds_initialize(&thinsp;)</Function>
if so required by the application design.
</Para>
</Sect1>
<Sect1 Id="DCEADG.REFDE.div.5">
<Title>The session Parameter</Title>
<Para>A session identifies the DUA and the suite of
DSAs to which a
particular directory operation is sent.
It contains some <Literal>DirectoryBindArguments</Literal>, such as
the distinguished name of the requestor.
The <Symbol Role="Variable">session</Symbol> parameter
is passed as the first parameter to most interface functions.
</Para>
<Para><?sml-need 6>A session is described by an OM object of OM class
<Literal>DS_C_SESSION</Literal>.
It is created, and appropriate parameter values can be set
with the OM functions.
A directory session then starts with
<Function>ds_bind(&thinsp;)</Function>
and later terminates with
<Function>ds_unbind(&thinsp;)</Function>.
A session with default parameters can be started by passing the constant
<Literal>DS_DEFAULT_SESSION</Literal>
<IndexTerm Id="DCEADG.REFDE.indx.8">
<Primary>default</Primary>
<Secondary>directory session</Secondary>
</IndexTerm>
<IndexTerm Id="DCEADG.REFDE.indx.9">
<Primary>session</Primary>
<Secondary>default directory</Secondary>
</IndexTerm>
<IndexTerm Id="DCEADG.REFDE.indx.10">
<Primary>default</Primary>
<Secondary>session</Secondary>
</IndexTerm>as the
<Literal>DS_C_SESSION</Literal> parameter to <Function>ds_bind(&thinsp;)</Function>.
</Para>
<Para>The <Function>ds_bind(&thinsp;)</Function> function must be called before
<Literal>DS_C_SESSION</Literal>
can be used as a parameter to any other function in this interface.
After
<Function>ds_unbind(&thinsp;)</Function> is called, <Function>ds_bind(&thinsp;)</Function>
must be called again if another session is to be started.
</Para>
<Para>The interface supports multiple concurrent sessions
so that an application implemented as a single process,
such as a server in a client/server model,
can interact with the directory by using several identities,
and a process
can interact directly and concurrently with different parts of the directory.
</Para>
<Para>Details of the OM class <Literal>DS_C_SESSION</Literal> are given in
Chapter 11.
</Para>
</Sect1>
<Sect1 Id="DCEADG.REFDE.div.6">
<Title>The context Parameter</Title>
<Para>The context defines the characteristics of the directory interaction
that are specific to a particular directory operation;
nevertheless, the same characteristics are often used for many operations.
Since these parameters are presumed to be relatively static for a given
directory user during a particular directory interaction, these parameters
are collected into an OM object of OM class
<Literal>DS_C_CONTEXT</Literal>,
which is supplied as the second parameter of each directory service request.
This reduces the number of parameters passed to each function.
</Para>
<Para>The context includes many administrative details,
such as the
<Literal>CommonArguments</Literal>
defined in the abstract service,
which affect the processing of each directory operation.
These details include a number of
<Literal>ServiceControls</Literal>,
which allow control over some aspects of the service.
The <Literal>ServiceControls</Literal> include options
such as
<Literal>preferChaining</Literal>,
<Literal>chainingProhibited</Literal>,
<Literal>localScope</Literal>,
<Literal>dontUseCopy</Literal>,
and
<Literal>dontDereferenceAliases</Literal>,
together with
<Literal>priority</Literal>,
<Literal>timeLimit</Literal>,
<Literal>sizeLimit</Literal>,
and
<Literal>scopeOfReferral</Literal>.
Each of these is mapped onto an OM attribute in the context
(see Chapter 11).
</Para>
<Para><?sml-need 4>The effect of passing the <Symbol Role="Variable">context</Symbol> parameter is as if its contents
were passed as a group
of additional parameters for every function call.
The value of each component of the context
is determined when the interface function is called,
and it remains fixed throughout the operation.
</Para>
<Para>All OM attributes in the class
<Literal>DS_C_CONTEXT</Literal>
have default values, some of which are administered locally.
The constant
<Literal>DS_DEFAULT_CONTEXT</Literal>
<IndexTerm Id="DCEADG.REFDE.indx.11">
<Primary>default</Primary>
<Secondary>context</Secondary>
</IndexTerm>can be passed as the value of the
<Literal>DS_C_CONTEXT</Literal>
parameter to the interface functions,
and it has the same effect as a context OM object created with default values.
The context must be a private object, unless it is
<Literal>DS_DEFAULT_CONTEXT</Literal>.
</Para>
<Para>(See Chapter 11 for
detailed specifications of the OM class
<Literal>DS_C_CONTEXT</Literal>.)
</Para>
</Sect1>
<Sect1 Id="DCEADG.REFDE.div.7">
<Title>The XDS Function Arguments</Title>
<Para>The abstract service
defines specific parameters for each operation.
These are mapped onto corresponding parameters to each interface
function, which are also called <Symbol Role="Variable">input parameters</Symbol>.
Although each service has different parameters,
some specific parameters recur in several operations
and these are briefly introduced here.
(For complete details of these parameters,
see Chapter 11.)
</Para>
<Para>All parameters that are OM objects can generally be supplied to the
interface functions as public objects (that is, descriptor lists) or as
private objects.
Private objects must be created in the workspace that is returned by
<Function>ds_initialize(&thinsp;)</Function>.
In some cases, constants can be supplied instead of OM objects.
</Para>
<Note>
<Para>Wherever a function can accept an instance of
a particular OM class as the value of a parameter,
it also accepts an instance of any subclass of the OM class.
For example, most functions have a
<Symbol Role="Variable">name</Symbol>
parameter, which accepts values of OM class
<Symbol Role="Variable">DS_C_NAME</Symbol>.
It is always acceptable to supply an instance of the subclass
<Literal>DS_C_DS_DN</Literal>
as the value of the parameter.
</Para>
</Note>
<Sect2 Id="DCEADG.REFDE.div.8">
<Title>Attribute and Attribute Value Assertion</Title>
<Para>Each directory attribute is represented in the interface
by an OM object of OM class
<Literal>DS_C_ATTRIBUTE</Literal>.
The type of the directory attribute is represented by an OM attribute,
<Literal>DS_ATTRIBUTE_TYPE</Literal>,
within the OM object.  The values of the 
directory attribute are expressed as the values of
the OM attribute
<Literal>DS_ATTRIBUTE_VALUES</Literal>.
</Para>
<Para>The representation of the attribute value depends on the attribute type
and is determined as indicated in the following list.
The list describes
the way in which an application program must supply values
to the interface; for example, in the
<Symbol Role="Variable">changes</Symbol> parameter to
<Function>ds_modify_entry(&thinsp;)</Function>.
The interface follows the same rules when returning attribute values to
the application; for example, in the <Function>ds_read(&thinsp;)</Function> result.
</Para>
<ItemizedList>
<ListItem>
<Para>The first possibility is that the attribute type and the representation
of the corresponding values can be defined in a package;
for example, the selected attribute types from the standards
that are defined in the basic directory contents package in Chapter 12
and the strong authentication package in Chapter 13.
In this case, attribute values are represented as specified.
Additional directory attribute types and their OM representations are
defined by the GDS package.
</Para>
</ListItem>
<ListItem>
<Para>If the attribute type is not known 
and the value is an ASN.1 simple type such as
<Literal>IntegerType</Literal>,
the representation is the corresponding type specified in Chapter 17.
</Para>
</ListItem>
<ListItem>
<Para>If the attribute type is not known and the value
is an ASN.1 structured type,
the value is represented in the Basic Encoding Rules (BER)
<IndexTerm Id="DCEADG.REFDE.indx.12">
<Primary>BER</Primary>
</IndexTerm>with OM syntax String(<Literal>OM_S_ENCODING_STRING</Literal>).
</Para>
<Note>
<Para>The distinguished encoding specified in the standards
<IndexTerm Id="DCEADG.REFDE.indx.13">
<Primary>distinguished encoding</Primary>
</IndexTerm>(see Clause 8.7 of <Replaceable>The Directory: Authentication
Framework</Replaceable>, ISO 9594-8, CCITT X.500)
must be used if the request is to be signed.
</Para>
</Note>
</ListItem>
</ItemizedList>
<Para>Where attribute values have OM syntax String(<Literal>*</Literal>),
they can be long segmented strings, and the functions
<Function>om_read(&thinsp;)</Function> and <Function>om_write(&thinsp;)</Function>
need to be used to access them.
</Para>
<Para><?sml-need 6>An attribute value assertion (AVA)
is an assertion about the value of an attribute of an entry,
and it can be TRUE, FALSE, or undefined.
It consists of an attribute type and a single value.
In general, the AVA is TRUE if one of the values of the given attribute
in the entry matches the given value.
An AVA is represented in the interface by an instance of OM class
<Literal>DS_C_AVA</Literal>,
which is a subclass of
<Literal>DS_C_ATTRIBUTE</Literal> and can only have one value.
</Para>
<Para>Information used by
<Function>ds_add_entry(&thinsp;)</Function>
to construct a new directory entry is represented
by an OM object of OM class
<Literal>DS_C_ATTRIBUTE_LIST</Literal>,
which contains a single multivalued OM attribute whose values are
OM objects of OM class
<Literal>DS_C_ATTRIBUTE</Literal>.
</Para>
</Sect2>
<Sect2 Id="DCEADG.REFDE.div.9">
<Title>The selection Parameter</Title>
<Para>The
<Symbol Role="Variable">selection</Symbol>
parameter of the
<Function>ds_read(&thinsp;)</Function> and <Function>ds_search(&thinsp;)</Function>
operations tailors its results to obtain just part of the required entry.
Information on all attributes, no attributes,
or a specific group of attributes can be chosen.
Attribute types are always returned,
but the attribute values are not necessarily returned.
</Para>
<Para>The value of the parameter is an instance of OM class
<Literal>DS_C_ENTRY_INFO_SELECTION</Literal>,
but one of the constants in the following list can be used in simple cases:
</Para>
<ItemizedList>
<ListItem>
<Para>To verify the existence of an entry for the purported name,
use the constant
<Literal>DS_SELECT_NO_ATTRIBUTES</Literal>.
</Para>
</ListItem>
<ListItem>
<Para>To return just the types of all attributes, use the constant
<Literal>DS_SELECT_ALL_TYPES</Literal>.
</Para>
</ListItem>
<ListItem>
<Para>To return the types and values of all attributes, use the constant
<Literal>DS_SELECT_ALL_TYPES_AND_VALUES</Literal>.
</Para>
</ListItem>
</ItemizedList>
<Para>To choose a particular set of attributes,
create a new instance of the OM class
<Literal>DS_C_ENTRY_INFO_SELECTION</Literal>
and set the appropriate OM attribute values by using the OM functions.
</Para>
</Sect2>
<Sect2 Id="DCEADG.REFDE.div.10">
<Title>The name Parameter</Title>
<Para>Most operations take a
<Symbol Role="Variable">name</Symbol>
parameter to specify the target of the operation.
The name is represented by an instance of
one of the subclasses of the OM class
<Literal>DS_C_NAME</Literal>.
The DCE XDS API defines the subclass
<Literal>DS_C_DS_DN</Literal>
to represent distinguished names and other names.
</Para>
<Para>For directory interrogations,
any aliases in the name are dereferenced,
unless prohibited by the
<Literal>DS_DONT_DEREFERENCE_ALIASES</Literal>
service control.
However, for modify operations, this service control is ignored if set,
and aliases are never dereferenced.
</Para>
<Para>RDNs are represented by an instance of one of the subclasses of the OM class
<Literal>DS_C_RELATIVE_NAME</Literal>.
The DCE XDS API defines the subclass
<Literal>DS_C_DS_RDN</Literal>
to represent RDNs.
</Para>
</Sect2>
</Sect1>
<Sect1 Id="DCEADG.REFDE.div.11">
<Title>XDS Function Call Results</Title>
<Para>All XDS functions return a <Literal>DS_status</Literal>,
which is the C function result;
most return data in an <Symbol Role="Variable">invoke_id</Symbol> parameter,
which identifies the particular invocation,
and the interrogation operations each return data in the <Symbol Role="Variable">result</Symbol>
parameter.
The <Symbol Role="Variable">invoke_id</Symbol> and <Symbol Role="Variable">result</Symbol> values
are returned using pointers that are
supplied as parameters of the C function.
These three types of function results are introduced in the
following subsections.
</Para>
<Para>All OM objects returned by interface functions
(results and errors)
are private objects in the workspace returned by
<Function>ds_initialize(&thinsp;)</Function>.
</Para>
<Sect2 Id="DCEADG.REFDE.div.12">
<Title>The invoke_id Parameter</Title>
<Para>All interface functions that invoke a directory service operation
return an <Symbol Role="Variable">invoke_id</Symbol> parameter, which is
an integer that identifies the particular invocation of an operation.
Since asynchronous operations (within the same thread)
are not supported, the <Symbol Role="Variable">invoke_id</Symbol>
return value is no longer
relevant for operations. 
DCE application programmers must still supply this parameter as described
in the XDS reference pages,
but they should ignore the value returned.
</Para>
</Sect2>
<Sect2 Id="DCEADG.REFDE.div.13">
<Title>The result Parameter</Title>
<Para>Directory service
interrogation operations return a <Symbol Role="Variable">result</Symbol> value only if they succeed.
All errors from these operations, including directory access protocol
(DAP) errors,
are reported in
<Literal>DS_status</Literal>
(see Section 10.7.3),
as are errors from all other operations.
</Para>
<Para>The result of an interrogation is returned in a private object
whose OM class is appropriate to the particular operation.
The format of directory operation results is driven by the abstract service.
To simplify processing, the result of a single operation is returned in a 
single OM object, which corresponds to the abstract result defined in the 
standards.  The components of the result of an operation
are represented by OM attributes in the operation's result object.
All information contained in the abstract service result is
made available to the application program.
The result is inspected using the functions
provided in the object management API, <Function>om_get(&thinsp;)</Function>.
</Para>
<Para>Only the interrogation operations produce results,
and each type of interrogation
has a specific OM class of OM object for its result.
These OM classes are as follows (see Chapter 11 for their
definitions):
</Para>
<ItemizedList>
<ListItem>
<Para><Literal>DS_C_COMPARE_RESULT
</Literal></Para>
</ListItem>
<ListItem>
<Para><Literal>DS_C_LIST_RESULT</Literal>
</Para>
</ListItem>
<ListItem>
<Para><Literal>DS_C_READ_RESULT</Literal>
</Para>
</ListItem>
<ListItem>
<Para><Literal>DS_C_SEARCH_RESULT</Literal>
</Para>
</ListItem>
</ItemizedList>
<Para>The results of the different operations share several common components,
including the <Literal>CommonResults</Literal>
defined in the standards (see <Replaceable>The Directory: Abstract
Service Definition</Replaceable>, ISO 9594-3, CCITT X.511)
by inheriting OM attributes from the superclass
<Symbol Role="Variable">DS_C_COMMON_RESULTS</Symbol>.
An additional common component is the full DN of
the target object, after all aliases are dereferenced.
</Para>
<Para>The actual OM class of the result can always be a subclass of that named
in order to allow flexibility for extensions.
Thus, <Function>om_instance(&thinsp;)</Function>
always needs to be used when testing the OM class.
</Para>
<Para>Any attribute values in the result are represented as discussed
in Section 10.6.1.
</Para>
</Sect2>
<Sect2 Id="DCEADG.REFDE.div.14">
<Title>The DS_status Return Value</Title>
<Para><IndexTerm Id="DCEADG.REFDE.indx.14">
<Primary>status</Primary>
<Secondary>directory</Secondary>
</IndexTerm>Every interface function returns a
<Literal>DS_status</Literal>
value, which is either the constant
<Literal>DS_SUCCESS</Literal>
or an error.
Errors are represented by private objects
whose OM class is a subclass of
<Symbol Role="Variable">DS_C_ERROR</Symbol>.
Details of all errors are given in Chapter 11.
</Para>
<Para>Other results of functions are not valid unless the status result
has the value
<Literal>DS_SUCCESS</Literal>.
</Para>
</Sect2>
</Sect1>
<Sect1 Id="DCEADG.REFDE.div.15">
<Title>Synchronous Operations</Title>
<Para><!-- ***  Operating Mode  ***-->
Since asynchronous use of the interface (within the same thread)
is not supported, the value of
the <Literal>DS_ASYNCHRONOUS</Literal> OM attribute in <Literal>DS_C_CONTEXT</Literal>
is always <Literal>OM_FALSE</Literal>,
causing all operations within the same thread to be synchronous.
</Para>
<Para><!-- ***  Synchronous mode  ***-->
<!---->
In synchronous mode,
all functions wait until the operation is complete before returning.
The thread of control is blocked within the interface after calling a
function,
and it can use the result immediately after the function returns.
</Para>
<Para>Implementations define a limit on the number of asynchronous
operations that can be outstanding at any one time on any one session.
The limit is given by the implementation-defined constant
<Literal>DS_MAX_OUTSTANDING_OPERATIONS</Literal>.
<IndexTerm Id="DCEADG.REFDE.indx.15">
<Primary>max outstanding operations</Primary>
</IndexTerm>It always has the value 0 (zero)
because asynchronous operations within the same thread are not supported.
</Para>
<Para>All errors occurring during a synchronous request are reported when the
function returns.
(See Chapter 11 for complete details of error handling.)
</Para>
<Para>The <Literal>DS_FILE_DESCRIPTOR</Literal> OM attribute of <Literal>DS_C_SESSION</Literal> is not
used by the DCE XDS API and is always set to 
<Literal>DS_NO_VALID_FILE_DESCRIPTOR</Literal>.
</Para>
</Sect1>
<Sect1 Id="DCEADG.REFDE.div.16">
<Title>Security and XDS</Title>
<Para>The X/Open XDS specifications do not define a security interface because this
can put constraints on security features of existing directory
implementations.
</Para>
<Para>DCE GDS provides an extension to the XDS API for security support.
This is achieved at the XDS
API level through a new <Literal>DSX_C_GDS_SESSION</Literal> session object that
contains information on the security mechanism that should be used.
Simple authentication through the use of name and password, and external
authentication based on DCE security, are supported.
(See Chapter 15 for additional information.)
</Para>
</Sect1>
<Sect1 Id="DCEADG.REFDE.div.17">
<Title>Other Features of the XDS Interface</Title>
<Para>The following subsections describe
these features of the interface:
</Para>
<ItemizedList>
<ListItem>
<Para>Automatic Connection Management
</Para>
</ListItem>
<ListItem>
<Para>Automatic Continuation and Referral Handling
</Para>
</ListItem>
</ItemizedList>
<Sect2 Id="DCEADG.REFDE.div.18">
<Title>Automatic Connection Management</Title>
<Para>An implementation can provide automatic management of the association
or connection between the user and the directory service,
making and releasing connections at its discretion.
</Para>
<Para>The DCE XDS implementation does not support automatic connection management.
A DSA connection is established when <Function>ds_bind(&thinsp;)</Function> is called and released
when <Function>ds_unbind(&thinsp;)</Function> is called.
</Para>
</Sect2>
<Sect2 Id="DCEADG.REFDE.div.19">
<Title>Automatic Continuation and Referral Handling</Title>
<Para>The interface provides automatic handling of continuation 
references and referrals
in order to reduce the burden on application programs.
These facilities can be inhibited to meet special needs.
</Para>
<Para>A <Symbol Role="Variable">continuation reference</Symbol> describes how the performance of all or part
<IndexTerm Id="DCEADG.REFDE.indx.16">
<Primary>continuation reference</Primary>
</IndexTerm>of an operation can be continued at a different DSA or DSAs.
A single continuation reference
returned as the entire response to an operation
is called a <Symbol Role="Variable">referral</Symbol>
<IndexTerm Id="DCEADG.REFDE.indx.17">
<Primary>referral</Primary>
</IndexTerm>and is classified as an error.
One or more continuation references can also be returned as part of
<Literal>DS_PARTIAL_OUTCOME_QUAL</Literal>
returned from a <Function>ds_list(&thinsp;)</Function> or <Function>ds_search(&thinsp;)</Function> operation.
</Para>
<Para>A DSA returns a referral if it has administrative, operational, or
technical reasons for preferring not to chain.
It can return a referral if
<Literal>DS_CHAINING_PROHIB</Literal>
is set in the
<Literal>DS_C_CONTEXT</Literal>,
or it can report a service error (<Literal>DS_E_CHAINING_REQUIRED</Literal>)
instead.
</Para>
<Para>By default, the implementation uses any continuation references
it receives to try to contact the other DSA or DSAs,
enabling it to make further progress in the operation, whenever practical.
It only returns the result, or an error, to the application
after it has made this attempt.
Note that continuation references can still be returned to the application;
for example, if the relevant DSA cannot be contacted.
</Para>
<Para>The default behavior is the simplest for most applications but, if necessary,
the application can cause all continuation references to be returned to it.
It does this by setting the value of the OM attribute
<Literal>DS_AUTOMATIC_CONTINUATION</Literal>
in the
<Literal>DS_C_CONTEXT</Literal>
to <Literal>OM_FALSE</Literal>.
</Para>
</Sect2>
<Sect2 Id="DCEADG.REFDE.div.20">
<Title>Abandoning Operations</Title>
<Para>The XDS user can abandon a directory operation when operating in multithreaded
mode.  An operation is abandoned by calling <Function>pthread_cancel(&thinsp;)</Function> to
cancel the thread that issued the directory operation.  General cancelability
must be enabled; otherwise, the cancelability will be ignored.
</Para>
<Para><?sml-need 6>XDS will react as follows, depending on when the cancel is delivered:
</Para>
<ItemizedList>
<ListItem>
<Para>Before interaction with the DSA
</Para>
<ItemizedList>
<ListItem>
<Para>Nothing is sent to the DSA.
</Para>
</ListItem>
<ListItem>
<Para>The exception <Literal>pthread_cancel_e</Literal> is reraised.
</Para>
</ListItem>
</ItemizedList>
</ListItem>
<ListItem>
<Para>While waiting for a response from the DSA
</Para>
<ItemizedList>
<ListItem>
<Para>An <Literal>ABANDON</Literal> message is sent to the DSA.
</Para>
</ListItem>
<ListItem>
<Para>The exception <Literal>pthread_cancel_e</Literal> is reraised.
</Para>
</ListItem>
</ItemizedList>
</ListItem>
<ListItem>
<Para>After the result has arrived, but before a point has been reached when it is
committed to be passed back to the user
</Para>
<ItemizedList>
<ListItem>
<Para>The result is thrown away.
</Para>
</ListItem>
<ListItem>
<Para>The exception <Literal>pthread_cancel_e</Literal> is reraised.
</Para>
</ListItem>
</ItemizedList>
</ListItem>
<ListItem>
<Para>After the point where result return is committed
place
</Para>
<ItemizedList>
<ListItem>
<Para>The cancel is ignored.
</Para>
</ListItem>
<ListItem>
<Para>The result is returned normally.
</Para>
</ListItem>
</ItemizedList>
</ListItem>
</ItemizedList>
<Para>It is the responsibility of the user to handle the cancel exception in the
last case and, if necessary, to discard the result.
</Para>
</Sect2>
</Sect1>
</Chapter>
<!--+ 09/23/96 11:54:18
    | tagMorph:  $Id: 1_de.xds.sgm,v 1.1.2.11 1996/12/17 19:28:36 damon Exp $
    | tagMorph library:  $Id: 1_de.xds.sgm,v 1.1.2.11 1996/12/17 19:28:36 damon Exp $
    | sml-to-docbook:  1.21
    +-->
