<!--
# COPYRIGHT NOTICE
# Copyright (c) 1990-1996 Open Software Foundation, Inc. 
# ALL RIGHTS RESERVED (DCE). See the file named COPYRIGHT.DCE in the 
# src directory for the full copyright text. 
# 
# 
# HISTORY
# $Log: 1_sy.xom.sgm,v $
# Revision 1.1.2.11  1996/12/17  19:28:40  damon
# 	Expanded OSF C O P Y R I G H T   N O T I C E
# 	[1996/12/17  19:22:18  damon]
#
# Revision 1.1.2.10  1996/12/09  21:12:49  carrig
# 	{enh,R1.2.2}
# 	Wide Pgm Listing
# 	[1996/12/09  21:10:48  carrig]
# 
# Revision 1.1.2.9  1996/12/09  00:07:02  carrig
# 	{enh,R1.2.2}
# 	Put in editor's comments
# 	[1996/12/09  00:05:19  carrig]
# 
# Revision 1.1.2.8  1996/10/23  18:48:22  carrig
# 	{enh,R1.2.2}
# 	Ready for editor (2)
# 	[1996/10/23  18:46:34  carrig]
# 
# Revision 1.1.2.7  1996/10/22  21:05:33  carrig
# 	{enh,R1.2.2}
# 	Fixed tables
# 	[1996/10/22  21:04:12  carrig]
# 
# Revision 1.1.2.6  1996/10/21  20:34:01  carrig
# 	{enh,R1.2.2}
# 	Worked on tables
# 	[1996/10/21  20:32:17  carrig]
# 
# Revision 1.1.2.5  1996/10/17  21:08:33  carrig
# 	{enh,R1.2.2}
# 	Worked on tables
# 	[1996/10/17  21:06:50  carrig]
# 
# 	{enh,R1.2.2}
# 	Worked on tables
# 	[1996/10/17  20:54:01  carrig]
# 
# Revision 1.1.2.4  1996/10/16  21:33:11  carrig
# 	{enh,R1.2.2}
# 	First pass at tables
# 	[1996/10/16  21:31:06  carrig]
# 
# Revision 1.1.2.3  1996/10/07  17:31:41  wardr
# 	{enh,R1.2.2}
# 	Update for sgml conversion
# 	[1996/10/07  17:31:23  wardr]
# 
# Revision 1.1.2.2  1996/09/28  15:21:13  weir
# 	Cleaned up old history
# 	[1996/09/28  15:19:35  weir]
# 
# Revision 1.1.2.1  1996/09/25  20:27:35  weir
# 	Initial submission
# 	[1996/09/25  20:26:14  weir]
# 
# $EndLog$
# 
-->
<!---->
<!-- Fragment document type declaration subset:
ArborText, Inc., 1988-1993, v.4001
<!DOCTYPE Book PUBLIC "-//Davenport//DTD DocBook V2.4//EN" [
]>
-->
<!-- OLD HISTORY-->
<!-- Revision 1.1.10.1  1996/09/03  18:40:44  wardr-->
<!-- 	{enh,R1.2.2}-->
<!-- 	Update for sgml conversion-->
<!-- 	[1996/09/03  18:39:51  wardr]-->
<!---->
<!-- Revision 1.1.8.8  1995/06/15  16:25:48  rcb-->
<!-- 	edited 1.1 version, PRENTCE HALL reformat-->
<!-- 	[1995/06/13  19:36:05  rcb]-->
<!-- -->
<!-- 	edited 1.1 version, PRENTICE HALL reformat-->
<!-- 	[1995/06/12  20:07:30  rcb]-->
<!-- -->
<!-- Revision 1.1.8.7  1994/08/05  15:45:51  rnollman-->
<!-- 	[rnollman] - Checkin after OSF edits-->
<!-- 	[1994/08/05  15:45:29  rnollman]-->
<!-- -->
<!-- 	[rnollman] - checkin afaterafter incorporating OSF edits-->
<!-- -->
<!-- Revision 1.1.8.4  1994/05/14  22:41:11  rnollman-->
<!-- 	last beta submittal-->
<!-- 	[1994/05/14  22:36:02  rnollman]-->
<!-- -->
<!-- Revision 1.1.8.3  1994/05/10  21:16:16  rnollman-->
<!-- 	final update for beta-->
<!-- 	[1994/05/10  21:15:40  rnollman]-->
<!-- -->
<!-- Revision 1.1.8.2  1993/11/11  21:36:47  rnollman-->
<!-- 	updated SNI copyright-->
<!-- 	[1993/11/11  21:36:30  rnollman]-->
<!-- -->
<!-- Revision 1.1.8.1  1993/10/27  15:15:42  rnollman-->
<!-- 	fixed problem with log format-->
<!-- 	[1993/10/27  15:15:22  rnollman]-->
<!-- -->
<!-- Revision 1.1.6.4  1993/03/16  19:38:55  buckler-->
<!-- 	Fixed formatting problem in Table 35-1 (moved notes out of table).-->
<!-- 	[1993/03/16  19:38:12  buckler]-->
<!-- -->
<!-- Revision 1.1.6.3  1993/01/28  18:39:00  cjd-->
<!-- 	Embedded copyright notice-->
<!-- 	[1993/01/28  17:58:06  cjd]-->
<!-- -->
<!-- Revision 1.1.6.2  1992/11/19  21:52:46  weir-->
<!-- 	Moved into 1.0.2doc tree-->
<!-- 	[1992/11/19  21:46:33  weir]-->
<!-- -->
<!-- Revision 1.1.4.6  1992/11/11  23:41:14  buckler-->
<!-- 	Corrected index entries-->
<!-- 	[1992/11/11  22:44:39  buckler]-->
<!-- -->
<!-- Revision 1.1.4.5  1992/10/29  20:41:24  lmk-->
<!-- 	Prentice-Hall index edits only-->
<!-- 	[1992/10/29  20:37:15  lmk]-->
<!-- -->
<!-- Revision 1.1.4.4  1992/10/27  16:18:33  steiner-->
<!-- 	More P-H edits - changed fonts of superscripts, and 0 or 1 to zero or-->
<!-- 	one.-->
<!-- 	[1992/10/27  16:18:12  steiner]-->
<!-- -->
<!-- Revision 1.1.4.3  1992/10/20  22:26:50  buckler-->
<!-- 	Pre-Prentice-Hall editorial review-->
<!-- 	[1992/10/20  22:24:43  buckler]-->
<!-- -->
<!-- Revision 1.1.4.2  1992/10/05  19:24:51  steiner-->
<!-- 	First P-H edit pass - edits from Eddie.-->
<!-- 	[1992/10/05  19:24:28  steiner]-->
<!-- -->
<!-- Revision 1.1.2.4  1992/06/15  15:20:01  buckler-->
<!-- 	Fixed various formatting problems-->
<!-- 	[1992/06/15  15:16:11  buckler]-->
<!-- -->
<!-- Revision 1.1.2.3  1992/06/12  21:00:02  buckler-->
<!-- 	Incorporated changes from Brian Keane (Dublin) markup-->
<!-- 	[1992/06/12  20:58:56  buckler]-->
<!-- -->
<!-- Revision 1.1.2.2  1992/06/10  21:18:04  marty-->
<!-- 	Doc drop from Dublin-->
<!-- 	[1992/06/10  21:14:35  marty]-->
<!-- -->
<!---->
<Chapter Id="DCEADG.REFSY.div.1">
<Title>Information Syntaxes</Title>
<!-- /* * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *-->
<!-- * COPYRIGHT   (C)  SIEMENS NIXDORF INFORMATIONSSYSTEME AG 1994   *-->
<!-- *                  ALL RIGHTS RESERVED                           *-->
<!-- *                                                                *-->
<!-- * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * */-->
<Para>This chapter defines the syntaxes permitted for attribute values.
The syntaxes are closely aligned with the types and type constructors of ASN.1.
The <Literal>OM_value</Literal> data type specifies how a value of each syntax is
represented in the C interface (see Chapter 18).
</Para>
<Sect1 Id="DCEADG.REFSY.div.2">
<Title>Syntax Templates</Title>
<Para>The names of certain syntaxes are constructed from <Replaceable>syntax templates</Replaceable>.
A syntax template
is a lexical construct comprising a primary identifier followed by an
<Literal>*</Literal> (asterisk) enclosed in parentheses, as follows: 
</Para>
<InformalExample>
<Para><ProgramListing><UserInput><Symbol Role="Variable">identifier </Symbol><Literal>(*)</Literal>
</UserInput></ProgramListing></Para>
</InformalExample>
<Para><?sml-need 7>A syntax template encompasses a group of related syntaxes.  Any member of the 
group, without distinction, is indicated by the primary identifier
(<Symbol Role="Variable">identifier</Symbol>) alone.
A particular member is indicated by the template with the asterisk 
replaced by one of a set of secondary identifiers associated with the 
template, as follows: 
<IndexTerm Id="DCEADG.REFSY.indx.1">
<Primary>syntax</Primary>
<Secondary>template</Secondary>
</IndexTerm></Para>
<InformalExample>
<Para><ProgramListing><UserInput><Symbol Role="Variable">identifier<?sml-size -2></Symbol><Subscript>1</Subscript><?sml-size +2> <Literal>(</Literal><Symbol Role="Variable">identifier<?sml-size -2></Symbol><Subscript>2</Subscript><?sml-size +2>)
</UserInput></ProgramListing></Para>
</InformalExample>
</Sect1>
<Sect1 Id="DCEADG.REFSY.div.3">
<Title>Syntaxes</Title>
<Para>A variety of syntaxes are defined.  Most are functionally equivalent to ASN.1 
types, as documented in Sections 17.5 through 17.8.
</Para>
<Para>The following syntaxes are defined:
</Para>
<ItemizedList>
<ListItem>
<Para><Literal>OM_S_BOOLEAN</Literal>
</Para>
<Para>A value of this syntax is a Boolean; that is, it can be
<Literal>OM_TRUE</Literal> or <Literal>OM_FALSE</Literal>.
</Para>
</ListItem>
<ListItem>
<Para>Enum(<Literal>*</Literal>)
</Para>
<Para><IndexTerm Id="DCEADG.REFSY.indx.2">
<Primary>Enum(*)</Primary>
</IndexTerm>A value of any syntax encompassed by this syntax template is one of a
set of values associated with the syntax.
The only significant characteristic of the values is that they are distinct. 
</Para>
<Para>The group of syntaxes encompassed by this template is open-ended.
Zero or more members are added to the group by each package definition.
The secondary identifiers that indicate the members are also assigned there.
</Para>
</ListItem>
<ListItem>
<Para><Literal>OM_S_INTEGER</Literal>
</Para>
<Para>A value of this syntax is a positive or negative integer.
</Para>
</ListItem>
<ListItem>
<Para><Literal>OM_S_NULL</Literal>
</Para>
<Para>The one value of this syntax is a valueless placeholder.
</Para>
</ListItem>
<ListItem>
<?sml-need 8>
<Para>Object(<Literal>*</Literal>)
</Para>
<Para>A value of any syntax encompassed by this syntax template is an object,
which is any instance of a class associated with the syntax. 
</Para>
<Para>The group of syntaxes encompassed by this template is open-ended.
One member is added to the group by each class definition.
The secondary identifier that indicates the member is the name of the class.
</Para>
</ListItem>
<ListItem>
<Para>String(<Literal>*</Literal>)
</Para>
<Para><IndexTerm Id="DCEADG.REFSY.indx.3">
<Primary>string(*)</Primary>
</IndexTerm>
<IndexTerm Id="DCEADG.REFSY.indx.4">
<Primary>strings</Primary>
<Secondary>in directory service</Secondary>
</IndexTerm>A value of any syntax encompassed by this syntax template is a 
string (as defined in Section 17.3)
whose form and meaning are associated
with the syntax. 
</Para>
<Para>The group of syntaxes encompassed by this template is closed.
One syntax is defined for each ASN.1 string type.
The secondary identifier that indicates the member is,
in general,
the first word of the type's name.
</Para>
</ListItem>
</ItemizedList>
</Sect1>
<Sect1 Id="DCEADG.REFSY.div.4">
<Title>Strings</Title>
<Para>A 
<Replaceable>string</Replaceable>
<IndexTerm Id="DCEADG.REFSY.indx.5">
<Primary>string</Primary>
</IndexTerm>is an ordered sequence of zero or more bits, octets, or characters
accompanied by the string's length.
</Para>
<Para>The value <Symbol Role="Variable">length</Symbol> of a string is the number of
bits in a <Replaceable>bit string</Replaceable>, octets in an <Replaceable>octet string</Replaceable>,
or characters in a <Replaceable>character string</Replaceable>.
Any constraints on the value length of a string are specified in the
<IndexTerm Id="DCEADG.REFSY.indx.6">
<Primary>elements</Primary>
</IndexTerm>
<IndexTerm Id="DCEADG.REFSY.indx.7">
<Primary>string</Primary>
<Secondary>length</Secondary>
</IndexTerm>
<IndexTerm Id="DCEADG.REFSY.indx.8">
<Primary>length, string</Primary>
</IndexTerm>appropriate class definitions.  The length
is confined to the range 0 to 2<?sml-size -2><Superscript>32</Superscript><?sml-size +2>.
</Para>
<Note>
<Para>The length of a character string does not necessarily equal the
<IndexTerm Id="DCEADG.REFSY.indx.9">
<Primary>character string</Primary>
</IndexTerm>number of characters
it comprises because, for example, a single character can be
represented by using several octets.
</Para>
</Note>
<Para>The elements of a string are numbered.  The position
<IndexTerm Id="DCEADG.REFSY.indx.10">
<Primary>position</Primary>
<Secondary>string</Secondary>
</IndexTerm>
<IndexTerm Id="DCEADG.REFSY.indx.11">
<Primary>string</Primary>
<Secondary>position</Secondary>
</IndexTerm>of the first element is 0 (zero).  The positions of successive elements are 
successive positive integers.
</Para>
<Para>The syntaxes that form the string group are identified
in Table 17-1, which gives the
secondary identifier assigned to each such
syntax.
</Para>
<Note>
<?sml-need 4>
<Para>The identifiers in the first, second, and third columns of Table 17-1
indicate the syntaxes of bit, octet, and character strings, respectively.
The String group comprises all syntaxes identified in the table.
</Para>
</Note>
<Table Frame="all" Remap="center" Orient="Port" role="page-wide">
<Title>String Syntax Identifiers</Title>
<TGroup Cols="3">
<ColSpec Colsep="1" Align="Left" Colwidth="1*" Colname="col1" Colnum="1">
<ColSpec Colsep="1" Align="Left" Colwidth="1.2*" Colname="col2" Colnum="2">
<ColSpec Align="Left" Colwidth="1.2*" Colname="col3" Colnum="3">
<thead>

<Row>
<Entry rowsep="1"><Literal>Bit String Identifier</Literal></Entry>
<Entry rowsep="1"><Literal>Octet String Identifier</Literal></Entry>
<Entry rowsep="1"><Literal>Character String Identifier</Literal></Entry>
</Row>
</thead>
<tbody>
<Row>
<Entry rowsep="1"><Literal>OM_S_BIT_STRING</Literal></Entry>
<Entry rowsep="1"><Literal>OM_S_ENCODING_</Literal> <Literal>STRING</Literal><Superscript>1</Superscript><?sml-size +2></Entry>
<Entry rowsep="1"><Literal>OM_S_GENERAL_ <Literal>STRING</Literal><?sml-size -2><Superscript>2</Superscript><?sml-size +2></Literal></Entry>
</Row>

<Row>
<Entry rowsep="1"></Entry>
<Entry rowsep="1"><Literal>OM_S_OBJECT_</Literal> <Literal>IDENTIFIER_STRING</Literal><?sml-size -2><Superscript>3</Superscript><?sml-size +2></Entry>
<Entry rowsep="1"><Literal>OM_S_GENERALIZED_ </Literal><Literal>TIME_STRING</Literal><?sml-size -2><Superscript>2</Superscript><?sml-size +2></Entry>
</Row>

<Row>
<Entry rowsep="1"></Entry>
<Entry rowsep="1"><Literal>OM_S_OCTET_STRING</Literal></Entry>
<Entry rowsep="1"><Literal>OM_S_GRAPHIC_STRING</Literal><?sml-size -2><Superscript>2</Superscript><?sml-size +2></Entry>
</Row>
<Row>
<Entry rowsep="1"></Entry>
<Entry rowsep="1"></Entry>
<Entry rowsep="1"><Literal>OM_S_IA5_STRING</Literal><?sml-size -2><Superscript>2</Superscript><?sml-size +2></Entry>
</Row>
<Row>
<Entry rowsep="1"></Entry>
<Entry rowsep="1"></Entry>
<Entry rowsep="1"><Literal>OM_S_NUMERIC_STRING</Literal><?sml-size -2><Superscript>2</Superscript><?sml-size +2></Entry>
</Row>
<Row>
<Entry rowsep="1"></Entry>
<Entry rowsep="1"></Entry>
<Entry rowsep="1"><Literal>OM_S_OBJECT_</Literal> <Literal>DESCRIPTOR_STRING</Literal><?sml-size -2><Superscript>2</Superscript><?sml-size +2></Entry>
</Row>
<Row>
<Entry rowsep="1"></Entry>
<Entry rowsep="1"></Entry>
<Entry rowsep="1"><Literal>OM_S_</Literal> <Literal>PRINTABLE_STRING</Literal><?sml-size -2><Superscript>2</Superscript><?sml-size +2></Entry>
</Row>
<Row>
<Entry rowsep="1"></Entry>
<Entry rowsep="1"></Entry>
<Entry rowsep="1"><Literal>OM_S_TELETEX_STRING</Literal><?sml-size -2><Superscript>2</Superscript><?sml-size +2></Entry>
</Row>
<Row>
<Entry rowsep="1"></Entry>
<Entry rowsep="1"></Entry>
<Entry rowsep="1"><Literal>OM_S_UTC_TIME_STRING</Literal><?sml-size -2><Superscript>2</Superscript><?sml-size +2></Entry>
</Row>
<Row>
<Entry rowsep="1"></Entry>
<Entry rowsep="1"></Entry>
<Entry rowsep="1"><Literal>OM_S_VIDEOTEX_STRING</Literal><?sml-size -2><Superscript>2</Superscript><?sml-size +2></Entry>
</Row>
<Row>
<Entry rowsep="1"></Entry>
<Entry rowsep="1"></Entry>
<Entry rowsep="1"><Literal>OM_S_VISIBLE_STRING</Literal><?sml-size -2><Superscript>2</Superscript><?sml-size +2></Entry>
</Row>
</TBody>
</TGroup>
</Table>
<?sml-point-size 11>
<VariableList>
<VarListEntry>
<Term><?sml-size -1>1<?sml-size 0></Term>
<ListItem>
<Para>The octets are those that BER permits for the contents octets of 
the encoding of a value of any ASN.1 type.
</Para>
</ListItem>
</VarListEntry>
<VarListEntry>
<Term><?sml-size -1>2<?sml-size 0></Term>
<ListItem>
<Para>The characters are those permitted by ASN.1's type of
the corresponding name.
Values of these syntaxes are represented in their BER-encoded form.
The octets by which they are represented are those that BER
permits for the contents octets of a primitive encoding of a value
of that type.
</Para>
</ListItem>
</VarListEntry>
<VarListEntry>
<Term><?sml-size -1>3<?sml-size 0></Term>
<ListItem>
<Para>The octets are those that BER permits for the contents octets of 
the encoding of a value of ASN.1's object identifier type.
</Para>
</ListItem>
</VarListEntry>
</VariableList>
<?sml-point-size 12>
</Sect1>
<Sect1 Id="DCEADG.REFSY.div.5">
<Title>Representation of String Values</Title>
<Para>In the service interface, a string value is represented by a string
data type.  This is defined in Section 17.3.
The length of a string is the number of octets by which it is represented
at the interface.  It is confined to the range 0 to 2<?sml-size -2><Superscript>32</Superscript><?sml-size +2>.
</Para>
<Para>The length of a character does not need to be equal to
the number of characters it comprises
because, for example, a single character can be represented by using several
octets.
</Para>
<Para>It may be necessary to segment large string values when passing them across
the interface.  A segment is any zero or more contiguous octets of a
string value.  Segment boundaries are without semantic significance.
</Para>
</Sect1>
<Sect1 Id="DCEADG.REFSY.div.6">
<Title>Relationship to ASN.1 Simple Types</Title>
<Para>As shown in Table 17-2,
for every ASN.1 simple type except Real,
there is an OM syntax that is functionally equivalent to it.
The simple types are listed in the first column of the table;
the corresponding syntaxes are listed in the second column.
</Para>
<Table Frame="all" Remap="center" Orient="Port">
<Title>Syntax for ASN.1 Simple Types</Title>
<TGroup Cols="2">
<ColSpec Colsep="1" Align="Left" Colwidth="1*" Colname="col1" Colnum="1">
<ColSpec Align="Left" Colwidth="3*" Colname="col2" Colnum="2">
<thead>
<Row>
<Entry rowsep="1"><Literal>Type</Literal></Entry>
<Entry rowsep="1"><Literal>Syntax</Literal></Entry>
</Row>
</thead>
<tbody>
<Row>
<Entry rowsep="1">Bit String</Entry>
<Entry rowsep="1">String<Literal>(OM_S_BIT_STRING)</Literal></Entry>
</Row>
<Row>
<Entry rowsep="1">Boolean</Entry>
<Entry rowsep="1"><Literal>OM_S_BOOLEAN</Literal></Entry>
</Row>
<Row>
<Entry rowsep="1">Integer</Entry>
<Entry rowsep="1"><Literal>OM_S_INTEGER</Literal></Entry>
</Row>
<Row>
<Entry rowsep="1">Null</Entry>
<Entry rowsep="1"><Literal>OM_S_NULL</Literal></Entry>
</Row>
<Row>
<Entry rowsep="1">Object Identifier</Entry>
<Entry rowsep="1">String<Literal>(OM_S_OBJECT_IDENTIFIER_STRING)</Literal></Entry>
</Row>
<Row>
<Entry rowsep="1">Octet String</Entry>
<Entry rowsep="1">String<Literal>(OM_S_OCTET_STRING)</Literal></Entry>
</Row>
<Row>
<Entry rowsep="1">Real</Entry>
<Entry rowsep="1">None<?sml-size -2><Superscript>1</Superscript><?sml-size +2></Entry>
</Row>
</TBody>
</TGroup>
</Table>
<VariableList>
<VarListEntry>
<Term><?sml-size -2>1<?sml-size 0></Term>
<ListItem>
<Para>A future edition of XOM may define a syntax corresponding to this type.
</Para>
</ListItem>
</VarListEntry>
</VariableList>
</Sect1>
<Sect1 Id="DCEADG.REFSY.div.7">
<Title>Relationship to ASN.1 Useful Types</Title>
<Para>As shown in Table 17-3, for every ASN.1 useful type,
there is an OM syntax that is functionally equivalent to it.
The useful types are listed in the first column of the table;
the corresponding syntaxes are listed in the second column.
</Para>
<Table Frame="all" Remap="center" Orient="Port">
<Title>Syntaxes for ASN.1 Useful Types</Title>
<TGroup Cols="2">
<ColSpec Colsep="1" Align="Left" Colwidth="1*" Colname="col1" Colnum="1">
<ColSpec Align="Left" Colwidth="3*" Colname="col2" Colnum="2">
<thead>
<Row>
<Entry rowsep="1"><Literal>Type</Literal></Entry>
<Entry rowsep="1"><Literal>Syntax</Literal></Entry>
</Row>
</thead>
<tbody>
<Row>
<Entry rowsep="1">External</Entry>
<Entry rowsep="1">Object<Literal>(OM_C_EXTERNAL)</Literal></Entry>
</Row>
<Row>
<Entry rowsep="1">Generalized Time</Entry>
<Entry rowsep="1">String<Literal>(OM_S_GENERALISED_TIME_STRING)</Literal></Entry>
</Row>
<Row>
<Entry rowsep="1">Object Descriptor</Entry>
<Entry rowsep="1">String<Literal>(OM_S_OBJECT_DESCRIPTOR_STRING)</Literal></Entry>
</Row>
<Row>
<Entry rowsep="1">Universal Time</Entry>
<Entry rowsep="1">String<Literal>(OM_S_UTC_TIME_STRING)</Literal></Entry>
</Row>
</TBody>
</TGroup>
</Table>
</Sect1>
<Sect1 Id="DCEADG.REFSY.div.8">
<Title>Relationship to ASN.1 Character String Types</Title>
<Para>As shown in Table 17-4, for every ASN.1 character string type,
<IndexTerm Id="DCEADG.REFSY.indx.12">
<Primary>character string</Primary>
<Secondary>type</Secondary>
</IndexTerm>there is an OM syntax that is functionally equivalent to it.
The ASN.1 character string types are listed in the first column of the table;
the corresponding syntax is listed in the second column.
</Para>
<?sml-need 3i>
<Table Frame="all" Remap="center" Orient="Port">
<Title>Syntaxes for ASN.1 Character String Types</Title>
<TGroup Cols="2">
<ColSpec Colsep="1" Align="Left" Colwidth="1*" Colname="col1" Colnum="1">
<ColSpec Colsep="1" Align="Left" Colwidth="3*" Colname="col2" Colnum="2">
<thead>
<Row>
<Entry rowsep="1"><Literal>Type</Literal></Entry>
<Entry rowsep="1"><Literal>Syntax</Literal></Entry>
</Row>
</thead>
<tbody>
<Row>
<Entry rowsep="1">General String</Entry>
<Entry rowsep="1">String<Literal>(OM_S_GENERAL_STRING)</Literal></Entry>
</Row>
<Row>
<Entry rowsep="1">Graphic String</Entry>
<Entry rowsep="1">String<Literal>(OM_S_GRAPHIC_STRING)</Literal></Entry>
</Row>
<Row>
<Entry rowsep="1">IA5 String</Entry>
<Entry rowsep="1">String<Literal>(OM_S_IA5_STRING)</Literal></Entry>
</Row>

<Row>
<Entry rowsep="1">&mdash;</Entry>
<Entry rowsep="1">String<Literal>(OM_S_LOCAL_STRING)</Literal></Entry>
</Row>

<Row>
<Entry rowsep="1">Numeric String</Entry>
<Entry rowsep="1">String<Literal>(OM_S_NUMERIC_STRING)</Literal></Entry>
</Row>
<Row>
<Entry rowsep="1">Printable String</Entry>
<Entry rowsep="1">String<Literal>(OM_S_PRINTABLE_STRING)</Literal></Entry>
</Row>
<Row>
<Entry rowsep="1">Teletex String</Entry>
<Entry rowsep="1">String<Literal>(OM_S_TELETEX_STRING)</Literal></Entry>
</Row>
<Row>
<Entry rowsep="1">Videotex String</Entry>
<Entry rowsep="1">String<Literal>(OM_S_VIDEOTEX_STRING)</Literal></Entry>
</Row>
<Row>
<Entry rowsep="1">Visible String</Entry>
<Entry rowsep="1">String<Literal>(OM_S_VISIBLE_STRING)</Literal></Entry>
</Row>
</TBody>
</TGroup>
</Table>
</Sect1>
<Sect1 Id="DCEADG.REFSY.div.9">
<Title>Relationship to ASN.1 Type Constructors</Title>
<Para>As shown in Table 17-5, there are functionally equivalent OM
syntaxes for some (but not all) ASN.1 type constructors.
The constructors are listed in the first
column; corresponding syntaxes are listed
in the second column.
</Para>
<?sml-need 3.5i>
<Table Frame="all" Remap="center" Orient="Port">
<Title>Syntaxes for ASN.1 Type Constructors</Title>
<TGroup Cols="2">
<ColSpec Colsep="1" Align="Left" Colwidth="1*" Colname="col1" Colnum="1">
<ColSpec Align="Left" Colwidth="3*" Colname="col2" Colnum="2">
<thead>
<Row>
<Entry rowsep="1"><Literal>Type Constructor</Literal></Entry>
<Entry rowsep="1"><Literal>Syntax</Literal></Entry>
</Row>
</thead>
<tbody>
<Row>
<Entry rowsep="1">Any</Entry>
<Entry rowsep="1">String<Literal>(OM_S_ENCODING_STRING)</Literal></Entry>
</Row>
<Row>
<Entry rowsep="1">Choice</Entry>
<Entry rowsep="1"><Literal>OM_S_OBJECT</Literal></Entry>
</Row>
<Row>
<Entry rowsep="1">Enumerated</Entry>
<Entry rowsep="1"><Literal>OM_S_ENUMERATION</Literal></Entry>
</Row>
<Row>
<Entry rowsep="1">Selection</Entry>
<Entry rowsep="1">None<?sml-size -2><Superscript>1</Superscript><?sml-size +2></Entry>
</Row>
<Row>
<Entry rowsep="1">Sequence</Entry>
<Entry rowsep="1"><Literal>OM_S_OBJECT</Literal></Entry>
</Row>
<Row>
<Entry rowsep="1">Sequence Of</Entry>
<Entry rowsep="1"><Literal>OM_S_OBJECT</Literal></Entry>
</Row>
<Row>
<Entry rowsep="1">Set</Entry>
<Entry rowsep="1"><Literal>OM_S_OBJECT</Literal></Entry>
</Row>
<Row>
<Entry rowsep="1">Set Of</Entry>
<Entry rowsep="1"><Literal>OM_S_OBJECT</Literal></Entry>
</Row>
<Row>
<Entry rowsep="1">Tagged</Entry>
<Entry rowsep="1">None<?sml-size -2><Superscript>2</Superscript><?sml-size +2></Entry>
</Row>
</TBody>
</TGroup>
</Table>
<VariableList>
<VarListEntry>
<Term><?sml-size -2>1<?sml-size 0></Term>
<ListItem>
<Para>This type constructor, a purely specification-time phenomenon,
has no corresponding syntax.
</Para>
</ListItem>
</VarListEntry>
<VarListEntry>
<Term><?sml-size -2>2<?sml-size 0></Term>
<ListItem>
<Para>This type constructor is used to distinguish the alternatives of
a choice or the elements of a sequence or set, a function performed by 
attribute types.
<IndexTerm Id="DCEADG.REFSY.indx.13">
<Primary>attribute</Primary>
<Secondary>type</Secondary>
</IndexTerm></Para>
</ListItem>
</VarListEntry>
</VariableList>
<Para>The effects of the principal type constructors can be achieved,
in any of a variety of ways, by using objects-to-group attributes
or using attributes-to-group values.  An OM application designer can
(but need not) model these constructors as classes of the following kinds:
</Para>
<ItemizedList>
<ListItem>
<Para>Choice
</Para>
<Para>An attribute type can be defined for each alternative, with
just one being permitted in an instance of the class.
</Para>
</ListItem>
<ListItem>
<Para>Sequence&ensp;or&ensp;Set
</Para>
<Para>An attribute type can be defined for each sequence or set element.
If an element is optional, then the attribute has zero or one value.
</Para>
</ListItem>
<ListItem>
<Para>Sequence Of&ensp;or&ensp;Set Of
</Para>
<Para>A single multivalued attribute can be defined.
</Para>
</ListItem>
</ItemizedList>
<Para>An ASN.1 definition of an enumerated type component of a structured type
is generally mapped to an OM attribute with an OM syntax
<Literal>OM_S_ENUMERATION</Literal>
in this interface.
Where the ASN.1 component is optional, this is generally indicated by an
additional member of the enumeration, rather than by the
omission of the OM attribute.
This leads to simpler programming in the application.
</Para>
</Sect1>
</Chapter>
<!--+ 09/23/96 11:54:18
    | tagMorph:  $Id: 1_sy.xom.sgm,v 1.1.2.11 1996/12/17 19:28:40 damon Exp $
    | tagMorph library:  $Id: 1_sy.xom.sgm,v 1.1.2.11 1996/12/17 19:28:40 damon Exp $
    | sml-to-docbook:  1.21
    +-->
