<!--
# COPYRIGHT NOTICE
# Copyright (c) 1990-1996 Open Software Foundation, Inc. 
# ALL RIGHTS RESERVED (DCE). See the file named COPYRIGHT.DCE in the 
# src directory for the full copyright text. 
# 
# 
# HISTORY
# $Log: 2_name_concepts.sgm,v $
# Revision 1.1.2.11  1996/12/17  19:28:45  damon
# 	Expanded OSF C O P Y R I G H T   N O T I C E
# 	[1996/12/17  19:22:22  damon]
#
# Revision 1.1.2.10  1996/12/09  21:12:54  carrig
# 	{enh,R1.2.2}
# 	Wide Pgm Listing
# 	[1996/12/09  21:10:58  carrig]
# 
# Revision 1.1.2.9  1996/12/09  00:07:06  carrig
# 	{enh,R1.2.2}
# 	Put in editor's comments
# 	[1996/12/09  00:05:26  carrig]
# 
# Revision 1.1.2.8  1996/10/23  18:48:26  carrig
# 	{enh,R1.2.2}
# 	Ready for editor (2)
# 	[1996/10/23  18:46:40  carrig]
# 
# Revision 1.1.2.7  1996/10/22  21:05:37  carrig
# 	{enh,R1.2.2}
# 	Fixed tables
# 	[1996/10/22  21:04:18  carrig]
# 
# Revision 1.1.2.6  1996/10/21  20:34:05  carrig
# 	{enh,R1.2.2}
# 	Worked on tables
# 	[1996/10/21  20:32:23  carrig]
# 
# Revision 1.1.2.5  1996/10/17  21:08:37  carrig
# 	{enh,R1.2.2}
# 	Worked on tables
# 	[1996/10/17  21:06:59  carrig]
# 
# 	{enh,R1.2.2}
# 	Worked on tables
# 	[1996/10/17  20:54:07  carrig]
# 
# Revision 1.1.2.4  1996/10/16  21:33:15  carrig
# 	{enh,R1.2.2}
# 	First pass at tables
# 	[1996/10/16  21:31:12  carrig]
# 
# Revision 1.1.2.3  1996/10/07  17:49:20  wardr
# 	{enh,R1.2.2}
# 	Update for sgml conversion
# 	[1996/10/07  17:48:47  wardr]
# 
# Revision 1.1.2.2  1996/09/28  15:21:17  weir
# 	Cleaned up old history
# 	[1996/09/28  15:19:40  weir]
# 
# Revision 1.1.2.1  1996/09/25  20:27:42  weir
# 	Initial submission
# 	[1996/09/25  20:26:18  weir]
# 
# $EndLog$
# 
-->
<!---->
<!-- Fragment document type declaration subset:
ArborText, Inc., 1988-1993, v.4001
<!DOCTYPE Book PUBLIC "-//Davenport//DTD DocBook V2.4//EN" [
<!ENTITY  DCEADG.CDSNC.ent.1  SYSTEM "eps/a_cds_chars_app_10.eps" NDATA eps>
<!ENTITY  DCEADG.CDSNC.pic.1  SYSTEM "eps/config_space.eps" NDATA EPS>
<!ENTITY  DCEADG.CDSNC.pic.2  SYSTEM "eps/config_space_plus.eps" NDATA EPS>
<!ENTITY  DCEADG.CDSNC.pic.3  SYSTEM "eps/T61_syntax.eps" NDATA EPS>
]>
-->
<!-- OLD HISTORY-->
<!-- Revision 1.1.8.1  1996/03/13  21:05:56  wardr-->
<!-- 	{edit R1.2.1}-->
<!-- 	Release Edits-->
<!-- 	[1996/03/13  21:05:36  wardr]-->
<!---->
<!-- Revision 1.1.6.18  1995/06/15  16:27:47  rcb-->
<!-- 	edited 1.1 version, PRENTICE HALL reformat-->
<!-- 	[1995/06/13  19:24:49  rcb]-->
<!-- -->
<!-- 	edited 1.1 version, PRENTICE HALL reformat-->
<!-- 	[1995/06/01  18:18:39  rcb]-->
<!-- -->
<!-- Revision 1.1.6.17  1994/11/15  20:47:44  neilson-->
<!-- 	Converted book title references to macro form.-->
<!-- 	[1994/11/15  18:57:46  neilson]-->
<!-- -->
<!-- Revision 1.1.6.16  1994/11/03  23:32:39  neilson-->
<!-- 	Substituted macros for book names in cross refs.-->
<!-- 	[1994/11/03  01:38:31  neilson]-->
<!-- -->
<!-- 	Substituted macros for book names in cross refs.-->
<!-- -->
<!-- Revision 1.1.6.15  1994/10/20  19:03:47  weir-->
<!-- 	No change-->
<!-- 	[1994/10/20  19:03:24  weir]-->
<!-- -->
<!-- Revision 1.1.6.14  1994/10/20  14:52:03  weir-->
<!-- 	Corrected some cross-references-->
<!-- 	[1994/10/20  14:51:33  weir]-->
<!-- -->
<!-- Revision 1.1.6.13  1994/10/19  21:55:36  neilson-->
<!-- 	Automatic fix to mistake in .zA-.zZ-->
<!-- 	[1994/10/19  21:54:42  neilson]-->
<!-- -->
<!-- Revision 1.1.6.12  1994/10/19  20:15:19  neilson-->
<!-- 	CR 10326 - Automatic fix to name of intro ref page-->
<!-- 	[1994/10/19  20:08:59  neilson]-->
<!-- -->
<!-- Revision 1.1.6.11  1994/07/13  00:02:00  jshirley-->
<!-- 	{def,10220,R1.1} Remove reference to rpcd and sec_clientd-->
<!-- 	[1994/07/13  00:01:35  jshirley]-->
<!-- -->
<!-- Revision 1.1.6.10  1994/07/08  17:56:32  rjohnson-->
<!-- 	Changes made: Removed back slash reference in CDS section of Table 23-1.-->
<!-- 	File name: app_gd\xds_cds\2_name_concepts.gpsml-->
<!-- 	CR#: 11106-->
<!-- 	[1994/07/08  17:55:23  rjohnson]-->
<!-- -->
<!-- Revision 1.1.6.9  1994/04/06  16:34:53  zahn-->
<!-- 	{enh,5923,R1.1}-->
<!-- -->
<!-- 	Fixed cross-references to User Guide and Ref.-->
<!-- 	[1994/04/06  16:34:30  zahn]-->
<!-- -->
<!-- Revision 1.1.6.8  1994/03/14  22:00:22  rom-->
<!-- 	{enh, 10129, R1.1}-->
<!-- 	Fix pathnames of included files for new three-book organization.-->
<!-- 	[1994/03/14  21:19:54  rom]-->
<!-- -->
<!-- Revision 1.1.6.7  1993/02/23  21:39:25  steiner-->
<!-- 	Moved change bars outside of table (were causing errors in build - -->
<!-- 	change markers too long).  Also, removed an extra end change marker (for-->
<!-- 	defect 6736).-->
<!-- 	[1993/02/23  21:38:50  steiner]-->
<!-- -->
<!-- Revision 1.1.6.6  1993/02/23  02:21:42  lipsky-->
<!-- 	Changes made: Revised slash information, added explicit subsys information-->
<!-- 	File name: src/app_gd/directory/xds_cds/2_name_concepts-->
<!-- 	CR: 6270, 6736-->
<!-- 	[1993/02/23  02:20:11  lipsky]-->
<!-- -->
<!-- Revision 1.1.6.5  1993/02/03  21:06:10  buckler-->
<!-- 	Changed .P! to .pI and added Postscript boundary boxes-->
<!-- 	[1993/02/03  21:05:35  buckler]-->
<!-- -->
<!-- Revision 1.1.6.4  1993/01/28  18:40:03  cjd-->
<!-- 	Embedded copyright notice-->
<!-- 	[1993/01/28  17:59:25  cjd]-->
<!-- -->
<!-- Revision 1.1.6.3  1993/01/07  16:50:00  buckler-->
<!-- 	Bug 5335:  Changed ISO acronym expansion from "International-->
<!-- 	Organization for Standards" to "International Organization for-->
<!-- 	Standardization".-->
<!-- 	[1993/01/07  16:39:59  buckler]-->
<!-- -->
<!-- Revision 1.1.6.2  1992/11/20  15:23:56  weir-->
<!-- 	Moved into 1.0.2doc tree-->
<!-- 	[1992/11/20  15:20:53  weir]-->
<!-- -->
<!-- Revision 1.1.4.10  1992/11/11  23:45:23  buckler-->
<!-- 	Corrected index entries-->
<!-- 	[1992/11/11  22:48:51  buckler]-->
<!-- -->
<!-- Revision 1.1.4.9  1992/10/28  16:08:37  lmk-->
<!-- 	Prentice-Hall index edits-->
<!-- 	[1992/10/28  16:07:49  lmk]-->
<!-- -->
<!-- Revision 1.1.4.8  1992/10/27  20:58:56  lmk-->
<!-- 	Prentice-Hall edits only-->
<!-- 	[1992/10/27  20:56:19  lmk]-->
<!-- -->
<!-- Revision 1.1.4.7  1992/10/12  21:49:39  steiner-->
<!-- 	Second P-H edit pass.-->
<!-- 	[1992/10/12  21:49:13  steiner]-->
<!-- -->
<!-- Revision 1.1.4.6  1992/10/09  13:06:35  steiner-->
<!-- 	Comments from Howard.-->
<!-- 	[1992/10/09  13:06:15  steiner]-->
<!-- -->
<!-- Revision 1.1.4.5  1992/10/08  18:47:49  steiner-->
<!-- 	Cross-references edits, also figure modified and taken out-->
<!-- 	into an include file.-->
<!-- 	[1992/10/08  18:47:20  steiner]-->
<!-- -->
<!-- Revision 1.1.4.4  1992/08/31  19:35:48  steiner-->
<!-- 	Null delta, testing environment-->
<!-- 	[1992/08/31  19:34:17  steiner]-->
<!-- -->
<!-- Revision 1.1.4.3  1992/08/31  19:14:14  steiner-->
<!-- 	Edits and Howard's comments.-->
<!-- 	[1992/08/31  16:44:05  steiner]-->
<!-- -->
<!-- 	Reorganization and revision of chapters 22, 23.-->
<!-- 	[1992/08/26  20:28:01  steiner]-->
<!-- -->
<!-- Revision 1.1.2.8  1992/08/05  20:40:25  weir-->
<!-- 	Fixed typeless RDNs (for real this time).-->
<!-- 	[1992/08/05  20:39:53  weir]-->
<!-- -->
<!-- Revision 1.1.2.7  1992/07/23  19:42:51  weir-->
<!-- 	Fixed typeless RDNs.-->
<!-- 	[1992/07/23  19:42:19  weir]-->
<!-- -->
<!-- Revision 1.1.2.6  1992/07/21  14:02:45  weir-->
<!-- 	Editorial changes.-->
<!-- 	[1992/07/21  14:00:34  weir]-->
<!-- -->
<!-- Revision 1.1.2.5  1992/07/09  20:36:08  weir-->
<!-- 	New version.-->
<!-- 	[1992/07/09  20:35:37  weir]-->
<!-- -->
<!-- Revision 1.1.2.4  1992/06/18  20:23:14  weir-->
<!-- 	New version.-->
<!-- 	[1992/06/18  20:22:43  weir]-->
<!-- -->
<!-- Revision 1.1.2.3  1992/06/02  19:08:08  weir-->
<!-- 	New improved version of this chapter.-->
<!-- 	[1992/06/02  19:07:28  weir]-->
<!-- -->
<!-- Revision 1.1.2.2  1992/05/08  19:12:04  weir-->
<!-- 	Bogus submission-->
<!-- -->
<!-- 	 Revision 1.1.1.2  1992/05/08  18:46:29  weir-->
<!-- 	Initial check-in.-->
<!-- 	[1992/05/08  19:11:31  weir]-->
<!-- -->
<!-- -->
<Chapter Id="DCEADG.CDSNC.div.1">
<Title>Programming in the CDS Namespace</Title>
<Para>This chapter provides information about writing applications
that use the XDS/XOM interface to access
the portion of the DCE namespace contained in
CDS.
</Para>
<Para>The XDS/XOM interface provides generalized access to CDS.
However, if you only need to use CDS to store information related
to RPC (for example, storing the location of a server so
that clients can find it), you should use
the NSI interface of DCE RPC.
NSI implements RPC-specific use of the namespace.
For information on using RPC NSI, see the &DCEDk;.
</Para>
<Para>For information on the details of accessing the CDS namespace
through the XDS/XOM interface, see Chapter 3.
</Para>
<Sect1 Id="DCEADG.CDSNC.div.2">
<Title>Initial Cell Namespace Organization</Title>
<Para>The following subsections describe the organization of a cell's namespace
after it has initially been configured.
(For more information on configuring a cell, see the
&DCEAg;.)
</Para>
<Para>Every DCE cell is set up at configuration with the basic namespace structure
necessary for the other DCE
components to be able to find each other
and to be accessible to applications.
The vital parts of the namespace are protected from being accessed by
unauthorized entities
by ACLs that are attached to the entries and
directories.
</Para>
<Para>Figure 2-1 shows what the cell namespace looks like after a cell
has been configured and before any additional directories or entries have been
added to it by system administrators or applications.  In the figure, ovals
represent directories, rectangles represent simple entries, circles represent
soft links, and triangles represent namespace junctions.
</Para>
<Para>All of the simple entries shown in the figure are created for use with
RPC NSI
routines; that is, they all contain server-binding information and exist to
enable clients to find servers.
These are referred to as <Replaceable>RPC entries</Replaceable>.
</Para>
<Para>Note that only the name entries (those in boxes) and junction entries (those
in triangles) are RPC entries.  The
directories (entries indicated by ovals) are normal CDS directories.
</Para>
<Para>Some of the namespace entries in the figure are intended to be used
(if desired) directly by applications; namely, <Filename>/.:/cell-profile</Filename>,
<Filename>/.:/lan-profile</Filename>, and, through the <Filename>/:</Filename> soft link alias, <Filename>/.:/fs</Filename>.
The <Literal>self</Literal> and <Literal>profile</Literal> name entries under <Literal>hosts</Literal> also fall into
this category.  Others, such as those under <Filename>/.:/subsys/dce</Filename>, are for the
internal use of the DCE components themselves.
</Para>
<Para>Each of the entries is explained in detail in the following subsections.
See the &DCEAg; for detailed information on
the contents of the initial DCE cell namespace.
<!-- newpix/config_space.pic-->
</Para>
<?sml-need 7i>
<Figure>
<Title>The Cell Namespace After Configuration</Title>
<Graphic Format="EPS" Entityref="DCEADG.CDSNC.pic.1" Scalefit="1" Reprodep="400" Reprowid="400"></Graphic>
</Figure>
<Sect2 Id="DCEADG.CDSNC.div.3">
<Title>The Cell Profile</Title>
<Para>The <Filename>/.:/cell-profile</Filename> entry
is an RPC profile entry that contains
the default list of namespace entries to be searched by clients trying to bind
to certain basic services.  An RPC profile is a class of namespace entry
used by the RPC NSI routines.
When a client imports bindings from such an entry,
it imports, through the profile, from an ordered list of RPC entries
containing appropriate bindings.  The list of entries is keyed by their
interface universal unique identifiers (UUIDs)
so that only bindings to servers offering the interface sought by the
client are returned.  The entries listed in the profile exist independently
in the namespace, and can be separately accessed in the normal way.
The profile is simply a way of organizing clients' searches.
</Para>
<Para>The main purpose of <Literal>cell-profile</Literal> is as a path of last resort for prospective clients.  All other profile entries in the cell namespace are
required to have the <Literal>cell-profile</Literal> entry in <Symbol Role="Variable">their</Symbol> entry lists so
that, if a client exhausts a particular profile's list of entries, it
tries those in <Literal>cell-profile</Literal>.
</Para>
</Sect2>
<Sect2 Id="DCEADG.CDSNC.div.4">
<Title>The LAN Profile</Title>
<Para>The <Filename>/.:/lan-profile</Filename> entry
is a local area network (LAN)-oriented 
default list of services' namespace entries
that is used when servers' relative positions in the network topography are of
importance to their prospective clients.
</Para>
</Sect2>
<Sect2 Id="DCEADG.CDSNC.div.5">
<Title>The CDS Clearinghouse</Title>
<Para>The <Filename>/.:/</Filename><Symbol Role="Variable">cdshostname</Symbol><Literal>_ch</Literal> entry
is the namespace entry for <Symbol Role="Variable">cdshostname</Symbol>'s
clearinghouse, where <Symbol Role="Variable">cdshostname</Symbol> is the name of the host machine
on which a CDS server is installed.
<!-- DCE 1.2: following note left over from 1.1-->
<!-- CHECK THIS.-->
</Para>
<Para>A <Replaceable>clearinghouse</Replaceable> is the database managed by a CDS server; it is where
CDS directory replicas are physically stored.
For more information about
clearinghouses, see the &DCEAg;.
All clearinghouse namespace entries reside at the cell
root, and there must be at least one in a DCE cell.
The first clearinghouse's name must be in the form
shown in Figure 2-1, but additional clearinghouses can be named
as desired.
</Para>
</Sect2>
<Sect2 Id="DCEADG.CDSNC.div.6">
<Title>The Hosts Directory</Title>
<Para>The <Filename>/.:/hosts</Filename> entry
is a directory containing entries for all of the host machines
in the cell.  Each host has a separate directory under <Literal>hosts</Literal>; its
directory has the same name as the host.  Four entries are created in
each host's directory:
</Para>
<ItemizedList>
<ListItem>
<Para><Literal>self</Literal>
</Para>
<Para>This entry contains bindings to the host's DCE daemon (<Literal>dced</Literal>), 
which is responsible for, among other things, dynamically
resolving the partial bindings that it receives in incoming RPCs from
clients attempting to reach servers resident on this host.
</Para>
</ListItem>
<ListItem>
<Para><Literal>profile</Literal>
</Para>
<Para>This entry is the default profile entry for the host. This profile
contains in its list of entries at least the <Filename>/.:/cell-profile</Filename> entry
described in Section 2.1.1.
</Para>
</ListItem>
<ListItem>
<Para><Literal>cds-clerk</Literal>
</Para>
<Para>This entry contains bindings to the host's resident CDS clerk.
</Para>
</ListItem>
<ListItem>
<Para><Literal>cds-server</Literal>
</Para>
<Para>This entry contains bindings to a CDS server.
</Para>
</ListItem>
</ItemizedList>
</Sect2>
<Sect2 Id="DCEADG.CDSNC.div.7">
<Title>The Subsystems Directory</Title>
<Para>The <Filename>/.:/subsys</Filename> entry is the directory for subsystems.
Subdirectories below <Filename>subsys</Filename>
are used to hold entries that contain location-independent information about
services, particularly RPC binding information for servers.
</Para>
<Para>The <Literal>dce</Literal> directory is created below <Filename>/.:/subsys</Filename> at configuration.
This directory contains directories for the DCE Security Service and
Directory File Service (DFS) components.
The functional difference between these two directories and the <Literal>fs</Literal>
and <Literal>sec</Literal> junctions described in Section 2.1.7
is that the latter two entries are the access
points for the components' special databases, whereas the directories under
<Filename>subsys/dce</Filename> contain the services' binding information.
</Para>
<Para>Subsystems that are added to DCE should place their system names in
directories created beneath the <Filename>/.:/subsys</Filename> directory.  
Companies adding subsystems should conform to the convention of 
creating a unique directory below <Filename>subsys</Filename> by using their 
trademark as a directory name.  Use these directories for storage of location-independent information about services.  
You should store server entries, groups and profiles for the entire cell in the 
directories below <Filename>subsys</Filename>.  For example, 
International Air Freight-supplied subsystems should be placed in  
<Filename>/.:subsys/IAF</Filename>. 
</Para>
</Sect2>
<Sect2 Id="DCEADG.CDSNC.div.8">
<Title>The /: DFS Alias</Title>
<Para>The entry <Filename>/:</Filename> is created and set up as a soft link to the <Filename>/.:/fs</Filename>
entry, which is the DFS database junction.
The name <Filename>/:</Filename> is equivalent to <Filename>/.:/fs</Filename>.
Note, however, that the name <Filename>/:</Filename> is well-known, whereas the name
<Filename>/.:/fs</Filename> is not, so using <Filename>/:</Filename> makes an application more
portable.
A CDS soft link entry
is an alias to some other CDS entry.  A soft link is created through the
<Command>cdscp</Command> command.
The procedure is described in the
&DCEAg;.
</Para>
</Sect2>
<Sect2 Id="DCEADG.CDSNC.div.9">
<Title>The DFS and DCE Security Service Junctions</Title>
<Para>The <Filename>/.:/fs</Filename> entry
is the DFS junction entry.  This is the entry
for a server that manages the DFS file location database.
</Para>
<Para>The <Filename>/.:/sec</Filename> entry
is the DCE Security Service junction entry.  This is the entry for
a server that manages the security service database (also called
the <FirstTerm>registry database</FirstTerm>).
</Para>
<Para>The <Filename>/.:/fs</Filename> and <Filename>/.:/sec</Filename> root entries in Figure 2-1 are
junctions maintained by DCE components.
The <Filename>/.:/sec</Filename> junction is the security
service's namespace of principal identities and related information.
The DFS's fileset location servers are reached
through the <Filename>/.:/fs</Filename> entry,
making <Filename>/.:/fs</Filename>
effectively the entry point into the cell's distributed file system.
</Para>
<Para>Note that <Filename>/.:/sec</Filename> and <Filename>/.:/fs</Filename> are both actually RPC group
entries;
<!-- DCE 1.2 writers: couldn't figure out what the following ref was to,-->
<!-- although I seached:-->
<!-- (for definitions of the RPC entry types, see Chapter 2 of the-->
<!-- present book)-->
the junctions are implemented by the servers whose entries
are members of the group entries.
(See the &DCEAg; for further details on
the security service and DFS junctions.)
</Para>
</Sect2>
</Sect1>
<Sect1 Id="DCEADG.CDSNC.div.10">
<Title>Recommended Use of the CDS Namespace</Title>
<Para>CDS data is maintained in a loosely
consistent manner.
This means that, when the writeable copy of a replicated
name is updated, the read-only copies may not be updated for some period of
time, and applications reading from those nonsynchronized copies can
receive stale data.
This is in contrast to
distributed databases, which use
multiphase commit protocols that prevent readers from accessing potentially
stale or inconsistent data while the writes are being propagated to all
copies of the data.
It is possible to specifically request data from the master copy, which
is guaranteed to be up-to-date, but replication advantages are then
lost.
This should only be done when it is important to obtain current data.
</Para>
<Sect2 Id="DCEADG.CDSNC.div.11">
<Title>Storing Data in CDS Entries</Title>
<Para>Some CDS entries may contain information that is immediately useful or
meaningful to applications.
Other entries may contain RPC information that enables
application clients to reach application servers; that is,
binding handles for servers, which are stored and retrieved using the RPC
NSI routines.
In either case, the entry's name should be a meaningful identification label
for the information that the entry contains.
This is because the namespace entry
names are the main clue that users and applications have to
the available set of resources in the DCE cell.  Using the CDS namespace
to store and retrieve binding information
for distributed applications is the function
of DCE RPC NSI.
</Para>
<Para>In general,
applications can store data into CDS object entry attributes
in any XDS-expressible form they wish.
Refer to Tables 3-3 and 3-4 in Chapter 3 for XDS-to-CDS data type
translations.  If you add new
attributes to the <Filename>/opt/dcelocal/etc/cds_attributes</Filename> file,
together with a meaningful
CDS syntax (that is, a data type identifier) and name, then the attribute
is displayed by <Command>cdscp show</Command> commands when
executed on objects containing instances of that attribute.
</Para>
<Para><?sml-need 8>There are three main questions to consider when using CDS to store data
through application calls to XDS:
</Para>
<OrderedList>
<ListItem>
<Para><Literal>Where in the CDS namespace should the new entries be placed?</Literal>
</Para>
<Para>You are free to create new directories as long as you do not disturb
the namespace's configured structure.  Keep in mind that
CDS directories must be created with the <Command>cdscp</Command> command; they cannot
be created by applications.
</Para>
<Para>Only two root-level directories are created at configuration:
<Literal>hosts</Literal> and <Filename>subsys</Filename>.  Applications should not add entries under the
<Literal>hosts</Literal> tree; the host's default profile should instead
be set up by a system
administrator.  The <Filename>subsys</Filename> directory
is intended to be populated by directories
(for example, <Filename>/.:/subsys/dce</Filename>) in which the servers and other
components of independent vendors' distributed products are accessed.
Thus,
the typical cell should usually have a series of root-level CDS directories
that represent a reasonable division of categories.
</Para>
<Para>One obvious division could be between entries intended for RPC use (that is,
namespace entries that contain bindings for distributed applications), and
entries that contain data of other kinds.
On the other hand, it may be very useful to add supplementary data
attributes to RPC entries in which various housekeeping or administrative
data can be held.  In this way, for example, performance data for printers
can be associated with the print servers' name entries.  You can either
add new attributes to the server entries themselves, where, for example,
the following is the name of a server entry that receives the new
attributes:
</Para>
<InformalExample>
<Para><ProgramListing><UserInput>/.:/applications/printers/pr1
</UserInput></ProgramListing></Para>
</InformalExample>
<Para>Or
you can change the subtree structure so that new <Symbol Role="Variable">entries</Symbol> are added
to hold the data, the server bindings are still held in separate
wholly RPC
entries, and each group of entries is located under a directory named
for the printer:
</Para>
<InformalExample>
<Para><ProgramListing><UserInput>/.:/applications/printers/pr1         <Symbol Role="Variable">&mdash; directory</Symbol>
<Filename>/.:/applications/printers/pr1/server  </Filename><Symbol Role="Variable">&mdash; server bindings</Symbol>
<Filename>/.:/applications/printers/pr1/stats   </Filename><Symbol Role="Variable">&mdash; extra data</Symbol>
</UserInput></ProgramListing></Para>
</InformalExample>
<Para><?sml-need 5>In general, the same principals of logic and order that apply to the
organization of a file system apply to the organization of a namespace.
For example, server entries should <Symbol Role="Variable">not</Symbol> be created directly at
the namespace root because
this is the place for default profiles, clearinghouse
entries, and directories.
</Para>
<Para>Figure 2-2 illustrates some of the preceding suggestions, added to
the initial configuration namespace structure shown in Figure
2-1.  In Figure 2-2, the vendor of the <Literal>xyz</Literal> subsystem
has set up an <Literal>xyz</Literal> directory under
<Filename>/.:/subsys</Filename> in which the system's servers are exported.
This cell also has an <Filename>/.:/applications</Filename>
directory in which the <Literal>printers</Literal> directory contains separate
directories for each installed printer available on the system; the
directory for <Literal>pr1</Literal> is illustrated in the figure.
In the <Literal>pr1</Literal> directory, <Literal>server</Literal>
is an RPC entry containing exported binding handles, and <Literal>stats</Literal> is an
entry created and maintained through the XDS interface.
</Para>
<?sml-need 6i>
<Figure>
<Title>A Possible Namespace Structure</Title>
<Graphic Format="EPS" Entityref="DCEADG.CDSNC.pic.2" Scalefit="1" 
Reprodep="400" Reprowid="400"></Graphic>
</Figure>
<?sml-space .2>
<?sml-need 14>
</ListItem>
<ListItem>
<Para><Literal>How should the entries be constructed?</Literal>
</Para>
<Para>Because CDS allows you to add as many attributes as you wish
to an object entry, it is up to you to impose some restraint in doing this.
In view of the XDS overhead involved in reading and writing single CDS attributes,
it makes sense to combine multiple related attributes under single
entries (that is, in the same directory object) where they can be read and
written in single calls to <Function>ds_read(&thinsp;)</Function> or <Function>ds_modify_entry(&thinsp;)</Function>.
This way, for example, you
only have to create one interface input object (to
pass to <Function>ds_read(&thinsp;)</Function>) to read all the attributes,
which you can do with one call to <Function>ds_read(&thinsp;)</Function>.
You can then separate out the returned subobjects that
you are interested in and ignore the rest.
Chapter 3 contains detailed
discussions of XDS programming techniques.
</Para>
<Para>In any case, you should define object types
for use in applications so that namespace access operations can be standardized
and kept efficient.  A CDS object type consists of a specific set of
attributes that belong to an object of that type, with no other attributes
allowed.  Note again that CDS, unlike GDS, does not force you to do
things this way.
You could theoretically have hundreds of CDS object entries,
each of which would contain a different combination of attributes.
</Para>
</ListItem>
<ListItem>
<Para><Literal>Should a directory or an entry be created?</Literal>
</Para>
<Para>When you consider adding information to the namespace, you can choose
between creating a new directory, possibly with entries in it, or
creating simply one or more entries.
When making your decision, take into consideration the following:
</Para>
<OrderedList>
<ListItem>
<Para>Directories cannot be created using XDS; they must be created
using administrative commands.
Directories are more expensive; they take up more space and take
more time to access.
However, they can contain entries and can therefore be used to
organize information in the namespace.
</Para>
</ListItem>
<ListItem>
<Para>Entries can be created using XDS and they are cheaper to create
and use than directories.
However, they must be created in existing directories, and 
cannot themselves contain other entries.
</Para>
</ListItem>
</OrderedList>
</ListItem>
</OrderedList>
</Sect2>
<Sect2 Id="DCEADG.CDSNC.div.12">
<Title>Access Control for CDS Entries</Title>
<Para>Each object in the CDS namespace is automatically equipped with a mechanism
by which access to it can be regulated by the object's owner or by another
authority.  For each object, the mechanism is implemented by a separate list
of the entities that can access the object in some way; for
example, to read it, write to it, delete it, and so on.  Associated with
each entity in this list is a string that specifies which operations are
allowed for that entity on the object.  The object's list is automatically
checked by CDS whenever any kind of access is attempted on that object by
any entity.  If the entity can be found in the object's list, and if the
kind of access the entity intends is found among its permissions, then the
operation is allowed to proceed by CDS; otherwise, it is not allowed.
</Para>
<Para>DCE permission lists are called <FirstTerm>access control lists</FirstTerm> (ACLs).  ACLs are one of 
the features of the DCE Security Service
used by CDS.  ACLs are used to test the entities'
(that is, the principals') authorization
to do things to the objects they propose to do them to.  The authorization
mechanism for all CDS objects is handled by CDS itself.  All that users of the CDS namespace have to do is make sure that ACLs on the CDS objects that they
create are set up with the appropriate
permissions.
</Para>
<Sect3 Id="DCEADG.CDSNC.div.13">
<Title>Creation of ACLs</Title>
<Para>Whenever you create a new entry
in the CDS namespace, an ACL is created for it implicitly, and its initial
list of entries and their permission sets are determined by the ACL templates
associated with the CDS directory in which you create the entry.
</Para>
<Para>Each CDS directory has the following two ACL templates associated with it:
</Para>
<ItemizedList>
<ListItem>
<Para>Initial Container
</Para>
<Para>This template is used to generate the initial ACL for any directories created
within the directory.
</Para>
</ListItem>
<ListItem>
<Para>Initial Object
</Para>
<Para>This template is used to generate ACLs for entries created within the directory.
</Para>
</ListItem>
</ItemizedList>
<Para>Like other CDS objects, each CDS directory also has its own ACL, 
generated from the parent directory's Initial Container
template when the child directory is created.
The Initial Container template also
serves as a template for the child directories' own Initial Container
templates.
</Para>
</Sect3>
<Sect3 Id="DCEADG.CDSNC.div.14">
<Title>Manipulating ACLs</Title>
<Para>There are two ways to manipulate ACLs: either through the <Command>acl_edit</Command>
command (see the <Filename MoreInfo="RefEntry">acl_edit(8sec)</Filename> reference page)
or through the DCE ACL application interface (see the
<Function>sec_acl_</Function><Symbol Role="Variable">*</Symbol><Literal>(3sec)</Literal> reference pages).
</Para>
</Sect3>
<Sect3 Id="DCEADG.CDSNC.div.15">
<Title>Initializing ACLs</Title>
<Para>After creating a CDS directory by using the <Command>cdscp</Command> command,
your first step
is usually to run the <Command>acl_edit</Command>
command to set up the new directory's ACLs the way you want them.  (The new
directory will have inherited its ACLs and its templates from the directory
in which it was created, as explained in Section 2.2.2.1.) You may want to
modify not only the directory's own ACLs, but also its two templates.  To
edit the latter, you can specify the <Option>ic</Option> option (for the Initial
Container template) or the <Option>io</Option> option (for the Initial Object
template);
otherwise, you will edit the object ACL.
</Para>
<Para>You can modify a directory's ACL templates from an application,
assuming that you have control permission for the object,
with the same combination of <Function>sec_acl_lookup(&thinsp;)</Function> and
<Function>sec_acl_replace(&thinsp;)</Function>
calls as for the object ACL.
An option to these routines lets you specify
which of the three possible ACLs on a directory object you want the call applied
to.  The ACLs themselves are in identical format.
</Para>
<Para>The <Option>e</Option> (entry) option to <Command>acl_edit</Command> can be used to make sure that
you get the ACL for the specified namespace entry object, and not the ACL (if any)
for the object that is <Symbol Role="Variable">referenced by</Symbol> the entry.  This distinction has to
be made clear to <Command>acl_edit</Command> because it finds the object (and hence the ACL)
in question by looking it up in the namespace and binding to its ACL manager.
Essentially, the <Option>e</Option> option tells <Command>acl_edit</Command> whether it should bind
to the CDS ACL manager (if the entry ACL is wanted), or to the manager
responsible for the referenced object's ACL. This latter manager would be a
part of the server application whose binding information the entry contained.
</Para>
<Para>An example of such an ambiguous name would be a CDS clearinghouse entry,
such as
the <Symbol Role="Variable">cdshostname</Symbol><Literal>_ch</Literal> entry discussed previously.
With the <Option>e</Option> option, you would edit the ACL on the namespace
entry, as follows:
</Para>
<InformalExample>
<Para><ProgramListing><UserInput>acl_edit&ensp;-e&ensp;/.:/<Symbol Role="Variable">cdshostname</Symbol><Literal>_ch
</Literal></UserInput></ProgramListing></Para>
</InformalExample>
<Para>Without the <Option>e</Option> option, you
would edit the ACL on the clearinghouse itself, which you presumably do
<Symbol Role="Variable">not</Symbol> want to do.
</Para>
<Para>Similarly, there is a <Symbol Role="Variable">bind_to_entry</Symbol> parameter by which the caller of
<Function>sec_acl_bind(&thinsp;)</Function> can indicate whether the entry object's ACL
or the ACL to which the entry refers is desired.  
<!-- DCE 1.2 writer: again, I can't find what this ref is to:-->
<!-- For further details on the pitfalls of binding ambiguity, -->
<!-- see Chapter 2 of this guide.-->
</Para>
</Sect3>
<Sect3 Id="DCEADG.CDSNC.div.16">
<Title>Namespace ACLs at Cell Configuration</Title>
<Para>The ACLs attached to the CDS namespace at configuration are described in
&DCEAg;.  The following ACL
permissions are defined for
CDS objects.  The single letter in parentheses for each item represents the
DCE notation for that permission.
These single letters are identical to the
untokenized forms returned by <Function>sec_acl_get_printstring(&thinsp;)</Function>.
</Para>
<ItemizedList>
<ListItem>
<Para>read (<Literal>r</Literal>)
</Para>
<Para>This permission
allows a principal to look up an object entry and view its attribute values.
</Para>
</ListItem>
<ListItem>
<Para>write (<Literal>w</Literal>)
</Para>
<Para>This permission allows
a principal to change an object's modifiable attributes, except for
its ACLs.
</Para>
</ListItem>
<ListItem>
<Para>insert (<Literal>i</Literal>)
</Para>
<Para>This permission
allows a principal to create new entries in a CDS directory.
It is used with
directory entries only.
</Para>
</ListItem>
<ListItem>
<Para>delete (<Literal>d</Literal>)
</Para>
<Para>This permission
allows a principal to delete a name entry from the namespace.
</Para>
</ListItem>
<ListItem>
<?sml-need 7>
<Para>test (<Literal>t</Literal>)
</Para>
<Para>This permission
allows a principal to test whether an attribute of an object has a particular
value, but does not permit it actually to see any of the attribute values
(in other words, read permission for the object is not granted).  The test
permission allows an application to verify a particular CDS attribute's value
without reading it.
</Para>
</ListItem>
<ListItem>
<Para>control (<Literal>c</Literal>)
</Para>
<Para>This permission
allows a principal to modify the entries in the object's ACL. The
control
permission is automatically granted to the creator of a CDS object.
</Para>
</ListItem>
<ListItem>
<Para>administer (<Literal>a</Literal>)
</Para>
<Para>This permission
allows a principal to issue <Command>cdscp</Command> commands that control the replication
of directories.
It is used with directory entries only.
</Para>
</ListItem>
</ItemizedList>
<Para>Detailed instructions on the mechanics of setting up ACLs on CDS objects
can be found in the &DCEAg;.
</Para>
<Para>For CDS directories, read and test permissions are sufficient to allow
ordinary principals to access the directory and to read and test
entries therein.
Principals who you want to be able to add entries in a CDS directory should have
insert permission for that directory.  Entries created by the RPC
NSI routines
(for example, when a server exports bindings for the first time) are automatically
set up with the correct permissions.  However, if you are creating new CDS directories
for RPC use, you should be sure to grant prospective user principals insert
permission to the directory so that servers can create entries when they export
their bindings.  A general list of the permissions required for the various
RPC NSI operations can be found in the <Filename MoreInfo="RefEntry">rpc_intro(3rpc)</Filename> and
<Function>rpc_ns_</Function><Symbol Role="Variable">*</Symbol><Literal>(3rpc)</Literal> (RPC NSI) reference pages.
</Para>
<Para>Note that CDS names do not
behave the same way as file system names.  A principal does not need to have
access to an entire entry name path in order to have access to an entry at
the end of that path.  
For example, a principal can be granted read access
to the following entry:
</Para>
<InformalExample>
<Para><ProgramListing><UserInput>/.:/applications/utilities/pr2
</UserInput></ProgramListing></Para>
</InformalExample>
<Para>and yet not have read access to the <Literal>utilities</Literal> directory
itself.
</Para>
</Sect3>
</Sect2>
</Sect1>
<Sect1 Id="DCEADG.CDSNC.div.17">
<Title>Valid Characters and Naming Rules for CDS</Title>
<IndexTerm Id="DCEADG.CDSNC.indx.1">
<Primary>name</Primary>
<Secondary>valid characters</Secondary>
</IndexTerm>
<IndexTerm Id="DCEADG.CDSNC.indx.2">
<Primary>naming</Primary>
<Secondary>rules</Secondary>
</IndexTerm>
<Para>The following subsections discuss
the valid character sets for DCE Directory Service
names as used by CDS interfaces.
They also explain some characters that have
special meaning and describe some restrictions and rules regarding case
matching, syntax, and size limits.
</Para>
<Para>The use of names in DCE often involves more than
one directory service.  For example, CDS interacts with either GDS or DNS
to find names outside the local cell.
</Para>
<Para>Figure 2-3
details the valid characters in CDS names, and the valid characters in
GDS and DNS names as used by CDS interfaces.
</Para>
<Note>
<Para>Because CDS, GDS, and DNS all have their own valid character sets and syntax 
rules,
the best way to avoid problems is to keep names short and simple, 
consisting of a minimal set of characters common to all three services. 
The recommended set is the letters A to
Z, a to z, and the digits 0 to 9. In addition to making directory
service interoperations easier, use of this subset decreases the probability 
that users in a heterogeneous hardware and software environment will encounter
problems creating and using names.
</Para>
</Note>
<Para>Although spaces are valid in both CDS and GDS names, a CDS simple name 
containing a space 
must be enclosed in "" (double quotes) when you enter it through 
the CDS control program.  Additional interface-specific rules are
documented in the modules where they apply.
</Para>
<?sml-need 6i>
<Figure>
<Title>Valid Characters in CDS, GDS, and DNS Names</Title>
<Graphic Entityref="DCEADG.CDSNC.ent.1"></Graphic>
</Figure>
<?sml-space .2>
<Sect2 Id="DCEADG.CDSNC.div.18">
<Title>Metacharacters</Title>
<IndexTerm Id="DCEADG.CDSNC.indx.3">
<Primary>metacharacters</Primary>
</IndexTerm>
<IndexTerm Id="DCEADG.CDSNC.indx.4">
<Primary>metacharacters</Primary>
<Secondary>in CDS</Secondary>
</IndexTerm>
<IndexTerm Id="DCEADG.CDSNC.indx.5">
<Primary>metacharacters</Primary>
<Secondary>in GDS</Secondary>
</IndexTerm>
<IndexTerm Id="DCEADG.CDSNC.indx.6">
<Primary>metacharacters</Primary>
<Secondary>in DNS</Secondary>
</IndexTerm>
<Para>Certain characters have special meaning to the directory services; these
are known as <FirstTerm>metacharacters</FirstTerm>.
Table 2-1
lists and explains the CDS, GDS, and DNS metacharacters.
</Para>
<Table Frame="all" Orient="Port">
<Title>Metacharacters and Their Meaning</Title>
<TGroup Cols="3">
<ColSpec Colsep="1" Align="Left" Colwidth="87*" Colname="col1" Colnum="1">
<ColSpec Colsep="1" Align="Center" Colwidth="87*" Colname="col2" Colnum="2">
<ColSpec Align="Left" Colwidth="281*" Colname="col3" Colnum="3">
<THead>

<Row>
<Entry Rowsep="1"><Literal>Directory Service</Literal></Entry>
<Entry Rowsep="1"><Literal>Character</Literal></Entry>
<Entry Rowsep="1"><Literal>Meaning</Literal></Entry>
</Row>

</THead>
<TBody>
<Row>
<Entry>CDS</Entry>
<Entry>/</Entry>
<Entry>
Separates elements of a name (simple names).
</Entry>
</Row>
<Row>
<Entry></Entry>
<Entry>*</Entry>
<Entry>
When used in the rightmost simple name of a name entered in a <Command>cdscp
show</Command> or <Literal>list</Literal> command,
acts as a wildcard, matching zero or more characters.
</Entry>
</Row>
<Row>
<Entry></Entry>
<Entry>?</Entry>
<Entry>
When used in the rightmost simple name of a name entered in a <Command>cdscp
show</Command> or <Literal>list</Literal> command, acts as a wildcard, matching exactly one
character.
</Entry>
</Row>
<Row>
<Entry Rowsep="1"></Entry>
<Entry Rowsep="1">&bsol;</Entry>
<Entry Rowsep="1">
Used where necessary in front of <Literal>*</Literal> (asterisk) 
or <Literal>?</Literal> (question mark) to escape the character (indicates that
the following character is not a metacharacter).
</Entry>
</Row>
<Row>
<Entry>GDS</Entry>
<Entry>/</Entry>
<Entry>
Separates RDNs.
</Entry>
</Row>
<Row>
<Entry></Entry>
<Entry>,</Entry>
<Entry>
Separates multiple attribute type/value pairs (attribute value
assertions) within an RDN.
</Entry>
</Row>
<Row>
<Entry></Entry>
<Entry>=</Entry>
<Entry>
Separates an attribute type and value in an attribute value assertion.
</Entry>
</Row>
<Row>
<Entry Rowsep="1"></Entry>
<Entry Rowsep="1">&bsol;</Entry>
<Entry Rowsep="1">
Used in front of <Literal>/</Literal> (slash), <Literal>,</Literal> (comma), or <Literal>=</Literal>
(equal sign) to escape the
character (indicates that the following character is not a
metacharacter).
</Entry>
</Row>
<Row>
<Entry>DNS</Entry>
<Entry>.</Entry>
<Entry>
Separates elements of a name.
</Entry>
</Row>
</TBody>
</TGroup>
</Table>
<Para><?sml-need 4>Some metacharacters are not permitted as normal characters within a name.
For example, a <Literal>&bsol;</Literal> (backslash)
cannot be used as anything but an escape character in GDS. 
You can use other metacharacters as normal characters in a name,
provided that you escape them with the backslash metacharacter.
</Para>
</Sect2>
<Sect2 Id="DCEADG.CDSNC.div.19">
<Title>Additional Rules</Title>
<Para>Table 2-2 summarizes major points to remember about
CDS, GDS, and DNS character sets, metacharacters, restrictions, case-matching
rules, internal storage of data, and ordering of elements in a name.  For 
additional details, see the documentation for each technology.
</Para>
<?sml-need 7i>
<Table role="page-wide" Frame="all" Orient="Port">
<Title>Summary of CDS, GDS, and DNS Characteristics</Title>
<TGroup Cols="4">
<ColSpec Colsep="1" Align="Left" Colwidth="1*" Colname="col1" Colnum="1">
<ColSpec Colsep="1" Align="Left" Colwidth="1.5*" Colname="col2" Colnum="2">
<ColSpec Colsep="1" Align="Left" Colwidth="1.5*" Colname="col3" Colnum="3">
<ColSpec Align="Left" Colwidth="1.5*" Colname="col4" Colnum="4">
<THead>
<Row>
<Entry Rowsep="1"><?sml-size 8><Literal>Characteristic</Literal></Entry>
<Entry Rowsep="1"><?sml-size 8><Literal>CDS</Literal></Entry>
<Entry Rowsep="1"><?sml-size 8><Literal>GDS</Literal></Entry>
<Entry Rowsep="1"><?sml-size 8><Literal>DNS</Literal></Entry>
</Row>
</THead>
<TBody>
<Row>
<Entry Rowsep="1"><?sml-size 8>
Character Set
</Entry>
<Entry Rowsep="1"><?sml-size 8>
a to z, A to Z, 0 to 9 plus space and special characters shown in
Figure 2-3
</Entry>
<Entry Rowsep="1"><?sml-size 8>
a to z, A to Z, 0 to 9 plus . : , ' &thinsp; + &minus; = (&thinsp;) ? / and space
</Entry>
<Entry Rowsep="1"><?sml-size 8>
a to z, A to Z, 0 to 9 plus . &minus;
</Entry>
</Row>
<Row>
<Entry Rowsep="1"><?sml-size 8>
Metacharacters
</Entry>
<Entry Rowsep="1"><?sml-size 8>
/ * ? &bsol;
</Entry>
<Entry Rowsep="1"><?sml-size 8>
/ , = &bsol;
</Entry>
<Entry Rowsep="1"><?sml-size 8>.</Entry>
</Row>
<Row>
<Entry Rowsep="1"><?sml-size 8>
Restrictions
</Entry>
<Entry Rowsep="1"><?sml-size 8>
Simple names cannot contain slashes.

<?Pub _newline>
The first simple name following the global cell name (or /.: prefix) cannot
contain an equal sign.

<?Pub _newline>
When entering a name as part of a <Command>cdscp show</Command> or <Literal>list</Literal> command,
you must use a backslash to escape any asterisk or question mark
character in the rightmost simple name.
Otherwise, the character is interpreted as a wildcard.

</Entry>
<Entry Rowsep="1"><?sml-size 8>
Relative distinguished names cannot begin or end with a slash.

<?Pub _newline>
Attribute types must begin with an alphabetic character, can contain
only alphanumerics, and cannot contain spaces.
An alternate method of specifying attribute types is by object
identifier, a sequence of digits separated by <Literal>.</Literal> (dots).

<?Pub _newline>
You must use backslash to escape a slash, a comma,
and an equal sign when using them as anything
other than metacharacters.

<?Pub _newline>
Multiple consecutive unescaped occurrences of slashes, commas, 
equal signs and backslashes are not
allowed.

<?Pub _newline>
Each attribute value assertion contains exactly one unescaped equal
sign.

</Entry>
<Entry Rowsep="1"><?sml-size 8>
The first character must be alphabetic.
<?Pub _newline>
The first and last characters cannot be <Literal>.</Literal> (dot) or <Literal>&ndash;</Literal> (dash).
<?Pub _newline>
Cell names in DNS must contain at least one dot; they
must be more than one level deep.

</Entry>
</Row>
<Row>
<Entry Rowsep="1"><?sml-size 8>
Case-Matching Rules
</Entry>
<Entry Rowsep="1"><?sml-size 8>
Case exact
</Entry>
<Entry Rowsep="1"><?sml-size 8>
Attribute types are matched case insensitive.
The case-matching rule for an attribute value can be case exact or
case insensitive, depending on the rule defined for its type at the DSA.
</Entry>
<Entry Rowsep="1"><?sml-size 8>
Case insensitive
</Entry>
</Row>
<Row>
<Entry Rowsep="1"><?sml-size 8>
Internal Representation
</Entry>
<Entry Rowsep="1"><?sml-size 8>
Case exact
</Entry>
<Entry Rowsep="1"><?sml-size 8>
Depends on the case-matching rule defined at DSA.
If the rule says case insensitive, alphabetic characters are converted to
all lowercase characters.
Spaces are removed regardless of the case-matching rule.
</Entry>
<Entry Rowsep="1"><?sml-size 8>
Alphabetic characters are converted to all lowercase characters.
</Entry>
</Row>
<Row>
<Entry><?sml-size 8>
Ordering of Name Elements
</Entry>
<Entry><?sml-size 8>
Big endian (left to right from root to lower-level names).
</Entry>
<Entry><?sml-size 8>
Big endian (left to right from root to lower-level names).
</Entry>
<Entry><?sml-size 8>
Little endian (right to left from root to lower-level names).
</Entry>
</Row>
</TBody>
</TGroup>
</Table>
</Sect2>
<Sect2 Id="DCEADG.CDSNC.div.20">
<Title>Maximum Name Sizes</Title>
<IndexTerm Id="DCEADG.CDSNC.indx.7">
<Primary>name</Primary>
<Secondary>maximum sizes</Secondary>
</IndexTerm>
<Para>Table 2-3 lists the maximum sizes for directory service names.  Note that
the limits are implementation specific, not architectural.
</Para>
<?sml-need 5i>
<Table Frame="all" Remap="center" Orient="Port">
<Title>Maximum Sizes of Directory Service Names</Title>
<TGroup Cols="2">
<ColSpec Colsep="1" Align="Left" Colwidth="3in" Colname="col1" Colnum="1">
<ColSpec Char="." Align="Char" Colwidth="1.5in" Colname="col2" Colnum="2">
<THead>

<Row>
<Entry Rowsep="1"><Literal>Name Type</Literal></Entry>
<Entry Rowsep="1"><Literal>Maximum Characters (Size)</Literal></Entry>
</Row>

</THead>
<TBody>
<Row>
<Entry Rowsep="1">
CDS simple name (character string between two slashes)
</Entry>
<Entry Rowsep="1">254</Entry>
</Row>
<Row>
<Entry Rowsep="1">
CDS full name (including global or local prefix, cell name, and slashes
separating simple names)
</Entry>
<Entry Rowsep="1">1023</Entry>
</Row>
<Row>
<Entry Rowsep="1">
GDS relative distinguished name
</Entry>
<Entry Rowsep="1">64</Entry>
</Row>
<Row>
<Entry Rowsep="1">
GDS distinguished name
</Entry>
<Entry Rowsep="1">1024</Entry>
</Row>
<Row>
<Entry Rowsep="1">
DNS relative name (character string between two dots)
</Entry>
<Entry Rowsep="1">64</Entry>
</Row>
<Row>
<Entry>
DNS fully qualified name (sum of all relative names)
</Entry>
<Entry>255</Entry>
</Row>
</TBody>
</TGroup>
</Table>
<Sect3 Id="DCEADG.CDSNC.div.21">
<Title>Valid Characters for GDS Attributes</Title>
<!-- - -->
<!---->
<!-- COPYRIGHT (C) SIEMENS NIXDORF INFORMATIONSSYSTEME AG 1991   -->
<!--               ALL RIGHTS RESERVED                           -->
<Para>This section describes the valid character sets for the GDS
attributes.
</Para>
<Para>The values of the country attributes are restricted to the ISO 3166
Alpha-2 code representation of country names.
(For more information, see the &DCEAg;.)
</Para>
<Para>The character set for all other naming attributes is the T61 graphical
character set.  It is described in the next section.
</Para>
</Sect3>
<Sect3 Id="DCEADG.CDSNC.div.22">
<Title>T61 Syntax</Title>
<Para>Table 2-4 shows the T61 graphical character set.
</Para>
<Note>
<Para>The 1) entry in the table indicates that
it is not recommended that you use the codes in Column 2 Row 3, and Column
2 Row 4.
Instead, use the appropriate code in Column A.
</Para>
</Note>
<?sml-need 6i>
<Table>
<Title>T61 Syntax</Title>
<Graphic Format="EPS" Entityref="DCEADG.CDSNC.pic.3"></Graphic>
</Table>
<?sml-space .2>
<?sml-space .5>
<Para>The administration interface supports only characters smaller
than 0x7e for names.  The XDS
application programming interface (API) supports the full T61 range
as indicated in the preceding table.
</Para>
<Para><?sml-need 3>Some T61 alphabetical characters have a 2-byte representation.  For
example, a lowercase letter <Literal>a</Literal> with an
acute accent is represented by 0xc2
(the code for an
acute accent) followed by 0x61 (the code for a lowercase <Literal>a</Literal>).
</Para>
<Para>Only certain combinations of diacritical characters and basic letters are
valid.  They are shown in Table 2-5.
</Para>
<Table Frame="all" Remap="center" Orient="Port">
<Title>Combinations of Diacritical Characters and Basic Letters</Title>
<TGroup Cols="4">
<ColSpec Colsep="1" Align="Left" Colwidth="1in" Colname="col1" Colnum="1">
<ColSpec Colsep="1" Align="Center" Colwidth=".75in" Colname="col2" Colnum="2">
<ColSpec Colsep="1" Align="Left" Colwidth=".75in" Colname="col3" Colnum="3">
<ColSpec Align="Left" Colwidth="2in" Colname="col4" Colnum="4">
<TBody>
<Row>
<Entry Rowsep="1"><Literal>Name</Literal></Entry>
<Entry Align="Left" Rowsep="1"><Literal>Repr.</Literal></Entry>
<Entry Rowsep="1"><Literal>Code</Literal></Entry>
<Entry Rowsep="1"><Literal>Valid Basic Letters Following</Literal></Entry>
</Row>

<Row>
<Entry Rowsep="1">grave accent</Entry>
<Entry Rowsep="1">&grave;</Entry>
<Entry Rowsep="1">0xc1</Entry>
<Entry Rowsep="1">a, A, e, E, i, I, o, O, u, U</Entry>
</Row>

<Row>
<Entry rowsep="1">acute accent</Entry>
<Entry rowsep="1">&aacute;</Entry>
<Entry rowsep="1">0xc2</Entry>
<Entry rowsep="1">a, A, c, C, e, E, g, i, I, l, L, n, N, o, O, r, R, s, S, u, U, y, Y, z, Z</Entry>
</Row>

<Row>
<Entry Rowsep="1">circumflex accent</Entry>
<Entry Rowsep="1">&caret;</Entry>
<Entry Rowsep="1">0xc3</Entry>
<Entry Rowsep="1">a, A, c, C, e, E, g, G, h, H, i, I, j, J, o, O, s, S, u, U, w, W, y, Y</Entry>
</Row>

<Row>
<Entry Rowsep="1">tilde</Entry>
<Entry Rowsep="1">~</Entry>
<Entry Rowsep="1">0xc4</Entry>
<Entry Rowsep="1">a, A, i, I, n, N, o, O, u, U</Entry>
</Row>
<Row>
<Entry Rowsep="1">macron</Entry>
<Entry Rowsep="1">&macr;</Entry>
<Entry Rowsep="1">0xc5</Entry>
<Entry Rowsep="1">a, A, e, E, i, I, o, O, u, U</Entry>
</Row>
<Row>
<Entry Rowsep="1">breve</Entry>
<Entry Rowsep="1">&breve;</Entry>
<Entry Rowsep="1">0xc6</Entry>
<Entry Rowsep="1">a, A, g, G, u, U</Entry>
</Row>
<Row>
<Entry Rowsep="1">dot above</Entry>
<Entry Rowsep="1">&dot;</Entry>
<Entry Rowsep="1">0xc7</Entry>
<Entry Rowsep="1">c, C, e, E, g, G, I, z, Z</Entry>
</Row>
<Row>
<Entry Rowsep="1">umlaut</Entry>
<Entry Rowsep="1">&uml;</Entry>
<Entry Rowsep="1">0xc8</Entry>
<Entry Rowsep="1">a, A, e, E, i, I, o, O, u, U, y, Y</Entry>
</Row>
<Row>
<Entry Rowsep="1">ring</Entry>
<Entry Rowsep="1">&ring;</Entry>
<Entry Rowsep="1">0xca</Entry>
<Entry Rowsep="1">a, A, u, U</Entry>
</Row>
<Row>
<Entry Rowsep="1">cedilla</Entry>
<Entry Rowsep="1">&cedil;</Entry>
<Entry Rowsep="1">0xcb</Entry>
<Entry Rowsep="1">c, C, G, k, K, l, L, n, N, r, R, s, S, t, T</Entry>
</Row>
<Row>
<Entry Rowsep="1">double accent</Entry>
<Entry Rowsep="1">"</Entry>
<Entry Rowsep="1">0xcd</Entry>
<Entry Rowsep="1">o, O, u, U</Entry>
</Row>
<Row>
<Entry Rowsep="1">ogonek</Entry>
<Entry Rowsep="1">&ogon;</Entry>
<Entry Rowsep="1">0xce</Entry>
<Entry Rowsep="1">a, A, e, E, i, I, u, U</Entry>
</Row>
<Row>
<Entry>caron</Entry>
<Entry>&caron;</Entry>
<Entry>0xcf</Entry>
<Entry>c, C, d, D, e, E, l, L, n, N, r, R, s, S, t, T, z, Z</Entry>
</Row>
</TBody>
</TGroup>
</Table>
<?sml-space .5>
<Para>The nonspacing underline (code 0xcc) must be followed by a Latin
alphabetical character; that is, a basic letter (a to z or A to Z), or a valid diacritical combination.
</Para>
</Sect3>
</Sect2>
</Sect1>
<Sect1 Id="DCEADG.CDSNC.div.23">
<Title>Use of OIDs</Title>
<Para>OIDs are not seen by applications that restrict themselves to using only the
RPC NSI routines (<Function>rpc_ns_...(&thinsp;)</Function>), but these identifiers are important
for applications that use the XDS interface to read entries directly or to
create new attributes for use with namespace entries.
</Para>
<Para>RPC makes
use of only four different entry attributes
in various application-specified or administrator-specified
combinations.  CDS, however, contains definitions for many more than
these, which
can be added by applications to RPC entries through the XDS interface.
Attributes that already exist are already properly identified
so applications that use these attributes do not have to concern
themselves with the OIDs, except to the extent of making sure that they
handle them properly.
</Para>
<Para>Unlike UUIDs, OIDs are not generated by command or function call.  They
originate from ISO, which
allocates them in hierarchically organized blocks to recipients. 
Each recipient, typically some organization, is then
responsible for ensuring that the OIDs it receives are used uniquely.
</Para>
<Para>For example, the following OID block was allocated to OSF by ISO:
</Para>
<InformalExample>
<Para><ProgramListing><UserInput>1.3.22
</UserInput></ProgramListing></Para>
</InformalExample>
<Para>OSF can therefore generate, for example, 
the following OID and allocate it to identify some DCE directory object:
</Para>
<InformalExample>
<Para><ProgramListing><UserInput>1.3.22.1.1.4
</UserInput></ProgramListing></Para>
</InformalExample>
<Para>(The OID <Literal>1.3.22.1.1.4</Literal>
identifies the RPC profile entry object attribute.)
OSF is responsible for making sure that <Literal>1.3.22.1.1.4</Literal> is not used
to identify any other attribute.  Thus, as long as all
OIDs are generated only from within each owner's properly obtained block,
and as long as each block owner makes sure that the OIDs generated within
its block are properly used, each OID will always be a universally
valid identifier for its associated value.
</Para>
<Para><?sml-need 4>OIDs are encoded and internally
represented as strings of hexadecimal digits, and comparisons
of OIDs have to be performed as hexadecimal
string comparisons (not as
comparisons on NULL-terminated strings
since OIDs can have NULL bytes
as part of their value).
</Para>
<Para>When applications have occasion to handle OIDs, they do so directly
because
the numbers do not change and should not be reused.  However, for users'
convenience, CDS also maintains a file (called <Literal>cds_attributes</Literal>,
found in <Filename>/opt/dcelocal/etc</Filename>) that lists string equivalents
for all the OIDs in use in a cell in entries like the following one:
</Para>
<InformalExample>
<Para><ProgramListing><UserInput>1.3.22.1.1.4	RPC_Profile	byte
</UserInput></ProgramListing></Para>
</InformalExample>
<Para>This allows users to see <Literal>RPC_Profile</Literal> in output, rather than the
meaningless string <Literal>1.3.22.1.1.4</Literal>.
Further details about the <Literal>cds_attributes</Literal>
file and OIDs can be found in the &DCEAg;.
</Para>
<Para>In summary, the procedure you should follow to create new attributes 
on CDS entries consists of three steps:
</Para>
<OrderedList>
<ListItem>
<Para>Request and receive from your locally designated authority the OIDs for the
attributes you intend to create.
</Para>
</ListItem>
<ListItem>
<Para>Update the <Literal>cds_attributes</Literal> file with the new attributes' OIDs and
labels if you want your application to be able to use string
name representations for OIDs in output.
</Para>
</ListItem>
<ListItem>
<Para>Using XDS, write the routines to create, add, and access the attributes.
</Para>
</ListItem>
</OrderedList>
<Para>Your cell administrator should be able to provide you with a name and an
OID.
The <Symbol Role="Variable">name</Symbol> is a guaranteed-unique series
of values for a global directory entry name.
If the directory is GDS, the name
is a series of type/value pairs, such as
</Para>
<InformalExample>
<Para><ProgramListing><UserInput>C=US O=OSF
</UserInput></ProgramListing></Para>
</InformalExample>
<Para>The cell administrator
can also obtain an OID block.
From this OID space, the administrator can assign you the OIDs
you need for your application.
</Para>
<Para>Note that there is no need for new OIDs in connection with cell names.
The OIDs
for Country Name and Organization Name
are part of the X.500 standard implemented in
GDS; only the values associated with the OIDs
(the values of the objects) change
from entry name to entry name.
Instead, being able to generate new OIDs gives you the ability to invent
and add new details to the directory itself.  For example, you can create new
kinds of CDS entry attributes by generating new OIDs to identify them.  The
same thing can be done to GDS,
although the procedure is more complicated because
it involves altering the directory schema.
</Para>
</Sect1>
</Chapter>
<!--+ 09/23/96 11:54:18
    | tagMorph:  $Id: 2_name_concepts.sgm,v 1.1.2.11 1996/12/17 19:28:45 damon Exp $
    | tagMorph library:  $Id: 2_name_concepts.sgm,v 1.1.2.11 1996/12/17 19:28:45 damon Exp $
    | sml-to-docbook:  1.21
    +-->
