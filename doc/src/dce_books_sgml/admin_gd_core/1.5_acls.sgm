<!--
# @OSF_COPYRIGHT@
# 
# 
# HISTORY
# $Log: 1.5_acls.sgm,v $
# Revision 1.1.2.10  1996/12/04  22:48:31  carrig
# 	{enh,R1.2.2}
# 	JC's edits
# 	[1996/12/04  22:46:08  carrig]
#
# 	{enh,R1.2.2}
# 	Scaled graphics
# 	[1996/12/03  21:59:53  carrig]
#
# Revision 1.1.2.9  1996/11/29  20:19:56  carrig
# 	{enh,R1.2.2}
# 	Finished edit changes; must scale graphics
# 	[1996/11/29  20:16:23  carrig]
# 
# Revision 1.1.2.8  1996/11/27  21:42:59  carrig
# 	{enh,R1.2.2}
# 	More editor's comments
# 	[1996/11/27  21:40:49  carrig]
# 
# 	{enh,R1.2.2}
# 	More editor's comments
# 	[1996/11/27  21:27:38  carrig]
# 
# Revision 1.1.2.7  1996/11/26  21:44:35  carrig
# 	{enh,R1.2.2}
# 	Putting in editor's comments
# 	[1996/11/26  21:40:04  carrig]
# 
# Revision 1.1.2.6  1996/11/25  21:50:43  carrig
# 	{enh,R1.2.2}
# 	Started to put in editor's comments
# 	[1996/11/25  21:48:30  carrig]
# 
# Revision 1.1.2.5  1996/11/07  20:42:51  weir
# 	Cleaned up history
# 	[1996/11/07  20:40:51  weir]
# 
# Revision 1.1.2.4  1996/11/06  20:39:58  carrig
# 	{enh,R1.2.2}
# 	OK for editing
# 	[1996/11/06  20:37:20  carrig]
# 
# Revision 1.1.2.3  1996/11/05  18:58:15  carrig
# 	{enh,R1.2.2}
# 	Second pass
# 	[1996/11/05  18:54:47  carrig]
# 
# Revision 1.1.2.2  1996/11/04  22:03:08  carrig
# 	{enh,R1.2.2}
# 	First pass at corrections
# 	[1996/11/04  21:59:29  carrig]
# 
# Revision 1.1.2.1  1996/11/01  18:19:28  wardr
# 	{edit,R1.2.2}
# 	Initial checkin after sgml conversion
# 	[1996/11/01  18:17:21  wardr]
# 
# Revision 1.1.1.2  1996/11/01  18:17:21  wardr
# 	{edit,R1.2.2}
# 	Initial checkin after sgml conversion
# 
# $EndLog$
-->
<!---->
<!-- Fragment document type declaration subset:
ArborText, Inc., 1988-1993, v.4001
<!DOCTYPE Book PUBLIC "-//Davenport//DTD DocBook V2.4//EN" [
<!ENTITY AGCC.SECACL.ent.1 SYSTEM "eps/1.5_acls_05.ps" NDATA eps>
<!ENTITY AGCC.SECACL.ent.2 SYSTEM "eps/1.5_acls_10.ps" NDATA eps>
<!ENTITY AGCC.SECACL.ent.3 SYSTEM "eps/1.5_acls_15.ps" NDATA eps>
<!ENTITY AGCC.SECACL.ent.4 SYSTEM "eps/1.5_acls_20.ps" NDATA eps>
<!ENTITY AGCC.SECACL.ent.5 SYSTEM "eps/1.5_acls_30.ps" NDATA eps>
]>
-->
<!-- COPYRIGHT NOTICE-->
<!-- Copyright (c) 1990, 1991, 1992, 1993, 1994 Open Software Foundation, Inc.-->
<!-- ALL RIGHTS RESERVED (DCE).  See the file named COPYRIGHT.DCE for-->
<!-- the full copyright text.-->
<!-- -->
<!-- HISTORY-->
<!-- Revision 1.1.4.1  1996/09/19  15:32:49  sherman-->
<!-- 	{def,13575,R1.2.2}-->
<!-- 	Removed info on non-dcecp control programs-->
<!-- 	[1996/09/19  15:31:59  sherman]-->
<!---->
<!-- Revision 1.1.2.17  1995/05/25  19:06:10  rcb-->
<!-- 	PRENTICE HALL reformat: final changes-->
<!-- 	[1995/05/25  13:23:52  rcb]-->
<!-- -->
<!-- 	minor change-->
<!-- 	[1995/05/15  13:05:25  rcb]-->
<!-- -->
<!-- 	1.1 edit; terminology fix-->
<!-- 	[1995/04/10  18:49:34  rcb]-->
<!-- -->
<!-- 	PRENTICE HALL reformat - index entries, odds and ends-->
<!-- 	[1995/03/27  19:50:39  rcb]-->
<!-- -->
<!-- 	prevented hyphenation of option names-->
<!-- 	[1995/03/09  15:01:57  rcb]-->
<!-- -->
<!-- 	fixes to header capitalization-->
<!-- 	[1995/03/08  16:20:44  rcb]-->
<!-- -->
<!-- 	PRENTICE HALL & editorial: a few more adjustments-->
<!-- 	[1995/03/08  15:40:20  rcb]-->
<!-- -->
<!-- 	PRENTICE HALL reformat-->
<!-- 	[1995/03/06  22:07:39  rcb]-->
<!-- -->
<!-- 	incorporated 1.1 edits-->
<!-- 	[1995/03/06  21:18:41  rcb]-->
<!-- -->
<!-- Revision 1.1.2.16  1994/11/03  23:27:31  neilson-->
<!-- 	Substituted macros for book names in cross refs.-->
<!-- 	[1994/11/03  01:38:06  neilson]-->
<!-- -->
<!-- 	Substituted macros for book names in cross refs.-->
<!-- -->
<!-- Revision 1.1.2.15  1994/10/21  17:24:00  wardr-->
<!-- 	{edit R1.1}-->
<!-- 	Final GA release edits-->
<!-- 	[1994/10/21  17:23:43  wardr]-->
<!-- -->
<!-- Revision 1.1.2.14  1994/10/20  16:06:53  wardr-->
<!-- 	{edit R1.1}-->
<!-- 	Final GA release edits-->
<!-- 	[1994/10/20  16:04:27  wardr]-->
<!-- -->
<!-- Revision 1.1.2.13  1994/10/19  14:20:10  neilson-->
<!-- 	Editorial corrections.-->
<!-- 	[1994/10/19  14:19:50  neilson]-->
<!-- -->
<!-- Revision 1.1.2.12  1994/10/18  15:03:18  neilson-->
<!-- 	CR 7816 - Added description of how masks work when modifying ACLs.-->
<!-- 	Also improved wording for ACL entry checking sequence.-->
<!-- 	[1994/10/18  15:02:35  neilson]-->
<!-- -->
<!-- Revision 1.1.2.11  1994/10/05  19:29:45  wardr-->
<!-- 	{def, 9635, R1.1}-->
<!-- 	Fixed bad cross reference-->
<!-- 	[1994/10/05  19:29:23  wardr]-->
<!-- -->
<!-- Revision 1.1.2.10  1994/09/16  21:26:05  millette-->
<!-- 	No changes-->
<!-- 	[1994/09/16  21:20:41  millette]-->
<!-- -->
<!-- Revision 1.1.2.9  1994/09/06  18:53:11  neilson-->
<!-- 	CR 10014 - Created a section on using 'acl replace' to take care of-->
<!-- 	the functionality formerly provided by acl_edit's 'assign' subcommand.-->
<!-- 	[1994/09/06  18:52:52  neilson]-->
<!-- -->
<!-- Revision 1.1.2.8  1994/08/04  20:55:48  neilson-->
<!-- 	replaced acl_edit material with dcecp (second draft)-->
<!-- 	[1994/08/04  20:55:18  neilson]-->
<!-- -->
<!-- Revision 1.1.2.7  1994/07/20  19:45:48  steto-->
<!-- 	{edt, CR10014, R1.1, Removed detail on dcecp acl commands}-->
<!-- 	Removed the detail on the dcecp acl commands, which appears on the reference-->
<!-- 	pages in the Command Reference.  Also deleted the section comparing the dcecp-->
<!-- 	and acl_edit commands.-->
<!-- 	[1994/07/20  19:45:19  steto]-->
<!-- -->
<!-- Revision 1.1.2.6  1994/06/20  10:17:18  neilson-->
<!-- 	{10014} Further changes to replace acl_edit with dcecp.  First draft-->
<!-- 	version.-->
<!-- 	[1994/06/20  10:16:54  neilson]-->
<!-- -->
<!-- Revision 1.1.2.5  1994/06/13  18:07:28  devobj-->
<!-- 	cr10872 - fix copyright-->
<!-- 	[1994/06/13  18:06:56  devobj]-->
<!-- -->
<!-- Revision 1.1.2.4  1994/06/12  16:56:13  neilson-->
<!-- 	Remove "figure" hack so book-format will work ok.-->
<!-- 	[1994/06/12  16:55:30  neilson]-->
<!-- -->
<!-- Revision 1.1.2.3  1994/06/12  14:10:22  neilson-->
<!-- 	{10014} Replace acl_edit material with dcecp.-->
<!-- 	[1994/06/12  14:10:00  neilson]-->
<!-- -->
<!-- Revision 1.1.2.2  1994/05/18  15:52:15  wardr-->
<!-- 	{edit R1.1}SGML fixes-->
<!-- 	[1994/05/18  15:51:56  wardr]-->
<!-- -->
<!-- Revision 1.1.2.1  1994/03/22  21:11:16  zahn-->
<!-- 	{enh,5923,R1.1}-->
<!-- -->
<!-- 	Moved /users_gdref/security/5_auth.gpsml to-->
<!-- 	/admin_gd/security/security/1.5_acls.gpsml-->
<!-- 	as part of User's Guide and Ref deletion.-->
<!-- 	[1994/03/22  21:10:53  zahn]-->
<!-- -->
<!---->
<!-- ********************************************************************-->
<!--                                                                    *-->
<!-- HP/DIGITAL CONFIDENTIAL-->
<!-- Copyright (c) 1991 Hewlett-Packard Co. and Digital Equipment Corp.  -->
<!-- All rights reserved.-->
<!--                                                                    *-->
<!-- ********************************************************************-->
<!-- -->
<Chapter Id="AGCC.SECACL.div.1">
<Title>Using Access Control Lists</Title>
<Para>You can control access to DCE objects by using the ACL authorization mechanism.
<IndexTerm Id="AGCC.SECACL.indx.1">
<Primary>objects</Primary>
<Secondary>controlling access to</Secondary>
</IndexTerm>
<IndexTerm Id="AGCC.SECACL.indx.2">
<Primary> files</Primary>
<Secondary>controlling access to</Secondary>
</IndexTerm>
<IndexTerm Id="AGCC.SECACL.indx.3">
<Primary>directories</Primary>
<Secondary>controlling access to</Secondary>
</IndexTerm>ACLs are associated with files, directories, CDS
entries, and registry objects.  They can be implemented also by arbitrary
applications to control access to their internal data objects.  Each
ACL consists of multiple ACL entries that define who is authorized
to do what to the object, specifically
</Para>
<ItemizedList>
<ListItem>
<Para>Who can access the object
</Para>
</ListItem>
<ListItem>
<Para>What kinds of access those principals or groups have to the
object
</Para>
</ListItem>
<ListItem>
<Para>What kind of access is allowed to unauthenticated users
</Para>
</ListItem>
</ItemizedList>
<Para><!--no-op:  /" Sections will need to be renumbered again to-->
<!--no-op:  /" for dcecp and any other chapters before this-->
This chapter
</Para>
<ItemizedList>
<ListItem>
<Para>Provides an overview of ACLs.
</Para>
</ListItem>
<ListItem>
<Para>Describes the form and purpose of ACL entries and masks, 
including the sequence in which entries are checked to derive permissions.
</Para>
</ListItem>
<ListItem>
<Para>Describes how to use the DCE control program (<Command>dcecp</Command>) to display, create, modify, 
and delete ACL entries; to use masks; to copy ACLs; and to edit different 
types of ACLs.
</Para>
</ListItem>
</ItemizedList>
<Para>For detailed
information on how a specific DCE component implements the ACL authorization
mechanism, see the appropriate part of this guide.
<!-- \*(Ag.-->
</Para>
<Note>
<Para>In the discussions of DCE authorization in this chapter 
and the chapters that follow, 
the term <Replaceable>user</Replaceable> is analogous to principal.  A principal
can be a human user, server, or a machine.
</Para>
</Note>
<Sect1 Id="AGCC.SECACL.div.2">
<Title>Authorization Overview</Title>
<Para>An
<IndexTerm Id="AGCC.SECACL.indx.4">
<Primary>ACLs</Primary>
<Secondary>function</Secondary>
</IndexTerm>ACL contains a list of entries that specify
the principals who can access an object and the operations that those principals
can perform.  The principals can be named explicitly or be members
of a group that is identified in the ACL entry.  The ACL is associated
with the object it protects.  The operations a principal can perform
are specified by permissions.
<IndexTerm Id="AGCC.SECACL.indx.5">
<Primary>permissions</Primary>
<Secondary>use of</Secondary>
</IndexTerm>
<IndexTerm Id="AGCC.SECACL.indx.6">
<Primary>ACLs</Primary>
<Secondary>scope</Secondary>
</IndexTerm></Para>
<Para>DCE permissions can be set for the following:
</Para>
<ItemizedList>
<ListItem>
<Para>Owner, group, and other
</Para>
</ListItem>
<ListItem>
<Para>Specific individual principals in the local cell and
in foreign cells
</Para>
</ListItem>
<ListItem>
<Para>Specific individual groups in the local cell and in
foreign cells
</Para>
</ListItem>
<ListItem>
<Para>Any other principals in a specific foreign cell for
whom individual permissions have not been set
</Para>
</ListItem>
<ListItem>
<Para>Any principals in any cell who have been authenticated
by the DCE Authentication Service
</Para>
</ListItem>
<ListItem>
<Para>Delegate users, servers, or groups, in local or foreign cells
</Para>
</ListItem>
<ListItem>
<Para>Unauthorized users
</Para>
</ListItem>
</ItemizedList>
<Para>ACLs also provide a masking capability and a method for integrating
protections from DCE versions that are different from the current version.
</Para>
<Para>File systems are frequently designed to provide access permissions for
file system objects, such as files and directories.  ACLs in DCE are
more extensive.  In DCE, many objects can have ACLs and be assigned
permissions.  DCE ACLs control access to objects managed by DCE
components, like the Distributed File Service, the DCE Security Service,
and the DCE Directory Service.
</Para>
<Para><?sml-need 5>ACLs for the security service (the
component that controls accounts) can, for example, authorize certain
principals to change all of the information associated with an
account, authorize other principals to change only a subset of the
information associated with accounts, and restrict other principals
from changing any of the information associated with accounts.
</Para>
<Para><IndexTerm Id="AGCC.SECACL.indx.7">
<Primary>permissions</Primary>
<Secondary>scope of UNIX permission bits</Secondary>
</IndexTerm>
<IndexTerm Id="AGCC.SECACL.indx.8">
<Primary>ACLs</Primary>
<Secondary>scope compared to UNIX permission bits</Secondary>
</IndexTerm>
<IndexTerm Id="AGCC.SECACL.indx.9">
<Primary>POSIX</Primary>
<Secondary>scope of permissions and DCE ACLs</Secondary>
</IndexTerm>DCE can support particular sets of permissions that correspond to
particular types of objects.  For example, for containers there can be
an insert permission that other objects, such as principals, do
not need.  This extensive usage of ACLs is in contrast to that of
POSIX systems, for example, where only file system objects are
protected by permission bits, with a standard set of permissions
(read, write, and execute) being used.  The DCE control program has a
command, <Command>acl permissions</Command>, that shows the permissions specific to
the ACL associated with the named object.
<IndexTerm Id="AGCC.SECACL.indx.10" SpanEnd="AGCC.SECACL.indx.6"></Para>
<Sect2 Id="AGCC.SECACL.div.3">
<Title>ACL Managers</Title>
<Para RevisionFlag="Changed"><IndexTerm Id="AGCC.SECACL.indx.11">
<Primary>ACL manager</Primary>
<Secondary>role in granting access</Secondary>
</IndexTerm>
<IndexTerm Id="AGCC.SECACL.indx.12">
<Primary>ACL manager</Primary>
<Secondary>scope of support</Secondary>
</IndexTerm>An ACL manager is that portion of a server that handles ACLs.  One
ACL manager can support several different types of ACLs.  From a more
abstract point of view, each ACL type is supported by a corresponding
ACL manager type.  Informally, ACL manager types are sometimes called
ACL managers.  Figure 28-1 shows ACL managers in servers.
<?og-ChangeStart def, 13575,R1.2.2,Remove info on non-dcecp control programs"></Para>
<Para RevisionFlag="Changed">The client side allows you to connect to any server exporting the ACL
interface so that one program can manipulate all ACLs.  The DCE control
program uses this feature.
<?og-ChangeEnd def, 13575,R1.2.2,Remove info on non-dcecp control programs"></Para>
<?sml-need 4i>
<Figure>
<Title>ACL Managers in Servers</Title>
<Graphic Entityref="AGCC.SECACL.ent.1" Scalefit="1" Reprowid="250" Reprodep="250"></Graphic>
</Figure>
<?sml-space .5>
<!-- .pI figures/1.5_acls_05.ps 0 0 1-->
<!-- -->
<!-- An ACL manager is a server module that implements a set of ACL manager types.-->
<!-- Each ACL manager type can support a different permission-->
<!-- set.  The ACL manager creates, stores,-->
<!-- retrieves, modifies, and deletes ACLs and ensures that those ACLs use-->
<!-- legal semantics (as defined by the ACL's manager type).  -->
<!-- This document uses the term ACL manager to refer to both -->
<!-- ACL managers and ACL manager types. -->
<Para>In addition to the standard DCE components, ACLs can control 
access to any object
for which an ACL manager 
has been implemented.  ACLs can be associated
with user-written applications to protect access to the use of
the application itself, the files in the application, and even fields
in those files. 
</Para>
<Para>All of the elements of ACLs described in this chapter are available
to ACL managers; however, each manager may implement all or only a
subset of the elements.  For information on how ACLs are used by specific
DCE components, consult the appropriate section in this guide.
</Para>
</Sect2>
<Sect2 Id="AGCC.SECACL.div.4">
<Title>ACL Interpretation</Title>
<Para>Part of the information associated with an account is a principal and
a set of groups. (The groups are called a <Replaceable>project list</Replaceable> in this
context, in honor of its Multics origin.)  Together, the principal and
project list are called the <Replaceable>privilege attributes</Replaceable> (or client-side
<IndexTerm Id="AGCC.SECACL.indx.13">
<Primary>credentials</Primary>
</IndexTerm>access control information) associated with the account.
</Para>
<Para><?sml-need 9>The principal and each of the groups is represented by both a string name
and a UUID.
The privilege attribute UUIDs are contained in the credentials that are
used in authenticated remote procedure calls (RPCs).  Servers grant
access based upon the contents of credentials received in RPCs.
Although servers typically reject unauthenticated RPCs,
any server can support a policy of accepting them.  In that case, the
server's ACL manager must support the <Literal>unauthenticated</Literal> mask ACL
entry type so that the server can further restrict the access granted
to such unauthenticated clients.
<!-- Part of the information associated with an account is the principal-->
<!-- name and the group (or groups) associated with the principal name-->
<!-- in the account.  The UUIDs that represent-->
<!-- the principal's name and group names are known as the principal's -->
<!-- privilege attributes.-->
<!-- If the principal's privilege attributes-->
<!-- have been supplied by the Authentication Service, they are said to-->
<!-- be ``certified privilege attributes.''-->
<!-- Principals without certified privilege attributes-->
<!-- are allowed only unauthenticated access to objects.  Unauthenticated -->
<!-- access, if it is allowed at all,  -->
<!-- is generally more restrictive than authenticated access.-->
</Para>
<Para>When
a principal requests
access to a DCE object associated with an ACL, the object's ACL manager
compares the UUIDs of the principal and any groups 
of which the principal is a member (the principal's privilege attributes) 
with the UUIDs of the principals and groups listed in the ACL entry.  
It does this simply by reading through the list
of ACL entries.  The manager grants the access permissions in the
first ACL entry (or entries in the case of groups) it finds 
that match any of the principal's privilege attributes.
If the permissions in the matching entry allow the requested mode of access,
the principal gains access; if not, access is denied.
</Para>
</Sect2>
<Sect2 Id="AGCC.SECACL.div.5">
<Title>Credentials Inherited by Processes</Title>
<Para>Processes created or spawned by a principal inherit the principal's
credentials.  For example, if you log in, are authenticated, and start an
application, the application you start inherits your authenticated
credentials and runs as though it were you.  The application's permissions for 
any given object are the same as your permissions.  Processes spawned by the
application carry your identity and pass it down to processes they start. 
</Para>
<Note>
<IndexTerm Id="AGCC.SECACL.indx.14">
<Primary>permissions</Primary>
<Secondary><Command>setuid</Command> bit</Secondary>
</IndexTerm>
<IndexTerm Id="AGCC.SECACL.indx.15">
<Primary>permissions</Primary>
<Secondary>inheriting</Secondary>
</IndexTerm>
<Para>Changing the <Command>setuid</Command> 
permission bit changes only the local operating system identity under which an 
executable file runs, not the network identity.
</Para>
</Note>
<Para>Some servers are written to run as separate authenticated principals.  For
these servers, the system administrator creates an account in the registry
database.  After you start these servers, the server process 
authenticates with the registry, receives its credentials, and runs under
its own identity, not yours. 
</Para>
</Sect2>
</Sect1>
<Sect1 Id="AGCC.SECACL.div.6">
<Title>ACL Entries and Masks</Title>
<Para>ACL entries are of several different <Replaceable>ACL entry types</Replaceable>, each type
being for a particular purpose.  All ACL entries are represented in a
uniform list syntax.
</Para>
<Sect2 Id="AGCC.SECACL.div.7">
<Title>ACL Syntax</Title>
<Para>The DCE control program uses the command syntax that is supported by the
Tcl language.  Within
Tcl, the list that represents an ACL entry contains either two or
three elements, depending on the ACL entry type, and is in the following form:
<IndexTerm Id="AGCC.SECACL.indx.16">
<Primary>ACLs</Primary>
<Secondary>components and scope of entries</Secondary>
</IndexTerm>
<IndexTerm Id="AGCC.SECACL.indx.17">
<Primary>ACLs</Primary>
<Secondary>keys</Secondary>
</IndexTerm></Para>
<Para><Literal>{</Literal><Symbol Role="Variable">type</Symbol>&ensp;[<Symbol Role="Variable">key</Symbol>]&ensp;<Symbol Role="Variable">permissions</Symbol><Literal>}</Literal>
</Para>
<Para>The three sample ACL entries in Figure 28-2 are in the format that Tcl
accepts for input.
</Para>
<Figure>
<Title>Sample ACL Entries</Title>
<Graphic Entityref="AGCC.SECACL.ent.2" Scalefit="1" Reprodep="300" Reprowid="300"></Graphic>
</Figure>
<?sml-space .5>
<!-- .pI figures/1.5_acls_10.ps 0 0 1-->
<Para>The first sample ACL entry sets permissions for a principal in
the local cell, named <Literal>bach</Literal>.  The ACL entry type is <Literal>user</Literal>,
the key is <Literal>bach,</Literal> and the permissions are <Literal>rwxid</Literal>. 
The entry components are separated by the space character.
</Para>
<Para>The second sample ACL entry sets permissions for a group in
the local cell, named <Literal>composers</Literal>.  The ACL entry type is <Command>group</Command>,
the key is <Literal>composers,</Literal> and the permissions are <Literal>rwxid</Literal>. 
</Para>
<Para>The third sample ACL entry sets permissions for all other
principals in
the local cell or foreign cells (unless they match a more specific
entry).  The ACL entry type is <Literal>any-other</Literal>,
there is no key, and the permissions are <Literal>r-xid</Literal>.
Not all types of ACL entries require a key.
</Para>
<Para>On output, the Tcl format for ACL permissions contains either a
permission character or a - (dash) for each possible permission.  Two
examples are
</Para>
<InformalExample>
<Para><ProgramListing>{user mozart crwx---}
{user brahms -------}
</ProgramListing></Para>
</InformalExample>
<Para>For input, the output format is acceptable, or you can use a relaxed form that
omits the dashes.  For input, the same examples can be
shortened to
</Para>
<InformalExample>
<Para><ProgramListing>{user mozart crwx}
{user brahms -}
</ProgramListing></Para>
</InformalExample>
<Para>The single dash is retained to show that user <Literal>brahms</Literal> is denied all
permissions.
</Para>
</Sect2>
<Sect2 Id="AGCC.SECACL.div.8">
<Title>ACL Entry Types for Principals and Groups</Title>
<Para>ACL entry types let you define entries for the following:
</Para>
<ItemizedList>
<ListItem>
<Para>Principals and groups 
</Para>
<ItemizedList>
<ListItem>
<Para>Principals and groups in the local cell
</Para>
</ListItem>
<ListItem>
<Para>Principals and groups in foreign cells
</Para>
</ListItem>
<ListItem>
<Para>Delegate entries
</Para>
</ListItem>
<ListItem>
<Para>All principals in the local cell for whom individual ACL
entries have not been created.  
</Para>
</ListItem>
<ListItem>
<Para>All principals in the local and all foreign cells 
whose privilege attributes do not match any of the 
other ACL entries
</Para>
</ListItem>
</ItemizedList>
</ListItem>
<ListItem>
<Para>Masks used for authenticated and unauthenticated users
</Para>
</ListItem>
<ListItem>
<Para>As-yet-undefined entry types that can be copied
and displayed (if not interpreted) by dissimilar DCE releases
</Para>
</ListItem>
</ItemizedList>
<Para><IndexTerm Id="AGCC.SECACL.indx.18">
<Primary>ACL entry types</Primary>
</IndexTerm>
<IndexTerm Id="AGCC.SECACL.indx.19">
<Primary>permissions</Primary>
<Secondary>ACL entry syntax</Secondary>
</IndexTerm>
<IndexTerm Id="AGCC.SECACL.indx.20">
<Primary>permissions</Primary>
<Secondary>principals and groups</Secondary>
</IndexTerm>If any principal
or group is not authenticated, the permissions in the entry are further
constrained by the <Literal>unauthenticated</Literal>
mask (described later in this chapter). 
All entries for authenticated principals, except 
<Literal>user_obj</Literal> and <Literal>other_obj</Literal> entries, are further constrained by 
the <Literal>mask_obj</Literal> mask (also described later in this chapter).
</Para>
<Para><IndexTerm Id="AGCC.SECACL.indx.21">
<Primary>principals</Primary>
<Secondary>ACL entry types</Secondary>
</IndexTerm>
<IndexTerm Id="AGCC.SECACL.indx.22">
<Primary>groups</Primary>
<Secondary>ACL entry types</Secondary>
</IndexTerm>The following list shows the entry types for principals and groups, their 
meaning, and their entry format.  All ACLs have a default cell defined
in them, as referred to in the table.  It is changeable, and serves to
define the cell for various data types.
</Para>
<Para>This list uses the following syntax variables:
</Para>
<VariableList>
<VarListEntry role="linebreak">
<Term><Symbol Role="Variable">principal_name</Symbol></Term>
<ListItem>
<Para>The name of a principal in the registry database
</Para>
</ListItem>
</VarListEntry>
<VarListEntry>
<Term><Symbol Role="Variable">group_name</Symbol></Term>
<ListItem>
<Para>The name of a group defined in the registry database
</Para>
</ListItem>
</VarListEntry>
<VarListEntry>
<Term><Symbol Role="Variable">cell</Symbol></Term>
<ListItem>
<Para>The global pathname of a cell in the format <Symbol Role="Variable">/.../name</Symbol>.
</Para>
</ListItem>
</VarListEntry>
<VarListEntry>
<Term><Symbol Role="Variable">permissions</Symbol></Term>
<ListItem>
<Para>The permissions made available by the object's ACL manager.
</Para>
</ListItem>
</VarListEntry>
</VariableList>
<Para>The principal and group ACL entry types are as follows:
</Para>
<VariableList>
<VarListEntry>
<Term><Literal>user_obj</Literal></Term>
<ListItem>
<Para>Establishes permissions for the object's
real or effective user.  An example is the owner of a file.
<IndexTerm Id="AGCC.SECACL.indx.23">
<Primary><Literal>user_obj</Literal> entry type</Primary>
</IndexTerm>The entry format is
</Para>
<InformalExample>
<Para><ProgramListing><UserInput><Literal>{user_obj </Literal><Symbol Role="Variable">permissions</Symbol><Literal>}</Literal>
</UserInput></ProgramListing></Para>
</InformalExample>
</ListItem>
</VarListEntry>
<VarListEntry>
<Term><Literal>group_obj</Literal></Term>
<ListItem>
<Para>Establishes permissions for members 
of the object's real or effective group.   An example is the group of a file.
<IndexTerm Id="AGCC.SECACL.indx.24">
<Primary><Literal>group_obj</Literal> entry type</Primary>
</IndexTerm>The entry format is
</Para>
<InformalExample>
<Para><ProgramListing><UserInput><Literal>{group_obj </Literal><Symbol Role="Variable">permissions</Symbol><Literal>}</Literal>
</UserInput></ProgramListing></Para>
</InformalExample>
</ListItem>
</VarListEntry>
<VarListEntry>
<Term><Literal>other_obj</Literal></Term>
<ListItem>
<Para>Establishes 
permissions for all other principals in the default cell, unless they 
are specifically named in ACLs of entry 
type <Literal>user</Literal>, are members of a group named in an ACL with an entry type of 
<Command>group</Command>, or match the principal indicated by the 
<Literal>user_obj</Literal> or <Literal>group_obj</Literal> entry. 
<IndexTerm Id="AGCC.SECACL.indx.25">
<Primary><Literal>other_obj</Literal> entry type</Primary>
</IndexTerm>The entry format is
</Para>
<InformalExample>
<Para><ProgramListing><UserInput><Literal>{other_obj </Literal><Symbol Role="Variable">permissions</Symbol><Literal>}</Literal>
</UserInput></ProgramListing></Para>
</InformalExample>
</ListItem>
</VarListEntry>
<VarListEntry>
<Term><Literal>user</Literal></Term>
<ListItem>
<Para>Establishes permissions 
for a specific principal in the default cell of the ACL.  This ACL
entry type requires a key that is a principal name.
The entry format is
</Para>
<InformalExample>
<Para><ProgramListing><UserInput><Literal>{user </Literal><Symbol Role="Variable">principal_name</Symbol><Literal> </Literal><Symbol Role="Variable">permissions</Symbol><Literal>}</Literal>
<IndexTerm Id="AGCC.SECACL.indx.26">
<Primary><Literal>user</Literal> entry type</Primary>
</IndexTerm></UserInput></ProgramListing></Para>
</InformalExample>
</ListItem>
</VarListEntry>
<VarListEntry>
<Term><Command>group</Command></Term>
<ListItem>
<Para>Establishes permissions for members of
a specific group in the default cell.  This ACL
entry type requires a key that is a group name.
The entry format is
</Para>
<InformalExample>
<Para><ProgramListing><UserInput><Literal>{group </Literal><Symbol Role="Variable">group_name</Symbol><Literal> </Literal><Symbol Role="Variable">permissions</Symbol><Literal>}</Literal>
<IndexTerm Id="AGCC.SECACL.indx.27">
<Primary><Command>group</Command> entry type</Primary>
</IndexTerm></UserInput></ProgramListing></Para>
</InformalExample>
</ListItem>
</VarListEntry>
<VarListEntry>
<Term><Literal>foreign_user</Literal></Term>
<ListItem>
<Para>Establishes permissions for a specific principal in a foreign cell, 
one other than the default cell of the ACL.  You must 
identify the principal by supplying a principal name and 
cell name as a key.  The entry format is
</Para>
<InformalExample>
<Para><ProgramListing><UserInput><Literal>{foreign_user </Literal><Symbol Role="Variable">cell_name</Symbol><Filename>/</Filename><Symbol Role="Variable">principal_name</Symbol><Literal> \
    </Literal><Symbol Role="Variable">permissions</Symbol><Literal>}</Literal>
<IndexTerm Id="AGCC.SECACL.indx.28">
<Primary><Literal>foreign_user</Literal> entry type</Primary>
</IndexTerm></UserInput></ProgramListing></Para>
</InformalExample>
</ListItem>
</VarListEntry>
<VarListEntry role="linebreak">
<Term><Literal>foreign_group</Literal></Term>
<ListItem>
<Para>Establishes permissions for a specific 
group in a foreign cell, one other than the default cell of the ACL.  You must 
identify the group by supplying a 
group name and a cell name as a key. 
The entry format is
</Para>
<InformalExample>
<Para><ProgramListing><UserInput><Literal>{foreign_group </Literal><Symbol Role="Variable">cell_name</Symbol><Filename>/</Filename><Symbol Role="Variable">group_name</Symbol><Literal> </Literal><Symbol Role="Variable">permissions</Symbol><Literal>}</Literal>
<IndexTerm Id="AGCC.SECACL.indx.29">
<Primary><Literal>foreign_group</Literal> entry type</Primary>
</IndexTerm></UserInput></ProgramListing></Para>
</InformalExample>
</ListItem>
</VarListEntry>
<VarListEntry role="linebreak">
<Term><Literal>foreign_other</Literal></Term>
<ListItem>
<Para>Establishes permissions for other principals in a 
specific foreign cell, one other than the default cell of the ACL, that are not  
specifically named in ACL entries of entry 
type <Literal>foreign_user</Literal> or are members of a 
group named in an ACL entry of type  
<Literal>foreign_group</Literal>.  You must identify the 
foreign cell by supplying a cell name as 
a key.   
The entry format is
</Para>
<InformalExample>
<Para><ProgramListing><UserInput><Literal>{foreign_other </Literal><Symbol Role="Variable">cell_name</Symbol><Literal> </Literal><Symbol Role="Variable">permissions</Symbol><Literal>}</Literal>
<IndexTerm Id="AGCC.SECACL.indx.30">
<Primary><Literal>foreign_other</Literal> entry type</Primary>
</IndexTerm></UserInput></ProgramListing></Para>
</InformalExample>
</ListItem>
</VarListEntry>
<VarListEntry>
<Term><Literal>any_other</Literal></Term>
<ListItem>
<Para>Establishes permissions for all 
other principals in local or foreign cells unless they 
match a more specific entry in the ACL. 
The entry format is
</Para>
<InformalExample>
<Para><ProgramListing><UserInput><Literal>{any_other </Literal><Symbol Role="Variable">permissions</Symbol><Literal>}</Literal>
<IndexTerm Id="AGCC.SECACL.indx.31">
<Primary><Literal>any_other</Literal> entry type</Primary>
</IndexTerm></UserInput></ProgramListing></Para>
</InformalExample>
</ListItem>
</VarListEntry>
<VarListEntry role="linebreak">
<Term><Literal>user_obj_delegate</Literal></Term>
<ListItem>
<Para>Establishes permissions for an intermediary acting for the object's
real or effective user.  
<IndexTerm Id="AGCC.SECACL.indx.32">
<Primary><Literal>user_obj</Literal> entry type</Primary>
</IndexTerm>The entry format is
</Para>
<InformalExample>
<Para><ProgramListing><UserInput><Literal>{user_obj_delegate </Literal><Symbol Role="Variable">permissions</Symbol><Literal>}</Literal>
</UserInput></ProgramListing></Para>
</InformalExample>
</ListItem>
</VarListEntry>
<VarListEntry role="linebreak">
<Term><Literal>group_obj_delegate</Literal></Term>
<ListItem>
<Para>Establishes permissions for an intermediary acting for members 
of the object's real or effective group. 
<IndexTerm Id="AGCC.SECACL.indx.33">
<Primary><Literal>group_obj</Literal> entry type</Primary>
</IndexTerm>The entry format is
</Para>
<InformalExample>
<Para><ProgramListing><UserInput><Literal>{group_obj_delegate </Literal><Symbol Role="Variable">permissions</Symbol><Literal>}</Literal>
</UserInput></ProgramListing></Para>
</InformalExample>
</ListItem>
</VarListEntry>
<VarListEntry role="linebreak">
<Term><Literal>other_obj_delegate</Literal></Term>
<ListItem>
<Para>Establishes 
permissions for an intermediary acting for all other principals in the default
cell, unless they are specifically named in ACLs of entry 
type <Literal>user</Literal>, are members of a group named in an ACL with an entry type of 
<Command>group</Command>, or match the principal indicated by the 
<Literal>user_obj</Literal> or <Literal>group_obj</Literal> entry. 
<IndexTerm Id="AGCC.SECACL.indx.34">
<Primary><Literal>other_obj</Literal> entry type</Primary>
</IndexTerm>The entry format is
</Para>
<InformalExample>
<Para><ProgramListing><UserInput><Literal>{other_obj_delegate </Literal><Symbol Role="Variable">permissions</Symbol><Literal>}</Literal>
</UserInput></ProgramListing></Para>
</InformalExample>
</ListItem>
</VarListEntry>
<VarListEntry role="linebreak">
<Term><Literal>user_delegate</Literal></Term>
<ListItem>
<Para>Establishes permissions 
for an intermediary acting for a specific principal in the default
cell of the ACL.  This ACL entry type requires a key that is a principal name.
The entry format is
</Para>
<InformalExample>
<Para><ProgramListing><UserInput><Literal>{user_delegate </Literal><Symbol Role="Variable">principal_name</Symbol><Literal> </Literal><Symbol Role="Variable">permissions</Symbol><Literal>}</Literal>
<IndexTerm Id="AGCC.SECACL.indx.35">
<Primary><Literal>user</Literal> entry type</Primary>
</IndexTerm></UserInput></ProgramListing></Para>
</InformalExample>
</ListItem>
</VarListEntry>
<VarListEntry role="linebreak">
<Term><Literal>group_delegate</Literal></Term>
<ListItem>
<Para>Establishes permissions for an intermediary acting for members of
a specific group in the default cell.  This ACL
entry type requires a key that is a group name.
The entry format is
</Para>
<InformalExample>
<Para><ProgramListing><UserInput><Literal>{group_delegate </Literal><Symbol Role="Variable">group_name</Symbol><Literal> </Literal><Symbol Role="Variable">permissions</Symbol><Literal>}</Literal>
<IndexTerm Id="AGCC.SECACL.indx.36">
<Primary><Command>group</Command> entry type</Primary>
</IndexTerm></UserInput></ProgramListing></Para>
</InformalExample>
</ListItem>
</VarListEntry>
<VarListEntry role="linebreak">
<Term><Literal>foreign_user_delegate</Literal></Term>
<ListItem>
<Para>Establishes permissions for an intermediary acting for a specific 
principal in a foreign cell, one other than the default cell of the ACL.  You must 
identify the principal by supplying a principal name and 
cell name as a key.   
The entry format is
</Para>
<InformalExample>
<Para><ProgramListing><UserInput><Literal>{foreign_user_delegate </Literal><Symbol Role="Variable">cell_name</Symbol><Filename>/</Filename><Symbol Role="Variable">principal_name</Symbol><Literal> \
    </Literal><Symbol Role="Variable">permissions</Symbol><Literal>}</Literal>
<IndexTerm Id="AGCC.SECACL.indx.37">
<Primary><Literal>foreign_user</Literal> entry type</Primary>
</IndexTerm></UserInput></ProgramListing></Para>
</InformalExample>
</ListItem>
</VarListEntry>
<VarListEntry role="linebreak">
<Term><Literal>foreign_group_delegate</Literal></Term>
<ListItem>
<Para>Establishes permissions for an intermediary acting for a specific 
group in a foreign cell, one other than the default cell of the ACL.  You must 
identify the group by supplying a 
group name and a cell name as a key. 
The entry format is
</Para>
<InformalExample>
<Para><ProgramListing><UserInput><Literal>{foreign_group_delegate </Literal><Symbol Role="Variable">cell_name</Symbol><Filename>/</Filename><Symbol Role="Variable">group_name</Symbol><Literal> \
    </Literal><Symbol Role="Variable">permissions</Symbol><Literal>}</Literal>
<IndexTerm Id="AGCC.SECACL.indx.38">
<Primary><Literal>foreign_group</Literal> entry type</Primary>
</IndexTerm></UserInput></ProgramListing></Para>
</InformalExample>
</ListItem>
</VarListEntry>
<VarListEntry role="linebreak">
<Term><Literal>foreign_other_delegate</Literal></Term>
<ListItem>
<Para>Establishes permissions for an intermediary acting for other principals in a 
specific foreign cell, one other than the default cell of the ACL, that are not  
specifically named in ACL entries of entry 
type <Literal>foreign_user</Literal> or are members of a 
group named in an ACL entry of type  
<Literal>foreign_group</Literal>.  You must identify the 
foreign cell by supplying a cell name as 
a key.   
The entry format is
</Para>
<InformalExample>
<Para><ProgramListing><UserInput><Literal>{foreign_other_delegate </Literal><Symbol Role="Variable">cell_name</Symbol><Literal> </Literal><Symbol Role="Variable">permissions</Symbol><Literal>}</Literal>
<IndexTerm Id="AGCC.SECACL.indx.39">
<Primary><Literal>foreign_other</Literal> entry type</Primary>
</IndexTerm></UserInput></ProgramListing></Para>
</InformalExample>
</ListItem>
</VarListEntry>
<VarListEntry role="linebreak">
<Term><Literal>any_other_delegate</Literal></Term>
<ListItem>
<Para>Establishes permissions for an intermediary acting for all 
other principals in local or foreign cells unless they 
match a more specific entry in the ACL. 
The entry format is
</Para>
<InformalExample>
<Para><ProgramListing><UserInput><Literal>{any_other_delegate </Literal><Symbol Role="Variable">permissions</Symbol><Literal>}</Literal>
<IndexTerm Id="AGCC.SECACL.indx.40">
<Primary><Literal>any_other</Literal> entry type</Primary>
</IndexTerm></UserInput></ProgramListing></Para>
</InformalExample>
</ListItem>
</VarListEntry>
</VariableList>
</Sect2>
<Sect2 Id="AGCC.SECACL.div.9">
<Title>Group Permissions and Project Lists</Title>
<IndexTerm Id="AGCC.SECACL.indx.41">
<Primary>permissions</Primary>
<Secondary>accrual</Secondary>
</IndexTerm>
<IndexTerm Id="AGCC.SECACL.indx.42">
<Primary>project lists</Primary>
<Secondary>definition</Secondary>
</IndexTerm>
<Para><IndexTerm Id="AGCC.SECACL.indx.43">
<Primary>groups</Primary>
<Secondary>accrual of permissions</Secondary>
</IndexTerm>
<IndexTerm Id="AGCC.SECACL.indx.44">
<Primary>principals</Primary>
<Secondary>accrual of group permissions</Secondary>
</IndexTerm>Principals accrue group permissions from their project list, a list
of all the groups of which a principal or alias is a member.  When
a principal tries to access an object, the principal has the access
rights that accrue from the logical OR of permissions granted to 
every group with an entry in the ACL and in which the principal is a member.  
Note that the principal accrues rights only from the name or alias 
with which the principal logged in, not both names and aliases.  
(See Chapter 30
<!-- the chapter entitled "Creating and Maintaining Principals,-->
<!-- Groups, and Organizations"-->
<!-- \*(Ag-->
for more 
information on aliases and project lists.)  
</Para>
<Para>For example, suppose an ACL contains the following entries:
</Para>
<InformalExample>
<Para><ProgramListing>{user_obj crwxid-}
{group_obj crwx---}
{other_obj -r-----}
{group composers crwx---}
{user bach crwx---}
{user mozart crwx---}
{group performers --w-idt}
</ProgramListing></Para>
</InformalExample>
<Para><IndexTerm Id="AGCC.SECACL.indx.45">
<Primary>groups</Primary>
<Secondary>excluding from project lists</Secondary>
</IndexTerm>
<IndexTerm Id="AGCC.SECACL.indx.46">
<Primary>project lists</Primary>
<Secondary>excluding groups from</Secondary>
</IndexTerm>User <Literal>cole</Literal> is a member of the group <Literal>composers</Literal> and
the group <Literal>performers</Literal>.  Because <Literal>cole</Literal> accrues permissions
from both groups, his access permissions are <Literal>crwxidt</Literal>.
(The security service provides a method to prevent a group from being included
in a project list, thus preventing the group's permissions from
being accrued as part of the project list.
See Chapter 30
<!-- the chapter entitled "Creating and Maintaining Principals,-->
<!-- Groups, and Organizations" -->
<!-- \*(Ag-->
for more information.) 
</Para>
</Sect2>
<Sect2 Id="AGCC.SECACL.div.10">
<Title>Using Principal and Group ACL Entries</Title>
<Para>When a security mechanism applies ACLs, the ACL entries are chosen in
a particular order.  The most specific ones are chosen before the less
specific. 
</Para>
<Para>In using the ACL entry types for principals and groups, think of the 
<Literal>user_obj</Literal>, <Literal>group_obj</Literal>, and <Literal>other_obj</Literal> types 
as being similar to the POSIX file permissions of <Literal>user</Literal>, <Command>group</Command> and
<Literal>other</Literal>.  Use the <Literal>user</Literal> and <Command>group</Command> types to
specify permissions for a specific principal 
or group.  
</Para>
<Para><?sml-need 7>The <Literal>user_obj</Literal>, <Literal>group_obj</Literal>, <Literal>other_obj</Literal><Literal>, 
</Literal><Literal>user</Literal>, and <Command>group</Command> entry types apply to principals 
and groups in the default cell of the ACL.  
To set permissions for specific principals and groups in a foreign cell,
use the <Literal>foreign_user</Literal> and <Literal>foreign_group</Literal> entries.  
These entries set permissions in a foreign cell in the same way that 
<Literal>user</Literal> and <Command>group</Command> entries do in the 
default cell.  Use <Literal>foreign_other</Literal> to set permissions 
for others in the foreign cell, in the same way that <Literal>other_obj</Literal> 
does for others in the default cell.
</Para>
<Para>The <Literal>any_other</Literal> entry type sets permissions for all local and foreign 
principals to which the other entry types do not apply.  If 
any of the other types of entries are set for a local or 
foreign principal either explicitly or implicitly, the 
<Literal>any_other</Literal> entry will not be applied.
This is because once the manager finds a 
match between a principal and an entry, it stops examining the 
ACL list and applies the found entry (or in the case of groups, entries).  
All other ACL entry types, 
except for mask types (described below), are examined by the 
ACL manager to see if a match exists before the ACL manager 
examines the <Literal>any_other</Literal> entry type.  See
Section 28.2.7 for details of the order of ACL checking. 
<IndexTerm Id="AGCC.SECACL.indx.47" SpanEnd="AGCC.SECACL.indx.20"></Para>
</Sect2>
<Sect2 Id="AGCC.SECACL.div.11">
<Title>ACL Entry Types for Masks</Title>
<Para>Masks in ACL entries establish maximum permissions that can 
be granted to a principal.  
<IndexTerm Id="AGCC.SECACL.indx.48">
<Primary>masks</Primary>
<Secondary>types and use of</Secondary>
</IndexTerm>
<IndexTerm Id="AGCC.SECACL.indx.49">
<Primary>permissions</Primary>
<Secondary>restricting</Secondary>
</IndexTerm>There are two masks: the <Literal>mask_obj mask</Literal> and the <Literal>unauthenticated mask</Literal>.
Only permissions given in an ACL entry and the mask are granted. 
For example, if the ACL entry specifies <Literal>rwx</Literal> permissions and the mask
specifies only the <Literal>x</Literal> permission, the permissions are ANDed with
the mask, and only the <Literal>x</Literal> permission is granted. 
</Para>
<Para>The <Literal>mask_obj</Literal> mask,
if it exists, applies to all entry types except <Literal>user_obj</Literal>
and <Literal>other_obj</Literal>.  
The <Literal>unauthenticated</Literal> mask
is applied to all unauthenticated principals. 
As the ACL manager derives the permissions from the ACL entries, it filters 
each one through the <Literal>mask_obj</Literal> mask (if one exists), and 
finally through the<Literal> unauthenticated</Literal> mask.  
The manager grants only those permissions that are in the first matching entry, the 
<Literal>mask_obj</Literal> mask, and the <Literal>unauthenticated</Literal> mask.
</Para>
<Note>
<?sml-need 9>
<Para>If you do not create an <Literal>unauthenticated</Literal> mask, unauthenticated 
principals are denied all access to objects.
If a user is unauthenticated because that user has no DCE credentials, 
then the only entry that the user matches is the <Literal>any_other</Literal> entry type, 
which is then masked by the <Literal>unauthenticated</Literal> mask.  This means 
that, for such unauthenticated users to have any access to an 
object, the object's ACL must contain an <Literal>any_other</Literal> type 
entry and an <Literal>unauthenticated</Literal> mask entry.
</Para>
</Note>
<Para>An example of mask usage follows.  For a particular object, there are
a great number of ACL entries specifying <Literal>rw</Literal> access to that
object.  You need to restrict the access to read-only, temporarily,
but do not want to change all the ACL entries.  Simply creating a
<Literal>mask_obj</Literal> mask of <Literal>r</Literal>, and then removing it when you are
done, provides the temporary restriction.
</Para>
</Sect2>
<Sect2 Id="AGCC.SECACL.div.12">
<Title>ACL Entry Types for Dissimilar DCE Releases</Title>
<IndexTerm Id="AGCC.SECACL.indx.50">
<Primary>extended ACL entry type</Primary>
<Secondary>form and function</Secondary>
</IndexTerm>
<IndexTerm Id="AGCC.SECACL.indx.51">
<Primary>ACL entry types</Primary>
<Secondary>in future DCE releases</Secondary>
</IndexTerm>
<Para>The <Literal>extended</Literal> entry type provides a generic format for ACL
entries that allows future DCE releases to implement new ACL entry
types.  Because the new types are packaged in the generic format
of the <Literal>extended</Literal> entry, earlier DCE releases can copy, display,
and print the new entry types even if they cannot interpret their
meaning.
</Para>
<Para><IndexTerm Id="AGCC.SECACL.indx.52">
<Primary>ACL manager</Primary>
<Secondary>support for entry types</Secondary>
</IndexTerm></Para>
<Para>Section 28.4 tells how to copy extended entries.
Note that extended entries cannot be modified;
however, they can be deleted. 
</Para>
<Para>An <Literal>extended</Literal> ACL entry has the following form:
</Para>
<InformalExample>
<Para><ProgramListing><UserInput>{extended <Symbol Role="Variable">uuid.ndr.ndr.ndr.ndr.number_of_bytes</Symbol><Literal>.</Literal><Symbol Role="Variable">data permissions</Symbol><Literal>}
</Literal></UserInput></ProgramListing></Para>
</InformalExample>
<Para>where:
</Para>
<VariableList>
<VarListEntry>
<Term><Symbol Role="Variable">uuid</Symbol></Term>
<ListItem>
<Para>A UUID that identifies the entry type of the extended ACL entry.
(This UUID can identify one of the ACL entry types described in this
document or an as-yet-undefined ACL entry type.)
</Para>
</ListItem>
</VarListEntry>
<VarListEntry role="linebreak">
<Term><Symbol Role="Variable">ndr.ndr.ndr.ndr</Symbol></Term>
<ListItem>
<?sml-need 3>
<Para>A network data representation (NDR) format label (in hexadecimal format and separated by dots) 
that identifies the encoding of data. 
</Para>
</ListItem>
</VarListEntry>
<VarListEntry role="linebreak">
<Term><Symbol Role="Variable">number_of_bytes</Symbol></Term>
<ListItem>
<Para>A decimal number that specifies the total number of bytes in
<Symbol Role="Variable">data</Symbol>.  It is followed by a dot.
</Para>
</ListItem>
</VarListEntry>
<VarListEntry>
<Term><Symbol Role="Variable">data</Symbol></Term>
<ListItem>
<Para>The ACL data in hexadecimal format. 
(Each byte of ACL data is two hexadecimal digits.) 
The ACL data includes all of the ACL entry specification except the permissions.  
The ACL data is not interpreted; it is assumed that the ACL manager to which 
the data is being passed can understand that data. 
</Para>
</ListItem>
</VarListEntry>
<VarListEntry>
<Term><Symbol Role="Variable">permissions</Symbol></Term>
<ListItem>
<Para>The permissions to be granted by the entry.
<IndexTerm Id="AGCC.SECACL.indx.53" SpanEnd="AGCC.SECACL.indx.18"></Para>
</ListItem>
</VarListEntry>
</VariableList>
</Sect2>
<Sect2 Id="AGCC.SECACL.div.13">
<Title>The Checking Sequence for ACL Entries</Title>
<Para><IndexTerm Id="AGCC.SECACL.indx.54">
<Primary>ACL manager</Primary>
<Secondary>role in checking sequence</Secondary>
</IndexTerm>
<IndexTerm Id="AGCC.SECACL.indx.55">
<Primary>ACLs</Primary>
<Secondary>checking sequence</Secondary>
</IndexTerm>
<IndexTerm Id="AGCC.SECACL.indx.56">
<Primary>permissions</Primary>
<Secondary>checking sequence</Secondary>
</IndexTerm>An ACL manager reads through a list of ACL entries to find the
particular entry that applies to an individual who is trying to
perform a particular operation.  The ACL manager first
looks for a match between the privilege attributes of the principal
or process desiring access and the privilege attributes listed in
the ACL.  When the ACL manager finds a match, it examines the permissions
in the matching ACL entry and applies the <Literal>mask_obj</Literal> mask to it (unless
it is an entry of type <Literal>user_obj</Literal> or <Literal>other_obj</Literal>) if
a <Literal>mask_obj</Literal> mask exists.  Finally, the ACL manager applies the <Literal>unauthenticated</Literal>
mask (if it exists) if the principal is not authenticated.  If the permissions that
result grant the requested access, the manager grants it to the principal. 
If not, access is denied.
</Para>
<Para>Because an ACL manager stops checking the ACL entries when it finds
a match, it is important to understand the order in which the ACLs
are checked.  Figure 28-3 shows the order of checking and the masks
applied.  ACL managers check entries in the following order, with the
exception that the initiator principal is not checked against
<Literal>..._delegate</Literal> entries.  Delegate principals are checked against all
entries.
</Para>
<OrderedList>
<ListItem>
<?sml-need 14>
<Para>First, the ACL manager checks the user ACL entries, in the following order:
</Para>
<ItemizedList>
<ListItem>
<Para><Literal>user_obj</Literal>
</Para>
</ListItem>
<ListItem>
<Para><Literal>user_obj_delegate</Literal>
</Para>
</ListItem>
<ListItem>
<Para><Literal>user</Literal>
</Para>
</ListItem>
<ListItem>
<Para><Literal>user_delegate</Literal>
</Para>
</ListItem>
<ListItem>
<Para><Literal>foreign_user</Literal>
</Para>
</ListItem>
<ListItem>
<Para><Literal>foreign_user_delegate</Literal>
</Para>
</ListItem>
</ItemizedList>
<Para>The ACL manager stops all entry checking at the first matching
user entry it finds and applies the permissions in the entry.  The
user entries are checked in order as shown in the previous list from
most specific to least specific.
</Para>
</ListItem>
<ListItem>
<Para>If the ACL manager does not find
a match in the user entries, it checks <Replaceable>all</Replaceable> of the following
group entries:
</Para>
<ItemizedList>
<ListItem>
<Para><Literal>group_obj</Literal>
</Para>
</ListItem>
<ListItem>
<Para><Literal>group_obj_delegate</Literal>
</Para>
</ListItem>
<ListItem>
<Para><Command>group</Command>
</Para>
</ListItem>
<ListItem>
<Para><Literal>group_delegate</Literal>
</Para>
</ListItem>
<ListItem>
<Para><Literal>foreign_group</Literal>
</Para>
</ListItem>
<ListItem>
<Para><Literal>foreign_group_delegate</Literal>
</Para>
</ListItem>
</ItemizedList>
<Para><IndexTerm Id="AGCC.SECACL.indx.57">
<Primary>project lists</Primary>
<Secondary>in ACL checking sequence</Secondary>
</IndexTerm>If any group ACL entries match the principal's project list, and the logical
OR of permissions from these entries grants access, then access
is granted and no further checking is performed.
</Para>
<Para>Because principals
accrue permissions from all groups listed in the ACL of which they
are a member (and for which they are in the project list), <Replaceable>all</Replaceable>
the groups are checked and <Replaceable>all</Replaceable>
the principal's group permissions are logically ORed.  
The order of group entry
checking is not important.  See Section 28.2.3 for more information on
project lists.
</Para>
</ListItem>
<ListItem>
<?sml-need 1>
<Para>If the ACL manager does not
find a match between the principal requesting permission and a member
of a group in the group entries, it checks the <Literal>other_obj</Literal> and
<Literal>other_obj_delegate</Literal> entries.  If the ACL manager finds a match,
it stops checking ACL entries.
</Para>
</ListItem>
<ListItem>
<Para>If the ACL manager does not find
a match between the principal requesting permission and the
<Literal>other_obj</Literal> or <Literal>other_obj_delegate</Literal> entries,
it checks the <Literal>foreign_other</Literal> and <Literal>foreign_other_delegate</Literal>
entries.  If the ACL manager finds a match, it stops checking ACL entries.
</Para>
</ListItem>
<ListItem>
<Para>If the ACL manager does not find
a match between the principal requesting permission and the
<Literal>foreign_other</Literal> or <Literal>foreign_other_delegate</Literal>
entries, it checks the <Literal>any_other</Literal> and <Literal>any_other_delegate</Literal>
entries.  If it does not find a match in the <Literal>any_other</Literal> or
<Literal>any_other_delegate</Literal> entries, it denies all
access to the object.
</Para>
</ListItem>
</OrderedList>
<Para>The final permission is the intersection of the permission of the
initiator principal and of each delegate.
</Para>
<Para>Figure 28-3 shows these steps as they apply to the ACL entries.  The
two columns distinguish between ACL entries that are not masked by
<Literal>mask_obj</Literal> and those that are masked by it.
</Para>
<?sml-need 6.5i>
<Figure>
<Title>Order of Checking ACLs and Applying Masks</Title>
<Graphic Entityref="AGCC.SECACL.ent.3" Scalefit="1" Reprodep="350" Reprowid="350"></Graphic>
</Figure>
<!-- .pI figures/1.5_acls_15.ps 0 0 1-->
<Sect3 Id="AGCC.SECACL.div.14">
<Title>The <Literal>mask_obj</Literal> Mask and ACL Checking</Title>
<Para><IndexTerm Id="AGCC.SECACL.indx.58">
<Primary><Literal>mask_obj</Literal> entry type</Primary>
<Secondary>effect on ACL checking</Secondary>
</IndexTerm>
<IndexTerm Id="AGCC.SECACL.indx.59">
<Primary>permissions</Primary>
<Secondary>accrual, effect on ACL checking</Secondary>
</IndexTerm>Before the ACL manager grants any permissions 
derived from checking the ACL entries, it
filters the entry permissions through the <Literal>mask_obj</Literal> mask.  Only those
permissions named in the ACL entry and in the mask are granted.  For
example, if an ACL entry grants <Literal>rwx</Literal> permissions and the 
<Literal>mask_obj</Literal> entry
specifies only <Literal>r</Literal> and <Literal>w</Literal> permission, only <Literal>r</Literal> and <Literal>w</Literal>
are granted.  The <Literal>x</Literal> permission named in the ACL entry is ignored.
</Para>
</Sect3>
<Sect3 Id="AGCC.SECACL.div.15">
<Title>The Unauthenticated Mask and ACL Checking</Title>
<Para><IndexTerm Id="AGCC.SECACL.indx.60">
<Primary>unauthenticated mask</Primary>
<Secondary>effect on ACL checking</Secondary>
</IndexTerm>If an ACL manager receives an access request from an unauthenticated
principal, it checks the ACL entries and applies the <Literal>mask_obj</Literal> mask,
if available, as described previously.  It then filters 
the resulting permissions
through the mask for unauthenticated principals 
(entry type of <Literal>unauthenticated</Literal>).  
Only those permissions specified in the <Literal>unauthenticated</Literal>
mask, in the ACL entry, and in the <Literal>mask_obj</Literal> mask (if it exists)
are granted.
<IndexTerm Id="AGCC.SECACL.indx.61" SpanEnd="AGCC.SECACL.indx.55"></Para>
</Sect3>
<Sect3 Id="AGCC.SECACL.div.16">
<Title>The Effect of the Checking Order on Granting Permissions</Title>
<Para><IndexTerm Id="AGCC.SECACL.indx.62">
<Primary>permissions</Primary>
<Secondary>granting, effect on ACL checking sequence</Secondary>
</IndexTerm>You can think of the order in which the ACL entries are checked as
going from most specific to least specific.  For example, assume an
ACL contains the following entries:
</Para>
<InformalExample>
<Para><ProgramListing>{user mahler r}
{group composers rwx}
</ProgramListing></Para>
</InformalExample>
<Para>If the principal named <Literal>mahler</Literal>, who is a 
member of the group <Literal>composers</Literal>, 
requests execute (<Literal>x</Literal>) access, it is denied.  This
happens because the order of checking specifies that all user entries
(<Literal>user_obj</Literal>, <Literal>user</Literal>, and <Literal>foreign_user</Literal>) are
checked before all group (<Literal>group_obj</Literal>, <Command>group</Command>, and
<Literal>foreign_group</Literal>) entries.  Therefore, the first match
found by the ACL manager is the match between user <Literal>mahler</Literal>
and the ACL entry for user <Literal>mahler</Literal>.  Once a matching user
entry is found, checking stops and the found permissions are applied. 
In this case, checking stops before the <Command>group</Command> entry, the
entry with the more liberal permissions. 
<IndexTerm Id="AGCC.SECACL.indx.63" SpanEnd="AGCC.SECACL.indx.54"><IndexTerm Id="AGCC.SECACL.indx.64" SpanEnd="AGCC.SECACL.indx.56"></Para>
</Sect3>
</Sect2>
<Sect2 Id="AGCC.SECACL.div.17">
<Title>Denying Access</Title>
<Para><IndexTerm Id="AGCC.SECACL.indx.65">
<Primary>permissions</Primary>
<Secondary>denying</Secondary>
</IndexTerm>
<IndexTerm Id="AGCC.SECACL.indx.66">
<Primary>ACLs</Primary>
<Secondary>denying access</Secondary>
</IndexTerm>When you create an ACL entry for a principal or group, you grant only the permissions
you specify in the ACL entry.  To deny a principal all access to an
object, create an ACL entry that contains a dash in place of the
permissions.  For example, to deny all access to user <Literal>mozart</Literal>,
the entry would be
</Para>
<InformalExample>
<Para><ProgramListing>{user mozart -}
</ProgramListing></Para>
</InformalExample>
<Para>If you choose to deny access to a specific principal or group, 
select the most specific entry type available.  
Generally for principals this is an entry type of <Literal>user</Literal> or 
<Literal>foreign_user</Literal>; for groups, it is an entry type of 
<Command>group</Command> or <Literal>foreign_group</Literal>.  Note that, if the principal is the 
object's owner or a member of the object's group, you must 
use the <Literal>user_obj</Literal> or <Literal>group_obj</Literal> entry types to 
ensure that access is denied.
</Para>
<Para><IndexTerm Id="AGCC.SECACL.indx.67">
<Primary>unauthenticated mask</Primary>
<Secondary>inappropriate use of</Secondary>
</IndexTerm>To deny access to all unauthenticated users, do not create the <Literal>unauthenticated</Literal>
mask.  If this mask is not created (ACL entry type of 
<Literal>unauthenticated</Literal>), only authenticated 
principals can access the object.  The same
behavior is achieved by creating an <Literal>unauthenticated</Literal> mask with no
permissions (or a dash
in place of the permissions).  This method also has the additional
advantage of illustrating graphically that unauthenticated users have
no access rights.
<IndexTerm Id="AGCC.SECACL.indx.68">
<Primary>ACLs</Primary>
<Secondary>control programs for managing</Secondary>
</IndexTerm>
<IndexTerm Id="AGCC.SECACL.indx.69">
<Primary>control programs</Primary>
<See>DCE control program</See>
</IndexTerm>
<IndexTerm Id="AGCC.SECACL.indx.70">
<Primary>DCE control program</Primary>
<Secondary>commands for managing ACLs</Secondary>
</IndexTerm></Para>
</Sect2>
</Sect1>
<Sect1 Id="AGCC.SECACL.div.18">
<Title>ACL Management Tasks</Title>
<Para>ACL management involves creating, modifying, and deleting the entries for
the ACLs on DCE entities.  You can use the DCE control program to do
all of these tasks.   The control program's <Command>acl</Command> command perform
the following operations on ACLs:
</Para>
<ItemizedList>
<ListItem>
<Para>Create and modify ACL entries for DCE objects
in the local cell and foreign cells.  (Note that when objects are
created they are associated with initial ACL entries. 
See Section 28.5 for more information.)
</Para>
</ListItem>
<ListItem>
<?sml-need 5>
<Para>Display the permissions implemented for an object
by the object's ACL manager.
</Para>
</ListItem>
<ListItem>
<Para>Create and modify masks used to restrict allowable
permissions. 
</Para>
</ListItem>
</ItemizedList>
<Note>
<Para>Standard UNIX tools that display and manipulate UNIX modes have an 
effect only on the ACLs established for the file system.  
</Para>
</Note>
<Para>For a detailed description of the DCE control program's <Command>acl</Command> command,
see the <Literal>acl(8dce)</Literal> reference page.
</Para>
</Sect1>
<Sect1 Id="AGCC.SECACL.div.19">
<Title>Copying ACLs</Title>
<Para><IndexTerm Id="AGCC.SECACL.indx.71">
<Primary>ACLs</Primary>
<Secondary>copying to other objects</Secondary>
</IndexTerm>To copy an ACL from one DCE object to another, use the DCE control program
<Command>acl replace</Command> command with the <Option>acl</Option> option as shown here:
</Para>
<InformalExample>
<Para><ProgramListing>dcecp> <Literal>acl replace  /.:/hosts/hermes  -acl [acl show /.:/hosts/cyclops]</Literal>
dcecp>
</ProgramListing></Para>
</InformalExample>
<Para>The example command replaces the ACL for the host <Literal>hermes</Literal> with the ACL
for the host <Literal>cyclops</Literal> whose name is specified in the <Command>acl show</Command>
command invoked by the <Option>acl</Option> option.  Note how the <Literal>-acl show</Literal>
command in the <Option>acl</Option> option is enclosed in [&thinsp;] (brackets).  
This is required when the <Option>acl</Option> option value is a
command invocation.
</Para>
<Para>If you are copying between cells, use the <Command>acl replace</Command> command's
<Option>cell</Option> option, as well as its <Option>acl</Option> option.  For example:
</Para>
<InformalExample>
<Para><ProgramListing>dcecp> <Literal>acl replace /.:/hosts/hermes -acl [acl show /.:/hosts/cyclops] \</Literal> 
> <Literal>-cell [acl show /.:/hosts/cyclops -cell]</Literal>
dcecp>
</ProgramListing></Para>
</InformalExample>
<IndexTerm Id="AGCC.SECACL.indx.72" SpanEnd="AGCC.SECACL.indx.71">
<Para>To copy an <Literal>extended</Literal> entry type from the domain
of one ACL manager to the domain of another ACL manager, use the
output of the <Command>dcecp</Command> <Command>acl show</Command> command as the input to an <Literal>acl
replace</Literal> command. 
To copy <Literal>extended</Literal> entries this way, 
both ACL managers must support 
the <Literal>extended</Literal> entry type.  
</Para>
</Sect1>
<Sect1 Id="AGCC.SECACL.div.20">
<Title>Generating ACLs from Files</Title>
<Para>A convenient way to create an ACL is to create and edit a text file so
that it contains the desired ACL entries, and then generate the ACL
from it by using an <Command>acl replace</Command> command.  
</Para>
<Para>For example, assume the file <Literal>std_acl</Literal> contains the following entries:
</Para>
<InformalExample>
<Para><ProgramListing>mask_obj:crwxid-
user_obj:crwxid-
group_obj:crwx---
other_obj:-r-----
user:lizt:crwx---
group:composers:-r-----
user:bach:crwx---
user:mozart:crwx---
</ProgramListing></Para>
</InformalExample>
<Para>The following <Command>acl replace</Command> command adds
the entries in <Literal>std_acl</Literal> to an ACL named
<Filename>/.../dresden.com/my_filesystem/opus</Filename>: 
</Para>
<InformalExample>
<Para><ProgramListing>dcecp> <Literal>acl replace /.../dresden.com/my_filesystem/opus -acl [cat std_acl]
</Literal>
dcecp>
</ProgramListing></Para>
</InformalExample>
<Para>The <Command>acl replace</Command> command overwrites all ACL entries
with the ones from the file <Literal>std_acl</Literal>.  Regardless of what they
were before, the ACLs for <Literal>opus</Literal> now look like this:
</Para>
<InformalExample>
<Para><ProgramListing>mask_obj:crwxid-
user_obj:crwxid-
user:lizt:crwx---
user:bach:crwx---
user:mozart:crwx---
group_obj:crwx---
group:composers:-r-----
other_obj:-r-----
</ProgramListing></Para>
</InformalExample>
</Sect1>
<Sect1 Id="AGCC.SECACL.div.21">
<Title>Container ACLs</Title>
<Para><IndexTerm Id="AGCC.SECACL.indx.73">
<Primary>ACLs</Primary>
<Secondary>types of, editing</Secondary>
</IndexTerm>
<IndexTerm Id="AGCC.SECACL.indx.74">
<Primary>ACL entry types</Primary>
<Secondary>compared to ACL types</Secondary>
</IndexTerm>
<IndexTerm Id="AGCC.SECACL.indx.75">
<Primary>permissions</Primary>
<Secondary>setting default</Secondary>
</IndexTerm>
<IndexTerm Id="AGCC.SECACL.indx.76">
<Primary>Object ACL</Primary>
</IndexTerm>
<IndexTerm Id="AGCC.SECACL.indx.77">
<Primary>Initial Object ACL</Primary>
</IndexTerm>
<IndexTerm Id="AGCC.SECACL.indx.78">
<Primary>Initial Container ACL</Primary>
</IndexTerm>The object ACL controls access to the object itself.  A container
object has, in addition to its object ACL, an initial container ACL
and an initial object ACL.  These two ACLs are not used
for access control as such, but instead for cloning initial ACLs for
objects or containers created within the initial container.  The 
initial container ACLs and the initial object ACLs can be edited in
the same way as the usual ACL by using the <Option>ic</Option> and <Option>io</Option>
options to the <Command>dcecp acl</Command> command.
</Para>
<Sect2 Id="AGCC.SECACL.div.22">
<Title>Objects and Containers</Title>
<Para>The type of ACL used for an object depends on whether the object is
a simple object or a container.  Containers are objects that
hold other objects.  The objects they hold can themselves be either
simple objects or container objects.  Simple objects do not
hold other objects.  Although any DCE component can have objects and
containers, the simplest and most common illustration is the file
system.  In the file system, there are files and directories.  The
files are simple objects, and the 
directories are containers.  The directories
can hold simple objects (files) and other containers (subdirectories). 
</Para>
<Para>The object ACL is associated with simple and container objects. 
The initial container and initial object ACLs are associated only
with container objects. 
</Para>
</Sect2>
<Sect2 Id="AGCC.SECACL.div.23">
<Title>Initial ACLs for Objects and Containers</Title>
<Para><IndexTerm Id="AGCC.SECACL.indx.79">
<Primary>objects</Primary>
<Secondary>types of</Secondary>
</IndexTerm>
<IndexTerm Id="AGCC.SECACL.indx.80">
<Primary>containers</Primary>
<Secondary>definition of</Secondary>
</IndexTerm>Initial ACL entries and the ACL that contains them are applied automatically
when an object is created.  The entries can be modified at any time
with the DCE control program.  The types of DCE ACLs used as
Initial ACLs for containers and objects are as follows:
</Para>
<ItemizedList>
<ListItem>
<Para>The initial container ACL determines the
default ACL for containers created within a container.  For example,
the file system Initial Container ACL for a directory specifies the
default ACL for subdirectories created within that directory.
</Para>
</ListItem>
<ListItem>
<Para>The initial object ACL determines the default
for objects created within a container.  For example, the file system
initial object ACL for a directory specifies the default ACL for files
created within that directory.
</Para>
</ListItem>
</ItemizedList>
<Sect3 Id="AGCC.SECACL.div.24">
<Title>Default ACLs for Objects </Title>
<Para><IndexTerm Id="AGCC.SECACL.indx.81">
<Primary>ACLs</Primary>
<Secondary>default</Secondary>
</IndexTerm>When a simple object is created in a container, it inherits the container's
initial object ACL as its object ACL.  Figure 28-4 illustrates how the default
ACL is assigned to simple objects created in containers.
</Para>
<Figure>
<Title>Initial ACLs for Objects Created in Containers</Title>
<Graphic Entityref="AGCC.SECACL.ent.4" Scalefit="1" Reprodep="300" Reprowid="300"></Graphic>
</Figure>
<?sml-space .5>
<!-- .pI ./figures/1.5_acls_20.ps 0 0 1-->
</Sect3>
<Sect3 Id="AGCC.SECACL.div.25">
<Title>Default ACLs for Containers</Title>
<Para>When a container is created within a container (a subdirectory within
a directory, for example), it inherits the parent container's
</Para>
<ItemizedList>
<ListItem>
<Para>Initial container ACL as its object ACL and as its
Initial Container ACL
</Para>
</ListItem>
<ListItem>
<Para>Initial object ACL as its initial object ACL
</Para>
</ListItem>
</ItemizedList>
<Para>For example, if you create a file named <Literal>report</Literal> in the
directory <Literal>marketing</Literal>, the system assigns <Literal>report</Literal> the
initial object ACL of the directory <Literal>marketing</Literal>.  If you create
a subdirectory in <Literal>marketing</Literal>, the system assigns the
new subdirectory the Initial Container ACL of <Literal>marketing</Literal>. 
New subdirectories also receive a set of initial ACLs that match the
parent directory's initial ACLs.  In this example, the new subdirectory
also receives <Literal>marketing</Literal>'s initial ACLs as its own ACLs.  Figure 28-5 
illustrates how the default ACLs are assigned to objects created in
containers.
</Para>
<Figure>
<Title>Initial ACLs for Containers Created in Containers</Title>
<Graphic Entityref="AGCC.SECACL.ent.5" Scalefit="1" Reprodep="300" Reprowid="300"></Graphic>
</Figure>
<?sml-space .5>
<!-- .pI ./figures/1.5_acls_30.ps 0 0 1-->
</Sect3>
<Sect3 Id="AGCC.SECACL.div.26">
<Title>Default Container ACL Example</Title>
<Para>The following example shows how ACLs are initially assigned to
containers created within containers.
</Para>
<Para><?sml-need 20>Assume Container A has the following ACLs:
</Para>
<Para><Literal>Object ACL</Literal>
</Para>
<InformalExample>
<Para><ProgramListing>{user_obj crwxid}
{group_obj crwxid}
{other_obj r}
</ProgramListing></Para>
</InformalExample>
<Para><Literal>Initial container ACL</Literal>
</Para>
<InformalExample>
<Para><ProgramListing>{user_obj crwxid}
{group_obj rw}
{other_obj r}
</ProgramListing></Para>
</InformalExample>
<Para><Literal>Initial object ACL</Literal>
</Para>
<InformalExample>
<Para><ProgramListing>{user_obj crwxid}
{group_obj r}
{other_obj r}
</ProgramListing></Para>
</InformalExample>
<Para>When Container B is created in Container A, it has the following default ACLs:
</Para>
<Para><Literal>Object ACL (container A's Initial Container ACL)</Literal>
</Para>
<InformalExample>
<Para><ProgramListing>{user_obj crwxid}
{group_obj rw}
{other_obj r}
</ProgramListing></Para>
</InformalExample>
<Para><Literal>Initial container ACL (container A's initial container ACL)</Literal>
</Para>
<InformalExample>
<Para><ProgramListing>{user_obj crwxid}
{group_obj rw}
{other_obj r}
</ProgramListing></Para>
</InformalExample>
<Para><Literal>Initial object ACL (container A's initial object ACL)</Literal> 
</Para>
<InformalExample>
<Para><ProgramListing>{user_obj crwxid}
{group_obj r}
{other_obj r}
</ProgramListing></Para>
</InformalExample>
</Sect3>
</Sect2>
<Sect2 Id="AGCC.SECACL.div.27">
<Title>Effect of Masks When Editing ACLs</Title>
<Para>If the user specifies a new <Literal>mask_obj</Literal> ACL entry, then <Literal>acl
modify</Literal> uses it.  Otherwise, the <Command>acl modify</Command> command
recalculates the mask, using the algorithm shown in the following
paragraph, unless the user has specified one
of the <Option>mask calc</Option>, <Option>mask nocalc</Option>, or <Option>purge</Option> options.
Therefore the mask can change, granting more or fewer permissions, on
every <Command>acl modify</Command> command.
</Para>
<Para>Here is the algorithm that the <Command>acl modify</Command> command uses when
calculating the mask:
</Para>
<OrderedList>
<ListItem>
<Para>Retrieve the existing ACL of the file.
</Para>
</ListItem>
<ListItem>
<Para>Perform all requests to remove entries and to reduce the permissions
of existing entries.
</Para>
</ListItem>
<ListItem>
<Para>Calculate the union of the actual permissions of all remaining
entries.
</Para>
</ListItem>
<ListItem>
<Para>Determine which permissions differ between the actual and effective
rights.  (This is the logical XOR of the results of steps 3 and 4.)
</Para>
</ListItem>
<ListItem>
<Para>Perform all requests to add new entries to the ACL and all requests
to increase the permissions of existing entries.
</Para>
</ListItem>
<ListItem>
<Para>Calculate the union of these newly granted permissions and the old
effective permissions (from step 4).  This is the candidate new mask
value.
</Para>
</ListItem>
<ListItem>
<Para>If there are any permissions in the candidate new mask that are also
in the permissions that differ between the original actual and
effective rights (from step 5), applying the candidate new mask would
unexpectedly grant some new right that the user did not intend.
Unless the user specified one of the options <Option>mask calc</Option>,
<Option>mask nocalc</Option>, or <Option>purge</Option>, this condition is an error, and
the ACL is not modified.  Otherwise, the candidate new mask is applied
as the new mask.
</Para>
</ListItem>
</OrderedList>
<Para>For the vast majority of ACL 
operations, such automatic recalculation is safe.  In
certain rare cases, the recalculation of the mask can grant
additional rights that the user did not expect; for instance, a
permission granted to an entry that the user did not specify and
that was not among the entry's previous effective rights.  
</Para>
<Para>The following example shows the way mask recalculation works, as well as
the effect of the options.
</Para>
<Para>Observe that the ACL contains an entry granting <Literal>rwx</Literal> permission
to some user, but the mask allows an effective permission of
<Literal>r-x</Literal>.  Adding a new <Literal>rwx</Literal> ACL entry and recalculating the
mask (according to step 6) to <Literal>rwx</Literal> is unsafe because the
first user's effective access 
rights are unexpectedly changed from <Literal>r-x</Literal> to <Literal>rwx</Literal>.  If
the <Command>acl modify</Command> command detects such an unsafe condition, its
default action is to issue an error message and not change the ACL.
</Para>
<Para>The initial state, showing the permissions and the effective
permissions, is
</Para>
<InformalExample>
<Para><ProgramListing>dcecp> <Literal>acl show /.:/concertos</Literal>
{user vivaldi rwx effective r-x}
{mask_obj r-x}
dcecp>
</ProgramListing></Para>
</InformalExample>
<Para>Adding a user as shown results in an error because the mask
recalculation would give <Literal>vivaldi</Literal> an effective permission of <Literal>rwx</Literal>:
</Para>
<InformalExample>
<Para><ProgramListing>dcecp> <Literal>acl modify /.:/concertos -add {user telemann rwx}</Literal>
Error: Unintended permissions not granted.
dcecp>
</ProgramListing></Para>
</InformalExample>
<Para>Explicit use of the <Option>mask calc</Option> option allows the recalculated
mask to be applied in spite of the new permission granted to
<Literal>vivaldi</Literal>.  The mask is set to the union of
the permissions granted to the file group class entries on the ACL.
This option can result in the inadvertent granting of extra permissions.
</Para>
<InformalExample>
<Para><ProgramListing>dcecp> <Literal>acl modify /.:/concertos -add {user telemann rwx} -mask calc</Literal>
dcecp> <Literal>acl show /.:/concertos</Literal>
{user vivaldi rwx effective rwx}
{user telemann rwx effective rwx}
{mask_obj rwx}
dcecp>
</ProgramListing></Para>
</InformalExample>
<Para>Using the <Option>mask nocalc</Option> option explicitly retains the <Literal>r-x</Literal>
mask, resulting in reduced effective permissions for <Literal>telemann</Literal>.
The ACL is modified exactly as specified by the user, and no mask
calculation or purging of permissions occurs.
</Para>
<InformalExample>
<Para><ProgramListing><?sml-need 5>dcecp> <Literal>acl modify /.:/concertos -add {user telemann rwx} -mask nocalc</Literal>
dcecp> <Literal>acl show /.:/concertos</Literal>
{user vivaldi rwx effective r-x}
{user telemann rwx effective r-x}
{mask_obj r-x}
dcecp>
</ProgramListing></Para>
</InformalExample>
<Para>Using the <Option>purge</Option> option replaces the actual permissions with the
effective permissions in all entries.
More precisely, if the command detects an unsafe
condition, then the condition intersects the current value of the mask
with all of the existing, unmodified entries in the file group class,
replacing all ACL entries (except <Literal>user_obj</Literal>, <Literal>other_obj</Literal>,
<Literal>mask_obj</Literal> and <Literal>unauthenticated</Literal>) with their effective
permissions.
</Para>
<InformalExample>
<Para><ProgramListing>dcecp> <Literal>acl modify /.:/concertos -add {user telemann rwx} -purge</Literal>
dcecp> <Literal>acl show /.:/concertos</Literal>
{user vivaldi rwx effective r-x}
{user telemann rwx effective rwx}
{mask_obj rwx}
dcecp>
</ProgramListing></Para>
</InformalExample>
<IndexTerm Id="AGCC.SECACL.indx.82" SpanEnd="AGCC.SECACL.indx.81">
<IndexTerm Id="AGCC.SECACL.indx.83" SpanEnd="AGCC.SECACL.indx.75">
<IndexTerm Id="AGCC.SECACL.indx.84" SpanEnd="AGCC.SECACL.indx.84">
<IndexTerm Id="AGCC.SECACL.indx.85" SpanEnd="AGCC.SECACL.indx.3">
<IndexTerm Id="AGCC.SECACL.indx.86" SpanEnd="AGCC.SECACL.indx.1">
<IndexTerm Id="AGCC.SECACL.indx.87" SpanEnd="AGCC.SECACL.indx.76">
<IndexTerm Id="AGCC.SECACL.indx.88" SpanEnd="AGCC.SECACL.indx.77">
<IndexTerm Id="AGCC.SECACL.indx.89" SpanEnd="AGCC.SECACL.indx.78">
</Sect2>
</Sect1>
</Chapter>
<!--+ 10/31/96 16:05:54
    | tagMorph:  $Id: 1.5_acls.sgm,v 1.1.2.10 1996/12/04 22:48:31 carrig Exp $
    | tagMorph library:  $Id: 1.5_acls.sgm,v 1.1.2.10 1996/12/04 22:48:31 carrig Exp $
    | sml-to-docbook:  1.24
    +-->
