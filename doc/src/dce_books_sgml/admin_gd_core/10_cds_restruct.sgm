<!--
# @OSF_COPYRIGHT@
# 
# 
# HISTORY
# $Log: 10_cds_restruct.sgm,v $
# Revision 1.1.2.10  1996/12/04  22:48:34  carrig
# 	{enh,R1.2.2}
# 	JC's edits
# 	[1996/12/04  22:46:10  carrig]
#
# Revision 1.1.2.9  1996/11/29  20:19:59  carrig
# 	{enh,R1.2.2}
# 	Finished edit changes; must scale graphics
# 	[1996/11/29  20:16:26  carrig]
# 
# Revision 1.1.2.8  1996/11/27  21:43:01  carrig
# 	{enh,R1.2.2}
# 	More editor's comments
# 	[1996/11/27  21:40:52  carrig]
# 
# 	{enh,R1.2.2}
# 	More editor's comments
# 	[1996/11/27  21:27:42  carrig]
# 
# Revision 1.1.2.7  1996/11/26  21:44:37  carrig
# 	{enh,R1.2.2}
# 	Putting in editor's comments
# 	[1996/11/26  21:40:07  carrig]
# 
# Revision 1.1.2.6  1996/11/25  21:50:46  carrig
# 	{enh,R1.2.2}
# 	Started to put in editor's comments
# 	[1996/11/25  21:48:33  carrig]
# 
# Revision 1.1.2.5  1996/11/07  20:42:53  weir
# 	Cleaned up history
# 	[1996/11/07  20:40:54  weir]
# 
# Revision 1.1.2.4  1996/11/06  20:40:01  carrig
# 	{enh,R1.2.2}
# 	OK for editing
# 	[1996/11/06  20:37:23  carrig]
# 
# Revision 1.1.2.3  1996/11/05  18:58:17  carrig
# 	{enh,R1.2.2}
# 	Second pass
# 	[1996/11/05  18:54:50  carrig]
# 
# Revision 1.1.2.2  1996/11/04  22:03:10  carrig
# 	{enh,R1.2.2}
# 	First pass at corrections
# 	[1996/11/04  21:59:31  carrig]
# 
# Revision 1.1.2.1  1996/11/01  18:19:31  wardr
# 	{edit,R1.2.2}
# 	Initial checkin after sgml conversion
# 	[1996/11/01  18:17:23  wardr]
# 
# Revision 1.1.1.2  1996/11/01  18:17:23  wardr
# 	{edit,R1.2.2}
# 	Initial checkin after sgml conversion
# 
# $EndLog$
-->
<!---->
<!-- Fragment document type declaration subset:
ArborText, Inc., 1988-1993, v.4001
<!DOCTYPE Book PUBLIC "-//Davenport//DTD DocBook V2.4//EN" [
]>
-->
<!---->
<!-- COPYRIGHT NOTICE-->
<!-- Copyright (c) 1990, 1991, 1992, 1993 Open Software Foundation, Inc.-->
<!-- ALL RIGHTS RESERVED (DCE).  See the file named COPYRIGHT.DCE in the-->
<!-- src directory for the full copyright text.-->
<!---->
<!---->
<!-- HISTORY-->
<!-- Revision 1.1.8.3  1996/10/21  15:54:07  wardr-->
<!-- 	{edit,R1.2.2}-->
<!-- 	Update for sgml conversion-->
<!-- 	[1996/10/21  15:53:34  wardr]-->
<!---->
<!-- Revision 1.1.8.2  1996/09/27  13:43:04  wardr-->
<!-- 	{def,R1.2.2}-->
<!-- 	fixed broken index hits-->
<!-- 	[1996/09/27  13:41:40  wardr]-->
<!-- -->
<!-- Revision 1.1.8.1  1996/09/19  15:12:27  sherman-->
<!-- 	{def,13576,R1.2.2}-->
<!-- 	Removed primary cell renaming-->
<!-- 	{def,13575,R1.2.2}-->
<!-- 	Miscellaneous dcecp fixes-->
<!-- 	{def,13578,R1.2.2}-->
<!-- 	Replaced cdscp with dcecp-->
<!-- 	{def,13331,R1.2.2}-->
<!-- 	Fixed example, but ended up removing entire section anyway-->
<!-- 	[1996/09/19  15:11:29  sherman]-->
<!-- -->
<!-- Revision 1.1.6.20  1995/05/25  19:01:38  rcb-->
<!-- 	PRENTICE HALL reformat: final changes-->
<!-- 	[1995/05/25  13:14:06  rcb]-->
<!-- -->
<!-- 	PRENTICE HALL reformat - index entries, odds and ends-->
<!-- 	[1995/03/27  19:50:03  rcb]-->
<!-- -->
<!-- 	prevented hyphenation of option names-->
<!-- 	[1995/03/09  15:01:12  rcb]-->
<!-- -->
<!-- 	minor editorial fix: init cap on "For" in headers-->
<!-- 	[1995/03/06  17:07:49  rcb]-->
<!-- -->
<!-- 	PRENTICE HALL reformat-->
<!-- 	[1995/03/01  14:13:47  rcb]-->
<!-- -->
<!-- 	incoroporated 1.1 edits-->
<!-- 	[1995/02/27  20:26:05  rcb]-->
<!-- -->
<!-- Revision 1.1.6.19  1994/10/21  17:16:48  wardr-->
<!-- 	{edit R1.1}-->
<!-- 	Final GA release edits-->
<!-- 	[1994/10/21  17:16:32  wardr]-->
<!-- -->
<!-- Revision 1.1.6.18  1994/10/20  01:48:56  zahn-->
<!-- 	{edt,12399,R1.1}-->
<!-- -->
<!-- 	Added technical review comments-->
<!-- 	on hierarchical cells section.-->
<!-- 	[1994/10/20  01:48:37  zahn]-->
<!-- -->
<!-- Revision 1.1.6.17  1994/10/19  20:56:39  wardr-->
<!-- 	{edit R1.1}-->
<!-- 	Final GA release edits-->
<!-- 	[1994/10/19  20:55:10  wardr]-->
<!-- -->
<!-- Revision 1.1.6.16  1994/10/19  20:18:08  zahn-->
<!-- 	{edt,12399,R1.1}-->
<!-- -->
<!-- 	Second rev of cross-cell hcell section.-->
<!-- 	Still needs work.-->
<!-- 	[1994/10/19  20:17:48  zahn]-->
<!-- -->
<!-- Revision 1.1.6.15  1994/10/16  20:27:42  zahn-->
<!-- 	{enh,12399,R1.1}-->
<!-- -->
<!-- 	Initial creation of cross-component section-->
<!-- 	on creating and managing a cell hierarchy.-->
<!-- 	[1994/10/16  20:27:25  zahn]-->
<!-- -->
<!-- Revision 1.1.6.14  1994/09/23  19:02:47  pfa-->
<!-- 	No changes-->
<!-- 	[1994/09/23  18:41:36  pfa]-->
<!-- -->
<!-- Revision 1.1.6.13  1994/09/06  21:24:30  steto-->
<!-- 	{enh, CR10014, R1.1, Prepared for final review.}-->
<!-- 	[1994/09/06  21:24:10  steto]-->
<!-- -->
<!-- Revision 1.1.6.12  1994/09/06  18:29:43  steto-->
<!-- 	{edt, R1.1, Fixed bad index entry.}-->
<!-- 	[1994/09/06  18:29:20  steto]-->
<!-- -->
<!-- Revision 1.1.6.11  1994/08/30  15:08:21  steto-->
<!-- 	{enh, CR10014, R1.1, Updated the directory delete instructions.}-->
<!-- 	[1994/08/30  15:07:58  steto]-->
<!-- -->
<!-- Revision 1.1.6.10  1994/05/15  00:36:03  steto-->
<!-- 	{enh, 10014, edt, R1.1}-->
<!-- 	Prepared for Beta.-->
<!-- 	[1994/05/15  00:33:06  steto]-->
<!-- -->
<!-- 	ReviSdeleting a diresion 1.1.6.9  1994/05/12  20:13:36  rjohnson-->
<!-- 	Changes made: Fixed doc-formatting errors.-->
<!-- 	File name: admin_gd/directory/cds/10_cds_restruct.gpsml-->
<!-- 	[1994/05/12  20:13:09  rjohnson]-->
<!-- -->
<!-- Revision 1.1.6.8  1994/05/11  19:12:29  rjohnson-->
<!-- 	No changes made.-->
<!-- 	[1994/05/11  19:09:22  rjohnson]-->
<!-- -->
<!-- 	Changes made: None-->
<!-- 	File name: admin_gd/directory/cds/10_cds_restruct.gpsml-->
<!-- -->
<!-- Revision 1.1.6.7  1993/10/20  20:18:19  goldfarb-->
<!-- 	CR8009 - Adding info re: deleting cleared clearinghouses-->
<!-- 	[1993/10/20  20:17:56  goldfarb]-->
<!-- -->
<!-- Revision 1.1.6.6  1993/10/07  19:20:28  goldfarb-->
<!-- 	Changed explanation of expiration value example.-->
<!-- 	[1993/10/07  19:19:42  goldfarb]-->
<!-- -->
<!-- Revision 1.1.6.4  1993/08/24  01:37:39  tmw-->
<!-- 	Added index entries for second version of master index.-->
<!-- 	[1993/08/24  01:32:49  tmw]-->
<!-- -->
<!-- Revision 1.1.6.3  1993/07/06  18:33:57  buckler-->
<!-- 	{edit, R1.0.2}-->
<!-- 	More Prentice-Hall edits.-->
<!-- 	[1993/06/29  21:27:09  buckler]-->
<!-- -->
<!-- Revision 1.1.6.2  1993/06/01  18:15:33  buckler-->
<!-- 	{edit, R1.0.2}-->
<!-- 	Prentice-Hall editorial review.-->
<!-- 	[1993/06/01  18:08:29  buckler]-->
<!-- -->
<!-- Revision 1.1.4.7  1993/02/15  19:11:22  buckler-->
<!-- 	Changed .P! to .pI and added Postscript boundary boxes-->
<!-- 	[1993/02/15  19:10:22  buckler]-->
<!-- -->
<!-- Revision 1.1.4.6  1993/01/28  19:06:33  dbelch-->
<!-- 	Embedding copyright notice-->
<!-- 	[1993/01/28  18:31:03  dbelch]-->
<!-- -->
<!-- Revision 1.1.4.5  1993/01/27  16:04:24  buckler-->
<!-- 	Fixed cross-refs and figure calls for new book org-->
<!-- 	[1993/01/27  15:59:27  buckler]-->
<!-- -->
<!-- Revision 1.1.4.4  1993/01/10  22:32:46  lipsky-->
<!-- 	Changes made:  Corrected spelling of read-only to readonly in example-->
<!-- 	File name:  10_cds_restruct.gpsml-->
<!-- 	CR#: 6077-->
<!-- 	[1993/01/10  22:32:00  lipsky]-->
<!-- -->
<!-- Revision 1.1.4.3  1992/08/26  13:29:00  weir-->
<!-- 	Test-->
<!-- 	[1992/08/26  13:27:31  weir]-->
<!-- -->
<!-- 	Removed change bars-->
<!-- 	[1992/08/26  13:24:34  weir]-->
<!-- -->
<!-- Revision 1.1.4.2  1992/08/25  20:33:10  weir-->
<!-- 	Moved to dce1.0.2doc-->
<!-- 	[1992/08/25  20:25:39  weir]-->
<!-- -->
<!-- Revision 1.1.2.2  1992/07/04  13:15:47  lipsky-->
<!-- 	Changes made:  Add information that Ken Goach requested.-->
<!-- 	File name:  src/admin_gd/directory/cds/10_cds_restruct.gpsml-->
<!-- 	[1992/07/04  13:14:47  lipsky]-->
<!-- -->
<!-- Revision 1.1  1992/01/29  16:16:24  damon-->
<!-- 	Initial revision-->
<!-- -->
<!---->
<!-- (c) Copyright 1991, Open Software Foundation, Inc.  ALL RIGHTS RESERVED-->
<!--   HISTORY COMMENTS:-->
<!---->
<!--   DATE:                            COMMENT:-->
<!---->
<!--	Fri.  Dec 6, 1991                 Update file submission for-->
<!--                                    final integration at IBM.-->
<!--                                   -->
<!---->
<!-- ********************************************************************-->
<!--                                                                    *-->
<!-- COPYRIGHT (c) 1991 BY DIGITAL EQUIPMENT CORPORATION,               *-->
<!-- Maynard, Massachusetts                                             *-->
<!-- All Rights Reserved.                                               *-->
<!--                                                                    *-->
<!-- This document is furnished under a license and may be used and     *-->
<!-- copied only in accordance with the terms of such license and with  *-->
<!-- the inclusion of the above copyright notice.  No title to or        *-->
<!-- ownership of the document is hereby transferred.                   *-->
<!--                                                                    *-->
<!-- The information in this document is subject to change without      *-->
<!-- notice and should not be construed as a commitment by Digital      *-->
<!-- Equipment Corporation.                                             *-->
<!--                                                                    *-->
<!-- ********************************************************************-->
<!-- New KILLER output of 10/15/91 reflected as of 10/18/91 - DJK.-->
<!-- Additional timestamp modifications made on 10/22/91 - DJK.-->
<Chapter Id="AGCC.CDSRST.div.1">
<Title>Restructuring a Namespace</Title>
<Para><IndexTerm Id="AGCC.CDSRST.indx.1">
<Primary>namespace</Primary>
<Secondary>restructuring</Secondary>
</IndexTerm>Over time, you may need to restructure or rename certain elements of your
namespace.  For example, you may want to create soft links to provide users
with one or more alternate names for an existing namespace entry.  You may
need to reconfigure a directory's replica set to modify the locations and
replica types of particular replicas, or exclude a replica from the
set.  Occasionally, you may want to delete certain directories when the
information that they contain is no longer needed by users.  You
may also need to relocate a clearinghouse or delete a clearinghouse
from a server system to perform diagnostic or troubleshooting work on the
system, or to prepare for removing the system from your network.
Finally, you may want to create a hierarchy of cells,
add a cell to an existing hierarchy, or change the
structure of a cell hierarchy.
</Para>
<Para>This chapter explains how to perform the following namespace restructuring
tasks:
</Para>
<ItemizedList>
<ListItem>
<Para>Managing soft links
</Para>
</ListItem>
<ListItem>
<Para>Modifying a directory's replica set
</Para>
</ListItem>
<ListItem>
<Para>Deleting a directory
</Para>
</ListItem>
<ListItem>
<Para>Relocating a clearinghouse
</Para>
</ListItem>
<ListItem>
<Para>Deleting a clearinghouse
</Para>
</ListItem>
<ListItem>
<Para>Creating and managing a hierarchy of cells
</Para>
</ListItem>
</ItemizedList>
<Sect1 Id="AGCC.CDSRST.div.2">
<Title>Managing Soft Links</Title>
<Para><IndexTerm Id="AGCC.CDSRST.indx.2">
<Primary>soft links</Primary>
<Secondary>managing</Secondary>
</IndexTerm>A soft link is an alternate name, or alias, with which you can refer to
another existing name in a namespace.  Soft links allow users and client
applications to refer to a particular directory, object entry, or soft
link by more than one name.
</Para>
<Para>In general, you should create soft links to assign alternate names
to particular network resources, or to make minor changes to the original
names of directories in your namespace hierarchy.  You should avoid using
soft links to completely redesign your namespace.
</Para>
<Sect2 Id="AGCC.CDSRST.div.3" RevisionFlag="Changed">
<Title>Creating a Soft Link</Title>
<IndexTerm Id="AGCC.CDSRST.indx.3">
<Primary>soft links</Primary>
<Secondary>creating</Secondary>
</IndexTerm>
<IndexTerm Id="AGCC.CDSRST.indx.4">
<Primary><Command>dcecp</Command> commands</Primary>
<Secondary><Command>link create</Command></Secondary>
</IndexTerm>
<?og-ChangeStart def,13575,R1.2.2,Replaced -linkto with -to">
<Para>Use the DCE control program (<Command>dcecp</Command>) <Command>link create</Command>
command to create a soft link.  In addition to the name for the new soft link,
you must specify the soft link's destination name, or
existing name to which the new soft link points, with the
<Option>to</Option> option.  You can specify any name in the local cell namespace
or in any foreign cell namespace, as the destination name, including another
soft link.
</Para>
<Para>To create a soft link, you must have insert permission to the directory
in which you intend to create the soft link.
</Para>
<Note>
<Para>If you create a soft link that points to another soft link, make sure you
do not create a soft link loop.  A soft link loop occurs when you specify a
destination name that eventually points back to the new soft link's own
link name.  The clerk detects this error. 
<!-- CDS automatically detects this condition and logs an error-->
<!-- message to inform you of the problem.-->
<!-- NOT ANY MORE ACCORDING TO JANET 10/21/91 ...-->
</Para>
</Note>
<Para><IndexTerm Id="AGCC.CDSRST.indx.5">
<Primary>soft links</Primary>
<Secondary>creating</Secondary>
<Tertiary>with timeout attribute</Tertiary>
</IndexTerm>All soft links that you create with the
<Command>link create</Command>
command are permanent and never expire unless you
use the command's <Option>timeout</Option> option to specify an
expiration date and time value for the <Literal>CDS_LinkTimeout</Literal> attribute of the
soft link.
</Para>
<Para><?sml-need 3>Enter the expiration date and time value in the format
</Para>
<InformalExample>
<Para><ProgramListing><UserInput><Symbol Role="Variable">yyyy-mm-dd-hh:mm:ss
</Symbol></UserInput></ProgramListing></Para>
</InformalExample>
<Para>For example, the following value
indicates that, if the soft link still exists (that is, has not been deleted
manually) on August 25, 1994, at 4:00 p.m., CDS will automatically delete it
the next time the directory in which it is stored is skulked:
</Para>
<InformalExample>
<Para><ProgramListing><UserInput>CDS_LinkTimeout=(1994-08-25-16:00:00)
</UserInput></ProgramListing></Para>
</InformalExample>
<Para>If you use the <Option>timeout</Option> option to specify an expiration value for a
soft link's <Literal>CDS_LinkTimeout</Literal> attribute, you can also
specify an extension value, which is a period of time to be added to the
expiration date and time that are already assigned.  Enter the extension value
in the format <Symbol Role="Variable">ddd-hh:mm:ss</Symbol>.  For example, a value of
<Literal>030-00:00:00</Literal>
indicates that, if the destination name of the soft link still exists when
the assigned expiration date and time are reached, CDS allows another 30
days to pass before it again checks, during a skulk, for the existence of
the destination name.  If, at that time, the destination name cannot be
found, CDS deletes the soft link.
</Para>
<Para>The following command creates a permanent soft link named
<Filename>/.:/sales/asia</Filename>
that points to a directory named <Filename>/.:/sales/eur</Filename>:
</Para>
<InformalExample>
<Para><ProgramListing>dcecp> <Literal>link create  /.:/sales/asia -to  /.:/sales/eur</Literal>
dcecp> 
</ProgramListing></Para>
</InformalExample>
<Para>The following command creates a soft link named
<Filename>/.:/mfg/robo1</Filename> that points to an object entry named
<Filename>/.:/mfg/robotics_controller01</Filename> and sets its expiration date and time:
</Para>
<InformalExample>
<Para><ProgramListing>dcecp> <Literal>link create  /.:/mfg/robo1 -to </Literal><Literal>/.:/mfg/robotics_controller01 \ </Literal>
><Literal> -timeout 1994-12-12-09:00:00</Literal>
dcecp>
</ProgramListing></Para>
</InformalExample>
<?og-ChangeEnd def,13575,R1.2.2,Replaced -linkto with -to">
<Para>In the preceding command, the expiration date and time placed in the
<Literal>CDS_LinkTimeout</Literal> attribute value
indicates that CDS will delete the soft link
<Filename>/.:/mfg/robo1</Filename>
on the next skulk after December 12, 1994, at 9:00 a.m.
</Para>
<Para>The following command creates a soft link that is named
<Filename>/.:/admin/linka</Filename> that points to an
object entry named
<Filename>/.:/sales/discount_stats</Filename>:
</Para>
<InformalExample>
<Para><ProgramListing><?sml-need 4>dcecp> <Literal>link create  /.:/admin/linka -to  /.:/sales/discount_stats -timeout \  </Literal>
> <Literal> {1994-01-11-12:00:00 090-00:00:00}</Literal>
dcecp>
</ProgramListing></Para>
</InformalExample>
<Para>In the preceding command, the expiration time placed in the
<Literal>CDS_LinkTimeout</Literal> attribute value indicates that CDS will
check that the destination name <Filename>/.:/sales/discount_stats</Filename> still
exists on the next skulk after January 11, 1994, at 12:00 p.m.  If the
destination name does not exist, CDS deletes the soft link.  If the
destination name still exists, the soft link remains in effect for
another 90 days, as specified by the extension time specified for the
<Literal>CDS_LinkTimeout</Literal> attribute value <Literal>090-00:00:00</Literal>.  When the 90-day
extension period expires, CDS repeats the check at 90-day intervals
until the destination name is deleted.
<IndexTerm Id="AGCC.CDSRST.indx.6" SpanEnd="AGCC.CDSRST.indx.3"><IndexTerm Id="AGCC.CDSRST.indx.7" SpanEnd="AGCC.CDSRST.indx.4"></Para>
</Sect2>
<Sect2 Id="AGCC.CDSRST.div.4">
<Title>Changing a Soft Link's Destination Name</Title>
<Para><IndexTerm Id="AGCC.CDSRST.indx.8">
<Primary>soft links</Primary>
<Secondary>changing destination names</Secondary>
</IndexTerm>
<IndexTerm Id="AGCC.CDSRST.indx.9">
<Primary><Command>dcecp</Command> commands</Primary>
<Secondary><Command>link modify</Command></Secondary>
</IndexTerm>Use the <Command>dcecp</Command> <Command>link modify</Command>
command to specify a new value for a soft link's
<Literal>CDS_LinkTarget</Literal> attribute and redirect the soft link from its current
destination name to some other name in the namespace.
</Para>
<Para><?sml-need 2>To change a soft link's destination name, you must have write 
permission to the soft link.  For example, the following
command redirects a soft link that is named
<Filename>/.:/admin/work_disk</Filename>
from its current destination name
to the new destination name
<Filename>/.:/admin/work_disk03:
</Filename></Para>
<InformalExample>
<Para><ProgramListing>dcecp> <Literal>link modify  /.:/admin/work_disk -change {CDS_LinkTarget \ </Literal>
> <Literal> /.:/admin/work_disk03}</Literal>
dcecp>
</ProgramListing></Para>
</InformalExample>
</Sect2>
<Sect2 Id="AGCC.CDSRST.div.5">
<Title>Changing a Soft Link's Expiration or Extension Value</Title>
<Para><IndexTerm Id="AGCC.CDSRST.indx.10">
<Primary>soft links</Primary>
<Secondary>expiration and extension values</Secondary>
</IndexTerm>
<IndexTerm Id="AGCC.CDSRST.indx.11">
<Primary><Command>dcecp</Command> commands</Primary>
<Secondary><Command>link modify</Command></Secondary>
</IndexTerm>Use the <Command>dcecp</Command> <Command>link modify</Command>
command to specify a new value for the expiration and
extension values that are stored in a soft link's
<Literal>CDS_LinkTimeout</Literal> attribute.  Even if you want to modify only one of the
values, you must specify values for both expiration and extension in your
command.  You specify a new value in the same format that you
used to establish the original value.  The expiration value has the format
<Symbol Role="Variable">yyyy-mm-dd-hh:mm:ss</Symbol>,
and an extension value has the format
<Symbol Role="Variable">ddd-hh:mm:ss</Symbol>.
</Para>
<Para>To change a soft link's expiration or extension value, you must have write
permission to the soft link.
</Para>
<Para>The following command sets the expiration
value of a soft link that is named
<Filename>/.:/eng/link01</Filename>
to December 31, 1994, at 12:00 p.m.  In this example, no extension is
currently assigned to the soft link.
</Para>
<InformalExample>
<Para><ProgramListing><?sml-need 2>dcecp> <Literal>link modify  /.:/eng/link01  -change {</Literal><Literal>CDS_LinkTimeout \ </Literal>
> <Literal> (1994-12-31-12:00:00 000-00:00:00}</Literal>
dcecp>
</ProgramListing></Para>
</InformalExample>
<Para>The following command changes the expiration value of a soft link that is
named <Filename>/.:/eng/link01</Filename> to December 31, 1994, 
at 12:00 p.m. and sets the soft link's extension
value to 90 days:
</Para>
<InformalExample>
<Para><ProgramListing>dcecp> <Literal>link modify  /.:/eng/link01 -change {</Literal><Literal>CDS_LinkTimeout \ </Literal>
><Literal> 1994-12-31-12:00:00 090-00:00:00}</Literal>
dcecp>
</ProgramListing></Para>
</InformalExample>
<IndexTerm Id="AGCC.CDSRST.indx.12" SpanEnd="AGCC.CDSRST.indx.10">
</Sect2>
<Sect2 Id="AGCC.CDSRST.div.6">
<Title>Deleting a Soft Link</Title>
<IndexTerm Id="AGCC.CDSRST.indx.13">
<Primary>soft links</Primary>
<Secondary>deleting</Secondary>
</IndexTerm>
<Para>If you find that a permanent soft link has outlasted its original purpose,
or if you prefer not to wait until a soft link's assigned expiration and
extension times have been reached, you can delete the soft link from the
namespace yourself.
</Para>
<Para>Use the <Command>link delete</Command> command to delete the soft link of the name that
you specify.
</Para>
<Para>To delete a soft link, you must have delete permission to the soft link, or
administer permission to the directory that stores the soft link.
</Para>
<Para>For example, the following command deletes a soft link that is named 
<Filename>/.:/dist/pointer_1</Filename>:
</Para>
<InformalExample>
<Para><ProgramListing>dcecp> <Literal>link delete  /.:/dist/pointer_1
</Literal>
dcecp>
</ProgramListing></Para>
</InformalExample>
<IndexTerm Id="AGCC.CDSRST.indx.14" SpanEnd="AGCC.CDSRST.indx.2">
</Sect2>
</Sect1>
<Sect1 Id="AGCC.CDSRST.div.7" RevisionFlag="Changed">
<Title>Modifying a Directory's Replica Set</Title>
<IndexTerm Id="AGCC.CDSRST.indx.15">
<Primary>replica</Primary>
<Secondary>sets</Secondary>
<Tertiary>modifying</Tertiary>
</IndexTerm>
<IndexTerm Id="AGCC.CDSRST.indx.16">
<Primary><Command>dcecp</Command> commands</Primary>
<Secondary><Command>directory modify</Command></Secondary>
</IndexTerm>
<?og-ChangeStart def,13578,R1.2.2,Replaced cdscp with dcecp">
<Para>A directory's replica set always contains a master replica; it can also
contain other read-only replicas.  The values that are stored in the
<Literal>CDS_Replicas</Literal> attribute that is 
associated with a directory contain information that describes
the directory's replica set, including how many replicas exist, their replica
types, and the name of the clearinghouse where each of the replicas is
stored.  You can use the <Command>dcescp directory modify</Command>
command to overwrite the current values
that are stored in the directory's
<Literal>CDS_Replicas</Literal>
attribute and to perform either or both of the following tasks in a
single command:
</Para>
<ItemizedList>
<ListItem>
<Para>Designate a new master replica in a directory's replica set.
</Para>
</ListItem>
<ListItem>
<Para>Exclude a replica from a directory's replica set.
</Para>
</ListItem>
</ItemizedList>
<Note>
<Para>As part of the
<Command>directory modify</Command> command,
CDS initiates an immediate skulk on the directory 
to distribute modifications to all members of the replica
set as soon as possible.
<?og-ChangeEnd def,13578,R1.2.2,Replaced cdscp with dcecp"></Para>
</Note>
<Sect2 Id="AGCC.CDSRST.div.8">
<Title>Before You Modify a Replica Set</Title>
<Para>Before you modify a directory's replica set, you need to know how many
replicas exist, their replica types, and the name of the clearinghouse
where each of the replicas is stored.  The command that
you use to modify a directory's replica set does not allow you
to accidentally leave a replica out of the new set.  You must explicitly list
all existing replicas that are in the set.  You can include or exclude any
replica from the new set, but you must account for all replicas.  Only
one of the replicas that you include in the new set can be designated as
the master replica.
</Para>
<Para>To display the names of all of a directory's replicas, use the <Command>dcecp</Command>
<Command>directory show</Command> command.  This command queries the
directory's <Literal>CDS_Replicas</Literal> attribute to gather this information.
(See 
<!-- the chapter in this module -->
<!-- on viewing the structure and contents of a namespace -->
Chapter 18 for information on how to use the <Command>dcecp</Command>
<Command>directory show</Command> command.)
</Para>
</Sect2>
<Sect2 Id="AGCC.CDSRST.div.9">
<Title>Permissions Required for Modifying a Replica Set</Title>
<Para>The permissions for modifying a directory's replica set are as follows:
</Para>
<ItemizedList>
<ListItem>
<Para>You must have administer permission to the directory.  Also, the server
principal needs administer, read, and write permissions to the directory.
</Para>
</ListItem>
<ListItem>
<Para>When designating a new master replica,
you also need write permission to the clearinghouse that stores
the current master replica.  The server principal needs write permission
to the clearinghouse that stores the read-only replica that you intend to
designate as the new master replica.
</Para>
<Para>The server principal on the server where the new master replica will
be located needs administer, read, and write
permissions to the directory.
</Para>
</ListItem>
</ItemizedList>
<Para><?og-ChangeStart def,13578,R1.2.2,Replaced cdscp with dcecp">When you know which replicas to include and exclude and have changed
permissions that need to be changed, issue the <Command>directory modify</Command>
command to modify a directory's replica set.  Instructions for your two
options&mdash;designating a new master replica, and excluding an existing
read-only replica&mdash;are given in the sections that follow.
<?og-ChangeEnd def,13578,R1.2.2,Replaced cdscp with dcecp"></Para>
</Sect2>
<Sect2 Id="AGCC.CDSRST.div.10">
<Title>Designating a New Master Replica</Title>
<IndexTerm Id="AGCC.CDSRST.indx.17">
<Primary>replica</Primary>
<Secondary>designating new master (CDS)</Secondary>
</IndexTerm>
<Para>Sometimes, for configuration management reasons, you may want to designate
a different replica as a directory's master replica. 
</Para>
<Para>For example, you can specify a new master replica when
</Para>
<ItemizedList>
<ListItem>
<Para>A server system whose clearinghouse contains one or more master replicas
will
be down for an extended period of time or removed permanently from the
network.
</Para>
</ListItem>
<ListItem>
<Para>A clearinghouse that stores one or more master replicas will be
deleted from the namespace.
</Para>
</ListItem>
<ListItem>
<Para>You want to locate a master replica closer to where the majority of
updates to the directory originate.
</Para>
</ListItem>
</ItemizedList>
<Para><?og-ChangeStart def,13578,R1.2.2,Replaced cdscp with dcecp">To designate a new master replica, use
<IndexTerm Id="AGCC.CDSRST.indx.18">
<Primary><Literal>set directory to new epoch</Literal> command</Primary>
</IndexTerm>the <Command>dcecp directory modify</Command> command.
</Para>
<Para><?sml-need 5>Figure 21-1 illustrates an example replica set.  This replica set of the
<Filename>/.:/eng</Filename> directory consists of three replicas:
the master replica, which is stored in clearinghouse <Filename>/.:/NY1_CH</Filename>,
a read-only replica stored in clearinghouse <Filename>/.:/NY2_CH</Filename>,
and a read-only replica stored in clearinghouse <Filename>/.:/Chicago1_CH</Filename>.
</Para>
<Figure>
<Title>Example Replica Set</Title>
<Graphic Entityref="AGCC.CDSRST.ent.1"></Graphic>
</Figure>
<?sml-space .5>
<Para>The following command designates the read-only replica that is stored
in clearinghouse
<Filename>/.:/Chicago1_CH</Filename>
as the directory's new master replica, designates the former master replica
(stored in clearinghouse
<Filename>/.:/NY1_CH</Filename>) as a read-only replica, and leaves the read-only
replica stored in clearinghouse
<Filename>/.:/NY2_CH</Filename>
as it is:
</Para>
<InformalExample>
<Para><ProgramListing>dcecp> <Literal> directory modify /.:/eng -master /.:/Chicago_1_CH \</Literal> 
> <Literal>-readonly {/.:/NY1_CH /.:/NY2_CH}</Literal>
dcecp>
</ProgramListing></Para>
</InformalExample>
<Para>Figure 21-2 shows the result of the preceding command.
</Para>
<Figure>
<Title>Example Replica Set After Master Redesignation</Title>
<Graphic Entityref="AGCC.CDSRST.ent.2"></Graphic>
</Figure>
<?sml-space .5>
<IndexTerm Id="AGCC.CDSRST.indx.19" SpanEnd="AGCC.CDSRST.indx.17">
</Sect2>
<Sect2 Id="AGCC.CDSRST.div.11">
<Title>Excluding a Replica from a Replica Set</Title>
<Para><IndexTerm Id="AGCC.CDSRST.indx.20">
<Primary>replica</Primary>
<Secondary>sets</Secondary>
<Tertiary>excluding replicas</Tertiary>
</IndexTerm>You can temporarily exclude a replica from its replica set
when the clearinghouse in which the replica is stored unexpectedly becomes
unavailable.  This makes it possible for CDS to complete skulks of the
directory during the time the excluded replica is unavailable.
</Para>
<Para><?sml-need 4>To exclude a replica from a replica set, you use the <Literal>dcecp directory modify</Literal> command with the <Command>exclude</Command>
argument to rebuild a directory's replica set, excluding the replica that
you specify.  Remember that you must account for all existing replicas in the
command.
</Para>
<Para>In the following example, the replica set of the
<Filename>/.:/eng</Filename>
directory consists of three replicas: the master replica, which is
stored in clearinghouse
<Filename>/.:/Chicago1_CH</Filename>, and the read-only replicas that are
stored in clearinghouses <Filename>/.:/NY1_CH</Filename> and <Filename>/.:/NY2_CH</Filename>.
</Para>
<Para>In this case, the
<Filename>/.:/NY1_CH</Filename>
clearinghouse
is cut off from the network because of accidental damage to the
network transmission lines.  Connectivity to the clearinghouse
will not be restored for several days.  During this period, skulks of the
<Filename>/.:/eng</Filename> directory will fail unless you temporarily exclude the
read-only replica that is stored in clearinghouse
<Filename>/.:/NY1_CH</Filename>.
</Para>
<Para>To make it possible for skulks of the
<Filename>/.:/eng</Filename> directory
to succeed during the repair period, enter the following
command to overwrite the current values of the
<Filename>/.:/eng</Filename>
directory's
<Literal>CDS_Replicas</Literal>
attribute with new values that include only the replicas that are
stored in the <Filename>/.:/NY2_CH</Filename> and <Filename>/.:/Chicago1_CH</Filename> clearinghouses:
</Para>
<InformalExample>
<Para><ProgramListing>dcecp> <Literal>directory modify/.:/eng -master /.:/Chicago1_CH \</Literal>  
> <Literal>-readonly /.:/NY2_CH -exclude /.:/NY1_CH</Literal>
dcecp> 
</ProgramListing></Para>
</InformalExample>
<Para>Figure 21-3 shows the result of the preceding command.
</Para>
<?sml-need 2.5i>
<Figure>
<Title>Example Replica Set After Replica Exclusion</Title>
<Graphic Entityref="AGCC.CDSRST.ent.3"></Graphic>
</Figure>
<?sml-space .5>
<Para>When connectivity with the
<Filename>/.:/NY1_CH</Filename>
clearinghouse is reestablished, enter the following
command to reintroduce the read-only replica that is stored in clearinghouse
<Filename>/.:/NY1_CH</Filename>
to the replica set:
</Para>
<InformalExample>
<Para><ProgramListing><?sml-need 2>dcecp> <Literal>directory modify /.:/eng -master /.:/Chicago1_CH \</Literal>
> <Literal>-readonly {/.:/NY1_CH /.:/NY2_CH}</Literal>
dcecp> 
</ProgramListing></Para>
</InformalExample>
<Note>
<Para>Always reintroduce excluded replicas to their replica
sets as soon as possible after the clearinghouse in which they reside
again becomes available.
</Para>
</Note>
<IndexTerm Id="AGCC.CDSRST.indx.21" SpanEnd="AGCC.CDSRST.indx.20">
<IndexTerm Id="AGCC.CDSRST.indx.22" SpanEnd="AGCC.CDSRST.indx.15">
<?og-ChangeEnd def,13578,R1.2.2,Replaced cdscp with dcecp">
</Sect2>
</Sect1>
<Sect1 Id="AGCC.CDSRST.div.12">
<Title>Deleting Directories</Title>
<Para>You may sometimes want to delete a directory
from your namespace when the information that it contains 
is no longer needed by users.  You must take two considerations into account
when deleting a directory:
</Para>
<ItemizedList>
<ListItem>
<Para>Does the directory contain child directories or the entries for any other
CDS object?  Before a directory can be deleted, it must be empty.
</Para>
</ListItem>
<ListItem>
<Para>Are there any replicas of the directory?  They must each be deleted separately.
</Para>
</ListItem>
</ItemizedList>
<Para>Both of these considerations are discussed in following sections.
</Para>
<Para>To delete a directory, you must have the following permissions:
<IndexTerm Id="AGCC.CDSRST.indx.23">
<Primary><Command>dcecp</Command> commands</Primary>
<Secondary><Command>directory delete</Command></Secondary>
</IndexTerm></Para>
<ItemizedList>
<ListItem>
<Para>Delete permission to the directory.
</Para>
</ListItem>
<ListItem>
<Para>Write permission to the clearinghouse that stores the master replica of the
directory.
</Para>
</ListItem>
<ListItem>
<?sml-need 4>
<Para>The server principal for the server from which you enter the
<Command>directory delete</Command>
command needs administer permission to the parent directory or delete
permission to the child pointer that points to the directory you intend to
delete.
</Para>
<Para><?sml-need 5>If the server is included in the server authorization group
<Filename>subsys/dce/cds-servers</Filename>, these permissions should already be in
place.  If in doubt, use the <Command>acl show</Command> of the <Command>dcecp</Command> utility
and verify that the server principal has the appropriate permissions.  (See the
<!-- \*EDCE Security Service\*O module in this guide-->
<Literal>acl(8dce)</Literal> reference page for complete information on the 
<Command>acl show</Command> command.)
</Para>
</ListItem>
</ItemizedList>
<Sect2 Id="AGCC.CDSRST.div.13">
<Title>Deleting a Nonreplicated Directory</Title>
<Para><IndexTerm Id="AGCC.CDSRST.indx.24">
<Primary>CDS</Primary>
<Secondary>deleting nonreplicated directories</Secondary>
</IndexTerm>To delete a directory that has no replicas, use the <Literal>dcecp
directory delete</Literal> command.  For example, to delete the directory
<Filename>/.:/sales</Filename>, all of its immediate contents, and the contents of any
of its child directories, you would enter the following: 
</Para>
<InformalExample>
<Para><ProgramListing>dcecp> <Literal>directory delete  /.:/sales -tree</Literal>
dcecp> 
</ProgramListing></Para>
</InformalExample>
<Note>
<Para>Be careful when using the <Option>tree</Option> option of the <Command>directory delete</Command>
command.  The command does not ask you to confirm that you want to delete
the directory that you specify in the command line; it proceeds immediately
with the delete operation.  This can result in the loss of directories
that you want to keep.
</Para>
<Para>Remember that you can change the behavior of <Command>dcecp</Command> commands
through scripts.   In the case of the <Command>directory delete</Command> command, you
could write a script that prompted for a confirmation of the delete operation
whenever the command was run with its <Option>tree</Option> option.  
See Part 1 of this guide for a discussion of writing scripts.
</Para>
</Note>
<Para>A way to guard against the inadvertent deletion of directories and their
entries is to view the contents before you run 
the <Command>directory delete</Command> command.  To display the contents of a CDS
directory by entry type, use the <Command>directory list</Command> command with the
<Option>object</Option>, <Option>link</Option>, and <Option>directory</Option> options.    
</Para>
<Para>The following is an example in which a directory named <Filename>/.:/sales</Filename>
is deleted.  The directory has one object entry and one soft link:
</Para>
<InformalExample>
<Para><ProgramListing><?sml-need 9>dcecp>  <Literal>directory list /.:/sales -simplename</Literal>
work_disk link1
dcecp> <Literal>directory list /.:/sales -simplename -object</Literal>
work_disk
dcecp> <Literal>directory list /.:/sales -simplename -link </Literal>
link1
dcecp> <Literal>directory delete /.:/sales -tree</Literal>
dcecp> <Literal>directory show /.:/sales</Literal>
Error: Requested entry does not exist
dcecp> 
</ProgramListing></Para>
</InformalExample>
<Para>If a directory to be deleted is not empty, the <Command>directory delete</Command>
command will fail.  To recover from this kind of failure, you must remove
all the entries in the directory and its child directories, then run the
<Command>directory delete</Command> command again.  Use the <Command>link delete</Command> and
<Command>object delete</Command> commands to delete the soft links and object entries
in any directories.  Then run the <Command>directory delete</Command> command to delete
the directories.
</Para>
</Sect2>
<Sect2 Id="AGCC.CDSRST.div.14">
<Title>Deleting a Directory Replica</Title>
<Para><IndexTerm Id="AGCC.CDSRST.indx.25">
<Primary>CDS</Primary>
<Secondary>deleting replicas</Secondary>
</IndexTerm>If a directory is replicated, all the replicas have to
be deleted individually.  Then the directory can be
deleted using the commands described in the previous section.  
</Para>
<Para>To display a list of all replicas of a directory, use the <Literal>dcecp
directory show</Literal> command.  Look at the <Literal>CDS_Replicas</Literal> attribute of
the directory in the list.  Each replica's <Literal>CDS_Replicas</Literal> attribute has
several subattributes.  Look at the <Literal>CH_Name</Literal> subattribute for each
replica to get the name of the clearinghouse where it is located.  For
example:
</Para>
<InformalExample>
<Para><ProgramListing><?sml-point-size 10>
<!--no-op:  12-->

</ProgramListing>
</Para>

<Para><ProgramListing role="page-wide"><?sml-point-size 10>
<?sml-need 25>dcecp> <Literal>directory show /.:/sales</Literal> 
{RPC_ClassVersion {01 00}}
{CDS_CTS 1994-05-06-11:41:05.314-05:00I0.000/08-00-09-25-13-52}
{CDS_UTS 1994-06-21-03:06:08.842-05:00I0.000/08-00-09-25-13-52}
{CDS_ObjectUUID 5f97a584-bf9b-11cd-9362-080009251352}
{CDS_Replicas
 {{CH_UUID de3401e6-bb98-11cd-aac5-080009251352}
  {CH_Name /.../absolut_cell/absolut_ch}
  {Replica_Type Master}  
  {Tower {ncacn_ip_tcp 130.105.5.93}}
  {Tower {ncadg_ip_udp 130.105.5.93}}}}
{CDS_AllUpTo 23854-01-29-19:45:44.841-05:00I0.000/08-00-09-25-13-52}
{CDS_Convergence medium}
{CDS_ParentPointer
 {{Parent_UUID df13b228-bb98-11cd-aac5-080009251352}
  {Timeout
   {expiration 1994-08-24-19:30:30.827}
   {extension +1-00:00:00.000I0.000}}
  {myname /.../absolut_cell/sales}}}
{CDS_DirectoryVersion 3.0}
{CDS_ReplicaState on}
{CDS_ReplicaType Master}
{CDS_LastSkulk 1994-01-29-19:45:44.841-05:00I0.000/08-00-09-25-13-52}
{CDS_LastUpdate 1994-06-21-03:06:08.842-05:00I0.000/08-00-09-25-13-52}
{CDS_Epoch 60ac0730-bf9b-11cd-9362-080009251352}
{CDS_ReplicaVersion 3.0}
dcecp>
<?sml-point-size 12>
<!--no-op:  14-->
</ProgramListing></Para>
</InformalExample>
<Para>The name of the directory and the name of the clearinghouse can be used to
uniquely identify each replica.  Use these names in a series of
<Command>directory delete</Command> commands to remove the replicas.  The name of each
replica is the argument to the command, and the name of the clearinghouse
should be used as the value of the <Option>clearinghouse</Option> option.  The
<Option>replica</Option> option should also appear in the command line to indicate
that the directory to be deleted is a replica.  A sample command line
is the following:
</Para>
<InformalExample>
<Para><ProgramListing>dcecp> <Literal>directory delete  /.:/sales -replica -clearinghouse /.:/NY1_CH</Literal>
dcecp> 
</ProgramListing></Para>
</InformalExample>
<Note>
<Para>The <Command>directory delete</Command> command does not require that directory replicas
are empty in order to operate on them.  It will delete the replicas, all
their contents, and their child directories immediately, without prompting
for confirmation of the operation.
</Para>
</Note>
<Para>You may want to write a <Command>dcecp</Command> script that looks at
the <Literal>CDS_Replicas</Literal> attribute, finds all the replicas and
deletes them with one command.  
See Part 1 of this guide for a discussion of writing scripts.
</Para>
</Sect2>
</Sect1>
<Sect1 Id="AGCC.CDSRST.div.15">
<Title>Relocating a Clearinghouse</Title>
<IndexTerm Id="AGCC.CDSRST.indx.26">
<Primary>clearinghouses</Primary>
<Secondary>relocating</Secondary>
</IndexTerm>
<Note>
<Para>This section describes the procedure that you use to temporarily relocate a
clearinghouse from one CDS server system to another.  Note that the
procedure cannot be used to configure additional CDS server systems.
(See 
<!-- \*EPlanning, Configuring, and Starting Up DCE\*O -->
<!-- module in this guide.   -->
the &DCEAi;
for information on how to configure CDS servers and CDS clerks.) 
</Para>
</Note>
<Para>Occasionally, you may need to relocate a clearinghouse from the server
system where it currently resides to another server system.  For example,
you may want to move a clearinghouse when
</Para>
<ItemizedList>
<ListItem>
<Para>You need to temporarily disconnect the host server system from the
network for repair or for other reasons.
</Para>
</ListItem>
<ListItem>
<Para>You no longer want the current host system to function as a CDS
server.
</Para>
</ListItem>
<ListItem>
<Para>You want to move the clearinghouse to a server system that is physically
closer on the network to the user groups and applications that use the
information contained in the clearinghouse.
</Para>
</ListItem>
</ItemizedList>
<Para>To relocate a clearinghouse, follow these steps:
</Para>
<OrderedList>
<ListItem>
<Para>Disassociate the clearinghouse from the server where it is currently running.
</Para>
</ListItem>
<ListItem>
<Para>Copy the clearinghouse database files from their current location
(source server system) to their new location (target server system).
</Para>
</ListItem>
<ListItem>
<Para>Create a new clearinghouse on the target server system by using the
same name that was
used on the source server system from which you copied the database files.
</Para>
</ListItem>
</OrderedList>
<Sect2 Id="AGCC.CDSRST.div.16">
<Title>Dissociating a Clearinghouse from Its Host Server System</Title>
<IndexTerm Id="AGCC.CDSRST.indx.27">
<Primary><Command>dcecp</Command> commands</Primary>
<Secondary><Literal>clearinghouse disable</Literal></Secondary>
</IndexTerm>
<Para>Whenever a CDS server starts, one of the tasks the server software
performs is to start its clearinghouse (or clearinghouses).  The server
performs this task automatically by examining a
list of the clearinghouses that are resident on the system. 
Before you relocate a clearinghouse, use the <Command>dcecp</Command>
<Literal>clearinghouse disable</Literal> command to update the clearinghouse files and
ensure that the files are consistent before you copy them to the target
server.
</Para>
<Para><?sml-need 4>The <Literal>clearinghouse disable</Literal> command also removes, from the source server's
internal memory, knowledge of the clearinghouse that you specify.  This
ensures that the relocated
clearinghouse is not automatically started at the source server during server
restarts.
</Para>
<Para>To use the
<Literal>clearinghouse disable</Literal>
command, you must have write permission to the server on which the
clearinghouse resides.
</Para>
<Para>The following example command removes knowledge of clearinghouse
<Filename>/.:/Chicago2_CH</Filename>
from the memory of its host server:
</Para>
<InformalExample>
<Para><ProgramListing>dcecp> <Literal>clearinghouse disable  /.:/Chicago2_CH
</Literal>
dcecp> 
</ProgramListing></Para>
</InformalExample>
</Sect2>
<Sect2 Id="AGCC.CDSRST.div.17">
<Title>Copying the Clearinghouse Database Files to the Target Server System</Title>
<Para>After you disable the clearinghouse and remove knowledge of the
clearinghouse from the host server, you must copy the clearinghouse
database files to a specific location on the new host server system.
</Para>
<Para>A clearinghouse database consists of the following three files:
</Para>
<ItemizedList>
<ListItem>
<Para><Symbol Role="Variable">clearinghouse-name</Symbol><Literal>.checkpoint</Literal><Symbol Role="Variable">nnnnnnnn</Symbol>
</Para>
</ListItem>
<ListItem>
<Para><Symbol Role="Variable">clearinghouse-name</Symbol><Literal>.tlog</Literal><Symbol Role="Variable">nnnnnnnn</Symbol>
</Para>
</ListItem>
<ListItem>
<Para><Symbol Role="Variable">clearinghouse-name</Symbol><Literal>.version</Literal>
</Para>
</ListItem>
</ItemizedList>
<Para>where
<Symbol Role="Variable">nnnnnnnn</Symbol>
represents an 8-digit number.
</Para>
<Para>You should verify the existence
of these files before you
attempt to copy them to the new host system.  
(See the &DCEAi; and the &DCEPg; for the full pathnames of all CDS files.)
</Para>
<Note>
<Para>You may sometimes find two
<Literal>.checkpoint</Literal><Symbol Role="Variable">nnnnnnnn</Symbol> files in the directory.  This can
happen as a result of a system crash or other interruption during the
clearinghouse's most recent checkpoint operation.  If you do find two files,
copy both of them to the target server system.  The server software 
that is on that system automatically 
reconciles any problem that may exist as soon
as the clearinghouse is enabled at the target server.
</Para>
</Note>
<Para>To move the database files to the new CDS server, use the <Command>ftp</Command>
utility or a similar network file transfer utility.  Copy the three
database files from the existing server host to the new CDS server
host.  The directory where the files reside on the old and new CDS
server is <Symbol Role="Variable">dcelocal</Symbol><Filename>/var/directory/cds</Filename>.
<!-- .iS-->
<!-- \*Cdcecp> cp /.:/Chicago2_CH.checkpoint???  /.:/Chicago2_CH.tlog???? \*L/.:/Chicago2_CH.version\\-->
<!-- orion:/.:/Chicago2_CH\*O-->
<!-- .iE-->
<!-- .P-->
<!-- You can use the UNIX \*Lcd\*O command while remaining in the \*Ldcecp\*O-->
<!-- program, or spawn another shell with the UNIX \*Lshell\*O command and -->
<!-- perform the copy operation in the new shell.-->
</Para>
</Sect2>
<Sect2 Id="AGCC.CDSRST.div.18">
<Title>Starting the Clearinghouse on the Target Server</Title>
<Para><IndexTerm Id="AGCC.CDSRST.indx.28">
<Primary><Command>dcecp</Command> commands</Primary>
<Secondary><Literal>clearinghouse create</Literal></Secondary>
</IndexTerm>After copying the clearinghouse database files to the appropriate location
on the target server system, use the
<Literal>clearinghouse create </Literal>
command to start the clearinghouse at the new location.  Make sure that
you specify the same clearinghouse name that was used at its original (source)
location.  After you enter the command, the server detects the clearinghouse
files, adds knowledge of them to its memory, then starts the clearinghouse.
</Para>
<Para>To use the <Literal>clearinghouse create</Literal>
command for the purpose of relocating a clearinghouse, you must have write
permission to the server on which you intend to relocate the clearinghouse.
</Para>
<Para>In the preceding example, the database files for clearinghouse
<Filename>/.:/Chicago2_CH</Filename>
were successfully copied to a server system named
<Literal>orion</Literal>.  The following command, which is issued on
<Literal>orion</Literal>, relocates the clearinghouse named
<Filename>/.:/Chicago2_CH</Filename>
on that server:
</Para>
<InformalExample>
<Para><ProgramListing>dcecp> <Literal>clearinghouse create  /.:/Chicago2_CH
</Literal>
dcecp> 
</ProgramListing></Para>
</InformalExample>
<IndexTerm Id="AGCC.CDSRST.indx.29" SpanEnd="AGCC.CDSRST.indx.26">
</Sect2>
</Sect1>
<Sect1 Id="AGCC.CDSRST.div.19">
<Title>Deleting a Clearinghouse</Title>
<IndexTerm Id="AGCC.CDSRST.indx.30">
<Primary>clearinghouses</Primary>
<Secondary>deleting</Secondary>
</IndexTerm>
<Para>You may need to delete a clearinghouse from the server system on
which it resides when
</Para>
<ItemizedList>
<ListItem>
<Para>The system is scheduled for reallocation or removal from your network.
</Para>
</ListItem>
<ListItem>
<Para>You no longer want the system to function as a CDS server.
</Para>
</ListItem>
</ItemizedList>
<Sect2 Id="AGCC.CDSRST.div.20">
<Title>Before You Delete a Clearinghouse</Title>
<Para>Before you attempt to delete a clearinghouse,
make sure of the following:
</Para>
<ItemizedList>
<ListItem>
<Para>The clearinghouse is known to the server.
</Para>
</ListItem>
<ListItem>
<Para>The clearinghouse does not store a master replica.
</Para>
</ListItem>
</ItemizedList>
<Para>When you clear a clearinghouse, the server on which the clearinghouse
was running no longer has information about the clearinghouse in its internal
memory.  If you subsequently try to delete the clearinghouse, CDS will not
find it and will return a message that it does not exist.  Before you can
delete a cleared clearinghouse, you must recreate it using the
<Literal>clearinghouse create</Literal> command.  
</Para>
<Para>CDS does not allow you to delete a clearinghouse that contains a
directory's master replica.  Before you delete such a clearinghouse, you
must designate another replica in that directory's replica set as the master
replica.  If no other replicas of the directory exist, create a
read-only replica at another clearinghouse and then designate
it as the directory's new master replica before you delete the original
master replica from the clearinghouse.  (See Section 21.2
for instructions on modifying a directory's replica set.) 
</Para>
</Sect2>
<Sect2 Id="AGCC.CDSRST.div.21">
<Title>Permissions for Deleting a Clearinghouse</Title>
<Para>The following permissions are required for deleting a clearinghouse:
</Para>
<ItemizedList>
<ListItem>
<Para>You need write and delete permissions to the clearinghouse, and administer
permission to all of the directories that store replicas in the clearinghouse.
</Para>
</ListItem>
<ListItem>
<Para>The server principal needs delete permission to the associated
clearinghouse object entry, and administer
permission to all directories that store replicas in the clearinghouse.
</Para>
</ListItem>
</ItemizedList>
</Sect2>
<Sect2 Id="AGCC.CDSRST.div.22">
<Title>Deleting a Clearinghouse</Title>
<Para><IndexTerm Id="AGCC.CDSRST.indx.31">
<Primary><Command>dcecp</Command> commands</Primary>
<Secondary><Literal>clearinghouse delete</Literal></Secondary>
</IndexTerm>Use the <Literal>clearinghouse delete</Literal> command to delete a clearinghouse.  The
command also deletes the
clearinghouse's associated clearinghouse object entry, 
and all read-only replicas from the clearinghouse.
</Para>
<Para>Clearinghouse deletion can take some time to complete.  CDS deletes a
clearinghouse only after successfully completing a skulk
of all directories that stored read-only replicas in the clearinghouse.
</Para>
<Para>The following example command deletes the <Filename>/.:/Paris2_CH</Filename> clearinghouse:
</Para>
<InformalExample>
<Para><ProgramListing>dcecp> <Literal>clearinghouse delete  /.:/Paris2_CH</Literal>
dcecp>
</ProgramListing></Para>
</InformalExample>
<IndexTerm Id="AGCC.CDSRST.indx.32" SpanEnd="AGCC.CDSRST.indx.30">
</Sect2>
</Sect1>
<Sect1 Id="AGCC.CDSRST.div.23">
<Title>Creating and Managing Hierarchical Cells</Title>
<IndexTerm Id="AGCC.CDSRST.indx.33">
<Primary>hierarchical cells</Primary>
<Secondary>creating</Secondary>
</IndexTerm>
<IndexTerm Id="AGCC.CDSRST.indx.34">
<Primary>cells</Primary>
<Secondary>creating hierarchical</Secondary>
</IndexTerm>
<Para>You can use CDS to connect independent cells into a <Symbol Role="Variable">hierarchical
cell</Symbol> configuration.  In this configuration, one cell's CDS acts
as a higher-level directory service to connect other independent
cells.  The cell whose CDS acts as the higher-level directory service
is known as a <Symbol Role="Variable">parent</Symbol> cell, while the cells connected through
the parent's CDS are known as <Symbol Role="Variable">child</Symbol> cells.  The cell at the
top of the hierarchy must be registered in a global directory
service, such as GDS or DNS, but the cells underneath it
do not need to be in order to communicate with each other.
</Para>
<Para>The next sections describe how to create a cell hierarchy,
how to add cells to an existing hierarchy, and the implications
of changing a cell's primary name when it is part of a hierarchical
cell configuration.
</Para>
<Note>
<Para>In order to create hierarchical cells or cell name aliases,
you need to use CDS 4.0 directories.
</Para>
</Note>
<Sect2 Id="AGCC.CDSRST.div.24">
<Title>Creating a Cell Hierarchy</Title>
<Para>The top-level cell in a hierarchical cell configuration must
be registered in a global directory service, either
GDS or DNS.  If you are creating a hierarchical cell configuration,
you need to have one cell registered in a global namespace and use it
as the topmost cell in the hierarchy.  All cells underneath this cell
in the hierarchy will share this cell's GDS or DNS name.
</Para>
<Para>To register a cell in a global directory service, perform the
following steps:
</Para>
<OrderedList>
<ListItem>
<Para>Establish a GDS or DNS name for the cell, as described
in the &DCEAi;.
</Para>
</ListItem>
<ListItem>
<Para>Run the DCE configuration program to configure the cell,
as described in the &DCEAi;.
</Para>
</ListItem>
<ListItem>
<Para>Define the cell in the GDS or DNS namespace, as described
in Chapter 22 of this guide.
</Para>
</ListItem>
</OrderedList>
<Para RevisionFlag="Changed">Once you have established one cell in a global namespace,
you can add one or more child cells to the CDS namespace of this
cell, then add one or more cells to those children's CDS namespaces,
and so on, depending upon how many levels you plan for your hierarchy.
The following sections describe how to add 
an existing (already configured) cell to a hierarchy.
<IndexTerm Id="AGCC.CDSRST.indx.35" SpanEnd="AGCC.CDSRST.indx.1">
<!--	-->
<?og-ChangeStart def,13576,R1.2.2,Removed addition of cell to hierarchy">
<!--	-->
<!--	|||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||-->
<!--	-->
<!--	   Adding a cell to a hierarchy is not implemented for 1.2.2-->
<!--	-->
<!--	   When it is eventually implemented, the procedure will differ-->
<!--	   from the text here.-->
<!--	-->
<!--	|||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||-->
<!--	-->
<!--	.H 3 "Adding a Cell to a Cell Hierarchy"-->
<!--	To add a cell as a child in a hierarchy, you must first-->
<!--	configure the cell as if it is the top cell in-->
<!--	the hierarchy.  In this case, however, you use a-->
<!--	placeholder GDS or DNS name for the cell because-->
<!--	it will change during the process of adding the cell-->
<!--	to the hierarchy.  You must then determine-->
<!--	the cell name of the child, which is a CDS name,-->
<!--	add that name as an alias for the child, and-->
<!--	then set it to the primary name of the child cell.-->
<!--	You can then connect the parent and child cell.-->
<!--	Perform all of these operations that-->
<!--	follow the initial cell configuration using the following steps:-->
<!--	.AL-->
<!--	.LI-->
<!--	Determine which cell in the hierarchy is to be the child cell's-->
<!--	parent.  A child cell has one and only one parent at any given time.-->
<!--	.LI-->
<!--	.ne 5-->
<!--	A child cell's primary name must always be composed of the-->
<!--	primary name of its parent.  Therefore, you must-->
<!--	run the \*Lgetcellname\*O command on the parent cell you have-->
<!--	selected to obtain the ``fully qualified'' primary name of-->
<!--	the cell; that is, its primary name beginning with the global-->
<!--	root prefix \*L/...\*O.  For example:-->
<!--	.iS-->
<!--	\*Cdcecp> \*Lgetcellname\*C-->
<!--	/.../coolco.com/northeast/marketing-->
<!--	.iE-->
<!--	.P-->
<!--	See the \*Lgetcellname(8dce)\*O reference-->
<!--	page for details about the \*Lgetcellname\*O command.-->
<!--	.LI-->
<!--	The other component of a child cell name is its CDS name.-->
<!--	Select a CDS name that will represent the child cell.-->
<!--	Note that, because both cell names and principal names-->
<!--	can be hierarchical, problems can occur when a child-->
<!--	cell name matches a principal name in the parent cell.-->
<!--	Consider, for example, a principal named \*Lme\*O-->
<!--	in a child cell named-->
<!--	\*L/.../coolco.com/northeast/marketing/inbound\*O.  The-->
<!--	principal object name is-->
<!--	.iS-->
<!--	/.../coolco.com/northeast/marketing/inbound/sec/principal/me-->
<!--	.iE-->
<!--	.P-->
<!--	A principal named \*Linbound/me\*O exists in the parent-->
<!--	cell \*L/.../coolco.com/northeast/marketing\*O.-->
<!--	The principal object name is-->
<!--	.iS-->
<!--	/.../coolco.com/northeast/marketing/sec/principal/inbound/me-->
<!--	.iE-->
<!--	.P-->
<!--	The fully qualified name of either of these principals is:-->
<!--	.iS-->
<!--	/.../coolco.com/northeast/marketing/inbound/me-->
<!--	.iE-->
<!--	.P-->
<!--	In this case, it is impossible to determine-->
<!--	in which cell, child or parent, the principal exists.-->
<!--	Is it the principal named \*Linbound/me\*O in the cell named-->
<!--	\*L/.../coolco.com/northeast/marketing\*O, or the principal -->
<!--	\*Lme\*O in the child cell \*L/.../coolco.com/northeast/marketing/inbound\*O?-->
<!--	.P-->
<!--	Consequently, you must ensure that the name you select does-->
<!--	not conflict with any principal names on the parent cell.  To test-->
<!--	whether or not the CDS name you select is the same-->
<!--	as a principal name on the parent, use the-->
<!--	\*Ldcecp principal show\*O command and specify-->
<!--	the CDS name you want to use for the child cell.-->
<!--	.P-->
<!--	If the program returns the error message-->
<!--	.oS-->
<!--	Error: Registry object not found-->
<!--	.oE-->
<!--	it means there is no principal named \*Lnortheast/marketing/inbound\*O-->
<!--	and it is safe to use it as a child cell name. -->
<!--	.LI-->
<!--	Use the \*Ldcecp cellalias create\*O to create-->
<!--	a cell name alias that represents the intended new primary-->
<!--	name for the cell.  Specify the child cell's fully qualified name,-->
<!--	which is of the form \*Vparent-fully-qualified-name\*L/\*Vchild-CDS-name\*O.-->
<!--	For example:-->
<!--	.iS-->
<!--	/.../C=US/O=BIGCO/OU=LEGAL/contracts/fineprint-->
<!--	.iE-->
<!--	.P-->
<!--	This command returns the names of any hosts in the cell-->
<!--	that it cannot contact.  You must modify the files-->
<!--	\*Vdcelocal/\*Ldce_cf.db\*O and \*Vdcelocal\*L/etc/security/pe_site\*O -->
<!--	on any hosts that the command is unable to contact, before proceeding -->
<!--	to the next step.-->
<!--	.LI-->
<!--	After \*Ldcecp cellalias create\*O has completed-->
<!--	(and you have fixed any hosts that the command-->
<!--	was unable to contact), use the \*Ldcecp host stop\*O-->
<!--	and \*Ldcecp host start\*O commands to stop and restart-->
<!--	all of the servers in the cell.-->
<!--	.LI-->
<!--	Use the \*Ldcecp cellalias set\*O command to set the-->
<!--	newly created cell name alias to be the child cell's-->
<!--	primary name.  This step changes the cell's name from the-->
<!--	placeholder GDS or DNS name you established during-->
<!--	initial cell configuration to the new child cell name.-->
<!--	.P-->
<!--	This command returns the names of any hosts in the cell-->
<!--	that it cannot contact.-->
<!--	You must modify the files \*Vdcelocal\*L/dce_cf.db\*O-->
<!--	and \*V/dcelocal\*L/etc/security/pe_site\*O -->
<!--	on any hosts that the command is unable-->
<!--	to contact before proceeding to the next step.-->
<!--	.LI-->
<!--	After \*Ldcecp cellalias set\*O has completed-->
<!--	(and you have fixed any hosts that the command-->
<!--	was unable to contact), use the \*Ldcecp host stop\*O-->
<!--	and \*Ldcecp host start\*O commands to stop and restart-->
<!--	all of the servers in the cell.-->
<!--	.LI-->
<!--	Establish cross-cell authentication between the child cell and its-->
<!--	parent.  To do this, you run the \*Ldcecp registry connect\*O-->
<!--	command on the child cell, as described-->
<!--	in Chapter 33.-->
<!--	.LI-->
<!--	.ne 3-->
<!--	Define the new child cell in the CDS-->
<!--	namespace of the parent.  You do this by running the-->
<!--	\*Ldcecp cdsalias connect\*O command in the child cell.-->
<!--	For example:-->
<!--	.oS-->
<!--	dcecp> \*Lcdsalias connect\*O-->
<!--	.oE-->
<!--	.P-->
<!--	See the \*Lcdsalias(8dce)\*O reference page for-->
<!--	a complete description of the \*Lcdsalias\*O object.-->
<!--	.P-->
<!--	In order to be able to run the \*Lcdsalias connect\*O-->
<!--	command successfully, you need administrative permission to the child-->
<!--	cell's root (\*L/.:\*O) directory, and the \*Lcds-server\*O-->
<!--	principal on the machine that contains the master replica-->
<!--	of the child cell's root directory needs insert permission-->
<!--	to the parent cell's root directory.-->
<!--	.P-->
<!--	The DCE administrator of the parent cell will need to modify-->
<!--	the root directory's ACL to give the \*Lcds-server\*O principal-->
<!--	on the \*L/.:\*O master replica machine in the child cell the proper-->
<!--	permissions.  There are several ways to accomplish this task.-->
<!--	One way is to modify the ACL so that the \*Lcds-server\*O-->
<!--	principal on the machine in the child cell where you-->
<!--	plan to run the \*Ldcecp cdsalias connect\*O command-->
<!--	has \*Li\*O permission to the parent cell's root.  For example,-->
<!--	the DCE administrator on the parent cell can use the \*Ldcecp-->
<!--	acl modify\*O command as follows:-->
<?og-ChangeStart def,13331,R1.2.2,fixed example but removed entire section anyway">
<!--	.iS-->
<!--	\*Cdcecp>\*L acl modify /.: -add {foreign_user \\-->
<!--	\*C> \*L/.../coolco.com/northeast/marketing/inbound/hosts/mr/cds-server -i}-->
<!--	\*Cdcecp>-->
<!--	.iE-->
<?og-ChangeEnd def,13331,R1.2.2,fixed example but removed entire section anyway">
<!--	.P-->
<!--	If you choose this method of granting permission to the parent cell's-->
<!--	root directory, the DCE administrator of the parent cell will-->
<!--	also need to edit the \*Vdcelocal\*L/etc/security/pe_site\*O file-->
<!--	on the machine within the parent cell that he or she is using to modify the-->
<!--	parent cell's \*L/.:\*O ACL to include the child cell's name.-->
<!--	This step is necessary to permit \*Ldcecp\*O to contact-->
<!--	the child cell's registry during the ACL modification process-->
<!--	(\*Ldcecp\*O needs to contact the registry in the child cell-->
<!--	to verify the foreign user).-->
<!--	Once the \*Lcdsalias connect\*O process-->
<!--	is complete, the parent cell's DCE administrator can remove-->
<!--	the child cell name from the \*Vdcelocal\*L/etc/security/pe_site\*O file.-->
<!--	.P-->
<!--	.ne 9-->
<!--	Another way to ensure the appropriate permission to the parent cell's-->
<!--	\*L/.:\*O directory is to modify its ACL to include the \*Lany_other\*O-->
<!--	type entry and the \*Lunauthenticated\*O mask entry.-->
<!--	This method grants unauthenticated insert permission to-->
<!--	the cell's root directory, so you should modify the ACL again-->
<!--	to remove the possibility for this kind of access after-->
<!--	you have finished adding the child cell to the hierarchy.  See -->
<!--	Section 28.2.5 for more details about these entries.-->
<!--	If you choose this method of granting permission, no modification -->
<!--	to a parent cell \*Lpe_site\*O file is necessary.-->
<!--	.LE-->
<!--	.P-->
<!--	Once the \*Lcdsalias connect\*O command successfully completes,-->
<!--	the cell is established as a member of the hierarchy.-->
<!--	.P-->
<!--	Note that the old name for the cell continues to exist-->
<!--	as a cell name alias so that cells outside the hierarchy-->
<!--	that previously communicated with the cell by using its old-->
<!--	name, and which do not know its new primary name, can still-->
<!--	reach it by using the old name.  For example, the old-->
<!--	cell name-->
<!--	.iS-->
<!--	\*L/.../fineprint.com\*O-->
<!--	.iE-->
<!--	.P-->
<!--	continues to exist as a cell name alias for the newly-->
<!--	created child cell-->
<!--	.iS-->
<!--	\*L/.../C=US/O=BIGCO/OU=LEGAL/contracts/fineprint\*O-->
<!--	.iE-->
<!--	.P-->
<!--	See Chapter 6 for more information on-->
<!--	creating cell name aliases and changing cell names-->
<!--	with the \*Ldcecp cellalias\*O command.  See the-->
<!--	\*Lcellalias(8dce)\*O reference page for a complete-->
<!--	description of \*Lcellalias\*O command syntax.-->
<?og-ChangeEnd def,13576,R1.2.2,Removed addition of cell to hierarchy"><?og-ChangeStart def,13576,R1.2.2,Removed primary cell renaming section">
<!-- -->
<!-- .H 3 "Changing Primary Cell Names in a Cell Hierarchy"-->
<!-- .iX "cells" "changing names in hierarchical"-->
<!-- .iX "hierarchical cells" "changing cell names in"-->
<!-- In a hierarchical cell configuration, a cell's fully qualified-->
<!-- primary name defines who its parent cell is; that is, if you-->
<!-- take the cell's fully qualified primary name and remove the-->
<!-- last simple name component, you now have the parent cell's fully qualified-->
<!-- primary name.  For example, if a child cell's fully qualified-->
<!-- primary name is-->
<!-- .iS-->
<!-- /.../coolco.com/northeast/sales/boston-->
<!-- .iE-->
<!-- .P-->
<!-- .ne 3-->
<!-- then its parent's fully qualified primary name is-->
<!-- .iS-->
<!-- /.../coolco.com/northeast/sales-->
<!-- .iE-->
<!-- .P-->
<!-- Parent and child primary names must always be synchronized;-->
<!-- that is, they must always be identical with the exception of-->
<!-- the last simple name for the hierarchical relationship to exist-->
<!-- between them.  Thus, in a hierarchical cell, you cannot change-->
<!-- a cell's primary name without affecting its relationship-->
<!-- to the hierarchy.-->
<!-- .P-->
<!-- If you change a child cell's primary name, you orphan-->
<!-- it from its parent.  At this point, the child is no longer-->
<!-- in the hierarchy.  If you want it to remain in the hierarchy,-->
<!-- you must make it a child of the cell whose primary name-->
<!-- it (the child cell) is now using.  For example, if a-->
<!-- child cell's primary name is-->
<!-- .iS-->
<!-- /.../goodco.com/northeast/sales/boston-->
<!-- .iE-->
<!-- and you change its primary name to-->
<!-- .iS-->
<!-- /.../goodco.com/northeast/marketing/boston-->
<!-- .iE-->
<!-- then you must add the cell as a child of the -->
<!-- \*L/.../goodco.com/northeast/marketing\*O cell-->
<!-- by running the \*Ldcecp\*O commands \*Lregistry connect\*O-->
<!-- and \*Lcdsalias connect\*O as described in the previous-->
<!-- section.-->
<!-- .P-->
<!-- Similarly, if you change the primary name of a parent,-->
<!-- you orphan all of its children unless you change each-->
<!-- child cell's primary name to be the parent's new primary name-->
<!-- plus the child cell's simple name.  If the parent's new primary name is a-->
<!-- former cell name alias that its children recognize,-->
<!-- you must run the \*Ldcecp cellalias set\*O command on-->
<!-- each of the children to establish the parent's new primary-->
<!-- name plus the child's simple name as the child's new primary name.-->
<!-- .P-->
<!-- Then, on each child, list the cell principal's primary name and-->
<!-- all of its aliases.  The cell principal's primary name must-->
<!-- match the cell's primary name, so you must change the-->
<!-- cell principal's primary name to be the same as the new primary cell name.-->
<!-- To do this, use the \*Ldcecp principal modify\*O command-->
<!-- with the \*L-alias no\*O option and specify the -->
<!-- new primary name.  For example:-->
<!-- .oS-->
<!-- dcecp> \*Lprincipal modify northeast/marketing/inbound/newname -alias no\*C-->
<!-- .oE-->
<!-- .P-->
<!-- .ne 4-->
<!-- If the parent's new primary name is not a name-->
<!-- that the children recognize as an alias for their parent,-->
<!-- you must take the following steps:-->
<!-- .AL-->
<!-- .LI-->
<!-- Create the new parent primary name/child simple name-->
<!-- combination as a cell name alias for the child.  Do this-->
<!-- in the child cell with the \*Ldcecp cellalias create\*O for each-->
<!-- child.-->
<!-- .LI-->
<!-- On each child, use the \*Ldcecp cellalias set\*O command-->
<!-- to establish this name as the child's new primary name.-->
<!-- .LI-->
<!-- On each child, change the cell principal's primary name to-->
<!-- the new primary cell name (as described earlier in this-->
<!-- section).-->
<!-- .LE-->
<!-- .P-->
<!-- See Chapter 6 for more information on-->
<!-- creating cell name aliases and changing cell names-->
<!-- with the \*Ldcecp cellalias\*O command.  See the-->
<!-- \*Lcellalias(8dce)\*O and \*Lprincipal(8dce)\*O-->
<!-- reference pages for a complete description of \*Lcellalias\*O-->
<!-- and \*Lprincipal\*O command syntax.-->
<!-- -->
<?og-ChangeEnd def,13576,R1.2.2,Removed primary cell renaming section">
<!-- -->
<!-- __________________________________________________________-->
<!-- -->
<!-- [This stuff might be implemented some time in the future.]-->
<!-- __________________________________________________________-->
<!-- -->
<!-- If you are planning to configure a new cell and you want-->
<!-- to add it as a child to an existing hierarchy,-->
<!-- follow these steps:-->
<!-- .AL-->
<!-- .LI-->
<!-- Determine which cell in the hierarchy is to be this child's-->
<!-- parent.  A child cell has one and only one parent at any given time.-->
<!-- .LI-->
<!-- Run the \*Lgetcellname\*O command on the parent cell you have-->
<!-- selected to obtain the ``fully qualified'' primary name of-->
<!-- the cell, that is, its primary name beginning with the global-->
<!-- root prefix \*L/...\*O.  For example:-->
<!-- .oS-->
<!-- getcellname-->
<!-- .br-->
<!-- /.../coolco.com/northeast/marketing-->
<!-- .oE-->
<!-- .P-->
<!-- See the \*Lgetcellname(8dce)\*O reference-->
<!-- page in the \*(Ar for details about the \*Lgetcellname\*O command.-->
<!-- .LI-->
<!-- Select a CDS name that will represent the child cell.-->
<!-- Note that because both cell names and-->
<!-- principal names can be hierarchical, problems can occur-->
<!-- when a child cell name matches a principal name in the-->
<!-- parent cell. (see "existing cells" section.  Same story).-->
<!-- Consequently, you must ensure that the name you select does not conflict-->
<!-- with any principal names on the parent cell.  To test-->
<!-- whether or not the CDS name you select is the same-->
<!-- as a principal name on the parent, use the-->
<!-- \*Ldcecp principal show\*O command and specify-->
<!-- the CDS name you want to use for the child cell.-->
<!-- For example:-->
<!-- .oS-->
<!-- dcecp> principal show northeast/marketing/inbound-->
<!-- Error: registry object not found-->
<!-- .oE-->
<!-- .P-->
<!-- .LI-->
<!-- When you begin the initial cell configuration process, specify-->
<!-- the child cell's fully qualified name to the DCE configuration-->
<!-- program at the ``cellname'' prompt.  The child's fully qualified-->
<!-- name is \*Vparent-fully-qualified-name\*L/\*Vchild-CDS-name\*O.-->
<!-- Append the child cell's CDS name to the fully-qualified primary-->
<!-- name of the parent cell.  This is the name you specify.-->
<!-- For example, if \*Linbound\*O is the child cell's-->
<!-- CDS name, and \*L/.../coolco.com/northeast/marketing\*O is the parent-->
<!-- cell's name, then \*L/.../coolco.com/northeast/marketing/inbound\*O-->
<!-- represents the fully-qualified name of the child cell.-->
<!-- .LI-->
<!-- After you have configured the cell, you must establish-->
<!-- cross-cell authentication between the child cell and its-->
<!-- parent.  To do this, you run the \*Ldcecp registry connect\*O-->
<!-- command on both the parent cell and the child cell, as described-->
<!-- in Chapter 33 of this book.-->
<!-- .LI-->
<!-- Finally, you must define the new child cell in the CDS-->
<!-- namespace of the parent.  You do this by running the-->
<!-- \*Ldcecp cdsalias connect\*O command in the child cell.-->
<!-- For example:-->
<!-- .oS-->
<!-- dcecp> cdsalias connect-->
<!-- .oE-->
<!-- .P-->
<!-- (same story as existing cell connect)-->
<!-- .LE-->
<!-- .P-->
<!-- Once the \*Lcdsalias connect\*O command successfully completes,-->
<!-- the cell is established as a member of the hierarchy.  Note that-->
<!-- the child cell name you specified to the DCE configuration-->
<!-- program becomes the child cell's primary name.-->
<!-- .iX "-]" "namespace" "restructuring"-->
</Para>
</Sect2>
</Sect1>
</Chapter>
<!--+ 10/31/96 16:05:54
    | tagMorph:  $Id: 10_cds_restruct.sgm,v 1.1.2.10 1996/12/04 22:48:34 carrig Exp $
    | tagMorph library:  $Id: 10_cds_restruct.sgm,v 1.1.2.10 1996/12/04 22:48:34 carrig Exp $
    | sml-to-docbook:  1.24
    +-->
