<!--
# @OSF_COPYRIGHT@
# 
# 
# HISTORY
# $Log: 5_multicell.sgm,v $
# Revision 1.1.2.11  1996/12/17  17:34:49  willie
# 	Made 1.2.1 become 1.2.2, per CR 12717
# 	[1996/12/17  17:34:37  willie]
#
# Revision 1.1.2.10  1996/12/04  22:49:11  carrig
# 	{enh,R1.2.2}
# 	JC's edits
# 	[1996/12/04  22:46:59  carrig]
# 
# Revision 1.1.2.9  1996/11/29  20:20:48  carrig
# 	{enh,R1.2.2}
# 	Finished edit changes; must scale graphics
# 	[1996/11/29  20:17:20  carrig]
# 
# Revision 1.1.2.8  1996/11/27  21:43:33  carrig
# 	{enh,R1.2.2}
# 	More editor's comments
# 	[1996/11/27  21:41:37  carrig]
# 
# 	{enh,R1.2.2}
# 	More editor's comments
# 	[1996/11/27  21:28:23  carrig]
# 
# Revision 1.1.2.7  1996/11/26  21:45:09  carrig
# 	{enh,R1.2.2}
# 	Putting in editor's comments
# 	[1996/11/26  21:40:48  carrig]
# 
# Revision 1.1.2.6  1996/11/25  21:51:15  carrig
# 	{enh,R1.2.2}
# 	Started to put in editor's comments
# 	[1996/11/25  21:49:17  carrig]
# 
# Revision 1.1.2.5  1996/11/07  20:43:25  weir
# 	Cleaned up history
# 	[1996/11/07  20:41:35  weir]
# 
# Revision 1.1.2.4  1996/11/06  20:40:34  carrig
# 	{enh,R1.2.2}
# 	OK for editing
# 	[1996/11/06  20:38:03  carrig]
# 
# Revision 1.1.2.3  1996/11/05  18:58:47  carrig
# 	{enh,R1.2.2}
# 	Second pass
# 	[1996/11/05  18:55:32  carrig]
# 
# Revision 1.1.2.2  1996/11/04  22:03:40  carrig
# 	{enh,R1.2.2}
# 	First pass at corrections
# 	[1996/11/04  22:00:13  carrig]
# 
# Revision 1.1.2.1  1996/11/01  18:20:25  wardr
# 	{edit,R1.2.2}
# 	Initial checkin after sgml conversion
# 	[1996/11/01  18:17:55  wardr]
# 
# Revision 1.1.1.2  1996/11/01  18:17:55  wardr
# 	{edit,R1.2.2}
# 	Initial checkin after sgml conversion
# 
# $EndLog$
-->
<!---->
<!-- Fragment document type declaration subset:
ArborText, Inc., 1988-1993, v.4001
<!DOCTYPE Book PUBLIC "-//Davenport//DTD DocBook V2.4//EN" [
<!ENTITY AGCC.SECMC.ent.1 SYSTEM "eps/5_multi_10.ps" NDATA eps>
<!ENTITY AGCC.SECMC.ent.2 SYSTEM "eps/5_multi_20.ps" NDATA eps>
<!ENTITY AGCC.SECMC.ent.3 SYSTEM "eps/5_multi_30.ps" NDATA eps>
<!ENTITY AGCC.SECMC.ent.4 SYSTEM "eps/5_multi_40.ps" NDATA eps>
<!ENTITY AGCC.SECMC.ent.5 SYSTEM "eps/5_multi_35.ps" NDATA eps>
<!ENTITY AGCC.SECMC.ent.6 SYSTEM "eps/5_multi_60.ps" NDATA eps>
<!ENTITY AGCC.SECMC.ent.7 SYSTEM "eps/5_multi_70.ps" NDATA eps>
]>
-->
<!---->
<!-- COPYRIGHT NOTICE-->
<!-- Copyright (c) 1990, 1991, 1992, 1993 Open Software Foundation, Inc.-->
<!-- ALL RIGHTS RESERVED (DCE).  See the file named COPYRIGHT.DCE in the-->
<!-- src directory for the full copyright text.-->
<!---->
<!---->
<!-- HISTORY-->
<!-- Revision 1.1.10.2  1996/09/19  17:11:53  sherman-->
<!-- 	{def,13575,R1.2.2}-->
<!-- 	Added and fixed various dcecp commands-->
<!-- 	[1996/09/19  17:11:17  sherman]-->
<!---->
<!-- Revision 1.1.10.1  1996/07/17  19:08:38  sherman-->
<!-- 	{def,13498,R1.2.2}-->
<!-- 	maxtktrenew not used by DCE-->
<!-- 	[1996/07/17  19:08:03  sherman]-->
<!-- -->
<!-- Revision 1.1.8.1  1996/03/11  14:40:23  weir-->
<!-- 	Updated transitive trust disclaimer note-->
<!-- 	[1996/03/11  14:39:50  weir]-->
<!-- -->
<!-- Revision 1.1.6.17  1995/05/25  19:08:14  rcb-->
<!-- 	PRENTICE HALL reformat: *really* last change-->
<!-- 	[1995/05/25  14:05:49  rcb]-->
<!-- -->
<!-- 	PRENTICE HALL reformat: final changes-->
<!-- 	[1995/05/25  13:24:51  rcb]-->
<!-- -->
<!-- 	PRENTICE HALL reformat; minor changes-->
<!-- 	[1995/05/08  17:04:33  rcb]-->
<!-- -->
<!-- 	PRENTICE HALL reformat - index entries, odds and ends-->
<!-- 	[1995/03/27  19:51:05  rcb]-->
<!-- -->
<!-- 	PRENTICE HALL reformat-->
<!-- 	[1995/03/16  16:31:17  rcb]-->
<!-- -->
<!-- 	experimenting with figures-->
<!-- 	[1995/03/14  17:11:28  rcb]-->
<!-- -->
<!-- 	PRENTICE HALL midway; need to fix figures-->
<!-- 	[1995/03/14  14:40:14  rcb]-->
<!-- -->
<!-- 	midway in PRENTICE HALL reformat-->
<!-- 	[1995/03/13  15:20:56  rcb]-->
<!-- -->
<!-- 	incorporated 1.1 edits-->
<!-- 	[1995/03/09  20:33:11  rcb]-->
<!-- -->
<!-- Revision 1.1.6.16  1995/03/09  20:08:00  willie-->
<!-- 	Fixded .pI lines-->
<!-- 	[1995/03/09  20:07:40  willie]-->
<!-- -->
<!-- Revision 1.1.6.15  1994/10/24  21:26:35  hal-->
<!-- 	Last Minute change to insert warning that Transitive trust did not make it-->
<!-- 	into 1.1.  See CR 12529-->
<!-- 	[1994/10/24  21:26:11  hal]-->
<!-- -->
<!-- Revision 1.1.6.14  1994/10/20  16:07:01  wardr-->
<!-- 	Merged with changes from 1.1.6.13-->
<!-- 	[1994/10/20  16:06:43  wardr]-->
<!-- -->
<!-- 	{edit R1.1}-->
<!-- 	Final GA release edits-->
<!-- 	[1994/10/20  16:02:05  wardr]-->
<!-- -->
<!-- Revision 1.1.6.13  1994/10/18  20:53:42  millette-->
<!-- 	(enh, 10055, R1.1)-->
<!-- 	HP review edits-->
<!-- 	[1994/10/18  20:53:16  millette]-->
<!-- -->
<!-- Revision 1.1.6.12  1994/10/18  19:21:26  millette-->
<!-- 	(enh, 10055, R1.1)-->
<!-- 	HP review edits-->
<!-- 	[1994/10/18  19:21:00  millette]-->
<!-- -->
<!-- Revision 1.1.6.11  1994/09/22  19:13:20  wardr-->
<!-- 	{edit R1.1}-->
<!-- 	fixed figure path problems-->
<!-- 	[1994/09/22  19:12:59  wardr]-->
<!-- -->
<!-- Revision 1.1.6.10  1994/09/21  15:25:30  millette-->
<!-- 	(enh, 10014, R1.1)-->
<!-- 	dcecp edits-->
<!-- 	[1994/09/21  15:24:54  millette]-->
<!-- -->
<!-- Revision 1.1.6.9  1994/06/10  15:39:22  millette-->
<!-- 	(enh, 10055, R1.1)-->
<!-- 	 Editorial correction-->
<!-- 	[1994/06/10  15:38:55  millette]-->
<!-- -->
<!-- Revision 1.1.6.8  1994/05/24  22:19:53  millette-->
<!-- 	(enh, 10055, R1.1)-->
<!-- 	Added note to effect that hierarchical cells-->
<!-- 	have not been impmlemented and the write up-->
<!-- 	in this section has not been reviewed.-->
<!-- 	[1994/05/24  22:19:28  millette]-->
<!-- -->
<!-- Revision 1.1.6.7  1994/05/24  21:28:51  millette-->
<!-- 	(enh, 10055, R1.1)-->
<!-- 	Added hierarchical cell information-->
<!-- 	[1994/05/24  21:28:17  millette]-->
<!-- -->
<!-- Revision 1.1.6.6  1994/05/15  02:50:15  steto-->
<!-- 	{edt, R1.1}-->
<!-- 	Changed some markup to improve formats of some information.-->
<!-- 	[1994/05/15  02:18:28  steto]-->
<!-- -->
<!-- Revision 1.1.6.5  1993/08/30  03:38:31  tmw-->
<!-- 	Added index entries for second version of master index.-->
<!-- 	[1993/08/30  03:35:52  tmw]-->
<!-- -->
<!-- Revision 1.1.6.4  1993/07/06  18:37:52  buckler-->
<!-- 	{edit, R1.0.2}-->
<!-- 	Prentice-Hall editorial changes.-->
<!-- 	[1993/07/06  18:18:55  buckler]-->
<!-- -->
<!-- Revision 1.1.6.3  1993/06/18  20:25:55  millette-->
<!-- 	Bug 8116: Fixes from Release Notes-->
<!-- 	[1993/06/18  20:24:54  millette]-->
<!-- -->
<!-- Revision 1.1.6.2  1993/06/01  18:25:06  millette-->
<!-- 	Prentice Hall edits-->
<!-- 	[1993/06/01  18:23:58  millette]-->
<!-- -->
<!-- Revision 1.1.4.7  1993/02/20  00:00:05  millette-->
<!-- 	Bug 7215: 1.0.2 review corrections. Typos only; no changed bars used-->
<!-- 	[1993/02/19  23:03:29  millette]-->
<!-- -->
<!-- Revision 1.1.4.6  1993/01/28  20:10:11  dbelch-->
<!-- 	Embedding copyright notice-->
<!-- 	[1993/01/28  18:46:32  dbelch]-->
<!-- -->
<!-- Revision 1.1.4.5  1993/01/27  17:03:18  buckler-->
<!-- 	Fixed cross-refs and figure calls for new book org-->
<!-- 	[1993/01/27  16:58:43  buckler]-->
<!-- -->
<!-- Revision 1.1.4.4  1992/09/25  15:58:54  millette-->
<!-- 	Bug 5044: 1) Changed krbgt to krbtgt. Change bars not used.-->
<!-- 	2) Changed current site in cell subcommand example to hamburg.com.-->
<!-- 	3) Ticket to certificate where rgy_edit uses certificate.  Change-->
<!-- 	bars not used.-->
<!-- 	[1992/09/25  15:57:22  millette]-->
<!-- -->
<!-- Revision 1.1.4.3  1992/08/26  13:00:57  weir-->
<!-- 	Test-->
<!-- 	[1992/08/26  13:00:19  weir]-->
<!-- -->
<!-- Revision 1.1.4.2  1992/08/25  21:25:33  weir-->
<!-- 	Moved to dce1.0.2doc-->
<!-- 	[1992/08/25  21:07:50  weir]-->
<!-- -->
<!-- Revision 1.1.2.5  1992/07/13  20:26:21  weir-->
<!-- 	Format fix.-->
<!-- 	[1992/07/13  20:25:49  weir]-->
<!-- -->
<!-- Revision 1.1.2.4  1992/06/04  22:09:00  millette-->
<!-- 	Bug 3792: Miscellaneous editorial and technical changes-->
<!-- 	[1992/06/04  21:37:01  millette]-->
<!-- -->
<!-- Revision 1.1.2.3  1992/05/20  15:27:37  millette-->
<!-- 	Bug 3023: Miscellaneous editorial corrections-->
<!-- 	[1992/05/20  14:48:05  millette]-->
<!-- -->
<!-- Revision 1.1.2.2  1992/04/30  15:29:57  millette-->
<!-- 	Bug 2771: miscellaneous editorial changes.  Change bars not used.-->
<!-- 	[1992/04/30  15:28:04  millette]-->
<!-- -->
<!-- Revision 1.1  1992/01/29  16:24:27  damon-->
<!-- 	Initial revision-->
<!-- -->
<!---->
<!-- (c) Copyright 1991, Open Software Foundation, Inc. ALL RIGHTS RESERVED-->
<!-- -->
<!-- ********************************************************************-->
<!--                                                                    *-->
<!-- HP/DIGITAL CONFIDENTIAL-->
<!-- Copyright (c) 1991 Hewlett-Packard Co. and Digital Equipment Corp.  -->
<!-- All rights reserved.-->
<!--                                                                    *-->
<!-- ********************************************************************-->
<!-- -->
<!-- -->
<Chapter Id="AGCC.SECMC.div.1">
<Title>Administering a Multicell Environment</Title>
<Para><IndexTerm Id="AGCC.SECMC.indx.1">
<Primary>accounts</Primary>
<Secondary>for foreign cells</Secondary>
</IndexTerm>
<IndexTerm Id="AGCC.SECMC.indx.2">
<Primary>cells</Primary>
<Secondary>access between</Secondary>
</IndexTerm>Previous chapters in this guide described the DCE administration
tasks that are performed within individual cells.  The administration
of a multicell environment, which is one in which principals from foreign
cells access objects in the local cell, has additional tasks and considerations
that arise from the interaction of principals across different cells.
</Para>
<Para>In fact, you can have two types
of system administrators: one for local cell administration and one
for intercell administration of the multicell environment.  If
you set up groups for the two types of administrators, you can set
the ACL for the <Filename>krbtgt</Filename>
<IndexTerm Id="AGCC.SECMC.indx.3">
<Primary><Filename>krbtgt</Filename> directory</Primary>
<Secondary>in multicell environment</Secondary>
</IndexTerm>
<IndexTerm Id="AGCC.SECMC.indx.4">
<Primary>ACLs</Primary>
<Secondary>permissions for <Filename>krbtgt</Filename> directory</Secondary>
</IndexTerm>directory, which contains cell principals, in the registry database to allow
updating only by the group of intercell administrators.  Be sure,
however, to allow all other users read access to the <Filename>krbtgt</Filename>
directory or intercell access will be denied to those users.  Note
that, if you protect the<Literal> krbtgt</Literal> directory in this way, ensure
that all directories below the <Filename>krbtgt</Filename> directory also have
the proper ACLs.  The easiest way to accomplish this is to change
the Object ACL and the Initial Creation ACLs on the 
<Filename>krbtgt</Filename> directory after the registry is created.  
</Para>
<Para>This chapter describes the trust relationships between cells that 
allow principals from foreign cells access to objects in your cell and vice 
versa.
</Para>
<Sect1 Id="AGCC.SECMC.div.2">
<Title>Trust Relationships</Title>
<!-- -->
<!-- -->
<Note>
<Para><Replaceable>The DCE Version 1.2.2 code does not provide support for the transitive trust
relationships discussed in this section.</Replaceable>
</Para>
</Note>
<!-- -->
<!-- -->
<Para><IndexTerm Id="AGCC.SECMC.indx.5">
<Primary>trust relationships</Primary>
</IndexTerm>
<IndexTerm Id="AGCC.SECMC.indx.6">
<Primary>principals</Primary>
<Secondary>accounts for foreign</Secondary>
</IndexTerm>To give explicit permission for principals in other cells to engage
in authenticated access to objects in your cell, you must establish
a trust relationship with that cell.  You do this using 
the <Command>dcecp registry connect</Command> command to create two special accounts: one in your cell's 
registry to represent the foreign
cell and one in the foreign cell's registry to represent
your cell.  Establishing these accounts indicates that you trust the
foreign cell's authentication service to correctly authenticate foreign
users, and, therefore, you consider all users from this cell to be
authenticated if they are marked as authenticated by the foreign cell's
authentication service.  
</Para>
<Para>Once the trust relationship is established, you
can control foreign principals' access to specific objects with ACL
entries, just as you do for principals in the local cell.  
The trust relationship also allows users in the foreign cell to log into
accounts in the local cell and vice versa.
</Para>
<Para>Two kinds of trust relationships allow  
principals in other cells to engage
in authenticated access to objects in your cell.  These 
relationships are <Symbol Role="Variable">direct trust relationships</Symbol>
and <Symbol Role="Variable">hierarchical transitive trust relationships</Symbol>.
Throughout this chapter the term <Symbol Role="Variable">transitive trust relationship</Symbol> 
is used to indicate the DCE implementation of hierarchical 
transitive trust relationships.  
</Para>
<Sect2 Id="AGCC.SECMC.div.3">
<Title>Direct Trust Relationships</Title>
<Para>In a direct trust relationship, two 
cells' authentication service share authentication keys and trust each other 
to authenticate principals from their respective cells.  
Therefore, both cells consider all users from each cell to be
authenticated if they are marked as authenticated by their 
respective authentication services.  The shared authentication keys 
are derived from a single password (one for each cell) that is used by 
all principals from one cell to be authenticated to the other cell. 
A direct trust relationship involves only two cells.   
<IndexTerm Id="AGCC.SECMC.indx.7">
<Primary>authentication service</Primary>
<Secondary>shared authentication keys</Secondary>
</IndexTerm>
<IndexTerm Id="AGCC.SECMC.indx.8">
<Primary>trust relationships</Primary>
</IndexTerm>
<IndexTerm Id="AGCC.SECMC.indx.9">
<Primary>transitive trust relationships</Primary>
</IndexTerm>
<IndexTerm Id="AGCC.SECMC.indx.10">
<Primary>direct trust relationships</Primary>
</IndexTerm></Para>
</Sect2>
<Sect2 Id="AGCC.SECMC.div.4">
<Title>Transitive Trust Relationships</Title>
<Para>A transitive trust relationship comes about as a result of a direct trust 
relationship.  In this relationship, cells in a direct trust relationship 
trust (with some constraints) each other's authentication service to authenticate 
principals not only from their respective cells but also from the cells with which 
they have direct trust relationships.  
A transitive trust relationship can involve three or more cells.  
A transitive trust relationship 
is illustrated in Figure 33-1.
</Para>
<Figure>
<Title>Transitive Trust Relationships</Title>
<Graphic Entityref="AGCC.SECMC.ent.1"></Graphic>
</Figure>
<!-- .pI security/security/figures/5_multi_10.ps 0 0 1-->
<!-- -->
<!-- NOTE TO DCE 1.2 WRITERS: Please check and revise, if necessary, all .FG-->
<!-- figure titles in this chapter (rcb)-->
<!-- -->
<Para>In this figure, cell A trusts peer cell B (the cell with which it has a 
direct trust relationship) to authenticate the principals in cell B
and to guarantee the authentication of the principals in cell B/C 
(the cell with which it has a transitive trust relationship).
</Para>
<Para>Because cell A trusts cell B's authentication service, it allows 
authenticated access to all principals whose authentication is 
guaranteed by cell B's authentication service.   
These authenticated principals include principals from cell B and 
principals from cell B/C.
</Para>
</Sect2>
<Sect2 Id="AGCC.SECMC.div.5">
<Title>Establishing Trust Relationships</Title>
<IndexTerm Id="AGCC.SECMC.indx.11">
<Primary><Command>registry connect</Command> command</Primary>
</IndexTerm>
<Para>Use the <Command>registry connect</Command> command to establish  
direct trust and transitive trust relationships. 
Note that, although you can create a direct trust relationship between any 
two cells, you can create a transitive trust relationship only for those 
cells connected by a transitive trust path.
</Para>
<Para><?sml-need 7>This command creates two special accounts:  
one in your cell's registry 
to represent the foreign cell, another in the foreign cell's registry to represent
your cell.  The command creates
the accounts' principals at the same time.  
Once the trust relationship is established, users in the foreign 
cell can log into
accounts in the local cell and vice versa.  You
control foreign principals' access to specific objects with ACL
entries, just as you do for principals in the local cell. 
</Para>
<Para>When the accounts are created, the <Command>registry connect</Command> command performs two tasks 
that you should be aware of.  First, it automatically generates <Replaceable>one</Replaceable> password
that is shared by both accounts.  This means that users who 
log into a cell with which their cell has a trust relationship are seen
as the same principal and share the same password. 
Second, the <Command>registry modify</Command> command generates a UNIX number that is shared by all
principals that are in a given foreign cell.  This shared UNIX number helps
prevent collision between the UNIX numbers of local and foreign principals
when objects on a local machine are accessed. 
</Para>
<Para>Within the registry and for the purposes of network access, principals
are identified by a UUID that represents their fully qualified names; 
for example, <Filename>/.../dresden.com/dce/users/mahler</Filename> for the principal 
<Literal>mahler</Literal>.  However, the local operating system on a
local machine identifies principals by UNIX number.  Because UNIX
numbers are not required to be unique across cells, it is possible
for two principals from different cells to have the same UNIX number. 
Thus, a foreign principal that is accessing files in the local cell could
have the same UNIX
number as the local principal and be seen by the local system
as the owner of the local user's files on the local machine. 
</Para>
<Para>Creating a UNIX number that is applied to every principal from a given
cell that accesses the local cell prevents this from occurring.  However,
you need to be aware that, because the foreign users all have the same
UNIX number, the very feature that prevents them from accessing the
local user's files allows them to access each other's files.  Because
each user from the same foreign cell is seen as the same user, every
file on the local machine that is owned by a foreign user can be accessed
by every other foreign user from the same foreign cell. 
<IndexTerm Id="AGCC.SECMC.indx.12">
<Primary>UNIX IDs</Primary>
<Secondary>for foreign users</Secondary>
</IndexTerm></Para>
</Sect2>
<Sect2 Id="AGCC.SECMC.div.6">
<Title>Constraints on Transitive Trust Relationships</Title>
<Para>To prevent the widespread proliferation of trust relationships that could
result in unwieldy administrative burdens and weakened security, the 
DCE Security Service imposes the following three rules on transitive trust 
relationships:
</Para>
<OrderedList>
<ListItem>
<Para>Any number of descendent cells can be traversed by a transitive 
trust relationship, and any number of ancestor cells can be traversed 
by a transitive trust relationship.
</Para>
</ListItem>
<ListItem>
<Para>No more than one direct trust peer relationship can be traversed by a transitive 
trust relationship. (A direct trust peer relationship is a direct trust relationship 
between cells that are neither ancestors 
nor descendants of each other in the 
naming hierarchy.) 
</Para>
</ListItem>
<ListItem>
<!-- Once a hierarchical trust relationship traverses -->
<!--a direct trust descendant and direct trust peer, it cannot -->
<!--traverse to an ancestor or descendant.  -->
<!--And conversely, -->
<Para>Once a hierarchical trust relationship traverses 
a direct trust ancestor and an optional 
direct trust peer, it cannot 
traverse to an ancestor of the peer cell.  
In other words, once a transitive trust 
path goes up and across, it cannot go up.
</Para>
</ListItem>
</OrderedList>
<Para>The ramifications of these rules are explained in the following paragraphs.
</Para>
<Para><Literal>Rule 1:
</Literal></Para>
<Para><Literal>Any number of descendent cells can be traversed in a hierarchical 
trust relationship, and any number of ancestor cells can be traversed 
by a transitive trust relationship.</Literal>
</Para>
<Para>For example, in Figure 33-2, peer Cells A and B have a direct trust 
relationship.  Cell A has a transitive trust relationship with cells 
B/C and B/C/D. 
</Para>
<?sml-need 2.75i>
<Figure>
<Title>Direct and Transitive Trust Relationships</Title>
<Graphic Entityref="AGCC.SECMC.ent.2"></Graphic>
</Figure>
<!-- .pI security/security/figures/5_multi_20.ps 0 0 1-->
<?sml-space .5>
<Para>The previous configuration also makes possible the
transitive trust relationship between B  
and cell B/C/D shown in Figure 33-3.
</Para>
<Figure>
<Title>Cell Traversal in Transitive Trust Relationships</Title>
<Graphic Entityref="AGCC.SECMC.ent.3"></Graphic>
</Figure>
<!-- .pI security/security/figures/5_multi_30.ps 0 0 1-->
<Para><Literal>Rule 2:
</Literal></Para>
<Para><Literal>No more than one direct trust peer relationship can be 
traversed by a transitive trust relationship.</Literal> 
</Para>
<Para><?sml-need 5>For example, in Figure 33-4, cells A, B, and C are peer cells.  Cell A has a 
direct trust peer relationship with cell B, and cell B has 
a direct trust peer relationship with cell C.  Cell A does not 
have a transitive trust relationship with 
cell C because to do so would traverse more than one direct trust peer 
relationship (A to B and B to C).
</Para>
<Figure>
<Title>Limited Direct Trust Peer Traversal in Transitive Trust</Title>
<Graphic Entityref="AGCC.SECMC.ent.4"></Graphic>
</Figure>
<!-- .pI security/security/figures/5_multi_40.ps 0 0 1-->
<Para>Note that it is not required to traverse a direct trust peer relationship to 
have a transitive trust relationship.  In Figure 33-5, no direct 
trust peer relationships are traversed.  In the figure, 
a transitive trust relationship exists between the following:
</Para>
<ItemizedList>
<ListItem>
<Para>B_Division and C_Division and C_organization
</Para>
</ListItem>
<ListItem>
<Para>C_Division and B_Division and B_organization  
</Para>
</ListItem>
</ItemizedList>
<Figure>
<Title>Transitive Trust Without Direct Trust Peer Traversal</Title>
<Graphic Entityref="AGCC.SECMC.ent.5"></Graphic>
</Figure>
<!-- .pI security/security/figures/5_multi_35.ps 0 0 1-->
<Para><!-- The following figure is a more complex illustration of this rule.  -->
<!-- .P-->
<!-- .ne 3i-->
<!-- .pI ../security/security/figures/5_multi_50.ps 0 0 1-->
<!-- ...\" .pI security/security/figures/5_multi_50.ps 0 0 1-->
<!-- .P-->
<!-- In this figure peer cells, A_Company, B_Company, and C_Company, -->
<!-- are connected by direct trust relationships.  There are transitive trust -->
<!-- relationships between the descendents of 1) the A_Company cell and the -->
<!-- B_Company cell, and 2) the B_Company cells and the C_Company cell.  -->
<!-- Because a transitive trust relationship would have to traverse more than -->
<!-- one direct trust peer relationship, there is no transitive trust relationship -->
<!-- between the A_Company cell and its descendents and the B_Company cell and -->
<!-- its descendents.-->
<!-- -->
</Para>
<Para><Literal>Rule 3:
</Literal></Para>
<Para><Literal>Once a hierarchical trust relationship traverses 
a direct trust ancestor and a direct trust peer, it cannot 
traverse to an ancestor of the cell.  </Literal>
</Para>
<Para>For example, consider Figure 33-6.  The A_Conglomerate cell
hierarchy and the B_Conglomerate cell are connected 
by direct trust relationships.  Additionally, 
there is a direct trust relationship between A_product in the A_Conglomerate 
hierarchy and B_product in the B_Conglomerate hierarchy.  
In this configuration, 
no transitive trust relationships are possible because they cannot 
traverse to an ancestor after traversing a direct trust peer.
</Para>
<Figure>
<Title>Limited Trust Traversal to Cell Ancestors</Title>
<Graphic Entityref="AGCC.SECMC.ent.6"></Graphic>
</Figure>
<!-- .pI security/security/figures/5_multi_60.ps 0 0 1-->
<?sml-space .5>
<Para>The type of trust relationship shown in this figure might 
be used by two companies that have a very limited agreement to cooperate on 
product development.  
<!--   -->
<!-- In the figure, the A_Conglomerate cell has a transitive trust -->
<!-- relationship with the B_Company cell, but it cannot traverse the -->
<!-- transitive trust path from the B_Company cell to the B_Conglomerate cell or -->
<!-- to the B_marketing cell.  -->
<!-- This is because the path  -->
<!-- first goes down to the A_Company cell and then over to the B_Company cell.  Because -->
<!-- this transitive trust relationship has traversed down to a trust descendant -->
<!-- (A_Company) and across to a trust peer (B_Company), -->
<!-- it cannot then continue by going up to B_Company's ancestor (the B_Conglomerate) -->
<!-- or down to B_Company's descendents (B_marketing and B_engineering).-->
<!-- .P-->
<!-- In the path labeled A, the A_Conglomerate cell has a transitive trust -->
<!-- relationship with the B_Company Cell, -->
<!-- but not with the B_Company cell's descendents.  This is because the path labeled A -->
<!-- first goes down to the A_Company cell and then over to the B_Company cell.  Because -->
<!-- this transitive trust relationship has traversed down to a trust descendant -->
<!-- (A_Company) and across to a trust peer (B_Company), -->
<!-- it cannot then go down again (to B_Company's descendants). -->
</Para>
<Para>Figure 33-7 shows another transitive trust path.
</Para>
<?sml-need 4i>
<Figure>
<Title>Alternate Trust Traversal to Cell Ancestors</Title>
<Graphic Entityref="AGCC.SECMC.ent.7"></Graphic>
</Figure>
<!-- .pI security/security/figures/5_multi_70.ps 0 0 1-->
<?sml-space .5>
<Para>In the path, the B_product cell has a transitive trust path up to its 
ancestor, B_Company, and from B_Company to A_Company.  But from 
A_company, the transitive trust path cannot continue up to 
A_Company's ancestor, 
although it can continue down to A_Company's descendants. 
Because 
this transitive trust relationship has traversed up to a trust ancestor 
(B_Company) and across to a trust peer (A_Company), 
it cannot then continue by going up to A_Company's ancestor (A_Conglomerate). 
This type of relationship might be used by two companies that have 
decided to combine operations at a very high level.
</Para>
<Para>Note that a principal accessing a foreign cell through transitive trust 
relationships is not authenticated by each cell transited 
in the trust path, but only by the target cell itself.  The authentication 
service in a transited cell simply gives the principal a ticket to 
the next cell in the path, stamping the ticket with the hierarchical 
name of the transited cell, until the principal acquires a ticket 
to the target cell.
</Para>
<Para><?sml-need 7>To determine whether or not to give a principal a ticket to 
the next cell in a transitive trust path, the authentication service 
in each transited cell examines the ticket and compares the 
last cell transited to the next 
cell in the path and applies the rules of transitive trust described in 
this section.  If the next cell to 
be transited is consistent with a valid transitive trust path, then 
the authentication service gives the principal a ticket to the next 
cell; otherwise, the authentication service refuses to issue a ticket.
</Para>
</Sect2>
</Sect1>
<Sect1 Id="AGCC.SECMC.div.7">
<Title>Creating Trust Relationships</Title>
<Para>To create peer-to-peer relationships, follow these steps:
</Para>
<OrderedList>
<ListItem>
<Para>Run the <Command>registry connect</Command> command to create cross-cell authentication accounts
(an account in your cell's registry and another account in the foreign
cell's registry).
</Para>
</ListItem>
<ListItem>
<Para>Optionally, use the <Command>account modify</Command> command to fine tune the attributes
of the account, which were assigned by default when the account was
created.  For example, the account's expiration date (<Literal>expdate</Literal> attribute) defaults to
<Literal>none</Literal>.  You may want to enter a date to
ensure that the account will be actively renewed after a period of time.
</Para>
</ListItem>
<ListItem>
<Para>Ensure that the system administrator
in the foreign cell changes the <Literal>acctvalid</Literal> flag of the account
that represents your cell to <Literal>yes</Literal> in order to indicate that the account 
is valid.  If one or both accounts are invalid,
no cross-cell communications can take place.
</Para>
</ListItem>
</OrderedList>
<Sect2 Id="AGCC.SECMC.div.8">
<Title>Command Options for the registry connect Command</Title>
<Para>When you use the <Command>registry connect</Command> command, you must supply the 
fully qualified name of the foreign cell with 
which you will establish a peer-to-peer
relationship.  This name is stripped of the full pathname, prefixed with
<Filename>krbtgt</Filename>, and used as the primary name of the account's principal.  For
example, if you enter a cell name of <Filename>/.../dresden.com</Filename>, the principal name
is <Filename>krbtgt/dresden.com</Filename>.  The unchanged cell name is stored as the
principal's full name.  
</Para>
<Para><?sml-need 3>Note that <Command>registry connect</Command> uses your local cell name for the primary name of the
local cell's account principal.  This name is stripped of the full pathname
and prefixed with <Filename>krbtgt</Filename>, just as the foreign cell name is.
</Para>
<Para><?sml-need 2>You can supply the following options to the <Command>registry connect</Command> command:  
</Para>
<VariableList RevisionFlag="Changed">
<?og-ChangeStart def, 13575,R1.2.2,Added registry connect command options">
<VarListEntry role="linebreak">
<Term><Option>acctvalid</Option>, <Option>facctvalid</Option></Term>
<ListItem>
<Para>The setting that marks an account as being valid. A valid local account   
(<Option>acctvalid</Option>) allows users from the foreign cell to log in to nodes in the   
local cell. A valid foreign account (<Option>facctvalid</Option>)  
allows users from the local cell to log in to nodes in the   
foreign cell. The default is <Literal>invalid</Literal> for each option.
<?og-ChangeEnd def, 13575,R1.2.2,Added registry connect command options"></Para>
</ListItem>
</VarListEntry>
<VarListEntry>
<Term><Option>expdate</Option></Term>
<ListItem>
<Para>The time and date that both the local and the foreign cell's account
expires, and the peer-to-peer relationship is ended, prohibiting any further
authenticated communications between principals in the two cells.  To
renew the account, change the date in this field.  The default is <Literal>none</Literal>. 
</Para>
</ListItem>
</VarListEntry>
<VarListEntry role="linebreak">
<Term><Option>facct</Option>, <Option>facctpw</Option></Term>
<ListItem>
<Para>The system administrator in the foreign cell must provide you with the name
and password of an account in the foreign cell.  
The foreign account 
must have the permissions that are required to create principals and accounts.  
You need the account to access the foreign registry in order to create the 
account that represents your cell in the foreign account's registry.  
The lifetime and creation quota of 
this account should be limited to only that necessary to complete the task.
</Para>
</ListItem>
</VarListEntry>
<VarListEntry role="linebreak">
<Term><Option>group</Option>, <Option>fgroup</Option></Term>
<ListItem>
<Para>The group name to be associated&ensp; with the&ensp; account in the 
local cell (<Option>group</Option>) and the foreign cell (<Option>fgroup</Option>).  
These groups have no
meaning for the accounts and are not associated with any users in the foreign
or local cell.  You must enter them because it is a requirement of the registry
that all accounts be associated with groups.  If the group does 
not exist, it will be created.  
</Para>
</ListItem>
</VarListEntry>
<VarListEntry>
<Term> <Option>mypwd</Option></Term>
<ListItem>
<Para>The <Command>registry connect</Command> command does not prompt you for a password
for the accounts that you are creating; it generates this password
randomly.  However, you must supply your password with the 
<Literal>mypw</Literal> option as to validate your identity. 
</Para>
</ListItem>
</VarListEntry>
<VarListEntry>
<Term><Option>org</Option>, <Option>forg</Option></Term>
<ListItem>
<Para>The organization name to be associated with the account in the 
local cell (<Option>org</Option>) and the foreign cell (<Option>forg</Option>).  These
organizations have no meaning for the accounts and are not associated with 
any users in the foreign or local cell.  You must enter them because it is a 
requirement of the registry that all accounts be associated with
organizations.  If the organization does not exist, it will be 
created. 
</Para>
</ListItem>
</VarListEntry>
</VariableList>
</Sect2>
<Sect2 Id="AGCC.SECMC.div.9">
<Title>Creating Cross-Cell Authentication Accounts Example</Title>
<Para>The following sample <Command>registry connect</Command> command 
is used to create an account for the foreign cell identified by
<Filename>/.../dresden.com</Filename>.  The local account is associated with the 
group named <Literal>cell_group_local</Literal>, the organization named 
<Literal>cell_group_dres</Literal>, and the organization named <Literal>cell_org_dres</Literal>.  
The expiration date for the accounts is allowed 
to default to <Literal>none</Literal>.
</Para>
<InformalExample>
<Para><ProgramListing>dcecp> <Literal>registry connect /.../dresden.com -facct cell_log -facctpw music \</Literal>  
> <Literal>-group cell_group_local -fgroup cell_group_dres \</Literal>  
> <Literal>-org cell_org_local -forg cell_org_dres -mypwd cell_admin </Literal>
dcecp>
</ProgramListing>
</Para>
</InformalExample>
<!--    -->
</Sect2>
<Sect2 Id="AGCC.SECMC.div.10" RevisionFlag="Changed">
<Title>The Accounts Created by the registry connect Command</Title>
<!---->
<IndexTerm Id="AGCC.SECMC.indx.13">
<Primary>quotas</Primary>
<Secondary>for creating registry objects</Secondary>
</IndexTerm>
<IndexTerm Id="AGCC.SECMC.indx.14">
<Primary>objects</Primary>
<Secondary>quotas for creating</Secondary>
</IndexTerm>
<Para>The accounts and principals that are
created by the <Command>registry connect</Command> command are given default attribute
values listed in Table 33-1.  These attributes 
apply to all foreign principals when they
access objects in your cell.  Likewise, the attributes of the account
created for your cell in the foreign cell apply to all principals in your
cell when they access objects in the foreign cell.  
</Para>
<?og-ChangeStart def, 13498,R1.2.2,maxtktrenew not used by DCE">
<?sml-need 6i>
<Table Frame="all" Remap="center" Orient="Port">
<Title>Default Attribute Values of Cross-Cell Authorization Principals and Accounts</Title>
<TGroup Rowsep="1" Colsep="1" Cols="2">
<ColSpec Rowsep="1" Colsep="1" Align="Left" Colwidth="186*" Colname="col1" Colnum="1">
<ColSpec Rowsep="1" Align="Left" Colwidth="269*" Colname="col2" Colnum="2">
<THead>
<Row>
<Entry Rowsep="1"><Literal>Information</Literal></Entry>
<Entry Rowsep="1"><Literal>Meaning </Literal></Entry>
</Row>
</THead>
<TBody>
<Row>
<Entry><Literal>Account Principal Name</Literal></Entry>
<Entry>The local
cell name for the local cell's account, or foreign cell name for
the foreign cell's account stripped of its full pathname and prefixed
with <Filename>krbtgt</Filename>.
</Entry>
</Row>
<Row>
<Entry><Literal>fullname</Literal></Entry>
<Entry>The cell's pathname.</Entry>
</Row>
<Row>
<Entry><Literal>quota</Literal></Entry>
<Entry>Set to <Literal>none</Literal>.  This quota applies to all principals who use the cross-cell
authentication accounts to access objects in foreign cells. 
For example, if you change the object creation quota to
10, the total number of objects that can be created in your cell's
registry by all foreign users who use the account to access your cell
cannot exceed 10.  It is not 10 per foreign principal.  The object
creation quota that is set for your cell's account in the foreign cell places
the same restriction on the number of objects that your cell's principals
can create in the foreign cell's registry.
</Entry>
</Row>
<Row>
<Entry><Literal>description</Literal>, <Literal>home</Literal>, <Literal>shell</Literal></Entry>
<Entry>Set to blank.</Entry>
</Row>
<Row>
<Entry><Literal>server</Literal></Entry>
<Entry>Set to <Literal>yes</Literal>; that
is, the account is a server that can engage in authenticated communications.
</Entry>
</Row>
<Row>
<Entry><Literal>client</Literal></Entry>
<Entry>Set to <Literal>no</Literal>.</Entry>
</Row>
<Row>
<Entry><Literal>pwdvalid</Literal></Entry>
<Entry>Set to <Literal>yes</Literal> (valid).</Entry>
</Row>
<Row>
<Entry><Literal>acctvalid</Literal></Entry>
<Entry>Set to <Literal>no</Literal> (not valid) unless the <Option>acctvalid</Option> and <Option>facctvalid</Option> options are used.
</Entry>
</Row>

<Row>
<Entry><Literal>postdatedtkt</Literal></Entry>
<Entry>Set to <Literal>yes</Literal>; that is, the account can be issued tickets
with a start time in the future. 
</Entry>
</Row>
<Row>
<Entry><Literal>forwardabletkt</Literal></Entry>
<Entry>Set to <Literal>yes</Literal>; that is, 
the account can be issued a new ticket-granting ticket with a 
network address that is different than the present ticket-granting ticket.
</Entry>
</Row>
<Row>
<Entry><Literal>renewabletkt</Literal></Entry>
<Entry>Set to <Literal>yes</Literal>; that is, the
account's tickets can be renewed.  
</Entry>
</Row>
<Row>
<Entry><Literal>proxiabletkt</Literal></Entry>
<Entry>Set to <Literal>yes</Literal>; that is, the
account can be issued tickets with a different network address than
the present tickets.
</Entry>
</Row>
<Row>
<Entry><Literal>dupkey</Literal></Entry>
<Entry>Set to <Literal>yes</Literal>; that is, 
the account's ticket can have duplicate keys. 
</Entry>
</Row>
<Row>
<Entry><Literal>goodsince</Literal></Entry>
<Entry>Set to the date that the account was created.</Entry>
</Row>
<Row>
<Entry><Literal>maxtktlife</Literal></Entry>
<Entry>Set to the registry policy.</Entry>
</Row>
<Row>
<Entry><Literal>maxtktrenew</Literal></Entry>
<Entry>Set to the registry policy. 
The <Literal>maxtktrenew</Literal> attribute 
is not currently used by the DCE; any use
of this option is unsupported at the present time.
</Entry>
</Row>
</TBody>
</TGroup>
</Table>
<?og-ChangeEnd def, 13498,R1.2.2,maxtktrenew not used by DCE">
</Sect2>
</Sect1>
<Sect1 Id="AGCC.SECMC.div.11">
<Title>Modifying Cross-Cell Authentication Accounts</Title>
<Para><IndexTerm Id="AGCC.SECMC.indx.15">
<Primary>password</Primary>
<Secondary>changing in cross-cell authorization accounts</Secondary>
</IndexTerm>You can change the account that is created by the <Command>registry connect</Command> command
at any time using the standard <Command>dcecp account</Command> operations. 
However, you should be aware of the following cautions.
</Para>
<Para>Never set the account's <Literal>pwdvalid</Literal> attribute to <Literal>no</Literal> (invalid).  
For standard
accounts, setting the attribute to <Literal>no</Literal> causes the 
user to be prompted to change their passwords at the
next login.  Passwords for cross-cell authentication accounts,
however, are shared by the authentication services in two cells. 
If you change one, this synchronization is destroyed and cross-cell
communications end.  If you want to change the passwords 
that are shared by the
authentication services, you must rerun the <Command>registry connect</Command> command
to recreate the accounts and create the properly synchronized passwords.
</Para>
<Para>Generally, do not delete the accounts or the account's principals
unless you are breaking the peer-to-peer relationship with
the cell.  If one of the accounts is deleted, you must run the <Command>registry connect</Command>
command to recreate both accounts and restore the peer-to-peer
relationship. 
<IndexTerm Id="AGCC.SECMC.indx.16">
<Primary>accounts</Primary>
<Secondary>for foreign cells</Secondary>
</IndexTerm>
<IndexTerm Id="AGCC.SECMC.indx.17">
<Primary>principals</Primary>
<Secondary>accounts for foreign</Secondary>
</IndexTerm>
<IndexTerm Id="AGCC.SECMC.indx.18">
<Primary>cells</Primary>
<Secondary>access between</Secondary>
</IndexTerm></Para>
</Sect1>
</Chapter>
<!--+ 10/31/96 16:05:54
    | tagMorph:  $Id: 5_multicell.sgm,v 1.1.2.11 1996/12/17 17:34:49 willie Exp $
    | tagMorph library:  $Id: 5_multicell.sgm,v 1.1.2.11 1996/12/17 17:34:49 willie Exp $
    | sml-to-docbook:  1.24
    +-->
