<!--
# @OSF_COPYRIGHT@
# 
# 
# HISTORY
# $Log: 14_audit.sgm,v $
# Revision 1.1.2.11  1996/12/04  22:48:44  carrig
# 	{enh,R1.2.2}
# 	JC's edits
# 	[1996/12/04  22:46:23  carrig]
#
# Revision 1.1.2.10  1996/12/03  22:04:02  carrig
# 	{enh,R1.2.2}
# 	Scaled graphics
# 	[1996/12/03  22:01:07  carrig]
# 
# Revision 1.1.2.9  1996/11/29  20:20:13  carrig
# 	{enh,R1.2.2}
# 	Finished edit changes; must scale graphics
# 	[1996/11/29  20:16:40  carrig]
# 
# Revision 1.1.2.8  1996/11/27  21:43:09  carrig
# 	{enh,R1.2.2}
# 	More editor's comments
# 	[1996/11/27  21:41:06  carrig]
# 
# 	{enh,R1.2.2}
# 	More editor's comments
# 	[1996/11/27  21:27:52  carrig]
# 
# Revision 1.1.2.7  1996/11/26  21:44:44  carrig
# 	{enh,R1.2.2}
# 	Putting in editor's comments
# 	[1996/11/26  21:40:18  carrig]
# 
# Revision 1.1.2.6  1996/11/25  21:50:54  carrig
# 	{enh,R1.2.2}
# 	Started to put in editor's comments
# 	[1996/11/25  21:48:45  carrig]
# 
# Revision 1.1.2.5  1996/11/07  20:43:02  weir
# 	Cleaned up history
# 	[1996/11/07  20:41:03  weir]
# 
# Revision 1.1.2.4  1996/11/06  20:40:11  carrig
# 	{enh,R1.2.2}
# 	OK for editing
# 	[1996/11/06  20:37:33  carrig]
# 
# Revision 1.1.2.3  1996/11/05  18:58:25  carrig
# 	{enh,R1.2.2}
# 	Second pass
# 	[1996/11/05  18:55:01  carrig]
# 
# Revision 1.1.2.2  1996/11/04  22:03:18  carrig
# 	{enh,R1.2.2}
# 	First pass at corrections
# 	[1996/11/04  21:59:43  carrig]
# 
# Revision 1.1.2.1  1996/11/01  18:19:45  wardr
# 	{edit,R1.2.2}
# 	Initial checkin after sgml conversion
# 	[1996/11/01  18:17:32  wardr]
# 
# Revision 1.1.1.2  1996/11/01  18:17:32  wardr
# 	{edit,R1.2.2}
# 	Initial checkin after sgml conversion
# 
# $EndLog$
-->
<!---->
<!-- Fragment document type declaration subset:
ArborText, Inc., 1988-1993, v.4001
<!DOCTYPE Book PUBLIC "-//Davenport//DTD DocBook V2.4//EN" [
<!ENTITY AGCC.SECAUD.ent.1 SYSTEM "eps/evt_number.ps" NDATA eps>
<!ENTITY AGCC.SECAUD.ent.2 SYSTEM "eps/filters.ps" NDATA eps>
]>
-->
<!-- COPYRIGHT NOTICE-->
<!-- Copyright (c) 1990, 1991, 1992, 1993, 1994 Open Software Foundation, Inc.-->
<!-- ALL RIGHTS RESERVED (DCE).  See the file named COPYRIGHT.DCE for-->
<!-- the full copyright text.-->
<!-- -->
<!-- HISTORY-->
<!-- Revision 1.1.4.4  1996/10/21  18:08:20  wardr-->
<!-- 	{edit,R1.2.2}-->
<!-- 	Update for sgml conversion-->
<!-- 	[1996/10/21  18:07:54  wardr]-->
<!---->
<!-- Revision 1.1.4.3  1996/09/19  17:31:44  sherman-->
<!-- 	{def,13575,R1.2.2}-->
<!-- 	Fixed various dcecp problems-->
<!-- 	[1996/09/19  17:31:13  sherman]-->
<!-- -->
<!-- Revision 1.1.4.2  1996/08/15  18:45:31  weir-->
<!-- 	CR 13455: corrected term inconsistency-->
<!-- 	[1996/08/15  18:45:06  weir]-->
<!-- -->
<!-- Revision 1.1.4.1  1996/08/15  17:21:35  weir-->
<!-- 	CR 13436: add missing lines-->
<!-- 	[1996/08/15  17:21:12  weir]-->
<!-- -->
<!-- Revision 1.1.2.15  1995/05/25  19:07:01  rcb-->
<!-- 	PRENTICE HALL reformat: final changes-->
<!-- 	[1995/05/25  13:24:16  rcb]-->
<!-- -->
<!-- 	PRENTICE HALL reformat - index entries, odds and ends-->
<!-- 	[1995/03/27  19:51:44  rcb]-->
<!-- -->
<!-- 	PRENTICE HALL reformat-->
<!-- 	[1995/03/16  21:40:33  rcb]-->
<!-- -->
<!-- 	incorporated 1.1 edits-->
<!-- 	[1995/03/16  21:00:35  rcb]-->
<!-- -->
<!-- Revision 1.1.2.14  1994/10/20  16:17:38  cruz-->
<!-- 	more final edits-->
<!-- 	[1994/10/20  16:17:21  cruz]-->
<!-- -->
<!-- Revision 1.1.2.13  1994/10/20  03:46:12  cruz-->
<!-- 	final edits-->
<!-- 	[1994/10/20  03:45:54  cruz]-->
<!-- -->
<!-- Revision 1.1.2.12  1994/09/14  13:26:16  cruz-->
<!-- 	Recovered from technical comments.-->
<!-- 	[1994/09/14  13:24:57  cruz]-->
<!-- -->
<!-- Revision 1.1.2.11  1994/09/07  21:00:49  steto-->
<!-- 	{edt, R1.1, Checked in and submitted file.}-->
<!-- 	[1994/09/07  21:00:29  steto]-->
<!-- -->
<!-- Revision 1.1.2.10  1994/06/27  17:32:53  steto-->
<!-- 	{CR10014, R1.1, Changed the auditcp information to dcecp information.}-->
<!-- 	[1994/06/27  17:29:44  steto]-->
<!-- -->
<!-- Revision 1.1.2.9  1994/06/13  18:07:30  devobj-->
<!-- 	cr10872 - fix copyright-->
<!-- 	[1994/06/13  18:06:58  devobj]-->
<!-- -->
<!-- Revision 1.1.2.8  1994/05/27  19:11:40  cruz-->
<!-- 	enh,10234,R1.1-->
<!-- 	Moved the chapter on admin tasks to a new file:15_audit_tasks.gpsml.-->
<!-- 	[1994/05/27  19:05:17  cruz]-->
<!-- -->
<!-- Revision 1.1.2.7  1994/05/21  16:26:21  cruz-->
<!-- 	Incorporated technical comments-->
<!-- 	[1994/05/21  16:25:57  cruz]-->
<!-- -->
<!-- Revision 1.1.2.6  1994/05/18  21:49:23  cruz-->
<!-- 	Added stuff to the concepts-->
<!-- 	[1994/05/18  21:48:19  cruz]-->
<!-- -->
<!-- Revision 1.1.2.5  1994/05/17  00:11:16  cruz-->
<!-- 	Partially recovered from R.  Zeliff comments-->
<!-- 	[1994/05/17  00:10:59  cruz]-->
<!-- -->
<!-- Revision 1.1.2.4  1994/05/11  19:36:40  cruz-->
<!-- 	Added index entries-->
<!-- 	[1994/05/11  19:36:18  cruz]-->
<!-- -->
<!-- Revision 1.1.2.3  1994/05/10  20:11:21  cruz-->
<!-- 	No changes-->
<!-- 	[1994/05/10  20:10:38  cruz]-->
<!-- -->
<!-- Revision 1.1.2.2  1994/05/09  15:14:10  cruz-->
<!-- 	Put in review bars-->
<!-- 	[1994/05/09  15:13:32  cruz]-->
<!-- -->
<!-- Revision 1.1.2.1  1994/04/29  21:26:01  cruz-->
<!-- 	Initial submission of the Audit documentation for the Administration guide.-->
<!-- 	[1994/04/29  21:21:03  cruz]-->
<!-- -->
<!---->
<!-- -->
<Chapter Id="AGCC.SECAUD.div.1">
<Title>DCE Audit Service</Title>
<Para><IndexTerm Id="AGCC.SECAUD.indx.1">
<Primary>audit</Primary>
<Secondary>service</Secondary>
</IndexTerm>
<IndexTerm Id="AGCC.SECAUD.indx.2">
<Primary>audit</Primary>
</IndexTerm>Auditing plays a critical role in distributed systems.
Adequate audit facilities are necessary for detecting and recording
critical events in distributed applications.
</Para>
<Para>Auditing, a key component of DCE, is provided by the 
DCE Audit Service. 
This chapter provides an introduction to the DCE Audit Service.
</Para>
<Sect1 Id="AGCC.SECAUD.div.2">
<Title>Features of the DCE Audit Service</Title>
<Para><IndexTerm Id="AGCC.SECAUD.indx.3">
<Primary>audit</Primary>
<Secondary>service</Secondary>
<Tertiary>features</Tertiary>
</IndexTerm>The DCE Audit Service has the following features:
</Para>
<ItemizedList>
<ListItem>
<Para>An audit daemon (<Command>auditd</Command>) performs the logging of audit records
based on specified criteria.
</Para>
</ListItem>
<ListItem>
<Para>Application programming interfaces (APIs) 
can be used as part of application server programs to record
audit events.  These APIs can also be used to create tools that can
analyze the audit records.                          
</Para>
</ListItem>
<ListItem>
<?sml-need 4>
<Para>An administrative command interface to the audit daemon 
directs the daemon in selecting
the events that are going to be recorded based on                       
certain criteria.
This interface is accessed through the DCE control program (<Command>dcecp</Command>).
</Para>
</ListItem>
<ListItem>
<Para>An event classification mechanism allows the              
logical grouping of a set of events for ease of administration.
</Para>
</ListItem>
<ListItem>
<Para>Audit records can be directed to logs or to the console.
</Para>
</ListItem>
</ItemizedList>
</Sect1>
<Sect1 Id="AGCC.SECAUD.div.3">
<Title>Components of the DCE Audit Service</Title>
<IndexTerm Id="AGCC.SECAUD.indx.4">
<Primary>audit</Primary>
<Secondary>service</Secondary>
<Tertiary>components</Tertiary>
</IndexTerm>
<Para>The DCE Audit Service has three basic components:                        
</Para>
<ItemizedList>
<ListItem>
<Para>Application programming interfaces (APIs)
</Para>
<Para>Provide the functions that are used to detect and record critical            
events when the application server services a client. 
The application programmer uses these functions at certain 
<Symbol Role="Variable">code points</Symbol> in 
the application server program to actuate the recording of audit events.
Other APIs can be used to create tools that 
examine and analyze the audit event records.
</Para>
</ListItem>
<ListItem>
<Para>Audit daemon
</Para>
<Para>The audit daemon provides the following services:
</Para>
<ItemizedList>
<ListItem>
<Para>Maintains the filters and the central audit trail file.
</Para>
</ListItem>
<ListItem>
<Para>Exports an RPC interface with which it can be controlled by the DCE
control program (<Command>dcecp</Command>). 
</Para>
</ListItem>
</ItemizedList>
</ListItem>
<ListItem>
<Para>DCE control program
</Para>
<Para>The DCE Audit Service's 
management interface to the audit daemon.  
As an administrator, you can use it
to specify how the audit daemon will filter the
recording of audit events.
</Para>
</ListItem>
</ItemizedList>
</Sect1>
<Sect1 Id="AGCC.SECAUD.div.4">
<Title>DCE Audit Service Concepts</Title>
<Para><IndexTerm Id="AGCC.SECAUD.indx.5">
<Primary>audit</Primary>
<Secondary>service</Secondary>
<Tertiary>concepts</Tertiary>
</IndexTerm>This section describes some of the concepts that are relevant
to the administration of the DCE Audit Service.
</Para>
<Sect2 Id="AGCC.SECAUD.div.5">
<Title>Audit Clients</Title>
<Para><IndexTerm Id="AGCC.SECAUD.indx.6">
<Primary>audit</Primary>
<Secondary>clients</Secondary>
<Tertiary>definition</Tertiary>
</IndexTerm>All RPC-based servers are potential audit clients; DCE servers
and user-written application servers.
The DCE Security Service and the Distributed Time Service are auditable.
That is, code points (discussed in the next section)
are already in place in these services.
</Para>
<Para>The audit daemon can also audit itself.
</Para>
<Para>Audit clients should have the <Command>log</Command> permission to the audit daemon
object to be able to use the central audit trail file.
Permissions to the audit daemon are discussed in Chapter 43.
</Para>
</Sect2>
<Sect2 Id="AGCC.SECAUD.div.6">
<Title>Code Points</Title>
<Para><IndexTerm Id="AGCC.SECAUD.indx.7">
<Primary>audit</Primary>
<Secondary>code point</Secondary>
</IndexTerm>
<IndexTerm Id="AGCC.SECAUD.indx.8">
<Primary>code point</Primary>
</IndexTerm>A code point is a location in the application server program
where DCE audit APIs are used.
Code points generally correspond to operations or functions offered by the
application server that requires audit.
For example, if a bank server offers the cash withdrawal function
<Literal>acct_withdraw(&thinsp;)</Literal>, this function may be deemed to be an auditable event
and be designated as a code point.
</Para>
<Para>Code points are already in place in the DCE Security Service, Distributed
Time Service, and Audit Service code.
Code points and their associated events for the DCE Security Service
are documented in the <Command>sec_audit_events(5sec)</Command> reference page.
Code points and their associated events for the DCE Distributed Time Service
are documented in the <Literal>dts_audit_events(5sec)</Literal> reference page. 
Code points and their associated events for the DCE Audit Service are 
documented in the  <Literal>aud_audit_events(5sec)</Literal> reference page.
</Para>
</Sect2>
<Sect2 Id="AGCC.SECAUD.div.7">
<Title>Audit Events</Title>
<Para><IndexTerm Id="AGCC.SECAUD.indx.9">
<Primary>audit</Primary>
<Secondary>event</Secondary>
</IndexTerm>An audit event is any event that an audit client wishes to
record.
Generally, audit events involve the integrity of the system.
For example, when a client withdraws cash from his bank account, 
this can be an audit event because it can involve a possible 
security violation on the bank account.
</Para>
<Para>An audit event is associated with a code point in the application
server code.
</Para>
</Sect2>
<Sect2 Id="AGCC.SECAUD.div.8">
<Title>Event Numbers</Title>
<Para><IndexTerm Id="AGCC.SECAUD.indx.10">
<Primary>event number</Primary>
</IndexTerm>
<IndexTerm Id="AGCC.SECAUD.indx.11">
<Primary>audit</Primary>
<Secondary>event number</Secondary>
</IndexTerm>Every audit event is assigned an event number by the application programmer.
The event number is a 32-bit integer, such as 0xC0000000.
Event numbers are discussed in more detail in the &DCEDk;.
</Para>
</Sect2>
<Sect2 Id="AGCC.SECAUD.div.9">
<Title>Event Classes</Title>
<Para><IndexTerm Id="AGCC.SECAUD.indx.12">
<Primary>event class</Primary>
</IndexTerm>
<IndexTerm Id="AGCC.SECAUD.indx.13">
<Primary>audit</Primary>
<Secondary>event class</Secondary>
</IndexTerm>Audit events can be logically grouped together into an event class.
Event classes provide an efficient mechanism by which sets of events can be
specified by a single value.
Generally, an event class consists of audit events with some 
commonality.
For example, in a bank server program, the
cash transactions (deposit, withdrawal, and transfer) 
may be grouped into an event class.
Event classes are also discussed in Chapter 43.
</Para>
<Sect3 Id="AGCC.SECAUD.div.10">
<Title>Event Class Files</Title>
<Para><IndexTerm Id="AGCC.SECAUD.indx.14">
<Primary>event class</Primary>
<Secondary>file</Secondary>
</IndexTerm>
<IndexTerm Id="AGCC.SECAUD.indx.15">
<Primary>audit</Primary>
<Secondary>event class file</Secondary>
</IndexTerm>Event classes are defined in <Symbol Role="Variable">event class files</Symbol>.
All event class files must be created in the 
<Symbol Role="Variable">dcelocal</Symbol><Filename>/etc/audit/ec</Filename> directory.  
</Para>
<Para>Default event class files are 
provided to classify auditable
events from the DCE Security Service, Time Service, and Audit Service.  
They are installed on the host system 
when any of these services is installed.
</Para>
<Para><?sml-need 5>The name of an event class is the same as its filename.  
Each event class is defined within an event class file.  
</Para>
<Para>You can define new event classes by removing or 
adding event numbers in the event class files, 
or by creating new event class files. 
</Para>
</Sect3>
<Sect3 Id="AGCC.SECAUD.div.11">
<Title>Event Class Names</Title>
<Para><IndexTerm Id="AGCC.SECAUD.indx.16">
<Primary>event class</Primary>
<Secondary>name</Secondary>
</IndexTerm>
<IndexTerm Id="AGCC.SECAUD.indx.17">
<Primary>audit</Primary>
<Secondary>event class name</Secondary>
</IndexTerm>Each event class has a symbolic name
assigned to it.  Following is the 
suggested name format of event classes that
vendors should follow: 
</Para>
<InformalExample>
<Para><ProgramListing><UserInput>ec_<Symbol Role="Variable">org</Symbol><Literal>_</Literal><Symbol Role="Variable">product</Symbol><Literal>_</Literal><Symbol Role="Variable">class
</Symbol></UserInput></ProgramListing></Para>
</InformalExample>
<Para>where:
</Para>
<VariableList>
<VarListEntry>
<Term><Symbol Role="Variable">org</Symbol></Term>
<ListItem>
<Para>Is the name of the organization or company that defines the event class.
</Para>
</ListItem>
</VarListEntry>
<VarListEntry>
<Term><Symbol Role="Variable">product</Symbol></Term>
<ListItem>
<Para>Is the name of the product for which the event class is defined.
</Para>
</ListItem>
</VarListEntry>
<VarListEntry>
<Term><Symbol Role="Variable">class</Symbol></Term>
<ListItem>
<Para>Is the characterization of the event class.
</Para>
</ListItem>
</VarListEntry>
</VariableList>
<Para>The following are two examples of event class names:
</Para>
<ItemizedList>
<ListItem>
<Para><Literal>ec_osf_dce_authentication</Literal>&mdash;Defines an authentication event 
class for OSF's DCE core components.
</Para>
</ListItem>
<ListItem>
<Para><Literal>ec_transarc_encina_update</Literal>&mdash;Defines an update event class for 
Transarc's Encina.
</Para>
</ListItem>
</ItemizedList>
<Para>You can also define event classes to meet your own auditing
needs.  The following is the suggested name format for these event 
classes:
</Para>
<InformalExample>
<Para><ProgramListing><UserInput>dce_<Symbol Role="Variable">server-name</Symbol>_<Symbol Role="Variable">class</Symbol>
</UserInput></ProgramListing></Para>
</InformalExample>
<Para>where <Symbol Role="Variable">class</Symbol> is a characterization of the event class.
</Para>
</Sect3>
<Sect3 Id="AGCC.SECAUD.div.12">
<Title>Event Class Numbers</Title>
<Para RevisionFlag="Changed"><IndexTerm Id="AGCC.SECAUD.indx.18">
<Primary>event class</Primary>
<Secondary>number</Secondary>
</IndexTerm>
<IndexTerm Id="AGCC.SECAUD.indx.19">
<Primary>audit</Primary>
<Secondary>event class number</Secondary>
</IndexTerm>
<!-- -->
<?og-ChangeStart def,13455,R1.2.2,changed class ID to class event ID">
<!-- -->
If you define your own event classes, you must associate it with an
event class number.
Event class numbers are 32-bit integers. 
Each event class number is a tuple made up of a <Symbol Role="Variable">set ID</Symbol> and the 
<Symbol Role="Variable">class event ID</Symbol>. 
The set ID corresponds to a set of event classes and is assigned by OSF to
an organization or vendor.
The class event ID identifies an event class within the set of event classes.
The organization or vendor manages the issuance of the class event ID numbers
to generate an event class number.
</Para>
<Para RevisionFlag="Changed">The structure and administration of event class numbers 
can be likened to the structure and administration of 
IP addresses.
Recall that an IP address is a tuple of a network ID (analogous to 
the set ID) and a host ID (analogous to the class event ID).
<!-- -->
<?og-ChangeEnd def,13455,R1.2.2,changed class ID to class event ID">
<!-- -->
<!-- -->
</Para>
</Sect3>
<Sect3 Id="AGCC.SECAUD.div.13">
<Title>Event Class Number Formats</Title>
<Para RevisionFlag="Changed"><IndexTerm Id="AGCC.SECAUD.indx.20">
<Primary>audit</Primary>
<Secondary>event class number</Secondary>
<Tertiary>format</Tertiary>
</IndexTerm>Event class numbers follow one of five formats (A to E), 
depending on the number of 
event classes in the organization.
The format of an event class number can be determined from its four high-order
bits.
<!-- -->
<?og-ChangeStart def,13455,R1.2.2,changed class ID to class event ID">
<!-- -->
</Para>
<Para RevisionFlag="Changed">Format A can be used by large organizations (such as
OSF or major DCE vendors) that need more than 16 bits for 
the class event ID.
This format allocates 7 bits to the set ID and 24 bits to the class event ID.
Format A event class numbers with zero (0) as its set ID are assigned to OSF.
That is, all event class numbers used by OSF have a zero in the most
significant byte.
</Para>
<Para RevisionFlag="Changed">Format B can be used by intermediate-sized organizations that need 8 to 16
bits for the class event ID.
</Para>
<Para RevisionFlag="Changed">Format C can be used by small organizations that need less than 8 bits for
the class event ID.
</Para>
<Para RevisionFlag="Changed">Format D is not administered by OSF and can be used freely within the 
cell.
These event class numbers cannot be unique across 
cells and should not be used
by application servers that are installed  in more than one cell.
</Para>
<Para RevisionFlag="Changed">Format E is reserved for future use.
</Para>
<Para RevisionFlag="Changed"><?sml-need 4>The numbers with 110 in the most significant bits 
(that is, 0xC0000000 to 0xDFFFFFFF) are 
reserved to be used locally within a cell.  
</Para>
<Para RevisionFlag="Changed">The event class number formats are illustrated in Figure 42-1 (class
event IDs are labeled ``event-id'').
<!-- -->
<?og-ChangeEnd def,13455,R1.2.2,changed class ID to class event ID">
<!-- -->
</Para>
<Figure>
<Title>Event Class Number Formats</Title>
<Graphic Entityref="AGCC.SECAUD.ent.1" Scalefit="1" Reprodep="325" Reprowid="325"></Graphic>
</Figure>
<Para>The cell administrator is
responsible for administering and assigning 
local event class numbers and their names.	
</Para>
</Sect3>
</Sect2>
<Sect2 Id="AGCC.SECAUD.div.14">
<Title>Filters</Title>
<Para><IndexTerm Id="AGCC.SECAUD.indx.21">
<Primary>audit</Primary>
<Secondary>filter</Secondary>
</IndexTerm>
<IndexTerm Id="AGCC.SECAUD.indx.22">
<Primary>filter</Primary>
</IndexTerm>Once the code points are identified and placed in the application server,
all audit events corresponding to the code points 
will be logged in the audit trail file, irrespective of the 
outcome of these audit events.   
However, recording all audit events under all conditions 
may neither be practical nor necessary.
Filters provide a means by which audit records are logged only when
certain conditions are satisfied.
The administrator defines filters using the DCE control program.
</Para>
<Para>A filter is composed of filter guides that specify these
conditions.
Filter guides also specify what action to take if the condition (outcome)
is met.  
</Para>
<Para>A filter answers the following questions:
</Para>
<ItemizedList>
<ListItem>
<Para>Who will be audited?
</Para>
</ListItem>
<ListItem>
<Para>What events will be audited?
</Para>
</ListItem>
<ListItem>
<Para>What should be the outcome of these events before an audit record is written?
</Para>
</ListItem>
<ListItem>
<Para>Will the audit record be logged in the
audit trail file, or displayed on the system console, or both?
</Para>
</ListItem>
</ItemizedList>
<Para><?sml-need 6>For example, for the bank server program,
you can impose the following conditions before an audit record is written:
</Para>
<Para>``Log audit records on
all withdrawal transactions (the audit events) that fail because of
access denial (outcome of the event) that are 
performed by all customers in the DCE cell (who to audit).'' 
</Para>
<Sect3 Id="AGCC.SECAUD.div.15">
<Title>Filter Subject Identity</Title>
<Para><IndexTerm Id="AGCC.SECAUD.indx.23">
<Primary>filter</Primary>
<Secondary>subject identity</Secondary>
</IndexTerm>
<IndexTerm Id="AGCC.SECAUD.indx.24">
<Primary>audit</Primary>
<Secondary>filter</Secondary>
<Tertiary>subject identity</Tertiary>
</IndexTerm>A filter is associated with one filter subject, which
denotes <Replaceable>to whom</Replaceable> the filter applies.
The filter subject is the client of the distributed application who
caused the event to happen.
The filter subject has two parts: the filter type and the
key.
</Para>
<Para>There are eight filter types:
<IndexTerm Id="AGCC.SECAUD.indx.25">
<Primary>audit</Primary>
<Secondary>filter</Secondary>
<Tertiary>types</Tertiary>
</IndexTerm></Para>
<ItemizedList>
<ListItem>
<Para><Command>principal</Command>&mdash;DCE principal in the local cell.
</Para>
</ListItem>
<ListItem>
<Para><Literal>foreign_principal</Literal>&mdash;DCE principal in a foreign cell.
</Para>
</ListItem>
<ListItem>
<Para><Command>group</Command>&mdash;DCE group in the local cell.
</Para>
</ListItem>
<ListItem>
<Para><Literal>foreign_group</Literal>&mdash;DCE group in a foreign cell.
</Para>
</ListItem>
<ListItem>
<Para><Command>cell</Command>&mdash;DCE cell in the network.
</Para>
</ListItem>
<ListItem>
<Para><Literal>cell_overridable</Literal>&mdash;DCE cell in the network.  
This type can be overriden by a more specific filter type.
</Para>
</ListItem>
<ListItem>
<Para><Literal>world</Literal>&mdash;All clients of the distributed application.
</Para>
</ListItem>
<ListItem>
<Para><Literal>world_overridable</Literal>&mdash;All clients of the distributed application.  
This type can be overriden by a more specific filter type.
</Para>
</ListItem>
</ItemizedList>
<Para>The key is the specific name of the <Command>principal</Command>, <Literal>foreign_principal</Literal>,
<IndexTerm Id="AGCC.SECAUD.indx.26">
<Primary>audit</Primary>
<Secondary>filter</Secondary>
<Tertiary>key</Tertiary>
</IndexTerm><Command>group</Command>, <Literal>foreign_group</Literal>, <Command>cell</Command>, and <Literal>cell_overridable</Literal> filter types.
The <Literal>world</Literal> and <Literal>world_overridable</Literal> filter types have no keys.
</Para>
</Sect3>
<Sect3 Id="AGCC.SECAUD.div.16">
<Title>Filter Guides</Title>
<Para><IndexTerm Id="AGCC.SECAUD.indx.27">
<Primary>filter</Primary>
<Secondary>guides</Secondary>
</IndexTerm>
<IndexTerm Id="AGCC.SECAUD.indx.28">
<Primary>audit</Primary>
<Secondary>filter</Secondary>
<Tertiary>guides</Tertiary>
</IndexTerm>A filter contains one or more guides.  A 
filter guide contains three
elements: audit condition, audit action, and event class.  
</Para>
<Para>An audit condition specifies the required outcome (or outcomes) of the event
<IndexTerm Id="AGCC.SECAUD.indx.29">
<Primary>audit</Primary>
<Secondary>filter</Secondary>
<Tertiary>audit condition</Tertiary>
</IndexTerm>before an audit record is written to the audit trail.
These outcomes are not mutually exclusive.
The audit conditions are 
</Para>
<ItemizedList>
<ListItem>
<Para><Literal>success</Literal>&mdash;Records only if event succeeds. 
</Para>
</ListItem>
<ListItem>
<Para><Literal>failure</Literal>&mdash;Records only if event fails. 
</Para>
</ListItem>
<ListItem>
<Para><Literal>denial</Literal>&mdash;Records only if event failed because of access denial.  
</Para>
</ListItem>
</ItemizedList>
<Para>An audit action specifies where the audit record is written.
<IndexTerm Id="AGCC.SECAUD.indx.30">
<Primary>audit</Primary>
<Secondary>filter</Secondary>
<Tertiary>audit actions</Tertiary>
</IndexTerm>The audit actions are
</Para>
<ItemizedList>
<ListItem>
<Para><Literal>alarm</Literal>&mdash;Displays the audit record on system console. 
</Para>
</ListItem>
<ListItem>
<Para><Command>log</Command>&mdash;Logs the audit record through an audit daemon 
or directly to an audit trail file.  
</Para>
</ListItem>
</ItemizedList>
<Para>The audit actions are not mutually exclusive; you can specify both.
</Para>
<Para>The third element of the filter guide specifies the event class or event 
classes to which the filter will apply (for the specific filter subject 
identity).
</Para>
</Sect3>
<Sect3 Id="AGCC.SECAUD.div.17">
<Title>Example of Filter Guides</Title>
<Para>The following is an example of a filter with two guides:
</Para>
<InformalExample>
<Para><ProgramListing>filter type: foreign_principal
key: /.../cell_x/foo
guide 1:
	audit conditions - denial
	audit actions - log
	event classes - Confidential 
guide 2:
	audit conditions - denial
	audit actions - alarm, log
	event classes - Restricted 
</ProgramListing></Para>
</InformalExample>
<Para><?sml-need 5>Guide 1 specifies that an audit record will be logged
for any event in event class <Literal>Confidential</Literal> 
if the user is the 
foreign principal <Filename>/.../cell_x/foo</Filename> and 
the event failed because of access
denial.  
Guide 2 specifies that an audit record will not only be logged
but also be displayed on the system console for any event in event class
<Literal>Restricted</Literal>, 
for the same user and event outcome.
</Para>
</Sect3>
<Sect3 Id="AGCC.SECAUD.div.18">
<Title>Filter Rules</Title>
<Para><IndexTerm Id="AGCC.SECAUD.indx.31">
<Primary>audit</Primary>
<Secondary>filter rules</Secondary>
<Tertiary>override rule</Tertiary>
</IndexTerm>
<IndexTerm Id="AGCC.SECAUD.indx.32">
<Primary>audit</Primary>
<Secondary>filter rules</Secondary>
<Tertiary>high-water-mark rule</Tertiary>
</IndexTerm>Filter rules are used to resolve overlapping
guides from different filters.
There are two filter rules: the override and 
the high-water-mark.
</Para>
<Para>Under the override rule,
filters that are overridable (that is, <Literal>cell_overridable</Literal> and
<Literal>world_overridable</Literal> types)
are nullified by more specific filters.  
The override rule serves as a mechanism that allows
for complementary filters.
A filter for a principal
or a group is more specific than a 
filter for a cell or for the world.  
</Para>
<Para>The high-water-mark rule is applied after the 
override rule.  
If multiple filters are applicable to a client, the
union of the actions (log or alarm) specified by these filters is applied.
</Para>
<Para>A filter is applicable to a client 
if its principal, groups, or cell identity 
matches the key of the filter.  The <Literal>world</Literal> and
<Literal>world_overridable</Literal> filters have no keys
and are applicable to all clients.  
If there are multiple filters that are
applicable to a client, then the union of 
the actions (log or alarm) specified
by these filters is taken.
</Para>
</Sect3>
<Sect3 Id="AGCC.SECAUD.div.19">
<Title>Example of Using Filter Rules</Title>
<Para>The use of overridable filters is described in the
following scenario:
</Para>
<Para>Alice in Company (cell) X 
is responsible for activating some operations
(event class <Literal>critical_transactions</Literal>).
Other principals in the company
are also authorized to activate the same operations, 
but only under certain conditions; for
example, when Alice is not available.  
The system administrator wants to log
an audit record regardless of the event outcome
(that is, audit conditions = all)
or who activates these operations. 
The administrator also wants to generate an
alarm if the activator is not Alice. 
This specification is implemented by the following two filters:
</Para>
<InformalExample>
<Para><ProgramListing>Filter 1:

	filter type: principal
	key: Alice
	guide 1:
		audit conditions - all
		audit actions - log
		event classes - critical_transactions

Filter 2:

	filter type: cell_overridable
	key: X
	guide 1:
		audit conditions - all
		audit actions - log, alarm
		event classes - critical_transactions
</ProgramListing></Para>
</InformalExample>
<Para>When Alice invokes events in the <Literal>critical_transactions</Literal> event class,
the principal filter (filter 1) is applicable because its key matches 
Alice's identity.  The principal filter is 
more specific than the cell filter.
Although the cell filter (filter 2) 
is also applicable to Alice (Alice belongs
to cell X), it is overridden by the
principal filter because the cell filter is overridable.   
For other principals in Company (cell) X, the only
applicable filter is the cell filter (filter 2).  
Thus, these same events
will cause an audit record to be logged and also raise an alarm.
</Para>
<Para>Nonoverridable world and cell filters are also useful.  
Without them,
an administrator, for example, 
would have to delete all filters for groups
and principals of a cell in order to make a 
cell-wide filter effective to the
whole cell. (System administrators may want to introduce a
<Replaceable>temporary</Replaceable> nonoverridable cell filter when a cell is suspected
to be the source of a security problem.)
</Para>
<Para>The following figure illustrates the override relations between different 
types of filters.  
An arrow from filter type X to filter type Y means that X
overrides Y.
</Para>
<?sml-need 2i>
<Figure>
<Title>Override Relations Between Filter Types</Title>
<Graphic Entityref="AGCC.SECAUD.ent.2"></Graphic>
</Figure>
<?sml-space .5>
<Para>DCE groups are generally defined for the purpose of granting access
permissions.  
A group filter specifies <Replaceable>auditing the
intent to use the group's privileges</Replaceable>, 
instead of specifying <Replaceable>auditing
the principals that belong to the group</Replaceable>.   
That is, a group filter would
not have auditing effects on a member principal of the group unless the
principal has the intent to use the group's privileges (by including
the group in the PAC).
Because group filters are defined to audit the intention of using 
a group's privileges, they are independent of other filters and are
not overridable.
</Para>
</Sect3>
</Sect2>
<Sect2 Id="AGCC.SECAUD.div.20">
<Title>Audit Trail File</Title>
<Para><IndexTerm Id="AGCC.SECAUD.indx.33">
<Primary>audit</Primary>
<Secondary>trail file</Secondary>
</IndexTerm>
<IndexTerm Id="AGCC.SECAUD.indx.34">
<Primary>trail file</Primary>
</IndexTerm>The audit trail file contains all the audit 
records that are written by the audit daemon.
You can specify either a 
<Replaceable>central audit trail file</Replaceable> or a <Replaceable>vocal audit trail file</Replaceable>.
</Para>
<Para>The central audit trail file is created by the audit daemon
when it is started.
By default, if the <Literal>dce_aud_open(&thinsp;)</Literal> function does not specify
a name for an audit trail file, all audit records are sent to the audit daemon,
which stores them in the central audit trail file.
</Para>
<Para>If the <Literal>dce_aud_open(&thinsp;)</Literal> function 
is invoked with a name for the trail file,
this name becomes the pathname to the local audit trail file and all audit
records are sent to that file.
</Para>
</Sect2>
</Sect1>
<Sect1 Id="AGCC.SECAUD.div.21">
<Title>Administration and Programming in DCE Audit</Title>
<Para>Many of the 
DCE Audit Service administrative tasks are related to the tasks
performed by the application programmer.
To understand these administrative tasks, you should
be familiar with some programming aspects of the DCE Audit Service.
This section describes a typical DCE Audit Service programming and
administrative scenario and their tasks.
</Para>
<Para>A banking server example illustrates this scenario.
</Para>
<Sect2 Id="AGCC.SECAUD.div.22">
<Title>Programmer Tasks</Title>
<Para><IndexTerm Id="AGCC.SECAUD.indx.35">
<Primary>audit</Primary>
<Secondary>service</Secondary>
<Tertiary>application programmer's tasks</Tertiary>
</IndexTerm>The application programmer uses the DCE audit APIs to enable auditing in
the application server program.  Specifically, the programmer performs
the following tasks:
</Para>
<OrderedList>
<ListItem>
<Para>Identifies the code points corresponding to the audit 
events in the application server program.
</Para>
<Para>For example, a banking server program can have these
functions: <Literal>acct_open(&thinsp;)</Literal>, 
<Literal>acct_close(&thinsp;)</Literal>, 
<Literal>acct_withdraw(&thinsp;)</Literal>, 
<Literal>acct_deposit(&thinsp;)</Literal>, 
and <Literal>acct_transfer(&thinsp;)</Literal>.
Each of these functions can be designated as a code point, meaning
that these are possible audit events that can be recorded
(depending on the filter):
</Para>
<InformalExample>
<Para><ProgramListing><!--no-op:  ...-->
acct_open(&thinsp;)               /* first code point */
<!--no-op:  ..-->
acct_close(&thinsp;)              /* second code point */
<!--no-op:  ..-->
acct_withdraw(&thinsp;)           /* third code point */
<!--no-op:  ..-->
acct_deposit(&thinsp;)            /* fourth code point */
<!--no-op:  ..-->
acct_transfer(&thinsp;)           /* fifth code point */
<!--no-op:  ..-->
<!--no-op:  ..-->
</ProgramListing></Para>
</InformalExample>
</ListItem>
<ListItem>
<Para>Assigns an event number to each code point. 
The event numbers are used as parameters by the 
<Literal>dce_aud_open(&thinsp;)</Literal> API, which
opens an audit trail, and the <Literal>dce_aud_start(&thinsp;)</Literal> API, which
initializes the audit record for the code point. 
The programmer may want to define these event numbers
in the server's header file.
</Para>
<Para><?sml-need 5>For example:
</Para>
<InformalExample>
<Para><ProgramListing><?sml-point-size 10>
<!--no-op:  12-->
/* event number for the first code point, acct_open(&thinsp;) */
#define evt_vn_bank_server_acct_open      0x01000000  

/* event number for the second code point, acct_close(&thinsp;) */
#define evt_vn_bank_server_acct_close     0x01000001  

/* event number for the third code point, acct_withdraw(&thinsp;) */
#define evt_vn_bank_server_acct_withdraw  0x01000002  

/* event number for the fourth code point, acct_deposit(&thinsp;) */
#define evt_vn_bank_server_acct_deposit   0x01000003  

/* event number for the fifth code point, acct_transfer(&thinsp;) */
#define evt_vn_bank_server_acct_transfer  0x01000004  
<?sml-point-size 12>
<!--no-op:  14-->
</ProgramListing></Para>
</InformalExample>
</ListItem>
<ListItem>
<Para>Adds a call to the <Literal>dce_aud_open(&thinsp;)</Literal> API to the application server's
initialization routines.
This opens the audit trail file. 
This function uses the event number of the lowest numbered event, 
(in this case <Literal>acct_open(&thinsp;)</Literal>) as one of its parameters.
For example:
</Para>
<InformalExample>
<Para><ProgramListing><?sml-point-size 10>
<!--no-op:  12-->
main(&thinsp;)
<!--no-op:  .-->
<!--no-op:  .-->
/* evt_vn_bank_server_acct_open is the lowest event number */
dce_aud_open(aud_c_trl_open_write, description,
               evt_vn_bank_server_acct_open,
               5, &amp;audit_trail, &amp;status);
<!--no-op:  .-->
<?sml-point-size 12>
<!--no-op:  14-->
</ProgramListing></Para>
</InformalExample>
</ListItem>
<ListItem>
<Para>Adds Audit event logging functions to every code point in the
application server code.  These functions perform the following
at each code point:
</Para>
<ItemizedList>
<ListItem>
<Para>Initializes an audit record by using the <Literal>dce_aud_start(&thinsp;)</Literal> 
API.  This function assigns the event number to the 
code point representing an event.
Thus, this function uses the event number as one of its parameters.
</Para>
</ListItem>
<ListItem>
<Para>Adds event-specific information to the audit record by using the 
<Literal>dce_aud_put_ev_info(&thinsp;)</Literal> API.	
</Para>
</ListItem>
<ListItem>
<Para>Commits the audit record using the <Literal>dce_aud_commit(&thinsp;)</Literal> API.
This function writes the audit record to the audit trail file.
</Para>
</ListItem>
</ItemizedList>
<Para>Following is an example of how these APIs are used on 
the code points of the bank server program:
</Para>
<InformalExample>
<Para><ProgramListing><?sml-point-size 10>
<!--no-op:  12-->
<?sml-need 35>
<!--no-op:  ...-->
acct_open(&thinsp;)     /* first code point */
<!--no-op:  ....-->

/* Uses the event number for acct_open(&thinsp;), */
/*                              evt_vn_bank_server_acct_open */

dce_aud_start(evt_vn_bank_server_acct_open,
              binding,options,outcome,&amp;ard, &amp;status);
<!--no-op:  ...-->
 if (ard) /* If events need to be logged */
      dce_aud_put_ev_info(ard,info,&amp;status);
<!--no-op:  ..-->
 if (ard) /* If events were logged */
      dce_aud_commit(at,ard,options,format,&amp;outcome,&amp;status);
<!--no-op:  .-->
<!--no-op:  .-->
<!--no-op:  .-->
acct_close(&thinsp;)   /* second code point */
<!--no-op:  ....-->

/* Uses the event number for acct_close(&thinsp;), */
/*                              evt_vn_bank_server_acct_close */

dce_aud_start(evt_vn_bank_server_acct_close,
              binding,options,outcome,&amp;ard, &amp;status);
<!--no-op:  ...-->
 if (ard) /* If events need to be logged */
      dce_aud_put_ev_info(ard,info,&amp;status);
<!--no-op:  ..-->
 if (ard) /* If events were logged */
      dce_aud_commit(at,ard,options,format,&amp;outcome,&amp;status);
<!--no-op:  ..-->
<!--no-op:  ..-->
<!--no-op:  ..-->
<?sml-point-size 12>
<!--no-op:  14-->
</ProgramListing></Para>
</InformalExample>
</ListItem>
<ListItem>
<Para>Closes the audit trail file when the server shuts down, using the	
<Literal>dce_aud_close(&thinsp;)</Literal> API in the main server routine.  For example:
</Para>
<InformalExample>
<Para><ProgramListing><!--no-op:  ....-->
dce_aud_close(audit_trail, &amp;status);
<!--no-op:  ....-->
</ProgramListing></Para>
</InformalExample>
</ListItem>
</OrderedList>
</Sect2>
<Sect2 Id="AGCC.SECAUD.div.23">
<Title>Administrator Tasks</Title>
<Para><IndexTerm Id="AGCC.SECAUD.indx.36">
<Primary>audit</Primary>
<Secondary>service</Secondary>
<Tertiary>administration tasks</Tertiary>
</IndexTerm>The administrator uses the event numbers representing the different
code points in the 
audit client application server program to create event class files
and filter guides in the following manner:
</Para>
<OrderedList>
<ListItem>
<Para>The administrator obtains the event numbers of the code points (representing
each audit event) from the application server programmer.
In our example, these code points were assigned the following event numbers:
<?sml-break><?sml-need 10></Para>
<VariableList>
<VarListEntry>
<Term><Literal>acct_open(&thinsp;)</Literal></Term>
<ListItem>
<Para>0x01000000
</Para>
</ListItem>
</VarListEntry>
<VarListEntry>
<Term><Literal>acct_close(&thinsp;)</Literal></Term>
<ListItem>
<Para>0x01000001
</Para>
</ListItem>
</VarListEntry>
<VarListEntry role="linebreak">
<Term><Literal>acct_withdraw(&thinsp;)</Literal></Term>
<ListItem>
<Para>0x01000002
</Para>
</ListItem>
</VarListEntry>
<VarListEntry role="linebreak">
<Term><Literal>acct_deposit(&thinsp;)</Literal></Term>
<ListItem>
<Para>0x01000003
</Para>
</ListItem>
</VarListEntry>
<VarListEntry role="linebreak">
<Term><Literal>acct_transfer(&thinsp;)</Literal></Term>
<ListItem>
<Para>0x01000004
</Para>
</ListItem>
</VarListEntry>
</VariableList>
<Para>(Note that event numbers should be entirely sequential. 
That is, no missing members of the sequence are allowed.)
</Para>
</ListItem>
<ListItem>
<Para>The administrator decides to create two event classes:  
the <Literal>account_creation_operations</Literal> class comprised of 
<Literal>acct_open(&thinsp;)</Literal> and <Literal>acct_close(&thinsp;)</Literal>, and the 
<Literal>account_balance_operations</Literal> class comprised of 
<Literal>acct_withdraw(&thinsp;)</Literal>, <Literal>acct_deposit(&thinsp;)</Literal>, and <Literal>acct_transfer(&thinsp;)</Literal>.
The administrator assigns the event class <Literal>account_creation_operations</Literal> 
the event class number 0xC0000006.
Event class <Literal>account_balance_operations</Literal> is assigned the event class
number 0xC0000007.
</Para>
<Para><?sml-need 4>To create the event classes, the administrator creates 
and edits two files, one for each event class.
The name of each of these files will be the same as the
event class that each represents.
Each file will contain the numbers of the events in each 
event class.
</Para>
<Para>The file with the name 
<Literal>account_creation_operations</Literal> 
is edited as follows (lines that begin with # (number sign) are 
comment lines):
</Para>
<InformalExample>
<Para><ProgramListing># Event class number of account_creation_operations
ECN = 0xC0000006

# Event number of acct_open(&thinsp;) 
0xC1000000

# Event number of acct_close(&thinsp;)
0xC1000001
</ProgramListing></Para>
</InformalExample>
<Para RevisionFlag="Changed"><?sml-need 11>The file with the name 
<Literal>account_balance_operations</Literal>
is edited as follows:
<!-- -->
<?og-ChangeStart def,13436,R1.2.2,add missing ECN lines">
<!-- -->
</Para>
<InformalExample>
<Para><ProgramListing RevisionFlag="Changed"># Event class number of account_balance_operations
ECN = 0xC0000007

# Event number of acct_withdraw(&thinsp;)
0xC1000002

# Event number of acct_deposit(&thinsp;)
0xC1000003

# Event number of acct_transfer(&thinsp;)
0xC1000004
</ProgramListing></Para>
</InformalExample>
<!-- -->
<?og-ChangeEnd def,13436,R1.2.2,add missing ECN lines">
<!-- -->
<Para>The administrator stores both files in the 
<Symbol Role="Variable">dcelocal</Symbol><Filename>/etc/audit/ec</Filename> directory.
</Para>
</ListItem>
<ListItem>
<Para>The administrator decides to create two filters:
one for all users within the cell
(for the cell <Filename>/.:/torolabcell</Filename>), and the other for all other
users.
</Para>
<Para>The filter for all users within the cell has the following guides:
</Para>
<ItemizedList>
<ListItem>
<Para>Audit the events in the event class  
<Literal>account_balance_operations</Literal> only, 
subject to the next condition.
</Para>
</ListItem>
<ListItem>
<?sml-need 2>
<Para>Write an audit record only if an operation 
in that event class failed because of access denial.
</Para>
</ListItem>
<ListItem>
<?sml-need 2>
<Para>If the first condition is fulfilled,
write the audit record in an audit trail file only.
</Para>
</ListItem>
<ListItem>
<Para RevisionFlag="Changed">The administrator then uses the DCE control program's <Command>audfilter create</Command>
command to create this filter:
<?og-ChangeStart def, 13575,R1.2.2,fixed the missing dcecp prompt"></Para>
<InformalExample>
<Para><ProgramListing RevisionFlag="Changed">dcecp> <Literal>audfilter create  {cell /.../torolabcell} -attribute \</Literal> 
> <Literal>{account_balance_operations denial log}</Literal>
dcecp>
</ProgramListing></Para>
</InformalExample>
<?og-ChangeEnd def, 13575,R1.2.2,fixed the missing dcecp prompt">
<!-- .oS-->
<!-- Enter 0 for principal-->
<!--       1 for foreign principal-->
<!--       2 for group-->
<!--       3 for foreign group-->
<!--       4 for cell-->
<!--       5 for cell overridable-->
<!--       6 for world-->
<!--       7 for world overridable-->
<!--  ===> \*L4\*O-->
<!-- Enter Subject Name (press enter if no more subject): \*L/.://.:/torolabcell\*O-->
<!-- Enter Subject Name (press enter if no more subject): -->
<!-- Enter Audit Condition (press enter if no more condition): \*Ldenial\*O-->
<!-- Enter Audit Condition (press enter if no more condition): -->
<!-- Enter Audit Action (press enter if no more action): \*Llog\*O-->
<!-- Enter Audit Action (press enter if no more action): -->
<!-- Enter Event Class: \*Laccount_balance_operations\*O-->
<!-- .oE         -->
</ListItem>
</ItemizedList>
<Para>The filter for all other users has the following guides:
</Para>
<ItemizedList>
<ListItem>
<Para>Audit the events in both event classes, subject to the next condition.
</Para>
</ListItem>
<ListItem>
<Para>Write an audit record if an operation 
in that event class succeeded, failed,
or failed because of access denial.
</Para>
</ListItem>
<ListItem>
<Para>Write the audit record both in an audit trail file and the console.
</Para>
</ListItem>
</ItemizedList>
<Para RevisionFlag="Changed"><?sml-need 6>Following is the <Command>dcecp</Command> session for creating this filter:
<?og-ChangeStart def, 13575,R1.2.2,fixed the missing dcecp prompt"></Para>
<InformalExample>
<Para><ProgramListing RevisionFlag="Changed"><?sml-point-size 10>
<!--no-op:  12-->
dcecp> <Literal>audfilter create  world -attribute \</Literal>  
> <Literal>{account_balance_operations,account_creation_operations alarm,log all}</Literal>
dcecp>
<?sml-point-size 12>
<!--no-op:  14-->
</ProgramListing></Para>
</InformalExample>
<?og-ChangeEnd def, 13575,R1.2.2,fixed the missing dcecp prompt">
<!-- Enter 0 for principal-->
<!--       1 for foreign principal-->
<!--       2 for group-->
<!--       3 for foreign group-->
<!--       4 for cell-->
<!--       5 for cell overridable-->
<!--       6 for world-->
<!--       7 for world overridable-->
<!--  ===> \*L6\*O-->
<!-- Enter Audit Condition (press enter if no more condition): \*Lall\*O  -->
<!-- Enter Audit Condition (press enter if no more condition): -->
<!-- Enter Audit Action (press enter if no more action): \*Lalarm\*O-->
<!-- Enter Audit Action (press enter if no more action): \*Llog\*O-->
<!-- Enter Audit Action (press enter if no more action): -->
<!-- Enter Event Class: \*Laccount_creation_operations\*O-->
<!-- Enter Event Class: \*Laccount_balance_operations\*O-->
<!-- .oE         -->
<Para>Chapter 43 provides detailed information about the DCE control program's
<Command>audfilter create</Command> command.
</Para>
</ListItem>
</OrderedList>
</Sect2>
</Sect1>
</Chapter>
<!--+ 10/31/96 16:05:54
    | tagMorph:  $Id: 14_audit.sgm,v 1.1.2.11 1996/12/04 22:48:44 carrig Exp $
    | tagMorph library:  $Id: 14_audit.sgm,v 1.1.2.11 1996/12/04 22:48:44 carrig Exp $
    | sml-to-docbook:  1.24
    +-->
