<!--
# @OSF_COPYRIGHT@
# 
# 
# HISTORY
# $Log: message.sgm,v $
# Revision 1.1.2.8  1996/12/14  20:24:33  wardr
# 	{edit,R1.2.2}
# 	penultimate format fixes
# 	[1996/12/14  20:22:34  wardr]
#
# Revision 1.1.2.7  1996/12/13  22:11:19  wardr
# 	{edit,R1.2.2}
# 	Fixed formatting problems
# 	[1996/12/13  22:09:08  wardr]
# 
# Revision 1.1.2.6  1996/12/12  21:30:58  wardr
# 	{edit,R1.2.2}
# 	Fixed formatting problems
# 	[1996/12/12  21:29:05  wardr]
# 
# Revision 1.1.2.5  1996/12/12  16:50:00  carrig
# 	{enh,R1.2.2}
# 	Minor edits
# 	[1996/12/12  16:47:46  carrig]
# 
# Revision 1.1.2.4  1996/12/06  21:10:34  carrig
# 	{enh,R1.2.2}
# 	Second pass for editor
# 	[1996/12/06  21:08:34  carrig]
# 
# Revision 1.1.2.3  1996/12/05  21:39:26  carrig
# 	{enh,R1.2.2}
# 	First pass to prepare for editing
# 	[1996/12/05  21:37:37  carrig]
# 
# Revision 1.1.2.2  1996/12/02  15:41:33  weir
# 	Removed thinsp entities, corrected other minor errors
# 	[1996/12/02  15:39:46  weir]
# 
# Revision 1.1.2.1  1996/12/01  20:44:03  weir
# 	Initial submission
# 	[1996/12/01  20:42:02  weir]
# 
# $EndLog$
-->
<!-- Fragment document type declaration subset:
ArborText, Inc., 1988-1993, v.4001
<!DOCTYPE Book PUBLIC "-//Davenport//DTD DocBook V2.4//EN" [
]>
-->
<!-- COPYRIGHT NOTICE-->
<!-- Copyright (c) 1990, 1991, 1992, 1993, 1994 Open Software Foundation, Inc.-->
<!-- ALL RIGHTS RESERVED (DCE).  See the file named COPYRIGHT.DCE for-->
<!-- the full copyright text.-->
<!-- OLD HISTORY-->
<!-- Revision 1.1.4.1  1996/03/21  19:17:46  wardr-->
<!-- 	{edit R1.2.1}-->
<!-- 	Release Edits-->
<!-- 	[1996/03/21  19:17:22  wardr]-->
<!---->
<!-- Revision 1.1.2.13  1995/06/07  14:36:11  rcb-->
<!-- 	PRENTICE HALL reformat; final edits and changes-->
<!-- 	[1995/06/05  19:52:20  rcb]-->
<!-- -->
<!-- 	PRENTICE HALL reformat-->
<!-- 	[1995/04/04  18:37:17  rcb]-->
<!-- -->
<!-- 	incorporated 1.1 edits-->
<!-- 	[1995/03/30  21:09:36  rcb]-->
<!-- -->
<!-- Revision 1.1.2.12  1994/11/08  20:26:44  neilson-->
<!-- 	Added index entries.-->
<!-- 	[1994/11/08  20:26:27  neilson]-->
<!-- -->
<!-- Revision 1.1.2.11  1994/11/03  23:31:00  neilson-->
<!-- 	Substituted macros for book names in cross refs.-->
<!-- 	[1994/11/03  01:38:14  neilson]-->
<!-- 	Substituted macros for book names in cross refs.-->
<!-- 	Revision 1.1.2.10  1994/10/20  21:07:12  jshirley-->
<!-- 	Move figure title to before figure.-->
<!-- 	[1994/10/20  20:52:48  jshirley]-->
<!-- 	Revision 1.1.2.9  1994/10/19  20:02:53  weir-->
<!-- 	Review comments-->
<!-- 	[1994/10/19  20:02:28  weir]-->
<!-- 	Revision 1.1.2.8  1994/09/19  20:17:04  weir-->
<!-- 	Revised figures-->
<!-- 	[1994/09/19  20:16:25  weir]-->
<!-- 	Revision 1.1.2.7  1994/09/16  18:41:19  weir-->
<!-- 	Updates-->
<!-- 	[1994/09/16  18:40:40  weir]-->
<!-- 	Revision 1.1.2.6  1994/06/13  18:39:35  devobj-->
<!-- 	cr10872 - fix copyright-->
<!-- 	[1994/06/13  18:37:38  devobj]-->
<!-- 	Revision 1.1.2.5  1994/06/12  18:07:50  weir-->
<!-- 	Beta Update-->
<!-- 	[1994/06/12  18:07:23  weir]-->
<!-- 	Revision 1.1.2.4  1994/05/18  18:41:27  weir-->
<!-- 	Beta update-->
<!-- 	[1994/05/18  18:40:54  weir]-->
<!-- 	Revision 1.1.2.3  1994/05/16  21:08:43  weir-->
<!-- 	Beta update-->
<!-- 	[1994/05/16  21:08:14  weir]-->
<!-- 	Revision 1.1.2.2  1994/05/16  14:43:32  weir-->
<!-- 	Initial submission-->
<!-- 	[1994/05/16  14:43:11  weir]-->
<!-- 	Revision 1.1.2.1  1994/03/11  23:03:16  rom-->
<!-- 	{enh, 10129, R1.1}-->
<!-- 	Initial split of App Dev Guide into three books and creation of-->
<!-- 	Intro and Style Guide.-->
<!-- 	[1994/03/11  23:00:47  rom]-->
<!-- -->
<!---->
<!-- - -->
<Chapter Id="DCEADG.DCEM.div.1">
<Title>DCE Application Messaging</Title>
<!-- - -->
<!-- SEE CONNIE COMMENT IN ORANGE OBLONG RE FORMAT-->
<Para>Message generation by distributed programs can be divided into two broad kinds:
<IndexTerm Id="DCEADG.DCEM.indx.1">
<Primary>application</Primary>
<Secondary>messaging</Secondary>
</IndexTerm></Para>
<ItemizedList>
<ListItem>
<Para>Normal (often user-prompted, client-generated) messages
</Para>
</ListItem>
<ListItem>
<Para>Server event messages, containing information about server activity,
either normal or extraordinary
</Para>
</ListItem>
</ItemizedList>
<Para>Similarly, DCE makes available to applications two messaging APIs:
</Para>
<ItemizedList>
<ListItem>
<Para>The DCE messaging interface
<IndexTerm Id="DCEADG.DCEM.indx.2">
<Primary>messaging</Primary>
<Secondary>interface</Secondary>
</IndexTerm></Para>
</ListItem>
<ListItem>
<Para>The DCE serviceability interface
<IndexTerm Id="DCEADG.DCEM.indx.3">
<Primary>serviceability</Primary>
<Secondary>interface</Secondary>
</IndexTerm></Para>
</ListItem>
</ItemizedList>
<Para>The DCE serviceability interface is designed specifically to route messages
of the second type; it is described in Chapter 4.  Messages in the
first category are output using the DCE general-purpose application messaging
routines, which are the subjects of this chapter.
</Para>
<Para>Although the two interfaces, broadly speaking, do the same general thing (that
is,
write messages), their functionality was designed to serve different needs,
both of which occur in most distributed applications.  Nevertheless, either
interface can be used more or less exclusively of the other, if desired.
<!-- - -->
</Para>
<Sect1 Id="DCEADG.DCEM.div.2">
<Title>DCE and Messages</Title>
<!-- - -->
<Para>A <Symbol Role="Variable">message</Symbol> is a readable character string conveying information about some
aspect of a program's state or activity to a human audience.  Messages may be
purely informational or they may be intended to be responded to (that is, be
interactive).  Prompts, error displays, warnings, logs, announcements and
program responses are all various kinds of message.
<IndexTerm Id="DCEADG.DCEM.indx.4">
<Primary>announcements</Primary>
</IndexTerm>
<IndexTerm Id="DCEADG.DCEM.indx.5">
<Primary>logs</Primary>
</IndexTerm>
<IndexTerm Id="DCEADG.DCEM.indx.6">
<Primary>warnings</Primary>
</IndexTerm>
<IndexTerm Id="DCEADG.DCEM.indx.7">
<Primary>error displays</Primary>
</IndexTerm>
<IndexTerm Id="DCEADG.DCEM.indx.8">
<Primary>prompts</Primary>
</IndexTerm>
<IndexTerm Id="DCEADG.DCEM.indx.9">
<Primary>program responses</Primary>
</IndexTerm></Para>
<Para>DCE applications can simply use the standard output routines (such as <Function>printf()</Function>,
<Function>sprintf()</Function>, and so on) for messaging.  However, DCE provides two message interfaces
that automatically and transparently take care of many of the special problems that
distributed application messaging can give rise to.  These interfaces are used by the
DCE components themselves to implement their messaging.
</Para>
<Para>Both of the DCE message facilities use XPG4 message catalog files 
(see the <Symbol Role="Variable">X/Open Portability Guide</Symbol>) 
to hold message text.  The message catalogs are generated by a DCE
<IndexTerm Id="DCEADG.DCEM.indx.10">
<Primary>message</Primary>
<Secondary>catalog</Secondary>
</IndexTerm>utility (called <Command>sams</Command>) during the application development process, and must
<IndexTerm Id="DCEADG.DCEM.indx.11">
<Primary>sams utility for message catalog generation</Primary>
</IndexTerm>be installed in the correct platform-dependent location in order for the DCE
messaging library routines to be able to find them (and, consequently, the
messages) at runtime.
</Para>
<Para>The main purpose of message catalogs is to allow programs' message text to be
stored and organized (separately from the programs themselves) in a culture- or
nationality-specific way.  This enables programs to switch their I/O styles
and contents to the form appropriate to the geographical location (<Symbol Role="Variable">locale</Symbol>)
they are running in, simply by using the appropriate catalog.  Thus, it is essential
to compose catalogs in such a way that each one contains message text appropriate
only to a single (same) locale.
</Para>
<Para>Questions such as the proper use of locales, proper language style for messages,
where catalogs should be installed, and so on, all fall under the broad topic of
<Symbol Role="Variable">internationalization</Symbol>, and are not discussed in this chapter.  The other important
aspect of internationalization, namely character and code set compatibility, is
discussed in detail in Chapter 16. 
<!-- - -->
<!-- Codeset Server/Client Compatibility-->
<!-- - -->
<!-- [the following is excerpted from ../codeset_conversion:]-->
<!-- Q: How is codeset conversion/internationalization going to be implemented -->
<!--    in DCE 1.1? Specifically, How much will a programmer have to do and-->
<!--    how much will IDL or the RPC runtime do? Who will do codeset conversion?-->
<!-- In most cases, application programmers don't have to know which code set(s)-->
<!-- they are working in.  Any code set conversion is done transparently by the-->
<!-- RPC runtime.-->
<!-- Almost all of the work is done by either the compiler or the runtime-->
<!-- support library in cases where the default representations and-->
<!-- conversion policies are selected.  The programmer writes an .idl file-->
<!-- and an .acf file, and the compiler generates code to do the conversions-->
<!-- automatically.-->
<!-- On the server side, its supported code sets need to be registered either-->
<!-- with the NSI by a new management runtime call, or to some administration-->
<!-- file by an administrator.  In other words, the server programmer adds code- -->
<!-- set information to the namespace to advertise on server codeset and converter-->
<!-- support.  -->
<!-- On the client side, the preferred conversion model is chosen by the application-->
<!-- programmer, and the RPC runtime is made aware of the model by a new management-->
<!-- runtime call.  The client programmer calls import with a new compatibility evalu- -->
<!-- ation feature to determine whether a client and server can communicate (based on-->
<!-- codeset). -->
<!-- Then you make the RPC. The conversion happens automatically.-->
<!-- There are options available so you can write your own converters and compatibility-->
<!-- evaluation routines, and we provide defaults.  Thus, even though the RPC runtime will-->
<!-- provide several conversion models, application developers are free to write their own-->
<!-- conversion models and methods when they need to satisfy their own requirements; the-->
<!-- RPC runtime provides a framework to support this kind of extension.  DCE RFC41.0 ex- -->
<!-- plains these mechanisms.-->
<!-- - -->
</Para>
</Sect1>
<Sect1 Id="DCEADG.DCEM.div.3">
<Title>DCE Messaging Interface Usage</Title>
<!-- - -->
<!-- 	-->
<Para>Use of the DCE messaging API is very straightforward.  In the application code
itself, all that is usually required is simply to call one of the output routines,
passing it the ID of the message to be output.  The messages themselves must
first be defined in a text file which must then be processed by the DCE <Command>sams</Command>
(symbols and message strings) utility, which generates the message catalog
file along with other C source files that contain code necessary to facilitate the
additional layer of functionality that DCE has added to the XPG4 message catalog
mechanism.
<!-- - -->
</Para>
<Sect2 Id="DCEADG.DCEM.div.4">
<Title>A Simple DCE Messaging Example</Title>
<!-- - -->
<Para>The following subsections 
describe all the steps and code necessary to compile an
application that uses the DCE messaging 
API to print the familiar ``Hello World'' message.
<!-- - -->
</Para>
<Sect3 Id="DCEADG.DCEM.div.5">
<Title>Defining the Message</Title>
<!-- - -->
<Para>For our example, we will define a <Command>sams</Command>
file with the minimum contents necessary
to print the one brief message we want to display. 
(Additional information on the
use of <Command>sams</Command> can be found in the <Filename MoreInfo="RefEntry">sams(1dce)</Filename> reference page,
which contains comprehensive descriptions of all
aspects of the utility.)
</Para>
<Para>Each line in a <Command>sams</Command> file consists of a simple <Symbol Role="Variable">header</Symbol> and <Symbol Role="Variable">value</Symbol>
combination.  The <Symbol Role="Variable">header</Symbol> indicates the meaning of the value being specified,
and <Symbol Role="Variable">value</Symbol> is the value itself.  A <Command>sams</Command> file for messaging use is normally made
up of three parts (although only two parts are needed for the short example in this
chapter).  The first part consists of a minimum of one line that specifies the
name of the 
<Symbol Role="Variable">component</Symbol> (that is, the application) that is to use the messages
that will be generated from the file.
</Para>
<Para><?sml-need 8>Each invocation of <Command>sams</Command> to process a separate 
<Filename>.sams</Filename> input file produces
a complete set of output files that can be used by the DCE messaging routines to
print or log messages as required.  These sets of output files are organized by
DCE <Symbol Role="Variable">component</Symbol>. (In DCE itself, these components are identical to the DCE components:
RPC, DTS, and so on; for applications, the categorization of components is determined
by the developer.) Each set of output files will have names in which the component
name (also determined by the developer) appears.
</Para>
<Para>The component name that you specify at the top of a <Command>sams</Command> file must consist of a
three-character (no more, no less) string.  For the ``Hello World'' program we will
use the component name <Literal>hel</Literal>:
</Para>
<InformalExample>
<Para><ProgramListing># Part I of simple sams message file...
component           hel
</ProgramListing></Para>
</InformalExample>
<Para>The <Literal>hel</Literal> string will be used to identify all the files and data structures
that <Command>sams</Command> will generate from the file.
</Para>
<Para>The second (and final) part of a <Command>sams</Command> file for DCE messaging consists of a series of
records that specify the messages themselves.  Each record is delimited by the <Literal>start</Literal>
and <Literal>end</Literal> keywords.  Within each record, a series of keywords identifies the various
information that each message consists of or has associated with it.
</Para>
<Para>Our file will contain only one message, the text of 
which is to be ``Hello World''. The
record that specifies it is as follows:
</Para>
<InformalExample>
<Para><ProgramListing>start
code          hello_msg
text          "Hello World"
action        "None required"
explanation   "Greeting message for sample messaging program"
end
</ProgramListing></Para>
</InformalExample>
<Para>The keywords specified have the following meanings:
</Para>
<VariableList>
<VarListEntry>
<Term><Literal>code</Literal></Term>
<ListItem>
<Para>Identifies the message.
</Para>
</ListItem>
</VarListEntry>
<VarListEntry>
<Term><Literal>text</Literal></Term>
<ListItem>
<Para>Specifies the text of the message itself.
</Para>
</ListItem>
</VarListEntry>
<VarListEntry>
<Term><Literal>explanation</Literal></Term>
<ListItem>
<Para>Describes the meaning of the message.  The text following this keyword
is used to generate the documentation of the component's messages.
</Para>
</ListItem>
</VarListEntry>
<VarListEntry>
<Term><Literal>action</Literal></Term>
<ListItem>
<?sml-need 3>
<Para>Describes any action(s) that should be taken in response to the message.
The text following this keyword is used to generate the documentation of
the component's messages.
</Para>
</ListItem>
</VarListEntry>
</VariableList>
<!-- - -->
</Sect3>
<Sect3 Id="DCEADG.DCEM.div.6">
<Title>Processing the <Filename>.sams</Filename> File</Title>
<!-- - -->
<Para>The entire <Command>sams</Command> file for the <Literal>hello</Literal> program is as follows:
<!-- sams input file for hello.c:-->
</Para>
<InformalExample>
<Para><ProgramListing># Part I
component     hel

# Part II
start
code          hello_msg
text          "Hello World"
action        "None required"
explanation   "Greeting message for sample messaging program"
end
</ProgramListing></Para>
</InformalExample>
<Para>We create the file with these contents and name it <Filename>hel.sams</Filename>.
</Para>
<Para>A <Command>sams</Command> file containing DCE messaging API message definitions (in other words, a
sams file not containing definitions for DCE serviceability API messages) should
be compiled by invoking <Command>sams</Command> as follows:
</Para>
<InformalExample>
<Para><ProgramListing><UserInput>sams -o thmc <Symbol Role="Variable">sams_filename</Symbol>
</UserInput></ProgramListing></Para>
</InformalExample>
<Para>where:
</Para>
<VariableList>
<VarListEntry>
<Term><Option>o</Option></Term>
<ListItem>
<Para>Introduces output flags as follows:
</Para>
<VariableList>
<VarListEntry>
<Term><Literal>t</Literal></Term>
<ListItem>
<Para>Specifies that a file containing source code to generate an in-memory message table
be output by <Command>sams</Command>.
</Para>
</ListItem>
</VarListEntry>
<VarListEntry>
<Term><Literal>h</Literal></Term>
<ListItem>
<Para>Specifies that a header file defining codes for the message numbers be output by
<Command>sams</Command>.
</Para>
</ListItem>
</VarListEntry>
<VarListEntry>
<Term><Literal>m</Literal></Term>
<ListItem>
<Para>Specifies that a <Filename>.msg</Filename> file be output by <Command>sams</Command>.
</Para>
</ListItem>
</VarListEntry>
<VarListEntry>
<Term><Literal>c</Literal></Term>
<ListItem>
<Para>Specifies that <Command>sams</Command> call <Literal>gencat</Literal> (with the <Filename>.msg</Filename> file as input) to
produce a message catalog.
</Para>
</ListItem>
</VarListEntry>
</VariableList>
</ListItem>
</VarListEntry>
</VariableList>
<Para>Running the command as shown will result in four files being output:
</Para>
<VariableList>
<VarListEntry>
<Term><Filename>dcehel.cat</Filename></Term>
<ListItem>
<Para>XPG4 message catalog file created by <Literal>gencat</Literal>. If you wish to use the
message catalog, you must install it yourself.
</Para>
</ListItem>
</VarListEntry>
<VarListEntry>
<Term><Filename>dcehel.msg</Filename></Term>
<ListItem>
<Para>Message input file for <Literal>gencat</Literal>.
</Para>
</ListItem>
</VarListEntry>
<VarListEntry>
<Term><Filename>dcehelmsg.c</Filename></Term>
<ListItem>
<Para>Code defining the in-memory table of message texts.  By using this table
you can avoid depending on extracting message texts from the message catalog.
</Para>
</ListItem>
</VarListEntry>
<VarListEntry>
<Term><Filename>dcehelmsg.h</Filename></Term>
<ListItem>
<Para>Header file containing definitions for <Filename>dcehelmsg.c</Filename>.
</Para>
</ListItem>
</VarListEntry>
</VariableList>
<Para>The header file should be included in 
the program source code.  The <Filename>dcehelmsg.c</Filename>
module should be compiled and linked with the program object module.  The message catalog
should be installed in the correct platform-dependent location.
</Para>
<Para>All that remains now is to create a simple C program that calls a DCE messaging
routine to output the ``Hello World'' message.
<!-- - -->
</Para>
</Sect3>
<Sect3 Id="DCEADG.DCEM.div.7">
<Title>Program Source</Title>
<!-- - -->
<Para>The complete source code for <Filename>hello.c</Filename> is as follows:
</Para>
<InformalExample>
<Para><ProgramListing>#include &lt;dce/dce_svc.h>
#include "dcehelmsg.h"

int
main(
    int     argc,
    char    *argv[])
{

    dce_printf(hello_msg);

}
</ProgramListing></Para>
</InformalExample>
<Para><?sml-need 9>To build the application, you simply
</Para>
<ItemizedList>
<ListItem>
<Para>Process the <Filename>hel.sams</Filename> file with the <Command>sams</Command> command.
</Para>
</ListItem>
<ListItem>
<Para>Build and link <Literal>hello</Literal> from the following modules:
</Para>
<ItemizedList>
<ListItem>
<Para><Filename>dcehelmsg.c</Filename>
</Para>
</ListItem>
<ListItem>
<Para><Filename>hello.c</Filename>
</Para>
</ListItem>
</ItemizedList>
</ListItem>
</ItemizedList>
<Para>When executed, the program will print the following:
</Para>
<InformalExample>
<Para><ProgramListing>Hello World
</ProgramListing></Para>
</InformalExample>
<Para>This is the text of the <Literal>hello_msg</Literal> message as defined in the
<Filename>hel.sams</Filename> file.
<!-- - -->
</Para>
</Sect3>
<Sect3 Id="DCEADG.DCEM.div.8">
<Title>DCE Messaging and Message Catalogs</Title>
<!-- - -->
<Para>The reader may be wondering why, in the previous example, it was not necessary
to explicitly open the message catalog before making the call to retrieve and
<IndexTerm Id="DCEADG.DCEM.indx.12">
<Primary>message</Primary>
<Secondary>catalog</Secondary>
</IndexTerm>print the message itself.  The answer is that <Function>dce_printf()</Function> takes care
of this step implicitly.  It is able to find the message catalog because the
catalog's name is generated from the <Literal>component</Literal> field in the first part
of the <Command>sams</Command> file.  Of course, for this to work, the message catalog must be
installed in the correct system-defined location before the application is run.
</Para>
<Para>An application may even dispense with the use of installed message catalogs
altogether, and use in-memory message tables instead.  The necessary code
to declare the <Command>sams</Command> file messages as arrays in program memory is contained in
the <Literal>dce</Literal><Symbol Role="Variable">cmp</Symbol><Filename>msg.c</Filename> file generated with the <Literal>sams -o t</Literal> option.
To initialize the table before using it the application must also call the
<Function>dce_msg_define_msg_table()</Function> routine, described in Section 3.3.3.
The message
routines will, when called, attempt to use the application's message catalog;
but if it cannot be found, the in-memory table will be used instead.
<!-- - -->
</Para>
</Sect3>
</Sect2>
<Sect2 Id="DCEADG.DCEM.div.9">
<Title>The DCE Message Interface and sams Input and Output Files</Title>
<!-- - -->
<Para>Figure 3-1 shows the relationship of the various files, both source
and <Command>sams</Command> output, that go to make up DCE application code that uses the
DCE messaging API. 
</Para>
<Para>The two parallelogram-shaped objects represent the files
that must be created by the developer (you).
</Para>
<Para>Rectangular objects with solid
lines represent files that are generated by <Command>sams</Command>; the two ovals represent
executable utilities: one is <Command>sams</Command>, the other <Literal>gencat</Literal> (which is
implicitly run by <Command>sams</Command> when message catalogs are generated).
</Para>
<Para>The large
rectangular object in dashed lines represents <Literal>libdce</Literal>, which contains the
DCE message API library.
</Para>
<Para>This illustration makes no attempt to show how a DCE application that 
uses DCE messaging should be compiled and linked, nor how it runs.  
It is merely a static map of the
general place of DCE application messaging in DCE development.
<!-- - -->
<!-- - -->
<!-- Figure: Showing regular use of sams.-->
<!-- - -->
<!-- - -->
<!-- pix/sams_reg_use.pic-->
</Para>
<?sml-need 5i>
<Figure>
<Title>sams and DCE Messages</Title>
<Graphic Format="EPS" Entityref="DCEADG.DCEM.ent.1" Scalefit="1" Reprodep="350" Reprowid="350"></Graphic>
</Figure>
<!-- - -->
<?sml-space>
<Para><?sml-need 20>The <Command>sams</Command> output filenames are made up of the following pieces:
</Para>
<InformalExample>
<Para><Replaceable>tech_name&ensp;</Replaceable><Literal>+ </Literal><Replaceable>comp_name&ensp;</Replaceable><Literal>+&ensp;</Literal><Replaceable>part_name&ensp;</Replaceable><Literal>+&ensp;</Literal><Replaceable>extension</Replaceable>
</Para>
</InformalExample>
<Para>where:
</Para>
<VariableList>
<VarListEntry>
<Term><Symbol Role="Variable">tech_name</Symbol></Term>
<ListItem>
<Para>Is the technology name (optionally specified at the top of the <Filename>hel.sams</Filename> file);
by default <Literal>dce</Literal>.
</Para>
</ListItem>
</VarListEntry>
<VarListEntry>
<Term><Symbol Role="Variable">comp_name</Symbol></Term>
<ListItem>
<Para>Is the component name (specified at the top of the <Filename>hel.sams</Filename> file); in
this case, <Literal>hel</Literal>.
</Para>
</ListItem>
</VarListEntry>
<VarListEntry>
<Term><Symbol Role="Variable">part_name</Symbol></Term>
<ListItem>
<Para>Is a substring identifying the particular file; for example, <Literal>svc</Literal> or
<Literal>msg</Literal>, and so on.  This piece of the name is omitted from the message
catalog filenames (in our example, <Filename>dcehel.msg</Filename> and <Filename>dcehel.cat</Filename>).
</Para>
</ListItem>
</VarListEntry>
<VarListEntry>
<Term><Symbol Role="Variable">extension</Symbol></Term>
<ListItem>
<Para>Is the file extension (preceded by a <Literal>.</Literal> (dot) character).
</Para>
</ListItem>
</VarListEntry>
</VariableList>
<Para>The files
<Filename>dcehelmsg.man</Filename> (generated by <Filename>sams -p d hel.sams</Filename>) and
<!-- \*Ldcehelmsg.idx\*O (generated by \*Lsams ???? hel.sams\*O)-->
<Filename>dcehelmsg.sml</Filename> (generated by <Filename>sams -p p hel.sams</Filename>), 
which are shown in Figure 3-1, were not generated
by the following command:
</Para>
<InformalExample>
<Para><ProgramListing><UserInput>sams -o thmc hel.sams
</UserInput></ProgramListing></Para>
</InformalExample>
<Para>They could have been generated by executing this command:
</Para>
<InformalExample>
<Para><ProgramListing><UserInput>sams -o dp hel.sams
</UserInput></ProgramListing></Para>
</InformalExample>
<Para>These are automatically generated documentation files (their nature and
purpose were previously described) that have nothing to do 
with the operation of the interface itself.
<!-- DCE 1.2 WRITER: PLEASE CHECK THE ABOVE INFORMATION FOR ACCURACY-->
</Para>
<Para>A definitive description of <Command>sams</Command> and the contents of 
<Command>sams</Command> files can be found in the <Filename MoreInfo="RefEntry">sams(1dce)</Filename> reference page.
<!-- - -->
</Para>
</Sect2>
</Sect1>
<Sect1 Id="DCEADG.DCEM.div.10">
<Title>DCE Messaging Routines</Title>
<!-- - -->
<Para>There are several different DCE messaging routines.  It is possible for an application
to accomplish all of its messaging tasks with only one or two of these routines
(<Function>dce_printf()</Function> and <Function>dce_error_inq_text()</Function>); additional routines
allow applications to perform manipulations on message tables, open and close
message catalogs explicitly, retrieve messages without printing them, and so on.
The complete list of routines is as follows:
</Para>
<ItemizedList>
<ListItem>
<Para>Message output routines
<IndexTerm Id="DCEADG.DCEM.indx.13">
<Primary>message</Primary>
<Secondary>output routines</Secondary>
</IndexTerm></Para>
<Para>These routines retrieve and output a specified message.  If necessary,
the message catalog is opened.
</Para>
<ItemizedList>
<ListItem>
<Para><Function>dce_printf()</Function>
</Para>
</ListItem>
<ListItem>
<Para><Function>dce_fprintf()</Function>
</Para>
</ListItem>
<ListItem>
<Para><Function>dce_sprintf()</Function>
</Para>
</ListItem>
<ListItem>
<Para><Function>dce_pgm_printf()</Function>
</Para>
</ListItem>
<ListItem>
<Para><Function>dce_pgm_sprintf()</Function>
</Para>
</ListItem>
<ListItem>
<Para><Function>dce_pgm_fprintf()</Function>
</Para>
</ListItem>
</ItemizedList>
</ListItem>
<ListItem>
<Para>Message retrieval routines
<IndexTerm Id="DCEADG.DCEM.indx.14">
<Primary>message</Primary>
<Secondary>retrieval routines</Secondary>
</IndexTerm></Para>
<Para>These routines retrieve a specified message.  If necessary, the message
catalog is opened.
</Para>
<ItemizedList>
<ListItem>
<Para><Function>dce_msg_get_msg()</Function>
</Para>
</ListItem>
<ListItem>
<Para><Function>dce_msg_get()</Function>
</Para>
</ListItem>
<ListItem>
<Para><Function>dce_msg_get_default_msg()</Function>
</Para>
</ListItem>
<ListItem>
<Para><Function>dce_error_inq_text()</Function>
</Para>
</ListItem>
</ItemizedList>
</ListItem>
<ListItem>
<Para>Message table routines
<IndexTerm Id="DCEADG.DCEM.indx.15">
<Primary>message</Primary>
<Secondary>table routines</Secondary>
</IndexTerm></Para>
<Para>Miscellaneous routines for manipulating in-memory message tables.
</Para>
<ItemizedList>
<ListItem>
<Para><Function>dce_msg_define_msg_table()</Function>
</Para>
</ListItem>
<ListItem>
<Para><Function>dce_msg_translate_table()</Function>
</Para>
</ListItem>
</ItemizedList>
</ListItem>
<ListItem>
<?sml-need 12>
<Para>DCE XPG4 routines
<IndexTerm Id="DCEADG.DCEM.indx.16">
<Primary>DCE</Primary>
<Secondary>XPG4 routines</Secondary>
</IndexTerm></Para>
<Para>DCE versions of the XPG messaging routines <Function>catopen()</Function>, <Function>catgets()</Function>,
and <Function>catclose()</Function>.
</Para>
<ItemizedList>
<ListItem>
<Para><Function>dce_msg_cat_open()</Function>
</Para>
</ListItem>
<ListItem>
<Para><Function>dce_msg_cat_get_msg()</Function>
</Para>
</ListItem>
<ListItem>
<Para><Function>dce_msg_get_cat_msg()</Function>
</Para>
</ListItem>
<ListItem>
<Para><Function>dce_msg_cat_close()</Function>
</Para>
</ListItem>
</ItemizedList>
</ListItem>
</ItemizedList>
<?sml-space 2>
<Para>Generally speaking, routines that retrieve or print messages will first try to
get a message from the message catalog file (the routines deduce the correct
message catalog from the message ID that is passed to them).  Routines will look
for the catalog in the current locale's system-specific location for
correctly installed message catalogs.
</Para>
<Para>If the message catalog cannot be found, and an in-memory message table has
been defined, the message will be retrieved from there.
</Para>
<Para>The only exception to this message-finding algorithm occurs with
<Function>dce_msg_get_default_msg()</Function>, which always attempts to retrieve the
in-memory message only.
</Para>
<Para>The following sections describe each of the DCE messaging routines in detail.
Complete reference pages for the routines can be found in the &DCEDr;.
<!-- - -->
</Para>
<Sect2 Id="DCEADG.DCEM.div.11">
<Title>Message Output Routines</Title>
<!-- - -->
<Para>The six message output routines in this group essentially reproduce the
functionality of <Function>printf()</Function>, <Function>fprintf()</Function>, and <Function>sprintf()</Function>,
with the difference being 
that they operate on a specified message rather than on
a string variable.  The routines can be called without any special preparation
(but see the descriptions of the three <Literal>dce_pgm_</Literal> routines).
</Para>
<VariableList>
<VarListEntry>
<Term><Function>dce_fprintf()</Function></Term>
<ListItem>
<?sml-need 6>
<?sml-break>
<Para>Retrieves the message text associated with the specified message ID, and prints
the message and its arguments on the specified stream.  The message is printed
<Symbol Role="Variable">without</Symbol> a concluding newline; if a newline is desired at the end of the
message, then it should be coded (as <Literal>\n</Literal>) in the message definition in
the <Command>sams</Command> file.
</Para>
<Para>The routine determines the correct message catalog and, if necessary, opens it.
If the message catalog is inaccessible, and the message exists in an in-memory
table, then this message (the default message) is printed.  If for any
reason the message cannot be retrieved, an error message is printed.
</Para>
</ListItem>
</VarListEntry>
<VarListEntry>
<Term><Function>dce_printf()</Function></Term>
<ListItem>
<?sml-break>
<Para>Performs a <Function>dce_fprintf()</Function> of the specified message to standard output.
</Para>
</ListItem>
</VarListEntry>
<VarListEntry>
<Term><Function>dce_sprintf()</Function></Term>
<ListItem>
<?sml-break>
<Para>Retrieves the message text associated with the specified message ID, and writes
the message and its arguments into an allocated string (which should be freed by
the caller).  The routine determines the correct message catalog and, if necessary,
opens it.  If the message catalog is inaccessible, and the message exists in an
in-memory table, then this message (the default message) is printed.  If for
any reason the message cannot be retrieved, an error message is printed.
</Para>
<Para>For example, assume that the following message is defined in an application's
<Command>sams</Command> file:
</Para>
<InformalExample>
<Para><ProgramListing>
<?Pub _font TypeSize="8pt">
start
code          arg_msg
text          "This message has exactly %d not %d argument(s)"
action        "None required"
explanation   "Test message with format arguments"
end
<?Pub /_font><?Pub Caret>
</ProgramListing></Para>
</InformalExample>
<Para><?sml-need 12>The following code fragment shows how <Function>dce_sprintf()</Function> might be called to
write the message (with some argument values) into a string:
</Para>
<InformalExample>
<Para><ProgramListing>unsigned char     *my_msg;

my_msg = dce_sprintf(arg_msg, 2, 8);

/* Process my_msg as appropriate...    */

free(my_msg);
</ProgramListing></Para>
</InformalExample>
<Para>Of course, <Function>dce_printf()</Function> could also be called to print the message and
arguments:
</Para>
<InformalExample>
<Para><ProgramListing>dce_printf(arg_msg, 2, 8);
</ProgramListing></Para>
</InformalExample>
</ListItem>
</VarListEntry>
<VarListEntry role="linebreak">
<Term><Function>dce_pgm_printf()</Function></Term>
<ListItem>
<?sml-break>
<Para>Equivalent to <Function>dce_printf()</Function>, except that it prefixes the program name to
the message (in the standard style of DCE error messages), 
whereas <Function>dce_printf()</Function>
does not.  This allows clients (which do 
not usually use the serviceability interface)
to produce error (or other) messages that
automatically include the originating
application's name.  The message is printed with a concluding newline.
</Para>
<Para>Note that the client should call <Function>dce_svc_set_progname()</Function> first to set the
desired application name.  Otherwise, the default program name will be
</Para>
<InformalExample>
<Para><ProgramListing>PID#<Replaceable>nnnn</Replaceable>
</ProgramListing></Para>
</InformalExample>
<Para>where <Symbol Role="Variable">nnnn</Symbol> is the process ID of the application making the call.
</Para>
</ListItem>
</VarListEntry>
<VarListEntry role="linebreak">
<Term><Function>dce_pgm_sprintf()</Function></Term>
<ListItem>
<?sml-break>
<Para>Equivalent to <Function>dce_sprintf()</Function>, except that it prefixes the program name to the
string (in the standard style of DCE error messages), whereas <Function>dce_sprintf()</Function>
does not.  Note that the client must call <Function>dce_svc_set_progname()</Function> first to set
the desired application name.
</Para>
<Para><?sml-need 5>Otherwise, the default name is
</Para>
<InformalExample>
<Para><ProgramListing>PID#<Replaceable>nnnn</Replaceable>
</ProgramListing></Para>
</InformalExample>
<Para>where <Symbol Role="Variable">nnnn</Symbol> is the process ID of the application making the call.
</Para>
</ListItem>
</VarListEntry>
<VarListEntry role="linebreak">
<Term><Function>dce_pgm_fprintf()</Function></Term>
<ListItem>
<?sml-break>
<Para>Equivalent to <Function>dce_fprintf()</Function>, except that it prefixes the program name to the
string (in the standard style of DCE error messages), whereas <Function>dce_fprintf()</Function>
does not.  The message is printed with a concluding newline.
</Para>
<Para>Note that the client must call <Function>dce_svc_set_progname()</Function> first to set the
desired application name.  Otherwise, the default name is
</Para>
<InformalExample>
<Para><ProgramListing>PID#<Replaceable>nnnn</Replaceable>
</ProgramListing></Para>
</InformalExample>
<Para>where <Symbol Role="Variable">nnnn</Symbol> is the process ID of the application making the call.
</Para>
</ListItem>
</VarListEntry>
<VarListEntry role="linebreak">
<Term><Function>dce_error_inq_text()</Function></Term>
<ListItem>
<?sml-break>
<Para>Opens a message catalog, extracts a message identified by a message ID, and
places the message in the space pointed to by the <Symbol Role="Variable">text</Symbol> parameter.  If the message
catalog is inaccessible, and there is a default message in memory, the default message
is copied into the space passed.  If neither the catalog nor the default message is
available, a status code is placed in the status output parameter and the message is
returned as a hexadecimal number; the routine always returns a printable message.
</Para>
<Para>This routine existed in prior releases of DCE and has been modified for 
DCE Version 1.1 to use the default message arrays.  Programs prior to Version
1.1 that use the routine do not need to be modified.
</Para>
<Para><?sml-need 9>For example, assume that the following message is defined in an application's
<Command>sams</Command> file:
</Para>
<InformalExample>
<Para><ProgramListing>start
code          error_msg
text          "Error: %s"
action        ""
explanation   "DCE error status message"
end
</ProgramListing></Para>
</InformalExample>
<Para>The following code fragment 
shows how <Function>dce_error_inq_text()</Function> could be used to
retrieve the error status received from a DCE routine:
</Para>
<InformalExample>
<Para><ProgramListing><?sml-point-size 10>
<!--no-op:  12-->
dce_error_string_t  error_string;
unsigned32          status;
int                 error_inq_status;
uuid_t              type_uuid, obj_uuid;

             <Symbol Role="Variable">&lt;.&ensp;.&ensp;.></Symbol>

rpc_object_set_type(&amp;obj_uuid, &amp;type_uuid, &amp;status);
if (status != rpc_s_ok)
{
  dce_error_inq_text(status, error_string, \
                     &amp;error_inq_status);
  dce_printf(error_msg, error_string);
}
<?sml-point-size 12>
<!--no-op:  14-->
</ProgramListing></Para>
</InformalExample>
</ListItem>
</VarListEntry>
</VariableList>
<!-- - -->
</Sect2>
<Sect2 Id="DCEADG.DCEM.div.12">
<Title>Message Retrieval Routines</Title>
<!-- - -->
<Para>The following three routines retrieve messages, but do not print them.
</Para>
<VariableList>
<VarListEntry role="linebreak">
<Term><Function>dce_msg_get_msg()</Function></Term>
<ListItem>
<?sml-break>
<Para>Retrieves a message (identified by a global message ID) from a message catalog,
and returns a pointer to a <Function>malloc()</Function>'d space containing the message.  The
routine determines the correct message catalog and opens it.  If the message
catalog is inaccessible, and the message exists in an in-memory table, then this
message (the default message) is returned in the allocated space.  If neither
the catalog nor the default message is available, an error status code is placed
in the status output parameter.
</Para>
<Para><?sml-need 4>The following code fragment shows how <Function>dce_msg_get_msg()</Function> might be called
to retrieve the ``Hello World'' message defined in the example program earlier
in this chapter:
</Para>
<InformalExample>
<Para><ProgramListing>#include &lt;dce/dce.h>
#include &lt;dce/dce_msg.h>
#include "dcehelmsg.h"

unsigned char       *my_msg;
unsigned32          status;

             <Symbol Role="Variable">&lt;.&ensp;.&ensp;.></Symbol>

my_msg = dce_msg_get_msg(hello_msg, &amp;status);
printf("Message is: %s&bsol;n", my_msg);
free(my_msg);
</ProgramListing></Para>
</InformalExample>
</ListItem>
</VarListEntry>
<VarListEntry role="linebreak">
<Term><Function>dce_msg_get()</Function></Term>
<ListItem>
<?sml-break>
<Para>This is a convenience form of <Function>dce_msg_get_msg()</Function>. 
If it fails, it does not pass back or return a status code, 
but instead fails with an assertion error, that is,
aborts the calling process.
</Para>
<Para>The following code fragment shows how the routine might be called to retrieve the
``Hello World'' message defined in the example program earlier in this chapter:
</Para>
<InformalExample>
<Para><ProgramListing>#include &lt;dce/dce.h>
#include &lt;dce/dce_msg.h>
#include "dcehelmsg.h"

unsigned char       *my_msg;

             <Symbol Role="Variable">&lt;.&ensp;.&ensp;.></Symbol>

my_msg = dce_msg_get(hello_msg);
printf("Message is: %s&bsol;n", my_msg);
free(my_msg);
</ProgramListing></Para>
</InformalExample>
</ListItem>
</VarListEntry>
<VarListEntry role="linebreak">
<Term><Function>dce_msg_get_default_msg()</Function></Term>
<ListItem>
<?sml-need 6>
<?sml-break>
<Para>Retrieves a message (identified by a global message ID) from an 
in-memory message table 
and returns a pointer to static space containing the message retrieved.  If
the default message is not available, an error status code 
is placed in the status output parameter.
</Para>
<Para>The following code fragment shows how <Function>dce_msg_get_default_msg()</Function> 
might be called to retrieve the in-memory copy of the ``Hello World'' 
message defined in the example program earlier in this chapter:
<?sml-point-size 11>
<!--no-op:  13-->
</Para>
<InformalExample>
<Para><ProgramListing>#include &lt;dce/dce.h>
#include &lt;dce/dce_msg.h>
#include "dcehelmsg.h"

unsigned char       *my_msg;
unsigned32          status;

             <Symbol Role="Variable">&lt;.&ensp;.&ensp;.></Symbol>

my_msg = dce_msg_get_default_msg(hello_msg, &amp;status);
printf("Message is: %s&bsol;n", my_msg);
</ProgramListing></Para>
</InformalExample>
<?sml-point-size 12>
<!--no-op:  14-->
<Para>Note that, in order for this
call to be successful, <Function>dce_msg_define_msg_table()</Function>
must first have been called to set the table up in memory.  
For an example of how this is done, see the following section.
</Para>
</ListItem>
</VarListEntry>
</VariableList>
<!-- - -->
</Sect2>
<Sect2 Id="DCEADG.DCEM.div.13">
<Title>Message Table Routines</Title>
<!-- - -->
<Para>The two routines in this group are intended to be used to perform manipulations
on the in-memory message table.
</Para>
<Para>The in-memory table is implemented with code generated by <Command>sams</Command> and contained
in the <Literal>dce</Literal><Symbol Role="Variable">cmp</Symbol><Filename>msg.c</Filename> module (where <Symbol Role="Variable">cmp</Symbol> is the component name of the
application, as specified in the <Literal>component</Literal> field in part I of the
<Command>sams</Command> file).
This file must then be compiled and linked with the application, and
<Function>dce_msg_define_msg_table()</Function> is called at runtime to set up the table.
</Para>
<Para><?sml-need 5>Note that,
even if an in-memory table is defined, the DCE messaging routines still
will always attempt first to extract the specified message from 
the message catalog,
and only if unsuccessful will they revert to the in-memory 
table.  The exception to
this rule is <Function>dce_msg_get_default_msg()</Function>, 
which always attempts to retrieve
the in-memory message only.
</Para>
<VariableList>
<VarListEntry role="linebreak">
<Term><Function>dce_msg_define_msg_table()</Function></Term>
<ListItem>
<?sml-break>
<Para>Installs a default in-memory message table accessible to DCE messaging routines.
This routine is intended to be used by programs that load all messages from a
catalog into memory in order to avoid file access overhead on message retrieval.
</Para>
<Para>The following code fragment shows how <Function>dce_msg_define_msg_table()</Function> 
might be
called to set up an in-memory message table consisting of the contents of the
messages defined in <Filename>hel.sams</Filename> earlier in this chapter:
</Para>
<InformalExample>
<Para><ProgramListing>#include &lt;dce/dce.h>
#include &lt;dce/dce_msg.h>
#include "dcehelmsg.h"

unsigned32          status;

             <Symbol Role="Variable">&lt;.&ensp;.&ensp;.></Symbol>

dce_msg_define_msg_table(hel_msg_table,
 sizeof(hel_msg_table) / sizeof(hel_msg_table[0]),
                         &amp;status);
</ProgramListing></Para>
</InformalExample>
</ListItem>
</VarListEntry>
<VarListEntry role="linebreak">
<Term><Function>dce_msg_translate_table()</Function></Term>
<ListItem>
<?sml-break>
<Para>Makes a new copy of the specified in-memory message table 
(that is, updates the table
with the contents of a message table, which has changed because of a change in
locale).
</Para>
<Para>Note that this routine will fail if the message catalog is not installed or if
<Literal>LANG</Literal> is not properly set, since the update depends on accessing the contents
of the message catalog (unlike the initial table setup, which is done from the code
in the <Literal>dce</Literal><Symbol Role="Variable">cmp</Symbol><Filename>msg.c</Filename> file).
</Para>
<Para><?sml-need 6>The following code fragment shows how <Function>dce_msg_translate_table()</Function> might be
called to translate the in-memory table that was set up by the call to
<Function>dce_msg_define_msg_table()</Function> in the previous example:
</Para>
<InformalExample>
<Para><ProgramListing>#include &lt;dce/dce.h>
#include &lt;dce/dce_msg.h>
#include &lt;locale.h>
#include "dcehelmsg.h"

char                *loc_return;
unsigned32          status;

             <Symbol Role="Variable">&lt;.&ensp;.&ensp;.></Symbol>

loc_return = setlocale(LC_MESSAGES, "C");
dce_msg_translate_table(hel_msg_table,
 sizeof(hel_msg_table) / sizeof(hel_msg_table[0]),
                        &amp;status);
</ProgramListing></Para>
</InformalExample>
</ListItem>
</VarListEntry>
</VariableList>
<!-- - -->
</Sect2>
<Sect2 Id="DCEADG.DCEM.div.14">
<Title>DCE XPG4 Routines</Title>
<!-- - -->
<Para>The four routines in this group provide DCE versions of functionality of the
XPG messaging routines <Function>catopen()</Function>, <Function>catgets()</Function>, and <Function>catclose()</Function>.
</Para>
<VariableList>
<VarListEntry role="linebreak">
<Term><Function>dce_msg_cat_open()</Function></Term>
<ListItem>
<?sml-break>
<Para>(DCE abstraction over <Function>catopen()</Function>) Opens a message catalog identified by a
message ID. The routine returns a handle to the open catalog from which messages
will be extracted.  This routine is intended for use by applications (such as user
interface programs) that display many messages from a particular catalog.
</Para>
<Para>The routine will fail if the message catalog is not installed or if <Literal>LANG</Literal>
is not properly set.
</Para>
<Para>The following code fragment shows how 
<Function>dce_msg_cat_open()</Function> might be called
to open the message catalog containing the ``Hello World'' message defined for
the example application earlier in this chapter:
</Para>
<InformalExample>
<Para><ProgramListing><?sml-point-size 11>
<!--no-op:  13-->
<?sml-need 10>#include &lt;dce/dce.h>
#include &lt;dce/dce_msg.h>
#include "dcehelmsg.h"

dce_msg_cat_handle_t    hel_msg_handle;
unsigned32              status;

             <Symbol Role="Variable">&lt;.&ensp;.&ensp;.></Symbol>

hel_msg_handle = dce_msg_cat_open(hello_msg, &amp;status);
<?sml-point-size 12>
<!--no-op:  14-->
</ProgramListing></Para>
</InformalExample>
</ListItem>
</VarListEntry>
<VarListEntry role="linebreak">
<Term><Function>dce_msg_cat_get_msg()</Function></Term>
<ListItem>
<?sml-break>
<Para>(DCE abstraction over <Function>catgets()</Function>)  Retrieves 
a message from an open catalog.
If the message is not available, returns NULL.
</Para>
<Para>The routine will fail if the message catalog is not installed or if
<Literal>LANG</Literal> is not properly set.
</Para>
<Para>The following code fragment shows how 
<Function>dce_msg_cat_get_msg()</Function> might be called
to retrieve the ``Hello World'' message.  Note that the message catalog must first
be opened.
</Para>
<InformalExample>
<Para><ProgramListing><?sml-point-size 10>
<!--no-op:  12-->
<?Pub _font TypeSize="8pt">
#include &lt;dce/dce.h>
#include &lt;dce/dce_msg.h>
#include "dcehelmsg.h"

dce_msg_cat_handle_t    hel_msg_handle;
unsigned32              status;
unsigned_char_t         *msg;

             <Symbol Role="Variable">&lt;.&ensp;.&ensp;.></Symbol>

hel_msg_handle = dce_msg_cat_open(hello_msg, &amp;status);
msg = (unsigned_char_t *)dce_msg_cat_get_msg(hel_msg_handle,
                                             hello_msg,
                                             &amp;status);
printf("Message from dce_msg_cat_get_msg == %s&bsol;n", msg);
<?sml-point-size 12>
<!--no-op:  14-->
<?Pub /_font><?Pub Caret>
</ProgramListing></Para>
</InformalExample>
</ListItem>
</VarListEntry>
<VarListEntry role="linebreak">
<Term><Function>dce_msg_get_cat_msg()</Function></Term>
<ListItem>
<?sml-break>
<Para>Convenience form of previous routine.  Opens a message catalog, extracts a message
identified by a global message ID, and returns a pointer to <Function>malloc()</Function>'d space
containing the message.  If the message catalog is inaccessible, returns an error.
</Para>
<Para><?sml-need 2>The routine will fail if the message catalog is not installed or if
<Literal>LANG</Literal> is not properly set.
</Para>
<Para>The following code fragment shows how <Function>dce_msg_get_cat_msg()</Function> might be
called to retrieve the ``Hello World'' message:
</Para>
<InformalExample>
<Para><ProgramListing><?sml-point-size 11>
<!--no-op:  13-->
#include &lt;dce/dce.h>
#include &lt;dce/dce_msg.h>
#include "dcehelmsg.h"

unsigned32              status;
unsigned_char_t         *msg;

             <Symbol Role="Variable">&lt;.&ensp;.&ensp;.></Symbol>

msg = dce_msg_get_cat_msg(hello_msg, &amp;status);
printf("Message from dce_msg_get_cat_msg == %s&bsol;n", msg);
<?sml-point-size 12>
<!--no-op:  14-->
</ProgramListing></Para>
</InformalExample>
</ListItem>
</VarListEntry>
<VarListEntry role="linebreak">
<Term><Function>dce_msg_cat_close()</Function></Term>
<ListItem>
<?sml-break>
<Para>(DCE abstraction over <Function>catclose()</Function>)  Closes 
the catalog specified by <Symbol Role="Variable">handle</Symbol>.
</Para>
<Para>The following code fragment shows how 
<Function>dce_msg_cat_close()</Function> might be called
to close the message catalog containing the ``Hello World'' message:
</Para>
<InformalExample>
<Para><ProgramListing>#include &lt;dce/dce.h>
#include &lt;dce/dce_msg.h>
#include "dcehelmsg.h"

dce_msg_cat_handle_t    hel_msg_handle;
unsigned32              status;

             <Symbol Role="Variable">&lt;.&ensp;.&ensp;.></Symbol>

dce_msg_cat_close(hel_msg_handle, &amp;status);
</ProgramListing></Para>
</InformalExample>
<!-- - -->
</ListItem>
</VarListEntry>
</VariableList>
</Sect2>
</Sect1>
</Chapter>
<!--+ 11/27/96 19:53:47
    | tagMorph:  $Id: message.sgm,v 1.1.2.8 1996/12/14 20:24:33 wardr Exp $
    | tagMorph library:  $Id: message.sgm,v 1.1.2.8 1996/12/14 20:24:33 wardr Exp $
    | sml-to-docbook:  1.25
    +-->
