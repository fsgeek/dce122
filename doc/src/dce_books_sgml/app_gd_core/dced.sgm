<!--
# @OSF_COPYRIGHT@
# 
# 
# HISTORY
# $Log: dced.sgm,v $
# Revision 1.1.2.8  1996/12/14  20:24:17  wardr
# 	{edit,R1.2.2}
# 	penultimate format fixes
# 	[1996/12/14  20:22:11  wardr]
#
# Revision 1.1.2.7  1996/12/13  22:10:55  wardr
# 	{edit,R1.2.2}
# 	Fixed formatting problems
# 	[1996/12/13  22:08:44  wardr]
# 
# Revision 1.1.2.6  1996/12/12  21:30:36  wardr
# 	{edit,R1.2.2}
# 	Fixed formatting problems
# 	[1996/12/12  21:28:43  wardr]
# 
# Revision 1.1.2.5  1996/12/09  21:37:59  weir
# 	Finished dced example program writeup
# 	[1996/12/09  21:37:35  weir]
# 
# Revision 1.1.2.4  1996/12/06  21:10:15  carrig
# 	{enh,R1.2.2}
# 	Second pass for editor
# 	[1996/12/06  21:08:07  carrig]
# 
# Revision 1.1.2.3  1996/12/05  21:39:05  carrig
# 	{enh,R1.2.2}
# 	First pass to prepare for editing
# 	[1996/12/05  21:37:10  carrig]
# 
# Revision 1.1.2.2  1996/12/02  15:41:14  weir
# 	Removed thinsp entities, corrected other minor errors
# 	[1996/12/02  15:39:24  weir]
# 
# Revision 1.1.2.1  1996/12/01  20:43:38  weir
# 	Initial submission
# 	[1996/12/01  20:41:43  weir]
# 
# $EndLog$
-->
<!-- Fragment document type declaration subset:
ArborText, Inc., 1988-1993, v.4001
<!DOCTYPE Book PUBLIC "-//Davenport//DTD DocBook V2.4//EN" [
<!ENTITY  DCEADG.DCEDD.ent.1  SYSTEM "eps/dced_entry_lists.ps" NDATA eps>
<!ENTITY  DCEADG.DCEDD.ent.2  SYSTEM "eps/entry_list_data.ps" NDATA eps>
<!ENTITY  DCEADG.DCEDD.ent.3  SYSTEM "eps/read_entry_data.ps" NDATA eps>
]>
-->
<!-- COPYRIGHT NOTICE-->
<!-- Copyright (c) 1990, 1991, 1992, 1993, 1994 Open Software Foundation, Inc.-->
<!-- ALL RIGHTS RESERVED (DCE).  See the file named COPYRIGHT.DCE for-->
<!-- the full copyright text.-->
<!-- -->
<!-- -->
<!-- OLD HISTORY-->
<!-- Revision 1.1.7.1  1996/10/16  15:41:54  weir-->
<!-- 	CR 9830: added greet_dced example, first pass-->
<!-- 	[1996/10/16  15:41:23  weir]-->
<!---->
<!-- Revision 1.1.4.1  1996/03/21  19:17:44  wardr-->
<!-- 	{edit R1.2.1}-->
<!-- 	Release Edits-->
<!-- 	[1996/03/21  19:17:19  wardr]-->
<!-- -->
<!-- Revision 1.1.2.13  1995/06/07  14:35:50  rcb-->
<!-- 	PRENTICE HALL reformat; final edits and changes-->
<!-- 	[1995/06/05  19:52:11  rcb]-->
<!-- -->
<!-- 	PRENTICE HALL reformat-->
<!-- 	[1995/04/04  17:16:01  rcb]-->
<!-- -->
<!-- 	incorporated 1.1 edits-->
<!-- 	[1995/03/30  19:50:59  rcb]-->
<!-- -->
<!-- 	incorporated 1.1 edits (actually no change, all done by steto-->
<!-- 	[1995/03/30  17:29:13  rcb]-->
<!-- -->
<!-- Revision 1.1.2.12  1994/11/09  20:51:31  neilson-->
<!-- 	Added index entries.-->
<!-- 	[1994/11/09  20:51:08  neilson]-->
<!-- -->
<!-- Revision 1.1.2.11  1994/11/09  18:26:05  steto-->
<!-- 	{edt, R1.1, Inc'd production edits for PH version.}-->
<!-- 	[1994/11/09  18:25:13  steto]-->
<!-- -->
<!-- Revision 1.1.2.10  1994/10/20  21:50:14  jshirley-->
<!-- 	Paging repairs.-->
<!-- 	[1994/10/20  21:50:01  jshirley]-->
<!-- -->
<!-- Revision 1.1.2.9  1994/10/19  22:07:31  jshirley-->
<!-- 	Final updates.-->
<!-- 	[1994/10/19  22:06:56  jshirley]-->
<!-- -->
<!-- Revision 1.1.2.8  1994/10/06  19:32:41  jshirley-->
<!-- 	{def,9830,R1.1}New dced functionality.-->
<!-- 	[1994/10/06  19:32:04  jshirley]-->
<!-- -->
<!-- Revision 1.1.2.7  1994/06/13  18:39:32  devobj-->
<!-- 	cr10872 - fix copyright-->
<!-- 	[1994/06/13  18:37:34  devobj]-->
<!-- -->
<!-- Revision 1.1.2.6  1994/05/18  15:14:48  weir-->
<!-- 	Checked out to fix SML error, but it's apparently already fixed.-->
<!-- 	[1994/05/18  15:14:11  weir]-->
<!-- -->
<!-- Revision 1.1.2.5  1994/05/18  02:17:45  jshirley-->
<!-- 	Added Ping Wang's review comments and made many other modifications to-->
<!-- 	fill out sections and examples.-->
<!-- 	[1994/05/18  02:17:13  jshirley]-->
<!-- -->
<!-- Revision 1.1.2.4  1994/05/11  22:18:41  jshirley-->
<!-- 	Merged with changes from 1.1.2.3-->
<!-- 	[1994/05/11  22:18:35  jshirley]-->
<!-- -->
<!-- 	Incorporated John Bowe's comments from first draft.-->
<!-- 	[1994/05/11  22:16:51  jshirley]-->
<!-- -->
<!-- 	Incorporated rsalz comments from first draft.-->
<!-- 	[1994/05/04  22:32:25  jshirley]-->
<!-- -->
<!-- 	Modified figures.-->
<!-- 	[1994/05/04  17:22:22  jshirley]-->
<!-- -->
<!-- Revision 1.1.2.3  1994/05/04  17:22:54  jshirley-->
<!-- 	Modified figures.-->
<!-- 	[1994/05/04  17:22:22  jshirley]-->
<!-- -->
<!-- Revision 1.1.2.2  1994/03/24  17:59:19  jshirley-->
<!-- 	First check-in of real information for the file.-->
<!-- 	[1994/03/24  17:50:32  jshirley]-->
<!-- -->
<!-- Revision 1.1.2.1  1994/03/11  23:03:12  rom-->
<!-- 	{enh, 10129, R1.1}-->
<!-- 	Initial split of App Dev Guide into three books and creation of-->
<!-- 	Intro and Style Guide.-->
<!-- 	[1994/03/11  23:00:46  rom]-->
<!-- -->
<!-- -->
<!-- -->
<!-- - -->
<Chapter Id="DCEADG.DCEDD.div.1">
<Title>DCE Host Services</Title>
<!-- - -->
<!-- -->
<Para><IndexTerm Id="DCEADG.DCEDD.indx.1">
<Primary>DCE</Primary>
<Secondary>host services</Secondary>
</IndexTerm>Every DCE host must maintain certain kinds of data about itself and the
servers it provides.   For example, each host stores configuration data
about its DCE
environment, and it also stores data about servers registered and
running on the host. 
In addition, each host needs some services to not only manage this data
but also to administer the host and DCE servers.  For example, 
a service that can start and stop specific servers has obvious value.
The DCE host services consist of the following:
</Para>
<ItemizedList>
<ListItem>
<Para>Endpoint Mapper
</Para>
<Para>The endpoint mapper service enables a client to find servers on a 
<IndexTerm Id="DCEADG.DCEDD.indx.2">
<Primary>endpoint</Primary>
<Secondary>mapper service</Secondary>
</IndexTerm>
<IndexTerm Id="DCEADG.DCEDD.indx.3">
<Primary>dced services</Primary>
<Secondary>endpoint mapper</Secondary>
</IndexTerm>particular host and the services and objects provided by those services.
This service maintains on each host an endpoint map
that contains a  mapping of port addresses (endpoints) to servers, 
the services servers provide, and the objects servers manage.  
</Para>
</ListItem>
<ListItem>
<Para>Hostdata Management
</Para>
<Para>The hostdata management service stores and controls access to such
<IndexTerm Id="DCEADG.DCEDD.indx.4">
<Primary>hostdata management service</Primary>
</IndexTerm>
<IndexTerm Id="DCEADG.DCEDD.indx.5">
<Primary>dced services</Primary>
<Secondary>hostdata management</Secondary>
</IndexTerm>data as the host's cell name, the host name, and the cell alias names, 
among other things.
</Para>
</ListItem>
<ListItem>
<?sml-need 5>
<Para>Server Management
</Para>
<Para>The server management service can start and stop specified servers on a host,
<IndexTerm Id="DCEADG.DCEDD.indx.6">
<Primary>server</Primary>
<Secondary>management service</Secondary>
</IndexTerm>
<IndexTerm Id="DCEADG.DCEDD.indx.7">
<Primary>dced services</Primary>
<Secondary>server management</Secondary>
</IndexTerm>enable or disable specific services provided by a server, 
and manage configuration and execution data about these servers.
</Para>
</ListItem>
<ListItem>
<Para>Security Validation
</Para>
<Para>The security validation service maintains a login context for the host's
<IndexTerm Id="DCEADG.DCEDD.indx.8">
<Primary>security</Primary>
<Secondary>validation service</Secondary>
</IndexTerm>
<IndexTerm Id="DCEADG.DCEDD.indx.9">
<Primary>dced services</Primary>
<Secondary>security validation</Secondary>
</IndexTerm>identity of itself, maintains the host principal's keys,
and ensures applications (especially login programs) 
that the DCE security daemon (<Command>secd</Command>) is genuine.
</Para>
</ListItem>
<ListItem>
<Para>Key Table Management
</Para>
<Para>A server uses private keys for its security instead of human-entered
passwords.  The key table management service can be used to manage the
<IndexTerm Id="DCEADG.DCEDD.indx.10">
<Primary>key table management service</Primary>
</IndexTerm>
<IndexTerm Id="DCEADG.DCEDD.indx.11">
<Primary>dced services</Primary>
<Secondary>key table management</Secondary>
</IndexTerm>keys stored in key tables on a server's host.
</Para>
</ListItem>
</ItemizedList>
<Para><?sml-need 5>Of course, in a distributed environment, these data and services must
be easily yet securely accessible from other hosts.
The DCE host daemon (<Command>dced</Command>) is a continuously running program on each
<IndexTerm Id="DCEADG.DCEDD.indx.12">
<Primary>DCE</Primary>
<Secondary>host daemon (dced)</Secondary>
</IndexTerm>
<IndexTerm Id="DCEADG.DCEDD.indx.13">
<Primary>dced, DCE host daemon</Primary>
</IndexTerm>host that provides access to the host services either locally on
that host or remotely from another host.
<!-- -->
<!-- -->
<!-- - -->
</Para>
<Sect1 Id="DCEADG.DCEDD.div.2">
<Title>Types of Applications</Title>
<!-- - -->
<!-- -->
<Para>Although applications may need some aspect of these host services 
(control over which services are enabled for a particular server, 
for example), typical servers do not have to do any special coding for them.  
This reduces the size and complexity of server code and keeps the
details of administration out of applications.  It also removes the
burden of server administration so you can concentrate on
the application's business functionality.
</Para>
<Para>System administrators will appreciate this development model 
too because it is unlikely that many servers implementing their 
own administrative mechanisms will all behave in the same manner.
Administrators commonly use the DCE control program, <Command>dcecp</Command>,
to access the host services (via <Command>dced</Command>) of any host in their 
distributed environment
(provided the user has the appropriate permissions).  
The DCE control program also uses a script language for more sophisticated
administration.  See the
<!--Admin.  Guide Core-->
&DCEAc;
for more on using <Command>dcecp</Command> to access the host services.
</Para>
<Para>Although <Command>dcecp</Command> commands offer an administrator a great deal of
control over DCE hosts and servers, a set of APIs are also
supplied for application developers who need to access the DCE
host services from an application rather than from scripts or the operating
system's command line.
</Para>
<Para>Typical business applications do not use the APIs of these services,
but a <FirstTerm>management application</FirstTerm> might.
A management application is a client or server that manages other
servers or some aspect of the distributed environment.
(The <Command>dced</Command> program is itself a management application that is built into DCE.)
Some other types of applications that might use these API include
</Para>
<ItemizedList>
<ListItem>
<Para>Applications that control other servers for load balancing or server redundancy.
</Para>
</ListItem>
<ListItem>
<Para>An application that uses a graphical user interface (GUI) instead of
the command-line interface provided by <Command>dcecp</Command>.
</Para>
</ListItem>
<ListItem>
<Para>An application that needs to monitor a server's current state.  For
example, an application may need to make sure a particular server or one of
its services is available.
</Para>
</ListItem>
</ItemizedList>
<!-- -->
<!-- -->
<!-- - -->
</Sect1>
<Sect1 Id="DCEADG.DCEDD.div.3">
<Title>Issues of Distributed Applications</Title>
<!-- - -->
<!-- -->
<IndexTerm Id="DCEADG.DCEDD.indx.14">
<Primary>distributed applications</Primary>
</IndexTerm>
<Para>The most important aspect of <Command>dced</Command> is that it gives system
administrators the ability to remotely manage services, servers, endpoints,
<IndexTerm Id="DCEADG.DCEDD.indx.15">
<Primary>remote</Primary>
<Secondary>management</Secondary>
<Tertiary>of services</Tertiary>
</IndexTerm>
<IndexTerm Id="DCEADG.DCEDD.indx.16">
<Primary>remote</Primary>
<Secondary>management</Secondary>
<Tertiary>of servers</Tertiary>
</IndexTerm>
<IndexTerm Id="DCEADG.DCEDD.indx.17">
<Primary>remote</Primary>
<Secondary>management</Secondary>
<Tertiary>of endpoints</Tertiary>
</IndexTerm>
<IndexTerm Id="DCEADG.DCEDD.indx.18">
<Primary>remote</Primary>
<Secondary>management</Secondary>
<Tertiary>of objects</Tertiary>
</IndexTerm>and even objects on any host in DCE.
This eliminates the frustrating and tedious task of logging into many
different hosts to manage them.  This also allows for scalability because 
it is impractical to manage a large system by logging into all its hosts.
</Para>
<Para>The features of <Command>dced</Command> are greatly enhanced when used remotely.
Of course, an administrator can use <Command>dced</Command> to locally manage a 
host's services, but <Command>dced</Command>'s real power is in remotely managing 
system and application server configurations, key tables, server startup, 
login configurations, and cell information.
</Para>
<Para><?sml-need 6>Security becomes a major issue when it comes to remote services.  
With the power of <Command>dced</Command>'s services and <Command>dcecp</Command>, 
it is important that only authorized principals can use them.  
The <Command>dced</Command> program controls access to its various objects by using ACLs.
Server keys are security-sensitive data that must be seldom transmitted over
the network.  All key table data is encrypted when it is transmitted for 
secure remote key table management.
</Para>
<Para>Finally, the remote capabilities of <Command>dced</Command> give you real-time
status of processes and services in DCE.
<!-- -->
<!-- -->
<!-- -->
<!-- - -->
</Para>
</Sect1>
<Sect1 Id="DCEADG.DCEDD.div.4">
<Title>Managing a Host's Endpoint Map</Title>
<!-- - -->
<!-- -->
<Para>Each DCE host has an endpoint map that contains a mapping of servers
to endpoints.  Each endpoint map server entry is associated with an
array of services (interfaces) provided by the server, and each
service is associated with an array of objects supported by the service.
</Para>
<Para>When a typical server calls the <Function>dce_server_register()</Function> routine,
the RPC runtime generates the endpoints on which the server will
listen for calls and then uses <Command>dced</Command>'s endpoint mapper service of the 
<IndexTerm Id="DCEADG.DCEDD.indx.19">
<Primary>endpoint</Primary>
<Secondary>mapper service</Secondary>
</IndexTerm>
<IndexTerm Id="DCEADG.DCEDD.indx.20">
<Primary>dced services</Primary>
<Secondary>endpoint mapper</Secondary>
</IndexTerm>local host to register the endpoints.
Later, when a typical client makes a remote procedure call,
its RPC runtime uses the server host's endpoint mapper service 
to find the server.
When the typical server shuts down, it calls the
<Function>dce_server_unregister()</Function> routine to remove its endpoints from
the endpoint map so that clients do not later try to bind to it.
</Para>
<Para>Applications can also use the lower-level <Function>rpc_ep_register()</Function>
and associated RPC routines.
Because the endpoint map is essential for RPCs to work,
endpoints are fully described in Chapter 12
and the endpoint map structure is described with respect to routing of
RPCs in Chapter 16.
</Para>
<Para>The endpoint map is for the most part maintained automatically by <Command>dced</Command>.  
For example, it periodically removes stale endpoints so that the
RPC runtime will not try to complete a binding for a client to a
server that is no longer running.
However, administrative applications may find it necessary to peruse
a remote endpoint map
and even remove specific endpoints from a local host's endpoint map.
</Para>
<Para><?sml-need 5>To read the elements of a remote endpoint map, applications use a loop with
the set of routines 
<Function>rpc_mgmt_ep_elt_inq_begin()</Function>,
<Function>rpc_mgmt_ep_elt_inq_next()</Function>,
and <Function>rpc_mgmt_ep_elt_inq_done()</Function>.
The inquiry can return all elements until the list is exhausted, 
or the inquiry can be restricted to return elements for the following:
</Para>
<ItemizedList>
<ListItem>
<Para>Elements matching an interface identifier (UUID and version number) 
</Para>
</ListItem>
<ListItem>
<Para>Elements matching an object UUID
</Para>
</ListItem>
<ListItem>
<Para>Elements matching both an interface identifier and object UUID 
</Para>
</ListItem>
</ItemizedList>
<Para>Administrators can manage the endpoint map by using <Command>dcecp</Command> with
the <Literal>endpoint</Literal> object.
</Para>
<Para>You can use the <Function>dced_server_disable_if()</Function> routine to mark as
disabled all the endpoints for a specific interface.  
This will prevent any new RPCs with partial bindings from binding to
the server for this interface,
but not prevent clients from using the interface if they already have
a full binding with these endpoints.
You can use the <Function>dced_server_enable_if()</Function> routine to
reenable previously disabled interfaces.
In an extreme situation, you could permanently remove endpoints
directly from the local endpoint map by calling the
<Function>rpc_mgmt_ep_unregister()</Function> routine.
This function cannot be done remotely for security reasons.
<!-- -->
<!-- -->
<!-- -->
<!-- - -->
</Para>
</Sect1>
<Sect1 Id="DCEADG.DCEDD.div.5">
<Title>Binding to dced's Services</Title>
<!-- - -->
<!-- -->
<IndexTerm Id="DCEADG.DCEDD.indx.21">
<Primary>dced services</Primary>
<Secondary>binding to the services</Secondary>
</IndexTerm>
<Para>When you write a program that uses a host service, 
you begin by creating a <Command>dced</Command> binding to the service on a particular host.
Bindings are relationships between clients and servers that allow them
to communicate.
A <Command>dced</Command> binding is a specific kind of binding that not only gives your
application a binding to the <Command>dced</Command><FootnoteRef Linkend="DCEADG.DCEDD.footn.1"><!--WARNING: containment may be wrong-->
</FootnoteRef> server
but also associates the binding with a specific host service on
that server.
<Footnote Id="DCEADG.DCEDD.footn.1">
<Para>Applications must establish a binding to each host service used.
However, the endpoint mapper service uses a different binding
mechanism and API from the other host services.
This is due to the fact that the endpoint mapper service already existed
within the very large RPC API in earlier versions of DCE, 
prior to the development of <Command>dced</Command>.
</Para>
</Footnote>
</Para>
<Para><?sml-need 5>In general, an application follows these basic steps to use a host service:
</Para>
<OrderedList>
<ListItem>
<Para>Establish a binding to the service on the desired host. 
For example, your application can establish a binding to the host
data management service on another host.
</Para>
</ListItem>
<ListItem>
<Para>Obtain one or more <Command>dced</Command> entries for that service.  
For example, your application can obtain the <Command>hostdata</Command> entry that identifies
the host's cell name, among other things.
This step is valid for the following services:
</Para>
<ItemizedList>
<ListItem>
<Para>hostdata management
</Para>
</ListItem>
<ListItem>
<Para>server management
</Para>
</ListItem>
<ListItem>
<Para>key table management
</Para>
</ListItem>
</ItemizedList>
<Para>Depending on the service and function desired, 
this step may or may not be necessary.  
For example, the security validation service does not store data, 
so <Command>dced</Command> maintains no entries for this service.
</Para>
</ListItem>
<ListItem>
<?sml-need 6>
<Para>Access (read or write) the actual data for the entries obtained
or perform other functions appropriate for the service.  
For example, if your application reads the hostdata management service's 
cell name entry, the API accesses <Command>dced</Command> which may actually read
the data from a file.  For another example, 
if your application established a binding to the security validation service, 
it could validate the security daemon.
</Para>
</ListItem>
<ListItem>
<Para>Release the resources obtained in step 2.
</Para>
</ListItem>
<ListItem>
<Para>Free the binding established in step 1.
</Para>
</ListItem>
</OrderedList>
<Para>Applications bind to a host service by using the 
<Function>dced_binding_create()</Function> or 
<Function>dced_binding_from_rpc_binding()</Function> routine.  
The first routine establishes a <Command>dced</Command> binding to a service on a host 
specified in a service name, 
and the second routine establishes a <Command>dced</Command> binding to a service on a
host for which the application already has a binding.  
Both of the routines return a <Command>dced</Command> binding handle of type
<StructName Role="typedef">dced_binding_handle_t</StructName>, which is used as an input parameter to
all other <Command>dced</Command> API routines.
</Para>
<Para><!---->
<!---->
<!---->
<!---->
<!-- - -->
</Para>
<Sect2 Id="DCEADG.DCEDD.div.6">
<Title>Host Service Naming in Applications</Title>
<!-- - -->
<!-- -->
<IndexTerm Id="DCEADG.DCEDD.indx.22">
<Primary>host service naming</Primary>
</IndexTerm>
<Para>Applications include a host service name as input to the <Command>dced</Command> binding routine
<Function>dced_binding_create()</Function>.
A host service name is a string that may include a host name, or a
cell and host name.  
The following key words in the host service name refer to a specific DCE host
service:
</Para>
<VariableList>
<VarListEntry>
<Term><Command>hostdata</Command></Term>
<ListItem>
<Para>Refers to configuration data of the hostdata
management service.
</Para>
</ListItem>
</VarListEntry>
<VarListEntry>
<Term><Literal>srvrconf</Literal></Term>
<ListItem>
<Para>Refers to the static server configuration portion of
the server management service.  
This refers to the management of a DCE-installed server.
</Para>
</ListItem>
</VarListEntry>
<VarListEntry>
<Term><Literal>srvrexec</Literal></Term>
<ListItem>
<Para>Refers to the dynamic server execution portion of
the server management service.  
This refers to the management of a running DCE-installed server.
</Para>
</ListItem>
</VarListEntry>
<VarListEntry>
<Term><Command>secval</Command></Term>
<ListItem>
<Para>Refers to the security validation service.
</Para>
</ListItem>
</VarListEntry>
<VarListEntry>
<Term><Command>keytab</Command></Term>
<ListItem>
<Para>Refers to the private key data of the key table
management service.
</Para>
</ListItem>
</VarListEntry>
</VariableList>
<Para>The following examples show service names and the
locations of the hosts in the namespace:
</Para>
<VariableList>
<VarListEntry>
<Term><Symbol Role="Variable">service</Symbol></Term>
<ListItem>
<Para>The host is local, the same as the application's.
</Para>
</ListItem>
</VarListEntry>
<VarListEntry role="linebreak">
<Term><Symbol Role="Variable">service</Symbol><Literal>@hosts/</Literal><Symbol Role="Variable">host</Symbol></Term>
<ListItem>
<?sml-break>
<Para>The host is in the local namespace.  
</Para>
</ListItem>
</VarListEntry>
<VarListEntry role="linebreak">
<Term><Filename>/.:/hosts/</Filename><Symbol Role="Variable">host</Symbol><Filename>/config/</Filename><Symbol Role="Variable">service</Symbol></Term>
<ListItem>
<?sml-break>
<Para>The complete specification for <Symbol Role="Variable">service</Symbol><Literal>@hosts/</Literal><Symbol Role="Variable">host</Symbol> where the 
host is in the local namespace.
</Para>
</ListItem>
</VarListEntry>
<VarListEntry role="linebreak">
<Term><Filename>/.../</Filename><Symbol Role="Variable">cell</Symbol><Filename>/hosts/</Filename><Symbol Role="Variable">host</Symbol><Filename>/config/</Filename><Symbol Role="Variable">service</Symbol></Term>
<ListItem>
<?sml-break>
<Para>The host is in the global namespace.
</Para>
</ListItem>
</VarListEntry>
</VariableList>
<Para>Because the <Function>dced_binding_from_rpc_binding()</Function> routine already
knows which host to bind to from an RPC binding input parameter, 
it uses one of the global variables defined for each service 
(instead of a string) to specify which <Command>dced</Command> service to use.
</Para>
<Para><!---->
<!---->
<!---->
<!-- - -->
</Para>
</Sect2>
<Sect2 Id="DCEADG.DCEDD.div.7">
<Title>The dced Program Maintains Entry Lists</Title>
<!-- - -->
<!-- -->
<Para>One <Command>dced</Command> service's data is very different from another's
(for example, server configuration data versus key table data), but you
manipulate the data in a similar way.
This is because it is a simpler and more efficient design to
implement a few API routines that can handle more than one kind of data
rather than many routines that do essentially the same thing but on a different
service's data.  An added benefit is a flexible API that can handle
your own application's data and new kinds of DCE data in the future.
<IndexTerm Id="DCEADG.DCEDD.indx.23">
<Primary>dced services</Primary>
<Secondary>entry lists for services</Secondary>
</IndexTerm></Para>
<Para>To separate the actual data from the API implementation,  
a <Command>dced</Command> service maintains a list of all data items in an 
<FirstTerm>entry list</FirstTerm>.  
Entry lists contain <FirstTerm>entries</FirstTerm> that describe the name and location
of each item of data, but they do not contain the actual data.
With this mechanism, <Command>dced</Command> can obtain and manipulate data very
efficiently, without concern for the implementation and location of
the actual data.  It also supports well the model that administrators
commonly need when accessing data: 
scan a list, select an item, and use the data.
</Para>
<Para>The <Command>dced</Command> program maintains entry lists for the 
<Command>hostdata</Command>, <Literal>srvrconf</Literal>, <Literal>srvrexec</Literal>, and <Command>keytab</Command> services.
The <Command>secval</Command> service does not need an entry list because it does not 
maintain any data, but functions are performed to set its state.
</Para>
<Para>There is a special relationship between <Literal>srvrconf</Literal> and
<Literal>srvrexec</Literal> entries.
In order for <Command>dced</Command> to control the start of a server,  the server must 
have a <Literal>srvrconf</Literal> entry associated with server configuration data.  
When <Command>dced</Command> starts a server, it generates from the <Literal>srvrconf</Literal>
entry and data a <Literal>srvrexec</Literal> entry and associates the new entry with the
running server's state.
</Para>
<Para>Figure 2-1 shows the entry lists maintained by <Command>dced</Command>.
</Para>
<?sml-need 5.25i>
<Figure>
<Title>The dced Entry Lists</Title>
<Graphic Entityref="DCEADG.DCEDD.ent.1" Scalefit="1" Reprodep="300" Reprowid="300"></Graphic>
</Figure>
<?sml-space .5>
<Para>Although an entry can be associated with many different kinds of data items, 
all entries have the same structure, shown in Figure 2-2.
</Para>
<?sml-need 1i>
<Figure>
<Title>Structure of an Entry</Title>
<Graphic Entityref="DCEADG.DCEDD.ent.2"></Graphic>
</Figure>
<?sml-space .5>
<Para>Each entry is a <StructName Role="typedef">dced_entry_t</StructName> data structure.
Each member of this data structure is described as follows:
</Para>
<VariableList>
<VarListEntry>
<Term><Literal>id</Literal></Term>
<ListItem>
<?sml-need 4>
<Para>An entry UUID is necessary to uniquely identify the data item.  Some data items
have well-known UUIDs (the same UUID for the particular item on all hosts).
The data type is <StructName Role="typedef">uuid_t</StructName>.
</Para>
</ListItem>
</VarListEntry>
<VarListEntry>
<Term><FirstTerm>name</FirstTerm></Term>
<ListItem>
<?sml-need 5>
<Para>Each data item is identified with a name, to which applications refer.
The name need only be unique within an entry list 
because the entry UUID guarantees the entry's uniqueness.  
Some item names are well-known and defined in header files.
The data type is <StructName Role="typedef">dced_string_t</StructName>.
</Para>
</ListItem>
</VarListEntry>
<VarListEntry>
<Term><Literal>description</Literal></Term>
<ListItem>
<Para>This is a human-readable description of the data item.
Its data type is <StructName Role="typedef">dced_string_t</StructName>.
</Para>
</ListItem>
</VarListEntry>
<VarListEntry>
<Term><Literal>storage_tag</Literal></Term>
<ListItem>
<Para>The storage tag locates the actual data. 
Each service <Replaceable>knows</Replaceable> how to interpret this tag to find the data.
For example, some data is stored in a file, 
the name of which is contained in the storage tag.  
Other data is stored in memory and the storage tag contains a pointer to the
memory location.  The data type is <StructName Role="typedef">dced_string_t</StructName>.
</Para>
</ListItem>
</VarListEntry>
</VariableList>
<Para><!---->
<!---->
<!---->
<!-- - -->
</Para>
</Sect2>
<Sect2 Id="DCEADG.DCEDD.div.8">
<Title>Reading All of a Host Service's Data</Title>
<!-- - -->
<!-- -->
<Para><IndexTerm Id="DCEADG.DCEDD.indx.24">
<Primary>dced services</Primary>
<Secondary>host service data</Secondary>
</IndexTerm>Suppose you want to display host service data in an application that has a
graphical user interface.  The <Command>dcecp</Command> commands may not be adequate
to display data for this application.
The following example shows how to obtain the entire set of data for each
host service:
</Para>
<InformalExample>
<Para><ProgramListing>
<?Pub _font TypeSize="8pt">
dced_binding_handle_t   dced_bh;
dced_string_t           host_service;
void                    *data_list;
unsigned32              count;
dced_service_type_t     service_type;
error_status_t          status;
 .
 .
 .
while(user_selects(&amp;host_service, &amp;service_type)){ /*application*/
                                                           /*specific   */
    dced_binding_create(host_service, 
    		    dced_c_binding_syntax_default,
    	            &amp;dced_bh, 
    		    &amp;status);
    if(status == error_status_ok) {
        dced_object_read_all(dced_bh, &amp;count, &amp;data_list, &amp;status);
        if(status == error_status_ok) {
            display(service_type, count, data_list);      /* application */
                                                          /* specific    */
            dced_objects_release(dced_bh, count, data_list, &amp;status);
        } 
        dced_binding_free( dced_bh, &amp;status);
    } 
} 
<?Pub /_font><?Pub Caret>
</ProgramListing></Para>
</InformalExample>
<VariableList>
<VarListEntry role="linebreak">
<Term><Function>user_selects()</Function></Term>
<ListItem>
<?sml-need 5>
<?sml-break>
<Para>This is an example of an application-specific routine that constructs the
complete service name from host and service name information.  
Data is stored and retrievable for the <Command>hostdata</Command>, <Literal>srvrconf</Literal>,
<Literal>srvrexecD</Literal>, 
and <Command>keytab</Command> services.  No data is stored for the <Command>secval</Command> service.
</Para>
</ListItem>
</VarListEntry>
<VarListEntry role="linebreak">
<Term><Function>dced_binding_create()</Function></Term>
<ListItem>
<?sml-break>
<Para>Output from the <Literal>dced_binding_create</Literal> routine includes a <Command>dced</Command> binding
handle whose data type is <StructName Role="typedef">dced_binding_handle_t</StructName>.  
If an application already has an RPC binding handle to a server on the
host desired, it can use the <Function>dced_binding_from_rpc_binding()</Function>
routine to bind to <Command>dced</Command> and one of its host services on that host.
(Applications also use these routines to bind to the <Command>secval</Command> service 
to perform other functions.)
</Para>
</ListItem>
</VarListEntry>
<VarListEntry role="linebreak">
<Term><Function>dced_object_read_all()</Function></Term>
<ListItem>
<?sml-break>
<Para>Applications use the <Function>dced_object_read_all()</Function> 
routine to read data for all the objects in an entry list.  
The output includes the address of an allocated buffer of data 
and a count of the number of objects the buffer contains.
The data type in the buffer depends on the service used. 
</Para>
</ListItem>
</VarListEntry>
<VarListEntry>
<Term><Function>display()</Function></Term>
<ListItem>
<Para>This is an application-specific routine that displays the data.
Before the data is displayed, it must be interpreted depending on the service.
The <Command>hostdata</Command> data is an array of <StructName Role="typedef">sec_attr_t</StructName> data structures, 
the <Literal>srvrconf</Literal> and <Literal>srvrexec</Literal> data are arrays of 
<StructName Role="typedef">server_t</StructName> structures, and the <Command>keytab</Command> data is an array of
<StructName Role="typedef">dced_key_list_t</StructName> structures.
The following code fragments show the data type for each service:
</Para>
</ListItem>
</VarListEntry>
</VariableList>
<InformalExample>
<Para><ProgramListing>
<?Pub _font TypeSize="8pt">
void display(
dced_service_type_t service_type, /* dced service type */
int                 count,   /* count of the number of data items */
void                *data)   /* obtained from dced_object_read{_all}() */
{
    sec_attr_t               *host_data;
    server_t		     *servers;
    dced_key_list_t          *keytab_data;
    .
    .
    .
    switch(service_type) {
    case dced_e_service_type_hostdata:
        host_data = (sec_attr_t *)data;
        . . .
    case dced_e_service_type_srvrconf:
        servers = (server_t *)data;
        . . .
    case dced_e_service_type_srvrexec:
        servers = (server_t *)data;
        . . .
    case dced_e_service_type_keytab:
        keytab_data = (dced_key_list_t *)data;
        . . .
    default:
        /* No other dced service types have data to read. */
        break;
    }
    return;
}
<?Pub /_font><?Pub Caret>
</ProgramListing></Para>
</InformalExample>
<VariableList>
<VarListEntry role="linebreak">
<Term><Function>dced_objects_release()</Function></Term>
<ListItem>
<?sml-break>
<Para>Each call to the <Function>dced_object_read_all()</Function> routine requires a
corresponding call to <Function>dced_objects_release()</Function> to release the
resources allocated.
</Para>
</ListItem>
</VarListEntry>
<VarListEntry role="linebreak">
<Term><Function>dced_binding_free()</Function></Term>
<ListItem>
<?sml-break>
<Para>Each call to the <Function>dced_binding_create()</Function> routine requires a corresponding
call to <Function>dced_binding_free()</Function> to release the resources for the binding
allocated.
</Para>
</ListItem>
</VarListEntry>
</VariableList>
<!-- -->
<!-- -->
<!-- -->
<!-- - -->
</Sect2>
<Sect2 Id="DCEADG.DCEDD.div.9">
<Title>Managing Individual dced Entries</Title>
<!-- - -->
<!-- -->
<IndexTerm Id="DCEADG.DCEDD.indx.25">
<Primary>dced services</Primary>
<Secondary>entry lists for services</Secondary>
</IndexTerm>
<Para>Figure 2-3 shows examples of individual <Command>dced</Command> entries and the
locations of associated data.  
The data item name or its UUID is used to find an entry, 
and then the storage tag is used to find the data.
</Para>
<?sml-need 6i>
<Figure>
<Title>Accessing Hostdata</Title>
<Graphic Entityref="DCEADG.DCEDD.ent.3" Scalefit="1" Reprodep="350" Reprowid="350"></Graphic>
</Figure>
<?sml-space .5>
<Para>The data for each <Command>hostdata</Command> item is stored in a file on disk.  
The <Command>dced</Command> program uses the UUID to find the entry in the <Command>hostdata</Command> entry list.
The entry's storage tag is then used to find the data.  
For <Command>hostdata</Command>, the tag contains a filename in OSF's reference
implementation.
The data returned for one entry is an array of strings in a <StructName Role="typedef">sec_attr_t</StructName>
structure.
</Para>
<Para>The server management data is stored in memory.
The <Command>dced</Command> program uses UUIDs (maintained in the entry lists by
<Command>dced</Command>) 
to find an entry.  The location of the data in memory is indicated by
the storage tag. 
The data returned for one entry is a structure of server data (<StructName Role="typedef">server_t</StructName>).
All data for the <Literal>srvrconf</Literal> and <Literal>srvrexec</Literal> entries are accessed
from memory for fast retrieval, but the <Literal>srvrconf</Literal> data is also
stored on disk for use when a host needs to reboot.
</Para>
<Para>Each <Command>keytab</Command> entry stores its data in a file on disk.
However, like the server management entries, the <Command>keytab</Command> entries
use server names and corresponding UUIDs (maintained by <Command>dced</Command>)
to identify each entry.  
The storage tag contains the name of the key table file.  
The data returned for one entry is a list of keys
of type <StructName Role="typedef">dced_key_list_t</StructName>.
</Para>
<Para>The following example shows how to obtain and manage individual entries
for the <Command>hostdata</Command>, <Literal>srvrconf</Literal>, <Literal>srvrexec</Literal>, or <Command>keytab</Command>
services:
</Para>
<InformalExample>
<Para><ProgramListing role="page-wide">
handle_t                rpc_bh;
dced_binding_handle_t   dced_bh;
dced_entry_list_t       entries;
unsigned32              i;
dced_service_type_t     service_type;
void                    *data;
error_status_t          status;
 .
 .
 .
dced_binding_from_rpc_binding(service_type, rpc_bh, &amp;dced_bh, &amp;status);
if(status != error_status_ok) 
    return;
dced_list_get(dced_bh, &amp;entries, &amp;status);
if(status == error_status_ok) {
    for(i=0; i&lt;entries.count; i++) {
        if( select_entry(entries.list[i].name) ) {/* application specific */
            dced_object_read(dced_bh, &amp;(entries.list[i].id), &amp;data, &amp;status);
            if(status == error_status_ok) {
                display(service_type, 1, &amp;data);  /* application specific */
                dced_objects_release(dced_bh, 1, data, &amp;status);
            }
        }
    }
    dced_list_release(dced_bh, &amp;entries, &amp;status);
}
dced_binding_free(dced_bh, &amp;status);
</ProgramListing></Para>
</InformalExample>
<Para><?sml-need 17>Each routine is described as follows:
</Para>
<VariableList>
<VarListEntry role="linebreak">
<Term><Function>dced_binding_from_rpc_binding()</Function></Term>
<ListItem>
<?sml-break>
<Para>The <Function>dced_binding_from_rpc_binding()</Function> routine returns a <Command>dced</Command>
binding handle whose data type is <StructName Role="typedef">dced_binding_handle_t</StructName>.  
This binding handle is used in all subsequent
<Command>dced</Command> API routines to access the service.
The host is determined from the RPC binding handle, <Symbol Role="Variable">rpc_bh</Symbol>, 
and the <Symbol Role="Variable">service_type</Symbol> is selected from the following list:
</Para>
<ItemizedList>
<ListItem>
<Para><Literal>dced_e_service_type_hostdata
</Literal></Para>
</ListItem>
<ListItem>
<Para><Literal>dced_e_service_type_srvrconf
</Literal></Para>
</ListItem>
<ListItem>
<Para><Literal>dced_e_service_type_srvrexec
</Literal></Para>
</ListItem>
<ListItem>
<Para><Literal>dced_e_service_type_keytab
</Literal></Para>
</ListItem>
</ItemizedList>
</ListItem>
</VarListEntry>
<VarListEntry role="linebreak">
<Term><Function>dced_list_get()</Function></Term>
<ListItem>
<?sml-break>
<Para>Applications use the <Function>dced_list_get()</Function> routine to get a
service's entire list of names.
Using the <Function>dced_list_get()</Function> routine gives your application great
flexibility when manipulating entries in an entry list.
If you prefer, your application can use the 
<Function>dced_entry_cursor_initialize()</Function>,
<Function>dced_entry_get_next()</Function>, 
and <Function>dced_entry_cursor_release()</Function>
set of routines to obtain individual entries, one at a time.
</Para>
</ListItem>
</VarListEntry>
<VarListEntry role="linebreak">
<Term><Function>select_entry()</Function></Term>
<ListItem>
<?sml-break>
<Para>This is an application-specific routine that selects which entry 
to use based on the entry name.
</Para>
</ListItem>
</VarListEntry>
<VarListEntry role="linebreak">
<Term><Function>dced_object_read()</Function></Term>
<ListItem>
<?sml-break>
<Para>The default attribute for <Function>dced_object_read()</Function> is to return an 
array of strings.  The <Command>hostdata</Command> and <Command>keytab</Command> services have other read routines that allow you to specify binary data.
</Para>
</ListItem>
</VarListEntry>
<VarListEntry>
<Term><Function>display()</Function></Term>
<ListItem>
<Para>This is an example of an application-specific routine that simply
displays the server configuration data read.
Depending on the service, a different data structure is used.
For the <Command>hostdata</Command> service, a <StructName Role="typedef">sec_attr_t</StructName> is used.
For the <Literal>srvrconf</Literal> and <Literal>srvrexec</Literal> services <StructName Role="typedef">server_t</StructName>
structures are used.  For the <Command>keytab</Command> service, a
<StructName Role="typedef">dced_key_list_t</StructName> structure is used.
</Para>
</ListItem>
</VarListEntry>
<VarListEntry role="linebreak">
<Term><Function>dced_objects_release()</Function></Term>
<ListItem>
<?sml-need 4>
<?sml-break>
<Para>After your application is finished with the data read with the 
<Function>dced_object_read()</Function> routine, free the buffer of allocated data by
using the <Function>dced_objects_release()</Function> routine.
</Para>
</ListItem>
</VarListEntry>
<VarListEntry role="linebreak">
<Term><Function>dced_list_release()</Function></Term>
<ListItem>
<?sml-break>
<Para>Each call to the <Function>dced_list_get()</Function> routine requires a corresponding call
to <Function>dced_list_release()</Function> to release the resources allocated for the 
entry list.
</Para>
</ListItem>
</VarListEntry>
<VarListEntry role="linebreak">
<Term><Function>dced_binding_free()</Function></Term>
<ListItem>
<?sml-break>
<Para>Each call to the <Function>dced_binding_from_rpc_binding()</Function> routine requires a
corresponding call to <Function>dced_binding_free()</Function> to release the resources
of the allocated binding.
</Para>
</ListItem>
</VarListEntry>
</VariableList>
<Para><!---->
<!---->
<!---->
<!-- - -->
</Para>
</Sect2>
</Sect1>
<Sect1 Id="DCEADG.DCEDD.div.10">
<Title>Managing Hostdata on a Remote Host</Title>
<!-- - -->
<!-- -->
<IndexTerm Id="DCEADG.DCEDD.indx.26">
<Primary>dced services</Primary>
<Secondary>remote host service data</Secondary>
</IndexTerm>
<Para>Administrators typically use the <Command>dcecp hostdata</Command> object to
remotely manage the data of the <Command>hostdata</Command> service.  
However, application developers can use the <Command>dced</Command> API for their
own management applications or if <Command>dcecp</Command> does not handle a task in the
desired way, such as for a browser of hostdata that uses a graphical
user interface.
<!---->
<!---->
<!---->
<!-- - -->
</Para>
<Sect2 Id="DCEADG.DCEDD.div.11">
<Title>Kinds of Hostdata Stored</Title>
<!-- - -->
<!-- -->
<Para>Each <Command>hostdata</Command> item is stored in a file, and <Command>dced</Command> has a UUID
associated with each. 
The standard data items include the following well-known names:
</Para>
<VariableList>
<VarListEntry>
<Term><Literal>cell_name</Literal></Term>
<ListItem>
<Para>The name of the cell to which your host belongs is stored.
</Para>
</ListItem>
</VarListEntry>
<VarListEntry>
<Term><Literal>cell_aliases</Literal></Term>
<ListItem>
<Para>When the cell name changes, the old names are designated as cell aliases.
</Para>
</ListItem>
</VarListEntry>
<VarListEntry>
<Term><Filename>dce_cf.db</Filename></Term>
<ListItem>
<Para>The DCE configuration data file is stored.
</Para>
</ListItem>
</VarListEntry>
<VarListEntry>
<Term><Literal>host_name</Literal></Term>
<ListItem>
<Para>The host name is stored.
</Para>
</ListItem>
</VarListEntry>
<VarListEntry>
<Term><Literal>pe_site</Literal></Term>
<ListItem>
<Para>The location of the security server is stored.
</Para>
</ListItem>
</VarListEntry>
<VarListEntry role="linebreak">
<Term><Literal>post_processors</Literal></Term>
<ListItem>
<Para>The <Literal>post_processors</Literal> file contains UUID-program pairs for which the UUIDs
represent other <Command>hostdata</Command> items. 
If changes occur to an associated <Command>hostdata</Command> item, the system runs the program.
</Para>
</ListItem>
</VarListEntry>
<VarListEntry>
<Term><Literal>svc_routing</Literal></Term>
<ListItem>
<Para>The default routing file for serviceability messages is stored.
</Para>
</ListItem>
</VarListEntry>
</VariableList>
<Para>Depending on your DCE provider, additional items may exist.
In addition to the well-known <Command>hostdata</Command> items, applications can also add
their own. 
The well-known <Command>hostdata</Command> items have well-known UUIDs defined in the file
<Filename>/usr/include/dce/dced_data.h</Filename>, but you can use the
<Function>dced_inq_uuid()</Function> routine to obtain any UUID associated with any
name known to <Command>dced</Command>.
</Para>
<Para><!---->
<!---->
<!---->
<!-- - -->
</Para>
</Sect2>
<Sect2 Id="DCEADG.DCEDD.div.12">
<Title>Adding New Hostdata</Title>
<!-- - -->
<!-- -->
<Para>In addition to modifying existing hostdata, you can add your own data by
using the hostdata API.  
For example, suppose you want to add a printer to a host 
and make the configuration file part of that host's <Command>dced</Command> data.
The following example shows how to do this:
</Para>
<InformalExample>
<Para><ProgramListing role="page-wide"><?sml-point-size 9>
<!--no-op:  11-->
dced_binding_handle_t    dced_bh;
error_status_t           status;
dced_entry_t             entry;
dced_attr_list_t         data;
int                      num_attr, str_size;
sec_attr_enc_str_array_t *attr_array;
 .
 .
 .
dced_binding_create(dced_c_service_hostdata, 
    	        dced_c_binding_syntax_default,
    	        &amp;dced_bh, 
    		&amp;status);
/*Create Entry Data */
uuid_create(&amp;(entry.id), &amp;status);
entry.name = (dced_string_t)("NEWERprinter");
entry.description = (dced_string_t)("Configuration for a new printer.");
entry.storage_tag = (dced_string_t)("/etc/NEWprinter");

<?sml-need 15 >/* Create the Attributes, one for this example */
data.count = 1;
num_attr = 1;
data.list  = (sec_attr_t *)malloc( data.count * sizeof(sec_attr_t) );
(data.list)->attr_id = dced_g_uuid_fileattr;
(data.list)->attr_value.attr_encoding = sec_attr_enc_printstring_array;
str_size = sizeof(sec_attr_enc_str_array_t) + 
                      num_attr * sizeof(sec_attr_enc_printstring_p_t);
attr_array = (sec_attr_enc_str_array_t *)malloc(str_size);
(data.list)->attr_value.tagged_union.string_array = attr_array;
attr_array->num_strings = num_attr;
attr_array->strings[0] = (dced_string_t)("New printer configuration data");

dced_hostdata_create(dced_bh, &amp;entry, &amp;data, &amp;status);
dced_binding_free( dced_bh, &amp;status);
<?sml-point-size 12>
<!--no-op:  14-->
</ProgramListing></Para>
</InformalExample>
<Para>The description of this example is as follows:
</Para>
<VariableList>
<VarListEntry role="linebreak">
<Term><Function>dced_binding_create()</Function></Term>
<ListItem>
<?sml-break>
<Para>This routine creates a <Command>dced</Command> binding to a <Command>dced</Command> service.
The binding handle created is used in all subsequent calls to appropriate 
<Command>dced</Command> API routines.  By using the <Literal>dced_c_server_hostdata</Literal> value
for the first parameter, we are using the <Command>hostdata</Command> service on the
local host.
</Para>
</ListItem>
</VarListEntry>
<VarListEntry role="linebreak">
<Term>Create Entry Data</Term>
<ListItem>
<?sml-break>
<Para>Prior to creating a <Command>hostdata</Command> entry, we have to set its values.  These
include the name and UUID that <Command>dced</Command> will use to identify the new data,
a description of the entry, and a filename with the full pathname of where
the actual data will reside.
</Para>
</ListItem>
</VarListEntry>
<VarListEntry role="linebreak">
<Term>Create the Attributes</Term>
<ListItem>
<?sml-break>
<Para>The data stored is of type <StructName Role="typedef">sec_attr_t</StructName>.  
This data type is a very flexible one that can store many different
kinds of data. 
In this example, we set the file to have one attribute, 
printable string information.  This example has only one string of data.  
You can also establish binary data for the file.
</Para>
</ListItem>
</VarListEntry>
<VarListEntry role="linebreak">
<Term><Function>dced_hostdata_create()</Function></Term>
<ListItem>
<?sml-break>
<Para>This routine takes the binding handle, entry, and new data as input; it
creates the file with the new data and returns a status code.
</Para>
<Para>If the printer configuration file already exists on the host, 
but you want to now make it accessible to <Command>dced</Command>, 
use the <Function>dce_entry_add()</Function> routine instead of
<Function>dced_hostdata_create()</Function>.
</Para>
<?sml-need 5>
</ListItem>
</VarListEntry>
<VarListEntry role="linebreak">
<Term><Function>dced_binding_free()</Function></Term>
<ListItem>
<?sml-break>
<Para>Each call to the <Function>dced_binding_create()</Function> routine requires a
corresponding call to <Function>dced_binding_free()</Function> to release the binding
resources allocated.
</Para>
</ListItem>
</VarListEntry>
</VariableList>
<Para>Use the <Function>dced_hostdata_delete()</Function> routine to delete application-specific
<Command>hostdata</Command> items and their entries.   
For example, the printer installed in the example is
easily removed with this routine.   
If you are only taking the printer out of service for a short time,
use the <Function>dced_entry_remove()</Function> routine to remove the <Command>dced</Command>
entry but not the data file itself.  When the printer is later ready again, 
use the <Function>dced_entry_add()</Function> routine to reinstall it.
</Para>
<Para>Do not delete the well-known <Command>hostdata</Command> items or remove their entries.
</Para>
<Para><!---->
<!---->
<!---->
<!-- - -->
</Para>
</Sect2>
<Sect2 Id="DCEADG.DCEDD.div.13">
<Title>Modifying Hostdata</Title>
<!-- - -->
<!-- -->
<Para>Changing hostdata cannot only change the way the host works
but it also affects other files and processes on the host.   
Therefore, care should be taken when changing hostdata.  
Deleting the well-known <Command>hostdata</Command> entries can cause even more serious
operational problems for the host.
</Para>
<Para>The current as well as earlier versions of DCE provide configuration routines 
that use a <Filename>dce_cf.db</Filename> file for data.   
When hostdata changes, <Command>dced</Command> also makes the appropriate changes 
to this file so that the <Literal>dce_cf*</Literal> routines continue to work correctly.
This is one reason the <Command>hostdata</Command> items are established as well-known
names with well-known UUIDs so that <Command>dced</Command> knows which values to monitor.
</Para>
<Para>Management applications use the <Function>dced_hostdata_read()</Function> routine
to obtain the data for an entry referred to by an entry UUID. 
To modify an entry's actual data, applications use the
<Function>dced_hostdata_write()</Function> routine.   
This routine replaces the old data with the new data for the
<Command>hostdata</Command> entry represented by the entry UUID.  
The <Command>hostdata</Command> entry must already exist because this routine will
not create it.  Use the <Function>dced_hostdata_create()</Function> routine to
create new <Command>hostdata</Command> entries.
</Para>
<Para><!---->
<!---->
<!---->
<!-- - -->
</Para>
</Sect2>
<Sect2 Id="DCEADG.DCEDD.div.14">
<Title>Running Programs Automatically When Hostdata Changes</Title>
<!-- - -->
<!-- -->
<Para>The following example shows how to use the <Literal>post_processors</Literal> feature of
the well-known hostdata to cause <Command>dced</Command> to automatically run a
program if another <Command>hostdata</Command> entry changes.  
In this example, the <Literal>post_processors</Literal> file is
read, and data is added for the <Literal>NEWERprinter</Literal> <Command>hostdata</Command> entry
created in an earlier example.  The data is placed in a
<StructName Role="typedef">dced_attr_list_t</StructName> structure and written back to the
<Literal>post_processors</Literal> <Command>hostdata</Command> entry.
</Para>
<InformalExample>
<Para><ProgramListing role="page-wide"><?sml-point-size 9>
<!--no-op:  11-->
dced_binding_handle_t dced_bh;
uuid_t                entry_uuid;
sec_attr_t            *data_ptr;
error_status_t        status;
int                   i, num_strings, str_size;
sec_attr_enc_str_array_t *attr_array;
unsigned_char_t       *string_uuid, temp_string[200];
dced_attr_list_t      attr_list;

dced_binding_create(dced_c_service_hostdata, 
    	        dced_c_binding_syntax_default,
    	        &amp;dced_bh, 
    		&amp;status);
dced_hostdata_read(dced_bh, 
                   &amp;dced_g_uuid_hostdata_post_proc, 
                   &amp;dced_g_uuid_fileattr, 
                   &amp;data_ptr, 
                   &amp;status);

/* Create New Array and Copy Old Data into it */
num_strings = data_ptr->attr_value.tagged_union.string_array->num_strings + 1;
str_size = sizeof(sec_attr_enc_str_array_t) + 
                      num_strings * sizeof(sec_attr_enc_printstring_p_t);
attr_array = (sec_attr_enc_str_array_t *)malloc(str_size);
attr_array->num_strings = num_strings;
for(i=0; i&lt;(num_strings-1); i++) {
    attr_array->strings[i] =  
        data_ptr->attr_value.tagged_union.string_array->strings[i];
}

dced_inq_id(dced_bh, "NEWERprinter", &amp;entry_uuid, &amp;status);

uuid_to_string(&amp;entry_uuid, &amp;string_uuid, &amp;status);
sprintf(temp_string, "%s %s", string_uuid, "/path/and/program/to/run");
attr_array->strings[num_strings-1] = (dced_string_t)(temp_string);
data_ptr->attr_value.tagged_union.string_array = attr_array;

<?sml-need 7>attr_list.count = 1;
attr_list.list = (sec_attr_t *)malloc(attr_list.count * sizeof(sec_attr_t));
attr_list.list = data_ptr;
dced_hostdata_write(dced_bh, 
                    &amp;dced_g_uuid_hostdata_post_proc,
                    &amp;attr_list, 
                    &amp;status); 

dced_objects_release(dced_bh, 1, (void*)(data_ptr), &amp;status);
dced_binding_free(dced_bh, &amp;status);
<?sml-point-size 12>
<!--no-op:  14-->
</ProgramListing></Para>
</InformalExample>
<Para>The description of this example is as follows:
</Para>
<VariableList>
<VarListEntry role="linebreak">
<Term><Function>dced_binding_create()</Function></Term>
<ListItem>
<?sml-break>
<Para>This routine creates a <Command>dced</Command> binding to the <Command>hostdata</Command> service on a specified host.
The binding handle created is used in all subsequent calls to appropriate 
<Command>dced</Command> API routines.
The <Literal>dced_c_service_hostdata</Literal> argument is a constant string that is
the well-known name of the <Command>hostdata</Command> service.  When this string is used
by itself, it refers to the service on the local host. 
</Para>
</ListItem>
</VarListEntry>
<VarListEntry role="linebreak">
<Term><Function>dced_hostdata_read()</Function></Term>
<ListItem>
<?sml-break>
<Para>This routine reads the <Command>hostdata</Command> item referred to by the entry UUID. 
In this example, the global variable <Literal>dced_g_uuid_hostdata_post_proc</Literal> 
represents the UUID for the well-known <Literal>post_processors</Literal> file.
The second parameter specifies an attribute for the data.  
Attributes describe how the data is to be interpreted.
In this example, we know the data to be read is plain text, so we use
the global variable <Literal>dced_g_uuid_fileattr</Literal> to specify 
plain text rather than binary data (<Literal>dced_g_uuid_binfileattr</Literal>).
</Para>
</ListItem>
</VarListEntry>
<VarListEntry role="linebreak">
<Term>Create a New Array</Term>
<ListItem>
<?sml-break>
<Para>The next few lines copy the existing array of print strings into a
new array that has additional space allocated for the new data.
</Para>
</ListItem>
</VarListEntry>
<VarListEntry role="linebreak">
<Term><Function>dced_inq_id()</Function></Term>
<ListItem>
<?sml-break>
<Para>This routine acquires the UUID <Command>dced</Command> that maintains for a known entry
name.  In this example, we need the UUID for the <Literal>NEWERprinter</Literal>
<Command>hostdata</Command> entry so that it can be included in the data stored back in the
<Literal>post_processors</Literal> file.
</Para>
</ListItem>
</VarListEntry>
<VarListEntry role="linebreak">
<Term><Function>uuid_to_string()</Function></Term>
<ListItem>
<?sml-need 8>
<?sml-break>
<Para>This routine returns the string representation of a UUID.
Each line in the <Literal>post_processors</Literal> file contains a string UUID and a
program name for <Command>dced</Command> to run if the <Command>hostdata</Command> entry referred to by
the UUID changes.
The next few lines create a new string containing the string UUID and a
program name,  adds the new string to the new array, and reassigns the
new array to the old data pointer.
</Para>
</ListItem>
</VarListEntry>
<VarListEntry role="linebreak">
<Term><Function>dced_hostdata_write()</Function></Term>
<ListItem>
<?sml-break>
<Para>Since hostdata could have more than one attribute associated
with each entry, the data must be inserted in an attribute list data
structure before the <Function>dced_hostdata_write()</Function> routine is called.
In the case of the well-known <Literal>post_processors</Literal> <Command>hostdata</Command> object, 
the attribute is for a plain text file.
The <Function>dced_hostdata_write()</Function> routine replaces the old data with
the new data for the <Command>hostdata</Command> entry represented by the entry UUID.  
</Para>
</ListItem>
</VarListEntry>
<VarListEntry role="linebreak">
<Term><Function>dced_objects_release()</Function></Term>
<ListItem>
<?sml-break>
<Para>Each call to the <Function>dced_hostdata_read()</Function> routine requires a corresponding
call to <Function>dced_objects_release()</Function> to release the resources allocated.
</Para>
</ListItem>
</VarListEntry>
<VarListEntry role="linebreak">
<Term><Function>dced_binding_free()</Function></Term>
<ListItem>
<?sml-break>
<Para>Each call to the <Function>dced_binding_create()</Function> routine requires a
corresponding call to <Function>dced_binding_free()</Function> to release the
resources allocated.
</Para>
</ListItem>
</VarListEntry>
</VariableList>
<Para>The <Literal>post_processors</Literal> data for this <Command>dced</Command> now contains an additional
string with a UUID and program name.  If the <Command>hostdata</Command> item
represented by the UUID for <Literal>NEWERprinter</Literal> is changed, 
<Command>dced</Command> automatically runs the program.
<!---->
<!---->
<!---->
<!-- - -->
</Para>
</Sect2>
</Sect1>
<Sect1 Id="DCEADG.DCEDD.div.15">
<Title>Controlling Servers Remotely</Title>
<!-- - -->
<!-- -->
<IndexTerm Id="DCEADG.DCEDD.indx.27">
<Primary>server</Primary>
<Secondary>controlling remotely</Secondary>
</IndexTerm>
<IndexTerm Id="DCEADG.DCEDD.indx.28">
<Primary>remote</Primary>
<Secondary>control of servers</Secondary>
</IndexTerm>
<IndexTerm Id="DCEADG.DCEDD.indx.29">
<Primary>dced services</Primary>
<Secondary>remote control of servers</Secondary>
</IndexTerm>
<Para>Both applications developers and system administrators may want
servers to have certain support services and control functionality.
For example, servers may need mechanisms to store operational data, 
and they may need to start or stop in various ways.
The <Command>dced</Command> program provides these support and control mechanisms
for servers.
</Para>
<Para><?sml-need 8>Servers are typically configured by an administrator using the
<Command>dcecp server</Command> object in a script after the server is installed on the host.
In addition to configuring the server,
this script would commonly include other tasks like create an account
and assign a principal name for the server, 
modify the ACLs and key table files (keytabs)
to control access to the server and its resources, 
and export the server binding information to the Cell Directory Service (CDS) 
so that clients can find a server that will start dynamically later.
</Para>
<Para>After a server is configured, 
whether it runs as a persistent daemon or an on-demand (dynamic) process, 
administrators would again use <Command>dcecp</Command> if they need to control or modify 
its behavior.
Although server management is typically an administrator's task,
you may want a management application to perform these tasks, 
including the following:
</Para>
<ItemizedList>
<ListItem>
<Para>Configure a server to describe how it can be invoked
</Para>
</ListItem>
<ListItem>
<Para>Start a server based on configuration data
</Para>
</ListItem>
<ListItem>
<Para>Stop a running server 
</Para>
</ListItem>
<ListItem>
<Para>Disable a specific service provided by a running server
</Para>
</ListItem>
<ListItem>
<Para>Enable a specific service for a running server
</Para>
</ListItem>
<ListItem>
<Para>Modify a server's configuration
</Para>
</ListItem>
<ListItem>
<Para>Delete a server's configuration, effectively removing the server from
<Command>dced</Command>'s control
</Para>
</ListItem>
</ItemizedList>
<Para><!---->
<!---->
<!---->
<!-- - -->
</Para>
<Sect2 Id="DCEADG.DCEDD.div.16">
<Title>Two States of Server Management: Configuration and Execution</Title>
<!-- - -->
<!-- -->
<Para>If all servers ran as persistent processes, <Command>dced</Command> could maintain
data about each server in a single (albeit complex) data structure.
However, due to the fact that some servers may run on demand,
it is a more flexible design to have two sets of data: 
one that describes the default configuration to start the server,  
and one that describes the executing (running) server.
Earlier in this chapter when we described <Command>dced</Command> service naming,
we defined <Literal>srvrconf</Literal> and <Literal>srvrexec</Literal> objects to name the two
portions of the server management service.
</Para>
<Para><?sml-need 3>Table 2-1 lists the routines that applications can use to control
servers. 
It also shows the valid object names to use when establishing a 
<Command>dced</Command> binding prior to using the routine.
</Para>
<?sml-need 15>
<Table Frame="all" Remap="center" Orient="Port">
<Title>API Routines for Remote Server Management</Title>
<TGroup Rowsep="1" Colsep="1" Cols="2">
<ColSpec Rowsep="1" Colsep="1" Align="Left" Colwidth="1*" Colname="col1" Colnum="1">
<ColSpec Rowsep="1" Align="Left" Colwidth="1*" Colname="col2" Colnum="2">
<TBody>
<Row>
<Entry Rowsep="1"><Literal>API Routine</Literal></Entry>
<Entry Rowsep="1"><Literal>Service Name for Binding</Literal></Entry>
</Row>
<Row>
<Entry><Function>dced_server_create()</Function></Entry>
<Entry><Literal>srvrconf</Literal></Entry>
</Row>
<Row>
<Entry><Function>dced_server_start()</Function></Entry>
<Entry><Literal>srvrconf</Literal></Entry>
</Row>
<Row>
<Entry><Function>dced_server_disable_if()</Function></Entry>
<Entry><Literal>srvrexec</Literal></Entry>
</Row>
<Row>
<Entry><Function>dced_server_enable_if()</Function></Entry>
<Entry><Literal>srvrexec</Literal></Entry>
</Row>
<Row>
<Entry><Function>dced_server_stop()</Function></Entry>
<Entry><Literal>srvrexec</Literal></Entry>
</Row>
<Row>
<Entry><Function>dced_object_read()</Function></Entry>
<Entry><Literal>srvrexec </Literal>or<Literal> srvrconf</Literal></Entry>
</Row>
<Row>
<Entry><Function>dced_object_read_all()</Function></Entry>
<Entry><Literal>srvrexec </Literal>or<Literal> srvrconf</Literal></Entry>
</Row>
<Row>
<Entry><Function>dced_server_modify_attributes()</Function></Entry>
<Entry><Literal>srvrconf</Literal></Entry>
</Row>
<Row>
<Entry><Function>dced_server_delete()</Function></Entry>
<Entry><Literal>srvrconf</Literal></Entry>
</Row>
</TBody>
</TGroup>
</Table>
<Para><!---->
<!---->
<!---->
<!-- - -->
</Para>
</Sect2>
<Sect2 Id="DCEADG.DCEDD.div.17">
<Title>Configuring Servers</Title>
<!-- - -->
<!-- -->
<Para>Although administrators commonly use <Command>dcecp</Command> to configure servers
remotely, management applications can use <Command>dced</Command> API routines to 
configure a new server remotely by creating server configuration data, 
<IndexTerm Id="DCEADG.DCEDD.indx.30">
<Primary>configuring a new server remotely</Primary>
</IndexTerm>
<IndexTerm Id="DCEADG.DCEDD.indx.31">
<Primary>dced services</Primary>
<Secondary>configuring a new server remotely</Secondary>
</IndexTerm>changing a remote server's configuration, 
and deleting a server's configuration data.
</Para>
<Para><!---->
<!---->
<!---->
<!-- - -->
</Para>
<Sect3 Id="DCEADG.DCEDD.div.18">
<Title>Configuring a New DCE Server</Title>
<!-- - -->
<!-- -->
<Para>Management applications use the <Function>dced_server_create()</Function> routine to
add a new server to a host.  After a server is configured, it can be remotely
controlled by modifying its configuration attributes, 
starting and stopping it, 
enabling or disabling the RPC interfaces it supports, 
and deleting its configuration.
</Para>
<Para>Configuring the server involves describing the server for DCE by
allocating and filling in a <StructName Role="typedef">server_t</StructName> data structure, as shown in
the following example.  Note that not all <StructName Role="typedef">server_t</StructName> fields are
assigned values in this example.
</Para>
<InformalExample>
<Para><ProgramListing role="page-wide"><?sml-point-size 9>
<!--no-op:  12-->
int                   i;
dced_binding_handle_t dced_bh;
server_t              conf, exec;
dced_string_t         server_name;
uuid_t                srvrconf_id, srvrexec_id;
dced_attr_list_t      attr_list;
error_status_t        status;
static service_t      nil_service;
 .
 .
 .
dced_binding_create("srvrconf@hosts/somehost", 
                    dced_c_binding_syntax_default, 
                    &amp;dced_bh, 
                    &amp;status);
dced_inq_id(dced_bh, server_name, &amp;srvrconf_id, &amp;status);
if(status == error_status_ok) {
    puts("Configuration already exists for this server.");
    dced_binding_free(dced_bh, &amp;status);
    return;
}
/* ___________setup a server_t structure ________________*/
uuid_create(&amp;(conf.id), &amp;status);
conf.name           = server_name;
conf.entryname      = (dced_string_t)"/.:/greeter";
conf.services.count = 1;

<?sml-need 12>/* ___service_t structures represent each interface supported ___*/
conf.services.list = 
    (service_t *)malloc(conf.services.count * sizeof(service_t));
for(i=0; i&lt;conf.services.count; i++) {
    rpc_if_inq_id(greetif_v1_0_c_ifspec, 
                  &amp;(conf.services.list[i].ifspec),
                  &amp;status);
    conf.services.list[i] = nil_service;
    conf.services.list[i].ifname     = (dced_string_t)"greet";
    conf.services.list[i].annotation = (dced_string_t)"The greet application";  
    conf.services.list[i].flags      = 0;  
}

/* ______________server_fixedattr_t structure _______________*/
conf.fixed.startupflags = 
    server_c_startup_explicit | server_c_startup_on_failure;
conf.fixed.flags = 0;
conf.fixed.program = (dced_string_t)"/server/path/and/program/name";

dced_server_create(dced_bh, &amp;conf, &amp;status);
dced_binding_free(dced_bh, &amp;status);
<?sml-point-size 12>
<!--no-op:  14-->
</ProgramListing></Para>
</InformalExample>
<VariableList>
<VarListEntry role="linebreak">
<Term><Function>dced_binding_create()</Function></Term>
<ListItem>
<?sml-break>
<Para>To configure a server, the application must first create a
<Command>dced</Command> binding to the <Literal>srvrconf</Literal> portion of the 
server management service
on a specified host.  The binding handle created is used in all subsequent 
calls to appropriate dced API routines.  
</Para>
</ListItem>
</VarListEntry>
<VarListEntry role="linebreak">
<Term><Function>dced_inq_id()</Function></Term>
<ListItem>
<?sml-break>
<Para>This routine returns the UUID that <Command>dced</Command> associates with the name input.
Each configured server has an associated UUID used by 
<Command>dced</Command> to identify it.  In this example, we won't try to create a
configuration for a server that already exists.
</Para>
</ListItem>
</VarListEntry>
<VarListEntry role="linebreak">
<Term>Set Up a <StructName Role="typedef">server_t</StructName> Structure for the Server</Term>
<ListItem>
<?sml-break>
<Para>The <StructName Role="typedef">server_t</StructName> structure contains all the information DCE uses to
specify a server.
</Para>
</ListItem>
</VarListEntry>
<VarListEntry role="linebreak">
<Term>Set Up <StructName Role="typedef">service_t</StructName> Structures for Each Interface</Term>
<ListItem>
<?sml-break>
<Para>Each service that the server supports is represented by a
<StructName Role="typedef">service_t</StructName> data structure that contains the interface
specification, among other things.
In this example the client stub for the interface was compiled with
the program so that the interface specification
(<Literal>greetif_v1_0_c_ifspec</Literal>) could be obtained
without building the structure from scratch.
</Para>
</ListItem>
</VarListEntry>
<VarListEntry role="linebreak">
<Term>Set Up a <StructName Role="typedef">server_fixedattr_t</StructName> Structure</Term>
<ListItem>
<?sml-need 5>
<?sml-break>
<Para>Other fixed attributes required for all servers describe how the
server can start, the program name and pathname for the server so that
<Command>dced</Command> knows which program to start, and the program's arguments,
among other things.
</Para>
</ListItem>
</VarListEntry>
<VarListEntry role="linebreak">
<Term><Function>dced_server_create()</Function></Term>
<ListItem>
<?sml-need 4>
<?sml-break>
<Para>This routine uses the filled-in <StructName Role="typedef">server_t</StructName> structure to create a
<Literal>srvrconf</Literal> entry for <Command>dced</Command>.  The data is stored in memory for
quick access whenever the server is started.
</Para>
</ListItem>
</VarListEntry>
<VarListEntry role="linebreak">
<Term><Function>dced_binding_free()</Function></Term>
<ListItem>
<?sml-break>
<Para>Each call to the  <Function>dced_binding_create()</Function> routine requires a
corresponding call to <Function>dced_binding_free()</Function> to release the binding
resources allocated.
</Para>
</ListItem>
</VarListEntry>
</VariableList>
<Para><!---->
<!---->
<!---->
<!-- - -->
</Para>
</Sect3>
<Sect3 Id="DCEADG.DCEDD.div.19">
<Title>Modifying a Server's Configuration Attributes</Title>
<!-- - -->
<!-- -->
<Para>The data for configuring servers includes arrays of attributes.
For flexibility, <Command>dced</Command> is implemented using the extensible and 
dynamic data structures developed for the DCE security registry attributes.  
This extended registry attribute (ERA) schema gives vendors the flexibility to
modify the attributes appropriate for configuring servers on various systems.
The use and modification of these data structures are described in 
Chapter 28.
</Para>
<Para>Applications commonly use <Function>dced_server_modify_attributes()</Function>
after the <Function>dced_server_create()</Function> routine to change
the default configuration attributes (the <Literal>attributes</Literal> field of
a <StructName Role="typedef">server_t</StructName> structure) for a remote server. 
A <StructName Role="typedef">dced_attr_list_t</StructName> data structure is input that contains an
array of <StructName Role="typedef">sec_attr_t</StructName> data structures and a count of the number in
the array.
</Para>
<Para><!---->
<!---->
<!---->
<!-- - -->
</Para>
</Sect3>
<Sect3 Id="DCEADG.DCEDD.div.20">
<Title>Deleting a DCE Server</Title>
<!-- - -->
<!-- -->
<Para>Management applications use <Function>dced_server_delete()</Function> to delete
a server's configuration data and entry in its hosts <Command>dced</Command>.
Although this does not delete the actual server program from the host, 
it removes it from DCE control.
</Para>
<Para><!---->
<!---->
<!---->
<!-- - -->
</Para>
</Sect3>
</Sect2>
<Sect2 Id="DCEADG.DCEDD.div.21">
<Title>Starting and Stopping Servers</Title>
<!-- - -->
<!-- -->
<IndexTerm Id="DCEADG.DCEDD.indx.32">
<Primary>starting and stopping servers</Primary>
</IndexTerm>
<IndexTerm Id="DCEADG.DCEDD.indx.33">
<Primary>dced services</Primary>
<Secondary>starting and stopping servers</Secondary>
</IndexTerm>
<Para>A server typically runs as persistent process or is started on demand 
when a client makes a remote procedure call to it.  
Management applications can start remote servers by using the
<Function>dced_server_start()</Function> routine.   
This is a <Literal>srvrconf</Literal> routine that takes as input server configuration
data in the form of an attribute list.  
</Para>
<Para>Once a server has started, it tends to remain running until an administrator 
or management application stops it, but some applications may stop themselves
if, for example, they do not detect activity within a specified time.
To stop remote servers, applications can use the <Function>dced_server_stop()</Function>
routine.
</Para>
<Para>The following example shows how an application starts or stops a server:
</Para>
<InformalExample>
<Para><ProgramListing role="page-wide"><?sml-point-size 9>
<!--no-op:  12-->
dced_binding_handle_t dced_bh, conf_bh, exec_bh;
server_t              conf, exec;
dced_string_t         server_name;
uuid_t                srvrconf_id, srvrexec_id;
error_status_t        status;
 .
 .
 .
/* Toggle the Starting or Stopping of a Server */
dced_binding_create("srvrconf@hosts/somehost",
                    dced_c_binding_syntax_default, 
                    &amp;conf_bh, 
                    &amp;status);
dced_binding_create("srvrexec@hosts/somehost", 
                    dced_c_binding_syntax_default, 
                    &amp;exec_bh, 
                    &amp;status);
dced_inq_id(exec_bh, server_name, &amp;srvrexec_id, &amp;status);
if(status != error_status_ok) {
    puts("Server is NOT running.");
    dced_inq_id(conf_bh, server_name, &amp;srvrconf_id, &amp;status);
    dced_server_start(conf_bh, &amp;srvrconf_id, NULL, &amp;srvrexec_id, &amp;status);
}
else {
    puts("Server is RUNNING.");
    dced_server_stop(exec_bh, &amp;srvrexec_id, srvrexec_stop_rpc, &amp;status);
}
dced_binding_free(conf_bh, &amp;status);
dced_binding_free(exec_bh, &amp;status);
<?sml-point-size 12>
<!--no-op:  14-->
</ProgramListing></Para>
</InformalExample>
<VariableList>
<VarListEntry role="linebreak">
<Term><Function>dced_binding_create()</Function></Term>
<ListItem>
<?sml-break>
<Para>These routines create <Command>dced</Command> bindings to the <Literal>srvrconf</Literal> and
<Literal>srvrexec</Literal> portions of the server management service on a specified host.
The binding handles created are used in all subsequent calls to appropriate 
<Command>dced</Command> API routines.
</Para>
</ListItem>
</VarListEntry>
<VarListEntry role="linebreak">
<Term><Function>dced_inq_id()</Function></Term>
<ListItem>
<?sml-break>
<Para>This routine returns the UUID that <Command>dced</Command> associates with the name input.
Each name used to identify an object of each service has a UUID.
If <Command>dced</Command> maintains a UUID for a <Literal>srvrexec</Literal> object, the server
is running.
However, it is possible that the server is in an in-between state as
it is starting up or shutting down.  For a more robust check as to whether the
server is running, use the <Function>dced_object_read()</Function> routine
to read the <StructName Role="typedef">server_t</StructName> structure for the <Literal>srvrexec</Literal> object.  
If the <Symbol Role="Variable">exec_data.tagged_union.running_data.instance</Symbol> UUID is the same as
the <Literal>srvrconf</Literal> UUID (<Symbol Role="Variable">srvrconf_id</Symbol>), the server is running.
</Para>
</ListItem>
</VarListEntry>
<VarListEntry role="linebreak">
<Term><Function>dced_server_start()</Function></Term>
<ListItem>
<?sml-break>
<Para>This routine starts the server via <Command>dced</Command>.  The <Literal>srvrconf</Literal>
binding handle and UUID are input.
For special server configurations, you can start a server with a
specific list of attributes, but a value of NULL in the third
parameter uses the attributes of the server configuration data.
You can input a <Literal>srvrexec</Literal> UUID for <Command>dced</Command> to use, or allow it
to generate one for you.
</Para>
</ListItem>
</VarListEntry>
<VarListEntry role="linebreak">
<Term><Function>dced_server_stop()</Function></Term>
<ListItem>
<?sml-break>
<Para>This routine stops a running server identified by its <Literal>srvrexec</Literal>
UUID.  The cleanest stop method is to cause <Command>dced</Command> to use the 
<Function>rpc_mgmt_server_stop_listening()</Function> routine so that all
outstanding remote procedure calls complete before the server stops.
</Para>
</ListItem>
</VarListEntry>
<VarListEntry role="linebreak">
<Term><Function>dced_binding_free()</Function></Term>
<ListItem>
<?sml-break>
<Para>Each call to the  <Function>dced_binding_create()</Function> routine requires a
corresponding call to <Function>dced_binding_free()</Function> to release the  binding
resources allocated.
</Para>
</ListItem>
</VarListEntry>
</VariableList>
<Para><!---->
<!---->
<!---->
<!-- - -->
</Para>
</Sect2>
<Sect2 Id="DCEADG.DCEDD.div.22">
<Title>Enabling and Disabling Services of a Server</Title>
<!-- - -->
<!-- -->
<IndexTerm Id="DCEADG.DCEDD.indx.34">
<Primary>enabling services of a server</Primary>
</IndexTerm>
<IndexTerm Id="DCEADG.DCEDD.indx.35">
<Primary>disabling services of a server</Primary>
</IndexTerm>
<IndexTerm Id="DCEADG.DCEDD.indx.36">
<Primary>dced services</Primary>
<Secondary>enabling and disabling</Secondary>
</IndexTerm>
<Para>Most servers have all their services enabled to process all requests.
However, a server may need to enable or disable services to synchronize them, 
for example. 
For another example, an administrator (or management application) may need to
disable or enable services to perform orderly startup or shutdown of a server.
</Para>
<Para><?sml-need 4>Each service provided by a server is implemented as a set of procedures.  
DCE uses an interface definition to define a service and its procedures,
and application code refers to the interface when controlling the service.
</Para>
<Para>When a server starts, it initializes itself by registering with the RPC runtime
and the <Command>dced</Command> process on its host by using the
<Function>dce_server_register()</Function> routine. 
This enables all services (interfaces) that the server can support.  
The server can then disable and reenable services (in whatever order 
it requires) by using the <Function>dce_server_disable_if()</Function> 
and <Function>dce_server_enable_if()</Function> routines.
</Para>
<Para>To control the services of remote servers, management applications use 
the <Function>dced_server_disable_if()</Function> and <Function>dced_server_enable_if()</Function> routines.  These routines work on the <Literal>srvrexec</Literal> object.
When a service (interface) is disabled, a client that already knows about 
the service (through a binding handle to this interface and server) 
will no longer work because the interface is unregistered with the RPC runtime.
If you wish to have clients that already know about the server and 
service work, but wish to prohibit any new clients from finding the server and 
service, you can use <Function>rpc_mgmt_ep_unregister()</Function> to remove from the
endpoint map the server address information with respect to the service.
This routine does not affect the RPC runtime.
</Para>
<Para><!---->
<!---->
<!---->
<!-- - -->
</Para>
</Sect2>
</Sect1>
<Sect1 Id="DCEADG.DCEDD.div.23">
<Title>Validating the Security Server</Title>
<!-- - -->
<!-- -->
<Para><IndexTerm Id="DCEADG.DCEDD.indx.37">
<Primary>security</Primary>
<Secondary>validation service</Secondary>
</IndexTerm>
<IndexTerm Id="DCEADG.DCEDD.indx.38">
<Primary>dced services</Primary>
<Secondary>security validation</Secondary>
</IndexTerm>The security validation service (<Command>secval</Command>) has the following major
functions:
</Para>
<ItemizedList>
<ListItem>
<Para>It maintains a login context for the host's self-identity which includes 
periodic changes to the host's key (password).
</Para>
</ListItem>
<ListItem>
<Para>It validates and certifies to applications, usually login programs,
that the DCE security daemon (<Command>secd</Command>) is legitimate.
</Para>
</ListItem>
</ItemizedList>
<Para>Clients (including remote clients, local servers, host logins, and 
administrators) all need the security validation service to make sure that 
the <Command>secd</Command>) process being used by the host is legitimate.
The security validation service establishes the link in a trust 
chain between applications and <Command>secd</Command> 
so that applications can trust the DCE security mechanism.
</Para>
<Para><?sml-need 6>An application can trust its host's security validation service 
because they are on the same host, but an application has no way to
convince itself that <Command>secd</Command>, presumably on another host, is genuine.  
However, if the application trusts another principal
(in this case, the security validation service),  
which in turn trusts <Command>secd</Command>, 
then the trust chain now extends from the application to <Command>secd</Command>.
</Para>
<Para>Typically, a login program accesses the security validation service
when it uses the DCE Security Service's login API, described in Chapter 29.
Administrators access the <Command>secval</Command> service by using 
the <Command>dcecp</Command> <Command>secval</Command> object.
However, suppose you are writing a security monitoring application to
watch for and respond to security attacks.  
After the application binds to the <Command>secval</Command> service, 
it can call the <Function>dced_secval_validate()</Function> 
routine to verify that the <Command>secd</Command> process is legitimate.
</Para>
<Para>Applications can also use the 
<Function>dced_secval_start()</Function> and
<Function>dced_secval_stop()</Function> routines to start and stop the 
security validation service on a given host.
</Para>
<Para>For example, during configuration of a host, the <Command>dced</Command> program can start
with or without the security validation service.  
Later when security is configured, a management application can start
<Command>secval</Command> by using the <Function>dced_secval_start()</Function> routine.
For another example, suppose our security monitoring application mentioned
earlier suspects an attack.  
The application can call <Function>dced_secval_stop()</Function> to stop
the security validation service without stopping the entire <Command>dced</Command>.
This makes the login environment more restrictive.
</Para>
<Para><?sml-need 5>
<!---->
<!---->
<!---->
<!-- - -->
</Para>
</Sect1>
<Sect1 Id="DCEADG.DCEDD.div.24">
<Title>Managing Server Key Tables</Title>
<!-- - -->
<!-- -->
<Para><IndexTerm Id="DCEADG.DCEDD.indx.39">
<Primary>key table management service</Primary>
</IndexTerm>
<IndexTerm Id="DCEADG.DCEDD.indx.40">
<Primary>dced services</Primary>
<Secondary>key table management</Secondary>
</IndexTerm>Keys for servers are analogous to passwords for human users.  
Keys also play a major role in authenticated remote procedure calls.
Keys have some similarities with passwords.
For example, server keys and user passwords have to follow the same 
change policy (or a more stringent one) for a given host or cell.
This means that, just as a user has to periodically come up
with a new password, a server has to periodically generate a new key. 
It is easy to see that a human user protects a password by memorizing it.
But a server memorizes a key by storing it in a 
file called a <FirstTerm>key table</FirstTerm>.  
</Para>
<Para><?sml-need 8>It is more complex for a server to change keys than
it is for a human user to change a password. 
For example, a human user needs to only remember the latest password, 
but a server may need to maintain a history of its keys by using version
numbers so that currently active clients do not have difficulty completing a
remote procedure call. 
When a client prepares to make authenticated remote procedure calls, 
it obtains a ticket to talk with the server.
(The security registry of the authentication service encrypts this ticket 
by using the server's key, and later the server decrypts the ticket when it
receives the remote procedure call.)
</Para>
<Para>Timing can become an issue when a client makes a remote procedure call
because tickets have a limited lifetime before they expire,
and servers must also change their keys on a regular basis.
Assuming the client possesses a valid ticket, suppose that, by the time the 
client makes the call, the server has generated a new key. 
If a server maintains versions of its keys, 
the client can still complete the call.
Authentication is described in detail in Chapter 23.
</Para>
<Para>A key table usually contains keys stored by one server, 
and it must be located on the same host as that server.  
However, a key table can hold keys for a set of related servers, 
as long as all the servers reside on the same host.
Servers usually maintain their own keys, and
Chapter 30 describes the API they use.
Administrators can remotely manage key tables and the keys in the
tables by using the <Command>dcecp</Command> <Command>keytab</Command> object.
This section describes the API routines that management applications
can use to manage the key tables and keys of other servers on the network.
</Para>
<Para>Suppose you discover that a server or an entire host's security has been
compromised.   Applications can use the <Function>dced_keytab_change_key()</Function> 
routine to change a key table's key.
The following example shows how to reset the key for all key tables
on a specified host:
</Para>
<InformalExample>
<Para><ProgramListing role="page-wide"><?sml-point-size 9>
<!--no-op:  12-->
<?sml-need 5>dced_binding_handle_t   dced_bh;
dced_entry_list_t       entries;
unsigned32              i;
error_status_t          status;
dced_key_t              key;

<?sml-need 4>dced_binding_create("keytab@hosts/somehost", 
                     dced_c_binding_syntax_default,
                     &amp;dced_bh, 
                     &amp;status);

<?sml-need 6>dced_binding_set_auth_info(dced_bh,
                           rpc_c_protect_level_default,
                           rpc_c_authn_default,
                           NULL,
                           rpc_c_authz_dce,
                           &amp;status);

dced_list_get(dced_bh, &amp;entries, &amp;status);

for(i=0; i&lt;entries.count; i++) {
    generate_new_key(&amp;key); /* application specific */
    dced_keytab_change_key(dced_bh, &amp;entries.list[i].id, &amp;key, &amp;status);
}
dced_list_release(dced_bh, &amp;entries, &amp;status);
dced_binding_free( dced_bh, &amp;status);
<?sml-point-size 12>
<!--no-op:  14-->
</ProgramListing></Para>
</InformalExample>
<VariableList>
<VarListEntry role="linebreak">
<Term><Function>dced_binding_create()</Function></Term>
<ListItem>
<?sml-break>
<Para>This routine creates a <Command>dced</Command> binding to a <Command>dced</Command> service on a specified
host.
The binding handle created is used in all subsequent calls to appropriate 
<Command>dced</Command> API routines.
The <Command>keytab</Command> portion of the first argument represents the
well-known name of the keytab service.  
When this string is used by itself, it refers to the service on the
local host. 
</Para>
</ListItem>
</VarListEntry>
<VarListEntry role="linebreak">
<Term><Function>dced_binding_set_auth_info()</Function></Term>
<ListItem>
<?sml-break>
<Para>Accessing keytab data requires authenticated remote procedure calls.
The <Function>dced_binding_set_auth_info()</Function> routine sets
authentication for the <Command>dced</Command> binding handle, <Symbol Role="Variable">dced_bh</Symbol>.
</Para>
</ListItem>
</VarListEntry>
<VarListEntry role="linebreak">
<Term><Function>dced_list_get()</Function></Term>
<ListItem>
<?sml-break>
<Para>Applications use the <Function>dced_list_get()</Function> routine to get a
service's entire list of names.
</Para>
</ListItem>
</VarListEntry>
<VarListEntry role="linebreak">
<Term><Function>generate_new_key()</Function></Term>
<ListItem>
<?sml-need 5>
<?sml-break>
<Para>This application-specific routine generates the new key and fills in
a <StructName Role="typedef">dced_key_t</StructName> data structure.  This routine could use the
<Function>sec_key_mgmt_gen_rand_key()</Function> routine to randomly generate a new key.
</Para>
</ListItem>
</VarListEntry>
<VarListEntry role="linebreak">
<Term><Function>dced_keytab_change_key()</Function></Term>
<ListItem>
<?sml-break>
<Para>The <Function>dced_keytab_change_key()</Function> routine tries to change
the principal's key in the security service's registry first.
If that is successful, it changes the key in the key table.
</Para>
</ListItem>
</VarListEntry>
<VarListEntry role="linebreak">
<Term><Function>dced_list_release()</Function></Term>
<ListItem>
<?sml-break>
<Para>Each call to the <Function>dced_list_get()</Function> routine requires a
corresponding call to <Function>dced_list_release()</Function> to release the
resources allocated for the entry list.
</Para>
</ListItem>
</VarListEntry>
<VarListEntry role="linebreak">
<Term><Function>dced_binding_free()</Function></Term>
<ListItem>
<?sml-break>
<Para>Each call to the <Function>dced_binding_create()</Function> routine requires a
corresponding call to <Function>dced_binding_free()</Function> to release the
resources allocated for a <Command>dced</Command> binding handle.
</Para>
</ListItem>
</VarListEntry>
</VariableList>
<Para>For more detailed key table management, applications can peruse a key
table's list of keys by using the 
<Function>dced_keytab_initialize_cursor()</Function>,
<Function>dced_keytab_get_next_key()</Function>, and
<Function>dced_keytab_release_cursor()</Function> routines.
Reading key table data remotely presents a greater security risk
because data is sent over the network.  For remote access, these
routines actually get all the keys during one remote procedure call 
to be more efficient and to minimize the time keys are being sent over
the network.
</Para>
<Para>Earlier in this section we described how to change the key of a key table
with the <Function>dced_keytab_change_key()</Function> routine.  
The key table management service also provides the routines
<Function>dced_keytab_add_key()</Function> and
<Function>dced_keytab_remove_key()</Function>
to control key modification in even greater detail.
</Para>
<Para RevisionFlag="Changed">Finally, you can create a new key table by using
<Function>dced_keytab_create()</Function>, or you can delete an existing key
table by using <Function>dced_keytab_delete()</Function>.
<!-- -->
<!-- -->
<!-- -->
<!-- -->
</Para>
</Sect1>
<!-- ====================================================================== -->
<!-- ====================================================================== -->
<!-- ====================================================================== -->
<Sect1 RevisionFlag="Changed" Id="DCEADG.DCEDD.div.25">
<Title>Sample dced Application</Title>
<!-- -->
<!-- -->
<para>The following sections contain the complete source code, Makefile, and
<Command>dcecp</Command> installation scripts for a simple DCE application that
uses some of the <Command>dced</Command> server management facilities.</para>
<!-- -->
<para>
The <Command>greet_dced</Command> application is an adaptation of the
<Command>greet</Command> application described in Section 3.10.1 of the
&DCEIn;. The <Command>greet_dced</Command> server is registered and executed
via <Command>dced</Command>.</para>
<!-- -->
<para>
Once started, <Command>greet_dced</Command>'s behavior is identical to that
of <Command>greet</Command>. The client side of the application sends a greeting
to the server side of the application. The server prints the client's greeting
and sends a return greeting back to the client. The client prints the server's
reply and terminates. (Note that the server does not catch signals, so when it
is stopped it does not clean up its namespace or registry entries; this must be
done manually.)
</para>
<!-- -->
<!-- -->
<!-- -->
<!-- ====================================================================== -->
<Sect2 Id="DCEADG.DCEDD.div.26">
<Title>Running the Program</Title>
<!-- -->
<!-- -->
<!-- -->
<para>
To run <Command>greet_dced</Command>, do the following:</para>
<!-- -->
<!-- -->
<OrderedList>
<!-- -->
<ListItem><para>
Build the program by invoking the <Command>make</Command> command.</para>
</ListItem>
<!-- -->
<ListItem><para>
Change the <Literal>uid</Literal> and <Literal>gid</Literal> values in
<Filename>greet_dced.install</Filename> according to your preferences. If you
do change them, make sure that you chown the <Literal>keytab</Literal> file to
the same <Literal>uid</Literal> in Step 4 below.
</para></ListItem>
<!-- -->
<ListItem><para>
As <Literal>cell_admin</Literal>, do:</para>
<InformalExample><para>
			<Command>dcecp greet_dced.install</Command>
</para></InformalExample>
<para>
This creates a server principal and account with the password ``secret'',
creates a CDS directory and changes permissions on it (so that the server
principal has rights to create its server entry), creates a <Literal>keytab</Literal>
entry and creates a <Literal>srvrconf</Literal> entry. It handles errors, so if
something fails (e.g. if the user already exists) the program will still run to
completion.
</para></ListItem>
<!-- -->
<ListItem><para>
As root, do:</para>
<InformalExample><para>
			<Command>chown</Command> <Replaceable>your_user_name</Replaceable> <Filename>greet_dced.ktab</Filename>
</para></InformalExample>
<para>
This is necessary because the form of the <Command>chown</Command> command in
<Filename>greet_dced.install</Filename> will fail&mdash;it is present there only
as a reminder. If you use a different <Literal>uid</Literal> in the script, change
it here as well.
</para></ListItem>
<!-- -->
<ListItem><para>
As <Literal>cell_admin</Literal>, do:</para>
<InformalExample><para>
			<Command>dcecp -c server start greeter_dced</Command>
</para></InformalExample>
</ListItem>
<!-- -->
<ListItem><para>
Wait a few moments and check <Filename>/tmp/srv.out</Filename> to make sure the
server has started.
</para></ListItem>
<!-- -->
<ListItem><para>
Start the client as follows:</para>
<InformalExample><para>
			<Command>./greet_dced_client /.:/subsys/my_company/greet_dced/greeter_dced_entry</Command>
</para></InformalExample>
</ListItem>
<!-- -->
</OrderedList>
<!-- -->
<!-- -->
<!-- -->
<para>
After you are done, you can get rid of everything as follows:</para>
<!-- -->
<!-- -->
<OrderedList>
<!-- -->
<ListItem><para>
As <Literal>cell_admin</Literal>, stop the server:</para>
<InformalExample><para>
			<Command>dcecp -c server stop greeter_dced -method soft</Command>
</para></InformalExample>
</ListItem>
<!-- -->
<ListItem><para>
As <Literal>cell_admin</Literal>, run the delete script:</para>
<InformalExample><para>
			<Command>dcecp greet_dced.delete</Command>
</para></InformalExample>
</ListItem>
<!-- -->
</OrderedList>
<!-- -->
<!-- -->
<!-- -->
<para>
The program has the following limitations:</para>
<!-- -->
<ItemizedList>
<ListItem>
<para>
The server does not catch signals, so when it is stopped it does not
clean up anything.</para>
</ListItem>
<!-- -->
<ListItem>
<para>
The dce_server_sec_begin() routine logs in using the server principal and
keytab specified in the <Filename>srvrconf</Filename> file. It also starts a
thread to manage the server's key. However, it does <Emphasis>not</Emphasis>
start a thread to refresh the server's login context. That still needs to be
done by the application writer, using the same method that was used in DCE
1.0.x:</para>
<InformalExample><para>
<ProgramListing>
		create a thread to run the following:

		loop
			find out when the login context expires
			do a <Function>pthread_delay_np</Function> for
				(expiration time - current time - 10 minutes)
			<Function>sec_login_refresh_identity()</Function>;
			<Function>sec_key_mgmt_get_key()</Function>;
			<Function>sec_login_validate_identity()</Function>;
			<Function>sec_key_mgmt_free_key()</Function>;
		end loop
</ProgramListing>
</para></InformalExample>
<!-- -->
</ListItem>
<!-- -->
</ItemizedList>
<!-- -->
<!-- -->
<!-- -->
<Para></Para>
</Sect2>
<!-- -->
<!-- -->
<!-- -->
<!-- ====================================================================== -->
<Sect2 Id="DCEADG.DCEDD.div.27">
<Title>greet_dced.idl</Title>
<!-- -->
<!-- -->
<Para>Following are the contents of the
<Filename>greet_dced.idl</Filename> file.
<!-- -->
<!-- -->
<!-- -->
</Para>
<InformalExample>
<Para><ProgramListing role="page-wide">/*
 * greet_dced.idl
 *
 * The "greet_dced" interface.
 */

[uuid(3d6ead56-06e3-11ca-8dd1-826901beabcd),
version(1.0)]

interface greet_dcedif
{
    const long int REPLY_SIZE = 100;

    void greet_dced(
        [in]            handle_t h,
        [in, string]    char client_greeting[],
        [out, string]   char server_reply[REPLY_SIZE]
    );
}
</ProgramListing></Para>
</InformalExample>
<!-- -->
<!-- -->
<!-- -->
<!-- -->
</Sect2>
<!-- -->
<!-- ====================================================================== -->
<Sect2 Id="DCEADG.DCEDD.div.28">
<Title>greet_dced_server.c</Title>
<!-- -->
<!-- -->
<Para>Following are the contents of the
<Filename>greet_dced_server.c</Filename> file, which contains
the <Literal>greet_dced</Literal> server setup and cleanup routines. This is
where the server's interaction with <Command>dced</Command> takes place.
<!-- -->
<!-- -->
<!-- -->
</Para>
<InformalExample>
<Para><ProgramListing role="page-wide">
/* greet_dced_server_dce.c
 * Main program (initialization) for "greet_dced" server.
 * NEW SERVER for DCE 1.1.
 */

#include &lt;stdio.h>
#include &lt;dce/dced.h>
#include "greet_dced.h"
#include "util.h"

char invocation_instructions[] = "Usage:&bsol;n&bsol;
1. Invoke the dcecp program: dcecp&bsol;n&bsol;
   dcecp>&bsol;n&bsol;
2. Start the server:&bsol;n&bsol;
   dcecp> server start greeter_dced&bsol;n&bsol;
3. If dced cannot find a matching server object, 
   create server configuration:&bsol;n&bsol;
   dcecp> source greet_dced.install&bsol;n&bsol;
   dcecp> server start greeter_dced&bsol;n&bsol;
4. exit dcecp.&bsol;n&bsol;
   dcecp> exit";

FILE * out = NULL;

boolean32 rpc_mgmt_authorize (rpc_binding_handle_t client_bn,
			      unsigned32 op_no,
			      unsigned32 *st);

int main(
    int  argc, 
    char *argv[]
)
{
    server_t                    *server_conf;
    dce_server_register_data_t  register_data[1];
    dce_server_handle_t         server_handle;
    error_status_t              status;   

    /* if we are a daemon stderr is missing */
    out = fopen ("/tmp/srv.out" , "w");

    /* otherwise just use
    out = stderr;
    */

    fprintf(out, "Server start&bsol;n");    fflush(out);

    /********** Get the server's configuration from the local dced ******/
    fprintf(out, "dce_server_inq_server() call&bsol;n");
    fflush(out);
    dce_server_inq_server(&amp;server_conf, &amp;status);
    fprintf(out, "dce_server_inq_server() return&bsol;n");
    fflush(out);
    if(status != error_status_ok) { /* Describe startup via dcecp */
                                    /*  and dced */
        fprintf(out, "%s&bsol;n", invocation_instructions);
        fflush(out);
        ERROR_CHECK(status, "Cannot get server configuration structure");     
    }

    /********** login and manage key *******************************/
    fprintf(out, "dce_server_sec_begin() call&bsol;n");
    fflush(out);
    dce_server_sec_begin(dce_server_c_login|dce_server_c_manage_key, &amp;status);
    fprintf(out, "dce_server_sec_begin() return&bsol;n");
    fflush(out);
    if ( status != error_status_ok) {
        fprintf(out, "Failed in dce_server_sec_begin()&bsol;n");
        fflush(out);
        ERROR_CHECK(status, "Cannot sec_begin");     
    }

    /********** Only the protocol sequences we want ****************/
    fprintf(out, "dce_server_use_protseq() call&bsol;n");
    fflush(out);
    dce_server_use_protseq( NULL, (idl_char *)"ncadg_ip_udp", &amp;status);
    fprintf(out, "dce_server_use_protseq() return&bsol;n");
    fflush(out);
    if ( status != error_status_ok) {
        fprintf(out, "Failed to specify protocol sequence&bsol;n");
        fflush(out);
        ERROR_CHECK(status, "Cannot specify protocol sequence");     
    }

    /******* Fill in rest of registration data structures ***********/
    register_data[0].ifhandle = greet_dcedif_v1_0_s_ifspec;
    register_data[0].epv = NULL;    /* use default entry point vector */
    register_data[0].num_types = 0;
    register_data[0].types = NULL;

    /************************** Register the Server *****************/
    fprintf(out, "dce_server_register() call&bsol;n");
    fflush(out);
    dce_server_register(    
        dce_server_c_ns_export, /* flag says register server with CDS */
        server_conf,
        register_data,
        &amp;server_handle,
        &amp;status
    );
    fprintf(out, "dce_server_register() return&bsol;n");
    fflush(out);
    if ( status != error_status_ok) {
        fprintf(out, "Failed dce_server_register. Error %d&bsol;n", status);
        fflush(out);
	ERROR_CHECK(status, "Can't register server with DCE");
    }

    /******************* Listen for remote procedure calls **********/
    fprintf(out, "Listening...&bsol;n");    fflush(out);
    rpc_server_listen(rpc_c_listen_max_calls_default, &amp;status);
    fprintf(out, "Returned from listening...&bsol;n");
    fflush(out);
    if ( status != rpc_s_ok) {
        fprintf(out, "Failed rpc_server_listen&bsol;n");
        fflush(out);
	ERROR_CHECK(status, "Can't start listening for calls");
    }

    /************************ Unregister from DCE *******************/
    fprintf(out, "dce_server_unregister call&bsol;n");
    fflush(out);
    dce_server_unregister(&amp;server_handle, &amp;status);
    fprintf(out, "dce_server_unregister return&bsol;n");
    fflush(out);
    if ( status != error_status_ok) {
        fprintf(out, "Failed dce_server_unregister&bsol;n"); 
        fflush(out);
	ERROR_CHECK(status, "Can't unregister server from DCE");       
    }

    fprintf(out, "dce_server_sec_done call&bsol;n");
    fflush(out);
    dce_server_sec_done(&amp;status);
    fprintf(out, "dce_server_sec_done return&bsol;n");
    fflush(out);
    if ( status != error_status_ok) {
        fprintf(out, "Failed dce_server_sec_done&bsol;n");
        fflush(out);
	ERROR_CHECK(status, "Can't do sec_done");       
    }

}
</ProgramListing></Para>
</InformalExample>
<!-- -->
<!-- -->
<!-- -->
</Sect2>
<!-- -->
<!-- ====================================================================== -->
<Sect2 Id="DCEADG.DCEDD.div.29">
<Title>greet_dced_manager.c</Title>
<!-- -->
<!-- -->
<Para>Following are the contents of the
<Filename>greet_dced_manager.c</Filename> file, which contains
the implementation of the <Literal>greet_dced</Literal> interface.
<!-- -->
<!-- -->
</Para>
<InformalExample>
<Para><ProgramListing role="page-wide">/* 
 * greet_dced_manager.c
 *
 * Implementation of "greet_dced" interface.
 */

#include &lt;stdio.h>
#include "greet_dced.h"

void 
greet_dced(
    handle_t h, 
    idl_char *client_greeting, 
    idl_char *server_reply
)
{
    printf("The client says: %s&bsol;n", client_greeting);

    strcpy(server_reply, "Hi, client!");
}
</ProgramListing></Para>
</InformalExample>
<!-- -->
<!-- -->
<!-- -->
</Sect2>
<!-- -->
<!-- ====================================================================== -->
<Sect2 Id="DCEADG.DCEDD.div.30">
<Title>greet_dced_client.c</Title>
<!-- -->
<!-- -->
<Para>Following are the contents of the
<Filename>greet_dced_client.c</Filename> file.
<!-- -->
</Para>
<InformalExample>
<Para><ProgramListing role="page-wide">/* 
 * greet_dced_client.c
 *
 * Client of "greet_dced" interface.
 */

#include &lt;stdio.h>
#include &lt;dce/nbase.h>
#include &lt;dce/rpc.h>

#include "greet_dced.h"
#include "util.h"

int
main(
    int argc,
    char *argv[]
)
{
    rpc_ns_handle_t import_context;
    handle_t binding_h;
    error_status_t status;
    idl_char reply[REPLY_SIZE];

    if (argc &lt; 2) {
        fprintf(stderr, "usage: greet_dced_client &lt;CDS pathname>&bsol;n");
        exit(1);
    }

    /*
     * Start importing servers using the name specified
     * on the command line.
     */
    rpc_ns_binding_import_begin(
        rpc_c_ns_syntax_default, (unsigned_char_p_t) argv[1], 
            greet_dcedif_v1_0_c_ifspec, NULL, &amp;import_context, &amp;status);
    ERROR_CHECK(status, "Can't begin import");

    /*
     * Import the first server (we could interate here,
     * but we'll just take the first one).
     */
    rpc_ns_binding_import_next(import_context, &amp;binding_h, &amp;status);
    ERROR_CHECK(status, "Can't import");

    /*
     * Make the remote call.
     */
    greet_dced(binding_h, (idl_char *) "hello, server", reply);

    printf("The Greet Server said: %s&bsol;n", reply);
}
</ProgramListing></Para>
</InformalExample>
<!-- -->
<!-- -->
<!-- -->
</Sect2>
<!-- -->
<!-- ====================================================================== -->
<Sect2 Id="DCEADG.DCEDD.div.31">
<Title>util.c</Title>
<!-- -->
<!-- -->
<Para>Following are the contents of the
<Filename>util.c</Filename> file, which contains the
error message handling routines for the <Literal>greet_dced</Literal>
server and client.
<!-- -->
<!-- -->
</Para>
<InformalExample>
<Para><ProgramListing>/*
 * util.c
 *
 * Utility routine(s) shared by "greet_dced" client
 * and server programs.
 */

#include &lt;stdio.h>
#include &lt;dce/nbase.h>
#include &lt;dce/dce_error.h>

void
error_exit(
    error_status_t status,
    char *text
)
{
    unsigned char error_text[100];
    int dummy;

    dce_error_inq_text(status, error_text, &amp;dummy);
    fprintf(stderr, "Error: %s - %s&bsol;n", text, error_text);
    exit(1);
}
</ProgramListing></Para>
</InformalExample>
<!-- -->
<!-- -->
<!-- -->
</Sect2>
<!-- -->
<!-- ====================================================================== -->
<Sect2 Id="DCEADG.DCEDD.div.32">
<Title>util.h</Title>
<!-- -->
<!-- -->
<Para>Following are the contents of the
<Filename>util.h</Filename> file, which contains declarations
used in the <Filename>util.c</Filename> file.
<!-- -->
<!-- -->
</Para>
<InformalExample>
<Para><ProgramListing>/*
 * util.h
 *
 * Declarations of utility routine(s) shared by "greet_dced" client
 * and server programs.
 */

#define ERROR_CHECK(status, text) if (status != error_status_ok) \
           error_exit(status, text)

void
error_exit(
    error_status_t status,
    char *text
);
</ProgramListing></Para>
</InformalExample>
<!-- -->
<!-- -->
<!-- -->
</Sect2>
<!-- -->
<!-- ====================================================================== -->
<Sect2 Id="DCEADG.DCEDD.div.33">
<Title>greet_dced.install</Title>
<!-- -->
<!-- -->
<Para>Following are the contents of the
<Filename>greet_dced.install</Filename> file, which is
the <Command>dcecp</Command> install script for the <Literal>greet_dced</Literal> server.
<!-- -->
<!-- -->
<!-- -->
</Para>
<InformalExample>
<Para><ProgramListing role="page-wide">
set dir /users/<Replaceable>your_user_name</Replaceable>/src/dce/greet_dced/greet_dced
set cds_dir /.:/subsys/my_company/greet_dced

# Unix and group id of the server process owner
# has to own the keytab file as well
set uid 1265
set gid 1000

# add a PGO for the server
set cmd "user create greet_dced_server -group servers \
        -o osf -password secret -mypwd -dce-"
if {[catch $cmd msg] != 0} {
	echo "user create:" $msg
}

# create a directory in CDS and give access to the server
# this will fail if any directory in the chain is not already there
set cmd "directory create $cds_dir" 
if {[catch $cmd msg] != 0} {
	echo "directory create: " $msg
}

set cmd "acl modify $cds_dir -add {user greet_dced_server rwdit}"
if {[catch $cmd msg] != 0} {
	echo "acl modify: " $msg
}

# create a keytab for the server
set cmd "keytab create greet_dced.ktab &bsol;
	-storage $dir/greet_dced.ktab &bsol;
	-data {greet_dced_server plain 1 secret}"
if {[catch $cmd msg] != 0} {
	echo "keytab create: " $msg
}

# dced create the keytab file with root as its owner
# so we have to chown it, but
# this may require root permission, so it's likely to fail.
set cmd "exec chown $uid $dir/greet_dced.ktab"
if {[catch $cmd msg] != 0} {
	echo "chown: " $msg
}

# create the srvrconf object
set cmd "server create greeter_dced &bsol;
	-program $dir/greet_dced_server &bsol;
	-entryname $cds_dir/greeter_dced_entry &bsol;
	-keytabs [attrlist getvalues [keytab show greet_dced.ktab]\     
        -type uuid]&bsol;
	-principals {greet_dced_server} &bsol;
	-starton explicit &bsol;
	-directory $dir/exec_dir &bsol;
	-services { {ifname greet_dced} \
               {interface {3d6ead56-06e3-11ca-8dd1-826901beabcd 1.0}}} &bsol;
	-uid $uid -gid $gid"
if {[catch  $cmd msg] != 0} {
	echo "server create: " $msg
}
</ProgramListing></Para>
</InformalExample>
<!-- -->
<!-- -->
</Sect2>
<!-- -->
<!-- ====================================================================== -->
<Sect2 Id="DCEADG.DCEDD.div.34">
<Title>greet_dced.delete</Title>
<!-- -->
<!-- -->
<Para>Following are the contents of
<Filename>greet_dced.delete</Filename>, which contains the <Command>dcecp</Command>
cleanup script for the <Literal>greet_dced</Literal> server.
<!-- -->
<!-- -->
<!-- -->
</Para>
<InformalExample>
<Para><ProgramListing role="page-wide">
set dir /users/<Replaceable>your_user_name</Replaceable>/src/dce/greet_dced/greet_dced
set cds_dir /.:/subsys/my_company/greet_dced

catch "server delete greeter_dced"
catch "keytab delete greet_dced.ktab"
catch "directory delete $cds_dir -tree"
catch "user delete greet_dced_server"
</ProgramListing></Para>
</InformalExample>
<!-- -->
<!-- -->
</Sect2>
<!-- -->
<!-- ====================================================================== -->
<Sect2 Id="DCEADG.DCEDD.div.35">
<Title>Makefile</Title>
<!-- -->
<!-- -->
<Para>Following are the contents of the
<Literal>greet_dced</Literal> Makefile.
<!-- -->
<!-- -->
<!-- -->
</Para>
<InformalExample>
<Para><ProgramListing role="page-wide">
#####################################################################
#                                                                   
# Makefile: A generic makefile suitable for building the greet_dced 
#           application.                                            
#                                                                   
#                               -77 cols-                           
####################################################################

DCEROOT		= /opt/dcelocal
CC		= /bin/c89
IDL		= idl
LIBDIRS		= -L${DCEROOT}/usr/lib
LIBS		= -ldce -lc_r
LIBALL		= ${LIBDIRS} ${LIBS}
INCDIRS		= -I. -I${DCEROOT}/share/include
CFLAGS		= -g ${INCDIRS} -D_SHARED_LIBRARIES -D__hppa -Dhp9000s800 &bsol;
		-Dhp9000s700 -D__hp9000s800 -D__hp9000s700 -DHPUX -D__hpux &bsol;
		-Dunix +DA1.1 -D_HPUX_SOURCE
IDLFLAGS	= -v ${INCDIRS} -cc_cmd "${CC} ${CFLAGS} -c"

all:	greet_dced_client greet_dced_server

greet_dced.h greet_dced_cstub.o greet_dced_sstub.o: greet_dced.idl
	${IDL} ${IDLFLAGS} greet_dced.idl

greet_dced_client:  greet_dced.h greet_dced_client.o util.o &bsol;
			greet_dced_cstub.o
	${CC} -o greet_dced_client greet_dced_client.o &bsol;
			greet_dced_cstub.o util.o ${LIBALL}

greet_dced_server:  greet_dced.h greet_dced_server.o &bsol;
		greet_dced_manager.o util.o greet_dced_sstub.o
	${CC} -o greet_dced_server greet_dced_server.o &bsol;
		greet_dced_manager.o greet_dced_sstub.o util.o ${LIBALL}

greet_dced_client.c greet_dced_server.c util.c: util.h
greet_dced_manager.c greet_dced_client.c greet_dced_server.c: greet_dced.h

clobber:
	rm -f greet_dced.h greet_dced_client greet_dced_client.o &bsol;
		greet_dced_cstub.o greet_dced_manager.o greet_dced_server &bsol;
		greet_dced_server.o greet_dced_server_dce.o &bsol;
		greet_dced_sstub.o server_struct.o greet_dced_server_dce util.o
</ProgramListing></Para>
</InformalExample>
<!-- -->
<!-- -->
<!-- -->
</Sect2>
</Sect1>
</Chapter>
<!--+ 11/27/96 19:53:47
    | tagMorph:  $Id: dced.sgm,v 1.1.2.8 1996/12/14 20:24:17 wardr Exp $
    | tagMorph library:  $Id: dced.sgm,v 1.1.2.8 1996/12/14 20:24:17 wardr Exp $
    | sml-to-docbook:  1.25
    +-->
