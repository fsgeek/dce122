<!--
# @OSF_COPYRIGHT@
# 
# 
# HISTORY
# $Log: 9_audit.sgm,v $
# Revision 1.1.2.8  1996/12/14  20:24:07  wardr
# 	{edit,R1.2.2}
# 	penultimate format fixes
# 	[1996/12/14  20:21:58  wardr]
#
# Revision 1.1.2.7  1996/12/13  22:10:43  wardr
# 	{edit,R1.2.2}
# 	Fixed formatting problems
# 	[1996/12/13  22:08:32  wardr]
# 
# Revision 1.1.2.6  1996/12/12  21:30:23  wardr
# 	{edit,R1.2.2}
# 	Fixed formatting problems
# 	[1996/12/12  21:28:30  wardr]
# 
# Revision 1.1.2.5  1996/12/12  16:49:22  carrig
# 	{enh,R1.2.2}
# 	Minor edits
# 	[1996/12/12  16:47:10  carrig]
# 
# Revision 1.1.2.4  1996/12/06  21:10:01  carrig
# 	{enh,R1.2.2}
# 	Second pass for editor
# 	[1996/12/06  21:07:53  carrig]
# 
# Revision 1.1.2.3  1996/12/05  21:38:52  carrig
# 	{enh,R1.2.2}
# 	First pass to prepare for editing
# 	[1996/12/05  21:36:57  carrig]
# 
# Revision 1.1.2.2  1996/12/02  15:41:01  weir
# 	Removed thinsp entities, corrected other minor errors
# 	[1996/12/02  15:39:12  weir]
# 
# Revision 1.1.2.1  1996/12/01  20:43:25  weir
# 	Initial submission
# 	[1996/12/01  20:41:33  weir]
# 
# $EndLog$
-->
<!-- Fragment document type declaration subset:
ArborText, Inc., 1988-1993, v.4001
<!DOCTYPE Book PUBLIC "-//Davenport//DTD DocBook V2.4//EN" [
]>
-->
<!-- COPYRIGHT NOTICE-->
<!-- Copyright (c) 1990, 1991, 1992, 1993, 1994 Open Software Foundation, Inc.-->
<!-- ALL RIGHTS RESERVED (DCE).  See the file named COPYRIGHT.DCE for-->
<!-- the full copyright text.-->
<!-- -->
<!-- OLD HISTORY-->
<!-- Revision 1.1.4.1  1996/03/27  14:13:26  wardr-->
<!-- 	{edit R1.2.1}-->
<!-- 	More Release Edits-->
<!-- 	[1996/03/27  14:13:02  wardr]-->
<!---->
<!-- Revision 1.1.2.14  1995/06/07  14:40:38  rcb-->
<!-- 	PRENTICE HALL reformat; final edits and changes-->
<!-- 	[1995/06/05  19:59:41  rcb]-->
<!-- -->
<!-- 	PRENTICE HALL reformat-->
<!-- 	[1995/05/15  17:46:49  rcb]-->
<!-- -->
<!-- 	incorporated 1.1 edits-->
<!-- 	[1995/05/15  15:44:22  rcb]-->
<!-- -->
<!-- Revision 1.1.2.13  1994/10/20  16:10:28  cruz-->
<!-- 	more final edits.-->
<!-- 	[1994/10/20  16:09:34  cruz]-->
<!-- -->
<!-- Revision 1.1.2.12  1994/10/20  03:41:53  cruz-->
<!-- 	final editorial changes.-->
<!-- 	[1994/10/20  03:41:25  cruz]-->
<!-- -->
<!-- Revision 1.1.2.11  1994/09/14  13:28:35  cruz-->
<!-- 	Recovered from technical comments.-->
<!-- 	[1994/09/14  13:28:18  cruz]-->
<!-- -->
<!-- Revision 1.1.2.10  1994/06/13  18:20:42  devobj-->
<!-- 	cr10872- fix copyright-->
<!-- 	[1994/06/13  18:18:21  devobj]-->
<!-- -->
<!-- Revision 1.1.2.9  1994/06/07  20:51:35  weir-->
<!-- 	Fixed a missing .LE-->
<!-- 	[1994/06/07  20:51:10  weir]-->
<!-- -->
<!-- Revision 1.1.2.8  1994/05/21  16:27:57  cruz-->
<!-- 	Incorporated technical comments-->
<!-- 	[1994/05/21  16:27:33  cruz]-->
<!-- -->
<!-- Revision 1.1.2.7  1994/05/18  21:43:54  cruz-->
<!-- 	Changed the concepts, modified graphic imbed-->
<!-- 	[1994/05/18  21:43:10  cruz]-->
<!-- -->
<!-- Revision 1.1.2.6  1994/05/18  13:28:24  cruz-->
<!-- 	Added missing .LE and made other changes-->
<!-- 	[1994/05/18  13:27:25  cruz]-->
<!-- -->
<!-- Revision 1.1.2.5  1994/05/17  00:13:27  cruz-->
<!-- 	Partially recovered from R. Zeliff comments-->
<!-- 	[1994/05/17  00:12:50  cruz]-->
<!-- -->
<!-- Revision 1.1.2.4  1994/05/16  14:32:39  mleander-->
<!-- 	Minor edit-->
<!-- 	[1994/05/16  14:30:00  mleander]-->
<!-- -->
<!-- Revision 1.1.2.3  1994/05/11  21:10:02  cruz-->
<!-- 	Added index entries-->
<!-- 	[1994/05/11  21:09:41  cruz]-->
<!-- -->
<!-- Revision 1.1.2.2  1994/05/10  20:23:08  cruz-->
<!-- 	Added revision bars-->
<!-- 	[1994/05/10  20:22:44  cruz]-->
<!-- -->
<!-- Revision 1.1.2.1  1994/05/02  05:00:43  cruz-->
<!-- 	Audit app guide doc-->
<!-- 	[1994/05/02  04:57:02  cruz]-->
<!-- -->
<!---->
<!-- -->
<Chapter Id="DCEADG.SECAUD.div.1">
<Title>DCE Audit Service</Title>
<!--******************"-->
<IndexTerm Id="DCEADG.SECAUD.indx.1">
<Primary>audit</Primary>
<Secondary>service</Secondary>
</IndexTerm>
<IndexTerm Id="DCEADG.SECAUD.indx.2">
<Primary>audit</Primary>
</IndexTerm>
<Para>Audit plays a critical role in distributed systems.                             
Adequate audit facilities are necessary for detecting and recording             
critical events in distributed applications.
</Para>
<Para>Audit, a key component of DCE, is provided by the 
DCE Audit Service.       
</Para>
<Para>This chapter provides an introduction to the DCE Audit Service.
</Para>
<Sect1 Id="DCEADG.SECAUD.div.2">
<Title>Features of the DCE Audit Service</Title>
<Para>The DCE Audit Service has the following features:
<IndexTerm Id="DCEADG.SECAUD.indx.3">
<Primary>audit</Primary>
<Secondary>service</Secondary>
<Tertiary>features</Tertiary>
</IndexTerm></Para>
<ItemizedList>
<ListItem>
<Para>An audit daemon performs the logging of audit records
based on specified criteria.
</Para>
</ListItem>
<ListItem>
<Para>Application programming interfaces (APIs) 
can be used as part of application server programs to record 
audit events.
These APIs can also be used to create tools that analyze the
audit records.                          
</Para>
</ListItem>
<ListItem>
<Para>An administrative command interface to the audit daemon 
directs the daemon in selecting
the events that are going to be recorded based on                       
certain criteria.                                                               
</Para>
</ListItem>
<ListItem>
<Para>An event classification mechanism is used to logically group
a set of audit events for ease of administration.       
</Para>
</ListItem>
<ListItem>
<Para>Audit records can be directed to logs or to the console.
</Para>
</ListItem>
</ItemizedList>
</Sect1>
<Sect1 Id="DCEADG.SECAUD.div.3">
<Title>Components of the DCE Audit Service</Title>
<IndexTerm Id="DCEADG.SECAUD.indx.4">
<Primary>audit</Primary>
<Secondary>service</Secondary>
<Tertiary>components</Tertiary>
</IndexTerm>
<Para>The DCE Audit Service has three basic components:                        
</Para>
<ItemizedList>
<ListItem>
<Para>application programming interfaces (APIs)
</Para>
<Para>Provide the functions that are used to 
detect and record critical            
events when the application server services a client. 
The application programmer uses these functions at 
<FirstTerm>code points</FirstTerm> in 
the application server program to actuate the recording of audit events.
</Para>
<Para>Other APIs are also provided which can be used to create tools that 
examine and analyze the audit event records.
</Para>
</ListItem>
<ListItem>
<Para>audit daemon
</Para>
<Para>Maintains the filters and the audit logs.
</Para>
</ListItem>
<ListItem>
<Para>audit management interface
</Para>
<Para>Management interface to the audit daemon.  Used by the 
administrator to specify how the audit daemon 
will filter the recording of audit events.
This interface is available from the DCE control program.
</Para>
</ListItem>
</ItemizedList>
</Sect1>
<Sect1 Id="DCEADG.SECAUD.div.4">
<Title>DCE Audit Service Concepts</Title>
<IndexTerm Id="DCEADG.SECAUD.indx.5">
<Primary>audit</Primary>
<Secondary>service</Secondary>
<Tertiary>concepts</Tertiary>
</IndexTerm>
<Para>This section briefly describes the DCE Audit Service concepts that are
relevant to DCE application programming.
</Para>
<Sect2 Id="DCEADG.SECAUD.div.5">
<Title>Audit Clients</Title>
<IndexTerm Id="DCEADG.SECAUD.indx.6">
<Primary>audit</Primary>
<Secondary>clients</Secondary>
</IndexTerm>
<Para>All RPC-based servers, such as 
DCE servers and user-written application servers,
are potential audit clients.
The DCE Security Service, DTS, and the DCE Audit Service itself
are auditable.  That is, code points 
(discussed in Section 34.3.2) are already in place
on these services.
</Para>
<Para>The audit daemon can also audit itself.
</Para>
</Sect2>
<Sect2 Id="DCEADG.SECAUD.div.6">
<Title>Code Point</Title>
<IndexTerm Id="DCEADG.SECAUD.indx.7">
<Primary>code point</Primary>
</IndexTerm>
<IndexTerm Id="DCEADG.SECAUD.indx.8">
<Primary>audit</Primary>
<Secondary>code point</Secondary>
</IndexTerm>
<Para>A <FirstTerm>code point</FirstTerm> is a location in the application server program
where DCE audit APIs are used.
Code points generally correspond to operations or functions offered by the
application server for which audit is required. 
For example, if a bank server offers the cash withdrawal function
<Function>acct_withdraw()</Function>, this function may be deemed to be an auditable event
and be designated as a code point.
</Para>
<Para>As mentioned previously, code points are already in place in the 
DCE Security Service, DTS, and DCE Audit Service.
Code points and their associated events for the DCE Security Service
are documented in the <Filename MoreInfo="RefEntry">sec_audit_events(5sec)</Filename> reference page.
Code points and their associated events for the DTS
are documented in the <Filename MoreInfo="RefEntry">dts_audit_events(5sec)</Filename> reference page.
Code points and their associated events for the DCE Audit Service are
documented in the <Filename MoreInfo="RefEntry">aud_audit_events(5sec)</Filename> reference page.
</Para>
</Sect2>
<Sect2 Id="DCEADG.SECAUD.div.7">
<Title>Events</Title>
<IndexTerm Id="DCEADG.SECAUD.indx.9">
<Primary>audit</Primary>
<Secondary>event</Secondary>
</IndexTerm>
<Para>An <FirstTerm>audit event</FirstTerm> is any event that an audit client wishes to record.
Generally, audit events involve the integrity of the system.
For example, when a client withdraws cash from his bank account, 
this can be an audit event.
</Para>
<Para>An audit event is associated with a code point in the application
server code.
</Para>
<Para>The terms <FirstTerm>audit event</FirstTerm>, <FirstTerm>event</FirstTerm>, and <FirstTerm>auditable event</FirstTerm> are 
used interchangeably in this book.
</Para>
<Sect3 Id="DCEADG.SECAUD.div.8">
<Title>Event Names and Event Numbers</Title>
<IndexTerm Id="DCEADG.SECAUD.indx.10">
<Primary>audit</Primary>
<Secondary>event name</Secondary>
</IndexTerm>
<IndexTerm Id="DCEADG.SECAUD.indx.11">
<Primary>audit</Primary>
<Secondary>event number</Secondary>
</IndexTerm>
<Para>Each event has a symbolic name as well as a 32-bit number
assigned to it.  
Symbolic names are used only for documentation in identifying audit events.
In creating event classes, the administrator uses the event numbers
associated with these events.
</Para>
<Para>Event numbers are 32-bit integers. 
Each event number is a tuple made up of a <Symbol Role="Variable">set-id</Symbol> and the 
<Symbol Role="Variable">event-id</Symbol>. 
<IndexTerm Id="DCEADG.SECAUD.indx.12">
<Primary>audit</Primary>
<Secondary>event number</Secondary>
<Tertiary>set-id</Tertiary>
</IndexTerm>
<IndexTerm Id="DCEADG.SECAUD.indx.13">
<Primary>audit</Primary>
<Secondary>event number</Secondary>
<Tertiary>event-id</Tertiary>
</IndexTerm>The <Symbol Role="Variable">set-id</Symbol> corresponds to a set of 
event numbers and is assigned by OSF to
an organization or vendor.
The <Symbol Role="Variable">event-id</Symbol> identifies an event within the set of events.
The organization or vendor manages the issuance of the event ID numbers
to generate an event number.
</Para>
<Para>Event numbers must be consecutive.  That is, within a range of event
numbers, no gaps in the consecutive order of the numbers are allowed.
</Para>
<Para>The structure and administration of event numbers 
can be likened to the structure and administration of 
IP addresses.
Recall that an IP address is a tuple of a network ID (analogous to 
the set-id) and a host ID (analogous to the event-id).
The format and administration of event numbers are also
analogous to IP addresses, as will be discussed in the next sections.
</Para>
</Sect3>
<Sect3 Id="DCEADG.SECAUD.div.9">
<Title>Event Number Formats</Title>
<IndexTerm Id="DCEADG.SECAUD.indx.14">
<Primary>audit</Primary>
<Secondary>event number</Secondary>
<Tertiary>format</Tertiary>
</IndexTerm>
<Para>Events numbers follow one of five formats (A to E), depending on the number of 
audit events in the organization.
The format of an event number can be determined from its four high-order
bits.
</Para>
<Para>Format A can be used by large organizations (such as
OSF or major DCE vendors) that need more than 16 bits for 
the event-id.
This format allocates 7 bits to the set-id and 24 bits to the event-id.
Format A event numbers with zero (0) as its set-id are assigned to OSF.
That is, all event numbers used by OSF have a zero in the most
significant byte.
</Para>
<Para>Format B can be used by intermediate-sized organizations that need 8 to 16
bits for the event-id.
</Para>
<Para>Format C can be used by small organizations that need less than 8 bits for
the event-id.
</Para>
<Para><?sml-need 3>Format D is not administered by OSF and can be used freely within the 
cell.
These event numbers may not be unique across cells and should not be used
by application servers that are installed  in more than one cell.
</Para>
<Para>Format E is reserved for future use.
</Para>
<Para>The event number formats are illustrated in Figure 34-1.
</Para>
<Figure>
<Title>Event Number Formats</Title>
<Graphic Entityref="DCEADG.SECAUD.ent.1" Scalefit="1" Reprowid="350" Reprodep="350"></Graphic>
</Figure>
</Sect3>
<Sect3 Id="DCEADG.SECAUD.div.10">
<Title>Sample Event Numbers for DCE Servers</Title>
<Para>Following are examples of event numbers in the 
security and time servers, as defined in a header file
used by the security server and time server programs, respectively.
</Para>
<InformalExample>
<Para><ProgramListing>/* Event numbers 0x00000100 to 0x000001FF are assigned to the
   security server. */

#define AS_Request        0x00000100
#define TGS_TicketReq     0x00000101
#define TGS_RenewReq      0x00000102
#define TGS_ValidateReq   0x00000103
...

<?sml-need 8>/* Event numbers 0x00000200 to 0x000002FF are
   assigned to the time server. */

#define CNTRL_Create      0x00000200
#define CNTRL_Delete      0x00000201
#define CNTRL_Enable      0x00000202
#define CNTRL_Disable     0x00000203
...
</ProgramListing></Para>
</InformalExample>
</Sect3>
<Sect3 Id="DCEADG.SECAUD.div.11">
<Title>Sample Event Numbers for Application Servers</Title>
<Para>The following is an example of the event numbers in a 
banking server application, as defined in the application's header file.
</Para>
<InformalExample>
<Para><ProgramListing>#define evt_vn_bank_server_acct_open		0x01000000
#define evt_vn_bank_server_acct_close		0x01000001
#define evt_vn_bank_server_acct_withdraw	0x01000002
#define evt_vn_bank_server_acct_deposit		0x01000003
#define evt_vn_bank_server_acct_transfer	0x01000004
</ProgramListing></Para>
</InformalExample>
</Sect3>
<Sect3 Id="DCEADG.SECAUD.div.12">
<Title>Administration of Event Numbers</Title>
<Para>Organizations and vendors must administer the event numbers assigned to 
them (through the set-id) to maintain the unique assignment of event
numbers.        
</Para>
</Sect3>
</Sect2>
<Sect2 Id="DCEADG.SECAUD.div.13">
<Title>Event Class</Title>
<IndexTerm Id="DCEADG.SECAUD.indx.15">
<Primary>event class</Primary>
</IndexTerm>
<IndexTerm Id="DCEADG.SECAUD.indx.16">
<Primary>audit</Primary>
<Secondary>event class</Secondary>
</IndexTerm>
<Para>Audit events can be logically grouped together into an <FirstTerm>event class</FirstTerm>.
Event classes provide an efficient mechanism by which sets of events can be
specified by a single value.
Generally, an event class consists of audit events with some 
commonality.
For example, in a bank server program, the
cash transaction events
(deposit, withdrawal, and transfer) may be grouped into an event class.
</Para>
<Para>Typically, the administrator creates and maintains event classes.
For more details to event classes, see the &DCEAc;.
</Para>
</Sect2>
<Sect2 Id="DCEADG.SECAUD.div.14">
<Title>Event Class Number</Title>
<IndexTerm Id="DCEADG.SECAUD.indx.17">
<Primary>event class number</Primary>
</IndexTerm>
<IndexTerm Id="DCEADG.SECAUD.indx.18">
<Primary>audit</Primary>
<Secondary>event class number</Secondary>
</IndexTerm>
<Para>Each event class is assigned an <FirstTerm>event class number</FirstTerm>.  
Like the event number, the event class number is a 32-bit integer
and is administered by OSF.
Event class numbers are discussed in more detail 
in the &DCEAc;.
</Para>
</Sect2>
<Sect2 Id="DCEADG.SECAUD.div.15">
<Title>Filters</Title>
<IndexTerm Id="DCEADG.SECAUD.indx.19">
<Primary>filter</Primary>
</IndexTerm>
<Para>Once the code points are identified and placed in the application server,
all audit events corresponding to the code points will be logged in the
audit trail file, irrespective of the outcome of these audit events.
However, recording all audit events under all conditions may neither be
practical nor necessary.
<FirstTerm>Filters</FirstTerm> provide a means by which audit records are logged only when
certain conditions are satisfied.
A filter is composed of <FirstTerm>filter guides</FirstTerm> that specify these conditions.
Filter guides also specify what action to take if the condition
(outcome) is met.
</Para>
<Para>A filter answers the following questions:
</Para>
<ItemizedList>
<ListItem>
<Para>Who will be audited?
</Para>
</ListItem>
<ListItem>
<Para>What events will be audited?
</Para>
</ListItem>
<ListItem>
<Para>What should be the outcome of these events before an audit record is written?
</Para>
</ListItem>
<ListItem>
<Para>Will the audit record be logged in the audit trail file or displayed
on the system console, or both?
</Para>
</ListItem>
</ItemizedList>
<Para>For example, for the bank server program,
you can impose the following conditions before an audit record is written:
</Para>
<Para>``Audit all withdrawal transactions (the audit events) that fail because of
access denial (outcome of the event) that are 
performed by all customers in the DCE cell (who to audit).'' 
</Para>
<Sect3 Id="DCEADG.SECAUD.div.16">
<Title>Filter Subject Identity</Title>
<IndexTerm Id="DCEADG.SECAUD.indx.20">
<Primary>filter</Primary>
<Secondary>subject identity</Secondary>
</IndexTerm>
<Para>A filter is associated with one <FirstTerm>filter subject</FirstTerm>, which
denotes to what the filter applies.
The filter subject is the client of the distributed application who
caused the event to happen.
</Para>
<Para>For more information on the filter subject identity, see the &DCEAc;.
</Para>
</Sect3>
</Sect2>
<Sect2 Id="DCEADG.SECAUD.div.17">
<Title>Audit Records</Title>
<IndexTerm Id="DCEADG.SECAUD.indx.21">
<Primary>audit</Primary>
<Secondary>record</Secondary>
<Tertiary>structure</Tertiary>
</IndexTerm>
<Para>An audit record has a header and a trailer.  The header
contains the common information of all events; for example, 
the identities of the
client and the server, group privileges used, address, and time.  
The trailer
contains event-specific information; 
for example, the dollar amount of a 
fund-transfer event.
</Para>
<Para>Audit records are initialized and filled by calling the audit API
functions.  
</Para>
<Para>There are four stages in the writing of an audit record:
</Para>
<OrderedList>
<ListItem>
<Para>First, the code point registers an audit event.  At this point,
the audit record does not yet have any form.
</Para>
</ListItem>
<ListItem>
<Para>The audit record descriptor is built.
This is a representation of the audit data that is built by the
<Function>dce_aud_start()</Function>, <Function>dce_aud_put_ev_info()</Function>, and 
<Function>dce_aud_commit()</Function> functions.
This is stored in a data structure in the client's core memory until the
<Function>dce_aud_commit()</Function> function is called.
This data is not IDL-encoded until the <Function>dce_aud_commit()</Function> call. 
</Para>
</ListItem>
<ListItem>
<Para>The audit record is written to the log.
This is stored as IDL-encoded data in the audit log.
</Para>
</ListItem>
<ListItem>
<Para>The audit record is transformed into human-readable form.
This is a representation built in a data structure in the core memory
by calls to the <Function>dce_aud_next()</Function> and <Function>dce_aud_print()</Function> functions.
This is not an IDL-encoded representation. 
</Para>
</ListItem>
</OrderedList>
</Sect2>
<Sect2 Id="DCEADG.SECAUD.div.18">
<Title>Audit Trail File</Title>
<IndexTerm Id="DCEADG.SECAUD.indx.22">
<Primary>audit</Primary>
<Secondary>trail file</Secondary>
</IndexTerm>
<IndexTerm Id="DCEADG.SECAUD.indx.23">
<Primary>trail file</Primary>
</IndexTerm>
<Para>The <FirstTerm>audit trail file</FirstTerm> contains all the audit 
records that are written by the audit daemon or the audit APIs.
You can specify either a central audit trail file or a local audit trail file.
The central audit trail file is maintained by the audit daemon.
The local audit trail file is maintained by the audit library.  
The terms <FirstTerm>audit trail file</FirstTerm> and <FirstTerm>audit trail</FirstTerm> are 
used interchangeably in this book. 
</Para>
</Sect2>
</Sect1>
<Sect1 Id="DCEADG.SECAUD.div.19">
<Title>Administration and Programming in DCE Audit</Title>
<IndexTerm Id="DCEADG.SECAUD.indx.24">
<Primary>audit</Primary>
<Secondary>trail file</Secondary>
<Tertiary>life cycle of</Tertiary>
</IndexTerm>
<Para>This section gives you an example of how auditing is
accomplished using the DCE Audit Service.
Both the programmer and the administrator have to perform tasks
to enable the writing of audit records in the audit trail.
This section looks at the life cycle of an audit trail, from the 
time that audit events are identified in the server code, to the 
time that they are filtered and recorded in the audit trail file.
</Para>
<Para>A bank server example illustrates each stage of the life
cycle.
In this example, the bank server program offers five operations:
<Function>acct_open()</Function>, <Function>acct_close()</Function>, 
<Function>acct_withdraw()</Function>, <Function>acct_deposit()</Function>, and
<Function>acct_transfer()</Function>.
</Para>
<Sect2 Id="DCEADG.SECAUD.div.20">
<Title>Programmer Tasks</Title>
<Para>The programmer uses the audit APIs to enable auditing in the application
server program, as illustrated in the following:
</Para>
<OrderedList>
<ListItem>
<Para>The programmer identifies the code points in the bank server program.
Because each of the five operations (corresponding to an RPC interface)
offered by the bank server is
a security-relevant operation, the programmer
deems that all these operations are security relevant, and 
assigns a codepoint to each operation.
Each code point corresponds to an audit event.
</Para>
<InformalExample>
<Para><ProgramListing>acct_open()         /* first code point */
acct_close()        /* second code point */
acct_withdraw()     /* third code point */
acct_deposit()      /* fourth code point */
acct_transfer()     /* fifth code point */
</ProgramListing></Para>
</InformalExample>
</ListItem>
<ListItem>
<Para>The programmer then assigns an event number to each audit 
event (corresponding to each code point).
For example, the programmer
defines these numbers in his header file as follows:
</Para>
<InformalExample>
<Para><ProgramListing>/* event number for the 1st code point, acct_open() */
#define evt_vn_bank_server_acct_open      0xC1000000 

/* event number for the 2nd code point, acct_close() */
#define evt_vn_bank_server_acct_close     0xC1000001

/* event number for the 3rd code point, acct_withdraw() */
#define evt_vn_bank_server_acct_withdraw  0xC1000002 

/* event number for the 4th code point, acct_deposit() */
#define evt_vn_bank_server_acct_deposit    0xC1000003

/* event number for the 5th code point, acct_transfer() */
#define evt_vn_bank_server_acct_transfer   0xC1000004
</ProgramListing></Para>
</InformalExample>
</ListItem>
<ListItem>
<Para>The programmer now starts adding audit API functions to the 
bank server program.
</Para>
<Para>In the initialization part of the server, the application programmer
uses the <Function>dce_aud_open()</Function> API to open an audit trail file for writing
the audit records.
This function uses the lowest-numbered event as one of its parameters; 
in this case, <Literal>0xC1000000</Literal> (<Literal>evt_vn_bank_server_acct_open</Literal>).
Using the lowest-numbered event enhances the performance
of the filter search.
</Para>
<InformalExample>
<Para><ProgramListing>/* open an audit trail file for writing */
dce_aud_open(aud_c_trl_open_write, description,
               evt_vn_bank_server_acct_open,
               5, &amp;audit_trail, &amp;status);
</ProgramListing></Para>
</InformalExample>
</ListItem>
<ListItem>
<Para>The programmer invokes the following DCE audit APIs 
at each code point: 
</Para>
<ItemizedList>
<ListItem>
<Para>The <Function>dce_aud_start()</Function> API, to initialize an audit record.
This function assigns the event number to the event represented by
the code point.
Thus, it uses the event number corresponding to that code point as one of
its parameters.
</Para>
</ListItem>
<ListItem>
<Para>The <Function>dce_aud_put_ev_info()</Function> API, to add event-specific information
to the audit record.
</Para>
</ListItem>
<ListItem>
<Para>The <Function>dce_aud_commit()</Function> API, to commit the audit record in the
audit trail file.
</Para>
</ListItem>
</ItemizedList>
<Para>The use of these three APIs is illustrated in the following example
of the bank server program:
</Para>
<InformalExample>
<Para><ProgramListing>acct_open()     /* first code point */

/* Uses the event number for acct_open(), 
   evt_vn_bank_server_acct_open */
dce_aud_start(evt_vn_bank_server_acct_open,
              binding,options,outcome,&amp;ard, &amp;status);

/* If events need to be logged,
   add trailer info (optional) */
if (ard) 
  dce_aud_put_ev_info(ard,info,&amp;status);

/* If events need to be logged, 
   add header and trailer info */
if (ard) 
  dce_aud_commit(at,ard,options,format,&amp;outcome,&amp;status);

acct_close()   /* second code point */

/* Uses the event number for acct_close(), 
 * evt_vn_bank_server_acct_close */
dce_aud_start(evt_vn_bank_server_acct_close,
              binding,options,outcome,&amp;ard, &amp;status);

if (ard) /* If events need to be logged */
  dce_aud_put_ev_info(ard,info,&amp;status);

if (ard) /* If events need to be logged */
  dce_aud_commit(at,ard,options,format,&amp;outcome,&amp;status);
</ProgramListing></Para>
</InformalExample>
</ListItem>
<ListItem>
<?sml-need 6>
<Para>The programmer uses the <Function>dce_aud_close()</Function> API in the termination routine
of the application server.  This API closes the
audit trail file (and frees up memory) if the applicaton server shuts down.
</Para>
<Para>The coding of the application program to enable auditing is essentially
complete at this point.
</Para>
</ListItem>
</OrderedList>
</Sect2>
<Sect2 Id="DCEADG.SECAUD.div.21">
<Title>Administrator Tasks</Title>
<Para>The following steps will be performed by the administrator to filter
the audit events and control the audit trail file.
</Para>
<OrderedList>
<ListItem>
<Para>The administrator obtains the event numbers corresponding 
to the events represented by the code
points in the bank server program from the programmer
or from the program's documentation.
These  events and their assigned event numbers are as follows:
</Para>
<VariableList>
<VarListEntry>
<Term><Function>acct_open()</Function></Term>
<ListItem>
<Para>0xC1000000
</Para>
</ListItem>
</VarListEntry>
<VarListEntry>
<Term><Function>acct_close()</Function></Term>
<ListItem>
<Para>0xC1000001
</Para>
</ListItem>
</VarListEntry>
<VarListEntry>
<Term><Function>acct_withdraw()</Function></Term>
<ListItem>
<Para>0xC1000002
</Para>
</ListItem>
</VarListEntry>
<VarListEntry>
<Term><Function>acct_deposit()</Function></Term>
<ListItem>
<Para>0xC1000003
</Para>
</ListItem>
</VarListEntry>
<VarListEntry>
<Term><Function>acct_transfer()</Function></Term>
<ListItem>
<Para>0xC1000004
</Para>
</ListItem>
</VarListEntry>
</VariableList>
</ListItem>
<ListItem>
<Para>The administrator decides to create two event classes:  
the <Literal>account_creation_operations</Literal> class comprised of 
<Function>acct_open()</Function> and <Function>acct_close()</Function>, and the 
<Literal>account_balance_operations</Literal> class comprised of 
<Function>acct_withdraw()</Function>, <Function>acct_deposit()</Function>, and <Function>acct_transfer()</Function>.
</Para>
</ListItem>
<ListItem>
<Para>The administrator decides to create two filters:
one for all users within the cell
(for the cell <Filename>/.:/torolabcell</Filename>), and the other for all other
users.
</Para>
<Para>The filter for all users within the cell has the following guides:
</Para>
<OrderedList>
<ListItem>
<Para>Audit the events in the event class  
<Literal>account_balance_operations</Literal> only, 
subject to the next condition.
</Para>
</ListItem>
<ListItem>
<Para>Write an audit record only if an operation 
in that event class failed because of access denial.
</Para>
</ListItem>
<ListItem>
<Para>If the first condition is fulfilled,
write the audit record in an audit trail file only.
</Para>
</ListItem>
</OrderedList>
<Para><?sml-need 3>The filter for all other users has the following filter guides:
</Para>
<OrderedList>
<ListItem>
<Para>Audit the events in both event classes, subject to the next condition.
</Para>
</ListItem>
<ListItem>
<Para>Write an audit record if an operation 
in that event class succeeded or failed.
</Para>
</ListItem>
<ListItem>
<Para>Write the audit record both in an audit trail file and the console.
</Para>
</ListItem>
</OrderedList>
</ListItem>
</OrderedList>
<Para>The scenarios described here can be summarized as follows:
</Para>
<ItemizedList>
<ListItem>
<Para>The programmer identifies the code points in the distributed application
corresponding to the audit events.
</Para>
</ListItem>
<ListItem>
<Para>The programmer 
uses the audit API functions on those code points to enable auditing.
</Para>
</ListItem>
<ListItem>
<Para>The administrator creates event classes that are used to group
the audit events.
</Para>
</ListItem>
<ListItem>
<Para>The administrator creates filters to narrow down the conditions by which
audit records are written for the audit events.
</Para>
</ListItem>
</ItemizedList>
<Para>Figure 34-2 illustrates the interactions among the audit client 
program, the audit API functions (<Literal>libaudit</Literal>), 
the audit daemon (<Command>auditd</Command>),
and the audit management interface (available from the DCE control
program, <Command>dcecp</Command>).  
</Para>
<Figure>
<Title>Overview of the DCE Audit Service</Title>
<Graphic Entityref="DCEADG.SECAUD.ent.2" Scalefit="1" Reprowid="350" Reprodep="350"></Graphic>
</Figure>
<?sml-space .5>
<Para><?sml-need 7>The audit management interface (accessed through the DCE control program)
is used by the systems administrator to specify who, what, when, and how to
audit.  This is accomplished through the use of the filters.
The audit daemon maintains the filter's information in its address space.
The filters are also stored in local files so that the filters can be
restored when the machine restarts, and so that audit clients can read the
filter information from these files.
</Para>
<Para>The audit clients are the users of the filter information.
Using the audit APIs, the audit client reads the information on filters
and event class configuration.
The audit client reads these files only once, unless an update notification is
received from the audit daemon (which is triggered by an update initiated
by an administrator using the DCE control program).	
</Para>
</Sect2>
</Sect1>
</Chapter>
<!--+ 11/27/96 19:53:47
    | tagMorph:  $Id: 9_audit.sgm,v 1.1.2.8 1996/12/14 20:24:07 wardr Exp $
    | tagMorph library:  $Id: 9_audit.sgm,v 1.1.2.8 1996/12/14 20:24:07 wardr Exp $
    | sml-to-docbook:  1.25
    +-->
