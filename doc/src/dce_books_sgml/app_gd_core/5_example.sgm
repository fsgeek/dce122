<!--
# @OSF_COPYRIGHT@
# 
# 
# HISTORY
# $Log: 5_example.sgm,v $
# Revision 1.1.2.8  1996/12/14  20:24:01  wardr
# 	{edit,R1.2.2}
# 	penultimate format fixes
# 	[1996/12/14  20:21:50  wardr]
#
# Revision 1.1.2.7  1996/12/13  22:10:35  wardr
# 	{edit,R1.2.2}
# 	Fixed formatting problems
# 	[1996/12/13  22:08:25  wardr]
# 
# Revision 1.1.2.6  1996/12/12  21:30:14  wardr
# 	{edit,R1.2.2}
# 	Fixed formatting problems
# 	[1996/12/12  21:28:22  wardr]
# 
# Revision 1.1.2.5  1996/12/12  16:49:14  carrig
# 	{enh,R1.2.2}
# 	Minor edits
# 	[1996/12/12  16:47:00  carrig]
# 
# Revision 1.1.2.4  1996/12/06  21:09:53  carrig
# 	{enh,R1.2.2}
# 	Second pass for editor
# 	[1996/12/06  21:07:44  carrig]
# 
# Revision 1.1.2.3  1996/12/05  21:38:44  carrig
# 	{enh,R1.2.2}
# 	First pass to prepare for editing
# 	[1996/12/05  21:36:48  carrig]
# 
# Revision 1.1.2.2  1996/12/02  15:40:50  weir
# 	Removed thinsp entities, corrected other minor errors
# 	[1996/12/02  15:39:05  weir]
# 
# Revision 1.1.2.1  1996/12/01  20:43:17  weir
# 	Initial submission
# 	[1996/12/01  20:41:26  weir]
# 
# 	Initial submission
# 	[1996/11/29  20:35:36  weir]
# 
# $EndLog$
-->
<!-- Fragment document type declaration subset:
ArborText, Inc., 1988-1993, v.4001
<!DOCTYPE Book PUBLIC "-//Davenport//DTD DocBook V2.4//EN" [
]>
-->
<!---->
<!-- COPYRIGHT NOTICE-->
<!-- Copyright (c) 1990, 1991, 1992, 1993 Open Software Foundation, Inc.-->
<!-- ALL RIGHTS RESERVED (DCE).  See the file named COPYRIGHT.DCE in the-->
<!-- src directory for the full copyright text.-->
<!---->
<!---->
<!-- OLD HISTORY-->
<!-- Revision 1.1.6.10  1995/06/07  14:43:29  rcb-->
<!-- 	PRENTICE HALL reformat-->
<!-- 	[1995/04/13  19:12:54  rcb]-->
<!---->
<!-- 	incorporated 1.1 edits-->
<!-- 	[1995/04/13  18:05:56  rcb]-->
<!---->
<!-- Revision 1.1.6.9  1994/09/30  18:51:46  weir-->
<!-- 	Fixing internal cross-references-->
<!-- 	[1994/09/30  18:51:13  weir]-->
<!-- -->
<!-- Revision 1.1.6.8  1994/05/11  18:01:09  jshirley-->
<!-- 	Minor edits for SGML conversion. changed \(en to -, .oS(wide) to .oS, \n to \\n.-->
<!-- 	[1994/05/11  18:00:50  jshirley]-->
<!-- -->
<!-- Revision 1.1.6.7  1993/01/28  18:47:01  cjd-->
<!-- 	Embedded copyright notice-->
<!-- 	[1993/01/28  18:08:09  cjd]-->
<!-- -->
<!-- Revision 1.1.6.6  1993/01/21  18:01:57  lmk-->
<!-- 	CR#4589: In response to a 1/10/93 bug report change by Howard Melman,-->
<!-- 	decided to remove the change I made to the file in the immediately-->
<!-- 	preceding revision.  Both Howard Melman and John Dugas approved the-->
<!-- 	change.  Instead, a change will be made to the Porting Guide.-->
<!-- 	[1993/01/21  18:01:03  lmk]-->
<!-- -->
<!-- Revision 1.1.6.5  1993/01/21  16:00:36  lmk-->
<!-- 	CR#4589: added Pthreads search path information-->
<!-- 	[1993/01/21  15:59:23  lmk]-->
<!-- -->
<!-- Revision 1.1.6.4  1993/01/14  20:01:02  buckler-->
<!-- 	Changed .zA/.zZ markers from 4908 to 4909, to match log message.-->
<!-- 	Also fixed formatting in this part of the file...some random-->
<!-- 	SML codes that shouldn't have been there.-->
<!-- 	[1993/01/14  20:00:26  buckler]-->
<!-- -->
<!-- Revision 1.1.6.3  1993/01/08  19:29:21  johnson-->
<!-- 	CR#:     4909-->
<!-- 	File:    /src/app_gd/threads/5_example.gpsml-->
<!-- 	Change:  Removed routine listed as called by the example (it's not)-->
<!-- 	[1993/01/08  19:28:28  johnson]-->
<!-- -->
<!-- Revision 1.1.6.2  1992/11/20  21:00:56  weir-->
<!-- 	Moved into 1.0.2doc tree-->
<!-- 	[1992/11/20  20:58:08  weir]-->
<!-- -->
<!-- Revision 1.1.4.5  1992/11/11  23:54:51  buckler-->
<!-- 	Corrected index entries-->
<!-- 	[1992/11/11  23:00:24  buckler]-->
<!-- -->
<!-- Revision 1.1.4.4  1992/10/12  22:20:02  casey-->
<!-- 	Index corrections for PH-->
<!-- 	[1992/10/12  22:16:49  casey]-->
<!-- -->
<!-- Revision 1.1.4.3  1992/10/08  17:45:51  lmk-->
<!-- 	Prentice-Hall edits only-->
<!-- 	[1992/10/08  17:44:18  lmk]-->
<!-- -->
<!-- Revision 1.1.4.2  1992/09/10  20:44:09  buckler-->
<!-- 	Second editorial review-->
<!-- 	[1992/09/10  20:39:37  buckler]-->
<!-- -->
<!-- Revision 1.1.2.2  1992/06/18  16:37:13  buckler-->
<!-- 	Incorporated editorial review-->
<!-- 	[1992/06/18  16:36:35  buckler]-->
<!-- -->
<!-- Revision 1.1  1992/01/29  16:07:04  damon-->
<!-- 	Initial revision-->
<!-- -->
<!---->
<!-- Copyright 1991, Open Software Foundation, Inc.  ALL RIGHTS RESERVED.-->
<!-- ********************************************************************-->
<!--                                                                    *-->
<!-- COPYRIGHT (c) 1991 BY DIGITAL EQUIPMENT CORPORATION,               *-->
<!-- Maynard, Massachusetts                                             *-->
<!-- All Rights Reserved.                                               *-->
<!--                                                                    *-->
<!-- This document is furnished under a license and may be used and     *-->
<!-- copied only in accordance with the terms of such license and with  *-->
<!-- the inclusion of the above copyright notice.  No title to or        *-->
<!-- ownership of the document is hereby transferred.                   *-->
<!--                                                                    *-->
<!-- The information in this document is subject to change without      *-->
<!-- notice and should not be construed as a commitment by Digital      *-->
<!-- Equipment Corporation.                                             *-->
<!--                                                                    *-->
<!-- ********************************************************************-->
<Chapter Id="DCEADG.THREXA.div.1">
<Title>DCE Threads Example</Title>
<Para><IndexTerm Id="DCEADG.THREXA.indx.1">
<Primary>thread</Primary>
<Secondary>example</Secondary>
</IndexTerm>
<IndexTerm Id="DCEADG.THREXA.indx.2">
<Primary>prime number search example</Primary>
</IndexTerm>
<IndexTerm Id="DCEADG.THREXA.indx.3">
<Primary>example program</Primary>
<Secondary>prime number search</Secondary>
</IndexTerm>The example in this chapter shows the use of DCE Threads in a C
program that performs a prime number search.  The program finds a specified
number of prime numbers, then sorts and displays these numbers.  Several
threads participate in the search: each thread takes a number (the next one
to be checked), sees if it is a prime, records it if it is prime, and then
takes another number, and so on.
</Para>
<Para>This program shows the work crew model of programming (see Chapter 6).
The workers (threads) increment a number 
(<Literal>current_num</Literal>) to get their next work assignment, which in this case
is the same task as before, but with a different number to check for a 
prime.  As a whole, the worker threads are responsible for finding a
specified number of prime numbers, at which point their work is completed.
</Para>
<Sect1 Id="DCEADG.THREXA.div.2">
<Title>Details of Program Logic and Implementation</Title>
<Para>The number of workers to be used and the requested number of prime numbers
to be found are defined constants.  A macro is used to check for bad status 
(bad status returns a value of &minus;1), 
and to print a given string and the associated error value upon bad
status.  Data to be accessed by all threads (mutexes, condition variables,
and so forth) are declared as global items.
</Para>
<Para>Worker threads execute the prime search routine, which 
begins by synchronizing with the boss (or parent) thread 
by using a predicate and a condition variable.  Always enclose 
a condition wait in a predicate loop to prevent a thread
from continuing if it receives a spurious wakeup.  The lock associated
with the condition variable must be held by the thread when the 
condition wait call is made.  The lock is implicitly released within the 
condition wait call and acquired again when the thread resumes.
The same mutex must be used for all operations performed on a
specific condition variable.
</Para>
<Para>After the parent sets the predicate and broadcasts, the workers begin
finding prime numbers until canceled by a fellow worker who has found the
last requested prime number.  Upon each iteration, the workers increment the
current number to be worked on and take the new value as their work item.  A
mutex is locked and unlocked around getting the next work item.  The 
purpose of the mutex is to ensure the atomicity of this operation and the 
visibility of the new value across all threads.  This type of locking
protocol needs to be performed on all global data to ensure its visibility and
protect its integrity.
</Para>
<Para>Each worker thread then determines if its current work item (a number) is
prime by trying to divide numbers into it.  If the number proves to be
nondivisible, it is put on the list of primes.  Cancels are explicitly
turned off while working with the list of primes in order to better control any
cancels that do occur.  The list and its current count are protected by
locks, which also protect the cancellation process of all other worker
threads upon finding the last requested prime.  While still under the prime
list lock, the current worker checks to see if it has found the last
requested prime, and if so unsets a predicate and cancels all other worker
threads.  Cancels are then reenabled.  The canceling thread falls out of
the work loop as a result of the predicate that it unsets.
</Para>
<Para><?sml-need 3>The parent thread's flow of execution is as follows: set up the environment,
create worker threads, broadcast to them that they can start, join each
thread as it finishes, and sort and print the list of primes.
</Para>
<ItemizedList>
<ListItem>
<Para>Setting up of the environment requires initializing mutexes and the one
condition variable used in the example.
</Para>
</ListItem>
<ListItem>
<Para>Creation of worker threads is straightforward and utilizes the default
attributes (<Literal>pthread_attr_default</Literal>).  Note again that locking is performed
around the predicate on which the condition variable wait loops.  In
this case, the locking is simply done for visibility and is not related to
the broadcast function.
</Para>
</ListItem>
<ListItem>
<Para>As the parent joins each of the returning worker threads, it receives an
exit value from them that indicates whether a thread exited normally or
not.  In this case the exit values on all but one of the worker threads
are <Literal>&minus;1</Literal>, indicating that they were canceled.
</Para>
</ListItem>
<ListItem>
<Para>The list is then sorted to ensure that the prime numbers are in order
from lowest to highest.
</Para>
</ListItem>
</ItemizedList>
<Para>The following pthread routines are used in this example:
</Para>
<ItemizedList>
<ListItem>
<Para><Function>pthread_cancel()</Function>
</Para>
</ListItem>
<ListItem>
<Para><Function>pthread_cond_broadcast()</Function>
</Para>
</ListItem>
<ListItem>
<Para><Function>pthread_cond_init()</Function>
</Para>
</ListItem>
<ListItem>
<Para><Function>pthread_cond_wait()</Function>
</Para>
</ListItem>
<ListItem>
<Para><Function>pthread_create()</Function>
</Para>
</ListItem>
<ListItem>
<Para><Function>pthread_detach()</Function>
</Para>
</ListItem>
<ListItem>
<Para><Function>pthread_exit()</Function>
</Para>
</ListItem>
<ListItem>
<Para><Function>pthread_join()</Function>
</Para>
</ListItem>
<ListItem>
<Para><Function>pthread_mutex_init()</Function>
</Para>
</ListItem>
<ListItem>
<Para><Function>pthread_mutex_lock()</Function>
</Para>
</ListItem>
<ListItem>
<Para><Function>pthread_mutex_unlock()</Function>
</Para>
</ListItem>
<ListItem>
<Para><Function>pthread_setcancel()</Function>
</Para>
</ListItem>
<ListItem>
<Para><Function>pthread_testcancel()</Function>
</Para>
</ListItem>
</ItemizedList>
</Sect1>
<Sect1 Id="DCEADG.THREXA.div.3">
<Title>DCE Threads Example Body</Title>
<Para>The following is the DCE Threads example.
</Para>
<InformalExample>
<Para><ProgramListing>
<?Pub _font TypeSize="8pt">
<?sml-point-size 10>
<!--no-op:  12-->
#include &lt;pthread.h>
#include &lt;stdio.h>
#include &lt;stdlib.h>
/*
 * Constants used by the example.
 */
#define     workers     5           /* Threads to perform prime check   */
#define     request     110         /* Number of primes to find         */
/*
 * Macros
 */
#define check(status,string) &bsol;
	if (status == -1) perror (string)
/*
 * Global data
 */
pthread_mutex_t prime_list;     /* Mutex for use in accessing the prime */
pthread_mutex_t current_mutex;  /* Mutex associated with current number */
pthread_mutex_t cond_mutex;     /* Mutex used for ensuring CV integrity */
pthread_cond_t  cond_var;       /* Condition variable for thread start  */
int             current_num= -1;/* Next number to be checked, start odd */
int             thread_hold= 1; /* Number associated w/condition state  */
int             count=0;        /* Prime numbers count;/index to primes */
int             primes[request];/* Store primes; synchronize access     */
pthread_t       threads[workers]; /* Array of worker threads            */
<?sml-need 22>/*
 * Worker thread routine.
 *
 * Worker threads start with this routine, which begins with a condition
 * wait designed to synchronize the workers and the parent.  Each worker
 * thread then takes a turn taking a number for which it will determine
 * whether or not it is prime.
 *
 */
void
prime_search (pthread_addr_t arg)
    {
    div_t   div_results;            /* DIV results: quot and rem        */
    int     numerator;              /* Used for determining primeness   */
    int     denominator;            /* Used for determining primeness   */
    int     cut_off;                /* Number being checked div 2       */
    int     notifiee;               /* Used during a cancellation       */
    int     prime;                  /* Flag used to indicate primeness  */
    int     my_number;              /* Worker thread identifier         */
    int     status;                 /* Hold status from pthread calls   */
    int     not_done=1;             /* Work loop predicate              */
    my_number = (int)arg;
    /*
     * Synchronize threads and the parent using a condition variable, 
     * for which the predicate (thread_hold) will be set by the parent.
     */
    status = pthread_mutex_lock (&amp;cond_mutex);
    check(status,"1:Mutex_lock bad status\n");

    while (thread_hold) {
        status = pthread_cond_wait (&amp;cond_var, &amp;cond_mutex);
        check(status,"3:Cond_wait bad status\n");
        }

    status = pthread_mutex_unlock (&amp;cond_mutex);
    check(status,"4:Mutex_unlock bad status\n");
    /*
     * Perform checks on ever larger integers until the requested 
     * number of primes is found.
     */
    while (not_done) {

        /* cancellation point */
        pthread_testcancel ();

<?sml-need 9>        /* Get next integer to be checked */
        status = pthread_mutex_lock (&amp;current_mutex);
        check(status,"6:Mutex_lock bad status\n");

        current_num = current_num + 2;             /* Skip even numbers */
        numerator = current_num;

        status = pthread_mutex_unlock (&amp;current_mutex);
        check(status,"9:Mutex_unlock bad status\n");

        /* Only need to divide in half of number to verify not prime */
        cut_off = numerator/2 + 1;
        prime = 1;

        /* Check for prime; exit if something evenly divides */
        for (denominator = 2; ((denominator &lt; cut_off) &amp;&amp; (prime)); 
                                                        denominator++) {
            prime = numerator % denominator;
            }
        if (prime != 0) {

            /* Explicitly turn off all cancels */
            pthread_setcancel(CANCEL_OFF);

            /* 
             * Lock a mutex and add this prime number to the list.  Also,
             * if this fulfills the request, cancel all other threads.
             */
            status = pthread_mutex_lock (&amp;prime_list);
            check(status,"10:Mutex_lock bad status\n");

            if (count &lt; request)  {
                primes[count] = numerator;
                count++;
                }
            else if (count == request) {
                not_done = 0;
                count++;
                for (notifiee = 0; notifiee &lt; workers; notifiee++) {
                    if (notifiee != my_number) {
                        status = pthread_cancel ( threads[notifiee] );
                        check(status,"12:Cancel bad status\n");
                        }
                    }
                }

            status = pthread_mutex_unlock (&amp;prime_list);
            check(status,"13:Mutex_unlock bad status\n");

<?sml-need 17>            /* Reenable cancels */
            pthread_setcancel(CANCEL_ON);
            } 
        pthread_testcancel ();
        }
    pthread_exit (my_number);
    }
main()
    {
    int     worker_num;     /* Counter used when indexing workers   */
    int     exit_value;     /* Individual worker's return status    */
    int     list;           /* Used to print list of found primes   */
    int     status;         /* Hold status from pthread calls       */
    int     index1;         /* Used in sorting prime numbers        */
    int     index2;         /* Used in sorting prime numbers        */
    int     temp;           /* Used in a swap; part of sort         */
    int     not_done;       /* Indicates swap made in sort          */

   * Create mutexes
   */
  status = pthread_mutex_init (&amp;prime_list, pthread_mutexattr_default);
  check(status,"15:Mutex_init bad status\n");
  status = pthread_mutex_init (&amp;cond_mutex, pthread_mutexattr_default);
  check(status,"16:Mutex_init bad status\n");
  status = pthread_mutex_init (&amp;current_mutex, pthread_mutexattr_default);
  check(status,"17:Mutex_init bad status\n");

    /* 
     * Create condition variable
     */
    status = pthread_cond_init (&amp;cond_var, pthread_condattr_default);
    check(status,"45:Cond_init bad status\n");

    /*
     * Create the worker threads.
     */
    for (worker_num = 0; worker_num &lt; workers; worker_num++) {
        status = pthread_create (
            &amp;threads[worker_num],
            pthread_attr_default,
            prime_search,
            (pthread_addr_t)worker_num);
        check(status,"19:Pthread_create bad status\n");
    }

<?sml-need 14>    /*
     * Set the predicate thread_hold to zero, and broadcast on the 
     * condition variable that the worker threads may proceed.
     */
    status = pthread_mutex_lock (&amp;cond_mutex);
    check(status,"20:Mutex_lock bad status\n");

    thread_hold = 0;

    status = pthread_cond_broadcast (&amp;cond_var);
    check(status,"20.5:cond_broadcast bad status\n");

    status = pthread_mutex_unlock (&amp;cond_mutex);
    check(status,"21:Mutex_unlock bad status\n");
    /*
     * Join each of the worker threads inorder to obtain their 
     * summation totals, and to ensure each has completed 
     * successfully.  
     *
     * Mark thread storage free to be reclaimed upon termination by 
     * detaching it.
     */
    for (worker_num = 0; worker_num &lt; workers; worker_num++) {

        status = pthread_join (
            threads[worker_num],
            &amp;exit_value );
        check(status,"23:Pthread_join bad status\n");

    if (exit_value == worker_num) printf("thread terminated normally\n");

        status = pthread_detach ( &amp;threads[worker_num] ); 
        check(status,"25:Pthread_detach bad status\n");
        }

<?sml-need 17>   /*
    * Take the list of prime numbers found by the worker threads and
    * sort them from lowest value to highest.  The worker threads work
    * concurrently; there is no guarantee that the prime numbers 
    * will be found in order.  Therefore, a sort is performed.
    */
    not_done = 1;
    for (index1 = 1; ((index1 &lt; request) &amp;&amp; (not_done)); index1++) {
        for (index2 = 0; index2 &lt; index1; index2++) {
            if (primes[index1] &lt; primes[index2]) {
                temp = primes[index2];
                primes[index2] = primes[index1];
                primes[index1] = temp;
                not_done = 0;
                }
            }
        }

    /*
     * Print out the list of prime numbers that the worker threads
     * found.
     */
    printf ("The list of %d primes follows:\n", request);
    printf("%d",primes[0]);

    for (list = 1; list &lt; request; list++) {
        printf (",	%d", primes[list]);
        }

    printf ("\n");
    }
<?sml-point-size 12>
<!--no-op:  14-->
<?Pub /_font><?Pub Caret>
</ProgramListing></Para>
</InformalExample>
<IndexTerm Id="DCEADG.THREXA.indx.4" SpanEnd="DCEADG.THREXA.indx.1">
</Sect1>
</Chapter>
<!--+ 11/27/96 19:53:47
    | tagMorph:  $Id: 5_example.sgm,v 1.1.2.8 1996/12/14 20:24:01 wardr Exp $
    | tagMorph library:  $Id: 5_example.sgm,v 1.1.2.8 1996/12/14 20:24:01 wardr Exp $
    | sml-to-docbook:  1.25
    +-->










