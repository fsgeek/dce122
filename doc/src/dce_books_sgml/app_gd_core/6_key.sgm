<!--
# @OSF_COPYRIGHT@
# 
# 
# HISTORY
# $Log: 6_key.sgm,v $
# Revision 1.1.2.8  1996/12/14  20:24:03  wardr
# 	{edit,R1.2.2}
# 	penultimate format fixes
# 	[1996/12/14  20:21:52  wardr]
#
# Revision 1.1.2.7  1996/12/13  22:10:37  wardr
# 	{edit,R1.2.2}
# 	Fixed formatting problems
# 	[1996/12/13  22:08:27  wardr]
# 
# Revision 1.1.2.6  1996/12/12  21:30:17  wardr
# 	{edit,R1.2.2}
# 	Fixed formatting problems
# 	[1996/12/12  21:28:24  wardr]
# 
# Revision 1.1.2.5  1996/12/12  16:49:17  carrig
# 	{enh,R1.2.2}
# 	Minor edits
# 	[1996/12/12  16:47:03  carrig]
# 
# Revision 1.1.2.4  1996/12/06  21:09:56  carrig
# 	{enh,R1.2.2}
# 	Second pass for editor
# 	[1996/12/06  21:07:47  carrig]
# 
# Revision 1.1.2.3  1996/12/05  21:38:46  carrig
# 	{enh,R1.2.2}
# 	First pass to prepare for editing
# 	[1996/12/05  21:36:50  carrig]
# 
# Revision 1.1.2.2  1996/12/02  15:40:52  weir
# 	Removed thinsp entities, corrected other minor errors
# 	[1996/12/02  15:39:07  weir]
# 
# Revision 1.1.2.1  1996/12/01  20:43:20  weir
# 	Initial submission
# 	[1996/12/01  20:41:28  weir]
# 
# 	Initial submission
# 	[1996/11/29  20:35:38  weir]
# 
# $EndLog$
-->
<!-- Fragment document type declaration subset:
ArborText, Inc., 1988-1993, v.4001
<!DOCTYPE Book PUBLIC "-//Davenport//DTD DocBook V2.4//EN" [
]>
-->
<!---->
<!-- COPYRIGHT NOTICE-->
<!-- Copyright (c) 1990, 1991, 1992, 1993 Open Software Foundation, Inc.-->
<!-- ALL RIGHTS RESERVED (DCE).  See the file named COPYRIGHT.DCE in the-->
<!-- src directory for the full copyright text.-->
<!---->
<!---->
<!-- OLD HISTORY-->
<!-- Revision 1.1.8.1  1996/03/27  14:04:00  wardr-->
<!-- 	{edit R1.2.1}-->
<!-- 	More Release Edits-->
<!-- 	[1996/03/27  14:03:31  wardr]-->
<!---->
<!-- Revision 1.1.6.4  1995/06/07  14:40:06  rcb-->
<!-- 	PRENTICE HALL reformat-->
<!-- 	[1995/05/11  16:02:39  rcb]-->
<!-- -->
<!-- 	incorporated 1.1 edits-->
<!-- 	[1995/05/11  15:54:26  rcb]-->
<!-- -->
<!-- Revision 1.1.6.3  1993/01/28  18:46:18  cjd-->
<!-- 	Embedded copyright notice-->
<!-- 	[1993/01/28  18:07:14  cjd]-->
<!-- -->
<!-- Revision 1.1.6.2  1992/11/20  20:00:42  weir-->
<!-- 	Moved into 1.0.2doc tree-->
<!-- 	[1992/11/20  19:50:33  weir]-->
<!-- -->
<!-- Revision 1.1.4.5  1992/11/11  23:53:03  buckler-->
<!-- 	Corrected index entries-->
<!-- 	[1992/11/11  22:58:27  buckler]-->
<!-- -->
<!-- Revision 1.1.4.4  1992/10/10  15:50:26  casey-->
<!-- 	Index changes for PH-->
<!-- 	[1992/10/10  15:37:01  casey]-->
<!-- -->
<!-- Revision 1.1.4.3  1992/10/09  15:17:53  lmk-->
<!-- 	Prentice-Hall edits only-->
<!-- 	[1992/10/09  15:14:42  lmk]-->
<!-- -->
<!-- Revision 1.1.4.2  1992/09/11  21:58:06  lmk-->
<!-- 	Prentice-Hall edits only-->
<!-- 	[1992/09/11  21:57:11  lmk]-->
<!-- -->
<!-- Revision 1.1.2.2  1992/05/07  15:08:21  millette-->
<!-- 	Bug 2769: Miscellaneous editorial and format errors.-->
<!-- 	[1992/05/07  14:28:06  millette]-->
<!-- -->
<!-- Revision 1.1  1992/01/29  16:08:34  damon-->
<!-- 	Initial revision-->
<!-- -->
<!---->
<!-- (c) Copyright 1991, Open Software Foundation, Inc.  ALL RIGHTS RESERVED-->
<Chapter Id="DCEADG.SECKEY.div.1">
<Title>The Key Management API</Title>
<Para><IndexTerm Id="DCEADG.SECKEY.indx.1">
<Primary>key management</Primary>
</IndexTerm>
<IndexTerm Id="DCEADG.SECKEY.indx.2">
<Primary>API</Primary>
<Secondary>key management</Secondary>
</IndexTerm>
<IndexTerm Id="DCEADG.SECKEY.indx.3">
<Primary>key management API</Primary>
</IndexTerm>Every principal has an entry in the registry database that specifies
a secret key.  In the case of an interactive principal (that is, a
user), the secret key is derived from the principal's password.  Just
as users need to keep their passwords secure by memorizing them (rather
than writing them down, for example), a noninteractive principal also
needs to be able to store and retrieve its secret key in a secure
manner.  The key management API provides simple key management
functions for noninteractive principals.
</Para>
<Para>While the key management routines themselves are relatively secure,
it is up to the application to ensure the security of the file or
other device used to store the key.  By default, server principals
that run on the same computer share a local key file; however, the
key management API also allows principals to specify an alternative
local file.
</Para>
<Para>When users change their passwords, they are free to forget their old
passwords.  When a noninteractive principal changes its secret key,
however, there may be clients with valid tickets to that principal
that are encoded with the old key.  To save clients the trouble of
having to request new tickets to a noninteractive principal when the
principal's key has changed, every key is flagged with a version number,
and old key versions are retained until all tickets that could have
been encoded with that key have expired.
</Para>
<Para>Finally, if a noninteractive principal's key has been compromised,
it may be invalidated (along with all the corresponding tickets held
by any clients) by simply deleting it from the local key storage.
</Para>
<Note>
<Para>The key management API is for use only by applications using the 
DCE shared-secret authentication protocol and the key-type DES.
</Para>
</Note>
<Sect1 Id="DCEADG.SECKEY.div.2">
<Title>Retrieving a Key</Title>
<Para>The key management API provides two functions for retrieving a key
from the local key storage.  The<Literal> sec_key_mgmt_get_key()</Literal> function
returns a specified key version for a specified principal.  The meaning
of specifying version 0 (zero) in this routine may vary depending on the
authentication protocol in effect.  (If the protocol is DCE shared-secret,
the value 0 for the version identifier means the version that was
most recently added to the local storage.)  In any case, a principal's
login is almost always successful if the principal uses the version
0 key.
</Para>
<Para>When there are valid tickets that are encoded with different key versions,
an application may need to retrieve more than one key version.  In
that case, the application may call <Function>sec_key_mgmt_initialize_cursor()</Function>
to set a cursor in the local storage to the first suitable entry corresponding
to the named principal and key type, and then call <Function>sec_key_mgmt_get_next_key()</Function> to get all versions of that key in storage.  The application
may then call <Function>sec_key_mgmt_release_cursor()</Function>, which disposes
of information associated with the cursor<Literal>.</Literal> Neither of the
key-retrieval routines can return keys that have been explicitly
deleted, or that have been garbage collected after expiring.
</Para>
<Para>The two key-retrieval functions dynamically allocate the memory
for the returned key(s).  To enable the efficient allocation of memory,
an application may call <Function>sec_key_mgmt_free_key()</Function>, which frees
the memory occupied by the key and returns it to the allocation pool.
</Para>
</Sect1>
<Sect1 Id="DCEADG.SECKEY.div.3">
<Title>Changing a Key</Title>
<Para>The <Function>sec_key_mgmt_change_key()</Function> function communicates with
the registry to change the principal's key to a specified string,
and also places the new string in the local key storage.  
The <Symbol Role="Variable">keydata</Symbol> input argument for this call may be a new key 
that the application
specifies or a random key returned by the 
<Function>sec_key_mgmt_gen_rand_key()</Function> routine.  
An application may call <Function>sec_key_mgmt_get_next_kvno()</Function> to
determine the next key version number that should be assigned to the
new key so that it may reference this key version when retrieving a key.
</Para>
<Para>In some circumstances, a principal may need to change its key in the
local key storage but not immediately update the registry database.
For example, a database application may maintain replicas of a master
database that are managed by servers running on different computers.
If these servers all provide exactly the same service, it makes sense
for them to share the same key (meaning that they share the same principal
identity).  This way, a user with a ticket to the principal can be
directed to whichever server is least busy.
</Para>
<Para>When the registry database obtains a new key for a principal,
the authentication service can immediately begin issuing tickets to
the principal that are encoded under the new key.  However, suppose
the master for a single-principal replicated service were to call
<Function>sec_key_mgmt_change_key()</Function>, and a 
client presented a ticket encoded
with the latest key to a replica that had not yet learned that key.
In this case, the replica would refuse service, even though the ticket
was valid.  Therefore, if an application employs replicated servers
that are also instances of a single principal identity, the application
should do the following:
</Para>
<OrderedList>
<ListItem>
<Para>Generate
a new key by calling <Function>sec_key_mgmt_gen_rand_key()</Function>.  This routine
simply returns a key to the calling process, without updating the
registry or local storage.
</Para>
</ListItem>
<ListItem>
<Para>Disseminate the new key to all
replicas.
</Para>
</ListItem>
<ListItem>
<Para>Cause the replicas to call <Function>sec_key_mgmt_set_key()</Function>.  
This call updates the local storage to the new key but does not 
update the registry database entry for the principal.  (The 
key version specified in this routine must not be 0 [zero].) 
The replicas
should notify the master when they have completed setting their local
stores to the new key.
</Para>
</ListItem>
<ListItem>
<Para>Cause the master to call <Function>sec_key_mgmt_change_key()</Function> (here again, the key version must not be 0) after
all replicas have set the new key locally, thereby updating both the
master's local storage and the registry database entry.
</Para>
</ListItem>
</OrderedList>
<Para>Of course, if the master and each replica has its own principal identity,
each server may call <Function>sec_key_mgmt_change_key()</Function> without coordinating
this activity with any others.
</Para>
</Sect1>
<Sect1 Id="DCEADG.SECKEY.div.4">
<Title>Automatic Key Management</Title>
<Para>It is sometimes convenient for a principal to be able to change its
key on a schedule determined by the password expiration policy for
that principal, rather than to rely on a network administrator to
decide when this should be done.  In this case, the application may
call <Function>sec_key_mgmt_manage_key()</Function>.  
This function invokes <Function>sec_key_mgmt_gen_rand_key()</Function> 
shortly before the current key is due to expire,
updates both the local key storage and the registry database entry
with the new key, and then calls <Function>sec_key_mgmt_garbage_collect()</Function>
to discard any obsolete keys.  This function runs indefinitely; it
will never return during normal operation and so should be invoked
from a thread dedicated to key management.  It is not intended for
use by server principals that share the same key.
</Para>
</Sect1>
<Sect1 Id="DCEADG.SECKEY.div.5">
<Title>Deleting Expired Keys</Title>
<Para>In order to prevent service interruptions, the key management API
does not immediately discard keys that have been replaced; instead,
it maintains the keys, with a version number and key-type identifier,
in the local key storage.  However, after a key has been out of use
for longer than the maximum life of a ticket to the principal, it
is no longer possible that any client of that principal has a valid
ticket encoded with that key.  At this time, the key storage may have
its garbage collected.
</Para>
<Para><?sml-need 5>The <Function>sec_key_mgmt_garbage_collect()</Function>
routine collects garbage in the local key storage by deleting all
keys older than the maximum ticket lifetime for the cell.  
The <Symbol Role="Variable">garbage_collect_time</Symbol> argument, which is returned 
by <Function>sec_key_mgmt_change_key()</Function>, 
specifies when key-storage garbage is to be collected.
</Para>
</Sect1>
<Sect1 Id="DCEADG.SECKEY.div.6">
<Title>Deleting a Compromised Key</Title>
<Para>When a principal's key has been compromised, it should be deleted
as soon as the damage has been discovered in order to prevent another
party from masquerading as that principal.  Two routines delete a principal's
key:
</Para>
<ItemizedList>
<ListItem>
<Para>The <Function>sec_key_mgmt_delete_key()</Function> routine removes
all key types having the specified key version identifier from the
local key storage, thus invalidating all extant tickets encoded with
that key.
</Para>
</ListItem>
<ListItem>
<Para>The <Function>sec_key_mgmt_delete_key_type()</Function> routine
removes only a specified version of a specified key type.
</Para>
</ListItem>
</ItemizedList>
<Para>If the compromised key is the current one, the application should
first change the key with <Function>sec_key_mgmt_change_key()</Function>.  It is
not an error for a process to delete the current key as long as it
is done after the login context has been established, but it may inconvenience
legitimate clients of a service.  The inconvenience may be justified,
however, if the application data is sensitive.
</Para>
<Para>Since an application may have no means to discover that its key has
been compromised, the <Command>rgy_edit</Command> tool provides interfaces that
call <Function>sec_key_mgmt_delete_key()</Function>, <Function>sec_key_mgmt_change_key()</Function>, 
and <Function>sec_key_mgmt_gen_rand_key()</Function> so that a network administrator, who
is more likely to detect that a key has been compromised, may handle
a security breach of this kind.  As an alternative, the application
may provide user interfaces to these routines.
<IndexTerm Id="DCEADG.SECKEY.indx.4" SpanEnd="DCEADG.SECKEY.indx.1"></Para>
</Sect1>
</Chapter>
<!--+ 11/27/96 19:53:47
    | tagMorph:  $Id: 6_key.sgm,v 1.1.2.8 1996/12/14 20:24:03 wardr Exp $
    | tagMorph library:  $Id: 6_key.sgm,v 1.1.2.8 1996/12/14 20:24:03 wardr Exp $
    | sml-to-docbook:  1.25
    +-->
