<!--
# @OSF_COPYRIGHT@
# 
# 
# HISTORY
# $Log: topics.sgm,v $
# Revision 1.1.2.8  1996/12/14  20:24:44  wardr
# 	{edit,R1.2.2}
# 	penultimate format fixes
# 	[1996/12/14  20:22:50  wardr]
#
# Revision 1.1.2.7  1996/12/13  22:11:33  wardr
# 	{edit,R1.2.2}
# 	Fixed formatting problems
# 	[1996/12/13  22:09:23  wardr]
# 
# Revision 1.1.2.6  1996/12/12  21:31:12  wardr
# 	{edit,R1.2.2}
# 	Fixed formatting problems
# 	[1996/12/12  21:29:19  wardr]
# 
# Revision 1.1.2.5  1996/12/12  16:50:20  carrig
# 	{enh,R1.2.2}
# 	Minor edits
# 	[1996/12/12  16:48:04  carrig]
# 
# Revision 1.1.2.4  1996/12/06  21:10:52  carrig
# 	{enh,R1.2.2}
# 	Second pass for editor
# 	[1996/12/06  21:08:52  carrig]
# 
# Revision 1.1.2.3  1996/12/05  21:39:39  carrig
# 	{enh,R1.2.2}
# 	First pass to prepare for editing
# 	[1996/12/05  21:37:54  carrig]
# 
# Revision 1.1.2.2  1996/12/02  15:41:44  weir
# 	Removed thinsp entities, corrected other minor errors
# 	[1996/12/02  15:40:01  weir]
# 
# Revision 1.1.2.1  1996/12/01  20:44:19  weir
# 	Initial submission
# 	[1996/12/01  20:42:15  weir]
# 
# $EndLog$
-->
<!-- Fragment document type declaration subset:
ArborText, Inc., 1988-1993, v.4001
<!DOCTYPE Book PUBLIC "-//Davenport//DTD DocBook V2.4//EN" [
<!ENTITY  DCEADG.RPCTOP.ent.1  SYSTEM "eps/7_advanced_topics_09.ps" NDATA eps>
<!ENTITY  DCEADG.RPCTOP.ent.2  SYSTEM "eps/7_advanced_topics_10.ps" NDATA eps>
<!ENTITY  DCEADG.RPCTOP.ent.3  SYSTEM "eps/7_advanced_topics_11.ps" NDATA eps>
<!ENTITY  DCEADG.RPCTOP.ent.4  SYSTEM "eps/7_advanced_topics_12.ps" NDATA eps>
<!ENTITY  DCEADG.RPCTOP.ent.5  SYSTEM "eps/7_advanced_topics_13.ps" NDATA eps>
<!ENTITY  DCEADG.RPCTOP.ent.6  SYSTEM "eps/7_advanced_topics_14.ps" NDATA eps>
<!ENTITY  DCEADG.RPCTOP.ent.7  SYSTEM "eps/7_advanced_topics_15.ps" NDATA eps>
<!ENTITY  DCEADG.RPCTOP.ent.8  SYSTEM "eps/7_advanced_topics_16.ps" NDATA eps>
]>
-->
<!-- COPYRIGHT NOTICE-->
<!-- Copyright (c) 1990, 1991, 1992, 1993, 1994 Open Software Foundation, Inc.-->
<!-- ALL RIGHTS RESERVED (DCE).  See the file named COPYRIGHT.DCE for-->
<!-- the full copyright text.-->
<!-- -->
<!-- -->
<!-- OLD HISTORY-->
<!-- Revision 1.1.4.2  1996/03/27  13:07:14  wardr-->
<!-- 	{edit R1.2.1}-->
<!-- 	More Release Edits-->
<!-- 	[1996/03/27  13:06:46  wardr]-->
<!---->
<!-- Revision 1.1.4.1  1996/03/21  20:31:39  wardr-->
<!-- 	{edit R1.2.1}-->
<!-- 	Release Edits-->
<!-- 	[1996/03/21  20:31:07  wardr]-->
<!-- -->
<!-- Revision 1.1.2.20  1995/06/07  14:38:56  rcb-->
<!-- 	PRENTICE HALL reformat; final edits and changes-->
<!-- 	[1995/06/05  19:56:21  rcb]-->
<!-- -->
<!-- 	PRENTICE HALL reformat-->
<!-- 	[1995/04/26  13:50:27  rcb]-->
<!-- -->
<!-- 	incorporated 1.1 edits-->
<!-- 	[1995/04/20  18:48:12  rcb]-->
<!-- -->
<!-- Revision 1.1.2.19  1994/11/15  20:47:53  neilson-->
<!-- 	Converted book title references to macro form.-->
<!-- 	[1994/11/15  18:57:58  neilson]-->
<!-- -->
<!-- Revision 1.1.2.18  1994/10/27  19:43:05  jshirley-->
<!-- 	Final edits.-->
<!-- 	[1994/10/27  19:42:12  jshirley]-->
<!-- -->
<!-- Revision 1.1.2.17  1994/10/20  01:53:32  zahn-->
<!-- 	{edt,9262,R1.1}-->
<!-- 	(edt,7699,R1.1}-->
<!-- -->
<!-- 	Added change bars around rpc_ss/sm note.-->
<!-- 	[1994/10/20  01:53:15  zahn]-->
<!-- -->
<!-- Revision 1.1.2.16  1994/10/19  21:07:07  zahn-->
<!-- 	{edt,10526,R1.1}-->
<!-- -->
<!-- 	Added technical review comments on-->
<!-- 	memory management section.-->
<!-- 	[1994/10/19  21:06:48  zahn]-->
<!-- -->
<!-- Revision 1.1.2.15  1994/10/18  17:32:58  zahn-->
<!-- 	{edt,10526,R1.1}-->
<!-- -->
<!-- 	Consolidated memory management information-->
<!-- 	from app_gd/rpc/idl.gpsml into this chapter,-->
<!-- 	rewrote the entire section based on input-->
<!-- 	from DEC, OSF, and HP.-->
<!-- 	[1994/10/18  17:32:37  zahn]-->
<!-- -->
<!-- Revision 1.1.2.14  1994/10/13  19:36:59  zahn-->
<!-- 	{edt,????,R1.1}-->
<!-- -->
<!-- 	Working on IDL encoding services memory-->
<!-- 	management and other memory management-->
<!-- 	chapters.  Checking back in so others-->
<!-- 	can use.-->
<!-- 	[1994/10/13  19:36:47  zahn]-->
<!-- -->
<!-- Revision 1.1.2.13  1994/10/13  00:10:32  jshirley-->
<!-- 	{def,10160,R1.1} Fixed pipe documentation.-->
<!-- 	[1994/10/13  00:09:37  jshirley]-->
<!-- -->
<!-- Revision 1.1.2.12  1994/10/12  13:04:41  jshirley-->
<!-- 	{def,10526,R1.1} Reorg.  RPC chapters.  Consolidated Context Handle discussion.-->
<!-- 	[1994/10/12  13:04:04  jshirley]-->
<!-- -->
<!-- Revision 1.1.2.11  1994/09/14  19:21:13  jshirley-->
<!-- 	{def,10526,R1.1,Reorg RPC chapters.-->
<!-- 	[1994/09/14  19:20:40  jshirley]-->
<!-- -->
<!-- Revision 1.1.2.10  1994/08/22  19:35:02  zahn-->
<!-- 	{edt,9601,R1.1}-->
<!-- -->
<!-- 	Added corrections to the example in the-->
<!-- 	IDL encoding services section of this-->
<!-- 	chapter from Rico A. at DEC.-->
<!-- 	[1994/08/22  19:34:49  zahn]-->
<!-- -->
<!-- Revision 1.1.2.9  1994/08/11  20:36:35  jhh-->
<!-- 	expand copyright-->
<!-- 	[1994/08/11  19:58:41  jhh]-->
<!-- -->
<!-- Revision 1.1.2.8  1994/07/27  18:47:50  zahn-->
<!-- 	{review,9601.R1.1}-->
<!-- -->
<!-- 	Added more information about memory management-->
<!-- 	to IDL encoding services subsection.-->
<!-- 	[1994/07/27  18:47:11  zahn]-->
<!-- -->
<!-- Revision 1.1.2.7  1994/07/26  19:53:36  zahn-->
<!-- 	{review, 9601,R1.1}-->
<!-- -->
<!-- 	Rewrote the section on memory management in-->
<!-- 	the IDL encoding services section of this chapter-->
<!-- 	to explain how to allocate and free memory when-->
<!-- 	using the IDL encoding services.  Used material-->
<!-- 	from email correspondence between Greg Carpenter (HP),-->
<!-- 	John Bowe (OSF), and Rico A. (DEC).-->
<!-- 	[1994/07/26  19:53:23  zahn]-->
<!-- -->
<!-- Revision 1.1.2.6  1994/07/20  22:37:37  zahn-->
<!-- 	(edt,9601,R1.1}-->
<!-- -->
<!-- 	Moved sentence about using comm_status with-->
<!-- 	IDL encoding services to this chapter, in-->
<!-- 	IDL encoding services section, from acf.gpsml-->
<!-- 	general discussion of comm_status.-->
<!-- 	[1994/07/20  22:37:21  zahn]-->
<!-- -->
<!-- Revision 1.1.2.5  1994/07/18  20:32:16  zahn-->
<!-- 	{enh,9951,R1.1}-->
<!-- -->
<!-- 	Removed references to rpc_status_codes(7rpc) and-->
<!-- 	replaced with reference to Problem Determination Guide.-->
<!-- -->
<!-- 	{def,10526,R1.1}-->
<!-- -->
<!-- 	Removed an unnecessary section head "Defining Exceptions-->
<!-- 	in the IDL" and moved the discussion of the exceptions interface-->
<!-- 	attribute syntax and example to the description-->
<!-- 	of the attribute in app_gd/rpc/idl.gpsml.-->
<!-- -->
<!-- 	Cleaned up the section on IDL encoding services and removed-->
<!-- 	information that is redundant to the idl_es* reference pages.-->
<!-- 	[1994/07/18  20:31:57  zahn]-->
<!-- -->
<!-- Revision 1.1.2.4  1994/07/13  19:42:08  zahn-->
<!-- 	{def,10526,R1.1}-->
<!-- -->
<!-- 	Eliminated redundancy of encode, decode attributes-->
<!-- 	in this file and in topics.gpsml.-->
<!-- 	[1994/07/13  19:41:33  zahn]-->
<!-- -->
<!-- Revision 1.1.2.3  1994/07/12  22:21:00  zahn-->
<!-- 	{def,10526,R1.1}-->
<!-- -->
<!-- 	Moved all of app_gd/rpc/10a_encode.gpsml-->
<!-- 	to section "Creating Portable Data with-->
<!-- 	the IDL Encoding Services". Cut routine-->
<!-- 	descriptions because they were redundant-->
<!-- 	to the routine reference pages in the app_ref.-->
<!-- 	[1994/07/12  22:20:46  zahn]-->
<!-- -->
<!-- Revision 1.1.2.2  1994/07/11  19:45:28  jshirley-->
<!-- 	{def,10526,R1.1}-->
<!-- 	Fixed the names of some headings.-->
<!-- 	[1994/07/11  19:44:16  jshirley]-->
<!-- -->
<!-- 	{def,10526,R1.1}-->
<!-- 	Created Headings and inserted some info. from old files-->
<!-- 	4_remoteness.gpsml, 8_err_hndling.gpsml, and 6_advanced_topics.gpsml.-->
<!-- 	[1994/07/11  19:23:01  jshirley]-->
<!-- -->
<!-- Revision 1.1.2.1  1994/07/08  15:04:16  jshirley-->
<!-- 	{def,10526,R1.1}-->
<!-- 	Created new file for the RPC reorganization.-->
<!-- 	Other information to be inserted from older files later.-->
<!-- 	[1994/07/08  15:03:05  jshirley]-->
<!-- -->
<!---->
<Chapter Id="DCEADG.RPCTOP.div.1">
<Title>Topics in RPC Application Development</Title>
<Para>This chapter describes special features of DCE RPC for application
development.  The topics include
</Para>
<ItemizedList>
<ListItem>
<Para>Memory management
</Para>
</ListItem>
<ListItem>
<Para>Error handling
</Para>
</ListItem>
<ListItem>
<Para>Context handles
</Para>
</ListItem>
<ListItem>
<Para>Pipes
</Para>
</ListItem>
<ListItem>
<Para>Nested calls and callbacks
</Para>
</ListItem>
<ListItem>
<Para>Routing RPCs
</Para>
</ListItem>
<ListItem>
<Para>Portable data and the IDL encoding services
</Para>
</ListItem>
</ItemizedList>
<Sect1 Id="DCEADG.RPCTOP.div.2">
<Title>Memory Management</Title>
<!---->
<IndexTerm Id="DCEADG.RPCTOP.indx.1">
<Primary>IDL</Primary>
<Secondary>memory management</Secondary>
</IndexTerm>
<IndexTerm Id="DCEADG.RPCTOP.indx.2">
<Primary>memory</Primary>
<Secondary>management</Secondary>
</IndexTerm>
<IndexTerm Id="DCEADG.RPCTOP.indx.3">
<Primary>allocating memory</Primary>
</IndexTerm>
<IndexTerm Id="DCEADG.RPCTOP.indx.4">
<Primary>freeing memory</Primary>
</IndexTerm>
<IndexTerm Id="DCEADG.RPCTOP.indx.5">
<Primary>memory</Primary>
<Secondary>freeing</Secondary>
</IndexTerm>
<IndexTerm Id="DCEADG.RPCTOP.indx.6">
<Primary>memory</Primary>
<Secondary>allocating</Secondary>
</IndexTerm>
<!---->
<Para>When called to handle a remote operation, RPC client
stubs allocate and free memory by using whatever
memory management scheme is currently in effect.
The <FirstTerm>client code</FirstTerm>&mdash;the generic code that
can be called from either RPC clients or RPC 
servers&mdash;can use DCE RPC stub support routines to
control which memory management scheme
the stubs will use.
</Para>
<Para>If client code has not explicitly set the memory
management routines, the RPC client stubs use the
following defaults:
</Para>
<ItemizedList>
<ListItem>
<Para>When called from manager code, and the operation contains
one or more parameters that are full or unique pointers, or
the ACF <Literal>enable_allocate</Literal> attribute has been applied,
the client stubs use the <Function>rpc_ss_allocate()</Function> and
<Function>rpc_ss_free()</Function> routines.
</Para>
</ListItem>
<ListItem>
<Para>When called from any other context, the RPC client stubs
use the operating system allocation and free routines
(for example, <Function>malloc()</Function> and <Function>free()</Function>) on POSIX
platforms.
</Para>
</ListItem>
</ItemizedList>
<Para>Note that the memory management scheme established, whether
explicitly or by default, is on a per-thread basis.
</Para>
<Para>RPC server stubs do not allocate memory.  Instead, they rely
on the <FirstTerm>manager code</FirstTerm>&mdash;the code that the server
stubs call&mdash;to allocate it for them.
</Para>
<Para>The following sections gives guidelines for how client code
and manager code should use the the various allocation and
free routines provided with DCE.
</Para>
<Note>
<Para>DCE provides two versions of DCE RPC stub support routines.
The <Literal>rpc_ss_</Literal><Symbol Role="Variable">*</Symbol><Literal>()</Literal> routines raise an exception, while the 
<Literal>rpc_sm_</Literal><Symbol Role="Variable">*</Symbol><Literal>()</Literal>
routines return an error status value.  In all other ways, the
routines are identical.  It is generally recommended that you
use the <Literal>rpc_sm_</Literal><Symbol Role="Variable">*</Symbol><Literal>()</Literal> routines instead of the 
<Literal>rpc_ss_</Literal><Symbol Role="Variable">*</Symbol><Literal>()</Literal> routines
for compliance with the &DCEDc;.
</Para>
</Note>
<Sect2 Id="DCEADG.RPCTOP.div.3">
<Title>Using the Memory Management Defaults</Title>
<Para>If it does not matter to the client code which memory allocation
routine the RPC client stubs use, the client code
should call the <Function>rpc_ss_client_free()</Function> routine
to free any memory that the client stub allocates and returns.
The <Function>rpc_ss_client_free()</Function> routine uses the current
free routine that is in effect.  Client code that uses
<Function>rpc_ss_client_free()</Function> must use caution if it calls
other routines before it frees all of the pieces of allocated
storage with <Function>rpc_ss_client_free()</Function>, because it is possible
that the called code has been written so that it swaps in a
different allocation/free pair without reestablishing the
previous allocation/free pair on exit.
</Para>
</Sect2>
<Sect2 Id="DCEADG.RPCTOP.div.4">
<Title>Using rpc_ss_allocate and rpc_ss_free</Title>
<Para>Both client code and manager code can use <Function>rpc_ss_allocate()</Function>
and <Function>rpc_ss_free()</Function>.  The next sections describe how.
</Para>
<Sect3 Id="DCEADG.RPCTOP.div.5">
<Title>Using <Literal>rpc_ss_allocate</Literal> and <Literal>rpc_ss_free</Literal> in Manager Code</Title>
<Para>Manager code uses either the <Function>rpc_ss_allocate()</Function> and
<Function>rpc_ss_free()</Function> routines or the operating system 
allocation and free routines to allocate and free memory.
</Para>
<Para>Manager code uses <Function>rpc_ss_allocate()</Function> to allocate
storage for data that the server stub is to send back to
the client.  Manager code can either use <Function>rpc_ss_free()</Function> to
free the storage explicitly, or it can rely on the server stub
to free it.  After the server stub marshalls the output parameters,
it releases any storage that the manager code has allocated 
with <Function>rpc_ss_allocate()</Function>.
</Para>
<Para>Manager code can also use the <Function>rpc_ss_free()</Function> routine to release
storage pointed to by a full pointer in an input parameter and
have the freeing of the memory reflected on return to the calling
application if the <Literal>reflect_deletions</Literal> attribute has been
specified as an operation attribute in the interface definition.
See Chapter 18 for instructions on how to declare the
<Literal>reflect_deletions</Literal> operation attribute.
</Para>
<Para><?sml-need 5>Manager code uses the operating system allocation routine
to create storage for its internal data.
The server stub does not automatically free memory that
operating system allocation routines have allocated.
Instead, manager code must use the operating system
free routine to deallocate the memory explicitly
before it exits.
</Para>
<Para>When manager code makes a remote call, the default
memory management routines are
<Function>rpc_ss_allocate()</Function> and <Function>rpc_ss_free()</Function>.
</Para>
</Sect3>
<Sect3 Id="DCEADG.RPCTOP.div.6">
<Title>Using <Literal>rpc_ss_allocate</Literal> and <Literal>rpc_ss_free</Literal> in Client Code</Title>
<Para>Client code may also want to use the <Function>rpc_ss_allocate()</Function>
and <Function>rpc_ss_free()</Function> routines as the stub memory management
scheme.  However, before client code can use <Function>rpc_ss_allocate()</Function> and
<Function>rpc_ss_free()</Function>, it must first call the
<Function>rpc_ss_enable_allocate()</Function> routine, which enables
the use of <Function>rpc_ss_allocate()</Function>.  If client code calls
<Function>rpc_ss_enable_allocate()</Function>, it must also call the
<Function>rpc_ss_disable_allocate()</Function> routine before it exits
its thread to disable use of <Function>rpc_ss_allocate()</Function>.
This routine releases all of the memory allocated by calls to
<Function>rpc_ss_allocate()</Function> in that thread since the call to 
<Function>rpc_ss_enable_allocate()</Function> was made.
As a result, client code can either free each piece of allocated storage
with <Function>rpc_ss_free()</Function>, or it can have <Function>rpc_ss_disable_allocate()</Function>
free it all at once when it disables the <Literal>rpc_ss_allocate/free</Literal> memory
management scheme.
</Para>
<Para>Before calling <Function>rpc_ss_enable_allocate()</Function>, client code
must ensure that it has not been called by code that
has already set up the <Literal>rpc_ss_allocate/free</Literal>
memory management scheme.  As a result, if the client code
can ensure that it has not been called from a manager
routine, <Symbol Role="Variable">and</Symbol> it can ensure that any previous
calls to <Function>rpc_ss_enable_allocate()</Function>
have been paired with calls to <Function>rpc_ss_disable_allocate()</Function>,
it can safely call <Function>rpc_ss_enable_allocate()</Function>.
</Para>
<Para>If client code cannot ensure that these conditions are true,
it should check to make sure the <Literal>rpc_ss_allocate/free</Literal>
scheme has not already been set up.  For example:
</Para>
<InformalExample>
<Para><ProgramListing><?sml-need 22>/* Get RPC memory allocation thread handle */

    rpc_ss_thread_handle_t thread_handle;
    idl_void_p_t (*p_saved_alloc)(unsigned long);
    void (*p_saved_free)(idl_void_p_t);

    TRY
        thread_handle = rpc_ss_get_thread_handle();
    CATCH(pthread_badparam_e)
        thread_handle = NULL;
    ENDTRY

    if (thread_handle == NULL)    {

     /* Set up rpc_ss_allocate environment */

        rpc_ss_enable_allocate();
    }

    rpc_ss_swap_client_alloc_free(
        appl_client_alloc,appl_client_free,
        &amp;p_saved_alloc,&amp;p_saved_free);
</ProgramListing></Para>
</InformalExample>
<Para>After control returns from the client stub, the client code
should again check to see whether <Literal>rpc_ss_allocate/free</Literal> has
already been enabled before it calls <Function>rpc_ss_disable_allocate()</Function>:
</Para>
<InformalExample>
<Para><ProgramListing>    rpc_ss_set_client_alloc_free(p_saved_alloc,p_saved_free);

/* If we set up rpc_ss_allocate environment, disable it now */

    if (thread_handle == NULL)
        rpc_ss_disable_allocate();
</ProgramListing></Para>
</InformalExample>
<?sml-need 15>
</Sect3>
</Sect2>
<Sect2 Id="DCEADG.RPCTOP.div.7">
<Title>Using Your Own Allocation and Free Routines</Title>
<Para>At times it might be necessary for client code to change
the routines that the client stubs use to allocate and free memory.
For example, client code that is making an RPC call might want to
direct the RPC client stubs to use special debug versions
of <Function>malloc()</Function> and <Function>free()</Function> that check
for memory leaks.  Another example might be an application
that uses DCE RPC but needs to preserve its users' ability
to free memory returned from the application by using the
platform's memory management scheme (rather than exposing the
user to DCE).
</Para>
<Para>Client code that wants to use its own memory allocation and free
routines can use the <Function>rpc_ss_swap_client_alloc_free()</Function> routine
to exchange the current client allocation and freeing mechanism
for one supplied in the call.  The routine returns pointers to the
memory allocation and free routines formerly in use.
Before calling <Function>rpc_ss_swap_client_alloc_free()</Function>, client code
must ensure that it has not been called from a manager routine.
</Para>
<Para>Deallocation of allocated storage returned from the client stubs
is not automatic.  Therefore, client code must ensure that it
uses the free routine that it specified in the call 
to <Function>rpc_ss_swap_client_alloc_free()</Function> to deallocate
each piece of allocated storage.
</Para>
<Para>Client code that swaps in memory management routines with
<Function>rpc_ss_swap_client_alloc_free()</Function> should use the
<Function>rpc_ss_set_client_alloc_free()</Function> routine before
it exits to restore the old allocation and free routines.
</Para>
</Sect2>
<Sect2 Id="DCEADG.RPCTOP.div.8">
<Title>Using Thread Handles in Memory Management</Title>
<Para><IndexTerm Id="DCEADG.RPCTOP.indx.7">
<Primary>memory</Primary>
<Secondary>management</Secondary>
<Tertiary>server threads</Tertiary>
</IndexTerm>
<IndexTerm Id="DCEADG.RPCTOP.indx.8">
<Primary>server</Primary>
<Secondary>threads</Secondary>
</IndexTerm>
<IndexTerm Id="DCEADG.RPCTOP.indx.9">
<Primary>thread</Primary>
<Secondary>memory management for</Secondary>
</IndexTerm>There are two situations where control of memory
management requires the use of thread handles.  The more
common situation is when the manager thread spawns additional threads.
The less common situation is when a program transitions from being a
client to being a server, then reverts to being a client. 
</Para>
<Sect3 Id="DCEADG.RPCTOP.div.9">
<Title>Spawning Threads</Title>
<IndexTerm Id="DCEADG.RPCTOP.indx.10">
<Primary>spawning server threads</Primary>
</IndexTerm>
<IndexTerm Id="DCEADG.RPCTOP.indx.11">
<Primary>memory</Primary>
<Secondary>server threads</Secondary>
</IndexTerm>
<Para>When a remote procedure call invokes the manager code, 
the manager code may wish to spawn additional threads to complete the
task for which it was called.  To spawn additional threads that are
able to perform memory management, the manager code must first call
the <Function>rpc_ss_get_thread_handle()</Function> routine to get its thread handle
and then pass that thread handle to each spawned thread.  Each spawned
thread must call the <Function>rpc_ss_set_thread_handle()</Function> routine
with the handle received from the manager code.
</Para>
<Para>These routine calls allow the
manager and its spawned threads to share a common memory management
environment.  This common environment enables memory allocated by the
spawned threads to be used in returned parameters and causes all
allocations in the common memory management environment to be released
when the manager thread returns to the server stub. 
</Para>
<Para>The main manager thread must not return control to the server stub
before all the threads it spawned complete execution; otherwise,
unpredictable results may occur.
</Para>
<Para>The listener thread can cancel the main manager thread if the
remote procedure call is orphaned or if a cancellation occurs on the
client side of the application.  You should code the main manager thread
to terminate any spawned threads before it exits.  The code should
anticipate exits caused by an unexpected exception or by being canceled.
</Para>
<Para>Your code can handle all of these cases by including a <Literal>TRY/FINALLY</Literal>
block to clean up any spawned threads if a cancellation or other exception
occurs.  If unexpected exceptions do not concern you, then your code can
perform two steps.  They are
disabling cancelability before threads are spawned followed by enabling
cancelability after the join operation finishes and after testing for any
pending cancel operations.  Following this disable/enable sequence
prevents routine <Function>pthread_join()</Function> from producing a cancel point in a
manager thread that has spawned threads which, in turn, share thread
handles with the manager thread.
</Para>
</Sect3>
<Sect3 Id="DCEADG.RPCTOP.div.10">
<Title>Transitioning from Client to Server to Client</Title>
<IndexTerm Id="DCEADG.RPCTOP.indx.12">
<Primary>clients becoming servers</Primary>
</IndexTerm>
<Para>Immediately before the program changes from a client to a
server, it must obtain a handle on its environment as a client by calling
<Function>rpc_ss_get_thread_handle()</Function>.  When it reverts from a server to
a client, it must reestablish the client environment by calling
the <Function>rpc_ss_set_thread_handle()</Function> routine, supplying the previously
obtained handle as a parameter.
<!---->
<!--- -->
</Para>
</Sect3>
</Sect2>
</Sect1>
<Sect1 Id="DCEADG.RPCTOP.div.11">
<Title>Guidelines for Error Handling</Title>
<Para>During a remote procedure call, server and communications errors may
occur.  These errors can be handled using any or all of the following
methods:
<IndexTerm Id="DCEADG.RPCTOP.indx.13">
<Primary>errors</Primary>
</IndexTerm>
<IndexTerm Id="DCEADG.RPCTOP.indx.14">
<Primary>exceptions</Primary>
</IndexTerm>
<IndexTerm Id="DCEADG.RPCTOP.indx.15">
<Primary>failures</Primary>
</IndexTerm>
<IndexTerm Id="DCEADG.RPCTOP.indx.16">
<Primary>server</Primary>
<Secondary>failure</Secondary>
</IndexTerm>
<IndexTerm Id="DCEADG.RPCTOP.indx.17">
<Primary>communication failure</Primary>
</IndexTerm>
<IndexTerm Id="DCEADG.RPCTOP.indx.18">
<Primary>exceptions</Primary>
<Secondary>handler</Secondary>
</IndexTerm>
<IndexTerm Id="DCEADG.RPCTOP.indx.19">
<Primary>routines</Primary>
<Secondary>error</Secondary>
</IndexTerm>
<IndexTerm Id="DCEADG.RPCTOP.indx.20">
<Primary>comm_status attribute</Primary>
</IndexTerm>
<IndexTerm Id="DCEADG.RPCTOP.indx.21">
<Primary>ACF</Primary>
</IndexTerm></Para>
<ItemizedList>
<ListItem>
<Para>Writing exception handler code to recover from the error or to exit
the application
</Para>
</ListItem>
<ListItem>
<Para>Using the <Literal>fault_status</Literal> attribute in the ACF to report an RPC 
server failure
</Para>
</ListItem>
<ListItem>
<Para>Using the <Literal>comm_status</Literal> attribute in the ACF to report a 
communications failure
</Para>
</ListItem>
</ItemizedList>
<Para>Use of exceptions, where the procedure exits the program due to an error,
tends to improve code quality.  It does this by making errors
obvious because the program exits at that point,
and by lessening the amount of code needed to detect
error conditions and handle them. 
When you use 
the <Literal>fault_status</Literal> attribute, an exception that occurs on the server 
is not reported to the client as an exception.
The variable to which the
<Literal>comm_status</Literal> attribute is attached contains
error codes that report errors that would not have 
occurred if the
application were not distributed over a communications network. 
The <Literal>comm_status</Literal> 
attribute provides a method
of handling RPC errors without using an exception handler.
</Para>
<Sect2 Id="DCEADG.RPCTOP.div.12">
<Title>Exceptions</Title>
<Para>Exceptions report either RPC errors or errors in
application code.  Exceptions have the following characteristics:
</Para>
<ItemizedList>
<ListItem>
<Para>You do not have to adjust procedure declarations between local and 
distributed code.
</Para>
</ListItem>
<ListItem>
<Para>You can distribute existing interfaces without changing code.
</Para>
</ListItem>
<ListItem>
<Para>You do not have to check for failures.  This results in more 
robust code because errors are reported even if they are not checked.
</Para>
</ListItem>
<ListItem>
<Para>Your code is more efficient when there is no recovery coded for failures.
</Para>
</ListItem>
<ListItem>
<Para>You can use a simpler coding style.
</Para>
</ListItem>
<ListItem>
<Para>Exceptions work well for coarse-grained exception handling.
</Para>
</ListItem>
<ListItem>
<Para>If your application does not contain any exception handlers and the 
application thread gets an error, the application thread is 
terminated and a system-dependent error message from the threads 
package is printed.
</Para>
</ListItem>
</ItemizedList>
<Note>
<IndexTerm Id="DCEADG.RPCTOP.indx.22">
<Primary>exception codes, RPC exceptions</Primary>
</IndexTerm>
<Para>RPC exceptions are equivalent to RPC status codes.  To identify the
status code that corresponds to a given exception, replace the
<Literal>_x_</Literal> string of the exception with the string <Literal>_s_</Literal>.  For
example, the exception <Literal>rpc_x_comm_failure</Literal>  is equivalent to the
status code <Literal>rpc_s_comm_failure</Literal>.  The RPC exceptions are defined
in the <Filename>dce/rpcexc.h</Filename> header file, and the equivalent status codes
are described in the
&DCETg;.
</Para>
</Note>
<IndexTerm Id="DCEADG.RPCTOP.indx.23">
<Primary>IDL</Primary>
<Secondary>user-defined exceptions</Secondary>
</IndexTerm>
<IndexTerm Id="DCEADG.RPCTOP.indx.24">
<Primary>extern_exceptions attribute</Primary>
</IndexTerm>
<IndexTerm Id="DCEADG.RPCTOP.indx.25">
<Primary>exceptions</Primary>
<Secondary>attribute</Secondary>
</IndexTerm>
<IndexTerm Id="DCEADG.RPCTOP.indx.26">
<Primary>system exceptions</Primary>
</IndexTerm>
<Para>The set of exceptions that can always be returned from the server to
the client (such as the <Literal>rpc_x_invalid_tag</Literal> exception) 
are referred to as <Symbol Role="Variable">system exceptions</Symbol>. 
These exceptions are defined in <Filename>dce/rpcexec.h</Filename> and
<Filename>dce/exec_handling.h</Filename>. 
<!--.sp-->
<!--.iS-->
<!--exc_e_arritherr-->
<!--exc_e_fltdiv-->
<!--exc_e_fltovf-->
<!--exc_e_fltund-->
<!--exc_e_illinstr-->
<!--exc_e_intdiv-->
<!--exc_e_intovf-->
<!--pthread_cancel_e-->
<!--rpc_x_invalid_bound-->
<!--rpc_x_invalid_tag-->
<!--rpc_no_memory \*O(Raised to client as \*Lrpc_x_remote_no_memory)-->
<!--rpc_x_ss_context_mismatch-->
<!--rpc_x_ss_pipe_closed-->
<!--rpc_x_ss_pipe_comm_error-->
<!--rpc_x_ss_pipe_discipline_error-->
<!--rpc_x_ss_pipe_empty-->
<!--rpc_x_ss_pipe_memory-->
<!--rpc_x_ss_pipe_order-->
<!--rpc_x_ss_remote_comm_failure-->
<!--.iE-->
</Para>
<Para>An interface definition can also specify a set of user-defined
exceptions that the interface's operations can return
to the client.  You can declare user-defined exceptions in
an interface definition by using the <Literal>exceptions</Literal> interface
attribute, which is described in Chapter 18.
</Para>
<Para><?sml-need 6>If a user-defined exception in the implementation of a
server operation occurs during server execution, the server
terminates the operation and propagates the exception to
the client in a manner similar to the way system exceptions
are propagated.  If a server implementation of an operation raises an
exception that is neither a system exception nor a user-defined exception,
the exception returned to the client is <Literal>rpc_x_unknown_remote_fault</Literal>.
</Para>
<Para>By default, the IDL compiler defines and initializes all exceptions
under a once block in the generated stubs.  If you want to
share exception names in multiple interfaces or you desire greater
control over how these exceptions are defined and initialized,
you can use the ACF <Literal>extern_exceptions</Literal> attribute to
disable the automated mechanism that the IDL compiler
uses to define and initialize exceptions.  See Chapter 19
for more information on the <Literal>extern_exceptions</Literal> attribute.
</Para>
<Para>Because exceptions are associated with operation implementation, they are not
imported into other interfaces by way of the <Literal>import</Literal> declaration.
For more information about using exceptions to handle errors, see 
Part 2 of this guide.
</Para>
</Sect2>
<Sect2 Id="DCEADG.RPCTOP.div.13">
<Title>The fault_status Attribute </Title>
<Para>The <Literal>fault_status</Literal> attribute requests that errors 
occurring on the server due to incorrectly specified parameter values, 
resource constraints, or coding errors be reported by a
designated status parameter instead of by an exception. 
</Para>
<Para>If a user-defined exception is returned from a server to a client that has
specified <Literal>fault_status</Literal> on the operation in which the exception
occurred, the value given to the <Literal>fault_status</Literal> parameter is
<Literal>rpc_s_fault_user_defined</Literal>.
</Para>
<Para>The <Literal>fault_status</Literal> attribute 
has the following characteristics:
</Para>
<ItemizedList>
<ListItem>
<Para>Occurs where you do not want transparent 
local/remote behavior
</Para>
</ListItem>
<ListItem>
<Para>Occurs where you expect that you may be passing 
incorrect data to the server or the server is not coded robustly, or both
</Para>
</ListItem>
<ListItem>
<Para>Works well for fine-grained error handling
</Para>
</ListItem>
<ListItem>
<Para>Requires that you adjust procedure declarations between local 
and distributed code
</Para>
</ListItem>
<ListItem>
<?sml-need 4>
<Para>Controls the reporting only of errors that come from the server 
and that are reported via a fault packet 
</Para>
</ListItem>
</ItemizedList>
<Para>For more information on the <Literal>fault_status</Literal> attribute, see 
Chapter 19.
</Para>
</Sect2>
<Sect2 Id="DCEADG.RPCTOP.div.14">
<Title>The comm_status Attribute </Title>
<Para>The <Literal>comm_status</Literal> attribute requests that RPC 
communications failures be reported through a designated status parameter 
instead of by an exception.  The <Literal>comm_status</Literal> attribute 
has the following characteristics:
</Para>
<ItemizedList>
<ListItem>
<Para>Occurs where you expect communications to 
fail routinely; for instance, no server is available, the
server has no resources, 
and so on
</Para>
</ListItem>
<ListItem>
<Para>Works well for fine-grained error handling; for example, trying
a procedure many times until it succeeds
</Para>
</ListItem>
<ListItem>
<Para>Requires that you adjust procedure declarations between local 
and distributed code to add the new status parameter
</Para>
</ListItem>
<ListItem>
<Para>Controls the reporting of errors only from RPC runtime 
error status codes
</Para>
</ListItem>
</ItemizedList>
<Para>For more information on the <Literal>comm_status</Literal> attribute, see
Chapter 19.
</Para>
</Sect2>
<Sect2 Id="DCEADG.RPCTOP.div.15">
<Title>Determining Which Method to Use for Handling Exceptions</Title>
<Para>Some conditions are better for using the <Literal>comm_status</Literal> or 
<Literal>fault_status</Literal> attribute on an operation, rather than the 
default approach of handling exceptions.
</Para>
<Para><?sml-need 11>The <Literal>comm_status</Literal> attribute is 
useful only if the call to the operation has a 
specific recovery action to perform for one or more communications
failures; for example, <Literal>rpc_s_comm_failure</Literal> or 
<Literal>rpc_s_no_more_bindings</Literal>.  The <Literal>comm_status</Literal> attribute is recommended 
only when the application knows
that it is calling a remote operation.
If you expect communications to fail often because the server
does not have enough resources to execute the call, you can use this
attribute to allow the call to be retried several times.
If you are using an implicit or explicit binding, you can use the 
<Literal>comm_status</Literal> attribute if you want to try another server because the 
operation cannot be performed on the one you are currently using.
You can also use an exception handler for each of the two previous
instances.
</Para>
<Para>In general, the advantange of using <Literal>comm_status</Literal> if the recovery is 
local to the routine is that the overhead is less.
The disadvantage of using 
<Literal>comm_status</Literal> is that it results in two different operation signatures.
Distributed calls contain the <Literal>comm_status</Literal> attribute,
however; local calls do not.
Also, if all of the recovery cannot be done locally
(where the call is made),
there must be a way to pass the status to outer layers of code to 
process it.
</Para>
<Para>The <Literal>fault_status</Literal> attribute is 
useful only if the call to the operation has a
specific recovery action to perform for one or more server faults;
for example, <Literal>rpc_s_invalid_tag</Literal>, <Literal>rpc_s_fault_pipe_comm_error</Literal>,
<Literal>rpc_s_fault_int_overflow</Literal>, or <Literal>rpc_s_fault_remote_no_memory</Literal>.  
Use <Literal>fault_status</Literal> only when the application calls a remote operation
and wants different behavior than if it calls the same operation locally.
If you are requesting an operation on a large data set, you can use
this attribute to trap <Literal>rpc_s_fault_remote_no_memory</Literal> and retry the
operation to a different server, or you may break your
data set into two smaller sections.
You can also handle the previous case with exception handlers.  The
advantange of using <Literal>fault_status</Literal> if the recovery is local is that
the overhead is less.  The disadvantage of
<Literal>fault_status</Literal> is that the operation is different between the local
and distributed case.  Also, if all of the recovery cannot be done
locally, there must be a way to pass the status to outer layers
of code to process it.
</Para>
</Sect2>
<Sect2 Id="DCEADG.RPCTOP.div.16">
<Title>Examples of Error Handling</Title>
<Para>The following subsections present 
two examples of error handling.  The first example 
assumes that the <Literal>comm_status</Literal> attribute is in use in the ACF.
The second example assumes that the <Literal>comm_status</Literal> attribute is not in use.
</Para>
<Sect3 Id="DCEADG.RPCTOP.div.17">
<Title>The Matrix Math Server Example</Title>
<Para>Assume that you have an existing local interface that provides matrix math
operations.  Since it is local, errors such as floating-point 
overflow or divide by zero are returned to the caller of a matrix
operation as exceptions.  It is likely that these exceptions are
caused by providing data to the operation in an improper form.  
</Para>
<Para>In this case, the exceptions are part of the interface, so 
<Literal>fault_status</Literal>
changes the way the application calls the matrix interface and
probably is undesirable.  Depending on the environment, finding a
server may not be difficult (if the network is relatively stable and
has enough resources), and adding <Literal>comm_status</Literal> serves only 
to introduce differences between the local and distributed
applications.
</Para>
<Para>If a decision as to what action to take is
based upon a communications
failure, then you may try to add the conditional code
<Literal>comm_status</Literal> requires. 
Otherwise, using
<Literal>auto_handle</Literal> allows an attempt on each available server.  If no
server is available, the application terminates because it cannot
proceed.  You can add an exception handler to the main program to
report the error in a user-friendly manner.
</Para>
</Sect3>
<Sect3 Id="DCEADG.RPCTOP.div.18">
<Title>The Stock Quote Application Example</Title>
<Para>Assume that you have an application that reads from stock
quote servers and displays graphs of the data.  Since
you do not expect to get server failures because it is a commercial-quality
server, you are not interested in writing code 
to handle values returned from <Literal>fault_status</Literal>.  
If high availability and robustness is
important, you may have a list of recovery plans to make sure a 
stock analyst can get the necessary information as quickly as
possible.  For example:
</Para>
<InformalExample>
<Para><ProgramListing>retry_count = 10;
do  {
    query_stock_quote(h, ...,&amp;st);
    switch (st)         /* st parameter can be used because */
    {                   /* [comm_status] is in the ACF */
        case rpc_s_ok:
            break;
        case rpc_s_comm_failure:
            retry_count -= 1;
            break;
        case rpc_s_network_unreachable:
            h = some_other_handle;
            break;
        case
            .
            .
            .
        default:
            retry_count -= 1;
    }
}
while ((st == rpc_s_ok) || (retry_count &lt;= 0))
</ProgramListing></Para>
</InformalExample>
<Para>If this is not a critical application, you 
may only report that the server is currently unavailable.  
Depending upon the design of the application, there may be 
several places to put the exception handler 
to report the failure but continue processing.  For example:
</Para>
<InformalExample>
<Para><ProgramListing>TRY
    update_a_quote(...);
CATCH_ALL
    display_message("Stock quote not currently available");
ENDTRY
</ProgramListing></Para>
</InformalExample>
<Para>This example assumes that <Function>update_a_quote()</Function> 
eventually calls the remote operation <Function>query_stock_quote()</Function> 
and that this call may raise an exception that is
detected and reported here.
</Para>
<Para><?sml-need 6>The advantage of using exceptions in this
case is that all of the work done in <Function>update_a_quote()</Function> 
has the same error
recovery and it does not need to be repeated at every call to a remote
operation.  Another advantage is that, if one of the remote operations
does have a recovery for one exception, it can handle that one 
exception and allow the rest to propagate to the more general handler 
in an outer layer of the code.
</Para>
</Sect3>
</Sect2>
</Sect1>
<Sect1 Id="DCEADG.RPCTOP.div.19">
<Title>Context Handles</Title>
<Para>During a series of remote procedure calls, the 
client may need to refer to a context maintained by a specific
server instance.
Server application code can maintain information it needs for a
particular client (such as the state of RPC the client is using) 
as a context.  To provide a client with a means of referring to its context, 
the client and server pass back and forth an RPC-specific parameter
called a <FirstTerm>context handle</FirstTerm>.
<!-- .gL "context handle"-->
<IndexTerm Id="DCEADG.RPCTOP.indx.27">
<Primary>context handle</Primary>
<Secondary>definition of</Secondary>
</IndexTerm>A context handle is a reference (a pointer) to the server instance and the 
context of a particular client. 
A context handle ensures that subsequent remote
procedure calls from the client can reach the server instance that is
maintaining context for the client. 
</Para>
<Para>On
completing the first procedure in a series, the server passes a context handle
to the client.  The context handle identifies the context that the server
uses for subsequent operations.  
The client is not supposed to do anything with the context handle; it merely
passes it to subsequent calls as needed, and it is used internally by
the remote calls.  This allows applications to have such things as remote
calls that handle file operations much as local calls would; that is,
a client application can remotely open a file, get back a handle to it,
and then perform various other remote operations on it, passing the
context handle as an argument to the calls.  A context handle can be used
across interfaces (where a single server offers the multiple interfaces),
but <Replaceable>a context handle belongs only to the client that caused it to be
activated</Replaceable>. 
</Para>
<Para>The server maintains the context for a client until the client calls
a remote procedure that terminates use of the context or
communications are lost.  In the latter case, the server's runtime can
invoke a context rundown procedure.
This application-specific routine is called by the server stub 
automatically to reclaim (rundown) the pointed-to resource in the
event of a communications break between the server and client.  
For example, in the case of the remote file pointer just mentioned, 
the context rundown routine would simply close the file.
</Para>
<Para><?sml-need 4>As usual with RPC, you need to apply indirection operators in a variety of
ways to maintain the correct <Literal>[in]</Literal> and <Literal>[out]</Literal> semantics.  Typical
declarations for a context handle are as follows.  In the <Filename>.idl</Filename> file,
declare a named type such as
<!-- -->
</Para>
<InformalExample>
<Para><ProgramListing>typedef [context_handle] void* my_handle_t;
</ProgramListing></Para>
</InformalExample>
<!-- -->
<Para>A manager routine that returns a context handle as an <Literal>out</Literal> parameter
declares it as
<!-- -->
</Para>
<InformalExample>
<Para><ProgramListing>my_handle_t *h;
</ProgramListing></Para>
</InformalExample>
<!-- -->
<Para>The routine then sets the value of the handle as follows:
<!-- -->
</Para>
<InformalExample>
<Para><ProgramListing>*h = &amp;context_data;
</ProgramListing></Para>
</InformalExample>
<!-- -->
<Para>A routine that refers to a context handle as an <Literal>in</Literal> parameter
declares it as
<!-- -->
</Para>
<InformalExample>
<Para><ProgramListing>my_handle_t h;
</ProgramListing></Para>
</InformalExample>
<!-- -->
<Para>and dereferences the handle as follows:
<!-- -->
</Para>
<InformalExample>
<Para><ProgramListing>context_data = (my_handle_t*)h;
</ProgramListing></Para>
</InformalExample>
<!-- -->
<Para>For the <Literal>in,out</Literal> case, the routine uses the same declaration as in the
<Literal>out</Literal> case, and dereferences the handle as follows:
<!-- -->
</Para>
<InformalExample>
<Para><ProgramListing>context_data = (my_handle_t*)*h;
</ProgramListing></Para>
</InformalExample>
<Para>The following extensive example shows a simple use of context handles.
In the sample code, the client requests a unit of storage from the
server, using the <Function>store_open()</Function> call, and receives a handle to the
allocated storage.  The <Function>store_read()</Function>, <Function>store_write()</Function>, and
<Function>store_set_ptr()</Function> routines allow the client to read from and write
to specific locations in the allocated storage.  The <Function>store_close()</Function>
routine releases the server resources.
<?sml-break><?sml-need 12></Para>
<Sect2 Id="DCEADG.RPCTOP.div.20">
<Title>Context Handles in the Interface</Title>
<Para>The <Filename>.idl</Filename> file declarations for the <Literal>store</Literal> interface are as
follows:
</Para>
<InformalExample>
<Para><ProgramListing role="page-wide"><?sml-point-size 10>
<!--no-op:  12-->
/*
 * store.idl
 * A sample interface that demonstrates server maintained context.
 * The client requests temporary storage of a specified size, 
 * and the server returns a handle that can be used to read and
 * write to storage.  The interface doesn't care how the
 * server implements the storage. 
 */
[
uuid(0019b8c5-e8b5-1c84-9a41-0000c0d4de56),
pointer_default(ref),
version(1.0)
]
interface store
{

    /* A context handle used to access remote storage:                 */
    typedef [context_handle] void* store_handle_t;

    /* A storage object name string:                                   */
    /*  typedef [string] char* store_name_t; */

    /* A buffer type for data:                                         */
    typedef byte store_buf_t[*];

    /* Note that the context handle is an [out] parameter of the open  */
    /*  routine, an [in, out] parameter of the close routine, and an   */
    /*  [in] parameter of the other routines.  If the context handle   */
    /*  were treated as an [in] parameter of the close routine, the    */
    /*  stubs would never learn that the context had been set to NULL, */
    /*  and would consider the context to still be live.  This would   */
    /*  result in the rundown routine's being called when the client   */
    /*  terminated, even though there would be no context to run down. */

    void store_open(
	[in] handle_t binding,
	[in] unsigned32 store_size,
	[out] store_handle_t *store_h,
	[out] error_status_t *status
    );

    void store_close(
	[in,out] store_handle_t *store_h,
	[out] error_status_t *status
    );

    void store_set_ptr(
	[in] store_handle_t store_h,
	[in] unsigned32 offset,
	[out] error_status_t *status
    );

    void store_read(
	[in] store_handle_t store_h,
	[in] unsigned32 buf_size,
	[out, size_is(buf_size), length_is(*data_size)] \
	  store_buf_t buffer,
	[out] unsigned32 *data_size,
	[out] error_status_t *status
    );

    void store_write(
	[in] store_handle_t store_h,
	[in] unsigned32 buf_size,
	[in, size_is(buf_size)] store_buf_t buffer,
	[out] unsigned32 *data_size,
	[out] error_status_t *status
    );

}
<?sml-point-size 12>
<!--no-op:  14-->
</ProgramListing></Para>
</InformalExample>
</Sect2>
<Sect2 Id="DCEADG.RPCTOP.div.21">
<Title>Context Handles in a Server Manager</Title>
<Para>Server manager code to provide a rudimentary implementation of the <Literal>store</Literal>
interface is as follows:
<!-- -->
</Para>
<InformalExample>
<Para><ProgramListing role="page-wide"><?sml-point-size 10>
<!--no-op:  12-->
/* context_manager.c -- implementation of "store" interface.            */
/*                                                                      */
/* The server maintains a certain number of storage areas, only one of  */
/*  which can be (or should be) opened by a single client at a time.    */
/*  More than one client can, however, apparently be invoked (up to the */
/*  number of separate storelets == store handles available, defined by */
/*  the value of NUM_STORELETS).  Each client keeps track of its store  */
/*  (and likewise enables the server to do the same) by means of the    */
/*  context handle it receives when it opens its store.                 */
/*                                                                      */
/************************************************************************/

<?sml-need 6>#include &lt;stdio.h>
#include &lt;string.h>
#include &lt;malloc.h>
#include &lt;pthread.h>
#include &lt;dce/dce_error.h>
#include &lt;dce/daclif.h>

#include "context.h"

#define NUM_STORELETS 10

/************************************************************************/
/* The actual "storelet" structure...                                   */

typedef struct store_hdr{
    pthread_mutex_t ref_lock;
    unsigned32 size;
    unsigned32 refcount;
    idl_byte *storage;
} store_hdr_t;

store_hdr_t headers[NUM_STORELETS]; /* There's an array of these.       */

/************************************************************************/
/* The store specification structure; note that it is equivalent to the */
/*  handle; the pointer to it is returned as the handle by the          */
/*  store_open() routine below...                                       */
/*  The assumption is that all access to a given handle is serialized   */
/*  in a single thread, so no locking is needed for these.              */

typedef struct store_spec{
    unsigned32 number;     /* The storelet number we've opened.         */
    unsigned32 offset;     /* The current read/write position.          */
} store_spec_t;  /* There's only one of these; it's the handle that     */
                 /*  gives access to one of the NUM_STORELETS set of    */
                 /*  "storelets".                                       */


/* The server entry name:                                               */
extern unsigned_char_p_t entry;


/* Initialization control block:                                        */
pthread_once_t init_once_blk = pthread_once_init;

<?sml-need 14>/******
*
* store_mgmt_init -- Zeroes out all the storelet structures; executed 
*                    only once per server instance, as soon as a client 
*                    has called the store_open() routine.
*
******/
/************************************************************************/
void 
store_mgmt_init(
)
{
    int i;
    store_hdr_t *hdr;

    fprintf(stdout, "Store Manager: Initializing Store);
    memset(headers, 0, sizeof(store_hdr_t) * NUM_STORELETS);
    for (i = 0; i &lt; NUM_STORELETS; i++)
    {
	hdr = headers + i;
	pthread_mutex_init(
	    (pthread_mutex_t *)hdr,
	    pthread_mutexattr_default);
    }

}

/******
*
* store_open -- Opens a store and returns a handle to it.  Store consists
*               of one "storelet" selected from array of NUM_STORELETS.
*
******/
/************************************************************************/
void 
store_open(
    handle_t binding,
    unsigned32 store_size,    /* Size specified for actual storage.     */
    store_handle_t *store_h,  /* To return the store handle in.         */
    error_status_t *status
)
{
    int i;                 /* Index variable.                           */
    store_spec_t *spec;    /* Store specification == handle.            */
    store_hdr_t *hdr;      /* Storelet structure.                       */

    /* Do the store initialization if this is the first open call...    */
    /* Zero out the store headers...                                    */
    pthread_once(&amp;init_once_blk, store_mgmt_init);

<?sml-need 10>    /* The following loop goes through all the storelets, looking for   */
    /*  one whose reference count is zero.  As soon as one such is      */
    /*  found, a handle is allocated for it, storage is allocated for   */
    /*  its store structure, and the loop (and the call) terminates. If */
    /*  no unreferenced storelet is found, a status of -1 is returned   */
    /*  and no handle is allocated...                                   */
    for(i = 0; i &lt; NUM_STORELETS; i++)
    {
	/* Go to the next storelet...                               */
	hdr = headers + i;

	/* Is it unreferenced?...                                   */
	if (hdr->refcount == 0)
	{
	    /* If so, lock the header...                        */
	    *status = pthread_mutex_lock((pthread_mutex_t *)hdr);
	    if (*status != 0)
	    {
		return;
	    }

	    /* ...and check the reference count again...        */
	    if (hdr->refcount == 0)
	    {
		/* Now we know we "really" have this one.   */
		/* Only one open is allowed, so lock only   */
		/*  the reference count...                  */
		hdr->refcount++;

		/* Now unlock the header so other threads   */
		/*  can continue to check it...             */
		*status = pthread_mutex_unlock((pthread_mutex_t *)hdr);
		if (*status != 0)
		    return;

		/* Now allocate space for the specifica-    */
		/*  tion structure...                       */
		spec = (store_spec_t *)malloc(sizeof(store_spec_t));
		spec->number = i;
		spec->offset = 0;
		*store_h = spec;

		/* Allocate space for the storage part of   */
		/*  the header...                           */
		hdr->storage = (idl_byte *)malloc(store_size);
		hdr->size = store_size;

<?sml-need 5>	    	/* Finally, set the return status to OK,    */
	    	/*  and return...                           */
		*status = error_status_ok;
		return;
	    }

	    /* If the reference count turned out to have        */
	    /*  been accessed between our first check and our   */
	    /*  locking the mutex, we must now unlock the mutex */
	    /*  preparatory to looping around to check the next */
	    /*  storelet...                                     */
	    *status = pthread_mutex_unlock((pthread_mutex_t *)hdr);
	    if (*status != 0)
	    {
		return;
	    }
	}
    }

    /* The following is reached only if we never found a free           */
    /*  storelet...                                                     */
    *store_h = NULL;
    *status = -1;

}

/******
*
* store_set_ptr -- Insert a new value into the store buffer pointer.
*
*******/
/************************************************************************/
void store_set_ptr(
    store_handle_t store_h,     /* The store handle.                    */
    unsigned32 offset,    /* Value to insert into store buffer pointer. */
    error_status_t *status
)
{
    store_spec_t *spec;              /* Our pointer to store handle.    */

    spec = (store_spec_t *)store_h;  /* Get the store spec.             */
    spec->offset = offset;     /* Copy in the new buffer pointer value. */
    *status = error_status_ok;
}

<?sml-need 14>/******
*
* store_close -- Close the opened storelet.
*
******/
/************************************************************************/
void 
store_close(
    store_handle_t *store_h,                /* Store handle.            */
    error_status_t *status
)
{
    store_spec_t *spec;             /* Our pointer to store handle.     */
    store_hdr_t *hdr;               /* Pointer to a storelet.           */

    printf("Store Manager: Closing Store);

    spec = (store_spec_t *)*store_h; /* Get the store spec.             */
    hdr = headers + spec->number;    /* Point to the correct storelet.  */

    /* If the thing is actually opened, close it...                     */
    if (hdr->refcount > 0)
    {
	/* Lock the header first...                                 */
	*status = pthread_mutex_lock((pthread_mutex_t *)hdr);
	if (*status != 0)
	{
	    printf("Close: lock failed);
	    return;
	}

	/* Check the reference count to make sure no one slipped in */
	/*  before we could lock the header, and already closed the */
	/*  critter...                                              */
	if (hdr->refcount > 0)
	{
	    /* The store is open, and it's locked by us, so we  */
	    /*  can safely close it. So do it. First, decrement */
	    /*  the reference count...                          */
	    hdr->refcount--;

	    /* Is it completely closed now?                     */
	    if (hdr->refcount == 0)
	    {
		/* If so, get rid of its storage space...   */
		hdr->size = 0;
		free(hdr->storage);
	    }
	}

<?sml-need 9>	/* If the store turned out to be closed before we could     */
	/*  close it, we have nothing to do but release the lock... */
	*status = pthread_mutex_unlock((pthread_mutex_t *)hdr);
	if (*status != 0)
	{
	    printf("Close: unlock failed);
	    return;
	}
    }

    /* And free our handle space...                                     */
    free(spec);

    /* Be sure to NULL the context handle.  Otherwise, the context      */
    /*  will be considered to be live as long as the client is run-     */
    /*  ning...                                                         */
    *store_h = NULL; 
    *status = error_status_ok;
}

/******
*
* store_read -- Read a certain number of bytes from the opened store.
*
******/
/************************************************************************/
void
store_read(
    store_handle_t store_h,   /* Store handle.                          */
    unsigned32 buf_size,      /* Number of bytes to read.               */
    store_buf_t buffer,       /* Space to return data read in.          */
    unsigned32 *data_size,    /* To return number of bytes read in.     */
    error_status_t *status
)
{
    store_spec_t *spec;       /* Our handle pointer.                    */
    store_hdr_t *hdr;         /* Pointer to a storelet.                 */

    spec = (store_spec_t *)store_h;  /* Get the storelet spec.          */
    hdr = headers + spec->number;    /* Point to the correct storelet.  */

    /* If the amount we're to read is less than the amount left to be   */
    /*  read, then read it...                                           */
    if (buf_size &lt;= hdr->size)
    {

	/* Copy bytes from the storelet storage, beginning at off-  */
	/*  set, into the return buffer, up to the size of the      */
	/*  buffer...                                               */
	memcpy(buffer, hdr->storage + spec->offset, buf_size);

	/* Update the storelet buffer pointer past what we've just  */
	/*  read...                                                 */
	spec->offset += buf_size;

	/* Show return size of data read...                         */
	*data_size = buf_size;
	*status = error_status_ok;
	return;
    }

    /* If there's less data left than has been specified to read, don't */
    /*  read it...                                                      */
    *data_size = 0;
    *status = -1;
}

/******
*
* store_write -- Write some data into the opened store.
*
******/

void 
store_write(
    /* handle_t IDL_handle,*/  /* If the server ACF declares            */
                               /*  [explicit_handle]                    */
    store_handle_t store_h,    /* Store handle.                         */
    unsigned32 buf_size,       /* Number of bytes to write.             */
    store_buf_t buffer,        /* Data to be written.                   */
    unsigned32 *data_size,     /* To return number of bytes written.    */
    error_status_t *status
)
{
    store_spec_t *spec;            /* Our pointer to store handle.      */
    store_hdr_t *hdr;              /* Pointer to a storelet.            */

    /* Do an access check on IDL_handle here...                         */
    /* [--ORIGINAL NOTE] -- I don't know what the above means.          */

    spec = (store_spec_t *)store_h;  /* Get the storelet spec.          */
    hdr = headers + spec->number;    /* Point to the correct storelet.  */

    /* If the amount of unused room left in the storelet is greater     */
    /*  than what we're supposed to write in it, write it...            */
    if ((hdr->size - spec->offset) > buf_size)
    {

	/* Copy bytes from the buffer into the storelet storage,    */
	/*  beginning at the current read/write position...         */
	memcpy(hdr->storage + spec->offset, buffer, buf_size);

	/* Update the storelet buffer pointer to point past what    */
	/*  we've just written...                                   */
	spec->offset += buf_size;

	/* Add a null in case we want to read the store as a        */
	/*  string...                                               */
	*(hdr->storage + spec->offset) = 0; 

	/* Show return size of data written...                      */
	*data_size = buf_size;
	*status = error_status_ok;
	return;
    }

    /* If we don't have room to write the whole buffer, don't write     */
    /*  anything...                                                     */
    *data_size = 0;
    *status = error_status_ok;
}

/******
 *
 * print_manager_error-- Manager version.  Prints text associated with 
 * bad status code.
 *
 *
 ******/
void
print_manager_error(
char *caller,  /* String identifying routine that received the error. */
error_status_t status) /* status we want to print the message for.    */
{
    dce_error_string_t error_string;
    int print_status;

    dce_error_inq_text(status, error_string, &amp;print_status);
    fprintf(stderr," Manager: %s: %s, caller, error_string);

}
<?sml-point-size 12>
<!--no-op:  14-->
</ProgramListing></Para>
</InformalExample>
<Para>The sample implementation of the store interface is obviously too
limited for any practical use, but it does demonstrate the application
of context handles in a straightforward way.  A context handle
returned by the <Function>store_open()</Function> routine is opaque to the client.
To the server, it is a pointer to the server's representation of a
storage unit.  In this case, it points to a structure that keeps track
of the client's current location within a specific piece of 
server-maintained storage.
</Para>
<Para><?sml-need 8>Aside from deallocating the actual storage, the <Function>store_close()</Function>
routine sets the context handle to NULL. The NULL value
indicates to the server stub that the context is no longer active, and
the stub, in turn, tells the RPC runtime not to maintain the context.
For example, after the <Function>store_close()</Function> routine has been invoked,
the rundown routine will not be invoked if communication ends between
client and server.  The context rundown routine takes care of closing
the client's storage in case of a communication failure while the
context is active.
</Para>
<Para>The global array of <Replaceable>store_hdr</Replaceable> structures that keeps track of
allocated storage, obviously servers no practical purpose in the
example. (Presumably the operating system is already doing this!)
However, it does provide a demonstration of the fact that global
server manager data is shared data in the implicitly multithreaded
server environment.  The routines that manipulate this shared data may
be called simultaneously by multiple server threads (in response to
multiple simultaneous client calls); therefore, locking must be
provided, in this case on the <Symbol Role="Variable">refcount</Symbol> field.  The sample also
demonstrates how the <Function>pthread_once()</Function> facility can be used to
provide one-time initialization of the shared data on the first
<Function>store_open()</Function> call.
</Para>
<Para>As an exercise, the storage interface can easily be made more
interesting by providing multiple clients simultaneous access to a
given storage area.  To implement this, the application could add a
<Symbol Role="Variable">store_name</Symbol> parameter to the <Function>store_open()</Function> routine and
replace the <Symbol Role="Variable">refcount</Symbol> field with counts of readers and writers.
The division of the storage management between the <Symbol Role="Variable">store_hdr</Symbol>
and the <Symbol Role="Variable">store_spec</Symbol> data structures is intended to facilitate
this; the <Symbol Role="Variable">store_hdr</Symbol> holds shared state relating to each store,
while the <Symbol Role="Variable">store_spec</Symbol> holds each thread's private state.
</Para>
</Sect2>
<Sect2 Id="DCEADG.RPCTOP.div.22">
<Title>Context Rundown</Title>
<Para>Context handles typically point to some state maintained by a server
instance for a client over a series of RPC operations.  If the series
of operations fails to complete because communication is lost between
client and server, the server will probably have to take some kind of
recovery action such as restoring data to a consistent state and
freeing resources.
</Para>
<Para><?sml-need 16>The stub detects outstanding context when it marshals context handle
parameters.  Outstanding context is considered to exist from the point
at which a non-NULL pointer value is returned, until a NULL
pointer value is returned.  When outstanding context exists, the server
stub code will call a context rundown routine in response to certain
exceptions that indicate a loss of contact with the client.  You
should note that the exact timing of the call depends on the
transport.  In particular, with the connectionless protocol, servers
that maintain context for clients expect clients to indicate
periodically that they are still running.  If the server fails to hear
from the client during a specified timeout period, the server will
assume that the client has stopped and call the context rundown
routine.  This can mean a substantial delay between the time the
client actually fails and the time at which context maintained for the
client is actually cleaned up.  If the context being held represents a
scarce resource on the server, one consequence of the delayed rundown
may be that failed calls continue to hold the scarce resource for some
time before it is made available again.
</Para>
<Para>Since a context handle may be freely shared among threads of the
calling client context, it is possible for outstanding context to
exist for more than one call simultaneously.  Such shared context is
considered to be outstanding as long as it is outstanding for any of
the participating threads.  Also, any communications failures are
likely to be detected at different times for each such call thread,
and the difference in timing may be especially noticeable in the case
of the connectionless protocol.  Context rundown occurs only after all
server call threads have been terminated.  This means that call
operations in progress on the server need not be concerned that the
context they are operating on will be changed unexpectedly.  Imagine a
situation in which context handles represent open file descriptors, and
the rundown routine closes the files.  A manager thread that shares these
descriptors via a context handle is guaranteed that the files will remain
open even if a communications failure is detected in another thread that
also is using the same context handle.
<!-- -->
<!-- .P-->
<!-- [Don't forget to mention rpc_sm_destroy_client_context()]-->
<!-- -->
</Para>
<InformalExample>
<Para><ProgramListing><?sml-need 16>/******
*
* store_handle_t_rundown -- Closes the opened storelet.
*
******/
/************************************************************/
void
store_handle_t_rundown(
    store_handle_t store_h
)
{
    error_status_t st;

    printf("Store Manager: Running down context.);
    store_close(&amp;store_h, &amp;st);
}
</ProgramListing></Para>
</InformalExample>
</Sect2>
<Sect2 Id="DCEADG.RPCTOP.div.23">
<Title>Binding and Security Information</Title>
<Para>One element that is clearly missing from the context handle sample
code is any access checking.  To do this, it is necessary to get the
client binding, although it may not be immediately obvious how to do
this with a context handle.  The answer is actually quite simple but,
to understand it, it helps to have a clear idea of how binding
parameters operate in RPC.
</Para>
<Para>Every call requires binding information, whether this is supplied
explicitly as a binding parameter or not.  When a call is made with a
binding handle, the client uses cached binding information associated
with the binding handle.  When no binding handle parameter is passed,
the client derives the binding information it needs by some other
means.  For example, with a context handle, the client uses cached
binding information associated with the context handle.
</Para>
<Para>Even when an explicit binding handle parameter is present, the handle
is not marshalled as call data in the same way other call parameters
are.  Similarly, on the server side, when a binding handle parameter
is present in a manager operation, it is <FirstTerm>unmarshalled</FirstTerm> simply as a
reference to the binding information cached by the server runtime for
the call.  It is irrelevant whether the call was made with an explicit
binding handle parameter on the client side.  
</Para>
<Para><?sml-need 3>Therefore, it is
perfectly possible for a server manager operation to have a binding
handle as a parameter even when the client RPC call is made without an
explicit binding parameter.
</Para>
<Para>The mechanics of this are to use different <Filename>.acf</Filename> declarations on
the client and server sides.  The <Filename>.idl</Filename> file declaration for the
operation does not declare an explicit binding handle parameter, but
the server <Filename>.acf</Filename> file applies the <Literal>[explicit_handle]</Literal> attribute
to the operation.  This results in a server stub that expects to unmarshal
a binding handle as the first parameter of the operation, while the client
stub does not expect an explicit binding handle parameter for the call.
</Para>
<Para>An example of a server-side <Filename>.acf</Filename> file for the store interface is as
follows:
<!-- -->
</Para>
<InformalExample>
<Para><ProgramListing>/* store.acf - server side
 * Unmarshal a client binding handle on each call
 */

interface store
{
    store_open();
    [explicit_handle]store_close();
    [explicit_handle]store_set_ptr();
    [explicit_handle]store_read();
    [explicit_handle]store_write();
}
</ProgramListing></Para>
</InformalExample>
<Para>You could achieve the same effect by using different <Filename>.idl</Filename> files
for the client and server, but this is not recommended.  The <Filename>.idl</Filename>
file serves as the canonical representation of an interface and hence
should be the same for all clients and servers.
<!-- -->
<!-- (Of course, the IDL-->
<!-- compiler makes this difficult if the server and client code are located-->
<!-- in the same directory.  Since the compiler derives the \*L.acf\*O filename-->
<!-- from the \*L.idl\*O filename, you need \*L.idl\*O files with different-->
<!-- pathnames (although they have the same content) for client and server.-->
<!-- The compiler really needs a switch to define a nondefault \*L.acf\*O-->
<!-- filename!)-->
<!-- -->
</Para>
<Para>This technique can be used in a number of ways; for example, to permit
the client to use implicit binding while the server manager operations
extract authorization information from a client binding handle.  In the
case of a context handle, the principle is the same.  You use the server
<Filename>.acf</Filename> declarations to add a binding parameter to the call on the
server side.  The client continues to call using the context handle, while
the server manager receives the client binding as a first extra parameter.
</Para>
<Para><?sml-need 3>In the case of the sample code, the client calls to the store interface
remain the same, but the server manager implementations now contain an
extra parameter.  For example:
</Para>
<InformalExample>
<Para><ProgramListing><?sml-need 12>void 
store_write(
    handle_t IDL_handle,
    store_handle_t store_h,
    unsigned32 buf_size,
    store_buf_t buffer,
    unsigned32 *data_size,
    error_status_t *status
)
{
    store_spec_t *spec;
    store_hdr_t *hdr;

    if (check_access(IDL_handle, sec_acl_perm_write) == 0)
    {
        *status = str_s_no_perms;
        return;
    }
    .
    . 
    .
}
</ProgramListing></Para>
</InformalExample>
</Sect2>
</Sect1>
<Sect1 Id="DCEADG.RPCTOP.div.24">
<Title>Pipes</Title>
<Para>Pipes are a mechanism for efficiently handling large quantities of
data by overlapping the transfer and processing of data.  
Input data is transferred in chunks to the server for processing, 
and output data is processed by the server in chunks and transferred
to the client.
A pipe is declared in a type definition of an interface definition,
and the data type is used as parameters in the operations of the interface.
The server manager calls stub pipe support routines in a loop, 
and the client stub calls pipe support routines that the client application
must provide.  
</Para>
<Para><?sml-need 9>One of the pipe support routines that the client must provide is
an <Literal>alloc</Literal> routine, which allocates a buffer for each chunk of pipe data. 
Given that pipes are intended to process data asynchronously,
consuming it as it arrives, the <Literal>alloc</Literal> routine should not just blindly
allocate a new buffer each time it is called, since the net effect
would be to allocate space for the whole stream.  A reasonable
approach is either to declare a buffer statically or allocate it on
the first call (per thread), and thereafter simply return the same
buffer.  The following code example shows the form an <Literal>alloc</Literal> routine
takes in client application code.
</Para>
<InformalExample>
<Para><ProgramListing>#define CLIENT_BUFFER_SIZE 2048
idl_byte client_buffer[CLIENT_BUFFER_SIZE];

void client_alloc (state, bsize, buf, bcount)
    rpc_ss_pipe_state_t state;
    unsigned int bsize;
    byte **buf;
    unsigned int *bcount;
{
    *buf = client_buffer;
    *bcount = CLIENT_BUFFER_SIZE;
}
</ProgramListing></Para>
</InformalExample>
<Sect2 Id="DCEADG.RPCTOP.div.25">
<Title>Input Pipes</Title>
<Para>In the following example, a client sends
the contents of a file to a server as a set of chunks allocated from the
same static buffer. 
The chunks are processed (in this case simply printed) as they arrive.
</Para>
<Para>The declaration in the interface definition is as follows:
<!-- -->
</Para>
<InformalExample>
<Para><ProgramListing>typedef pipe char test_pipe_t;

void pipe_test1(
    [in] handle_t handle,
    [in] test_pipe_t test_pipe,
    [out] error_status_t *status
);
</ProgramListing></Para>
</InformalExample>
<!-- -->
<Para><?sml-need 4>Note that the pipe is declared as a <Literal>typedef</Literal>, resulting in an
IDL-generated C typedef for <StructName Role="typedef">test_pipe_t</StructName>, which is
a structure containing pointers to the pipe support 
routines and a pipe state field.  The server
manager and client code then implement the pipe in a complementary
fashion. 
</Para>
<Para>For an <Literal>[in]</Literal> pipe, the server manager code consists of a
cycle of calls to the <Literal>test_pipe.pull</Literal> routine (a server stub
routine) which terminates when a zero-length chunk is received:
</Para>
<InformalExample>
<Para><ProgramListing>void 
pipe_test1(
    handle_t binding_h,
    test_pipe_t test_pipe,
    error_status_t *status 
)
{
    char buffer[SBUFFSIZE];
    int count;
    char *cptr;
    do
    {
        (*(test_pipe.pull))(test_pipe.state, buffer, \
	  SBUFFSIZE, &amp;count);
        for (cptr = buffer; cptr &lt; buffer + count; cptr++)
            putchar(*cptr);
    } while (count > 0);
}
</ProgramListing></Para>
</InformalExample>
<Para>Using the buffer supplied by the manager, the <Literal>test_pipe.pull</Literal> routine 
unmarshals an amount of data that is nonzero, but not more than the 
buffer can hold.  There is no guarantee that the buffer will be filled.  
The actual amount of data in the buffer is indicated by the
<Literal>count</Literal> parameter returned in the <Literal>test_pipe.pull</Literal> routine.
This count equals the number of <StructName Role="typedef">test_pipe_t</StructName> data elements in the buffer.
</Para>
<Para><?sml-need 11>The <Literal>test_pipe.pull</Literal> routine signals the end of data in the pipe by
returning a chunk whose count is 0 (zero).  Any attempt to pull data from
the pipe after the zero-length chunk has been encountered will cause
an exception to be raised.  The <Literal>in</Literal> pipes must be processed in the
order in which they occur in the operation signature.  Attempting to
pull data from an <Literal>in</Literal> pipe before end-of-data on any preceding
<Literal>in</Literal> pipe has been encountered will result in an exception being
raised.  If the manager code attempts to write to an <Literal>out</Literal> pipe
or return control to the server stub before end-of-data has been
encountered on the last <Literal>in</Literal> pipe, an exception will be raised.
(Note that there is no guarantee that chunks seen by the manager will
match the chunks supplied by the client's <Literal>pull</Literal> routine.)
</Para>
<Para>The client application code must supply <Literal>pull</Literal> and <Literal>alloc</Literal>
routines and a pipe state.  
These routines must work together to produce a sequence 
of pointers to chunks, of which only the last is empty.
In the following example, the client code provides a
<Literal>test_pipe.pull</Literal> routine that reads chunks of the input file into
a buffer and returns a count of the chunk size, 
returning a zero count when the end of the file is reached.
The pipe state block is used here simply as a convenient way to make the file
state available to the <Literal>pull</Literal> routine. 
Applications need not make any use of the pipe state.
</Para>
<InformalExample>
<Para><ProgramListing>/* Client declares types and routines */

typedef struct client_pipe_state_t {
    idl_char *filename;
    idl_boolean file_open;
    int file_handle;
} client_pipe_state_t;

client_pipe_state_t client_in_pipe_state = {false, 0};

void client_pull(state,buf,esize,ecount)
    client_pipe_state_t * state;
    byte *buf;
    unsigned int esize;
    unsigned int *ecount;
<?sml-need 18>{
    if ( ! state->file_open )
    {
        state->file_handle = open(state->filename,O_RDONLY);
        if (state->file_handle == -1)
        {
            printf("Client couldn't open %s, state->filename);
            exit(0);
        }
        state->file_open = true;
    }
    *ecount = read( state->file_handle, buf, esize );
    if (*ecount == 0)
    {
        close(state->file_handle);
        state->file_open = false;
    }
}
</ProgramListing></Para>
</InformalExample>
<Para>Finally, the client must do the following:
</Para>
<OrderedList>
<ListItem>
<Para>Allocate the <StructName Role="typedef">test_pipe_t</StructName> structure.
</Para>
</ListItem>
<ListItem>
<Para>Initialize the <Literal>test_pipe_t.pull</Literal>, <Literal>test_pipe_t.alloc</Literal>, 
and <Literal>test_pipe_t.state</Literal> fields.
</Para>
</ListItem>
<ListItem>
<Para>Include code where appropriate for checking the <Filename>pipe_t.state</Filename> field.
</Para>
</ListItem>
<ListItem>
<Para>Pass the structure as the pipe parameter.  The structure can be 
passed either by value or by reference, as indicated by the signature 
of the operation that contains the pipe parameter:
</Para>
</ListItem>
</OrderedList>
<InformalExample>
<Para><ProgramListing>/* Client initializes pipe */
test_pipe_t test_pipe;

test_pipe.pull = client_pull;
test_pipe.alloc = client_alloc;
test_pipe.state = (rpc_ss_pipe_state_t)&amp;client_in_pipe_state;

/* Client makes call */

pipe_test1(binding_h, test_pipe, &amp;status);
</ProgramListing></Para>
</InformalExample>
<Para><?sml-need 4>To transmit a large amount of data that is already in the proper 
form in memory (that is, the data is already an array of <StructName Role="typedef">test_pipe_t</StructName>), 
the client application code can have the <Literal>alloc</Literal> routine allocate 
a buffer that already has the information in it.  In this case, the 
<Literal>pull</Literal> routine becomes a null routine.
</Para>
</Sect2>
<Sect2 Id="DCEADG.RPCTOP.div.26">
<Title>Output Pipes</Title>
<Para>An <Literal>[out]</Literal> pipe is implemented in a similar way to an input pipe, 
except that the client and server make use of the <Literal>push</Literal> routine instead
of the <Literal>pull</Literal> routine. 
The following samples show an <Literal>[out]</Literal> pipe used to read
the output from a shell command executed by the server.
</Para>
<Para>The declarations in the interface definition are as follows:
</Para>
<InformalExample>
<Para><ProgramListing>typedef pipe char test_pipe_t;

void pipe_test2(
    [in] handle_t handle,
    [in, string]  char cmd[],
    [out] test_pipe_t *test_pipe,
    [out] error_status_t *status
);
</ProgramListing></Para>
</InformalExample>
<Para>The server manager routines demonstrate a couple of possible
implementations.  In each case, the manager makes a cycle of calls to
the server stub's <Literal>push</Literal> routine, ending by pushing a zero-length chunk:
<!-- -->
</Para>
<InformalExample>
<Para><ProgramListing>#include &lt;dirent.h>
#define SBUFFSIZE 256

void 
pipe_test2(
    handle_t binding_h,
    idl_char *cmd,
    test_pipe_t *test_pipe,
    error_status_t *status 
)
{
  
<?sml-need 2>    DIR *dir_ptr;
    struct dirent *directory;

    char buffer[SBUFFSIZE];
    FILE *str_ptr;
    int n;

    /* An elementary mechanism to execute a command and get 
     * the output back.  Note that popen() and fread() are 
     * thread-safe, so the whole process won't block while 
     * the call thread waits for them to return.
     *
     * This is potentially a dangerous operation!
     * Here we'll only allow a couple of "safe" commands.
     */

    if (!strcmp(cmd, "ps") || !strcmp(cmd, "ls"))
    {
        if ((str_ptr = popen(cmd, "r")) == NULL)
            return;
        while ((n = fread(buffer, sizeof(char), \
	  SBUFFSIZE, str_ptr)) > 0)
        {
            (*(test_pipe->push))(test_pipe->state, buffer, n);
        }
        (*(test_pipe->push))(test_pipe->state, buffer, 0);
        fclose(str_ptr);
    }

    /* Here's another method: list an arbitrary directory 
     * This time, we buffer the directory names as null-
     * terminated strings of various lengths.  The client 
     * will need to provide formatting of the output stream, 
     * for example, by substituting a CR for each NULL byte.
     */
 
<?sml-need 14>    /*
    if ((dir_ptr = opendir(cmd)) == NULL)
    {
        printf("Can't open directory %s, cmd);
        return;
    }
    while ((directory = readdir(dir_ptr)) != NULL)
    {
        if (directory->d_ino == 0)
            continue;
        (*(test_pipe->push))(test_pipe->state, \
	  directory->d_name,
                            strlen(directory->d_name)+1);
    }
    (*(test_pipe->push))(test_pipe->state, \
      directory->d_name, 0);
    closedir(dir_ptr);
    */

    *status = error_status_ok;
}
</ProgramListing></Para>
</InformalExample>
<Para>The stub enforces well-behaved pipe filling by the manager by raising 
exceptions as necessary.  After all <Literal>in</Literal> pipes have been drained 
completely, the <Literal>out</Literal> pipes must be completely filled, in order.
</Para>
<Para>The client code uses the same declarations as in the input pipe example,
except that instead of using a <Literal>client_pull</Literal> routine it uses a
<Literal>test_push</Literal> routine that prints out the contents of each received buffer:
</Para>
<InformalExample>
<Para><ProgramListing>/* 
 * Our push routine prints each received buffer-full.
 */
void test_push(
    rpc_ss_pipe_state_t *state,
    idl_char *buf,
    unsigned32 count
)
<?sml-need 12>{
    unsigned_char_t *cptr;
    for (cptr = buf; cptr &lt; buf + count; cptr++)
    {
        /* For the second, directory reading example, 
           uncomment the following:
        if (*cptr == 0)
            *cptr = ';
         */
        putchar(*cptr);
    }
}
</ProgramListing></Para>
</InformalExample>
<Para><?sml-need 3>For an <Literal>out</Literal> pipe, the client code must do the following:
<IndexTerm Id="DCEADG.RPCTOP.indx.28">
<Primary>pipes</Primary>
<Secondary>out</Secondary>
</IndexTerm></Para>
<OrderedList>
<ListItem>
<Para>Allocate the <StructName Role="typedef">test_pipe_t</StructName> structure.
</Para>
</ListItem>
<ListItem>
<Para>Initialize the <Literal>test_pipe_t.push</Literal> and <Literal>test_pipe_t.state</Literal> fields.
</Para>
</ListItem>
<ListItem>
<Para>Pass the structure as the pipe parameter, either by value or 
by reference.
</Para>
</ListItem>
</OrderedList>
<InformalExample>
<Para><ProgramListing>test_pipe_t test_pipe;

test_pipe.alloc = (void (*)())client_alloc;
test_pipe.push = (void (*)())test_push;
test_pipe.state = (rpc_ss_pipe_state_t)&amp;out_test_pipe_state;

pipe_test2(binding_h, cmd, &amp;test_pipe, &amp;status);
</ProgramListing></Para>
</InformalExample>
<Para>The client stub unmarshals chunks of the pipe into a buffer 
and calls back to the application, passing a reference to the buffer.  
To allow the application code to manage its memory usage, and possibly 
avoid unnecessary copying, the client stub first calls back to 
the application's <Literal>test_pipe.alloc</Literal> routine to get a buffer.  In some 
cases, this may result in the <Literal>test_pipe.push</Literal> routine's not having 
any work to do.
</Para>
<Para>The client stub may go through more than one (<Literal>test_pipe.alloc</Literal>, 
<Literal>test_pipe.push</Literal>) cycle in order to unmarshal data that the server 
marshalled as a single chunk.    Note that there is 
no guarantee that chunks seen by the client stub will match the 
chunks supplied by the server's <Literal>push</Literal> routine.
</Para>
</Sect2>
<Sect2 Id="DCEADG.RPCTOP.div.27">
<Title>Pipe Summary</Title>
<Para>The pipe examples show how the client and server tasks are
complementary.  The client implements the appropriate callback
routines (<Literal>test_pipe.alloc</Literal> and either <Literal>test_pipe.push</Literal> or
<Literal>test_pipe.pull</Literal>), and the server manager makes a cycle of calls
to either <Literal>test_pipe.push</Literal> or <Literal>test_pipe.pull</Literal> of the stub. 
The application code gives the illusion that the server manager is calling
the client-supplied callbacks.  In fact, the manager is actually
calling stub-supplied callbacks, and the client callbacks
are asynchronous: a server manager call to one of the callback
routines does not necessarily result in a call to the corresponding
client callback.
</Para>
<Para>One result of this is that the client and server should not count on
the chunk sizes being the same at each end.  For example, in the last
directory reading example, the manager calls the <Literal>test_pipe.push</Literal>
routine once with each NULL-terminated filename.  However, the
client <Literal>test_push</Literal> routine does not necessarily receive the data
stream one filename at at time.  For example, if the <Literal>test_push</Literal>
routine attempted to print the filenames using <Literal>printf("%s\n",buf);</Literal>, 
it might fail.  An interesting exercise would be to add <Function>printf()</Function>
routines to the client callbacks and the server manager to show 
when each callback is made.
</Para>
<Para>Note also that the use of the pipe <Symbol Role="Variable">state</Symbol> field by the client is
purely local and entirely at the discretion of the client.  The state
is not marshalled between client and server, and the server
stubs use the local <Symbol Role="Variable">state</Symbol> field in a private manner.  The server
manager should not alter the state field.
</Para>
<Para>Pipes may also be <Literal>[in,out]</Literal>, although the utility of this
construct is somewhat limited.  Ideally, a client would like to
be able to pass a stream of data to the server and have it processed and
returned asynchronously.  In practice, the input and output streams
must be processed synchronously; that is, 
all input processing must be finished
before any output processing can be done.  This means that <Literal>[in,
out]</Literal> pipes, while they can reduce latency within both the server and
the client, cannot reduce latency between server and client; the
client must still wait for all server processing to finish before it
can begin to process the returned data stream.
</Para>
<Para>For an <Literal>in,out</Literal> pipe, 
both the <Literal>pull</Literal> routine (for the <Literal>in</Literal>
direction) and a <Literal>push</Literal> routine (for the <Literal>out</Literal> direction) must
be initialized, as well as the <Literal>alloc</Literal> routine and the state.
During the last <Literal>pull</Literal> call (when it will return a zero count to 
indicate that the pipe is drained), the application's <Literal>pull</Literal> routine 
must reinitialize the pipe state so that the pipe can be used by the 
<Literal>push</Literal> routine correctly.
</Para>
</Sect2>
</Sect1>
<Sect1 Id="DCEADG.RPCTOP.div.28">
<Title>Nested Calls and Callbacks</Title>
<Para>A called remote procedure can call another remote procedure.  The call to the
second remote procedure is nested within the first call; 
that is, the second call is a
<!-- .gL "nested remote procedure call"-->
<IndexTerm Id="DCEADG.RPCTOP.indx.29">
<Primary>nested remote procedure call</Primary>
</IndexTerm>nested remote procedure call.
A nested call involves the following general 
phases, as illustrated in Figure 17-1:
</Para>
<OrderedList>
<ListItem>
<Para>A client makes an initial remote procedure call to the first
remote procedure.
</Para>
</ListItem>
<ListItem>
<Para>The first remote procedure makes a nested call
to the second remote procedure.
</Para>
</ListItem>
<ListItem>
<Para>The second remote procedure executes the nested call and returns it to the
first remote procedure.
</Para>
</ListItem>
<ListItem>
<Para>The first remote procedure then resumes executing the initial call. 
</Para>
</ListItem>
</OrderedList>
<!-- .AL (numbered) list-->
<Figure>
<Title>Phases of a Nested RPC Call</Title>
<Graphic Entityref="DCEADG.RPCTOP.ent.1" Scalefit="1" Reprodep="350" Reprowid="350"></Graphic>
</Figure>
<!-- DEC-file name .P! pictures/rpc-nested-call.ps 2.0i-->
<?sml-space .5>
<Para><IndexTerm Id="DCEADG.RPCTOP.indx.30">
<Primary>nested remote procedure call</Primary>
</IndexTerm>A specialized form of a nested remote procedure call involves a called remote
procedure that is 
making a remote procedure call (callback) to the address space of the calling
client application thread.  Calling the client's address space requires that
a server application thread be listening in that address space. 
Also, the second remote procedure needs a server
binding handle for the address space of the calling client.  
</Para>
<Para><?sml-need 10>The remote procedure can ask the local RPC runtime to convert the client
binding handle, provided by the server runtime, into a server binding handle.
This is done by calling the <Function>rpc_binding_server_from_client()</Function> routine.
This routine returns a partially bound binding handle (the server
binding information lacks an endpoint).  For a nested remote
procedure call to find the address space of the calling client, the
application must ensure that the partially bound binding handle 
is filled in with the endpoint of that address space.  The 
the <Filename MoreInfo="RefEntry">rpc_binding_server_from_client(3rpc)</Filename>
reference page discusses alternatives for ensuring that the endpoint is
obtainable for a nested remote procedure call. 
</Para>
<Para>Using the server binding handle, a remote procedure can attempt a
nested remote procedure call.  The nested call involves the general 
phases illustrated by Figure 17-2.
</Para>
<?sml-need 4.3i>
<Figure>
<Title>Phases of a Nested RPC Call to Client Address Space</Title>
<Graphic Entityref="DCEADG.RPCTOP.ent.2" Scalefit="1" Reprodep="250" Reprowid="250"></Graphic>
</Figure>
<!-- DEC-file name .P! pictures/rpc-nested-call-to-client-appl.ps 4.5i-->
<?sml-space .5>
<Para>The application threads in the preceding figure are performing the
following activities:
</Para>
<OrderedList>
<ListItem>
<Para>A client application thread from a multithreaded RPC application makes an
initial remote procedure call to the first
remote procedure.
</Para>
</ListItem>
<ListItem>
<?sml-need 4>
<Para>After converting the client binding handle into a server binding handle and
obtaining the endpoint for the address space of the calling client application
thread, the first remote procedure makes a nested call to the second remote
procedure at that address space. 
</Para>
</ListItem>
<ListItem>
<?sml-need 2>
<Para>The second remote procedure executes the nested call and returns it to the
first remote procedure.
</Para>
</ListItem>
<ListItem>
<Para>The first remote procedure then resumes executing the initial call
(the client). 
</Para>
</ListItem>
</OrderedList>
</Sect1>
<Sect1 Id="DCEADG.RPCTOP.div.29">
<Title>Routing Remote Procedure Calls</Title>
<Para>The following section
discusses routing incoming remote procedure calls between their arrival
at a server's system and the server's invocation of the requested
remote procedure.  The following routing steps are discussed:
</Para>
<OrderedList>
<ListItem>
<!-- step 1-->
<Para>If a client has a partially bound server binding handle, before sending a call
request to a server, the client runtime must get the endpoint of a compatible
server from the endpoint mapper service of the server's system.  This endpoint
becomes the server address for a call request. 
</Para>
</ListItem>
<ListItem>
<!-- step 2-->
<Para>When the request arrives at the endpoint, the server's system places it in a
request buffer belonging to the corresponding server. 
</Para>
</ListItem>
<ListItem>
<!-- step 3-->
<Para>As one of its scheduled tasks, the server gets the incoming calls from the
request buffer.  The server either accepts or rejects an incoming call,
depending on available resources.  If no call thread is available, an accepted
call is queued to wait its turn for an available call thread.
</Para>
</ListItem>
<ListItem>
<!-- step 4-->
<Para>The server then allocates an available call thread to the call.
</Para>
</ListItem>
<ListItem>
<!-- step 5-->
<Para>The server identifies the appropriate manager for the called remote procedure
and invokes the procedure in that manager to execute the call.
</Para>
</ListItem>
<ListItem>
<!-- step 6-->
<Para>When the call thread finishes executing a call, the server
returns the call's output arguments and control to the client.
</Para>
</ListItem>
</OrderedList>
<!-- .AL (numbered) list-->
<Para>Figure 17-3 illustrates these steps.
</Para>
<?sml-need 6.6i >
<Figure>
<Title>Steps in Routing Remote Procedure Calls</Title>
<Graphic Entityref="DCEADG.RPCTOP.ent.3" Scalefit="1" Reprodep="375" Reprowid="375"></Graphic>
</Figure>
<!-- DEC-file name .P! pictures/rpc-server-call-routing-steps.ps 7.0i-->
<?sml-space .5>
<Para><?sml-need 8>The concepts in the following 
subsections are for the advanced RPC developer. 
The first subsection discusses how clients obtain endpoints 
when using partially bound binding handles.  
Then we discuss how a system buffers call
requests and how a server queues incoming calls; 
this information is relevant mainly to advanced RPC developers.
The final subsection discusses how a server selects the manager to
execute a call; it is relevant for developing an application that
implements an interface for different types of RPC objects.
</Para>
<Sect2 Id="DCEADG.RPCTOP.div.30">
<Title>Obtaining an Endpoint</Title>
<Para>The endpoint mapper service of <Command>dced</Command> maintains the local endpoint map.
<IndexTerm Id="DCEADG.RPCTOP.indx.31">
<Primary>endpoint</Primary>
<Secondary>map</Secondary>
</IndexTerm>The endpoint map is composed of elements which contain fully bound
server binding information for a potential binding and an associated interface
identifier and object UUID (which may be nil).  Optionally, a map element can
also contain an annotation such as the interface name. 
</Para>
<Para>Servers use the local endpoint mapper service to register their 
binding information.  Each interface for which a server must register 
binding information requires a separate call to an 
<Function>rpc_ep_register...()</Function> 
routine, which calls the endpoint map service.  The endpoint map
service uses a new map element for every combination of binding information
specified by the server.  Figure 17-4 shows the
correspondence between server binding information specified by a
server and a graphic representation of the resulting endpoint map elements. 
</Para>
<?sml-need 6.6i>
<Figure>
<Title>Mapping Information and Corresponding Endpoint Map Elements</Title>
<Graphic Entityref="DCEADG.RPCTOP.ent.4" Scalefit="1" Reprodep="350" Reprowid="350"></Graphic>
</Figure>
<!-- DEC-file name .P! pictures/rpc-ep-map-elements.ps 7.0i-->
<?sml-space .5>
<Para><?sml-need 4>A remote procedure call made with server binding information that lacks an
endpoint uses an endpoint from the endpoint map service.   This endpoint must
come from binding information of a compatible server.  The map element of a
compatible server contains the following: 
</Para>
<ItemizedList>
<ListItem>
<?sml-need 6>
<Para>A compatible interface identifier
</Para>
<Para>The requested interface UUID and compatible version numbers are necessary.  For
the version to be compatible, the major version number requested by the client
and registered by the server must be identical, and the requested minor version
number must be less than or equal to the registered minor version number. 
</Para>
</ListItem>
<ListItem>
<Para>The requested object UUID, if registered for the interface
</Para>
</ListItem>
<ListItem>
<Para>A server binding handle that refers to compatible binding information
that contains the following:
</Para>
<ItemizedList>
<ListItem>
<Para>A protocol sequence from the client's server binding information
</Para>
</ListItem>
<ListItem>
<Para>The same RPC protocol major version number that the client runtime supports
</Para>
</ListItem>
<ListItem>
<Para>At least one transfer syntax that matches one used by
the client's system
</Para>
</ListItem>
</ItemizedList>
<!-- .ML (bulleted) list-->
</ListItem>
</ItemizedList>
<!-- .ML (bulleted) list-->
<Para><!---->
To identify the endpoint of a compatible server,
the endpoint service uses the following rules:
</Para>
<OrderedList>
<ListItem>
<Para>If the client requests a nonnil 
object UUID, the endpoint map service begins by
looking for a map element that contains both the requested interface UUID and
object UUID. 
</Para>
<OrderedList>
<ListItem>
<Para>On finding an element containing both of the UUIDs, 
the endpoint map service selects the endpoint from that
element for the server binding information used by the client. 
</Para>
</ListItem>
<ListItem>
<Para>If no element contains both UUIDs, the endpoint map service 
discards the object UUID and starts over
(see rule 2).
</Para>
</ListItem>
</OrderedList>
<!-- .AL (alpa) list-->
</ListItem>
<ListItem>
<Para>If the client requests the nil object UUID (or if 
the requested nonnil object UUID is not registered),
the endpoint map service
looks for an element containing the requested interface UUID
and the nil object UUID.
</Para>
<OrderedList>
<ListItem>
<Para>On finding that element,
the endpoint map service selects the endpoint from the
element for the client's server binding information.
</Para>
</ListItem>
<ListItem>
<Para>If no such element exists, the lookup fails.
</Para>
</ListItem>
</OrderedList>
<!-- .AL (alpa) list-->
</ListItem>
</OrderedList>
<!-- .AL (numbered) list-->
<Para>The RPC protocol service inserts the endpoint of the compatible
server into the client's server binding information.
</Para>
<Para>Figure 17-5 illustrates the decisions the endpoint map
service makes when looking up an endpoint for a client.
</Para>
<?sml-need 7.3i>
<Figure>
<Title>Decisions for Looking Up an Endpoint</Title>
<Graphic Entityref="DCEADG.RPCTOP.ent.5" Scalefit="1" Reprodep="350" Reprowid="350"></Graphic>
</Figure>
<!-- DEC-file name .P! pictures/rpc-ep-map-lookup.ps 8.0i-->
<?sml-space .5>
<Para><?sml-need 6>You can design a server to allow the coexistence on a host system of multiple
interchangeable instances of a server.
<!-- .gL "interchangeable server instances"-->
<IndexTerm Id="DCEADG.RPCTOP.indx.32">
<Primary>server</Primary>
<Secondary>interchangeable instances</Secondary>
</IndexTerm>
<IndexTerm Id="DCEADG.RPCTOP.indx.33">
<Primary>instance</Primary>
<Secondary>of an RPC server</Secondary>
</IndexTerm>Interchangeable server instances are identical,
except for their endpoints; that is, they offer the same RPC interfaces and
objects over the same network (host) address and protocol sequence pairs.
For clients, identical server instances are fully
interchangeable. 
</Para>
<Para>Usually, for each such combination of mapping information, the endpoint map
service stores only one endpoint at a time.  When a server registers a new
endpoint for mapping information that is already registered, the endpoint map
service replaces the old map element with the new one.
</Para>
<Para>For interchangeable server instances to register their endpoints in the
local endpoint map, they must instruct the endpoint map service not to replace
any existing elements for the same interface identifier and object UUID.
Each server instance can create new map elements for itself 
by calling the <Function>rpc_ep_register_no_replace()</Function> routine.
</Para>
<Para>When a client uses a partially bound binding handle, load sharing among
interchangeable server instances depends on the RPC protocol the client is
using. 
</Para>
<ItemizedList>
<ListItem>
<Para>Connectionless (datagram) protocol
</Para>
<Para><!---->
The map service selects the first map element with compatible server binding
information.  If necessary, a client can achieve a random selection among all
the map elements with compatible binding information.  However, 
this requires that, before making a remote procedure call, 
the client needs to resolve the binding by 
calling the <Function>rpc_ep_resolve_binding()</Function> routine. 
</Para>
</ListItem>
<ListItem>
<Para>Connection-oriented protocol
</Para>
<Para>The client RPC runtime uses the 
<Function>rpc_ep_resolve_binding()</Function> routine, and the
endpoint map service selects randomly among all the map elements of compatible
servers. 
</Para>
</ListItem>
</ItemizedList>
<Para>For an alternative selection criteria, a client can call the
<Literal>rpc_mgmt_ep_elt_inq_</Literal>{<Literal>begin</Literal>,<Literal>next</Literal>,<Literal>done</Literal>}<Literal>()</Literal>
routines and use an application-specific routine to select from
among the binding handles returned to the client. 
</Para>
<Para><?sml-need 6>When a server stops running, its map elements become outdated.  Although the
endpoint map service routinely removes any map element containing an outdated
endpoint, a lag time exists when stale entries remain.  If a remote
procedure call uses an endpoint from an outdated map element, the call fails to
find a server.  To avoid clients getting stale data from the endpoint map,
before a server stops, it should remove its own map elements. 
</Para>
<Para>A server also has the option of removing any of its own elements from the local
endpoint map and continuing to run.  In this case, an unregistered endpoint
remains accessible to clients that know it. 
</Para>
</Sect2>
<Sect2 Id="DCEADG.RPCTOP.div.31">
<Title>Buffering Call Requests</Title>
<Para>Call requests for RPC servers come into the RPC runtime over the network.  For
each endpoint that a server registers (for a given protocol sequence), the
runtime sets up a separate request buffer.  A 
<!-- .gL "request buffer"-->
request buffer
<IndexTerm Id="DCEADG.RPCTOP.indx.34">
<Primary>request buffer</Primary>
</IndexTerm>is a first-in, first-out queue where an RPC system temporarily stores call
requests that arrive at an endpoint of an RPC server.  The request buffers allow
the runtime to continue to accept requests during heavy activity.  However, a
request buffer may fill up temporarily, causing the system to reject incoming
requests until the server fetches the next request from the buffer.  In this
case, the calling client can try again, with the same server or a different
server.  The client does not know why the call is rejected, nor does the client
know when a server is available again. 
</Para>
<Para>Each server process regularly dequeues requests, one by one, from all of its
request buffers.  At this point, the server process recognizes them as incoming
calls.  The interval for removing requests from the buffers depends on the
activities of the system and of the server process. 
</Para>
<Para>How the runtime handles a given request depends partly on the
communications protocol over which it arrives, as follows:
</Para>
<ItemizedList>
<ListItem>
<Para>A call over a connectionless transport
is routed by the server's system to the call
request buffer for the endpoint specified in the call.
<?sml-break><?sml-need 11></Para>
</ListItem>
<ListItem>
<Para>A call over a connection-oriented transport may be routed by the server's system
to a request buffer or the call may go directly to the server process. 
</Para>
<Para>Whether a remote procedure call goes to the request buffer depends on whether
the client sends the call over an established connection.  If a client makes a
remote procedure call without an established connection, the server's system
treats the call request as a connection request and places the call request
into a request buffer.  If an established connection is available, the client
uses it for the remote procedure call; the system handles the call as an
incoming call and sends it directly to the server process that owns the
connection. 
</Para>
</ListItem>
</ItemizedList>
<!-- .ML (bulleted) list-->
<Para>Whether a server gets an incoming call from a request buffer or over an
existing connection, the server process manages the call identically.  A server
process applies a clear set of call-routing criteria to decide whether to
dispatch a call immediately, queue it, or reject it (if the server is extremely
busy).  These call-routing criteria are discussed in Section 17.6.3.
</Para>
<Para>When telling the RPC runtime to use a protocol sequence, a server specifies the
number of calls it can buffer for the specified communications
protocol (at a given endpoint).  Usually, it is best for a server to specify a
default buffer size, represented by a literal whose underlying value depends on
the communications protocol.  The default equals the capacity of a single
socket used for the protocol by the server's system. 
</Para>
<Para>The default usually is adequate to allow the RPC runtime to accept all the
incoming call requests.  For a well-known endpoint, the size of a
request buffer cannot exceed the capacity of a single socket descriptor 
(the default size); specifying a higher number causes a runtime error.  For
well-known endpoints, specify the default for the maximum
number of call requests.
<!-- but for other endpoints, you can specify any size you choose. -->
</Para>
<Para>For example, consider the request buffer at full capacity as represented
in Figure 17-6.  This buffer has the capacity to store five
requests.  In this example, the buffer is full, and the runtime 
rejects incoming requests, as is happening to the sixth request.
</Para>
<?sml-need 3i>
<Figure>
<Title>A Request Buffer at Full Capacity</Title>
<Graphic Entityref="DCEADG.RPCTOP.ent.6"></Graphic>
</Figure>
<!-- DEC-file name .P! pictures/rpc-server-call-req-buffer.ps 2.0i-->
</Sect2>
<Sect2 Id="DCEADG.RPCTOP.div.32">
<Title>Queuing Incoming Calls</Title>
<Para>Each server process uses a first-in, first-out 
<!-- .gL "call queue"-->
<IndexTerm Id="DCEADG.RPCTOP.indx.35">
<Primary>call queue</Primary>
</IndexTerm>call queue.  When the server is already executing its maximum number of
concurrent calls, it uses the queue to hold incoming calls. 
The capacity of queues for incoming calls is implementation dependent;
most implementations offer a small queue capacity, which
may be a multiple of the maximum number of concurrently executing calls. 
</Para>
<Para>A call is rejected if the call queue
is full.  The appearance of the rejected call depends on the
RPC protocol the call is using, as follows:
</Para>
<ItemizedList>
<ListItem>
<Para>Connectionless (datagram) protocol
</Para>
<Para>The server does not notify the client about this failure.
The call fails as if the server does not exist,
<IndexTerm Id="DCEADG.RPCTOP.indx.36">
<Primary>status codes</Primary>
</IndexTerm>returning an <Literal>rpc_s_comm_failure</Literal> communications status code 
(<Literal>rpc_x_comm_failure</Literal> exception).
</Para>
</ListItem>
<ListItem>
<Para>Connection-oriented protocol
</Para>
<Para>The server rejects the call with an <Literal>rpc_s_server_too_busy</Literal>
communications status code (<Literal>rpc_x_server_too_busy</Literal> exception).
</Para>
</ListItem>
</ItemizedList>
<!-- .ML (bulleted) list-->
<Para>The server process routes each incoming call as it arrives.  Call routing is
illustrated by the server in Figure 17-7.  This server has the
capacity to execute only one call concurrently.  Its call queue has a capacity
of eight calls.  This figure consists of four stages (A through D) of call
routing by a server process.  On receiving any incoming call, the server begins
by looking at the call queue. 
</Para>
<?sml-need 6i>
<Figure>
<Title>Stages of Call Routing by a Server Process</Title>
<Graphic Entityref="DCEADG.RPCTOP.ent.7" Scalefit="1" Reprodep="350" Reprowid="350"></Graphic>
</Figure>
<!-- DEC-file name .P! pictures/rpc-server-call-queuing.ps 7.0i-->
<?sml-space .5>
<Para>The activities of the four stages in the preceding figure are
described as follows:
</Para>
<OrderedList>
<ListItem>
<?sml-need 5>
<Para>In stage <Literal>A</Literal>, call <Literal>1</Literal> arrives at a server that lacks any
other calls.  
When the call arrives, the queue is empty and a call thread is available.  The
server accepts the call and immediately passes it to a call thread.  The
requested remote procedure executes the call in that thread,
which becomes temporarily unavailable. 
</Para>
</ListItem>
<ListItem>
<?sml-need 2>
<Para>In stage <Literal>B</Literal>, call <Literal>5</Literal> arrives.  The call queue is
partially full, so the server accepts the call and adds it to the
end of the queue.
</Para>
</ListItem>
<ListItem>
<Para>In stage <Literal>C</Literal>, call <Literal>11</Literal> arrives.  The queue is full, so the
server rejects this call, as
it rejected the previous call, <Literal>10</Literal>.  (The caller can try again with
the same or a different server.)
</Para>
</ListItem>
<ListItem>
<Para>In stage <Literal>D</Literal>, the called procedure has completed call <Literal>1</Literal>, making
the call thread available.  The server has removed call
<Literal>2</Literal> from the queue and is passing it to the call thread for
execution.  Thus, the queue is partially empty as call <Literal>12</Literal>
arrives, so the server accepts the call and adds it to the queue.
</Para>
</ListItem>
</OrderedList>
</Sect2>
<Sect2 Id="DCEADG.RPCTOP.div.33">
<Title>Selecting a Manager</Title>
<Para><FootnoteRef Linkend="DCEADG.RPCTOP.footn.1"><!--WARNING: containment may be wrong-->
</FootnoteRef>Unless an RPC interface is implemented for more than one specific type
of object, selecting a manager for an incoming call is a
simple process.  When registering an interface with a single manager,
the server specifies the nil type UUID for the manager
type.
<!-- !!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!! -->
<!-- Following is the original converted form of the footnote which follows; -->
<!--  the Label attribute was removed...                                     -->
<!-- <Footnote Id="DCEADG.RPCTOP.footn.1" Label="1">  -->
<!-- !!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!! -->
<Footnote Id="DCEADG.RPCTOP.footn.1">
<Para>The API uses NULL to specify a synonym to the address of
the nil UUID, which contains only zeros.
</Para>
</Footnote>
In the absence of any other manager, all calls, regardless of whether
they request an object, go to the nil type manager.
</Para>
<Para>The situation is more complex when a server registers multiple
managers for an interface.  The server runtime must select from among the
managers for each incoming call to the interface.  
The DCE RPC dispatching mechanism requires a
server to set a nonnil type UUID for a set of objects and 
for any interface that will access the objects 
in order to register a manager with the same type UUID.
<!--***********comment**********-->
<!-- A server can do its own dispatching, or it can use the dispatching -->
<!-- mechanism provided by the DCE RPC runtime. -->
<!--***********endcomment**********-->
</Para>
<Para><?sml-need 16>To dispatch an incoming call to a manager, a server does the following:
</Para>
<OrderedList>
<ListItem>
<Para>If the call contains the nil object UUID, the server looks for a manager
registered with the nil type UUID (the nil type manager).
</Para>
<OrderedList>
<ListItem>
<Para>If the nil type manager exists for the requested interface,
the server dispatches the call to that manager.
</Para>
</ListItem>
<ListItem>
<Para>Otherwise, the server rejects the call.
</Para>
</ListItem>
</OrderedList>
</ListItem>
<ListItem>
<Para>If the call contains a nonnil object UUID, the server looks to see
whether it has set a type for the object (by assigning a nonnil
type UUID).
</Para>
<Para>If the object lacks a type, the server looks for the nil type manager.
</Para>
<OrderedList>
<ListItem>
<Para>If the nil type manager exists for the requested interface,
the server dispatches the call to that manager.
</Para>
</ListItem>
<ListItem>
<Para>Otherwise, the server rejects the call.
</Para>
</ListItem>
</OrderedList>
</ListItem>
<ListItem>
<Para>If the object has a type, the call requires a remote procedure 
of a manager whose 
type matches the object's type.  In its absence, the RPC runtime rejects
the call.
</Para>
</ListItem>
</OrderedList>
<Para>Figure 17-8 illustrates the decisions a server makes to
select a manager to which to dispatch an incoming call.
</Para>
<?sml-need 7i>
<Figure>
<Title>Decisions for Selecting a Manager</Title>
<Graphic Entityref="DCEADG.RPCTOP.ent.8" Scalefit="1" Reprodep="350" Reprowid="350"></Graphic>
</Figure>
<!-- DEC-file name .P! pictures/rpc-manager-selection.ps 7.5i-->
</Sect2>
</Sect1>
<Sect1 Id="DCEADG.RPCTOP.div.34">
<Title>Creating Portable Data via the IDL Encoding Services</Title>
<Para>The IDL encoding services provide client and server RPC applications
with a method for encoding data types in input parameters into
byte stream format and decoding data types in output parameters
from a byte stream without invoking the RPC runtime.  Encoding
and decoding functions are just like marshalling and unmarshalling,
except that the data is stored locally and is not transmitted
over the network; the IDL encoding services separate the data
marshalling and unmarshalling functions from interaction with
the RPC runtime.
</Para>
<Para>Client and server applications can use the IDL encoding services
to flatten (or serialize) a data structure, even binary data,
and then store it; for example, by writing it to a file on disk.
An RPC application on any DCE machine, regardless of its data type
size and byte endianess, is then able to use the IDL encoding
services to decode previously encoded data.  Without the IDL
encoding services, you cannot create a file of data on one
machine and then successfully read that data on another machine
that has different size data types and byte endianess.
</Para>
<Para>The IDL encoding services can generate code that takes
the input parameters to a procedure and places them in a standard form in one or
more buffers that are delivered to user code.  This process is called 
<FirstTerm>encoding</FirstTerm>. Encoded data can be written to a file or forwarded by a
messaging system.
The IDL encoding services can also generate code that delivers,
as the output parameters of a procedure, data that has been
converted into the standard form by encoding.  Delivery of data
in this way is called <FirstTerm>decoding</FirstTerm>. Data to be decoded can
be read from a file or received by a messaging system.
</Para>
<Para>Applications use the ACF attributes <Literal>encode</Literal> and <Literal>decode</Literal> 
as operation attributes or as interface attributes
to direct the IDL compiler to generate IDL encoding
services stubs for operations rather than generating
RPC stubs.  See Chapter 19
for usage information on <Literal>encode</Literal> and <Literal>decode</Literal>.
</Para>
<Sect2 Id="DCEADG.RPCTOP.div.35">
<Title>Memory Management</Title>
<IndexTerm Id="DCEADG.RPCTOP.indx.37">
<Primary>memory management</Primary>
</IndexTerm>
<Para>IDL encoding services stubs handle memory management
in the same way as RPC client stubs: when you call an
operation to which the <Literal>encode</Literal> and/or <Literal>decode</Literal> attributes
have been applied, the encoding services stub uses whatever
client stub memory management scheme is currently in effect.
See Section 17.1 for further details on client stub
memory management defaults and setting up memory management schemes.
</Para>
<Para>You can control which memory management scheme the stubs will
use by calling the <Function>rpc_ss_swap_client_alloc_free()</Function>
and <Function>rpc_ss_set_client_alloc_free()</Function> routines.
The first routine sets the memory management routines used by
both the encoding and decoding stubs, and the second routine
restores the previous memory management scheme after encoding
and decoding are complete. 
</Para>
<Para>Note that the memory management scheme established, whether
explicitly or by default, is on a per-thread basis.
</Para>
</Sect2>
<Sect2 Id="DCEADG.RPCTOP.div.36">
<Title>Buffering Styles</Title>
<IndexTerm Id="DCEADG.RPCTOP.indx.38">
<Primary>buffering styles</Primary>
</IndexTerm>
<Para>There are a number of different ways in which buffers containing encoded data
can be passed between the application code and the IDL encoding services.
These are referred to as different <FirstTerm>buffering styles</FirstTerm>.
The different buffering styles are:
</Para>
<ItemizedList>
<ListItem>
<IndexTerm Id="DCEADG.RPCTOP.indx.39">
<Primary>incremental encoding</Primary>
</IndexTerm>
<Para>Incremental encoding
</Para>
<Para>The incremental encoding style
requires that you provide an <Literal>allocate</Literal> routine which
creates an empty buffer into which IDL encoding services
can place encoded data, and a <Literal>write</Literal> routine
which IDL encoding services will call when the buffer is full or all the
parameters of the operation have been encoded.
The IDL encoding services call the <Literal>allocate</Literal> and <Literal>write</Literal> routines
repeatedly until the encoding of all of the parameters has
been delivered to the user code.  See the 
<Filename MoreInfo="RefEntry">idl_es_encode_incremental(3rpc)</Filename> 
reference page for a description of the required parameters for the
<Literal>allocate</Literal> and <Literal>write</Literal> routines.
</Para>
</ListItem>
<ListItem>
<?sml-need 9>
<IndexTerm Id="DCEADG.RPCTOP.indx.40">
<Primary>fixed buffer encoding</Primary>
</IndexTerm>
<Para>Fixed buffer encoding 
</Para>
<Para>The fixed buffer encoding style requires that the application
supply a single buffer into which all the encoded data is to be placed.
The buffer must have an address that is 8-byte aligned and must be
a multiple of 8 bytes in size.  It must also be large enough
to hold an encoding of all the data, together with an
encoding header for each operation whose parameters are being encoded;
56 bytes should be allowed for each encoding header.
</Para>
</ListItem>
<ListItem>
<IndexTerm Id="DCEADG.RPCTOP.indx.41">
<Primary>dynamic buffer encoding</Primary>
</IndexTerm>
<Para>Dynamic buffer encoding
</Para>
<Para>With the dynamic buffer encoding style,
the IDL encoding services build a single buffer containing all the
encoded data and deliver the buffer to application code.
The buffer is allocated by whatever client memory management
mechanism has been put in place by the application code.
The default for this is <Literal>malloc</Literal>().  When the application
code no longer needs the buffer, it should release the
memory resource.
</Para>
<Para>The dynamic buffer encoding style has performance implications.
The IDL encoding services will usually allocate a number of
intermediate buffers, then allocate the buffer to 
be delivered to the application code, copy data into it
from the intermediate buffers, and release the intermediate buffers.
</Para>
</ListItem>
<ListItem>
<IndexTerm Id="DCEADG.RPCTOP.indx.42">
<Primary>incremental decoding</Primary>
</IndexTerm>
<Para>Incremental decoding
</Para>
<Para>The incremental decoding buffering
style requires that you provide a <Literal>read</Literal> routine which, when
called, delivers to the IDL encoding services a buffer that contains
the next part of the data to be decoded.  The IDL encoding services will call
the <Literal>read</Literal> routine repeatedly until all of the required data
has been decoded.  See the <Filename MoreInfo="RefEntry">idl_es_encode_incremental(3rpc)</Filename> 
reference page for a description of the required parameters for the
<Literal>read</Literal> routine.
</Para>
</ListItem>
<ListItem>
<IndexTerm Id="DCEADG.RPCTOP.indx.43">
<Primary>buffer decoding</Primary>
</IndexTerm>
<Para>Buffer decoding
</Para>
<Para>The buffer decoding style requires that
you supply a single buffer containing all the encoded data.
Where application performance is important, note that, if the
supplied buffer is not 8-byte aligned, the IDL encoding services allocate
a temporary aligned buffer of comparable size and copy data from the
user-supplied buffer into it before performing the requested decoding.
</Para>
</ListItem>
</ItemizedList>
</Sect2>
<Sect2 Id="DCEADG.RPCTOP.div.37">
<Title>IDL Encoding Services Handles</Title>
<IndexTerm Id="DCEADG.RPCTOP.indx.44">
<Primary>IDL</Primary>
<Secondary>encoding services handles</Secondary>
</IndexTerm>
<Para>When an application's encoding or decoding operation
is invoked, the handle passed to it must be an IDL
encoding services handle (the <StructName Role="typedef">idl_es_handle_t</StructName> type).
The IDL encoding services handle indicates whether encoding or decoding
is required, and what style of buffering is to be used.
The IDL encoding services provides a set of routines to enable
the application code to obtain encoding and decoding handles to
the IDL encoding services.  The IDL encoding services
handle-returning routine you call depends on the buffering
style you have chosen:
</Para>
<ItemizedList>
<ListItem>
<Para>If you have selected the incremental encoding style, you call the
<Function>idl_es_encode_incremental()</Function> routine, which returns an
incremental encoding handle.
</Para>
</ListItem>
<ListItem>
<Para>If you have selected the fixed buffer encoding style, you call the
<Function>idl_es_encode_fixed_buffer()</Function> routine, which returns a fixed
buffer encoding handle.
</Para>
</ListItem>
<ListItem>
<Para>If you have selected dynamic buffer encoding, you call the
<Function>idl_es_encode_dyn_buffer()</Function> routine, which returns
a dynamic buffer encoding handle.
</Para>
</ListItem>
<ListItem>
<Para>If you have selected incremental decoding as your buffering style,
you call the <Function>idl_es_decode_incremental()</Function> routine, which
returns an incremental decoding handle.
</Para>
</ListItem>
<ListItem>
<Para>If you have selected the buffer decoding style, you call the
<Function>idl_es_decode_buffer()</Function> routine, which returns a buffer decoding
handle.
</Para>
</ListItem>
</ItemizedList>
<Para>When the encoding or decoding for which an IDL encoding services
handle was required is completed, the application code should release the
handle resources by calling the <Function>idl_es_handle_free()</Function> routine.
See the &DCEDr; for a complete description of the IDL encoding service
routines.
</Para>
<Para>It is an error to call an operation for which <Literal>encode</Literal> or
<Literal>decode</Literal> has been specified by using an RPC binding handle, and
it is an error to call an RPC operation by 
using an IDL encoding services handle.
<IndexTerm Id="DCEADG.RPCTOP.indx.45">
<Primary>restrictions on handle use</Primary>
</IndexTerm></Para>
<Para><?sml-need 10>The following restrictions apply to the use of IDL encoding services handles:
</Para>
<ItemizedList>
<ListItem>
<Para>An operation can be called with an encoding
handle only if the operation has been
given the <Literal>encode</Literal> ACF attribute.
</Para>
</ListItem>
<ListItem>
<Para>An operation can be called with a decoding
handle only if the operation has been
given the <Literal>decode</Literal> ACF attribute.
</Para>
</ListItem>
<ListItem>
<Para>The <Literal>auto_handle</Literal> ACF attribute cannot be
used with the IDL encoding services.
</Para>
</ListItem>
<ListItem>
<Para>The <Literal>implicit_handle</Literal> ACF attribute cannot be
used with the IDL encoding services.
</Para>
</ListItem>
<ListItem>
<Para>Customized handles cannot be used with the IDL encoding services.
</Para>
</ListItem>
<ListItem>
<Para>An <Literal>in</Literal> context handle does not contain the handle information
needed by the IDL encoding services.
</Para>
</ListItem>
</ItemizedList>
</Sect2>
<Sect2 Id="DCEADG.RPCTOP.div.38">
<Title>Programming Example</Title>
<Para>The following example uses the IDL encoding service
features described in the preceding sections.  The
example verifies that the results of a number of
decoding operations are the same as the parameters used to create the
corresponding encodings.
</Para>
<Para>The interface definition for this example is as follows:
</Para>
<InformalExample>
<Para><ProgramListing>
<?Pub _font TypeSize="8pt">
<?sml-need 24>[uuid(20aac780-5398-11c9-b996-08002b13d56d), version(0)]
interface es_array
{
    const long N = 5000;

    typedef struct
    {
        byte b;
        long l;
    } s_t;

    typedef struct
    {
        byte b;
        long a[7];
    } t_t;

    void in_array_op1([in] handle_t h, [in] long arr[N]);
    void out_array_op1([in] handle_t h, [out] long arr[N]);

    void array_op2([in] handle_t h, [in,out] s_t big[N]);

    void array_op3([in] handle_t h, [in,out] t_t big[N]);
}
<?Pub /_font><?Pub Caret>
</ProgramListing></Para>
</InformalExample>
<Para>The attribute configuration file for the example is as follows:
</Para>
<InformalExample>
<Para><ProgramListing>interface es_array
{
    [encode] in_array_op1();
    [decode] out_array_op1();
    [encode, decode] array_op2();
    [encode, decode] array_op3();
}
</ProgramListing></Para>
</InformalExample>
<Para><?sml-need 20>The test code for the example is as follows:
</Para>
<InformalExample>
<Para><ProgramListing>
<?Pub _font TypeSize="8pt">
<?sml-point-size 10>
<!--no-op:  12-->
#include &lt;dce/pthread_exc.h>
#include "rpcexc.h"
#include &lt;stdio.h>
#include &lt;stdlib.h>
#include &lt;file.h>
#include &lt;sys/file.h>
#include "es_array.h"

/*
 *  User state for incremental encode/decode
 */
typedef struct es_state_t {
    idl_byte *malloced_addr;
    int file_handle;
} es_state_t;

static es_state_t es_state;

#define OUT_BUFF_SIZE 2048
static idl_byte out_buff[OUT_BUFF_SIZE];
static idl_byte *out_data_addr;
static idl_ulong_int out_data_size;

/*
 *  User allocate routine for incremental encode
 */
void es_allocate(state, buf, size)
idl_void_p_t state;
idl_byte **buf;
idl_ulong_int *size;
{
    idl_byte *malloced_addr;
    es_state_t *p_es_state = (es_state_t *)state;

    malloced_addr = (idl_byte *)malloc(*size);
    p_es_state->malloced_addr = malloced_addr;
    *buf = (idl_byte *)(((malloced_addr - \
            (idl_byte *)0) + 7) &amp; (~&thinsp;7));
    *size = (*size - (*buf - malloced_addr)) &amp; (~&thinsp;7);
}

<?sml-need 14>/*
 *  User write routine for incremental encode
 */
void es_write(state, buf, size)
idl_void_p_t state;
idl_byte *buf;
idl_ulong_int size;
{
    es_state_t *p_es_state = (es_state_t *)state;

    write(p_es_state->file_handle, buf, size);
    free(p_es_state->malloced_addr);
}

/*
 *  User read routine for incremental decode
 */
void es_read(state, buf, size)
idl_void_p_t state;
idl_byte **buf;
idl_ulong_int *size;
{
    es_state_t *p_es_state = (es_state_t *)state;

    read(p_es_state->file_handle, out_data_addr, out_data_size);
    *buf = out_data_addr;
    *size = out_data_size;
}

static ndr_long_int arr[N];
static ndr_long_int out_arr[N];
static s_t sarr[N];
static s_t ref_sarr[N];
static s_t out_sarr[N];
static t_t tarr[N];
static t_t ref_tarr[N];
static t_t out_tarr[N];
static ndr_long_int (*oarr)[M];

#define FIXED_BUFF_STORE (8*N+64)
static idl_byte fixed_buff_area[FIXED_BUFF_STORE];

<?sml-need 11>/*
 *  Test Program
 */
main()
{
    idl_es_handle_t es_h;
    idl_byte *fixed_buff_start;
    idl_ulong_int fixed_buff_size, encoding_size;
    idl_byte *dyn_buff_start;
    error_status_t status;
    int i,j;

    for (i = 0; i &lt; N; i++)
    {
        arr[i] = random()%10000;
        sarr[i].b = i &amp; 0x7f;
        sarr[i].l = random()%10000;
        ref_sarr[i] = sarr[i];
        tarr[i].b = i &amp; 0x7f;
        for (j = 0; j &lt; 7; j++) tarr[i].a[j] = random()%10000;
        ref_tarr[i] = tarr[i];
    }

    /* 
     *Incremental encode/decode
     */
    /* Encode data using one operation */
    es_state.file_handle = open("es_array_1.dat", \
                  O_CREAT|O_TRUNC|O_WRONLY,  0777);
    if (es_state.file_handle &lt; 0)
    {
        printf("Can't open es_array_1.dat&bsol;n");
        exit(0);
    }
    idl_es_encode_incremental((idl_void_p_t)&amp;es_state, es_allocate, \
               es_write, &amp;es_h, &amp;status);
    if (status != error_status_ok)
    {
        printf("Error %08x from idl_es_encode_incremental&bsol;n", status);
        exit(0);
    }
    in_array_op1(es_h, arr);
    close(es_state.file_handle);
    idl_es_handle_free(&amp;es_h, &amp;status);
    if (status != error_status_ok)
    {
        printf("Error %08x from idl_es_handle_free&bsol;n", status);
        exit(0);
    }
    /* Decode the data using another operation with                   */
    /* the same signature                                             */
    out_data_addr = (idl_byte *)(((out_buff - (idl_byte *)0) + 7) &amp; (&thinsp;~7));
    out_data_size = (OUT_BUFF_SIZE - (out_data_addr - out_buff)) &amp; (&thinsp;~7);
    es_state.file_handle = open("es_array_1.dat", O_RDONLY, 0);
    if (es_state.file_handle &lt; 0)
    {
        printf("Can't open es_array_1.dat for reading&bsol;n");
        exit(0);
    }
    idl_es_decode_incremental((idl_void_p_t)&amp;es_state, es_read,
                                &amp;es_h, &amp;status);
    if (status != error_status_ok)
    {
        printf("Error %08x from idl_es_decode_incremental&bsol;n", status);
        exit(0);
    }
    out_array_op1(es_h, out_arr);
    close(es_state.file_handle);
    idl_es_handle_free(&amp;es_h, &amp;status);
    if (status != error_status_ok)
    {
        printf("Error %08x from idl_es_handle_free&bsol;n", status);
        exit(0);
    }

    /* Check the input and output are the same */
    for (i = 0; i &lt; N; i++)
    {
        if (out_arr[i] != arr[i])
        {
            printf("out_arr[%d] - found %d - expecting %d&bsol;n",
                    i, out_arr[i], arr[i]);
        }
    }

    /*
     * Fixed buffer encode/decode
     */
    fixed_buff_start = (idl_byte *)(((fixed_buff_area - \
                                                  (idl_byte *)0) + 7)
                                                             &amp; (~7));
    fixed_buff_size = (FIXED_BUFF_STORE - \
                                (fixed_buff_start - fixed_buff_area))
                                                             &amp; (~7);
    idl_es_encode_fixed_buffer(fixed_buff_start, fixed_buff_size,
                                &amp;encoding_size, &amp;es_h, &amp;status);
    if (status != error_status_ok)
    {
        printf("Error %08x from idl_es_encode_fixed_buffer&bsol;n", status);
        exit(0);
    }
<?sml-need 7>    array_op2(es_h, sarr);
    idl_es_handle_free(&amp;es_h, &amp;status);
    if (status != error_status_ok)
    {
        printf("Error %08x from idl_es_handle_free&bsol;n", status);
        exit(0);
    }
    idl_es_decode_buffer(fixed_buff_start, encoding_size, &amp;es_h, &amp;status);
    if (status != error_status_ok)
    {
        printf("Error %08x from idl_es_decode_buffer&bsol;n", status);
        exit(0);
    }
    array_op2(es_h, out_sarr);
    idl_es_handle_free(&amp;es_h, &amp;status);
    if (status != error_status_ok)
    {
        printf("Error %08x from idl_es_handle_free&bsol;n", status);
        exit(0);
    }
    for (i = 0; i &lt; N; i++)
    {
        if (out_sarr[i].b != ref_sarr[i].b)
        {
            printf("array_op2 - out_sarr[%d].b = %c&bsol;n", i, out_sarr[i].b);
        }
        if (out_sarr[i].l != ref_sarr[i].l)
        {
            printf("array_op2 - out_sarr[%d].l = %d&bsol;n", i, out_sarr[i].l);
        }
    }

    /*
     * Dynamic buffer encode - fixed buffer decode
     */
    idl_es_encode_dyn_buffer(&amp;dyn_buff_start, &amp;encoding_size, &amp;es_h, \
                                                              &amp;status);
    if (status != error_status_ok)
    {
        printf("Error %08x from idl_es_encode_dyn_buffer&bsol;n", status);
        exit(0);
    }
    array_op3(es_h, tarr);
    idl_es_handle_free(&amp;es_h, &amp;status);
    if (status != error_status_ok)
    {
        printf("Error %08x from idl_es_handle_free&bsol;n", status);
        exit(0);
    }
<?sml-need 6>    idl_es_decode_buffer(dyn_buff_start, encoding_size, &amp;es_h, &amp;status);
    if (status != error_status_ok)
    {
        printf("Error %08x from idl_es_decode_buffer&bsol;n", status);
        exit(0);
    }
    array_op3(es_h, out_tarr);
    rpc_ss_free (dyn_buff_start);
    idl_es_handle_free(&amp;es_h, &amp;status);
    if (status != error_status_ok)
    {
        printf("Error %08x from idl_es_handle_free&bsol;n", status);
        exit(0);
    }
    for (i = 0; i &lt; N; i++)
    {
        if (out_tarr[i].b != ref_tarr[i].b)
        {
            printf("array_op3 - out_tarr[%d].b = %c&bsol;n", i, out_tarr[i].b);
        }
        for (j=0; j&lt;7; j++)
        {
            if (out_tarr[i].a[j] != ref_tarr[i].a[j])
            {
                printf("array_op3 - out_tarr[%d].a[%d] = %d&bsol;n",
                        i, j, out_tarr[i].a[j]);
            }
        }
    }

    printf("Test Complete&bsol;n");
}
<?Pub /_font><?Pub Caret>
<?sml-point-size 12>
<!--no-op:  14-->
</ProgramListing></Para>
</InformalExample>
<?sml-need 20>
</Sect2>
<Sect2 Id="DCEADG.RPCTOP.div.39">
<Title>Performing Multiple Operations on a Single Handle</Title>
<IndexTerm Id="DCEADG.RPCTOP.indx.46">
<Primary>multiple operations on a single IDL encoding services handle</Primary>
</IndexTerm>
<Para>Multiple operations can be performed using one 
encoding handle before the handle is released.  In this case,
all the encoded data is part of the same buffer system.
</Para>
<Para>A single decoding handle is used to obtain the contents of the
encoded data.  Decoding operations must be called in the same order the
encoding operations were called to create the encoded data.
</Para>
<Para>The definition of the user client memory management functions, and any memory
allocated by IDL encoding services using the client memory allocator, must not
be modified between operations for which the same encoding handle is used.
</Para>
</Sect2>
<Sect2 Id="DCEADG.RPCTOP.div.40">
<Title>Determining the Identity of an Encoding</Title>
<IndexTerm Id="DCEADG.RPCTOP.indx.47">
<Primary>determining the identity of an encoding</Primary>
</IndexTerm>
<Para>Applications can use the <Function>idl_es_inq_encoding_id()</Function> routine
to determine the identity of an encoding operation, for example,
before calling their decoding operations.
</Para>
</Sect2>
</Sect1>
</Chapter>
<!--+ 11/27/96 19:53:47
    | tagMorph:  $Id: topics.sgm,v 1.1.2.8 1996/12/14 20:24:44 wardr Exp $
    | tagMorph library:  $Id: topics.sgm,v 1.1.2.8 1996/12/14 20:24:44 wardr Exp $
    | sml-to-docbook:  1.25
    +-->
