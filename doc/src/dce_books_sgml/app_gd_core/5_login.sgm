<!--
# @OSF_COPYRIGHT@
# 
# 
# HISTORY
# $Log: 5_login.sgm,v $
# Revision 1.1.2.8  1996/12/14  20:24:02  wardr
# 	{edit,R1.2.2}
# 	penultimate format fixes
# 	[1996/12/14  20:21:51  wardr]
#
# Revision 1.1.2.7  1996/12/13  22:10:36  wardr
# 	{edit,R1.2.2}
# 	Fixed formatting problems
# 	[1996/12/13  22:08:26  wardr]
# 
# Revision 1.1.2.6  1996/12/12  21:30:16  wardr
# 	{edit,R1.2.2}
# 	Fixed formatting problems
# 	[1996/12/12  21:28:23  wardr]
# 
# Revision 1.1.2.5  1996/12/12  16:49:16  carrig
# 	{enh,R1.2.2}
# 	Minor edits
# 	[1996/12/12  16:47:02  carrig]
# 
# Revision 1.1.2.4  1996/12/06  21:09:54  carrig
# 	{enh,R1.2.2}
# 	Second pass for editor
# 	[1996/12/06  21:07:45  carrig]
# 
# Revision 1.1.2.3  1996/12/05  21:38:45  carrig
# 	{enh,R1.2.2}
# 	First pass to prepare for editing
# 	[1996/12/05  21:36:49  carrig]
# 
# Revision 1.1.2.2  1996/12/02  15:40:51  weir
# 	Removed thinsp entities, corrected other minor errors
# 	[1996/12/02  15:39:06  weir]
# 
# Revision 1.1.2.1  1996/12/01  20:43:19  weir
# 	Initial submission
# 	[1996/12/01  20:41:27  weir]
# 
# 	Initial submission
# 	[1996/11/29  20:35:37  weir]
# 
# $EndLog$
-->
<!-- Fragment document type declaration subset:
ArborText, Inc., 1988-1993, v.4001
<!DOCTYPE Book PUBLIC "-//Davenport//DTD DocBook V2.4//EN" [
]>
-->
<!---->
<!-- COPYRIGHT NOTICE-->
<!-- Copyright (c) 1990, 1991, 1992, 1993 Open Software Foundation, Inc.-->
<!-- ALL RIGHTS RESERVED (DCE).  See the file named COPYRIGHT.DCE in the-->
<!-- src directory for the full copyright text.-->
<!---->
<!--           -->
<!-- OLD HISTORY-->
<!-- Revision 1.1.8.1  1996/03/27  14:03:59  wardr-->
<!-- 	{edit R1.2.1}-->
<!-- 	More Release Edits-->
<!-- 	[1996/03/27  14:03:30  wardr]-->
<!---->
<!-- Revision 1.1.6.11  1995/06/07  14:39:54  rcb-->
<!-- 	PRENTICE HALL reformat; final edits and changes-->
<!-- 	[1995/06/05  19:59:33  rcb]-->
<!-- -->
<!-- 	PRENTICE HALL reformat-->
<!-- 	[1995/05/11  15:35:03  rcb]-->
<!-- -->
<!-- 	incorporated 1.1 edits-->
<!-- 	[1995/05/11  15:19:39  rcb]-->
<!-- -->
<!-- Revision 1.1.6.10  1994/10/21  15:59:17  jshirley-->
<!-- 	Fixed cross-refs.-->
<!-- 	[1994/10/21  15:59:02  jshirley]-->
<!-- -->
<!-- Revision 1.1.6.9  1994/10/19  21:55:45  neilson-->
<!-- 	Automatic fix to mistake in .zA-.zZ-->
<!-- 	[1994/10/19  21:54:50  neilson]-->
<!-- -->
<!-- Revision 1.1.6.8  1994/10/13  17:58:01  norb-->
<!-- 	changes for Ext.  Login-->
<!-- 	[1994/10/13  17:57:29  norb]-->
<!-- -->
<!-- Revision 1.1.6.7  1994/08/29  16:00:18  marty-->
<!-- 	Undefunct this file.-->
<!-- 	[1994/08/29  16:00:05  marty]-->
<!-- -->
<!-- 	<<<no changes>>>-->
<!-- 	[1994/08/26  13:16:43  norb]-->
<!-- -->
<!-- 	checked out by mistake-->
<!-- -->
<!-- Revision 1.1.6.6  1994/08/26  13:17:31  norb-->
<!-- 	File is defunct-->
<!-- -->
<!-- Revision 1.1.6.5  1994/07/12  23:55:33  jshirley-->
<!-- 	{def,10220,R1.1} Remove reference to rpcd and sec_clientd-->
<!-- 	[1994/07/12  23:54:58  jshirley]-->
<!-- -->
<!-- Revision 1.1.6.4  1993/01/28  18:46:11  cjd-->
<!-- 	Embedded copyright notice-->
<!-- 	[1993/01/28  18:07:09  cjd]-->
<!-- -->
<!-- Revision 1.1.6.3  1992/12/07  21:07:58  millette-->
<!-- 	Bug 5054: Errors in app_gd (added comma to-->
<!-- 	example in Section 43.1.3;deleted semicolon in-->
<!-- 	Section 43.3 example-->
<!-- 	[1992/12/07  21:06:28  millette]-->
<!-- -->
<!-- Revision 1.1.6.2  1992/11/20  20:00:34  weir-->
<!-- 	Moved into 1.0.2doc tree-->
<!-- 	[1992/11/20  19:50:27  weir]-->
<!-- -->
<!-- Revision 1.1.4.5  1992/11/11  23:52:55  buckler-->
<!-- 	Corrected index entries-->
<!-- 	[1992/11/11  22:58:17  buckler]-->
<!-- -->
<!-- Revision 1.1.4.4  1992/10/10  15:50:23  casey-->
<!-- 	Index changes for PH-->
<!-- 	[1992/10/10  15:36:55  casey]-->
<!-- -->
<!-- Revision 1.1.4.3  1992/10/09  15:17:49  lmk-->
<!-- 	Prentice-Hall edits only-->
<!-- 	[1992/10/09  15:14:36  lmk]-->
<!-- -->
<!-- Revision 1.1.4.2  1992/09/11  21:00:37  lmk-->
<!-- 	Prentice-Hall edits only-->
<!-- 	[1992/09/11  20:59:38  lmk]-->
<!-- -->
<!-- Revision 1.1.2.3  1992/06/08  18:02:49  millette-->
<!-- 	Bug 3791: Miscellaneous editorial corrections.  Change bars not used.-->
<!-- 	[1992/06/08  18:01:21  millette]-->
<!-- -->
<!-- Revision 1.1.2.2  1992/05/07  15:01:42  millette-->
<!-- 	Bug 2769: Miscellaneous editorial corrections.  No change bars used.-->
<!-- 	[1992/05/07  14:27:24  millette]-->
<!-- -->
<!-- Revision 1.1  1992/01/29  16:08:29  damon-->
<!-- 	Initial revision-->
<!-- -->
<!---->
<!-- (c) Copyright 1991, Open Software Foundation, Inc.  ALL RIGHTS RESERVED-->
<Chapter Id="DCEADG.SECLOG.div.1">
<Title>The Login API</Title>
<Para><IndexTerm Id="DCEADG.SECLOG.indx.1">
<Primary>login context</Primary>
</IndexTerm>
<IndexTerm Id="DCEADG.SECLOG.indx.2">
<Primary>context</Primary>
<Secondary>login</Secondary>
<See>login context</See>
</IndexTerm>
<IndexTerm Id="DCEADG.SECLOG.indx.3">
<Primary>API</Primary>
<Secondary>login</Secondary>
</IndexTerm>The login API communicates with the security server to establish,
and possibly change, a principal's login context.  A login context
contains the information necessary for a principal to qualify for
(although not necessarily be granted) access to network services and
possibly local resources as well.  Login context information normally
includes the following:
</Para>
<ItemizedList>
<ListItem>
<Para>Identity information concerning the principal, including
its certificate of identity (in shared-secret authentication,
this is the TGT), its PAC, and registry policy information such as
the maximum lifetime of certificates of identity.
</Para>
</ListItem>
<ListItem>
<Para>The context state; that is, whether the authentication
service has validated the context or not.
</Para>
</ListItem>
<ListItem>
<Para>The source of authentication information.   (It may originate
from the network authentication service, or locally, if that network
service is unavailable.)
</Para>
</ListItem>
</ItemizedList>
<Sect1 Id="DCEADG.SECLOG.div.2">
<Title>Establishing Login Contexts</Title>
<IndexTerm Id="DCEADG.SECLOG.indx.4">
<Primary>login context</Primary>
</IndexTerm>
<Para>This section outlines the basic procedure by which a network login context is 
established.  See Chapter 24 for a detailed description of this process.
</Para>
<Para>The procedure is as follows:
</Para>
<OrderedList>
<ListItem>
<Para>The
client calls <Function>sec_login_setup_identity()</Function> specifying the name
of the principal whose network identity is to be established.  Memory
is allocated to receive the principal's login context.
</Para>
</ListItem>
<ListItem>
<IndexTerm Id="DCEADG.SECLOG.indx.5">
<Primary>certificate of identity</Primary>
<SeeAlso>ticket-granting ticket</SeeAlso>
</IndexTerm>
<IndexTerm Id="DCEADG.SECLOG.indx.6">
<Primary>ticket-granting ticket</Primary>
<SeeAlso>certificate of identity</SeeAlso>
</IndexTerm>
<IndexTerm Id="DCEADG.SECLOG.indx.7">
<Primary>preauthentication</Primary>
</IndexTerm>
<Para>The client calls <Function>sec_login_valid_and_cert_ident()</Function>, which does
the following:
</Para>
<OrderedList>
<ListItem>
<Para>Forwards a TGT request encrypted with the user's secret key and
with a random key, to the authentication service, which decrypts
the request, authenticates the principal, and returns a TGT
for the principal.
</Para>
</ListItem>
<ListItem>
<Para>The client's security runtime then decrypts the TGT and forwards it
to the privilege
service, which creates a PAC for the principal and encloses it in
a PTGT,  which is returned
to the client's security runtime. 
</Para>
</ListItem>
<ListItem>
<Para>The runtime decrypts the message
containing the PTGT and returns information about the source of the
authentication information to the API.  (If the authentication information
comes from the network security server, then the login context is
validated.)
</Para>
</ListItem>
</OrderedList>
</ListItem>
<ListItem>
<Para>Finally, the client invokes <Function>sec_login_set_context()</Function>, which enables 
child processes spawned from the calling process to inherit the validated context.
</Para>
</ListItem>
</OrderedList>
<Para>In the walkthrough of user authentication in Chapter 24,
we mentioned that one of the functions of <Function>sec_login_valid_and_cert_ident()</Function> is to demonstrate that a valid trust path exists between the
authentication service and the host computer on which the principal
is logging in.  After setting up and validating a login context, any
application that sets identity information for local processes should
check to be sure that the server that provided the certificate of
identity is legitimate in order to demonstrate that the trust path
between the client and the authentication service is valid.
</Para>
<Sect2 Id="DCEADG.SECLOG.div.3">
<Title>Validating the Login Context and Certifying the Security Server</Title>
<IndexTerm Id="DCEADG.SECLOG.indx.8">
<Primary>login context</Primary>
<Secondary>validating</Secondary>
</IndexTerm>
<Para>Whereas a validated login context is one that is regarded as legitimate
by the local security runtime, a validated and certified login context
is one that is not only regarded as legitimate but also can be demonstrated
to have been (in all likelihood, that is) issued by a legitimate security
server.  Certifying that the security server is legitimate prevents
faked identity information from being propagated to local processes.
For example, a spurious server could collaborate with a dishonest
user in order to obtain an identity that conferred comprehensive permissions
(for example, the <Literal>root</Literal> identity).  With such an identity, the
dishonest user could gain access to sensitive local objects, such
as key-storage files for server principals that run on the host.
(Servers running on other hosts would not trust this principal, however,
because it does not know their keys.) Of course, if a spurious server
can return to the application a ticket encrypted with the host's
secret key, it means the server has access to the host's key; but, if this
is the case, network security has already been seriously undermined.
</Para>
<Para>When an application needs to certify the originator of a certificate
of identity, it may call <Function>sec_login_certify_identity()</Function>. 
This routine makes an authenticated remote procedure call to the local
security validation service of the <Command>dced</Command> daemon in order to
acquire a ticket to the host principal.
If <Command>dced</Command> succeeds in decrypting the message containing the ticket, 
then the server that granted the certificate of identity
must know the host principal's secret key; this evidence indicates
that it is a legitimate security server. 
Since <Command>dced</Command> runs with the identity <Literal>root</Literal> 
(in order to access the host's key), 
the process calling <Function>sec_login_certify_identity()</Function> need not.
</Para>
<Para>The <Function>sec_login_valid_and_cert_ident()</Function> is similar to 
<Function>sec_login_certify_identity()</Function>, except that 
it combines the validation and
certification procedures (and therefore, the password of the principal
that is logging in must be known to the process making this call).
The <Function>sec_login_valid_and_cert_ident()</Function> routine 
calls the security server for a ticket to the host and attempts decryption.  
The process calling <Function>sec_login_valid_and_cert_ident()</Function> 
must have access to the host's secret key, and so must run as <Literal>root</Literal>.
</Para>
<Note>
<Para>Because system login programs should not set local identities derived from an 
uncertified context, all login API routines that return data from an uncertified
context issue a warning.
</Para>
</Note>
</Sect2>
<Sect2 Id="DCEADG.SECLOG.div.4">
<Title>Validating the Login Context Without Certifying the Security Server</Title>
<Para>An application that does not use login contexts to set local identity
information does not need to certify its login contexts.  Since an illegitimate
security server is unlikely to know the key of a remote server principal
with which the application may communicate, the application will
simply be refused the service requested from the remote server principal.
If local operating system identity information is assumed to be neither
of interest nor of concern to an application, it may call <Function>sec_login_validate_identity()</Function>, which does not attempt to verify the security server's
knowledge of the host principal's key.
</Para>
<Para>The <Function>sec_login_validate_identity()</Function> routine does
not acquire a PTGT, unlike the <Function>sec_login_certify_identity()</Function> and
<Function>sec_login_valid_and_cert_ident()</Function> routines.  Instead, the PTGT
is acquired when the application
first makes an authenticated remote procedure call.
</Para>
</Sect2>
<Sect2 Id="DCEADG.SECLOG.div.5">
<Title>Example of a System Login Program</Title>
<Para>Following is an example of a system login program that obtains a login
context that can be trusted for both network and local operations.
</Para>
<Note>
<Para>One of the function calls that appears in the following example,
<Function>sec_login_purge_context()</Function>, is described in Section 30.6.4.
</Para>
</Note>
<InformalExample>
<Para><ProgramListing>if (sec_login_setup_identity(principal,sec_login_no_flags,
    &amp;login_context,&amp;st))
{
   ...get password...

<?sml-need 9>   if (sec_login_valid_and_cert_ident(login_context, password,
       &amp;reset_passwd, &amp;auth_src,&amp;st)) 
   {
      if(auth_src==sec_login_auth_src_network)
      {
         if (GOOD_STATUS(&amp;st)
            sec_login_set_context(login_context);
      }
   }
   if (reset_passwd)
   {
      ...reset the user's password...

      if (passwd_reset_fails)
      {
         sec_login_purge_context(login_context)

         ...application login-failure actions...
      }

      ...application-specific login-valid actions...
   }
}
</ProgramListing></Para>
</InformalExample>
</Sect2>
</Sect1>
<Sect1 Id="DCEADG.SECLOG.div.6">
<Title>Context Inheritance</Title>
<IndexTerm Id="DCEADG.SECLOG.indx.9">
<Primary>login context</Primary>
<Secondary>inheritance</Secondary>
</IndexTerm>
<Para>A process inherits the login context of its parent process unless
the child process is associated with a principal that has logged in
and so established a separate login context.  The following subsections
describe two additional aspects of context inheritance:
</Para>
<ItemizedList>
<ListItem>
<Para>How the initial context is established.
</Para>
</ListItem>
<ListItem>
<Para>How a process may inhibit context inheritance.
</Para>
</ListItem>
</ItemizedList>
<Sect2 Id="DCEADG.SECLOG.div.7">
<Title>The Initial Context</Title>
<Para>An application invokes <Function>sec_login_setup_identity()</Function> so that
it can then make other authenticated RPC calls. 
However, <Function>sec_login_setup_identity()</Function> is itself a local
interface to an authenticated remote procedure call, 
and authenticated RPC needs a validated login context
in order to execute.  For applications like system login, 
the daemon <Command>dced</Command> supplies the validated context. 
However, a daemon that is started before <Command>dced</Command> is running on the host 
needs to be able to assume its host's identity. 
The initial context is established
at boot time with <Function>sec_login_init_first()</Function>, which establishes
the default context inheritance for processes running on the host.
The routines 
<Function>sec_login_setup_first()</Function> and<Literal> sec_login_validate_first()</Literal>
then set up and validate the context in a procedure like that
used for user context validation.
</Para>
</Sect2>
<Sect2 Id="DCEADG.SECLOG.div.8">
<Title>Private Contexts</Title>
<Para>A process may inhibit context inheritance by setting a flag in
<Function>sec_login_setup_identity()</Function>.  If the flag indicates that the login context is
private, then children of the calling process cannot inherit it.  A
child process can neither set a private context (since it is the function
of <Function>sec_login_set_context()</Function> to make the context inheritable)
nor export it to any other process.
</Para>
</Sect2>
</Sect1>
<Sect1 Id="DCEADG.SECLOG.div.9">
<Title>Handling Expired Certificates of Identity</Title>
<IndexTerm Id="DCEADG.SECLOG.indx.10">
<Primary>login context</Primary>
<Secondary>expiration</Secondary>
</IndexTerm>
<IndexTerm Id="DCEADG.SECLOG.indx.11">
<Primary>certificate of identity</Primary>
</IndexTerm>
<Para>For a dishonest principal to make use of an intercepted certificate
of identity, it must succeed in decrypting it.  In order to make the
task of decryption more difficult, a certificate of identity has a
limited lifespan; and, once it expires, the associated login context
is no longer valid.
</Para>
<Para>Because this security feature may inconvenience users, an application
may wish to warn a user when the certificate of identity is about
to expire.  The <Function>sec_login_get_expiration()</Function> routine returns
the expiration date of a certificate of identity.  When a certificate
of identity is about to expire, the application may call <Function>sec_login_refresh_identity()</Function>, which may be used to refresh any login context.
</Para>
<Para>Similarly, a server principal may need to determine whether a certificate
of identity may expire during some long network operation and, if
the certificate of identity is likely to expire, refresh it to ensure
that the operation is not prevented from completion.  Following is
an example:  
</Para>
<InformalExample>
<Para><ProgramListing>sec_login_get_expiration (login_context,&amp;expire_time,&amp;st);

if (expire_time &lt; (current_time + operation_duration))
{
   if (sec_login_refresh_identity(login_context,&amp;st))
   {
      ...identity has changed and must be validated again...
   } 
   else
   {
      ...login context cannot be renewed...
   
      exit(0);
   }
}

operation();
</ProgramListing></Para>
</InformalExample>
<Para>Because <Function>sec_login_refresh_identity()</Function> acquires a certificate
of identity, refreshed contexts must be revalidated with <Function>sec_login_validate_identity()</Function> or <Function>sec_login_valid_and_cert_ident()</Function> before they
can be used.
</Para>
<Para>The expiration date of a login context has no meaning with respect
to local identity information; for the same reason, <Function>sec_login_refresh_identity()</Function> cannot refresh a login context that has been authenticated
locally.
</Para>
</Sect1>
<Sect1 Id="DCEADG.SECLOG.div.10">
<Title>Importing and Exporting Contexts</Title>
<IndexTerm Id="DCEADG.SECLOG.indx.12">
<Primary>login context</Primary>
<Secondary>importing and exporting</Secondary>
</IndexTerm>
<Para>Under some circumstances, an application may need two processes to
run using the same login context.  A process may acquire its login
context in a form suitable for imparting to another process by calling <Function>sec_login_export_context()</Function>.  This call collects the login context
from the local context cache and loads it into a buffer.  Another process
may then call<Literal> sec_login_import_context()</Literal> to unpack the buffer
and create its own login context cache to store the imported context.
Since the context has already been validated, the process that imports
it may use it immediately. (The CDS clerk is an example of a context
importer.)
</Para>
<Para>These operations are strictly local; that is, 
the exporting and importing processes
must be running on the same host.  In addition, a process cannot export
a private context.
</Para>
</Sect1>
<Sect1 Id="DCEADG.SECLOG.div.11">
<Title>Changing a Groupset</Title>
<IndexTerm Id="DCEADG.SECLOG.indx.13">
<Primary>login context</Primary>
<Secondary>changing a groupset</Secondary>
</IndexTerm>
<Para>The <Function>sec_login_newgroups()</Function> routine enables a principal to
assume the minimum groupset that is required to accomplish a given
task.  For example, a user may have privilege attributes that include
membership in an administrative group associated with a comprehensive
permission set, and membership in a user group associated with a more
restricted permission set.  Such a user may not want the
permissions associated with the administrative group, except when those
permissions are essential to an administrative task (so as to avoid
inadvertent damage to objects that are accessible to members of the administrative group, but not to members of the user group).
</Para>
<Para>To offer users the capability of removing groups from their groupsets, 
an application may use the login API as shown in the following example.
</Para>
<Note>
<Para>Two of the function calls that appear in the following example,
<Function>sec_login_get_current_context()</Function> and
<Function>sec_login_inquire_net_info()</Function>, 
are described in the following section.
</Para>
</Note>
<InformalExample>
<Para><ProgramListing><?sml-need 19>sec_login_get_current_context(&amp;login_context,&amp;st);

sec_login_inquire_net_info(login_context,&amp;net_info,&amp;st);

for (i=0; i &lt; num_groups; i++)
{
   ... query whether user wants to discard any current group
   memberships.  Copy new group set to new_groups array ...
}

if (!sec_login_newgroups(login_context,sec_login_no_flags,
    num_new_groups, new_groups, &amp;restricted_context,&amp;st))
{
   if (st == sec_login_s_groupset_invalid)

      printf("Newgroupsetinvalid\n");

   ...application-specific error handling...
}
</ProgramListing></Para>
</InformalExample>
<Para>Note that the <Function>sec_login_newgroups()</Function> call can only return
a restricted groupset: it cannot return a groupset larger than the
one associated with the login context that is passed to it.  This routine also enables the calling process to flag the new login context
as private to the calling process.
</Para>
</Sect1>
<Sect1 Id="DCEADG.SECLOG.div.12">
<Title>Miscellaneous Login API Functions</Title>
<Para>The following subsections describe a few miscellaneous login API routines, some
of which have appeared previously in examples in this chapter.
<?sml-break><?sml-need 10></Para>
<Sect2 Id="DCEADG.SECLOG.div.13">
<Title>Getting the Current Context</Title>
<Para>The <Function>sec_login_get_current_context()</Function> routine returns a handle
to the login context for the currently established principal.  This
routine is useful for several login API functions that take a login
context handle as input.
</Para>
</Sect2>
<Sect2 Id="DCEADG.SECLOG.div.14">
<Title>Getting Information from a Login Context</Title>
<Para>The <Function>sec_login_inquire_net_info()</Function> routine returns a data structure
comprising the principal's PAC, account expiration date, password
expiration date, and identity expiration date.
The <Function>sec_login_free_net_info()</Function> frees 
the memory allocated to this data structure.
</Para>
</Sect2>
<Sect2 Id="DCEADG.SECLOG.div.15">
<Title>Getting Password and Group Information for Local Process Identities</Title>
<Para>Two calls, <Function>sec_login_get_pwent()</Function>  and <Function>sec_login_get_groups()</Function>,  are useful for setting the local identity of a process. These
routines return password or group information from the network registry,
if that service is available, or from the local files of password
and group information,  if the network service is unavailable.
</Para>
</Sect2>
<Sect2 Id="DCEADG.SECLOG.div.16">
<Title>Releasing and Purging a Context</Title>
<IndexTerm Id="DCEADG.SECLOG.indx.14">
<Primary>login context</Primary>
</IndexTerm>
<Para>When a process is finished using a login context, it may call <Function>sec_login_release_context()</Function> to free storage occupied by the context handle.
When a process releases a login context, the context is still available
to other processes that use it.  If an application needs to destroy
a login context, it may call <Function>sec_login_purge_context()</Function>, which
also frees storage occupied by the handle.  Since a destroyed context
is unavailable to all processes that use it, application developers
should be careful when using <Function>sec_login_purge_context()</Function>.
</Para>
</Sect2>
</Sect1>
</Chapter>
<!--+ 11/27/96 19:53:47
    | tagMorph:  $Id: 5_login.sgm,v 1.1.2.8 1996/12/14 20:24:02 wardr Exp $
    | tagMorph library:  $Id: 5_login.sgm,v 1.1.2.8 1996/12/14 20:24:02 wardr Exp $
    | sml-to-docbook:  1.25
    +-->
