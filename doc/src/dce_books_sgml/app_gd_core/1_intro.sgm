<!--
# @OSF_COPYRIGHT@
# 
# 
# HISTORY
# $Log: 1_intro.sgm,v $
# Revision 1.1.2.8  1996/12/14  20:23:44  wardr
# 	{edit,R1.2.2}
# 	penultimate format fixes
# 	[1996/12/14  20:21:27  wardr]
#
# Revision 1.1.2.7  1996/12/13  22:10:11  wardr
# 	{edit,R1.2.2}
# 	Fixed formatting problems
# 	[1996/12/13  22:08:03  wardr]
# 
# Revision 1.1.2.6  1996/12/12  21:29:51  wardr
# 	{edit,R1.2.2}
# 	Fixed formatting problems
# 	[1996/12/12  21:28:01  wardr]
# 
# Revision 1.1.2.5  1996/12/12  16:48:53  carrig
# 	{enh,R1.2.2}
# 	Minor edits
# 	[1996/12/12  16:46:33  carrig]
# 
# Revision 1.1.2.4  1996/12/06  21:09:31  carrig
# 	{enh,R1.2.2}
# 	Second pass for editor
# 	[1996/12/06  21:07:16  carrig]
# 
# Revision 1.1.2.3  1996/12/05  21:38:23  carrig
# 	{enh,R1.2.2}
# 	First pass to prepare for editing
# 	[1996/12/05  21:36:22  carrig]
# 
# Revision 1.1.2.2  1996/12/02  15:40:31  weir
# 	Removed thinsp entities, corrected other minor errors
# 	[1996/12/02  15:38:43  weir]
# 
# Revision 1.1.2.1  1996/12/01  20:42:46  weir
# 	Initial submission
# 	[1996/12/01  20:41:07  weir]
# 
# 	Initial submission
# 	[1996/11/29  20:35:13  weir]
# 
# $EndLog$
-->
<!-- Fragment document type declaration subset:
ArborText, Inc., 1988-1993, v.4001
<!DOCTYPE Book PUBLIC "-//Davenport//DTD DocBook V2.4//EN" [
<!ENTITY  DCEADG.THRI.ent.1  SYSTEM "eps/1_intro_20.ps" NDATA eps>
<!ENTITY  DCEADG.THRI.ent.2  SYSTEM "eps/1_intro_30.ps" NDATA eps>
<!ENTITY  DCEADG.THRC.ent.1  SYSTEM "eps/1_intro_10.ps" NDATA eps>
]>
-->
<!---->
<!-- COPYRIGHT NOTICE-->
<!-- Copyright (c) 1990, 1991, 1992, 1993 Open Software Foundation, Inc.-->
<!-- ALL RIGHTS RESERVED (DCE).  See the file named COPYRIGHT.DCE in the-->
<!-- src directory for the full copyright text.-->
<!---->
<!---->
<!-- OLD HISTORY-->
<!-- Revision 1.1.6.10  1995/06/07  14:42:43  rcb-->
<!-- 	PRENTICE HALL reformat; final edits and changes-->
<!-- 	[1995/06/05  19:57:41  rcb]-->
<!---->
<!-- 	PRENTICE HALL reformat-->
<!-- 	[1995/04/13  14:33:59  rcb]-->
<!---->
<!-- 	incorporated 1.1 edits-->
<!-- 	[1995/04/13  14:14:50  rcb]-->
<!---->
<!-- Revision 1.1.6.9  1994/10/18  15:15:59  weir-->
<!-- 	{def,9772,R1.1}-->
<!-- 	Fixed various inaccuracies-->
<!-- 	[1994/10/18  15:15:05  weir]-->
<!-- -->
<!-- Revision 1.1.6.8  1994/09/30  18:51:40  weir-->
<!-- 	Fixing internal cross-references-->
<!-- 	[1994/09/30  18:51:03  weir]-->
<!-- -->
<!-- Revision 1.1.6.7  1994/05/11  20:04:45  jshirley-->
<!-- 	Merged with changes from 1.1.6.6-->
<!-- 	[1994/05/11  20:04:40  jshirley]-->
<!-- -->
<!-- 	[1994/05/11  17:49:55  jshirley]-->
<!-- -->
<!-- Revision 1.1.6.6  1994/05/11  17:50:22  jshirley-->
<!-- 	[1994/05/11  17:49:55  jshirley]-->
<!-- -->
<!-- Revision 1.1.6.5  1994/03/14  22:00:58  rom-->
<!-- 	{enh, 10129, R1.1}-->
<!-- 	Fix pathnames of included files for new three-book organization.-->
<!-- 	[1994/03/14  21:20:35  rom]-->
<!-- -->
<!-- Revision 1.1.6.4  1993/02/03  20:04:17  buckler-->
<!-- 	Changed .P! to .pI and added Postscript boundary boxes-->
<!-- 	[1993/02/03  20:03:36  buckler]-->
<!-- -->
<!-- Revision 1.1.6.3  1993/01/28  18:46:34  cjd-->
<!-- 	Embedded copyright notice-->
<!-- 	[1993/01/28  18:07:38  cjd]-->
<!-- -->
<!-- Revision 1.1.6.2  1992/11/20  21:00:11  weir-->
<!-- 	Moved into 1.0.2doc tree-->
<!-- 	[1992/11/20  20:57:40  weir]-->
<!-- -->
<!-- Revision 1.1.4.6  1992/11/11  23:53:52  buckler-->
<!-- 	Corrected index entries-->
<!-- 	[1992/11/11  22:59:01  buckler]-->
<!-- -->
<!-- Revision 1.1.4.5  1992/11/06  16:36:26  lmk-->
<!-- 	Prentice-Hall index edits only-->
<!-- 	[1992/11/06  16:33:29  lmk]-->
<!-- -->
<!-- Revision 1.1.4.4  1992/10/12  22:19:30  casey-->
<!-- 	Index corrections for PH-->
<!-- 	[1992/10/12  22:16:07  casey]-->
<!-- -->
<!-- Revision 1.1.4.3  1992/10/08  17:45:29  lmk-->
<!-- 	Prentice-Hall edits only-->
<!-- 	[1992/10/08  17:43:48  lmk]-->
<!-- -->
<!-- Revision 1.1.4.2  1992/09/10  20:42:48  buckler-->
<!-- 	Second editorial review-->
<!-- 	[1992/09/10  20:39:04  buckler]-->
<!-- -->
<!-- Revision 1.1.2.3  1992/06/17  18:50:38  buckler-->
<!-- 	Incorporated editorial review-->
<!-- 	[1992/06/17  18:49:53  buckler]-->
<!-- -->
<!-- Revision 1.1.2.2  1992/06/12  18:22:38  johnson-->
<!-- 	Defect:  3878-->
<!-- -->
<!-- 	File: src/app_gd/threads/1_intro.gpsml-->
<!-- 	Short description:  Added suggested definition of a thread.-->
<!-- 	[1992/06/12  18:21:56  johnson]-->
<!-- -->
<!-- Revision 1.1  1992/01/29  16:07:22  damon-->
<!-- 	Initial revision-->
<!-- -->
<!---->
<!-- Copyright 1991, Open Software Foundation, Inc.  ALL RIGHTS RESERVED.-->
<!-- ********************************************************************-->
<!--                                                                    *-->
<!-- COPYRIGHT (c) 1991 BY DIGITAL EQUIPMENT CORPORATION,               *-->
<!-- Maynard, Massachusetts                                             *-->
<!-- All Rights Reserved.                                               *-->
<!--                                                                    *-->
<!-- This document is furnished under a license and may be used and     *-->
<!-- copied only in accordance with the terms of such license and with  *-->
<!-- the inclusion of the above copyright notice.  No title to or        *-->
<!-- ownership of the document is hereby transferred.                   *-->
<!--                                                                    *-->
<!-- The information in this document is subject to change without      *-->
<!-- notice and should not be construed as a commitment by Digital      *-->
<!-- Equipment Corporation.                                             *-->
<!--                                                                    *-->
<!-- ********************************************************************-->
<Chapter Id="DCEADG.THRI.div.1">
<Title>Introduction to Multithreaded Programming</Title>
<Para><IndexTerm Id="DCEADG.THRI.indx.1">
<Primary>multithreaded programming</Primary>
<Secondary>introduction</Secondary>
</IndexTerm>DCE Threads is a user-level (nonkernel) threads package based on the 
pthreads interface specified by POSIX in 1003.4a, Draft 4.  
This chapter introduces multithreaded programming, 
which is the
division of a program into multiple threads (parts) that execute concurrently. 
In addition, this chapter describes four software models that improve 
multithreaded programming performance.
</Para>
<Para><IndexTerm Id="DCEADG.THRI.indx.2">
<Primary>thread</Primary>
<Secondary>definition</Secondary>
</IndexTerm>A thread
is a single sequential flow of control within a program.  It is the active 
execution of a designated routine, including any nested routine invocations. 
Within a single thread, there is a single point of execution.  Most 
traditional programs consist of a single thread.
</Para>
<Para>Threads are lightweight processes that share a single address space.
Each thread shares all the resources of the originating process,
including signal handlers
and descriptors.
Each thread has its own thread identifier, scheduling policy and priority,
<Literal>errno</Literal> value, thread-specific data
bindings, and the required system resources to support a flow of control.
</Para>
<Sect1 Id="DCEADG.THRI.div.2">
<Title>Advantages of Using Threads</Title>
<Para>With a threads package, a programmer can create multiple threads within a
process.  Threads execute concurrently and, within a multithreaded process,
there are at any time multiple points of execution.  Threads execute within a
single address space.  Multithreaded programming offers the 
following advantages:
</Para>
<ItemizedList>
<ListItem>
<Para>Performance
</Para>
<Para>Threads improve the performance (throughput, computational
speed, responsiveness, or some combination of these) 
of a program.  Multiple threads are useful 
in a multiprocessor system where threads run concurrently on
separate processors.  In addition, multiple threads also improve program
performance on single processor systems by permitting the overlap of input
and output or other slow operations with computational operations.
</Para>
<Para>You can think of threads as executing simultaneously, regardless of 
the number of processors present.  You cannot make any assumptions 
about the start or finish times of threads or the sequence in which 
they execute, unless explicitly synchronized.
</Para>
</ListItem>
<ListItem>
<Para>Shared Resources
</Para>
<Para>An advantage of using multiple threads over using separate processes is that 
the former share a single address space, all open files, and other 
resources.
</Para>
</ListItem>
<ListItem>
<Para>Potential Simplicity
</Para>
<Para>Multiple threads can reduce the complexity of some applications that are 
inherently suited for threads.
</Para>
</ListItem>
</ItemizedList>
</Sect1>
<Sect1 Id="DCEADG.THRI.div.3">
<Title>Software Models for Multithreaded Programming</Title>
<Para><IndexTerm Id="DCEADG.THRI.indx.3">
<Primary>models for multithreaded programming</Primary>
</IndexTerm>
<IndexTerm Id="DCEADG.THRI.indx.4">
<Primary>multithreaded programming</Primary>
<Secondary>software models</Secondary>
</IndexTerm>The following subsections describe 
four software models for which multithreaded
programming is especially well suited:
</Para>
<ItemizedList>
<ListItem>
<Para>Boss/worker model
</Para>
</ListItem>
<ListItem>
<Para>Work crew model
</Para>
</ListItem>
<ListItem>
<Para>Pipelining model
</Para>
</ListItem>
<ListItem>
<Para>Combinations of models
</Para>
</ListItem>
</ItemizedList>
<Sect2 Id="DCEADG.THRI.div.4">
<Title>Boss/Worker Model</Title>
<Para><IndexTerm Id="DCEADG.THRI.indx.5">
<Primary>boss/worker software model</Primary>
</IndexTerm>In a boss/worker model of program design, one thread functions as the
boss because it assigns tasks to worker threads.
Each worker performs a different type of task until it is finished,
at which point the worker interrupts the boss to indicate that it is
ready to receive another task.  Alternatively, the boss polls workers
periodically to see whether or not each worker is ready to receive
another task.
</Para>
<Para><IndexTerm Id="DCEADG.THRI.indx.6">
<Primary>boss/worker software model</Primary>
</IndexTerm>
<IndexTerm Id="DCEADG.THRI.indx.7">
<Primary>work queue variation of boss/worker model</Primary>
</IndexTerm>A variation of the boss/worker model is the work queue model.  The boss
places tasks in a queue, and workers check the queue and take tasks to
perform.  An example of the work queue model in an office environment is a
secretarial typing pool.  The office manager puts documents to be typed in a
basket, and typists take documents from the basket to work on.
</Para>
</Sect2>
<Sect2 Id="DCEADG.THRI.div.5">
<Title>Work Crew Model</Title>
<Para><IndexTerm Id="DCEADG.THRI.indx.8">
<Primary>work crew software model</Primary>
</IndexTerm>In the work crew model, multiple threads work together on a single task.  The
task is divided into pieces that are performed in parallel, and
each thread performs one piece.  An example of a work crew is a group of
people cleaning a house.  Each person cleans certain rooms or performs
certain types of work (washing floors, polishing furniture, and so forth),
and each works independently.  Figure 6-1 shows a task performed
by three threads in a work crew model.
<IndexTerm Id="DCEADG.THRI.indx.9">
<Primary>work crew software model</Primary>
</IndexTerm></Para>
<?sml-need 2i>
<Figure>
<Title>Work Crew Model</Title>
<Graphic Entityref="DCEADG.THRI.ent.1"></Graphic>
</Figure>
</Sect2>
<Sect2 Id="DCEADG.THRI.div.6">
<Title>Pipelining Model</Title>
<Para><IndexTerm Id="DCEADG.THRI.indx.10">
<Primary>pipelining software model</Primary>
</IndexTerm>In the pipelining model, a task is divided into steps.  The steps must be
performed in sequence to produce a single instance of the desired output,
and the work done in each step (except for the first and last) is based on
the preceding step and is a prerequisite for the work in the next step.
However, the program is designed to produce multiple instances of the
desired output, and the steps are designed to operate in a parallel 
time frame so that
each step is kept busy.
</Para>
<Para>An example of the pipelining model is an automobile
assembly line.  Each step or stage in the assembly line is continually busy
receiving the product of the previous stage's work, performing its assigned
work, and passing the product along to the next stage.  A car needs a 
body before it can be painted, but at any one time numerous cars are 
receiving bodies, and then numerous cars are being painted.
</Para>
<Para>In a multithreaded program using the pipelining model, each thread
represents a step in the task.  Figure 6-2 shows a task performed by 
three threads in a pipelining model.
</Para>
<?sml-need 2i>
<Figure>
<Title>Pipelining Model</Title>
<Graphic Entityref="DCEADG.THRI.ent.2"></Graphic>
</Figure>
</Sect2>
<Sect2 Id="DCEADG.THRI.div.7">
<Title>Combinations of Models</Title>
<Para><IndexTerm Id="DCEADG.THRI.indx.11">
<Primary>combination software model</Primary>
</IndexTerm>You may find it appropriate to combine the software models in a single
program if your task is complex.  For example, a program could be designed
using the pipelining model, but one or more steps could be handled by a work
crew.  In addition, tasks could be assigned to a work crew by taking a task
from a work queue and deciding (based on the task characteristics) which
threads are needed for the work crew.
<IndexTerm Id="DCEADG.THRI.indx.12" SpanEnd="DCEADG.THRI.indx.3"><IndexTerm Id="DCEADG.THRI.indx.13" SpanEnd="DCEADG.THRI.indx.4"></Para>
</Sect2>
</Sect1>
<Sect1 Id="DCEADG.THRI.div.8">
<Title>Potential Disadvantages of Multithreaded Programming</Title>
<Para><IndexTerm Id="DCEADG.THRI.indx.14">
<Primary>thread</Primary>
<Secondary>multithreaded programming</Secondary>
</IndexTerm>
<IndexTerm Id="DCEADG.THRI.indx.15">
<Primary>multithreaded programming</Primary>
<Secondary>potential disadvantages</Secondary>
</IndexTerm>When you design and code a multithreaded program, consider the following
problems and accommodate or eliminate each problem as appropriate:
</Para>
<ItemizedList>
<ListItem>
<Para>Potential Complexity
</Para>
<Para>The level of expertise required for designing,
coding, and maintaining multithreaded programs
may be higher than for most single-threaded programs because multithreaded 
programs may need shared access to resources, mutexes, and condition 
variables.  Weigh
the potential benefits against the complexity and its associated risks.
</Para>
</ListItem>
<ListItem>
<?sml-need 6>
<Para>Nonreentrant Software
</Para>
<Para><IndexTerm Id="DCEADG.THRI.indx.16">
<Primary>nonreentrant software</Primary>
</IndexTerm>
<IndexTerm Id="DCEADG.THRI.indx.17">
<Primary>reentrant code</Primary>
</IndexTerm>
<IndexTerm Id="DCEADG.THRI.indx.18">
<Primary>thread</Primary>
<Secondary>avoiding nonreentrant routines</Secondary>
</IndexTerm>
<IndexTerm Id="DCEADG.THRI.indx.19">
<Primary>multithreaded programming</Primary>
<Secondary>potential disadvantages</Secondary>
</IndexTerm>If a thread calls a routine or library that is not reentrant, use the global
locking mechanism to prevent the nonreentrant routines from modifying a
variable that another thread modifies. 
Chapter 8 discusses nonreentrant software in more detail.
</Para>
<Note>
<Para>A multithreaded program must be reentrant; that is, it must allow 
multiple threads to execute at the same time.  Therefore, be sure that your
compiler generates reentrant code before you do any design or coding work
for multithreading. (Many C, Ada, Pascal, and BLISS compilers generate reentrant
code by default.) 
</Para>
<Para>If your program is nonreentrant, any thread synchronization techniques that
you use are not guaranteed to be effective.
</Para>
</Note>
</ListItem>
<ListItem>
<Para>Priority Inversion
</Para>
<Para>Priority inversion prevents high-priority threads from executing when
interdependencies exist among three or more threads. 
Chapter 8 discusses priority inversion in more detail.
</Para>
</ListItem>
<ListItem>
<Para>Race Conditions
</Para>
<Para>A type of programming error called a <FirstTerm>race condition</FirstTerm> causes
unpredictable and erroneous program behavior.  Chapter 8
discusses race conditions in more detail.
</Para>
</ListItem>
<ListItem>
<Para>Deadlocks
</Para>
<Para>A type of programming error called a <FirstTerm>deadlock</FirstTerm> causes two or more
threads to be blocked from executing. 
Chapter 8 discusses deadlocks in more detail.
</Para>
</ListItem>
<ListItem>
<Para>Blocking Calls
</Para>
<Para>Certain system or library calls may cause an entire process to block 
while waiting for the call to complete, thus causing all other 
threads to stop executing.  Chapter 8 discusses blocking in more detail.
</Para>
</ListItem>
</ItemizedList>
</Sect1>
</Chapter>
<!--+ 11/27/96 19:53:47
    | tagMorph:  $Id: 1_intro.sgm,v 1.1.2.8 1996/12/14 20:23:44 wardr Exp $
    | tagMorph library:  $Id: 1_intro.sgm,v 1.1.2.8 1996/12/14 20:23:44 wardr Exp $
    | sml-to-docbook:  1.25
    +-->
