<!--
# @OSF_COPYRIGHT@
# 
# 
# HISTORY
# $Log: 3.5_epa.sgm,v $
# Revision 1.1.2.8  1996/12/14  20:23:52  wardr
# 	{edit,R1.2.2}
# 	penultimate format fixes
# 	[1996/12/14  20:21:38  wardr]
#
# Revision 1.1.2.7  1996/12/13  22:10:22  wardr
# 	{edit,R1.2.2}
# 	Fixed formatting problems
# 	[1996/12/13  22:08:13  wardr]
# 
# Revision 1.1.2.6  1996/12/12  21:30:02  wardr
# 	{edit,R1.2.2}
# 	Fixed formatting problems
# 	[1996/12/12  21:28:11  wardr]
# 
# Revision 1.1.2.5  1996/12/12  16:49:03  carrig
# 	{enh,R1.2.2}
# 	Minor edits
# 	[1996/12/12  16:46:46  carrig]
# 
# Revision 1.1.2.4  1996/12/06  21:09:42  carrig
# 	{enh,R1.2.2}
# 	Second pass for editor
# 	[1996/12/06  21:07:30  carrig]
# 
# Revision 1.1.2.3  1996/12/05  21:38:33  carrig
# 	{enh,R1.2.2}
# 	First pass to prepare for editing
# 	[1996/12/05  21:36:35  carrig]
# 
# Revision 1.1.2.2  1996/12/02  15:40:40  weir
# 	Removed thinsp entities, corrected other minor errors
# 	[1996/12/02  15:38:53  weir]
# 
# Revision 1.1.2.1  1996/12/01  20:43:01  weir
# 	Initial submission
# 	[1996/12/01  20:41:17  weir]
# 
# 	Initial submission
# 	[1996/11/29  20:35:27  weir]
# 
# $EndLog$
-->
<!-- Fragment document type declaration subset:
ArborText, Inc., 1988-1993, v.4001
<!DOCTYPE Book PUBLIC "-//Davenport//DTD DocBook V2.4//EN" [
]>
-->
<!-- COPYRIGHT NOTICE-->
<!-- Copyright (c) 1990, 1991, 1992, 1993, 1994 Open Software Foundation, Inc.-->
<!-- ALL RIGHTS RESERVED (DCE).  See the file named COPYRIGHT.DCE for-->
<!-- the full copyright text.-->
<!-- -->
<!-- OLD HISTORY-->
<!-- Revision 1.1.4.1  1996/03/27  14:03:51  wardr-->
<!-- 	{edit R1.2.1}-->
<!-- 	More Release Edits-->
<!-- 	[1996/03/27  14:03:25  wardr]-->
<!---->
<!-- Revision 1.1.2.6  1995/06/07  14:46:42  rcb-->
<!-- 	edited 1.1 version, PRENTICE HALL reformat-->
<!-- 	[1995/06/07  14:46:00  rcb]-->
<!-- -->
<!-- 	PRENTICE HALL reformat-->
<!-- 	[1995/05/08  21:13:59  rcb]-->
<!-- -->
<!-- 	incorporated 1.1 edits-->
<!-- 	[1995/05/08  20:59:38  rcb]-->
<!-- -->
<!-- Revision 1.1.2.5  1994/10/19  19:45:08  millette-->
<!-- 	(enh, 10514 R1.1)-->
<!-- 	HP review corrections-->
<!-- 	[1994/10/19  19:44:50  millette]-->
<!-- -->
<!-- Revision 1.1.2.4  1994/10/07  21:25:12  millette-->
<!-- 	(enh, 10514 R1.1)-->
<!-- 	HP review corrections-->
<!-- 	[1994/10/07  21:24:36  millette]-->
<!-- -->
<!-- Revision 1.1.2.3  1994/06/13  18:20:43  devobj-->
<!-- 	cr10872- fix copyright-->
<!-- 	[1994/06/13  18:18:23  devobj]-->
<!-- -->
<!-- Revision 1.1.2.2  1994/06/02  17:09:50  jshirley-->
<!-- 	Fixed heading level from 4 to 3.-->
<!-- 	[1994/06/02  17:09:23  jshirley]-->
<!-- -->
<!-- Revision 1.1.2.1  1994/05/03  19:45:43  millette-->
<!-- 	(enh, 10514 R1.1)-->
<!-- 	Additions for new delegation functionality-->
<!-- 	[1994/05/03  19:45:14  millette]-->
<!-- -->
<Chapter Id="DCEADG.SECEPA.div.1">
<Title>The Extended Privilege Attribute API</Title>
<Para><IndexTerm Id="DCEADG.SECEPA.indx.1">
<Primary>API</Primary>
<Secondary>extended privilege attribute</Secondary>
</IndexTerm>
<IndexTerm Id="DCEADG.SECEPA.indx.2">
<Primary>extended privilege attribute</Primary>
<Secondary>API</Secondary>
</IndexTerm>
<IndexTerm Id="DCEADG.SECEPA.indx.3">
<Primary>delegation</Primary>
</IndexTerm>
<IndexTerm Id="DCEADG.SECEPA.indx.4">
<Primary>identities</Primary>
<Secondary>delegating</Secondary>
</IndexTerm>This chapter describes the extended privilege attribute (EPA) API.  
The EPA facility addresses the requirements of complex 
distributed systems by allowing clients and servers to invoke 
secure operations via one or more intermediate servers.
</Para>
<Para>In a simple client/server distributed environment, most operations 
involve two principals: the initiator of the operation 
and the target of the operation.  The target of the operation 
makes authorization decisions based on the identity of the initiator.   
However, in distributed object-oriented environments, 
there is frequently a need for server principals to perform 
operations on behalf of a client principal.  In these 
cases, it may not be enough for authorization decisions to be based 
simply on the identity of the initiator since the initiator of the operation 
may not be the principal that requests the operation. 
</Para>
<Para>To handle these cases, the EPA API provides routines that allow   
principals to operate on 
objects on behalf of (as delegates of) an initiating principal.
The collection of the delegation initiator and the 
intermediaries is 
referred to as a <FirstTerm>delegation chain</FirstTerm>.
</Para>
<Para><?sml-need 4>Using the EPA API and related <Literal>sec_login_</Literal><Symbol Role="Variable">*</Symbol><Literal>()</Literal> calls, 
an application may be written that allows client Principal A 
to invoke an operation on server Principal C via 
server Principal B.  The DCE Security Service will know the true initiator 
of the operation (Principal A) 
and can distinguish the delegated operation from the same operation 
invoked directly by Principal A.  
</Para>
<Para>The EPA interface consists of the security credential calls 
(<Literal>sec_cred_</Literal><Symbol Role="Variable">*</Symbol><Literal>()</Literal>) that 
extract privilege attributes and authorization data from an 
opaque binding handle to authenticated credentials.  
In addition, the following <Literal>sec_login_</Literal><Symbol Role="Variable">*</Symbol><Literal>()</Literal> calls of 
the login API are used to establish 
delegation chains and to perform other delegation related functions.
</Para>
<ItemizedList>
<ListItem>
<Para><Function>sec_login_become_initiator()</Function>
</Para>
</ListItem>
<ListItem>
<Para><Function>sec_login_become_delegate()</Function>
</Para>
</ListItem>
<ListItem>
<Para><Function>sec_login_become_impersonator()</Function>
</Para>
</ListItem>
<ListItem>
<Para><Function>sec_login_cred_get_delegate()</Function>
</Para>
</ListItem>
<ListItem>
<Para><Function>sec_login_cred_get_initiator()</Function>
</Para>
</ListItem>
<ListItem>
<Para><Function>sec_login_cred_initialize_cursor()</Function>
</Para>
</ListItem>
<ListItem>
<Para><Function>sec_login_disable_delegation()</Function>
</Para>
</ListItem>
<ListItem>
<Para><Function>sec_login_set_extended_attrs()</Function>
</Para>
</ListItem>
</ItemizedList>
<Sect1 Id="DCEADG.SECEPA.div.2">
<Title>Identities of Principals in Delegation</Title>
<Para>The identity of principals in a delegation chain is maintained in extended 
privilege attribute certificates (EPACs), as are the identities for all 
DCE principals.  Each EPAC contains the name and group memberships of a 
principal in the delegation chain and any extended attributes  
that apply to the principal.  The delegation chain includes an EPAC 
for each member of the delegation chain. 
</Para>
<Para>When delegation is in use, the target server receives the delegation chain, and thus 
knows the privilege attributes of the delegation chain initiator and each 
intermediary (delegate) in the chain.  Authorization decisions 
can then be made based on the identities of all principals 
involved in the operation.
</Para>
<Sect2 Id="DCEADG.SECEPA.div.3">
<Title>ACL Entry Types for Delegation</Title>
<Para>When a server's ACL manager is presented with credentials to use 
as a base of an authorization decision, the manager evaluates 
the privilege attributes of each principal involved in the delegation 
chain.  The ACL manager grants access for the requested operation 
only if all principals in the delegation chain have the necessary permissions on 
the object that is the eventual target of the operation.
</Para>
<Para>For the initiator of the delegation chain, permission on the target object  
must be granted directly using any of the following standard ACL entry 
types:
</Para>
<ItemizedList>
<ListItem>
<Para><Literal>user_obj</Literal>
</Para>
</ListItem>
<ListItem>
<Para><Command>user</Command> 
</Para>
</ListItem>
<ListItem>
<Para><Literal>foreign_user</Literal>
</Para>
</ListItem>
<ListItem>
<Para><Literal>group_obj</Literal>
</Para>
</ListItem>
<ListItem>
<Para><Literal>group</Literal>
</Para>
</ListItem>
<ListItem>
<Para><Literal>foreign_group</Literal> 
</Para>
</ListItem>
<ListItem>
<Para><Literal>foreign_other</Literal>
</Para>
</ListItem>
<ListItem>
<Para><Literal>other_obj</Literal>
</Para>
</ListItem>
<ListItem>
<Para><Literal>foreign_other</Literal> 
</Para>
</ListItem>
<ListItem>
<Para><Literal>any_other</Literal>
</Para>
</ListItem>
<ListItem>
<Para><Literal>extended</Literal>
</Para>
</ListItem>
</ItemizedList>
<Para>For intermediaries in a delegation chain, 
permissions to a target object can be granted directly to the 
intermediary with the 
standard ACL entry type previously described, or permissions can be 
granted by delegate ACL entries.  Delegate ACL entries grant 
permissions to principals only if they are acting as delegates.   
The following delegate ACL entry types are available: 
</Para>
<ItemizedList>
<?sml-need 20>
<ListItem>
<Para><Literal>user_obj_delegate</Literal>
</Para>
</ListItem>
<ListItem>
<Para><Literal>user_delegate</Literal>
</Para>
</ListItem>
<ListItem>
<Para><Literal>foreign_user_delegate</Literal>
</Para>
</ListItem>
<ListItem>
<Para><Literal>group_obj_delegate</Literal>
</Para>
</ListItem>
<ListItem>
<Para><Literal>group_delegate</Literal>
</Para>
</ListItem>
<ListItem>
<Para><Literal>foreign_group_delegate</Literal>
</Para>
</ListItem>
<ListItem>
<Para><Literal>foreign_other_delegate</Literal>
</Para>
</ListItem>
<ListItem>
<Para><Literal>other_obj_delegate</Literal>
</Para>
</ListItem>
<ListItem>
<Para><Literal>foreign_other_delegate</Literal>
</Para>
</ListItem>
<ListItem>
<Para><Literal>any_other_delegate</Literal>
</Para>
</ListItem>
</ItemizedList>
<Para>Note that, to perform an operation, all delegates in the chain must 
have the appropriate permissions.  
For example, assume a delegation chain consists of Principal A 
(the initiator) and 
Principal's B and C (the intermediaries).  To perform the operation, the 
delegation chain requires <Literal>Mrw</Literal> permissions on Server X.  One way of 
granting these permission is to grant them directly to  
each member of the delegation chain, as shown in the following: 
</Para>
<InformalExample>
<Para><ProgramListing>user:Principal A:Mrw
user:Principal B:Mrw
user:Principal C:Mrw
</ProgramListing></Para>
</InformalExample>
<Para>Providing access directly also allows each intermediary in the chain 
to perform the operation of 
their own initiative, a consequence that may or may not be desired.  
To specify that Principals B and C may only be intermediaries operating on behalf 
of an authorized initiating principal without granting them 
the ability to perform the operation on their own, use delegation entries.  
In this case, the Server X's ACL would contain the following entries:
</Para>
<InformalExample>
<Para><ProgramListing>user:Principal A:Mrw
user_delegate:Principal B:Mrw
user_delegate:Principal C:Mrw
</ProgramListing></Para>
</InformalExample>
</Sect2>
<Sect2 Id="DCEADG.SECEPA.div.4">
<Title>ACL Checking for Delegation</Title>
<Para>To determine permissions, the ACL manager first uses the standard 
access-check algorithm (described in Chapter 25) to
determine the permissions to grant to the delegation initiator.  
If the requested permission is not 
granted, access is denied.  
</Para>
<Para>If the requested permission is granted, the ACL manager then 
checks the permissions granted to the delegates in the chain.  This 
checking is similar to the standard access-check algorithm, but it takes 
into account any additional delegate permissions granted to the delegates.  
If the requested permission is not 
granted to all delegates, access is denied.  If the requested permission is 
granted to all delegates, access is granted.
</Para>
</Sect2>
</Sect1>
<Sect1 Id="DCEADG.SECEPA.div.5">
<Title>Calls to Establish Delegation Chains</Title>
<Para>The following <Literal>sec_login_</Literal><Symbol Role="Variable">*</Symbol><Literal>()</Literal> API calls set up a delegation chain:
</Para>
<ItemizedList>
<ListItem>
<Para><Function>sec_login_become_initiator()</Function>
</Para>
<Para>Enables delegation for a client.  The principal that 
executes this call is known as the <FirstTerm>delegation initiator</FirstTerm>.
</Para>
</ListItem>
<ListItem>
<Para><Function>sec_login_become_delegate()</Function>, <Function>sec_login_become_impersonator()</Function>
</Para>
<Para>Cause an intermediate server to 
become a delegate in a delegation chain.  The principals 
that execute these calls are known as <FirstTerm>intermediaries</FirstTerm> in the 
delegation chain. 
</Para>
</ListItem>
</ItemizedList>
<Para>The <Function>sec_login_become_delegate()</Function> call should be used if the 
traced delegation has been enabled.  The 
<Function>sec_login_become_impersonator()</Function> call
should be used if simple delegation has been enabled.  See Section 27.2.1
for more information about delegation types.
</Para>
<Para>The following subsections describe the information supplied to the calls 
that establish delegation chains. 
</Para>
<Sect2 Id="DCEADG.SECEPA.div.6">
<Title>Types of Delegation</Title>
<Para>When a client application calls <Function>sec_login_become_initiator()</Function> to 
enable delegation, that application specifies the type of delegation 
that should be enabled.  The delegation type can be any of the following:
</Para>
<ItemizedList>
<ListItem>
<Para>Traced Delegation
</Para>
<Para>Includes the identities of all members of the 
delegation chain in the credentials used for authorization.  To become an 
intermediary in a traced delegation chain, server principals use the 
<Function>sec_login_become_delegate()</Function> call.
</Para>
<Para>Note that ACLs on objects that are targets of traced delegation 
must grant the requested permission (or delegate permission) to each 
member of the delegation chain.
</Para>
</ListItem>
<ListItem>
<Para>Impersonation
</Para>
<Para>Includes only the identity of the 
initiator of the delegation chain used for authorization.  All 
intermediaries ``impersonate'' the delegation initiator.  
To become an impersonator, principals use the 
<Function>sec_login_become_impersonator()</Function> call.  
</Para>
<Para>Note that ACLs on objects that are targets of impersonation 
need list only the delegation initiator, not each delegate 
in the chain.
</Para>
</ListItem>
</ItemizedList>
<Para>Generally, traced delegation is the preferred method.  
The high degree of location transparency inherent in simple 
delegation greatly increases the risk of a client being 
compromised by a Trojan horse application.  
</Para>
<Para>When server principals run the <Function>sec_login_become_delegate()</Function> or 
<Function>sec_login_become_impersonator()</Function> call to become an 
intermediary in a delegation chain, they must also specify the 
delegation type as input to the call.  The type they specify must 
be the same type as the delegation type specified by the initiator of 
the chain (unless they specify no delegation).
</Para>
</Sect2>
<Sect2 Id="DCEADG.SECEPA.div.7">
<Title>Target and Delegate Restrictions</Title>
<Para>When a principal enables delegation or becomes an intermediary 
in a delegation chain, 
the principal may specify target and delegate restrictions.
Target restrictions 
identify the server principals (by UUID) to which the identities in a 
delegation chain can be projected.  Delegate restrictions identify the 
server principals that can further project the delegation chain.
</Para>
<Para>If a target restriction prohibits a server from seeing an identity in 
a delegation chain, the security runtime replaces that identity with 
the identity of the <FirstTerm>anonymous principal</FirstTerm>.  If a 
delegate restriction prohibits a principal from being an 
intermediary in a chain, then the security runtime replaces that 
principal's identity with the identity of the anonymous principal.  
This replacement with the anonymous identity allows the authenticated 
RPC call to complete.  Whether the operation requested by the 
delegation chain is performed can be controlled by ACL entries that 
grant permission to the anonymous principal on the objects that 
are the targets of the delegated operation.
</Para>
<Para>If no delegate restrictions 
are supplied, any principal can be an intermediary in the delegation chain.  
If any delegate restrictions are supplied, then only those supplied can 
further transmit the delegation chain.
</Para>
<Note>
<Para>In the current release of DCE, there is no way for a server to register its DCE
credentials with the RPC runtime.  Only a server name and key table can
currently be registered.  Because of this limitation, target restrictions
are currently implemented so that <Replaceable>all</Replaceable> target servers see
anonymous credentials for any EPAC that contains any target restriction
regardless of the identity specified in the restriction.
</Para>
</Note>
<Sect3 Id="DCEADG.SECEPA.div.8">
<Title>The Anonymous Principal</Title>
<Para>The DCE Security Service replaces those identities in the
delegation chain that are not allowed to be seen by target 
or delegate restrictions 
with the UUIDs associated with the  
anonymous principal's identity.  These UUIDs are as follows:
</Para>
<ItemizedList>
<?sml-need 4>
<ListItem>
<Para>Anonymous principal UUID: <Literal>fad18d52-ac83-11cc-b72d-0800092784e9</Literal>
</Para>
</ListItem>
<ListItem>
<Para>Anonymous group UUID: <Literal>fc6ed07a-ac83-11cc-97af-0800092784e9</Literal>
</Para>
</ListItem>
</ItemizedList>
<Para>The <Literal>other_obj</Literal>, <Literal>any_other</Literal>,<Literal>other_obj_deleg</Literal>, and 
<Literal>any_other_deleg</Literal> ACL entries define the anonymous principal's 
access to objects.  The entries must be set up just as for 
any other principal.  The appropriate direct or delegate 
permissions must be granted to the anonymous principal or the 
delegated operation will fail.
</Para>
</Sect3>
<Sect3 Id="DCEADG.SECEPA.div.9">
<Title>Target and Delegate Restriction Syntax</Title>
<Para>Target and delegate restrictions are expressed as a list 
of values of type <StructName Role="typedef">sec_id_restriction_t</StructName>.  This 
data type consists of a UUID and an entry type.  
The entry type specifies whether the UUID identifies a 
principal, a group, or ``any other'' principals 
(in a manner similar to the <Literal>any_other</Literal> ACL entry type).
As in ACL entry types, the target restriction entry types 
can refer to 
principals and groups from the local cell or 
from foreign cells.
</Para>
<Para>The possible delegation entry types are as follows:
</Para>
<ItemizedList>
<ListItem>
<Para><Literal>sec_rstr_e_type_user</Literal>
</Para>
<Para>The target or delegate is a local 
principal identified by UUID.  
</Para>
</ListItem>
<ListItem>
<Para><Literal>sec_rstr_e_type_group</Literal>
</Para>
<Para>The target or delegate is any member 
of a local group identified by UUID.  
</Para>
</ListItem>
<ListItem>
<Para><Literal>sec_rstr_e_type_foreign_user</Literal>
</Para>
<Para>The target or delegate is a 
foreign principal identified by principal and cell UUID.
</Para>
</ListItem>
<ListItem>
<Para><Literal>sec_rstr_e_type_foreign_group</Literal>
</Para>
<Para>The target or delegate is 
any member of a foreign group identified by group and cell UUID.
</Para>
</ListItem>
<ListItem>
<Para><Literal>sec_rstr_e_type_foreign_other</Literal>
</Para>
<Para>The target or delegate is any 
principal that can authenticate to the foreign cell  
identified by UUID. 
</Para>
</ListItem>
<ListItem>
<?sml-need 4>
<Para><Literal>sec_rstr_e_type_any_other</Literal>
</Para>
<Para>The target or delegate is any principal 
that can authenticate to any cell.
</Para>
</ListItem>
<ListItem>
<Para><Literal>sec_rstr_e_type_no_other</Literal>
</Para>
<Para>No principal can act as a target or 
delegate.
</Para>
</ListItem>
</ItemizedList>
</Sect3>
</Sect2>
<Sect2 Id="DCEADG.SECEPA.div.10">
<Title>Optional and Required Restrictions</Title>
<Para>When a principal calls <Function>sec_login_become_initiator()</Function> to 
enable delegation, or <Function>sec_login_become_delegate()</Function> or 
<Function>sec_login_become_impersonator()</Function> to become an intermediary, 
the principal can specify optional and required restrictions.
Optional and required restrictions are provided 
for use by applications that have specific 
authorization requirements.  These restrictions, which 
are defined by the application, can 
be set by initiators or intermediaries, and are interpreted and enforced 
by application target servers. 
Servers can ignore optional restrictions that they cannot interpret, but 
they must reject requests associated with a required restriction that 
they cannot interpret.  
Both optional and required restrictions are supplied as 
values of type <StructName Role="typedef">sec_id_opt_req_t</StructName>.  They are inserted in an EPAC 
by the privilege server and evaluated by the 
target server application. 
</Para>
</Sect2>
<Sect2 Id="DCEADG.SECEPA.div.11">
<Title>Compatibility Between Version 1.1 and Pre-Version 1.1 Servers and Clients</Title>
<Para>Prior to DCE Version 1.1, a principal's privilege attributes were stored in a 
privilege attribute certificate (PAC).  At Version 1.1, the PAC was renamed to
EPAC and extended to include the following:
</Para>
<ItemizedList>
<ListItem>
<Para>Target, delegate, optional, and required restrictions.  
</Para>
</ListItem>
<ListItem>
<Para>Extended registry attributes (ERAs), as described in Chapter 29.
</Para>
</ListItem>
</ItemizedList>
<Para>Additionally, authorization credentials can now consist of multiple EPACs, 
as in delegation chains, instead of a single PAC.
</Para>
<Para><?sml-need 3>When a pre-Version 1.1 client interacts with a 
Version 1.1 server or vice versa, the Version 1.1 
server requires an EPAC and the pre-Version 1.1 server requires a PAC. 
</Para>
<Para>For Version 1.1 servers, the security runtime automatically converts  
the PAC supplied by a pre-Version 1.1 client to an EPAC.  
For pre-Version 1.1 servers, the security runtime automatically extracts   
PAC data from the credentials supplied by the Version 1.1 client.  
However, because an EPAC for a delegation chain contains the privilege attributes of 
multiple principals and a PAC contains only one set of privilege attributes, 
the principals engaged in delegation must specify how to handle this issue of 
multiple versus single identities.
</Para>
<Para>When a principal initiates delegation or becomes an intermediary in 
a delegation chain, that principal can specify whether to 
use the privilege attributes of the chain initiator 
or the last intermediary in the chain to construct the PAC required by 
a pre-Version 1.1 server.
This compatibility decision is specified as a value of type 
<StructName Role="typedef">sec_id_compatibility_mode_t</StructName>, which 
is set to one of the following three values:
</Para>
<ItemizedList>
<ListItem>
<Para><Literal>sec_id_compat_mode_none</Literal>
</Para>
<Para>Compatibility mode is off.  The security runtime supplies 
the application server with an unauthenticated PAC.
</Para>
</ListItem>
<ListItem>
<Para><Literal>sec_id_compat_mode_initiator</Literal>
</Para>
<Para>Compatibility mode is on.  The pre-Version 1.1 PAC data is extracted from the 
EPAC of the delegation initiator.
</Para>
</ListItem>
<ListItem>
<Para><Literal>sec_id_compat_mode_caller</Literal>
</Para>
<Para>Compatibility mode is on. 
The pre-Version 1.1 PAC data extracted from the EPAC of the last 
intermediary in the delegation chain. 
</Para>
</ListItem>
</ItemizedList>
</Sect2>
</Sect1>
<Sect1 Id="DCEADG.SECEPA.div.12">
<Title>Calls to Extract Privilege Attribute Information</Title>
<Para>The EPA API <Literal>sec_cred_</Literal><Symbol Role="Variable">*</Symbol><Literal>()</Literal> and 
login API <Literal>sec_login_cred_</Literal><Symbol Role="Variable">*</Symbol><Literal>()</Literal> 
calls extract privilege attribute information.  
These calls return information associated with an opaque handle to an 
authenticated identity.  
</Para>
<Para><?sml-need 3>The <Literal>sec_cred_</Literal><Symbol Role="Variable">*</Symbol><Literal>()</Literal> 
calls are used by servers that have been called by 
a client with authenticated credentials.  The calls 
and the information they return are as follows:
</Para>
<ItemizedList>
<ListItem>
<Para><Function>sec_cred_get_authz_session_info()</Function>
</Para>
<Para>Returns a client's authorization information
<!-- .LI-->
<!-- \*Lsec_cred_get_authz_token(\|)\*O-->
<!-- .P-->
<!-- Returns a shorthand token that -->
<!-- represents an authenticated client's credentials -->
</Para>
</ListItem>
<ListItem>
<Para><Function>sec_cred_get_client_princ_name()</Function>
</Para>
<Para>Returns the principal 
name of the client
</Para>
</ListItem>
<ListItem>
<Para><Function>sec_cred_get_deleg_restrictions()</Function> 
</Para>
<Para>Returns delegate restrictions  
</Para>
</ListItem>
<ListItem>
<Para><Function>sec_cred_get_delegate()</Function>
</Para>
<Para>Returns a credential handle to the privilege attributes
of a delegate in a delegation chain 
</Para>
</ListItem>
<ListItem>
<Para><Function>sec_cred_get_delegation_type()</Function>
</Para>
<Para>Returns the delegation type   
</Para>
</ListItem>
<ListItem>
<Para><Function>sec_cred_get_extended_attrs()</Function>
</Para>
<Para>Returns extended attributes 
</Para>
</ListItem>
<ListItem>
<Para><Function>sec_cred_get_initiator()</Function>
</Para>
<Para>Returns a credential handle to the privilege attributes
of the initiator of a delegation chain
</Para>
</ListItem>
<ListItem>
<Para><Function>sec_cred_get_opt_restrictions()</Function> 
</Para>
<Para>Returns optional restrictions  
</Para>
</ListItem>
<ListItem>
<Para><Function>sec_cred_get_pa_data()</Function>
</Para>
<Para>Returns privilege attributes from a credential handle 
</Para>
</ListItem>
<ListItem>
<?sml-need 3>
<Para><Function>sec_cred_get_req_restrictions()</Function>
</Para>
<Para>Returns required restrictions  
</Para>
</ListItem>
<ListItem>
<Para><Function>sec_cred_get_tgt_restrictions()</Function>
</Para>
<Para>Returns target restrictions  
</Para>
</ListItem>
<ListItem>
<Para><Function>sec_cred_get_v1_pac()</Function>
</Para>
<Para>Returns pre-Version 1.1 privilege attributes 
</Para>
</ListItem>
<ListItem>
<Para><Function>sec_cred_is_authenticated()</Function>
</Para>
<Para>Returns TRUE if the caller's 
privilege attributes 
are authenticated or FALSE otherwise 
</Para>
</ListItem>
</ItemizedList>
<Para>The <Literal>sec_login_cred_</Literal><Symbol Role="Variable">*</Symbol><Literal>()</Literal> calls are used by clients that are part 
of a delegation chain.  The calls 
and the information they return are as follows:
</Para>
<ItemizedList>
<ListItem>
<Para><Function>sec_login_cred_get_delegate()</Function>
</Para>
<Para>Returns the privilege attributes
of a delegate in a delegation chain. 
</Para>
</ListItem>
<ListItem>
<Para><Function>sec_login_cred_get_initiator()</Function>
</Para>
<Para>Returns the privilege attributes
of the initiator of a delegation chain
</Para>
</ListItem>
</ItemizedList>
<Para>The <Literal>sec_cred_</Literal><Symbol Role="Variable">*</Symbol><Literal>()</Literal> and <Literal>sec_login_</Literal><Symbol Role="Variable">*</Symbol><Literal>()</Literal> 
calls discussed in this chapter 
return information about 
authenticated principals 
associated with an opaque credential handle supplied to the call.  
Two credential handles are used:
</Para>
<ItemizedList>
<ListItem>
<Para><StructName Role="typedef">sec_login_handle_t</StructName> (returned by a client-side 
<Function>sec_login_get_current_context()</Function> call)
</Para>
</ListItem>
<ListItem>
<Para><StructName Role="typedef">rpc_authz_cred_handle_t</StructName> (returned by a server-side 
<Function>rpc_inq_auth_caller()</Function> call)
</Para>
</ListItem>
</ItemizedList>
<Para><?sml-need 8>These are handles to all the credentials in a delegation chain.  
The <Function>sec_login_cred_get_initiator()</Function>, 
<Function>sec_login_cred_get_delegate()</Function>, 
<Function>sec_cred_get_initiator()</Function>, and 
<Function>sec_cred_get_delegate()</Function> calls
return a handle of type <StructName Role="typedef">sec_cred_pa_handle_t</StructName>, 
which is a handle to the 
extended privilege attributes of a particular identity in a delegation chain. 
The other <Literal>sec_cred_</Literal><Symbol Role="Variable">*</Symbol><Literal>()</Literal> and 
<Literal>sec_login_</Literal><Symbol Role="Variable">*</Symbol><Literal>()</Literal> calls 
discussed in this chapter take the <StructName Role="typedef">sec_cred_pa_handle_t</StructName> handle 
and return the requested information for the particular identity.
<!-- -->
</Para>
</Sect1>
<Sect1 Id="DCEADG.SECEPA.div.13">
<Title>Disabling Delegation</Title>
<!-- -->
<Para>The login API <Function>sec_login_disable_delegation()</Function> call disables delegation 
for a specified login context.
It returns a new login context of 
type <StructName Role="typedef">sec_login_handle_t</StructName> without any delegation information and 
prevents any further delegation.
<!-- -->
</Para>
</Sect1>
<Sect1 Id="DCEADG.SECEPA.div.14">
<Title>Setting Extended Attributes</Title>
<!-- -->
<Para>The login API <Function>sec_login_set_extended_attrs()</Function> call adds extended 
registry attributes 
to a login context.  The extended registry attributes 
must have been established and attached to 
the object by using the ERA API.  (For more information 
on ERAs, see Chapter 29.)
</Para>
</Sect1>
</Chapter>
<!--+ 11/27/96 19:53:47
    | tagMorph:  $Id: 3.5_epa.sgm,v 1.1.2.8 1996/12/14 20:23:52 wardr Exp $
    | tagMorph library:  $Id: 3.5_epa.sgm,v 1.1.2.8 1996/12/14 20:23:52 wardr Exp $
    | sml-to-docbook:  1.25
    +-->
