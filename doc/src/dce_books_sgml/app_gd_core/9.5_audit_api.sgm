<!--
# COPYRIGHT NOTICE
# Copyright (c) 1990-1996 Open Software Foundation, Inc. 
# ALL RIGHTS RESERVED (DCE). See the file named COPYRIGHT.DCE in the 
# src directory for the full copyright text. 
# 
# 
# HISTORY
# $Log: 9.5_audit_api.sgm,v $
# Revision 1.1.2.9  1996/12/17  19:28:25  damon
# 	Expanded OSF C O P Y R I G H T   N O T I C E
# 	[1996/12/17  19:22:06  damon]
#
# Revision 1.1.2.8  1996/12/14  20:24:06  wardr
# 	{edit,R1.2.2}
# 	penultimate format fixes
# 	[1996/12/14  20:21:56  wardr]
# 
# Revision 1.1.2.7  1996/12/13  22:10:41  wardr
# 	{edit,R1.2.2}
# 	Fixed formatting problems
# 	[1996/12/13  22:08:31  wardr]
# 
# Revision 1.1.2.6  1996/12/12  21:30:21  wardr
# 	{edit,R1.2.2}
# 	Fixed formatting problems
# 	[1996/12/12  21:28:28  wardr]
# 
# Revision 1.1.2.5  1996/12/12  16:49:21  carrig
# 	{enh,R1.2.2}
# 	Minor edits
# 	[1996/12/12  16:47:08  carrig]
# 
# Revision 1.1.2.4  1996/12/06  21:10:00  carrig
# 	{enh,R1.2.2}
# 	Second pass for editor
# 	[1996/12/06  21:07:51  carrig]
# 
# Revision 1.1.2.3  1996/12/05  21:38:51  carrig
# 	{enh,R1.2.2}
# 	First pass to prepare for editing
# 	[1996/12/05  21:36:55  carrig]
# 
# Revision 1.1.2.2  1996/12/02  15:41:00  weir
# 	Removed thinsp entities, corrected other minor errors
# 	[1996/12/02  15:39:10  weir]
# 
# Revision 1.1.2.1  1996/12/01  20:43:23  weir
# 	Initial submission
# 	[1996/12/01  20:41:32  weir]
# 
# 	Initial submission
# 	[1996/11/29  20:35:41  weir]
# 
# $EndLog$
# 
-->
<!-- Fragment document type declaration subset:
ArborText, Inc., 1988-1993, v.4001
<!DOCTYPE Book PUBLIC "-//Davenport//DTD DocBook V2.4//EN" [
]>
-->
<!-- -->
<!-- -->
<!-- OLD HISTORY-->
<!-- Revision 1.1.4.1  1996/03/27  14:13:28  wardr-->
<!-- 	{edit R1.2.1}-->
<!-- 	More Release Edits-->
<!-- 	[1996/03/27  14:13:03  wardr]-->
<!---->
<!-- Revision 1.1.2.1  1995/06/07  14:47:06  rcb-->
<!-- 	edited 1.1 version, PRENTICE HALL reformat-->
<!-- 	[1995/06/07  14:46:11  rcb]-->
<!-- -->
<!-- 	PRENTICE HALL reformat-->
<!-- 	[1995/05/15  18:37:22  rcb]-->
<!-- -->
<!-- 	incorporated 1.1 edits-->
<!-- 	[1995/05/15  18:25:23  rcb]-->
<!-- -->
<!-- 	CREATED as separate chapter file from 9_audit.gpsml; were separate-->
<!-- 	chapters but in same file-->
<!-- 	[1995/03/30  15:16:52  rcb]-->
<!-- -->
<Chapter Id="DCEADG.SECAA.div.1">
<Title>Using the Audit API Functions</Title>
<IndexTerm Id="DCEADG.SECAA.indx.1">
<Primary>audit</Primary>
<Secondary>APIs</Secondary>
</IndexTerm>
<Para>This chapter describes the use of the 
audit API functions to add audit capability to distributed applications
and to write audit trail analysis and examination tools.
</Para>
<Sect1 Id="DCEADG.SECAA.div.2">
<Title>Adding Audit Capability to Distributed Applications</Title>
<IndexTerm Id="DCEADG.SECAA.indx.2">
<Primary>audit</Primary>
<Secondary>APIs</Secondary>
<Tertiary>adding audit capability to distributed applications</Tertiary>
</IndexTerm>
<Para>To record audit events in an audit trail file,
the DCE audit API functions must be called in the distributed
application to perform the following:
</Para>
<OrderedList>
<ListItem>
<Para>Open the audit trail file during the startup of the application.
</Para>
</ListItem>
<ListItem>
<Para>Initialize the audit records at each code point.
</Para>
</ListItem>
<ListItem>
<Para>Add event information to the audit records at each code point.
(This is optional.)
</Para>
</ListItem>
<ListItem>
<Para>Commit the audit records at each code point.
</Para>
</ListItem>
<ListItem>
<Para>Close the audit trail file when the application shuts down.
</Para>
</ListItem>
</OrderedList>
<Para>Note that steps 2, 3, and 4 are repeated in sequence at each code point
in the distributed applcation.
</Para>
<Para>The use of the audit API functions in each of these steps  
is illustrated with the 
bank server example introduced in the previous chapter.
</Para>
<Para>Five code points are identified in the 
bank server program: <Function>acct_open()</Function>, <Function>acct_close()</Function>, 
<Function>acct_withdraw()</Function>, <Function>acct_deposit()</Function>, and 
<Function>acct_transfer()</Function>.  Each code point has been assigned an
event number and defined in the application server's header file as follows:
</Para>
<InformalExample>
<Para><ProgramListing>#define evt_vn_bank_server_acct_open		0x01000000
#define evt_vn_bank_server_acct_close		0x01000001
#define evt_vn_bank_server_acct_withdraw	0x01000002
#define evt_vn_bank_server_acct_deposit		0x01000003
#define evt_vn_bank_server_acct_transfer	0x01000004
</ProgramListing></Para>
</InformalExample>
<Sect2 Id="DCEADG.SECAA.div.3">
<Title>Opening the Audit Trail</Title>
<IndexTerm Id="DCEADG.SECAA.indx.3">
<Primary>audit</Primary>
<Secondary>APIs</Secondary>
<Tertiary>opening an audit trail</Tertiary>
</IndexTerm>
<Para>To open the audit trail file, the main routine of the 
application server uses the <Function>dce_aud_open()</Function> function.
<IndexTerm Id="DCEADG.SECAA.indx.4">
<Primary>audit</Primary>
<Secondary>APIs</Secondary>
<Tertiary><Function>dce_aud_open()</Function></Tertiary>
</IndexTerm>With this function call, the audit trail file can be
</Para>
<ItemizedList>
<ListItem>
<Para>opened for reading or for writing.
</Para>
</ListItem>
<ListItem>
<Para>directed to the default audit trail file or to a specific file.
If <Function>dce_aud_open()</Function> is called without specifying an audit trail file,
(by having NULL as the value of the <Symbol Role="Variable">description</Symbol> parameter),
a default audit trail file is used.  This is the <FirstTerm>central trail</FirstTerm>
file that is accessed by RPC calls to the audit daemon.
</Para>
<Para>If an audit trail file is specified in the 
<Function>dce_aud_open()</Function> call, (through the <Symbol Role="Variable">description</Symbol> parameter),
that file is opened directly by the audit library, bypassing RPCs and the
audit daemon.
</Para>
</ListItem>
</ItemizedList>
<Para>In the bank server application, the function call is as follows:
</Para>
<InformalExample>
<Para><ProgramListing>dce_aud_open(aud_c_trl_open_write, &amp;audit_file, 
        evt_vn_bank_server_acct_open, 
        5, &amp;audit_trail, &amp;status);
</ProgramListing></Para>
</InformalExample>
<Para>In this call, the audit trail file <Literal>audit_file</Literal> is opened for
writing.
The third parameter (<Literal>evt_vn_bank_server_acct_open</Literal>)
specifies the lowest event
number used in the bank server application.  
The fourth parameter (<Literal>5</Literal>) specifies the 
number of events defined.
</Para>
<Para><?sml-need 2>The call returns an audit-trail descriptor
(<Literal>audit_trail</Literal>) that will be used to append audit records to the 
audit trail file.  
</Para>
</Sect2>
<Sect2 Id="DCEADG.SECAA.div.4">
<Title>Initializing the Audit Records</Title>
<IndexTerm Id="DCEADG.SECAA.indx.5">
<Primary>audit</Primary>
<Secondary>APIs</Secondary>
<Tertiary>initializing audit records</Tertiary>
</IndexTerm>
<Para>Audit records can be initialized by using the 
<Literal>dce_aud_start_</Literal><Symbol Role="Variable">*</Symbol><Literal>()</Literal> functions.
This function has five variations, and the use of each variation depends
on the available information about the server.
In general, if you have the RPC binding information about the server,
use the <Function>dce_aud_start()</Function> function.  If not, use the other four variations
of this function, depending on the available information.
The five variations are as follows:
</Para>
<ItemizedList>
<ListItem>
<Para><Function>dce_aud_start()</Function>
</Para>
<Para>For use by DCE RPC-based server applications.
<IndexTerm Id="DCEADG.SECAA.indx.6">
<Primary>audit</Primary>
<Secondary>APIs</Secondary>
<Tertiary><Function>dce_aud_start()</Function></Tertiary>
</IndexTerm></Para>
</ListItem>
<ListItem>
<Para><Function>dce_aud_start_with_server_binding()</Function>
</Para>
<Para>For use by DCE RPC-based client applications.
<IndexTerm Id="DCEADG.SECAA.indx.7">
<Primary>audit</Primary>
<Secondary>APIs</Secondary>
<Tertiary><Function>dce_aud_start_with_server_binding()</Function></Tertiary>
</IndexTerm></Para>
</ListItem>
<ListItem>
<Para><Function>dce_aud_start_with_pac()</Function>
</Para>
<Para>For use by applications that do not use 
DCE RPC, but use the DCE authorization model.
<IndexTerm Id="DCEADG.SECAA.indx.8">
<Primary>audit</Primary>
<Secondary>APIs</Secondary>
<Tertiary><Function>dce_aud_start_with_server_pac()</Function></Tertiary>
</IndexTerm></Para>
</ListItem>
<ListItem>
<Para><Function>dce_aud_start_with_name()</Function>
</Para>
<Para>For use by applications that use neither DCE RPC nor the DCE authorization
model.
<IndexTerm Id="DCEADG.SECAA.indx.9">
<Primary>audit</Primary>
<Secondary>APIs</Secondary>
<Tertiary><Function>dce_aud_start_with_name()</Function></Tertiary>
</IndexTerm></Para>
</ListItem>
<ListItem>
<Para><Function>dce_aud_start_with_uuid()</Function>
</Para>
<Para>For use by RPC-based applications that know their client's identity in UUID
form.
<IndexTerm Id="DCEADG.SECAA.indx.10">
<Primary>audit</Primary>
<Secondary>APIs</Secondary>
<Tertiary><Function>dce_aud_start_with_uuid()</Function></Tertiary>
</IndexTerm></Para>
</ListItem>
</ItemizedList>
<Para>The <Literal>dce_aud_start_</Literal><Symbol Role="Variable">*</Symbol><Literal>()</Literal> functions determine if a specified 
event must be audited based on the subject identity and event outcome that were
defined for that event by the filters.
</Para>
<Para>If the event specifics match the event filters (that is, the event has
to be audited), these functions return a pointer to an audit record buffer.  
If it is determined that the event does not need to be audited, a NULL
pointer is returned, and the application can then discontinue any 
auditing activity.
If it cannot be determined whether the event needs to be audited 
(because the event needs to be audited based on a specific
outcome(s) but the outcome is
not yet known) these functions return a non-NULL pointer.
</Para>
<Para>When an audit record is initialized, the identification of the audit subject
(that is, the client of the distributed application) is recorded.
</Para>
<Para>You can use the <Literal>dce_aud_start_</Literal><Symbol Role="Variable">*</Symbol><Literal>()</Literal> functions to specify the amount
of header information in the audit record. 
<IndexTerm Id="DCEADG.SECAA.indx.11">
<Primary>audit</Primary>
<Secondary>APIs</Secondary>
<Tertiary>specifying amount of header information</Tertiary>
</IndexTerm>You can specify any or a
combination of the following:
</Para>
<ItemizedList>
<ListItem>
<Para>Information on all groups and addresses
</Para>
</ListItem>
<ListItem>
<Para>Information on groups only
</Para>
</ListItem>
<ListItem>
<Para>Information on addresses only.
</Para>
</ListItem>
</ItemizedList>
<Para>Using these functions, you can bypass the filter altogether 
and log the event to the audit trail file 
or display it on the system console.
This option is useful for applications whose events require
unconditional audit actions.
</Para>
<Para>In our example, each of the bank server
routines (<Function>acct_open()</Function>, <Function>acct_close()</Function>, 
<Function>acct_withdraw()</Function>, <Function>acct_deposit()</Function>, <Function>acct_transfer()</Function>) 
will make a <Function>dce_aud_start()</Function> function call.
In the <Function>acct_transfer()</Function> routine, the function call is made as follows:
</Para>
<InformalExample>
<Para><ProgramListing>acct_transfer()

dce_aud_start (evt_vn_bank_server_acct_transfer, 
        h, aud_c_evt_all_info, 
        aud_c_esl_cond_success, &amp;ard, &amp;status);
</ProgramListing></Para>
</InformalExample>
<Para>where <Literal>h</Literal> points to the RPC binding of the client making the
call.
The <Literal>aud_c_evt_all_info</Literal> option
means that all information about the client's groups and addresses 
are included in the audit record header.
The <Literal>aud_c_esl_cond_success</Literal>
event outcome means that the event completed successfully.
</Para>
</Sect2>
<Sect2 Id="DCEADG.SECAA.div.5">
<Title>Adding Event-Specific Information</Title>
<IndexTerm Id="DCEADG.SECAA.indx.12">
<Primary>audit</Primary>
<Secondary>APIs</Secondary>
<Tertiary>adding event-specific information</Tertiary>
</IndexTerm>
<Para>If the <Function>dce_aud_start()</Function> function returns an audit record descriptor to the
audit record buffer (meaning that the event needs to be audited),
the <Function>dce_aud_put_ev_info()</Function> function call can be used to 
add event-specific information to 
the tail of the audit record.  
<IndexTerm Id="DCEADG.SECAA.indx.13">
<Primary>audit</Primary>
<Secondary>APIs</Secondary>
<Tertiary><Function>dce_aud_put_ev_info()</Function></Tertiary>
</IndexTerm></Para>
<Para><?sml-need 3>You can opt not to use the <Function>dce_aud_put_ev_info()</Function>
function if the information provided
by the audit record header is 
already sufficient for your auditing purposes.
</Para>
<Para>If you elect to use this function, it can be called
one or more times, the order of which is preserved in the audit record.
</Para>
<Para>The <Function>dce_aud_put_ev_info()</Function> function has two parameters: 
the <Symbol Role="Variable">ard</Symbol> parameter, which is the pointer to the audit record descriptor,
and the <Symbol Role="Variable">info</Symbol> parameter, which 
is a <StructName Role="typedef">dce_aud_ev_info_t</StructName> type data containing
the event-specific information.  
The programmer can specify the <StructName Role="typedef">dce_aud_ev_info_t</StructName> data type 
to include all the audit information that needs to be collected.
For more information on the formats of the audit record, see the
&DCEDr;.
</Para>
<Para>In the <Function>acct_transfer()</Function> code point of the bank server example, 
if you want to record 
the account numbers of the parties involved in
the transfer and the amount
of each transaction, the data type declarations and the function calls
can be made as follows:
<IndexTerm Id="DCEADG.SECAA.indx.14">
<Primary>audit</Primary>
<Secondary>data type</Secondary>
</IndexTerm></Para>
<InformalExample>
<Para><ProgramListing>dce_aud_ev_info_t info;

/* account numbers and transfer amounts are all unsigned 
   32-bit integers */
info.format = aud_c_evt_info_ulong_int;

info.data = acct_from;
dce_aud_put_ev_info(ard, info, &amp;status);
info.data = acct_to;
dce_aud_put_ev_info(ard, info, &amp;status);
info.data = amount;
dce_aud_put_ev_info(ard, info, &amp;status);
</ProgramListing></Para>
</InformalExample>
</Sect2>
<Sect2 Id="DCEADG.SECAA.div.6">
<Title>Committing an Audit Record</Title>
<IndexTerm Id="DCEADG.SECAA.indx.15">
<Primary>audit</Primary>
<Secondary>APIs</Secondary>
<Tertiary>committing an audit record</Tertiary>
</IndexTerm>
<Para>After the header and the optional tail information 
has been included in the audit record,
the  <Function>dce_aud_commit()</Function> function call is used to write the 
audit record in the audit trail file.
<IndexTerm Id="DCEADG.SECAA.indx.16">
<Primary>audit</Primary>
<Secondary>APIs</Secondary>
<Tertiary><Function>dce_aud_commit()</Function></Tertiary>
</IndexTerm>This function uses the audit trail file previously opened by the
<Function>dce_aud_open()</Function> function.
</Para>
<Para><?sml-need 6>You can specify one of two options in the way the function writes the 
audit record in the audit trail file:
</Para>
<ItemizedList>
<ListItem>
<Para>Return an error status if the storage or logging service is not available
when an attempt is made to write the audit record.
This option can be used if the application program can handle write failures
in the stable storage.
</Para>
</ListItem>
<ListItem>
<Para>If the storage or logging service is not available, keep on trying
until the function is able to write to it.
This option can be used if the audit record must be written to stable storage
before the routine can proceed safely to another task.
</Para>
</ListItem>
</ItemizedList>
<Para>In the bank server example, the function call can be made as follows:
</Para>
<InformalExample>
<Para><ProgramListing><UserInput>dce_aud_commit(audit_trail, ard<Literal>, </Literal><Symbol Role="Variable">options</Symbol><Literal>, </Literal><Symbol Role="Variable">format</Symbol><Literal>, </Literal><Symbol Role="Variable">outcome</Symbol><Literal>, &amp;status);
</Literal></UserInput></ProgramListing></Para>
</InformalExample>
<Para>The <Literal>audit_trail</Literal> parameter is the
trail descriptor returned in the <Function>dce_aud_open()</Function> call made earlier.
The <Literal>ard</Literal> parameter is the audit record descriptor returned in the
<Function>dce_aud_start()</Function> call (and used in the <Function>dce_aud_put_ev_info()</Function>
function call).  
The <Symbol Role="Variable">format</Symbol> parameter specifies a format version number of
the event-specific information.  The initial version number should be zero, 
and be incremented when the format changes.  For example, the data type used for
account numbers might change from 32-bit integer to UUID.  The event outcome
must be provided in this call, even if it has been provided in the
<Function>dce_aud_start()</Function> call made earlier.  If the event outcome (except
<Literal>aud_c_esl_cond_unknown</Literal>) is provided in both calls, the values must
be the same.
</Para>
</Sect2>
<Sect2 Id="DCEADG.SECAA.div.7">
<Title>Closing an Audit Trail File</Title>
<IndexTerm Id="DCEADG.SECAA.indx.17">
<Primary>audit</Primary>
<Secondary>APIs</Secondary>
<Tertiary>closing an audit trail file</Tertiary>
</IndexTerm>
<Para>The audit trail file 
must be closed using the <Function>dce_aud_close()</Function> function 
when the application shuts down (because of 
the <Function>rpc_mgmt_stop_server_listening()</Function> 
function call or other exceptional conditions).
<IndexTerm Id="DCEADG.SECAA.indx.18">
<Primary>audit</Primary>
<Secondary>APIs</Secondary>
<Tertiary><Function>dce_aud_close()</Function></Tertiary>
</IndexTerm>For example, to close the trail,
the bank server's main program can make the following function
call: 
</Para>
<InformalExample>
<Para><ProgramListing>dce_aud_close(audit_trail, &amp;status);
</ProgramListing></Para>
</InformalExample>
<Para>This function flushes buffered audit records to stable 
storage and releases the memory allocated for the trail descriptor.
</Para>
</Sect2>
</Sect1>
<Sect1 Id="DCEADG.SECAA.div.8">
<Title>Writing Audit Trail Analysis and Examination Tools</Title>
<IndexTerm Id="DCEADG.SECAA.indx.19">
<Primary>audit</Primary>
<Secondary>trail file</Secondary>
<Tertiary>writing analysis and examination tools</Tertiary>
</IndexTerm>
<Para>The audit APIs can be used to write audit trail analysis and examination 
tools that selectively review the following:
</Para>
<ItemizedList>
<ListItem>
<Para>Events that are invoked by one or more subjects, for example, principals,
groups, and cells
</Para>
</ListItem>
<ListItem>
<Para>Events that have a specific outcome
</Para>
</ListItem>
<ListItem>
<Para>Events that occurred during a specified time period
</Para>
</ListItem>
<ListItem>
<Para>Events that have specific event IDs
</Para>
</ListItem>
</ItemizedList>
<Para>In its most basic form, an
audit trail analysis and examination tool must perform five functions:
</Para>
<ItemizedList>
<ListItem>
<Para>Open an audit trail file for reading
</Para>
</ListItem>
<ListItem>
<Para>Read the audit records into a buffer
</Para>
</ListItem>
<ListItem>
<Para>Transform the audit records into human-readable form
</Para>
</ListItem>
<ListItem>
<Para>Discard the audit record
</Para>
</ListItem>
<ListItem>
<Para>Close the audit trail file
</Para>
</ListItem>
</ItemizedList>
<Para>These functions and the APIs that are used for each 
are discussed in the following sections.
</Para>
<Sect2 Id="DCEADG.SECAA.div.9">
<Title>Opening an Audit Trail File for Reading</Title>
<IndexTerm Id="DCEADG.SECAA.indx.20">
<Primary>audit</Primary>
<Secondary>APIs</Secondary>
<Tertiary>opening audit trail file for reading</Tertiary>
</IndexTerm>
<Para>To open the audit trail file for reading, use the <Function>dce_aud_open()</Function>
function and specify <Literal>aud_c_trl_open_read</Literal> 
as the value for the <Symbol Role="Variable">flags</Symbol> parameter.
<IndexTerm Id="DCEADG.SECAA.indx.21">
<Primary>audit</Primary>
<Secondary>APIs</Secondary>
<Tertiary><Function>dce_aud_open()</Function></Tertiary>
</IndexTerm>In this case, the values for the <Symbol Role="Variable">first_evt_number</Symbol> and <Symbol Role="Variable">num_of_evts</Symbol>
does not affect the call.
For example:
</Para>
<InformalExample>
<Para><ProgramListing>dce_aud_open(aud_c_trl_open_read, AUDIT_TRAIL_FILE,
        0, 0, &amp;out_trail, status);
</ProgramListing></Para>
</InformalExample>
</Sect2>
<Sect2 Id="DCEADG.SECAA.div.10">
<Title>Reading the Desired Audit Records into a Buffer</Title>
<IndexTerm Id="DCEADG.SECAA.indx.22">
<Primary>audit</Primary>
<Secondary>APIs</Secondary>
<Tertiary>reading audit records into a buffer</Tertiary>
</IndexTerm>
<Para>After opening the audit trail file, you can use the <Function>dce_aud_next()</Function>
function to retrieve audit records.
Audit records are stored in the audit trail file in binary form.
The <Function>dce_aud_next()</Function> function does not convert the file into
readable form.
You must use the <Function>dce_aud_print()</Function> function to translate the 
audit record into readable form. 
<IndexTerm Id="DCEADG.SECAA.indx.23">
<Primary>audit</Primary>
<Secondary>APIs</Secondary>
<Tertiary><Function>dce_aud_next()</Function></Tertiary>
</IndexTerm></Para>
<Para>The <Function>dce_aud_next()</Function> function allows you to
specify a criteria that will be used in 
selecting the records that will be read from the file.
This criteria is known as <FirstTerm>predicates</FirstTerm> 
and is expressed by setting the condition on the value 
of certain attributes.
<IndexTerm Id="DCEADG.SECAA.indx.24">
<Primary>audit</Primary>
<Secondary>record</Secondary>
<Tertiary>predicates</Tertiary>
</IndexTerm>
<IndexTerm Id="DCEADG.SECAA.indx.25">
<Primary>audit</Primary>
<Secondary>record</Secondary>
<Tertiary>criteria for selection</Tertiary>
</IndexTerm>The condition is set by using any of the following operators:
<Literal>=</Literal> (equal to), <Literal>></Literal> (greater than), and <Literal>&lt;</Literal> (less than).
</Para>
<Para>Predicates can be expressed in any of the following
forms:
</Para>
<ItemizedList>
<ListItem>
<Para><Symbol Role="Variable">attribute</Symbol>=<Symbol Role="Variable">value</Symbol>
</Para>
</ListItem>
<ListItem>
<Para><Symbol Role="Variable">attribute</Symbol>><Symbol Role="Variable">value</Symbol>
</Para>
</ListItem>
<ListItem>
<Para><Symbol Role="Variable">attribute</Symbol>&lt;<Symbol Role="Variable">value</Symbol>
</Para>
</ListItem>
</ItemizedList>
<Para>The following list summarizes these attributes and their acceptable
values:
</Para>
<VariableList>
<VarListEntry>
<Term><Literal>SERVER</Literal></Term>
<ListItem>
<Para>UUID of the principal that generated the record
</Para>
</ListItem>
</VarListEntry>
<VarListEntry>
<Term><Literal>EVENT</Literal></Term>
<ListItem>
<Para>Audit event number
</Para>
</ListItem>
</VarListEntry>
<VarListEntry>
<Term><Literal>OUTCOME</Literal></Term>
<ListItem>
<Para>Event outcome of the record
</Para>
</ListItem>
</VarListEntry>
<VarListEntry>
<Term><Literal>STATUS</Literal></Term>
<ListItem>
<Para>Authorization status of the application client
</Para>
</ListItem>
</VarListEntry>
<VarListEntry>
<Term><Literal>CLIENT</Literal></Term>
<ListItem>
<Para>UUID of the client principal
</Para>
</ListItem>
</VarListEntry>
<VarListEntry>
<Term><Literal>TIME</Literal></Term>
<ListItem>
<Para>Time when the record was generated. 
</Para>
</ListItem>
</VarListEntry>
<VarListEntry>
<Term><Literal>CELL</Literal></Term>
<ListItem>
<Para>The UUID of the application client's cell
</Para>
</ListItem>
</VarListEntry>
<VarListEntry>
<Term><Literal>GROUP</Literal></Term>
<ListItem>
<Para>The UUID of the application client's group or groups
</Para>
</ListItem>
</VarListEntry>
<VarListEntry>
<Term><Literal>ADDR</Literal></Term>
<ListItem>
<Para>The address (binding handle) of the client
</Para>
</ListItem>
</VarListEntry>
<VarListEntry>
<Term><Literal>FORMAT</Literal></Term>
<ListItem>
<Para>The format version number of the audit event record
</Para>
</ListItem>
</VarListEntry>
</VariableList>
<Para>Details of these attributes, their values, and the allowable operators
are discussed in the &DCEDr;.
</Para>
<Para><?sml-need 4>For example, to have the function retrieve audit records that pertain to
the event number 0xC01000001 only, you can set the predicate to 
the following:
</Para>
<InformalExample>
<Para><ProgramListing>EVENT=0xC01000001
</ProgramListing></Para>
</InformalExample>
<Para>If the predicate parameter is set to NULL (that is, no criteria),
the next audit record is read.
For example, to read the next audit record in a previously opened audit
trail file, the following call is made:
</Para>
<InformalExample>
<Para><ProgramListing>dce_aud_next(out_trail, NULL, &amp;out_ard, status);
</ProgramListing></Para>
</InformalExample>
<Para>You can specify multiple predicates, in which case the predicates
are treated as a logical AND condition.
</Para>
<Para>The <Function>dce_aud_next()</Function> function
returns a pointer to the record that was read.  This 
pointer is used by the <Function>dce_aud_print()</Function>, <Function>dce_aud_get_ev_info()</Function>, 
and <Function>dce_aud_get_header()</Function> functions in transforming the audit
records into ASCII format.
</Para>
</Sect2>
<Sect2 Id="DCEADG.SECAA.div.11">
<Title>Transforming the Audit Record into Readable Text</Title>
<IndexTerm Id="DCEADG.SECAA.indx.26">
<Primary>audit</Primary>
<Secondary>APIs</Secondary>
<Tertiary>transforming audit records into text</Tertiary>
</IndexTerm>
<Para>After reading in the desired audit record 
by using the <Function>dce_aud_next()</Function>
function, these binary audit records must be transformed into
human-readable form.
</Para>
<Para>You can use any of the following three functions to transform
the audit record information to human readable form:
</Para>
<ItemizedList>
<ListItem>
<Para><Function>dce_aud_print()</Function>
</Para>
<Para>Formats the entire audit record (header and tail) into ASCII format.
<IndexTerm Id="DCEADG.SECAA.indx.27">
<Primary>audit</Primary>
<Secondary>APIs</Secondary>
<Tertiary><Function>dce_aud_print()</Function></Tertiary>
</IndexTerm></Para>
</ListItem>
<ListItem>
<Para><Function>dce_aud_get_header()</Function>
</Para>
<Para>Obtains the header information of the audit record and formats it 
into human readable form.
<IndexTerm Id="DCEADG.SECAA.indx.28">
<Primary>audit</Primary>
<Secondary>APIs</Secondary>
<Tertiary><Function>dce_aud_get_header()</Function></Tertiary>
</IndexTerm></Para>
</ListItem>
<ListItem>
<Para><Function>dce_aud_get_ev_info()</Function>
</Para>
<Para>Obtains the event-specific information in the tail of the audit record and
formats it into human readable form.
<IndexTerm Id="DCEADG.SECAA.indx.29">
<Primary>audit</Primary>
<Secondary>APIs</Secondary>
<Tertiary><Function>dce_aud_get_ev_info()</Function></Tertiary>
</IndexTerm></Para>
</ListItem>
</ItemizedList>
<Para><?sml-need 5>The <Function>dce_aud_next()</Function> function returns the address of the audit record
to these functions.
These functions then allocate memory for the ASCII-format buffer
(using <Function>malloc()</Function>) and fills it with the ASCII representation of the 
audit record.
The user must explicitly release this memory (using <Function>free()</Function>) when
all audit record retrieving and transforming tasks have been accomplished.
</Para>
</Sect2>
<Sect2 Id="DCEADG.SECAA.div.12">
<Title>Discarding the Audit Record</Title>
<IndexTerm Id="DCEADG.SECAA.indx.30">
<Primary>audit</Primary>
<Secondary>APIs</Secondary>
<Tertiary>discarding an audit record</Tertiary>
</IndexTerm>
<Para>The <Function>dce_aud_discard()</Function> function frees the memory allocated to the
binary version of the audit record, that is, the structure returned by
the <Function>dce_aud_next()</Function> function.
The <Function>dce_aud_discard()</Function> function does not free the structures allocated
by <Function>dce_aud_print()</Function>, <Function>dce_aud_get_header()</Function>, or
<Function>dce_aud_get_ev_info()</Function>.
<IndexTerm Id="DCEADG.SECAA.indx.31">
<Primary>audit</Primary>
<Secondary>APIs</Secondary>
<Tertiary><Function>dce_aud_discard()</Function></Tertiary>
</IndexTerm></Para>
</Sect2>
<Sect2 Id="DCEADG.SECAA.div.13">
<Title>Closing the Audit Trail File</Title>
<IndexTerm Id="DCEADG.SECAA.indx.32">
<Primary>audit</Primary>
<Secondary>APIs</Secondary>
<Tertiary>closing an audit trail file</Tertiary>
</IndexTerm>
<Para>Finally, the audit trail file from which the audit records were read
must be closed using the <Function>dce_aud_close()</Function> function.
<IndexTerm Id="DCEADG.SECAA.indx.33">
<Primary>audit</Primary>
<Secondary>APIs</Secondary>
<Tertiary><Function>dce_aud_close()</Function></Tertiary>
</IndexTerm></Para>
</Sect2>
</Sect1>
</Chapter>
<!--+ 11/27/96 19:53:47
    | tagMorph:  $Id: 9.5_audit_api.sgm,v 1.1.2.9 1996/12/17 19:28:25 damon Exp $
    | tagMorph library:  $Id: 9.5_audit_api.sgm,v 1.1.2.9 1996/12/17 19:28:25 damon Exp $
    | sml-to-docbook:  1.25
    +-->
