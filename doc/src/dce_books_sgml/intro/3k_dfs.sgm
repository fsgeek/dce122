<!--
# @OSF_COPYRIGHT@
# 
# 
# HISTORY
# $Log: 3k_dfs.sgm,v $
# Revision 1.1.2.7  1996/12/11  15:33:06  carrig
# 	{enh,R1.2.2}
# 	Scaled graphics
# 	[1996/12/11  15:31:51  carrig]
#
# Revision 1.1.2.6  1996/12/09  22:47:32  carrig
# 	{enh,R1.2.2}
# 	Minor changes
# 	[1996/12/09  22:46:27  carrig]
# 
# Revision 1.1.2.5  1996/11/29  20:43:43  carrig
# 	{enh,R1.2.2}
# 	No change
# 	[1996/11/29  20:42:24  carrig]
# 
# Revision 1.1.2.4  1996/11/05  20:11:47  weir
# 	Cleaned up history
# 	[1996/11/05  20:10:52  weir]
# 
# Revision 1.1.2.3  1996/10/30  17:50:57  carrig
# 	{enh,R1.2.2}
# 	Ready for editing
# 	[1996/10/30  17:49:33  carrig]
# 
# Revision 1.1.2.2  1996/10/29  19:06:15  carrig
# 	{enh,R1.2.2}
# 	Graphics
# 	[1996/10/29  19:01:44  carrig]
# 
# Revision 1.1.2.1  1996/10/28  19:42:25  wardr
# 	{edit,R1.2.2}
# 	Initial checkin after sgml conversion
# 	[1996/10/28  19:41:32  wardr]
# 
# Revision 1.1.1.2  1996/10/28  19:41:32  wardr
# 	{edit,R1.2.2}
# 	Initial checkin after sgml conversion
# 
# $EndLog$
-->
<!---->
<!-- Fragment document type declaration subset:
ArborText, Inc., 1988-1993, v.4001
<!DOCTYPE Book PUBLIC "-//Davenport//DTD DocBook V2.4//EN" [
]>
-->
<!--  COPYRIGHT NOTICE-->
<!--  Copyright (c) 1990, 1991, 1992, 1993 Open Software Foundation, Inc.-->
<!--  ALL RIGHTS RESERVED (DCE).  See the file named COPYRIGHT.DCE in the-->
<!--  src directory for the full copyright text.-->
<!---->
<!---->
<!-- HISTORY-->
<!-- Revision 1.1.8.1  1996/10/14  16:39:17  weir-->
<!-- 	No change-->
<!-- 	[1996/10/14  16:38:27  weir]-->
<!---->
<!-- Revision 1.1.6.1  1996/03/21  14:48:35  wardr-->
<!-- 	{edit R1.2.1}-->
<!-- 	Release Edits-->
<!-- 	[1996/03/21  14:47:35  wardr]-->
<!-- -->
<!-- Revision 1.1.4.8  1995/06/02  15:25:02  buckler-->
<!-- 	PRENTICE HALL reformat.-->
<!-- 	[1995/06/01  20:59:51  buckler]-->
<!-- -->
<!-- 	Incorporated 1.1 edits.-->
<!-- 	[1995/05/05  22:16:48  buckler]-->
<!-- -->
<!-- Revision 1.1.4.7  1994/10/19  20:23:35  willie-->
<!-- 	{enh, 11783, R1.1}-->
<!-- 	Incorporated selected edits from edit pass.-->
<!-- 	[1994/10/19  20:22:52  willie]-->
<!-- -->
<!-- Revision 1.1.4.6  1994/08/05  14:44:51  jeff-->
<!-- 	{defect, 11180, R1.1}-->
<!-- 	Incorporate DFS/NFS Gateway documentation and also make a number of-->
<!-- 	small editorial and technical clarifications.-->
<!-- 	[1994/08/05  14:44:15  jeff]-->
<!-- -->
<!-- Revision 1.1.4.5  1993/01/29  17:18:26  cjd-->
<!-- 	Embedded copyright notice-->
<!-- 	[1993/01/29  17:02:04  cjd]-->
<!-- -->
<!-- Revision 1.1.4.4  1993/01/19  19:54:52  steiner-->
<!-- 	Small editing changes from Jeff Kaminski.-->
<!-- 	[1993/01/19  19:53:18  steiner]-->
<!-- -->
<!-- Revision 1.1.4.3  1992/11/24  15:45:14  steiner-->
<!-- 	Fixed coding conventions.-->
<!-- 	[1992/11/24  15:27:46  steiner]-->
<!-- -->
<!-- Revision 1.1.4.2  1992/09/01  15:59:58  weir-->
<!-- 	Moved to 1.0.2 tree-->
<!-- 	[1992/09/01  15:48:44  weir]-->
<!-- -->
<!-- Revision 1.1.2.2  1992/03/06  16:31:38  steiner-->
<!-- 	Eddie's edits.-->
<!-- 	[1992/03/06  15:21:41  steiner]-->
<!-- -->
<!-- Revision 1.1  1992/01/29  15:43:16  damon-->
<!-- 	Initial revision-->
<!-- -->
<!---->
<Sect1 Id="ITODCE.T3K.div.1">
<Title>DCE Distributed File Service</Title>
<IndexTerm Id="ITODCE.T3K.indx.1" Significance="Preferred">
<Primary>DFS</Primary>
</IndexTerm>
<Para>Distributed systems can provide many advantages over centralized systems, such
as higher availability of data and resources, the ability to share information
throughout a very large (even worldwide) system, and efficient use of special
computing functionality.
</Para>
<Para>A distributed file system is an example of an application that can take
advantage of all of these aspects of a distributed system.  It can make files
highly available through replication, making it possible to access a copy of
a file even if one of the machines on which the file is stored goes down.  A
distributed file system can provide access to files from anywhere in the world,
allowing cooperation among geographically dispersed users.  A distributed file
system can also give users on machines with very little storage space the
ability to access and store data on machines with much more disk space
available.
</Para>
<Para><?sml-need 7>DCE DFS is a distributed client/server
application built on the underlying DCE services.  It takes full advantage of
the lower-level DCE components (such as RPC, the security service, and the
directory service).  The following subsections describe DFS and the
configuration of its components, and they provide various user perspectives
on DFS.
</Para>
<Sect2 Id="ITODCE.T3K.div.2">
<Title>What is DFS?</Title>
<Para>DFS is a distributed application that manages information in the form of a
file system.  This section describes the units into which DFS data is organized,
the active components that manage that data, and the benefits of DFS.
</Para>
<Sect3 Id="ITODCE.T3K.div.3">
<Title>DFS Data Organization</Title>
<IndexTerm Id="ITODCE.T3K.indx.2">
<Primary>DFS</Primary>
<Secondary>data organization</Secondary>
</IndexTerm>
<Para>DFS data is organized at three levels. (See Figure 3-20.)
The three levels of DFS data are as follows, from smallest to
largest:
</Para>
<ItemizedList>
<ListItem>
<Para>Files and directories
<IndexTerm Id="ITODCE.T3K.indx.3">
<Primary>files</Primary>
</IndexTerm>
<IndexTerm Id="ITODCE.T3K.indx.4">
<Primary>directories</Primary>
<Secondary>DFS</Secondary>
</IndexTerm></Para>
<Para>The unit of user data.  Directories organize files (and other
directories) into a hierarchical tree structure.
</Para>
</ListItem>
<ListItem>
<Para>Filesets
<IndexTerm Id="ITODCE.T3K.indx.5">
<Primary>fileset</Primary>
</IndexTerm></Para>
<Para>The unit of administration.  A fileset is a subtree of
files and directories that is no larger than a disk or partition (or logical
volume, if supported).  The fileset is a convenient grouping of files for
administrative purposes; for example, the subtree of files pertaining to a
particular project can be grouped in the same fileset.
</Para>
</ListItem>
<ListItem>
<Para>Aggregates
<IndexTerm Id="ITODCE.T3K.indx.6">
<Primary>aggregate</Primary>
</IndexTerm></Para>
<Para>The unit of disk storage, similar to a disk partition.
It is also the unit of fileset exporting, which makes the data in filesets
available to users of DFS. It can contain one or more filesets.
</Para>
</ListItem>
</ItemizedList>
<?sml-need 4.0i>
<Figure>
<Title>Files, Directories, Filesets, and Aggregates</Title>
<Graphic Format="EPS" Scalefit="1" Reprowid="300" Reprodep="300" Entityref="ITODCE.T3K.pic.1"></Graphic>
</Figure>
<!-- .so intro/pic/3k_dfs_18.pic-->
</Sect3>
<Sect3 Id="ITODCE.T3K.div.4">
<Title>DFS Components</Title>
<IndexTerm Id="ITODCE.T3K.indx.7">
<Primary>DFS</Primary>
<Secondary>components</Secondary>
</IndexTerm>
<Para>DFS consists of several components.  This section briefly describes each of
these components, discussing the software that runs on DCE client machines (the
cache manager), then the software that runs on DCE file server machines (the
file exporter, token manager, and DCE Local File System), and finally the
administrative server processes, which typically run on DFS file server
machines (the fileset server, basic overseer server, replication server,
update server, fileset location server, and backup server).
It also briefly describes the administrative tools used to monitor DFS use
and activity (Scout and the <Literal>dfstrace</Literal> utility), and it describes the
DFS/NFS secure gateway, which provides authenticated access to DFS from NFS
clients.
</Para>
<Para><IndexTerm Id="ITODCE.T3K.indx.8">
<Primary>cache manager</Primary>
</IndexTerm></Para>
<Sect4 Id="ITODCE.T3K.div.5">
<Title>Cache Manager</Title>
<Para>The cache manager is the client side of DFS. The cache manager runs on any
machine that is acting as a DFS client.  It takes a user's file system request
and looks in a local cache to see if a copy of the data is already on the local
system.  If it does not find the data in the local cache, the cache manager
sends a request for the data to the file server machine and caches the data
locally, either on disk or in memory.
</Para>
<Para>Because files are cached on the client, a local copy of a cached file can
subsequently be accessed instead of the remote copy on the file server machine.
As a result, network traffic to the file server machine, as well as file server
machine load, is much lighter than if the client had to go to the server each
time it needed to access a file.
<IndexTerm Id="ITODCE.T3K.indx.9">
<Primary>file exporter</Primary>
</IndexTerm></Para>
</Sect4>
<Sect4 Id="ITODCE.T3K.div.6">
<Title>File Exporter</Title>
<Para>The file exporter is the server side of DFS. The file exporter runs on a DFS
file server machine, where it handles requests from clients for the files that
it manages.  The file exporter receives an RPC call and accesses its own local
file system, which can be the DCE Local File System (DCE LFS) or another file
system such as a UNIX File System (UFS), to service the request.  Using the
token manager, it handles the synchronization of different clients concurrently
accessing the same file and returns the requested information to the client.
<IndexTerm Id="ITODCE.T3K.indx.10">
<Primary>token manager</Primary>
</IndexTerm>
<IndexTerm Id="ITODCE.T3K.indx.11">
<Primary>tokens</Primary>
</IndexTerm></Para>
</Sect4>
<Sect4 Id="ITODCE.T3K.div.7">
<Title>Token Manager</Title>
<Para>The token manager runs on a file server machine to synchronize access to files
by multiple clients.  It does this by issuing <FirstTerm>tokens</FirstTerm>, which represent the
ability to perform operations.  The tokens that a token manager issues to DFS
clients carry various access rights, usually read or write.  There are four
different kinds of tokens: data tokens for access to file and directory data,
status tokens for access to file and directory status, lock tokens for locking
a portion of a file, and open tokens for opening a file.
</Para>
<Para><?sml-need 7>The token manager on the server side cooperates with the token management
layer in the cache manager (on the client side) to manage tokens.  If a client
requests an operation that conflicts with a token that another client holds,
the token manager must revoke the existing token and grant a new token before
the requested operation can proceed.
<IndexTerm Id="ITODCE.T3K.indx.12">
<Primary>LFS</Primary>
</IndexTerm>
<IndexTerm Id="ITODCE.T3K.indx.13">
<Primary>Local File System</Primary>
<See>LFS</See>
</IndexTerm></Para>
</Sect4>
<Sect4 Id="ITODCE.T3K.div.8">
<Title>DCE Local File System</Title>
<Para>DCE LFS is the physical file system provided with
DCE. It manages the storage of files on a disk.  The scope of DCE LFS is a
single computer.  LFS is analogous to a UFS.  However, DCE LFS is more
powerful than most local UFSs since it includes features that result
in greater capabilities than a distributed file service based on a traditional
UFS.  These capabilities include the ability to use more flexible
data protection in the form of DCE ACLs; the ability to
replicate, back up, and even move different parts of the file system without
interruption to service; and the use of logging for fast recovery after a
crash (in contrast to UFSs, which must execute the time-consuming
<Literal>fsck</Literal> command).  DCE LFS also includes support for DCE cells; for example,
the owner of a file or the name in an entry on an ACL can be a
name from a foreign cell.
</Para>
<Para>A UFS can be used as a file server machine's physical file
system as an alternative or complement to DCE LFS. DFS can export a UFS, issue
synchronization tokens for files in a UFS, and perform fileset operations
such as dump and restore on a UFS. However, there is only one fileset per UFS
partition, which results in large filesets; and, unlike DCE LFS filesets, UFS
filesets cannot be replicated or moved.  Although UFS systems are supported in
DFS, a file server machine that uses DCE LFS has more functionality than a file
server machine that uses only UFS.
<IndexTerm Id="ITODCE.T3K.indx.14">
<Primary>fileset</Primary>
<Secondary>server</Secondary>
</IndexTerm></Para>
</Sect4>
<Sect4 Id="ITODCE.T3K.div.9">
<Title>Fileset Server</Title>
<Para>The fileset server allows administrators to create, delete, move, and perform
other operations on filesets.
For example, the fileset server enables an administrator to move a fileset from
one file server machine to another for load balancing.
(If DCE LFS is not being used as the physical file system, an entire partition
is treated as a single fileset; in this case, some fileset operations may not
be supported.)
<IndexTerm Id="ITODCE.T3K.indx.15">
<Primary>basic overseer server</Primary>
</IndexTerm></Para>
</Sect4>
<Sect4 Id="ITODCE.T3K.div.10">
<Title>Basic Overseer Server</Title>
<Para>The basic overseer server, or BOS server, monitors the DFS processes that run
on a server and restarts them when needed.  The BOS server maintains information
about the processes and responds to administrative requests for that
information.
<IndexTerm Id="ITODCE.T3K.indx.16">
<Primary>replication server</Primary>
</IndexTerm>
<IndexTerm Id="ITODCE.T3K.indx.17">
<Primary>consistency</Primary>
<Secondary>in DFS</Secondary>
</IndexTerm>
<IndexTerm Id="ITODCE.T3K.indx.18">
<Primary>replication</Primary>
<Secondary>in DFS</Secondary>
</IndexTerm></Para>
</Sect4>
<Sect4 Id="ITODCE.T3K.div.11">
<Title>Replication Server</Title>
<Para>The replication server is an administrative server that handles replication
of filesets.  For example, an administrator can create read-only copies of a
fileset on multiple file server machines.  The replication server updates the
replicas either manually, at the request of an administrator, or automatically,
as data in the fileset changes.  With replication, even if a file server machine
that houses one copy of a fileset goes down, another copy of the fileset is
still available on another file server machine.
<IndexTerm Id="ITODCE.T3K.indx.19">
<Primary>update server</Primary>
</IndexTerm>
<IndexTerm Id="ITODCE.T3K.indx.20">
<Primary><Command>upclient</Command> process</Primary>
</IndexTerm>
<IndexTerm Id="ITODCE.T3K.indx.21">
<Primary><Command>upserver</Command> process</Primary>
</IndexTerm></Para>
</Sect4>
<Sect4 Id="ITODCE.T3K.div.12">
<Title>Update Server</Title>
<Para>The update server provides the ability to distribute binary files or
administrative information to machines configured as DFS servers.  The update
server consists of the <Command>upclient</Command> and <Command>upserver</Command> processes.  The
<Command>upclient</Command> software runs on a machine that needs to receive new versions
of the binary files or administrative information.  The <Command>upserver</Command> software
runs on a master machine and on request propagates any changes to binaries or
administrative information to the machines running the <Command>upclient</Command> software.
<IndexTerm Id="ITODCE.T3K.indx.22">
<Primary>fileset</Primary>
<Secondary>location server</Secondary>
</IndexTerm></Para>
</Sect4>
<Sect4 Id="ITODCE.T3K.div.13">
<Title>Fileset Location Server</Title>
<Para>The fileset location server, or FL server, provides a replicated directory
service that keeps track of the site (file server machine and aggregate) at
which each fileset resides.  The FL server provides a lookup service analogous
to the service CDS provides, with the exception that the FL server is
specialized for DFS. It provides fileset location transparency; that is, users can
access a fileset simply by knowing its name; they do not need to know the
fileset's location.  As a result, a fileset can be moved without users and
applications being aware of the move.  DFS automatically updates the fileset's
location in the fileset location database (FLDB).
<IndexTerm Id="ITODCE.T3K.indx.23">
<Primary>backup server</Primary>
</IndexTerm></Para>
</Sect4>
<Sect4 Id="ITODCE.T3K.div.14">
<Title>Backup Server</Title>
<Para>The backup server is a facility for backing up data on file server machines.
The backup server maintains backup records in the replicated backup database.
It maintains a schedule for the backing up of file system data, and it has the
ability to perform both full and incremental dumps.  The unit of backup is the
fileset.
<IndexTerm Id="ITODCE.T3K.indx.24">
<Primary>Scout</Primary>
</IndexTerm></Para>
</Sect4>
<Sect4 Id="ITODCE.T3K.div.15">
<Title>Scout</Title>
<Para>The Scout administrative tool collects and displays information about the file
exporters running on file server machines, enabling a system administrator to
monitor the use of DFS.
<IndexTerm Id="ITODCE.T3K.indx.25">
<Primary><Literal>dfstrace</Literal> utility</Primary>
</IndexTerm></Para>
</Sect4>
<Sect4 Id="ITODCE.T3K.div.16">
<Title>The <Literal>dfstrace</Literal> Utility</Title>
<Para>The <Literal>dfstrace</Literal> utility allows sophisticated administrators and system
developers to trace DFS processes that run in either the user-space or the
kernel.  The utility consists of a suite of commands that provide low-level
diagnostic and debugging information.
<IndexTerm Id="ITODCE.T3K.indx.26">
<Primary>DFS/NFS gateway</Primary>
</IndexTerm></Para>
</Sect4>
<Sect4 Id="ITODCE.T3K.div.17">
<Title>DFS/NFS Secure Gateway</Title>
<Para>The DFS/NFS secure gateway provides authenticated access to DFS from NFS
clients.  Users who have DCE accounts can authenticate to DCE via a DFS client
configured as a gateway server and access DFS data according to their DCE
identities.  Administrators can give users the ability to authenticate to DCE
from NFS clients, or administrators can reserve the ability to grant
authenticated access from a gateway server only.
</Para>
<Para>Some DFS components run in the host machine's kernel.  These are the cache
manager and token management layer on DFS client machines; and the file
exporter, token manager, and DCE LFS on file server machines.
</Para>
</Sect4>
</Sect3>
<Sect3 Id="ITODCE.T3K.div.18">
<Title>Features of DCE DFS</Title>
<IndexTerm Id="ITODCE.T3K.indx.27">
<Primary>DFS</Primary>
<Secondary>features</Secondary>
</IndexTerm>
<Para>DCE DFS has the following features:
</Para>
<ItemizedList>
<ListItem>
<Para>Uniform file access
</Para>
<Para>DFS is based on a global namespace.  A DFS file is accessed by the same name no
matter where in the distributed system it is accessed from.  Users do not need
to know the network address or name of the file server machine on which the
file is located to name and access the file.  For example, the file
<Literal>/.../cs.univ.edu/fs/usr/ziggy/thesis</Literal> can be addressed by that name
from anywhere in DCE, including from foreign cells.
</Para>
</ListItem>
<ListItem>
<Para>Intracell location transparency
</Para>
<Para>Data can move from one location to another within a cell without a user or
programmer being affected by the move.  Because of this transparency, an
administrator can move a fileset from one file server machine to another for
load balancing, for example, without disturbing users.
</Para>
</ListItem>
<ListItem>
<Para>Performance
</Para>
<Para>DFS is a high-performance file service.  Fast response is achieved in part
through the caching of file and directory data on the DFS client machine.  This
reduces the time it takes for a user to access a file, and it also reduces the
traffic on the network and the load on the file server machine.  The first time
a user on a machine accesses a file, the cache manager gets a copy of the file
from the file server machine and caches it on the client machine.  Subsequent
access to the file can then be made to the copy on the client machine rather
than to the copy on the file server machine.
</Para>
</ListItem>
<ListItem>
<Para>Availability
</Para>
<Para>DFS makes its services and data highly available in several ways.  One way is
through replication, in which a read-only copy of a file can be stored on more than
one file server machine.  This way, if the file server machine that houses one
copy of the file is down, another copy of the file may still be available on
another file server machine.  DFS replication is especially useful for files
that are accessed by many users but change infrequently (for example, binary
files).
</Para>
<Para><?sml-need 6>Another way DFS achieves high availability is through caching.  Copies of files
are cached on DFS clients.  Even if a client is temporarily disconnected from
the network, users of the client may be able to access copies of files that
reside in the local cache.
</Para>
<Para>DFS administration can occur while users continue to access DFS files, which
is another means of providing high availability.  Both backups and relocation
of DFS filesets can be done without making the data in the filesets unavailable
to users.
</Para>
<Para>The physical file system portion of DFS, DCE LFS, is designed
for fast recovery (yielding high availability) after failures.  DCE LFS is a
log-based file system; that is, DCE LFS keeps a record of actions taken that affect
the file system structure so that, in the case of a system crash, the record can
be replayed to bring the file system to a consistent state.
</Para>
</ListItem>
<ListItem>
<Para>Support for distributed application programming
</Para>
<Para>DFS is itself a distributed application, but it in turn supports the
development of other distributed applications.  Programmers can use DFS to
share data or to communicate in a distributed application.  DFS takes care of
network communications and the movement, synchronization, and storage of shared
data.
</Para>
</ListItem>
<ListItem>
<Para>Ease of administration and scalability
</Para>
<Para>DFS files are grouped into units called <Replaceable>filesets</Replaceable>, which are convenient to
administer.  The processes that implement DFS, such as the FL
server and the backup server, are monitored and maintained automatically by the
BOS server, resulting in less work and a more scalable system for a
DFS administrator.  Because of the high performance mentioned previously, DFS
has a high client-to-server ratio.  This leads to a scalable system in which clients
can be added with low impact on other clients and the rest of the system.
Finally, DFS includes tools such as the update server to automate
time-consuming administrative tasks.
</Para>
</ListItem>
<ListItem>
<Para>Integration
</Para>
<Para>DFS is fully integrated with other DCE components, including RPC, the security
service, the directory service, and threads.
</Para>
</ListItem>
<ListItem>
<Para>Interoperation
</Para>
<Para>DFS interoperates with other file systems; for example, a UFS can
be exported to users of DFS.
<?sml-break><?sml-need 5></Para>
</ListItem>
<ListItem>
<Para>Standards
</Para>
<Para><IndexTerm Id="ITODCE.T3K.indx.28">
<Primary>standards</Primary>
<Secondary>and DFS</Secondary>
</IndexTerm>DFS maintains POSIX single-site read/write semantics.  DCE LFS
adheres to POSIX 1003.1.
</Para>
</ListItem>
</ItemizedList>
</Sect3>
</Sect2>
<Sect2 Id="ITODCE.T3K.div.19">
<Title>DFS Configuration</Title>
<IndexTerm Id="ITODCE.T3K.indx.29">
<Primary>configuration</Primary>
<Secondary>DFS</Secondary>
</IndexTerm>
<IndexTerm Id="ITODCE.T3K.indx.30">
<Primary>DFS</Primary>
<Secondary>configuration</Secondary>
</IndexTerm>
<Para>This section describes which of the DFS components run on the different types
of DFS machines: DFS client machines, DFS file server machines, and other
DFS server machines.
</Para>
<Para>The cache manager runs on every machine that acts as a DFS client.  It
communicates with file server machines to provide DFS service. (See Figure
3-21.)
</Para>
<?sml-need 3.3i>
<Figure>
<Title>DFS Client and File Server Machines</Title>
<Graphic Format="EPS" Entityref="ITODCE.T3K.pic.2" Scalefit="1" Reprodep="300" Reprowid="300"></Graphic>
</Figure>
<!-- .so intro/pic/3k_dfs_19.pic-->
<IndexTerm Id="ITODCE.T3K.indx.31">
<Primary>DFS</Primary>
<Secondary>configuration (figure)</Secondary>
</IndexTerm>
<?sml-space .5>
<Para>Several processes run on DFS file server machines: the file exporter (which
includes the token manager), the BOS server, the replication server,
the fileset server, and the client side of the update server.  Also present on
the file server machine is a physical file system, DCE LFS, UFS, or both.
<!-- .ig ++-->
<!-- .P-->
<!-- Some processes, including the Scout and DFS administrative command suites,-->
<!-- are remote administrative processes that can be run from any machine. (These-->
<!-- processes are not included in Figure 3-19.)-->
<!-- .++-->
</Para>
<Para><?sml-need 5>Some DFS processes must run on a machine that contains the files or database
they access.  These processes usually run on DFS file server machines. (See
Figure 3-22.)
</Para>
<?sml-need 4.15i>
<Figure>
<Title>Other DFS Servers</Title>
<Graphic Scalefit="1" Reprodep="300" Reprowid="300" Format="EPS" Entityref="ITODCE.T3K.pic.3"></Graphic>
</Figure>
<!-- .so intro/pic/3k_dfs_20.pic-->
<IndexTerm Id="ITODCE.T3K.indx.32">
<Primary>DFS</Primary>
<Secondary>configuration (figure)</Secondary>
</IndexTerm>
<?sml-space .5>
<Para>These processes are the server side of the update server (which runs both on
machines that contain master copies of configuration files and on machines that
contain master copies of binary files), the FL server (which runs
on machines on which the fileset location database is located), and the backup
server (which runs on machines on which the backup database resides).
<?sml-break><?sml-need 14></Para>
</Sect2>
<Sect2 Id="ITODCE.T3K.div.20">
<Title>End User's Perspective</Title>
<IndexTerm Id="ITODCE.T3K.indx.33">
<Primary>DFS</Primary>
<Secondary>end user's perspective</Secondary>
</IndexTerm>
<Para>Users are usually not aware that some of the files that they access are stored
on their local computer, some on their cell's file server machines, and some
in another cell, because to a user, DCE DFS presents one
large, worldwide file system.  Users do notice a few differences between working
on a distributed file system and working on a local file system.  For example,
DFS users are issued quotas for file storage, which they can use DFS commands
to examine.  DFS also includes commands for determining the location of a file
and other information that is unique to a distributed file system.
</Para>
</Sect2>
<Sect2 Id="ITODCE.T3K.div.21">
<Title>Programming with DFS</Title>
<IndexTerm Id="ITODCE.T3K.indx.34">
<Primary>DFS</Primary>
<Secondary>programming with</Secondary>
</IndexTerm>
<Para>Application programmers typically
use DFS transparently by making POSIX 1003.1 file system calls.  Additional DFS
interfaces provide administrative capabilities such as calls for administering
filesets.  The fact that programmers can use a distributed file system through a
familiar interface means that DFS enables distributed applications programming
without special distributed programming expertise.  Through the use of DFS,
programmers can write distributed applications without the use of RPC and the
client/server model, assuming the DFS data sharing model is appropriate to the
application.
</Para>
</Sect2>
<Sect2 Id="ITODCE.T3K.div.22">
<Title>DFS Administration</Title>
<IndexTerm Id="ITODCE.T3K.indx.35">
<Primary>DFS</Primary>
<Secondary>administration</Secondary>
</IndexTerm>
<Para>Administration of DFS is a significant task because several processes that
implement DFS need to be set up and maintained.  However, administrative tools
are provided to aid in this task.  DFS configuration is varied and flexible,
so a DFS administrator has the additional task of designing and evolving a
configuration of DFS servers and clients that best suits the needs of the
system's users.  DFS day-to-day administration includes fileset administration
such as making filesets available, backing them up, and moving them.
<?sml-break><?sml-need 8></Para>
</Sect2>
<Sect2 Id="ITODCE.T3K.div.23">
<Title>Additional Information on DFS</Title>
<IndexTerm Id="ITODCE.T3K.indx.36">
<Primary>DFS</Primary>
<Secondary>additional information</Secondary>
</IndexTerm>
<Para>For additional information about the DCE Distributed File Service, see the
chapters and reference pages in the &DCEAd;.
<IndexTerm Id="ITODCE.T3K.indx.37" SpanEnd="ITODCE.T3K.indx.1"></Para>
</Sect2>
</Sect1>
<!--+ 10/25/96 16:59:01
    | tagMorph:  $Id: 3k_dfs.sgm,v 1.1.2.7 1996/12/11 15:33:06 carrig Exp $
    | tagMorph library:  $Id: 3k_dfs.sgm,v 1.1.2.7 1996/12/11 15:33:06 carrig Exp $
    | sml-to-docbook:  1.24
    +-->
