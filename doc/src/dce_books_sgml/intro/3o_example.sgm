<!--
# @OSF_COPYRIGHT@
# 
# 
# HISTORY
# $Log: 3o_example.sgm,v $
# Revision 1.1.2.8  1996/12/11  15:33:10  carrig
# 	{enh,R1.2.2}
# 	Scaled graphics
# 	[1996/12/11  15:31:56  carrig]
#
# Revision 1.1.2.7  1996/12/09  22:47:36  carrig
# 	{enh,R1.2.2}
# 	Minor changes
# 	[1996/12/09  22:46:31  carrig]
# 
# Revision 1.1.2.6  1996/12/05  21:15:49  willie
# 	Deleted extraneous colon and corrected a number
# 	for a section reference.
# 	[1996/12/05  21:15:33  willie]
# 
# Revision 1.1.2.5  1996/11/29  20:43:46  carrig
# 	{enh,R1.2.2}
# 	No change
# 	[1996/11/29  20:42:29  carrig]
# 
# Revision 1.1.2.4  1996/11/05  20:11:50  weir
# 	Cleaned up history
# 	[1996/11/05  20:10:55  weir]
# 
# Revision 1.1.2.3  1996/10/30  17:51:00  carrig
# 	{enh,R1.2.2}
# 	Ready for editing
# 	[1996/10/30  17:49:38  carrig]
# 
# Revision 1.1.2.2  1996/10/29  19:06:18  carrig
# 	{enh,R1.2.2}
# 	Graphics
# 	[1996/10/29  19:01:49  carrig]
# 
# Revision 1.1.2.1  1996/10/28  19:42:29  wardr
# 	{edit,R1.2.2}
# 	Initial checkin after sgml conversion
# 	[1996/10/28  19:41:36  wardr]
# 
# Revision 1.1.1.2  1996/10/28  19:41:36  wardr
# 	{edit,R1.2.2}
# 	Initial checkin after sgml conversion
# 
# $EndLog$
-->
<!---->
<!-- Fragment document type declaration subset:
ArborText, Inc., 1988-1993, v.4001
<!DOCTYPE Book PUBLIC "-//Davenport//DTD DocBook V2.4//EN" [
]>
-->
<!--  COPYRIGHT NOTICE-->
<!--  Copyright (c) 1990, 1991, 1992, 1993 Open Software Foundation, Inc.-->
<!--  ALL RIGHTS RESERVED (DCE).  See the file named COPYRIGHT.DCE in the-->
<!--  src directory for the full copyright text.-->
<!---->
<!---->
<!-- HISTORY-->
<!-- Revision 1.1.8.1  1996/10/14  16:39:22  weir-->
<!-- 	No change-->
<!-- 	[1996/10/14  16:38:31  weir]-->
<!---->
<!-- Revision 1.1.6.1  1996/03/21  14:48:37  wardr-->
<!-- 	{edit R1.2.1}-->
<!-- 	Release Edits-->
<!-- 	[1996/03/21  14:47:37  wardr]-->
<!-- -->
<!-- Revision 1.1.4.6  1995/06/02  15:25:05  buckler-->
<!-- 	PRENTICE HALL reformat.-->
<!-- 	[1995/06/01  21:00:24  buckler]-->
<!-- -->
<!-- 	Incorporated 1.1 edits.-->
<!-- 	[1995/05/05  22:17:18  buckler]-->
<!-- -->
<!-- Revision 1.1.4.5  1994/11/04  00:05:21  neilson-->
<!-- 	Substituted macros for book names in cross refs.-->
<!-- 	[1994/11/03  12:24:23  neilson]-->
<!-- -->
<!-- Revision 1.1.4.4  1993/01/29  17:18:34  cjd-->
<!-- 	Embedded copyright notice-->
<!-- 	[1993/01/29  17:02:14  cjd]-->
<!-- -->
<!-- Revision 1.1.4.3  1992/11/24  15:45:21  steiner-->
<!-- 	Fixed coding conventions.-->
<!-- 	[1992/11/24  15:28:25  steiner]-->
<!-- -->
<!-- Revision 1.1.4.2  1992/09/01  16:00:12  weir-->
<!-- 	Moved to 1.0.2 tree-->
<!-- 	[1992/09/01  15:48:55  weir]-->
<!-- -->
<!-- Revision 1.1.2.2  1992/03/06  16:31:54  steiner-->
<!-- 	Eddie's edits, including making "greet" a literal-->
<!-- 	and adjusting the examples on the page.-->
<!-- 	[1992/03/06  15:24:02  steiner]-->
<!-- -->
<!-- Revision 1.1  1992/01/29  15:43:32  damon-->
<!-- 	Initial revision-->
<!-- -->
<!---->
<Sect1 Id="ITODCE.T3O.div.1">
<Title>Two DCE Application Examples</Title>
<IndexTerm Id="ITODCE.T3O.indx.1">
<Primary><Literal>greet</Literal> application example</Primary>
</IndexTerm>
<IndexTerm Id="ITODCE.T3O.indx.2">
<Primary><Literal>greet</Literal></Primary>
<Secondary>application example</Secondary>
</IndexTerm>
<Para>This section presents two implementations of
a very simple distributed application called
<Literal>greet</Literal>.
This section assumes some familiarity with UNIX systems
and the C programming language.
The
<Literal>greet</Literal>
application is implemented two different ways: one
using DCE RPC, the other using DCE DFS.
For a more extensive application example, which uses many more
DCE services and facilities, see the
<Command>timop</Command> example in the &DCEDg;.
</Para>
<Sect2 Id="ITODCE.T3O.div.2">
<Title>The greet Application: An Implementation Using DCE RPC</Title>
<Para>This first implementation of the
<Literal>greet</Literal>
application is an example of a simple DCE RPC-based
application.
The client side of the application sends a greeting to the
server side of the application.
The server prints the client's greeting and sends a return
greeting back to the client.
The client prints the server's reply and terminates.
</Para>
<Sect3 Id="ITODCE.T3O.div.3">
<Title>Steps in Developing a DCE RPC Application</Title>
<Para>This section provides a step-by-step description of the
development of the
<Literal>greet</Literal>
application.
</Para>
<OrderedList>
<ListItem>
<Para>Generate an IDL template.
</Para>
<Para>The first step is to run the
<Command>uuidgen</Command>
program, which creates a Unique Universal Identifier
for uniquely labeling the application's interface.
It also creates a template for an IDL file.
The following command creates the file
<Filename>greet.idl</Filename>:
</Para>
<InformalExample>
<Para><ProgramListing><UserInput>uuidgen -i > greet.idl
</UserInput></ProgramListing></Para>
</InformalExample>
<Para>The file <Filename>greet.idl</Filename> contains the following:
</Para>
<InformalExample>
<Para><ProgramListing><?sml-point-size 10>
<!--no-op:  12-->
&ITODCE.T3O.ent.1;<?sml-point-size 12>
<!--no-op:  14-->
</ProgramListing></Para>
</InformalExample>
</ListItem>
<ListItem>
<Para>Name the interface.
</Para>
<Para>Replace the string
<Literal>INTERFACENAME</Literal>
in the IDL file with
the name of the application interface, in this case,
<Literal>greetif</Literal>.
</Para>
<InformalExample>
<Para><ProgramListing><?sml-point-size 10>
<!--no-op:  12-->
&ITODCE.T3O.ent.2;<?sml-point-size 12>
<!--no-op:  14-->
</ProgramListing></Para>
</InformalExample>
</ListItem>
<ListItem>
<Para>Define the interface operations.
</Para>
<Para>Within the braces, write definitions of the operations
constituting the interface.
In this example, there is only one operation, called
<Literal>greet</Literal>.
</Para>
<InformalExample>
<Para><ProgramListing><?sml-point-size 10>
<!--no-op:  12-->
&ITODCE.T3O.ent.3;<?sml-point-size 12>
<!--no-op:  14-->
</ProgramListing></Para>
</InformalExample>
<Para>The first line of the operation definition gives the name of the operation,
<Literal>greet</Literal>,
and indicates by the
<StructName Role="typedef">void</StructName>
declaration that it has no meaningful return value.
The next three lines specify the arguments to the operation, namely
<Literal>h</Literal>,
<Literal>client_greeting</Literal>,
and
<Literal>server_reply</Literal>.
The first argument is a handle containing binding information
for the server.
The second is a string that is passed from the
client to the server (the client's greeting).
The third argument is a string returned from
the server back to the client (the server's reply).
</Para>
</ListItem>
<ListItem>
<Para>Run the IDL compiler.
</Para>
<Para>The following command
runs the IDL compiler:
</Para>
<InformalExample>
<Para><ProgramListing><UserInput>idl greet.idl
</UserInput></ProgramListing></Para>
</InformalExample>
<Para>(Some of the commands in this section are somewhat simplified.
See the Makefile in Section 3.10.1.3 for the complete command.)
Three new files are created automatically as a result of this command:
</Para>
<ItemizedList>
<ListItem>
<Para><Filename>greet.h</Filename>
</Para>
</ListItem>
<ListItem>
<Para><Filename>greet_cstub.o</Filename>
</Para>
</ListItem>
<ListItem>
<Para><Filename>greet_sstub.o</Filename>
</Para>
</ListItem>
</ItemizedList>
</ListItem>
<ListItem>
<Para>Write the client application code
<Filename>greet_client.c</Filename>.
</Para>
<Para>In general, the DCE RPC application programmer writes
three application code files:
</Para>
<ItemizedList>
<ListItem>
<Para>The client code
</Para>
</ListItem>
<ListItem>
<Para>The server initialization code
</Para>
</ListItem>
<ListItem>
<Para>The server operation code
</Para>
</ListItem>
</ItemizedList>
<Para>The following is the client code for the
<Literal>greet</Literal>
application, a file called
<Filename>greet_client.c</Filename>.
</Para>
<InformalExample>
<Para><ProgramListing>
<?Pub _font TypeSize="8pt">
<?sml-point-size 9>
<!--no-op:  12-->
&ITODCE.T3O.ent.4;<?sml-point-size 12>
<!--no-op:  14-->
<?Pub /_font><?Pub Caret>
</ProgramListing></Para>
</InformalExample>
<Para>In this routine,
the client makes two calls to the RPC runtime to acquire
binding information needed to communicate with the server.
The client then calls the
<Literal>greet</Literal>
remote procedure, supplying a greeting to be sent to the
server.
The client prints the reply received by the server.
<?sml-break><?sml-need 10></Para>
</ListItem>
<ListItem>
<Para>Write the server initialization code
<Filename>greet_server.c</Filename>.
</Para>
<Para>The second file that the DCE RPC application programmer must
write is the server initialization code.
This is <Replaceable>boilerplate</Replaceable>
code; that is, it is largely the same for any RPC application.
The
<Filename>greet_server.c</Filename>
file contains the server initialization code for the
<Literal>greet</Literal>
application.
</Para>
<InformalExample>
<Para><ProgramListing>
<?Pub _font TypeSize="8pt">
<?sml-point-size 9>
<!--no-op:  12-->
&ITODCE.T3O.ent.5;<?sml-point-size 12>
<!--no-op:  14-->
<?Pub /_font><?Pub Caret>
</ProgramListing></Para>
</InformalExample>
<Para>In this file, the server registers its interface with the RPC runtime.
It then retrieves the binding information assigned to it by the
runtime.
It registers its binding information with the RPC endpoint mapper,
and then with CDS.
It then is ready to service requests.
Before exiting, the server unregisters its information in the endpoint
map.
</Para>
</ListItem>
<ListItem>
<Para>Write the server operation code
<Filename>greet_manager.c</Filename>.
</Para>
<Para>The third file that an RPC programmer writes is the code
that implements the operations defined in the IDL file.
In this case, there is only one operation,
<Literal>greet</Literal>.
The
<Filename>greet_manager.c</Filename>
file implements this operation.
<?sml-break><?sml-need 9></Para>
<InformalExample>
<Para><ProgramListing><?sml-point-size 10>
<!--no-op:  12-->
&ITODCE.T3O.ent.6;<?sml-point-size 12>
<!--no-op:  14-->
</ProgramListing></Para>
</InformalExample>
<Para>The server prints the message it received from the client,
then puts its own message in the reply parameter to be
sent back to the client.
</Para>
</ListItem>
<ListItem>
<Para>Write any utility code.
</Para>
<Para>In addition to the three standard RPC application code files,
<Filename>greet_client.c</Filename>,
<Filename>greet_server.c</Filename>,
and
<Filename>greet_manager.c</Filename>,
the
<Literal>greet</Literal>
application contains a utility file for handling
errors.
This file is called
<Filename>util.c</Filename>.
</Para>
<InformalExample>
<Para><ProgramListing>
<?Pub _font TypeSize="8pt">
<?sml-point-size 9>
<!--no-op:  12-->
&ITODCE.T3O.ent.7;<?sml-point-size 12>
<!--no-op:  14-->
<?Pub /_font><?Pub Caret>
</ProgramListing></Para>
</InformalExample>
<Para>The
<Filename>util.c</Filename>
file comes with a header file called
<Filename>util.h</Filename>.
</Para>
<InformalExample>
<Para><ProgramListing><?sml-point-size 9>
<!--no-op:  12-->
&ITODCE.T3O.ent.8;<?sml-point-size 12>
<!--no-op:  14-->
</ProgramListing></Para>
</InformalExample>
</ListItem>
<ListItem>
<Para>Compile the client and server programs.
</Para>
<Para>The
<Filename>greet_client</Filename>
and
<Filename>greet_server</Filename>
programs can now be compiled.
The client side of the application is compiled using the following
command (again, somewhat simplified):
<?sml-point-size 11>
<!--no-op:  12-->
</Para>
<InformalExample>
<Para><ProgramListing><UserInput>cc -o greet_client greet_client.c \
greet_cstub.o util.o -ldce
</UserInput></ProgramListing></Para>
</InformalExample>
<?sml-point-size 12>
<!--no-op:  14-->
<Para>The server side of the application is compiled as follows:
<?sml-point-size 11>
<!--no-op:  12-->
</Para>
<InformalExample>
<Para><ProgramListing><UserInput>cc -o greet_server greet_server.c greet_manager.c greet_sstub.o \
util.o -ldce
</UserInput></ProgramListing></Para>
</InformalExample>
<?sml-point-size 12>
<!--no-op:  14-->
</ListItem>
</OrderedList>
</Sect3>
<Sect3 Id="ITODCE.T3O.div.4">
<Title>Installing and Running the <Literal>greet</Literal> Application</Title>
<Para>This section describes the process for an administrator who is installing
and starting up the
<Literal>greet</Literal>
application, and a user who is running it.
<?sml-break><?sml-need 9></Para>
<ItemizedList>
<ListItem>
<Para>Installing the client and server programs
</Para>
<Para>An administrator installs the
<Filename>greet_client</Filename>
program on machines on which users will run the
<Literal>greet</Literal>
application.
The administrator also installs the
<Filename>greet_server</Filename>
program
on one or more machines that will execute the server part of the
<Literal>greet</Literal>
application.
</Para>
</ListItem>
<ListItem>
<Para>Starting the <Literal>greet</Literal> server
</Para>
<Para>To start up the <Literal>greet</Literal> server, the administrator
enters the following command
on a machine that has the <Literal>greet</Literal> server installed:
</Para>
<InformalExample>
<Para><ProgramListing><UserInput>greet_server /.../my_cell/subsys/my_company/greet_server
</UserInput></ProgramListing></Para>
</InformalExample>
</ListItem>
<ListItem>
<Para>Running the
<Literal>greet</Literal>
application
</Para>
<Para>To run the
<Literal>greet</Literal>
application, a user types the following command on any
<Literal>greet</Literal> client machine:
</Para>
<InformalExample>
<Para><ProgramListing><UserInput>greet_client /.../my_cell/subsys/my_company/greet_server
</UserInput></ProgramListing></Para>
</InformalExample>
<Para>The <Literal>greet</Literal> server will print the message it received from the <Literal>greet</Literal>
client.
Then the <Literal>greet</Literal> client prints the reply that the <Literal>greet</Literal> server
sent back to it.
</Para>
</ListItem>
</ItemizedList>
<?sml-break>
<?sml-need 17>
</Sect3>
<Sect3 Id="ITODCE.T3O.div.5">
<Title>Makefile for the <Literal>greet</Literal> Application</Title>
<Para>The commands given in the preceding description for building
the
<Literal>greet</Literal>
application have been simplified.
Following is the actual Makefile, containing the complete commands
for generating the application:
</Para>
<InformalExample>
<Para><ProgramListing><?sml-point-size 10>
<!--no-op:  12-->
&ITODCE.T3O.ent.9;<?sml-point-size 12>
<!--no-op:  14-->
</ProgramListing></Para>
</InformalExample>
</Sect3>
</Sect2>
<Sect2 Id="ITODCE.T3O.div.6">
<Title>The greet Application: An Implementation Using DCE DFS</Title>
<Para>This section describes an implementation of the
<Literal>greet</Literal>
application
using DCE DFS.
In this version, the client and server use well-known files in
the DCE filespace to communicate with each other.
</Para>
<Para>This application looks just like an application that uses a local
file system, except for the names of the files in the DCE filespace.
The communication (using RPC) is done by DFS and is not visible
to the programmer.
<?sml-break><?sml-need 7></Para>
<Note>
<Para>Please note that this example is intended to be simple, not necessarily
to model good programming.
For example, a real application would check
return values for errors, and
would be likely to use the
<Literal>lock</Literal>
system call to synchronize client and server access to files,
rather than waking up every few seconds to check if a file
had been created.
</Para>
</Note>
<Para>The application contains three files:
<Filename>dfs_greet.h</Filename>,
<Filename>dfs_greet_client.c</Filename>,
and
<Filename>dfs_greet_server.c</Filename>.
</Para>
<ItemizedList>
<ListItem>
<Para>The
<Filename>dfs_greet.h</Filename>
file
</Para>
<Para>This file gives the well-known filenames that the client and server
communicate through.
</Para>
<InformalExample>
<Para><ProgramListing><?sml-point-size 9>
<!--no-op:  12-->
&ITODCE.T3O.ent.10;<?sml-point-size 12>
<!--no-op:  14-->
</ProgramListing></Para>
</InformalExample>
<?sml-break>
<?sml-need 5>
</ListItem>
<ListItem>
<Para>The
<Filename>dfs_greet_client.c</Filename>
file
</Para>
<Para>This is the client side of the application.
</Para>
<InformalExample>
<Para><ProgramListing><?sml-point-size 9>
<!--no-op:  12-->
&ITODCE.T3O.ent.11;<?sml-point-size 12>
<!--no-op:  14-->
</ProgramListing></Para>
</InformalExample>
</ListItem>
<ListItem>
<Para>The
<Filename>dfs_greet_server.c</Filename>
file
</Para>
<Para>This file contains the server side of the
<Literal>greet</Literal>
application.
</Para>
<InformalExample>
<Para><ProgramListing><?sml-point-size 9>
<!--no-op:  12-->
&ITODCE.T3O.ent.12;<?sml-point-size 12>
<!--no-op:  14-->
</ProgramListing></Para>
</InformalExample>
</ListItem>
</ItemizedList>
<Para>The Makefile for creating the client and server programs is as
follows:
</Para>
<InformalExample>
<Para><ProgramListing><?sml-point-size 10>
<!--no-op:  12-->
&ITODCE.T3O.ent.13;<?sml-point-size 12>
<!--no-op:  14-->
</ProgramListing></Para>
</InformalExample>
<Para>The <Literal>greet</Literal> client and <Literal>greet</Literal>
server are installed as in the RPC application.
They are run in the same way, except they do not take a
<Symbol Role="Variable">servername</Symbol>
argument.
<IndexTerm Id="ITODCE.T3O.indx.3" SpanEnd="ITODCE.T3O.indx.1"><IndexTerm Id="ITODCE.T3O.indx.4" SpanEnd="ITODCE.T3A.indx.1"></Para>
</Sect2>
</Sect1>
<!--+ 10/25/96 16:59:01
    | tagMorph:  $Id: 3o_example.sgm,v 1.1.2.8 1996/12/11 15:33:10 carrig Exp $
    | tagMorph library:  $Id: 3o_example.sgm,v 1.1.2.8 1996/12/11 15:33:10 carrig Exp $
    | sml-to-docbook:  1.24
    +-->
