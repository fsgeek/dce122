<!--
# @OSF_COPYRIGHT@
# 
# 
# HISTORY
# $Log: 3c_rpc.sgm,v $
# Revision 1.1.2.8  1996/12/11  15:32:56  carrig
# 	{enh,R1.2.2}
# 	Scaled graphics
# 	[1996/12/11  15:31:37  carrig]
#
# Revision 1.1.2.7  1996/12/09  22:47:22  carrig
# 	{enh,R1.2.2}
# 	Minor changes
# 	[1996/12/09  22:46:15  carrig]
# 
# Revision 1.1.2.6  1996/12/05  20:19:19  willie
# 	Corrected number of section reference.
# 	[1996/12/05  20:19:04  willie]
# 
# Revision 1.1.2.5  1996/11/29  20:43:34  carrig
# 	{enh,R1.2.2}
# 	No change
# 	[1996/11/29  20:42:13  carrig]
# 
# Revision 1.1.2.4  1996/11/05  20:11:39  weir
# 	Cleaned up history
# 	[1996/11/05  20:10:44  weir]
# 
# Revision 1.1.2.3  1996/10/30  17:50:48  carrig
# 	{enh,R1.2.2}
# 	Ready for editing
# 	[1996/10/30  17:49:22  carrig]
# 
# Revision 1.1.2.2  1996/10/29  19:06:05  carrig
# 	{enh,R1.2.2}
# 	Graphics
# 	[1996/10/29  19:01:32  carrig]
# 
# Revision 1.1.2.1  1996/10/28  19:42:15  wardr
# 	{edit,R1.2.2}
# 	Initial checkin after sgml conversion
# 	[1996/10/28  19:41:25  wardr]
# 
# Revision 1.1.1.2  1996/10/28  19:41:25  wardr
# 	{edit,R1.2.2}
# 	Initial checkin after sgml conversion
# 
# $EndLog$
-->
<!---->
<!-- Fragment document type declaration subset:
ArborText, Inc., 1988-1993, v.4001
<!DOCTYPE Book PUBLIC "-//Davenport//DTD DocBook V2.4//EN" [
]>
-->
<!--  COPYRIGHT NOTICE-->
<!--  Copyright (c) 1990, 1991, 1992, 1993 Open Software Foundation, Inc.-->
<!--  ALL RIGHTS RESERVED (DCE).  See the file named COPYRIGHT.DCE in the-->
<!--  src directory for the full copyright text.-->
<!---->
<!---->
<!-- HISTORY-->
<!-- Revision 1.1.6.1  1996/10/14  16:39:06  weir-->
<!-- 	No change-->
<!-- 	[1996/10/14  16:38:18  weir]-->
<!---->
<!-- Revision 1.1.4.11  1995/06/02  15:24:54  buckler-->
<!-- 	PRENTICE HALL reformat.-->
<!-- 	[1995/06/01  20:58:23  buckler]-->
<!-- -->
<!-- 	Incorporated 1.1 edits.-->
<!-- 	[1995/05/05  22:15:23  buckler]-->
<!-- -->
<!-- Revision 1.1.4.10  1994/11/04  00:04:13  neilson-->
<!-- 	Substituted macros for book names in cross refs.-->
<!-- 	[1994/11/03  12:23:52  neilson]-->
<!-- -->
<!-- Revision 1.1.4.9  1994/10/19  19:09:19  willie-->
<!-- 	{enh, 11783, R1.1}-->
<!-- 	Incorporated technical review.-->
<!-- 	[1994/10/19  19:08:37  willie]-->
<!-- -->
<!-- Revision 1.1.4.8  1994/10/07  16:01:25  willie-->
<!-- 	{enh, 11783, R1.1}-->
<!-- 	Incorporated edits of Host Services parts.-->
<!-- 	[1994/10/07  15:54:21  willie]-->
<!-- -->
<!-- Revision 1.1.4.7  1994/09/26  16:03:14  willie-->
<!-- 	{enh, 11783, R1.1}-->
<!-- 	Fixed reference from Admin.  Ref. to Command Ref.-->
<!-- 	[1994/09/26  16:02:37  willie]-->
<!-- -->
<!-- Revision 1.1.4.6  1994/09/14  21:07:57  willie-->
<!-- 	{enh, 11783, R1.1}-->
<!-- 	Changed rpcd to dced.-->
<!-- 	[1994/09/14  21:07:36  willie]-->
<!-- -->
<!-- Revision 1.1.4.5  1994/07/13  21:53:06  jshirley-->
<!-- 	{def,10220,R1.1} Remove reference to rpcd and sec_clientd-->
<!-- 	[1994/07/13  21:52:28  jshirley]-->
<!-- -->
<!-- Revision 1.1.4.4  1993/01/29  17:17:53  cjd-->
<!-- 	Embedded copyright notice-->
<!-- 	[1993/01/29  17:01:22  cjd]-->
<!-- -->
<!-- Revision 1.1.4.3  1992/11/24  15:44:44  steiner-->
<!-- 	Fixed coding conventions.-->
<!-- 	[1992/11/24  15:25:13  steiner]-->
<!-- -->
<!-- Revision 1.1.4.2  1992/09/01  15:59:04  weir-->
<!-- 	Moved to 1.0.2 tree-->
<!-- 	[1992/09/01  15:48:00  weir]-->
<!-- -->
<!-- Revision 1.1.2.2  1992/03/06  16:30:25  steiner-->
<!-- 	Edits from Eddie.-->
<!-- 	[1992/03/06  15:16:13  steiner]-->
<!-- -->
<!-- Revision 1.1  1992/01/29  15:42:59  damon-->
<!-- 	Initial revision-->
<!-- -->
<!---->
<Sect1 Id="ITODCE.T3C.div.1">
<Title>DCE Remote Procedure Call</Title>
<IndexTerm Id="ITODCE.T3C.indx.1" Significance="Preferred">
<Primary>RPC</Primary>
</IndexTerm>
<Para>A distributed application based on the client/server model consists
of two parts: the client side of the application, which runs on one
machine and makes a request for service on behalf of a user, and
the
server side of the application, which runs on another machine on the
network and fulfills the service request.
The two pieces of code on two different
machines need to be able to communicate across the network.
One model for implementing communications between the client and server
of an application is the
RPC facility.
<IndexTerm Id="ITODCE.T3C.indx.2">
<Primary>RPC</Primary>
<Secondary>model</Secondary>
</IndexTerm></Para>
<Para>RPC gives programmers the ability
to express an interaction between the client and server of a distributed
application as if it were a procedure call; the programmer
defines a calling interface and a procedure that implements it,
makes a call to the procedure along with
any arguments, and receives a return value through the argument
list or as the procedure result.
</Para>
<Para>In RPC, as in a traditional local procedure
call, control is passed from one code segment to another, and
then returns to the original segment.
However, in a local
procedure call, the code segments are in the same address space on the
same machine;
whereas, in a remote procedure call, the called procedure runs in
a different address space, usually
on a different machine than the calling procedure.
As a result, arguments and results are passed differently for local
and remote procedure calls.
In local procedure calls, arguments and return values can be passed
on the process's stack.
In remote procedure calls, arguments and return values must be packed
up into messages and sent to the peer machine over the network.
The underlying RPC mechanism makes this look like a procedure call
to the programmer.
</Para>
<Para>An RPC facility shields the application programmer from
the details of network communications between client and server
nodes, such as the following:
</Para>
<ItemizedList>
<ListItem>
<Para>Fragmentation and reassembly of messages
</Para>
</ListItem>
<ListItem>
<Para>Handling different data formats (such as byte
ordering) between different machines
</Para>
</ListItem>
<ListItem>
<Para>Using a directory service to find message recipients
</Para>
</ListItem>
<ListItem>
<Para>Using security services to ensure secure communications
</Para>
</ListItem>
</ItemizedList>
<Para>Programmers using RPC do not need to
rewrite applications in order to port them to different
architectures, operating systems, communications protocols, or languages.
RPC provides a high-level programming model to the distributed
application programmer, hiding communications details, and removing
nonportable system and hardware dependencies.
</Para>
<Para>The following subsections give
an overview of the DCE RPC technology
component.
They describe the components that constitute the technology,
and how DCE RPC is seen from the end user's, programmer's, and
administrator's perspectives, focusing primarily on programming with
RPC since the application programmer is the main consumer of this
technology.
The subsections also describe the steps involved in the execution of a remote
procedure call.
They describe the ways in which DCE RPC frees
the programmer from system software and hardware dependencies, and
then list additional sources of information on DCE RPC.
</Para>
<Sect2 Id="ITODCE.T3C.div.2">
<Title>What is DCE RPC?</Title>
<Para>DCE RPC is a facility for calling
a procedure on a remote machine
as if it were a local procedure call.  To the application programmer,
a remote call looks (almost) like a local call,
but there are several RPC components that work together to implement
this facility, including
the Interface Definition Language (IDL) and its compiler,
a Universal Unique Identifier (UUID) generator,
and the RPC runtime,
which supports two RPC protocol implementations.
One RPC protocol operates over connection-oriented transports such as
the Transmission Control Protocol/Internet Protocol (TCP/IP),
and the other RPC protocol operates over connectionless
transports such
as the User Datagram Protocol/Internet Protocol (UDP/IP).
</Para>
<Para><?sml-need 7>An end user does not see RPC at all, and the minimal amount of
administration involved in RPC
can usually be handled by the server-side application code, such as advertising
an application server in
the DCE Directory Service.  It is the application
programmer who most comes into contact with the RPC
component.
Since many of the DCE components are themselves
client/server applications, they use RPC as their basis for distributed
communications.
</Para>
<Para>The components that constitute the DCE RPC are as follows:
</Para>
<ItemizedList>
<ListItem>
<Para>IDL and the IDL compiler
</Para>
<Para>An RPC
interface is described in DCE IDL.
The IDL file is compiled into object code
via the IDL compiler.
The object code is in
two main parts: one for the client side of the application, and one for the
server side.
<!-- .ig ++-->
<!-- .LI-->
<!-- The Transfer Syntax-->
<!-- .P-->
<!-- This protocol defines rules for-->
<!-- encoding data in such a way that the communicating machines, which may or-->
<!-- may not have differing internal data representation formats, can-->
<!-- understand each other.-->
<!-- The Transfer Syntax is handled by the RPC runtime library and-->
<!-- IDL-compiler-generated stub code, and is not visible-->
<!-- to RPC programmers.-->
<!-- .++-->
</Para>
</ListItem>
<ListItem>
<Para>The RPC runtime library
</Para>
<Para>This library consists of
a set of routines, linked with both the client and server sides
of an application, which implement the communications between them.
This involves the client finding the server in the distributed system, getting
messages back and forth, managing any state that exists between
requests, and processing any errors that occur.
</Para>
</ListItem>
<ListItem>
<Para>Authenticated RPC
</Para>
<Para>DCE RPC is integrated with the DCE Security Service component to provide
secure communications.
Levels of security can be controlled by the RPC application
programmer through the authenticated
RPC API.
(See Section 3.5.4 for more information on authenticated RPC.)
</Para>
</ListItem>
<ListItem>
<Para>Name Service Independent (NSI) API
</Para>
<Para>DCE RPC is integrated with the DCE Directory Service component
to facilitate the location of RPC-based servers by their clients.
The NSI routines allow a programmer to control the association,
or binding, of a client to a server during RPC.
</Para>
</ListItem>
<ListItem>
<Para>DCE host daemon
</Para>
<Para>The <Command>dced</Command> program
<IndexTerm Id="ITODCE.T3C.indx.3">
<Primary><Command>dced</Command> daemon</Primary>
</IndexTerm>
<IndexTerm Id="ITODCE.T3C.indx.4">
<Primary>DCE</Primary>
<Secondary>host daemon</Secondary>
</IndexTerm>runs on every DCE machine.
It includes (among other things) an RPC-specific name server called
the <FirstTerm>endpoint mapper service</FirstTerm>, which manages a database that maps
RPC servers to the transport endpoints (in IP, the ports) that the
server is listening for requests on.
<?sml-break><?sml-need 3></Para>
</ListItem>
<ListItem>
<Para>DCE control program
</Para>
<Para><Command>dcecp</Command>
<IndexTerm Id="ITODCE.T3C.indx.5">
<Primary><Command>dcecp</Command></Primary>
</IndexTerm>
<IndexTerm Id="ITODCE.T3C.indx.6">
<Primary>DCE</Primary>
<Secondary>control program</Secondary>
</IndexTerm>is a tool for administering DCE.
<!--It also allows an administrator to access RPC data in CDS.-->
</Para>
</ListItem>
<ListItem>
<Para>UUID facilities
</Para>
<Para>These are ancillary commands and routines for generating
UUIDs, which uniquely identify an RPC
interface or any other resource.
The
<Command>uuidgen</Command>
<IndexTerm Id="ITODCE.T3C.indx.7">
<Primary><Command>uuidgen</Command> program</Primary>
</IndexTerm>program can optionally generate an IDL template for a service interface,
along with a unique identifier for the interface.
</Para>
</ListItem>
</ItemizedList>
</Sect2>
<Sect2 Id="ITODCE.T3C.div.3">
<Title>End User's Perspective</Title>
<IndexTerm Id="ITODCE.T3C.indx.8">
<Primary>RPC</Primary>
<Secondary>end user's perspective</Secondary>
</IndexTerm>
<Para>The end user does not come in direct contact with DCE RPC,
but does see the end result in the form of
</Para>
<ItemizedList>
<ListItem>
<Para>The availability of distributed applications built using RPC
</Para>
</ListItem>
<ListItem>
<Para>The ability to use remote resources accessed via RPC
</Para>
</ListItem>
</ItemizedList>
<Para>An end user who is browsing through the namespace may also
notice the names of RPC-based servers, since these
servers advertise themselves to their clients through the
DCE Directory Service.
</Para>
</Sect2>
<Sect2 Id="ITODCE.T3C.div.4">
<Title>Programming with DCE RPC</Title>
<IndexTerm Id="ITODCE.T3C.indx.9">
<Primary>RPC</Primary>
<Secondary>programming</Secondary>
</IndexTerm>
<Para>This section provides a brief overview of the process a programmer goes
through in using DCE RPC to write an application.
For an example of how this process applies to a simple application,
see Section 3.10 of this manual.
For a more detailed description of the DCE RPC programming process,
see the &DCEDg;.
</Para>
<Para>Figure 3-1 shows an overview of the DCE RPC application
development process.
The dashed boxes indicate application code written by the DCE
programmer.
The other boxes indicate compiled code or code
generated automatically for the
programmer by DCE RPC.
</Para>
<?sml-need 6.0i>
<Figure>
<Title>DCE RPC Programming Process</Title>
<Graphic Format="EPS" Entityref="ITODCE.T3C.pic.1" Scalefit="1" Reprowid="300" Reprodep="300"></Graphic>
</Figure>
<!-- .so intro/pic/3c_rpc_01.pic-->
<?sml-break>
<?sml-need 12>
<Sect3 Id="ITODCE.T3C.div.5">
<Title>The IDL File</Title>
<IndexTerm Id="ITODCE.T3C.indx.10">
<Primary>IDL files</Primary>
</IndexTerm>
<Para>First, the application programmer defines the
RPC interface, and associated data types,
using IDL.
An
<Replaceable>interface</Replaceable>
<IndexTerm Id="ITODCE.T3C.indx.11">
<Primary>interface</Primary>
<Secondary>definition</Secondary>
</IndexTerm>is a group
of operations that a server can perform.
This grouping is similar
to a module or library in a conventional programming language; that is, a group
of operations defined in a single file or unit.
For example, a Bank service might perform operations to
debit, credit, or read the balance of an account.
Each of those
operations and their parameters must be defined in the IDL file.
The collection of Bank service operations&mdash;debit, credit,
read balance&mdash;together form the Bank service interface.
</Para>
<Para>The process of defining RPC operations
is similar to defining the input and output of a local procedure call,
except that in IDL only the calling interface is defined, not the
implementation of the procedure.
(An IDL interface definition is similar to an ANSI C prototype
definition.)
</Para>
<Para>Next, the programmer compiles the IDL file with the IDL compiler.
The compiler produces
output in a conventional programming language, which is the C language
in the DCE
offering and then calls the appropriate compiler to produce object code.
The output of the compilation consists of a
<Replaceable>client stub</Replaceable>,
<IndexTerm Id="ITODCE.T3C.indx.12">
<Primary>stub</Primary>
<Secondary>client</Secondary>
</IndexTerm>a
<Replaceable>server stub</Replaceable>,
<IndexTerm Id="ITODCE.T3C.indx.13">
<Primary>stub</Primary>
<Secondary>server</Secondary>
</IndexTerm>and a
header file.
The client and server stubs are routines that make the remoteness
of the operation transparent to the caller or callee of the operation.
</Para>
</Sect3>
<Sect3 Id="ITODCE.T3C.div.6">
<Title>The Client Side</Title>
<Para>For the client side of the application,
the programmer writes application code
that makes calls to the
operations in the IDL file.  The client stub code is linked with
this application code and (along with the RPC runtime code)
performs the tasks that turn what looks like a
procedure call into network communications with the server side of the
application.
Usually the client side of the application contains
a relatively small amount of
RPC code.
<?sml-break><?sml-need 7></Para>
</Sect3>
<Sect3 Id="ITODCE.T3C.div.7">
<Title>The Server Side</Title>
<Para>For the server side, the programmer writes application
routines that implement the operations
defined in the IDL file.  For example, in the banking application, a database
lookup might implement the operation to read an account balance.  The
server stub, generated by the IDL compiler, is linked with the server
application code.
The server stub unpacks the arguments and makes the
call to the application routine as if the client program had called it
directly.
The server side of the application contains the bulk of the RPC code that
needs to be written by the distributed application programmer.
</Para>
</Sect3>
<Sect3 Id="ITODCE.T3C.div.8">
<Title>Binding</Title>
<IndexTerm Id="ITODCE.T3C.indx.14">
<Primary>binding</Primary>
</IndexTerm>
<Para>In order for the client to send an RPC to the server, it must
be able to find the server.
This process is called
<Replaceable>binding</Replaceable>.
A client may have some direct way of knowing what server it needs to
communicate with; for example, it may get this information from
a file, a value hardcoded into its program,
an environment variable, or a user.
A more flexible way for a client to find a server is to take advantage
of DCE RPC's use of the DCE Directory Service.
</Para>
<Para>A client can find a server by asking the directory service
for the location of a server that handles the interface that
the client is interested in (in our example, a Bank server).
In order for the directory service to be able to give the client
this information, a server must first advertise itself in the directory
service.
The server adds itself to the namespace, along with information about what
interfaces it implements, what protocols it uses to communicate with,
and where it is located.
This way, a server can move, or there can be multiple servers
implementing a given interface, without affecting the
client.
The client can still go to the directory service, a well-known central
source of information, and find out where the server is located.
</Para>
<Para>The DCE programmer does not make calls directly to CDS; binding is
supported by the NSI API,
an RPC-specific name service layer.
Calls to this library are made by the client side of an application
in order 
to look up binding information for a server based on various criteria,
such as the type of service, the objects it manages, and the interfaces
it supports.
The server side of an application calls this library to advertise
information about itself to the namespace where clients can find it.
<!---->
<!---->
<!---->
</Para>
</Sect3>
<Sect3 Id="ITODCE.T3C.div.9">
<Title>The Endpoint Mapper Service of the DCE Host Daemon</Title>
<Para>There are two parts to a server's location: the network 
address of the machine it resides on and the transport-specific
address of the process&mdash;the network endpoint
(for example, a UNIX port).
The machine location is fairly stable, so its address can reasonably be
entered into CDS.
The network endpoint, however,
can change each time the server process is
started.
Instead of making frequent changes to CDS to update a server's endpoint
address, DCE RPC uses a specialized type of directory service,
the endpoint mapper service, a service of <Command>dced</Command>.
<!--or \*Lrpcd\*O.-->
<!--.iX "\*Lrpcd\*O"-->
When a server starts, it registers its endpoint(s) with <Command>dced</Command>.
Most servers will register an endpoint for each transport protocol
supported on the host (for example, TCP and UDP).
</Para>
<Para>Every machine that runs an RPC server also runs <Command>dced</Command>.
The <Command>dced</Command> process always uses the same network endpoint, so its process
address is well known.
Therefore, once a client knows what machine a server is running on,
it can find the endpoint mapper running on that same machine.
It can then ask the endpoint mapper for the network endpoint 
of the server process.
This process is shown in Figure 3-2 (read the messages, shown
in quotes, in clockwise order).
</Para>
<Figure>
<Title>Client Finds Server via CDS and dced</Title>
<Graphic Format="EPS" Entityref="ITODCE.T3C.pic.2"></Graphic>
</Figure>
<!-- .so intro/pic/3c_rpc_02.pic-->
<IndexTerm Id="ITODCE.T3C.indx.15" SpanEnd="ITODCE.T3C.indx.9">
<?sml-break>
<?sml-need 6>
</Sect3>
</Sect2>
<Sect2 Id="ITODCE.T3C.div.10">
<Title>DCE RPC Administration</Title>
<IndexTerm Id="ITODCE.T3C.indx.16">
<Primary>RPC</Primary>
<Secondary>administration</Secondary>
</IndexTerm>
<Para>A few administrative tasks must be performed
when running a distributed application using RPC.
The application server executes most of these tasks
when it first starts.
As described in the previous section, the server registers its
(dynamically assigned) listening endpoint
with <Command>dced</Command>.
The server also advertises
information about itself and the interfaces it supports
in the DCE Directory Service.
</Para>
<Para>Nonautomated RPC administration is minimal.
The administrator must ensure that each
DCE machine has a DCE host daemon running on it.
An administrator may be involved in registering
servers in the namespace,
but this can also be done from server code upon initialization
as just described.  
Usually, an administrator will be needed to change
the ACL on the directory where the server will register so that the
server has write permission.
The DCE control program,
<Command>dcecp</Command>,
allows an administrator to (among many things) control the
<Command>dced</Command>
and administer RPC
information in the namespace.
</Para>
<Para>An administrator may be involved in installing a new RPC-based
application.
In particular, the server side of the application must be started
before it can begin receiving and servicing requests.
The administrator
may arrange for the server process to be started each time the machine is
booted, for example.
</Para>
</Sect2>
<Sect2 Id="ITODCE.T3C.div.11">
<Title>How an RPC Call Works</Title>
<IndexTerm Id="ITODCE.T3C.indx.17">
<Primary>RPC</Primary>
<Secondary>how it works</Secondary>
</IndexTerm>
<Para>A short ``walk-through'' of what happens during an RPC call may help
clarify the RPC concept and how it works.
This section describes the RPC call shown in Figure 3-3.
(This description is somewhat simplified.
The use of <Command>dced</Command>
<IndexTerm Id="ITODCE.T3C.indx.18">
<Primary><Command>dced</Command> daemon</Primary>
</IndexTerm>is not shown.)
</Para>
<?sml-need 4.5i>
<Figure>
<Title>RPC Runtime Process</Title>
<Graphic Format="EPS" Entityref="ITODCE.T3C.pic.3" Scalefit="1" Reprowid="300" Reprodep="300"></Graphic>
</Figure>
<!-- .so intro/pic/3c_rpc_03.pic-->
<?sml-space .5>
<Para>On the server side, the Bank server process is started up.
Before it begins its continuous cycle of receiving and servicing
requests, the server process advertises its
location in CDS 
(see Step 1 in Figure 3-3).
In this
way, when a client queries the directory service for a bank
server, it will be able to find it.
After initialization,
the server listens for a
request to come in from a client over the network.
This call to wait for client
requests is a call to the RPC runtime, since the runtime handles
network communications.
</Para>
<Para>Eventually, a user on the Bank client machine invokes the bank
application.
The Bank client initialization code calls the RPC runtime to
find a server offering the Bank service (see Point 2).
The Bank client
application code makes a call to a remote procedure; for example, a
call to a procedure that credits a bank account (3).  This results in
a call to the client stub code.  The stub
transforms the arguments of the call into a network
message (4).  It then calls the client's RPC runtime library, which
sends the message to the server (5).
</Para>
<Para>Back on the server side,
the RPC request is received by the RPC runtime, which has been
waiting for a client request (6).
The runtime passes control, and the received packet, to the
server stub.  The stub unpacks the arguments sent by the client (7) and
passes them to the appropriate operation by making a procedure call to
it.  At this point, the server application code that implements the
requested operation is called.  The
operation is performed; that is, the account is credited (8).
</Para>
<Para>The RPC reply (not shown in the figure) returns in the
reverse direction.
The Bank server application procedure returns the results of the
credit operation to the stub.
The stub packs up the return
parameters and passes the resulting message to the RPC runtime to send
off to the client over the network.  The server then waits for the next
client request to come in.
</Para>
<Para>The client's runtime receives the server's reply.
The client stub then
unpacks the received network message, arranging
returned parameters such that, when the client application call to RPC
returns, it looks like it has just performed a local procedure call.
</Para>
<Para>The mechanisms in both the client and server stubs and
the runtime library are transparent to the application programmer.
The programmer writes the
application calls to the RPC operations on the client side, and
provides implementations for those operations on the server side,
but the network communications code is generated
automatically.
</Para>
</Sect2>
<Sect2 Id="ITODCE.T3C.div.12">
<Title>System Independence</Title>
<IndexTerm Id="ITODCE.T3C.indx.19">
<Primary>RPC</Primary>
<Secondary>and system independence</Secondary>
</IndexTerm>
<IndexTerm Id="ITODCE.T3C.indx.20">
<Primary>DCE</Primary>
<Secondary>and related software</Secondary>
</IndexTerm>
<Para>There are several ways in which using DCE RPC frees a programmer
from dependence on other parts of a system.  It provides portability across
programming languages, data transfer syntax mechanisms, transport and
network protocols, and operating system and architecture platforms.
<?sml-break><?sml-need 12></Para>
<ItemizedList>
<ListItem>
<Para>Language independence
</Para>
<Para>DCE RPC is
<Replaceable>language independent</Replaceable>
in the sense that the stubs generated by the IDL compiler
can be called by programs written in any traditional programming
language, provided that the language follows the calling conventions
that the stub expects.
The DCE IDL compiler generates stubs that use the C language
calling conventions.
A client written in FORTRAN, for example, can call an IDL stub in the same
way that it calls any local C procedure.
It can then make a remote call to a server (possibly written in another
language) that contains
the server stub generated from the same IDL file as the client stub was
generated from.
</Para>
</ListItem>
<ListItem>
<Para>Data representation independence
</Para>
<Para>The default
<FirstTerm>data representation</FirstTerm>
format is the DCE Transfer Syntax, which is currently the Network
Data Representation (NDR).
It allows various representations for different types of data, including
multiple encodings for characters, integers, and floating-point numbers.
It is <Replaceable>multicanonical</Replaceable>;
that is, there are several canonical formats that can be used.
The sender chooses one of these formats (in most cases, it will
be the sender's native data representation),
with information about what representation it has chosen.
The receiver
transforms data into its own format, if it is different
from the format the data was sent in.
This model optimizes for the case when both sender
and receiver use the same data representation, a frequent occurrence.
(Note that this data transfer is handled by the RPC software and
is not visible to the application programmer.)
</Para>
<Para>The DCE RPC architecture allows the use of transfer syntaxes other than
DCE Transfer Syntax (although the only transfer syntax currently
provided in the OSF implementation is DCE Transfer Syntax).
For example, data could be formatted according
to the ISO ASN.1/BER specification and sent over the wire in that
way.
<?sml-break><?sml-need 12></Para>
</ListItem>
<ListItem>
<Para>Protocol independence
</Para>
<Para>Independence of
RPC, transport,
and
network protocols
is achieved
as follows.  The DCE RPC offering includes two different
RPC protocols.
The first runs over connection-oriented transport protocols; the second runs
over connectionless (datagram) transport protocols.
The programmer can specify the underlying RPC protocol,
but the semantics of RPC calls are the same
whether the RPC is running over a connectionless or connection-oriented
transport.
Another RPC protocol could be used in place of these two DCE RPC
protocols; for example, when ISO defines an RPC standard, it
could be used transparently as a third RPC protocol under the DCE RPC
interfaces.
</Para>
<Para>Servers identify themselves to the directory service according to
the interface they support and the protocols they use.  In this
way, a client can look up a server that uses network protocols that
are compatible with those that the client supports.
</Para>
</ListItem>
<ListItem>
<Para>Machine independence
</Para>
<Para>Because DCE RPC uses the DCE transfer syntax, distributed applications
are
<Replaceable>machine independent</Replaceable>.
DCE transfer syntax allows machines to transfer data
even when their native data representations are not the same.
</Para>
</ListItem>
<ListItem>
<Para>Operating system independence
</Para>
<Para>Finally, DCE RPC offers independence from the
<Replaceable>local operating system</Replaceable>.
The application programmer is not directly using the
networking system calls provided by the local operating system.
By being one level of abstraction up from this layer, the programmer
is insulated from networking system calls that are operating system
specific.
</Para>
</ListItem>
</ItemizedList>
<?sml-break>
<?sml-need 12>
</Sect2>
<Sect2 Id="ITODCE.T3C.div.13">
<Title>Additional Information on DCE RPC</Title>
<IndexTerm Id="ITODCE.T3C.indx.21">
<Primary>RPC</Primary>
<Secondary>additional information</Secondary>
</IndexTerm>
<Para>For additional information on DCE RPC, see the following:
</Para>
<ItemizedList>
<ListItem>
<Para>The RPC chapters of the
&DCEDg;
and the
&DCEAg;
</Para>
</ListItem>
<ListItem>
<Para>The <Filename MoreInfo="RefEntry">(3rpc)</Filename> reference pages of the
&DCEDr;
</Para>
</ListItem>
<ListItem>
<Para>The
<Filename MoreInfo="RefEntry">(1rpc)</Filename> and <Filename MoreInfo="RefEntry">(8rpc)</Filename> reference pages of the
&DCEAr;
</Para>
</ListItem>
<ListItem>
<Para>The RPC-related error messages in the &DCETg;
</Para>
</ListItem>
</ItemizedList>
<IndexTerm Id="ITODCE.T3C.indx.22" SpanEnd="ITODCE.T3C.indx.1">
</Sect2>
</Sect1>
<!--+ 10/25/96 16:59:01
    | tagMorph:  $Id: 3c_rpc.sgm,v 1.1.2.8 1996/12/11 15:32:56 carrig Exp $
    | tagMorph library:  $Id: 3c_rpc.sgm,v 1.1.2.8 1996/12/11 15:32:56 carrig Exp $
    | sml-to-docbook:  1.24
    +-->
