<!--
# @OSF_COPYRIGHT@
# 
# 
# HISTORY
# $Log: aclgroup.sgm,v $
# Revision 1.1.2.7  1996/12/15  23:01:37  wardr
# 	{edit,R1.2.2}
# 	[D[DFiformatting problems before penultimate build
# 	[1996/12/15  22:59:54  wardr]
#
# Revision 1.1.2.6  1996/12/14  23:13:58  wardr
# 	{edit,R1.2.2}
# 	Fixed figure problems
# 	[1996/12/14  23:12:13  wardr]
# 
# Revision 1.1.2.5  1996/12/12  22:48:32  jeff
# 	Incorporate OSF edits from SGML review
# 	[1996/12/12  22:48:07  jeff]
# 
# Revision 1.1.2.4  1996/11/06  18:46:49  weir
# 	Cleaned up history
# 	[1996/11/06  18:45:36  weir]
# 
# Revision 1.1.2.3  1996/10/28  17:33:34  carrig
# 	{enh,R1.2.2}
# 	Ready for editor
# 	[1996/10/28  17:19:18  carrig]
# 
# Revision 1.1.2.2  1996/10/24  20:10:08  carrig
# 	{enh,R1.2.2}
# 	Fixed tables
# 	[1996/10/24  20:08:03  carrig]
# 
# Revision 1.1.2.1  1996/10/22  20:42:24  wardr
# 	{edit,R1.2.2}
# 	Initial checkin after sgml conversion
# 	[1996/10/22  20:40:45  wardr]
# 
# Revision 1.1.1.2  1996/10/22  20:40:45  wardr
# 	{edit,R1.2.2}
# 	Initial checkin after sgml conversion
# 
# $EndLog$
-->
<!---->
<!-- Fragment document type declaration subset:
ArborText, Inc., 1988-1993, v.4001
<!DOCTYPE Book PUBLIC "-//Davenport//DTD DocBook V2.4//EN" [
]>
-->
<!---->
<!-- COPYRIGHT NOTICE-->
<!-- Copyright (c) 1990, 1991, 1992, 1993 Open Software Foundation, Inc.-->
<!-- ALL RIGHTS RESERVED (DCE).  See the file named COPYRIGHT.DCE in the-->
<!-- src directory for the full copyright text.-->
<!---->
<!---->
<!-- HISTORY-->
<!-- Revision 1.1.10.1  1996/05/14  19:51:53  wardr-->
<!-- 	{enh,R1.2.2}-->
<!-- 	Removed changebars-->
<!-- 	[1996/05/14  19:50:49  wardr]-->
<!---->
<!-- Revision 1.1.8.8  1995/12/29  17:02:05  wfl-->
<!-- 	{edit, R1.2.1}-->
<!-- 	made copy edits-->
<!-- 	[1995/12/29  16:59:08  wfl]-->
<!-- -->
<!-- Revision 1.1.8.7  1995/10/04  15:50:51  wfl-->
<!-- 	{def, 13140, R1.2.1}-->
<!-- 	Fixed quotes in change markers-->
<!-- 	[1995/10/04  15:49:36  wfl]-->
<!-- -->
<!-- Revision 1.1.8.6  1995/09/16  16:12:29  wfl-->
<!-- 	{no change}-->
<!-- 	[1995/09/16  16:10:52  wfl]-->
<!-- -->
<!-- Revision 1.1.8.5  1995/08/26  18:37:36  jeff-->
<!-- 	Just testing on this fine Saturday afternoon....-->
<!-- 	[1995/08/26  18:37:13  jeff]-->
<!-- -->
<!-- Revision 1.1.8.4  1995/08/25  19:48:52  jeff-->
<!-- 	Yes, more testing....-->
<!-- 	[1995/08/25  19:48:31  jeff]-->
<!-- -->
<!-- Revision 1.1.8.3  1995/08/25  17:25:23  jeff-->
<!-- 	Testing again...-->
<!-- 	[1995/08/25  17:24:57  jeff]-->
<!-- -->
<!-- Revision 1.1.8.2  1995/08/25  15:13:03  jeff-->
<!-- 	{still no defect}-->
<!-- 	Still testing....-->
<!-- 	[1995/08/25  15:08:58  jeff]-->
<!-- -->
<!-- Revision 1.1.8.1  1995/08/25  15:05:26  jeff-->
<!-- 	{no defect}-->
<!-- 	Testing ODE (please work...)-->
<!-- 	[1995/08/25  15:04:11  jeff]-->
<!-- -->
<!-- Revision 1.1.6.24  1995/07/24  18:27:35  buckler-->
<!-- 	More 1.1 edits.-->
<!-- 	[1995/07/24  17:56:52  buckler]-->
<!-- -->
<!-- Revision 1.1.6.23  1995/07/13  16:26:17  weir-->
<!-- 	Prentice-Hall edits-->
<!-- 	[1995/07/13  16:25:28  weir]-->
<!-- -->
<!-- Revision 1.1.6.22  1995/07/12  21:17:32  weir-->
<!-- 	Prentice-Hall edits-->
<!-- 	[1995/07/12  21:16:39  weir]-->
<!-- -->
<!-- Revision 1.1.6.21  1994/10/20  16:49:39  jeff-->
<!-- 	{defect, 12637, R1.1}-->
<!-- 	Purely editorial improvements to the previous defect.-->
<!-- 	[1994/10/20  16:49:15  jeff]-->
<!-- -->
<!-- Revision 1.1.6.20  1994/10/19  23:12:58  jeff-->
<!-- 	{defect, 12637, R1.1}-->
<!-- 	Incorporate information on delegation with DFS (mostly ACL text).-->
<!-- 	[1994/10/19  23:12:35  jeff]-->
<!-- -->
<!-- Revision 1.1.6.19  1994/10/14  21:57:31  jeff-->
<!-- 	{defect, 12535, R1.1}-->
<!-- 	Incorporate dcecp commands in DFS documentation (forgot-->
<!-- 	something...).-->
<!-- 	[1994/10/14  21:57:07  jeff]-->
<!-- -->
<!-- Revision 1.1.6.18  1994/10/14  19:34:44  jeff-->
<!-- 	{defect, 12535, R1.1}-->
<!-- 	Incorporate dcecp commands in DFS documentation.-->
<!-- 	[1994/10/14  19:31:50  jeff]-->
<!-- -->
<!-- Revision 1.1.6.17  1994/08/12  13:17:58  jeff-->
<!-- 	{defect, 11654, R1.1}-->
<!-- 	Added information about ACL permissions for renaming-->
<!-- 	an object.-->
<!-- 	[1994/08/12  13:17:35  jeff]-->
<!-- -->
<!-- Revision 1.1.6.16  1994/08/10  14:00:43  jeff-->
<!-- 	More clarification for unauthenticated users.-->
<!-- 	[1994/08/10  13:55:57  jeff]-->
<!-- -->
<!-- Revision 1.1.6.15  1994/07/22  17:48:39  jeff-->
<!-- 	{defect, 11388, R1.1}-->
<!-- 	Document status and removal of unauthenticated entry.-->
<!-- 	[1994/07/22  17:48:22  jeff]-->
<!-- -->
<!-- Revision 1.1.6.14  1994/07/18  23:41:35  jeff-->
<!-- 	{defect, 11350, R1.1}-->
<!-- 	Document root/self privileges.-->
<!-- 	[1994/07/18  23:41:10  jeff]-->
<!-- -->
<!-- Revision 1.1.6.13  1994/07/09  16:44:05  jeff-->
<!-- 	Small editorial changes to index.-->
<!-- 	[1994/07/09  16:43:46  jeff]-->
<!-- -->
<!-- Revision 1.1.6.12  1994/05/19  20:49:44  jeff-->
<!-- 	{defect, 8118, R1.1}-->
<!-- 	Correct use of double quotes.-->
<!-- 	[1994/05/19  20:48:21  jeff]-->
<!-- -->
<!-- Revision 1.1.6.11  1994/05/18  19:18:11  jeff-->
<!-- 	{enh,10690,R1.1}-->
<!-- 	Clarify relationship between executable files and x bit/permission.-->
<!-- 	[1994/05/18  19:17:50  jeff]-->
<!-- -->
<!-- Revision 1.1.6.10  1994/05/13  21:07:39  jeff-->
<!-- 	{defect, 10576, R1.1}-->
<!-- 	Improved the documentation of the ACL default cell.  I also made-->
<!-- 	some improvements to my previous work for defect 8118.-->
<!-- 	[1994/05/13  21:07:17  jeff]-->
<!-- -->
<!-- Revision 1.1.6.9  1994/05/06  22:08:29  jeff-->
<!-- 	{defect, 8118, R1.1}-->
<!-- 	Work release notes into documentation.-->
<!-- 	[1994/05/06  22:07:24  jeff]-->
<!-- -->
<!-- Revision 1.1.6.8  1994/05/04  21:33:08  jeff-->
<!-- 	{defect, 10527, R1.1}-->
<!-- 	Create structure for new DFS documentation organization.-->
<!-- 	[1994/05/04  21:31:48  jeff]-->
<!-- -->
<!-- Revision 1.1.6.7  1994/04/28  22:21:20  jeff-->
<!-- 	{defect, 10439, R1.1}-->
<!-- 	Correct cross-references for reorganization of DFS documentation.-->
<!-- 	[1994/04/28  22:14:45  jeff]-->
<!-- -->
<!-- Revision 1.1.6.6  1994/04/25  21:31:46  jeff-->
<!-- 	{defect, 10440, R1.1}-->
<!-- 	Incorporate user information into admin documentation; make simple-->
<!-- 	editorial changes as necessary.-->
<!-- 	[1994/04/25  21:22:02  jeff]-->
<!-- -->
<!-- Revision 1.1.6.5  1994/04/05  20:40:56  zahn-->
<!-- 	{enh,5923,R1.1}-->
<!-- -->
<!-- 	Fixed cross-references to now-defunct User's Guide-->
<!-- 	and Reference.-->
<!-- 	[1994/04/05  20:40:34  zahn]-->
<!-- -->
<!-- Revision 1.1.6.4  1993/10/13  20:24:02  tmw-->
<!-- 	Added index entries for second verions of master index.-->
<!-- 	[1993/10/13  15:33:26  tmw]-->
<!-- -->
<!-- Revision 1.1.6.3  1993/09/27  03:26:10  tmw-->
<!-- 	Added index entries for second version of master index.-->
<!-- 	[1993/09/27  03:23:12  tmw]-->
<!-- -->
<!-- Revision 1.1.6.2  1993/08/12  01:55:40  jeff-->
<!-- 	{def,8386,R1.0.3}-->
<!-- 	Incorporate OSF editorial comments into DFS Admin Guide and related-->
<!-- 	documentation.-->
<!-- -->
<!-- 	{def,7946,R1.0.3}-->
<!-- 	Correct and update the DFS ACL documentation.-->
<!-- 	[1993/08/12  01:54:34  jeff]-->
<!-- -->
<!-- Revision 1.1.4.11  1993/02/23  00:22:04  buckler-->
<!-- 	Changed .P! to .pI and added Postscript boundary boxes-->
<!-- 	[1993/02/23  00:20:56  buckler]-->
<!-- -->
<!-- Revision 1.1.4.10  1993/02/19  18:39:31  jeff-->
<!-- 	Fix for defect 6055, clarify root privileges (also-->
<!-- 	some work for defect 7219).-->
<!-- 	[1993/02/19  18:37:35  jeff]-->
<!-- -->
<!-- Revision 1.1.4.9  1993/02/18  23:07:21  jeff-->
<!-- 	Small change of wording.-->
<!-- 	[1993/02/18  23:06:31  jeff]-->
<!-- -->
<!-- Revision 1.1.4.8  1993/02/18  16:31:46  jeff-->
<!-- 	Fix for defects 7212, 7149, 6900, 6730, and 4101.-->
<!-- 	[1993/02/18  16:30:09  jeff]-->
<!-- -->
<!-- Revision 1.1.4.7  1993/02/06  01:23:28  jeff-->
<!-- 	Fixed a small formatting mistake (a comma in the intro-->
<!-- 	comments); sorry.-->
<!-- 	[1993/02/06  01:23:02  jeff]-->
<!-- -->
<!-- Revision 1.1.4.6  1993/02/05  20:18:25  jeff-->
<!-- 	Fix for defect 7135, change key file to keytab file.-->
<!-- 	[1993/02/05  20:14:15  jeff]-->
<!-- -->
<!-- Revision 1.1.4.5  1993/01/28  19:05:16  dbelch-->
<!-- 	Embedding copyright notice-->
<!-- 	[1993/01/28  18:29:10  dbelch]-->
<!-- -->
<!-- Revision 1.1.4.4  1993/01/27  21:08:58  buckler-->
<!-- 	Fixed cross-refs and figure calls for new book org-->
<!-- 	[1993/01/27  21:06:28  buckler]-->
<!-- -->
<!-- Revision 1.1.4.3  1993/01/24  19:47:01  jeff-->
<!-- 	Fix for defect 6988, add permissions for binary and-->
<!-- 	script execution; also converted tables to TBL.-->
<!-- 	[1993/01/24  19:46:26  jeff]-->
<!-- -->
<!-- Revision 1.1.4.2  1992/08/26  12:09:34  weir-->
<!-- 	Removed change bars-->
<!-- 	[1992/08/26  11:51:54  weir]-->
<!-- -->
<!-- Revision 1.1.2.8  1992/07/04  15:36:56  jeff-->
<!-- 	Documented that inclusion in the fxd group and being root-->
<!-- 	are not the same.-->
<!-- 	[1992/07/04  15:36:26  jeff]-->
<!-- -->
<!-- Revision 1.1.2.7  1992/07/03  21:46:46  jeff-->
<!-- 	Updated initial creation ACL and other information.-->
<!-- 	[1992/07/03  21:46:15  jeff]-->
<!-- -->
<!-- Revision 1.1.2.6  1992/07/02  22:44:50  jeff-->
<!-- 	Text now states that user_obj always has the c permission.-->
<!-- 	[1992/07/02  22:44:20  jeff]-->
<!-- -->
<!-- Revision 1.1.2.5  1992/07/02  18:58:08  jeff-->
<!-- 	Changed required permissions and small editorial things.-->
<!-- 	[1992/07/02  18:56:23  jeff]-->
<!-- -->
<!-- Revision 1.1.2.4  1992/06/25  23:23:08  jeff-->
<!-- 	Removed obsolete chmod restriction for DCE LFS objects.-->
<!-- 	[1992/06/25  23:22:36  jeff]-->
<!-- -->
<!-- Revision 1.1.2.3  1992/06/09  17:45:58  jeff-->
<!-- 	Included information about NULL initial ACLs of the root-->
<!-- 	directory of a fileset and suggestions for how to set the-->
<!-- 	ACLs.-->
<!-- 	[1992/06/09  17:43:39  jeff]-->
<!-- -->
<!-- 	Clarified the description of the DCE pathname used to-->
<!-- 	specify a machine name.-->
<!-- 	[1992/06/07  01:45:04  jeff]-->
<!-- -->
<!-- Revision 1.1.2.2  1992/05/12  15:55:27  jeff-->
<!-- 	Verified and/or modified italics and other editorial-->
<!-- 	aspects of the file.-->
<!-- 	[1992/05/12  14:43:57  jeff]-->
<!-- -->
<!-- Revision 1.1  1992/01/29  16:14:41  damon-->
<!-- 	Initial revision-->
<!-- -->
<!---->
<!-- (c) Copyright 1991, Open Software Foundation, Inc.  ALL RIGHTS RESERVED-->
<!--no-op:  Copyright (C) 1989, 1991, Transarc Corporation-->
<!--no-op:  The Gulf Tower-->
<!--no-op:  707 Grant Street-->
<!--no-op:  Pittsburgh, PA  15219-->
<!-- CHANGED-->
<!-- 12-09-91:  Added "group:" before four examples.-->
<!-- 12-09-91:  Removed 28 extraneous hyphens.-->
<!-- 12-09-91:  Added one space tp an example.-->
<!-- 12-09-91:  Removed two spaces from an example.-->
<!-- 12-11-91:  Section 3.1.4:  Made a fair amount of edits, all of them-->
<!--            technical, to the entire section.-->
<!-- END CHANGED-->
<Chapter Id="DFSAGR.ACLG.div.1">
<Title>Using ACLs and Groups </Title>
<IndexTerm Id="DFSAGR.ACLG.indx.1">
<Primary>access control lists (ACLs)</Primary>
<Secondary>for files and directories</Secondary>
</IndexTerm>
<IndexTerm Id="DFSAGR.ACLG.indx.2">
<Primary>files</Primary>
<Secondary>protecting</Secondary>
</IndexTerm>
<IndexTerm Id="DFSAGR.ACLG.indx.3">
<Primary>directories</Primary>
<Secondary>access control (DFS)</Secondary>
</IndexTerm>
<Para>This chapter summarizes the use of DCE Access Control Lists (ACLs) with DFS.
DCE ACLs allow you to specify access to files and directories for individuals
and groups of users.  DCE ACLs can be used to protect files and directories
stored in DCE LFS filesets. (See the Security Service portion of the &DCEAc;
for details about manipulating DCE ACLs.)
</Para>
<Para>This chapter also presents information about groups.  In addition to using
groups in ACLs, you can use groups in DFS administrative lists to specify the
users who are allowed to issue commands that affect filesets and server
processes.  In this manner, you can precisely control the security of the
administrative domains in your cell. (See Chapter 4 for complete details about
using administrative lists; see the Security Service portion of the &DCEAc; for
information about creating and maintaining groups.)
</Para>
<Note>
<Para>The information in this chapter applies only to ACLs used with data stored in
DCE LFS filesets.  It does not apply to ACLs used with other DCE components.
Differences exist between the use of DCE ACLs with DCE LFS objects and the
use of DCE ACLs with other DCE components.
</Para>
</Note>
<Sect1 Id="DFSAGR.ACLG.div.2">
<Title>Using DCE ACLs with DFS</Title>
<Para>In the UNIX operating system, mode bits provide file system protection for
file and directory objects (the general term "object" refers to a file or a
directory).  The access permissions for files and directories are set for three
kinds of users: the user who owns the object, members of the group that owns
the object, and all other users.  The operations that these users can perform
are determined by read, write, and execute mode bits.
</Para>
<Para>All file and directory objects in DCE LFS filesets also have mode bits.
However, the protection of such files and directories can be augmented with
DCE ACLs, which allow access permissions to be defined for many different
users and groups.  With DCE ACLs, you can grant users six different permissions
for your directories and four different permissions for your files.  These
permissions allow for the precise definition of access to directories and
files.
</Para>
<Para>DCE ACLs supplement the UNIX mode bits that are used to protect files and
directories in DCE LFS filesets; they do not replace them.  DCE LFS ensures
that an object's mode bits and its ACL permissions are always synchronized.
Note that objects in DCE LFS filesets can rely exclusively on mode bits as
their sole form of protection. (See Sections 3.1.5 and 3.1.6 for more
information about this possibility; see Section 3.1.4 for a description of
the interaction and level of compatibility between DCE ACLs and UNIX mode
bits.)
</Para>
<Para>DCE ACLs are used only with objects in DCE LFS filesets. Mode bits are the
only form of protection for objects in most non-LFS filesets.
</Para>
<Sect2 Id="DFSAGR.ACLG.div.3">
<Title>ACL Entries</Title>
<IndexTerm Id="DFSAGR.ACLG.indx.4">
<Primary>access control lists (ACLs)</Primary>
<Secondary>format of entries</Secondary>
</IndexTerm>
<Para>The DCE ACL for a file or directory object consists of multiple ACL
entries. Each ACL entry defines the operations that a different user or group
can perform on the object.  Each entry has the following format:
</Para>
<InformalExample>
<Para><Literal>{</Literal><Symbol Role="Variable">type</Symbol> [<Symbol Role="Variable">key</Symbol>] <Symbol Role="Variable">permissions</Symbol><Literal>}</Literal>
</Para>
</InformalExample>
<Para>The elements of an entry provide the following information:
</Para>
<ItemizedList>
<ListItem>
<Para>The <Symbol Role="Variable">type</Symbol> specifies the kind of user or group to which the entry applies.
</Para>
</ListItem>
<ListItem>
<Para>The <Symbol Role="Variable">key</Symbol> names the specific user or group to which the entry applies.
Some entries apply to predefined collections of users and so do not include
a key.
</Para>
</ListItem>
<ListItem>
<Para>The <Symbol Role="Variable">permissions</Symbol> define the operations that can be performed on the object
by the user or group to which the entry applies.  ACLs on DCE LFS objects can
include six access permissions: <Literal>r</Literal> (read), <Literal>w</Literal> (write), <Literal>x</Literal>
(execute), <Literal>c</Literal> (control), <Literal>i</Literal> (insert), and <Literal>d</Literal> (delete).
</Para>
</ListItem>
</ItemizedList>
<Para>An ACL entry is also used to define a mask that can be included on an ACL to
limit the permissions granted by certain other entries.  The following
subsections provide more detailed information about the various ACL entry
types and keys and the permissions they can grant.
</Para>
<Note>
<Para>Although the text of this chapter refers primarily to ACL entries for users
and groups, an ACL entry can apply to any principal (for example, to a server
principal).
</Para>
</Note>
<Sect3 Id="DFSAGR.ACLG.div.4">
<Title>ACL Entry Types for Users and Groups</Title>
<IndexTerm Id="DFSAGR.ACLG.indx.5">
<Primary>access control lists (ACLs)</Primary>
<Secondary>entry types</Secondary>
</IndexTerm>
<IndexTerm Id="DFSAGR.ACLG.indx.6">
<Primary>access control lists (ACLs)</Primary>
<Secondary>default cell</Secondary>
</IndexTerm>
<Para>Most ACL entry types are used to specify the permissions granted to users and
groups.  To fully understand how ACL entries for users and groups are defined
and interpreted, you need to understand the concept of an ACL's default cell.
Recall that a user's local, or home, cell is the cell in whose Registry
Database the user's principal and account are defined.  Just as each user has
a local cell, each ACL has a default cell.
</Para>
<Para>An ACL's default cell names the cell with respect to which the ACL's
entries are defined.  A user or group named in an ACL entry is assumed to be
from the default cell unless the entry explicitly names a different cell.  The
default cell is not necessarily the cell in which the ACL exists.  For example,
an object in cell <Literal>abc.com</Literal> can have an ACL whose default cell
is <Literal>def.com</Literal>.  With respect to ACLs, a local user is one whose
local cell is the same as the default cell of an ACL; conversely, a foreign
user is one whose default cell is different from the default cell of an ACL.
</Para>
<Para>Table 3-1 lists the different types of ACL entries, their use of entry keys,
and the users and groups to which they apply.  As necessary, the table provides
information about how an ACL's default cell affects the interpretation of the
entry.
<?sml-break></Para>
<Table Frame="all" Remap="center" Orient="Port">
<Title>ACL Entry Types for Users and Groups</Title>
<TGroup Rowsep="0" Colsep="0" Cols="3">
<ColSpec Rowsep="1" Colsep="1" Align="Left" Colwidth="101*" Colname="col1" Colnum="1">
<ColSpec Rowsep="1" Colsep="1" Align="Left" Colwidth="103*" Colname="col2" Colnum="2">
<ColSpec Rowsep="1" Colsep="1" Align="Left" Colwidth="149*" Colname="col3" Colnum="3">
<THead>
<Row>
<Entry Rowsep="1"><Literal>Type</Literal></Entry>
<Entry Rowsep="1"><Literal>Key</Literal></Entry>
<Entry Rowsep="1"><Literal>Applies to</Literal></Entry>
</Row>
</THead>
<TBody>
<Row>
<Entry rowsep="1"><Literal>user_obj</Literal></Entry>
<Entry rowsep="1">None
</Entry>
<Entry rowsep="1">The user who owns the object.  The user is from the default cell.
</Entry>

</Row>
<Row>
<Entry rowsep="1"><Literal>user</Literal></Entry>
<Entry rowsep="1"><Symbol Role="Variable">username</Symbol>
</Entry>
<Entry rowsep="1">The user <Symbol Role="Variable">username</Symbol> from the default cell.
</Entry>
</Row>
<Row>
<Entry rowsep="1"><Command>foreign_user</Command></Entry>
<Entry rowsep="1"><Symbol Role="Variable">cell_name</Symbol><Filename>/</Filename><Symbol Role="Variable">username</Symbol></Entry>
<Entry rowsep="1">The user <Symbol Role="Variable">username</Symbol> from the foreign cell <Symbol Role="Variable">cell_name</Symbol>.</Entry>
</Row>

<Row>
<Entry rowsep="1"><Literal>group_obj</Literal></Entry>
<Entry rowsep="1">None
</Entry>
<Entry rowsep="1">Members of the group that owns the object.  The group is from the default cell.
</Entry>
</Row>
<Row>
<Entry rowsep="1"><Command>group</Command></Entry>
<Entry rowsep="1"><Symbol Role="Variable">group_name</Symbol>
</Entry>
<Entry rowsep="1">Members of the group <Symbol Role="Variable">group_name</Symbol> from the default cell.
</Entry>

</Row>
<Row>
<Entry rowsep="1"><Command>foreign_group</Command></Entry>
<Entry rowsep="1"><Symbol Role="Variable">cell_name</Symbol><Filename>/</Filename><Symbol Role="Variable">group_name</Symbol>
</Entry>
<Entry rowsep="1">Members of the group <Symbol Role="Variable">group_name</Symbol> from the foreign cell <Symbol Role="Variable">cell_name</Symbol>.
</Entry>
</Row>
<Row>
<Entry rowsep="1"><Literal>other_obj</Literal></Entry>
<Entry rowsep="1">None
</Entry>
<Entry rowsep="1">Users from the default cell who do not match any of the preceding entries.
</Entry>

</Row>
<Row>
<Entry rowsep="1"><Command>foreign_other</Command></Entry>
<Entry rowsep="1"><Symbol Role="Variable">cell_name</Symbol>
</Entry>
<Entry rowsep="1">Users from the foreign cell <Symbol Role="Variable">cell_name</Symbol> who do not match any of the
preceding entries.
</Entry>

</Row>
<Row>
<Entry rowsep="1"><Literal>any_other</Literal></Entry>
<Entry rowsep="1">None
</Entry>
<Entry rowsep="1">Users from any foreign cell who do not match any of the preceding entries.
</Entry>

</Row>
</TBody>
</TGroup>
</Table>
<?sml-space .5>
<?sml-break>
<?sml-need 10>
<Para>The default cell of an ACL, not the cell in which the ACL resides, determines
the cell with respect to which the following entry types are defined:
</Para>
<ItemizedList>
<ListItem>
<Para><Literal>user_obj</Literal>
</Para>
</ListItem>
<ListItem>
<Para><Literal>user</Literal>
</Para>
</ListItem>
<ListItem>
<Para><Literal>group_obj</Literal>
</Para>
</ListItem>
<ListItem>
<Para><Command>group</Command>
</Para>
</ListItem>
<ListItem>
<Para><Literal>other_obj</Literal>
</Para>
</ListItem>
</ItemizedList>
<Para>For instance, a <Literal>user</Literal> entry specifies the permissions for a user whose
local cell is the same as the default cell of an ACL.  Whereas the entry types
in the previous list refer to users and groups whose local cell is the same as
an ACL's default cell, the <Command>foreign_user</Command>, <Command>foreign_group</Command>,
<Command>foreign_other</Command>, and <Literal>any_other</Literal> entry types refer to users and groups
whose local cells are different from an ACL's default cell.  For instance, a
<Command>foreign_user</Command> entry specifies the permissions for a user whose local
cell is different from the default cell of an ACL. (Note that <Literal>foreign_</Literal>
entries can exist for users or groups from the default cell.  See Section
3.1.5.1 for more information about an ACL's default cell, how it is listed,
and how it is set.)
</Para>
<Para>Some examples of ACL entries for users and groups follow:
</Para>
<VariableList>
<VarListEntry role="linebreak">
<Term><Literal>{user_obj </Literal><Symbol Role="Variable">permissions</Symbol><Literal>}</Literal></Term>
<ListItem>
<Para>Defines the permissions for the user who owns the object. The user is
from the default cell.
</Para>
</ListItem>
</VarListEntry>
<VarListEntry role="linebreak">
<Term><Literal>{user frost </Literal><Symbol Role="Variable">permissions</Symbol><Literal>}</Literal></Term>
<ListItem>
<Para>Defines the permissions for the user named <Literal>frost</Literal> from
the default cell.
</Para>
</ListItem>
</VarListEntry>
<VarListEntry role="linebreak">
<Term><Literal>{group writers </Literal><Symbol Role="Variable">permissions</Symbol><Literal>}</Literal></Term>
<ListItem>
<Para>Defines the permissions for the group named <Literal>writers</Literal>
from the default cell.
</Para>
</ListItem>
</VarListEntry>
<VarListEntry role="linebreak">
<Term><Literal>{foreign_user /.../abc.com/wvh </Literal><Symbol Role="Variable">permissions</Symbol><Literal>}</Literal></Term>
<ListItem>
<Para>Defines the permissions for the user named <Literal>wvh</Literal> from
the foreign cell named <Literal>abc.com</Literal>.
<?sml-break><?sml-need 10></Para>
</ListItem>
</VarListEntry>
<VarListEntry role="linebreak">
<Term><Literal>{foreign_group /.../abc.com/writers </Literal><Symbol Role="Variable">permissions</Symbol><Literal>}</Literal></Term>
<ListItem>
<Para>Defines the permissions for the group named <Literal>writers</Literal>
from the foreign cell named <Literal>abc.com</Literal>.
</Para>
</ListItem>
</VarListEntry>
</VariableList>
<IndexTerm Id="DFSAGR.ACLG.indx.7" SpanEnd="DFSAGR.ACLG.indx.6">
<Para>The following rules govern the appearance of entries for users and groups
on the ACLs of DCE LFS objects:
</Para>
<ItemizedList>
<ListItem>
<Para>The <Literal>user_obj</Literal>, <Literal>group_obj</Literal>, and
<Literal>other_obj</Literal> entries must exist; all other entry types for
users and groups are always optional.
</Para>
</ListItem>
<ListItem>
<Para>Only one entry of the same specificity (the same entry type and, if applicable,
the same key) can exist on an ACL; for example, only one <Literal>user</Literal> entry can
exist for a given <Symbol Role="Variable">username</Symbol> from the default cell.
</Para>
</ListItem>
</ItemizedList>
<Note>
<Para>The first rule applies only to ACLs on DCE LFS objects, not to ACLs on objects
associated with other DCE components.  DCE LFS enforces these restrictions in an
effort to track Draft 12 of the POSIX standard for ACLs on file and directory
objects. (POSIX is a prominent collection of standards specifications for the
computer industry.)
</Para>
</Note>
</Sect3>
<Sect3 Id="DFSAGR.ACLG.div.5">
<Title>ACL Entry Types for Masks</Title>
<IndexTerm Id="DFSAGR.ACLG.indx.8">
<Primary>permissions</Primary>
<Secondary>filtering and accrual</Secondary>
</IndexTerm>
<Para>DCE ACLs also provide a <Literal>mask_obj</Literal> entry type that can be used to filter,
or mask, the permissions granted by certain user and group entries.  The ACL
<Literal>mask_obj</Literal> entry has the following format:
</Para>
<InformalExample>
<Para><Literal>{mask_obj </Literal><Symbol Role="Variable">permissions</Symbol><Literal>}</Literal>
</Para>
</InformalExample>
<Para>The <Literal>mask_obj</Literal> entry specifies the maximum set of permissions that can be
granted by any entries <Replaceable>except</Replaceable> the <Literal>user_obj</Literal> and <Literal>other_obj</Literal>
entries.  Permissions granted by any other entries are filtered through the
<Literal>mask_obj</Literal>; only those permissions found in both the entry and the
<Literal>mask_obj</Literal> are granted.
<?sml-break><?sml-need 20></Para>
<Para>The <Literal>mask_obj</Literal> entry can only restrict the permissions granted by another
entry; it cannot extend them.  When DCE LFS determines the permissions granted
to a user by an entry to which the <Literal>mask_obj</Literal> applies, it compares the
permissions granted by the applicable entry with those permitted by the
<Literal>mask_obj</Literal> entry.  DCE LFS denies the user a permission granted by the
applicable entry if the permission is not included in the permission set
specified with the <Literal>mask_obj</Literal> entry.  DCE LFS does not grant the user a
permission specified with the <Literal>mask_obj</Literal> entry but not with the applicable
entry.
</Para>
<Para>If an entry other than <Literal>user_obj</Literal>, <Literal>group_obj</Literal>, or <Literal>other_obj</Literal>
exists on an ACL, the <Literal>mask_obj</Literal> entry must exist as well.  If a
<Literal>mask_obj</Literal> entry does not already exist when an entry other than an
<Literal>_obj</Literal> entry is created, the <Command>dcecp acl</Command> command, which is used to
modify an ACL, automatically creates one.  Note that the <Literal>mask_obj</Literal> entry
filters the permissions granted to the <Literal>group_obj</Literal> entry, but an ACL can
have a <Literal>group_obj</Literal> entry without having a <Literal>mask_obj</Literal> entry.
</Para>
<Note>
<Para>The rule that requires the presence of the <Literal>mask_obj</Literal> entry with an entry
other than an <Literal>_obj</Literal> entry applies only to ACLs on DCE LFS objects, not to
ACLs on objects associated with other DCE components.  DCE LFS enforces this
restriction in an effort to track Draft 12 of the POSIX standard for ACLs on
file and directory objects.
</Para>
</Note>
</Sect3>
<Sect3 Id="DFSAGR.ACLG.div.6">
<Title>ACL Entry Types for Unauthenticated Users</Title>
<Para>An unauthenticated user is one whose DCE identity has not been verified by
the DCE Security Service.  For example, a user can access DCE without being
authenticated by logging into the local machine without logging into DCE.  In
this case, the user is said to be unauthenticated because DCE cannot verify
the user's identity.  An authenticated user whose DCE credentials have expired
is also considered an unauthenticated user.
</Para>
<Para>When a user attempts to access an object, DFS first determines whether the
user is authenticated.  For access to an object in a DCE LFS fileset, an
authenticated user acquires the permissions associated with the user's
authenticated identity according to the normal ACL evaluation routine. (See
Section 3.1.2 for a description of ACL evaluation.) An unauthenticated user's
permissions are determined as follows:
<!-- .nL-->
<!-- .ne 10-->
</Para>
<OrderedList>
<ListItem>
<Para>DFS uses the identity <Literal>nobody</Literal> as the identity of the user; it treats the
identity as an authenticated user from a nonexistent foreign cell.
</Para>
<Para><IndexTerm Id="DFSAGR.ACLG.indx.9">
<Primary>access control lists (ACLs)</Primary>
<Secondary><Literal>nobody</Literal></Secondary>
</IndexTerm>
<IndexTerm Id="DFSAGR.ACLG.indx.10">
<Primary>access control lists (ACLs)</Primary>
<Secondary><Literal>nogroup</Literal></Secondary>
</IndexTerm>
<IndexTerm Id="DFSAGR.ACLG.indx.11">
<Primary><Literal>nobody</Literal></Primary>
</IndexTerm>
<IndexTerm Id="DFSAGR.ACLG.indx.12">
<Primary><Literal>nogroup</Literal></Primary>
</IndexTerm>DFS assigns the identity <Literal>nobody</Literal> to all unauthenticated users, treating
the identity as an authenticated user from an unknown foreign cell, regardless
of the cell from which an unauthenticated user requests access to an object.
DFS uses a fictitious cell as the local cell of the identity <Literal>nobody</Literal>; an
entry for the fabricated cell cannot be created on an ACL.  The primary group
of the identity <Literal>nobody</Literal> is the group <Literal>nogroup</Literal>.  The user ID of the
identity <Literal>nobody</Literal> and the group ID of the group <Literal>nogroup</Literal> are both
typically <Literal>-2</Literal>.  However, these IDs can vary between File Server machines.
</Para>
</ListItem>
<ListItem>
<Para>DCE LFS grants the user the permissions associated with the <Literal>any_other</Literal>
entry.
</Para>
<Para>Because the user <Literal>nobody</Literal> is treated as a user from a <Replaceable>nonexistent</Replaceable>
foreign cell, the user <Replaceable>cannot</Replaceable> match any <Literal>foreign_</Literal> entries
(<Command>foreign_user</Command>, <Command>foreign_group</Command>, or <Command>foreign_other</Command>).  The user
is therefore granted the permissions associated with the <Literal>any_other</Literal>
entry.  If an <Literal>any_other</Literal> entry is not present on the ACL, the user has no
permissions.  To prevent unauthenticated users from acquiring permissions for
an object, do not include an <Literal>any_other</Literal> entry on the object's ACL.
</Para>
</ListItem>
</OrderedList>
<Para>For access to objects in non-LFS filesets, unauthenticated users (regardless
of their cells) and all foreign users (authenticated or unauthenticated) are
treated as the user <Literal>nobody</Literal>.  As a result, such users are granted the
permissions associated with the <Literal>other</Literal> UNIX mode bits.  Note that
authenticated users from foreign cells are granted the permissions associated
with their authenticated foreign identities when they access objects in DCE
LFS filesets.
</Para>
<Note>
<IndexTerm Id="DFSAGR.ACLG.indx.13">
<Primary><Literal>unauthenticated</Literal> entry type</Primary>
<Secondary>removing</Secondary>
</IndexTerm>
<Para>DCE ACLs used with objects for other DCE components include an additional
<Literal>unauthenticated</Literal> entry type that masks the permissions that can be
granted to unauthenticated users.  Prior to DCE Version 1.1, DCE LFS allowed
<Literal>unauthenticated</Literal> entries to be included on the ACLs of DCE LFS
objects, but it ignored the entries when determining users' permissions.
<?sml-break><?sml-need 20></Para>
<Para>As of DCE Version 1.1, DCE LFS no longer allows <Literal>unauthenticated</Literal> entries to
be included on the ACLs of DCE LFS objects.  It is possible for the ACLs of
existing objects to include <Literal>unauthenticated</Literal> entries added with earlier
versions of DCE LFS.  DCE LFS continues to ignore existing <Literal>unauthenticated</Literal>
entries when determining permissions.
</Para>
<Para>However, an ACL that includes an <Literal>unauthenticated</Literal> entry cannot be modified
until the entry is removed from the ACL.  An attempt to make any other change
to the ACL fails until the entry is removed.  You can use the <Command>dcecp acl
modify</Command> command with the <Option>remove</Option> option to remove an
<Literal>unauthenticated</Literal> entry from an ACL.
</Para>
<Para>To prevent potential failures, you may want to remove <Literal>unauthenticated</Literal>
entries from the ACLs of all DCE LFS objects.  Moving or restoring a DCE LFS
fileset to a File Server machine that is running DCE Version 1.1 or a later version of
DCE automatically removes <Literal>unauthenticated</Literal> entries from the ACLs of all
objects in the fileset.  You can also write a script that removes the entries
from the ACLs of all DCE LFS objects in your cell.
</Para>
</Note>
<IndexTerm Id="DFSAGR.ACLG.indx.14" SpanEnd="DFSAGR.ACLG.indx.5">
</Sect3>
<Sect3 Id="DFSAGR.ACLG.div.7">
<Title>ACL Permissions</Title>
<IndexTerm Id="DFSAGR.ACLG.indx.15">
<Primary>permissions</Primary>
<Secondary>for file and directory operations</Secondary>
</IndexTerm>
<Para>Each ACL entry for a user or group includes a set of permissions that defines
the operations it grants to the user or users to whom it applies.  For a
<Literal>mask_obj</Literal> entry, the permissions define the maximum set of permissions
that are allowed by the mask.  Each entry can be assigned a different set of
permissions.
</Para>
<Para>The following permissions can be associated with an entry on an ACL for a file
or directory in a DCE LFS fileset.  All six permissions apply to a directory,
but only the first four apply to a file; the insert and delete permissions are
meaningless for files.
<?sml-break><?sml-need 10></Para>
<ItemizedList>
<ListItem>
<Para><Literal>r</Literal> (read)
</Para>
</ListItem>
<ListItem>
<Para><Literal>w</Literal> (write)
</Para>
</ListItem>
<ListItem>
<Para><Literal>x</Literal> (execute)
</Para>
</ListItem>
<ListItem>
<Para><Literal>c</Literal> (control)
</Para>
</ListItem>
<ListItem>
<Para><Literal>i</Literal> (insert)
</Para>
</ListItem>
<ListItem>
<Para><Literal>d</Literal> (delete)
</Para>
</ListItem>
</ItemizedList>
<Para>Table 3-2 lists the various operations that can be performed on a file
or directory and the ACL permissions that are required to perform them.  All
operations performed on a file or directory object require the
<Literal>x</Literal> (execute) permission on each directory that leads to
the object. Keep this requirement in mind when determining the permissions
necessary to perform the operations described in the following chapters; not
all operations list it explicitly.
</Para>
<Note>
<IndexTerm Id="DFSAGR.ACLG.indx.16">
<Primary>execute (<Literal>x</Literal>) permission</Primary>
<Secondary>when required</Secondary>
</IndexTerm>
<Para>A user must have the <Literal>x</Literal> (execute) permission on each
directory that leads to an object to access that object by its pathname. 
However, certain file system operations, such as the creation of hard links
and mount points, can circumvent this restriction by supplanting the usual
traversal of the pathname.  To guarantee that an object is securely protected,
set its permissions to the precise protections you want it to have.  Do not
rely on the absence of the <Literal>x</Literal> permission for a parent
directory to prevent unwanted access of an object.
</Para>
</Note>
<?sml-break>
<?sml-need 20>
<?sml-break>
<Table Frame="all" Remap="center" Orient="Port">
<Title>File and Directory Operations and Required ACL Permissions</Title>
<TGroup Rowsep="0" Colsep="0" Cols="2">
<ColSpec Rowsep="1" Colsep="1" Align="Left" Colwidth="1.75*" Colname="col1" Colnum="1">
<ColSpec Rowsep="1" Align="Left" Colwidth="3.25*" Colname="col2" Colnum="2">
<THead>
<Row>
<Entry Rowsep="1"><Literal>Operation</Literal></Entry>
<Entry Rowsep="1"><Literal>Required Permissions</Literal></Entry>
</Row>
</THead>
<TBody>
<Row>
<Entry rowsep="1">Change to a directory
</Entry>
<Entry rowsep="1"><Literal>x</Literal> on the directory itself
<?Pub _newline><Literal>x</Literal> on all directories that lead to the directory
</Entry>
</Row>
<Row>
<Entry rowsep="1">List the contents of a directory
</Entry>
<Entry rowsep="1"><Literal>r</Literal> on the directory itself
<?Pub _newline><Literal>x</Literal> on all directories that lead to the directory
</Entry>
</Row>
<Row>
<Entry rowsep="1">List information about the objects in a directory
</Entry>
<Entry rowsep="1"><Literal>r</Literal> and <Literal>x</Literal> on the directory itself
<?Pub _newline><Literal>x</Literal> on all directories that lead to the directory
</Entry>
</Row>
<Row>
<Entry rowsep="1">Create an object
</Entry>
<Entry rowsep="1"><Literal>w</Literal>, <Literal>x</Literal>, and <Literal>i</Literal> on the directory in which the object is to be
placed
<?Pub _newline><Literal>x</Literal> on all directories that lead to the directory in which the object is
to be placed
</Entry>
</Row>
<Row>
<Entry rowsep="1">Delete an object
</Entry>
<Entry rowsep="1"><Literal>w</Literal>, <Literal>x</Literal>, and <Literal>d</Literal> on the directory from which the object is to be
deleted
<?Pub _newline><Literal>x</Literal> on all directories that lead to the directory from which the object is
to be deleted
</Entry>
</Row>
<Row>
<Entry rowsep="1">Rename an object
</Entry>
<Entry rowsep="1"><Literal>w</Literal>, <Literal>x</Literal>, and <Literal>d</Literal> on the object's current directory
<?Pub _newline><Literal>x</Literal> on all directories that lead to the object's current directory
</Entry>
</Row>
<Row>
<Entry rowsep="1">
</Entry>
<Entry rowsep="1"><Literal>w</Literal>, <Literal>x</Literal>, and <Literal>i</Literal> on the object's new directory
<?Pub _newline><Literal>x</Literal> on all directories that lead to the object's new directory
</Entry>
</Row>
<Row>
<Entry rowsep="1">
</Entry>
<Entry rowsep="1"><Literal>w</Literal> on the object <Replaceable>if the object is a directory</Replaceable>
</Entry>
</Row>
<Row>
<Entry rowsep="1">Read or read lock a file
</Entry>
<Entry rowsep="1"><Literal>r</Literal> on the file itself
<?Pub _newline><Literal>x</Literal> on all directories that lead to the file
</Entry>
</Row>
<Row>
<Entry rowsep="1">Write or write lock a file
</Entry>
<Entry rowsep="1"><Literal>w</Literal> on the file itself
<?Pub _newline><Literal>x</Literal> on all directories that lead to the file
</Entry>
</Row>
<Row>
<Entry rowsep="1">Execute a binary file
</Entry>
<Entry rowsep="1"><Literal>x</Literal> on the file itself
<?Pub _newline><Literal>x</Literal> on all directories that lead to the file
</Entry>
</Row>
<Row>
<Entry rowsep="1">Execute a shell script
</Entry>
<Entry rowsep="1"><Literal>r</Literal> and <Literal>x</Literal> on the script itself
<?Pub _newline><Literal>x</Literal> on all directories that lead to the script
</Entry>
</Row>
<Row>
<Entry rowsep="1">List the ACLs on an object
</Entry>
<Entry rowsep="1"><Literal>x</Literal> on all directories that lead to the object
</Entry>
</Row>
<Row>
<Entry rowsep="1">Change the ACLs on an object
</Entry>
<Entry rowsep="1"><Literal>c</Literal> on the object itself
<?Pub _newline><Literal>x</Literal> on all directories that lead to the object
</Entry>
</Row>
</TBody>
</TGroup>
</Table>
<?sml-space .5>
<IndexTerm Id="DFSAGR.ACLG.indx.17">
<Primary>files</Primary>
<Secondary>required permissions (table)</Secondary>
</IndexTerm>
<IndexTerm Id="DFSAGR.ACLG.indx.18">
<Primary>directories</Primary>
<Secondary>required permissions (table)</Secondary>
</IndexTerm>
<Note>
<Para>In Table 3-2, the operation "List the contents of a directory" refers to
displaying a simple list of the objects in a directory (for example, using
the UNIX <Command>ls</Command> command with no flags or using the <Command>ls -a</Command> command).
The operation "List information about the objects in a directory" refers to
obtaining more detailed information about the objects in a directory, such as
each object's mode bits or the time of its most recent update (for example,
using the UNIX <Command>ls -l</Command> or <Command>ls -t</Command> command).
</Para>
<Para>Also, if you rename an object and give it the name of an existing object,
the object that exists with that name is deleted.  In this case, you do not
need the <Literal>d</Literal> permission on the parent directory of the
existing object to delete that object.
</Para>
</Note>
<Para>For example, suppose the user <Literal>rajesh</Literal> needs to execute
the DFS <Command>fms</Command> command.  The command writes output to a log
file named <Filename>FMSLog</Filename>, which it places in the directory from
which it is issued.  To create the file in a directory,
<Literal>rajesh</Literal> must have the <Literal>w</Literal> (write),
<Literal>x</Literal> (execute), and <Literal>i</Literal> (insert) permissions
on the directory from which the command is issued, as well as the
<Literal>x</Literal> (execute) permission on each directory that leads to
the directory.
</Para>
<Para>The following example ACL entry grants <Replaceable>rajesh</Replaceable> the <Literal>w</Literal>, <Literal>x</Literal>, and
<Literal>i</Literal> permissions on the directory from which the command is issued.  Each
<Literal>-</Literal> (dash) indicates a permission that is not granted.  Because a full
permission set is <Literal>rwxcid</Literal>, this entry does not grant the <Literal>r</Literal> (read),
<Literal>c</Literal> (control), and <Literal>d</Literal> (delete) permissions.
</Para>
<InformalExample>
<Para><ProgramListing>{user rajesh -wx-i-}
</ProgramListing></Para>
</InformalExample>
<Para>The following example ACL entry grants the user the execute permission on
a directory that leads to the directory:
</Para>
<InformalExample>
<Para><ProgramListing>{user rajesh --x---}
</ProgramListing></Para>
</InformalExample>
<IndexTerm Id="DFSAGR.ACLG.indx.19" SpanEnd="DFSAGR.ACLG.indx.4">
<IndexTerm Id="DFSAGR.ACLG.indx.20" SpanEnd="DFSAGR.ACLG.indx.15">
</Sect3>
</Sect2>
<Sect2 Id="DFSAGR.ACLG.div.8">
<Title>ACL Evaluation</Title>
<IndexTerm Id="DFSAGR.ACLG.indx.21">
<Primary>access control lists (ACLs)</Primary>
<Secondary>checking sequence</Secondary>
</IndexTerm>
<IndexTerm Id="DFSAGR.ACLG.indx.22">
<Primary>access control lists (ACLs)</Primary>
<Secondary>evaluation sequence</Secondary>
</IndexTerm>
<Para>When a user tries to perform an operation on an object, DCE LFS examines the
object's ACL to determine whether the user is granted the necessary permissions
by an entry on the ACL.  For example, to read a file, a user must be granted the
read permission on the file (as well as the execute permission on each
directory that leads to the file).
</Para>
<Para>To determine a user's permissions for an object, DCE LFS evaluates the entries
on the object's ACL according to the checking sequence described in the
following list.  DCE LFS stops evaluating the entries as soon as the user
matches a condition described in the list.  Evaluation proceeds to a condition
in the checking sequence only if the user fails to match all of the previous
conditions. (See Table 3-1 for a description of the ACL entry types referred
to in the following list.)
<IndexTerm Id="DFSAGR.ACLG.indx.23">
<Primary><Literal>mask_obj</Literal> entry type</Primary>
<Secondary>checking sequence</Secondary>
</IndexTerm></Para>
<OrderedList>
<ListItem>
<IndexTerm Id="DFSAGR.ACLG.indx.24">
<Primary><Literal>user_obj</Literal> entry type</Primary>
<Secondary>checking sequence</Secondary>
</IndexTerm>
<Para>The user owns the object.  DCE LFS grants the user the permissions specified
with the <Literal>user_obj</Literal> entry.  The permissions are <Symbol Role="Variable">not</Symbol> filtered through
the <Literal>mask_obj</Literal> entry.  Note that the <Literal>user_obj</Literal> entry always explicitly
has the <Literal>c</Literal> permission; the <Literal>c</Literal> permission cannot be removed from the
<Literal>user_obj</Literal> entry.
</Para>
</ListItem>
<ListItem>
<IndexTerm Id="DFSAGR.ACLG.indx.25">
<Primary><Literal>user</Literal> entry type</Primary>
<Secondary>checking sequence</Secondary>
</IndexTerm>
<IndexTerm Id="DFSAGR.ACLG.indx.26">
<Primary><Command>foreign_user</Command> entry type</Primary>
<Secondary>checking sequence</Secondary>
</IndexTerm>
<Para>A <Literal>user</Literal> or <Command>foreign_user</Command> entry exists for the user.  DCE LFS grants
the user the permissions specified with the entry after filtering the
permissions through the <Literal>mask_obj</Literal> entry.
</Para>
</ListItem>
<ListItem>
<IndexTerm Id="DFSAGR.ACLG.indx.27">
<Primary><Literal>group_obj</Literal> entry type</Primary>
<Secondary>checking sequence</Secondary>
</IndexTerm>
<IndexTerm Id="DFSAGR.ACLG.indx.28">
<Primary><Command>group</Command> entry type</Primary>
<Secondary>checking sequence</Secondary>
</IndexTerm>
<IndexTerm Id="DFSAGR.ACLG.indx.29">
<Primary><Command>foreign_group</Command> entry type</Primary>
<Secondary>checking sequence</Secondary>
</IndexTerm>
<Para>The user belongs to the group that owns the object (the owning group's
permissions are specified with the <Literal>group_obj</Literal> entry) or to any other
groups that have <Command>group</Command> or <Command>foreign_group</Command> entries.  If one or more
group-related entries on the ACL apply, DCE LFS grants the user all of the
permissions accrued from the applicable group entries after filtering the
permissions through the <Literal>mask_obj</Literal> entry, if it exists.  The user accrues
permissions from all of the groups to which the user belongs.
</Para>
</ListItem>
<ListItem>
<IndexTerm Id="DFSAGR.ACLG.indx.30">
<Primary><Literal>other_obj</Literal> entry type</Primary>
<Secondary>checking sequence</Secondary>
</IndexTerm>
<Para>The user is from the default cell.  DCE LFS grants the user the permissions
specified with the <Literal>other_obj</Literal> entry.  The permissions are <Symbol Role="Variable">not</Symbol>
filtered through the <Literal>mask_obj</Literal> entry.
</Para>
</ListItem>
<ListItem>
<IndexTerm Id="DFSAGR.ACLG.indx.31">
<Primary><Command>foreign_other</Command> entry type</Primary>
<Secondary>checking sequence</Secondary>
</IndexTerm>
<Para>The user belongs to a foreign cell that has a <Command>foreign_other</Command> entry.  DCE
LFS grants the user the permissions specified with the entry for that cell
after filtering the permissions through the <Literal>mask_obj</Literal> entry.
</Para>
</ListItem>
<ListItem>
<IndexTerm Id="DFSAGR.ACLG.indx.32">
<Primary><Literal>any_other</Literal> entry type</Primary>
<Secondary>checking sequence</Secondary>
</IndexTerm>
<Para>The user is from a foreign cell that does not have a <Command>foreign_other</Command> entry.
DCE LFS grants the user the permissions specified with the <Literal>any_other</Literal>
entry, if it exists, after filtering the permissions through the <Literal>mask_obj</Literal>
entry.
</Para>
</ListItem>
<ListItem>
<Para>The user matches no entry.  DCE LFS denies the user access to the object.
</Para>
</ListItem>
</OrderedList>
<IndexTerm Id="DFSAGR.ACLG.indx.33" SpanEnd="DFSAGR.ACLG.indx.23">
<Para>Before DCE LFS evaluates a user's permissions, DFS first determines whether the
user is authenticated.  If the user is authenticated, ACL evaluation proceeds as
described in the previous list.  If the user is not authenticated, DFS assigns
the user the identity <Literal>nobody</Literal> and treats the identity as a foreign user
from an unknown cell, regardless of the cell from which the unauthenticated
user requests access to the object.  ACL evaluation based on the identity
<Literal>nobody</Literal> then proceeds accordingly.
</Para>
<Para>When DCE LFS evaluates an ACL, it evaluates the more specific entries
before it evaluates the less specific entries.  Thus, the permissions granted
to a group are applied to a user who is a member of the group only if the user
is not granted permissions via the <Literal>user_obj</Literal> entry or a
<Literal>user</Literal> or <Literal>foreign_user</Literal> entry.  If an
individual is granted one set of permissions as a user and another, wider set
of permissions as a group member, the additional permissions granted to the
group are not recognized; DCE LFS stops checking the ACL once it encounters
the more specific user-related entry.
</Para>
<Para>For example, suppose user <Literal>dale</Literal> belongs to a group
that has the read and write permissions on a file through the
<Literal>group_obj</Literal> entry on the file's ACL.  Suppose further that
<Literal>dale</Literal> is also specified in a <Literal>user</Literal> entry
that grants only the read permission.  The relevant entries from the ACL follow
(assume the <Literal>mask_obj</Literal> entry permits the <Literal>r</Literal>
and <Literal>w</Literal> permissions):
</Para>
<InformalExample>
<Para><ProgramListing>{user dale r-----}
{group_obj rw----}
</ProgramListing></Para>
</InformalExample>
<Para>Because the more specific <Literal>user</Literal> entry is evaluated
before the <Literal>group_obj</Literal> entry, DCE LFS denies
<Literal>dale</Literal> write access for the file.
</Para>
<Note>
<Para>A user can match both the <Literal>user_obj</Literal> entry and a <Literal>user</Literal> or
<Command>foreign_user</Command> entry; in this case, the user is granted permissions
from only the <Literal>user_obj</Literal> entry.  Similarly, a group can match both the
<Literal>group_obj</Literal> entry and a <Command>group</Command> or <Command>foreign_group</Command> entry; in
this case, however, members of the group accrue permissions from both entries.
</Para>
</Note>
<IndexTerm Id="DFSAGR.ACLG.indx.34" SpanEnd="DFSAGR.ACLG.indx.8">
<Sect3 Id="DFSAGR.ACLG.div.9">
<Title>ACL Evaluation for Local Access</Title>
<IndexTerm Id="DFSAGR.ACLG.indx.35">
<Primary>access control lists (ACLs)</Primary>
<Secondary>local access</Secondary>
</IndexTerm>
<Para>If your vendor has properly configured your local operating system's
<Command>mount</Command> command (or its equivalent), you can mount a DCE LFS
fileset locally, as a file system on its File Server machine.  You can access
an object in a locally mounted DCE LFS fileset via a local pathname, as well
as via a DCE pathname.  In either case, the same ACL evaluation algorithm
determines your permissions.  However, if your local identity is different
from your DCE identity, the permissions you receive when you access the object
via its local pathname are those associated with your local identity, but the
permissions you receive for access via the object's DCE pathname are those
associated with your DCE identity.  This is also true of objects in non-LFS
filesets.
</Para>
<Para>For example, suppose you log into the local machine as the
<Literal>root</Literal> user and then authenticate to DCE as your DCE
identity.  If you access an object via its local pathname, you receive
<Literal>root</Literal> permissions for the object; if you access the same
object via its DCE pathname, you receive the permissions associated with your
DCE identity.
</Para>
<Para><IndexTerm Id="DFSAGR.ACLG.indx.36">
<Primary>access control lists (ACLs)</Primary>
<Secondary><Literal>root</Literal> permissions</Secondary>
</IndexTerm>
<IndexTerm Id="DFSAGR.ACLG.indx.37">
<Primary>access control lists (ACLs)</Primary>
<Secondary><Literal>self</Literal> permissions</Secondary>
</IndexTerm>
<IndexTerm Id="DFSAGR.ACLG.indx.38">
<Primary><Literal>self</Literal> principal</Primary>
<Secondary>ACL permissions</Secondary>
</IndexTerm>
<IndexTerm Id="DFSAGR.ACLG.indx.39">
<Primary><Literal>root</Literal></Primary>
<Secondary>ACL permissions</Secondary>
</IndexTerm>If you log into the local machine as <Literal>root</Literal> without authenticating to DCE,
you assume the identity of the local machine's
<Filename>/.../</Filename><Symbol Role="Variable">cellname</Symbol><Literal>/hosts/</Literal><Symbol Role="Variable">hostname</Symbol><Literal>/self</Literal> principal for DCE access.
If you access an object via its local pathname, you receive <Literal>root</Literal>
permissions; however, if you access the object via its DCE pathname, you
receive the permissions associated with the <Literal>self</Literal> identity of the local
machine.  To allow processes running as <Literal>root</Literal> on a machine (for example,
<Literal>cron</Literal> jobs) to access an object via its DCE pathname, you can include an
entry for the machine's <Literal>self</Literal> identity on the ACL of the object.  The
<Literal>self</Literal> identity can also receive permissions from a group to which it
belongs or from the <Literal>other_obj</Literal> entry (because it is treated as an
authenticated user from the local cell).
<IndexTerm Id="DFSAGR.ACLG.indx.40" SpanEnd="DFSAGR.ACLG.indx.21"><IndexTerm Id="DFSAGR.ACLG.indx.41" SpanEnd="DFSAGR.ACLG.indx.22"></Para>
</Sect3>
</Sect2>
<Sect2 Id="DFSAGR.ACLG.div.10">
<Title>Setting and Examining ACLs</Title>
<Para><IndexTerm Id="DFSAGR.ACLG.indx.42">
<Primary><Command>dcecp acl</Command> command</Primary>
<Secondary>about</Secondary>
</IndexTerm>The <Command>dcecp acl</Command> command is used to list and modify the ACLs of DCE LFS
objects.  In most respects, the operation of the <Command>dcecp acl</Command> command with
DCE LFS objects parallels its use with other types of DCE objects, as follows:
</Para>
<ItemizedList>
<ListItem>
<Para>To list the entries on an ACL for a file or directory, use the <Command>dcecp acl
show</Command> command.  To list an object's ACL, you must have the <Literal>x</Literal> (execute)
permission on the directory in which the object resides, as well as on all
directories that lead to that directory.
</Para>
</ListItem>
<ListItem>
<Para>To modify an entry on an ACL for a file or directory, use the <Command>dcecp acl
modify</Command> command with one of the following options: <Literal>-add</Literal>, <Option>change</Option>,
<Option>remove</Option>, or <Option>purge</Option>.  You can also use the <Command>dcecp acl delete</Command> and
<Command>dcecp acl replace</Command> commands to modify an ACL.  To modify an object's ACL,
you must have the <Literal>c</Literal> (control) permission for the object, as well as the
<Literal>x</Literal> (execute) permission on each directory that leads to the object.
</Para>
</ListItem>
</ItemizedList>
<Para>Because the <Literal>user_obj</Literal> entry always has the control permission, you can
always modify the ACL of an object that you own (an object for which the
<Literal>user_obj</Literal> entry applies to you).  To determine if you have the control
permission for an object that you do not own, use the <Command>dcecp acl show</Command>
command to display the object's ACL.  You can also use the <Command>dcecp acl
check</Command> command to display your permissions for an object.
</Para>
<Para>The following subsections provide information about modifying ACLs on DCE LFS
objects, including brief examples of using the <Command>dcecp acl</Command> command to list
and modify a directory's ACL. (See the Security Service portion of the &DCEAc;
for complete details about using the command to set and examine an object's
ACLs.)
</Para>
<Sect3 Id="DFSAGR.ACLG.div.11">
<Title>Rules for Modifying ACLs</Title>
<IndexTerm Id="DFSAGR.ACLG.indx.43">
<Primary>access control lists (ACLs)</Primary>
<Secondary>rules for modifying</Secondary>
</IndexTerm>
<Para>A number of rules restrict the changes you can make to the ACL of a file or
directory in a DCE LFS fileset.  The following rules apply only to DCE LFS file
and directory objects:
<?sml-break><?sml-need 20></Para>
<ItemizedList>
<ListItem>
<Para>The <Literal>user_obj</Literal>, <Literal>group_obj</Literal>, and
<Literal>other_obj</Literal> entries must always exist.  All other entry
types are optional.
</Para>
</ListItem>
<ListItem>
<Para>The <Literal>mask_obj</Literal> entry must exist if an entry other
than <Literal>user_obj</Literal>, <Literal>group_obj</Literal>, or
<Literal>other_obj</Literal> exists.  If the <Literal>mask_obj</Literal>
entry does not exist when an entry other than an <Literal>_obj</Literal>
entry is created, the <Command>dcecp acl</Command> command automatically
creates it.
</Para>
</ListItem>
<ListItem>
<Para>The <Literal>user_obj</Literal> entry must always explicitly retain the
<Literal>c</Literal> permission.  This requirement prevents the owner of an
object from being denied access to it; the owner can always grant himself or
herself additional permissions.
</Para>
</ListItem>
</ItemizedList>
<Para>These rules restrict your use of the <Command>dcecp acl</Command> command.  Namely, if a
single <Command>dcecp acl modify</Command> command modifies an ACL in a way that violates
any of these restrictions, the command must include additional changes that
reinstate the necessary entries or permissions.  A single instance of the
<Command>dcecp acl modify</Command> command cannot be used to effect a set of changes that
violates these restrictions.  The <Command>dcecp acl delete</Command> and <Command>dcecp acl
replace</Command> commands can also never be used to violate these restrictions.
The <Command>dcecp acl</Command> command makes changes to an ACL in the order in which
the changes are specified on the command line; for a given <Command>dcecp acl</Command>
command and a given ACL, either all of the changes indicated by the command
are applied or none of the changes are applied.
</Para>
<Para>Finally, recall that only one entry of the same specificity can exist on
an ACL; for example, only one <Literal>user</Literal> entry can exist for a given
<Symbol Role="Variable">username</Symbol>.  Permissions you assign to an entry when you issue the <Command>dcecp
acl modify</Command> command with the <Option>change</Option> option <Replaceable>replace</Replaceable> the existing
permissions associated with the entry; the specified permissions are not added
to the existing permissions.  If you want a user or group to retain the
permissions already granted, you must include those permissions with the entry
that you specify with the command. (Note that a <Command>dcecp acl
modify</Command> command that includes the <Option>add</Option> option fails
if the entry to be added exists on the ACL.)
</Para>
</Sect3>
<Sect3 Id="DFSAGR.ACLG.div.12">
<Title>Examples of Listing and Modifying an ACL</Title>
<Para><IndexTerm Id="DFSAGR.ACLG.indx.44">
<Primary>access control lists (ACLs)</Primary>
<Secondary>editing entries</Secondary>
</IndexTerm>
<IndexTerm Id="DFSAGR.ACLG.indx.45">
<Primary>access control lists (ACLs)</Primary>
<Secondary>viewing</Secondary>
</IndexTerm>
<IndexTerm Id="DFSAGR.ACLG.indx.46">
<Primary>permissions</Primary>
<Secondary>restricting (example)</Secondary>
</IndexTerm>The examples in this section demonstrate the use of the <Command>dcecp acl</Command> command
to list and modify a directory's ACL.  The following example uses the <Command>dcecp
acl show</Command> command to display an object's ACL.  The example shows the output of
the command when it is used to display the ACL for the directory <Literal>drafts</Literal>:
</Para>
<InformalExample>
<Para><ProgramListing><ComputerOutput>dcecp></ComputerOutput> <UserInput>acl show /.../abc.com/fs/doc/drafts</UserInput></ProgramListing>
</Para>
</InformalExample>
<InformalExample>
<Para><ProgramListing>{mask_obj r-x---}
{user_obj rwxcid}
{user dale rwx-id effective r-x---}
{group_obj rwx--- effective r-x---}
{group writers rwx--- effective r-x---}
{other_obj rwx---}
</ProgramListing></Para>
</InformalExample>
<Para>The output displays the ACL entries for the object. If an entry's permissions
are restricted by the <Literal>mask_obj</Literal> entry, the permissions that remain after
filtering through the mask are labeled <Literal>effective</Literal>.  In this example, the
permissions (<Literal>rwx-id</Literal>) granted to <Literal>dale</Literal> are restricted by the
<Literal>mask_obj</Literal> entry to <Literal>r</Literal> and <Literal>x</Literal>.  Users belonging to the group
<Literal>writers</Literal> are, like <Literal>dale</Literal>, restricted to <Literal>r</Literal> and <Literal>x</Literal> access.
The owner of the directory (<Literal>user_obj</Literal>) retains all of the specified
permissions (<Literal>rwxcid</Literal>) because <Literal>user_obj</Literal> is not filtered by
<Literal>mask_obj</Literal>.
</Para>
<Para>Suppose another user, <Literal>pierette</Literal>, needs to have all of
the permissions except <Literal>c</Literal> on the directory.  Suppose further
that <Literal>pierette</Literal> is a member of the group
<Literal>writers</Literal>, which effectively has only the <Literal>r</Literal>
and <Literal>x</Literal> permissions on the directory.  To give
<Literal>pierette</Literal> the required permissions, the following need to be
done:
</Para>
<ItemizedList>
<ListItem>
<Para>A <Literal>user</Literal> entry for <Literal>pierette</Literal> needs to
be added to grant the desired permissions, not all of which are granted to the
group <Literal>writers</Literal>.
</Para>
</ListItem>
<ListItem>
<Para>The <Literal>mask_obj</Literal> entry needs to be expanded to allow for
the additional permissions; it currently filters all user and group entries to
only the <Literal>r</Literal> and <Literal>x</Literal> permissions.
</Para>
</ListItem>
</ItemizedList>
<?sml-break>
<?sml-need 20>
<Para>The following example performs both operations with one invocation of
the <Command>dcecp acl modify</Command> command.  It uses the
<Option>add</Option> option to add an entry for
<Literal>pierette</Literal> to the ACL.  It also uses the <Option>mask</Option>
option with the value <Literal>calc</Literal> to recalculate the permissions
granted by the <Literal>mask_obj</Literal> entry to include those to be granted
to <Literal>pierette</Literal>. Alternatively, the
<Option>mask</Option> option could be used with the value
<Literal>nocalc</Literal> to prevent recalculation of the permissions granted
by the <Literal>mask_obj</Literal> entry, but doing so would cause the
<Literal>mask_obj</Literal> entry to restrict <Literal>pierette</Literal>'s
permissions.  The command fails unless one of the two values is specified
with the <Option>mask</Option> option.
</Para>
<Note>
<Para>The <Command>dcecp acl modify</Command> command dynamically recalculates
the <Literal>mask_obj</Literal> entry as necessary when new entries are added
to an ACL.  By default, it refuses to readjust the <Literal>mask_obj</Literal>
entry if doing so would grant currently masked permissions to another entry.
In such cases, you must specify the <Literal>calc</Literal> or
<Literal>nocalc</Literal> value with the <Option>mask</Option> option to
direct the command's actions with respect to the <Literal>mask_obj</Literal>
entry.
</Para>
</Note>
<InformalExample>
<Para><ProgramListing><ComputerOutput>dcecp></ComputerOutput> <UserInput>acl modify /.../abc.com/fs/doc/drafts -add {user pierette rwxid} \</UserInput><?Pub _newline>
<ComputerOutput>></ComputerOutput> <UserInput><Option>mask</Option> calc </UserInput></ProgramListing></Para>
</InformalExample>
<Para>The following example displays the new and modified ACL entries that
grant <Literal>pierette</Literal> all permissions except <Literal>c</Literal>.
Note that expanding the permissions allowed by the <Literal>mask_obj</Literal>
entry increased the permissions granted to the other entries filtered by the
mask.
</Para>
<InformalExample>
<Para><ProgramListing><ComputerOutput>dcecp></ComputerOutput> <UserInput>acl show /.../abc.com/fs/doc/drafts</UserInput></ProgramListing></Para>
</InformalExample>
<InformalExample>
<Para><ProgramListing>{mask_obj rwx-id}
{user_obj rwxcid}
{user dale rwx-id}
{user pierette rwx-id}
{group_obj rwx---}
{group writers rwx---}
{other_obj rwx---}
</ProgramListing></Para>
</InformalExample>
<Para>Recall that DCE LFS evaluates the more specific <Literal>user</Literal>
entries before it checks the less specific entries.  Therefore,
<Literal>pierette</Literal>, although a member of the group
<Literal>writers</Literal>, receives the permissions granted by the
<Literal>user pierette</Literal> entry.  This is true regardless of whether
<Literal>pierette</Literal> is granted more or fewer permissions via the
<Literal>user</Literal> entry.
<IndexTerm Id="DFSAGR.ACLG.indx.47" SpanEnd="DFSAGR.ACLG.indx.44"><IndexTerm Id="DFSAGR.ACLG.indx.48" SpanEnd="DFSAGR.ACLG.indx.46"></Para>
</Sect3>
</Sect2>
<Sect2 Id="DFSAGR.ACLG.div.13">
<Title>ACL Interaction with UNIX Mode Bits</Title>
<IndexTerm Id="DFSAGR.ACLG.indx.49">
<Primary>UNIX permissions</Primary>
<Secondary>compared to DCE permissions</Secondary>
</IndexTerm>
<IndexTerm Id="DFSAGR.ACLG.indx.50">
<Primary>permissions</Primary>
<Secondary>UNIX, interaction with ACLs</Secondary>
</IndexTerm>
<Para>In the UNIX file system, every file and directory object has associated with
it a set of mode bits that provide information about the object.  In addition
to identifying the type of the object (file or directory), the bits define the
permissions granted to three types of users: the user who owns the object,
members of the group that owns the object, and all other system users.  These
mode bits are referred to as the <Literal>user</Literal>, <Command>group</Command>, and <Literal>other</Literal>
mode bits, respectively.
</Para>
<Para>Each type of user (<Literal>user</Literal>, <Command>group</Command>, and <Literal>other</Literal>) can be assigned
any combination of the <Literal>r</Literal>, <Literal>w</Literal>, and <Literal>x</Literal> permissions via the
appropriate mode bits.  The operations associated with the bits are similar to
those associated with the same permissions for DCE ACLs.  The mode bits for an
object can be listed with the UNIX <Command>ls -l</Command> command or its equivalent; they
can be set with the UNIX <Command>chmod</Command> command or its equivalent.
</Para>
<Para><IndexTerm Id="DFSAGR.ACLG.indx.51">
<Primary>Distributed File Service (DFS)</Primary>
<Secondary>protecting non-LFS data</Secondary>
</IndexTerm>Because DCE ACLs can be used only with objects in DCE LFS filesets, mode bits
are the only form of protection associated with objects in most non-LFS
filesets.  In DCE LFS filesets, all file and directory objects can have both
UNIX mode bits and DCE ACLs.  Note that all objects always have UNIX mode bits,
but they do not necessarily have ACLs. (See Section 3.1.5 for more details.)
</Para>
<Para>For DCE LFS objects, DCE LFS synchronizes the protections set by an object's
UNIX mode bits with the protections set by its DCE ACL.  It maintains symmetry
between an object's mode bits and its ACL permissions as follows:
</Para>
<ItemizedList>
<ListItem>
<Para>The <Literal>user</Literal> mode bits are identified with the <Literal>r</Literal>, <Literal>w</Literal>, and <Literal>x</Literal>
permissions of the <Literal>user_obj</Literal> entry.
</Para>
</ListItem>
<ListItem>
<Para>The <Literal>other</Literal> mode bits are identified with the <Literal>r</Literal>, <Literal>w</Literal>, and <Literal>x</Literal>
permissions of the <Literal>other_obj</Literal> entry.
</Para>
</ListItem>
<ListItem>
<Para>The <Command>group</Command> mode bits are identified with the <Literal>r</Literal>, <Literal>w</Literal>, and <Literal>x</Literal>
permissions of the <Literal>mask_obj</Literal> entry.  If the <Literal>mask_obj</Literal> entry does not
exist (which is the case with the root directory of a newly created DCE LFS
fileset, for example), the <Command>group</Command> mode bits are identified with the
<Literal>r</Literal>, <Literal>w</Literal>, and <Literal>x</Literal> permissions of the <Literal>group_obj</Literal> entry.  If the
mode bits correspond to the <Literal>mask_obj</Literal> entry, they do not correspond to
the <Literal>group_obj</Literal> entry, and vice versa.
</Para>
</ListItem>
</ItemizedList>
<Para>To maintain this correspondence, when you modify an ACL <Literal>_obj</Literal> entry
(<Literal>user_obj</Literal>, <Literal>mask_obj</Literal> or <Literal>group_obj</Literal>, or <Literal>other_obj</Literal>),
DCE LFS updates the corresponding UNIX mode bits (<Literal>user</Literal>, <Command>group</Command>, or
<Literal>other</Literal>) to reflect the permissions associated with the <Literal>_obj</Literal> entry.
For example, suppose a file's ACL has the following entries:
</Para>
<InformalExample>
<Para><ProgramListing>{mask_obj r-----}
{user_obj rwxc--}
{group_obj r-x--- effective r-----}
{other_obj ------}
</ProgramListing></Para>
</InformalExample>
<Para>DCE LFS sets the corresponding UNIX mode bits for the file to make the
<Literal>user</Literal> mode bits <Literal>r</Literal>, <Literal>w</Literal>, and <Literal>x</Literal> and the <Command>group</Command> mode
bits <Literal>r</Literal>.  These mode bits are displayed with the <Command>ls -l</Command> command as
follows:
</Para>
<InformalExample>
<Para><ProgramListing>-rwxr----- 1 dale &ensp;&ensp;&ensp;&ensp;&ensp;&ensp;3625 Nov 22 11:36 filename
</ProgramListing></Para>
</InformalExample>
<Para>Suppose you then use the <Command>dcecp acl modify</Command> command to modify the ACL to
give the <Literal>other_obj</Literal> entry the <Literal>r</Literal>, <Literal>w</Literal>, and <Literal>x</Literal> permissions
(leaving the other entries unchanged), as follows:
</Para>
<InformalExample>
<Para><ProgramListing>{mask_obj r-----}
{user_obj rwxc--}
{group_obj r-x--- effective r-----}
{other_obj rwx---}
</ProgramListing></Para>
</InformalExample>
<Para>DCE LFS adjusts the UNIX mode bits to make the <Literal>other</Literal> mode bits <Literal>r</Literal>,
<Literal>w</Literal>, and <Literal>x</Literal> in accordance with the <Literal>other_obj</Literal> entry.  Displayed
with the <Command>ls -l</Command> command, the mode bits are now as follows:
</Para>
<InformalExample>
<Para><ProgramListing>-rwxr--rwx 1 dale &ensp;&ensp;&ensp;&ensp;&ensp;&ensp;3625 Nov 22 11:36 filename
</ProgramListing></Para>
</InformalExample>
<IndexTerm Id="DFSAGR.ACLG.indx.52">
<Primary><Command>chmod</Command> command</Primary>
</IndexTerm>
<Para>Similarly, if you use the UNIX <Command>chmod</Command> command to modify the mode bits
associated with an object, DCE LFS reconciles the corresponding ACL entries
accordingly.  Thus, DCE LFS ensures that the mode bits and ACL permissions of
an object always agree.
</Para>
<Para>It is worth noting that  for an executable file (for example, a binary
file) to be executed, the <Literal>x</Literal> mode bit must be assigned to
one or more of <Literal>user</Literal>, <Command>group</Command>, or
<Literal>other</Literal>.  If one of these sets of mode bits does not include
the <Literal>x</Literal> mode bit, no one can execute the file, not even the
<Literal>root</Literal> user.  For an executable file that has an ACL, at least
one of the following ACL entries must have the <Literal>x</Literal> permission
for the file to be executed: <Literal>user_obj</Literal>,
<Literal>mask_obj</Literal> (or <Literal>group_obj</Literal>, if the
<Literal>mask_obj</Literal> entry does not exist on the ACL), or
<Literal>other_obj</Literal>.
<IndexTerm Id="DFSAGR.ACLG.indx.53" SpanEnd="DFSAGR.ACLG.indx.50"><IndexTerm Id="DFSAGR.ACLG.indx.54" SpanEnd="DFSAGR.ACLG.indx.49"></Para>
</Sect2>
<Sect2 Id="DFSAGR.ACLG.div.14">
<Title>Initial Protection of a New File or Directory</Title>
<IndexTerm Id="DFSAGR.ACLG.indx.55">
<Primary>access control lists (ACLs)</Primary>
<Secondary>inheritance</Secondary>
</IndexTerm>
<IndexTerm Id="DFSAGR.ACLG.indx.56">
<Primary>directories</Primary>
<Secondary>default ACLs (DFS)</Secondary>
</IndexTerm>
<IndexTerm Id="DFSAGR.ACLG.indx.57">
<Primary>files</Primary>
<Secondary>default ACLs (DFS)</Secondary>
</IndexTerm>
<IndexTerm Id="DFSAGR.ACLG.indx.58">
<Primary>container objects</Primary>
</IndexTerm>
<IndexTerm Id="DFSAGR.ACLG.indx.59">
<Primary>objects</Primary>
<Secondary>container</Secondary>
</IndexTerm>
<IndexTerm Id="DFSAGR.ACLG.indx.60">
<Primary>access control lists (ACLs)</Primary>
<Secondary>types</Secondary>
</IndexTerm>
<Para>Each DCE LFS file or directory can have an Object ACL that controls
access to the file or directory; all previous examples in this chapter refer
to the Object ACL.  Because they can contain other objects, directories (also
referred to as <Symbol Role="Variable">container objects</Symbol>) can have
two additional ACLs that determine the default ACLs to be inherited by objects
created in them.  Thus, a directory can have the following three ACLs:
</Para>
<VariableList>
<VarListEntry>
<Term>Object ACL</Term>
<ListItem>
<IndexTerm Id="DFSAGR.ACLG.indx.61">
<Primary>Object ACL</Primary>
</IndexTerm>
<Para>Controls access to the directory itself.  By default, this is the ACL
that the <Command>dcecp acl</Command> command displays or modifies when it is
issued.
</Para>
</ListItem>
</VarListEntry>
<VarListEntry role="linebreak">
<Term>Initial Object Creation ACL</Term>
<ListItem>
<?sml-break>
<IndexTerm Id="DFSAGR.ACLG.indx.62">
<Primary>Initial Object ACL</Primary>
</IndexTerm>
<Para>Determines the default ACL inherited by files created in the directory.
To view or modify a directory's Initial Object Creation ACL, include the
<Option>io</Option> option with the <Command>dcecp acl</Command> command.
</Para>
</ListItem>
</VarListEntry>
<VarListEntry role="linebreak">
<Term>Initial Container Creation ACL</Term>
<ListItem>
<?sml-break>
<IndexTerm Id="DFSAGR.ACLG.indx.63">
<Primary>Initial Container ACL</Primary>
</IndexTerm>
<Para>Determines the default ACL inherited by subdirectories created in the
directory.  To view or modify a directory's Initial Container Creation ACL,
include the <Option>ic</Option> option with the <Command>dcecp acl</Command>
command.
</Para>
</ListItem>
</VarListEntry>
</VariableList>
<Para>A directory's Object ACL, Initial Object Creation ACL, and Initial
Container Creation ACL can exist independently of one another; they do not
need to exist at all.  A given directory can have all, some, or none of these
ACLs.  The type of file system protection (ACLs or UNIX mode bits) used
initially for a new file or directory object depends on whether the parent
directory of the new object has the appropriate Initial Creation ACL, as
follows:
<?sml-break><?sml-need 10></Para>
<ItemizedList>
<ListItem>
<Para>If a new object's parent directory has the appropriate Initial Creation ACL,
the new object inherits an Object ACL as its form of protection.  The new object
also has mode bits, but the Object ACL supplements these bits.  Recall that DCE
LFS ensures that the object's mode bits and its ACL permissions are always
synchronized.
</Para>
</ListItem>
<ListItem>
<Para>If a new object's parent directory does <Symbol Role="Variable">not</Symbol> have the appropriate Initial
Creation ACL, the new object initially has no Object ACL; the object relies on
mode bits as its only form of protection.  If they are not inherited, ACLs can
be explicitly created with the <Command>dcecp acl</Command> command. (See Section 3.1.5.4
for information about using the <Command>dcecp acl</Command> command to create a directory's
initial ACLs.)
</Para>
<Note>
<Para>An Object ACL is always created for a file or directory that is created by
a foreign user, even if the parent directory does not have the appropriate
Initial Creation ACL. (See Sections 3.1.5.3 and 3.1.5.4 for more information.)
</Para>
</Note>
</ListItem>
</ItemizedList>
<Para>The following subsections describe how the initial protections of a new object
are derived.  The first subsection provides more information about an ACL's
default cell, which plays an important role in determining ACL inheritance.
The following subsections describe ACL inheritance for objects created by local
users and objects created by foreign users; both of these subsections assume
that the parent directory has the appropriate Initial Creation ACL.  The final
subsection discusses how the UNIX mode bits are determined for an object whose
parent directory does not have the appropriate Initial Creation ACL.
<IndexTerm Id="DFSAGR.ACLG.indx.64" SpanEnd="DFSAGR.ACLG.indx.57"><IndexTerm Id="DFSAGR.ACLG.indx.65" SpanEnd="DFSAGR.ACLG.indx.56"></Para>
<Sect3 Id="DFSAGR.ACLG.div.15">
<Title>The Default Cell and ACL Inheritance</Title>
<IndexTerm Id="DFSAGR.ACLG.indx.66">
<Primary>access control lists (ACLs)</Primary>
<Secondary>default cell</Secondary>
</IndexTerm>
<Para>Recall that an ACL's default cell names the cell with respect to which
the ACL is defined, and the default cell is not necessarily the cell in which
the ACL exists.  For example, an object in cell <Literal>abc.com</Literal> can
have an ACL whose default cell is <Literal>def.com</Literal>.  In this case,
even though the object resides in cell <Literal>abc.com</Literal>, users from
cell <Literal>abc.com</Literal> are foreign users with respect to the object's
ACL.
</Para>
<Para>With respect to ACLs, local users and foreign users are defined in terms
of an ACL's default cell as follows:
</Para>
<ItemizedList>
<ListItem>
<Para>A local user is one whose local cell is the same as the default cell of
an ACL.  The following entry types are defined for local users and groups:
</Para>
<ItemizedList>
<ListItem>
<Para><Literal>user_obj</Literal>
</Para>
</ListItem>
<ListItem>
<Para><Literal>group_obj</Literal>
</Para>
</ListItem>
<ListItem>
<Para><Literal>other_obj</Literal>
</Para>
</ListItem>
<ListItem>
<Para><Literal>user</Literal>
</Para>
</ListItem>
<ListItem>
<Para><Command>group</Command>
</Para>
</ListItem>
</ItemizedList>
<Para>For example, an entry of the type <Literal>user</Literal>
<Symbol Role="Variable">username</Symbol> specifies the permissions for the
user <Symbol Role="Variable">username</Symbol> whose local cell is the same
as the default cell of the ACL.
</Para>
</ListItem>
<ListItem>
<Para>A foreign user is one whose local cell is different from the default cell
of an ACL.  The following entry types are defined for foreign users and groups:
</Para>
<ItemizedList>
<ListItem>
<Para><Command>foreign_user</Command>
</Para>
</ListItem>
<ListItem>
<Para><Command>foreign_group</Command>
</Para>
</ListItem>
<ListItem>
<Para><Command>foreign_other</Command>
</Para>
</ListItem>
<ListItem>
<Para><Literal>any_other</Literal>
</Para>
</ListItem>
</ItemizedList>
<Para>For example, an entry of the type <Command>foreign_user</Command>
<Symbol Role="Variable">cell_name</Symbol><Filename>/</Filename><Symbol Role="Variable">username</Symbol>
specifies the permissions for the user
<Symbol Role="Variable">username</Symbol> from the cell
<Symbol Role="Variable">cell_name</Symbol>. (The
<Symbol Role="Variable">cell_name</Symbol> of a <Literal>foreign_</Literal>
entry is usually different from the default cell of an ACL, but it does not
have to be.)
</Para>
</ListItem>
</ItemizedList>
<Para>A directory's Object ACL, Initial Object Creation ACL, and Initial
Container Creation ACL each have their own default cell.  When a file or
directory object is initially created, the default cell of its Object ACL
is set to the local cell of the user who creates the object (the object's
owner, who is named with the <Literal>user_obj</Literal> entry).  The default
cells of a new directory's Initial Creation ACLs are also set to the local
cell of the user who creates the directory.
</Para>
<Sect4 Id="DFSAGR.ACLG.div.16">
<Title>Listing an ACL's Default Cell</Title>
<Para><IndexTerm Id="DFSAGR.ACLG.indx.67">
<Primary>access control lists (ACLs)</Primary>
<Secondary>displaying default cell</Secondary>
</IndexTerm>To determine the default cell of an ACL, include the <Option>cell</Option> option with
the <Command>dcecp acl show</Command> command, as follows:
</Para>
<InformalExample>
<Para><ProgramListing><ComputerOutput>dcecp></ComputerOutput> <UserInput>acl show <Symbol Role="Variable">pathname</Symbol> <Option>cell</Option></UserInput>
</ProgramListing></Para>
</InformalExample>
<InformalExample>
<Para><ProgramListing>/.../<Symbol Role="Variable">cell_name</Symbol>
</ProgramListing></Para>
</InformalExample>
<Para>For example, the output for an ACL whose default cell is
<Literal>abc.com</Literal> is the following:
</Para>
<InformalExample>
<Para><ProgramListing>/.../abc.com
</ProgramListing></Para>
</InformalExample>
</Sect4>
<Sect4 Id="DFSAGR.ACLG.div.17">
<Title>Changing an ACL's Default Cell</Title>
<IndexTerm Id="DFSAGR.ACLG.indx.68">
<Primary>access control lists (ACLs)</Primary>
<Secondary>changing default cell</Secondary>
</IndexTerm>
<Para>To change the default cell of an ACL, use the <Option>cell</Option>
option with the <Command>dcecp acl modify</Command> command.  If you indicate
multiple changes with the command, the change to the default cell is applied
before any other changes are applied.
</Para>
<Para>The default cell of the Object ACL for an object can be changed only by
a cell administrator for the File Server machine on which the object resides. 
The default cell of an Initial Creation ACL for a directory can be changed by
any user who has the <Literal>c</Literal> permission on the directory's Object
ACL, which always includes the owner of the directory, or by a cell
administrator for the File Server machine on which the object resides. (Cell
administrators are members of the group specified with the
<Option>admingroup</Option> option of the <Command>fxd</Command> command
issued on the File Server machine.)
</Para>
<Para>Although you can make the default cells of a directory's Object ACL,
Initial Object Creation ACL, and Initial Container Creation ACL different from
one another, this practice is not recommended.  Changing each of a directory's
ACLs to have different default cells can make it difficult to predict the
effects of ACL inheritance.  Also, because the default cell of an object's
Object ACL is determined by the local cell of the user who creates the object,
not by the default cell of the Initial Creation ACL that the object inherits,
changing the default cell of an Initial Creation ACL is of limited utility.
</Para>
<Para>Note that changing an ACL's default cell by including the
<Option>cell</Option> option with the <Command>dcecp acl modify</Command>
command changes the scope of the ACL's entries.  For example, the
<Literal>other_obj</Literal> entry no longer applies to users from the former
default cell; it now applies to users from the new default cell.  Also, entry
types such as <Literal>user_obj</Literal> and <Literal>user</Literal>, which
are defined with respect to an ACL's default cell, can now give permissions
to different users in the new default cell.
</Para>
<Para>If you change the default cell of an ACL, make sure you also change any
<Literal>user</Literal> and <Command>group</Command> entries on the ACL to <Command>foreign_user</Command> and
<Command>foreign_group</Command> entries as necessary.  You may also want to change any
<Command>foreign_user</Command> and <Command>foreign_group</Command> entries that apply to the new
default cell to <Literal>user</Literal> and <Command>group</Command> entries.
<IndexTerm Id="DFSAGR.ACLG.indx.69" SpanEnd="DFSAGR.ACLG.indx.66"></Para>
</Sect4>
</Sect3>
<Sect3 Id="DFSAGR.ACLG.div.18">
<Title>ACL Inheritance for Objects Created by Local Users</Title>
<IndexTerm Id="DFSAGR.ACLG.indx.70">
<Primary>access control lists (ACLs)</Primary>
<Secondary>inheritance by local users</Secondary>
</IndexTerm>
<Para>For ACLs, a local user is a user whose local cell is the same as the default
cell of an ACL.  When a local user creates an object in a directory that has
the appropriate Initial Creation ACL, DCE LFS uses the intersection of the
following information to determine the Object ACL that it creates for the
new object:
</Para>
<ItemizedList>
<ListItem>
<Para>The UNIX mode bits specified at the system call level (with the UNIX
<Literal>open(&thinsp;)</Literal>, <Literal>creat(&thinsp;)</Literal>, or <Literal>mkdir(&thinsp;)</Literal> system call) when the object is
created.  The application that invokes one of these system calls specifies the
mode bits for the new object.  For example, when the UNIX <Command>touch</Command> command
is used to create an object, the command usually specifies the <Literal>user</Literal>,
<Command>group</Command>, and <Literal>other</Literal> mode bits as <Literal>r</Literal> and <Literal>w</Literal> in the resulting
<Literal>creat(&thinsp;)</Literal> system call.
</Para>
</ListItem>
<ListItem>
<Para>The appropriate Initial Creation ACL of the object's parent directory.  The
parent's Initial Object Creation ACL is used for a file; the parent's Initial
Container Creation ACL is used for a directory.
</Para>
</ListItem>
</ItemizedList>
<Para>For example, when a file is created, DCE LFS derives the initial ACL entries
and permissions for its Object ACL, the only ACL associated with a file, as
follows:
<?sml-break><?sml-need 20></Para>
<ItemizedList>
<ListItem>
<Para>The <Literal>r</Literal>, <Literal>w</Literal>, and <Literal>x</Literal> permissions for the file's <Literal>user_obj</Literal>
entry consist of the intersection of the <Literal>user</Literal> mode bits specified when
the file is created and the corresponding permissions of the <Literal>user_obj</Literal>
entry of its parent directory's Initial Object Creation ACL.  The <Literal>c</Literal>,
<Literal>i</Literal>, and <Literal>d</Literal> permissions for the file's <Literal>user_obj</Literal> entry are
copied directly from the <Literal>user_obj</Literal> entry of the parent's Initial Object
Creation ACL.
</Para>
</ListItem>
<ListItem>
<Para>The <Literal>r</Literal>, <Literal>w</Literal>, and <Literal>x</Literal> permissions for the file's <Literal>mask_obj</Literal>
entry consist of the intersection of the <Command>group</Command> mode bits specified when
the file is created and the corresponding permissions of the <Literal>mask_obj</Literal>
entry of its parent directory's Initial Object Creation ACL.  The <Literal>c</Literal>,
<Literal>i</Literal>, and <Literal>d</Literal> permissions for the file's <Literal>mask_obj</Literal> entry are
copied directly from the <Literal>mask_obj</Literal> entry of the parent's Initial Object
Creation ACL.  In addition, the <Literal>group_obj</Literal> entry is copied directly from
the parent's Initial Object Creation ACL to the file's Object ACL.
</Para>
<Para>If the <Literal>mask_obj</Literal> entry does not exist on the parent's Initial Object
Creation ACL, the <Literal>r</Literal>, <Literal>w</Literal>, and <Literal>x</Literal> permissions for the file's
<Literal>group_obj</Literal> entry are defined as the intersection of the <Command>group</Command> mode
bits specified when the file is created and the corresponding permissions of
the <Literal>group_obj</Literal> entry of its parent directory's Initial Object Creation
ACL.  The <Literal>c</Literal>, <Literal>i</Literal>, and <Literal>d</Literal> permissions for the file's
<Literal>group_obj</Literal> entry are copied directly from the <Literal>group_obj</Literal> entry of
the parent's Initial Object Creation ACL.
</Para>
</ListItem>
<ListItem>
<Para>The <Literal>r</Literal>, <Literal>w</Literal>, and <Literal>x</Literal> permissions for the file's <Literal>other_obj</Literal>
entry consist of the intersection of the <Literal>other</Literal> mode bits specified when
the file is created and the corresponding permissions of the <Literal>other_obj</Literal>
entry of its parent directory's Initial Object Creation ACL.  The <Literal>c</Literal>,
<Literal>i</Literal>, and <Literal>d</Literal> permissions for the file's <Literal>other_obj</Literal> entry are
copied directly from the <Literal>other_obj</Literal> entry of the parent's Initial Object
Creation ACL.
</Para>
</ListItem>
<ListItem>
<Para>All other entries included on the parent directory's Initial Object Creation
ACL are copied directly to the file's Object ACL.
</Para>
</ListItem>
</ItemizedList>
<?sml-break>
<?sml-need 20>
<Para>DCE LFS uses the same algorithm to determine the initial entries and
permissions for a subdirectory's Object ACL, but it uses the parent directory's
Initial Container Creation ACL instead of its Initial Object Creation ACL.  The
subdirectory also inherits its parent's Initial Container Creation ACL as its
Initial Container Creation ACL, and it inherits its parent's Initial Object
Creation ACL as its Initial Object Creation ACL.  The subdirectory inherits
these Initial Creation ACLs unchanged from its parent directory.
</Para>
<Para>Figure 3-1 illustrates ACL inheritance for files and directories.
</Para>
<?sml-need 4.75i>
<Figure>
<Title>ACL Inheritance</Title>
<Graphic Entityref="DFSAGR.ACLG.ent.1"></Graphic>
</Figure>
<IndexTerm Id="DFSAGR.ACLG.indx.71">
<Primary>access control lists (ACLs)</Primary>
<Secondary>inheritance by local users (example)</Secondary>
</IndexTerm>
<Para>The following simple example demonstrates ACL inheritance.  In the
example, the directory <Literal>/.../abc.com/fs/usr/rajesh</Literal> is the
home directory for the user <Literal>rajesh</Literal>, whose local cell,
<Literal>abc.com</Literal>, is the same as the default cell of the directory's
ACLs.  The following <Command>dcecp acl show</Command> command displays the
Object ACL of the directory:
</Para>
<InformalExample>
<Para><ProgramListing><ComputerOutput>dcecp></ComputerOutput> <UserInput>acl show /.:/fs/usr/rajesh</UserInput></ProgramListing></Para>
</InformalExample>
<InformalExample>
<Para><ProgramListing>{mask_obj rwx-id}
{user_obj rwxcid}
{user vijay rwx-id}
{group_obj r-x---}
{other_obj r-x---}
</ProgramListing></Para>
</InformalExample>
<Para>The following <Command>dcecp acl show</Command> commands show the Initial
Object Creation ACL and Initial Container Creation ACL of the directory:
</Para>
<InformalExample>
<Para><ProgramListing><ComputerOutput>dcecp></ComputerOutput> <UserInput>acl show /.:/fs/usr/rajesh -io</UserInput></ProgramListing></Para>
</InformalExample>
<InformalExample>
<Para><ProgramListing>{mask_obj rw----}
{user_obj rw-c--}
{user pierette rw----}
{group_obj r-----}
{other_obj r-----}
</ProgramListing></Para>
</InformalExample>
<InformalExample>
<Para><ProgramListing><ComputerOutput>dcecp></ComputerOutput> <UserInput>acl show /.:/fs/usr/rajesh -ic</UserInput></ProgramListing></Para>
</InformalExample>
<InformalExample>
<Para><ProgramListing>{mask_obj rwx-id}
{user_obj rwxcid}
{user pierette rwx-id}
{group_obj r-x---}
{other_obj r-x---}
</ProgramListing></Para>
</InformalExample>
<Para>Suppose <Literal>rajesh</Literal>, the owner of the directory, creates a
subdirectory named <Literal>myfiles</Literal> in the directory.  As the owner
of the parent directory, <Literal>rajesh</Literal> is granted the permissions
associated with the <Literal>user_obj</Literal> entry of the parent's Object
ACL.  The <Literal>user_obj</Literal> entry includes the <Literal>w</Literal>,
<Literal>x</Literal>, and <Literal>i</Literal> permissions, so
<Literal>rajesh</Literal> can create objects in the directory.
</Para>
<Para>The <Literal>user_obj</Literal>, <Literal>mask_obj</Literal>, and
<Literal>other_obj</Literal> permissions of the Object ACL for the new
<Literal>myfiles</Literal> subdirectory are derived from the intersection
of the permissions granted to these entries in the parent directory's
Initial Container Creation ACL and the <Literal>user</Literal>,
<Literal>group</Literal>, and <Literal>other</Literal> mode bits specified
when the subdirectory is created.  If the <Literal>user</Literal>,
<Literal>group</Literal>, and <Literal>other</Literal> mode bits are all
<Literal>r</Literal>, <Literal>w</Literal>, and <Literal>x</Literal> in the
system call that creates the <Literal>myfiles</Literal> subdirectory, the
subdirectory inherits the following Object ACL:
</Para>
<InformalExample>
<Para><ProgramListing><ComputerOutput>dcecp></ComputerOutput> <UserInput>acl show /.:/fs/usr/rajesh/myfiles</UserInput></ProgramListing></Para>
</InformalExample>
<InformalExample>
<Para><ProgramListing>{mask_obj rwx-id}
{user_obj rwxcid}
{user pierette rwx-id}
{group_obj r-x---}
{other_obj r-x---}
</ProgramListing></Para>
</InformalExample>
<Para>Because the Initial Container Creation ACL includes a
<Literal>mask_obj</Literal> entry, the <Literal>myfiles</Literal> subdirectory
inherits the <Literal>group_obj</Literal> entry directly from the Initial
Container Creation ACL.  Similarly, the subdirectory inherits the
<Literal>user</Literal> entry for <Literal>pierette</Literal> directly
from the Initial Container Creation ACL.  The subdirectory also inherits
the Initial Container Creation ACL and Initial Object Creation ACL unchanged
from its parent directory.
</Para>
<Note>
<Para>An object's existing ACLs may not be maintained across a file system
operation such as a move or copy (performed with the <Command>mv</Command>
and <Command>cp</Command> commands in the UNIX operating system).  Refer to
your vendor's documentation for information about how ACLs are treated with
respect to such operations.
</Para>
</Note>
<IndexTerm Id="DFSAGR.ACLG.indx.72" SpanEnd="DFSAGR.ACLG.indx.71">
<IndexTerm Id="DFSAGR.ACLG.indx.73" SpanEnd="DFSAGR.ACLG.indx.70">
</Sect3>
<Sect3 Id="DFSAGR.ACLG.div.19">
<Title>ACL Inheritance for Objects Created by Foreign Users</Title>
<IndexTerm Id="DFSAGR.ACLG.indx.74">
<Primary>access control lists (ACLs)</Primary>
<Secondary>inheritance by foreign users</Secondary>
</IndexTerm>
<Para>For ACLs, a foreign user is a user whose local cell is different from
the default cell of an ACL.  Any user who has the <Literal>w</Literal>,
<Literal>x</Literal>, and <Literal>i</Literal>
permissions on a directory's Object ACL can create objects in the directory,
regardless of whether the user is a foreign user with respect to the
directory's ACL.  For example, a user from the cell <Literal>def.com</Literal>
who has the <Literal>w</Literal>, <Literal>x</Literal>, and
<Literal>i</Literal> permissions on a directory whose default cell is
<Literal>abc.com</Literal> can create an object in the directory.  The
default cell of the new object is <Literal>def.com</Literal>, not
<Literal>abc.com</Literal>.
</Para>
<Para>When a foreign user creates an object, ACL inheritance occurs as described in
Section 3.1.5.2.  However, if the user is a foreign user with respect to the
appropriate Initial Creation ACL, entries inherited from the Initial Creation
ACL are modified as follows:
<?sml-break><?sml-need 10></Para>
<ItemizedList>
<ListItem>
<Para>The <Literal>mask_obj</Literal> entry remains unchanged.  It applies to the same entries on
both the Initial Creation ACL and the new Object ACL.
</Para>
</ListItem>
<ListItem>
<Para>The <Literal>user_obj</Literal>, <Literal>group_obj</Literal>, and <Literal>other_obj</Literal> entries remain
unchanged, but they are defined with respect to the default cell of the new
Object ACL, not the default cell of the Initial Creation ACL.  The
<Literal>user_obj</Literal> entry specifies the permissions granted to the user who creates
the object (the user whose local cell dictates the default cell of the ACL).
</Para>
</ListItem>
<ListItem>
<Para>Any <Literal>user</Literal> and <Command>group</Command> entries are changed to <Command>foreign_user</Command>
and <Command>foreign_group</Command> entries because they are not defined with respect to
the default cell of the new Object ACL.
</Para>
</ListItem>
<ListItem>
<Para>Any <Command>foreign_user</Command> and <Command>foreign_group</Command> entries that are defined with
respect to the default cell of the new object ACL are changed to <Literal>user</Literal> and
<Command>group</Command> entries.
</Para>
</ListItem>
<ListItem>
<Para>Any <Command>foreign_user</Command> and <Command>foreign_group</Command> entries that are defined with
respect to neither the default cell of the Initial Creation ACL nor the default
cell of the new Object ACL remain unchanged.
</Para>
</ListItem>
<ListItem>
<Para>Any <Command>foreign_other</Command> entries and the <Literal>any_other</Literal> entry remain unchanged.
</Para>
</ListItem>
</ItemizedList>
<Para>If a foreign user creates an object in a directory, an Object ACL is created
for the new object even if the parent directory does not have the appropriate
Initial Creation ACL.  In this case, the Object ACL must be created to record
the fact that the new object's default cell is different from the cell in
which the object resides.  Because an unauthenticated user is treated as a user
from an unknown foreign cell, an Object ACL is always created for an object
created by an unauthenticated user also. (See Section 3.1.5.4 for information
about how the permissions granted by such an Object ACL are determined.)
</Para>
<Para><IndexTerm Id="DFSAGR.ACLG.indx.75">
<Primary>access control lists (ACLs)</Primary>
<Secondary>inheritance by foreign users (example)</Secondary>
</IndexTerm>The following example demonstrates what happens when the local
cell of a user
who creates an object is different from the default cell of the appropriate
Initial Creation ACL of the directory in which the object is created.  In the
example, the directory <Literal>/.../abc.com/fs/usr/srivas</Literal> is the
home directory of the user <Literal>srivas</Literal>, whose local cell,
<Literal>abc.com</Literal>, is the same as the default cell of the directory's
ACLs.  The following <Command>dcecp acl show</Command> command displays the
Object ACL of the directory:
</Para>
<InformalExample>
<Para><ProgramListing><ComputerOutput>dcecp></ComputerOutput> <UserInput>acl show /.:/fs/usr/srivas</UserInput></ProgramListing></Para>
</InformalExample>
<InformalExample>
<Para><ProgramListing>{mask_obj rwx-id}
{user_obj rwxcid}
{user vijay rwx-id}
{foreign_user /.../def.com/andi rwx-id}
{foreign_user /.../ghi.com/pervaze r-x---}
{group_obj r-x---}
{other_obj r-x---}
{foreign_other /.../def.com r-x---}
</ProgramListing></Para>
</InformalExample>
<Para>The following <Command>dcecp acl show</Command> commands display the
Initial Object Creation ACL and Initial Container Creation ACL of the
directory:
</Para>
<InformalExample>
<Para><ProgramListing><ComputerOutput>dcecp></ComputerOutput> <UserInput>acl show /.:/fs/usr/srivas -io</UserInput></ProgramListing></Para>
</InformalExample>
<InformalExample>
<Para><ProgramListing>{mask_obj rw----}
{user_obj rw-c--}
{user pierette rw----}
{foreign_user /.../def.com/andi rw----}
{foreign_user /.../ghi.com/pervaze r-----}
{group_obj r-----}
{other_obj r-----}
{foreign_other /.../def.com r-----}
</ProgramListing></Para>
</InformalExample>
<InformalExample>
<Para><ProgramListing><ComputerOutput>dcecp></ComputerOutput> <UserInput>acl show /.:/fs/usr/srivas -ic</UserInput></ProgramListing></Para>
</InformalExample>
<InformalExample>
<Para><ProgramListing>{mask_obj rwx-id}
{user_obj rwxcid}
{user pierette rwx-id}
{foreign_user /.../def.com/andi rwx-id}
{foreign_user /.../ghi.com/pervaze r-x---}
{group_obj r-x---}
{other_obj r-x---}
{foreign_other /.../def.com r-x---}
</ProgramListing></Para>
</InformalExample>
<Para>All three of these ACLs are defined with respect to the cell
<Literal>abc.com</Literal>.  For example, the <Literal>user</Literal> entries
for <Literal>pierette</Literal> and <Literal>vijay</Literal> apply to specific
users from the cell <Literal>abc.com</Literal>, and the
<Literal>other_obj</Literal> entries apply to other users from the cell
<Literal>abc.com</Literal>.
</Para>
<Para>The user <Literal>andi</Literal>, who is from the cell
<Literal>def.com</Literal>, has entries on all three of the directory's ACLs. 
The <Command>foreign_user</Command> entry on the Object ACL allows
<Literal>andi</Literal> to create objects in the directory.  If
<Literal>andi</Literal> creates a subdirectory named
<Literal>andi_files</Literal> in the directory, the default cell of the
subdirectory is <Literal>def.com</Literal>.  Assuming the
<Literal>user</Literal>, <Command>group</Command>, and
<Literal>other</Literal> mode bits are <Literal>r</Literal>,
<Literal>w</Literal>, and <Literal>x</Literal> in the system call that
creates the subdirectory, the Object ACL of the subdirectory inherits the
following entries from the Initial Container Creation ACL of the parent
directory:
</Para>
<InformalExample>
<Para><ProgramListing><ComputerOutput>dcecp></ComputerOutput> <UserInput>acl show /.:/fs/usr/srivas/andi_files</UserInput></ProgramListing></Para>
</InformalExample>
<InformalExample>
<Para><ProgramListing>{mask_obj rwx-id}
{user_obj rwxcid}
{user andi rwx-id}
{foreign_user /.../abc.com/pierette rwx-id}
{foreign_user /.../ghi.com/pervaze r-x---}
{group_obj r-x---}
{other_obj r-x---}
{foreign_other /.../def.com r-x---}
</ProgramListing></Para>
</InformalExample>
<Para>The permissions granted by the various entries are inherited according to
the ACL inheritance algorithm.  However, because <Literal>andi</Literal>'s
local cell (<Literal>def.com</Literal>) is different from the default cell
(<Literal>abc.com</Literal>) of the parent directory's Initial Container
Creation ACL, the entries from the parent's Initial Container Creation ACL
are interpreted and modified as follows for use on the Object ACL of the
<Literal>andi_files</Literal> subdirectory:
</Para>
<ItemizedList>
<ListItem>
<Para>The <Literal>mask_obj</Literal> entry is unchanged because it applies
to the same users on both ACLs.
</Para>
</ListItem>
<ListItem>
<Para>The <Literal>user_obj</Literal>, <Literal>group_obj</Literal>, and
<Literal>other_obj</Literal> entries are unchanged, but they now apply to
users and groups from the cell <Literal>def.com</Literal>.  The
<Literal>user_obj</Literal> entry grants permissions to the user
<Literal>andi</Literal>.
</Para>
</ListItem>
<ListItem>
<Para>The <Literal>user pierette</Literal> entry is changed to the
<Literal>foreign_user /.../abc.com/pierette</Literal> entry because it is no
longer defined with respect to the default cell of the ACL.
</Para>
</ListItem>
<ListItem>
<Para>The <Literal>foreign_user /.../def.com/andi</Literal> entry is changed
to the <Literal>user andi</Literal> entry because it is now defined with
respect to the default cell of the ACL.  Note that, as the owner of the
directory, <Literal>andi</Literal> derives permissions from the
<Literal>user_obj</Literal> entry, so the <Literal>user</Literal> entry for
<Literal>andi</Literal> is not used.  It remains on the ACL nonetheless.
</Para>
</ListItem>
<ListItem>
<Para>The <Literal>foreign_user /.../ghi.com/pervaze</Literal> entry is
unchanged because it is defined with respect to neither the default cell of
the Initial Container Creation ACL of the parent directory nor the Object ACL
of the new directory.
</Para>
</ListItem>
<ListItem>
<Para>The <Literal>foreign_other /.../def.com</Literal> entry is unchanged; it
continues to apply to users from the cell <Literal>def.com</Literal>.  However,
because the default cell of the ACL is now <Literal>def.com</Literal>, users
from that cell who are not granted permissions from specific user or group
entries are now granted permissions from the <Literal>other_obj</Literal>
entry.  The <Command>foreign_other</Command> entry for users from the cell
<Literal>/.../def.com</Literal> remains on the ACL, but as long as the
default cell of the ACL is <Literal>def.com</Literal>, this
<Literal>foreign_other</Literal> entry does not determine the permissions
granted to users from the <Literal>def.com</Literal> cell.
</Para>
<Note>
<Para>You can explicitly include <Literal>foreign_other</Literal> entries for
the default cell on a directory's Initial Creation ACLs to grant users from
the default cell permissions on objects created in the directory by foreign
users.  For example, if the Initial Container Creation ACL of the directory
<Literal>/.../abc.com/fs/usr/srivas</Literal> in the previous example had
included the entry <Literal>foreign_other /.../abc.com</Literal>, the Object
ACL of the <Literal>andi_files</Literal> subdirectory would have inherited
the entry unchanged from the Initial Container Creation ACL.  The entry would
have granted users from the cell <Literal>abc.com</Literal> permissions on the
subdirectory <Literal>andi_files</Literal>.
</Para>
</Note>
</ListItem>
</ItemizedList>
<Para>Because <Literal>andi</Literal>'s local cell is different from the
default cell of the Initial Object Creation ACL and Initial Container Creation
ACL of the parent directory of the <Literal>andi_files</Literal> subdirectory,
entries on the corresponding ACLs that the subdirectory inherits are also
changed as necessary.  The new subdirectory inherits the following Initial
Object Creation ACL and Initial Container Creation ACL from its parent:
</Para>
<InformalExample>
<Para><ProgramListing><ComputerOutput>dcecp></ComputerOutput> <UserInput>acl show /.:/fs/usr/srivas/andi_files -io</UserInput></ProgramListing></Para>
</InformalExample>
<InformalExample>
<Para><ProgramListing>{mask_obj rw----}
{user_obj rw-c--}
{user andi rw----}
{foreign_user /.../abc.com/pierette rw----}
{foreign_user /.../ghi.com/pervaze r-----}
{group_obj r-----}
{other_obj r-----}
{foreign_other /.../def.com r-----}
</ProgramListing></Para>
</InformalExample>
<InformalExample>
<Para><ProgramListing><ComputerOutput>dcecp></ComputerOutput> <UserInput>acl show /.:/fs/usr/srivas/andi_files -ic</UserInput></ProgramListing></Para>
</InformalExample>
<InformalExample>
<Para><ProgramListing>{mask_obj rwx-id}
{user_obj rwxcid}
{user andi rwx-id}
{foreign_user /.../abc.com/pierette rwx-id}
{foreign_user /.../ghi.com/pervaze r-x---}
{group_obj r-x---}
{other_obj r-x---}
{foreign_other /.../def.com r-x---}
</ProgramListing></Para>
</InformalExample>
<IndexTerm Id="DFSAGR.ACLG.indx.76" SpanEnd="DFSAGR.ACLG.indx.74">
<IndexTerm Id="DFSAGR.ACLG.indx.77" SpanEnd="DFSAGR.ACLG.indx.75">
</Sect3>
<Sect3 Id="DFSAGR.ACLG.div.20">
<Title>Mode Bits for New Objects That Do Not Inherit ACLs</Title>
<IndexTerm Id="DFSAGR.ACLG.indx.78">
<Primary>UNIX permissions</Primary>
<Secondary>for objects without ACLs</Secondary>
</IndexTerm>
<IndexTerm Id="DFSAGR.ACLG.indx.79">
<Primary>UNIX file creation mask</Primary>
<Secondary>interaction with ACLs</Secondary>
</IndexTerm>
<IndexTerm Id="DFSAGR.ACLG.indx.80">
<Primary>file creation mask</Primary>
<Secondary>interaction with ACLs</Secondary>
</IndexTerm>
<IndexTerm Id="DFSAGR.ACLG.indx.81">
<Primary><Command>umask</Command> command</Primary>
</IndexTerm>
<IndexTerm Id="DFSAGR.ACLG.indx.82">
<Primary>access control lists (ACLs)</Primary>
<Secondary>interaction with file creation mask</Secondary>
</IndexTerm>
<IndexTerm Id="DFSAGR.ACLG.indx.83">
<Primary>access control lists (ACLs)</Primary>
<Secondary>determining for objects without ACLs</Secondary>
</IndexTerm>
<Para>The ACL inheritance algorithm described in Section 3.1.5.2 applies only if the
directory in which a file or directory object is created has the appropriate
Initial Creation ACL.  If the parent directory of a new object does not have the
appropriate Initial Creation ACL, the object does not inherit an Object ACL; it
initially has no Object ACL and is protected only with UNIX mode bits.  DCE LFS
bases the object's initial mode bits on the intersection of the following
information:
</Para>
<ItemizedList>
<ListItem>
<Para>The UNIX mode bits specified at the system call level (with the UNIX
<Literal>open(&thinsp;)</Literal>, <Literal>creat(&thinsp;)</Literal>, or <Literal>mkdir(&thinsp;)</Literal> system call) when the object is
created.  The application that invokes one of these system calls specifies the
mode bits for the new object.  For instance, when the UNIX <Command>touch</Command> command
is used to create an object, the command usually specifies the <Literal>user</Literal>,
<Command>group</Command>, and <Literal>other</Literal> mode bits as <Literal>r</Literal> and <Literal>w</Literal> in the resulting
<Literal>creat(&thinsp;)</Literal> system call.
<?sml-break><?sml-need 20></Para>
</ListItem>
<ListItem>
<Para>The value of the UNIX file creation mask of the process that creates the
object.  The file creation mask filters the mode bits initially assigned to
an object; the mask is defined with the UNIX <Command>umask</Command> command to be the
octal complement of the allowable mode bits.  For instance, when a user creates
an object, the value of the file creation mask of the user's process filters
the mode bits assigned to the object.
</Para>
</ListItem>
</ItemizedList>
<Para>For a new object, <Literal>user</Literal>, <Command>group</Command>, or <Literal>other</Literal> receives a mode bit
only if the bit is specified in the system call <Replaceable>and</Replaceable> the bit is not
filtered by the file creation mask.  For instance, <Literal>user</Literal> for a new object
receives read access only if the system call that creates the object specifies
the <Literal>r</Literal> mode bit for <Literal>user</Literal> <Replaceable>and</Replaceable> the file creation mask of the
creating process does not restrict <Literal>user</Literal> from having the <Literal>r</Literal> mode bit.
</Para>
<Para>For example, the system call to create a new file typically specifies read and
write access for <Literal>user</Literal>, <Command>group</Command>, and <Literal>other</Literal>; the file creation
mask commonly restricts <Command>group</Command> and <Literal>other</Literal> to only read and execute
access.  When the file is created, <Literal>user</Literal> has the <Literal>r</Literal> and <Literal>w</Literal> bits,
while <Command>group</Command> and <Literal>other</Literal> have only the <Literal>r</Literal> bit.
</Para>
<Para>Similarly, the system call to create a new directory usually specifies read,
write, and execute access for <Literal>user</Literal>, <Command>group</Command>, and <Literal>other</Literal>; the
file creation mask commonly restricts <Command>group</Command> and <Literal>other</Literal> to only read
and execute access.  When the directory is created, <Literal>user</Literal> has the <Literal>r</Literal>,
<Literal>w</Literal>, and <Literal>x</Literal> bits, while <Command>group</Command> and <Literal>other</Literal> have just the
<Literal>r</Literal> and <Literal>x</Literal> bits.
</Para>
<Para>A new directory whose parent directory has no Initial Container Creation ACL
is created without an Initial Container Creation ACL.  Likewise, a new directory
whose parent directory has no Initial Object Creation ACL is created without
an Initial Object Creation ACL.
</Para>
<Sect4 Id="DFSAGR.ACLG.div.21">
<Title>Displaying Implicit (Nonexistent) ACLs</Title>
<IndexTerm Id="DFSAGR.ACLG.indx.84">
<Primary>access control lists (ACLs)</Primary>
<Secondary>displaying for objects without ACLs</Secondary>
</IndexTerm>
<IndexTerm Id="DFSAGR.ACLG.indx.85">
<Primary>access control lists (ACLs)</Primary>
<Secondary>displaying implicit ACLs</Secondary>
</IndexTerm>
<Para>If you use the <Command>dcecp acl show</Command> command to display a nonexistent Object ACL,
DCE LFS displays an implicit Object ACL.  Although an Object ACL does not
physically exist, DCE LFS constructs an implicit Object ACL whose entries
and permissions match the object's UNIX mode bits.
<?sml-break><?sml-need 20></Para>
<Para>For the implicit Object ACL of a directory, DCE LFS expands the <Literal>w</Literal> mode
bit to grant the <Literal>i</Literal> and <Literal>d</Literal> ACL permissions in addition to the <Literal>w</Literal>
permission.  Until a directory has an Object ACL, DCE LFS must perform this
expansion to allow for the creation of objects in the directory; without the
<Literal>i</Literal> and <Literal>d</Literal> ACL permissions, the directory would effectively be
read-only.  Once the ACL exists, DCE LFS maps the <Literal>w</Literal> mode bit to just the
<Literal>w</Literal> ACL permission, not the <Literal>i</Literal> and <Literal>d</Literal> permissions (see Section
3.1.4).  Because the <Literal>i</Literal> and <Literal>d</Literal> ACL permissions are meaningless for a
file, DCE LFS does not expand the <Literal>w</Literal> mode bit on the implicit Object ACL
of a file.
</Para>
<Para>If you use the <Command>dcecp acl show</Command> command to display a
nonexistent Initial Creation ACL, DCE LFS displays an implicit Initial Creation
ACL.  It bases the permissions of this implicit ACL solely on a file creation
mask of <Literal>0</Literal> (zero).  In this case, DCE LFS ignores the file
creation mask of the process that attempts to display the nonexistent Initial
Creation ACL.  For the implicit Initial Container Creation ACL, DCE LFS expands
the <Literal>w</Literal> permission to grant the <Literal>i</Literal> and
<Literal>d</Literal> permissions as well.
</Para>
<Para>Like the <Literal>user_obj</Literal> entries of explicit ACLs (which
physically exist), the <Literal>user_obj</Literal> entries of implicit ACLs
grant the <Literal>c</Literal> permission.  This permission ensures that the
owner of an object can always change the ACLs of the object.  Cell
administrators for the File Server machine on which an object physically
resides can also always change the ACLs of the object.
</Para>
<Para>If you use the <Command>dcecp acl show -ic</Command> command to display the Initial
Container Creation ACL of a directory that does not have this ACL, the command
always displays an implicit Initial Container Creation ACL that has the
following entries and permissions:
</Para>
<InformalExample>
<Para><ProgramListing>{user_obj rwxcid}
{group_obj rwx-id}
{other_obj rwx-id}
</ProgramListing></Para>
</InformalExample>
<Para>If you use the <Command>dcecp acl show -io</Command> command to display the Initial Object
Creation ACL of a directory that does not have this ACL, the command always
displays an implicit Initial Object Creation ACL that has the following entries
and permissions:
</Para>
<InformalExample>
<Para><ProgramListing>{user_obj rwxc--}
{group_obj rwx---}
{other_obj rwx---}
</ProgramListing></Para>
</InformalExample>
<?sml-break>
<?sml-need 20>
<Para>Note again that, for an object created in a DCE LFS directory that does not have
the appropriate Initial Creation ACL, DCE LFS considers the value of the file
creation mask of the process that creates the new object when determining the
object's initial mode bits.  DCE LFS ignores the file creation mask of the
calling process only when displaying nonexistent Initial Creation ACLs.
<IndexTerm Id="DFSAGR.ACLG.indx.86" SpanEnd="DFSAGR.ACLG.indx.84"><IndexTerm Id="DFSAGR.ACLG.indx.87" SpanEnd="DFSAGR.ACLG.indx.85"></Para>
</Sect4>
<Sect4 Id="DFSAGR.ACLG.div.22">
<Title>Creating Explicit (Existing) ACLs</Title>
<IndexTerm Id="DFSAGR.ACLG.indx.88">
<Primary>access control lists (ACLs)</Primary>
<Secondary>creating for objects without ACLs</Secondary>
</IndexTerm>
<IndexTerm Id="DFSAGR.ACLG.indx.89">
<Primary>access control lists (ACLs)</Primary>
<Secondary>creating explicit ACLs</Secondary>
</IndexTerm>
<Para>The Object ACL and Initial Creation ACLs of an object that is protected only
with UNIX mode bits remain implicit until you use the <Command>dcecp acl</Command> command
to save them, at which point DCE LFS creates explicit ACLs for the object.
For example, if you use the <Command>dcecp acl modify</Command> command to change an
implicit ACL, DCE LFS creates an explicit ACL when it saves the changes.
</Para>
<Para>Unless you change the permissions with the <Command>dcecp acl</Command> command that saves
the ACL, the permissions granted by an Object ACL created with the command
match the object's initial mode bits.  Similarly, unless you change them with
the <Command>dcecp acl</Command> command that saves the ACL, the permissions granted by an
Initial Creation ACL created with the command are based on a file creation
mask of <Literal>0</Literal> (zero).
</Para>
<Para>Note that an Object ACL is always created for a file or directory created by
a foreign user, even if the parent directory does not have the appropriate
Initial Creation ACL.  Because an unauthenticated user is treated as a user
from an unknown foreign cell, an Object ACL is always created for an object
created by an unauthenticated user also.  The permissions granted by an Object
ACL created in this way are based on the UNIX mode bits specified at the system
call level when the object is created and the value of the UNIX file creation
mask of the creating process.
<IndexTerm Id="DFSAGR.ACLG.indx.90" SpanEnd="DFSAGR.ACLG.indx.88"><IndexTerm Id="DFSAGR.ACLG.indx.91" SpanEnd="DFSAGR.ACLG.indx.89"><IndexTerm Id="DFSAGR.ACLG.indx.92" SpanEnd="DFSAGR.ACLG.indx.55"><IndexTerm Id="DFSAGR.ACLG.indx.93" SpanEnd="DFSAGR.ACLG.indx.78"><IndexTerm Id="DFSAGR.ACLG.indx.94" SpanEnd="DFSAGR.ACLG.indx.83"><?sml-break><?sml-need 20></Para>
</Sect4>
</Sect3>
</Sect2>
<Sect2 Id="DFSAGR.ACLG.div.23">
<Title>Initial ACLs of a New Fileset</Title>
<IndexTerm Id="DFSAGR.ACLG.indx.95">
<Primary>filesets</Primary>
<Secondary>default permissions</Secondary>
</IndexTerm>
<IndexTerm Id="DFSAGR.ACLG.indx.96">
<Primary>filesets</Primary>
<Secondary>initial ACLs</Secondary>
</IndexTerm>
<IndexTerm Id="DFSAGR.ACLG.indx.97">
<Primary>directories</Primary>
<Secondary>implicit permissions in root (DFS)</Secondary>
</IndexTerm>
<IndexTerm Id="DFSAGR.ACLG.indx.98">
<Primary>root directories</Primary>
<Secondary>implicit permissions</Secondary>
</IndexTerm>
<Para>The root directory of a newly created DCE LFS fileset has no DCE ACLs.  The
directory is protected only with UNIX mode bits.  Files and subdirectories
created in the directory inherit UNIX mode bits according to the usual file
system semantics.  The root directory's Object ACL, Initial Object Creation
ACL, and Initial Container Creation ACL remain implicit until the
<Command>dcecp acl</Command> command is used to create explicit ACLs for the directory.
(See Section 3.1.5.4.2.)
</Para>
<Para>A DCE LFS fileset can include many files and directories that never have ACLs.
However, this approach fails to take advantage of the enhanced security
available with DCE ACLs.  Therefore, it is important to use the <Command>dcecp acl</Command>
command to create the Object ACL, Initial Object Creation ACL, and Initial
Container Creation ACL for the root directory of a fileset <Replaceable>before</Replaceable>
other objects are created in the directory.
</Para>
<Para>For the root directory of a new DCE LFS fileset, <Literal>user</Literal>, <Command>group</Command>, and
<Literal>other</Literal> all receive the UNIX <Literal>r</Literal>, <Literal>w</Literal>, and <Literal>x</Literal> mode bits.  If
the <Command>dcecp acl show</Command> command is used to view the directory's Object ACL,
DCE LFS displays an implicit Object ACL that has the following entries and
permissions:
</Para>
<InformalExample>
<Para><ProgramListing>{user_obj rwxcid}
{group_obj rwx-id}
{other_obj rwx-id}
</ProgramListing></Para>
</InformalExample>
<Para>If the <Command>dcecp acl show</Command> command is invoked with the <Option>io</Option> or <Option>ic</Option>
option to view the Initial Container Creation ACL or Initial Object Creation
ACL of a new root directory, DCE LFS displays an implicit Initial Creation ACL.
DCE LFS constructs implicit Initial Creation ACLs for a new root directory just
as it constructs implicit Initial Creation ACLs for any directory that does not
have these ACLs. (See Section 3.1.5.4.1.)
<IndexTerm Id="DFSAGR.ACLG.indx.99" SpanEnd="DFSAGR.ACLG.indx.98"><IndexTerm Id="DFSAGR.ACLG.indx.100" SpanEnd="DFSAGR.ACLG.indx.97"></Para>
</Sect2>
<Sect2 Id="DFSAGR.ACLG.div.24">
<Title>Suggested Initial ACLs for a New Fileset</Title>
<Para>Cell administrators need to use the <Command>dcecp acl</Command> command to create the ACLs
for the root directory of a new DCE LFS fileset.  They should also manipulate
the root directory and its ACLs to assign the directory the proper owner and
give its ACL entries the appropriate permissions.
</Para>
<Para>The owner of a fileset's root directory is initially set to <Literal>root</Literal>. A cell
administrator must use the UNIX <Command>chown</Command> command or its equivalent to make
the user who is to own the fileset the owner of the directory, thus granting
that individual the <Literal>c</Literal> permission associated with the <Literal>user_obj</Literal>
entry.  A cell administrator should also use the UNIX <Command>chgrp</Command> command or
its equivalent to change the owning group, as required.
</Para>
<Para>Cell administrators may want to establish the convention of explicitly
granting the owner of a new fileset all permissions on the fileset's root
directory.  In addition, they may want to limit the permissions initially
granted by the <Literal>group_obj</Literal> and <Literal>other_obj</Literal>
entries, changing these entries to grant only the <Literal>r</Literal> and
<Literal>x</Literal> permissions.  This practice allows all users from the
local cell to list the contents of the directory and view the ACLs of the
objects it contains, but little else.
</Para>
<Para>The following example ACL provides the owner
(<Literal>pierette</Literal>) of the root directory of a new fileset all
permissions, granting all other users from the local cell just the
<Literal>r</Literal> and <Literal>x</Literal> permissions:
</Para>
<InformalExample>
<Para><ProgramListing><ComputerOutput>dcecp></ComputerOutput> <UserInput>acl show /.../abc.com/fs/usr/pierette</UserInput></ProgramListing></Para>
</InformalExample>
<InformalExample>
<Para><ProgramListing>{user_obj rwxcid}
{group_obj r-x---}
{other_obj r-x---}
</ProgramListing></Para>
</InformalExample>
<Para>Cell administrators should also apply these suggestions to the root directory's
Initial Object Creation and Initial Container Creation ACLs.  Because they are
meaningless with respect to files, the <Literal>i</Literal> and <Literal>d</Literal> permissions do not
need to be granted to the <Literal>user_obj</Literal> entry on the directory's Initial
Object Creation ACL.
<?sml-break><?sml-need 20></Para>
<Para>Recall that a user must have the <Literal>x</Literal> permission on each directory that
leads to an object to access the object.  Therefore, cell administrators should
grant the <Literal>x</Literal> permission to the <Literal>group_obj</Literal> and <Literal>other_obj</Literal> entries
on all directories that lead to common binary files.  They should also grant
the <Literal>x</Literal> permission to these entries on all directories that lead to the
root directories of user filesets.
<IndexTerm Id="DFSAGR.ACLG.indx.101" SpanEnd="DFSAGR.ACLG.indx.95"><IndexTerm Id="DFSAGR.ACLG.indx.102" SpanEnd="DFSAGR.ACLG.indx.96"></Para>
</Sect2>
<Sect2 Id="DFSAGR.ACLG.div.25">
<Title>Delegation with DCE LFS Objects</Title>
<IndexTerm Id="DFSAGR.ACLG.indx.103">
<Primary>access control lists (ACLs)</Primary>
<Secondary>delegation</Secondary>
</IndexTerm>
<IndexTerm Id="DFSAGR.ACLG.indx.104">
<Primary>delegation</Primary>
<Secondary>access control lists (ACLs)</Secondary>
</IndexTerm>
<Note>
<Para>The information in this section applies only to applications that are written
to use delegation.
</Para>
</Note>
<Para>The previous sections of this chapter document how ACLs work when you request
access to an object directly.  The information applies for most applications and
for most routine file system operations.  However, some applications may perform
operations on an object on your behalf.  An operation performed by such an
application is referred to as a <Symbol Role="Variable">delegation operation</Symbol>; you delegate the
operation to the server principal of the application.
</Para>
<Para>For any operation, the user who initially requests the operation is referred
to as the <Symbol Role="Variable">initiator</Symbol>.  For a delegation operation, the principal that performs
the operation for the initiator is known as the <Symbol Role="Variable">delegate</Symbol>.  Because users
typically delegate operations to server principals, delegation is usually
described with respect to principals rather than users.
</Para>
<Para>For an operation that does not involve delegation, only the initiator needs
to have the permissions necessary to perform the requested operation.  For
a delegation operation, both the initiator and the delegate must have the
permissions necessary to perform the operation.  For example, suppose you
request an application that executes as a delegate to print a file.  In this
case, you are the initiator because you have requested that the file be
printed; the application that prints the file is the delegate because you have
asked the application to print the file.  Both you and the application need the
permissions required to print the file.
<?sml-break><?sml-need 20></Para>
<Para>With DCE ACLs, you can grant permissions to a principal that apply only when
the principal is acting as a delegate on behalf of another principal.  In the
previous example, you could grant the application the necessary permissions for
the requested file directly, or you could grant the application permissions
only when it is acting as a delegate.  Granting the application permissions
directly allows the application to print the file on its own initiative, which
can allow unauthorized users to print the file via the application.  Granting
the application permissions as a delegate ensures that the application prints
the file only on behalf of authorized users.
</Para>
<Para>Multiple delegates can be associated with a single operation. In this case,
the collection of delegates is referred to as a <Symbol Role="Variable">delegation chain</Symbol>.  The initiator
and all delegates in the chain must have the permissions necessary to perform
a requested operation.  If the application in the previous example had forwarded
your print request to a print server, both the application and the print server
would have been members of the delegation chain for your print request.  In this
case, the initiator (you) and both delegates (the application and the print
server) would have needed the permissions required to print the file.
</Para>
<Para>The initiator of an operation is granted permissions via one of the standard
entries described in Table 3-1.  However, delegates can also be granted
permissions via special ACL entry types that exist exclusively for delegation.
The following subsections provide more information about the additional ACL
entries used for delegation and about how delegation works with DCE LFS
objects.
</Para>
<Sect3 Id="DFSAGR.ACLG.div.26">
<Title>ACL Entry Types for Delegation</Title>
<IndexTerm Id="DFSAGR.ACLG.indx.105">
<Primary>access control lists (ACLs)</Primary>
<Secondary>format of delegation entries</Secondary>
</IndexTerm>
<Para>For each ACL entry described in Table 3-1, a corresponding entry of type
<Literal>_delegate</Literal> is available.  Table 3-3 describes the ACL entry types that
can effectively be used for delegation with DCE LFS objects. (DCE LFS
always ignores <Literal>user_obj_delegate</Literal>, <Literal>group_obj_obj</Literal>, and
<Literal>other_obj_delegate</Literal> entries, so these entries are omitted from the table.)
<?sml-break><?sml-need 30></Para>
<Table Frame="all" Remap="center" Orient="Port">
<Title>ACL Entry Types for Delegation</Title>
<TGroup Rowsep="0" Colsep="0" Cols="3">
<ColSpec Rowsep="1" Colsep="1" Align="Left" Colwidth="111*" Colname="col1" Colnum="1">
<ColSpec Rowsep="1" Colsep="1" Align="Left" Colwidth="82*" Colname="col2" Colnum="2">
<ColSpec Rowsep="1" Colsep="1" Align="Left" Colwidth="149*" Colname="col3" Colnum="3">
<THead>
<Row>
<Entry Rowsep="1"><Literal>Delegation Type</Literal></Entry>
<Entry Rowsep="1"><Literal>Key</Literal></Entry>
<Entry Rowsep="1"><Literal>Applies to</Literal></Entry>
</Row>
</THead>
<TBody>
<!-- .cS-->
<!-- user_obj_delegate@T{-->
<!-- None-->
<!-- T}@T{-->
<!-- The principal who owns the object acting as a delegate.  The principal is from-->
<!-- the default cell.-->
<!-- T}-->
<!-- _-->
<!-- .cE-->
<Row>
<Entry rowsep="1"><Literal>user_delegate</Literal></Entry>
<Entry rowsep="1"><Symbol Role="Variable">principal_name</Symbol>
</Entry>
<Entry rowsep="1">The <Symbol Role="Variable">principal_name</Symbol> principal from the default cell acting as a delegate.
</Entry>

</Row>
<Row>
<Entry rowsep="1"><Command>foreign_user_delegate</Command></Entry>
<Entry rowsep="1"><Symbol Role="Variable">cell_name</Symbol><Filename>/</Filename><Symbol Role="Variable">principal_name</Symbol>
</Entry>
<Entry rowsep="1">The <Symbol Role="Variable">principal_name</Symbol> principal from the foreign cell <Symbol Role="Variable">cell_name</Symbol> acting
as a delegate.
</Entry>

</Row>
<!-- -->
<!-- .cS-->
<!-- group_obj_delegate@T{-->
<!-- None-->
<!-- T}@T{-->
<!-- Members of the group that owns the object acting as delegates.  The group is-->
<!-- from the default cell.-->
<!-- T}-->
<!-- _-->
<!-- .cE-->
<Row>
<Entry rowsep="1"><Literal>group_delegate</Literal></Entry>
<Entry rowsep="1"><Symbol Role="Variable">group_name</Symbol>
</Entry>
<Entry rowsep="1">Members of the group <Symbol Role="Variable">group_name</Symbol> from the default cell acting as
delegates.
</Entry>

</Row>
<Row>
<Entry rowsep="1"><Command>foreign_group_delegate</Command></Entry>
<Entry rowsep="1"><Symbol Role="Variable">cell_name</Symbol><Filename>/</Filename><Symbol Role="Variable">group_name</Symbol>
</Entry>
<Entry rowsep="1">Members of the group <Symbol Role="Variable">group_name</Symbol> from the foreign cell <Symbol Role="Variable">cell_name</Symbol>
acting as delegates.
</Entry>

</Row>
<!-- -->
<!-- .cS-->
<!-- other_obj_delegate@T{-->
<!-- None-->
<!-- T}@T{-->
<!-- Principals from the default cell who do not match any of the preceding entries-->
<!-- acting as delegates.-->
<!-- T}-->
<!-- _-->
<!-- .cE-->
<Row>
<Entry rowsep="1"><Command>foreign_other_delegate</Command></Entry>
<Entry rowsep="1"><Symbol Role="Variable">cell_name</Symbol>
</Entry>
<Entry rowsep="1">Principals from the foreign cell <Symbol Role="Variable">cell_name</Symbol> who do not match any of the
preceding entries acting as delegates.
</Entry>
</Row>
<Row>
<Entry rowsep="1"><Literal>any_other_delegate</Literal></Entry>
<Entry rowsep="1">None
</Entry>
<Entry rowsep="1">Principals from any foreign cell who do not match any of the preceding entries
acting as delegates.
</Entry>

</Row>
</TBody>
</TGroup>
</Table>
<?sml-indent 0>
<?sml-indent>
<?sml-space .5>
<Para>Some examples of ACL entries for delegation follow:
<?sml-break><?sml-need 20></Para>
<VariableList>
<VarListEntry role="linebreak">
<Term><Literal>{user_delegate print-server </Literal><Symbol Role="Variable">permissions</Symbol><Literal>}</Literal></Term>
<ListItem>
<Para>Defines the permissions for the principal <Literal>print-server</Literal> from the default
cell when the principal is acting as a delegate.
</Para>
</ListItem>
</VarListEntry>
<VarListEntry role="linebreak">
<Term><Literal>{group_delegate printers </Literal><Symbol Role="Variable">permissions</Symbol><Literal>}</Literal></Term>
<ListItem>
<Para>Defines the permissions for members of the group <Literal>printers</Literal> from the
default cell when members of the group are acting as delegates.
</Para>
</ListItem>
</VarListEntry>
</VariableList>
<Para>Each delegation entry can grant any of the permissions available for DCE LFS
objects (<Literal>r</Literal>, <Literal>w</Literal>, <Literal>x</Literal>, <Literal>c</Literal>, <Literal>i</Literal>, and <Literal>d</Literal>).  Each
permission has the same meaning for a delegation entry that it has for a
nondelegation entry. (See Section 3.1.1.4.)
</Para>
</Sect3>
<Sect3 Id="DFSAGR.ACLG.div.27">
<Title>ACL Evaluation for Delegation</Title>
<IndexTerm Id="DFSAGR.ACLG.indx.106">
<Primary>access control lists (ACLs)</Primary>
<Secondary>checking sequence for delegation</Secondary>
</IndexTerm>
<IndexTerm Id="DFSAGR.ACLG.indx.107">
<Primary>access control lists (ACLs)</Primary>
<Secondary>evaluation sequence for delegation</Secondary>
</IndexTerm>
<Para>DCE LFS performs an operation requested by one or more delegates only if the
initiator and all delegates have the permissions required to perform the
operation.  If the initiator or one of the delegates does not have the required
permissions, DCE LFS refuses to perform the operation.  For example, to create
a file in a directory, the initiator and all delegates must have the <Literal>w</Literal>,
<Literal>x</Literal>, and <Literal>i</Literal> permissions on the directory; if the initiator or one of
the delegates does not have all three of these permissions, the operation
fails.
</Para>
<Para>To determine the permissions for the initiator of an operation, DCE LFS
considers only nondelegation ACL entries according to the evaluation algorithm
presented in Section 3.1.2.  However, to determine the permissions for a
delegate, DCE LFS follows an evaluation algorithm that includes both delegation
and nondelegation ACL entries.  As with the usual evaluation algorithm, DCE LFS
stops checking entries once a delegate meets a condition in the checking
sequence; evaluation proceeds to a condition in the checking sequence only
if the delegate fails to match all previous conditions.
</Para>
<Para>The following list describes the order in which DCE LFS examines the entries
on an ACL to determine the permissions for a delegate:
<?sml-break><?sml-need 20></Para>
<OrderedList>
<ListItem>
<Para>The delegate owns the object.  DCE LFS grants the delegate the permissions
from the <Literal>user_obj</Literal> entry.
</Para>
</ListItem>
<ListItem>
<Para>A <Literal>user</Literal>, <Literal>user_delegate</Literal>, <Command>foreign_user</Command>, or
<Command>foreign_user_delegate</Command> entry exists for the delegate.  DCE LFS grants
the delegate the permissions from the first of these entries that the
delegate matches.
</Para>
</ListItem>
<ListItem>
<Para>The delegate belongs to the group that owns the object (which acquires
permissions via the <Literal>group_obj</Literal> entry) or to a group for which one
of the following entries exists: <Command>group</Command>, 
<Literal>group_delegate</Literal>, <Command>foreign_group</Command>, or
<Command>foreign_group_delegate</Command>.  DCE LFS grants the delegate
the permissions from all of the entries that the delegate matches.
</Para>
</ListItem>
<ListItem>
<Para>The delegate is from the default cell.  DCE LFS grants the delegate the
permissions from the <Literal>other_obj</Literal> entry.
</Para>
</ListItem>
<ListItem>
<Para>The delegate is from a foreign cell for which a <Command>foreign_other</Command> or
<Command>foreign_other_delegate</Command> entry exists.  DCE LFS grants the delegate the
permissions from the first of these entries that the delegate matches.
</Para>
</ListItem>
<ListItem>
<Para>The delegate is from a foreign cell and an <Literal>any_other</Literal> or
<Literal>any_other_delegate</Literal> entry exists.  DCE LFS grants the delegate the
permissions from the first of these entries that exists.
</Para>
</ListItem>
<ListItem>
<Para>The delegate matches no entry.  DCE LFS denies the delegate access to the
object.
</Para>
</ListItem>
</OrderedList>
<Para>Note that all delegation entries are always optional. Note also that a
principal acquires permissions from a delegation entry only when acting as a
delegate.  A principal that is initiating an operation cannot obtain permissions
from a delegation entry.  Finally, DCE LFS filters all permissions granted via
delegation entries through the <Literal>mask_obj</Literal> entry.
</Para>
</Sect3>
<Sect3 Id="DFSAGR.ACLG.div.28">
<Title>DFS Notes and Restrictions for Delegation</Title>
<Para>In most respects, delegation works with DCE LFS objects in the same way that
it works with other DCE objects.  You use <Command>dcecp acl</Command> commands to add,
delete, modify, and display delegation entries.  You can include delegation
entries on Object ACLs and Initial Creation ACLs.
<?sml-break><?sml-need 20></Para>
<Para>An object created through a delegation operation is owned by the last delegate
in the delegation chain.  For example, if you direct an application to create a
file, and that application in turn directs another server process to create the
file, the resulting file is owned by the server process that actually creates
it, not by you or the application.  In this case, you may not have the necessary
permissions to perform further operations on the file.
</Para>
<Para>Similarly, because non-LFS objects do not have DCE ACLs, the permissions
required for a delegation operation that involves a non-LFS object are based
solely on the identity and permissions of the last delegate in the chain.  The
last delegate must acquire the necessary permissions by way of the <Literal>user</Literal>,
<Command>group</Command>, or <Literal>other</Literal> mode bits.
</Para>
<Para>The new ACL entry types introduced for delegation are incompatible with many
programs from previous versions of DCE.  Therefore, the following restrictions
apply to the use of delegation entries on the ACLs of DCE LFS objects:
</Para>
<ItemizedList>
<ListItem>
<Para>Delegation is first available with Version 1.1 of DCE.  In earlier versions of
DCE, the <Command>acl_edit</Command> program was used to list and modify ACLs.  Versions of
the <Command>acl_edit</Command> program provided with versions of DCE earlier than 1.1
cannot display or modify ACLs that include delegation entries.
</Para>
</ListItem>
<ListItem>
<Para>File Server machines based on versions of DCE earlier than Version 1.1 cannot house
filesets in which the ACLs of one or more objects include delegation entries.
If the ACLs of one or more objects in a fileset include delegation entries,
DFS does not allow you to do the following:
</Para>
<ItemizedList>
<ListItem>
<Para>Move the fileset to a File Server that uses a version of DCE earlier than Version 1.1.
</Para>
</ListItem>
<ListItem>
<Para>Add a replication site for the fileset on a File Server that uses a version of
DCE earlier than Version 1.1.
</Para>
</ListItem>
<ListItem>
<Para>Restore the fileset to a File Server that uses a version of DCE earlier than
Version 1.1.
</Para>
</ListItem>
</ItemizedList>
</ListItem>
</ItemizedList>
<?sml-break>
<?sml-need 20>
<Para>Finally, to use the identity of a chain of delegates for a delegation
operation that involves DFS, an application sets the current login context to
be that of the delegation chain for the operation (see the &DCEAc; for
information about login contexts).  When the operation is complete, the
application sets the current login context back to its original state.  This
behavior is required only for delegation operations that involve requests to
the File Exporter, which runs in the kernel; for operations that involve
requests to user-space processes, applications can simply indicate that the
login context of the delegation chain is to be used for the operation. (An
application uses the <Literal>sec_login_set_context(&thinsp;)</Literal>
routine to set the current login context; see the &DCEDk; for more
information.)
<IndexTerm Id="DFSAGR.ACLG.indx.108">
<Primary>administrative lists</Primary>
<Secondary>delegation</Secondary>
</IndexTerm>
<IndexTerm Id="DFSAGR.ACLG.indx.109">
<Primary>delegation</Primary>
<Secondary>administrative lists</Secondary>
</IndexTerm></Para>
<Note>
<Para>DFS server processes that use administrative lists do not consider
delegation when determining administrative privileges.  The last delegate in
the chain must be included in the appropriate administrative list to perform a
privileged operation.  For example, a privileged <Command>bos</Command> command
requires that the last delegate in the chain be a member of the
<Filename>admin.bos</Filename> list on the specified server machine. (See
Chapter 4 for information about administering DFS server processes.)
</Para>
</Note>
<IndexTerm Id="DFSAGR.ACLG.indx.110" SpanEnd="DFSAGR.ACLG.indx.2">
<IndexTerm Id="DFSAGR.ACLG.indx.111" SpanEnd="DFSAGR.ACLG.indx.1">
<IndexTerm Id="DFSAGR.ACLG.indx.112" SpanEnd="DFSAGR.ACLG.indx.3">
</Sect3>
</Sect2>
</Sect1>
<Sect1 Id="DFSAGR.ACLG.div.29">
<Title>Using Groups with DFS</Title>
<IndexTerm Id="DFSAGR.ACLG.indx.113">
<Primary>groups</Primary>
<Secondary>how to use in DFS</Secondary>
</IndexTerm>
<Para>Information about groups is maintained in the Registry Database by the
DCE Security Service. (See the DCE Security Service portion of the &DCEAc; for
complete details about creating and maintaining groups.)
</Para>
<Para>Using groups allows you to assign permissions to several users at one
time, rather than assigning them individually.  You can create user groups or
special interest groups (for example, a group of all of the people from one
department or a group of people who are working on one project) and then assign
that group access to the appropriate files and directories.
</Para>
<Para>You can also use groups to specify individuals who are permitted to
perform administrative tasks; these individuals are specified in DFS
administrative lists.  DFS uses administrative lists to determine who is
authorized to issue commands that affect filesets and server processes. 
Through administrative lists, you can precisely control the security in the
administrative domains in your cell.  This chapter does not discuss the
management of administrative lists in detail. (See Chapter 4 for details about
creating and maintaining administrative lists.)
</Para>
<Para>You can also specify a group as an argument with certain DFS commands. 
The groups specified with these commands, like those included in certain
administrative lists, define users who are allowed to issue commands that
affect filesets.  These groups are described in the following subsections.
</Para>
<Sect2 Id="DFSAGR.ACLG.div.30">
<Title>Creating and Maintaining Groups</Title>
<IndexTerm Id="DFSAGR.ACLG.indx.114">
<Primary>groups</Primary>
<Secondary>registry information</Secondary>
</IndexTerm>
<IndexTerm Id="DFSAGR.ACLG.indx.115">
<Primary>project lists</Primary>
<Secondary>about</Secondary>
</IndexTerm>
<IndexTerm Id="DFSAGR.ACLG.indx.116">
<Primary>groups</Primary>
<Secondary>adding members</Secondary>
</IndexTerm>
<Para>To authenticate to DCE, users must have accounts in the Registry Database
(although some parts of DCE allow unauthenticated use).  Part of the
information associated with a user's account is the user's principal name and
the groups and organizations to which the user belongs.  Accounts are created
and maintained by system administrators in the Registry Database, which is
organized into three main directories: a person directory, a group directory,
and an organization directory. (Some server machines run as separate
authenticated principals; these servers also have accounts in the Registry
Database.  In the following section, the term <Symbol Role="Variable">principal</Symbol> refers to either
a human user or a server machine.) 
</Para>
<Para>The collection of groups to which a user belongs is called a project list.
A user acquires the access permissions granted to each group on the user's
project list.  To assign a user to a group, use the <Command>dcecp group add</Command>
command to add the user's principal name to the group's membership list in
the Registry Database. (See the &DCEAr; for information about the <Command>dcecp
group</Command> command.)
<?sml-break><?sml-need 20></Para>
</Sect2>
<Sect2 Id="DFSAGR.ACLG.div.31">
<Title>Using Groups with ACLs, Administrative Lists, and Commands</Title>
<IndexTerm Id="DFSAGR.ACLG.indx.117">
<Primary>access control lists (ACLs)</Primary>
<Secondary>using groups</Secondary>
</IndexTerm>
<IndexTerm Id="DFSAGR.ACLG.indx.118">
<Primary>administrative lists</Primary>
<Secondary>using groups</Secondary>
</IndexTerm>
<Para>Groups can be used with ACLs, administrative lists, and certain DFS commands.
Using groups in each of these ways provides a convenient way to specify several
individuals with one entry.
</Para>
<Para>ACLs specify access permissions for the users and groups that can perform
operations on files and directories.  Rather than specify an ACL entry for
each member of a  project on all project files, you can set up a group in the
Registry Database that includes all project members.  You can then specify the
group on the files' ACLs to provide all members the same access to the files.
</Para>
<Para>Similarly, administrative lists specify the users and groups that can perform
actions affecting specific server processes.  Groups can be specified on the
administrative list associated with each DFS server process.  Often the same
users need to be included on several administrative lists; these users can be
specified as a group in the Registry Database and subsequently added to and
removed from administrative lists as a group.  For example, you can use a group
to specify a system administration team whose members need access to most DFS
servers.  Then, rather than modify all the administrative lists when the team
membership changes, you can use the <Command>dcecp group</Command> command to
modify the group in the Registry Database.
</Para>
<Para>Groups can also be specified with options on certain DFS commands, including
the <Command>fxd</Command> and <Command>fts crserverentry</Command> commands, to specify administrative
users.  Groups specified on the command lines of these commands differ from
those specified with ACLs and administrative lists because only one group can
be specified with these commands, but multiple groups can be specified with
ACLs and administrative lists.
<?sml-break><?sml-need 20></Para>
</Sect2>
<Sect2 Id="DFSAGR.ACLG.div.32">
<Title>Suggestions for Administrative Groups</Title>
<Para>Administrative lists determine which users are permitted to perform privileged
operations, such as restoring user files from backup copies or moving filesets
from one server machine to another.  Because they are stored on the local disk
of each machine, administrative lists provide local control over a machine.
</Para>
<Para>Each type of server process is associated with an administrative list, which
allows you to differentiate between users who perform different administrative
tasks.  For example, administrative users who start and stop server processes
need to be included on different administrative lists from users who
manipulate filesets. (See Chapter 4 for details about the administrative
tasks associated with each administrative list.)
</Para>
<Para>Rather than specifying individuals in administrative lists, you can use groups
in much the same way that you can use groups in ACLs. (You may want to use the
same groups for ACLs and administrative lists in certain instances.) For
example, you can create a large group of users for performing backup operations
and include them on the administrative lists required to use the DFS Backup
System (<Filename>admin.bak</Filename>, <Filename>admin.fl</Filename>, and <Filename>admin.ft</Filename>).  A subset of this
group can be included in the administrative list (<Filename>admin.bos</Filename>) for the BOS
Server process on each machine in a domain, since that list designates the
users and groups permitted to control server processes.
</Para>
<Para>In two important cases, administrative users are specified as a group in
command options.  These groups are defined in the Registry Database, as are
groups specified with ACLs and administrative lists; however, only one group
can be specified with each of these commands.
<?sml-break><?sml-need 20></Para>
<IndexTerm Id="DFSAGR.ACLG.indx.119">
<Primary><Command>fxd</Command> command</Primary>
<Secondary>use of groups</Secondary>
</IndexTerm>
<Para>The first command, <Command>fxd</Command>, initializes the File Exporter
and starts related kernel daemons.  The group specified with the command's
<Option>admingroup</Option> option can change the ACLs and UNIX permissions
associated with all file system objects exported from the File Server machine
on which the File Exporter is running.  Members of the group have the
equivalent of the ACL <Literal>c</Literal> permission on all of the files and
directories in each exported DCE LFS fileset, and they can effectively change
the UNIX permissions on all files and directories in each exported non-LFS
fileset.  They can also change the owner and owning group of any file system
object exported from the machine, and they can change the default cell of any
DCE LFS object exported from the machine.  Because they have access to all of
the exported DCE LFS and non-LFS filesets on the File Server machine, members
of this group should be both few in number and highly trusted.
</Para>
<Para>Although inclusion in this administrative group is similar in many
respects to being logged in as <Literal>root</Literal>, the two are not
equivalent.  A user who is logged into the local machine as
<Literal>root</Literal> can perform different operations on a file or
directory, depending on whether the user accesses the object via its DCE
pathname or via its local pathname.
</Para>
<Para><IndexTerm Id="DFSAGR.ACLG.indx.120">
<Primary>access control lists (ACLs)</Primary>
<Secondary><Literal>root</Literal> permissions</Secondary>
</IndexTerm>
<IndexTerm Id="DFSAGR.ACLG.indx.121">
<Primary>access control lists (ACLs)</Primary>
<Secondary><Literal>self</Literal> permissions</Secondary>
</IndexTerm>
<IndexTerm Id="DFSAGR.ACLG.indx.122">
<Primary><Literal>self</Literal> principal</Primary>
<Secondary>ACL permissions</Secondary>
</IndexTerm>
<IndexTerm Id="DFSAGR.ACLG.indx.123">
<Primary><Literal>root</Literal></Primary>
<Secondary>ACL permissions</Secondary>
</IndexTerm>The first way a user can access a file or directory is via the object's DCE
pathname.  For DCE access, DFS treats a user who is logged into the local
machine as <Literal>root</Literal> but is not authenticated to DCE as the
<Filename>/.../</Filename><Symbol Role="Variable">cellname</Symbol><Literal>/hosts/</Literal><Symbol Role="Variable">hostname</Symbol><Literal>/self</Literal> principal of the local
machine; in this case, the <Literal>root</Literal> user receives the permissions associated
with the machine's <Literal>self</Literal> principal, which is treated as an authenticated
user from the local cell.  If the user is also authenticated to DCE as
<Literal>root</Literal>, DFS treats the user according to the DCE identity <Literal>root</Literal>.  The
DCE identity <Literal>root</Literal> effectively has <Literal>root</Literal> privileges for data in all
exported non-LFS filesets in the cell, which is a serious security risk.  Use
the DCE <Literal>root</Literal> identity very cautiously or disable it altogether.
</Para>
<Para>The second way a user can access a file or directory is via the object's local
pathname.  For local access, the <Literal>root</Literal> user has all of the privileges
commonly associated with <Literal>root</Literal>; the <Literal>root</Literal> user can perform any file
system operation on a file or directory.  Note that a file or directory in a
non-LFS fileset can always be accessed via a local pathname because a non-LFS
fileset must always be mounted locally, as a file system on its File Server
machine; a file or directory in a DCE LFS fileset can be accessed via a local
pathname only if its fileset is mounted locally.
<?sml-break><?sml-need 20></Para>
<Para>In summary, being a member of the <Command>fxd</Command> administrative group allows you to
perform any operation on a file or directory in an exported fileset, but you
may have to change the file's or directory's protections first.  Being logged
into the local machine as <Literal>root</Literal> lets you perform any operation on a file
or directory in a locally mounted fileset immediately, without first changing
the protections.  Being authenticated as DCE <Literal>root</Literal> lets you perform any
operation on a file or directory in an exported non-LFS fileset immediately.
</Para>
<Para><IndexTerm Id="DFSAGR.ACLG.indx.124">
<Primary><Command>fts</Command> command suite</Primary>
<Secondary><Command>crserverentry</Command>, use of groups</Secondary>
</IndexTerm>
<IndexTerm Id="DFSAGR.ACLG.indx.125">
<Primary>Fileset Location Database</Primary>
<Secondary>group administration</Secondary>
</IndexTerm>The second command, <Command>fts crserverentry</Command>, creates a server entry in the
FLDB for a specified File Server machine.  The group specified with the
command's <Option>owner</Option> option can administer entries in the FLDB for
all filesets on the File Server machine.  If the same group is given ownership
of the server entries for all of the File Server machines in a domain, members
of that group can then manipulate the FLDB entries for all filesets in the
domain.  Specifying a group with the <Command>fts crserverentry</Command>
command is an alternative to specifying the same group in the
<Filename>admin.fl</Filename> list, which would allow members of the group
to access FLDB entries for filesets on all machines in the cell.
</Para>
<Para>The number and size of a cell's administrative groups depend upon the
organization of the cell.  For example, a cell with a simple organization&mdash;one
with a single administrative domain&mdash;could have the following two basic
administrative groups:
</Para>
<ItemizedList>
<ListItem>
<Para>A group for cell-wide file system and fileset administrators
(<Literal>cell_fileset</Literal>)
</Para>
</ListItem>
<ListItem>
<Para>A group for all server principals in the cell (<Literal>cell_servers</Literal>)
</Para>
</ListItem>
</ItemizedList>
<Para>It could also include a third administrative group (<Literal>cell_file_system</Literal>).
The members of this group would be a highly trusted subset of the members of
the <Literal>cell_fileset</Literal> group.  Table 3-4 lists the groups associated with each
administrative list when only two groups are used and the groups associated
with each administrative list when three groups are used.  It also describes
the function of the groups included in each list.
<?sml-break><?sml-need 20>
<IndexTerm Id="DFSAGR.ACLG.indx.126">
<Primary>administrative lists</Primary>
<Secondary>suggested uses (table)</Secondary>
</IndexTerm>
<IndexTerm Id="DFSAGR.ACLG.indx.127">
<Primary>cells </Primary>
<Secondary>administrative groups</Secondary>
</IndexTerm></Para>
<Table Frame="all" Remap="center" Orient="Port">
<Title>Suggested Groups for Administering a Single-Domain Cell</Title>
<TGroup Rowsep="0" Colsep="0" Cols="4">
<ColSpec Colsep="1" Align="Left" Colwidth="1.0*" Colname="col1" Colnum="1">
<ColSpec Colsep="1" Align="Left" Colwidth="1.0*" Colname="col2" Colnum="2">
<ColSpec Colsep="1" Align="Left" Colwidth="1.0*" Colname="col3" Colnum="3">
<ColSpec Align="Left" Colwidth="1.45*" Colname="col4" Colnum="4">
<THead>

<Row>
<Entry Rowsep="1"><Literal>Administrative List</Literal></Entry>
<Entry Rowsep="1"><Literal>With Two Groups</Literal></Entry>
<Entry Rowsep="1"><Literal>With Three Groups</Literal></Entry>
<Entry Rowsep="1"><Literal>Function</Literal></Entry>
</Row>
</THead>
<TBody>
<Row>
<Entry Rowsep="1"><Filename>admin.bos</Filename></Entry>
<Entry Rowsep="1"><Literal>cell_fileset</Literal></Entry>
<Entry Rowsep="1"><Literal>cell_file_system</Literal></Entry>
<Entry Rowsep="1">Manages server processes
on each server machine
</Entry>
</Row>
<Row>
<Entry Rowsep="1"><Filename>admin.fl</Filename></Entry>
<Entry Rowsep="1"><Literal>cell_fileset</Literal></Entry>
<Entry Rowsep="1"><Literal>cell_fileset</Literal></Entry>
<Entry Rowsep="1">Creates server and fileset
entries in the Fileset
Location Database on
each Fileset Database
machine
</Entry>
</Row>
<Row>
<Entry Rowsep="1"><Filename>admin.ft</Filename></Entry>
<Entry Rowsep="1"><Literal>cell_fileset
<?sml-break>cell_servers
</Literal></Entry>
<Entry Rowsep="1"><Literal>cell_fileset
<?sml-break>cell_servers
</Literal></Entry>
<Entry Rowsep="1">Manages filesets on each
File Server machine;
moves filesets between
File Server machines
</Entry>
</Row>
<Row>
<Entry Rowsep="1"><Filename>admin.bak</Filename></Entry>
<Entry Rowsep="1"><Literal>cell_fileset</Literal></Entry>
<Entry Rowsep="1"><Literal>cell_fileset</Literal></Entry>
<Entry Rowsep="1">Modifies the Backup
Database on each Backup
Database machine
</Entry>
</Row>
<Row>
<Entry rowsep="1"><Filename>admin.up</Filename></Entry>
<Entry rowsep="1"><Literal>cell_servers</Literal></Entry>
<Entry rowsep="1"><Literal>cell_servers</Literal></Entry>
<Entry rowsep="1">Allows <Command>upclient</Command> processes
to obtain files from
<Command>upserver</Command> processes on
server machines
</Entry>
</Row>
</TBody>
</TGroup>
</Table>
<!--no-op:  l-->
<?sml-indent 0>
<!--no-op:  b-->
<?sml-indent>
<?sml-space .5>
<?sml-break>
<?sml-need 20>
<Para><IndexTerm Id="DFSAGR.ACLG.indx.128">
<Primary><Command>fxd</Command> command</Primary>
<Secondary>use of groups</Secondary>
</IndexTerm>
<IndexTerm Id="DFSAGR.ACLG.indx.129">
<Primary><Command>fts</Command> command suite</Primary>
<Secondary><Command>crserverentry</Command>, use of groups</Secondary>
</IndexTerm>If two groups are used, the <Literal>cell_fileset</Literal> group is specified with both
the <?sml-break> <Option>admingroup</Option> option of the <Command>fxd</Command> command and the <Option>owner</Option>
option of the <Command>fts crserverentry</Command> command for each File Server machine.
With this configuration, the same select group of administrators manages the
entire file system and all of the filesets in the cell.
</Para>
<Para>If the third group, <Literal>cell_file_system</Literal>, is used, it replaces the
<Literal>cell_fileset</Literal> group on the <Filename>admin.bos</Filename> lists on all server machines
in the cell to allow its members to control the server processes on the
machines.  It also replaces the <Literal>cell_fileset</Literal> group on the
<Option>admingroup</Option> option of each <Command>fxd</Command> command for the File Server
machines in the cell to enable its members to modify the permissions of all
exported filesets in the cell.
</Para>
<Para>An additional use of the <Option>owner</Option> option of the
<Command>fts crserverentry</Command> command and the
<Option>admingroup</Option> option of the <Command>fxd</Command> command is
to allow owners of local workstations to export data from their local disks
to the global namespace.  In this case, a group consisting of the owners of
a local workstation is specified with these options when a server entry is
created for the workstation and when the File Exporter is initialized on the
machine.  (See Chapter 6 for more information about creating server entries.)
<IndexTerm Id="DFSAGR.ACLG.indx.130" SpanEnd="DFSAGR.ACLG.indx.113">
</Para>
</Sect2>
</Sect1>
</Chapter>
<!--+ 10/19/96 18:43:16
    | tagMorph:  $Id: aclgroup.sgm,v 1.1.2.7 1996/12/15 23:01:37 wardr Exp $
    | tagMorph library:  $Id: aclgroup.sgm,v 1.1.2.7 1996/12/15 23:01:37 wardr Exp $
    | sml-to-docbook:  1.23
    +-->
