<!--
# COPYRIGHT NOTICE
# Copyright (c) 1990-1996 Open Software Foundation, Inc. 
# ALL RIGHTS RESERVED (DCE). See the file named COPYRIGHT.DCE in the 
# src directory for the full copyright text. 
# 
# 
# HISTORY
# $Log: EDEADLK,v $
# Revision 1.1.2.2  1996/12/17  21:08:36  damon
# 	Expanded OSF C O P Y R I G H T   N O T I C E
# 	[1996/12/17  21:05:50  damon]
#
# Revision 1.1.2.1  1996/11/27  19:30:03  weir
# 	Initial submission
# 	[1996/11/27  19:29:34  weir]
# 
# $EndLog$
# 
-->
<!------------------------------------------------------------------- -->
<MsgEntry>
<Msg><Title>----------</Title>
<MsgMain><Title>EDEADLK</Title>
<!-- -->
<MsgText>
<para>Resource deadlock avoided</para></MsgText>
</MsgMain>
</Msg>
<!-- -->
<MsgInfo>
<MsgLevel>
Warning</MsgLevel>
<MsgOrig>Threads</MsgOrig>
</MsgInfo>
<!-- -->
<MsgExplan>
<Title>Explanation: </Title>
<para>The attempted operation would have resulted in one or more threads
being permanently blocked from executing.  This situation occurs when
a thread must wait on a resource that is held by another thread.  This
error is returned by the following routines:</para>
<ItemizedList>
<ListItem>
<para><Function>pthread_cond_timedwait</Function></para></ListItem>
<ListItem>
<para><Function>pthread_cond_wait</Function></para></ListItem>
<ListItem>
<para><Function>pthread_mutex_lock</Function></para></ListItem>
<ListItem>
<para><Function>pthread_join</Function></para></ListItem>
</ItemizedList>
</MsgExplan>
<!-- -->
<MsgExplan>
<Title>Action: </Title>
<para>To avoid a deadlock situation, you can use the following technique:</para>
<!-- -->
<OrderedList>
<ListItem>
<para>Associate a sequence number with each mutex.</para></ListItem>
<ListItem>
<para>Lock mutexes in sequence</para></ListItem>
<ListItem>
<para>Do not attempt to lock a mutex with a sequence number lower than that
of a mutex the thread already holds.</para></ListItem>
</OrderedList>
<!-- -->
<para>In addition, if a thread needs to lock the same mutex more than once
before unlocking it, specify a recursive mutex in your call to
<Function>pthread_mutexattr_setkind_np()</Function>.</para></MsgExplan>
</MsgEntry>
<!------------------------------------------------------------------- -->
