# @OSF_COPYRIGHT@
# 
# 
# HISTORY
# $Log: README,v $
# Revision 1.1.2.6  1996/12/05  19:34:31  weir
# 	Small correction
# 	[1996/12/05  19:34:11  weir]
#
# Revision 1.1.2.5  1996/12/05  19:29:06  weir
# 	Minor corrections
# 	[1996/12/05  19:28:44  weir]
# 
# Revision 1.1.2.4  1996/12/05  19:13:22  weir
# 	Further DCE 1.2.2 updates
# 	[1996/12/05  19:12:56  weir]
# 
# Revision 1.1.2.3  1996/12/04  22:10:48  weir
# 	Additional corrections and updates
# 	[1996/12/04  22:10:31  weir]
# 
# Revision 1.1.2.2  1996/11/27  22:11:52  weir
# 	First SGML rewrite
# 	[1996/11/27  22:11:36  weir]
# 
# Revision 1.1.2.1  1996/11/27  20:22:54  weir
# 	Initial submission (needs rewriting)
# 	[1996/11/27  20:22:37  weir]
# 
# $EndLog$
# 
# 
# 
# COPYRIGHT NOTICE
# Copyright (c) 1990, 1991, 1992, 1993, 1994 Open Software Foundation, Inc.
# ALL RIGHTS RESERVED (DCE).  See the file named COPYRIGHT.DCE for
# the full copyright text.
# 
# 
# OLD HISTORY:
# 
# Revision 1.1.4.4  1996/03/18  19:16:38  weir
# 	Update for DFA
# 	[1996/03/18  19:16:20  weir]
# 
# Revision 1.1.4.3  1995/12/28  19:00:09  weir
# 	First update for 1.2
# 	[1995/12/28  18:59:48  weir]
# 
# Revision 1.1.4.2  1995/09/01  20:06:19  weir
# 	Some corrections of my corrections
# 	[1995/09/01  20:06:00  weir]
# 
# Revision 1.1.4.1  1995/09/01  19:59:09  weir
# 	A few corrections
# 	[1995/09/01  19:58:33  weir]
# 
# Revision 1.1.2.7  1994/10/21  19:19:58  steto
# 	{edt, R1.1, Made final edits.}
# 	[1994/10/21  19:19:32  steto]
# 
# Revision 1.1.2.6  1994/10/19  22:41:55  steto
# 	{edt, CR9951, R1.1, Updated for location of sec.sams in the DCE unintegrated code tree.}
# 	[1994/10/19  22:41:36  steto]
# 
# Revision 1.1.2.5  1994/10/06  17:40:19  steto
# 	{enh, CR9951, R1.1, Clarified the instructions more.}
# 	[1994/10/06  17:39:59  steto]
# 
# Revision 1.1.2.4  1994/09/29  20:38:48  steto
# 	{enh, CR9951, R1.1, Edited for GA.}
# 	[1994/09/29  20:38:30  steto]
# 
# Revision 1.1.2.3  1994/06/13  16:15:43  devobj
# 	cr10872 - fix copyright
# 	[1994/06/13  16:09:54  devobj]
# 
# Revision 1.1.2.2  1994/06/07  13:12:06  digan
# 	{enh, CR9951, R1.1}
# 	Added information about /source directory and compiling instructions.
# 	[1994/06/07  13:11:29  digan]
# 
# Revision 1.1.2.1  1994/05/06  18:45:26  digan
# 	Entered list of subdirectories for Beta release
# 	[1994/05/04  12:48:45  digan]
# 
# 	Corrected comment leader
# 	[1994/05/03  17:13:29  digan]
# 
# 	{enh, 9951, R1.1}
# 	First version Initial Creation of file.
# 	[1994/05/03  16:44:18  digan]
# 
# 
# 
# 
# 
==============================================================================
------------------------------------------------------------------------------
---------------------------------77 cols--------------------------------------

Directory: <dce-root-dir>/doc/dcedoc/src/dce_books_sgml/prob_gd


This directory contains the source files and output files for the OSF DCE
Problem Determination Guide. It also contains files which you must process
specially for inclusion in the document, and the tools required to perform
this processing.


Files and Subdirectories:


prob_gd.sgml            Top-level book source file; defines
                        structure and contents of book.

prob_gd_src/
  appA_num.sgml         Concordance of messages by message number.
  appB_text.sgml        Concordance of messages by message text.
  copyright.sgm         Copyright and other information for book.
  intro.sgml            Overview of book.
  messages.sgml         Messages for the DCE components.
  preface.sgm           Preface of book.
  title.sgm             Title of book.


bin/
  makeidx               Script for creating the index for
                        the messages for all the DCE components.
  idl_msg_cvtr          perl script that formats the IDL messages.


additional/
  dfa/
    dfa.sams            The DFA sams file, hand-composed.
    <...>               Separate files for each SGML-converted DFA
                        message.

  idx/
    dceptrmsg.idx       pthreads index entries.
    dcexdsmsg.idx       XDS index entries.


  idl/
    nidlmsg.h           Header file needed by IDL message converter.
    nidlmsg.m           Source file for IDL messages.
    idl.sams            produced from the above two files by idl_msg_cvtr.

  pthreads/             pthreads messages without numbers or symbolic names.

  xds/                  XDS/XOM messages.


The following instructions outline how to "compile" the Problem Determination
Guide body and its two indexes (concordances), which are built as appendixes.

==============================================================================
------------------------------------------------------------------------------
A.  GENERATING THE PDG BODY
===========================

------------------------------------------------------------------------------
1. Most of the sams files for the DCE components whose messages are
   included in the document are provided in subdirectories of the
   
       /opt/dce/build/dce1.2.2/src

   directory. Some are located elsewhere. You must copy all of the required
   files to a directory in a convenient location for processing.

   The filenames for each sams file begins with a three-letter prefix and ends
   with the extension .sams, as in the following examples:
  
       gds.sams
       dhd.sams
       rpc.sams
       dcd.sams
       csr.sams

   ...and so on.

   The pathnames of the sams files in the DCE 1.2.2 code tree are as follows:

        /project/dce/build/dce1.2.2/src/dce/utils/svc/svc.sams
        /project/dce/build/dce1.2.2/src/dce/utils/dcecf/cfg.sams
        /project/dce/build/dce1.2.2/src/dce/utils/misc/lib.sams
        /project/dce/build/dce1.2.2/src/admin/dcecp/dcp.sams
        /project/dce/build/dce1.2.2/src/admin/dced/idl/dhd.sams
        /project/dce/build/dce1.2.2/src/admin/tcl_dce/tcl.sams
        /project/dce/build/dce1.2.2/src/directory/cds/includes/cds.sams
        /project/dce/build/dce1.2.2/src/directory/gds/sams/gds.sams
        /project/dce/build/dce1.2.2/src/rpc/idl/uuidgen/uid.sams
        /project/dce/build/dce1.2.2/src/rpc/csrc/csr.sams
        /project/dce/build/dce1.2.2/src/rpc/sys_idl/rpc.sams
        /project/dce/build/dce1.2.2/src/security/audit/libaudit/aud.sams
        /project/dce/build/dce1.2.2/src/security/h/sad.sams
        /project/dce/build/dce1.2.2/src/security/h/psm.sams
        /project/dce/build/dce1.2.2/src/security/idl/sec.sams
        /project/dce/build/dce1.2.2/src/security/gssapi/gss.sams
        /project/dce/build/dce1.2.2/src/security/pkc/h/pkc.sams
        /project/dce/build/dce1.2.2/src/security/pkc/pkss/server/pks.sams
        /project/dce/build/dce1.2.2/src/threads/thd.sams
        /project/dce/build/dce1.2.2/src/time/common/dts.sams
        /project/dce/build/dce1.2.2/src/file/bosserver/bss.sams
        /project/dce/build/dce1.2.2/src/file/flserver/lsv.sams
        /project/dce/build/dce1.2.2/src/file/gateway/dfsgwd/gwy.sams
        /project/dce/build/dce1.2.2/src/file/afsd/dsd.sams
        /project/dce/build/dce1.2.2/src/file/bak/bcm.sams
        /project/dce/build/dce1.2.2/src/file/episode/salvage/slv.sams
        /project/dce/build/dce1.2.2/src/file/fsprobe/fsp.sams
        /project/dce/build/dce1.2.2/src/file/ftserver/tsv.sams
        /project/dce/build/dce1.2.2/src/file/ftutil/ftl.sams
        /project/dce/build/dce1.2.2/src/file/gtx/gtx.sams
        /project/dce/build/dce1.2.2/src/file/ncscompat/ncs.sams
        /project/dce/build/dce1.2.2/src/file/pxd/fxd.sams
        /project/dce/build/dce1.2.2/src/file/rep/rps.sams
        /project/dce/build/dce1.2.2/src/file/scout/scm.sams
        /project/dce/build/dce1.2.2/src/file/tools/cmd/cmc.sams
        /project/dce/build/dce1.2.2/src/file/update/udt.sams
        /project/dce/build/dce1.2.2/src/file/userInt/bos/bos.sams
        /project/dce/build/dce1.2.2/src/file/userInt/cm/cmu.sams
        /project/dce/build/dce1.2.2/src/file/userInt/fts/fti.sams
        /project/dce/build/dce1.2.2/src/file/xaggr/xag.sams
        /project/dce/build/dce1.2.2/src/file/dfsbind/dsb.sams

   A few other hand-created sams format files are provided in subdirectories
   of the prob_gd book directory. You will be instructed where to find these
   files when you need them.

------------------------------------------------------------------------------
2. Create another directory to collect the output files that the sams tool
   will generate when it is run on the sams source files. A subdirectory of
   the one that you created in Step 1 will do.

------------------------------------------------------------------------------
3. Make sure you have the latest version of the sams tool. This tool is
   located in the DCE 1.2.2 code tree in:

       /project/dce/build/dce1.2.2/tools/<platform>/bin/sams

   If you add the following line to your .cshrc file, you will always have a
   pointer to the tool's location: 

       alias sams /project/dce/build/dce1.2.2/tools/<platform>/bin/sams
                                                     ^^^^^^^^
   Be sure you pick up the right version of the tool for your machine type.

------------------------------------------------------------------------------
4. The messages for the Interface Definition Language (IDL) component of DCE
   require special processing for conversion into the sams format. You must
   run the idl_msg_cvtr tool on the IDL message source files (nidlmsg.m and
   nidlmsg.h) to create the sams format file (idl.sams). The IDL message
   source files and converter tool are located in the DCE 1.2.2 code tree at:

       /project/dce/build/dce1.2.2/src/rpc/idl/idl_compiler/nidlmsg.m

       /project/dce/build/dce1.2.2/src/rpc/idl/idl_compiler/nidlmsg.h

   Copies of these files are located in the doc tree at:

       /project/dce/build/dcedoc1.2.2/src/dce_books_sgml/prob_gd/additional/idl

   (Note that whenever the code tree versions change, the doc tree copies
    must be replaced.)

   Instructions for the conversion are as follows:

   a.  Change to the 

           /project/dce/build/dcedoc1.2.2/src/dce_books_sgml/prob_gd/additional/idl

       directory and run the IDL message converter (../../bin/idl_msg_cvtr) on the
       nidlmsg.m and nidlmsg.h files:

           idl_msg_cvtr -m nidlmsg.m -h nidlmsg.h > idl.sams

   b.  Add the idl.sams file to the directory holding the sams files
       copied from the DCE install tree.

------------------------------------------------------------------------------
5. WARNING: You will need quite a bit of free disk space for this next step;
            to be precise, <nnnnnn>. A separate file will be generated during
            this step for each and every individual message.


   Locate yourself in the directory holding the sams files and run the
   sams tool against each sams file as follows: 

       sams -d <directory_name>  -m -op <sams_filename>

   where directory_name is the name of the directory where the sams output
   files will be placed, and sams_filename is the name of the sams source
   file on which the sams tool should operate. For example:

       sams  -d ~xyz/pdg -m  -op  cfg.sams

   In this example, all files will go into the directory named pdg and
   the first sams file will be cfg.sams.

------------------------------------------------------------------------------

NOTE: Theoretically, the next thing you're supposed to do is run sams over
      the hand-composed dfa.sams file (this file is hand-composed because
      the DFA component doesn't use the .sams file functionality; instead,
      the dfa.sams file was put together from a file of all the DFA messages,
      which were gathered together and sent to us by Hitachi). However, if
      the DFA messages have not changed since the previous version of DCE,
      it will save a lot of labor to simply re-use the final converted SGML
      versions of these messages from the previous release. This is because
      the dfa.sams messages contain a large number of .tS/.tE lists, which
      sams (as of DCE 1.2.2) does not convert into SGML lists, and which
      consequently you will have to hand-convert if you re-run the sams step
      for dfa.sams. The converted DFA messages can be found in

          prob_gd/additional/dfa/*

      , and if you wish to re-use them, you should simply copy them into
      the directory in which you are doing your sams output processing,
      for example:

          cp prob_gd/additional/dfa/[A-Z]*  ~xyz/pdg

      NOTE THE FORM OF THE COPY. The additional/dfa directory also contains
      the dfa.sams file itself, which you do NOT want to copy; you only want
      to copy the files whose names begin with uppercase characters.

      If you re-use the converted DFA sams output as described above, you
      should skip the entirety of Step "5A." immediately following.


5A. Process the dfa.sams file in prob_gd/sources/dfa/dfa.sams:

    a. Run sams over the file, in a separate output directory.

    b. Edit the output files, replacing the hexadecimal number in the
       <Msg><Title> line (e.g.:

           <Msg><Title>0x10323068</Title>
                       ^^^^^^^^^^
       ) with a string dashes.

       The hex codes are meaningless for DFA in DCE 1.2.2, since the
       actual error messaging is not done through the DCE serviceability
       interface and no sams file is compiled for the code; the sams file
       was created solely to make the formatting of the DFA Problem Determ-
       ination Guide easier, and to make sure the messages got in that
       book's index. The number of dashes in the string is greater than
       that of the similarly-edited Threads items, thus ensuring (we hope)
       that the latter will precede the former in the sorted book output.

    c. Convert all instances of text surrounded by ".tS/.tE" into SGML
       <ItemizedList>s. The .tS/.tE SML macro basically defines a free-
       format area that allows the writer to compose a list according to
       whatever arrangement he wishes; it is almost always possible to
       transform this into a simple itemized (i.e., bulleted) list.

    d. Convert all instances of SML font markup ("\*L...\*O", "\*V...\*O",
       etc.--see Step 9 below) into an SGML equivalent. The easiest thing
       is to change "\*L...\*O" to "<Literal>...</Literal>", "\*V...\*O" to
       "<Emphasis>...</Emphasis>", and delete any "\*C...\*O" markup.

    e. Copy the edited DFA messages into the main sams output directory
       written to in step 5 above.

    f. Replace the previous-version converted DFA SGML files in

           prob_gd/additional/dfa

       with the versions you have just finished creating, and submit them
       into the tree.

------------------------------------------------------------------------------
6. The messages that DCE provides for its pthreads and XDS/XOM components
   cannot be processed with the sams tool. You will find the already-
   formatted message files in the

       /project/dce/build/dcedoc1.2.2/src/dce_books_sgml/prob_gd/additional/pthreads

   and

       /project/dce/build/dcedoc1.2.2/src/dce_books_sgml/prob_gd/additional/xds

   subdirectories of the doc tree (NOTE that ONLY the files beginning with
   "E" are to be copied in this step from the pthreads directory!). Copy the
   files in these subdirectories to the directory where you placed the other
   SGML output files.

   For example:

       cp .../additional/pthreads/E*  ~xyz/pdg
       cp .../additional/xds/*  ~xyz/pdg

------------------------------------------------------------------------------
7. Once all the sams files have been added to your collection directory,
   locate yourself in this directory and run the following command:

       ls | sort -f -d | xargs cat > <output_filename>

   where output_filename is the name you want to give the "compiled" message
   file.

   For example:

       ls | sort -f -d | xargs cat > pdg_compiled

   The "compiled" message file is actually one large file of messages sorted
   by filename. (Note that the filenames are the symbolic names of the
   messages.)

------------------------------------------------------------------------------
8. Next, there are six pthreads messages (contained in the file

           additional/pthreads/pthreads_add

   ) that must be included in the document by hand. These messages require
   special handling because they do not have a symbolic name and, therefore,
   they cause the sort operation in Step 7 to fail. They should be added to
   the beginning of the compiled message file. The pthreads_add file can be
   found at:

       /project/dce/build/dcedoc1.2.2/src/dce_books_sgml/prob_gd/additional/pthreads/pthreads_add


------------------------------------------------------------------------------
9. Because sams (as of DCE 1.2.2) does not convert into SGML all of the SML
   markup in the .sams files, you will now have to perform some manual
   fixing-up of the converted file. Basically, there are two tasks:

       a. Convert all SML font commands (such as "\*L...\*O", "\*V...\*O",
          and so on) into the (more or less) appropriate SGML markup. In
          general we convert all "\*L/\*O"s into <Literal>/</Literal>s, all
          "\*V/\*O"s into <Emphasis>/</Emphasis>s, and we simply remove any
          instances of "\*C/\*O".

       b. Convert all simple lists (surrounded by .tS/.tE macros in the
          source) into <ItemizedList>s.

   Most of the instances of (b.) occur in the DFA messages, and if you can
   re-use the DFA files (as described above in Step 5A) from the previous
   version, this part will become very easy. (a.) sounds easy, but because of
   various instances of nested font directives in the source, you will find
   that no automated method of conversion will be completely successful. In-
   stead, you will probably have to do an automated conversion, then try
   loading the result into Adept to catch the context errors that result
   from the mis-converted unbalanced tagging.

   Note also that the pdg_compiled file that you get at the end of Step 7
   will be huge, and you may well find it desirable (if not necessary) to
   split it up into more manageable pieces. 


------------------------------------------------------------------------------
10. Finally, you need to add some SGML markup to the compiled message file:

   a. Add the following line at the beginning of the file:

          <MsgSet>

   b. Add

          </MsgSet>

      as the last line in the file.


==============================================================================
------------------------------------------------------------------------------
B.  GENERATING THE TWO "INDEXES"
================================

To generate the indexes (actually, they're concordances) for the two appen-
dixes of the PDG, you need to run the sams tool on the sams files for the DCE
components again.

------------------------------------------------------------------------------
1. First, create a directory to hold the index (.idx) files that the sams tool
   will create. A subdirectory of the one that contains the sams source
   files will do.

------------------------------------------------------------------------------
NOTE: Make sure before you do this next step that there is an up-to-date
      dfa.sams file in the directory from which you generate the indexes from
      the other sams files. Note that for the Index step, you process the
      dfa.sams file along with all the other sams files, not separately, as
      in A 5A. above. Note also that you will need the dfa.sams file for this
      step, regardless of whether you did or did not use it in Step 5A.


2. Locate yourself in the directory containing the sams source files and run
   the sams tool against the files. The command is as follows:

       sams -d <directory_name> -sn -ox <sams_filename>

   where directory_name is the name of the collection directory created in
   Step 1, and sams_filename is the name of each sams file.

   For example:

       sams  -d ~xyz/idx  -sn  -ox  cds.sams

------------------------------------------------------------------------------
3. As is the case for the pthreads and XDS/XOM message files, the pthreads
   and XDS/XOM index files cannot be generated by the sams tool. DCE provides
   the hand-created files (dcegdsmsg.idx and dcethrmsg.idx) in the doc tree in
   the

       /project/dce/build/dcedoc1.2.2/src/dce_books_sgml/prob_gd/additional/idx

   directory. Copy these files to the directory that holds the .idx files for
   the rest of the DCE components.

   The

       /project/dce/build/dcedoc1.2.2/src/dce_books_sgml/prob_gd/additional/idx

   directory also contains the makeidx script, which generates the two index
   files. Copy this script over to your idx collection directory too.

   The contents of the idx directory should now contain an output file for
   each DCE component and look similar to the following: 

       dcecdsmsg.idx   dcedcpmsg.idx   dcegdsmsg.idx   dcesvcmsg.idx
       dcecfgmsg.idx   dcedhdmsg.idx   dcelibmsg.idx   dceuidmsg.idx
       dcecsrmsg.idx   dcedtsmsg.idx   dcerpcmsg.idx   makeidx    

------------------------------------------------------------------------------
4. Run the makeidx script on the .idx files to create the SGML format files
   for the two indexes. To do this, simply enter the following command at the
   system prompt:

       makeidx

   FYI, the contents of the script are as follows:

==============================================================================
------------------------------------------------------------------------------
#!/bin/sh
# 
# makeidx
# We assume this script is run in the directory where all
# the individual SAMS files have been processed to get the
# separate .idx files, as in
#       sams -sn -ox XXX.sams
#       sams -sn -ox YYY.sams
#       ... and so on.
# This creates dceXXXmsg.idx, dceYYYmsg.idx, etc., sorted by
# numeric value.

# Merge all the idx files into one master sorted file.
cat dce*msg.idx | sed -e 's/ *@ */@/g' -e 's/\\n//' >full.idx

# Create idx-part-1, which has two columns in numeric order:
#       0x10d0a0a4      CDSCP_ACC_DENIED
sort -t@ -n +2 -d full.idx | awk -F@ '{print $3, "@", $2 }' >idx-part-1

# Sort alphabetically and create idx-part-2, which looks like:
#       Acess Denied    CDSCP_ACC_DENIED
cat <<EOF >idx-part-2
<!-- -->
<informaltable>
<!------------------------------------------------------------- -->
<tgroup cols="2" colsep="0" rowsep="0">
<!------------------------------------------------------------- -->
<colspec colwidth="3in">
<colspec colwidth="3in">
<!-- -->
<thead>
<row>
<entry align="left" valign="top">
Message Text</entry>
<entry align="left" valign="top">
Symbolic Name</entry>
</row>
</thead>
<tbody>
<!------------------------------------------------------------- -->
<!-- -->
EOF

sort -t@ -f -d +3 full.idx | awk -F@ '{
    if ($2 != "" && $4 != "") {
	printf("<row><entry>%s</entry><entry>%s</entry></row>", $4, $2);
    }
}' >>idx-part-2

cat <<EOF >>idx-part-2
<!-- -->
<!------------------------------------------------------------- -->
</tbody>
</tgroup>
</informaltable>
<!------------------------------------------------------------- -->
EOF

# We're done.
exit
------------------------------------------------------------------------------
==============================================================================

   The makeidx script generates the following output files, whose contents
   will be placed in the two PDG appendixes: 

       idx-part-1        Contains the book's numeric index
       idx-part-2        Contains the book's alphabetic textual index

------------------------------------------------------------------------------
4A. Because (as explained above) the DFA messages' sams-generated hexadecimal
    error codes are meaningless in DCE 1.2.2, the DFA entries should be
    removed from idx-part-1, which is the index of error codes. This can
    easily be done by loading the file into an editor, and deleting the block
    of KDDS messages. The text of idx-part-2 should be left as it is; it
    consists of the index according to message text and symbols, without
    reference to the actual codes.

------------------------------------------------------------------------------
==============================================================================
C.  REPLACING THE PDG'S SGML FILES AND REBUILDING THE BOOK
==========================================================

Once the SGML files for the PDG body and appendixes are created, you need to
copy the contents to the PDG source files in the book directory, then build
the book. The steps to do this are as follows:

------------------------------------------------------------------------------
1.  Move to the

        <dce-root-dir>/doc/dcedoc/src/dce_books/prob_gd/prob_gd_src

    directory in the doc tree and checkout (bco) the

        messages.sgml
        appA_num.sgml
        appB_text.sgml

    files.

------------------------------------------------------------------------------
2.  Delete the entire contents of the

        messages.sgml

    file between the <MsgSet> and </MsgSet> tags and replace them with the
    contents of the compiled message file.

------------------------------------------------------------------------------
3.  Replace the contents of the tables in the

        appA_num.sgml

    and

        appB.text.sgml

    files with the contents of the

        idx-part-1

    and

        idx-part-2

    files. (There are some junk characters (@) at the top of the

        idx-part-1

    file; delete these characters.)

    Each of the appendix source files has an opening paragraph:

------------------------------------------------------------------------------
3A. The opening paragraph and table head in the

        appA_num.sgml

    file appears as follows:


        <Appendix>
        <Title>Message Numbers and Symbolic Names</Title>
        <!-- -->
        <!-- -->
        <!-- -->
        <para>
        The table in this appendix provides a cross-reference between the
        number of a message and its symbolic name. If you have only the
        message number to go by, look up that number in the
        following listing to find the symbolic name. You can then look at
        the table in Appendix B that contains a cross-reference of message texts
        and symbolic names to find detailed information about the message.
        </para>
        <!-- -->
        <!-- -->
        <!-- -->
        <informaltable>
        <!------------------------------------------------------------- -->
        <tgroup cols="2" colsep="0" rowsep="0">
        <!------------------------------------------------------------- -->
        <colspec colwidth="1.5in">
        <colspec colwidth="4in">
        <!-- -->
        <thead>
        <row>
        <entry align="left" valign="top">
        Message Number</entry>
        <entry align="left" valign="top">
        Symbolic Name</entry>
        </row>
        </thead>
        <tbody>


    It is immediately after the last lines illustrated above that you should
    insert the idx-part-1 file. Make sure to put the following tags:

        </tbody>
        </tgroup>
        </informaltable>

    at the end of the table if they are not already there, and make sure there
    is an </Appendix> tag at the end of the file.

    You will see that the contents of idx-part-1 are in fact nothing but lines
    of the following form:

        0x10323038 @ aud_s_free_encoding_service_handle
        0x10323039 @ aud_s_unknown_principal_rc
        0x1032303a @ aud_s_unknown_principal

    In fact, it is up to you to transform these lines into the following
    form:

        <!-- -->
        <row>
        <entry>0x10323038</entry>
        <entry>aud_s_free_encoding_service_handle</entry>
        </row>
        <!-- -->
        <row>
        <entry>0x10323039</entry>
        <entry>aud_s_unknown_principal_rc</entry>
        </row>
        <!-- -->
        <row>
        <entry>0x1032303a</entry>
        <entry>aud_s_unknown_principal</entry>
        </row>
        <!-- -->

    However, you should not find it very difficult to accomplish this using
    emacs macros, or whatever is your favorite method.

------------------------------------------------------------------------------
3B. For the

        appB.text.sgml

    file, the procedure is a little different. The

        idx-part-2

    file contains a fully formatted table, so you only need to copy this
    table over to the appB.text.sgml file below the opening paragraph. The
    opening paragraph of the file looks like this:

        <Appendix RevisionFlag="changed">
        <Title>Message Text and Symbolic Names</Title>
        <para>
        The table in this appendix provides a cross-reference between the text of
        a message and its symbolic name. If you have only the text to go by, look
        up that text in the following listing to find the symbolic name. You can
        then look in Appendix A, which contains a cross-reference of message numbers
        and symbolic names, to find the symbolic name.
        </para>


------------------------------------------------------------------------------
4.  Check all the files back in (bci), submit them to the RCS tree (bsubmit),
    and build the PDG (Adept or pubformat) to have your updated version of the
    document.


    NOTE: You should test the correctness of the SGML code by loading the
          entire book into Adept before checking the files back into the
          RCS tree.




------------------------------------------------------------------------------
==============================================================================
