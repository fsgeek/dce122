...\" DCE-RFC 31.0
...\"
...\" FORMATTING INSTRUCTIONS for this RFC:
...\"       nroff -Tlpr rfcM.m.roff > rfcM.m.txt
...\"
...\" =========================================================================
...\" This template first sets a bunch of *roff options (authors/readers
...\" don't usually have to know about these).
...\" Then it defines some strings and macros, many of which deal with
...\" things that differ between nroff & troff (some of these may not be
...\" perfect, but they're better than nothing -- to do a really good
...\" job would require a real semantic markup language.
...\" Convention: "Begin/End" for strings, "Start/Finish" for macros.
...\" Strings:
...\"       \*(f!        - Footnote string (replaces \*F).
...\"       \*(hB, \*(hE - Page header/footer font (internal use).
...\"       \*(iB, \*(iE - Doc header font (internal use).
...\"       \*(qB, \*(qE - Quotations.
...\"       \*(eB, \*(eE - Emphasis in primary font.
...\"       \*(lB, \*(lE - Literal font.
...\"       \*(mB, \*(mE - Second literal font.
...\"       \*(fB, \*(fE - Emphasis in literal font.
...\" Macros:
...\"       .aH      - Appendix header macro (uses number register \na).
...\"       .aL      - Automatic list macro (replaces .AL; uses num reg \ng).
...\"       .tS, .tF - Title start/finish (internal use).
...\"       .cS, .cF - Displays (no-fill) without indentation.
...\"       .dS, .dF - Displays (no-fill) with indentation.
...\"       .iS, .iF - Indented (fill) text.
...\" -------------------------------------------------------------------------
...\" First, set up some number registers here (instead of on command line),
...\" and include the "mm" macro package here (instead of on command line).
...\" -------------------------------------------------------------------------
.if n .nr L 66 \" Nroff page length = 66 lines.
.if t .nr L 11i \" Troff page length = 11 inches.
.if n .nr W 72 \" Nroff page width = 72 columns.
.if t .nr W 6.5i \" Troff page width = 6.5 inches.
.if n .nr O 3 \" Nroff page offset = 3 columns.
.if t .nr O 0.75i \" Troff page offset = 0.75 inches.
.nr N 2 \" No header on page 1.
.so /usr/lib/tmac/tmac.m \" Points to "mm" package, in /usr/lib/macros.
...\" -------------------------------------------------------------------------
...\" Next, twiddle the "mm" package to suit our preferred style.
...\" -------------------------------------------------------------------------
...\" Point size and font types.
...\" -------------------------------------------------------------------------
.if n .fp 1 R \" "Regular" font ONLY -- don't use any others in nroff.
.if t \{ .S 10 12 \" Point size = 10, vertical spacing = 12.
...\" Note: Some systems give different names to these fonts.
.fp 1 R \" Times roman.
.fp 2 I \" Times italic.
.fp 3 B \" Times bold.
.fp 4 BI \" Times bold italic.
.fp 5 CW \" Courier.
.fp 6 CI \" Courier oblique.
.fp 7 CB \" Courier bold.
.fp 8 CX \" Courier bold oblique.
.fp 9 H \" Helvetica.
.fp 10 HI \" Helvetica oblique.
.fp 11 HB \" Helvetica bold.
.fp 12 HX \" Helvetica bold oblique.
.fp 13 S \} \" Special symbol font -- normally only called automatically.
...\" -------------------------------------------------------------------------
...\" Headings; page header and footers; titles.
...\" -------------------------------------------------------------------------
.nr Ej 0 \" No eject for first-level headings.
.nr Hs 7 \" Heading space level = blank line after heading (all levels).
.nr Hb 7 \" Heading break level = break after heading (all levels).
.nr Hi 1 \" Post-heading indent = paragraph indent.
.nr Hc 0 \" Heading centering = none.
.if n .ds HF 1 1 1 1 1 1 1 \" Heading fonts = regular (no underlining).
.if t .ds HF 11 11 11 11 11 11 11 \" Heading fonts = Helvetica bold.
.if t .ds HP 0 0 0 0 0 0 0 \" Heading point sizes (= default).
.HM 1 1 1 1 1 1 1 \" Heading mark = arabic (all levels).
.nr Hu 1 \" Unnumbered heading level = 1 (see aH macro, below).
.de HX \" Beginning-of-heading processing.
.in 0 \" Left justify headings.
.ie     \\$2=0 .ds }0\" Null string heading mark for HU.
.el .ie \\$1=1 .ds }0 \\n(H1.\ \&\" Heading marks = dotted sections + 1 space.
.el .ie \\$1=2 .ds }0 \\n(H1.\\n(H2.\ \&
.el .ie \\$1=3 .ds }0 \\n(H1.\\n(H2.\\n(H3.\ \&
.el .ie \\$1=4 .ds }0 \\n(H1.\\n(H2.\\n(H3.\\n(H4.\ \&
.el .ie \\$1=5 .ds }0 \\n(H1.\\n(H2.\\n(H3.\\n(H4.\\n(H5.\ \&
.el .ie \\$1=6 .ds }0 \\n(H1.\\n(H2.\\n(H3.\\n(H4.\\n(H5.\\n(H6.\ \&
.el .if \\$1=7 .ds }0 \\n(H1.\\n(H2.\\n(H3.\\n(H4.\\n(H5.\\n(H6.\\n(H7.\ \&
..
.de HZ \" End-of-heading processing.
.if n .in 3 \" Indent body of doc by 3 columns in nroff.
.if t .in 0 \" Don't indent in troff.
..
.if n .ds hB \&\" Page header/footer font begin in nroff.
.if t .ds hB \f9\" Page header/footer font begin in troff.
.if n .ds hE \&\" Page header/footer font end in nroff.
.if t .ds hE \fP\" Page header/footer font end in troff.
.if n .ds iB \&\" Doc header font begin in nroff.
.if t .ds iB \f(11\" Doc header font begin in troff.
.if n .ds iE \&\" Doc header font end in nroff.
.if t .ds iE \f1\" Doc header font end in troff.
.de tS \" Title start.
.SP 2 \" 2 blank lines.
.ce 99 \" Center (each line of) title.
.if t \{ .ft 11 \" Bold helvetica.
.S +2 D \} \" Bigger point size.
..
.de tF \" Title finish.
.ce \" Turn off centering.
.SP 1 \" 1 blank line.
.if t \{ .ft 1 \" Return to regular font.
.S P P \} \" Return to regular point size.
..
...\" -------------------------------------------------------------------------
...\" Special Appendix heading macro, .aH.
...\" -------------------------------------------------------------------------
.nr a 0 1 \" Appendix number.
.af a A \" Assign format upper-case alpabetic to number register a.
.de aH \" Appendix heading macro.
.if \\na=0 \{ .nr H1 0 \" Reset H1 to 0.
.HM A 1 1 1 1 1 1 \} \" Heading mark = Upper case alphabetic + arabics.
.HU "APPENDIX \\n+a. \\$1"
..
...\" -------------------------------------------------------------------------
...\" Paragraph stuff.
...\" -------------------------------------------------------------------------
.nr Pt 0 \" Paragraph type = left-justified.
.nr Pi 0 \" Paragraph indent = 0.
.nr Ps 1 \" Paragraph spacing = 1 blank space.
...\" -------------------------------------------------------------------------
...\" Special list macro, .aL (replaces .AL, for all levels).
...\" This should be used for almost all lists (including ".LI "\ "").
...\" The only exception is variable lists (.VL, indented by multiples of 6).
...\" -------------------------------------------------------------------------
.de aL
.nr g \\n(:g
...\" In-line lists should be numbered (by hand): (1), (2), (3), ...
.ie     \\ng=0 .LB 6 0 1 3 a \" 1st level: (a), (b), (c), ...
.el .ie \\ng=1 .LB 6 0 1 3 i \" 2nd level: (i), (ii), (iii), ...
.el .ie \\ng=2 .LB 6 0 1 4 a \" 3rd level: [a], [b], [c], ...
.el .ie \\ng=3 .LB 6 0 1 4 i \" 4th level: [i], [ii], [iii], ...
.el .ie \\ng=4 .LB 6 0 1 6 a \" 5th level: {a}, {b}, {c}, ...
.el .if \\ng=5 .LB 6 0 1 6 i \" 6th level: {i}, {ii}, {iii}, ...
..
.nr Ls 6 \" Blank lines between all list items, by default (but adjustable).
...\" -------------------------------------------------------------------------
...\" Footnote stuff; special footnote string, \*(f!.
...\" -------------------------------------------------------------------------
.if n .ds f! [\\*F]\" Footnote string (replaces \*F in nroff).
.if t .ds f! \\*F\" Footnote string (same as \*F in troff).
.if n .FD 6 \" Footnotes not hyphenated or indented, label left justified.
.if t .FD 5 \" Footnotes hyphenated, not indented, label left justified.
.nr Fs 1 \" 1 blank line between footnotes.
...\" -------------------------------------------------------------------------
...\" Line adjustment stuff.
...\" -------------------------------------------------------------------------
.if n .nr Hy 0 \" No hyphenation in nroff.
.if t .nr Hy 1 \" Hyphenate in troff.
.if n .SA 0 \" Set adjust: left margin only in nroff.
.if t .SA 1 \" Set adjust: left and right margins in troff.
...\" -------------------------------------------------------------------------
...\" Miscellaneous stuff.
...\" -------------------------------------------------------------------------
.ta \" No tabs by default -- set them up by hand as needed.
.nr Si \n(Ls \" Default indent for .DS display macro = 6 (use in troff only).
...\" -------------------------------------------------------------------------
...\" Displays.
...\" -------------------------------------------------------------------------
.de cS \" Display start: no-fill, literal font, no indentation.
.P
.nf \" No fill mode.
.if t .ft 5 \" Constant width font in troff.
..
...\" Within .cS, ".ne N"'s can be added by hand, but should be minimized.
.de cF \" Display finish.
.if t .ft 1 \" Back to standard font in troff.
.fi \" Fill mode.
.P
..
.de dS \" Display start: no-fill, literal font, with indentation.
.P
.aL \" Use .aL macro for consistent indentation.
.nf \" No fill mode.
.LI "\ " \" List item will no (visible) marker.
.if t .ft 5 \" Constant width font in troff.
..
...\" Within .dS, ".ne N"'s can be added by hand, but should be minimized.
.de dF \" Display finish.
.if t .ft 1 \" Back to standard font in troff.
.fi \" Fill mode.
.LE
.P
..
.de iS \" Indent start: fill, regular font, with indentation.
.P
.aL
.LI "\ "
..
.de iF \" Indent finish.
.LE
.P
..
...\" -------------------------------------------------------------------------
...\" Quotation marks and font toggles.
...\" -------------------------------------------------------------------------
.if n .ds qB \&"\" Quotation begin in nroff.
.if t .ds qB ``\" Quotation begin in troff.
.if n .ds qE \&"\" Quotation end in nroff.
.if t .ds qE ''\" Quotation end in troff.
.if n .ds eB \&\" Emphasis primary font begin in nroff.
.if t .ds eB \f2\" Emphasis primary font begin in troff.
.if n .ds eE \&\" Emphasis primary font end in nroff.
.if t .ds eE \f1\" Emphasis primary font end in troff.
.if n .ds lB \&"\" Literal font begin in nroff.
.if t .ds lB \f5\" Literal font begin in troff.
.if n .ds lE \&"\" Literal font end in nroff.
.if t .ds lE \f1\" Literal font end in troff.
.if n .ds mB `\" Second literal font begin in nroff.
.if t .ds mB \f5\" Second literal font begin in troff.
.if n .ds mE '\" Second literal font end in nroff.
.if t .ds mE \f1\" Second literal font end in troff.
.if n .ds fB \&\" Emphasis literal font begin in nroff.
.if t .ds fB \f6\" Emphasis literal font begin in troff.
.if n .ds fE \&\" Emphasis literal font end in nroff.
.if t .ds fE \f5\" Emphasis literal font end in troff.
...\" =========================================================================
...\" Finally, it's time to start writing the document!
...\" The DCE-RFC author modifies the following header/footer info.
...\" (The major/minor number is assigned by the DCE-RFC Editor.)
...\" =========================================================================
.ND "December 1992" \" Date must be hard-coded.
.PH "$\*(hBDCE-RFC 31.0$Threadless DCE Clients$\\\\*(DT\*(hE$"
.PF "$\*(hBKaruzis$DRAFT #2$Page \\\\n%\*(hE$" \" Draft version.
.PF "$\*(hBKaruzis$$Page \\\\n%\*(hE$" \" Final version.
...\"
...\" Following are the first printed lines (header info) of the document:
...\"
\&\" Force top-of-first-page trap to position the following info correctly.
.tl $\*(iBOSF DCE SIG$$M. Karuzis (HP)\*(iE$
.tl $\*(iBRequest For Comments: 31.0$$\*(DT\*(iE$
.tS \" Title, in all capitals (can span multiple lines):
SUPPORTING THREADLESS DCE CLIENTS
.tF
...\" =========================================================================
...\" Now, the actual body of the document!!
...\" Heading capitalization style:
...\"     1st level: CAPITALIZE ALL WORDS
...\"     2nd level: Capitalize Initial Letters of All (Significant) Words
...\"     3rd-7th level: Capitalize first letter of first word only
...\" =========================================================================
.P
.H 1 "INTRODUCTION" \" Always start with an introduction section.
.P
A threadless implementation of the DCE library is one which
does not introduce additional threads into an RPC based
application.  That is, the runtime library is constrained to performing
all call-related processing within the context of the
application thread which initiates a remote call.
.P
The following discussion is limited to supporting the RPC
DG protocol in a threadless environment.  As such, all
references to the 'runtime' should be understood to mean the 'DG
runtime.'  It's likely that running the CN protocol in the
absence of threads, if possible, will require changes
unrelated to those discussed here.
.P
Also, this paper deals only with the prospect of developing
single threaded clients; there is no consideration of, or
impact on, the server side of a remote call.
.P
.H 1 "HOW THE RUNTIME USES THREADS"
.P
The current implementation of the runtime creates 'helper' threads to perform
the following tasks:
.P
.aL
.LI
Waiting for, and reading in, socket data (the listener thread).
.LI
Detecting timeouts, and performing garbage collection (the timer thread).
.LI
Maintaining liveness for applications that use context handles (the INDY
thread).
.LE
.P
.H 2 "The Listener Thread"
.P
The listener thread is responsible for reading data from all open
sockets, determining to which call the data is being sent, and
signalling that call thread that data is available.  The need for a
separate thread to read socket data is a consequence of the fact that
concurrent calls (over the same protocol family) share a single socket.
This implementation choice necessitates the de-multiplexing of incoming
data packets.
.P
.H 2 "The Timer Thread"
.P
The timer thread has two primary responsibilities.  First, it
periodically checks to make sure that calls are making progress (and
will initiate corrective action if they are not).  Second, it is
responsible for keeping track of internal data structures and freeing up
resources that are no longer in use.
.P
.H 2 "The INDY Thread"
.P
Applications which use context handles require that servers be informed
if a connection to a client is lost (for example, if the client exits
prematurely).  This mechanism gives servers an opportunity to clean up
state being maintained on behalf of a client that is no longer active.
The DG protocol implements this facility by periodically sending
keep-alive messages from client to server.  The sending of these
keep-alive messages occurs within a separate thread dedicated to this
task.
.P
.H 1 "ALTERNATIVES TO USING THREADS"
.P
.H 2 "The Listener Thread"
.P
One of the performance enhancements under consideration for DCE 1.1
is the introduction of private client sockets.  Briefly, a call thread
using a private socket is given exclusive access to that socket.  One of
the features of such a scheme is that the call thread need not
be concerned about de-multiplexing data received on the socket.  As
such, the call thread can read the socket directly, circumventing the
need for a listener thread.
.P
Assuming that private client sockets are implemented for DCE 1.1, it
will be a feature of every client that the listener thread will not be
started until the application needs to use a shared socket.  Since the
use of shared sockets will only occur in applications that make
concurrent RPCs (and are therefore already multi-threaded), single
threaded clients will never require the use of the listener thread.
.P
.H 2 "The Timer Thread"
.P
The timer thread awakens periodically and consults a queue of timer
requests to see if any have reached their activation time.  All such
requests are then serviced by calling a routine which was registered
along with the timer request.  This process is called 'running the timer
chain.'
.P
To avoid creating a thread to perform this function, we must find some
other means of ensuring that timer requests are acted upon.  In
addition, it is highly desirable that any new scheme retain much of the
existing timer service structure, on which the runtime relies heavily.
.P
As mentioned above, the timer thread really serves two major functions.
We'll look at them separately to see what the requirements of each are.
.P
.H 3 "Detecting timeouts"
.P
Client call threads register a timer handler for each new call that's started.
The registered routine
is then called periodically to inspect the state of the call, and
determine if there are any timeout conditions that need to be handled.
.P
Rather than having this periodic checking done by the timer thread,
we can arrange for it happen along with the rest of the normal call
thread processing.  This actually works out quite nicely, since the
call thread always know exactly when the next timeout can occur (as
opposed to the timer thread which just checks all active calls
indiscriminately.)
.P
Consider that all timeout conditions are the result of not receiving
some expected network packet (a fack, working, or response packet).
The call blocks trying to read data from the network, and at some
later time the timer thread determines that it's been waiting too long
and takes some corrective action.  A more elegant way to do this would
be for the call to decide how long it is willing to wait for data, and
then to block for only that long; if nothing is received, the call thread
could handle the situation on its own behalf.  Of course, to leverage
off the current implementation, the timeout could be handled by simply
having the call thread run the timer chain (by calling the timer thread's
base routine directly).  Since the call thread will have previously
registered a timer routine, this will result in that routine being run,
and the timeout condition will be handled appropriately.
.P
There are at least three reasonable ways to bound the wait for socket data:
.P
.aL
.LI
Use timer interrupts to abort the recvfrom system call.
.LI
Add an augmented recvfrom() into KRPC.
.LI
Use select().
.LE
.P
Using a timer interrupt is probably not viable since it uses a scarce resource
that might be required by the application.
.P
Implementing an augmented recvfrom(), which takes a timer parameter,
would be ideal for platforms that support KRPC, since it would avoid the
overhead of a call to select() followed by a call to recvfrom().
.P
Using select is the most general solution to the problem, despite its
inefficiency.
.P
.H 3 "Garbage collection"
.P
The second major task of the timer thread is to run garbage collectors.
To ensure that this facility still works correctly will require that the
runtime periodically call through the timer chain, perhaps once every
couple of minutes.  To accomplish this, a threadless runtime could keep
a clock stamp indicating the last time that the timer chain was run.  Of
course, there's no guarantee that the runtime will be able to run the
timer chain regularly, but this would only occur if the application went
for a long period of time without using RPC.  In such a case, it's
unlikely that the accumulation of stale data structures would present a
problem.
.P
The best place from which to make the call into the timer chain is in
transceive(), immediately after pushing out the last arguments to a
call, but before beginning to wait for a response.  Doing the timer
processing here will keep it out of the executing call's fast-path.
.P
.H 3 "The dual nature of the timer chain"
.P
It's worth noting that, in a threadless environment, the two uses of the
timer chain are slightly incongruous.  The detection of timeouts is
essentially a synchronous activity, the timer routine gets run at the
time that a timeout is detected.  On the other hand, garbage collection
is essentially an asynchronous activity; it must be done periodically
regardless of whatever else the runtime is doing.
.P
The result is that whenever a timeout is detected, along with running
the call thread's timer routine, the garbage collectors will also get
run.  Likewise, whenever the runtime does garbage collection, any active
call timer routine will (unnecessarily) be run.  This situation is
deemed acceptable based on the following observations:
.P
.aL
.LI
This structure makes sense for a threaded runtime, where the listener
thread does not have enough information to anticipate timeouts, and so
timeouts really are asynchronous.
.LI
Running the garbage collectors when a timeout occurs will not affect
performance (we're already dealing with a timeout).
.LI
Running a call thread's timer routine when we do garbage collection will
not affect performance since it will only happen once every few minutes.
.LE
.P
.H 3 "Other timer thread issues"
.P
.H 4 "The runtime clock"
.P
The runtime keeps its idea of the current time in a global variable.
Call threads use this value to time-stamp various data structures and
activities to aid in detecting timeout conditions.  Since the global
time variable is updated once each time the timer thread is run, it
exhibits a granularity equal to that frequency.  In particular, between
updates, all requests for a time-stamp see the same value.
.P
This implementation choice trades off clock accuracy for a reduction in
system call overhead.  However, without a timer thread it will no longer
be possible to make this tradeoff.  Each request for the current time
will need to be satisfied by consulting the actual system time.  This
will have some impact on performance, although it is anticipated that
the impact will be minor.
.P
.H 4 "Delayed ACKS"
.P
One other function performed by the call thread timer routine is the
sending of delayed acknowledgements.  This is a performance optimization
which relies on the fact that each remote call implicitly acknowledges
all preceding calls.  If a client is making back to back calls, we can
allow the calls to acknowledge each other, and avoid sending out a
specific acknowledgement for each one.  The runtime effects this
behavior by delaying the sending of acknowledgements, in the
anticipation that a new call will soon be started.  After a period of
time, detected by the timer thread, if a new call has not been started,
a delayed acknowledgement will be sent.
.P
There is no way to mimic this behavior in a single threaded environment.
As such, we are forced to forego the optimization, and send out an
acknowledgement for every completed call.
.P
.H 2 "The INDY Thread"
.P
Since the runtime is not guaranteed that it will be called with any
regularity in this environment, it is not possible for it to guarantee
that it can regularly send keep-alive messages to a server.  Under these
conditions it does not seem possible to provide support for context
handles.
.P
However, it may be possible to provide this service by requiring that
the runtime be allowed to set up a timer interrupt.  This may be an
acceptable compromise for applications that want to be single-threaded
but require the use of context handles
.P
.H 1 "USER VISIBLE EFFECTS OF RUNNING SINGLE THREADED"
.P
.H 2 "Simplified Debugging Environment"
.P
One significant benefit to developers of single threaded clients will be
in the area of debugging.  In the absence of thread-aware debuggers,
debugging a multi-threaded program can be a frustrating experience.  And
even with a reasonable debugger, application developers who are not
experienced with threading can find themselves in a foreign environment,
developing even the simplest application.
.P
This situation can be especially frustrating for a developer whose
application becomes threaded as a result of calling into a third party
library that uses RPC.
.P
.H 2 "Memory and Disk Requirements"
.P
Whether or not there will be any difference in memory or disk usage
depends on whether we support two DCE libraries.  This proposition is
discussed below in the section titled 'DCE Lite.'
.P
.H 2 "Performance"
.P
It is not expected that a single threaded client would see any
performance increase over a similar application linked with a threaded
DCE library.  In fact, it is likely that performance will decrease
slightly.  While it is true that a threadless client will not carry the
overhead of a timer thread running several times a second, this will be
more than compensated for by the need to call select() before reading
each network packet.
.P
.H 1 "DCE LITE?"
.P
The discussion thus far has assumed that the existing RPC runtime would
be modified to provide both threadless and threaded support.  In a
client application, the runtime would refrain from creating auxiliary
threads unless and until they were needed.  Single threaded client
applications would thus remain single threaded.
.P
At the other end of the spectrum, we might consider providing two DCE
libraries, the second providing only the functionality necessary for
writing single threaded client applications.  The motivation here would
be to reduce the disk/memory requirements of DCE-based applications.
.P
For example, in such an environment most of the CMA library code could
be stubbed out.  Besides the obvious fact that a threadless client
wouldn't need any of the code which directly supports threading, it
could also do without the code that supports mutual exclusion and thread
synchronization.  Bypassing the use of mutex locks and condition
variables would presumably also provide a modest increase in
performance.
.P
Also, the DG code has been fairly well partitioned between modules that
support clients only, servers only, or both.  Removing server support
would reduce the DG code size by approximately 40%.
.P
The question here is whether there are platforms that would
require/benefit from such a partitioning of the DCE functionality.  The
answer is probably 'no' for any platform which supports dynamic/shared
libraries.  In such an environment, the only disk savings will be the
difference in size between the full-DCE and DCE-lite libraries; this
difference might only be 20-30%; and to benefit from this small decrease
in disk usage the system must give up its ability to run servers or
multi-threaded clients.
.P
...\" =========================================================================
...\" References go here, as an unnumbered heading.
...\" =========================================================================
...\" (none)
...\" =========================================================================
...\" Author's address goes here, as unnumbered heading, at end of doc.
...\" =========================================================================
.ne 2+6
.HU "AUTHOR'S ADDRESS"
.P
.tl $Mark Karuzis$$Internet email: markar@apollo.hp.com$
.tl $Distributed Object Computing Program$$Telephone: +1-508-436-4337$
.tl $Hewlett-Packard Co.$$$
.tl $250 Apollo Drive$$$
.tl $Chelmsford, MA 01824$$$
.tl $USA$$$
...\" =========================================================================
...\" Done!
...\" =========================================================================
