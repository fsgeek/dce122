...\" OSF-RFC 96.0
...\"
...\" FORMATTING INSTRUCTIONS for this RFC:
...\"       nroff -Tlpr rfc96.0.roff > rfc96.0.txt
...\"       tbl rfc96.0.roff | troff -Tps | <ps-post-processor> > rfc0.1.ps
...\" (Where "troff" means "device-independent troff", or "ditroff".)
...\"
...\" =========================================================================
...\" This template first sets a bunch of *roff options (authors/readers
...\" don't usually have to know about these).
...\" Then it defines some strings and macros, many of which deal with
...\" things that differ between nroff & troff (some of these may not be
...\" perfect, but they're better than nothing -- to do a really good
...\" job would require a real semantic markup language.
...\" Convention: "Begin/End" for strings, "Start/Finish" for macros.
...\" Strings:
...\"       \*(f!        - Footnote string (replaces \*F).
...\"       \*(hB, \*(hE - Page header/footer font (internal use).
...\"       \*(iB, \*(iE - Doc header font (internal use).
...\"       \*(qB, \*(qE - Quotations.
...\"       \*(eB, \*(eE - Emphasis in primary font.
...\"       \*(lB, \*(lE - Literal font.
...\"       \*(mB, \*(mE - Second literal font.
...\"       \*(fB, \*(fE - Emphasis in literal font.
...\" Macros:
...\"       .aH      - Appendix header macro (uses number register \na).
...\"       .aL      - Automatic list macro (replaces .AL; uses num reg \ng).
...\"       .tS, .tF - Title start/finish (internal use).
...\"       .cS, .cF - Displays (no-fill) without indentation.
...\"       .dS, .dF - Displays (no-fill) with indentation.
...\"       .iS, .iF - Indented (fill) text.
...\" -------------------------------------------------------------------------
...\" First, set up some number registers here (instead of on command line),
...\" and include the "mm" macro package here (instead of on command line).
...\" -------------------------------------------------------------------------
.if n .nr L 66 \" Nroff page length = 66 lines.
.if t .nr L 11i \" Troff page length = 11 inches.
.if n .nr W 72 \" Nroff page width = 72 columns.
.if t .nr W 6.5i \" Troff page width = 6.5 inches.
.if n .nr O 3 \" Nroff page offset = 3 columns.
.if t .nr O 0.75i \" Troff page offset = 0.75 inches.
.nr N 2 \" No header on page 1.
.so /usr/lib/tmac/tmac.m \" Points to "mm" package, in /usr/lib/macros.
...\" -------------------------------------------------------------------------
...\" Next, twiddle the "mm" package to suit our preferred style.
...\" -------------------------------------------------------------------------
...\" Point size and font types.
...\" -------------------------------------------------------------------------
.if n .fp 1 R \" "Regular" font ONLY -- don't use any others in nroff.
.if t \{ .S 10 12 \" Point size = 10, vertical spacing = 12.
...\" Note: Some systems give different names to these fonts.
.fp 1 R \" Times roman.
.fp 2 I \" Times italic.
.fp 3 B \" Times bold.
.fp 4 BI \" Times bold italic.
.fp 5 CW \" Courier.
.fp 6 CI \" Courier oblique.
.fp 7 CB \" Courier bold.
.fp 8 CX \" Courier bold oblique.
.fp 9 H \" Helvetica.
.fp 10 HI \" Helvetica oblique.
.fp 11 HB \" Helvetica bold.
.fp 12 HX \" Helvetica bold oblique.
.fp 13 S \} \" Special symbol font -- normally only called automatically.
...\" -------------------------------------------------------------------------
...\" Headings; page header and footers; titles.
...\" -------------------------------------------------------------------------
.nr Ej 0 \" No eject for first-level headings.
.nr Hs 7 \" Heading space level = blank line after heading (all levels).
.nr Hb 7 \" Heading break level = break after heading (all levels).
.nr Hi 1 \" Post-heading indent = paragraph indent.
.nr Hc 0 \" Heading centering = none.
.if n .ds HF 1 1 1 1 1 1 1 \" Heading fonts = regular (no underlining).
.if t .ds HF 11 11 11 11 11 11 11 \" Heading fonts = Helvetica bold.
.if t .ds HP 0 0 0 0 0 0 0 \" Heading point sizes (= default).
.HM 1 1 1 1 1 1 1 \" Heading mark = arabic (all levels).
.nr Hu 1 \" Unnumbered heading level = 1 (see aH macro, below).
.de HX \" Beginning-of-heading processing.
.in 0 \" Left justify headings.
.ie     \\$2=0 .ds }0\" Null string heading mark for HU.
.el .ie \\$1=1 .ds }0 \\n(H1.\ \&\" Heading marks = dotted sections + 1 space.
.el .ie \\$1=2 .ds }0 \\n(H1.\\n(H2.\ \&
.el .ie \\$1=3 .ds }0 \\n(H1.\\n(H2.\\n(H3.\ \&
.el .ie \\$1=4 .ds }0 \\n(H1.\\n(H2.\\n(H3.\\n(H4.\ \&
.el .ie \\$1=5 .ds }0 \\n(H1.\\n(H2.\\n(H3.\\n(H4.\\n(H5.\ \&
.el .ie \\$1=6 .ds }0 \\n(H1.\\n(H2.\\n(H3.\\n(H4.\\n(H5.\\n(H6.\ \&
.el .if \\$1=7 .ds }0 \\n(H1.\\n(H2.\\n(H3.\\n(H4.\\n(H5.\\n(H6.\\n(H7.\ \&
..
.de HZ \" End-of-heading processing.
.if n .in 3 \" Indent body of doc by 3 columns in nroff.
.if t .in 0 \" Don't indent in troff.
..
.if n .ds hB \&\" Page header/footer font begin in nroff.
.if t .ds hB \f9\" Page header/footer font begin in troff.
.if n .ds hE \&\" Page header/footer font end in nroff.
.if t .ds hE \fP\" Page header/footer font end in troff.
.if n .ds iB \&\" Doc header font begin in nroff.
.if t .ds iB \f(11\" Doc header font begin in troff.
.if n .ds iE \&\" Doc header font end in nroff.
.if t .ds iE \f1\" Doc header font end in troff.
.de tS \" Title start.
.SP 2 \" 2 blank lines.
.ce 99 \" Center (each line of) title.
.if t \{ .ft 11 \" Bold helvetica.
.S +2 D \} \" Bigger point size.
..
.de tF \" Title finish.
.ce \" Turn off centering.
.SP 1 \" 1 blank line.
.if t \{ .ft 1 \" Return to regular font.
.S P P \} \" Return to regular point size.
..
...\" -------------------------------------------------------------------------
...\" Special Appendix heading macro, .aH.
...\" -------------------------------------------------------------------------
.nr a 0 1 \" Appendix number.
.af a A \" Assign format upper-case alpabetic to number register a.
.de aH \" Appendix heading macro.
.if \\na=0 \{ .nr H1 0 \" Reset H1 to 0.
.HM A 1 1 1 1 1 1 \} \" Heading mark = Upper case alphabetic + arabics.
.HU "APPENDIX \\n+a. \\$1"
..
...\" -------------------------------------------------------------------------
...\" Paragraph stuff.
...\" -------------------------------------------------------------------------
.nr Pt 0 \" Paragraph type = left-justified.
.nr Pi 0 \" Paragraph indent = 0.
.nr Ps 1 \" Paragraph spacing = 1 blank space.
...\" -------------------------------------------------------------------------
...\" Special list macro, .aL (replaces .AL, for all levels).
...\" This should be used for almost all lists (including ".LI "\ "").
...\" The only exception is variable lists (.VL, indented by multiples of 6).
...\" -------------------------------------------------------------------------
.de aL
.nr g \\n(:g
...\" In-line lists should be numbered (by hand): (1), (2), (3), ...
.ie     \\ng=0 .LB 6 0 1 3 a \" 1st level: (a), (b), (c), ...
.el .ie \\ng=1 .LB 6 0 1 3 i \" 2nd level: (i), (ii), (iii), ...
.el .ie \\ng=2 .LB 6 0 1 4 a \" 3rd level: [a], [b], [c], ...
.el .ie \\ng=3 .LB 6 0 1 4 i \" 4th level: [i], [ii], [iii], ...
.el .ie \\ng=4 .LB 6 0 1 6 a \" 5th level: {a}, {b}, {c}, ...
.el .if \\ng=5 .LB 6 0 1 6 i \" 6th level: {i}, {ii}, {iii}, ...
..
.nr Ls 6 \" Blank lines between all list items, by default (but adjustable).
...\" -------------------------------------------------------------------------
...\" Footnote stuff; special footnote string, \*(f!.
...\" -------------------------------------------------------------------------
.if n .ds f! [\\*F]\" Footnote string (replaces \*F in nroff).
.if t .ds f! \\*F\" Footnote string (same as \*F in troff).
.if n .FD 6 \" Footnotes not hyphenated or indented, label left justified.
.if t .FD 5 \" Footnotes hyphenated, not indented, label left justified.
.nr Fs 1 \" 1 blank line between footnotes.
...\" -------------------------------------------------------------------------
...\" Line adjustment stuff.
...\" -------------------------------------------------------------------------
.if n .nr Hy 0 \" No hyphenation in nroff.
.if t .nr Hy 1 \" Hyphenate in troff.
.if n .SA 0 \" Set adjust: left margin only in nroff.
.if t .SA 1 \" Set adjust: left and right margins in troff.
...\" -------------------------------------------------------------------------
...\" Miscellaneous stuff.
...\" -------------------------------------------------------------------------
.ta \" No tabs by default -- set them up by hand as needed.
.nr Si \n(Ls \" Default indent for .DS display macro = 6 (use in troff only).
...\" -------------------------------------------------------------------------
...\" Displays.
...\" -------------------------------------------------------------------------
.de cS \" Display start: no-fill, literal font, no indentation.
.P
.nf \" No fill mode.
.if t .ft 5 \" Constant width font in troff.
..
...\" Within .cS, ".ne"'s can be added by hand, but should be minimized.
.de cF \" Display finish.
.if t .ft 1 \" Back to standard font in troff.
.fi \" Fill mode.
.P
..
.de dS \" Display start: no-fill, literal font, with indentation.
.P
.aL \" Use .aL macro for consistent indentation.
.nf \" No fill mode.
.LI "\ " \" List item will no (visible) marker.
.if t .ft 5 \" Constant width font in troff.
..
...\" Within .dS, ".ne"'s can be added by hand, but should be minimized.
.de dF \" Display finish.
.if t .ft 1 \" Back to standard font in troff.
.fi \" Fill mode.
.LE
.P
..
.de iS \" Indent start: fill, regular font, with indentation.
.P
.aL
.LI "\ "
..
.de iF \" Indent finish.
.LE
.P
..
.de jS \" Indent start: no-fill, regular font, with indentation.
.P
.aL
.nf
.LI "\ "
..
.de jF \" Indent finish.
.fi
.LE
.P
..
.de nS \" Note to Reviewers start: fill, italics font, with indentation.
.P
.aL \" Use .aL macro for consistent indentation.
.LI "\ " \" List item will no (visible) marker.
.if t .ft 2 \" Italics font in troff.
Note to Reviewers:
..
...\" Within .dS, ".ne"'s can be added by hand, but should be minimized.
.de nF \" Note to Reviewers finish.
.if t .ft 1 \" Back to standard font in troff.
.LE
.P
..
...\" -------------------------------------------------------------------------
...\" Quotation marks and font toggles.
...\" -------------------------------------------------------------------------
.if n .ds qB \&"\" Quotation begin in nroff.
.if t .ds qB ``\" Quotation begin in troff.
.if n .ds qE \&"\" Quotation end in nroff.
.if t .ds qE ''\" Quotation end in troff.
.if n .ds eB \&\" Emphasis primary font begin in nroff.
.if t .ds eB \f2\" Emphasis primary font begin in troff.
.if n .ds eE \&\" Emphasis primary font end in nroff.
.if t .ds eE \fP\" Emphasis primary font end in troff.
.if n .ds lB \&`\" Literal font begin in nroff.
.if t .ds lB \f5\" Literal font begin in troff.
.if n .ds lE \&'\" Literal font end in nroff.
.if t .ds lE \fP\" Literal font end in troff.
.if n .ds mB `\" Second literal font begin in nroff.
.if t .ds mB \f5\" Second literal font begin in troff.
.if n .ds mE '\" Second literal font end in nroff.
.if t .ds mE \fP\" Second literal font end in troff.
.if n .ds fB \&\" Emphasis literal font begin in nroff.
.if t .ds fB \fP\f6\" Emphasis literal font begin in troff.
.if n .ds fE \&\" Emphasis literal font end in nroff.
.if t .ds fE \fP\f5\" Emphasis literal font end in troff.
.if n .ds dB \&\" Definition begin in nroff.
.if t .ds dB \f3\" Definition begin in troff.
.if n .ds dE \&\" Definition end in nroff.
.if t .ds dE \fP\" Definition end in troff.
...\" =========================================================================
...\" Finally, it's time to start writing the document!
...\" The OSF-RFC author modifies the following header/footer info.
...\" (The major/minor number is assigned by the OSF-RFC Editor.)
...\" =========================================================================
.ND "April 1996" \" Date must be hard-coded.
.PH "$\*(hBOSF-RFC 96.0$DFA Functional Specification$\\\\*(DT\*(hE$"
.PF "$\*(hBHashimoto, Ito, Yamaura $$Page \\\\n%\*(hE$" \" Final version.
...\"
...\" Following are the first printed lines (header info) of the document:
...\"
\&\" Force top-of-first-page trap to position the following info correctly.
.tl $\*(iBOpen Software Foundation$$H. Hashimoto (Hitachi)\*(iE$
.tl $\*(iBRequest For Comments: 96.0$$T. Ito (Hitachi)\*(iE$
.tl $\*(iB\*(DT$$T. Yamaura (Hitachi)\*(iE$
.tS \" Title, in all capitals (can span multiple lines):
DFA: DISTRIBUTED FILE ACCESS MANAGER \*(EM
FUNCTIONAL SPECIFICATION
.tF
...\" =========================================================================
...\" Now, the actual body of the document!!
...\" Heading capitalization style:
...\"     1st level: CAPITALIZE ALL WORDS
...\"     2nd level: Capitalize Initial Letters of All (Significant) Words
...\"     3rd-7th level: Capitalize first letter of first word only
...\" =========================================================================
.P
.H 1 "INTRODUCTION"
...\" -------------------------------------------------------------------------
.P
...\" -------------------------------------------------------------------------
.H 2 "Purpose"
...\" -------------------------------------------------------------------------
.P
Mainframes have been widely considered the most important form
of company-wide information processing system for several
decades, especially for critical applications.  However, due to
rapid progress in the areas of hardware and network technology,
workstation-based distributed systems have emerged as another
means of handling such core operations.  OSF DCE, a de facto
standard among distributed systems, is one of the most promising
environments to offer a distributed system consisting of
heterogeneous hardware and operating systems.  DCE DFS
(Distributed File System), one of the DCE services, allows
physically distributed files to be seen and accessed as a single
logically-centralized file system.
.P
On the other hand, PCs are often used at department level in
companies, and PC network systems, enabling file- and
printer-sharing, predominate.  Novell's NetWare, with well over
60% of market share, dominates this field.
.P
As a result of this typical division of information resources, a
great need has arisen for some way of making sharable the files
used by the two kinds of system and allowing inter-department
and intra-company file sharing.  The Distributed File-Access
Manager (hereafter abbreviated as \*(qBDFA\*(qE) is designed to
meet this need.
.P
DFA provides a gateway function to access DFS files from a
NetWare client, using the same operations as in NetWare.  This
gateway function allows inter-department data sharing via DFS,
and access to workstation DCE-based DFS files from PC clients.
...\"
...\"
.P
...\" -------------------------------------------------------------------------
.H 2 "Features"
...\" -------------------------------------------------------------------------
...\"
.P
DFA has the following features:
.P
.aL
.LI
DFS can be accessed with NetWare commands.
.P
DFA offers almost all of the fundamental file operations (such
as assigning a DFS sub-directory to a DOS virtual drive, and
file copying) using the identical equivalent NetWare
commands.  In addition, DFA allows users to automatically log
into DCE/DFS with NetWare login operations.  Users accessing DFS
get the same \*(qBlook and feel\*(qE as with NetWare.  (DFA does
not, however, support access in the opposite direction, i.e.,
from a DFS client to NetWare files.)
.LI
DOS/Windows application programs can access DFS.
.P
Since DFA accesses DFS files using the NetWare client API, end
users can access DFS files in the same manner as they would use
to access NetWare files from DOS/Windows application programs.
.LI
Arbitrary portions of DFS can be accessed.
.P
DFA can define any portion of the DFS directory as a single
NetWare volume, and this can be redefined as many times as
desired.  Even if the target DFS is large and complex, a user
can easily designate the target file.
.LI
Robust security.
.P
DFA has robust security: its authentication mechanism will not
allow raw passwords to leak into network communications.  DFA
employs an encryption key-based security.  Access rights to DFS
files are checked and compared with users' authentication
information.  Since DFA accesses DFS files using the access
rights established for a user at DCE login, users get the
advantage of robust file security via DFS's authorization
checking.
.LI
High reliability.
.P
DFA is a highly reliable system with an error auditing process
for periodic sanity checking, and it provides multiple means of
recovery from system failures.
.LI
Ease of installation and scalability.
.P
DFA can be easily installed on an existing system without
modification to DCE/DFS, the current NetWare file configuration,
or the user's environment.  DFA is highly scalable and flexible: as
a system grows, you simply add additional DFAs to balance the
load.  (In order to be applied to large scale systems,
additional instances of DFA must be multiplied for load
balancing.)
.LE
.P
...\" -------------------------------------------------------------------------
.H 2 "System Configuration"
...\" -------------------------------------------------------------------------
.P
The DFA system consists of PCs and workstations on which the
NetWare client, NetWare server, DFS client, and DFSserver are
running.  DFA's basic components are: a DFA gateway on a NetWare
server, an Administration Utility, a DFA agent on a DFS client,
and client utilities on a NetWare client.
.P
The DFA gateway is the component which provides most of the
gateway functions.  Its primary purpose is to convert NetWare
API calls into the equivalent DFS API calls.  These calls are
then directed by the DFS agent to a DFS cache manager; the agent
later returns the results of the calls to the DFA gateway.  The
client utilities are a group of utility commands to concurrently
log into DCE/DFS and NetWare.  The Administration Utility is a
group of utilities which (among other things) performs the
initialization of a DFA environment.
.P
...\" -------------------------------------------------------------------------
.H 2 "Functional Overview"
...\" -------------------------------------------------------------------------
.P
...\" -------------------------------------------------------------------------
.H 3 "DFS volume assignment"
...\" -------------------------------------------------------------------------
.P
DFA assigns an arbitrary portion of the DFS directory (hereafter
called \*(qBDFS sub-directory\*(qE) to a DFS volume created as a
NetWare volume on NetWare (hereafter called \*(qBDFA
Volume\*(qE).  The DFS sub-directories can be mapped to multiple
DFA volumes, and DFS sub-directories of different DCE cells can
be assigned to multiple DFA volumes on a single NetWare server.
Actually, the DFA utility assigns and deletes the DFS
sub-directories, and keeps track of the assignment/deletion
history on the DFA volume table.  Prior to the assignment, DFS
must have the sub-directory (mount point) assigned.
.P
Using NetWare's MAP command, any portion of the DFS
sub-directory assigned to the DFA volume can be assigned to a
drive in a NetWare client, and then accessed via redirection
(see section 1.4.2 for details), using the same API as for
NetWare files.
.P
...\" -------------------------------------------------------------------------
.H 3 "Redirection"
...\" -------------------------------------------------------------------------
.P
After the DFA volume assignment, accesses to the DFA volume are
redirected to the assigned DFS sub-directory.  The mechanism of
redirection is that, on a NetWare server, NetWare file access
API calls are hooked and converted into the equivalent DFS
access.  The conversions are as follows:
.P
.aL
.LI
Conversion of file/directory names.
.P
DFS file and directory names comply with UNIX naming
conventions, which allow much longer names than does DOS.  DFA
converts DFS file and directory names into DOS form in such a
way as to prevent the converted names' matching any
already-existing DOS file or directory names.
.LI
Conversion of trustees/attributes.
.P
ACLs (Access Control Lists) control access rights to DFS.  DFA
converts ACLs to NetWare trustees, and sets default values for
the NetWare file attributes (DFS does not have \*(qBfile
attributes\*(qE).
.LI
Conversion of file locking protocols.
.P
DFA mutually converts the locking protocols of NetWare and DFS.
DFA does not, however, support record-level (or lower-level)
locking.
.LE
.P
...\" -------------------------------------------------------------------------
.H 3 "Automatic DCE login"
...\" -------------------------------------------------------------------------
.P
The DFA login utility allows automatic and simultaneous login to
DCE/DFS whenever a user logs into NetWare.  Even though NetWare
and DCE/DFS do not have the equivalent user ID and password, a
user can simultaneously login to both NetWare and DCE/DFS with a
single operation, provided that mapping of user IDs and
passwords is enabled.
.P
...\" -------------------------------------------------------------------------
.H 3 "Multiple DFA agent support"
...\" -------------------------------------------------------------------------
.P
If there are multiple DFA agents, the DFA gateway automatically
selects a DFA agent to which to connect.  This provides both for
resource redundancy in case of system failure, and load
balancing.
.P
...\" -------------------------------------------------------------------------
.H 3 "System error monitoring and recovery"
...\" -------------------------------------------------------------------------
.P
.aL
.LI
File access error.
.P
Whenever a file access error occurs, DFA retries the access.  If
the error occurs a second time, DFA terminates the job.  To
ensure that files in such cases are not left opened and
unusable, the file is closed and the connection terminated.
.LI
Error auditing.
.P
Both the DFA gateway and the agent audit errors.  Whenever an
error is detected, DFA issues a report, and initiates error
recovery procedures.
.LI
DFA agent switching.
.P
As mentioned above in section 1.4.4, to provide seamless
operation, DFA will automatically switch from a malfunctioning
to a correctly-operating agent.
.LE
.P
...\" -------------------------------------------------------------------------
.H 1 "GENERAL CONCEPTS OF DFA"
...\" -------------------------------------------------------------------------
...\"
.P
DFA's primary purpose is to allow a PC user to easily take
advantage of DCE DFS file access via his or her NetWare
environment, and thus transform a mainframe-centered into a
company-wide distributed system.  In order for users to be able
to handle DFS files in the same manner as NetWare files, DFA
supports various file sharing and mapping functions.
.P
DFA is highly expandable.  NetWare can access DFS files only if a
NetWare server and DFS client are equipped with DFA modules, and
are connected with TCP/IP.  Since DCE authenticates NetWare
users with DCE's Kerberos, a NetWare user can access DFS files
without diminishing the robustness of DCE security.
.P
Possessing only a NetWare user ID, a user can simultaneously log
into NetWare and DCE with a single simple operation.  Users are
automatically able to access files in both systems, NetWare and
DFS, using the same commands and the same programs.
.P
DFA also provides utilities for system error auditing, error
analysis, error recovery, and system administration.
.P
...\" -------------------------------------------------------------------------
.H 2 "File Sharing and Mapping"
...\" -------------------------------------------------------------------------
.P
...\" -------------------------------------------------------------------------
.H 3 "Assignment of DFS file to netware volume"
...\" -------------------------------------------------------------------------
.P
DFA enables a PC user connected to a NetWare server to handle
the DFS file system (hereafter called DFS) as if those files
resided in NetWare.  Users can access DFS files with the same
operations as they would PC files.  Since users on different
NetWare servers can share and access the same DFS files, NetWare
can be expanded into a company-wide file sharing system.
.P
A DFA administrator can pick as a mount point any arbitrary
directory under the DFS junction (\*(lBfs\*(lE), and assign all
the files and directories under the specified mount point
(collectively called \*(qBDFS sub-directory\*(qE) to a NetWare
volume (see section 2.6 for details; prior to making this
assignment, the DFS administrator needs to create the DFS
sub-directories).  The NetWare volume to which the DFS
sub-directory is assigned, is called a \*(qBDFA volume\*(qE.
DFA reproduces on the DFA volume the DFS sub-directory's
directory structure, using dummy (i.e., zero-length) files to
represent on the DFA volume the original DFS sub-directory
files.  Users access the DFS files by using the DFA volume and
file name (i.e., a directory path name).
.P
A DFS sub-directory whose DCE cell is different from the one
connected to DFA can also be assigned to a DFA volume.
Moreover, DFA administrators for different NetWare servers can
independently assign the same DFS sub-directory.
...\" , and a different NetWare server can share and assign the same DFS
...\" sub-directory as the DFA volume of the different NetWare server.
.P
...\" -------------------------------------------------------------------------
.H 3 "Volume redirection"
...\" -------------------------------------------------------------------------
.P
By designating a DFA volume name, users can access DFS files in
the same way as they would a NetWare server volume.  If a
directory (of the user's choice) in the DFA volume is mapped to
the client's virtual disk drive using NetWare MAP commands, the
user can create, delete, and rename the files and directories in
the DFA volume as well as read and write the files.
.P
When a DFA agent redirects access to a DFS file, DFA preserves
compatibility between DOS and DFS file access by doing the
following:
.P
.aL
.LI
NetWare file API calls are translated into DFS file API calls.
.LI
NetWare names are converted into DFS file names.
.LI
NetWare trustees are converted into DFS file access rights.
.LI
DFS file locking is performed.
.LI
DFS files are cached on a NetWare server.
.LE
.P
...\" -------------------------------------------------------------------------
.H 3 "API conversion"
...\" -------------------------------------------------------------------------
...\"
.P
Conversion of NetWare file API calls into DFS API calls allows
users to manipulate DFS files and directories in the same manner
as they would NetWare files and directories.
.P
DFA hooks (via a machine's operating system) into the NetWare
file I/O operations.  Whenever a requested operation is on a DFS
file or directory, DFA converts the operation request into the
equivalent DFS file access call, and sends the converted DFS
call to the DFA gateway, which in turn sends it on to DFS.
.P
When the operation completes, the DFA agent sends back to the
DFA gateway the operation's (DFS file access) return code,
having first converted the code into its NetWare equivalent.
.P
Note that the API conversion process does not include automatic
conversion of text, such as DOS and UNIX linefeed codes.
.P
...\" -------------------------------------------------------------------------
.H 3 "File name conversion"
...\" -------------------------------------------------------------------------
...\"
.P
Basically, a DFA user creates a DOS file on a DFA volume.  A
NetWare user can access all files in the assigned DFS
sub-directory, whether they were created after the assignment or
were already present when the assignment to a DFA volume was
made.  If a given DFS file name does not comply with DOS's file
naming rules (i.e., 8 or fewer characters followed optionally
by a dot and 3 extension characters), DFA converts the DFS file
name into a DOS-like name.  It does this using a set of rules
which conform to the X/Open PC Internetworking PC-NFS
Specification, appending keys so that the converted names remain
distinct.
.P
Re-conversion from the converted DOS file name back to the
original DFS file name proceeds by: (1) selecting the DFS file
names likeliest to have been the original; (2) converting these
into DOS names and comparing the conversions with the DOS file
name to be reconverted; and (3) matching one of these with the
candidate for reconversion
.P
...\" -------------------------------------------------------------------------
.H 3 "File access mapping between netware and DFS"
...\" -------------------------------------------------------------------------
...\"
.P
Using only the rights acquired by logging into NetWare, a user
can access DFS files without having to login to DCE.  DFA
maintains a table which maps user names registered to NetWare to
those registered to DCE, and uses this (and the DFS ACLs) to
check users' access rights to DFS files.  NetWare users can
acquire the access rights that belong to the DCE group to which
their corresponding DCE user name belongs.  If, however, a user
has the access rights both of a DCE user and of a DCE group, the
latter is ignored.
.P
DFA makes no conversion between NetWare and DFS groups.  Thus, a
NetWare group access right cannot be applied to DFS files and
directories.  See Section 2.6.1 for information on administering
user names and group names.
.P
A user, using DFA utilities, can set and reference access rights
values for DFS files and directories in the DFA volume with the
same commands as used for the corresponding NetWare operations.
.P
DFA converts ACL values (i.e., access rights to DFS) to and from
trustee (NetWare) values.  NetWare files also have attributes
such as \*(qBread only\*(qE and \*(qBpurge\*(qE.  However, since
such attributes cannot be mapped to DFS files, DFA does not
convert them.  Instead, DFA displays default values when the
attribute of a DFS file is requested by a NetWare user.
.P
The conversion between ACL and trustee values is such that, from
the user's (or rather, application program's) point of view,
NetWare and DFS have virtually equivalent access rights for
files and directories.  Since NetWare supports \*(qBinherited
right masks\*(qE but DFS does not, DFA does not map the masks.
.P
...\" -------------------------------------------------------------------------
.H 3 "File locking"
...\" -------------------------------------------------------------------------
...\"
.P
In order to permit users connected to different servers to share
files, DFA can lock the shared files in DFS.  DFA, however, only
supports implicit file locking.  In other words, DFA will lock a
DFS file if an application opened the file in \*(qBwrite
mode\*(qE, and releases the lock when the file is closed.
.P
There are two ways to lock a DFS file: mandatory locking and
advisory locking.  DFA uses mandatory locking.  This is because
NetWare itself supports only mandatory locking, and a file
locked by a NetWare user should be locked from access by a DFS
user.  If, however, the DFS server operating system does not
support mandatory locking, DFA is able to employ advisory
locking instead.
.P
...\" -------------------------------------------------------------------------
.H 3 "File caching"
...\" -------------------------------------------------------------------------
...\"
.P
By caching a DFS file onto a NetWare server, DFA's DFS file
access speed can be made to approach that of file access on a
NetWare server.  In particular, a user can take advantage of
this feature when a DFA gateway is sited far from the DFA agent.
.P
...\" -------------------------------------------------------------------------
.H 2 "Expandability"
...\" -------------------------------------------------------------------------
...\"
.P
DFA provides the following expandability to allow users to build a
company-wide network by expanding existing NetWare servers:
.P
.aL
.LI
Adding NetWare users.
.P
A DFA agent on a DFS client can handle multiple DFA gateways.
Thus, the number of NetWare users that can concurrently access
DFS files can be increased by adding NetWare servers that have
DFA gateways.  Each NetWare server has the maximum number of
login users, and the number of the total DCE users is determined
by each DCE.
.LI
Adding NetWare servers.
.P
There is no limit to the number of NetWare servers that can be
connected to a DFS client.  If performance deterioration occurs
(such as can happen when, for example, a single DFS client
handles too many NetWare servers), a user has only to add a DFS
client, and connect some of the NetWare servers to the new
client.  Bottlenecks can be easily eliminated without changing
the current environment.
.LI
Adding DFA volumes.
.P
The total number of NetWare and DFA volumes per NetWare server
must be 64 or less.  However, there is no limit to the number of
DFS sub-directories that can be assigned to a DFA volume.  Thus,
by adding a NetWare server equipped with a DFA gateway to a LAN,
a user can virtually augment the effective number of DFA
volumes.
.LI
NetWare interoperability.
.P
DFA uses the standard NetWare functions.  To the extent that new
versions of NetWare maintain backward compatibility, DFA will
continue to run the new versions.
.LI
DFS interoperability.
.P
DFA uses the standard DFS functions.  To the extent that new
versions of DFS maintain backward compatibility, DFA will
continue to run on new versions.
.LE
.P
...\" -------------------------------------------------------------------------
.H 2 "Security"
...\" -------------------------------------------------------------------------
...\"
.P
DFA offers two types of security mechanism: authentication,
which ensures that only properly-qualified users can log into
DCE; and file access rights, which control DFS file access based
on a set of access rights granted to a user.  This section
describes authentication (see also \*(qBaccess right
control\*(qE).
.P
In order to access DFS files via DFA, a user needs to log into
(1) a NetWare server equipped with a DFA gateway (in order to
access a DFA gateway), and (2) DCE (in order to access DFS).  DFA
enables a user to login to both with a single operation, and
without having to enter a DCE password, greatly simplifying the
login operation.
.P
DFA has a login utility for both the DOS and the Windows
environment, and this utility provides a login environment at
the same level as the NetWare login.  At login time, users can
select whether or not they will also login simultaneously to
DCE.  (A user who has chosen to login only to NetWare can
subsequently elect to log into DCE by invoking the login
utility.)
.P
On a NetWare client, when the login utility receives a user's
login request, it first accomplishes the login to NetWare, then
(if specified) proceeds to do a DCE login via a DFA gateway.
With this method, the user has to specify the NetWare server on
which the DFA gateway is running.  When a user logs into DCE,
the login utility (in fact a DFA gateway) searches the bindery
information on the NetWare server, and selects the DCE user name
that corresponds to the NetWare user name.
.P
A NetWare password can be different from the DCE password.  A
DFA administrator can set the DCE password to the NetWare
bindery beforehand.  See Section 2.6.1 for information on how
DCE user names and passwords are registered.
.P
In order for DCE to retain its security level with DFA in
operation, it is necessary to make sure there is no password
leakage (especially via wire tapping), and also that the DFA
gateway is authorized to be connected to DCE.
.P
To prevent illegal access by unauthorized clients, DFA gateways
and agents communicate with each other using Kerberos.  DFA
agents have the full functionality of a Kerberos client, and DFA
gateways also have a subset of Kerberos capability.  When
authentication occurs between a DFA agent and client, no
\*(qBraw passwords\*(qE are sent over the wire.  NetWare servers
store DCE passwords in their bindery, and raw DCE passwords are
not transmitted when users login.
.P
...\" -------------------------------------------------------------------------
.H 2 "Compatibility"
...\" -------------------------------------------------------------------------
...\"
.P
In order to make it as easy as possible to use, DFA inherits PC
operations such as displaying file contents, and
copying/searching files.  In addition, DFA allows use of
DOS/Windows application programs, enabling users to smoothly
migrate to a DFA-based company-wide network.
.P
DFA's goal is to allow PC application programs to manipulate DFS
files in the same manner as local (PC) files.  In this sense,
DFA guarantees the compatibility of NetWare commands with DFS
file operations; however, it should be borne in mind that not
all of NetWare's original utility commands will necessarily work
with DFS.  The following list specifies the kinds and degrees of
cross-compatibility that can and cannot be expected from DFA.
.P
.aL
.LI
Interface compatibility.
.P
DFA compatibility is guaranteed for the following interfaces:
.P
.aL
.LI
The file access APIs provided by DOS and Windows.
.LI
Operation interfaces provided by Windows utilities that use the
above interfaces.
.LE
.LI
Interface non-compatibility.
.P
DFA compatibility is not guaranteed for the following interfaces:
.P
.aL
.LI
NetWare client and NLM file access APIs.
.LI
Operation interfaces provided by utilities that use the above
interfaces.
.LE
.LE
.P
Compatibility is accomplished in the following manner (see
Section 3.2.2 for details): requests for file access and trustee
access via the DOS/Windows API are handled by the corresponding
routines of a NetWare server; a DFA gateway hooks into these
routines, and translates them into the appropriate DFS file
access requests.
.P
...\" -------------------------------------------------------------------------
.H 2 "Error Handling"
...\" -------------------------------------------------------------------------
...\"
.P
...\" -------------------------------------------------------------------------
.H 3 "Error detection"
...\" -------------------------------------------------------------------------
...\"
.P
This functionality detects DFA errors, allowing users to take
the proper action to recover from the error condition.  When
critical errors occur in a DFA agent or DFA gateway (for
example, a DFA agent crash), DFA displays an error message at
the consoles of the agent's and gateway's host machines.
.P
...\" -------------------------------------------------------------------------
.H 3 "Error analysis"
...\" -------------------------------------------------------------------------
...\"
.P
This functionality analyzes the causes of hardware errors,
program errors and user errors, so that users can avoid
repeating the errors.
.P
...\" -------------------------------------------------------------------------
.H 3 "Error recovery"
...\" -------------------------------------------------------------------------
...\"
.P
This functionality assists quick and easy recovery from system
faults caused by errors.  If a DFA gateway is connected to
multiple DFA agents, and one of the DFA agents communicating
with the DFA gateway fails, this function automatically connects
the DFA gateway to a different DFA agent so that a user can
continue the current jobs.  Note, however, that DFA does not
support automatic recovery of file that was open on a failed
gateway.
.P
DFA provides for automatic restart of DFA agents by registering
them with a DFS \*(qBoverseer\*(qE process (BOS Server).
.P
...\" -------------------------------------------------------------------------
.H 2 "DFA Administration"
...\" -------------------------------------------------------------------------
...\"
.P
The DFA-specific administrative task is called DFA
administration.  In order to distinguish a DFS administrator
from a NetWare administrator, the person who administers DFA is
called a DFA administrator.  A DFA administrator and a NetWare
administrator can be the same person.  The DFA administrator
performs DFA administrative tasks from the console of a NetWare
server.  NetWare supervisor mode is required.  Using NetWare's
remote console, a DFA administrator can also perform DFA
administrative tasks from a NetWare client PC.  The details of
DFA administration are as follows:
.P
...\" -------------------------------------------------------------------------
.H 3 "User information administration"
...\" -------------------------------------------------------------------------
...\" ZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZ
.P
DFA maps between NetWare and DCE user names so that NetWare
users can access DFS files.
.P
A utility program appends DCE information (e.g., DCE password,
DCE user ID) to the NetWare user object, which thus holds
information about the DCE properties of the user's DCE user ID.
A \*(qBDFA user\*(qE is defined as a user who has such a
NetWare/DCE user name mapping.  DFA also provides a utility
program that displays the NetWare and DCE user name mappings.
.P
However, DFA does not support simultaneous user name
registration to DCE and NetWare, nor does it support
simultaneous password change in DCE and NetWare.
.P
DFA has a utility program that groups DFA users into a DCE user
group.  This allows users to set the same access rights for
multiple users.  The following groups exist:
.P
.aL
.LI
EVERYONE group.
.LI
User group.
.LE
.P
The EVERYONE group includes all the DFA user names in the same
NetWare server.  A User group is a group of DCE users who are
eligible to access the same certain DFS directories and files.  A
User group can be specified, and access rights set for it, in
NetWare form.
.P
DFA does not map between already-existing NetWare groups and DCE
groups.  This is because both groups contain non-DFA users, and
it makes no sense to map between them.
.P
DFA registers a DFA user's DCE password with the bindery on a
NetWare server, but it does nothing with the DFA user's NetWare
password.
.P
...\" -------------------------------------------------------------------------
.H 3 "Volume administration"
...\" -------------------------------------------------------------------------
...\"
.P
The DFA administrator, using a NetWare utility, can create a DFA
volume and assign a DFS sub-directory to the DFA volume.  DFA
displays a directory listing of the DFS file system so that the
administrator can easily assign the DFS volume.  The
\*(qBoriginal\*(qE files in a DFA volume, unlike original
NetWare files, reside in a sub-directory of DFS.  Since DFS
cannot administer the space of a DFS sub-directory, and multiple
NetWare administrators can independently assign DFS
sub-directories, DFA does not administer the DFA volume space.
.P
If necessary, a DFA administrator can \*(qBun-assign\*(qE the
DFA volume from the DFS sub-directory, and, using a NetWare
utility, delete the DFA volume.
.P
To use the DFA volume, a user needs to mount the volume onto
NetWare using NetWare's mount command, and start DFA.  When a
user terminates DFA, the DFA volume can be released from NetWare
using NetWare's dismount command.  NetWare's batch file function
enables users to execute such series of operations with a single
command.
.P
The DFA utility displays the following volume information:
.P
.aL
.LI
Volume names.
.LI
Names of DFS sub-directories assigned to the volumes.
.LE
.P
The DFA administrator, using the DFS back-up utility, can backup
the DFS sub-directories onto DFS.  The back-up size is by DFS
file set (which corresponds to a UNIX file partition).  The DFS
backup utility does not support the remote execution of DFS
backup from a NetWare client, or backup of DFS files onto
NetWare.
.P
...\" -------------------------------------------------------------------------
.H 3 "DCE connection and disconnection"
...\" -------------------------------------------------------------------------
...\"
.P
The DFS administrator starts a DFA agent (as a daemon) on the
same UNIX machine as the DFS client when starting up the system.
The DFA administrator registers a DFA agent's IP address and
hostname to the \*(lBSYS:ETC$B%H(BOST\*(lE file in NetWare.
The DFA gateway specifies the IP address of the DFA agent, and
has a connection with it.  A DFA gateway can connect and
disconnect to a DFA agent while DFS is running.
.P
...\" -------------------------------------------------------------------------
.H 3 "Auditing"
...\" -------------------------------------------------------------------------
...\"
.P
DFA administrators can use audit functions provided by both DFS
and NetWare.  DFA, however, does not provide any new
functionality to integrate the two auditing functions.
.P
...\" -------------------------------------------------------------------------
.H 3 "Accounting"
...\" -------------------------------------------------------------------------
...\"
.P
Although DFA does not provide an accounting utility, NetWare's
accounting utility (which reports server connect time, number of
blocks read, number of blocks written, etc.) can be used on a
DFA volume.  However, the utility cannot report on disk
utilization of DFA sub-directories.
.P
...\" -------------------------------------------------------------------------
.H 2 "System and Software Configuration"
...\" -------------------------------------------------------------------------
.P
DFA consists of the following components:
.P
.aL
.LI
DFA gateway (NLM on NetWare server).
.LI
DFA administration utility (NLM on NetWare server).
.LI
DFA agent (an application program on a DFS client machine).
.LI
Client utility (an application program on a NetWare client machine).
.LE
.P
The following table shows the software required to run DFA (in
its reference implementation \*(EM other ports are beyond the
scope of this RFC):
.P
.if n \{\
.cS
.ne 23
+------------------+---------------------+------------------------+
|     Hardware     |      Software       |        Versions        |
+==================+=====================+========================+
| NetWare Client:  | DOS                 | 5.0 (or later)         |
| PC/AT Compatible | Windows(Windows NT) | 3.1 (or later)         |
|                  | NetWare Shell       | 3.12                   |
+------------------+---------------------+------------------------+
| NetWare Server:  | DOS                 | 5.0 (or later)         |
| PC/AT Compatible | NetWare             | 5.12                   |
|                  | Admin Utility       | 1.0                    |
+------------------+---------------------+------------------------+
| DFS Client:      | UNIX                | HP-UX 9.02 (or later)  |
| UNIX Machine or  |                     | AIX 3.25 (or later)    |
| PC/AT Compatible |                     | Solaris 2.1 (or later) |
|                  | DCE/DFS             | 1.1 (or later)         |
+------------------+---------------------+------------------------+
| DFS Server       | UNIX                | HP-UX 9.02 (or later)  |
|                  |                     | AIX 3.25 (or later)    |
|                  |                     | Solaris 2.1 (or later) |
|                  | DCE/DFS             | 1.1 (or later)         |
+------------------+---------------------+------------------------+

                  Table 1. Prerequisite Software
.cF\
\}
.if t \{\
.DS
.TS
center tab(@) box;
c | c | c
l | l | l.
Hardware@Software@Versions
=
NetWare Client:@DOS@5.0 (or later)
PC/AT Compatible@Windows (Windows NT)@3.1 (or later)
@NetWare Shell@3.12
_
NetWare Server:@DOS@5.0 (or later)
PC/AT Compatible@NetWare@5.12
@Admin Utility@1.0
_
DFS Client:@UNIX@HP-UX 9.02 (or later)
UNIX Machine or@@AIX 3.25 (or later)
PC/AT Compatible@@Solaris 2.1 (or later)
@DCE/DFS@1.1 (or later)
_
DFS Server@UNIX@HP-UX 9.02 (or later)
@@AIX 3.25 (or later)
@@Solaris 2.1 (or later)
@DCE/DFS@1.1 (or later)
.TE
.sp 1
.ce 1
            Table 1. Prerequisite Software
.DE\
\}
.P
In order to reduce its size on a NetWare server machine, DFA is
split into two parts: a DFA gateway sited on a NetWare server
machine, and a DFA agent located on a DFA client machine.
Although this method requires that the DFS file access requests
re-directed by a DFA gateway be sent to a DFA agent through the
communication channel between a NetWare server and DFA client,
the NetWare server machine has only to carry a conversion
program between NetWare and DFS in order to reduce the load on
the server machine.
.P
Another alternative is to embed the functions of the DFS client
on the NetWare server machine.  The advantage of this method is
that the DFS side does not need additional software.  However,
since the software required to outfit the NetWare server machine
is huge, DFA does not employ this method.
.P
...\" -------------------------------------------------------------------------
.H 3 "Login utility"
...\" -------------------------------------------------------------------------
...\"
.P
A NetWare client machine contains the client utilities,
including a login utility which logs into NetWare and DCE.  This
section describes how the login utility is implemented.
.P
DFA DCE login requires the following two steps:
.P
.aL
.LI
The login request is issued from a NetWare client to a DFA
gateway on a NetWare server.
.P
There are two ways to implement this first step: (1) a server
catches the login request sent from a client; or (2) a NetWare
client provides a different login utility to send the login
request to a DFA gateway.  Since NetWare does not currently
provide the detection means necessary for implementing (1), the
method (2) is employed.
.LI
The DFA gateway logs into DCE.
.P
This second step can be implemented if the NetWare server machine
has a client portion of the DCE security service installed
(i.e., Kerberos authentication).  This method, however, as was
mentioned above, increases the load on the NetWare server.
Instead therefore, in DFA the client functionality of the DCE
security service is split and embedded in the DFA agent and DFA
gateway.
.LE
.P
Similarly to NLM on a NetWare server machine, DFA provides the
following administration utilities:
.P
.aL
.LI
Volume assignment (assigning a DFS sub-directory to a DFA
volume).
.LI
User management (mapping NetWare and DCE user names).
.LI
Access rights management (mapping file access rights between
NetWare and DFS).
.LE
.P
...\" -------------------------------------------------------------------------
.H 2 "Internationalization"
...\" -------------------------------------------------------------------------
...\"
.P
DFA, using NetWare's enabling service, provides
internationalization.  For the following items, DFA refers to the
\*(qBlocale,\*(qE to provide the locally correct value:
.P
.aL
.LI
Character code.
.LI
Numeric.
.LI
Dates.
.LI
Time.
.LE
.P
The localized messages are supplied in a message file, separate
from the DFA source code.  DFA is shipped with the message file
appropriate to the destination's locale.
.P
...\"=========================================================================
...\" References go here, as an unnumbered heading.
...\" =========================================================================
...\"
...\" -------------------------------------------------------------------------
.HU "REFERENCES"
...\" -------------------------------------------------------------------------
...\"
.P
.nr Ls 1 \" Blank line between items in reference list.
.VL 12 0
.LI "[APPL\ 1.1]"
OSF, OSF DCE Application Development Reference Revision 1.1, 1994.
.LI "[CORE\ 1.1]"
OSF, OSF DCE Administration Guide \*(EM Core Components
Revision 1.1, 1994
.LI "[DFS\ 1.1]"
OSF, OSF DCE DFS Administration Guide and Reference, Revision 1.1, 1994.
.LI "[SDK\ VOL4]"
Software Developer's Kits Vol. 4, Novell, 1994.
.LE
...\" =========================================================================
...\" Author's address goes here, as unnumbered heading, at end of doc.
...\" =========================================================================
.ne 3+6
...\" -------------------------------------------------------------------------
.HU "AUTHOR'S ADDRESSES"
...\" -------------------------------------------------------------------------
...\"
.P
.tl $Hisashi Hashimoto$$Internet email: hashimoh@soft.hitachi.co.jp$
.tl $Hitachi Limited, SDC$$Telephone: 81-462-25-9271$
.tl $TYG - 11th Building$$$
.tl $16-1 Nakamachi 3-CHOME$$$
.tl $ATSUGI - SHI, JAPAN$$$
.tl $ZIP 243$$$
.P
.ne 6
.tl $Toshiya Ito$$Internet email: itoshiya@soft.hitachi.co.jp$
.tl $Hitachi Limited, SDC$$Telephone: 81-462-25-9257$
.tl $TYG - 11th Building$$$
.tl $16-1 Nakamachi 3-CHOME$$$
.tl $ATSUGI - SHI, JAPAN$$$
.tl $ZIP 243$$$
.P
.ne 6
.tl $Tsuneo Yamaura$$Internet email: yamaur_t@soft.hitachi.co.jp$
.tl $Hitachi Limited, SDC$$Telephone: 81-462-25-9270$
.tl $TYG - 11th Building$$$
.tl $16-1 Nakamachi 3-CHOME$$$
.tl $ATSUGI - SHI, JAPAN$$$
.tl $ZIP 243$$$
...\"
...\"
...\" =========================================================================
...\" Done!
...\" =========================================================================
