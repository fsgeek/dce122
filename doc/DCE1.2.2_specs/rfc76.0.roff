...\" OSF-RFC 76.0
...\"
...\" FORMATTING INSTRUCTIONS for this RFC:
...\"       nroff -Tlpr rfc76.0.roff > rfc76.0.txt
...\"       troff -Tps rfc76.0.roff | <ps-post-processor> > rfc76.0.ps
...\" (Where "troff" means "device-independent troff", or "ditroff".)
...\"
...\" If troff is not supported for a given RFC, insert the following:
...\" .if t \{\
...\" .tm *** Troff not supported for this RFC.
...\" .ex \}
...\"
...\" =========================================================================
...\" This template first sets a bunch of *roff options (authors/readers
...\" don't usually have to know about these).
...\" Then it defines some strings and macros, many of which deal with
...\" things that differ between nroff & troff (some of these may not be
...\" perfect, but they're better than nothing -- to do a really good
...\" job would require a real semantic markup language.
...\" Convention: "Begin/End" for strings, "Start/Finish" for macros.
...\" Strings:
...\"       \*(f!        - Footnote string (replaces \*F).
...\"       \*(hB, \*(hE - Page header/footer font (internal use).
...\"       \*(kB, \*(kE - Doc header font (internal use).
...\"       \*(qB, \*(qE - Quotations.
...\"       \*(iB, \*(iE - Italics/emphasis in primary font.
...\"       \*(bB, \*(bE - Bold font.
...\"       \*(lB, \*(lE - Literal font.
...\"       \*(jB, \*(jE - Italics/emphasis in literal font.
...\"       \*(nH        - Default note header string.
...\" Macros:
...\"       .aH      - Appendix header macro (uses number register \na).
...\"       .aL      - Automatic list macro (replaces .AL; uses num reg \ng).
...\"       .tS, .tF - Title start/finish (internal use).
...\"       .cS, .cF - Displays (no-fill) without indentation.
...\"       .dS, .dF - Displays (no-fill) with indentation.
...\"       .iS, .iF - Indented (fill) text.
...\"       .nS, .nF - Note.
...\" -------------------------------------------------------------------------
...\" First, set up some number registers here (instead of on command line),
...\" and include the "mm" macro package here (instead of on command line).
...\" -------------------------------------------------------------------------
.if n .nr L 66 \" Nroff page length = 66 lines.
.if t .nr L 11i \" Troff page length = 11 inches.
.if n .nr W 72 \" Nroff page width = 72 columns.
.if t .nr W 6.5i \" Troff page width = 6.5 inches.
.if n .nr O 3 \" Nroff page offset = 3 columns.
.if t .nr O 0.75i \" Troff page offset = 0.75 inches.
.nr N 2 \" No header on page 1.
.so /usr/lib/tmac/tmac.m \" Points to "mm" package, in /usr/lib/macros.
...\" -------------------------------------------------------------------------
...\" Next, twiddle the "mm" package to suit our preferred style.
...\" -------------------------------------------------------------------------
...\" Point size and font types.
...\" -------------------------------------------------------------------------
.if n .fp 1 R \" "Regular" font ONLY -- don't use any others in nroff.
.if t \{ .S 10 12 \" Point size = 10, vertical spacing = 12.
...\" Note: Some systems give different names to these fonts.
.fp 1 R \" Times roman.
.fp 2 I \" Times italic.
.fp 3 B \" Times bold.
.fp 4 BI \" Times bold italic.
.fp 5 CW \" Courier.
.fp 6 CI \" Courier oblique.
.fp 7 CB \" Courier bold.
.fp 8 CX \" Courier bold oblique.
.fp 9 H \" Helvetica.
.fp 10 HI \" Helvetica oblique.
.fp 11 HB \" Helvetica bold.
.fp 12 HX \" Helvetica bold oblique.
.fp 13 S \} \" Special symbol font -- normally only called automatically.
...\" -------------------------------------------------------------------------
...\" Headings; page header and footers; titles.
...\" -------------------------------------------------------------------------
.nr Ej 0 \" No eject for first-level headings.
.nr Hs 7 \" Heading space level = blank line after heading (all levels).
.nr Hb 7 \" Heading break level = break after heading (all levels).
.nr Hi 1 \" Post-heading indent = paragraph indent.
.nr Hc 0 \" Heading centering = none.
.if n .ds HF 1 1 1 1 1 1 1 \" Heading fonts = regular (no underlining).
.if t .ds HF 11 11 11 11 11 11 11 \" Heading fonts = Helvetica bold.
.if t .ds HP 0 0 0 0 0 0 0 \" Heading point sizes (= default).
.HM 1 1 1 1 1 1 1 \" Heading mark = arabic (all levels).
.nr Hu 1 \" Unnumbered heading level = 1 (see aH macro, below).
.de HX \" Beginning-of-heading processing.
.in 0 \" Left justify headings.
.ie     \\$2=0 .ds }0\" Null string heading mark for HU.
.el .ie \\$1=1 .ds }0 \\n(H1.\ \&\" Heading marks = dotted sections + 1 space.
.el .ie \\$1=2 .ds }0 \\n(H1.\\n(H2.\ \&
.el .ie \\$1=3 .ds }0 \\n(H1.\\n(H2.\\n(H3.\ \&
.el .ie \\$1=4 .ds }0 \\n(H1.\\n(H2.\\n(H3.\\n(H4.\ \&
.el .ie \\$1=5 .ds }0 \\n(H1.\\n(H2.\\n(H3.\\n(H4.\\n(H5.\ \&
.el .ie \\$1=6 .ds }0 \\n(H1.\\n(H2.\\n(H3.\\n(H4.\\n(H5.\\n(H6.\ \&
.el .if \\$1=7 .ds }0 \\n(H1.\\n(H2.\\n(H3.\\n(H4.\\n(H5.\\n(H6.\\n(H7.\ \&
..
.de HZ \" End-of-heading processing.
.if n .in 3 \" Indent body of doc by 3 columns in nroff.
.if t .in 0 \" Don't indent in troff.
..
.if n .ds hB \&\" Page header/footer font begin in nroff.
.if t .ds hB \f9\" Page header/footer font begin in troff.
.if n .ds hE \&\" Page header/footer font end in nroff.
.if t .ds hE \fP\" Page header/footer font end in troff.
.if n .ds kB \&\" Doc header font begin in nroff.
.if t .ds kB \f(11\" Doc header font begin in troff.
.if n .ds kE \&\" Doc header font end in nroff.
.if t .ds kE \f1\" Doc header font end in troff.
.de tS \" Title start.
.SP 2 \" 2 blank lines.
.ce 99 \" Center (each line of) title.
.if t \{ .ft 11 \" Bold helvetica.
.S +2 D \} \" Bigger point size.
..
.de tF \" Title finish.
.ce \" Turn off centering.
.SP 1 \" 1 blank line.
.if t \{ .ft 1 \" Return to regular font.
.S P P \} \" Return to regular point size.
..
...\" -------------------------------------------------------------------------
...\" Special Appendix heading macro, .aH.
...\" -------------------------------------------------------------------------
.nr a 0 1 \" Appendix number.
.af a A \" Assign format upper-case alpabetic to number register a.
.de aH \" Appendix heading macro.
.if \\na=0 \{ .nr H1 0 \" Reset H1 to 0.
.HM A 1 1 1 1 1 1 \} \" Heading mark = Upper case alphabetic + arabics.
.HU "APPENDIX \\n+a. \\$1"
..
...\" -------------------------------------------------------------------------
...\" Paragraph stuff.
...\" -------------------------------------------------------------------------
.nr Pt 0 \" Paragraph type = left-justified.
.nr Pi 0 \" Paragraph indent = 0.
.nr Ps 1 \" Paragraph spacing = 1 blank space.
...\" -------------------------------------------------------------------------
...\" Special list macro, .aL (replaces .AL, for all levels).
...\" This should be used for almost all lists (including ".LI "\ "").
...\" The only exception is variable lists (.VL, indented by multiples of 6).
...\" -------------------------------------------------------------------------
.de aL
.nr g \\n(:g
...\" In-line lists should be numbered (by hand): (1), (2), (3), ...
.ie     \\ng=0 .LB 6 0 1 3 a \" 1st level: (a), (b), (c), ...
.el .ie \\ng=1 .LB 6 0 1 3 i \" 2nd level: (i), (ii), (iii), ...
.el .ie \\ng=2 .LB 6 0 1 4 a \" 3rd level: [a], [b], [c], ...
.el .ie \\ng=3 .LB 6 0 1 4 i \" 4th level: [i], [ii], [iii], ...
.el .ie \\ng=4 .LB 6 0 1 6 a \" 5th level: {a}, {b}, {c}, ...
.el .if \\ng=5 .LB 6 0 1 6 i \" 6th level: {i}, {ii}, {iii}, ...
..
.nr Ls 6 \" Blank lines between all list items, by default (but adjustable).
...\" -------------------------------------------------------------------------
...\" Footnote stuff; special footnote string, \*(f!.
...\" -------------------------------------------------------------------------
.if n .ds f! [\\n+(:p]\" Footnote string (replaces \*F in nroff).
.if t .ds f! \\*F\" Footnote string (same as \*F in troff).
.if n .FD 6 \" Footnotes not hyphenated or indented, label left justified.
.if t .FD 5 \" Footnotes hyphenated, not indented, label left justified.
.nr Fs 1 \" 1 blank line between footnotes.
...\" -------------------------------------------------------------------------
...\" Line adjustment stuff.
...\" -------------------------------------------------------------------------
.if n .nr Hy 0 \" No hyphenation in nroff.
.if t .nr Hy 1 \" Hyphenate in troff.
.if n .SA 0 \" Set adjust: left margin only in nroff.
.if t .SA 1 \" Set adjust: left and right margins in troff.
...\" -------------------------------------------------------------------------
...\" Miscellaneous stuff.
...\" -------------------------------------------------------------------------
.ta \" No tabs by default -- set them up by hand as needed.
.nr Si \n(Ls \" Default indent for .DS display macro = 6 (use in troff only).
...\" -------------------------------------------------------------------------
...\" Displays.
...\" -------------------------------------------------------------------------
.de cS \" Display start: no-fill, literal font, no indentation.
.P
.nf \" No fill mode.
.if t .ft 5 \" Constant width font in troff.
..
...\" Within .cS, ".ne N"'s can be added by hand, but should be minimized.
.de cF \" Display finish.
.if t .ft 1 \" Back to standard font in troff.
.fi \" Fill mode.
.P
..
.de dS \" Display start: no-fill, literal font, with indentation.
.P
.aL \" Use .aL macro for consistent indentation.
.nf \" No fill mode.
.LI "\ " \" List item will no (visible) marker.
.if t .ft 5 \" Constant width font in troff.
..
...\" Within .dS, ".ne N"'s can be added by hand, but should be minimized.
.de dF \" Display finish.
.if t .ft 1 \" Back to standard font in troff.
.fi \" Fill mode.
.LE
.P
..
.de iS \" Indent start: fill, regular font, with indentation.
.P
.aL
.LI "\ "
..
.de iF \" Indent finish.
.LE
.P
..
.ds nH NOTE\"Default note header string -- can be changed by author.
.de nS \" Note start: fill, italics font, with indentation.
.P
.aL \" Use .aL macro for consistent indentation.
.LI "\ " \" List item will no (visible) marker.
.if t .ft 2 \" Italics font in troff, and reverse roman <--> italic fonts:
.if n .ds iB _\" Italics/emphasis primary font begin in nroff.
.if t .ds iB \f1\" Italics/emphasis primary font begin in troff.
.if n .ds iE _\" Italics/emphasis primary font end in nroff.
.if t .ds iE \fP\" Italics/emphasis primary font end in troff.
.ie \\n(.$=0 \\*(nH:\" Default header string if none supplied by author.
.el \\$1:\" Header string supplied by author as argument to .nS macro.
..
.de nF \" Note finish.
.if t .ft 1 \" Back to standard font in troff, and remap font macros:
.if n .ds iB _\" Italics/emphasis primary font begin in nroff.
.if t .ds iB \f2\" Italics/emphasis primary font begin in troff.
.if n .ds iE _\" Italics/emphasis primary font end in nroff.
.if t .ds iE \fP\" Italics/emphasis primary font end in troff.
.LE
.P
..
...\" -------------------------------------------------------------------------
...\" Quotation marks and font toggles.
...\" -------------------------------------------------------------------------
.if n .ds qB \&"\" Quotation begin in nroff.
.if t .ds qB ``\" Quotation begin in troff.
.if n .ds qE \&"\" Quotation end in nroff.
.if t .ds qE ''\" Quotation end in troff.
.if n .ds iB _\" Italics/emphasis primary font begin in nroff.
.if t .ds iB \f2\" Italics/emphasis primary font begin in troff.
.if n .ds iE _\" Italics/emphasis primary font end in nroff.
.if t .ds iE \fP\" Italics/emphasis primary font end in troff.
.if n .ds bB *\" Bold font begin in nroff.
.if t .ds bB \f3\" Bold font begin in troff.
.if n .ds bE *\" Bold font end in nroff.
.if t .ds bE \fP\" Bold font end in troff.
.if n .ds lB `\" Literal font begin in nroff.
.if t .ds lB \f5\" Literal font begin in troff.
.if n .ds lE '\" Literal font end in nroff.
.if t .ds lE \fP\" Literal font end in troff.
.if n .ds jB <\" Italics/emphasis literal font begin in nroff.
.if t .ds jB \fP\f6\" Italics/emphasis literal font begin in troff.
.if n .ds jE >\" Italics/emphasis literal font end in nroff.
.if t .ds jE \fP\f5\" Italics/emphasis literal font end in troff.
...\" -------------------------------------------------------------------------
...\" No diffmarks by default, i.e., define .mc to be null.
...\" (Comment out this null definition to turn diffmarking on.)
...\" -------------------------------------------------------------------------
.de mc
..
...\" =========================================================================
...\" Finally, it's time to start writing the document!
...\" The OSF-RFC author modifies the following header/footer info.
...\" (The major/minor number is assigned by the OSF-RFC Editor.)
...\" =========================================================================
.ND "May 1995" \" Date must be hard-coded.
.PH "$\*(hBOSF-RFC 76.0$Multi-Threading the DFS Repserver$\\\\*(DT\*(hE$"
.PF "$\*(hBClevenger$DRAFT #1$Page \\\\n%\*(hE$" \" Draft version.
.PF "$\*(hBClevenger$$Page \\\\n%\*(hE$" \" Final version.
...\"
...\" Following are the first printed lines (header info) of the document:
...\"
\&\" Force top-of-first-page trap to position the following info correctly.
.tl $\*(kBOpen Software Foundation$$D. Clevenger (Transarc)\*(kE$
.tl $\*(kBRequest For Comments: 76.0$$\*(kE$
.tl $\*(kB\*(DT$$\*(kE$
.tS \" Title, in all capitals (can span multiple lines):
MULTI-THREADING THE DFS REPLICATION SERVER
.tF
...\" =========================================================================
...\" Now, the actual body of the document!!
...\" Heading capitalization style:
...\"     1st level: CAPITALIZE ALL WORDS
...\"     2nd level: Capitalize Initial Letters of All (Significant) Words
...\"     3rd-7th level: Capitalize first letter of first word only
...\" =========================================================================
.P
.H 1 "INTRODUCTION" \" Always start with an introduction section.
.P
The goal of this work is to modify the DFS replication server,
\*(lBrepserver\*(lE, to allow
for more than one thread of control for managing local replicas.  As a
particular \*(lBrepserver\*(lE is responsible for managing more local
replicas (because more replication sites are added to the associated server),
the administrator will be able to increase the number of \*(lBrepserver\*(lE
threads, keeping the level of service at some desired level.
.P
The current \*(lBrepserver\*(lE only allows for one thread of control, so,
as more load is placed on the \*(lBrepserver\*(lE, it quickly becomes unable
to meet the demands for its service.  This is particularly undesirable
since the DFS replication scheme is highly dependent on replicas being
updated in a timely fashion.
.P
.H 1 "CURRENT IMPLEMENTATION"
.P
The current \*(lBrepserver\*(lE has some of the features necessary to make
it multi-threaded.  It has some locks defined for global data structures,
but in many cases the use of locks is inadequate to perform
correctly in a multi-threaded environment.  Furthermore, the basic
flow of control is not conducive to having multiple threads operating
concurrently.  For these reasons the number of threads is statically
set to 1.  Each thread follows an algorithm roughly like this:
.P
.dS
.ne 12
for (;;) {
    unsigned int    t[5];  /* Array of time values */

    MakeCleanKills();
    t[0] = RenewTokens();
    t[1] = StartImporting();
    t[2] = ForceKeepAlives();
    t[3] = DoWillCalls();
    t[4] = ExpireVolChanges();

    sleep(min(t[0..4]) - current_time);
}
.dF
.P
Many of the individual actions here (\*(lBMakeCleanKills()\*(lE,
\*(lBRenewTokens()\*(lE, etc.) follow a structure something like this:
.P
.dS
.ne 13
ReadLock(rep_table_lock);
foreach replica in rep_table {
    WriteLock(replica.lock);
    if (replica needs attention) {
        Update some replica state;
        Unlock(replica);
        SomeRPC(replica.server, replica);
        WriteLock(replica.lock);
        Update some more replica state;
    }
    Unlock(replica.lock);
}
Unlock(rep_table_lock);
.dF
.P
One problem with this model is that the threads will tend to
\*(qBpile up\*(qE trying to get the write lock on a replica structure
that some other thread is servicing.  Furthermore, this will make it
very likely that some other thread will lock the replica structure as
soon as the original thread drops the lock to make an RPC.  Finally, the
\*(lBrep_table_lock\*(lE is held across almost every RPC.  Even though
the \*(lBrep_table_lock\*(lE is usually only read-locked, this seems bad.
.P
Another major problem with the current implementation is that there
are no locks protecting the shared connection structures, so there is
no chance of the current \*(lBrepserver\*(lE operating correctly with
multiple threads.
.P
.H 1 "NEW IMPLEMENTATION"
.P
To remedy the problems of the current implementation, we are proposing
a new threading model with the following basic properties:
.P
.aL
.LI
A pool of \*(lB\*(jBN\*(jE rep\*(lE threads for per-replica
processing, where \*(lB\*(jBN\*(jE\*(lE is specified by the
\*(lB-mainprocs\*(lE command-line switch to the \*(lBrepserver\*(lE.
.LI
A \*(lBreaper\*(lE thread that will destroy and/or clean up moribund
replica filesets and structures.
.LI
A \*(lBbackground\*(lE thread for keep-alive and will-call processing.
.LE
.P
We want to get away from the current model where the service thread
loops through the list of all replicas looking for work.  To
accomplish this, we will implement a priority queue where each replica
structure (representing one local replica) is stored in the queue
according to time at which it next requires service.  Each of the rep
threads will block trying to get a replica from the priority queue,
and will be unblocked when it comes time to service a replica.  When
unblocked each thread will be responsible for servicing the needs of
only one replica.
.P
.H 2 "Priority Queue"
.P
The priority queue will be implemented as an abstract data type that
is not particularly specific to the needs of the \*(lBrepserver\*(lE.  If
its functionality proves useful, it could easily be used in other
applications.  The interface definition follows:
.P
.dS
.ne 1
typedef void * rep_queue_cookie_t;

.ne 9
/*
 * The repserver specific data for a queue item
 */
typedef struct rep_queue_item {
    struct rep_queue_item *rqi_next;
    time_t                 rqi_deadline;
    unsigned               rqi_flags;
    void                   *rqi_data;
} rep_queue_item_t;

.ne 8
/*
 * The definition of a priority queue
 */
typedef struct rep_queue {
    pthread_mutex_t        rq_mutex;
    pthread_cond_t         rq_hasData;
    struct rep_queue_item *rq_head;
} rep_queue_t;
.dF
.P
The are two functions used for initializing the priority queue
package.  The first,
.P
.dS
.ne 4
void
repq_InitICL(
    struct icl_set *iclSetP
);
.dF
.P
initializes the ICL set for debugging the \*(lBrepq\*(lE module.
.P
The second,
.P
.dS
.ne 4
void
repq_Init(
    rep_queue_t *rqP
);
.dF
.P
initializes the priority queue specified by \*(lBrqP\*(lE.
.P
When a new entry is to be initially inserted onto a queue,
.P
.dS
.ne 6
rep_queue_cookie_t
repq_Enter(
    rep_queue_t *rqP,
    void        *data,
    time_t       deadline
);
.dF
.P
allocates and places an entry on the queue for the first time.  The queue
specified with the \*(lBrqP\*(lE is maintained in
earliest-to-latest-deadline order.  The internal queue item stores the
\*(lBdata\*(lE pointer
and \*(lBdeadline\*(lE and returns a \*(lBrep_queue_cookie_t\*(lE for
passing to other priority queue routines.
.P
To permanently remove an item from the priority queue, use
.P
.dS
.ne 5
void
repq_Delete(
    rep_queue_t        *rqP,
    rep_queue_cookie_t  cookie
);
.dF
.P
If the entry represented by \*(lBcookie\*(lE is in use, the deletion
is deferred until the next call to \*(lBrepq_Put()\*(lE.
.P
The item at the head of the queue is retrieved with
.P
.dS
.ne 5
void *
repq_Get(
    rep_queue_t        *rqP,
    rep_queue_cookie_t *outCookieP
);
.dF
.P
if its deadline has passed; otherwise, \*(lBrepq_Get()\*(lE sleeps until
an item's deadline occurs.  The internally stored data pointer is returned,
and a pointer to the queue item is placed in the out parameter
\*(lBoutCookieP\*(lE.
.P
If the caller wants to put an item back on the priority queue, then
.P
.dS
.ne 6
void
repq_Put(
    rep_queue_t       *rqP,
    rep_queue_cookie_t cookie,
    time_t             deadline
);
.dF
.P
places the item back on the queue with a new deadline.  The actual
deadline is set to the earlier of \*(lBdeadline\*(lE and any deadline set
with \*(lBrep_ResetDeadline()\*(lE since the item was retrieved with
\*(lBrepq_Get()\*(lE.
If the item represented by \*(lBcookie\*(lE was
marked for deferred deletion, it is deleted at this time instead.
.P
An item's deadline may be reset by calling
.P
.dS
.ne 5
void
repq_ResetDeadline(
    rep_queue_t       *rqP,
    rep_queue_cookie_t cookie,
    time_t             newDeadline);
.dF
.P
with a new deadline.  This routine can be called at any time,
regardless of whether the item represented by \*(lBcookie\*(lE is currently
on the queue or not.  The actual deadline is only set to the new value
if the current deadline is later than \*(lBnewDeadline\*(lE.  If the item
represented by \*(lBcookie\*(lE is currently on the queue and now has
an earlier deadline, it may be necessary to reorder the queue.
.P
Using the priority queue interface described above, each \*(lBrep\*(lE
thread will now follow an algorithm that looks abstractly like this:
.P
.dS
.ne 5
    for (;;) {
        time_t        t[3];  /* Array of time values */

        replica = repq_Get(rep_queue, &cookie);
        WriteLock(replica.lock);
.ne 14
        if (replica destroyed) {     /* Someone did a rmsite */
            Unlock(replica.lock);
            repq_Delete(rep_queue, cookie);
            WriteLock(rep_table_lock);
            Remove replica from rep_table;
            Unlock(rep_table_lock);
            Release(replica);        /* Once for rep_queue */
            Release(replica);        /* Once for rep_table */
            /*
             * The last release will enter replica on the
             * death_queue, another priority queue that is
             * managed by the reaper thread.
             */
        }
.ne 6
        else {
            t[0] = RenewTokens(replica);
            t[1] = StartImporting(replica);
            t[2] = ExpireVolChanges(replica);
            Unlock(replica.lock);
        }
.ne 7
        /*
         * If the replica was deleted the next action time is
         * irrelevant, since this call will just free up the
         * queue item.
         */
        repq_Put(repq_queue, cookie, min(t[0..2]));
    }
.dF
.P
.H 2 "Host Connection Management"
.P
One of the main deficiencies with the current design is in its
management of connection structures.  To remedy this, a new module
will be introduced to manage these shared objects in a safe and
correct manner.  The interface definition for this module is as follows:
.P
.dS
.ne 3
/*
 * Connection types
 */

.ne 4
typedef enum rep_host_conn_type {
    REPH_CONN_TYPE_FS,         /* Fileserver connection type */
    REPH_CONN_TYPE_FT          /* Ftserver connection type */
} rep_host_conn_type_t;

.ne 3
/*
 * A server connection
 */

.ne 6
typedef struct rep_host_conn {
    /*
     * The reference count is protected by rhc_mutex.
     */
    pthread_mutex_t      rhc_mutex;
    int                  rhc_refCount;

.ne 8
    /*
     * These members are not really protected by any lock, but
     * they are guaranteed not to change as long as there is a
     * reference to this structure.
     */
    rep_host_conn_type_t rhc_type;
    handle_t             rhc_handle; /* RPC binding handle */
} rep_host_conn_t;

.ne 3
/*
 * A host structure for cacheing server connections
 */

.ne 6
typedef struct rep_host {
    /*
     * The following members are protected by the global
     * hostTableLock.
     */
    struct rep_host     *rh_next;
    unsigned             rh_refCount;

.ne 9
    /*
     * The following members are not really protected by any
     * lock, but  they are guaranteed not to change as long as
     * there is a reference to this structure.  Note that the
     * host table itself holds a reference.
     */
    struct afsNetAddr   rh_addrs[ADDRSINSITE];
    unsigned            rh_numAddrs;
    char                rh_name[MAXKPRINCIPALLEN];

.ne 12
    /*
     * Fileserver connection information.
     * The following members are protected by rh_fsMutex.
     */
    pthread_mutex_t     rh_fsMutex;
    unsigned            rh_fsFlags;
    pthread_cond_t      rh_fsSetContextDone;
    rep_host_conn_t    *rh_fsConnP;
    time_t              rh_fsLastSuccess;
    unsigned            rh_fsHostLifeGuarantee;
    unsigned            rh_fsHostLeadTime;
    afsUUID             rh_fsUUID;
.ne 7
    /*
     * Ftserver connection information.
     * The following members are protected by rh_ftMutex.
     */
    pthread_mutex_t     rh_ftMutex;
    rep_host_conn_t    *rh_ftConnP;
} rep_host_t;

.ne 5
/*
 * Fileserver flag bits for rh_fsFlags
 */
#define REPH_FS_FLAG_DOING_SET_CONTEXT           0x1
#define REPH_FS_FLAG_AWAITING_SET_CONTEXT        0x2
.dF
.P
The \*(lBrepserver\*(lE host subsystem is initialized by calling
.P
.dS
.ne 7
void
reph_Init(
    const char       *cellName,
    unsigned32        revokeEpoch,
    const afsNetData *revokeCallbackAddr,
    struct icl_set   *iclSetP
);
.dF
.P
The \*(lBrevokeEpoch\*(lE parameter is the start time of this
\*(lBrepserver\*(lE and is passed as one of the parameters to
\*(lBAFS_SetContext()\*(lE.  The \*(lBrevokeCallbackAddr\*(lE parameter
is also passed to \*(lBAFS_SetContext()\*(lE for token revocation
RPC calls.
.P
.dS
.ne 6
rep_host_t *
reph_GetHost(
    struct afsNetAddr *addrs,
    unsigned           numAddrs,
    char              *hostName
);
.dF
.P
gets a host structure for the host with the given addresses.  This
function may return \*(lBNULL\*(lE if there is no memory available for
the new host structure.  A reference to this host structure will be
held for the caller.  When a new host structure is allocated, the table
of host structures also holds an additional reference.
.P
.dS
.ne 4
void
reph_PutHost(
    rep_host_t *hostP
);
.dF
.P
drops a reference to a host that was returned by \*(lBreph_GetHost()\*(lE.
.P
To retrieve a connection for a given host,
.P
.dS
.ne 6
long
reph_GetConn(
    rep_host_t          *hostP,
    rep_host_conn_type_t connType,
    rep_host_conn_t    **connPP
);
.dF
.P
gets the connection to the host represented by \*(lBhostP\*(lE.  The
\*(lBconnType\*(lE argument specifies the type of server for the
connection.  The current choices are \*(lBfileserver\*(lE and
\*(lBftserver\*(lE connections.  If an error occurs while trying to set
up a connection, \*(lBNULL\*(lE will be returned in \*(lB*connPP\*(lE and
the return code will be set to a non-zero value.  After receiving a
successful connection, the caller should make RPCs using the
\*(lBrhc_handle\*(lE member.  When finished with the connection, the caller
should release it by calling \*(lBreph_PutConn()\*(lE.
.P
A reference to the connection will be held for the caller when there
is no error.  Also, when a new connection is created, an additional
reference is held for the host structure in \*(lBhostP\*(lE.
.P
When an error occurs using a connection, calling
.P
.dS
.ne 6
long
reph_ResetConn(
    rep_host_t       *hostP,
    rep_host_conn_t **connPP,
    long              connError
);
.dF
.P
will attempt to reset the connection.  The \*(lBconnError\*(lE parameter
should contain the error code from the failed operation.
.P
The return values will be:
.P
.aL
.LI
0 \*(EM \*(lBconnError\*(lE indicates a condition which may be
correctable  with a reset, and the reset succeeded.  The user can retry
the operation that failed.  When the user is  finished with the connection,
they should release it  by calling \*(lBreph_PutConn()\*(lE.
.LI
\*(lBREP_ERR_RESETFAILED\*(lE \*(EM \*(lBconnError\*(lE indicates a
condition which may be correctable with a reset, but the reset
failed.  The value of \*(lB*connPP\*(lE may be set to \*(lBNULL\*(lE.  If
so, do not call \*(lBreph_PutConn()\*(lE on it.  Currently, the only case
where \*(lBREP_ERR_RESETFAILED\*(lE is returned without setting
\*(lB*connPP\*(lE to \*(lBNULL\*(lE is when \*(lBconnError\*(lE is
\*(lBrpc_s_auth_tkt_expired\*(lE and the attempt to refresh the local
auth context failed.
.LI
\*(lBconnError\*(lE \*(EM The return of \*(lBconnError\*(lE indicates
a condition which is not correctable by resetting the connection, so
the same error as was passed is returned.  In this case, it is still
necessary  to release the connection by calling \*(lBreph_PutConn()\*(lE.
.LE
.P
A reference to a connection is dropped by calling
.P
.dS
.ne 4
void
reph_PutConn(
    rep_host_conn_t *connP
);
.dF
.P
This reference should have been obtained from \*(lBreph_GetConn()\*(lE
or \*(lBreph_ResetConn()\*(lE.
.P
After a successful RPC call to a \*(lBfileserver\*(lE, use
.P
.dS
.ne 5
void
reph_MergeSuccess(
    rep_host_t *hostP,
    time_t      successTime
);
.dF
.P
to update the time \*(lBrh_fsLastSuccess\*(lE field of the host structure
given by \*(lBhostP\*(lE.  The time in \*(lBsuccessTime\*(lE is only
stored if it is more recent than the currently stored success time.
.P
The number of hosts in the table is obtained with
.P
.dS
.ne 4
unsigned
reph_GetNumHosts(
    void
);
.dF
.P
.H 1 "TESTING"
.P
To determine whether the multi-threaded implementation meets the above
goal, we plan to develop a test that will stress the \*(lBrepserver\*(lE
by having it manage a number of local replicas, all of which will be in
constant need of updating due to frequent changes to their source
filesets.  The same test will be run on both the current
single-threaded \*(lBrepserver\*(lE, as well as the improved multi-threaded
version.  The test will report a running percentage that will represent
the amount of time that the test replicas are kept up to date, according
to their replication parameters.  We expect a significant gain in the
multi-threaded case.
.P
Besides verifying that adding multiple threads helps, this test will
put significant stress on the multi-threading code, so it will be
useful as a debugging tool.  Finally, the test will provide confidence
in the new code as continuous-hours-of-operation statistics increase
to reasonable levels.
.P
...\" =========================================================================
...\" Acknowledgements if any go here, at end of body of doc.
...\" =========================================================================
.P
.H 1 "ACKNOWLEDGEMENTS"
.P
Jeff Prem (then at Transarc, now at FORE Systems) was instrumental in
early drafts of this document.
.P
...\" =========================================================================
...\" Author's address goes here, as unnumbered heading, at end of doc.
...\" =========================================================================
.P
.ne 1+3+5 \" Should be "3+5", but troff screws up on last-page-boundary ...
.HU "AUTHOR'S ADDRESS"
.P
.tl $Daryl Clevenger$$Internet email: dlc@transarc.com$
.tl $Transarc Corp.$$Telephone: +1-412-338-4426$
.tl $707 Grant Street$$$
.tl $Pittsburgh, PA 15219$$$
.tl $USA$$$
...\" =========================================================================
...\" Done!
...\" =========================================================================
