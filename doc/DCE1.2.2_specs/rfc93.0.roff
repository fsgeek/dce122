...\" OSF-RFC 93.0
...\"
...\" FORMATTING INSTRUCTIONS for this RFC (these may vary per RFC):
...\"       nroff -Tlpr rfc93.0.roff > rfc93.0.txt
...\"       troff -Tps rfc93.0.roff | <ps-post-processor> > rfc93.0.ps
...\" (Where "troff" means "device-independent troff", or "ditroff".)
...\"
...\" If troff is not supported for a given RFC, insert the following:
...\" .if t \{\
...\" .tm *** Troff not supported for this RFC.
...\" .ex \}
...\"
...\" =========================================================================
...\" This template first sets a bunch of *roff options (authors/readers
...\" don't usually have to know about these).
...\" Then it defines some strings and macros, many of which deal with
...\" things that differ between nroff & troff (some of these may not be
...\" perfect, but they're better than nothing -- to do a really good
...\" job would require a real semantic markup language.
...\" Convention: "Begin/End" for strings, "Start/Finish" for macros.
...\" Strings:
...\"       \*(f!        - Footnote string (replaces \*F).
...\"       \*(hB, \*(hE - Page header/footer font (internal use).
...\"       \*(kB, \*(kE - Doc header font (internal use).
...\"       \*(qB, \*(qE - Quotations.
...\"       \*(iB, \*(iE - Italics/emphasis in primary font.
...\"       \*(bB, \*(bE - Bold font.
...\"       \*(lB, \*(lE - Literal font.
...\"       \*(jB, \*(jE - Italics/emphasis in literal font.
...\"       \*(nH        - Default note header string.
...\" Macros:
...\"       .aH      - Appendix header macro (uses number register \na).
...\"       .aL      - Automatic list macro (replaces .AL; uses num reg \ng).
...\"       .tS, .tF - Title start/finish (internal use).
...\"       .cS, .cF - Displays (no-fill) without indentation.
...\"       .dS, .dF - Displays (no-fill) with indentation.
...\"       .iS, .iF - Indented (fill) text.
...\"       .nS, .nF - Note.
...\" -------------------------------------------------------------------------
...\" First, set up some number registers here (instead of on command line),
...\" and include the "mm" macro package here (instead of on command line).
...\" -------------------------------------------------------------------------
.if n .nr L 66 \" Nroff page length = 66 lines.
.if t .nr L 11i \" Troff page length = 11 inches.
.if n .nr W 72 \" Nroff page width = 72 columns.
.if t .nr W 6.5i \" Troff page width = 6.5 inches.
.if n .nr O 3 \" Nroff page offset = 3 columns.
.if t .nr O 0.75i \" Troff page offset = 0.75 inches.
.nr N 2 \" No header on page 1.
.so /usr/lib/tmac/tmac.m \" Points to "mm" package, in /usr/lib/macros.
...\" -------------------------------------------------------------------------
...\" Next, twiddle the "mm" package to suit our preferred style.
...\" -------------------------------------------------------------------------
...\" Point size and font types.
...\" -------------------------------------------------------------------------
.if n .fp 1 R \" "Regular" font ONLY -- don't use any others in nroff.
.if t \{ .S 10 12 \" Point size = 10, vertical spacing = 12.
...\" Note: Some systems give different names to these fonts.
.fp 1 R \" Times roman.
.fp 2 I \" Times italic.
.fp 3 B \" Times bold.
.fp 4 BI \" Times bold italic.
.fp 5 CW \" Courier.
.fp 6 CI \" Courier oblique.
.fp 7 CB \" Courier bold.
.fp 8 CX \" Courier bold oblique.
.fp 9 H \" Helvetica.
.fp 10 HI \" Helvetica oblique.
.fp 11 HB \" Helvetica bold.
.fp 12 HX \" Helvetica bold oblique.
.fp 13 S \} \" Special symbol font -- normally only called automatically.
...\" -------------------------------------------------------------------------
...\" Headings; page header and footers; titles.
...\" -------------------------------------------------------------------------
.nr Ej 0 \" No eject for first-level headings.
.nr Hs 7 \" Heading space level = blank line after heading (all levels).
.nr Hb 7 \" Heading break level = break after heading (all levels).
.nr Hi 1 \" Post-heading indent = paragraph indent.
.nr Hc 0 \" Heading centering = none.
.if n .ds HF 1 1 1 1 1 1 1 \" Heading fonts = regular (no underlining).
.if t .ds HF 11 11 11 11 11 11 11 \" Heading fonts = Helvetica bold.
.if t .ds HP 0 0 0 0 0 0 0 \" Heading point sizes (= default).
.HM 1 1 1 1 1 1 1 \" Heading mark = arabic (all levels).
.nr Hu 1 \" Unnumbered heading level = 1 (see aH macro, below).
.de HX \" Beginning-of-heading processing.
.in 0 \" Left justify headings.
.ie     \\$2=0 .ds }0\" Null string heading mark for HU.
.el .ie \\$1=1 .ds }0 \\n(H1.\ \&\" Heading marks = dotted sections + 1 space.
.el .ie \\$1=2 .ds }0 \\n(H1.\\n(H2.\ \&
.el .ie \\$1=3 .ds }0 \\n(H1.\\n(H2.\\n(H3.\ \&
.el .ie \\$1=4 .ds }0 \\n(H1.\\n(H2.\\n(H3.\\n(H4.\ \&
.el .ie \\$1=5 .ds }0 \\n(H1.\\n(H2.\\n(H3.\\n(H4.\\n(H5.\ \&
.el .ie \\$1=6 .ds }0 \\n(H1.\\n(H2.\\n(H3.\\n(H4.\\n(H5.\\n(H6.\ \&
.el .if \\$1=7 .ds }0 \\n(H1.\\n(H2.\\n(H3.\\n(H4.\\n(H5.\\n(H6.\\n(H7.\ \&
..
.de HZ \" End-of-heading processing.
.if n .in 3 \" Indent body of doc by 3 columns in nroff.
.if t .in 0 \" Don't indent in troff.
..
.if n .ds hB \&\" Page header/footer font begin in nroff.
.if t .ds hB \f9\" Page header/footer font begin in troff.
.if n .ds hE \&\" Page header/footer font end in nroff.
.if t .ds hE \fP\" Page header/footer font end in troff.
.if n .ds kB \&\" Doc header font begin in nroff.
.if t .ds kB \f(11\" Doc header font begin in troff.
.if n .ds kE \&\" Doc header font end in nroff.
.if t .ds kE \f1\" Doc header font end in troff.
.de tS \" Title start.
.SP 2 \" 2 blank lines.
.ce 99 \" Center (each line of) title.
.if t \{ .ft 11 \" Bold helvetica.
.S +2 D \} \" Bigger point size.
..
.de tF \" Title finish.
.ce \" Turn off centering.
.SP 1 \" 1 blank line.
.if t \{ .ft 1 \" Return to regular font.
.S P P \} \" Return to regular point size.
..
...\" -------------------------------------------------------------------------
...\" Special Appendix heading macro, .aH.
...\" -------------------------------------------------------------------------
.nr a 0 1 \" Appendix number.
.af a A \" Assign format upper-case alpabetic to number register a.
.de aH \" Appendix heading macro.
.if \\na=0 \{ .nr H1 0 \" Reset H1 to 0.
.HM A 1 1 1 1 1 1 \} \" Heading mark = Upper case alphabetic + arabics.
.HU "APPENDIX \\n+a. \\$1"
..
...\" -------------------------------------------------------------------------
...\" Paragraph stuff.
...\" -------------------------------------------------------------------------
.nr Pt 0 \" Paragraph type = left-justified.
.nr Pi 0 \" Paragraph indent = 0.
.nr Ps 1 \" Paragraph spacing = 1 blank space.
...\" -------------------------------------------------------------------------
...\" Special list macro, .aL (replaces .AL, for all levels).
...\" This should be used for almost all lists (including ".LI "\ "").
...\" The only exception is variable lists (.VL, indented by multiples of 6).
...\" -------------------------------------------------------------------------
.de aL
.nr g \\n(:g
...\" In-line lists should be numbered (by hand): (1), (2), (3), ...
.ie     \\ng=0 .LB 6 0 1 3 a \" 1st level: (a), (b), (c), ...
.el .ie \\ng=1 .LB 6 0 1 3 i \" 2nd level: (i), (ii), (iii), ...
.el .ie \\ng=2 .LB 6 0 1 4 a \" 3rd level: [a], [b], [c], ...
.el .ie \\ng=3 .LB 6 0 1 4 i \" 4th level: [i], [ii], [iii], ...
.el .ie \\ng=4 .LB 6 0 1 6 a \" 5th level: {a}, {b}, {c}, ...
.el .if \\ng=5 .LB 6 0 1 6 i \" 6th level: {i}, {ii}, {iii}, ...
..
.nr Ls 6 \" Blank lines between all list items, by default (but adjustable).
...\" -------------------------------------------------------------------------
...\" Footnote stuff; special footnote string, \*(f!.
...\" -------------------------------------------------------------------------
.if n .ds f! [\\n+(:p]\" Footnote string (replaces \*F in nroff).
.if t .ds f! \\*F\" Footnote string (same as \*F in troff).
.if n .FD 6 \" Footnotes not hyphenated or indented, label left justified.
.if t .FD 5 \" Footnotes hyphenated, not indented, label left justified.
.nr Fs 1 \" 1 blank line between footnotes.
...\" -------------------------------------------------------------------------
...\" Line adjustment stuff.
...\" -------------------------------------------------------------------------
.if n .nr Hy 0 \" No hyphenation in nroff.
.if t .nr Hy 1 \" Hyphenate in troff.
.if n .SA 0 \" Set adjust: left margin only in nroff.
.if t .SA 1 \" Set adjust: left and right margins in troff.
...\" -------------------------------------------------------------------------
...\" Miscellaneous stuff.
...\" -------------------------------------------------------------------------
.ta \" No tabs by default -- set them up by hand as needed.
.nr Si \n(Ls \" Default indent for .DS display macro = 6 (use in troff only).
...\" -------------------------------------------------------------------------
...\" Displays.
...\" -------------------------------------------------------------------------
.de cS \" Display start: no-fill, literal font, no indentation.
.P
.nf \" No fill mode.
.if t .ft 5 \" Constant width font in troff.
..
...\" Within .cS, ".ne N"'s can be added by hand, but should be minimized.
.de cF \" Display finish.
.if t .ft 1 \" Back to standard font in troff.
.fi \" Fill mode.
.P
..
.de dS \" Display start: no-fill, literal font, with indentation.
.P
.aL \" Use .aL macro for consistent indentation.
.nf \" No fill mode.
.LI "\ " \" List item will no (visible) marker.
.if t .ft 5 \" Constant width font in troff.
..
...\" Within .dS, ".ne N"'s can be added by hand, but should be minimized.
.de dF \" Display finish.
.if t .ft 1 \" Back to standard font in troff.
.fi \" Fill mode.
.LE
.P
..
.de iS \" Indent start: fill, regular font, with indentation.
.P
.aL
.LI "\ "
..
.de iF \" Indent finish.
.LE
.P
..
.ds nH NOTE\"Default note header string -- can be changed by author.
.de nS \" Note start: fill, italics font, with indentation.
.P
.aL \" Use .aL macro for consistent indentation.
.LI "\ " \" List item will no (visible) marker.
.if t .ft 2 \" Italics font in troff, and reverse roman <--> italic fonts:
.if n .ds iB _\" Italics/emphasis primary font begin in nroff.
.if t .ds iB \f1\" Italics/emphasis primary font begin in troff.
.if n .ds iE _\" Italics/emphasis primary font end in nroff.
.if t .ds iE \fP\" Italics/emphasis primary font end in troff.
.ie \\n(.$=0 \\*(nH:\" Default header string if none supplied by author.
.el \\$1:\" Header string supplied by author as argument to .nS macro.
..
.de nF \" Note finish.
.if t .ft 1 \" Back to standard font in troff, and remap font macros:
.if n .ds iB _\" Italics/emphasis primary font begin in nroff.
.if t .ds iB \f2\" Italics/emphasis primary font begin in troff.
.if n .ds iE _\" Italics/emphasis primary font end in nroff.
.if t .ds iE \fP\" Italics/emphasis primary font end in troff.
.LE
.P
..
...\" -------------------------------------------------------------------------
...\" Quotation marks and font toggles.
...\" -------------------------------------------------------------------------
.if n .ds qB \&"\" Quotation begin in nroff.
.if t .ds qB ``\" Quotation begin in troff.
.if n .ds qE \&"\" Quotation end in nroff.
.if t .ds qE ''\" Quotation end in troff.
.if n .ds iB _\" Italics/emphasis primary font begin in nroff.
.if t .ds iB \f2\" Italics/emphasis primary font begin in troff.
.if n .ds iE _\" Italics/emphasis primary font end in nroff.
.if t .ds iE \fP\" Italics/emphasis primary font end in troff.
.if n .ds bB *\" Bold font begin in nroff.
.if t .ds bB \f3\" Bold font begin in troff.
.if n .ds bE *\" Bold font end in nroff.
.if t .ds bE \fP\" Bold font end in troff.
.if n .ds lB `\" Literal font begin in nroff.
.if t .ds lB \f5\" Literal font begin in troff.
.if n .ds lE '\" Literal font end in nroff.
.if t .ds lE \fP\" Literal font end in troff.
.if n .ds jB <\" Italics/emphasis literal font begin in nroff.
.if t .ds jB \fP\f6\" Italics/emphasis literal font begin in troff.
.if n .ds jE >\" Italics/emphasis literal font end in nroff.
.if t .ds jE \fP\f5\" Italics/emphasis literal font end in troff.
...\" -------------------------------------------------------------------------
...\" No diffmarks by default, i.e., define .mc to be null.
...\" (Comment out this null definition to turn diffmarking on.)
...\" -------------------------------------------------------------------------
.de mc
..
...\" =========================================================================
...\" Finally, it's time to start writing the document!
...\" The OSF-RFC author modifies the following header/footer info.
...\" (The major/minor number is assigned by the OSF-RFC Editor.)
...\" =========================================================================
...\"PUBLISH_CHECK
.ND "February 1996" \" Date must be hard-coded.
...\"PUBLISH_CHECK
.PH "$\*(hBOSF-RFC 93.0$DCE 1.2 Security Scalability$\\\\*(DT\*(hE$"
...\"PUBLISH_CHECK
.PF "$\*(hBBurati$DRAFT #2$Page \\\\n%\*(hE$" \" Draft version.
...\"PUBLISH_CHECK
.PF "$\*(hBBurati$$Page \\\\n%\*(hE$" \" Final version.
...\"
...\" Following are the first printed lines (header info) of the document:
...\"
\&\" Force top-of-first-page trap to position the following info correctly.
...\"PUBLISH_CHECK
.tl $\*(kBOpen Software Foundation$$M. Burati (HP)\*(kE$
...\"PUBLISH_CHECK
.tl $\*(kBRequest For Comments: 93.0\*(kE$
.tl $\*(kB\*(DT$$\*(kE$
...\"PUBLISH_CHECK
.tS \" Title, in all capitals (can span multiple lines):
DCE 1.2 SECURITY SCALABILITY AND PERFORMANCE \*(EM
FUNCTIONAL SPECIFICATION
.tF
...\" =========================================================================
...\" Now, the actual body of the document!!
...\" Heading capitalization style:
...\"     1st level: CAPITALIZE ALL WORDS
...\"     2nd level: Capitalize Initial Letters of All (Significant) Words
...\"     3rd-7th level: Capitalize first letter of first word only
...\" =========================================================================
...\" -------------------------------------------------------------------------
...\" No line-numbers by default
...\" (Uncomment the .nm 1 line to turn line-numbering on.)
...\" -------------------------------------------------------------------------
...\"PUBLISH_CHECK
...\".nm 1 \" Do not page number the final draft
.P
.H 1 "INTRODUCTION" \" Always start with an introduction section.
.P
...\"The first paragraph of the Introduction should be in the form of an
...\"*(iBabstract\*(iE, i.e., a brief description of the component or
...\"subsystem being specified.\*(f!
...\".FS
...\"Note that the formatting conventions of OSF RFC's are in effect,
...\"especially the use of \*(iBmacros\*(iE that simultaneously support ASCII
...\"and PostScript.  See [RFC 0.1] for details on those.  For an actual
...\"example of an RFC having the outline shown here, see [RFC 41.2].  (However,
...\"that RFC used an earlier version of the RFC macros \*(EM again, see
...\"[RFC 0.1] for details.)
...\".FE
For DCE 1.2, HP has agreed to provide 6 engineering months (EM)
of effort toward improving the scalability and performance of
the DCE Security component.  That effort includes looking into a
subset of the changes listed below to determine what was
possible to complete within the given time frame, and what
should be looked at in a future release.  The 6EM agreed to
includes the time devoted to investigate each of these areas and
others relating to customer feedback, the writing of this
functional spec, and the coding, building and testing of any
fixes made as a result of this work.
.P
...\"The remainder of the Introduction introduces the component or subsystem
...\"being specified at a greater level of detail than the abstract in the
...\"first paragraph.
The main driving force for providing scalability enhancements to
DCE 1.2 was to begin to remove the barriers to DCE acceptance
that currently exist for customers who would like to migrate
large (on the order of many tens of thousands, up to a million)
user bases to DCE.  Given the limited timeframe that DCE 1.2 must
be completed and shipped in, and given the large number of other
projects that will be a more visible improvement to the DCE
functionality base, we needed to weed out those items that will
not provide the scalability improvements that we really need to
address, and concentrate on the issues that are currently
barriers to acceptance.
.P
...\"PUBLISH_CHECK
.H 2 "Changes Since Last Publication"
.P
...\"If this is a revision of a previous version, give a list of changes.
Relative to previous drafts, this document now includes further
breakdown of the size and components of each piece of work, and
further distinction of what is scheduled to appear in the 1.2
code base.
.P
.H 1 "TARGET"
.P
...\"Indications of for whom this technology is being built
...\"and how it is supposed to be used.
The target audience of this technology is the same as that of
DCE Security in general, although those that are attempting to
deploy large cells of machines and/or users will benefit the
most from these changes and from future resolution of the
remaining issues.
.P
.H 1 "GOALS AND NON-GOALS"
.P
.nS
Nothing in this document should be construed as a commitment to
provide any of the described functionality unless otherwise
stated.  This specification exists solely for the purposes of
documenting the investigative work completed to determine the
scalability needs of the DCE security component, and to document
the improvements that we are able to implement during the
DCE 1.2 timeframe.
.nF
.P
The \*(iBmain goal\*(iE of this effort is to improve the
performance and/or scalability limits of DCE Security, without
affecting the publicly visible interfaces in any way.  No change
that threatens the security of DCE will be considered for
implementation.
...\"Define the scope of the technology.
.P
It is a goal to attempt to evaluate the
usefulness/risk/work-required of each of the following areas
(the results of these evaluations will be described below):
.P
.aL
.LI
Fine grain checkpointing.
.LI
Replace back-end security database.
.LI
Efficient ACL storage.
.LI
Client binding rewrite
.LI
More efficient memory usage.
.LE
.P
It is \*(iBnot\*(iE a goal of this effort to address any of the
following previously suggested scalability topics:
.P
.aL
.LI
Batch propagations.
.LI
Batch wire RGY interface.
.LI
ERA triggers and search capability.
.LI
User credentials carrying machine attributes.
.LI
Non-RPC interface to \*(lBsecd\*(lE.
.LE
.P
All of these areas are beyond the scope of this limited
project.  We make no attempt to evaluate the importance or
usefulness of any of them, and expect that they may be raised as
future issues post DCE 1.2.
.P
.H 1 "TERMINOLOGY"
.P
...\"Definitions of all \*(qBnew\*(qE terms used within this document.
...\"Use a list like the following:
.P
N/A.
...\".aL
...\"PUBLISH_CHECK
...\".LI
...\"\*(bB<TermOne>\*(bE
...\".P
...\"<Definition of "TermOne".>
...\".LI
...\"\*(bB<TermTwo>\*(bE
...\".P
...\"<Definition of "TermTwo".>
...\".LE
.P
.H 1 "REQUIREMENTS"
.P
...\"Discusses areas such as security, portability, and internationalization
...\"that must be addressed by this technology.  This could be a list, or
...\"just a general discussion, as appropriate.
There should be no publicly visible functional changes as a
result of this project.
.P
.H 1 "FUNCTIONAL DESCRIPTIONS"
.P
...\"Specifies the functional characteristics and features of the component
...\"or subsystem.  Normally, this will be the most substantial section of
...\"the document.
.P
The following descriptions are given solely to provide direction
to those investigating each area.  The actual changes required
for each selected area will be documented in implementation
specifications as those projects are staffed and funded.
Projects that are expected to appear in DCE 1.2 are given first,
then longer-term projects are discussed.
.P
.H 2 "Short Term Projects (Committed for DCE 1.2)"
.P
.H 3 "Memory leak cleanup"
.P
Because server size is one of the more limiting factors of
security scalability, we undertook an effort to fix all DCE 1.1
memory leaks that we could find with a well-known memory
analyzer.  This was a multi-week effort.
.P
.H 3 "Better cleanup of database memory"
.P
The security server backend database had legacy code (from a now
obsolete operating system with poor malloc/free performance)
that attempted to reuse deleted database entries, instead of
freeing the memory.  This (mis)feature results in the loss of
large amounts of memory over the lifetime of a long-running
security server with a large registry database.  Given that
malloc/free perform better on most platforms today, and noting
that the reuse of memory has been inadequate in the current
implementation because of the type of keys used to index the
data storage, this was deemed worth fixing in the 1.2 timeframe.
.P
The scope of work for this effort included determining the
algorithm for deletion of nodes from a 2-3 Balanced Tree (it was
left as an exercise to the reader in the reference text used for
the rest of the algorithms).  Before we got around to start
implementing it from scratch, it was found that this same
database code had been used for the \*(lBglbd\*(lE (Global
Location Broker Daemon) submitted by HP/Apollo as part of DCE
1.0, and that the owner of that component had worked out the
algorithm and included it in the reference source.  The rest of
the work included a rewrite of some of the code to work with the
data structures in use by the security server database, a code
review/inspection and a test effort.
.P
.H 3 "Security salvage tool rewrite"
.P
For a long time, it had been known that the salvager tool
(\*(lBsec_salvage_db\*(lE) used up an inordinate amount of
memory, for even relative small (100's of accounts) registry
databases.  During OSF tests, it was determined that it was
impossible to salvage a database of more than 10,000 accounts
with any of the available test machines.  Work here verified
that even with 100's of megabytes of swap, the way that the
salvager reconstructed the database in memory prevented us from
salvaging a database that large.  Given that many DCE customers
may start to work with large databases in the near future, it
was deemed necessary to fix this for DCE 1.2.
.P
A combination of code inspection and redesign, along with
running memory leakage analyzers over the tool, helped us come
up with a new salvager that works on large databases (many
thousands of accounts) even on minimally configured DCE server
machines (e.g., 64MB memory, 128MB swap).
.P
.H 3 "Security client binding improvement"
.P
As cells become much larger, and the number of servers used to
support those cells becomes larger, it also becomes painfully
slow to wait for rebinding to occur.  The default RPC timeout
used for calls to the DCE registry in all previous releases has
been 30 seconds.  It has been determined that this timeout is
too long, and that many users feel that the system is down if
there is no response in a matter of seconds.  See the following
list for details.
.P
.aL
.LI
\*(iBRebind performance.\*(iE
.P
Changes were made to the binding code submitted to DCE 1.2.1, to
rebind on failure once for each server in the list, using 4
second timeouts.  If there is no response from any of the
servers, using a 4 second timeout, the binding code will
automatically retry each server again with a 30 second timeout.
The maximum number of 30 second tries will be 5, as with
previous releases.  We found with trial uses here and at
customer sites, that this greatly improved the response time of
DCE as a whole, in a busy/changing network environment.
.LI
\*(iBUpdate rebind.\*(iE
.P
Another improvement was to allow update bindings to rebind on
error.  Prior to DCE 1.2.1, update bindings would not rebind on
error (because there could only be one master).  In an
environment where the master server might be temporarily
unavailable (e.g., 60 seconds) or the replica that you've
contacted to find the master might be down, this caused annoying
errors on client machines.
.LI
\*(iBRebind on bad state.\*(iE
.P
Another problem that could occur in a large cell with many
replicas is that you could attempt an operation to a security
replica that was being reinitialized for some reason.  In prior
releases, this would just return a \*(qBBad State\*(qE error.
As of DCE 1.2.1, it now attempts to rebind to another server
after receiving this error.
.LI
\*(iBStale binding cache.\*(iE
.P
There has always been a problem administering multiple security
servers with tools like \*(lBsec_admin\*(lE.  For example:
.P
.aL
.LI
Stop a security server (\*(lBsecd\*(lE).
.LI
Attempt to bind to any \*(lBsecd\*(lE in the cell for the next
command.
.LE
.P
The bind in step (ii) could end up retrieving the binding
obtained in step (i) from the binding cache, even though the
binding is no longer useful.
.P
To fix this problem with the binding cache, DCE 1.2.1 now
ensures that the \*(lBrequested_site_name\*(lE in a registry
binding lookup matches the \*(lBrequested_site_name\*(lE on a
cache entry, before returning it.  With this additional check,
the binding to a specific server obtained in step (ii) can no
longer be returned from the request for a binding to \*(qBany
\*(lBsecd\*(lE in the cell\*(qE in step (i).
.LE
.P
.H 3 "Configuration file management"
.P
Part of the problem with managing any large cell of DCE client
machines, is the management overhead involved with the many
copies of configuration files.
.P
In a large cell environment, both the \*(lBpe_site\*(lE file
(security server binding list) and the \*(lBkrb.conf\*(lE file
(Kerberos configuration file) can become out of date on every
client, as security servers are added/removed/moved within a
cell.
.P
To solve this problem, we have added functionality to
\*(lBdced\*(lE, to automatically update the information in these
files on a regular basis.
.P
.H 3 "GSSAPI performance"
.P
There was a modification request opened against GSSAPI after DCE
1.1 to notify us that the \*(lBgssapi.c\*(lE module's misuse of
serviceability debugging statements was causing a fairly large
performance hit.  We investigated the request and made the
necessary fixes (a little more work than the request described)
to eliminate the performance hit.
.P
.H 3 "General security performance work"
.P
Performance of clients plays a big part in scalability of DCE
cells.  If clients do not perform adequately to begin with, then
any decrease in cell speed as a result of increased server size
will be more likely to cause problems.  Given that the
perception of overall performance can be more important than
absolute performance numbers, we went looking for things that
appeared to be taking longer than they should:
.P
.aL
.LI
\*(iBName translation performance.\*(iE
.P
In DCE 1.1, there was a limitation in \*(lBsec_id_parse_*()\*(lE
calls, where they would never get a cache hit if the input
global name was cell relative.  This was fixed, along with some
other performance improvements to the code (e.g., make calls to
registry binding from the \*(lBsec_id\*(lE layer more
efficient).
.LI
\*(iBCDS security context lookups.\*(iE
.P
The CDS client code calls \*(lBsec_login_export_context()\*(lE
twice for every usage (once with a 0 length, so it can determine
the actual length needed).  At first, this appeared to be
unnecessary overhead, but it turns out to be necessary given the
current CDS client implementation.  The quick fix is to make the
simple case of \*(lBsec_login_export_context()\*(lE (when called
with a 0 length buffer) a fast path that does hardly any work.
This fix improved CDS lookups by upwards of 10% in hand testing.
.LI
\*(iBTicket cache storage.\*(iE
.P
New Kerberos tickets were always appended to the end of the
credential file cache, allowing it to grow without bound.  This
limitation required overhead on every lookup to scan over the
expired credentials.  This caused fairly large credential cache
files for users if they stayed logged in for days at a time, and
for machines that use the same credential cache for as long as
they remain up.
.P
New tickets now overwrite any existing ticket for the same
client and server as long as the tickets are the same size.  If
the existing ticket has not expired, then the new ticket
overwrites the old one only if the \*(lBauthdata\*(lE matches.
Otherwise the new tickets are appended as previously.
.LI
\*(iBTicket cache lookups.\*(iE
.P
Retrieval of a ticket from the credential file cache required a
new lookup and other overhead each time an expired ticket was
encountered, even if it was known that only unexpired tickets
were desired.  To remove this overhead, the logic for skipping
over expired tickets has been moved down the code chain to a
lower-level ticket retrieval routine.
.LE
.P
.H 3 "Cryptographic performance"
.P
We made a small change to the implementation of the MD5
algorithm to save a few instructions per iteration, and we
replaced the DES algorithm with a newer one that saves a few
instructions per iteration.  Hand testing of the algorithms
themselves shows that these two changes gave us the following
performance improvements: improves MD5 inner loop ~200%, DES
inner loop ~50%.  It's likely that these changes will speed up
authenticated RPC by a few percent, though no performance
testing is planned or required for 1.2.
.P
.H 3 "utc_gettime() performance"
.P
\*(lButc_gettime()\*(lE was slower than it needed to be.  The
changes to improve performance include using an exponential
backoff for mapping the \*(lBshmid\*(lE on failure and more
efficient lookups (at most every 10 seconds) to avoid the need
to lock/unlock the shared memory segment as often.
.P
With this fix, CDS speeds up ~10-20% if \*(lBdtsd\*(lE isn't
running.  The fix results in a small performance improvement
(reduced syscalls) if \*(lBdtsd\*(lE is running.  While this
change isn't to security itself, it can speed up security
binding indirectly.
.P
.H 3 "NSI performance"
.P
NSI wasn't setting the CDS \*(lBMaybeMore\*(lE bit.  This bit is
a hint which is used when a client knows that it will be
fetching more than one attribute on a given name.  The fix to
\*(lBnsutil.c\*(lE causes this bit to be set more often, leading
to better cold CDS cache performance.
.P
.H 2 "Other Potential Projects (Not Committed for DCE 1.2)"
.P
.H 3 "Fine grain checkpointing"
.P
The problem of security server availability during checkpoints
has already been determined to exist in actual simulation tests
run by the University of Michigan CITI program (see [Carter]).
.P
This should be considered one of the the highest priority
scalability items listed here.  Unfortunately, the amount of
work necessary to scope, specify, implement, build and test
finer grain database use cannot be adequately staffed within a
subset of the allotted 6 months.
.P
This work would entail a good size effort at reorganizing the
existing backend registry database code (all of which is
organized around reading and writing entire database trees
from/to disk at one time), and writing/testing database
conversion code to migrate from existing security databases.
.P
.H 3 "Configurable checkpoints"
.P
For the short term, DCE 1.2 does include the configurable
checkpoint mechanism for the security server, where you can
specify the interval or exact times that checkpoints should
occur.  This mechanism should allow administrators to minimize
the affect that checkpointing has on security server
availability.
.P
.H 3 "More efficient ACL storage"
.P
Ever since DCE 1.0, we have intended to provide internal
\*(lBsecd\*(lE functionality that would allow \*(qBsparse
ACLs\*(qE (reuse of existing ACLs via refcount and
copy-on-write).  We must consider this a high priority issue,
given the enormous overhead that not fixing this earlier has
caused with large registry databases.
.P
It has been determined at Transarc that the ACL relation of the
security database can use up to one-third of the size of the
entire database.  Given that most of the ACLs in the security
database are redundant duplicates, we should be able to gain an
enormous Virtual Memory, Disk Space, and Checkpoint Time savings
by providing this functionality.  Out of the larger,
non-completed projects, I would consider this second in priority
only to more efficient checkpointing within the scalability
project.
.P
A related and necessary subproject, not included as part of
previous descriptions of this work, is providing a
\*(qBSalvage\*(qE mechanism (via Checkpoints, or manual, or
other means) that would go through the entire database and
compress duplicate ACL entries back into a single refcounted ACL
entry.  This functionality will be necessary to reclaim the
redundant space from existing security databases that are just
migrating forward to the new software, and to periodically
reclaim redundant space used when multiple ACLs are changed and
end up being the same in the end but occupying separate storage.
.P
.H 3 "Client binding rewrite"
.P
It has been determined that the overhead that a client endures
in order to bind to the registry is undesirable.  The current
client binding code has been evolving through many years of DCE
changes and now includes inefficiencies based on changes that
were the right thing to do at the time, to fix a problem or add
new functionality.
.P
The fact that all DCE clients on a particular machine have to go
through a separate CDS clerk to contact the CDS database to get
identical information seems rather inefficient, even wasteful.
We believe that we should be able to improve performance
significantly by having a central daemon (say, \*(lBdced\*(lE)
per machine keep track of the current bindings to the registry.
An additional improvement should be possible by keeping track of
which replicas are currently available.  This would be a very
large win for DCE acceptability in large cells, but not quite as
important as the checkpointing, and maybe only as important as
the sparse ACL work.
.P
There is no way that this work could fit into a subset of the
allotted six months, but smaller fixes (listed above) were made
as a result of initial investigation into the problems.  The
more general problem of binding by \*(qBserver affinity\*(qE was
determined to be a general problem with DCE itself and should be
addressed for all RPC binding lookups, not just security.
.P
.H 3 "Replace back end database for security server"
.P
Initial work will entail estimating how long it would take to do
the actual replacement.  Ongoing work during the larger
project's \*(qBinitial scoping\*(qE will include investigating
whether there are any existing databases that we can use in the
timeframe given to this project.
.P
.H 3 "Propagation model changes"
.P
It takes a large number of RPCs and a lot of server overhead, to
propagate changes to replicas in a rapidly changing large-scale
environment.  In addition, it takes too long (hours) to
initialize a replica from a single master security server cell,
with hundreds of thousands of accounts.
.P
Although the investigation of the solution to this problem still
needs to be done at some point, we can attest to the magnitude
of the problem at this time.  It is not something that is
solvable by merely speeding up a few operations.  We really need
a bulk initialization protocol for security replicas.
.P
.H 1 "DATA STRUCTURES"
.P
...\"Details any data structures that are to be exposed to the user of this
...\"component/technology.
.P
N/A.
.H 1 "USER INTERFACES"
.P
...\"Descriptions of how users of the component will interact with the
...\"executed code to produce the expected function.  This should include
...\"both command line interfaces and graphic user interfaces.
N/A.
.P
.H 1 "API'S"
.P
...\"Details the interfaces to the modules that will be available to users of
...\"this component/subsystem.
N/A.
.P
.H 1 "REMOTE INTERFACES"
.P
...\"In a client/server model, a description of the services which may be
...\"invoked across network interfaces.  In particular, any RPC interfaces
...\"should be specified by their IDL/ACF interface descriptions.  Remote
...\"interfaces not described by IDL should provide detailed definition
...\"including an octet-level description of the wire format and a protocol
...\"state machine.
N/A.
.P
.H 1 "MANAGEMENT INTERFACES"
.P
...\"Details how the component is configured, started, monitored, stopped,
...\"etc.  Should specify all user interfaces, local API's, and remote
...\"interfaces pertinent to management.  This section should also describe
...\"how the component will modify the existing \*(lBdce_config\*(lE
...\"management tool.
N/A.
.P
.H 1 "RESTRICTIONS AND LIMITATIONS"
.P
...\"Notes the restrictions and limitations of this technology, including
...\"system resource consumption limits.
The work submitted to DCE 1.2 will be limited to that which does
not adversely affect the quality of the system as a whole, and
to that which does not affect compatibility in any way.
.P
.H 1 "OTHER COMPONENT DEPENDENCIES"
.P
...\"Notes the dependencies between this and other components/subsystems.
...\"Explicitly describe the use of any existing or proposed DCE APIs or
...\"remote interfaces.  Describe any use or extension of existing DCE
...\"databases, such as naming or security.
N/A.
.P
.H 1 "COMPATIBILITY"
.P
...\"Details the compatibility of this design with past designs/work.  There
...\"should be explicit descriptions of how this component will diverge from
...\"existing DCE 1.0/1.1 implementations.
N/A.
.P
.H 1 "STANDARDS"
.P
...\"Notes the standards being followed/used by this component/subsystem.
N/A.
.P
.H 1 "OPEN ISSUES"
...\"PUBLISH_CHECK
.P
One of the largest problems we have with addressing scalability
and performance issues is the lack of a good, generic
scalability and performance test.  It's one thing to say that
you've made a fix to DES to speed up the inner loop by X%, and
yet another to find that it increases a fixed size single RPC by
Y%, but that doesn't tell us what we're doing for DCE as a
whole.  Customers need to see response time improvements, and
while RPC performance tests will let us know if we're making
RPCs any faster, we need to know what's making DCE in general
faster or slower as changes to the source base are made (both
for verifying supposed performance/scalability fixes and for
verifying that we aren't regressing during a release development
cycle).
.P
IBM has offered to DCE 1.2, and is expected to deliver to the
\*(qBnosupport tree\*(qE, a generic scalability test that they
have developed to measure DCE's ability to scale, using a
simulated customer application.  A test like this is vital to
the DCE performance effort and should be utilized where possible
to measure DCE scalability during (at least before and after)
release development cycles to see what progress (or not) is
being made.
.P
...\" =========================================================================
...\" Appendices go here, using aH macros.
...\" =========================================================================
...\" .P
...\" .aH "<APPENDIX TITLE>"
...\" .P
...\" None.
...\" .P
...\" =========================================================================
...\" References go here, as an unnumbered heading.
...\" =========================================================================
.P
.HU "REFERENCES"
.P
...\"List relevant documents, in a list like the following:
.P
.VL 12 0
...\"PUBLISH_CHECK
.LI "[Carter]"
M. Carter, \*(qBAdding 50,200 Users to a DCE Registry.\*(qE,
February 1994.\*(f!
.FS
gopher://gopher.citi.umich.edu/11/public/techreports/ASCII/citi-tr-94-1.ascii
or
gopher://gopher.citi.umich.edu/11/public/techreports/PS.Z/citi-tr-94-1.ps.
.FE
.LE
.P
...\" =========================================================================
...\" Author's address goes here, as unnumbered heading, at end of doc.
...\" =========================================================================
.P
.ne 3+5
.HU "AUTHORS' ADDRESSES"
.P
...\"PUBLISH_CHECK
.tl $Michael Burati$$Internet email: burati@apollo.hp.com$
.tl $Hewlett Packard$$Telephone: +1-508-436-4351$
.tl $300 Apollo Drive$$$
.tl $Chelmsford, MA 01824$$$
.tl $USA$$$
.P
...\" =========================================================================
...\" Done!
...\" =========================================================================
